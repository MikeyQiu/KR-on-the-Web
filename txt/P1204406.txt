An Embedded Deep Learning based Word Prediction

Seunghak Yu∗

Nilesh Kulkarni∗

Haejun Lee

Jihie Kim

Samsung Electronics Co. Ltd., South Korea
{seunghak.yu, n93.kulkarni, haejun82.lee, jihie.kim}@samsung.com

7
1
0
2
 
l
u
J
 
6
 
 
]
L
C
.
s
c
[
 
 
1
v
2
6
6
1
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Recent developments in deep learning
with application to language modeling
have led to success in tasks of text process-
ing, summarizing and machine translation.
However, deploying huge language mod-
els for mobile device such as on-device
keyboards poses computation as a bottle-
neck due to their puny computation capac-
ities. In this work we propose an embed-
ded deep learning based word prediction
method that optimizes run-time memory
and also provides a real time prediction
environment. Our model size is 7.40MB
and has average prediction time of 6.47
ms. We improve over the existing methods
for word prediction in terms of key stroke
savings and word prediction rate.

1 Introduction

Recurrent neural networks (RNNs) have delivered
state of the art performance on language model-
ing (RNN-LM) (Mikolov et al., 2010; Kim et al.,
2015; Miyamoto and Cho, 2016). A major ad-
vantage of RNN-LMs is that these models in-
herit the property of storing and accessing infor-
mation over arbitrary context lengths from RNNs
(Karpathy et al., 2015). The model takes as input
a textual context and generates a probability dis-
tribution over the words in the vocabulary for the
next word in the text.

However, the state of the art RNN-LM requires
over 50MB of memory ((Zoph and Le, 2016) con-
tains 25M parameters; quantized to 2 bytes). This
has prevented deploying of RNN-LM on mobile
devices for word prediction, word completion, and
error correction tasks. Even on high-end devices,
keyboards have constraints on memory (10MB)

∗ Equal contribution

and response time (10ms), hence we cannot apply
RNN-LM directly without compression.

Various deep model compression methods have
been developed. Compression through matrix fac-
torization (Sainath et al., 2013; Xue et al., 2013;
Nakkiran et al., 2015; Prabhavalkar et al., 2016;
Lu et al., 2016) has shown promising results in
model compression but has been applied to the
tasks of automatic speech recognition. Network
pruning (LeCun et al., 1989; Han et al., 2015a,b)
keeps the most the relevant parameters while re-
moving the rest. Weight sharing (Gong et al.,
2014; Chen et al., 2015; Ullrich et al., 2017) at-
tempts to quantize the parameters into clusters.
Network pruning and weight sharing methods
only consider memory constraints while com-
pressing the models. They achieve high compres-
sion rate but do not optimize test time computation
and hence, none of them are suitable for our appli-
cation.

To address the constraints of both memory size
and computation, we propose a word prediction
method that optimizes for run-time, and mem-
ory to render a smooth performance on embed-
ded devices. We propose shared matrix factor-
ization to compress the model along with using
knowledge distillation to compensate the loss in
accuracy while compressing. The resulting model
is approximately 8× compressed with negligible
loss in accuracy and has a response time of 6.47ms
per prediction. To the best of our knowledge, this
is the ﬁrst approach to use RNN-LMs for word
prediction on mobile devices whereas previous ap-
proaches used n-gram based statistical language
models (Klarlund and Riley, 2003; Tanaka-Ishii,
2007) or unpublished. We achieve better per-
formance than existing approaches in terms of
Key Stroke Savings (KSS) (Fowler et al., 2015)
and Word Prediction Rate (WPR). The proposed
method has been successfully commercialized.

(cid:46)(cid:81)(cid:82)(cid:90)(cid:79)(cid:72)(cid:71)(cid:74)(cid:72)(cid:3)(cid:39)(cid:76)(cid:86)(cid:87)(cid:76)(cid:79)(cid:79)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:85)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:9)(cid:3)(cid:53)(cid:72)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:76)(cid:81)(cid:74)

Shared Matrix 
Decomposition

Initialization
Using SVD

Teacher models (    )
 

(cid:17)
(cid:17)
(cid:17)

Figure 1: Overview of the proposed method. oki: the ith logits of kth model, pi: the ith softened output
of ensemble. (Psof tmax × Wshared)T and Pembed × Wshared substitute Wsof tmax and Wembed in the
proposed model respectively.

(cid:17)(cid:17)(cid:17)

Distilled
model

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

(cid:54)(cid:82)(cid:73)(cid:87)(cid:80)(cid:68)(cid:91)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)

(cid:53)(cid:72)(cid:70)(cid:88)(cid:85)(cid:85)(cid:72)(cid:81)(cid:87)
(cid:43)(cid:76)(cid:71)(cid:71)(cid:72)(cid:81)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)

(cid:58)(cid:82)(cid:85)(cid:71)(cid:3)
(cid:40)(cid:80)(cid:69)(cid:72)(cid:71)(cid:71)(cid:76)(cid:81)(cid:74)

2 Proposed Method

2.1 Overview

Figure 1 shows an overview of our approach. We
propose a pipeline to compress RNN-LM for on-
device word prediction with negligible loss of ac-
curacy. Following sections describe each steps of
our method. In Section 2.2, we describe the basic
architecture of language model which is used as
an elementary model in our pipeline. In Section
2.3, we describe method to make a distilled model
by knowledge distillation and compensate for loss
in accuracy due to compression. Following Sec-
tion 2.4 describes model compression strategies to
reduce memory usage and run-time.

2.2 Baseline Language Model

All language models in our pipeline mimic the
conventional RNN-LM architecture as in Figure 2.
Each model consists of three parts: word embed-
ding, recurrent hidden layers, and softmax layer.
Word embedding (Mikolov et al., 2013) takes in-
put word wt at time t as one hot vector and maps
it to xt in continuous vector space Rd. This pro-
cess is parametrized by embedding matrix as xt =
Wembedwt, where Wembed ∈ Rd×|V |, V is the vo-
cabulary, and d is the dimension of embedding
space.

is input

The embedded word xt

to LSTM
based hidden layers. We use the architecture
similar to the non-regularized LSTM model by
(Zaremba et al., 2014). The hidden state of the
LSTM unit ht is afﬁne-transformed by the soft-
max function, which is a probability distribution
over all the words in the V as in Eq. 1.

p(wt = i|w<t) =

exp(W T
Pj exp(W T

i ht−1 + bi)

j ht−1 + bj)

(1)

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

Figure 2: Conventional RNN-LM.

We train the model with cross-entropy loss
function using Adam (Kingma and Ba, 2014) op-
timizer.
Initial learning rate is set to 0.001 and
decays with roll-back after every epoch with no
decrement in perplexity on the validation dataset.

2.3 Distilling Language Model

Knowledge Distillation (KD) (Hinton et al., 2015)
uses an ensemble of pre-trained teacher models
(typically deep and large) to train a distilled model
(typically shallower). KD helps provide global in-
formation to distilled model, and hence regularizes
and gives faster updates for the parameters.

We refer to ‘hard targets’ as true labels from the
data. Contrary to the baseline model which only
uses ‘hard targets’, we adapt KD to learn a com-
bined cost function from ‘hard targets’ and ‘soft
targets’. ‘Soft targets’ are generated by adding a
temperature T (Eq.2) to averaged logits of teach-
ers’ zi to train distilled model.

pi =

exp( zi
T )
Pj exp( zj
T )

(when zi = oki)

(2)

Experiments in Table 2 shows improvement in
perplexity compared to the models trained only
with ‘hard targets’. We also use the combined cost

Language
EN
EN

Source Words Sentences
Reddit
Twitter

71.2M
55.2M

1.1B
0.9B

Table 1: Collected data for language modeling.

function to retrain the model after compression.
Retraining with combined cost function compen-
sates for the loss in performance due to compres-
sion proposed in Section 2.4.

2.4 Shared Matrix Factorization

We present a compression method using shared
matrix factorization for embedding and softmax
layers in a RNN-LM. In the language model word
embedding is trained to map words with similar
context into a solution space closely, while soft-
max layer maps context to similar words. There-
fore, we assume we can ﬁnd sharable parameters
that have characteristics similar to both embedding
and softmax. Recently, there have been preprints
(Press and Wolf, 2016; Inan et al., 2016) suggest-
ing an overlap of characteristics between embed-
ding and softmax weights.

We facilitate sharing by Wshared across softmax
and embedding layers, allowing for more efﬁcient
parameterization of weight matrices. This reduces
the total parameters in embedding and softmax
layers by half. We introduce two trainable ma-
trices Pembed and Psof tmax, called the projection
matrices, that adapt the Wshared for the individual
tasks of embedding and softmax as in Eq. 3.

Wembed = PembedWshared
Wsof tmax = (Psof tmaxWshared)T

(3)

Furthermore,

in the layers parametrized by
Wshared only a few outputs are active for a given
input, we suspect that they are probably correlated
and the underlying weight matrix has low rank r.
For such a weight matrix, W , there exists a factor-
r×n where W A and
ization of Wm×n = W A
W B are full rank (Strang et al., 1993). In our low-
rank compression strategy, we expect rank of W
as r′ which leads to factorization in Eq. 4.

m×rW B

Wm×n ≈ W A

m×r′W B

r′×n

(4)

Moreover, we compress by applying Singu-
lar Value Decomposition (SVD) to initialize the
decomposed matrices.
SVD has been pro-
posed as a promising method to perform fac-

Model
Baseline
+ KD
+ Shared Matrix
+ Low-Rank, Retrain
+ Quantization

PP
56.55
55.76
55.07
59.78
∼59.78

Size
56.76
56.76
33.87
14.80
7.40

CR
-
-
1.68×
3.84×
7.68×

Table 2: Evaluation of each model in our pipeline.
Baseline uses ‘hard targets’ and Knowledge Distil-
lation (KD) uses ‘soft targets’. Size is in MB and
16 bit quantization is applied to the ﬁnal model.
PP: Word Perplexity, CR: Compression Rate.

torization for low rank matrices (Nakkiran et al.,
2015; Prabhavalkar et al., 2016). We apply
SVD on Wm×n to decompose it as Wm×n =
Um×mΣm×nV T
n×n. U, Σ, V are used to initial-
ize W A and W B for the retraining process. We
use the top r′ singular values from Σ and corre-
sponding r′ rows from V T . Therefore, W A =
Um×mΣm×r′ and W B = V T
r′×n, we replace all the
linear transformations using Wm×n with W A ×
W B. Approximation in Eq. 4 during factoriza-
tion leads to degradation in model performance
but when followed by ﬁne-tuning through retrain-
ing it results in restoration of accuracy. This com-
pression scheme, without loss of generality is ap-
plied to Wshared.

3 Experiment Results

3.1 Evaluation of proposed approach
Table 1 describes the source of dataset1, number of
words and sentences. This data is extracted from
resources on the Internet, in a raw form with 8 bil-
lion words. We uniformly sample 10% (196 mil-
lion) from the dataset. It consists of 60% for train-
ing, 10% for validation and 30% for test.

We preprocess raw data to remove noise and
ﬁlter phrases. We also replace numbers in the
dataset with a special symbol, hN U M i and out-
of-vocabulary (OOV) words with hU N Ki. We
append start of sentence token hsi and end of sen-
tence token h/si to every sentence. We convert our
dataset to lower-case to increase vocabulary cov-
erage and use top 15K words as the vocabulary.

Table 2 shows evaluation result of each step
in our pipeline. We empirically select 600 em-
bedding dimension, single hidden layer with 600

1The

is
https://github.com/meinwerk/WordPrediction

available

dataset

at

Context

Proposed
Apple
SwiftKey
Samsung
Google

Context

Proposed
Apple
SwiftKey
Samsung
Google

Developer KSS(%) WPR(%)
65.11
Proposed
64.35
Apple
62.39
Swiftkey
59.81
Samsung
58.89
Google

34.38
33.73
31.14
28.84
28.02

Table 3: Performance comparison of proposed
method and other commercialized keyboard solu-
tions by various developers.

LSTM hidden units for baseline model. Word
Perplexity is used to evaluate and compare our
models. Perplexity over the test set is computed
i=1 log p(wi|w<i)), where N is the
as exp(−
number of words in the test set. Our ﬁnal model
is roughly 8× smaller than the baseline with 5%
(3.16) loss in perplexity.

N PN

1

3.2 Performance Comparison

We compare our performance with existing
word prediction methods using manually curated
dataset2, which covers general keyboard scenar-
ios. Due to lack of access to language modeling
engine used in other solutions, we are unable to
compare word perplexity. To the best of our ef-
forts, we try to minimize all the personalization
these solutions offer in their prediction engines.
We performed human evaluation on the manually
curated dataset. We employed three evaluators
from the inspection group to cross-validate all the
tests in Table 3 to eliminate human errors.

We achieve the best performance compared to
other solutions in terms of Key Stroke Savings
(KSS) and Word Prediction Rate (WPR) as shown
in Table 3. KSS is a percentage of key strokes not
pressed compared to a keyboard without any pre-
diction or completion capabilities. Every charac-
ter the user types using the predictions of the lan-
guage model counts as key stroke saving. WPR
is percentage of correct word predictions in the
dataset.

While evaluating KSS and WPR, the number of
predictions for the next word is same for all the
solutions. The proposed method shows 65.11% in
terms of KSS and 34.38% in WPR which is the
best score among the compared solutions. For ex-

2The dataset consists of 102 sentences (926 words,
3,746 characters) which are collection of formal and in-
formal utterances from various sources.
It is available at
https://github.com/meinwerk/WordPrediction

Figure 3: Example of comparision with other
commercialized solutions. Predicted words for the
contexts “Last year I” and “Next year I”.

ample, if the user intents to type “published” and
types only 34.89% characters (“pub”), one of the
top two predictions is “published”. Furthermore,
34.38% words the user intents to type are among
the top three predictions. Figure 3 shows an exam-
ple of word prediction across different solutions.
In this example, we can spot some grammatical
errors in the predictions from other solutions.

4 Conclusions and Future Work

We have proposed a practical method for train-
ing and deploying RNN-LM for mobile device
which can satisfy memory and runtime constrains.
Our method utilizes averaged output of teach-
ers to train a distilled model and compresses its
weight matrices by applying shared matrix fac-
torization. We achieve 7.40MB in memory size
and satisfy the run time constraint of 10ms in av-
erage prediction time (6.47ms). Also, we have
compared proposed method to existing commer-
cialized keyboards in terms of key stroke savings
and word prediction rate. In our benchmark tests,
our method out-performed the others.

RNN-LM does not support personalization in-
dependently. However, our model which is cur-
rently commercialized uses RNN-LM along with
n-gram statistics to learn user’s input pattern and
uni-gram to cover OOV words. Future work is
required on directly personalizing the RNN-LM
model to user’s preferences rather than interpolat-
ing it with n-gram statistics to take full advantage.

Acknowledgments

References

Wenlin Chen, James T Wilson, Stephen Tyree, Kilian Q
Weinberger, and Yixin Chen. 2015. Compressing
In ICML.
neural networks with the hashing trick.
pages 2285–2294.

Andrew Fowler, Kurt Partridge, Ciprian Chelba, Xiao-
jun Bi, Tom Ouyang, and Shumin Zhai. 2015. Ef-
fects of language modeling and its personalization
on touchscreen typing performance. In Proceedings
of the 33rd Annual ACM Conference on Human Fac-
tors in Computing Systems. ACM, pages 649–658.

Yunchao Gong, Liu Liu, Ming Yang, and Lubomir
Bourdev. 2014. Compressing deep convolutional
networks using vector quantization. arXiv preprint
arXiv:1412.6115 .

Song Han, Huizi Mao, and William J Dally. 2015a.
Deep compression: Compressing deep neural net-
works with pruning, trained quantization and huff-
man coding. arXiv preprint arXiv:1510.00149 .

Song Han, Jeff Pool, John Tran, and William Dally.
2015b. Learning both weights and connections for
efﬁcient neural network. In Advances in Neural In-
formation Processing Systems. pages 1135–1143.

Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. 2015.
Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531 .

Hakan Inan, Khashayar Khosravi, and Richard Socher.
2016. Tying word vectors and word classiﬁers:
A loss framework for language modeling. arXiv
preprint arXiv:1611.01462 .

Andrej Karpathy, Justin Johnson, and Li Fei-Fei. 2015.
Visualizing and understanding recurrent networks.
arXiv preprint arXiv:1506.02078 .

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M Rush. 2015. Character-aware neural language
models. arXiv preprint arXiv:1508.06615 .

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980 .

Nils Klarlund and Michael Riley. 2003. Word n-grams
for cluster keyboards. In Proceedings of the 2003
EACL Workshop on Language Modeling for Text
Entry Methods. Association for Computational Lin-
guistics, pages 51–58.

Yann LeCun, John S Denker, Sara A Solla, Richard E
Howard, and Lawrence D Jackel. 1989. Optimal
brain damage. In NIPs. volume 2, pages 598–605.

Zhiyun Lu, Vikas Sindhwani, and Tara N Sainath.
Learning compact recurrent neural net-
2016.
works. In Acoustics, Speech and Signal Processing
(ICASSP), 2016 IEEE International Conference on.
IEEE, pages 5960–5964.

Tomas Mikolov, Martin Karaﬁ´at, Lukas Burget, Jan
Cernock`y, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In Inter-
speech. volume 2, page 3.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
In Advances in neural information processing
ity.
systems. pages 3111–3119.

Yasumasa Miyamoto and Kyunghyun Cho. 2016.
language model.

Gated word-character recurrent
arXiv preprint arXiv:1606.01700 .

Preetum Nakkiran, Raziel Alvarez, Rohit Prabhavalkar,
and Carolina Parada. 2015. Compressing deep neu-
ral networks using a rank-constrained topology. In
INTERSPEECH. pages 1473–1477.

Rohit Prabhavalkar, Ouais Alsharif, Antoine Bruguier,
and Lan McGraw. 2016. On the compression of re-
current neural networks with an application to lvcsr
acoustic modeling for embedded speech recogni-
In Acoustics, Speech and Signal Processing
tion.
(ICASSP), 2016 IEEE International Conference on.
IEEE, pages 5970–5974.

Oﬁr Press and Lior Wolf. 2016. Using the output
arXiv

embedding to improve language models.
preprint arXiv:1608.05859 .

Tara N Sainath, Brian Kingsbury, Vikas Sindhwani,
Ebru Arisoy, and Bhuvana Ramabhadran. 2013.
Low-rank matrix factorization for deep neural net-
work training with high-dimensional output
tar-
In Acoustics, Speech and Signal Processing
gets.
(ICASSP), 2013 IEEE International Conference on.
IEEE, pages 6655–6659.

Gilbert Strang, Gilbert Strang, Gilbert Strang, and
Introduction to linear alge-
Gilbert Strang. 1993.
bra, volume 3. Wellesley-Cambridge Press Welles-
ley, MA.

Kumiko Tanaka-Ishii. 2007. Word-based predictive
text entry using adaptive language models. Natural
Language Engineering 13(1):51.

Karen Ullrich, Edward Meeds, and Max Welling. 2017.
Soft weight-sharing for neural network compres-
sion. arXiv preprint arXiv:1702.04008 .

Jian Xue, Jinyu Li, and Yifan Gong. 2013. Restruc-
turing of deep neural network acoustic models with
singular value decomposition. In Interspeech. pages
2365–2369.

Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals.
Recurrent neural network regularization.

2014.
arXiv preprint arXiv:1409.2329 .

Barret Zoph and Quoc V Le. 2016. Neural architecture
search with reinforcement learning. arXiv preprint
arXiv:1611.01578 .

An Embedded Deep Learning based Word Prediction

Seunghak Yu∗

Nilesh Kulkarni∗

Haejun Lee

Jihie Kim

Samsung Electronics Co. Ltd., South Korea
{seunghak.yu, n93.kulkarni, haejun82.lee, jihie.kim}@samsung.com

7
1
0
2
 
l
u
J
 
6
 
 
]
L
C
.
s
c
[
 
 
1
v
2
6
6
1
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Recent developments in deep learning
with application to language modeling
have led to success in tasks of text process-
ing, summarizing and machine translation.
However, deploying huge language mod-
els for mobile device such as on-device
keyboards poses computation as a bottle-
neck due to their puny computation capac-
ities. In this work we propose an embed-
ded deep learning based word prediction
method that optimizes run-time memory
and also provides a real time prediction
environment. Our model size is 7.40MB
and has average prediction time of 6.47
ms. We improve over the existing methods
for word prediction in terms of key stroke
savings and word prediction rate.

1 Introduction

Recurrent neural networks (RNNs) have delivered
state of the art performance on language model-
ing (RNN-LM) (Mikolov et al., 2010; Kim et al.,
2015; Miyamoto and Cho, 2016). A major ad-
vantage of RNN-LMs is that these models in-
herit the property of storing and accessing infor-
mation over arbitrary context lengths from RNNs
(Karpathy et al., 2015). The model takes as input
a textual context and generates a probability dis-
tribution over the words in the vocabulary for the
next word in the text.

However, the state of the art RNN-LM requires
over 50MB of memory ((Zoph and Le, 2016) con-
tains 25M parameters; quantized to 2 bytes). This
has prevented deploying of RNN-LM on mobile
devices for word prediction, word completion, and
error correction tasks. Even on high-end devices,
keyboards have constraints on memory (10MB)

∗ Equal contribution

and response time (10ms), hence we cannot apply
RNN-LM directly without compression.

Various deep model compression methods have
been developed. Compression through matrix fac-
torization (Sainath et al., 2013; Xue et al., 2013;
Nakkiran et al., 2015; Prabhavalkar et al., 2016;
Lu et al., 2016) has shown promising results in
model compression but has been applied to the
tasks of automatic speech recognition. Network
pruning (LeCun et al., 1989; Han et al., 2015a,b)
keeps the most the relevant parameters while re-
moving the rest. Weight sharing (Gong et al.,
2014; Chen et al., 2015; Ullrich et al., 2017) at-
tempts to quantize the parameters into clusters.
Network pruning and weight sharing methods
only consider memory constraints while com-
pressing the models. They achieve high compres-
sion rate but do not optimize test time computation
and hence, none of them are suitable for our appli-
cation.

To address the constraints of both memory size
and computation, we propose a word prediction
method that optimizes for run-time, and mem-
ory to render a smooth performance on embed-
ded devices. We propose shared matrix factor-
ization to compress the model along with using
knowledge distillation to compensate the loss in
accuracy while compressing. The resulting model
is approximately 8× compressed with negligible
loss in accuracy and has a response time of 6.47ms
per prediction. To the best of our knowledge, this
is the ﬁrst approach to use RNN-LMs for word
prediction on mobile devices whereas previous ap-
proaches used n-gram based statistical language
models (Klarlund and Riley, 2003; Tanaka-Ishii,
2007) or unpublished. We achieve better per-
formance than existing approaches in terms of
Key Stroke Savings (KSS) (Fowler et al., 2015)
and Word Prediction Rate (WPR). The proposed
method has been successfully commercialized.

(cid:46)(cid:81)(cid:82)(cid:90)(cid:79)(cid:72)(cid:71)(cid:74)(cid:72)(cid:3)(cid:39)(cid:76)(cid:86)(cid:87)(cid:76)(cid:79)(cid:79)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:85)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:9)(cid:3)(cid:53)(cid:72)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:76)(cid:81)(cid:74)

Shared Matrix 
Decomposition

Initialization
Using SVD

Teacher models (    )
 

(cid:17)
(cid:17)
(cid:17)

Figure 1: Overview of the proposed method. oki: the ith logits of kth model, pi: the ith softened output
of ensemble. (Psof tmax × Wshared)T and Pembed × Wshared substitute Wsof tmax and Wembed in the
proposed model respectively.

(cid:17)(cid:17)(cid:17)

Distilled
model

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

(cid:54)(cid:82)(cid:73)(cid:87)(cid:80)(cid:68)(cid:91)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)

(cid:53)(cid:72)(cid:70)(cid:88)(cid:85)(cid:85)(cid:72)(cid:81)(cid:87)
(cid:43)(cid:76)(cid:71)(cid:71)(cid:72)(cid:81)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)

(cid:58)(cid:82)(cid:85)(cid:71)(cid:3)
(cid:40)(cid:80)(cid:69)(cid:72)(cid:71)(cid:71)(cid:76)(cid:81)(cid:74)

2 Proposed Method

2.1 Overview

Figure 1 shows an overview of our approach. We
propose a pipeline to compress RNN-LM for on-
device word prediction with negligible loss of ac-
curacy. Following sections describe each steps of
our method. In Section 2.2, we describe the basic
architecture of language model which is used as
an elementary model in our pipeline. In Section
2.3, we describe method to make a distilled model
by knowledge distillation and compensate for loss
in accuracy due to compression. Following Sec-
tion 2.4 describes model compression strategies to
reduce memory usage and run-time.

2.2 Baseline Language Model

All language models in our pipeline mimic the
conventional RNN-LM architecture as in Figure 2.
Each model consists of three parts: word embed-
ding, recurrent hidden layers, and softmax layer.
Word embedding (Mikolov et al., 2013) takes in-
put word wt at time t as one hot vector and maps
it to xt in continuous vector space Rd. This pro-
cess is parametrized by embedding matrix as xt =
Wembedwt, where Wembed ∈ Rd×|V |, V is the vo-
cabulary, and d is the dimension of embedding
space.

is input

The embedded word xt

to LSTM
based hidden layers. We use the architecture
similar to the non-regularized LSTM model by
(Zaremba et al., 2014). The hidden state of the
LSTM unit ht is afﬁne-transformed by the soft-
max function, which is a probability distribution
over all the words in the V as in Eq. 1.

p(wt = i|w<t) =

exp(W T
Pj exp(W T

i ht−1 + bi)

j ht−1 + bj)

(1)

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

(cid:17)(cid:17)(cid:17)

Figure 2: Conventional RNN-LM.

We train the model with cross-entropy loss
function using Adam (Kingma and Ba, 2014) op-
timizer.
Initial learning rate is set to 0.001 and
decays with roll-back after every epoch with no
decrement in perplexity on the validation dataset.

2.3 Distilling Language Model

Knowledge Distillation (KD) (Hinton et al., 2015)
uses an ensemble of pre-trained teacher models
(typically deep and large) to train a distilled model
(typically shallower). KD helps provide global in-
formation to distilled model, and hence regularizes
and gives faster updates for the parameters.

We refer to ‘hard targets’ as true labels from the
data. Contrary to the baseline model which only
uses ‘hard targets’, we adapt KD to learn a com-
bined cost function from ‘hard targets’ and ‘soft
targets’. ‘Soft targets’ are generated by adding a
temperature T (Eq.2) to averaged logits of teach-
ers’ zi to train distilled model.

pi =

exp( zi
T )
Pj exp( zj
T )

(when zi = oki)

(2)

Experiments in Table 2 shows improvement in
perplexity compared to the models trained only
with ‘hard targets’. We also use the combined cost

Language
EN
EN

Source Words Sentences
Reddit
Twitter

71.2M
55.2M

1.1B
0.9B

Table 1: Collected data for language modeling.

function to retrain the model after compression.
Retraining with combined cost function compen-
sates for the loss in performance due to compres-
sion proposed in Section 2.4.

2.4 Shared Matrix Factorization

We present a compression method using shared
matrix factorization for embedding and softmax
layers in a RNN-LM. In the language model word
embedding is trained to map words with similar
context into a solution space closely, while soft-
max layer maps context to similar words. There-
fore, we assume we can ﬁnd sharable parameters
that have characteristics similar to both embedding
and softmax. Recently, there have been preprints
(Press and Wolf, 2016; Inan et al., 2016) suggest-
ing an overlap of characteristics between embed-
ding and softmax weights.

We facilitate sharing by Wshared across softmax
and embedding layers, allowing for more efﬁcient
parameterization of weight matrices. This reduces
the total parameters in embedding and softmax
layers by half. We introduce two trainable ma-
trices Pembed and Psof tmax, called the projection
matrices, that adapt the Wshared for the individual
tasks of embedding and softmax as in Eq. 3.

Wembed = PembedWshared
Wsof tmax = (Psof tmaxWshared)T

(3)

Furthermore,

in the layers parametrized by
Wshared only a few outputs are active for a given
input, we suspect that they are probably correlated
and the underlying weight matrix has low rank r.
For such a weight matrix, W , there exists a factor-
r×n where W A and
ization of Wm×n = W A
W B are full rank (Strang et al., 1993). In our low-
rank compression strategy, we expect rank of W
as r′ which leads to factorization in Eq. 4.

m×rW B

Wm×n ≈ W A

m×r′W B

r′×n

(4)

Moreover, we compress by applying Singu-
lar Value Decomposition (SVD) to initialize the
decomposed matrices.
SVD has been pro-
posed as a promising method to perform fac-

Model
Baseline
+ KD
+ Shared Matrix
+ Low-Rank, Retrain
+ Quantization

PP
56.55
55.76
55.07
59.78
∼59.78

Size
56.76
56.76
33.87
14.80
7.40

CR
-
-
1.68×
3.84×
7.68×

Table 2: Evaluation of each model in our pipeline.
Baseline uses ‘hard targets’ and Knowledge Distil-
lation (KD) uses ‘soft targets’. Size is in MB and
16 bit quantization is applied to the ﬁnal model.
PP: Word Perplexity, CR: Compression Rate.

torization for low rank matrices (Nakkiran et al.,
2015; Prabhavalkar et al., 2016). We apply
SVD on Wm×n to decompose it as Wm×n =
Um×mΣm×nV T
n×n. U, Σ, V are used to initial-
ize W A and W B for the retraining process. We
use the top r′ singular values from Σ and corre-
sponding r′ rows from V T . Therefore, W A =
Um×mΣm×r′ and W B = V T
r′×n, we replace all the
linear transformations using Wm×n with W A ×
W B. Approximation in Eq. 4 during factoriza-
tion leads to degradation in model performance
but when followed by ﬁne-tuning through retrain-
ing it results in restoration of accuracy. This com-
pression scheme, without loss of generality is ap-
plied to Wshared.

3 Experiment Results

3.1 Evaluation of proposed approach
Table 1 describes the source of dataset1, number of
words and sentences. This data is extracted from
resources on the Internet, in a raw form with 8 bil-
lion words. We uniformly sample 10% (196 mil-
lion) from the dataset. It consists of 60% for train-
ing, 10% for validation and 30% for test.

We preprocess raw data to remove noise and
ﬁlter phrases. We also replace numbers in the
dataset with a special symbol, hN U M i and out-
of-vocabulary (OOV) words with hU N Ki. We
append start of sentence token hsi and end of sen-
tence token h/si to every sentence. We convert our
dataset to lower-case to increase vocabulary cov-
erage and use top 15K words as the vocabulary.

Table 2 shows evaluation result of each step
in our pipeline. We empirically select 600 em-
bedding dimension, single hidden layer with 600

1The

is
https://github.com/meinwerk/WordPrediction

available

dataset

at

Context

Proposed
Apple
SwiftKey
Samsung
Google

Context

Proposed
Apple
SwiftKey
Samsung
Google

Developer KSS(%) WPR(%)
65.11
Proposed
64.35
Apple
62.39
Swiftkey
59.81
Samsung
58.89
Google

34.38
33.73
31.14
28.84
28.02

Table 3: Performance comparison of proposed
method and other commercialized keyboard solu-
tions by various developers.

LSTM hidden units for baseline model. Word
Perplexity is used to evaluate and compare our
models. Perplexity over the test set is computed
i=1 log p(wi|w<i)), where N is the
as exp(−
number of words in the test set. Our ﬁnal model
is roughly 8× smaller than the baseline with 5%
(3.16) loss in perplexity.

N PN

1

3.2 Performance Comparison

We compare our performance with existing
word prediction methods using manually curated
dataset2, which covers general keyboard scenar-
ios. Due to lack of access to language modeling
engine used in other solutions, we are unable to
compare word perplexity. To the best of our ef-
forts, we try to minimize all the personalization
these solutions offer in their prediction engines.
We performed human evaluation on the manually
curated dataset. We employed three evaluators
from the inspection group to cross-validate all the
tests in Table 3 to eliminate human errors.

We achieve the best performance compared to
other solutions in terms of Key Stroke Savings
(KSS) and Word Prediction Rate (WPR) as shown
in Table 3. KSS is a percentage of key strokes not
pressed compared to a keyboard without any pre-
diction or completion capabilities. Every charac-
ter the user types using the predictions of the lan-
guage model counts as key stroke saving. WPR
is percentage of correct word predictions in the
dataset.

While evaluating KSS and WPR, the number of
predictions for the next word is same for all the
solutions. The proposed method shows 65.11% in
terms of KSS and 34.38% in WPR which is the
best score among the compared solutions. For ex-

2The dataset consists of 102 sentences (926 words,
3,746 characters) which are collection of formal and in-
formal utterances from various sources.
It is available at
https://github.com/meinwerk/WordPrediction

Figure 3: Example of comparision with other
commercialized solutions. Predicted words for the
contexts “Last year I” and “Next year I”.

ample, if the user intents to type “published” and
types only 34.89% characters (“pub”), one of the
top two predictions is “published”. Furthermore,
34.38% words the user intents to type are among
the top three predictions. Figure 3 shows an exam-
ple of word prediction across different solutions.
In this example, we can spot some grammatical
errors in the predictions from other solutions.

4 Conclusions and Future Work

We have proposed a practical method for train-
ing and deploying RNN-LM for mobile device
which can satisfy memory and runtime constrains.
Our method utilizes averaged output of teach-
ers to train a distilled model and compresses its
weight matrices by applying shared matrix fac-
torization. We achieve 7.40MB in memory size
and satisfy the run time constraint of 10ms in av-
erage prediction time (6.47ms). Also, we have
compared proposed method to existing commer-
cialized keyboards in terms of key stroke savings
and word prediction rate. In our benchmark tests,
our method out-performed the others.

RNN-LM does not support personalization in-
dependently. However, our model which is cur-
rently commercialized uses RNN-LM along with
n-gram statistics to learn user’s input pattern and
uni-gram to cover OOV words. Future work is
required on directly personalizing the RNN-LM
model to user’s preferences rather than interpolat-
ing it with n-gram statistics to take full advantage.

Acknowledgments

References

Wenlin Chen, James T Wilson, Stephen Tyree, Kilian Q
Weinberger, and Yixin Chen. 2015. Compressing
In ICML.
neural networks with the hashing trick.
pages 2285–2294.

Andrew Fowler, Kurt Partridge, Ciprian Chelba, Xiao-
jun Bi, Tom Ouyang, and Shumin Zhai. 2015. Ef-
fects of language modeling and its personalization
on touchscreen typing performance. In Proceedings
of the 33rd Annual ACM Conference on Human Fac-
tors in Computing Systems. ACM, pages 649–658.

Yunchao Gong, Liu Liu, Ming Yang, and Lubomir
Bourdev. 2014. Compressing deep convolutional
networks using vector quantization. arXiv preprint
arXiv:1412.6115 .

Song Han, Huizi Mao, and William J Dally. 2015a.
Deep compression: Compressing deep neural net-
works with pruning, trained quantization and huff-
man coding. arXiv preprint arXiv:1510.00149 .

Song Han, Jeff Pool, John Tran, and William Dally.
2015b. Learning both weights and connections for
efﬁcient neural network. In Advances in Neural In-
formation Processing Systems. pages 1135–1143.

Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. 2015.
Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531 .

Hakan Inan, Khashayar Khosravi, and Richard Socher.
2016. Tying word vectors and word classiﬁers:
A loss framework for language modeling. arXiv
preprint arXiv:1611.01462 .

Andrej Karpathy, Justin Johnson, and Li Fei-Fei. 2015.
Visualizing and understanding recurrent networks.
arXiv preprint arXiv:1506.02078 .

Yoon Kim, Yacine Jernite, David Sontag, and Alexan-
der M Rush. 2015. Character-aware neural language
models. arXiv preprint arXiv:1508.06615 .

Diederik Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980 .

Nils Klarlund and Michael Riley. 2003. Word n-grams
for cluster keyboards. In Proceedings of the 2003
EACL Workshop on Language Modeling for Text
Entry Methods. Association for Computational Lin-
guistics, pages 51–58.

Yann LeCun, John S Denker, Sara A Solla, Richard E
Howard, and Lawrence D Jackel. 1989. Optimal
brain damage. In NIPs. volume 2, pages 598–605.

Zhiyun Lu, Vikas Sindhwani, and Tara N Sainath.
Learning compact recurrent neural net-
2016.
works. In Acoustics, Speech and Signal Processing
(ICASSP), 2016 IEEE International Conference on.
IEEE, pages 5960–5964.

Tomas Mikolov, Martin Karaﬁ´at, Lukas Burget, Jan
Cernock`y, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In Inter-
speech. volume 2, page 3.

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013. Distributed representa-
tions of words and phrases and their compositional-
In Advances in neural information processing
ity.
systems. pages 3111–3119.

Yasumasa Miyamoto and Kyunghyun Cho. 2016.
language model.

Gated word-character recurrent
arXiv preprint arXiv:1606.01700 .

Preetum Nakkiran, Raziel Alvarez, Rohit Prabhavalkar,
and Carolina Parada. 2015. Compressing deep neu-
ral networks using a rank-constrained topology. In
INTERSPEECH. pages 1473–1477.

Rohit Prabhavalkar, Ouais Alsharif, Antoine Bruguier,
and Lan McGraw. 2016. On the compression of re-
current neural networks with an application to lvcsr
acoustic modeling for embedded speech recogni-
In Acoustics, Speech and Signal Processing
tion.
(ICASSP), 2016 IEEE International Conference on.
IEEE, pages 5970–5974.

Oﬁr Press and Lior Wolf. 2016. Using the output
arXiv

embedding to improve language models.
preprint arXiv:1608.05859 .

Tara N Sainath, Brian Kingsbury, Vikas Sindhwani,
Ebru Arisoy, and Bhuvana Ramabhadran. 2013.
Low-rank matrix factorization for deep neural net-
work training with high-dimensional output
tar-
In Acoustics, Speech and Signal Processing
gets.
(ICASSP), 2013 IEEE International Conference on.
IEEE, pages 6655–6659.

Gilbert Strang, Gilbert Strang, Gilbert Strang, and
Introduction to linear alge-
Gilbert Strang. 1993.
bra, volume 3. Wellesley-Cambridge Press Welles-
ley, MA.

Kumiko Tanaka-Ishii. 2007. Word-based predictive
text entry using adaptive language models. Natural
Language Engineering 13(1):51.

Karen Ullrich, Edward Meeds, and Max Welling. 2017.
Soft weight-sharing for neural network compres-
sion. arXiv preprint arXiv:1702.04008 .

Jian Xue, Jinyu Li, and Yifan Gong. 2013. Restruc-
turing of deep neural network acoustic models with
singular value decomposition. In Interspeech. pages
2365–2369.

Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals.
Recurrent neural network regularization.

2014.
arXiv preprint arXiv:1409.2329 .

Barret Zoph and Quoc V Le. 2016. Neural architecture
search with reinforcement learning. arXiv preprint
arXiv:1611.01578 .

