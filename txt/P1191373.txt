9
1
0
2
 
v
o
N
 
5
2
 
 
]
L
C
.
s
c
[
 
 
1
v
3
6
8
0
0
.
2
1
9
1
:
v
i
X
r
a

INDEPENDENT LANGUAGE MODELING ARCHITECTURE FOR END-TO-END ASR

Van Tung Pham1, Haihua Xu1, Yerbolat Khassanov1,2, Zhiping Zeng1, Eng Siong Chng1,
Chongjia Ni3, Bin Ma3 and Haizhou Li4

1School of Computer Science and Engineering, Nanyang Technological University, Singapore
2ISSAI, Nazarbayev University, Kazakhstan
3Machine Intelligence Technology, Alibaba Group
4Department of Electrical and Computer Engineering, National University of Singapore, Singapore

ABSTRACT

The attention-based end-to-end (E2E) automatic speech
recognition (ASR) architecture allows for joint optimization
of acoustic and language models within a single network.
However, in a vanilla E2E ASR architecture, the decoder
sub-network (subnet), which incorporates the role of the lan-
guage model (LM), is conditioned on the encoder output.
This means that the acoustic encoder and the language model
are entangled that doesn’t allow language model to be trained
separately from external text data. To address this problem,
in this work, we propose a new architecture that separates
the decoder subnet from the encoder output. In this way, the
decoupled subnet becomes an independently trainable LM
subnet, which can easily be updated using the external text
data. We study two strategies for updating the new architec-
ture. Experimental results show that, 1) the independent LM
architecture beneﬁts from external text data, achieving 9.3%
and 22.8% relative character and word error rate reduction on
Mandarin HKUST and English NSC datasets respectively; 2)
the proposed architecture works well with external LM and
can be generalized to different amount of labelled data.

Index Terms— Independent language model, low-resource

ASR, pre-training, ﬁne-tuning, catastrophic forgetting.

1. INTRODUCTION

End-to-End (E2E) architecture has been a promising strategy
for ASR systems. In this strategy, a single network is em-
ployed to directly map acoustic features into a sequence of
characters or words without the need of a pronunciation dic-
tionary that is required by the conventional Hidden Markov
Model based systems. Furthermore, the components of E2E
network can be jointly trained for a common objective crite-
rion to achieve overall optimization. The main approaches for
E2E ASR are attention-based encoder-decoder [1, 2, 3, 4, 5,
6], Connectionist Temporal Classiﬁcation (CTC) [7, 8] and
the hybrid CTC/attention architectures [9, 10].

The training of an E2E system requires a large amount of
transcribed speech data, here denoted as labelled data, which

is unavailable for low-resource languages. However, we note
that large external text data can easily be collected. In this
work, we focus on the use of external text data to improve the
language model (LM) of E2E ASR systems.

In a vanilla E2E architecture, the decoder sub-network
(subnet) incorporates the role of the LM. Unlike traditional
ASR systems where the LM is separated and hence can easily
be trained with text-only data, the decoder subnet is condi-
tioned on the encoder output. As a result, it is not straightfor-
ward to update the LM component of the vanilla E2E archi-
tecture with the text data.

To address this problem, in this work, we introduce a new
architecture which separates the decoder subnet from the en-
coder output, making the subnet an explicit LM. In this way,
the subnet can easily be updated using the text data. A po-
tential issue, named catastrophic forgetting [11], might occur
when using external text to update the E2E network: the net-
work forgets what it has learnt from labelled data. We, there-
fore, study the strategies that use both labelled and external
text data to update the E2E network1.

The paper is organized as follows. Section 2 describes
a vanilla architecture of E2E ASR systems. In Section 3, we
ﬁrst describe the proposed architecture, then present strategies
to update the proposed architecture using external text data.
Section 4 relates our proposed approach with prior work. Ex-
perimental setup and results are presented in Section 5 and 6
respectively. Section 7 concludes our work.

2. A VANILLA E2E ASR ARCHITECTURE

In this section, we describe a vanilla attention-based2 E2E
ASR architecture (denoted as A1), which is widely used in
prior work [9, 10]. Let ﬁrst denote P as the labelled data. Let
<X, Y> ∈ P be a training utterance, where X is a sequence

1Since both labelled and external text data are used, we actually allow

entire E2E network to be updated.

2In actual implementation, we use the hybrid CTC/attention architecture
[9, 10]. However, since the CTC module is untouched, we do not mention it
during the rest of this paper for simplicity.

si = LST M (si−1, embedding(yi−1)) (5)
ci = attention(h, si)
(6)

P (yi | X, y<i) = sof tmax(projection(si) +

projection(ci))

(7)

of acoustic features and Y = {y1, y2, ..., y|Y|} is a sequence
of output units.

follows,

The E2E architecture consists of an encoder and an
attention-based decoder which are shown in Fig. 1 (a). The
encoder acts as an acoustic model which maps acoustic fea-
tures into an intermediate representation h. Then, the decoder
subnet, which consists of an embedding, a Long Short-Term
Memory (LSTM) and a projection layers, generates one out-
put unit at each decoding step i as follows,

ci = attention(h, si−1)
(1)
si = LST M (si−1, ci, embedding(yi−1)) (2)
(3)

P (yi | X, y<i) = sof tmax(projection(si))

where ci is the context vector, si−1 and si are output hidden
states at time step i − 1 and i respectively, embedding() and
projection() are embedding and projection layers respec-
tively. The E2E network is normally trained in batch-mode
with a loss function as follows,

LASR(θ) =

log P (Y | X, θ)

<X,Y>∈B

(cid:88)

(cid:88)

1
|B|

1
|B|

=

<X,Y>∈B

log P (yi | X, y<i, θ)

|Y|
(cid:88)

i=1

Fig. 1. (a) A vanilla E2E architecture A1 and (b) the proposed
architecture A2. In the proposed architecture, the subnet (in
red-dash box) is a language model which can be easily up-
dated using external text data.

(4)

From Equation (5), the LSTM is only conditioned on the
previous decoding hidden state and previous decoding output.
In other words, the decoder subnet is a standard LM, hereafter
denoted as LM subnet. In this way, this subnet can be inde-
pendently updated with external text data.

3.2. Updating the LM subnet with external text data

One issue when using external text, denoted as T , to improve
LM is catastrophic forgetting. Speciﬁcally, when T is used,
the network forgets what it has learnt from P. To address
such issue, we use both T and P to update the entire E2E
network. Another issue is when should T be used, i.e. before
or after the entire E2E ASR network is trained. We study two
strategies to update the network as presented in Fig. 2.

where y<i, B and θ denote the decoding output history, a
batch of data and model parameters respectively.

According to Equation (1) and (2), the LSTM is condi-
tioned on the context vector ci which depends on the encoder
output h. In the absence of acoustic features X, thus h, it is
not possible to update the E2E architecture appropriately us-
ing only text data. One way to alleviate such problem is to
set ci by an all-zero vector [12]. Unfortunately, this method
introduces a mismatch between training phase and updating
phase (with external text data) since during training ci is gen-
erally not the all-zero vector.

3. INDEPENDENTLY TRAINABLE LM SUBNET

To allow updating of LM with external text data, we ﬁrst in-
troduce (Section 3.1) a novel architecture that separates the
decoder subnet from the encoder output. The updating algo-
rithm is described in Section 3.2.

3.1. Decoupling LM subnet

Inspired by the idea of spatial attention [13] for image cap-
tioning, we propose to decouple the LM subnet from the en-
coder output as shown in Fig. 1(b). In this architecture, de-
noted as A2, the decoding process is formally described as

Fig. 2. Strategies to update the E2E architecture with external
text data.

In Strategy 1, the entire E2E network is ﬁrst trained using
P. Then, in the second step, the network is ﬁne-tuned with

both T and P. Finally, the network is further ﬁne-tuned with
the data P. We empirically found that the last step improves
the system performance.

In Strategy 2, the LM subnet is pre-trained with the text
data T ﬁrst. Then, the entire E2E network is trained using
both T and P.

In the second step of both strategies, i.e.

to use both T
and P to update the E2E network, the following loss function
is used:

Ltotal(θ) = (1 − α)LASR(θ) + αLLM (θd)

(8)

where α denotes an interpolation factor, θd denotes all LM
subnet parameters, LLM (θd) denotes the LM loss obtained
when external text data is used, i.e.:
1
|B1|

log P (Y’ | θd)

LLM (θd) =

Y’∈B1

(cid:88)

(cid:88)

=

1
|B1|

Y’∈B1

|Y’|
(cid:88)

i=1

log P (yi | y<i, θd)

(9)

where B1 is a batch of external text data.

4. COMPARISON WITH RELATED WORK

There have been several studies on how to use external text
data for E2E ASR. One of the ideas is to use the external text
data to build an external LM, then incorporate it into the infer-
ence process [7, 14] or employ it to re-score n-best output hy-
potheses [1]. Our proposed approach, however, improves the
language modeling capability of an E2E system without using
any external LM. Another idea is data synthesis. Speciﬁcally,
[15] used a text-to-speech system while [16] used a pronun-
ciation dictionary and duration information to generate addi-
tional inputs given the external text, which are then used to
train a correction model [15] or another encoder [16]. Our
proposed approach uses external text data without involving
external systems, such as text-to-speech.

In natural language processing, exploiting text corpora to
improve E2E systems is also widely used. A popular ap-
proach is to use a text corpus to pre-train entire E2E network
[17, 18]. Such techniques are only applicable for tasks where
both input and output are in text format. Another approach is
to pre-train only the decoder by simply removing the encoder
[17, 19]. This is equivalent to zeroing out the context vector
[12], which introduces a mismatch as discussed in Section 2.
The idea of separating the decoder from encoder output
has been introduced in image captioning research community
[13]. To the best of our knowledge, this work is the ﬁrst at-
tempt applying it on the ASR task.

5. EXPERIMENTAL SETUP

5.1. Corpora

We conduct experiments on LDC2005S15, which is the
HKUST Mandarin Telephone Speech [20], and the National

Datasets

Labelled data (P)
External text (T )
Validation
Test

HKUST

IMDA

#utts

22,500
158,605
5,457
5,151

Duration
(hours)
20.2
-
4.88
4.75

#utts

15,000
1,547,399
16,144
5,589

Duration
(hours)
20.6
-
21.2
7.6

Table 1. Data division for the HKUST and NSC corpora.

Speech Corpus (NSC) [21], which is a Singapore English
microphone data set.

The HKUST corpus consists of 171.1 hours of Mandarin
telephone speech from Mandarin
Chinese conversational
speakers in mainland China. It is divided into a training set of
166.3 hours, and a test set of 4.8 hours. We split the training
data into 3 subsets: the ﬁrst two subsets are P and T in this
paper, while the remaining subset is used for validation. The
detailed information of these data sets is presented in Table 1.
For the labelled data P, we perform speed-perturbation based
data augmentation [22]. We report Mandarin character error
rate (CER) on the test set.

The NSC corpus consists of 2,172.6 hours of English read
microphone speech from 1,382 Singaporean speakers. We ex-
tract data of 6 speakers as testing data. Similar to the HKUST
corpus, we split the remaining data into 3 subsets for P, T
and validation. The detailed data division is shown in Table
1. We also perform data augmentation on the labelled data P.
We report word error rate (WER) on the test set.

5.2. E2E conﬁguration

We use the ESPnet toolkit [23] to develop our E2E models.
We use 80 mel-scale ﬁlterbank coefﬁcients with pitch as input
features. The encoder consists of 6 layers VGG [24] and 6
layers BLSTM, each has 320 units. In this paper, we used
the location-aware attention mechanism [4]. Characters and
Byte-Pair Encoding (BPE) (500 units) are used as output units
for HKUST and NSC corpora respectively.

We set the batch size for training data P as B = 30. Since
T has many more utterances than P, we set the batch size
for text data as B1 = 150 and 300 for HKUST and NSC re-
spectively. The optimizer is the AdaDelta algorithm [25] with
gradient clipping [26]. We used λ = 0.1 for both corpora.
During decoding, we used beam width 30 for all conditions.

6. EXPERIMENTAL RESULTS

6.1. Independent LM architecture and updating strate-
gies

In this section, we compare the vanilla architecture A1 to the
proposed architecture A2 when they are trained using labelled
data P. We then compare two updating strategies described
in Section 3.2 when external text data T is used. To update

A1 with the external text data, we set the context vector by an
all-zero vector [12] as mentioned in Section 2. The results are
presented in Fig. 3. We have following observations.

• The proposed A2 consistently outperforms A1 on both
HKUST and NSC corpora. Particularly, A2 outper-
forms A1 by 1.8% relative (from 49.2% to 48.3%)
CER and 4.3% relative (from 39.9% to 38.2%) WER
on HKUST and NSC corpora respectively.

• With external text data, Strategy 1 leads to signiﬁcant
error rate reduction for both architectures. For example,
on the A2 architecture, at α = 0.9 we observe 14.4%
relative (from 38.2% to 32.7%) WER reduction for the
NSC corpus. We also observe that A2 outperforms A1
for all cases which indicates that A2 beneﬁts more from
the external text.

• Strategy 2 generally outperforms Strategy 1 when they
are applied on A2. At α = 0.7, Strategy 2 (denoted
as A2-Strategy2-0.7) achieves the best results on two
corpora, i.e. 43.8% CER and 29.5% WER (which are
9.3% relative CER and 22.8% relative WER reduction
over A2) on HKUST and NSC respectively. We will
use A2-Strategy2-0.7 for experiments in the next sec-
tion.

6.2. Interaction with external LM

In this section, we ﬁrst show the interaction between the pro-
posed independent LM architecture and external LM [7, 14].
Speciﬁcally, we train a Recurrent Neural Network LM (RNN-
LM) as a 1-layer LSTM with 1000 cells for both corpora,
then integrate the RNN-LM into inference process of A2 and
A2-Strategy2-0.7. We also examine the effect of varying
amount of labelled data P from 20 hours to 60 hours. For
this experiment, we only conduct on NSC corpus since the
HKUST is relatively small. Results are reported in Fig 4.

We observe that the external RNN-LM improves A2-
Strategy2-0.7 by 0.2% absolute CER and 4.5% absolute
WER on 20 hours of HKUST and NSC corpora respectively.
The results indicate that our proposed approach beneﬁts from
the external LM. Additionally, we observe consistent im-
provements at different amount of P on NSC, which demon-
strate that our proposed architecture works well under differ-
ent amount of labelled data.

7. CONCLUSIONS

We introduced a new architecture that separates the decoder
subnet from the encoder output so that it can be easily updated
using an external text data. Experimental results showed that
the new architecture not only outperforms the vanilla archi-
tecture when only labelled data is used, but also beneﬁts from
the external text data. We studied two strategies to update the
E2E network and found that by pre-training the subnet with

(a) Results on the HKUST corpus

(b) Results on the NSC corpus

Fig. 3. Comparison between the vanilla architecture A1 (blue
color), and the proposed architecture A2 (red color). Solid
lines denote the two architectures trained using only P while
dashed and dotted lines indicate these architectures updated
with external text data T at different values of the factor α
(see Eq. (8)) using two strategies described in Section 3.2.

Fig. 4. ASR performance with and without external LM at
different amount of labelled data.

the text data then ﬁne-tuning the entire E2E network using
both labelled and text data, we achieve the best results. Fur-
ther analyses also showed that the proposed architecture can
be augmented with an external LM for further improvement
and can be generalized with different amount of labelled data.

8. ACKNOWLEDGEMENTS

This work is supported by the project of Alibaba-NTU Singa-
pore Joint Research Institute.

9. REFERENCES

[1] William Chan, Navdeep Jaitly, Quoc V. Le, and Oriol
Vinyals, “Listen, attend and spell: A neural network for
large vocabulary conversational speech recognition,” in
Proc. of ICASSP, 2016, pp. 4960–4964.

[2] Dzmitry Bahdanau et al., “End-to-end attention-based
in Proc. of

large vocabulary speech recognition,”
ICASSP, 2016, pp. 4945–4949.

[3] Chung-Cheng Chiu et al.,

recognition with sequence-to-sequence models,”
Proc. of ICASSP, 2018, pp. 4774–4778.

“State-of-the-art speech
in

[4] Jan Chorowski et al.,

“Attention-based models for
speech recognition,” in Proc. of NIPS, 2015, pp. 577–
585.

[5] Jan Chorowski and Navdeep Jaitly, “Towards better de-
coding and language model integration in sequence to
sequence models,” in Proc. of INTERSPEECH, 2017,
pp. 523–527.

[6] Rohit Prabhavalkar et al., “A comparison of sequence-
to-sequence models for speech recognition,” in Proc. of
INTERSPEECH, 2017, pp. 939–943.

[7] Alex Graves and Navdeep Jaitly, “Towards end-to-end
speech recognition with recurrent neural networks,” in
Proc. of ICML, 2014, pp. 1764–1772.

[8] Dario Amodei et al.,

“Deep speech 2 : End-to-end
speech recognition in english and mandarin,” in Proc.
of ICML, 2015, pp. 173–182.

[9] Suyoun Kim, Takaaki Hori, and Shinji Watanabe, “Joint
ctc-attention based end-to-end speech recognition using
in Proc. of ICASSP, 2017, pp.
multi-task learning,”
4835–4839.

[10] Shinji Watanabe, Takaaki Hori, Suyoun Kim, John R
Hershey, and Tomoki Hayashi, “Hybrid ctc/attention
architecture for end-to-end speech recognition,” IEEE
Journal of Selected Topics in Signal Processing, vol. 11,
no. 8, pp. 1240–1253, 2017.

[11] Benedikt Pf¨ulb, Alexander Gepperth, S. Abdullah, and
A. Kilian, “Catastrophic forgetting: still a problem for
dnns,” CoRR, vol. abs/1905.08077, 2019.

[12] Yu-An Chung, Yuxuan Wang, Wei-Ning Hsu, Yu Zhang,
and R. J. Skerry-Ryan, “Semi-supervised training for
improving data efﬁciency in end-to-end speech synthe-
sis,” CoRR, vol. abs/1808.10128, 2018.

[13] J. Lu, C. Xiong, D. Parikh, and R. Socher, “Knowing
when to look: Adaptive attention via a visual sentinel for
image captioning,” in Proc. of CVPR, 2017, pp. 3242–
3250.

[14] Takaaki Hori, Jaejin Cho, and Shinji Watanabe, “End-
to-end speech recognition with word-based rnn lan-
guage models,” in Proc. of HLT, 2018, pp. 389–396.

[15] Jinxi Guo, Tara N. Sainath, and Ron J. Weiss,

“A
spelling correction model for end-to-end speech recog-
nition,” in Proc. of ICASSP, 2019, pp. 5651–5655.

[16] Adithya Renduchintala, Shuoyang Ding, Matthew
Wiesner, and Shinji Watanabe, “Multi-modal data aug-
in Proc. of INTER-
mentation for end-to-end asr,”
SPEECH, 2018, pp. 2394–2398.

[17] Andrew M Dai and Quoc V Le, “Semi-supervised se-
quence learning,” in Proc. of NIPS, 2015, pp. 3079–
3087.

[18] Kaitao Song et al., “MASS: masked sequence to se-
quence pre-training for language generation,” in Proc.
of ICML, 2019, pp. 5926–5936.

[19] Prajit Ramachandran, Peter J. Liu, and Quoc V. Le, “Un-
supervised pretraining for sequence to sequence learn-
ing,” in Proc. of EMNLP, 2017, pp. 383–391.

[20] Yi Liu, Pascale Fung, Yongsheng Yang, Christopher
Cieri, Shudong Huang, and David Graff, “Hkust/mts:
A very large scale mandarin telephone speech corpus.,”
in Proc. of ISCSLP, 2006, pp. 724–735.

[21] Jia Xin Koh et al., “Building the singapore english na-
tional speech corpus,” in Proc. INTERSPEECH 2019,
2019, pp. 321–325.

[22] Tom Ko, Vijayaditya Peddinti, Daniel Povey, and San-
jeev Khudanpur, “Audio augmentation for speech recog-
nition,” in Proc. of INTERSPEECH, 2015, pp. 3586–
3589.

[23] Shinji Watanabe et al., “Espnet: End-to-end speech pro-
cessing toolkit,” in Proc. of INTERSPEECH, 2018, pp.
2207–2211.

[24] Takaaki Hori, Shinji Watanabe, Yu Zhang, and William
Chan, “Advances in joint ctc-attention based end-to-end
speech recognition with a deep cnn encoder and rnn-
lm,” in Proc. of INTERSPEECH, 2017, pp. 949–953.

[25] Matthew D. Zeiler, “Adadelta: An adaptive learning rate

method,” CoRR, vol. abs/1212.5701, 2012.

[26] Razvan Pascanu, Tomas Mikolov, and Yoshua Ben-
gio, “Understanding the exploding gradient problem,”
CoRR, vol. abs/1211.5063, 2012.

