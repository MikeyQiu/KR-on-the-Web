CASENet: Deep Category-Aware Semantic Edge Detection

Zhiding Yu∗
Carnegie Mellon University
yzhiding@andrew.cmu.edu

Chen Feng∗ Ming-Yu Liu† Srikumar Ramalingam†
Mitsubishi Electric Research Laboratories (MERL)
cfeng@merl.com, mingyul@nvidia.com, srikumar@cs.utah.edu

Abstract

building+pole
building

road+sidewalk
building+vegetation

road
road+pole

sidewalk+building
building+sky

building+trafﬁc sign
pole+car

building+car
building+person

road+car
pole+vegetation

7
1
0
2
 
y
a
M
 
7
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
5
7
9
0
.
5
0
7
1
:
v
i
X
r
a

Boundary and edge cues are highly beneﬁcial in improv-
ing a wide variety of vision tasks such as semantic segmen-
tation, object recognition, stereo, and object proposal gen-
eration. Recently, the problem of edge detection has been
revisited and signiﬁcant progress has been made with deep
learning. While classical edge detection is a challenging
binary problem in itself, the category-aware semantic edge
detection by nature is an even more challenging multi-label
problem. We model the problem such that each edge pixel
can be associated with more than one class as they appear
in contours or junctions belonging to two or more semantic
classes. To this end, we propose a novel end-to-end deep
semantic edge learning architecture based on ResNet and a
new skip-layer architecture where category-wise edge acti-
vations at the top convolution layer share and are fused with
the same set of bottom layer features. We then propose a
multi-label loss function to supervise the fused activations.
We show that our proposed architecture beneﬁts this prob-
lem with better performance, and we outperform the current
state-of-the-art semantic edge detection methods by a large
margin on standard data sets such as SBD and Cityscapes.

1. Introduction

Figure 1 shows an image of a road scene from Cityscapes
dataset [8] with several object categories such as building,
ground, sky, and car. In particular, we study the problem of
simultaneously detecting edge pixels and classifying them
based on association to one or more of the object cate-
gories [18, 42]. For example, an edge pixel lying on the
contour separating building and pole can be associated with
both of these object categories. In Figure 1, we visualize the
boundaries and list the colors of typical category combina-
tions such as “building+pole” and “road+sidewalk”. In our
problem, every edge pixel is denoted by a vector whose in-
dividual elements denote the strength of pixel’s association

∗The authors contributed equally.
†This work was done during the afﬁliation with MERL.

(a) Input image

(b) Ground truth

(c) CASENet output

Figure 1. Edge detection and categorization with our approach.
Given a street view image, our goal is to simultaneously detect
the boundaries and assign each edge pixel with one or more se-
mantic categories. (b) and (c) are color coded by HSV where hue
and saturation together represent the composition and associated
strengths of categories. Best viewed in color.

with different semantic classes. While most edge pixels will
be associated with only two object categories, in the case of
junctions [37] one may expect the edge pixel to be associ-
ated with three or even more. We therefore do not restrict
the number of object categories a pixel can be associated
with, and formulate our task as a multi-label learning prob-
lem. In this paper, we propose CASENet, a deep network
able to detect category-aware semantic edges. Given K de-
ﬁned semantic categories, the network essentially produces
K separate edge maps where each map indicates the edge
probability of a certain category. An example of separately
visualized edge maps on a test image is given in Figure 2.

The problem of edge detection has been shown to be use-
ful for a number of computer vision tasks such as segmen-
tation [1, 3, 4, 6, 52], object proposal [3], 3d shape recov-

Figure 2. An example of a test image and zoomed edge maps corresponding to bounding box regions. The visualized edge maps belong to
the categories of person, car and road, respectively. Green and blue denote correctly detected and missed edge pixels.

ery [27], and 3d reconstruction [44]. By getting a better
understanding of the edge classes and using them as prior
or constraints, it is reasonable to expect some improvement
in these tasks. With a little extrapolation, it is not difﬁcult
to see that a near-perfect semantic edge, without any addi-
tional information, can solve semantic segmentation, depth
estimation [21, 38], image-based localization [24], and ob-
ject detection [13]. We believe that it is important to im-
prove the accuracy of semantic edge detection to a certain
level for moving towards a holistic scene interpretation.

Early work tends to treat edge information as low-level
cues to enhance other applications. However, the availabil-
ity of large training data and the progress in deep learning
methods have allowed one to make signiﬁcant progress for
the edge detection problem in the last few years. In particu-
lar, there have been newer data sets [18]. The availability of
large-scale semantic segmentation data sets [8] can also be
easily processed to obtain semantic edge data set as these
two problems can be seen as dual problems.

1.1. Related works

The deﬁnition of boundary or edge detection has evolved
over time from low-level to high-level features: simple edge
ﬁlters [5], depth edges [17], object boundaries [40], and se-
mantic contours [18]. In some sense, the evolution of edge
detection algorithms captures the progress in computer vi-
sion from simple convolutional ﬁlters such as Sobel [29] or
Canny [5] to fully developed deep neural networks.

Low-level edges Early edge detection methods used sim-
ple convolutional ﬁlters such as Sobel [29] or Canny [5].

Depth edges Some previous work focuses on labeling
contours into convex, concave, and occluding ones from
synthetic line drawings [38] and real world images under re-
stricted settings [14, 17]. Indoor layout estimation can also
be seen as the identiﬁcation of concave boundaries (lines
folding walls, ceilings, and ground) [20]. By recovering
occluding boundaries [22], it was shown that the depth or-
dering of different layers in the scene can be obtained.

Perceptual edges A wide variety of methods are driven
towards the extraction of perceptual boundaries [40]. Dol-
lar et al. [9] used boosted decision trees on different patches

to extract edge maps. Lim et al. [33] computed sketch
tokens which are object boundary patches using random
forests. Several other edge detection methods include sta-
tistical edges [31], multi-scale boundary detection [43], and
point-wise mutual information (PMI) detector [25]. More
recently, Dollar and Zitnick [10] proposed a realtime fast
edge detection method using structured random forests.
Latest methods [3, 30, 50, 51] using deep neural networks
have pushed the detection performance to state-of-the-art.

Semantic edges The origin of semantic edge detection
can be possibly pinpointed to [42]. As a high level task,
it has also been used implicitly or explicitly in many prob-
lems related to segmentation [49] and reconstruction [21].
In some sense, all semantic segmentation methods [7, 8,
12, 16, 35, 36, 41, 45, 48] can be loosely seen as semantic
edge detection since one can easily obtain edges, although
not necessarily an accurate one, from the segmentation re-
sults. There are papers that speciﬁcally formulate the prob-
lem statement as binary or category-aware semantic edge
detection [3, 4, 13, 18, 28, 39, 42, 51]. Hariharan et al. [18]
introduced the Semantic Boundaries Dataset (SBD) and
proposed inverse detector which combines both bottom-up
edge and top-down detector information to detect category-
aware semantic edges. HFL [3] ﬁrst uses VGG [47] to lo-
cate binary semantic edges and then uses deep semantic seg-
mentation networks such as FCN [36] and DeepLab [7] to
obtain category labels. The framework, however, is not end-
to-end trainable due to the separated prediction process.

DNNs for edge detection Deep neural networks recently
became popular for edge detection. Related work includes
SCT based on sparse coding [37], N 4 ﬁelds [15], deep con-
tour [46], deep edge [2], and CSCNN [23]. One notable
method is the holistically-nested edge detection (HED) [50]
which trains and predicts edges in an image-to-image fash-
ion and performs end-to-end training.

1.2. Contributions

Our work is related to HED in adopting a nested architec-
ture but we extend the work to the more difﬁcult category-
aware semantic edge detection problem. Our main contri-
butions in this paper are summarized below:

• To address edge categorization, we propose a multi-
label learning framework which allows improved edge
learning than traditional multi-class framework.

• We propose a novel nested architecture without deep
supervision on ResNet [19], where bottom features are
only used to augment top classiﬁcations. We show that
deep supervision may not be beneﬁcial in our problem.

• We outperform previous state-of-the-art methods by
signiﬁcant margins on SBD and Cityscapes datasets.

2. Problem Formulation

Given an input image, our goal is to compute the se-
mantic edge maps corresponding to pre-deﬁned categories.
More formally, for an input image I and K deﬁned se-
mantic categories, we are interested in obtaining K edge
maps {Y1, · · · , YK}, each having the same size as I. With
a network having the parameters W, we denote Yk(p|I,
W) ∈ [0, 1] as the network output indicating the computed
edge probability on the k-th semantic category at pixel p.

2.1. Multi-label loss function

Possibly driven by the multi-class nature of semantic
segmentation, several related works on category-aware se-
mantic edge detection have more or less looked into the
problem from the multi-class learning perspective. Our in-
tuition is that this problem by nature should allow one pixel
belonging to multiple categories simultaneously, and should
be addressed by a multi-label learning framework.

We therefore propose a multi-label loss. Suppose each
image I has a set of label images { ¯Y1, · · · , ¯YK}, where
¯Yk is a binary image indicating the ground truth of the k-th
class semantic edge. The multi-label loss is formulated as:

L(W) =

Lk(W)

(cid:88)

(1)

k
(cid:88)

(cid:88)

=

{−β ¯Yk(p) log Yk(p|I; W)

p

k
− (1 − β)(1 − ¯Yk(p)) log(1 − Yk(p|I; W))},

where β is the percentage of non-edge pixels in the image
to account for skewness of sample numbers, similar to [50].

3. Network Architecture

We propose CASENet, an end-to-end trainable con-
volutional neural network (CNN) architecture (shown in
Fig. 3(c)) to address category-aware semantic edge detec-
tion. Before describing CASENet, we ﬁrst propose two
alternative network architectures which one may come up
with straightforwardly given the abundant previous liter-
ature on edge detection and semantic segmentation. Al-
though both architectures can also address our task, we will

analyze issues associated with them, and address these is-
sues by proposing the CASENet architecture.

3.1. Base network

We address the edge detection problem under the fully
convolutional network framework. We adopt ResNet-101
by removing the original average pooling and fully con-
nected layer, and keep the bottom convolution blocks. We
further modify the base network in order to better preserve
low-level edge information. We change the stride of the ﬁrst
and ﬁfth convolution blocks (“res1” and “res5” in Fig. 3) in
ResNet-101 from 2 to 1. We also introduce dilation fac-
tors to subsequent convolution layers to maintain the same
receptive ﬁeld sizes as the original ResNet, similar to [19].

3.2. Basic architecture

A very natural architecture one may come up with is the
Basic architecture shown in Fig. 3(a). On top of the base
network, we add a classiﬁcation module (Fig. 3(d)) as a 1×1
convolution layer, followed by bilinear up-sampling (imple-
mented by a K-grouped deconvolution layer) to produce a
set of K activation maps {A1, · · · , AK}, each having the
same size as the image. We then model the probability of
a pixel belonging to the k-th class edge using the sigmoid
unit given by Yk(p) = σ(Ak(p)), which is presented in
the Eq. (1). Note that Yk(p) is not mutually exclusive.

3.3. Deeply supervised architecture

One of the distinguishing features of the holistically-
nested edge detection (HED) network [50] is the nested ar-
chitecture with deep supervision [32]. The basic idea is to
impose losses to bottom convolution sides besides the top
network loss. In addition, a fused edge map is obtained by
supervising the linear combination of side activations.

Note that HED only performs binary edge detection. We
extended this architecture to handle K channels for side
outputs and K channels for the ﬁnal output. We refer to
this as deeply supervised network (DSN), as depicted in
Fig. 3(b). In this network, we connect an above-mentioned
classiﬁcation module to the output of each stack of resid-
ual blocks, producing 5 side classiﬁcation activation maps
{A(1), . . . , A(5)}, where each of them has K-channels. We
then fuse these 5 activation maps through a sliced con-
catenation layer (the color denotes the channel index in
Fig. 3(g)) to produce a 5K-channel activation map:

Af = {A(1)

1 , . . . , A(5)

1 , A(1)

2 , . . . , A(5)

2 , . . . , A(5)
K }

(2)

Af is fed into our fused classiﬁcation layer which performs
K-grouped 1 × 1 convolution (Fig. 3(f)) to produce a K-
channel activation map A(6). Finally, 6 loss functions are
computed on {A(1), . . . , A(6)} using the Equation 1 to pro-
vide deep supervision to this network.

(a) Basic Network

(b) Deeply Supervised Network (DSN)

(c) CASENet

(d) Classiﬁcation

(e) Side Feature

(f) Fused Classiﬁcation

(g) Sliced Concatenation

(h) Shared Concatenation

Figure 3. Three CNN architectures designed in this paper are shown in (a)-(c). A solid rectangle represents a composite block of CNN
layers. Any decrease of its width indicates a drop of spatial resolution of this block’s output feature map by a factor of 2. A number besides
an arrow indicates the number of channels of the block’s output features. A blue solid rectangle is a stack of ResNet blocks. A purple solid
rectangle is our classiﬁcation module. A dotted red outline indicates that block’s output is supervised by our loss function in equation 1.
A gray solid rectangle is our side feature extraction module. A dark green solid rectangle is our fused classiﬁcation module performing
K-grouped 1 × 1 convolution. (d)-(h) depicts more details of various modules used in (a)-(c), where outlined rectangles illustrate input
and output feature maps. Best viewed in color.

Note that the reason we perform sliced concatenation in
conjunction with grouped convolution instead of the corre-
sponding conventional operations is as follows. Since the 5
side activations are supervised, we implicitly constrain each
channel of those side activations to carry information that is
most relevant to the corresponding class.

With sliced concatenation and grouped convolution, the

fused activation for a pixel p is given by:

A(6)

k (p) = W T

k [A(1)

k (p)T , · · · , A(5)

k (p)T ]

(3)

This essentially integrates corresponding class-speciﬁc acti-
vations from different scales as the ﬁnally fused activations.
Our experiments empirically support this design choice.

3.4. CASENet architecture

Upon reviewing the Basic and DSN architectures, we no-
tice several potential associated issues in the category-aware
semantic edge detection task:

First, the receptive ﬁeld of the bottom side is limited.
As a result it may be unreasonable to require the network
to perform semantic classiﬁcation at an early stage, given
that context information plays an important role in seman-
tic classiﬁcation. We believe that semantic classiﬁcation

should rather happen on top where features are encoded
with high-level information.

Second, bottom side features are helpful in augmenting
top classiﬁcations, suppressing non-edge pixels and pro-
viding detailed edge localization and structure information.
Hence, they should be taken into account in edge detection.
Our proposed CASENet architecture (Fig. 3(c)) is moti-
vated by addressing the above issues. The network adopts
a nested architecture which to some extent shares similar-
ity to DSN but also contains several key improvements. We
summarize these improvements below:

1. Replace the classiﬁcation modules at bottom sides to

the feature extraction modules.

2. Put the classiﬁcation module and impose supervision

only at the top of the network.

3. Perform shared concatenation (Fig. 3(h)) instead of

sliced concatenation.

The difference between side feature extraction and side
classiﬁcation is that the former only outputs a single channel
feature map F(j) rather than K class activations. The shared

concatenation replicates the bottom features F = {F(1),
F(2), F(3)} from Side-1-3 to separately concatenate with
each of the K top activations:
1 , F, A(5)

3 , . . . , F, A(5)

Af = {F, A(5)

2 , F, A(5)

K }.

(4)

The resulting concatenated activation map is again fed into
the fused classiﬁcation layer with K-grouped convolution
to produce a K-channel activation map A(6).

In general, CASENet can be thought of as a joint edge
detection and classiﬁcation network by letting lower level
features participating and augmenting higher level semantic
classiﬁcation through a skip-layer architecture.

4. Experiments

In this paper, we compare CASENet1 with previous
state-of-the-art methods, including InvDet [18], HFL [3],
weakly supervised object boundaries [28], as well as sev-
eral baseline network architectures.

4.1. Datasets

We evaluate the methods on SBD [18], a standard dataset
for benchmarking semantic edge detection. Besides SBD,
we also extend our evaluation to Cityscapes [8], a popular
semantic segmentation dataset with pixel-level high quality
annotations and challenging street view scenarios. To the
best of our knowledge, our paper is the ﬁrst work to for-
mally report semantic edge detection results on this dataset.

SBD The dataset consists of 11355 images from the PAS-
CAL VOC2011 [11] trainval set, divided into 8498 training
and 2857 test images2. This dataset has semantic bound-
aries labeled with one of 20 Pascal VOC classes.

Cityscapes The dataset contains 5000 images divided
into 2975 training, 500 validation and 1525 test images.
Since the labels of test images are currently not available,
we treat the validation images as test set in our experiment.

4.2. Evaluation protocol

On both SBD and Cityscapes, the edge detection accu-
racy for each class is evaluated using the ofﬁcial bench-
mark code and ground truth from [18]. We keep all set-
tings and parameters as default, and report the maximum
F-measure (MF) at optimal dataset scale (ODS), and aver-
age precision (AP) for each class. Note that for Citiscapes,
we follow [18] exactly to generate ground truth boundaries
with single pixel width for evaluation, and reduce the sizes
of both ground truth and predicted edge maps to half along
each dimension considering the speed of evaluation.

1Source code available at: http://www.merl.com/research/

license#CASENet.

2There has been a clean up of the dataset with a slightly changed image

number. We also report the accordingly updated InvDet results.

4.3. Implementation details

We trained and tested CASENet, HED [50], and the pro-

posed baseline architectures using the Caffe library [26].

Training labels Considering the misalignment between
human annotations and true edges, and the label ambigu-
ity of pixels near boundaries, we generate slightly thicker
ground truth edges for network training. This can be done
by looking into neighbors of a pixel and seeking any dif-
ference in segmentation labels. The pixel is regarded as an
edge pixel if such difference exists. In our paper, we set the
maximum range of neighborhood to be 2. Under the multi-
label framework, edges from different classes may overlap.

Baselines Since several main comparing methods such
as HFL and HED use VGG or VGG based architectures
for edge detection and categorization, we also adopt the
CASENet and other baseline architectures on VGG (de-
noted as CASENet-VGG). In particular, we remove the
max pooling layers after conv4, and keep the resolutions of
conv5, fc6 and fc7 the same as conv4 (1/8 of input). Simi-
lar to [7], both fc6 and fc7 are treated as convolution layers
with 3×3 and 1×1 convolution and dimensions set to 1024.
Dilation factors of 2 and 4 are applied to conv5 and fc6.

To compare our multi-label framework with multi-class,
we generate ground truth with non-overlapping edges of
each class, reweight the softmax loss similar to our paper,
and replace the top with a 21-class reweighted softmax loss.

Initialization In our experiment, we initialize the convo-
lution blocks of ResNet/VGG in CASENet and all compar-
ing baselines with models pre-trained on MS COCO [34].

Hyper-parameters We unify the hyper-parameters for all
comparing methods with the same base network, and set
most of them following HED. In particular, we perform
SGD with iteration size of 10, and ﬁx loss weight to be
1, momentum 0.9, and weight decay 0.0005. For methods
with ResNet, we set the learning rate, step size, gamma and
crop size to 1e − 7 / 5e − 8, 10000 / 20000, 0.1 / 0.2 and
352 × 352 / 472 × 472 respectively for SBD and Cityscapes.
For VGG, the learning rate is set to 1e − 8 while others re-
main the same as ResNet on SBD. For baselines with soft-
max loss, the learning rate is set to 0.01 while other param-
eters remain the same. The iteration numbers on SBD and
Cityscapes are empirically set to 22000 and 40000.

Data augmentation During training, we enable random
mirroring and cropping on both SBD and Cityscapes. We
additionally augment the SBD data by resizing each image
with scaling factors {0.5, 0.75, 1.0, 1.25, 1.5}, while no
such augmentation is performed on Cityscapes.

4.4. Results on SBD

Table 1 shows the MF scores of different methods
performing category-wise edge detection on SBD, where
CASENet outperforms previous methods. Upon using the
benchmark code from [18], one thing we notice is that the
recall scores of the curves are not monotonically increas-
ing, mainly due to the fact that post-processing is taken af-
ter thresholding in measuring the precision and recall rates.
This is reasonable since we have not taken any postprocess-
ing operations on the obtained raw edge maps. We only
report the MF on SBD since AP is not well deﬁned under
such situation. The readers may kindly refer to supplemen-
tary materials for class-wise precision recall curves.

Multi-label or multi-class? We compare the proposed
multi-label loss with the reweighted softmax loss under the
Basic architecture. One could see that using softmax leads
to signiﬁcant performance degradation on both VGG and
ResNet, supporting our motivation in formulating the task
as a multi-label learning problem, in contrast to the well
accepted concept which addresses it in a multi-class way.

Is deep supervision necessary? We compare CASENet
with baselines network architectures including Basic and
DSN depicted in Fig. 3. The result empirically supports
our intuition that deep supervision on bottom sides may not
be necessary. In particular, CASENet wins frequently on
per-class MF as well as the ﬁnal mean MF score. Our ob-
servation is that the annotation quality to some extent inﬂu-
enced the network learning behavior and evaluation, leading
to less performance distinctions across different methods.
Such distinction becomes more obvious on Cityscapes.

Is top supervision necessary? One might further ques-
tion the necessity of imposing supervision on Side-5 activa-
tion in CASENet. We use CASENet− to denote the same
CASENet architecture without Side-5 supervision during
training. The improvement upon adding Side-5 supervision
indicates that a supervision on higher level side activation is
helpful. Our intuition is that Side-5 supervision helps Side-
5 focusing more on the classiﬁcation of semantic classes
with less inﬂuence from interacting with bottom layers.

Visualizing side activations We visualize the results of
CASENet, CASENet− and DSN on a test image in Fig. 5.
Overall, CASENet achieves better detection compared to
the other two. We further show the side activations of this
testing example in Fig. 6, from which one can see that
the activations of DSN on Side-1, Side-2 and Side-3 are
more blurry than CASENet features. This may be caused
by imposing classiﬁcation requirements on those layers,
which seems a bit aggressive given limited receptive ﬁeld

Figure 4. Training losses of different variants of CASENet on the
SBD dataset. The losses are respectively moving averaged by a
kernel length of 8000. All curves means the ﬁnal fused losses, ex-
cept for CASENet-side5 which indicates the loss of Side-5’s out-
put. Note that CASENet loss is consistently the smallest.

and information and may caused performance degradation.
Also one may notice the differences in “Side5-Person” and
“Side5-Boat” between CASENet− and CASENet, where
CASENet’s activations overall contain sharper edges, again
showing the beneﬁt of Side-5 supervision.

From ResNet to VGG CASENet-VGG in Table 1 shows
comparable performance to HFL-FC8. HFL-CRF performs
slightly better with the help of CRF postprocessing. The
results to some extent shows the effectiveness our learn-
ing framework, given HFL uses two VGG networks sepa-
rately for edge localization and classiﬁcation. Our method
also signiﬁcantly outperforms the HED baselines from [28],
which gives 44 / 41 on MF / AP, and 49 / 45 with detection.

Other variants We also investigated several other archi-
tectures. For example, we kept the stride of 2 in “res1”.
This downgrades the performance for lower input resolu-
tion. Another variant is to use the same CASENet architec-
ture but impose binary edge losses (where a pixel is consid-
ered lying on an edge as long as it belongs to the edge of at
least one class) on Side-1-3 (denoted as CASENet-edge in
Fig. 4). However we found that such supervision seems to
be a divergence to the semantic classiﬁcation at Side-5.

4.5. Results on Cityscapes

We also train and test both DSN and CASENet with
ResNet as base network on the Cityscapes. Compared to
SBD, Cityscapes has relatively higher annotation quality
but contains more challenging scenarios. The dataset con-
tains more overlapping objects, which leads to more cases
of multi-label semantic boundary pixels and thus may be
better to test the proposed method. In Table 1, we provide

Metric

Category Method
InvDet

MF
(ODS)

VGG

Baseline HFL-FC8
HFL-CRF
Basic-Softmax
Basic
CASENet
Basic-Softmax
Basic
DSN
CASENet−
CASENet

ResNet

aero
41.5
71.6
73.9
67.6
70.0
72.5
74.0
82.5
81.6
83.0
83.3

bike
46.7
59.6
61.4
55.3
58.6
61.5
64.1
74.2
75.6
74.7
76.0

bird
15.6
68.0
74.6
50.4
62.5
63.8
64.8
80.2
78.4
79.6
80.7

boat
17.1
54.1
57.2
44.9
50.2
54.5
52.5
62.3
61.3
61.5
63.4

bottle
36.5
57.2
58.8
42.3
51.2
52.3
52.1
68.0
67.6
67.7
69.2

bus
42.6
68.0
70.4
64.6
65.4
65.4
73.2
80.8
82.3
80.7
81.3

car
40.3
58.8
61.6
61.0
60.6
62.6
68.1
74.3
74.6
74.1
74.9

cat
22.7
69.3
71.9
63.9
66.9
67.2
73.2
82.9
82.6
82.8
83.2

chair
18.9
43.3
46.5
37.4
39.7
42.6
43.1
52.9
52.4
53.3
54.3

cow table
12.5
26.9
33.3
65.8
36.2
72.3
25.3
43.1
31.0
47.3
31.4
51.8
37.3
56.2
46.1
73.1
45.9
71.9
75.0
44.5
46.4
74.8

dog
18.2
67.9
71.1
57.9
60.1
62.0
67.4
79.6
79.2
79.8
80.3

horse mbike
29.4
35.4
62.2
67.5
68.1
73.0
60.0
57.1
60.2
59.4
62.8
61.9
67.6
68.4
76.0
78.9
76.2
78.3
80.4
76.2
76.6
80.2

person
48.2
69.0
70.3
72.0
74.4
75.4
76.7
80.4
80.1
80.2
80.8

plant
13.9
43.8
44.4
33.0
38.0
41.7
42.7
52.4
51.9
53.2
53.3

sheep
26.9
68.5
73.2
53.5
56.0
59.8
64.3
75.4
74.9
77.3
77.2

sofa
11.1
33.9
42.6
30.9
35.9
35.8
37.5
48.6
48.0
47.7
50.1

train
21.9
57.7
62.4
54.4
60.0
59.7
64.6
75.8
76.5
75.6
75.9

tv
31.4
54.8
60.1
47.7
53.8
50.7
56.3
68.0
66.8
66.3
66.8

mean
27.9
58.7
62.5
51.1
55.1
56.8
60.2
70.6
70.3
70.7
71.4

Table 1. Results on the SBD benchmark. All MF scores are measured by %.

Metric Method

MF
(ODS)

AP

DSN
CASENet
DSN
CASENet

road
85.4
86.6
78.0
77.7

sidewalk
76.4
78.8
76.0
78.6

building wall
51.8
51.5
47.9
49.0

82.6
85.1
83.9
87.6

fence
56.5
58.9
53.1
56.9

pole
66.5
70.1
67.9
72.8

trafﬁc lgt
62.6
70.8
57.9
70.3

trafﬁc sign
72.1
74.6
75.9
78.9

vegetation
80.6
83.5
79.9
85.1

terrain
61.1
62.9
60.2
63.1

sky
76.0
79.4
75.0
78.4

person
77.5
81.5
75.4
83.0

rider
66.3
71.3
61.0
70.1

car
84.5
86.9
85.8
89.5

truck
52.3
50.4
50.6
46.9

bus
67.3
69.5
67.8
70.0

train motorcycle
49.4
52.0
42.5
48.8

56.0
61.3
51.4
59.6

bike mean
68.5
76.0
71.3
80.2
66.4
72.0
70.8
78.9

Table 2. Results on the Cityscapes dataset. All MF and AP scores are measured by %.

DSN-Boat

DSN-Person

CASENet−

CASENet

Person
Boat
Boat+Person

DSN

CASENet−

CASENet

Side1

Side2

Side3

Figure 5. Example results on the SBD dataset. First row: Input
and ground truth image and color codes of categories. Second
row: Results of different edge classes, where the same color code
is used as in Fig. 1. Third row: Results of person edge only. Last
row: Results of boat edge only. Green, blue, red and white respec-
tively denote true positive, false negative, false positive and true
negative pixels, at the threshold of 0.5. Best viewed in color.

both MF and AP of the comparing methods. To the best of
our knowledge, this is the ﬁrst paper quantitatively report-
ing the detection performance of category-wise semantic
edges on Cityscapes. One could see CASENet consistently
outperforms DSN in all classes with a signiﬁcant margin.
Besides quantitative results, we also visualize some results
in Fig. 7 for qualitative comparisons.

5. Concluding Remarks

In this paper, we proposed an end-to-end deep network
for category-aware semantic edge detection. We show

Side4

Side5-Person

Side5

Side5-Boat

Figure 6. Side activations on the input image of Fig. 5. The ﬁrst
two columns show the DSN’s side classiﬁcation activations corre-
sponding to the class of Boat and Person, respectively. The last
two columns show the side features and classiﬁcation activations
for CASENet− and CASENet, respectively. Note that the pixel
value range of each image is normalized to [0,255] individually
inside its corresponding side activation outputs for visualization.

that the proposed nested architecture, CASENet, shows
improvements over some existing architectures popular in
edge detection and segmentation. We also show that the
proposed multi-label learning framework leads to better
learning behaviors on edge detection. Our proposed method
improves over previous state-of-the-art methods with sig-
niﬁcant margins. In the future, we plan to apply our method
to other tasks such as stereo and semantic segmentation.

building+vegetation
sidewalk
person

road
sidewalk+vegetation
rider+bicycle

road+trafﬁc sign
sidewalk+pole
bicycle

building
pole+vegetation
trafﬁc sign+vegetation

building+pole
vegetation+bicycle
vegetation+rider

road+sidewalk
building+trafﬁc light
building+bicycle

building+trafﬁc sign
trafﬁc sign
building+rider

pole
sidewalk+person
pole+trafﬁc sign

vegetation
sidewalk+trafﬁc sign
person+bicycle

building+person
road+bicycle
sidewalk+bicycle

Figure 7. Example results on Cityscapes. Columns from left to right: Input, Ground Truth, DSN and CASENet. CASENet shows better
detection qualities on challenging objects, while DSN shows slightly more false positives on non-edge pixels. Best viewed in color.

References

[1] P. Arbel´aez, M. Maire, C. Fowlkes, and J. Malik. Contour
detection and hierarchical image segmentation. IEEE Trans.
PAMI, 33(5):898–916, 2011.

[2] G. Bertasius, J. Shi, and L. Torresani. Deepedge: A multi-
scale bifurcated deep network for top-down contour detec-
tion. In CVPR, 2015. 2

[3] G. Bertasius, J. Shi, and L. Torresani. High-for-low, low-for-
high: Efﬁcient boundary detection from deep object features
and its applications to high-level vision. In ICCV, 2015. 1,
2, 5, 11

[4] G. Bertasius, J. Shi, and L. Torresani. Semantic segmentation

with boundary neural ﬁelds. In CVPR, 2016.

[5] J. Canny. A computational approach to edge detection. IEEE

Trans. PAMI, 8(6):679–698, 1986. 2

[6] L.-C. Chen, J. T. Barron, K. M. G. Papandreou, and A. L.
Yuille. Semantic image segmentation with task-speciﬁc edge
detection using cnns and a discriminatively trained domain
transform. In CVPR, 2016.

[7] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Semantic image segmentation with deep con-
volutional nets and fully connected crfs. In ICLR, 2015. 2,
5

[8] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
Cityscapes dataset for semantic urban scene understanding.
In CVPR, 2016. 1, 2, 5

[9] P. Dollar, Z. Tu, and S. Belongie. Supervised learning of

edges and object boundaries. In CVPR, 2006. 2

[10] P. Dollar and C. Zitnick. Structured forests for fast edge de-

tection. In ICCV, 2013. 2

[11] M. Everingham, L. Van Gool, C. K. I. Williams, J. Winn,
and A. Zisserman. The PASCAL Visual Object Classes
Challenge 2011 (VOC2011) Results.
http://www.pascal-
network.org/challenges/VOC/voc2011/workshop/index.html.
5

[12] C. Farabet, C. Couprie, L. Najman, and Y. LeCun. Learning
hierarchical features for scene labeling. IEEE Trans. PAMI,
35(8):1915–1929, 2013.

[13] V. Ferrari, F. Jurie, and C. Schmid. From images to shape
models for object detection. Int. Journal of Computer Vision,
87(3):284–303, 2010. 2

[14] D. F. Fouhey, A. Gupta, and M. Hebert. Unfolding an indoor

origami world. In ECCV, 2014.

[15] Y. Ganin and V. Lempitsky. Nˆ 4-ﬁelds: Neural network
nearest neighbor ﬁelds for image transforms. In ACCV, 2014.
2

[16] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014.

[17] S. Gupta, P. Arbel´aez, and J. Malik. Perceptual organiza-
tion and recognition of indoor scenes from rgb-d images. In
CVPR, 2013. 2

[18] B. Hariharan, P. Arbel´aez, L. Bourdev, S. Maji, and J. Malik.
Semantic contours from inverse detectors. In ICCV, 2011. 2,
5, 6, 11

[19] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 3

[20] V. Hedau, D. Hoiem, and D. Forsyth. Recovering the spatial

layout of cluttered rooms. In ICCV, 2009. 2

[21] D. Hoiem, A. A. Efros, and M. Hebert. Geometric context

from a single image. In ICCV, 2005. 2

[22] D. Hoiem, A. A. Efros, and M. Hebert. Recovering occlusion
boundaries from an image. Int. Journal of Computer Vision,
91(3):328–346, 2011. 2

[23] J. Hwang and T.-L. Liu. Pixel-wise deep learning for contour

detection. In ICLR, 2015. 2

[24] S. L. in Urban Canyons using Omni-Images. S. ramalingam
and s. bouaziz and p. sturm and m. brand. In IROS, 2010. 2
[25] P. Isola, D. Zoran, D. Krishnan, and E. H. Adelson. Crisp
boundary detection using pointwise mutual information. In
ECCV, 2014. 2

[26] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolutional
architecture for fast feature embedding. In ACM Multimedia,
2014. 5

[27] K. Karsch, Z. Liao, J. Rock, J. T. Barron, and D. Hoiem.
Boundary cues for 3d object shape recovery. In CVPR, 2013.
2

[28] A. Khoreva, R. Benenson, M. Omran, M. Hein, and
B. Schiele. Weakly supervised object boundaries. In CVPR,
2016. 5, 6

[29] J. Kittler. On the accuracy of the sobel edge detector. Image

and Vision Computing, 1(1):37–42, 1983. 2

[30] I. Kokkinos. Pushing the boundaries of boundary detection

using deep learning. In ICLR, 2016.

[31] S. Konishi, A. L. Yuille, J. M. Coughlan, and S. C. Zhu. Sta-
tistical edge detection: Learning and evaluating edge cues.
IEEE Trans. PAMI, 25(1):57–74, 2003. 2

[32] C.-Y. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply

supervised nets. In AISTATS, 2015. 3

[33] J. Lim, C. Zitnick, and P. Dollar. Sketch tokens: A learned
mid-level representation for contour and object detection. In
CVPR, 2013. 2

[34] T.-Y. Lin, M. Maire, S. J. Belongie, L. D. Bourdev, R. B.
Girshick, J. Hays, P. Perona, D. Ramanan, P. Dollar, and
C. L. Zitnick. Microsoft COCO: common objects in context.
CoRR, abs/1405.0312, 2014. 5

[35] M. Y. Liu, S. Lin, S. Ramalingam, and O. Tuzel. Layered

interpretation of street view images. In RSS, 2015.

[36] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 2
[37] M. Maire, S. X. Yu, and P. Perona. Reconstructive sparse
code transfer for contour detection and semantic labeling. In
ACCV, 2014. 1, 2

[38] J. Malik. Interpreting line drawings of curved objects. Int.

Journal of Computer Vision, 1(1):73–103, 1987. 2

[39] K. K. Maninis, J. Pont-Tuset, P. Arbel´aez, and L. V. Gool.

Convolutional oriented boundaries. In ECCV, 2016.

[40] D. R. Martin, C. C. Fowlkes, and J. Malik. Learning to detect
natural image boundaries using local brightness, color, and
texture cues. IEEE Trans. PAMI, 26(5):530–549, 2004. 2

[41] P. Pinheiro and R. Collobert. Recurrent convolutional neural

networks for scene labeling. In ICML, 2014.

[42] M. Prasad, A. Zisserman, A. Fitzgibbon, M. P. Kumar, and
P. H. Torr. Learning class-speciﬁc edges for object detection
and segmentation. In Computer Vision, Graphics and Image
Processing. Springer, 2006. 2

[43] X. Ren. Multi-scale improves boundary detection in natural

images. In ECCV, 2008. 2

[44] Q. Shan, B. Curless, Y. Furukawa, C. Hernandez, and
S. Seitz. Occluding contours for multi-view stereo. In CVPR,
2014. 2

[45] A. Sharma, O. Tuzel, and M. Y. Liu. Recursive context prop-
agation network for semantic scene labeling. In NIPS, 2014.
[46] W. Shen, X. Wang, Y. Wang, X. Bai, and Z. Zhang. Deep-
contour: A deep convolutional feature learned by positive-
In CVPR,
sharing loss for contour detection draft version.
2015. 2

[47] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2015.
2

[48] R. Vemulapalli, O. Tuzel, M. Y. Liu, and R. Chellapa. Gaus-
sian conditional random ﬁeld network for semantic segmen-
tation. In CVPR, 2016.

[49] L. Wang, J. Shi, G. Song, and I. Shen. Object detection com-
bining recognition and segmentation. In ACCV, 2007. 2
[50] S. Xie and Z. Tu. Holistically-nested edge detection.

In

ICCV, 2015. 2, 3, 5

[51] J. Yang, B. Price, S. Cohen, H. Lee, and M. H. Yang. Object
contour detection with a fully convolutional encoder-decoder
network. In CVPR, 2016.

[52] Z. Yu, W. Liu, W. Liu, X. Peng, Z. Hui, and B. V. Kumar.
Generalized transitive distance with minimum spanning ran-
dom forest. In IJCAI, 2015.

Appendices

A. Multi-label Edge Visualization

In order to effectively visualize the prediction quality of
multi-label semantic edges, the following color coding pro-
tocol is used to generate results in Fig. 1, Fig. 4, and Fig. 7.
First, we associate each of the K semantic object class a
unique value of Hue, denoted as H (cid:44) [H0, H1, · · · , HK−1].
Given a K-channel output Y from our CASENet’s fused
classiﬁcation module, where each element Yk(p) ∈ [0, 1]
denotes the pixel p’s predicted conﬁdence of belonging to
the k-th class, we return an HSV value for that pixel based
on the following equations:

H(p) =

(cid:80)

k Yk(p)Hk
(cid:80)
k Yk

,

S(p) = 255 max{Yk(p)|k = 0, · · · , K − 1},
V(p) = 255,

(5)

(6)

(7)

which is also how the ground truth color codes are com-
puted (by using ˆY instead). Note that the edge response
maps of testing results are thresholded with 0.5, with the
two classes having the strongest responses selected to com-
pute hue based on Eq. (5).

For Cityscapes, we manually choose the following hue
values to encode the 19 semantic classes so that the mixed
Hue values highlight different multi-label edge types:

H (cid:44) [359, 320, 40, 80, 90, 10, 20, 30, 140, 340,

280, 330, 350, 120, 110, 130, 150, 160, 170]

(8)

The colors and their corresponding class names are illus-
trated in following Table 3. The way Hue is mixed in equa-
tion 5 indicates that any strong false positive response or
incorrect response strength can lead to hue values shifted
from ground truth. This helps to visualize false prediction.

road
fence
vegetation
rider
train

sidewalk
pole
terrain
car
motorcycle

building
trafﬁc light
sky
truck
bicycle

wall
trafﬁc sign
person
bus

Table 3. The adopted color codes for Cityscapes semantic classes.

B. Additional Results on SBD

B.1. Early stage loss analysis

Fig. 8 shows the losses of different tested network con-
ﬁgurations between iteration 100-500. Note that for Fig. 1,
loss curves between iteration 0-8000 is not available due to
the large averaging kernel size. One can see CASENet’s

fused loss is initially larger than its side5 loss. It later drops
faster and soon become consistently lower than the side5
loss (see Fig. 1).

Figure 8. Early stage losses (up to 500 iterations) of different net-
work conﬁgurations with a moving average kernel length of 100.

B.2. Class-wise prediction examples

We illustrate 20 typical examples of the class-wise edge
predictions of different comparing methods in Fig. 9 and
10, with each example corresponding to one of the SBD
semantic category. One can observe that the proposed
CASENet slightly but consistently outperforms ResNets
with the basic and DSN architectures, by overall showing
sharper edges and often having stronger responses on difﬁ-
cult edges.

Meanwhile, Fig. 11 shows several difﬁcult or failure
cases on the SBD Datasets. Interestingly, while the ground
truth says there is no “aeroplane” in the ﬁrst row and “dining
table” in the second, the network is doing decently by giv-
ing certain level of edge responses, particularly in the “din-
ing table” example. The third row shows an example of the
false positive mistakes often made by the networks on small
objects. The networks falsely think there is a sheep while
it is in fact a rock. When objects become smaller and lose
details, such mistakes in general happen more frequently.

B.3. Class-wise precision-recall curves

Fig. 12 shows the precision-recall curves of each se-
mantic class on the SBD Dataset. Note that while post-
processing edge reﬁnement may further boost the prediction
performance [3], we evaluate only on the raw network pre-
dictions to better illustrate the network performance without
introducing other factors. The evaluation is conducted fully
based on the same benchmark code and ground truth ﬁles
released by [18]. Results indicate that CASENet slightly
but consistently outperforms the baselines.

B.4. Performance at different iterations

We evaluate the Basic, DSN, CASENet on SBD for ev-
ery 2000 iterations between 16000-30000, with the MF
score shown in Fig. 13. We found that the performance do
not change signiﬁcantly, and CASENet consistently outper-
forms Basic and DSN.

Figure 13. Testing Performance vs. different iterations.

B.5. Performance with a more standard split

Considering that many datasets adopts the training + val-
idation + test data split, we also randomly divided the SBD

training set into a smaller training set and a new validation
set with 1000 images. We used the average loss on valida-
tion set to select the optimal iteration number separately for
both Basic and CASENet. Their corresponding MFs on the
test set are 71.22% and 71.79%, respectively.

C. Additional Results on Cityscapes

C.1. Additional qualitative results

For more qualitative results, the readers may kindly refer
to our released videos on Cityscapes validation set, as well
as additional demo videos.

C.2. Class-wise precision-recall curves

Fig. 14 shows the precision-recall curves of each seman-
tic class on the Cityscapes Dataset. Again the evaluation
is conducted only on the raw network predictions. Since
evaluating the results at original scale (1024 × 2048) is ex-
tremely slow and is not necessary, we bilinearly downsam-
ple both the edge responses and ground truths to 512×1024.
Results indicate that CASENet consistently outperforms the
ResNet with the DSN architecture.

Figure 9. Class-wise prediction results of comparing methods on the SBD Dataset. Rows correspond to the predicted edges of “aeroplane”,
“bicycle”, “bird”, “boat”, “bottle”, “bus”, “car”, “cat”, “chair” and “cow”. Columns correspond to original image, ground truth, and results
of Basic, DSN, CASENet and CASENet-VGG.

Figure 10. Class-wise prediction results of comparing methods on the SBD Dataset. Rows correspond to the predicted edges of “dining
table”, “dog”, “horse”, “motorbike”, “person”, “potted plant”, “sheep”, “sofa”, “train” and “tv monitor”. Columns correspond to original
image, ground truth, and results of Basic, DSN, CASENet and CASENet-VGG.

Figure 11. Difﬁcult or failure cases on the SBD Dataset. Rows correspond to the predicted edges of “aeroplane”, “dining table” and
“sheep”. Columns correspond to original image, ground truth, and results of Basic, DSN, CASENet and CASENet-VGG.

Figure 12. Class-wise precision-recall curves of the proposed methods and baselines on the SBD Dataset.

Figure 14. Class-wise precision-recall curves of CASENet and DSN on the Cityscapes Dataset.

