6
1
0
2
 
v
o
N
 
2
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
1
1
7
0
.
1
1
6
1
:
v
i
X
r
a

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

1

Max-Margin Deep Generative Models for
(Semi-)Supervised Learning

Chongxuan Li, Jun Zhu, Member, IEEE, and Bo Zhang

Abstract—Deep generative models (DGMs) are effective on learning multilayered representations of complex data and performing
inference of input data by exploring the generative ability. However, it is relatively insufﬁcient to empower the discriminative ability of
DGMs on making accurate predictions. This paper presents max-margin deep generative models (mmDGMs) and a class-conditional
variant (mmDCGMs), which explore the strongly discriminative principle of max-margin learning to improve the predictive performance
of DGMs in both supervised and semi-supervised learning, while retaining the generative capability. In semi-supervised learning, we
use the predictions of a max-margin classiﬁer as the missing labels instead of performing full posterior inference for efﬁciency; we also
introduce additional max-margin and label-balance regularization terms of unlabeled data for effectiveness. We develop an efﬁcient
doubly stochastic subgradient algorithm for the piecewise linear objectives in different settings. Empirical results on various datasets
demonstrate that: (1) max-margin learning can signiﬁcantly improve the prediction performance of DGMs and meanwhile retain the
generative ability; (2) in supervised learning, mmDGMs are competitive to the best fully discriminative networks when employing
convolutional neural networks as the generative and recognition models; and (3) in semi-supervised learning, mmDCGMs can perform
efﬁcient inference and achieve state-of-the-art classiﬁcation results on several benchmarks.

Index Terms—Deep Generative Models, Max-margin Learning, Variational Inference, Supervised and Semi-Supervised Learning.

(cid:70)

1 INTRODUCTION

M AX-MARGIN learning has been effective on learning

discriminative models, with many examples such
as univariate-output support vector machines (SVMs) [9]
and multivariate-output max-margin Markov networks (or
structured SVMs) [52, 1, 53]. However, the ever-increasing
size of complex data makes it hard to construct such a
fully discriminative model, which has only a single layer
of adjustable weights, due to the facts that: (1) the manually
constructed features may not well capture the underlying
high-order statistics; and (2) a fully discriminative approach
cannot reconstruct the input data when noise or missing
values are present.

To address the ﬁrst challenge, previous work has con-
sidered incorporating latent variables into a max-margin
model,
including partially observed maximum entropy
discrimination Markov networks [61], structured latent
SVMs [56] and max-margin min-entropy models [36]. All
this work has primarily focused on a shallow structure of
latent variables. To improve the ﬂexibility, learning SVMs
with a deep latent structure has been presented in [51].
However, these methods do not address the second chal-
lenge, which requires a generative model to describe the
inputs. The recent work on learning max-margin generative
models includes max-margin topic models [58, 59], max-
margin Harmoniums [8], and nonparametric Bayesian latent
SVMs [60] which can infer the dimension of latent features
from data. However, these methods only consider the shal-

• C. Li, J. Zhu and B. Zhang are with Department of Computer Science and
Technology; TNList Lab; State Key Laboratory for Intelligent Technology
and Systems; Center for Bio-Inspired Computing Research, Tsinghua
University, Beijing, 100084 China. Email: chongxuanli1991@gmail.com;
dcszj@tsinghua.edu.cn; dcszb@tsinghua.edu.cn.

Manuscript received April 19, 2005; revised August 26, 2015.

low structure of latent variables, which may not be ﬂexible
enough to describe complex data.

Much work has been done on learning generative mod-
els with a deep structure of nonlinear hidden variables,
including deep belief networks [45, 27, 41], autoregres-
sive models [23, 17], stochastic variations of autoencoders
[55, 4, 3] and Generative Adversarial Nets (GANs) [14, 40].
For such models, inference is a challenging problem, which
has motivated much recent progress on stochastic vari-
ational inference algorithms [22, 44, 5, 6]. However, the
primary focus of deep generative models (DGMs) has been
on unsupervised learning, with the goals of learning latent
representations and generating input samples. Though the
latent representations can be used with a downstream clas-
siﬁer to make predictions, it is often beneﬁcial to learn a
joint model that considers both input and response vari-
ables. The recent work on semi-supervised deep generative
models [21, 50, 34, 46] proves the effectiveness of DGMs on
modeling the density of unlabeled data to beneﬁt the pre-
diction task (See Sec. 2 for a detailed discussion). However,
it remains open whether the discriminative max-margin
learning is suitable for this task.

In this paper, we revisit the max-margin principle and
present max-margin deep generative models (mmDGMs),
which learn multilayered representations that are good for
both classiﬁcation and input inference. Our mmDGMs con-
join the ﬂexibility of DGMs on describing input data and
the strong discriminative ability of max-margin learning
on making accurate predictions. Given fully labeled data,
we formulate mmDGMs as solving a variational inference
problem of a DGM regularized by a set of max-margin
posterior constraints, which bias the model to learn repre-
sentations that are good for prediction. We deﬁne the max-
margin posterior constraints as a linear functional of the

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

target variational distribution of the latent presentations. To
optimize the joint learning problems, we develop a doubly
stochastic subgradient descent algorithm, which generalizes
the Pagesos algorithm [49] to consider nontrivial latent vari-
ables. For the variational distribution, we build a recognition
model to capture the nonlinearity, similar as in [22, 44].

To reduce the dependency on fully labeled data, we
further propose a class-conditional variant of mmDGMs
(mmDCGMs) to deal with partially labeled data for semi-
supervised learning, where the amount of unlabeled data is
typically much larger than that of labeled ones. Speciﬁcally,
mmDCGMs employ a deep max-margin classiﬁer to infer
the missing labels for unlabeled data and a class-conditional
deep generative model [21] to capture the joint distribution
of the data, labels and latent variables. Unlike [42, 50, 46],
our mmDCGMs separate the pathways of inferring labels
and latent variables completely and can generate images
given a speciﬁc class. Instead of inferring the full posterior
of labels as in [21, 34], which is computationally expensive
for large datasets, we use the prediction of the classiﬁer
as a point estimation of the label to speed-up the training
procedure. We further design additional max-margin and
label-balance regularization terms of unlabeled data to en-
hance the classiﬁer and signiﬁcantly boost the classiﬁcation
performance.

We consider two types of networks used in our
mmDGMs and mmDCGMs—multiple layer perceptrons
(MLPs) as in [22, 44] and convolutional neural networks
(CNNs) [24]. In the CNN case, following [11], we apply un-
pooling, convolution and rectiﬁcation sequentially to form
a highly non-trivial deep generative network to generate
images from the latent variables that are learned automat-
ically by a recognition model using a standard CNN. We
present the detailed network structures in the experiment
section. Empirical results on the widely used MNIST [24],
SVHN [39] and small NORB [25] datasets demonstrate
that: (1) mmDGMs can signiﬁcantly improve the prediction
performance in supervised learning, which is competitive
to the best feedforward neural networks, while retaining
the capability of generating input samples and completing
their missing values; and (2) mmDCGMs can achieve state-
of-the-art classiﬁcation results with efﬁcient inference and
disentangle styles and classes based on raw images in semi-
supervised learning.

In summary, our main contributions are:

• We present max-margin DGMs for both supervised
and semi-supervised settings to signiﬁcantly en-
hance the discriminative power of DGMs while re-
taining their generative ability;

• We develop efﬁcient algorithms to solve the joint
learning problems, which involve intractable expec-
tation and non-smooth piecewise linear operations;

• We achieve state-of-the-art results on several bench-
marks in semi-supervised learning and competitive
prediction accuracy as the fully discriminative CNNs
in supervised learning.

The rest of the paper is structured as follows. Section 2 sur-
veys the related work. Section 3 presents max-margin deep
generative models for both supervised and semi-supervised

learning. Section 4 presents experimental results. Finally,
Section 5 concludes.

2

2 RELATED WORK

Deep generative models (DGMs) are good at discovering
the underlying structures in the input data, but the training
of the model parameters and inference of the posterior
distribution are highly nontrivial tasks. Recently, signiﬁ-
cant progress has been made on enriching the represen-
tative power of variational inference and Markov chain
Monte Carlo methods for posterior inference, such as vari-
ational Autoencoders (VAEs) [22, 44] and neural adaptive
MCMC [12]. VAEs [22, 44] build a recognition model to
infer the posterior of latent variables and the parameters
are trained to optimize a variational bound of the data
likelihood. Neural adaptive MCMC [12] employs a similar
recognition model as the proposal distribution for impor-
tance sampling to estimate the gradient of log-posterior
and hence can perform approximate Bayesian inference of
DGMs.

To learn the parameters, besides the commonly used
MLE estimator as adopted by VAEs, recent work has pro-
posed various objectives. For example, Generative Adver-
sarial Nets (GANs) [14] construct a discriminator to dis-
tinguish the generated samples from the training data and
the parameters are trained based on a minimax two-player
game framework. Generative Moment Matching Networks
(GMMNs) [30, 13] generate samples from a directed deep
generative model, which is trained to match all orders
of statistics between training data and samples from the
model. The very recent work [43] extends the ideas to learn
conditional GMMNs with much broader applicability.

Extensive work has been focusing on realistic image gen-
eration in unsupervised setting. For example, DRAW [16]
employs recurrent neural networks as the generative model
and recognition model and introduces a 2-D attention
mechanism to generate sequences of real digits step by
step. MEM-VAE [29] leverages an external memory and an
attention mechanism to encode and retrieve the detailed
information lost in the recognition model to enhance DGMs.
LAP-GAN [10] proposes a cascade of GANs to generate
high quality natural images through a Laplacian pyramid
framework [7]. DCGAN [40] adopts fractionally strided
convolution networks in the generator to learn the spatial
upsampling and reﬁnes the generated samples.

Some recent advances [21, 34, 50, 46, 42] have been
made on extending DGMs to deal with partially observed
data. For example, the conditional VAEs [21] treat labels as
conditions of DGMs to describe input data; they perform
posterior inference of labels given unlabeled data and can
generate a speciﬁc class of images. ADGM [34] introduces
auxiliary latent variables to DGMs to make the varia-
tional distribution more expressive and does well in semi-
supervised learning. Cat-GAN [50] generalizes GANs with a
categorical discriminative network and an objective function
that includes the mutual information between the input
data and the prediction of the discriminative network. [46]
proposes feature mapping, virtual batch normalization and
other techniques to improve the performance of GANs on

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

semi-supervised learning and image generation. The Lad-
der Network [42] achieves excellent classiﬁcation results in
semi-supervised learning by employing lateral connections
between autoencoders to reduce the competition between
the invariant feature extraction and the reconstruction of
object details.

Our work is complimentary to the above progress in
the sense that we investigate a new criterion (i.e., max-
margin learning) for DGMs in both supervised and semi-
supervised settings. Some preliminary results on the fully
supervised mmDGMs were published in [28], while the
semi-supervised extensions are novel.

3 MAX-MARGIN DEEP GENERATIVE MODELS

We now present the max-margin deep generative models
for supervised learning and their class-conditional variants
for semi-supervised learning. For both methods, we present
efﬁcient algorithms.

3.1 Basics of Deep Generative Models
We start from a general setting, where we have N i.i.d. data
X = {xn}N
n=1. A deep generative model (DGM) assumes
that each xn ∈ RD is generated from a vector of latent
variables zn ∈ RK , which itself follows some distribution.
The joint probability of a DGM is as follows:

p(X, Z|α, β) =

p(zn|α)p(xn|zn, β),

(1)

N
(cid:89)

n=1

where p(zn|α) is the prior of the latent variables and
p(xn|zn, β) is the likelihood model for generating obser-
vations. For notation simplicity, we deﬁne θ = (α, β).
Depending on the structure of z, various DGMs have been
developed, such as the deep belief networks [45, 27], deep
sigmoid networks [38], deep latent Gaussian models [44],
and deep autoregressive models [17]. In this paper, we focus
on the directed DGMs, which can be easily sampled from via
an ancestral sampler.

However, in most cases learning DGMs is challenging
due to the intractability of posterior inference. The state-
of-the-art methods resort to stochastic variational methods
under the maximum likelihood estimation (MLE) frame-
work, ˆθ = argmaxθ log p(X|θ) (See the related work for
alternative learning methods). Speciﬁcally, let q(Z) be the
variational distribution that approximates the true posterior
p(Z|X, θ). A variational upper bound of the per sample
negative log-likelihood (NLL) − log p(xn|α, β) is:

L(θ, q(zn); xn)(cid:44)KL(q(zn)||p(zn|α))

−Eq(zn)[log p(xn|zn, β)],

where KL(q||p) is the Kullback-Leibler (KL) divergence
between distributions q and p. Then, L(θ, q(Z); X) (cid:44)
(cid:80)
nL(θ, q(zn); xn) upper bounds the full negative log-
likelihood − log p(X|θ).

It is important to notice that if we do not make re-
stricting assumption on the variational distribution q, the
bound is tight by simply setting q(Z) = p(Z|X, θ). That
is, the MLE is equivalent to solving the variational problem:
minθ,q(Z) L(θ, q(Z); X). However, since the true posterior is

3

intractable except a handful of special cases, we must resort
to approximation methods. One common assumption is that
the variational distribution is of some parametric form,
qφ(Z), and then we optimize the variational bound w.r.t
the variational parameters φ. For DGMs, another challenge
arises that the variational bound is often intractable to com-
pute analytically. To address this challenge, the early work
further bounds the intractable parts with tractable ones
by introducing more variational parameters [47]. However,
this technique increases the gap between the bound being
optimized and the log-likelihood, potentially resulting in
poorer estimates. Much recent progress [22, 44, 38] has
been made on hybrid Monte Carlo and variational methods,
which approximates the intractable expectations and their
gradients over the parameters (θ, φ) via some unbiased
Monte Carlo estimates. Furthermore, to handle large-scale
datasets, stochastic optimization of the variational objective
can be used with a suitable learning rate annealing scheme.
It is important to notice that variance reduction is a key
part of these methods in order to have fast and stable
convergence.

Most work on directed DGMs has been focusing on the
generative capability on inferring the observations, such
as ﬁlling in missing values [22, 44, 38], while relatively
insufﬁcient work has been done on investigating the pre-
dictive power, except the recent advances [21, 50] for semi-
supervised learning. Below, we present max-margin deep
generative models, which explore the discriminative max-
margin principle to improve the predictive ability of the
latent representations, while retaining the generative capa-
bility.

3.2 Max-margin Deep Generative Models

We ﬁrst consider the fully supervised setting, where the
training data is a pair (x, y) with input features x ∈ RD
and the groundtruth label y. Without loss of generality,
we consider the multiclass classiﬁcation, where y ∈ C =
{1, . . . , M }. As illustrated in Fig. 1, a max-margin deep
generative model (mmDGM) consists of two components:
(1) a deep generative model to describe input features; and
(2) a max-margin classiﬁer to consider supervision. For the
generative model, we can in theory adopt any DGM that
deﬁnes a joint distribution over (X, Z) as in Eq. (1). For the
max-margin classiﬁer, instead of ﬁtting the input features
into a conventional SVM, we deﬁne the linear classiﬁer on
the latent representations, whose learning will be regular-
ized by the supervision signal as we shall see. Speciﬁcally,
if the latent representation z is given, we deﬁne the la-
tent discriminant function F (y, z, η; x) = η(cid:62)f (y, z), where
f (y, z) is an M K-dimensional vector that concatenates M
subvectors, with the yth being z and all others being zero,
and η is the corresponding weight vector.

We consider the case that η is a random vector, following
some prior distribution p0(η). Then our goal is to infer
the posterior distribution p(η, Z|X, Y), which is typically
approximated by a variational distribution q(η, Z) for com-
putational tractability. Notice that this posterior is different
from the one in the vanilla DGM. We expect that the supervi-
sion information will bias the learned representations to be
more powerful on predicting the labels at testing. To account

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

4

the solution of q(η, Z) will be exactly the Bayesian posterior,
and the problem is equivalent to do MLE for θ.

By absorbing the slack variables, we can rewrite the

problem in an unconstrained form:

min
θ,q(η,Z)

L(θ, q(η, Z); X) + CR(q(η, Z; X)),

(4)

the

hinge

is: R(q(η, Z); X)

loss
n=1 maxy∈C(∆ln(y) − Eq[η(cid:62)∆fn(y)]). Due

=
where
(cid:80)N
to the
convexity of max function, it is easy to verify that the hinge
loss is an upper bound of the training error of classiﬁer (2),
that is, R(q(η, Z); X) ≥ (cid:80)
n ∆ln(ˆyn). Furthermore, the
hinge loss is a convex functional over the variational
distribution because of the linearity of the expectation
operator. These properties render the hinge loss as a good
surrogate to optimize over. Previous work has explored
this idea to learn discriminative topic models [58], but with
a restriction on the shallow structure of hidden variables.
Our work presents a signiﬁcant extension to learn deep
generative models, which pose new challenges on the
learning and inference.

3.2.2 The Doubly Stochastic Subgradient Algorithm
The variational formulation of problem (4) naturally sug-
gests that we can develop a variational algorithm to address
the intractability of the true posterior. We now present
a new algorithm to solve problem (4). Our method is a
doubly stochastic generalization of the Pegasos (i.e., Primal
Estimated sub-GrAdient SOlver for SVM) algorithm [49] for
the classic SVMs with fully observed input features, with the
new extension of dealing with a highly nontrivial structure
of latent variables.

n,y ωy
n

(cid:16)
η(cid:62) (cid:80)

First, we make the structured mean-ﬁeld (SMF) assump-
tion that q(η, Z) = q(η)qφ(Z). Under the assumption,
we have the discriminant function as Eq[η(cid:62)∆fn(y)] =
Eq(η)[η(cid:62)]E
qφ(z(n))[∆fn(y)]. Moreover, we can solve for
the optimal solution of q(η) in some analytical
form.
In fact, by the calculus of variations, we can show
that given the other parts the solution is q(η) ∝
(cid:17)
Eqφ[∆fn(y)]
, where ω are the La-
p0(η) exp
grange multipliers (See [58] for details). If the prior is
normal, p0(η) = N (0, σ2I), we have the normal posterior:
q(η) = N (λ, σ2I), where λ = σ2 (cid:80)
Eqφ[∆fn(y)].
Therefore, even though we did not make a parametric
form assumption of q(η), the above results show that the
optimal posterior distribution of η is Gaussian. Since we
only use the expectation in the optimization problem and
in prediction, we can directly solve for the mean parameter
λ instead of q(η). Further, in this case we can verify that
KL(q(η)||p0(η)) = ||λ||2
2σ2 and then the equivalent objective
function in terms of λ can be written as:

n,y ωy
n

min
θ,φ,λ

L(θ, φ; X) +

||λ||2
2σ2 + CR(λ, φ; X),

(5)

where R(λ, φ; X) = (cid:80)N
n=1 (cid:96)(λ, φ; xn) is the total hinge
loss, and the per-sample hinge-loss is (cid:96)(λ, φ; xn) =
maxy∈C(∆ln(y) − λ(cid:62)Eqφ[∆fn(y)]). Below, we present a
doubly stochastic subgradient descent algorithm to solve
this problem.

The ﬁrst stochasticity arises from a stochastic estimate of
the objective by random mini-batches. Speciﬁcally, the batch

Fig. 1. a) and b): Graphical models of mmDGMs when labels are given
or missing. c) and d): Graphical models of mmDCGMs when labels are
given or missing. The solid line and the dash dot line represent the gen-
erative model and recognition model respectively. The dot line stands
for the max-margin classiﬁer. Compared with mmDGMs, mmDCGMs
disentangle the label information from the latent variables and separate
the pathways of inferring labels and latent variables.

for the uncertainty of (η, Z), we take the expectation and
(cid:2)η(cid:62)f (y, z)(cid:3) ,
deﬁne the discriminant function F (y; x) = Eq
and the ﬁnal prediction rule that maps inputs to outputs is:

ˆy = argmax

F (y; x).

y∈C

(2)

Note that different from the conditional DGM [21], which
puts the class labels upstream and generates the latent
representations as well as input data x by conditioning on y,
the above classiﬁer is a downstream model in the sense that
the supervision signal is determined by conditioning on the
latent representations.

3.2.1 The Learning Problem
We want to jointly learn the parameters θ and infer the
posterior distribution q(η, Z). Based on the equivalent vari-
ational formulation of MLE, we deﬁne the joint learning
problem as solving:

min
θ,q(η,Z),ξ

L(θ, q(η, Z); X) + C

(3)

N
(cid:88)

n=1

ξn

∀n, y ∈ C, s.t. :

(cid:26)Eq[η(cid:62)∆fn(y)] ≥ ∆ln(y) − ξn
ξn ≥ 0,

where ∆fn(y) = f (yn, zn) − f (y, zn) is the difference of
the feature vectors; ∆ln(y) is the loss function that mea-
sures the cost to predict y if the true label is yn; and C
is a nonnegative regularization parameter balancing the
two components. In the objective, the variational bound is
deﬁned as L(θ, q(η, Z); X) = KL(q(η, Z)||p0(η, Z|α)) −
Eq [log p(X|Z, β)], and the margin constraints are from the
classiﬁer (2). If we ignore the constraints (e.g., setting C at 0),

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

learning needs to scan the full dataset to compute subgra-
dients, which is often too expensive to deal with large-
scale datasets. One effective technique is to do stochastic
subgradient descent [49], where at each iteration we ran-
domly draw a mini-batch of the training data and then do
the variational updates over the small mini-batch. Formally,
given a mini batch of size m, we get an unbiased estimate
of the objective:

˜Lm :=

L(θ, φ; xn) +

N
m

m
(cid:88)

n=1

||λ||2
2σ2 +

N C
m

m
(cid:88)

n=1

(cid:96)(λ, φ; xn).

The second stochasticity arises from a stochastic estimate
of the per-sample variational bound and its subgradient,
whose intractability calls for another Monte Carlo estimator.
n ∼ qφ(z|xn, yn) be a set of samples from
the variational distribution, where we explicitly put the
conditions. Then, the estimates of the per-sample variational
bound and the per-sample hinge-loss are

Formally, let zl

˜L(θ, φ; xn) =

log p(xn, zl

n|β) − log qφ(zl

n)

and

˜(cid:96)(λ, φ; xn) = max

∆ln(y) −

y

λ(cid:62)∆fn(y, zl

(cid:17)
n)

1
L

(cid:88)

l

n) − f (y, zl

n) = f (yn, zl

respectively, where ∆fn(y, zl
n). Note
that ˜L is an unbiased estimate of L, while ˜(cid:96) is a biased
estimate of (cid:96). Nevertheless, we can still show that ˜(cid:96) is an
upper bound estimate of (cid:96) under expectation. Furthermore,
this biasedness does not affect our estimate of the gradient.
In fact, by using the equality ∇φqφ(z) = qφ(z)∇φ log qφ(z),
we can construct an unbiased Monte Carlo estimate of
∇φ(L(θ, φ; xn) + (cid:96)(λ, φ; xn)) as:

log p(zl

n, xn) − log qφ(zl

(cid:17)
n) + Cλ(cid:62)∆fn(˜yn, zl
n)

gφ=

L
(cid:88)

(cid:16)

1
L
∇φ log qφ(zl

l=1

n),

(6)

(cid:80)

where the last
term roots from the hinge loss with
the loss-augmented prediction ˜yn = argmaxy(∆ln(y) +
1
n)). For θ and λ, the estimates of the gra-
L
dient ∇θL(θ, φ; xn) and the subgradient ∇λ(cid:96)(λ, φ; xn) are
easier, which are:

l λ(cid:62)f (y, zl

(cid:88)

1
L

l

(cid:16)

gθ =

∇θ log p(xn, zl

n|θ),

1
L

(cid:88)

l

and

gλ =

(cid:88)

(cid:16)

1
L

l

f (˜yn, zl

n) − f (yn, zl

(cid:17)
n)

.

Notice that the sampling and the gradient ∇φ log qφ(zl
n)
only depend on the variational distribution, not the under-
lying model.

The above estimates consider the general case where
the variational bound is intractable. In some cases, we can
compute the KL-divergence term analytically, e.g., when the
prior and the variational distribution are both Gaussian. In
such cases, we only need to estimate the rest intractable part
by sampling, which often reduces the variance [22]. Simi-
larly, we could use the expectation of the features directly,

5

Algorithm 1 Doubly Stochastic Subgradient Algorithm

Initialize θ, λ, and φ
repeat

draw a random mini-batch of m data points
draw random samples from noise distribution p((cid:15))
compute subgradient g = ∇θ,λ,φ ˜L(θ, λ, φ; Xm, (cid:15))
update parameters (θ, λ, φ) using subgradient g.

until Converge
return θ, λ, and φ

if it can be computed analytically, in the computation of
subgradients (e.g., gθ and gλ) instead of sampling, which
again can lead to variance reduction.

With the above estimates of subgradients, we can use
stochastic optimization methods such as SGD [49] and
AdaM [20] to update the parameters, as outlined in Alg. 1.
Overall, our algorithm is a doubly stochastic generalization
of Pegasos to deal with the highly nontrivial latent variables.
Now, the remaining question is how to deﬁne an ap-
propriate variational distribution qφ(z) to obtain a robust
estimate of the subgradients as well as the objective. Two
types of methods have been developed for unsupervised
DGMs, namely, variance reduction [38] and auto-encoding
variational Bayes (AVB) [22]. Though both methods can be
used for our models, we focus on the AVB approach. For
continuous variables Z, under certain mild conditions we
can reparameterize the variational distribution qφ(z) using
some simple variables (cid:15). Speciﬁcally, we can draw samples
(cid:15) from some simple distribution p((cid:15)) and do the transfor-
mation z = gφ((cid:15), x, y) to get the sample of the distribution
q(z|x, y). We refer the readers to [22] for more details. In our
experiments, we consider the special Gaussian case, where
we assume that the variational distribution is a multivariate
Gaussian with a diagonal covariance matrix:

qφ(z|x, y) = N (µ(x, y; φ), σ2(x, y; φ)),

(7)

whose mean and variance are functions of the input data.
This deﬁnes our recognition model. Then, the reparameter-
ization trick is as follows: we ﬁrst draw standard normal
variables (cid:15)l ∼ N (0, I) and then do the transformation
n = µ(xn, yn; φ) + σ(xn, yn; φ) (cid:12) (cid:15)l to get a sample.
zl
For simplicity, we assume that both the mean and variance
are function of x only. However, it is worth to emphasize
that although the recognition model is unsupervised, the
parameters φ are learned in a supervised manner because
the subgradient (6) depends on the hinge loss. Further
details of the experimental settings are presented in Sec. 4.1.

3.3 Conditional Variants for Semi-supervised Learning

As collecting labeled data is often costly and time-
consuming, semi-supervised learning (SSL) [62] is an impor-
tant setting, where the easy-to-get unlabeled data are lever-
aged to improve the quality. We now present an extension
of mmDGMs to the semi-supervised learning scenario.
Given a labeled dataset DL = {(xn, yn)}NL

n=1 and an
unlabeled dataset DU = {xn}NU
n=1, where the size NU is
typically much larger than NL, the goal of SSL is to explore
the intrinsic structures underlying the unlabeled data to
help learn a classiﬁer. As the learning objective of mmDGMs

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

consists of two parts—a data likelihood and a classiﬁcation
loss, a naive approach to considering unlabeled data is to
simply ignore the loss term when the class label is missing.
However, such ignorance leads to a weak coupling between
the likelihood model and the classiﬁer. Below, we present a
conditional variant of mmDGMs, namely max-margin deep
conditional generative models (mmDCGMs), to strongly
couple the classiﬁer and data likelihood.

Similar as in mmDGMs, an mmDCGM consists of two
components: (1) a deep max-margin classiﬁer to infer labels
given data and (2) a class-conditional deep generative model
to describe the joint distribution of the data, labels and
latent variables. Fig. 1 compares the graphical models of the
mmDGM and mmDCGM. Below, we present the learning
objective of mmDCGM formally, which consists of several
key components. For notation simplicity, we will omit the
parameters θ, φ and λ in the following formulae if no
confusion arises.

Generative loss: The ﬁrst part of our learning objective
is a generative loss to describe the observed data. For the
labeled data xn whose yn is visible, mmDCGM maximizes
the joint likelihood for the pair (xn, yn), log p(xn, yn), which
is lower bounded by:

L(xn, yn) = Eq(zn|xn,yn)

log

(cid:20)

p(xn|zn, yn)p(zn)p(yn)
q(zn|xn, yn)

(cid:21)

.

(8)
For the unlabeled data xn whose yn is hidden, we can
maximize the marginal likelihood log p(xn) by integrating
out the hidden labels, whose variational lower-bound is:

log p(xn)≥Eq(y|xn)Eq(zn|xn,y)

log

=Eq(y|xn) [L(xn, y)] + H(q(y|xn)).

(cid:20)

p(xn|zn, y)p(zn)p(y)
q(y|xn)q(zn|xn, y)

(cid:21)

(9)

These
lower-bounds were adopted in the previous
method [21]. However, one issue with this method is on
the computational inefﬁciency when dealing with a large
set of unlabeled data and a large number of classes. This is
because we need to compute the lower-bounds of the joint
likelihood for all possible y ∈ C and for each unlabeled data
point.

To make it computationally efﬁcient, we propose to use
the prediction of a classiﬁer ˆyn = arg max ˜q(y|xn) as a
point estimation to approximate the full posterior q(y|xn) to
speed-up the inference procedure, where we denote the clas-
siﬁer by ˜q because it is not restricted to a speciﬁc form with
a proper distribution over labels but is an unnormalized
one trained under the max-margin principle. Indeed, the
outputs of the classiﬁer are real values transformed by linear
operations, denoting the signed distance from the data to
the hyperplanes deﬁned by the weights. Consequently, the
entropy term should be zero and the lower-bound turns out
to be:

log p(xn) ≥ Eq(zn|xn,ˆyn)

log

(cid:20)

p(xn|zn, ˆyn)p(zn)p(ˆyn)
q(zn|xn, ˆyn)

(cid:21)

.

(10)
Note that the lower-bound is valid because we can view
ˆyn = arg max ˜q(yn|xn) as a delta distribution.

6

With the above deviations, we deﬁne the overall gen-
erative loss as the summation of the negative variational
bounds over DL and DU :

− LG =(cid:80)

(xn,yn)∈DL

Eq(zn|xn,yn)

log

+ (cid:80)

xn∈DU

Eq(zn|xn,ˆyn)

log

(cid:20)

(cid:20)

(cid:21)

(cid:21)

p(xn, yn, zn)
q(zn|xn, yn)
p(xn, ˆyn, zn)
q(zn|xn, ˆyn)

.(11)

Hinge loss: The second part of our learning objective
is a hinge loss on the labeled data. Speciﬁcally, though the
labeled data can contribute to the training of the classiﬁer
˜q(y|x) implicitly through the objective function in Eqn. (11),
it has been shown that adding a predictive loss for the
labeled data can speed-up convergence and achieve better
results [21, 34]. Here, we adopt the similar idea by introduc-
ing a hinge loss as the discriminative regularization for the
labeled data:

LL =

(cid:88)

(xn,yn)∈DL

(∆ln(y) + λ(cid:62)Eqφ[∆fn(y)]),

(12)

max
y∈C

which is the same as in the fully supervised case.

Hat loss: The third part of our learning objective is a hat
loss on the unlabeled data. Speciﬁcally, as NU is typically
much larger than NL in the semi-supervised learning, it
is desirable that the unlabeled data can regularize the be-
haviour of the classiﬁer explicitly. To this end, we further
propose a max-margin “hat loss” [62] for the unlabeled data
as follows:

(cid:88)

LU =

xn∈DU

max
y∈C

(∆lˆyn (y) + λ(cid:62)Eqφ[∆fˆyn(y)]),

(13)

where ∆fˆyn(y) = f (ˆyn, zn) − f (y, zn) and ∆lˆyn (y) is an
function that indicates whether y equals to the prediction
ˆyn or not. Namely, we treat the prediction ˆyn as putative
label and apply the hinge loss function on the unlabeled
data. This function is called the hat loss due to its shape
in a binary classiﬁcation example [62]. Intuitively, the hinge
loss enforces the predictor to make prediction correctly and
conﬁdently with a large margin for labeled data, while
the hat loss only requires the predictor to make decision
conﬁdently for unlabeled data. The hat loss, which has been
originally proposed in S3VMs [54], assumes that decision
boundary tends to lie on low-density areas of the feature
space. In such shallow models, the correctness of the as-
sumption heavily depends on the true data distribution,
which is ﬁxed but unknown. However, the constraint is
much more relaxed when building upon the latent feature
space learned by a deep model as described in our method.
In practice, the predictive performance of mmDCGMs is
improved substantially by adding this regularization, which
will be shown in Sec. 4.3.

Label-balance regularization: The last part of our learn-
ing objective is a regularization term to balance the possible
label predictions on the unlabeled data. Speciﬁcally, one
practical problem of semi-supervised learning is the imbal-
ance of the predictions [62], that is, a classiﬁer may classify
most of the unlabeled points as a same class. To address this
problem, we introduce a balance constraint for multiclass
semi-supervised learning:

∀y ∈ C,

∆lˆyn (y) =

1
NU

(cid:88)

xn∈DU

1
NL

(cid:88)

∆ln(y), (14)

(xn,yn)∈DL

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

which assumes that the distribution of the predictions of un-
labeled data should be the same as that of the groundtruth
labels in the labeled set. However, both sides in Eqn. (14)
are summations of indicator functions, which are non-
differentiable with respect to λ. Therefore, we cannot opti-
mize λ based on gradient methods to satisfy this constraint
directly. Here, we relax the constraint (14) as: ∀y ∈ C,

1
NU

(cid:88)

DU

1
NL

(cid:88)

DL

∆lˆyn (y)F (y; xn) =

∆ln(y)F (y; xn),

(15)

where F (y; xn) = λ(cid:62)E˜q[f (y, z)] and we simplify the sum-
mation notation. Given certain class y, the left hand side se-
lects the unlabeled data whose predictions equal to y accord-
ing to the indicator functions, and adds the corresponding
activations (discriminant functions of y divided by a factor
NU ) together. The right hand side computes this normalized
activations with indicator functions in same class for the
labeled data. Note that F (y; xn) is no smaller than F (y(cid:48); xn)
for any other y(cid:48) due to the deﬁnitions of the prediction
ˆyn and the indicator function ∆lˆyn (y). The gradients in
the relaxed version are still not well-deﬁned due to the
indicator functions. However, assuming that the predictions
ˆyn are given, both sides in Eqn. (15) are summations without
indicator functions, which are differentiable with respect to
λ. In our experiments, we indeed ignore the dependency of
the indicator functions on λ and approximate the total gra-
dients by the gradients of the cumulative activations. This
approximation does not work for the constraint in Eqn. (14)
because both sides turn out to be scalars given ˆyn and
the gradient with respect to λ is zero almost everywhere,
which cannot be used to optimize parameters. In fact, the
relaxed constraint balances the predictions of unlabeled data
according to the groundtruth implicitly, under the further
assumption that the cumulative activation is proportional
to the number of predictions for any y. Intuitively, if the
cumulative activation of the selected unlabeled data in
certain class y is larger than that of the labeled data, then
probably the predictor classiﬁes some unlabeled data as
y incorrectly. Consequently, the λ is updated to reduce
the activations, and then the number of predictions in this
class will decrease because F (y; xn) may be smaller than
F (y(cid:48); xn) for some other y(cid:48). Moreover, as hard constraints
are unlikely to satisfy in practice, we further relax them by
using a regularization penalty in the common L2-norm:

LB =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:88)

y∈C

(cid:18) (cid:80)

DU

∆lˆyn(y)F (y; x)

(cid:80)

DL

−

∆ln(y)F (y; x)

(cid:19)2

.

NU

NL

With the above sub-objectives, our ﬁnal objective func-

tion is a weighted sum:

L = LG + α(LL + αU LU + αBLB),

(16)

where α, αU and αB are hyper-parameters that control
the relative weights for the corresponding terms. We will
discuss the choice of each value in Sec. 4.1.

To optimize the overall learning objective, we still use
our doubly stochastic algorithm described in Sec. 3.2.2 to
compute the unbiased subgradient estimations for all of
the parameters and perform updates. Speciﬁcally, given
a mini-batch of data consisting of labeled data ML =

7

{(xn, yn)}mL
sequentially

n=1 and unlabeled data MU = {xn}mU

n=1, we

3)

1) predict ˆyn using the classiﬁer for each xn ∈ MU ;
2) plug in the predictions of the unlabeled data ˆyn and
the groudtruth of the labeled data yn into the indi-
cator functions in the label-balance regularization;
take (sub-)gradient with respect to all parameters
in the generative model, recognition model and
classﬁer to optimize the ﬁnal objective (16);
approximate the (sub-)gradients with intractable
expectations using the techniques described in
Sec. 3.2.2 and update parameters.

4)

Though the objective in semi-supervised learning is com-
plex, our method works well in practice.

4 EXPERIMENTS
We now present the experimental results in both supervised
and semi-supervised learning settings. Our results on sev-
eral benchmark datasets demonstrate that both mmDGMs
and mmDCGMs are highly competitive in classiﬁcation
while retaining the generative ability, under the comparison
with various strong competitors.

4.1 Experiment Settings

Though mmDGMs and mmDCGMs are applicable to any
DGMs that deﬁne a joint distribution of (X, Z) and
(X, Z, Y) respectively, we concentrate on the Variational
Auto-encoder (VA) [22] and Conditional VA [21] in our
experiments. We consider two types of recognition models:
multiple layer perceptrons (MLPs) and convolutional neural
networks (CNNs). We denote our mmDGM with MLPs
by MMVA. To perform classiﬁcation using VA which is
unsupervised, we ﬁrst learn the feature representations by
VA, and then build a linear SVM classiﬁer on these features
using the Pegasos stochastic subgradient algorithm [49].
This baseline will be denoted by VA+Pegasos. The corre-
sponding models with CNNs are denoted by Conv-MMVA
and Conv-VA+Pegasos respectively. We denote our mmD-
CGM with CNNs by Conv-MMCVA. We implement all
experiments based on Theano [2]. 1

4.1.1 Datasets and Preprocessing

We evaluate our models on the widely adopted MNIST [24],
SVHN [39] and small NORB [25] datasets. MNIST consists
of handwritten digits of 10 different classes (0 to 9). There
are 50,000 training samples, 10,000 validating samples and
10,000 testing samples and each one is of size 28×28. SVHN
is a large dataset consisting of color images of size 32 × 32.
The task is to recognize the center digits in natural scene
images. We follow the work [48, 15] to split the dataset
into 598,388 training data, 6,000 validating data and 26,032
testing data. The small NORB dataset consisits of gray
images distributed across 5 general classes: animal, human,
airplane, truck and car. Both the training set and testing
set in NORB contain 24,300 samples with different lighting
conditions and azimuths. We down-sample the images to

1. Source code and more detailed settings can be found at

https://github.com/thu-ml/mmdcgm-ssl.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

8

Fig. 2. Network architecture of Conv-MMVA with conv-net in the recognition model and unconv-net in the generative model (best view in color).

size of 32 × 32 as in [34] and split 1,000 samples from the
training set as the validating data if required.

For fair comparison in supervised learning on SVHN,
we perform Local Contrast Normalization (LCN) in the
experiment of the Conv-MMVA following [48, 15] and set
the distribution of x given z as Gaussian. In other cases,
we just normalize the data by a factor of 256 and choose
Bernoulli as the distribution of data.

4.1.2 Supervised Learning
In mmDGMs, the recognition network and the classiﬁer
share layers in computation. The mean and variance of
the latent variable z are transformed from the last layer of
the recognition model through an afﬁne transformation. It
should be noticed that we could use not only the expectation
of z but also the activation of any layer in the recognition
model as features. The only theoretical difference is from
where we add a hinge loss regularization to the gradient
and back-propagate it to previous layers. In all of the exper-
iments, the mean of z has the same nonlinearity but typically
much lower dimension than the activation of the last layer
in the recognition model, and hence often leads to a worse
performance. We use different features in MMVA and Conv-
MMVA, which will be explained below. We use AdaM [20]
to optimize parameters in all of the models. Although it is
an adaptive gradient-based optimization method, we decay
the global learning rate by a factor after sufﬁcient number
of epochs to ensure a stable convergence.

In MMVA, we follow the settings in [21] to compare both
generative and discriminative capacity of VA and MMVA.
Both the recognition and generative models employ a two-
layer MLP with 500 hidden units in each layer and the
dimension of the latent variables is 50. We choose C = 15 as
default in MMVA. We concatenate the activations of 2 layers
as the features used in the supervised tasks. We illustrate the
network architecture of MMVA in Appendix A.

In Conv-MMVA, we use standard CNNs [24] with
convolution and max-pooling operation as the recognition

model to obtain more competitive classiﬁcation results.
For the generative model, we use unconvnets [11] with a
“symmetric” structure as the recognition model, to recon-
struct the input images approximately. More speciﬁcally,
the top-down generative model has the same structure as
the bottom-up recognition model but replacing max-pooling
with unpooling operation [11] and applies unpooling, con-
volution and rectiﬁcation in order. Typically, there are 5 or 6
convolutional layers in the generative model and the recog-
nition model and the kernel size is either 5 or 3, depending
on the data. The total number of parameters is comparable
with previous work [15, 31, 26] and the split of the training
sets is the same. For simplicity, we do not involve mlpconv
layers [31, 26] and contrast normalization layers in our
recognition model, but they are not exclusive to our model.
We set C = 103 on MNIST and C = 104 on SVHN as
default. We use the activations of the last deterministic layer
as the features. We illustrate the network architecture of
Conv-MMVA with Gaussian hidden variables and Bernoulli
visible variables in Fig. 2.

4.1.3 Semi-supervised Learning

The mmDCGM separates the classiﬁer and the recognition
model of the latent variables completely, which allows us
to simply combine the state-of-the-art classiﬁer and deep
generative models together without competition. We only
consider the convolutional neural networks here and adopt
advanced techniques including global average pooling [32]
and batch normalization [19] to boost the performance of
our Conv-MMCVA. The architecture of the max-margin
classiﬁer refers to that of the discriminator in [50] and
the generative model is similar with the Conv-MMVA but
concatenates the feature maps and additional label maps
in one-hot encoding format at each layer as in [40]. Sim-
ilar with Conv-MMVA, the depth of each convolutional
networks is 5 or 6. We set α = 0.1 according to the
conditional VAE [21]. We optimize αU and αB with a search

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

9

TABLE 1
Error rates (%) on the MNIST dataset given full labeled data.

TABLE 4
MSE on MNIST data with missing values in the testing procedure.

Model
VA+Pegasos
VA+Class-conditionVA [21]
MMVA

Conv-VA+Pegasos
Conv-MMVA

Stochastic Pooling [57]
Network in Network [31]
Maxout Network [15]
DSN [26]

Error Rate

1.04
0.96
0.90

1.35
0.45

0.47
0.47
0.45
0.39

Model
Conv-VA+Pegasos
Conv-MMVA

CNN [48]
Stochastic Pooling [57]
Maxout Network [15]
Network in Network [31]
DSN [26]

Error Rate

25.3
3.09

4.9
2.80
2.47
2.35
1.92

TABLE 2
Error rates (%) on the SVHN dataset given full labeled data.

TABLE 3
Effects of C on the MNIST dataset in Conv-MMVA.

Error Rate (%)

Lower Bound

C

0
1
10
102
103
104

1.35
1.86
0.88
0.54
0.45
0.43

-93.17
-95.86
-95.90
-96.35
-99.62
-112.12

grid {..., 0.01, 0.03, 0.1, 0.3, 1, 3...} in terms of the validation
classiﬁcation error of a shallow S3VM on MNIST given 100
labels. The best values are αU = 3 and αB = 0.001 and
we ﬁx them in our Conv-MMCVA across all of the datasets.
Other hyper-parameters including the anneal strategy and
batch size are chosen according to the validation generative
loss. Once the hyperparameters are ﬁxed, we run our model
for 10 times with different random splits of the labeled and
unlabeled data, and we report the mean and the standard
deviation of the error rates.

4.2 Results with Supervised Learning

We ﬁrst present the results in the supervised learning set-
ting. Speciﬁcally, we evaluate the predictive and generative
performance of our MMVA and Conv-MMVA on the MNIST
and SVHN datasets in various tasks, including classiﬁcation,
sample generation, and missing data imputation.

Noise Type
Rand-Drop (0.2)
Rand-Drop (0.4)
Rand-Drop (0.6)
Rand-Drop (0.8)
Rect (6 × 6)
Rect (8 × 8)
Rect (10 × 10)
Rect (12 × 12)

VA
0.0109
0.0127
0.0168
0.0379
0.0637
0.0850
0.1100
0.1450

MMVA Conv-VA Conv-MMVA
0.0110
0.0127
0.0165
0.0358
0.0645
0.0841
0.1079
0.1342

0.0111
0.0127
0.0175
0.0453
0.0585
0.0754
0.0978
0.1299

0.0147
0.0161
0.0203
0.0449
0.0597
0.0724
0.0884
0.1090

4.2.1 Predictive Performance

We test both MMVA and Conv-MMVA on the MNIST
dataset. In MLP case,
three rows in Table 1
the ﬁrst
compare VA+Pegasos, VA+Class-condtionVA and MMVA,
where VA+Class-condtionVA refers to the best fully super-
vised model in [21]. Our model outperforms the baselines
signiﬁcantly. We further use the t-SNE algorithm [35] to
embed the features learned by VA and MMVA on 2D plane,
which again demonstrates the stronger discriminative abil-
ity of MMVA (See Appendix B for details).

In CNN cases, Table 3 shows the effect of C on classi-
ﬁcation error rate and variational lower bound. Typically,
as C gets lager, Conv-MMVA learns more discriminative
features and leads to a worse estimation of data likelihood.
However, if C is too small, the supervision is not enough to
lead to predictive features. Nevertheless, C = 103 is quite a
good trade-off between the classiﬁcation performance and
generative performance. In this setting, the classiﬁcation
performance of our Conv-MMVA model is comparable to
the state-of-the-art fully discriminative networks with com-
parable architectures and number of parameters, shown in
the last four rows of Table 1.

We focus on Conv-MMVA on the SVHN datset as it
is more challenging. Table 2 shows the predictive perfor-
mance on SVHN. In this harder problem, we observe a
larger improvement by Conv-MMVA as compared to Conv-
VA+Pegasos, suggesting that DGMs beneﬁt a lot from max-
margin learning on image classiﬁcation. We also compare
Conv-MMVA with state-of-the-art results. To the best of our
knowledge, there is no competitive generative models to
classify digits on the SVHN dataset with full labels.

4.2.2 Generative Performance

We investigate the generative capability of MMVA and
Conv-MMVA on generating samples. Fig. 3 and Fig. 4
illustrate the images randomly sampled from VA and
MMVA models on MNIST and SVHN respectively, where
we output the expectation of the value at each pixel to
get a smooth visualization. Fig. 4 demonstrates the beneﬁts
from jointly training of DGMs and max-margin classiﬁers.
Though Conv-VA gives a tighter lower bound of data likeli-
hood and reconstructs data more elaborately, it fails to learn
the pattern of digits in a complex scenario and could not
generate meaningful images. In this scenario, the hinge loss
regularization on recognition model is useful for generating
main objects to be classiﬁed in images.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

10

(a) VA

(b) MMVA

(c) Conv-VA

(d) Conv-MMVA

Fig. 3. Generation on MNIST. (a-b): images randomly generated by VA and MMVA respectively; (c-d): images randomly generated by Conv-VA and
Conv-MMVA respectively. Our mmDGMs retain similar ability as the baselines to generate images.

(a) Training data

(b) Conv-VA

(c) Conv-MMVA (C = 103)

(d) Conv-MMVA (C = 104)

Fig. 4. Generation on SVHN. (a): training data preprocessed by LCN; (b): samples randomly generated by Conv-VA; (c-d): samples randomly
generated by Conv-MMVA when C = 103 and C = 104 respectively.

(a) Rand-Drop (0.6)

(b) Rect (12 × 12)

Fig. 5. Imputation results of MMVA in two noising conditions: column 1 shows the true data; column 2 shows the perturbed data; and the remaining
columns show the imputations for 20 iterations.

4.2.3 Missing Data Imputation and Classiﬁcation

random variables as the input distribution changes.

We further test MMVA and Conv-MMVA on the task of
missing data imputation. For MNIST, we consider two
types of missing values [33]: (1) Rand-Drop: each pixel is
missing randomly with a pre-ﬁxed probability; and (2) Rect:
a rectangle located at the center of the image is missing.
Given the perturbed images, we uniformly initialize the
missing values between 0 and 1, and then iteratively do the
following steps: (1) using the recognition model to sample
the hidden variables; (2) predicting the missing values to
generate images; and (3) using the reﬁned images as the in-
put of the next round. For SVHN, we do the same procedure
as in MNIST but initialize the missing values with Guassian

Intuitively, generative models with CNNs could be more
powerful on learning patterns and high-level structures,
while generative models with MLPs learn more to recon-
struct the pixels in detail. This conforms to the MSE re-
sults shown in Table 4: Conv-VA and Conv-MMVA out-
perform VA and MMVA with a missing rectangle, while
VA and MMVA outperform Conv-VA and Conv-MMVA
with random missing values. Compared with the baselines,
mmDGMs also make more accurate completion when large
patches are missing. All of the models infer missing values
for 100 iterations.

We visualize the inference procedure of MMVA in Fig. 5.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

TABLE 5
Error rates(%) with missing values on MNIST.

CNN Conv-VA Conv-MMVA

Noise Level
Rect (6 × 6)
Rect (8 × 8)
Rect (10 × 10)
Rect (12 × 12)

7.5
18.8
30.3
47.2

2.5
4.2
8.4
18.3

1.9
3.7
7.7
15.9

TABLE 6
Error rates (%) on (partially) labeled MNIST dataset.

Algorithm
M1+M2 [21]
VAT [37]
Ladder [42]
CatGAN [50]
ADGM [34]
SDGM [34]
Conv-CatGAN [50]
Improved-GAN [46]
Conv-Ladder [42]
Conv-MMCVA

n = 100
3.33 (±0.14)
2.33
1.06 (±0.37)
1.91 (±0.10)
0.96 (±0.02)
1.32 (±0.07)
1.39 (±0.28)
0.96 (±0.07)
0.89 (±0.50)
1.24 (±0.54)

n = 1000
2.4 (±0.02)
1.36
0.84 (±0.08)
1.73 (±0.18)
-
-
-
-
-
0.54 (±0.04)

ALL
0.96
0.64
0.57
0.91
-
-
0.48
-
-
0.31

Considering both types of missing values, MMVA could
infer the unknown values and reﬁne the images in several
iterations even with a large ratio of missing pixels. More
visualization results on MNIST and SVHN are presented in
Appendix C.

We further present classiﬁcation results with missing
values on MNIST in Table 5. CNN makes prediction on the
incomplete data directly. Conv-VA and Conv-MMVA infer
missing data for 100 iterations at ﬁrst and then make pre-
diction on the reﬁned data. In this scenario, Conv-MMVA
outperforms both Conv-VA and CNN, which demonstrates
the advantages of our mmDGMs, which have both strong
discriminative and generative capabilities.

Overall, mmDGMs have comparable capability of infer-
ring missing values and prefer to learn high-level patterns
instead of local details.

4.3 Results with Semi-supervised Learning

We now present the predictive and generative results on
MNIST, SVHN and small NORB datasets given partially
labeled data.

4.3.1 Predictive Performance

We compare our Conv-MMCVA with a large body of pre-
vious methods on the MNIST dataset under different set-
tings in Table 6. Our method is competitive to the state-
of-the-art results given 100 labels. As the number of labels
increases, the max-margin principle signiﬁcantly boosts the
performance of Conv-MMCVA relative to the other models,
including the Ladder Network [42]. Indeed, given 1,000
labels, Conv-MMCVA not only beats existing methods in the
same setting, but also is comparable to the best supervised
results of DGMs. The supervised learning results of Conv-
MMCVA again conﬁrm that by leveraging max-margin prin-
ciple DGMs can achieve the same discriminative ability as

11

Fig. 6. Effect of size of labeled data on MNIST. The labeled data of
smaller size is a subset of that of larger size in the same curve to reduce
variance. Generally, the error rates decrease as the number of labels
increase and the peaks may be caused by the poor quality of new added
labeled data. Nevertheless, 800 labels are sufﬁcient to achieve an error
rate that is comparable to the supervised learning results of other DGMs.

TABLE 7
Error rates (%) on SVHN and NORB datasets given 1000 labels.

Algorithm
M1+M2 [21]
VAT [37]
ADGM [34]
SDGM [34]
Improved-GAN [46]
Ensemble-10-GANs [46]
Conv-MMCVA

SVHN n = 1000 NORB n = 1000

36.02 (±0.10)
24.63
22.86
16.61(±0.24)
8.11 (±1.3)
5.88 (±1.0)
4.95 (±0.18)

18.79 (±0.05)
9.88
10.06(±0.05)
9.40(±0.04)
-
-
6.11 (±0.58)

the state-of-the-art CNNs with comparable architectures. We
analyze the effect of the number of labels in Fig. 6 for Conv-
MMCVA, where the four curves share the same settings but
use different random seeds to split data and initialize the
networks.

Table 7 shows the classiﬁcation results on the more
challenging SVHN and NORB datasets. Following previous
methods [21, 37, 34], we use 1,000 labels on both datasets.
We can see that our methods outperform the previous
state-of-the-art substantially. Ensemble-10-GANs refers to an
ensemble of 10 Improved-GANs [46] with 9-layer classiﬁers
while we employ a single model with a shallower 6-layer
classiﬁer. Note that it is easy to further improve our model
by using more advanced networks, e.g. ResNet [18], without
competition due to the separated architectures. In this paper,
we focus on comparable architectures for fairness.

We further analyze the effect of the regularization terms
to investigate the possible reasons for the outstanding per-
formance. If we omit the hat loss regularization, the Conv-
MMCVA suffers from overﬁtting and only achieves 6.4%
error rates on the MNIST dataset given 100 labels. The
underlying reason is that we approximate the full posterior
inference by a greedy point estimation. If the prediction
of the classiﬁer is wrong, the generative model tends to
interpret the unlabeled data with the incorrect label instead
of enforcing the classiﬁer to ﬁnd the true label as in previous
conditional DGM [21]. However, the hat loss provides an

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

12

(a) MNIST data

(b) MNIST samples

(c) SVHN data

(d) SVHN samples

Fig. 7. Class-conditional generation on MNIST (100 labels) and SVHN (1000 labels) datasets. (a) and (c) present 100 labeled training data sorted
by class on MNIST and SVHN datasets respectively. (b) and (d) show samples on corresponding datasets where each row shares same class y
and each column shares same latent variables z.

conditions and points of view. Nevertheless, Conv-MMCVA
can still separate these physical semantics from the general
categories beyond digits. To the best of our knowledge, there
is no competitive generative models to generate NORB data
class-conditionally given the partially labeled data.

5 CONCLUSIONS
In this paper, we propose max-margin deep generative mod-
els (mmDGMs) and the class-conditional variants (mmD-
CGMs), which conjoin the predictive power of max-margin
principle and the generative ability of deep generative mod-
els. We develop a doubly stochastic subgradient algorithm
to learn all parameters jointly and consider two types of
recognition models with MLPs and CNNs respectively. We
evaluate our mmDGMs and MMDCGMs in supervised
learning and semi-supervised learning settings respectively.
Given partially labeled data, we approximate the full pos-
terior of the labels by a delta distribution for efﬁciency and
propose additional max-margin and label balance losses for
unlabeled data for effectiveness.

We present extensive results to demonstrate that our
methods can signiﬁcantly improve the prediction perfor-
mance of deep generative models, while retaining the strong
generative ability on generating input samples as well as
completing missing values. In fact, by employing CNNs in
our mmDGMs and mmDCGMs, we achieve low error rates
on several datasets including MNIST, SVHN and NORB,
which are competitive to the best fully discriminative net-
works in supervised learning and improve the previous
state-of-the-art semi-supervised results signiﬁcantly.

ACKNOWLEDGMENTS
The work was supported by the National Basic Research
Program (973 Program) of China (No. 2013CB329403), Na-
tional NSF of China (Nos. 61620106010, 61322308, 61332007),
the Youth Top-notch Talent Support Program, and Tsinghua
TNList Lab Big Data Initiative.

REFERENCES
[1] Y. Altun, I. Tsochantaridis, and T. Hofmann. Hidden
Markov support vector machines. In International Con-
ference on Machine Learning, 2003.

(a) NORB data

(b) NORB samples

Fig. 8. Class-conditional generation on NORB dataset (1000 labels). (a)
and (b) are labeled training data and generated samples respectively.

effective way for the classiﬁer to achieve a sufﬁciently good
classiﬁcation result, which can be ﬁne-tuned according to
the generative loss. In fact, trained to optimize the max-
margin losses for both the labeled and unlabeled data, the
classiﬁer itself without the DGM can get 2.1% error rates
on MNIST given 100 labels. These results demonstrate the
effectiveness of our proposed max-margin loss for the unla-
beled data. We also reduce 0.2% error rate in this setting by
using the label-balance regularization. Besides the excellent
performance, our Conv-MMCVA provides a potential way
to apply class-conditional DGMs on large scale datasets with
many more categories due to the efﬁcient inference.

4.3.2 Generative Performance

We demonstrate that our Conv-MMCVA has the ability to
disentangle classes and styles given a small amount of labels
on the MNIST, SVHN and NORB datasets, as shown in
Fig. 7 and Fig. 8. The images are generated by conditioning
on a label y and a style vector z. On the MNIST and
SVHN datasets, Conv-MMCVA are able to generate high-
quality images and z can capture the intensities, scales
and colors of the images. Note that previous generation
on SVHN in the semi-supervised learning setting is either
unconditioned [46] or based on some preprocessed data [21].
Our samples are a little blurry on the NORB dataset, which
contains elaborate images of 3D toys with different lighting

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

[2] F. Bastien, P. Lamblin, R. Pascanu, J. Bergstra, I. Good-
fellow, A. Bergeron, N. Bouchard, D. Warde-Farley, and
Y. Bengio. Theano: new features and speed improve-
ments. In Deep Learning and Unsupervised Feature Learn-
ing Workshop, Advances in Neural Information Processing
Systems Workshop, 2012.

[3] Y. Bengio, E. Laufer, G. Alain, and J. Yosinski. Deep
generative stochastic networks trainable by backprop.
In International Conference on Machine Learning, 2014.
[4] Y. Bengio, L. Yao, G.e Alain, and P. Vincent. General-
ized denoising auto-encoders as generative models. In
Advances in Neural Information Processing Systems, 2013.
J. Bornschein and Y. Bengio.
Reweighted wake-
International Conference on Learning Representa-
sleep.
tions, 2015.

[5]

[6] Y. Burda, R. Grosse, and R. Salakhutdinov.

Impor-
International Conference

tance weighted autoencoders.
on Learning Representations, 2015.

[7] P. Burt and Edward A. The laplacian pyramid as a com-
pact image code. IEEE Transactions on communications,
31(4):532–540, 1983.

[8] N. Chen, J. Zhu, F. Sun, and E. P. Xing. Large-margin
predictive latent subspace learning for multi-view data
analysis. IEEE Trans. on PAMI, 34(12):2365–2378, 2012.
[9] C. Cortes and V. Vapnik. Support-vector networks.

Journal of Machine Learning, 20(3):273–297, 1995.

[10] E. Denton, S. Chintala, S. Arthur, and R. Fergus. Deep
generative image models using a laplacian pyramid of
adversarial networks. In Advances in neural information
processing systems, 2015.

[11] A. Dosovitskiy, J. T. Springenberg, and T. Brox. Learn-
ing to generate chairs with convolutional neural net-
works. Computer Vision and Pattern Recognition, 2015.

[12] C. Du, J. Zhu, and B. Zhang. Learning deep generative
models with doubly stochastic mcmc. arXiv preprint
arXiv:1506.04557, 2015.

[13] G. K. Dziugaite, D. M. Roy, and Z. Ghahramani. Train-
ing generative neural networks via maximum mean
discrepancy optimization. Uncertainty in Artiﬁcial In-
telligence, 2015.

[14] I. J. Goodfellow, J. P. Abadie, M. Mirza, B. Xu, D. W.
Farley, S.ozair, A. Courville, and Y. Bengio. Generative
In Advances in Neural Information
adversarial nets.
Processing Systems, 2014.

[15] I. J. Goodfellow, D.Warde-Farley, M. Mirza, A. C.
Courville, and Y. Bengio. Maxout networks. In Interna-
tional Conference on Machine Learning, 2013.

[16] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for
International Conference on Machine
image generation.
Learning, 2015.

[17] K. Gregor, I. Danihelka, A. Mnih, C. Blundell, and
In Inter-

D. Wierstra. Deep autoregressive networks.
national Conference on Machine Learning, 2014.

[18] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual
learning for image recognition. Computer Vision and
Pattern Recognition, 2016.

[19] S. Ioffe and C. Szegedy. Batch normalization: Accel-
erating deep network training by reducing internal
covariate shift. arXiv preprint arXiv:1502.03167, 2015.

[20] D. P. Kingma and J. L. Ba. Adam: A method for

13

stochastic optimization.
Learning Representations, 2015.

In International Conference on

[21] D. P. Kingma, D.

J. Rezende, S. Mohamed, and
M. Welling. Semi-supervised learning with deep gen-
erative models. In Advances in Neural Information Pro-
cessing Systems, 2014.

[22] D. P. Kingma and M. Welling. Auto-encoding vari-
In International Conference on Learning

ational Bayes.
Representations, 2014.

[23] H. Larochelle and I. Murray. The neural autoregressive
In International Conference on

distribution estimator.
Artiﬁcial Intelligence and Statistics, 2011.

[24] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner.
Gradient-based learning applied to document recogni-
tion. In Proceedings of the IEEE, 1998.

[25] Y. LeCun, F. J. Huang, and L. Bottou. Learning methods
for generic object recognition with invariance to pose
and lighting. In Computer Vision and Pattern Recognition,
2004.

[26] C. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu.
In International Conference on

Deeply-supervised nets.
Artiﬁcial Intelligence and Statistics, 2015.

[27] H. Lee, R. Grosse, R. Ranganath, and A. Y. Ng. Convo-
lutional deep belief networks for scalable unsupervised
learning of hierarchical representations. In International
Conference on Machine Learning, 2009.

[28] C. Li, J. Zhu, T. Shi, and B. Zhang. Max-margin deep
In Advances in neural information

generative models.
processing systems, 2015.

[29] C. Li, J. Zhu, and B. Zhang. Learning to generate with
International Conference on Machine Learning,

memory.
2016.

[30] Y. Li, K. Swersky, and R. Zemel. Generative moment
matching networks. In International Conference on Ma-
chine Learning, 2015.

[31] M. Lin, Q. Chen, and S. Yan. Network in network.
In International Conference on Learning Representations,
2014.

[32] M. Lin, Q. Chen, and S. Yan. Network in network. In-
ternational Conference on Learning Representations, 2014.
[33] R. J. Little and D. B. Rubin. Statistical analysis with
missing data. Journal of Machine Learning Research, 539,
1987.

[34] L. Maaløe, C. K. Sønderby, S. K. Sønderby, and
O. Winther. Auxiliary deep generative models.
In
International Conference on Machine Learning, 2016.
[35] L. V. Matten and G. Hinton. Visualizing data using t-
SNE. Journal of Machine Learning Research, 9:2579–2605,
2008.

[36] K. Miller, M. P. Kumar, B. Packer, D. Goodman, and
D. Koller. Max-margin min-entropy models. In Inter-
national Conference on Artiﬁcial Intelligence and Statistics,
2012.

[37] T. Miyato, S. Maeda, M. Koyama, K. Nakae, and
S. Ishii. Distributional smoothing with virtual adver-
sarial training. stat, 1050:25, 2015.

[38] A. Mnih and K. Gregor. Neural variational inference
and learning in belief networks. In International Confer-
ence on Machine Learning, 2014.

[39] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu,
and A. Y. Ng. Reading digits in natural images with

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

unsupervised feature learning. Advances in Neural In-
formation Processing Systems Workshop on Deep Learning
and Unsupervised Feature Learning, 2011.

[40] A. Radford, L. Metz, and S. Chintala. Unsupervised
representation learning with deep convolutional gen-
International Conference
erative adversarial networks.
on Learning Representations, 2015.

[41] M. Ranzato, J. Susskind, V. Mnih, and G. E. Hinton. On
deep generative models with applications to recogni-
tion. In Computer Vision and Pattern Recognition, 2011.

[42] A. Rasmus, M. Berglund, M. Honkala, H. Valpola,
and T. Raiko. Semi-supervised learning with ladder
networks. In Advances in Neural Information Processing
Systems, 2015.

[43] Y. Ren, J. Li, Y. Luo, and J. Zhu. Conditional gener-
ative moment-matching networks. Advances in Neural
Information Processing Systems, 2016.

[44] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep
In International Conference on Ma-
generative models.
chine Learning, 2014.

[45] R. Salakhutdinov and G. E. Hinton. Deep Boltzmann
machines. In International Conference on Artiﬁcial Intelli-
gence and Statistics, 2009.

[46] T. Salimans, I. J. Goodfellow, W. Zaremba, V. Cheung,
A. Radford, and X. Chen.
Improved techniques for
training gans. Advances in Neural Information Processing
Systems, 2016.

[47] L. Saul, T. Jaakkola, and M. Jordan. Mean ﬁeld theory
for sigmoid belief networks. Journal of AI Research, 4:61–
76, 1996.

[48] P. Sermanet, S. Chintala, and Y. LeCun. Convolutional
neural networks applied to house numbers digit clas-
siﬁcation. In International Conference on Pattern Recogni-
tion, 2012.

[49] S. Shalev-Shwartz, Y. Singer, N. Srebro, and A. Cot-
ter. Pegasos: Primal estimated sub-gradient solver for
SVM. Mathematical Programming, Series B, 2011.

[50] J. T. Springenberg. Unsupervised and semi-supervised
learning with categorical generative adversarial net-
works. In International Conference on Learning Represen-
tations, 2016.

[51] Y. Tang. Deep learning using linear support vector
machines. In Challenges on Representation Learning Work-
shop, International Conference on Machine Learning, 2013.
[52] B. Taskar, C. Guestrin, and D. Koller. Max-margin
In Advances in Neural Information

Markov networks.
Processing Systems, 2003.

[53] I. Tsochantaridis, T. Hofmann, T. Joachims, and Y. Al-
tun. Support vector machine learning for interdepen-
In International
dent and structured output spaces.
Conference on Machine Learning, 2004.

[54] V. Vapnik. Statistical learning theory. Wiley-Interscience,

1998.

[55] P. Vincent, H. Larochelle, I. Lajoie, Y. Bengio, and P. A.
Manzagol. Stacked denoising autoencoders: Learning
useful representations in a deep network with a local
Journal of Machine Learning Re-
denoising criterion.
search, 11(Dec):3371–3408, 2010.

[56] C. J. Yu and T. Joachims. Learning structural SVMs with
latent variables. In International Conference on Machine

14

Learning, 2009.

[57] M. D. Zeiler and R. Fergus. Stochastic pooling for
regularization of deep convolutional neural networks.
In International Conference on Learning Representations,
2013.

[58] J. Zhu, A. Ahmed, and E. P. Xing. MedLDA: Maximum
Journal of Machine

margin supervised topic models.
Learning Research, 13:2237–2278, 2012.

[59] J. Zhu, N. Chen, H. Perkins, and B. Zhang. Gibbs max-
margin topic models with data augmentation. Journal
of Machine Learning Research, 15:1073–1110, 2014.
[60] J. Zhu, N. Chen, and E. P. Xing. Bayesian inference
with posterior regularization and applications to inﬁ-
nite latent SVMs. Journal of Machine Learning Research,
15:1799–1847, 2014.

[61] J. Zhu, E.P. Xing, and B. Zhang. Partially observed
maximum entropy discrimination Markov networks.
In Advances in Neural Information Processing Systems,
2008.

[62] X. Zhu and A. Goldberg.

Introduction to semi-
supervised learning. Synthesis lectures on artiﬁcial in-
telligence and machine learning, 3(1):1–130, 2009.

Chongxuan Li received his BS from Institute
for Interdiscriplinary Information Sciences, Ts-
inghua University, China. He is currently working
toward his PhD degree in the Department of
Computer Science and Technology at Tsinghua
University. His research interests are primarily
on statistical machine learning, especially deep
generative models for various learning tasks in-
cluding unsupervised, (semi-)supervised and re-
inforcement learning.

Jun Zhu received his BS, MS and PhD degrees
all from the Department of Computer Science
and Technology in Tsinghua University, China,
where he is currently an associate professor. He
was a project scientist and postdoctoral fellow
in the Machine Learning Department, Carnegie
Mellon University. His research interests are pri-
marily on developing statistical machine learn-
ing methods to understand scientiﬁc and engi-
neering data arising from various ﬁelds. He is a
member of the IEEE.

Bo Zhang graduated from the Department of
Automatic Control, Tsinghua University, Beijing,
China, in 1958. Currently, he is a Professor in
the Department of Computer Science and Tech-
nology, Tsinghua University and a Fellow of Chi-
nese Academy of Sciences, Beijing, China. His
main interests are artiﬁcial intelligence, pattern
recognition, neural networks, and intelligent con-
trol. He has published over 150 papers and four
monographs in these ﬁelds.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

APPENDIX A
NETWORK ARCHITECTURE OF MMVA
We illustrate the network structure of MMVA with Gaussian
hidden variables and Bernoulli visible variables in Fig. 9.

15

Fig. 9. Network architecture of MMVA with Gaussian hidden variables
and Bernoulli visible variables.

APPENDIX B
MANIFOLD VISUALIZATION
T-SNE embedding results of the features learned by VA and
MMVA on 2D plane are shown in Fig. 10 (a) and Fig. 10 (b)
respectively, using the same data points randomly sampled
from the MNIST dataset. Compared to the VA’s embedding,
MMVA separates the images from different categories better,
especially for the confusable digits such as digit “4” and
“9”. These results show that MMVA, which beneﬁts from
the max-margin principle, learns more discriminative repre-
sentations of digits than VA.

APPENDIX C
VISUALIZATION OF IMPUTATION RESULTS
The imputation results of Conv-VA and Conv-MMVA on
MNIST and SVHN are shown in Fig. 11 and Fig. 12 re-
spectively. On MNIST, Conv-MMVA makes fewer mistakes
and reﬁnes the images better, which accords with the MSE
results as reported in the main text. On SVHN, in most
cases, Conv-MMVA could complete the images with miss-
ing values on this much harder dataset. In the remaining
cases, Conv-MMVA fails potentially due to the changeful
digit patterns and less color contrast compared with hand-
writing digits dataset. Nevertheless, Conv-MMVA achieves
comparable results with Conv-VA on inferring missing data.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

16

Fig. 10. t-SNE embedding results for both (a) VA and (b) MMVA.

(a) VA

(b) MMVA

(a) Original data

(b) Noisy data

(c) Results of Conv-VA

(d) Results of Conv-MMVA

Fig. 11. (a): original test data; (b) test data with missing value; (c-d): results inferred by Conv-VA and Conv-MMVA respectively for 100 iterations.

(a) Original data

(b) Noisy data

(c) Results of Conv-VA

(d) Results of Conv-MMVA

Fig. 12. (a): original test data; (b) test data with missing value; (c-d): results inferred by Conv-VA and Conv-MMVA respectively for 100 epochs.

6
1
0
2
 
v
o
N
 
2
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
1
1
7
0
.
1
1
6
1
:
v
i
X
r
a

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

1

Max-Margin Deep Generative Models for
(Semi-)Supervised Learning

Chongxuan Li, Jun Zhu, Member, IEEE, and Bo Zhang

Abstract—Deep generative models (DGMs) are effective on learning multilayered representations of complex data and performing
inference of input data by exploring the generative ability. However, it is relatively insufﬁcient to empower the discriminative ability of
DGMs on making accurate predictions. This paper presents max-margin deep generative models (mmDGMs) and a class-conditional
variant (mmDCGMs), which explore the strongly discriminative principle of max-margin learning to improve the predictive performance
of DGMs in both supervised and semi-supervised learning, while retaining the generative capability. In semi-supervised learning, we
use the predictions of a max-margin classiﬁer as the missing labels instead of performing full posterior inference for efﬁciency; we also
introduce additional max-margin and label-balance regularization terms of unlabeled data for effectiveness. We develop an efﬁcient
doubly stochastic subgradient algorithm for the piecewise linear objectives in different settings. Empirical results on various datasets
demonstrate that: (1) max-margin learning can signiﬁcantly improve the prediction performance of DGMs and meanwhile retain the
generative ability; (2) in supervised learning, mmDGMs are competitive to the best fully discriminative networks when employing
convolutional neural networks as the generative and recognition models; and (3) in semi-supervised learning, mmDCGMs can perform
efﬁcient inference and achieve state-of-the-art classiﬁcation results on several benchmarks.

Index Terms—Deep Generative Models, Max-margin Learning, Variational Inference, Supervised and Semi-Supervised Learning.

(cid:70)

1 INTRODUCTION

M AX-MARGIN learning has been effective on learning

discriminative models, with many examples such
as univariate-output support vector machines (SVMs) [9]
and multivariate-output max-margin Markov networks (or
structured SVMs) [52, 1, 53]. However, the ever-increasing
size of complex data makes it hard to construct such a
fully discriminative model, which has only a single layer
of adjustable weights, due to the facts that: (1) the manually
constructed features may not well capture the underlying
high-order statistics; and (2) a fully discriminative approach
cannot reconstruct the input data when noise or missing
values are present.

To address the ﬁrst challenge, previous work has con-
sidered incorporating latent variables into a max-margin
model,
including partially observed maximum entropy
discrimination Markov networks [61], structured latent
SVMs [56] and max-margin min-entropy models [36]. All
this work has primarily focused on a shallow structure of
latent variables. To improve the ﬂexibility, learning SVMs
with a deep latent structure has been presented in [51].
However, these methods do not address the second chal-
lenge, which requires a generative model to describe the
inputs. The recent work on learning max-margin generative
models includes max-margin topic models [58, 59], max-
margin Harmoniums [8], and nonparametric Bayesian latent
SVMs [60] which can infer the dimension of latent features
from data. However, these methods only consider the shal-

• C. Li, J. Zhu and B. Zhang are with Department of Computer Science and
Technology; TNList Lab; State Key Laboratory for Intelligent Technology
and Systems; Center for Bio-Inspired Computing Research, Tsinghua
University, Beijing, 100084 China. Email: chongxuanli1991@gmail.com;
dcszj@tsinghua.edu.cn; dcszb@tsinghua.edu.cn.

Manuscript received April 19, 2005; revised August 26, 2015.

low structure of latent variables, which may not be ﬂexible
enough to describe complex data.

Much work has been done on learning generative mod-
els with a deep structure of nonlinear hidden variables,
including deep belief networks [45, 27, 41], autoregres-
sive models [23, 17], stochastic variations of autoencoders
[55, 4, 3] and Generative Adversarial Nets (GANs) [14, 40].
For such models, inference is a challenging problem, which
has motivated much recent progress on stochastic vari-
ational inference algorithms [22, 44, 5, 6]. However, the
primary focus of deep generative models (DGMs) has been
on unsupervised learning, with the goals of learning latent
representations and generating input samples. Though the
latent representations can be used with a downstream clas-
siﬁer to make predictions, it is often beneﬁcial to learn a
joint model that considers both input and response vari-
ables. The recent work on semi-supervised deep generative
models [21, 50, 34, 46] proves the effectiveness of DGMs on
modeling the density of unlabeled data to beneﬁt the pre-
diction task (See Sec. 2 for a detailed discussion). However,
it remains open whether the discriminative max-margin
learning is suitable for this task.

In this paper, we revisit the max-margin principle and
present max-margin deep generative models (mmDGMs),
which learn multilayered representations that are good for
both classiﬁcation and input inference. Our mmDGMs con-
join the ﬂexibility of DGMs on describing input data and
the strong discriminative ability of max-margin learning
on making accurate predictions. Given fully labeled data,
we formulate mmDGMs as solving a variational inference
problem of a DGM regularized by a set of max-margin
posterior constraints, which bias the model to learn repre-
sentations that are good for prediction. We deﬁne the max-
margin posterior constraints as a linear functional of the

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

target variational distribution of the latent presentations. To
optimize the joint learning problems, we develop a doubly
stochastic subgradient descent algorithm, which generalizes
the Pagesos algorithm [49] to consider nontrivial latent vari-
ables. For the variational distribution, we build a recognition
model to capture the nonlinearity, similar as in [22, 44].

To reduce the dependency on fully labeled data, we
further propose a class-conditional variant of mmDGMs
(mmDCGMs) to deal with partially labeled data for semi-
supervised learning, where the amount of unlabeled data is
typically much larger than that of labeled ones. Speciﬁcally,
mmDCGMs employ a deep max-margin classiﬁer to infer
the missing labels for unlabeled data and a class-conditional
deep generative model [21] to capture the joint distribution
of the data, labels and latent variables. Unlike [42, 50, 46],
our mmDCGMs separate the pathways of inferring labels
and latent variables completely and can generate images
given a speciﬁc class. Instead of inferring the full posterior
of labels as in [21, 34], which is computationally expensive
for large datasets, we use the prediction of the classiﬁer
as a point estimation of the label to speed-up the training
procedure. We further design additional max-margin and
label-balance regularization terms of unlabeled data to en-
hance the classiﬁer and signiﬁcantly boost the classiﬁcation
performance.

We consider two types of networks used in our
mmDGMs and mmDCGMs—multiple layer perceptrons
(MLPs) as in [22, 44] and convolutional neural networks
(CNNs) [24]. In the CNN case, following [11], we apply un-
pooling, convolution and rectiﬁcation sequentially to form
a highly non-trivial deep generative network to generate
images from the latent variables that are learned automat-
ically by a recognition model using a standard CNN. We
present the detailed network structures in the experiment
section. Empirical results on the widely used MNIST [24],
SVHN [39] and small NORB [25] datasets demonstrate
that: (1) mmDGMs can signiﬁcantly improve the prediction
performance in supervised learning, which is competitive
to the best feedforward neural networks, while retaining
the capability of generating input samples and completing
their missing values; and (2) mmDCGMs can achieve state-
of-the-art classiﬁcation results with efﬁcient inference and
disentangle styles and classes based on raw images in semi-
supervised learning.

In summary, our main contributions are:

• We present max-margin DGMs for both supervised
and semi-supervised settings to signiﬁcantly en-
hance the discriminative power of DGMs while re-
taining their generative ability;

• We develop efﬁcient algorithms to solve the joint
learning problems, which involve intractable expec-
tation and non-smooth piecewise linear operations;

• We achieve state-of-the-art results on several bench-
marks in semi-supervised learning and competitive
prediction accuracy as the fully discriminative CNNs
in supervised learning.

The rest of the paper is structured as follows. Section 2 sur-
veys the related work. Section 3 presents max-margin deep
generative models for both supervised and semi-supervised

learning. Section 4 presents experimental results. Finally,
Section 5 concludes.

2

2 RELATED WORK

Deep generative models (DGMs) are good at discovering
the underlying structures in the input data, but the training
of the model parameters and inference of the posterior
distribution are highly nontrivial tasks. Recently, signiﬁ-
cant progress has been made on enriching the represen-
tative power of variational inference and Markov chain
Monte Carlo methods for posterior inference, such as vari-
ational Autoencoders (VAEs) [22, 44] and neural adaptive
MCMC [12]. VAEs [22, 44] build a recognition model to
infer the posterior of latent variables and the parameters
are trained to optimize a variational bound of the data
likelihood. Neural adaptive MCMC [12] employs a similar
recognition model as the proposal distribution for impor-
tance sampling to estimate the gradient of log-posterior
and hence can perform approximate Bayesian inference of
DGMs.

To learn the parameters, besides the commonly used
MLE estimator as adopted by VAEs, recent work has pro-
posed various objectives. For example, Generative Adver-
sarial Nets (GANs) [14] construct a discriminator to dis-
tinguish the generated samples from the training data and
the parameters are trained based on a minimax two-player
game framework. Generative Moment Matching Networks
(GMMNs) [30, 13] generate samples from a directed deep
generative model, which is trained to match all orders
of statistics between training data and samples from the
model. The very recent work [43] extends the ideas to learn
conditional GMMNs with much broader applicability.

Extensive work has been focusing on realistic image gen-
eration in unsupervised setting. For example, DRAW [16]
employs recurrent neural networks as the generative model
and recognition model and introduces a 2-D attention
mechanism to generate sequences of real digits step by
step. MEM-VAE [29] leverages an external memory and an
attention mechanism to encode and retrieve the detailed
information lost in the recognition model to enhance DGMs.
LAP-GAN [10] proposes a cascade of GANs to generate
high quality natural images through a Laplacian pyramid
framework [7]. DCGAN [40] adopts fractionally strided
convolution networks in the generator to learn the spatial
upsampling and reﬁnes the generated samples.

Some recent advances [21, 34, 50, 46, 42] have been
made on extending DGMs to deal with partially observed
data. For example, the conditional VAEs [21] treat labels as
conditions of DGMs to describe input data; they perform
posterior inference of labels given unlabeled data and can
generate a speciﬁc class of images. ADGM [34] introduces
auxiliary latent variables to DGMs to make the varia-
tional distribution more expressive and does well in semi-
supervised learning. Cat-GAN [50] generalizes GANs with a
categorical discriminative network and an objective function
that includes the mutual information between the input
data and the prediction of the discriminative network. [46]
proposes feature mapping, virtual batch normalization and
other techniques to improve the performance of GANs on

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

semi-supervised learning and image generation. The Lad-
der Network [42] achieves excellent classiﬁcation results in
semi-supervised learning by employing lateral connections
between autoencoders to reduce the competition between
the invariant feature extraction and the reconstruction of
object details.

Our work is complimentary to the above progress in
the sense that we investigate a new criterion (i.e., max-
margin learning) for DGMs in both supervised and semi-
supervised settings. Some preliminary results on the fully
supervised mmDGMs were published in [28], while the
semi-supervised extensions are novel.

3 MAX-MARGIN DEEP GENERATIVE MODELS

We now present the max-margin deep generative models
for supervised learning and their class-conditional variants
for semi-supervised learning. For both methods, we present
efﬁcient algorithms.

3.1 Basics of Deep Generative Models
We start from a general setting, where we have N i.i.d. data
X = {xn}N
n=1. A deep generative model (DGM) assumes
that each xn ∈ RD is generated from a vector of latent
variables zn ∈ RK , which itself follows some distribution.
The joint probability of a DGM is as follows:

p(X, Z|α, β) =

p(zn|α)p(xn|zn, β),

(1)

N
(cid:89)

n=1

where p(zn|α) is the prior of the latent variables and
p(xn|zn, β) is the likelihood model for generating obser-
vations. For notation simplicity, we deﬁne θ = (α, β).
Depending on the structure of z, various DGMs have been
developed, such as the deep belief networks [45, 27], deep
sigmoid networks [38], deep latent Gaussian models [44],
and deep autoregressive models [17]. In this paper, we focus
on the directed DGMs, which can be easily sampled from via
an ancestral sampler.

However, in most cases learning DGMs is challenging
due to the intractability of posterior inference. The state-
of-the-art methods resort to stochastic variational methods
under the maximum likelihood estimation (MLE) frame-
work, ˆθ = argmaxθ log p(X|θ) (See the related work for
alternative learning methods). Speciﬁcally, let q(Z) be the
variational distribution that approximates the true posterior
p(Z|X, θ). A variational upper bound of the per sample
negative log-likelihood (NLL) − log p(xn|α, β) is:

L(θ, q(zn); xn)(cid:44)KL(q(zn)||p(zn|α))

−Eq(zn)[log p(xn|zn, β)],

where KL(q||p) is the Kullback-Leibler (KL) divergence
between distributions q and p. Then, L(θ, q(Z); X) (cid:44)
(cid:80)
nL(θ, q(zn); xn) upper bounds the full negative log-
likelihood − log p(X|θ).

It is important to notice that if we do not make re-
stricting assumption on the variational distribution q, the
bound is tight by simply setting q(Z) = p(Z|X, θ). That
is, the MLE is equivalent to solving the variational problem:
minθ,q(Z) L(θ, q(Z); X). However, since the true posterior is

3

intractable except a handful of special cases, we must resort
to approximation methods. One common assumption is that
the variational distribution is of some parametric form,
qφ(Z), and then we optimize the variational bound w.r.t
the variational parameters φ. For DGMs, another challenge
arises that the variational bound is often intractable to com-
pute analytically. To address this challenge, the early work
further bounds the intractable parts with tractable ones
by introducing more variational parameters [47]. However,
this technique increases the gap between the bound being
optimized and the log-likelihood, potentially resulting in
poorer estimates. Much recent progress [22, 44, 38] has
been made on hybrid Monte Carlo and variational methods,
which approximates the intractable expectations and their
gradients over the parameters (θ, φ) via some unbiased
Monte Carlo estimates. Furthermore, to handle large-scale
datasets, stochastic optimization of the variational objective
can be used with a suitable learning rate annealing scheme.
It is important to notice that variance reduction is a key
part of these methods in order to have fast and stable
convergence.

Most work on directed DGMs has been focusing on the
generative capability on inferring the observations, such
as ﬁlling in missing values [22, 44, 38], while relatively
insufﬁcient work has been done on investigating the pre-
dictive power, except the recent advances [21, 50] for semi-
supervised learning. Below, we present max-margin deep
generative models, which explore the discriminative max-
margin principle to improve the predictive ability of the
latent representations, while retaining the generative capa-
bility.

3.2 Max-margin Deep Generative Models

We ﬁrst consider the fully supervised setting, where the
training data is a pair (x, y) with input features x ∈ RD
and the groundtruth label y. Without loss of generality,
we consider the multiclass classiﬁcation, where y ∈ C =
{1, . . . , M }. As illustrated in Fig. 1, a max-margin deep
generative model (mmDGM) consists of two components:
(1) a deep generative model to describe input features; and
(2) a max-margin classiﬁer to consider supervision. For the
generative model, we can in theory adopt any DGM that
deﬁnes a joint distribution over (X, Z) as in Eq. (1). For the
max-margin classiﬁer, instead of ﬁtting the input features
into a conventional SVM, we deﬁne the linear classiﬁer on
the latent representations, whose learning will be regular-
ized by the supervision signal as we shall see. Speciﬁcally,
if the latent representation z is given, we deﬁne the la-
tent discriminant function F (y, z, η; x) = η(cid:62)f (y, z), where
f (y, z) is an M K-dimensional vector that concatenates M
subvectors, with the yth being z and all others being zero,
and η is the corresponding weight vector.

We consider the case that η is a random vector, following
some prior distribution p0(η). Then our goal is to infer
the posterior distribution p(η, Z|X, Y), which is typically
approximated by a variational distribution q(η, Z) for com-
putational tractability. Notice that this posterior is different
from the one in the vanilla DGM. We expect that the supervi-
sion information will bias the learned representations to be
more powerful on predicting the labels at testing. To account

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

4

the solution of q(η, Z) will be exactly the Bayesian posterior,
and the problem is equivalent to do MLE for θ.

By absorbing the slack variables, we can rewrite the

problem in an unconstrained form:

min
θ,q(η,Z)

L(θ, q(η, Z); X) + CR(q(η, Z; X)),

(4)

the

hinge

is: R(q(η, Z); X)

loss
n=1 maxy∈C(∆ln(y) − Eq[η(cid:62)∆fn(y)]). Due

=
where
(cid:80)N
to the
convexity of max function, it is easy to verify that the hinge
loss is an upper bound of the training error of classiﬁer (2),
that is, R(q(η, Z); X) ≥ (cid:80)
n ∆ln(ˆyn). Furthermore, the
hinge loss is a convex functional over the variational
distribution because of the linearity of the expectation
operator. These properties render the hinge loss as a good
surrogate to optimize over. Previous work has explored
this idea to learn discriminative topic models [58], but with
a restriction on the shallow structure of hidden variables.
Our work presents a signiﬁcant extension to learn deep
generative models, which pose new challenges on the
learning and inference.

3.2.2 The Doubly Stochastic Subgradient Algorithm
The variational formulation of problem (4) naturally sug-
gests that we can develop a variational algorithm to address
the intractability of the true posterior. We now present
a new algorithm to solve problem (4). Our method is a
doubly stochastic generalization of the Pegasos (i.e., Primal
Estimated sub-GrAdient SOlver for SVM) algorithm [49] for
the classic SVMs with fully observed input features, with the
new extension of dealing with a highly nontrivial structure
of latent variables.

n,y ωy
n

(cid:16)
η(cid:62) (cid:80)

First, we make the structured mean-ﬁeld (SMF) assump-
tion that q(η, Z) = q(η)qφ(Z). Under the assumption,
we have the discriminant function as Eq[η(cid:62)∆fn(y)] =
Eq(η)[η(cid:62)]E
qφ(z(n))[∆fn(y)]. Moreover, we can solve for
the optimal solution of q(η) in some analytical
form.
In fact, by the calculus of variations, we can show
that given the other parts the solution is q(η) ∝
(cid:17)
Eqφ[∆fn(y)]
, where ω are the La-
p0(η) exp
grange multipliers (See [58] for details). If the prior is
normal, p0(η) = N (0, σ2I), we have the normal posterior:
q(η) = N (λ, σ2I), where λ = σ2 (cid:80)
Eqφ[∆fn(y)].
Therefore, even though we did not make a parametric
form assumption of q(η), the above results show that the
optimal posterior distribution of η is Gaussian. Since we
only use the expectation in the optimization problem and
in prediction, we can directly solve for the mean parameter
λ instead of q(η). Further, in this case we can verify that
KL(q(η)||p0(η)) = ||λ||2
2σ2 and then the equivalent objective
function in terms of λ can be written as:

n,y ωy
n

min
θ,φ,λ

L(θ, φ; X) +

||λ||2
2σ2 + CR(λ, φ; X),

(5)

where R(λ, φ; X) = (cid:80)N
n=1 (cid:96)(λ, φ; xn) is the total hinge
loss, and the per-sample hinge-loss is (cid:96)(λ, φ; xn) =
maxy∈C(∆ln(y) − λ(cid:62)Eqφ[∆fn(y)]). Below, we present a
doubly stochastic subgradient descent algorithm to solve
this problem.

The ﬁrst stochasticity arises from a stochastic estimate of
the objective by random mini-batches. Speciﬁcally, the batch

Fig. 1. a) and b): Graphical models of mmDGMs when labels are given
or missing. c) and d): Graphical models of mmDCGMs when labels are
given or missing. The solid line and the dash dot line represent the gen-
erative model and recognition model respectively. The dot line stands
for the max-margin classiﬁer. Compared with mmDGMs, mmDCGMs
disentangle the label information from the latent variables and separate
the pathways of inferring labels and latent variables.

for the uncertainty of (η, Z), we take the expectation and
(cid:2)η(cid:62)f (y, z)(cid:3) ,
deﬁne the discriminant function F (y; x) = Eq
and the ﬁnal prediction rule that maps inputs to outputs is:

ˆy = argmax

F (y; x).

y∈C

(2)

Note that different from the conditional DGM [21], which
puts the class labels upstream and generates the latent
representations as well as input data x by conditioning on y,
the above classiﬁer is a downstream model in the sense that
the supervision signal is determined by conditioning on the
latent representations.

3.2.1 The Learning Problem
We want to jointly learn the parameters θ and infer the
posterior distribution q(η, Z). Based on the equivalent vari-
ational formulation of MLE, we deﬁne the joint learning
problem as solving:

min
θ,q(η,Z),ξ

L(θ, q(η, Z); X) + C

(3)

N
(cid:88)

n=1

ξn

∀n, y ∈ C, s.t. :

(cid:26)Eq[η(cid:62)∆fn(y)] ≥ ∆ln(y) − ξn
ξn ≥ 0,

where ∆fn(y) = f (yn, zn) − f (y, zn) is the difference of
the feature vectors; ∆ln(y) is the loss function that mea-
sures the cost to predict y if the true label is yn; and C
is a nonnegative regularization parameter balancing the
two components. In the objective, the variational bound is
deﬁned as L(θ, q(η, Z); X) = KL(q(η, Z)||p0(η, Z|α)) −
Eq [log p(X|Z, β)], and the margin constraints are from the
classiﬁer (2). If we ignore the constraints (e.g., setting C at 0),

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

learning needs to scan the full dataset to compute subgra-
dients, which is often too expensive to deal with large-
scale datasets. One effective technique is to do stochastic
subgradient descent [49], where at each iteration we ran-
domly draw a mini-batch of the training data and then do
the variational updates over the small mini-batch. Formally,
given a mini batch of size m, we get an unbiased estimate
of the objective:

˜Lm :=

L(θ, φ; xn) +

N
m

m
(cid:88)

n=1

||λ||2
2σ2 +

N C
m

m
(cid:88)

n=1

(cid:96)(λ, φ; xn).

The second stochasticity arises from a stochastic estimate
of the per-sample variational bound and its subgradient,
whose intractability calls for another Monte Carlo estimator.
n ∼ qφ(z|xn, yn) be a set of samples from
the variational distribution, where we explicitly put the
conditions. Then, the estimates of the per-sample variational
bound and the per-sample hinge-loss are

Formally, let zl

˜L(θ, φ; xn) =

log p(xn, zl

n|β) − log qφ(zl

n)

and

˜(cid:96)(λ, φ; xn) = max

∆ln(y) −

y

λ(cid:62)∆fn(y, zl

(cid:17)
n)

1
L

(cid:88)

l

n) − f (y, zl

n) = f (yn, zl

respectively, where ∆fn(y, zl
n). Note
that ˜L is an unbiased estimate of L, while ˜(cid:96) is a biased
estimate of (cid:96). Nevertheless, we can still show that ˜(cid:96) is an
upper bound estimate of (cid:96) under expectation. Furthermore,
this biasedness does not affect our estimate of the gradient.
In fact, by using the equality ∇φqφ(z) = qφ(z)∇φ log qφ(z),
we can construct an unbiased Monte Carlo estimate of
∇φ(L(θ, φ; xn) + (cid:96)(λ, φ; xn)) as:

log p(zl

n, xn) − log qφ(zl

(cid:17)
n) + Cλ(cid:62)∆fn(˜yn, zl
n)

gφ=

L
(cid:88)

(cid:16)

1
L
∇φ log qφ(zl

l=1

n),

(6)

(cid:80)

where the last
term roots from the hinge loss with
the loss-augmented prediction ˜yn = argmaxy(∆ln(y) +
1
n)). For θ and λ, the estimates of the gra-
L
dient ∇θL(θ, φ; xn) and the subgradient ∇λ(cid:96)(λ, φ; xn) are
easier, which are:

l λ(cid:62)f (y, zl

(cid:88)

1
L

l

(cid:16)

gθ =

∇θ log p(xn, zl

n|θ),

1
L

(cid:88)

l

and

gλ =

(cid:88)

(cid:16)

1
L

l

f (˜yn, zl

n) − f (yn, zl

(cid:17)
n)

.

Notice that the sampling and the gradient ∇φ log qφ(zl
n)
only depend on the variational distribution, not the under-
lying model.

The above estimates consider the general case where
the variational bound is intractable. In some cases, we can
compute the KL-divergence term analytically, e.g., when the
prior and the variational distribution are both Gaussian. In
such cases, we only need to estimate the rest intractable part
by sampling, which often reduces the variance [22]. Simi-
larly, we could use the expectation of the features directly,

5

Algorithm 1 Doubly Stochastic Subgradient Algorithm

Initialize θ, λ, and φ
repeat

draw a random mini-batch of m data points
draw random samples from noise distribution p((cid:15))
compute subgradient g = ∇θ,λ,φ ˜L(θ, λ, φ; Xm, (cid:15))
update parameters (θ, λ, φ) using subgradient g.

until Converge
return θ, λ, and φ

if it can be computed analytically, in the computation of
subgradients (e.g., gθ and gλ) instead of sampling, which
again can lead to variance reduction.

With the above estimates of subgradients, we can use
stochastic optimization methods such as SGD [49] and
AdaM [20] to update the parameters, as outlined in Alg. 1.
Overall, our algorithm is a doubly stochastic generalization
of Pegasos to deal with the highly nontrivial latent variables.
Now, the remaining question is how to deﬁne an ap-
propriate variational distribution qφ(z) to obtain a robust
estimate of the subgradients as well as the objective. Two
types of methods have been developed for unsupervised
DGMs, namely, variance reduction [38] and auto-encoding
variational Bayes (AVB) [22]. Though both methods can be
used for our models, we focus on the AVB approach. For
continuous variables Z, under certain mild conditions we
can reparameterize the variational distribution qφ(z) using
some simple variables (cid:15). Speciﬁcally, we can draw samples
(cid:15) from some simple distribution p((cid:15)) and do the transfor-
mation z = gφ((cid:15), x, y) to get the sample of the distribution
q(z|x, y). We refer the readers to [22] for more details. In our
experiments, we consider the special Gaussian case, where
we assume that the variational distribution is a multivariate
Gaussian with a diagonal covariance matrix:

qφ(z|x, y) = N (µ(x, y; φ), σ2(x, y; φ)),

(7)

whose mean and variance are functions of the input data.
This deﬁnes our recognition model. Then, the reparameter-
ization trick is as follows: we ﬁrst draw standard normal
variables (cid:15)l ∼ N (0, I) and then do the transformation
n = µ(xn, yn; φ) + σ(xn, yn; φ) (cid:12) (cid:15)l to get a sample.
zl
For simplicity, we assume that both the mean and variance
are function of x only. However, it is worth to emphasize
that although the recognition model is unsupervised, the
parameters φ are learned in a supervised manner because
the subgradient (6) depends on the hinge loss. Further
details of the experimental settings are presented in Sec. 4.1.

3.3 Conditional Variants for Semi-supervised Learning

As collecting labeled data is often costly and time-
consuming, semi-supervised learning (SSL) [62] is an impor-
tant setting, where the easy-to-get unlabeled data are lever-
aged to improve the quality. We now present an extension
of mmDGMs to the semi-supervised learning scenario.
Given a labeled dataset DL = {(xn, yn)}NL

n=1 and an
unlabeled dataset DU = {xn}NU
n=1, where the size NU is
typically much larger than NL, the goal of SSL is to explore
the intrinsic structures underlying the unlabeled data to
help learn a classiﬁer. As the learning objective of mmDGMs

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

consists of two parts—a data likelihood and a classiﬁcation
loss, a naive approach to considering unlabeled data is to
simply ignore the loss term when the class label is missing.
However, such ignorance leads to a weak coupling between
the likelihood model and the classiﬁer. Below, we present a
conditional variant of mmDGMs, namely max-margin deep
conditional generative models (mmDCGMs), to strongly
couple the classiﬁer and data likelihood.

Similar as in mmDGMs, an mmDCGM consists of two
components: (1) a deep max-margin classiﬁer to infer labels
given data and (2) a class-conditional deep generative model
to describe the joint distribution of the data, labels and
latent variables. Fig. 1 compares the graphical models of the
mmDGM and mmDCGM. Below, we present the learning
objective of mmDCGM formally, which consists of several
key components. For notation simplicity, we will omit the
parameters θ, φ and λ in the following formulae if no
confusion arises.

Generative loss: The ﬁrst part of our learning objective
is a generative loss to describe the observed data. For the
labeled data xn whose yn is visible, mmDCGM maximizes
the joint likelihood for the pair (xn, yn), log p(xn, yn), which
is lower bounded by:

L(xn, yn) = Eq(zn|xn,yn)

log

(cid:20)

p(xn|zn, yn)p(zn)p(yn)
q(zn|xn, yn)

(cid:21)

.

(8)
For the unlabeled data xn whose yn is hidden, we can
maximize the marginal likelihood log p(xn) by integrating
out the hidden labels, whose variational lower-bound is:

log p(xn)≥Eq(y|xn)Eq(zn|xn,y)

log

=Eq(y|xn) [L(xn, y)] + H(q(y|xn)).

(cid:20)

p(xn|zn, y)p(zn)p(y)
q(y|xn)q(zn|xn, y)

(cid:21)

(9)

These
lower-bounds were adopted in the previous
method [21]. However, one issue with this method is on
the computational inefﬁciency when dealing with a large
set of unlabeled data and a large number of classes. This is
because we need to compute the lower-bounds of the joint
likelihood for all possible y ∈ C and for each unlabeled data
point.

To make it computationally efﬁcient, we propose to use
the prediction of a classiﬁer ˆyn = arg max ˜q(y|xn) as a
point estimation to approximate the full posterior q(y|xn) to
speed-up the inference procedure, where we denote the clas-
siﬁer by ˜q because it is not restricted to a speciﬁc form with
a proper distribution over labels but is an unnormalized
one trained under the max-margin principle. Indeed, the
outputs of the classiﬁer are real values transformed by linear
operations, denoting the signed distance from the data to
the hyperplanes deﬁned by the weights. Consequently, the
entropy term should be zero and the lower-bound turns out
to be:

log p(xn) ≥ Eq(zn|xn,ˆyn)

log

(cid:20)

p(xn|zn, ˆyn)p(zn)p(ˆyn)
q(zn|xn, ˆyn)

(cid:21)

.

(10)
Note that the lower-bound is valid because we can view
ˆyn = arg max ˜q(yn|xn) as a delta distribution.

6

With the above deviations, we deﬁne the overall gen-
erative loss as the summation of the negative variational
bounds over DL and DU :

− LG =(cid:80)

(xn,yn)∈DL

Eq(zn|xn,yn)

log

+ (cid:80)

xn∈DU

Eq(zn|xn,ˆyn)

log

(cid:20)

(cid:20)

(cid:21)

(cid:21)

p(xn, yn, zn)
q(zn|xn, yn)
p(xn, ˆyn, zn)
q(zn|xn, ˆyn)

.(11)

Hinge loss: The second part of our learning objective
is a hinge loss on the labeled data. Speciﬁcally, though the
labeled data can contribute to the training of the classiﬁer
˜q(y|x) implicitly through the objective function in Eqn. (11),
it has been shown that adding a predictive loss for the
labeled data can speed-up convergence and achieve better
results [21, 34]. Here, we adopt the similar idea by introduc-
ing a hinge loss as the discriminative regularization for the
labeled data:

LL =

(cid:88)

(xn,yn)∈DL

(∆ln(y) + λ(cid:62)Eqφ[∆fn(y)]),

(12)

max
y∈C

which is the same as in the fully supervised case.

Hat loss: The third part of our learning objective is a hat
loss on the unlabeled data. Speciﬁcally, as NU is typically
much larger than NL in the semi-supervised learning, it
is desirable that the unlabeled data can regularize the be-
haviour of the classiﬁer explicitly. To this end, we further
propose a max-margin “hat loss” [62] for the unlabeled data
as follows:

(cid:88)

LU =

xn∈DU

max
y∈C

(∆lˆyn (y) + λ(cid:62)Eqφ[∆fˆyn(y)]),

(13)

where ∆fˆyn(y) = f (ˆyn, zn) − f (y, zn) and ∆lˆyn (y) is an
function that indicates whether y equals to the prediction
ˆyn or not. Namely, we treat the prediction ˆyn as putative
label and apply the hinge loss function on the unlabeled
data. This function is called the hat loss due to its shape
in a binary classiﬁcation example [62]. Intuitively, the hinge
loss enforces the predictor to make prediction correctly and
conﬁdently with a large margin for labeled data, while
the hat loss only requires the predictor to make decision
conﬁdently for unlabeled data. The hat loss, which has been
originally proposed in S3VMs [54], assumes that decision
boundary tends to lie on low-density areas of the feature
space. In such shallow models, the correctness of the as-
sumption heavily depends on the true data distribution,
which is ﬁxed but unknown. However, the constraint is
much more relaxed when building upon the latent feature
space learned by a deep model as described in our method.
In practice, the predictive performance of mmDCGMs is
improved substantially by adding this regularization, which
will be shown in Sec. 4.3.

Label-balance regularization: The last part of our learn-
ing objective is a regularization term to balance the possible
label predictions on the unlabeled data. Speciﬁcally, one
practical problem of semi-supervised learning is the imbal-
ance of the predictions [62], that is, a classiﬁer may classify
most of the unlabeled points as a same class. To address this
problem, we introduce a balance constraint for multiclass
semi-supervised learning:

∀y ∈ C,

∆lˆyn (y) =

1
NU

(cid:88)

xn∈DU

1
NL

(cid:88)

∆ln(y), (14)

(xn,yn)∈DL

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

which assumes that the distribution of the predictions of un-
labeled data should be the same as that of the groundtruth
labels in the labeled set. However, both sides in Eqn. (14)
are summations of indicator functions, which are non-
differentiable with respect to λ. Therefore, we cannot opti-
mize λ based on gradient methods to satisfy this constraint
directly. Here, we relax the constraint (14) as: ∀y ∈ C,

1
NU

(cid:88)

DU

1
NL

(cid:88)

DL

∆lˆyn (y)F (y; xn) =

∆ln(y)F (y; xn),

(15)

where F (y; xn) = λ(cid:62)E˜q[f (y, z)] and we simplify the sum-
mation notation. Given certain class y, the left hand side se-
lects the unlabeled data whose predictions equal to y accord-
ing to the indicator functions, and adds the corresponding
activations (discriminant functions of y divided by a factor
NU ) together. The right hand side computes this normalized
activations with indicator functions in same class for the
labeled data. Note that F (y; xn) is no smaller than F (y(cid:48); xn)
for any other y(cid:48) due to the deﬁnitions of the prediction
ˆyn and the indicator function ∆lˆyn (y). The gradients in
the relaxed version are still not well-deﬁned due to the
indicator functions. However, assuming that the predictions
ˆyn are given, both sides in Eqn. (15) are summations without
indicator functions, which are differentiable with respect to
λ. In our experiments, we indeed ignore the dependency of
the indicator functions on λ and approximate the total gra-
dients by the gradients of the cumulative activations. This
approximation does not work for the constraint in Eqn. (14)
because both sides turn out to be scalars given ˆyn and
the gradient with respect to λ is zero almost everywhere,
which cannot be used to optimize parameters. In fact, the
relaxed constraint balances the predictions of unlabeled data
according to the groundtruth implicitly, under the further
assumption that the cumulative activation is proportional
to the number of predictions for any y. Intuitively, if the
cumulative activation of the selected unlabeled data in
certain class y is larger than that of the labeled data, then
probably the predictor classiﬁes some unlabeled data as
y incorrectly. Consequently, the λ is updated to reduce
the activations, and then the number of predictions in this
class will decrease because F (y; xn) may be smaller than
F (y(cid:48); xn) for some other y(cid:48). Moreover, as hard constraints
are unlikely to satisfy in practice, we further relax them by
using a regularization penalty in the common L2-norm:

LB =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:88)

y∈C

(cid:18) (cid:80)

DU

∆lˆyn(y)F (y; x)

(cid:80)

DL

−

∆ln(y)F (y; x)

(cid:19)2

.

NU

NL

With the above sub-objectives, our ﬁnal objective func-

tion is a weighted sum:

L = LG + α(LL + αU LU + αBLB),

(16)

where α, αU and αB are hyper-parameters that control
the relative weights for the corresponding terms. We will
discuss the choice of each value in Sec. 4.1.

To optimize the overall learning objective, we still use
our doubly stochastic algorithm described in Sec. 3.2.2 to
compute the unbiased subgradient estimations for all of
the parameters and perform updates. Speciﬁcally, given
a mini-batch of data consisting of labeled data ML =

7

{(xn, yn)}mL
sequentially

n=1 and unlabeled data MU = {xn}mU

n=1, we

3)

1) predict ˆyn using the classiﬁer for each xn ∈ MU ;
2) plug in the predictions of the unlabeled data ˆyn and
the groudtruth of the labeled data yn into the indi-
cator functions in the label-balance regularization;
take (sub-)gradient with respect to all parameters
in the generative model, recognition model and
classﬁer to optimize the ﬁnal objective (16);
approximate the (sub-)gradients with intractable
expectations using the techniques described in
Sec. 3.2.2 and update parameters.

4)

Though the objective in semi-supervised learning is com-
plex, our method works well in practice.

4 EXPERIMENTS
We now present the experimental results in both supervised
and semi-supervised learning settings. Our results on sev-
eral benchmark datasets demonstrate that both mmDGMs
and mmDCGMs are highly competitive in classiﬁcation
while retaining the generative ability, under the comparison
with various strong competitors.

4.1 Experiment Settings

Though mmDGMs and mmDCGMs are applicable to any
DGMs that deﬁne a joint distribution of (X, Z) and
(X, Z, Y) respectively, we concentrate on the Variational
Auto-encoder (VA) [22] and Conditional VA [21] in our
experiments. We consider two types of recognition models:
multiple layer perceptrons (MLPs) and convolutional neural
networks (CNNs). We denote our mmDGM with MLPs
by MMVA. To perform classiﬁcation using VA which is
unsupervised, we ﬁrst learn the feature representations by
VA, and then build a linear SVM classiﬁer on these features
using the Pegasos stochastic subgradient algorithm [49].
This baseline will be denoted by VA+Pegasos. The corre-
sponding models with CNNs are denoted by Conv-MMVA
and Conv-VA+Pegasos respectively. We denote our mmD-
CGM with CNNs by Conv-MMCVA. We implement all
experiments based on Theano [2]. 1

4.1.1 Datasets and Preprocessing

We evaluate our models on the widely adopted MNIST [24],
SVHN [39] and small NORB [25] datasets. MNIST consists
of handwritten digits of 10 different classes (0 to 9). There
are 50,000 training samples, 10,000 validating samples and
10,000 testing samples and each one is of size 28×28. SVHN
is a large dataset consisting of color images of size 32 × 32.
The task is to recognize the center digits in natural scene
images. We follow the work [48, 15] to split the dataset
into 598,388 training data, 6,000 validating data and 26,032
testing data. The small NORB dataset consisits of gray
images distributed across 5 general classes: animal, human,
airplane, truck and car. Both the training set and testing
set in NORB contain 24,300 samples with different lighting
conditions and azimuths. We down-sample the images to

1. Source code and more detailed settings can be found at

https://github.com/thu-ml/mmdcgm-ssl.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

8

Fig. 2. Network architecture of Conv-MMVA with conv-net in the recognition model and unconv-net in the generative model (best view in color).

size of 32 × 32 as in [34] and split 1,000 samples from the
training set as the validating data if required.

For fair comparison in supervised learning on SVHN,
we perform Local Contrast Normalization (LCN) in the
experiment of the Conv-MMVA following [48, 15] and set
the distribution of x given z as Gaussian. In other cases,
we just normalize the data by a factor of 256 and choose
Bernoulli as the distribution of data.

4.1.2 Supervised Learning
In mmDGMs, the recognition network and the classiﬁer
share layers in computation. The mean and variance of
the latent variable z are transformed from the last layer of
the recognition model through an afﬁne transformation. It
should be noticed that we could use not only the expectation
of z but also the activation of any layer in the recognition
model as features. The only theoretical difference is from
where we add a hinge loss regularization to the gradient
and back-propagate it to previous layers. In all of the exper-
iments, the mean of z has the same nonlinearity but typically
much lower dimension than the activation of the last layer
in the recognition model, and hence often leads to a worse
performance. We use different features in MMVA and Conv-
MMVA, which will be explained below. We use AdaM [20]
to optimize parameters in all of the models. Although it is
an adaptive gradient-based optimization method, we decay
the global learning rate by a factor after sufﬁcient number
of epochs to ensure a stable convergence.

In MMVA, we follow the settings in [21] to compare both
generative and discriminative capacity of VA and MMVA.
Both the recognition and generative models employ a two-
layer MLP with 500 hidden units in each layer and the
dimension of the latent variables is 50. We choose C = 15 as
default in MMVA. We concatenate the activations of 2 layers
as the features used in the supervised tasks. We illustrate the
network architecture of MMVA in Appendix A.

In Conv-MMVA, we use standard CNNs [24] with
convolution and max-pooling operation as the recognition

model to obtain more competitive classiﬁcation results.
For the generative model, we use unconvnets [11] with a
“symmetric” structure as the recognition model, to recon-
struct the input images approximately. More speciﬁcally,
the top-down generative model has the same structure as
the bottom-up recognition model but replacing max-pooling
with unpooling operation [11] and applies unpooling, con-
volution and rectiﬁcation in order. Typically, there are 5 or 6
convolutional layers in the generative model and the recog-
nition model and the kernel size is either 5 or 3, depending
on the data. The total number of parameters is comparable
with previous work [15, 31, 26] and the split of the training
sets is the same. For simplicity, we do not involve mlpconv
layers [31, 26] and contrast normalization layers in our
recognition model, but they are not exclusive to our model.
We set C = 103 on MNIST and C = 104 on SVHN as
default. We use the activations of the last deterministic layer
as the features. We illustrate the network architecture of
Conv-MMVA with Gaussian hidden variables and Bernoulli
visible variables in Fig. 2.

4.1.3 Semi-supervised Learning

The mmDCGM separates the classiﬁer and the recognition
model of the latent variables completely, which allows us
to simply combine the state-of-the-art classiﬁer and deep
generative models together without competition. We only
consider the convolutional neural networks here and adopt
advanced techniques including global average pooling [32]
and batch normalization [19] to boost the performance of
our Conv-MMCVA. The architecture of the max-margin
classiﬁer refers to that of the discriminator in [50] and
the generative model is similar with the Conv-MMVA but
concatenates the feature maps and additional label maps
in one-hot encoding format at each layer as in [40]. Sim-
ilar with Conv-MMVA, the depth of each convolutional
networks is 5 or 6. We set α = 0.1 according to the
conditional VAE [21]. We optimize αU and αB with a search

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

9

TABLE 1
Error rates (%) on the MNIST dataset given full labeled data.

TABLE 4
MSE on MNIST data with missing values in the testing procedure.

Model
VA+Pegasos
VA+Class-conditionVA [21]
MMVA

Conv-VA+Pegasos
Conv-MMVA

Stochastic Pooling [57]
Network in Network [31]
Maxout Network [15]
DSN [26]

Error Rate

1.04
0.96
0.90

1.35
0.45

0.47
0.47
0.45
0.39

Model
Conv-VA+Pegasos
Conv-MMVA

CNN [48]
Stochastic Pooling [57]
Maxout Network [15]
Network in Network [31]
DSN [26]

Error Rate

25.3
3.09

4.9
2.80
2.47
2.35
1.92

TABLE 2
Error rates (%) on the SVHN dataset given full labeled data.

TABLE 3
Effects of C on the MNIST dataset in Conv-MMVA.

Error Rate (%)

Lower Bound

C

0
1
10
102
103
104

1.35
1.86
0.88
0.54
0.45
0.43

-93.17
-95.86
-95.90
-96.35
-99.62
-112.12

grid {..., 0.01, 0.03, 0.1, 0.3, 1, 3...} in terms of the validation
classiﬁcation error of a shallow S3VM on MNIST given 100
labels. The best values are αU = 3 and αB = 0.001 and
we ﬁx them in our Conv-MMCVA across all of the datasets.
Other hyper-parameters including the anneal strategy and
batch size are chosen according to the validation generative
loss. Once the hyperparameters are ﬁxed, we run our model
for 10 times with different random splits of the labeled and
unlabeled data, and we report the mean and the standard
deviation of the error rates.

4.2 Results with Supervised Learning

We ﬁrst present the results in the supervised learning set-
ting. Speciﬁcally, we evaluate the predictive and generative
performance of our MMVA and Conv-MMVA on the MNIST
and SVHN datasets in various tasks, including classiﬁcation,
sample generation, and missing data imputation.

Noise Type
Rand-Drop (0.2)
Rand-Drop (0.4)
Rand-Drop (0.6)
Rand-Drop (0.8)
Rect (6 × 6)
Rect (8 × 8)
Rect (10 × 10)
Rect (12 × 12)

VA
0.0109
0.0127
0.0168
0.0379
0.0637
0.0850
0.1100
0.1450

MMVA Conv-VA Conv-MMVA
0.0110
0.0127
0.0165
0.0358
0.0645
0.0841
0.1079
0.1342

0.0111
0.0127
0.0175
0.0453
0.0585
0.0754
0.0978
0.1299

0.0147
0.0161
0.0203
0.0449
0.0597
0.0724
0.0884
0.1090

4.2.1 Predictive Performance

We test both MMVA and Conv-MMVA on the MNIST
dataset. In MLP case,
three rows in Table 1
the ﬁrst
compare VA+Pegasos, VA+Class-condtionVA and MMVA,
where VA+Class-condtionVA refers to the best fully super-
vised model in [21]. Our model outperforms the baselines
signiﬁcantly. We further use the t-SNE algorithm [35] to
embed the features learned by VA and MMVA on 2D plane,
which again demonstrates the stronger discriminative abil-
ity of MMVA (See Appendix B for details).

In CNN cases, Table 3 shows the effect of C on classi-
ﬁcation error rate and variational lower bound. Typically,
as C gets lager, Conv-MMVA learns more discriminative
features and leads to a worse estimation of data likelihood.
However, if C is too small, the supervision is not enough to
lead to predictive features. Nevertheless, C = 103 is quite a
good trade-off between the classiﬁcation performance and
generative performance. In this setting, the classiﬁcation
performance of our Conv-MMVA model is comparable to
the state-of-the-art fully discriminative networks with com-
parable architectures and number of parameters, shown in
the last four rows of Table 1.

We focus on Conv-MMVA on the SVHN datset as it
is more challenging. Table 2 shows the predictive perfor-
mance on SVHN. In this harder problem, we observe a
larger improvement by Conv-MMVA as compared to Conv-
VA+Pegasos, suggesting that DGMs beneﬁt a lot from max-
margin learning on image classiﬁcation. We also compare
Conv-MMVA with state-of-the-art results. To the best of our
knowledge, there is no competitive generative models to
classify digits on the SVHN dataset with full labels.

4.2.2 Generative Performance

We investigate the generative capability of MMVA and
Conv-MMVA on generating samples. Fig. 3 and Fig. 4
illustrate the images randomly sampled from VA and
MMVA models on MNIST and SVHN respectively, where
we output the expectation of the value at each pixel to
get a smooth visualization. Fig. 4 demonstrates the beneﬁts
from jointly training of DGMs and max-margin classiﬁers.
Though Conv-VA gives a tighter lower bound of data likeli-
hood and reconstructs data more elaborately, it fails to learn
the pattern of digits in a complex scenario and could not
generate meaningful images. In this scenario, the hinge loss
regularization on recognition model is useful for generating
main objects to be classiﬁed in images.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

10

(a) VA

(b) MMVA

(c) Conv-VA

(d) Conv-MMVA

Fig. 3. Generation on MNIST. (a-b): images randomly generated by VA and MMVA respectively; (c-d): images randomly generated by Conv-VA and
Conv-MMVA respectively. Our mmDGMs retain similar ability as the baselines to generate images.

(a) Training data

(b) Conv-VA

(c) Conv-MMVA (C = 103)

(d) Conv-MMVA (C = 104)

Fig. 4. Generation on SVHN. (a): training data preprocessed by LCN; (b): samples randomly generated by Conv-VA; (c-d): samples randomly
generated by Conv-MMVA when C = 103 and C = 104 respectively.

(a) Rand-Drop (0.6)

(b) Rect (12 × 12)

Fig. 5. Imputation results of MMVA in two noising conditions: column 1 shows the true data; column 2 shows the perturbed data; and the remaining
columns show the imputations for 20 iterations.

4.2.3 Missing Data Imputation and Classiﬁcation

random variables as the input distribution changes.

We further test MMVA and Conv-MMVA on the task of
missing data imputation. For MNIST, we consider two
types of missing values [33]: (1) Rand-Drop: each pixel is
missing randomly with a pre-ﬁxed probability; and (2) Rect:
a rectangle located at the center of the image is missing.
Given the perturbed images, we uniformly initialize the
missing values between 0 and 1, and then iteratively do the
following steps: (1) using the recognition model to sample
the hidden variables; (2) predicting the missing values to
generate images; and (3) using the reﬁned images as the in-
put of the next round. For SVHN, we do the same procedure
as in MNIST but initialize the missing values with Guassian

Intuitively, generative models with CNNs could be more
powerful on learning patterns and high-level structures,
while generative models with MLPs learn more to recon-
struct the pixels in detail. This conforms to the MSE re-
sults shown in Table 4: Conv-VA and Conv-MMVA out-
perform VA and MMVA with a missing rectangle, while
VA and MMVA outperform Conv-VA and Conv-MMVA
with random missing values. Compared with the baselines,
mmDGMs also make more accurate completion when large
patches are missing. All of the models infer missing values
for 100 iterations.

We visualize the inference procedure of MMVA in Fig. 5.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

TABLE 5
Error rates(%) with missing values on MNIST.

CNN Conv-VA Conv-MMVA

Noise Level
Rect (6 × 6)
Rect (8 × 8)
Rect (10 × 10)
Rect (12 × 12)

7.5
18.8
30.3
47.2

2.5
4.2
8.4
18.3

1.9
3.7
7.7
15.9

TABLE 6
Error rates (%) on (partially) labeled MNIST dataset.

Algorithm
M1+M2 [21]
VAT [37]
Ladder [42]
CatGAN [50]
ADGM [34]
SDGM [34]
Conv-CatGAN [50]
Improved-GAN [46]
Conv-Ladder [42]
Conv-MMCVA

n = 100
3.33 (±0.14)
2.33
1.06 (±0.37)
1.91 (±0.10)
0.96 (±0.02)
1.32 (±0.07)
1.39 (±0.28)
0.96 (±0.07)
0.89 (±0.50)
1.24 (±0.54)

n = 1000
2.4 (±0.02)
1.36
0.84 (±0.08)
1.73 (±0.18)
-
-
-
-
-
0.54 (±0.04)

ALL
0.96
0.64
0.57
0.91
-
-
0.48
-
-
0.31

Considering both types of missing values, MMVA could
infer the unknown values and reﬁne the images in several
iterations even with a large ratio of missing pixels. More
visualization results on MNIST and SVHN are presented in
Appendix C.

We further present classiﬁcation results with missing
values on MNIST in Table 5. CNN makes prediction on the
incomplete data directly. Conv-VA and Conv-MMVA infer
missing data for 100 iterations at ﬁrst and then make pre-
diction on the reﬁned data. In this scenario, Conv-MMVA
outperforms both Conv-VA and CNN, which demonstrates
the advantages of our mmDGMs, which have both strong
discriminative and generative capabilities.

Overall, mmDGMs have comparable capability of infer-
ring missing values and prefer to learn high-level patterns
instead of local details.

4.3 Results with Semi-supervised Learning

We now present the predictive and generative results on
MNIST, SVHN and small NORB datasets given partially
labeled data.

4.3.1 Predictive Performance

We compare our Conv-MMCVA with a large body of pre-
vious methods on the MNIST dataset under different set-
tings in Table 6. Our method is competitive to the state-
of-the-art results given 100 labels. As the number of labels
increases, the max-margin principle signiﬁcantly boosts the
performance of Conv-MMCVA relative to the other models,
including the Ladder Network [42]. Indeed, given 1,000
labels, Conv-MMCVA not only beats existing methods in the
same setting, but also is comparable to the best supervised
results of DGMs. The supervised learning results of Conv-
MMCVA again conﬁrm that by leveraging max-margin prin-
ciple DGMs can achieve the same discriminative ability as

11

Fig. 6. Effect of size of labeled data on MNIST. The labeled data of
smaller size is a subset of that of larger size in the same curve to reduce
variance. Generally, the error rates decrease as the number of labels
increase and the peaks may be caused by the poor quality of new added
labeled data. Nevertheless, 800 labels are sufﬁcient to achieve an error
rate that is comparable to the supervised learning results of other DGMs.

TABLE 7
Error rates (%) on SVHN and NORB datasets given 1000 labels.

Algorithm
M1+M2 [21]
VAT [37]
ADGM [34]
SDGM [34]
Improved-GAN [46]
Ensemble-10-GANs [46]
Conv-MMCVA

SVHN n = 1000 NORB n = 1000

36.02 (±0.10)
24.63
22.86
16.61(±0.24)
8.11 (±1.3)
5.88 (±1.0)
4.95 (±0.18)

18.79 (±0.05)
9.88
10.06(±0.05)
9.40(±0.04)
-
-
6.11 (±0.58)

the state-of-the-art CNNs with comparable architectures. We
analyze the effect of the number of labels in Fig. 6 for Conv-
MMCVA, where the four curves share the same settings but
use different random seeds to split data and initialize the
networks.

Table 7 shows the classiﬁcation results on the more
challenging SVHN and NORB datasets. Following previous
methods [21, 37, 34], we use 1,000 labels on both datasets.
We can see that our methods outperform the previous
state-of-the-art substantially. Ensemble-10-GANs refers to an
ensemble of 10 Improved-GANs [46] with 9-layer classiﬁers
while we employ a single model with a shallower 6-layer
classiﬁer. Note that it is easy to further improve our model
by using more advanced networks, e.g. ResNet [18], without
competition due to the separated architectures. In this paper,
we focus on comparable architectures for fairness.

We further analyze the effect of the regularization terms
to investigate the possible reasons for the outstanding per-
formance. If we omit the hat loss regularization, the Conv-
MMCVA suffers from overﬁtting and only achieves 6.4%
error rates on the MNIST dataset given 100 labels. The
underlying reason is that we approximate the full posterior
inference by a greedy point estimation. If the prediction
of the classiﬁer is wrong, the generative model tends to
interpret the unlabeled data with the incorrect label instead
of enforcing the classiﬁer to ﬁnd the true label as in previous
conditional DGM [21]. However, the hat loss provides an

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

12

(a) MNIST data

(b) MNIST samples

(c) SVHN data

(d) SVHN samples

Fig. 7. Class-conditional generation on MNIST (100 labels) and SVHN (1000 labels) datasets. (a) and (c) present 100 labeled training data sorted
by class on MNIST and SVHN datasets respectively. (b) and (d) show samples on corresponding datasets where each row shares same class y
and each column shares same latent variables z.

conditions and points of view. Nevertheless, Conv-MMCVA
can still separate these physical semantics from the general
categories beyond digits. To the best of our knowledge, there
is no competitive generative models to generate NORB data
class-conditionally given the partially labeled data.

5 CONCLUSIONS
In this paper, we propose max-margin deep generative mod-
els (mmDGMs) and the class-conditional variants (mmD-
CGMs), which conjoin the predictive power of max-margin
principle and the generative ability of deep generative mod-
els. We develop a doubly stochastic subgradient algorithm
to learn all parameters jointly and consider two types of
recognition models with MLPs and CNNs respectively. We
evaluate our mmDGMs and MMDCGMs in supervised
learning and semi-supervised learning settings respectively.
Given partially labeled data, we approximate the full pos-
terior of the labels by a delta distribution for efﬁciency and
propose additional max-margin and label balance losses for
unlabeled data for effectiveness.

We present extensive results to demonstrate that our
methods can signiﬁcantly improve the prediction perfor-
mance of deep generative models, while retaining the strong
generative ability on generating input samples as well as
completing missing values. In fact, by employing CNNs in
our mmDGMs and mmDCGMs, we achieve low error rates
on several datasets including MNIST, SVHN and NORB,
which are competitive to the best fully discriminative net-
works in supervised learning and improve the previous
state-of-the-art semi-supervised results signiﬁcantly.

ACKNOWLEDGMENTS
The work was supported by the National Basic Research
Program (973 Program) of China (No. 2013CB329403), Na-
tional NSF of China (Nos. 61620106010, 61322308, 61332007),
the Youth Top-notch Talent Support Program, and Tsinghua
TNList Lab Big Data Initiative.

REFERENCES
[1] Y. Altun, I. Tsochantaridis, and T. Hofmann. Hidden
Markov support vector machines. In International Con-
ference on Machine Learning, 2003.

(a) NORB data

(b) NORB samples

Fig. 8. Class-conditional generation on NORB dataset (1000 labels). (a)
and (b) are labeled training data and generated samples respectively.

effective way for the classiﬁer to achieve a sufﬁciently good
classiﬁcation result, which can be ﬁne-tuned according to
the generative loss. In fact, trained to optimize the max-
margin losses for both the labeled and unlabeled data, the
classiﬁer itself without the DGM can get 2.1% error rates
on MNIST given 100 labels. These results demonstrate the
effectiveness of our proposed max-margin loss for the unla-
beled data. We also reduce 0.2% error rate in this setting by
using the label-balance regularization. Besides the excellent
performance, our Conv-MMCVA provides a potential way
to apply class-conditional DGMs on large scale datasets with
many more categories due to the efﬁcient inference.

4.3.2 Generative Performance

We demonstrate that our Conv-MMCVA has the ability to
disentangle classes and styles given a small amount of labels
on the MNIST, SVHN and NORB datasets, as shown in
Fig. 7 and Fig. 8. The images are generated by conditioning
on a label y and a style vector z. On the MNIST and
SVHN datasets, Conv-MMCVA are able to generate high-
quality images and z can capture the intensities, scales
and colors of the images. Note that previous generation
on SVHN in the semi-supervised learning setting is either
unconditioned [46] or based on some preprocessed data [21].
Our samples are a little blurry on the NORB dataset, which
contains elaborate images of 3D toys with different lighting

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

[2] F. Bastien, P. Lamblin, R. Pascanu, J. Bergstra, I. Good-
fellow, A. Bergeron, N. Bouchard, D. Warde-Farley, and
Y. Bengio. Theano: new features and speed improve-
ments. In Deep Learning and Unsupervised Feature Learn-
ing Workshop, Advances in Neural Information Processing
Systems Workshop, 2012.

[3] Y. Bengio, E. Laufer, G. Alain, and J. Yosinski. Deep
generative stochastic networks trainable by backprop.
In International Conference on Machine Learning, 2014.
[4] Y. Bengio, L. Yao, G.e Alain, and P. Vincent. General-
ized denoising auto-encoders as generative models. In
Advances in Neural Information Processing Systems, 2013.
J. Bornschein and Y. Bengio.
Reweighted wake-
International Conference on Learning Representa-
sleep.
tions, 2015.

[5]

[6] Y. Burda, R. Grosse, and R. Salakhutdinov.

Impor-
International Conference

tance weighted autoencoders.
on Learning Representations, 2015.

[7] P. Burt and Edward A. The laplacian pyramid as a com-
pact image code. IEEE Transactions on communications,
31(4):532–540, 1983.

[8] N. Chen, J. Zhu, F. Sun, and E. P. Xing. Large-margin
predictive latent subspace learning for multi-view data
analysis. IEEE Trans. on PAMI, 34(12):2365–2378, 2012.
[9] C. Cortes and V. Vapnik. Support-vector networks.

Journal of Machine Learning, 20(3):273–297, 1995.

[10] E. Denton, S. Chintala, S. Arthur, and R. Fergus. Deep
generative image models using a laplacian pyramid of
adversarial networks. In Advances in neural information
processing systems, 2015.

[11] A. Dosovitskiy, J. T. Springenberg, and T. Brox. Learn-
ing to generate chairs with convolutional neural net-
works. Computer Vision and Pattern Recognition, 2015.

[12] C. Du, J. Zhu, and B. Zhang. Learning deep generative
models with doubly stochastic mcmc. arXiv preprint
arXiv:1506.04557, 2015.

[13] G. K. Dziugaite, D. M. Roy, and Z. Ghahramani. Train-
ing generative neural networks via maximum mean
discrepancy optimization. Uncertainty in Artiﬁcial In-
telligence, 2015.

[14] I. J. Goodfellow, J. P. Abadie, M. Mirza, B. Xu, D. W.
Farley, S.ozair, A. Courville, and Y. Bengio. Generative
In Advances in Neural Information
adversarial nets.
Processing Systems, 2014.

[15] I. J. Goodfellow, D.Warde-Farley, M. Mirza, A. C.
Courville, and Y. Bengio. Maxout networks. In Interna-
tional Conference on Machine Learning, 2013.

[16] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for
International Conference on Machine
image generation.
Learning, 2015.

[17] K. Gregor, I. Danihelka, A. Mnih, C. Blundell, and
In Inter-

D. Wierstra. Deep autoregressive networks.
national Conference on Machine Learning, 2014.

[18] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual
learning for image recognition. Computer Vision and
Pattern Recognition, 2016.

[19] S. Ioffe and C. Szegedy. Batch normalization: Accel-
erating deep network training by reducing internal
covariate shift. arXiv preprint arXiv:1502.03167, 2015.

[20] D. P. Kingma and J. L. Ba. Adam: A method for

13

stochastic optimization.
Learning Representations, 2015.

In International Conference on

[21] D. P. Kingma, D.

J. Rezende, S. Mohamed, and
M. Welling. Semi-supervised learning with deep gen-
erative models. In Advances in Neural Information Pro-
cessing Systems, 2014.

[22] D. P. Kingma and M. Welling. Auto-encoding vari-
In International Conference on Learning

ational Bayes.
Representations, 2014.

[23] H. Larochelle and I. Murray. The neural autoregressive
In International Conference on

distribution estimator.
Artiﬁcial Intelligence and Statistics, 2011.

[24] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner.
Gradient-based learning applied to document recogni-
tion. In Proceedings of the IEEE, 1998.

[25] Y. LeCun, F. J. Huang, and L. Bottou. Learning methods
for generic object recognition with invariance to pose
and lighting. In Computer Vision and Pattern Recognition,
2004.

[26] C. Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu.
In International Conference on

Deeply-supervised nets.
Artiﬁcial Intelligence and Statistics, 2015.

[27] H. Lee, R. Grosse, R. Ranganath, and A. Y. Ng. Convo-
lutional deep belief networks for scalable unsupervised
learning of hierarchical representations. In International
Conference on Machine Learning, 2009.

[28] C. Li, J. Zhu, T. Shi, and B. Zhang. Max-margin deep
In Advances in neural information

generative models.
processing systems, 2015.

[29] C. Li, J. Zhu, and B. Zhang. Learning to generate with
International Conference on Machine Learning,

memory.
2016.

[30] Y. Li, K. Swersky, and R. Zemel. Generative moment
matching networks. In International Conference on Ma-
chine Learning, 2015.

[31] M. Lin, Q. Chen, and S. Yan. Network in network.
In International Conference on Learning Representations,
2014.

[32] M. Lin, Q. Chen, and S. Yan. Network in network. In-
ternational Conference on Learning Representations, 2014.
[33] R. J. Little and D. B. Rubin. Statistical analysis with
missing data. Journal of Machine Learning Research, 539,
1987.

[34] L. Maaløe, C. K. Sønderby, S. K. Sønderby, and
O. Winther. Auxiliary deep generative models.
In
International Conference on Machine Learning, 2016.
[35] L. V. Matten and G. Hinton. Visualizing data using t-
SNE. Journal of Machine Learning Research, 9:2579–2605,
2008.

[36] K. Miller, M. P. Kumar, B. Packer, D. Goodman, and
D. Koller. Max-margin min-entropy models. In Inter-
national Conference on Artiﬁcial Intelligence and Statistics,
2012.

[37] T. Miyato, S. Maeda, M. Koyama, K. Nakae, and
S. Ishii. Distributional smoothing with virtual adver-
sarial training. stat, 1050:25, 2015.

[38] A. Mnih and K. Gregor. Neural variational inference
and learning in belief networks. In International Confer-
ence on Machine Learning, 2014.

[39] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu,
and A. Y. Ng. Reading digits in natural images with

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

unsupervised feature learning. Advances in Neural In-
formation Processing Systems Workshop on Deep Learning
and Unsupervised Feature Learning, 2011.

[40] A. Radford, L. Metz, and S. Chintala. Unsupervised
representation learning with deep convolutional gen-
International Conference
erative adversarial networks.
on Learning Representations, 2015.

[41] M. Ranzato, J. Susskind, V. Mnih, and G. E. Hinton. On
deep generative models with applications to recogni-
tion. In Computer Vision and Pattern Recognition, 2011.

[42] A. Rasmus, M. Berglund, M. Honkala, H. Valpola,
and T. Raiko. Semi-supervised learning with ladder
networks. In Advances in Neural Information Processing
Systems, 2015.

[43] Y. Ren, J. Li, Y. Luo, and J. Zhu. Conditional gener-
ative moment-matching networks. Advances in Neural
Information Processing Systems, 2016.

[44] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep
In International Conference on Ma-
generative models.
chine Learning, 2014.

[45] R. Salakhutdinov and G. E. Hinton. Deep Boltzmann
machines. In International Conference on Artiﬁcial Intelli-
gence and Statistics, 2009.

[46] T. Salimans, I. J. Goodfellow, W. Zaremba, V. Cheung,
A. Radford, and X. Chen.
Improved techniques for
training gans. Advances in Neural Information Processing
Systems, 2016.

[47] L. Saul, T. Jaakkola, and M. Jordan. Mean ﬁeld theory
for sigmoid belief networks. Journal of AI Research, 4:61–
76, 1996.

[48] P. Sermanet, S. Chintala, and Y. LeCun. Convolutional
neural networks applied to house numbers digit clas-
siﬁcation. In International Conference on Pattern Recogni-
tion, 2012.

[49] S. Shalev-Shwartz, Y. Singer, N. Srebro, and A. Cot-
ter. Pegasos: Primal estimated sub-gradient solver for
SVM. Mathematical Programming, Series B, 2011.

[50] J. T. Springenberg. Unsupervised and semi-supervised
learning with categorical generative adversarial net-
works. In International Conference on Learning Represen-
tations, 2016.

[51] Y. Tang. Deep learning using linear support vector
machines. In Challenges on Representation Learning Work-
shop, International Conference on Machine Learning, 2013.
[52] B. Taskar, C. Guestrin, and D. Koller. Max-margin
In Advances in Neural Information

Markov networks.
Processing Systems, 2003.

[53] I. Tsochantaridis, T. Hofmann, T. Joachims, and Y. Al-
tun. Support vector machine learning for interdepen-
In International
dent and structured output spaces.
Conference on Machine Learning, 2004.

[54] V. Vapnik. Statistical learning theory. Wiley-Interscience,

1998.

[55] P. Vincent, H. Larochelle, I. Lajoie, Y. Bengio, and P. A.
Manzagol. Stacked denoising autoencoders: Learning
useful representations in a deep network with a local
Journal of Machine Learning Re-
denoising criterion.
search, 11(Dec):3371–3408, 2010.

[56] C. J. Yu and T. Joachims. Learning structural SVMs with
latent variables. In International Conference on Machine

14

Learning, 2009.

[57] M. D. Zeiler and R. Fergus. Stochastic pooling for
regularization of deep convolutional neural networks.
In International Conference on Learning Representations,
2013.

[58] J. Zhu, A. Ahmed, and E. P. Xing. MedLDA: Maximum
Journal of Machine

margin supervised topic models.
Learning Research, 13:2237–2278, 2012.

[59] J. Zhu, N. Chen, H. Perkins, and B. Zhang. Gibbs max-
margin topic models with data augmentation. Journal
of Machine Learning Research, 15:1073–1110, 2014.
[60] J. Zhu, N. Chen, and E. P. Xing. Bayesian inference
with posterior regularization and applications to inﬁ-
nite latent SVMs. Journal of Machine Learning Research,
15:1799–1847, 2014.

[61] J. Zhu, E.P. Xing, and B. Zhang. Partially observed
maximum entropy discrimination Markov networks.
In Advances in Neural Information Processing Systems,
2008.

[62] X. Zhu and A. Goldberg.

Introduction to semi-
supervised learning. Synthesis lectures on artiﬁcial in-
telligence and machine learning, 3(1):1–130, 2009.

Chongxuan Li received his BS from Institute
for Interdiscriplinary Information Sciences, Ts-
inghua University, China. He is currently working
toward his PhD degree in the Department of
Computer Science and Technology at Tsinghua
University. His research interests are primarily
on statistical machine learning, especially deep
generative models for various learning tasks in-
cluding unsupervised, (semi-)supervised and re-
inforcement learning.

Jun Zhu received his BS, MS and PhD degrees
all from the Department of Computer Science
and Technology in Tsinghua University, China,
where he is currently an associate professor. He
was a project scientist and postdoctoral fellow
in the Machine Learning Department, Carnegie
Mellon University. His research interests are pri-
marily on developing statistical machine learn-
ing methods to understand scientiﬁc and engi-
neering data arising from various ﬁelds. He is a
member of the IEEE.

Bo Zhang graduated from the Department of
Automatic Control, Tsinghua University, Beijing,
China, in 1958. Currently, he is a Professor in
the Department of Computer Science and Tech-
nology, Tsinghua University and a Fellow of Chi-
nese Academy of Sciences, Beijing, China. His
main interests are artiﬁcial intelligence, pattern
recognition, neural networks, and intelligent con-
trol. He has published over 150 papers and four
monographs in these ﬁelds.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

APPENDIX A
NETWORK ARCHITECTURE OF MMVA
We illustrate the network structure of MMVA with Gaussian
hidden variables and Bernoulli visible variables in Fig. 9.

15

Fig. 9. Network architecture of MMVA with Gaussian hidden variables
and Bernoulli visible variables.

APPENDIX B
MANIFOLD VISUALIZATION
T-SNE embedding results of the features learned by VA and
MMVA on 2D plane are shown in Fig. 10 (a) and Fig. 10 (b)
respectively, using the same data points randomly sampled
from the MNIST dataset. Compared to the VA’s embedding,
MMVA separates the images from different categories better,
especially for the confusable digits such as digit “4” and
“9”. These results show that MMVA, which beneﬁts from
the max-margin principle, learns more discriminative repre-
sentations of digits than VA.

APPENDIX C
VISUALIZATION OF IMPUTATION RESULTS
The imputation results of Conv-VA and Conv-MMVA on
MNIST and SVHN are shown in Fig. 11 and Fig. 12 re-
spectively. On MNIST, Conv-MMVA makes fewer mistakes
and reﬁnes the images better, which accords with the MSE
results as reported in the main text. On SVHN, in most
cases, Conv-MMVA could complete the images with miss-
ing values on this much harder dataset. In the remaining
cases, Conv-MMVA fails potentially due to the changeful
digit patterns and less color contrast compared with hand-
writing digits dataset. Nevertheless, Conv-MMVA achieves
comparable results with Conv-VA on inferring missing data.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015

16

Fig. 10. t-SNE embedding results for both (a) VA and (b) MMVA.

(a) VA

(b) MMVA

(a) Original data

(b) Noisy data

(c) Results of Conv-VA

(d) Results of Conv-MMVA

Fig. 11. (a): original test data; (b) test data with missing value; (c-d): results inferred by Conv-VA and Conv-MMVA respectively for 100 iterations.

(a) Original data

(b) Noisy data

(c) Results of Conv-VA

(d) Results of Conv-MMVA

Fig. 12. (a): original test data; (b) test data with missing value; (c-d): results inferred by Conv-VA and Conv-MMVA respectively for 100 epochs.

