9
1
0
2
 
r
a

M
 
9
2
 
 
]

V
C
.
s
c
[
 
 
3
v
9
7
3
5
0
.
2
0
9
1
:
v
i
X
r
a

Improving Dense Crowd Counting Convolutional Neural Networks
using Inverse k-Nearest Neighbor Maps and Multiscale Upsampling

Greg Olmschenk1

Hao Tang2
1The Graduate Center of the City University of New York
2Borough of Manhattan Community College - CUNY
3The City College of New York - CUNY
golmschenk@gradcenter.cuny.edu, htang@bmcc.cuny.edu, zhu@cs.ccny.cuny.edu

Zhigang Zhu1,3

Abstract

Gatherings of thousands to millions of people frequently
occur for an enormous variety of events, and automated
counting of these high-density crowds is useful for safety,
management, and measuring signiﬁcance of an event. In this
work, we show that the regularly accepted labeling scheme
of crowd density maps for training deep neural networks is
less effective than our alternative inverse k-nearest neighbor
(ikNN) maps, even when used directly in existing state-of-
the-art network structures. We also provide a new network
architecture MUD-ikNN, which uses multi-scale upsampling
via transposed convolutions to take full advantage of the
provided ikNN labeling. This upsampling combined with the
ikNN maps further improves crowd counting accuracy. Our
new network architecture performs favorably in comparison
with the state-of-the-art. However, our labeling and upsam-
pling techniques are generally applicable to existing crowd
counting architectures.

1. Introduction

Every year, gatherings of thousands to millions occur
for protests, festivals, pilgrimages, marathons, concerts, and
sports events. For any of these events, there are countless
reasons to desire to know how many people are present. For
those hosting the event, both real-time management and fu-
ture event planning is dependent on how many people are
present, where they are located, and when they are present.
For security purposes, knowing how quickly evacuations can
be executed and where crowding might pose a threat to indi-
viduals is dependent on the size of the crowds. In journalism,
crowd sizes are frequently used to measure the signiﬁcance
of an event, and systems which can accurately report on the
event size are important for a rigorous evaluation.

Many systems have been proposed for crowd counting
purposes, with most recent state-of-the-art methods being

based on convolutional neural networks (CNNs). To the best
of our knowledge, every CNN-based dense crowd counting
approach in recent years relies on using a density map of
individuals, primarily with a Gaussian-based distribution of
density values centered on individuals labeled in the ground
truth images. Often, these density maps are generated with
the Gaussian distribution kernel sizes being dependent on a
k-Nearest Neighbor (kNN) distance to other individuals [22].
In this work, we explain how this generally accepted density
map labeling is lacking and how an alternative inverse kNN
(ikNN) labeling scheme, which does not explicitly represent
crowd density, provides improved counting accuracy. We
will show how a single ikNN map provides information sim-
ilar to the accumulation of many density maps with different
Gaussian spreads, in a form which is better suited for neural
network training. This labeling provides a signiﬁcant gra-
dient spatially across the entire label while still providing
precise location information of individual pedestrians (with
the only exception being exactly overlapping head labelings).
We show that by simply replacing density map training in an
existing state-of-the-art network with our ikNN map training,
the testing accuracy of the network improves. This is the
ﬁrst major contribution of the paper.

Additionally, coupling multi-scale upsampling with
densely connected convolutional networks [7] and our pro-
posed ikNN mapping, we provide a new network structure,
MUD-ikNN, which performs favorably compared to exist-
ing state-of-the-art methods. This network uses multi-scale
upsampling with transposed convolutions [20] to make ef-
fective use of the full ground truth label, particularly with
respect to our ikNN labeling scheme. The transposed convo-
lutions are used to spatially upsample intermediate feature
maps to the ground truth label map size for comparison.
This approach provides several beneﬁts. First, it allows the
features of any layer to be used in the full map compari-
son, where many existing methods require a special network
branch for this comparison. Notably, this upsampling, com-

1

parison, and following regression module can be used at any
point in any CNN, with the only change being the parame-
ters of the transposed convolution. This makes the module
useful not only in our speciﬁc network structure, but also
applicable in future state-of-the-art, general-purpose CNNs.
Second, as this allows features which have passed through
different levels of convolutions to be compared to the ground
truth label map, this intrinsically provides a multi-scale com-
parison without any dedicated additional network branches,
thus preventing redundant parameters which occur in sep-
arate branches. Third, because the transposed convolution
can provide any amount of upsampling (with the features
being used to specify the upsampling transformation), the
upsampled size can be the full ground truth label size. In con-
trast, most existing works used a severely reduced size label
map for comparison. These reduced sizes remove potentially
useful training information. Although some recent works
use full-size labels, they require specially crafted network
architectures to accomplish this comparison. Our proposed
upsampling structure can easily be added to most networks,
including widely used general-purpose networks, such as
DenseNet. This proposed network structure is the second
major contribution of the paper.

Importantly, these contributions are largely complemen-
tary to, rather than alternatives to, existing approaches. Most
approaches can easily replace their density label comparison
with our proposed ikNN map comparison and upsampling
map module, with little to no modiﬁcation of the rest of their
method or network architecture. As the ikNN label does not
sum to the count, the ikNN label and map module should go
hand-in-hand.

The paper is organized as follows. Section 2 discusses
related work. Section 3 describes the proposed k-nearest
neighbor map labeling method and its justiﬁcation. Section 3
proposes our new network architecture for crowd counting,
MUD-ikNN. Section 5 presents experimental results on sev-
eral crowd datasets and analyzes the ﬁndings. Section 6
provides a few concluding remarks.

2. Related Work

Many works use explicit detection of individuals to count
pedestrians [19, 12, 18]. However, as the number of people
in a single image increase and a scene becomes crowded,
these explicit detection methods become limited by occlu-
sion effects. Early works to solve this problem relied on
global regression of the crowd count using low-level fea-
tures [3, 5, 4]. While many of these methods split the
image into a grid to perform a global regression on each
cell, they still largely ignored detailed spatial information
of pedestrian locations. [10] introduced a method of count-
ing objects using density map regression, and this technique
was shown to be particularly effective for crowd counting
by [21]. Since then, to the best of our knowledge, every

CNN-based crowd counting method in recent years has
used density maps as a primary part of their cost func-
tion [9, 14, 17, 21, 22, 15, 11, 13, 16].

A primary advantage of the density maps is the ability to
provide a useful gradient for network training over large por-
tions of the image spatially, which helps the network identify
which portion of the image contains information signifying
an increase in the count. These density maps are usually
modeled by representing each labeled head position with a
Dirac delta function, and convolving this function with a 2D
Gaussian kernel [10]. This forms a density map where the
sum of the total map is equal to the total count of individuals,
while the density of a single individual is spread out over
several pixels of the map. The Gaussian convolution allows
a smoother gradient for the loss function of the CNN to op-
erate over, thereby allowing slightly misplaced densities to
result in a lower loss than signiﬁcantly misplaced densities.
In some works, the spread parameter of the Gaussian ker-
nel is often determined using a k-nearest neighbor (kNN)
distance to other head positions [22]. This provides a form
of pseudo-perspective which results in pedestrians which are
more distant from the camera (and therefore smaller in the
image) having their density spread over a smaller number
of density map pixels. While this mapping will often imper-
fectly map perspective (especially in sparsely crowded im-
ages), it works well in practice. Whether adaptively chosen
or ﬁxed, the Gaussian kernel size is dependent on arbitrarily
chosen parameters, usually ﬁne-tuned for a speciﬁc dataset.
In a recent work [9], the authors used multiple scales of
these kNN-based, Gaussian convolved density maps to pro-
vide various levels of spatial information, from large Gaus-
sian kernels (allowing for a widespread training gradient)
to small Gaussian kernels (allowing for precise localization
of density). While this approach effectively integrates infor-
mation from multiple Gaussian scales, thus providing both
widespread and precise training information, the network
is left with redundant structures and how the various scales
are chosen is fairly ad hoc. Our alternative ikNN labeling
method supersedes these multiple scale density maps by
providing both a smooth training gradient and precise label
locations (in the form of steep gradients) in a single label.
Our new network structure utilizes a single branch CNN
structure for multi-scale regression. Together with the ikNN
labeling, it provides the beneﬁts of numerous scales of these
density maps.

Nearly all these CNN-based approaches use a reduced
label size. Some recent works [15, 11] have begun using
full resolution labels. In contrast even to these works, we
provide a generalized map module which can be added to
existing network structures allowing them to take advantage
of larger resolutions. Our proposed network is based off
the DenseNet201 [7], with our map module added to the
end of each DenseBlock. This map module can be added to

Figure 1: An example of a crowd image and various kinds of labelings. From left to right, on top, there is the original image,
the density map, the kNN map with k = 1. On bottom, the inverse kNN map with k = 1, the inverse kNN map with k = 3,
and the inverse kNN map with k = 1 shown with a log scaling (for read insight only). Note, in the case of the density map,
any values a signiﬁcant distance from a head labeling are very small. This is in contrast to the inverse kNN map, which has a
signiﬁcant gradient even a signiﬁcant distance from a head position.

most CNN architectures with little or no modiﬁcation to the
original architecture.

kNN for σh in the density map is not to be confused with
the full kNN map used in our method, which is deﬁned by,

Our ikNN mapping is somewhat related to a distance
transform, which has been used for counting in other appli-
cations [1]. However, the distance transform is analogous
to a kNN map, rather than our ikNN. To our knowledge,
neither the distance transform nor a method analogous to our
ikNN labeling has been used for dense crowd counting.

3. Inverse k-Nearest Neighbor Map Labeling

We propose using full image size ikNN maps as an al-
ternative labeling scheme from the commonly used density
map explained in Section 2. Formally, the commonly used
density map [9, 14, 17, 21, 22] is provided by,

D(x, f (·)) =

H
(cid:88)

h=1

√

1
2πf (σh)

(cid:18)

exp

−

(x − xh)2 + (y − yh)2
2f (σh)2

(cid:19)
,

(1)

where H is the total number of head positions for the exam-
ple image, σh is a size determined for each head position
(xh, yh) using the kNN distance to other heads positions (a
ﬁxed size is also often used), and f is a manually determined
function for scaling σh to provide a Gaussian kernel size.
For simplicity, in our work we deﬁne f as a simple scalar
function given by f (σh) = βσh, with β being a hand-picked
scalar. Though they both apply to head positions, the use of

K(x, k) =

(cid:88)

1
k

min
k

(cid:16)(cid:112)(x − xh)2 + (y − yh)2, ∀h ∈ H

(cid:17)

,

(2)

where H is the list of all head positions. In other words, the
kNN distance from each pixel, (x, y), to each head position,
(xh, yh), is calculated.

To produce the inverse kNN (ikNN) map, we use,

M =

1
K(x, k) + 1

,

(3)

where M is the resulting ikNN map, with the addition and
inverse being applied element-wise.

To understand the advantage of an ikNN map over a
density map, we can consider taking the generation of density
maps to extremes with regard to the spread parameter of the
Gaussian kernel provided by f . A similar explanation is
illustrated in Figure 2. At one extreme, is a Gaussian kernel
with zero spread. Here the delta function remains unchanged,
which in practical terms translates to a density map where
the density for each pedestrian is fully residing on a single
pixel. When the difference between the true and predicted
density maps is used to calculate a training loss, the network
predicting density 1 pixel away from the correct labeling
is considered just as incorrect as 10 pixels away from the

e
u
l
a
v

p
a
M

0.5

1

0

0

1

2
Distance from head position

3

4

Figure 2: A comparison of the values of map labeling
schemes with respect to the distance from an individual
head position (normalized for comparison). Two Gaussians
are shown in green. The narrow Gaussian provides a precise
location of the head labeling. However, it provides little
training information as the distance from the head increases.
The wide Gaussian provides training information at a dis-
tance, but gives an imprecise location of the head position,
resulting in low training information near the correct answer.
The blue line shows a composite of several Gaussians with
spread parameters between those of the two extremes ([9]
uses 3 Gaussian spreads in their work). This provides both
precise and distant training losses. Our approach of the ikNN
map shown in red (with k = 1) approaches a map function
with a shape similar to the integral on the spread parameter
of all Gaussians for a spread parameter range from 0 to some
constant. Additionally, our method provides both the precise
and distant gradient training information in a single map
label. Also notable, is that even the large Gaussian shown
here approaches near zero much sooner than the ikNN map
value.

correct labeling. Obviously, this is not desired, as it both
creates a discontinuous training gradient, and the training
process is intolerant to minor spatial labeling deviations.
The other extreme is a very large Gaussian spread. This
results in inexact spatial information of the location of the
density. At the extreme, this provides no beneﬁt over a global
regression, which is the primary purpose for using a density
map in the ﬁrst place. Any intermediate Gaussian spread
has an intermediate degree of both these problems. Using
multiple scales of Gaussian spread, [9] tries to obtain the
advantage of both sides. However, the size of the scales and
the number of scales are then arbitrary and hard to determine.
In contrast, a single ikNN map provides a substantial spa-
tial gradient everywhere while still providing steep gradients
in the exact locations of individual pedestrians. An example
of our ikNN map compared with a corresponding density
map labeling can be seen in Figure 1. Notably, [9] uses 3 den-
sity maps with different Gaussian spread parameters, with
the Gaussian spread being determined by the kNN distance
to other head positions multiplied by one of the 3 spread
parameters. We note that for a single head position, all Gaus-

sian distributions integrated over the spread parameter from
0 to some constant α results in a form of the incomplete
gamma function. This function has a cusp around the center
of the Gaussians. Similarly, the inverse of the kNN map
also forms a cusp at the head position and results in similar
gradients of loss given misplaced density/distance values as
the spread integrated Gaussian function. In our experiments,
we found that an inverse kNN map outperformed density
maps with ideally selected spread parameters (and further
outperformed general use selected spread parameters).

In one experiment, we use [9]’s network architecture,
which utilized DenseBlocks [7] as the basis, but we replace
the density maps with ikNN maps and show there is an
improvement in the prediction’s mean absolute error. This
demonstrates the direct improvement of our ikNN method
on an existing state-of-the-art network. Note, the regression
module from ikNN map to count is then also required to
convert from the ikNN map to a count. The difference in
error between the original approach in [9] and the network
in [9] with our ikNN maps, though improved, is relatively
small. We suspect this is because the density maps (or ikNN
maps) used during training are downsampled to a size of
28x28 (where the original images and corresponding labels
are 224x224). This severe downsampling results in more
binning of pixel information, and this seems to reduce the
importance of which system is used to generate that label.
At the extreme case, when downsampled to a single value,
both approaches would only give the global count in the
patch (where the ikNN map gives the inverse of the aver-
age distance from a pixel to a head labeling which can be
translated to an approximate count). This downsampling is a
consequence of the network structure only permitting labels
of the same spatial size as the output of the DenseBlocks.
Our network (which will be described below) remedies this
through transposed convolutions, allowing for the use of the
full-size labels.

4. MUD-ikNN: A New Network Architecture

We propose a new network structure, MUD-ikNN, with
both multi-scale upsampling using DenseBlocks [7] and our
ikNN mapping scheme. We show that the new MUD-ikNN
structure performs favorably compared with existing state-
of-the-art networks. In addition to the use of ikNN maps
playing a central role, we also demonstrate how features
with any spatial size can contribute in the prediction of ikNN
maps and counts through the use of transposed convolutions.
This allows features of various scales from throughout the
network to be used for the prediction of the crowd.

The proposed MUD-ikNN network structure is shown in
Figure 3. Our network uses the DenseBlock structures from
DenseNet201 [7] in their entirety. DenseNet has been shown
to be widely applicable to various problems. The output of
each DenseBlock (plus transition layer) is used as the input

Figure 3: A diagram of the proposed network architecture MUD-ikNN: multiscale regression with DenseBlocks and ikNN
mapping. Best viewed in color.

to the following DenseBlock, just as it is in DenseNet201.
However, each of these outputs is also passed to a transposed
convolutional layer (excluding the ﬁnal DenseBlock output).
These transposed convolutions are given a stride and kernel
size such that output is the size of the ikNN map, and no
spatial input dimensions have their output overlap in the
produced ikNN map. This form of upsampling allows the
feature depth dimensions to contribute to the gradients of the
map values in the predicted ikNN map. Both the stride and
kernel size of the transposed convolutions of our network
are 8, 16, and 32.

The ikNN map generated at each level is individually
compared against the ground truth ikNN map, each produc-
ing a loss which is then summed,

Lm =

MSE( ˆMj, Mj)

(4)

(cid:88)

j

Layer

Input from
DenseBlock

Output size

128x28x28
256x14x14
896x7x7

Filter

Transposed
convolution

1x224x224
(map prediction)

(8,16,32)x(8,16,32)
stride=(8,16,32)

Convolution

8x112x112

Convolution

16x56x56

Convolution

32x28x28

2x2 stride=2

2x2 stride=2

2x2 stride=2

Convolution

1x1x1

28x28

Table 1: A speciﬁcation of the map module layers. This
module is used at 3 points throughout our network as shown
in Figure 3, so the initial input size varies. However, the
transposed convolution always produces a predicted map
label which is uniform size (1x224x224).

where j is the index of the DenseBlock that the output came
from, M is the ikNN map labeling, and ˆM is the predicted
map labeling.

Each ikNN map is then also used as the input to a small
regression module. This module is a series of small convo-
lutional layers, shown in the inset of Figure 3. The sizes of
these layers are speciﬁed in Table 1. The regression module
then has a singleton output, corresponding to the predicted
crowd count.

The mean of all predicted crowd counts from the regres-
sion modules, three in Figure 3, and the output of the ﬁnal

DenseBlock is used as the ﬁnal count prediction.

Lc = MSE







ˆCend +

ˆCj

m
(cid:80)
j=1
m + 1







, C

(5)

with C being the ground truth count, ˆCend being the re-
gression count output by the ﬁnal DenseBlock, and ˆCj be-
ing the count from the jth map regression module (j =
1, 2, ..., m; m = 3 in Figure 3). This results in a total loss

given by L = Lm + Lc.

This approach has multiple beneﬁts. First, if an appropri-
ately sized stride and kernel size are speciﬁed, the transposed
convolutional layer followed by ikNN map prediction to re-
gression module can accept any sized input. This means
this module of the network is very generalizable and can be
applied to any CNN structure at any point in the network.
For example, an additional DenseBlock could be added to ei-
ther end of the DenseNet, and another of these map modules
could be attached. Second, each ikNN map is individually
trained to improve the prediction at that layer, which pro-
vides a form of intermediate supervision, easing the process
of training earlier layers in the network. At the same time,
the ﬁnal count is based on the mean values of the regres-
sion modules. This means that if any individual regression
module produces more accurate results, its results can indi-
vidually be weighted as being more important to the ﬁnal
prediction.

We note that the multiple Gaussian approach by [9] has
some drawbacks. The spread of the Gaussians, as well as the
number of different density maps, is somewhat arbitrary. Ad-
ditionally, without upsampling, a separate network branch is
required to maintain spatial resolution. This results in redun-
dant network parameters and a ﬁnal count predictor which is
largely unconnected to the map prediction optimization goal.
Our upsampling approach allows the main network to retain
a single primary branch and connects all the optimization
goals tightly to this branch.

The input to the network is 224×224 image patches. The
ikNN maps (or density maps) use the same size patches.
Each map regression module contains the layers speciﬁed
in Table 1. At evaluation time, a sliding window with a step
size of 128 was used for each patch of the test images, with
overlapping predictions averaged.

Network code and hyperparameters can be found at

https://github.com/golmschenk/sr-gan.

5. Experimental Results

5.1. Evaluation metrics

For each dataset that we evaluated our method on, we
provide the mean absolute error (MAE), normalized absolute
error (NAE), and root mean squared error (RMSE). These
are given by the following equations:

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

MAE =

ˆCi − Ci

NAE =

N
(cid:88)

i=1

ˆCi − Ci
Ci

1
N

N
(cid:88)

i=1

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

1
N

N
(cid:88)

i=1

1
N

(cid:118)
(cid:117)
(cid:117)
(cid:116)

RMSE =

( ˆCi − Ci)2

(6)

(7)

(8)

In the ﬁrst set of experiments, we demonstrate the im-
provement of the ikNN labeling scheme compared to the
density labeling scheme. We trained our network using vari-
ous density maps produced with different Gaussian spread
parameters, β (as described in Section 3), and compared
these results to the network using ikNN maps with varying
k. We also analyze the advantage of upsampling the label
for both density and ikNN maps. In the second set of ex-
periments, we provide comparisons to the state-of-the-art on
standard crowd counting datasets. In these comparisons, the
best ikNN map and density map from the ﬁrst set of experi-
ments is used. Most works provide their MAE and RMSE
results. [9] provided the additional metric of NAE. Though
this result is not available for many of the datasets, we pro-
vide our own NAE on these datasets for future works to refer
to. The most directly relevant work, [9], has only provided
their results for their latest dataset, UCF-QNRF. As such,
their results only appear in regard to that dataset. Finally,
we offer a general analysis of the results using our ikNN
maps and upsampling approaches. General statistics about
the datasets used in our experiments is shown in Table 2.

5.2. Impact of labeling approach and upsampling

5.2.1 Density maps vs ikNN maps

We used the ShanghaiTech dataset [22] part A for this anal-
ysis. The results of these tests are shown in Table 3. The
density maps provide a curve, where too large and too small
of spreads perform worse than an intermediate value. Even
when choosing the best value (where β = 0.3), which needs
to manually determined, the i1NN label signiﬁcantly outper-
forms the density label.

Included in the table are experiments, in the fashion of
[9], with density maps using 3 different β values. Here β1
denotes the spread parameter used as the label map for the
ﬁrst map module, while β2 and β3 are for the second and
third modules. Contrary to [9]’s ﬁndings, we only gained a
beneﬁt from 3 density labels when the ﬁrst output had the
smallest spread parameter. Even then, the gain was minimal.
Upon inspection of the weights produced by the network
from the map to the count prediction, the network reduces
the predictions from the non-optimal β maps to near zero
and relies solely on the optimal map (resulting in a reduced
accuracy compared to using the optimal map for each map
module).

With varying k, we ﬁnd that an increased k results in
lower accuracy. This is likely due to the loss of precision in
the location of an individual. The most direct explanation for
this can be seen in the case of k = 2. Every pixel on the line
between two nearest head positions will have the same map
value, thus losing the precision of an individual location.

Dataset

Images Total count Mean count Max count Average resolution

UCF-QNRF
ShanghaiTech Part A
ShanghaiTech Part B
UCF-CC-50

1535
482
716
50

1,251,642
241,677
88,488
63,974

815
501
123.6
1279

12,865
3139
578
4633

2013×2902
589×868
768×1024
2101×2888

Table 2: General statistics for the tested datasets.

(a) i1NN predictions.

(b) i3NN predictions.

Figure 4: A small sample of patch predictions for map labels. In each subﬁgure, from left to right is the original image patch,
the ground truth label, and the patches from the three map modules in order through the network.

5.2.2 Upsampling analysis

0.3, from the ﬁrst set of experiments.

Most existing works use a density map with a reduced size
label for testing and training. Those that use the full label
resolution design speciﬁc network architectures for the high-
resolution labels. Our map module avoids this constraint by
upsampling the label using a trained transposed convolution,
which can be integrated into most existing architectures. Us-
ing the ShanghaiTech part A dataset, we tested our network
using various label resolutions to determine the impact on
the predictive abilities of the network. These results can be
seen in Table 3. Experiments without no label resolution
given are 224×224. From these results, it is clear that the
higher resolution leads to higher accuracy. Note, this results
in a minor change to the map module structure, as the ﬁnal
convolution kernel needs to match the remaining spatial di-
mension. A set of predicted ikNN map labels can be seen in
Figure 4, where a grid pattern due to the upsampling can be
identiﬁed in some cases.

5.3. Comparisons on standard datasets

The following demonstrates our network’s predictive ca-
pabilities on various datasets, compared to various state-of-
the-art methods. Again, we note that our improvements are
expected to complementary to the existing approaches, rather
than alternatives.

The ﬁrst dataset we evaluated our approach on is the UCF-
QNRF dataset [9]. The results of our MUD-ikNN network
compared with other state-of-the-art networks are shown in
Table 4. Our network signiﬁcantly outperforms the existing
methods. Along with a comparison of our complete method
compared with the state-of-the-art, we compare with [9]’s
network, but replace their density map predictions and sum-
ming to count with our ikNN map prediction and regression
to count. Using the ikNN maps, we see that their model sees
improvement in MAE with ikNN maps, showing the effect
of the ikNN mapping.

The second dataset we evaluated our approach on is the
ShanghaiTech dataset [22]. The dataset is split into two parts,
Part A and Part B. For both parts, we used the training and
testing images as prescribed by the dataset provider. The
results of our evaluation on part A are shown in Table 5. Our
MUD-ikNN network slightly outperforms the state-of-the-
art approaches on this part. The results of our evaluation on
part B are shown in Table 6. Here our network performs on
par or slightly worse than the best-performing methods.

The third dataset we evaluated our approach on is the
UCF-CC-50 dataset [8]. We followed the standard evalua-
tion metric for this dataset of a ﬁve-fold cross-evaluation.
The results of our evaluation on this dataset can be seen in
Table 7.

For these experiments, we used the best k, 1, and best β,

Overall, our network performed favorably compared with

Method

MAE NAE RMSE

Method

MAE NAE RMSE

MUD-densityβ0.3 28x28
MUD-densityβ0.3 56x56
MUD-densityβ0.3 112x112
MUD-i1NN 28x28
MUD-i1NN 56x56
MUD-i1NN 112x112

MUD-densityβ0.05
MUD-densityβ0.1
MUD-densityβ0.2
MUD-densityβ0.3
MUD-densityβ0.4
MUD-densityβ0.5
MUD-density

β10.5,β20.3,β30

MUD-density

β10.5,β20.3,β30.05

MUD-density

β10.4,β20.2,β30.1

MUD-density

β10.1,β20.2,β30.4

MUD-density

β10.2,β20.3,β30.4

MUD-i1NN
MUD-i2NN
MUD-i3NN
MUD-i4NN
MUD-i5NN
MUD-i6NN

0.209
0.181
0.176
0.180
0.181
0.166

0.233
0.189
0.175
0.174
0.176
0.182

120.5
121.0
119.1
120.3
117.4
117.0

139.9
120.3
124.2
120.4
130.5
130.0

79.0
74.8
73.3
75.8
72.7
70.8

84.5
76.8
75.3
72.7
75.7
76.3

78.5

0.205

124.2

77.8

0.207

124.9

76.7

0.202

122.7

75.1

0.191

119.0

76.0

0.196

122.1

68.0
68.8
69.8
72.2
74.0
76.2

0.162
0.168
0.169
0.173
0.182
0.188

117.7
109.0
110.7
116.0
119.1
120.9

Table 3: Results using density maps vs ikNN maps with
varying k and β, as well as the various upsampling resolu-
tions on the ShanghaiTech Part A dataset. If a resolution is
not shown, it is the default 224×224. Multiple β correspond
to a different Gaussian density map for each of the 3 map
module comparisons.

existing approaches. An advantage to our approach is that
the our modiﬁcations can be applied to the architectures
we’re comparing against. The most relevant comparison
is between the ikNN version of the MUD network, and
the density map version. Here, the ikNN approach always
outperformed the density version. We speculate that the
state-of-the-art methods we have compared with, along with
other general-purpose CNNs, could be improved through the
use of ikNN labels and upsampling map modules.

Idrees et al. (2013) [8]
MCNN [22]
Encoder-Decoder [2]
CMTL [17]
SwitchCNN [14]
Resnet101 [6]
DenseNet201 [7]
Idrees et al. (2018) [9]

[9] with i1NN maps
MUD-i1NN

315
277
270
252
228
190
163
132

122
104

0.63
0.55
0.56
0.54
0.44
0.50
0.40
0.26

0.252
0.209

508
426
478
514
445
227
226
191

195
172

Table 4: Results on the UCF-QNRF dataset.

Method

MAE NAE RMSE

ACSCP [15]
D-ConvNet-v1[16]
ic-CNN [13]
CSRNet [11]

MUD-densityβ0.3
MUD-i1NN

D-ConvNet-v1[16]
ACSCP [15]
ic-CNN [13]
CSRNet [11]

MUD-densityβ0.3
MUD-i1NN

75.7
73.5
68.5
68.2

72.7
68.0

18.7
17.2
10.7
10.6

16.6
13.4

-
-
-
-

-
-
-
-

0.174
0.162

0.130
0.107

102.7
112.3
116.2
115.0

120.4
117.7

26.0
27.4
16.0
16.0

26.9
21.4

Table 5: Results on the ShanghaiTech Part A dataset.

Method

MAE NAE RMSE

Table 6: Results on the ShanghaiTech Part B dataset.

Method

MAE

NAE RMSE

ACSCP [15]
D-ConvNet-v1[16]
CSRNet [11]
ic-CNN [13]

291.0
288.4
266.1
260.9

-
-
-
-

MUD-densityβ0.3
MUD-i1NN

246.44
237.76

0.188
0.191

404.6
404.7
397.5
365.5

348.1
305.7

Table 7: Results on the UCF-CC-50 dataset.

6. Conclusions

In this work, we have presented a new form of labeling for
crowd counting data, the ikNN map. We have compared this

labeling scheme to commonly accepted labeling approach
for crowd counting, the density map. We show that using
the ikNN map with an existing state-of-the-art network im-
proves the accuracy of the network compared to density map

[14] D. B. Sam, S. Surya, and R. V. Babu. Switching convolutional
neural network for crowd counting. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, volume 1, page 6, 2017. 2, 3, 8

[15] Z. Shen, Y. Xu, B. Ni, M. Wang, J. Hu, and X. Yang. Crowd
counting via adversarial cross-scale consistency pursuit. In
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 5245–5254, 2018. 2, 8

[16] Z. Shi, L. Zhang, Y. Liu, X. Cao, Y. Ye, M.-M. Cheng, and
G. Zheng. Crowd counting with deep negative correlation
learning. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 5382–5390, 2018. 2, 8
[17] V. A. Sindagi and V. M. Patel. Cnn-based cascaded multi-task
learning of high-level prior and density estimation for crowd
counting. In Advanced Video and Signal Based Surveillance
(AVSS), 2017 14th IEEE International Conference on, pages
1–6. IEEE, 2017. 2, 3, 8

[18] M. Wang and X. Wang. Automatic adaptation of a generic
pedestrian detector to a speciﬁc trafﬁc scene. In Computer Vi-
sion and Pattern Recognition (CVPR), 2011 IEEE Conference
on, pages 3401–3408. IEEE, 2011. 2

[19] B. Wu and R. Nevatia. Detection of multiple, partially oc-
cluded humans in a single image by bayesian combination of
edgelet part detectors. In null, pages 90–97. IEEE, 2005. 2

[20] M. D. Zeiler, D. Krishnan, G. W. Taylor, and R. Fergus. De-

convolutional networks. 2010. 1

[21] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 833–841, 2015. 2, 3

[22] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neural
network. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 589–597, 2016. 1, 2, 3,
6, 7, 8

labelings. We have demonstrated the improvements gained
by using increased label resolutions, and provide an upsam-
pling map module which can be generally used by other
crowd counting architectures. These approaches can easily
be incorporated into other crowd counting techniques, as
we have incorporated them into DenseNet, which resulted
in a network which performs favorably compared with the
state-of-the-art.

References

[1] C. Arteta, V. Lempitsky, and A. Zisserman. Counting in the
In European conference on computer vision, pages

wild.
483–498. Springer, 2016. 3

[2] V. Badrinarayanan, A. Kendall, and R. C. SegNet. A deep
convolutional encoder-decoder architecture for image seg-
mentation. arXiv preprint arXiv:1511.00561. 8

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In Computer Vision and Pattern Recog-
nition, 2008. CVPR 2008. IEEE Conference on, pages 1–7.
IEEE, 2008. 2

[4] K. Chen, S. Gong, T. Xiang, and C. Change Loy. Cumulative
In
attribute space for age and crowd density estimation.
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 2467–2474, 2013. 2

[5] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining
for localised crowd counting. In BMVC, volume 1, page 3,
2012. 2

[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning
for image recognition. In Proceedings of the IEEE conference
on computer vision and pattern recognition, pages 770–778,
2016. 8

[7] G. Huang, Z. Liu, L. Van Der Maaten, and K. Q. Weinberger.
Densely connected convolutional networks. In CVPR, vol-
ume 1, page 3, 2017. 1, 2, 4, 8

[8] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images. In
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 2547–2554, 2013. 7, 8

[9] H. Idrees, M. Tayyab, K. Athrey, D. Zhang, S. Al-Maadeed,
N. Rajpoot, and M. Shah. Composition loss for counting, den-
sity map estimation and localization in dense crowds. arXiv
preprint arXiv:1808.01050, 2018. 2, 3, 4, 6, 7, 8

[10] V. Lempitsky and A. Zisserman. Learning to count objects
In Advances in neural information processing

in images.
systems, pages 1324–1332, 2010. 2

[11] Y. Li, X. Zhang, and D. Chen. Csrnet: Dilated convolu-
tional neural networks for understanding the highly congested
scenes. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 1091–1100, 2018. 2, 8
[12] Z. Lin and L. S. Davis. Shape-based human detection and
segmentation via hierarchical part-template matching. IEEE
Transactions on Pattern Analysis and Machine Intelligence,
32(4):604–618, 2010. 2

[13] V. Ranjan, H. Le, and M. Hoai. Iterative crowd counting. In
Proceedings of the European Conference on Computer Vision
(ECCV), pages 270–285, 2018. 2, 8

