Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

9
1
0
2
 
n
u
J
 
1
2
 
 
]

G
L
.
s
c
[
 
 
3
v
4
5
1
5
0
.
1
1
8
1
:
v
i
X
r
a

Branislav Kveton 1 Csaba Szepesv´ari 2 3 Sharan Vaswani 4 Zheng Wen 5 Mohammad Ghavamzadeh 6
Tor Lattimore 2

Abstract

We propose a bandit algorithm that explores by
randomizing its history of rewards. Speciﬁcally,
it pulls the arm with the highest mean reward in
a non-parametric bootstrap sample of its history
with pseudo rewards. We design the pseudo re-
wards such that the bootstrap mean is optimistic
with a sufﬁciently high probability. We call our
algorithm Giro, which stands for garbage in, re-
ward out. We analyze Giro in a Bernoulli ban-
dit and derive a O(K∆−1 log n) bound on its n-
round regret, where ∆ is the difference in the ex-
pected rewards of the optimal and the best sub-
optimal arms, and K is the number of arms. The
main advantage of our exploration design is that
it easily generalizes to structured problems. To
show this, we propose contextual Giro with an
arbitrary reward generalization model. We eval-
uate Giro and its contextual variant on multiple
synthetic and real-world problems, and observe
that it performs well.

1. Introduction

A multi-armed bandit (Lai and Robbins, 1985; Auer et al.,
2002; Lattimore and Szepesvari, 2019) is an online learn-
ing problem where actions of the learning agent are repre-
sented by arms. The arms can be treatments in a clinical
trial or ads on a website. After the arm is pulled, the agent
receives its stochastic reward. The objective of the agent
is to maximize its expected cumulative reward. The agent
does not know the expected rewards of the arms and thus
faces the so-called exploration-exploitation dilemma: ex-
plore, and learn more about arms; or exploit, and pull the
arm with the highest estimated reward thus far.

A contextual bandit (Li et al., 2010; Agrawal and Goyal,

1Google Research 2DeepMind 3University of Alberta 4Mila,
University of Montreal 5Adobe Research 6Facebook AI Research.
Correspondence to: Branislav Kveton <bkveton@google.com>.

Proceedings of the 36 th International Conference on Machine
Learning, Long Beach, California, PMLR 97, 2019. Copyright
2019 by the author(s).

2013b) is a generalization of a multi-armed bandit where
the learning agent has access to additional context in each
round. The context can encode the medical data of a pa-
tient in a clinical trial or the demographic information of
a targeted user on a website. In this case, the expected re-
ward is an unknown function of the arm and context. This
function is often parametric and its parameters are learned.
In linear bandits (Rusmevichientong and Tsitsiklis, 2010;
Dani et al., 2008; Abbasi-Yadkori et al., 2011), this func-
tion is linear; and the expected reward is the dot product of
a known context vector and an unknown parameter vector.

Arguably, the most used and studied exploration strate-
gies in multi-armed and contextual bandits are Thompson
sampling (Thompson, 1933; Agrawal and Goyal, 2013a),
the optimism in the face of uncertainty (Auer et al., 2002;
Abbasi-Yadkori et al., 2011), and the (cid:15)-greedy policy (Sut-
ton and Barto, 1998; Auer et al., 2002). The (cid:15)-greedy pol-
icy is general and thus widely used in practice. However,
it is also statistically suboptimal. Its performance heavily
depends on the value of (cid:15) and the strategy for annealing it.

Optimism in the face of uncertainty (OFU) relies on high-
probability conﬁdence sets. These sets are statistically and
computationally efﬁcient in multi-armed and linear bandits
(Auer et al., 2002; Abbasi-Yadkori et al., 2011). However,
when the reward function is non-linear in context, we only
know how to construct approximate conﬁdence sets (Fil-
ippi et al., 2010; Zhang et al., 2016; Li et al., 2017; Jun
et al., 2017). These sets tend to be conservative (Filippi
et al., 2010) and statistically suboptimal.

The key idea in Thompson sampling (TS) is to maintain a
posterior distribution over model parameters and then act
optimistically with respect to samples from it. TS is com-
putationally efﬁcient when the posterior distribution has a
closed form, as in multi-armed bandits with Bernoulli and
Gaussian rewards. If the posterior does not have a closed
form, it has to be approximated. Computationally efﬁcient
approximations exist in multi-armed bandits with [0, 1] re-
wards (Agrawal and Goyal, 2013a). Such approximations
are costly in general (Gopalan et al., 2014; Kawale et al.,
2015; Lu and Van Roy, 2017; Riquelme et al., 2018).

To address these problems, bootstrapping exploration has
been proposed in both multi-armed and contextual bandits

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

(Baransi et al., 2014; Eckles and Kaptein, 2014; Osband
and Van Roy, 2015; Tang et al., 2015; Elmachtoub et al.,
2017; Vaswani et al., 2018). Bootstrapping has two ad-
vantages over existing exploration strategies. First, unlike
OFU and TS, it is easy to implement in any problem, be-
cause it does not require problem-speciﬁc conﬁdence sets
or posteriors. Second, unlike the (cid:15)-greedy policy, it is data
driven and not sensitive to tuning. Despite its advantages
and good empirical performance, exploration by bootstrap-
ping is poorly understood theoretically. The strongest the-
oretical result is that of Osband and Van Roy (2015), who
showed that a form of bootstrapping in a Bernoulli bandit
is equivalent to Thompson sampling.

We make the following contributions in this paper. First,
we propose a general randomized algorithm that explores
conditioned on its history. We show that some instances of
this algorithm are not sound. Second, we propose Giro,
an algorithm that pulls the arm with the highest mean re-
ward in a non-parametric bootstrap sample of its history
with pseudo rewards. We design the pseudo rewards such
that the bootstrap mean is optimistic with a high probabil-
ity. Third, we analyze Giro in a K-armed Bernoulli bandit
and prove a O(K∆−1 log n) bound on its n-round regret,
where ∆ is the difference in the expected rewards of the
optimal and the best suboptimal arms. Our analyses of the
general randomized algorithm and Giro provide novel in-
sights on how randomness helps with exploration. Fourth,
we propose contextual Giro. Finally, we empirically eval-
uate Giro and its contextual variant on both synthetic and
real-world problems, and observe good performance.

2. Setting

We adopt the following notation. The set {1, . . . , n} is de-
noted by [n]. We deﬁne Ber(x; p) = px(1 − p)1−x and
let Ber(p) be the corresponding Bernoulli distribution. In
addition, we deﬁne B(x; n, p) = (cid:0)n
(cid:1)px(1 − p)n−x and let
B(n, p) be the corresponding binomial distribution. For
any event E, 1{E} = 1 if event E occurs and 1{E} = 0
otherwise. We introduce multi-armed and contextual ban-
dits below.

x

A multi-armed bandit (Lai and Robbins, 1985; Auer et al.,
2002; Lattimore and Szepesvari, 2019) is an online learn-
ing problem where the learning agent pulls K arms in n
rounds. In round t ∈ [n], the agent pulls arm It ∈ [K] and
receives its reward. The reward of arm i ∈ [K] in round
t, Yi,t, is drawn i.i.d. from a distribution of arm i, Pi, with
mean µi and support [0, 1]. The means are unknown to the
learning agent. The objective of the agent is to maximize
its expected cumulative reward in n rounds.

We assume that arm 1 is optimal, that is µ1 > maxi>1 µi.
Let ∆i = µ1 − µi be the gap of arm i, the difference in the

expected rewards of arms 1 and i. Then maximization of
the expected n-round reward can be viewed as minimizing
the expected n-round regret, which we deﬁne as

R(n) =

K
(cid:88)

i=2

(cid:34) n
(cid:88)

(cid:35)
1{It = i}

.

∆iE

t=1

(1)

A contextual bandit (Li et al., 2010; Agrawal and Goyal,
2013b) is a generalization of a multi-armed bandit where
the learning agent observes context xt ∈ Rd at the begin-
ning of each round t. The reward of arm i in round t is
drawn i.i.d. from a distribution that depends on both arm i
and xt. One example is a logistic reward model, where

Yi,t ∼ Ber(1/(1 + exp[−xT

t θi]))

(2)

and θi ∈ Rd is the parameter vector associated with arm i.
The learning agent does not know θi.

If the reward Yi,t was generated as in (2), we could solve
our contextual bandit problem as a generalized linear ban-
dit (Filippi et al., 2010). However, if Yi,t was generated
by a more complex function of context xt, such as a neural
network, we would not know how to design a sound bandit
algorithm. The difﬁculty is not in modeling uncertainty; it
is in the lack of computationally efﬁcient methods to do it.
For instance, Thompson sampling can be analyzed in very
general settings (Gopalan et al., 2014). However, as dis-
cussed in Section 1, accurate posterior approximations are
computationally expensive.

3. General Randomized Exploration

In this section, we present a general randomized algorithm
that explores conditioned on its history and context. Later,
in Sections 4 and 5, we propose and analyze an instance of
this algorithm with sublinear regret.

We use the following notation. The history of arm i after
s pulls is a vector Hi,s of length s. The j-th entry of Hi,s
is a pair (x(cid:96), Yi,(cid:96)), where (cid:96) is the index of the round where
arm i is pulled for the j-th time. We deﬁne Hi,0 = (). The
number of pulls of arm i in the ﬁrst t rounds is denoted by
Ti,t and deﬁned as Ti,t = (cid:80)t

1{I(cid:96) = i}.

(cid:96)=1

Our meta algorithm is presented in Algorithm 1. In round
t, the algorithm draws the value of each arm i, ˆµi,t, from
distribution p (line 5), which depends on the history of the
arm Hi,s and the context xt in round t. The arm with the
highest value is pulled (line 6), and its history is extended
by a pair of context xt and the reward of arm It (line 11).
We denote by u ⊕ v the concatenation of vectors u and v.

We present a general contextual algorithm because we re-
turn to it in Sections 4.3 and 6.2. For now, we restrict our
attention to multi-armed bandits. To simplify exposition,
we omit context from the entries of Hi,s.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Algorithm 1 General randomized exploration.
1: ∀i ∈ [K] : Ti,0 ← 0, Hi,0 ← ()
2: for t = 1, . . . , n do
3:
4:
5:

for i = 1, . . . , K do
s ← Ti,t−1
Draw ˆµi,t ∼ p(Hi,s, xt)

(cid:46) Initialization

(cid:46) Estimate arm values

It ← arg max i∈[K] ˆµi,t
Pull arm It and observe Yi,t

(cid:46) Pulled arm

for i = 1, . . . , K do
if i = It then

(cid:46) Update statistics

Ti,t ← Ti,t−1 + 1
Hi,Ti,t ← Hi,Ti,t−1 ⊕ ((xt, Yi,t))

else

Ti,t ← Ti,t−1

6:
7:

8:
9:
10:
11:
12:
13:

Algorithm 1 is instantiated by designing the distribution p
in line 5. This distribution can be designed in many ways.
In Bernoulli TS (Agrawal and Goyal, 2013a), for instance,
p is a beta posterior distribution. A less direct approach to
designing p is to resample the history of rewards in each
round, as in bootstrapping exploration (Section 7). More
speciﬁcally, let Bi,s be a non-parametric bootstrap sample
(Efron and Tibshirani, 1986) of arm i after s pulls. We let
Bi,s be a vector of the same length as Hi,s and assume that
its entries are drawn with replacement from the entries of
Hi,s in each round. Then the value of arm i in round t is
estimated as

ˆµi,t =

1
|Bi,s|

(cid:88)

y ,

y∈Bi,s

(3)

where s = Ti,t−1. Note that we slightly abuse our notation
and treat vectors as sets. In the next section, we show that
this natural instance of Algorithm 1 can have linear regret.

3.1. Linear Regret

The variant of Algorithm 1 in (3) can have linear regret in
a Bernoulli bandit with K = 2 arms. More speciﬁcally, if
the ﬁrst reward of the optimal arm is 0, its estimated value
remains 0 until the arm is pulled again, which may never
happen if the estimated value of the other arm is positive.
We formally state this result below.

Without loss of generality, let µ1 > µ2. Algorithm 1 is im-
plemented as follows. Both arms are initially pulled once,
arm 1 in round 1 and arm 2 in round 2. The value of arm
i in round t is computed as in (3). If ˆµ1,t = ˆµ2,t, the tie is
broken by a ﬁxed rule that is chosen randomly in advance,
as is common in multi-armed bandits. In particular, Algo-
rithm 1 draws Z ∼ Ber(1/2) before the start of round 1. If
ˆµ1,t = ˆµ2,t, It = 1{Z = 1} + 1. We bound the regret of
this algorithm below.

Lemma 1. In a Bernoulli bandit with 2 arms, the expected
n-round regret of the above variant of Algorithm 1 can be
bounded from below as R(n) ≥ 0.5 (1 − µ1)∆2(n − 1).

Proof. By design, the algorithm does not pull arm 1 after
event E = {Z = 1, H1,1 = (0)} occurs. Since the events
Z = 1 and H1,1 = (0) are independent,

P (E) = P (Z = 1) P (H1,1 = (0)) = 0.5 (1 − µ1) .

Moreover, if event H1,1 = (0) occurs, it must occur by the
end of round 1 because the algorithm pulls arm 1 in round
1. Now we combine the above two facts and get

R(n) ≥ E

∆21{It = 2}

1{E}

(cid:33)

(cid:35)

(cid:34)(cid:32) n
(cid:88)

t=2

(cid:34) n
(cid:88)

t=2

= E

∆21{It = 2}

E

P (E)

(cid:35)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

= 0.5 (1 − µ1)∆2(n − 1) .

This concludes the proof.

A similar lower bound, R(n) ≥ 0.5 (1 − µ1)k∆2(n − k),
can be derived in the setting where each arm is initialized
by k pulls. This form of forced exploration was proposed
in bootstrapping bandits earlier (Tang et al., 2015; Elmach-
toub et al., 2017), and is clearly not sound. A similar argu-
ment to Lemma 1, although less formal, is in Section 3.1 of
Osband and Van Roy (2015).

4. Garbage In, Reward Out

One solution to the issues in Section 3.1 is to add positive
and negative pseudo rewards, 1 and 0, to Hi,s. This in-
creases the variance of the bootstrap mean in (3) and may
lead to exploration. However, the pseudo rewards also in-
troduce bias that has to be controlled. In the next section,
we present a design that trades off these two quantities.

4.1. Algorithm Giro

We propose Algorithm 2, which increases the variance of
the bootstrap mean in (3) by adding pseudo rewards to the
history of the pulled arm (line 18). The algorithm is called
Giro, which stands for garbage in, reward out. This is
an informal description of our exploration strategy, which
adds seemingly useless extreme rewards to the history of
the pulled arm. We call them pseudo rewards, to distin-
guish them from observed rewards. Giro has one tunable
parameter a, the number of positive and negative pseudo
rewards in the history for each observed reward.

Giro does not seem sound, because the number of pseudo
rewards in history Hi,s grows linearly with s. In fact, this

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

is the key idea in our design. We justify it informally in the
next section and bound its regret in Section 5.

Algorithm 2 Giro with [0, 1] rewards.
1: Inputs: Pseudo rewards per unit of history a

4.2. Informal Justiﬁcation

In this section, we informally justify the design of Giro
in a Bernoulli bandit. Our argument has two parts. First,
we show that ˆµi,t in line 8 concentrates at the scaled and
shifted expected reward of arm i, which preserves the or-
der of the arms. Second, we show that ˆµi,t is optimistic,
its value is higher than the scaled and shifted expected re-
ward of arm i, with a sufﬁciently high probability. This is
sufﬁcient for the regret analysis in Section 5.

Fix arm i and the number of its pulls s. Let Vi,s denote the
number of ones in history Hi,s, which includes a positive
and negative pseudo rewards for each observed reward of
arm i. By deﬁnition, Vi,s − as is the number of positive
observed rewards of arm i. These rewards are drawn i.i.d.
from Ber(µi). Thus Vi,s − as ∼ B(s, µi) and we have

E [Vi,s] = (µi + a)s ,

var [Vi,s] = µi(1 − µi)s .

(4)

Now we deﬁne α = 2a + 1 and let Ui,s be the number of
ones in bootstrap sample Bi,s. Since drawing αs samples
with replacement from Hi,s is equivalent to drawing αs
i.i.d. samples from Ber(Vi,s/(αs)), we have Ui,s | Vi,s ∼
B(αs, Vi,s/(αs)). From the deﬁnition of Ui,s, we have for
any Vi,s,

E [Ui,s | Vi,s] = Vi,s ,
(cid:18)

var [Ui,s | Vi,s] = Vi,s

1 −

(cid:19)

.

Vi,s
αs

(5)

(6)

Let ˆµ = Ui,s/(αs) be the mean reward in Bi,s. First, we
argue that ˆµ concentrates. From the properties of Ui,s in
(5) and (6), for any Vi,s, we have

E [ˆµ | Vi,s] =

var [ˆµ | Vi,s] =

Vi,s
αs

,

Vi,s
α2s2

(cid:18)

1 −

(cid:19)

.

Vi,s
αs

Since Vi,s ∈ [as, (a + 1)s], var [ˆµ | Vi,s] = O(1/s) and
ˆµ → Vi,s/(αs) as s increases. Moreover, from the proper-
ties of Vi,s in (4), we have

E

(cid:21)

(cid:20) Vi,s
αs

=

µi + a
α

,

var

(cid:21)

(cid:20) Vi,s
αs

=

µi(1 − µi)
α2s

.

So, Vi,s/(αs) → (µi + a)/α as s increases. By transitivity,
ˆµ → (µi + a)/α, which is the scaled and shifted expected
reward of arm i. This transformation preserves the order
of the arms; but it changes the gaps, the differences in the
expected rewards of the optimal and suboptimal arms.

(cid:46) Initialization

for i = 1, . . . , K do

2: ∀i ∈ [K] : Ti,0 ← 0, Hi,0 ← ()
3: for t = 1, . . . , n do
4:
5:
6:
7:

if Ti,t−1 > 0 then
s ← Ti,t−1
Bi,s ← Sample |Hi,s| times from Hi,s

(cid:46) Estimate arm values

ˆµi,t ←

with replacement
(cid:88)

y

1
|Bi,s|

y∈Bi,s

else

ˆµi,t ← +∞

It ← arg max i∈[K] ˆµi,t
Pull arm It and get reward YIt,t

(cid:46) Pulled arm

for i = 1, . . . , K do
if i = It then

(cid:46) Update statistics

Ti,t ← Ti,t−1 + 1
Hi,Ti,t ← Hi,Ti,t−1 ⊕ (Yi,t)
for (cid:96) = 1, . . . , a do

Hi,Ti,t ← Hi,Ti,t ⊕ (0, 1)

(cid:46) Pseudo rewards

else

Ti,t ← Ti,t−1

8:

9:
10:

11:
12:

13:
14:
15:
16:
17:
18:

19:
20:

be the event that the mean reward in the history deviates
from its expectation by ε > 0. Then

P (ˆµ ≥ (µi + a)/α | E) ≥ P (E)

(7)

holds for any ε > 0 such that P (E) > 0.
Trivially, P (E) ≤ P (Vi,s/(αs) ≤ (µi + a)/α − ε) holds
for any ε > 0. Therefore, if both Vi,s/(αs) and ˆµ | Vi,s
were normally distributed, inequality (7) would hold if for
any Vi,s, var [ˆµ | Vi,s] ≥ var [Vi,s/(αs)]. We compare the
variances below. Since Vi,s ∈ [as, (a + 1)s],

var [ˆµ | Vi,s] ≥

1
αs
1
αs

min
v∈[as,(a+1)s]
as
as
αs
αs

1 −

(cid:16)

(cid:16)

v
αs
(cid:17)

=

(cid:17)

1 −

v
αs
a(a + 1)
α3s

.

=

Trivially, var [Vi,s/(αs)] ≤ 1/(4α2s). Therefore, for any
a such that a(a + 1)/α ≥ 1/4, roughly a ≥ 1/3, ˆµ is
optimistic. We formalize this intuition in Section 5. A for-
mal proof is necessary because our assumption of normal-
ity was unrealistic.

4.3. Contextual Giro

Second, we argue that ˆµ is optimistic, that any unfavorable
history is less likely than being optimistic under that his-
tory. In particular, let E = {Vi,s/(αs) = (µi + a)/α − ε}

We generalize Giro to a contextual bandit in Algorithm 3.
The main difference in Algorithm 3 is that it ﬁts a reward
generalization model to Bi,s and then estimates the value

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Algorithm 3 Contextual Giro with [0, 1] rewards.
1: Inputs: Pseudo rewards per unit of history a

arm. For s ∈ [n] ∪ {0}, let

(cid:46) Initialization

for i = 1, . . . , K do

2: ∀i ∈ [K] : Ti,0 ← 0, Hi,0 ← ()
3: for t = 1, . . . , n do
4:
5:
6:
7:

if Ti,t−1 > 0 then
s ← Ti,t−1
Bi,s ← Sample |Hi,s| times from Hi,s

(cid:46) Estimate arm values

with replacement
ˆµi,t ← Estimate E [Yi,t | Bi,s, xt]

else

ˆµi,t ← +∞

It ← arg max i∈[K] ˆµi,t
Pull arm It and get reward YIt,t

(cid:46) Pulled arm

for i = 1, . . . , K do
if i = It then

(cid:46) Update statistics

Ti,t ← Ti,t−1 + 1
Hi,Ti,t ← Hi,Ti,t−1 ⊕ ((xt, Yi,t))
for (cid:96) = 1, . . . , a do

(cid:46) Pseudo rewards

Hi,Ti,t ← Hi,Ti,t ⊕ ((xt, 0), (xt, 1))

else

Ti,t ← Ti,t−1

8:
9:
10:

11:
12:

13:
14:
15:
16:
17:
18:

19:
20:

of arm i in context xt (line 8) based on this model. If this
model was linear with parameters θi, the estimated value
t θi. The other difference is that the pseudo re-
would be xT
wards are associated with context xt (line 18), to increase
the conditional variance of the estimates given xt.
The value of arm i in round t, E [Yi,t | Bi,s, xt], can be ap-
proximated by any function of xt that can be learned from
Bi,s. The approximation should permit any constant shift
of any representable function. In linear models, this can be
achieved by adding a bias term to xt. We experiment with
multiple reward generalization models in Section 6.2.

5. Analysis

In Section 5.1, we prove an upper bound on the expected
n-round regret of Algorithm 1. In Section 5.2, we prove an
upper bound on the expected n-round regret of Giro in a
Bernoulli bandit. In Section 5.3, we discuss the results of
our analysis. Note that our analysis is in the multi-armed
bandit setting.

5.1. General Randomized Exploration

We prove an upper bound on the regret of Algorithm 1 in
a multi-armed bandit with K arms below. The setting and
regret are formally deﬁned in Section 2. The distribution p
in line 5 of Algorithm 1 is a function of the history of the

Qi,s(τ ) = P (ˆµ ≥ τ | ˆµ ∼ p(Hi,s), Hi,s)

(8)

be the tail probability that ˆµ conditioned on history Hi,s is
at least τ for some tunable parameter τ .
i=2 ∈ RK−1,
Theorem 1. For any tunable parameters (τi)K
the expected n-round regret of Algorithm 1 can be bounded
from above as R(n) ≤ (cid:80)K

i=2 ∆i(ai + bi), where

ai =

E [min {1/Q1,s(τi) − 1, n}] ,

bi =

P (Qi,s(τi) > 1/n) + 1 .

n−1
(cid:88)

s=0

n−1
(cid:88)

s=0

Proof. A detailed proof is in Appendix A. It is motivated
by the proof of Thompson sampling (Agrawal and Goyal,
2013a). Our main contribution is that we state and prove
the claim such that it can be reused for the regret analysis
of any sampling distribution in Algorithm 1.

Theorem 1 says that the regret of Algorithm 1 is low when
Qi,s(τi) → 0 and Q1,s(τi) → 1 as s → ∞. This suggests
the following setting of the tunable parameter τi for i > 1.
When p(Hi,s) concentrates at µi and µi < µ1, τi should
be chosen from interval (µi, µ1). Then Qi,s(τi) → 0 and
Q1,s(τi) → 1 would follow by concentration as s → ∞.
In general, when p(Hi,s) concentrates at µ(cid:48)
i < µ(cid:48)
1,
τi should be chosen from interval (µ(cid:48)
1).

i and µ(cid:48)

i, µ(cid:48)

5.2. Bernoulli Giro

We analyze Giro in a K-armed Bernoulli bandit. We make
an additional assumption over Section 5.1 that the rewards
are binary. Our regret bound is stated below.

√

2, the expected n-round re-

Theorem 2. For any a > 1/
gret of Giro is bounded from above as
(cid:34) (cid:18) 16(2a + 1)c
∆2
i

R(n) ≤

K
(cid:88)

∆i

i=2

(cid:19)

log n + 2

+ (9)

(cid:125)

(cid:124)

(cid:123)(cid:122)
Upper bound on ai in Theorem 1
(cid:35)
(cid:18) 8(2a + 1)
(cid:19)
∆2
i

log n + 2

(cid:125)
(cid:123)(cid:122)
(cid:124)
Upper bound on bi in Theorem 1

,

where b = (2a + 1)/[a(a + 1)] and

2e2

√
√

c =

2a + 1
2π

exp

(cid:20) 8b
2 − b

(cid:21) (cid:32)

(cid:114) 2π

(cid:33)

1 +

4 − 2b

is an upper bound on the expected inverse probability of
being optimistic, which is derived in Appendix C.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Proof. The claim is proved in Appendix B. The key steps
in the analysis are outlined below.

Since Giro is an instance of Algorithm 1, we prove The-
orem 2 using Theorem 1, where we instantiate distribution
speciﬁc artifacts. In the notation of Section 5.1, Qi,s(τ ) in
(8) is the probability that the mean reward in the bootstrap
sample Bi,s of arm i after s pulls is at least τ , conditioned
on history Hi,s.

Fix any suboptimal arm i. Based on Section 4.2, the mean
reward in Bi,s concentrates at µ(cid:48)
i = (µi + a)/α, where
α = 2a + 1. Following the discussion on the choice of τi
in Section 5.1, we set τi = (µi + a)/α + ∆i/(2α), which
is the average of µ(cid:48)
1. Recall that Vi,s is the number
of ones in history Hi,s and Ui,s is the number of ones in its
bootstrap sample Bi,s. Then Qi,s(τi) can be written as

i and µ(cid:48)

(cid:18) Ui,s
αs

≥

µi + a
α

+

∆i
2α

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:19)

Vi,s

for s > 0 ,

Qi,s(τi) = P

Qi,0(τi) = 1 ,

where Qi,0(τi) = 1 because of the initialization in line 10
of Giro. We deﬁne Q1,s(τi) analogously, by replacing Ui,s
with U1,s and Vi,s with V1,s.

The bound in Theorem 2 is proved as follows. To simplify
notation, we introduce ai,s = E [min {1/Q1,s(τi) − 1, n}]
and bi,s = P (Qi,s(τi) > 1/n). By concentration, ai,s and
bi,s are small when the number of pulls s is large, on the
order of ∆−2
log n. When the number of pulls s is small,
we bound bi,s trivially by 1 and ai,s as

i

ai,s ≤ E [1/P (U1,s ≥ (µ1 + a)s | V1,s)] ,

where the right-hand side is bounded in Appendix C. The
analysis in Appendix C is novel and shows that sampling
from a binomial distribution with pseudo rewards is sufﬁ-
ciently optimistic.

5.3. Discussion

The regret of Giro is bounded from above in Theorem 2.
Our bound is O(K∆−1 log n), where K is the number of
arms, ∆ = mini>1 ∆i is the minimum gap, and n is the
number of rounds. The bound matches the regret bound of
UCB1 in all quantities of interest.

We would like to discuss constants a and c in Theorem 2.
The bound increases with the number of pseudo rewards a.
This is expected, because a positive and negative pseudo
rewards yield 2a + 1 times smaller gaps than in the origi-
nal problem (Section 4.2). The beneﬁt is that exploration
becomes easy. Although the gaps are smaller, Giro out-
performs UCB1 in all experiments in Section 6.1, even for
a = 1. The experiments also show that the regret of Giro
increases with a, as suggested by our bound.

√

The constant c in Theorem 2 is deﬁned for all a > 1/
2
and can be large due to the term f (b) = exp[8b/(2 − b)].
For instance, for a = 1, b = 3/2 and f (b) ≈ e24. Fortu-
nately, f (b) decreases quickly as a increases. For a = 2,
b = 5/6 and f (b) ≈ e5.7; and for a = 3, b = 7/12 and
f (b) ≈ e3.3. Because Giro performs well empirically, as
shown in Section 6.1, the theoretically-suggested value of
c is likely to be loose.

6. Experiments

We conduct two experiments. In Section 6.1, we evaluate
Giro on multi-armed bandit problems. In Section 6.2, we
evaluate Giro in the contextual bandit setting.

6.1. Multi-Armed Bandit

We run Giro with three different values of a: 1, 1/3, and
1/10. Our regret analysis in Section 5.3 justiﬁes the value
of a = 1. The informal argument in Section 4.2 suggests
a less conservative value of a = 1/3. We implement Giro
with real a > 0 as follows. For each arm i, we have two
histories after s pulls, with (cid:98)as(cid:99) and (cid:100)as(cid:101) pseudo rewards
of each kind. The value of ˆµi,t is estimated from the (cid:100)as(cid:101)
and (cid:98)as(cid:99) histories with probabilities as − (cid:98)as(cid:99) and (cid:100)as(cid:101) −
as, respectively. This interpolation seems natural.

Giro is compared to UCB1 (Auer et al., 2002), Bernoulli
TS (Agrawal and Goyal, 2013a), and KL-UCB (Garivier and
Cappe, 2011). The prior in Bernoulli TS is Beta(1, 1). We
implement TS and KL-UCB with [0, 1] rewards as described
in Agrawal and Goyal (2013a). Speciﬁcally, for any Yi,t ∈
[0, 1], we draw pseudo reward ˆYi,t ∼ Ber(Yi,t) and use it
instead of Yi,t.

We experiment with two classes of K-armed bandit prob-
lems where the reward distribution Pi of arm i is parame-
terized by its expected reward µi ∈ [0, 1]. The ﬁrst class
is a Bernoulli bandit, where Pi = Ber(µi). Both KL-UCB
and TS are near optimal in this class. The second class is a
beta bandit, where Pi = Beta(vµi, v(1 − µi)) for v ≥ 1.
Both KL-UCB and TS can solve such problems, but are not
statistically optimal anymore. We experiment with v = 4,
which leads to rewards of higher variances; and v = 16,
which leads to rewards of lower variances. The number of
arms is K = 10 and their means are chosen uniformly at
random from [0.25, 0.75]. The horizon is n = 10k rounds.

Our results are reported in Figure 1. The strong empirical
performance of Giro is apparent. Giro outperforms UCB1
in all problems and for all values of a. It also outperforms
KL-UCB in the beta bandit for all values of a. Finally, Giro
outperforms TS in the beta bandit for a = 1/10. Although
this setting of Giro is purely heuristic, it shows the poten-
tial of our proposed method.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Figure 1. Comparison of Giro to UCB1, KL-UCB, and TS on three multi-armed bandit problems in Section 6.1. The regret is reported as
a function of round n. The results are averaged over 100 runs. To reduce clutter, the legend is split between the ﬁrst two plots.

Figure 2. Comparison of Giro to LinUCB, LinTS, and the (cid:15)-greedy policy on three contextual problems in Section 6.2. The reward is
reported as a function of round n. The results are averaged over 5 runs. To reduce clutter, the legend is split between the ﬁrst two plots.

The goal of our experiments was to show that Giro per-
forms well in general, not that it outperforms near-optimal
algorithms for well-established classes of bandit problems.
Giro is meant to be general, as shown in Section 6.2.

6.2. Contextual Bandit

We conduct contextual bandit experiments on multi-class
classiﬁcation problems (Agarwal et al., 2014; Elmachtoub
et al., 2017; Riquelme et al., 2018), where arm i ∈ [K]
corresponds to class i. In round t, the algorithm observes
context xt ∈ Rd and pulls an arm. It receives a reward of
one if the pulled arm is the correct class, and zero other-
wise. Each arm maintains independent statistics that map
context xt to a binary reward. We use three datasets from
Riquelme et al. (2018): Adult (d = 94, K = 14), Statlog
(d = 9, K = 7), and CovType (d = 54, K = 7).

The horizon is n = 50k rounds and we average our results
over 5 runs. Giro is compared to LinUCB (Abbasi-Yadkori
et al., 2011), LinTS (Agrawal and Goyal, 2013b), and the
(cid:15)-greedy policy (EG) (Auer et al., 2002). We also imple-
mented UCB-GLM (Li et al., 2017). UCB-GLM over-explored
and performed worse than our other baselines. Therefore,
we do not report its results in this paper.

We experiment with three reward generalization models in
Giro and EG: linear (sufﬁx lin in plots), logistic (sufﬁx log

in plots), and a single hidden-layer fully-connected neural
network (sufﬁx nn in plots) with ten hidden neurons. We
experimented with different exploration schedules for EG.
The best schedule across all datasets was (cid:15)t = b/t, where
b is set to attain 1% exploration in n rounds. Note that this
tuning gives EG an unfair advantage over other algorithms.
We tune EG because it performs poorly without tuning.

In Giro, a = 1 in all experiments. The parameters of the
reward generalization model (line 8 in Algorithm 3) are ﬁt
in each round using maximum likelihood estimation. We
solve the problem using stochastic optimization, which is
initialized by the solution in the previous round. In linear
and logistic models, we optimize until the error drops be-
low 10−3. In neural networks, we make one pass over the
whole history. To ensure reproducibility of our results, we
use public optimization libraries. For linear and logistic
models, we use scikit-learn (Pedregosa et al., 2011) with
stochastic optimization and its default settings. For neural
networks, we use Keras (Chollet et al., 2015) with a ReLU
hidden layer and a sigmoid output layer, along with SGD
and its default settings. In comparison, Elmachtoub et al.
(2017) and Tang et al. (2015) approximate bootstrapping
by an ensemble of models. In general, our approach yields
similar results to Elmachtoub et al. (2017) at a lower com-
putational cost, and better results than Tang et al. (2015)
without any tuning.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Since we compare different bandit algorithms and reward
generalization models, we use the expected per-round re-
ward in n rounds, E [(cid:80)n
t=1 YIt,t] /n, as our metric. We
report it for all algorithms in all datasets in Figure 2. We
observe the following trends. First, both linear methods,
LinTS and LinUCB, perform the worst.1 Second, linear
Giro and EG are comparable in the Statlog and CovType
datasets. In the Adult dataset, EG does not explore enough
for the relatively larger number of arms. In contrast, Giro
explores enough and performs well. Third, the non-linear
variants of EG and Giro generally outperform their linear
counterparts. The most expressive model, the neural net-
work, outperforms the logistic model in both the Statlog
and CovType datasets. In the Adult dataset, the neural net-
work performs the worst and we do not plot it. To inves-
tigate this further, we trained a neural network ofﬂine for
each arm with all available data. Even then, the neural net-
work performed worse than a linear model. We conclude
that the poor performance of neural networks is caused by
poor generalization and not the lack of exploration.

7. Related Work

Osband and Van Roy (2015) proposed a bandit algorithm,
which they call BootstrapThompson; that pulls the arm
with the highest bootstrap mean, which is estimated from
a history with pseudo rewards. They also showed in a
Bernoulli bandit that BootstrapThompson is equivalent
to Thompson sampling. Vaswani et al. (2018) generalized
this result to categorical and Gaussian rewards.
In rela-
tion to these works, we make the following contributions.
First, Giro is an instance of BootstrapThompson with
non-parametric bootstrapping. The novelty in Giro is in
the design of pseudo rewards, which are added after each
pull of the arm and have extreme values. Second, our re-
gret analysis of Giro is the ﬁrst proof that justiﬁes the use
of non-parametric bootstrapping, the most common form
of bootstrapping, for exploration. Finally, Algorithm 1 is
Its analysis in
more general than BootstrapThompson.
Section 5.1 shows that randomization alone, not necessar-
ily by posterior sampling, induces exploration.

Eckles and Kaptein (2014) approximated the posterior of
each arm in a multi-armed bandit by multiple bootstrap
samples of its history. In round t, the agent chooses ran-
domly one sample per arm and then pulls the arm with the
highest mean reward in that sample. The observed reward
is added with probability 0.5 to all samples of the history.
A similar method was proposed in contextual bandits by
Tang et al. (2015). The key difference is that the observed
reward is added to all samples of the history with random

1LinUCB and LinTS are the worst performing methods in the
CovType and Adult datasets, respectively. Since we want to show
most rewarding parts of the plots, we do not plot these results.

Poisson weights that control its importance. Elmachtoub
et al. (2017) proposed bootstrapping with decision trees
in contextual bandits. Tang et al. (2015) and Elmachtoub
et al. (2017) also provided limited theoretical justiﬁcation
for bootstrapping as a form of posterior sampling. But this
justiﬁcation is not strong enough to derive regret bounds.
We prove regret bounds and do not view bootstrapping as
an approximation to posterior sampling.

Baransi et al. (2014) proposed a sampling technique that
equalizes the histories of arms in a 2-armed bandit. Let n1
and n2 be the number of rewards of arms 1 and 2, respec-
tively. Let n1 < n2. Then the value of arm 1 is estimated
by its empirical mean and the value of arm 2 is estimated
by the empirical mean in the bootstrap sample of its his-
tory of size n1. Baransi et al. (2014) bounded the regret
of their algorithm and Osband and Van Roy (2015) showed
empirically that its regret can be linear.

8. Conclusions

We propose Giro, a novel bandit algorithm that pulls the
arm with the highest mean reward in a non-parametric
bootstrap sample of its history with pseudo rewards. The
pseudo rewards are designed such that the bootstrap mean
is optimistic with a high probability. We analyze Giro and
bound its n-round regret. This is the ﬁrst formal proof that
justiﬁes the use of non-parametric bootstrapping, the most
common form of bootstrapping, for exploration. Giro can
be easily applied to structured problems, and we evaluate it
on both synthetic and real-world problems.

Our upper bound on the regret of randomized exploration
in Theorem 1 is very general, and says that any algorithm
that controls the tails of the sampling distribution p in Al-
gorithm 1 has low regret. This shows that any appropriate
randomization, not necessarily posterior sampling, can be
used for exploration. In future work, we plan to investi-
gate other randomized algorithms that easily generalize to
complex problems, such as pull the arm with the highest
empirical mean with randomized pseudo rewards (Kveton
et al., 2019a). We believe that the key ideas in the proof of
Theorem 1 can be generalized to structured problems, such
as linear bandits (Kveton et al., 2019b).

History resampling is computationally expensive, because
the history of the arm has to be resampled in each round.
This can be avoided in some cases. In a Bernoulli bandit,
Giro can be implemented efﬁciently, because the value of
the arm can be drawn from a binomial distribution, as dis-
cussed in Section 4.2. A natural computationally-efﬁcient
substitute for resampling is an ensemble of ﬁxed perturba-
tions of the history, as in ensemble sampling (Lu and Van
Roy, 2017). We plan to investigate it in future work.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

References

Yasin Abbasi-Yadkori, David Pal, and Csaba Szepesvari.
Improved algorithms for linear stochastic bandits.
In
Advances in Neural Information Processing Systems 24,
pages 2312–2320, 2011.

Alekh Agarwal, Daniel Hsu, Satyen Kale, John Langford,
Lihong Li, and Robert Schapire. Taming the monster:
A fast and simple algorithm for contextual bandits. In
Proceedings of the 31st International Conference on Ma-
chine Learning, pages 1638–1646, 2014.

Shipra Agrawal and Navin Goyal. Further optimal regret
bounds for Thompson sampling. In Proceedings of the
16th International Conference on Artiﬁcial Intelligence
and Statistics, pages 99–107, 2013a.

Shipra Agrawal and Navin Goyal. Thompson sampling for
contextual bandits with linear payoffs. In Proceedings of
the 30th International Conference on Machine Learning,
pages 127–135, 2013b.

Peter Auer, Nicolo Cesa-Bianchi, and Paul Fischer. Finite-
time analysis of the multiarmed bandit problem. Ma-
chine Learning, 47:235–256, 2002.

Akram Baransi, Odalric-Ambrym Maillard, and Shie Man-
In Pro-
nor. Sub-sampling for multi-armed bandits.
ceeding of European Conference on Machine Learning
and Principles and Practice of Knowledge Discovery in
Databases, 2014.

Francois Chollet et al. Keras. https://keras.io,

2015.

1953.

Varsha Dani, Thomas Hayes, and Sham Kakade. Stochastic
linear optimization under bandit feedback. In Proceed-
ings of the 21st Annual Conference on Learning Theory,
pages 355–366, 2008.

Joseph Doob. Stochastic Processes. John Wiley & Sons,

Dean Eckles and Maurits Kaptein. Thompson sampling
with the online bootstrap. CoRR, abs/1410.4009, 2014.
URL http://arxiv.org/abs/1410.4009.

Bradley Efron and Robert Tibshirani. Bootstrap methods
for standard errors, conﬁdence intervals, and other mea-
sures of statistical accuracy. Statistical Science, 1(1):
54–75, 1986.

Adam Elmachtoub, Ryan McNellis, Sechan Oh, and Marek
Petrik. A practical method for solving contextual ban-
In Proceedings of
dit problems using decision trees.
the 33rd Conference on Uncertainty in Artiﬁcial Intel-
ligence, 2017.

Sarah Filippi, Olivier Cappe, Aurelien Garivier, and Csaba
Szepesvari. Parametric bandits: The generalized linear
case. In Advances in Neural Information Processing Sys-
tems 23, pages 586–594, 2010.

Aurelien Garivier and Olivier Cappe. The KL-UCB al-
gorithm for bounded stochastic bandits and beyond. In
Proceeding of the 24th Annual Conference on Learning
Theory, pages 359–376, 2011.

Aditya Gopalan, Shie Mannor, and Yishay Mansour.
Thompson sampling for complex online problems.
In
Proceedings of the 31st International Conference on Ma-
chine Learning, pages 100–108, 2014.

Kwang-Sung Jun, Aniruddha Bhargava, Robert Nowak,
and Rebecca Willett. Scalable generalized linear ban-
dits: Online computation and hashing. In Advances in
Neural Information Processing Systems 30, pages 98–
108, 2017.

Jaya Kawale, Hung Bui, Branislav Kveton, Long Tran-
Thanh, and Sanjay Chawla. Efﬁcient Thompson sam-
pling for online matrix-factorization recommendation.
In Advances in Neural Information Processing Systems
28, pages 1297–1305, 2015.

Branislav Kveton, Csaba Szepesvari, Mohammad
Ghavamzadeh, and Craig Boutilier. Perturbed-history
exploration in stochastic multi-armed bandits.
In
Proceedings of the 28th International Joint Conference
on Artiﬁcial Intelligence, 2019a.

Branislav Kveton, Csaba Szepesvari, Mohammad
Ghavamzadeh, and Craig Boutilier. Perturbed-history
exploration in stochastic linear bandits. In Proceedings
of
the 35th Conference on Uncertainty in Artiﬁcial
Intelligence, 2019b.

T. L. Lai and Herbert Robbins. Asymptotically efﬁcient
adaptive allocation rules. Advances in Applied Mathe-
matics, 6(1):4–22, 1985.

Tor Lattimore and Csaba Szepesvari. Bandit Algorithms.

Cambridge University Press, 2019.

Lihong Li, Wei Chu, John Langford, and Robert Schapire.
A contextual-bandit approach to personalized news arti-
cle recommendation. In Proceedings of the 19th Inter-
national Conference on World Wide Web, 2010.

Lihong Li, Yu Lu, and Dengyong Zhou. Provably opti-
mal algorithms for generalized linear contextual bandits.
In Proceedings of the 34th International Conference on
Machine Learning, pages 2071–2080, 2017.

Xiuyuan Lu and Benjamin Van Roy. Ensemble sampling.
In Advances in Neural Information Processing Systems
30, pages 3258–3266, 2017.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

Ian Osband and Benjamin Van Roy.

Bootstrapped
CoRR,
Thompson sampling and deep exploration.
abs/1507.00300, 2015. URL http://arxiv.org/
abs/1507.00300.

Fabian Pedregosa, Gael Varoquaux, Alexandre Gramfort,
Vincent Michel, Bertrand Thirion, Olivier Grisel, Math-
ieu Blondel, Peter Prettenhofer, Ron Weiss, Vincent
Dubourg, Jake VanderPlas, Alexandre Passos, David
Cournapeau, Matthieu Brucher, Matthieu Perrot, and
Edouard Duchesnay. Scikit-learn: Machine learning in
Journal of Machine Learning Research, 12:
Python.
2825–2830, 2011.

Carlos Riquelme, George Tucker, and Jasper Snoek. Deep
Bayesian bandits showdown: An empirical compari-
son of Bayesian deep networks for Thompson sampling.
In Proceedings of the 6th International Conference on
Learning Representations, 2018.

Paat Rusmevichientong and John Tsitsiklis. Linearly pa-
rameterized bandits. Mathematics of Operations Re-
search, 35(2):395–411, 2010.

Richard Sutton and Andrew Barto. Reinforcement Learn-
ing: An Introduction. MIT Press, Cambridge, MA, 1998.

Liang Tang, Yexi Jiang, Lei Li, Chunqiu Zeng, and Tao Li.
Personalized recommendation via parameter-free con-
textual bandits. In Proceedings of the 38th International
ACM SIGIR Conference on Research and Development
in Information Retrieval, pages 323–332, 2015.

William R. Thompson. On the likelihood that one unknown
probability exceeds another in view of the evidence of
two samples. Biometrika, 25(3-4):285–294, 1933.

Sharan Vaswani, Branislav Kveton, Zheng Wen, Anup Rao,
Mark Schmidt, and Yasin Abbasi-Yadkori. New insights
into bootstrapping for bandits. CoRR, abs/1805.09793,
URL http://arxiv.org/abs/1805.
2018.
09793.

Lijun Zhang, Tianbao Yang, Rong Jin, Yichi Xiao, and Zhi-
Hua Zhou. Online stochastic linear optimization under
In Proceedings of the 33rd Interna-
one-bit feedback.
tional Conference on Machine Learning, pages 392–401,
2016.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

A. Proof of Theorem 1

We generalize the analysis of Agrawal and Goyal (2013a). Since arm 1 is optimal, the regret can be written as

R(n) =

∆iE [Ti,n] .

K
(cid:88)

i=2

In the rest of the proof, we bound E [Ti,n] for each suboptimal arm i. Fix arm i > 1. Let Ei,t = {ˆµi,t ≤ τi} and ¯Ei,t be
the complement of Ei,t. Then E [Ti,n] can be decomposed as

E [Ti,n] = E

(cid:34) n
(cid:88)

(cid:35)
1{It = i}

(cid:34) n
(cid:88)

(cid:35)
1{It = i, Ei,t occurs}

= E

+ E

1(cid:8)It = i, ¯Ei,t occurs(cid:9)

.

(10)

(cid:35)

t=1

t=1

(cid:34) n
(cid:88)

t=1

TERM bi IN THE UPPER BOUND

We start with the second term in (10), which corresponds to bi in our claim. This term can be tightly bounded based on the
observation that event ¯Et,i is unlikely when Ti,t is “large”. Let T = (cid:8)t ∈ [n] : Qi,Ti,t−1 (τi) > 1/n(cid:9). Then

(cid:34) n
(cid:88)

(cid:35)
1(cid:8)It = i, ¯Ei,t occurs(cid:9)

E

≤ E

(cid:35)
1{It = i}

+ E

t=1

1(cid:8) ¯Ei,t

(cid:9)









(cid:88)

t(cid:54)∈T

(cid:34)

(cid:88)

t∈T

s=0

(cid:34)n−1
(cid:88)

(cid:35)
1{Qi,s(τi) > 1/n}

≤ E

+ E





(cid:88)

t(cid:54)∈T





1
n

≤

n−1
(cid:88)

s=0

P (Qi,s(τi) > 1/n) + 1 .

TERM ai IN THE UPPER BOUND

Now we focus on the ﬁrst term in (10), which corresponds to ai in our claim. Without loss of generality, we assume that
Algorithm 1 is implemented as follows. When arm 1 is pulled for the s-th time, the algorithm generates an inﬁnite i.i.d.
sequence (ˆµ(s)
(cid:96) )(cid:96) ∼ p(H1,s). Then, instead of sampling ˆµ1,t ∼ p(H1,s) in round t when T1,t−1 = s, ˆµ1,t is substituted
with ˆµ(s)
. Let M = {t ∈ [n] : maxj>1 ˆµj,t ≤ τi} be round indices where the values of all suboptimal arms are at most τi
and

t

(cid:110)

As =

t ∈ M : ˆµ(s)

t ≤ τi, T1,t−1 = s

(cid:111)

be its subset where the value of arm 1 is at most τi and the arm was pulled s times before. Then

n
(cid:88)

t=1

1{It = i, Ei,t occurs} ≤

max
j

ˆµj,t ≤ τi

=

max
j

ˆµj,t ≤ τi, T1,t−1 = s

.

(cid:27)

n−1
(cid:88)

n
(cid:88)

(cid:26)

1

s=0

t=1
(cid:124)

(cid:123)(cid:122)
|As|

(cid:27)

(cid:125)

n
(cid:88)

(cid:26)

1

t=1

In the next step, we bound |As|. Let

Λs = min

t ∈ M : ˆµ(s)

t > τi, T1,t−1 ≥ s

(cid:110)

(cid:111)

be the index of the ﬁrst round in M where the value of arm 1 is larger than τi and the arm was pulled at least s times before.
If such Λs does not exist, we set Λs = n. Let

Bs =

(cid:110)
t ∈ M ∩ [Λs] : ˆµ(s)

t ≤ τi, T1,t−1 ≥ s

(cid:111)

be a subset of M ∩ [Λs] where the value of arm 1 is at most τi and the arm was pulled at least s times before.

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

We claim that As ⊆ Bs. By contradiction, suppose that there exists t ∈ As such that t (cid:54)∈ Bs. Then it must be true that
Λs < t, from the deﬁnitions of As and Bs. From the deﬁnition of Λs, we know that arm 1 was pulled in round Λs, after it
was pulled at least s times before. Therefore, it cannot be true that T1,t−1 = s, and thus t (cid:54)∈ As. Therefore, As ⊆ Bs and
|As| ≤ |Bs|. In the next step, we bound |Bs| in expectation.

Let Ft = σ(H1,T1,t, . . . , HK,TK,t, I1, . . . , It) be the σ-algebra generated by arm histories and pulled arms by the end of
round t, for t ∈ [n] ∪ {0}. Let Ps = min {t ∈ [n] : T1,t−1 = s} be the index of the ﬁrst round where arm 1 was pulled s
times before. If such Ps does not exist, we set Ps = n + 1. Note that Ps is a stopping time with respect to ﬁltration (Ft)t.
Hence, Gs = FPs−1 is well-deﬁned and thanks to |As| ≤ n, we have

E [|As|] = E [min {E [|As| | Gs] , n}] ≤ E [min {E [|Bs| | Gs] , n}] .

We claim that E [|Bs| | Gs] ≤ 1/Q1,s(τi) − 1. First, note that |Bs| can be rewritten as

|Bs| =

(cid:15)tρt ,

Λs(cid:88)

t=Ps

(cid:110)

ˆµ(s)
t ≤ τi

(cid:111)

where (cid:15)t = 1{maxj>1 ˆµj,t ≤ τi} control which ρt = 1
Chapter III of Doob (1953).

contribute to the sum. Now recall Theorem 5.2 from

Theorem 3. Let X1, X2, . . . and Z1, Z2, . . . be two sequences of random variables and (Ft)t be a ﬁltration. Let (Xt)t
be i.i.d., Xt be Ft measurable, Zt ∈ {0, 1}, and Zt be Ft−1 measurable. Let Nt = min {t > Nt−1 : Zt = 1} for t ∈ [m],
N0 = 0, and assume that Nm < ∞ almost surely. Let X (cid:48)
t=1 is i.i.d. and its elements have
the same distribution as X1.

t = XNt for t ∈ [m]. Then (X (cid:48)

t)m

By the above theorem and the deﬁnition of Λs, |Bs| has the same distribution as the number of failed independent draws
from Ber(Q1,s(τi)) until the ﬁrst success, capped at n − Ps. It is well known that the expected value of this quantity,
without the cap, is bounded by 1/Q1,s(τi) − 1.

Finally, we chain all inequalities and get

(cid:34) n
(cid:88)

(cid:35)
1{It = i, Ei,t occurs}

E

≤

t=1

n−1
(cid:88)

s=0

E [min {1/Q1,s(τi) − 1, n}] .

This concludes our proof.

B. Proof of Theorem 2

This proof has two parts.

UPPER BOUND ON bi IN THEOREM 1 (SECTION 5.1)

Fix suboptimal arm i. To simplify notation, we abbreviate Qi,s(τi) as Qi,s. Our ﬁrst objective is to bound

Fix the number of pulls s. When the number of pulls is “small”, s ≤

log n, we bound P (Qi,s > 1/n) trivially by 1.

When the number of pulls is “large”, s >

log n, we divide the proof based on the event that Vi,s is not much larger

than its expectation. Deﬁne

bi =

P (Qi,s > 1/n) + 1 .

n−1
(cid:88)

s=0

8α
∆2
i

8α
∆2
i

(cid:26)

E =

Vi,s − (µi + a)s ≤

(cid:27)

.

∆is
4

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

On event E,

(cid:18)

Qi,s = P

Ui,s − (µi + a)s ≥

∆is
2

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:19)

(cid:18)

Vi,s

≤ P

Ui,s − Vi,s ≥

∆is
4

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:19)

(cid:20)

Vi,s

≤ exp

−

(cid:21)

∆2
i s
8α

≤ n−1 ,

where the ﬁrst inequality is from the deﬁnition of event E, the second inequality is by Hoeffding’s inequality, and the third
inequality is by our assumption on s. On the other hand, event ¯E is unlikely because

P (cid:0) ¯E(cid:1) ≤ exp

−

≤ n−1 ,

(cid:20)

(cid:21)

∆2
i s
8α

where the ﬁrst inequality is by Hoeffding’s inequality and the last inequality is by our assumption on s. Now we apply the
last two inequalities to

P (Qi,s > 1/n) = E [P (Qi,s > 1/n | Vi,s) 1{E}] + E (cid:2)P (Qi,s > 1/n | Vi,s) 1(cid:8) ¯E(cid:9)(cid:3)

≤ 0 + E (cid:2)1(cid:8) ¯E(cid:9)(cid:3) ≤ n−1 .

Finally, we chain our upper bounds for all s ∈ [n] and get the upper bound on bi in (9).

UPPER BOUND ON ai IN THEOREM 1 (SECTION 5.1)

Fix suboptimal arm i. Our second objective is to bound

We redeﬁne τi as τi = (µ1 + a)/α − ∆i/(2α) and abbreviate Q1,s(τi) as Q1,s. Since i is ﬁxed, this slight abuse of notation
should not cause any confusion. For s > 0, we have

n−1
(cid:88)

(cid:20)

E

min

(cid:26)

ai =

1
Q1,s(τi)

(cid:27)(cid:21)

− 1, n

.

s=0

Q1,s = P

(cid:18) U1,s
αs

≥

µ1 + a
α

−

∆i
2α

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:19)

V1,s

.

Let Fs = 1/Q1,s − 1. Fix the number of pulls s. When s = 0, Q1,s = 1 and E [min {Fs, n}] = 0. When the number of
pulls is “small”, 0 < s ≤

log n, we apply the upper bound from Theorem 4 in Appendix C and get

16α
∆2
i

E [min {Fs, n}] ≤ E [1/Q1,s] ≤ E [1/P (U1,s ≥ (µ1 + a)s | V1,s)] ≤ c ,

where c is deﬁned in Theorem 2. The last inequality is by Theorem 4 in Appendix C.

When the number of pulls is “large”, s >

log n, we divide the proof based on the event that V1,s is not much smaller

than its expectation. Deﬁne

16α
∆2
i

(cid:26)

E =

(µ1 + a)s − V1,s ≤

(cid:27)

.

∆is
4

On event E,

(cid:18)

(cid:18)

Q1,s = P

(µ1 + a)s − U1,s ≤

V1,s

= 1 − P

(µ1 + a)s − U1,s >

(cid:19)

(cid:19)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

∆is
2
∆is
4

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:18)

(cid:20)

(cid:21)

∆2
i s
8α

≥

n2 − 1
n2

,

∆is
2

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:19)

V1,s

≥ 1 − P

V1,s − U1,s >

V1,s

≥ 1 − exp

−

where the ﬁrst inequality is from the deﬁnition of event E, the second inequality is by Hoeffding’s inequality, and the third
inequality is by our assumption on s. The above lower bound yields

Fs =

− 1 ≤

− 1 =

n2
n2 − 1

1
n2 − 1

≤ n−1

1
Q1,s

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

for n ≥ 2. On the other hand, event ¯E is unlikely because

P (cid:0) ¯E(cid:1) ≤ exp

−

≤ n−2 ,

(cid:20)

(cid:21)

∆2
i s
8α

where the ﬁrst inequality is by Hoeffding’s inequality and the last inequality is by our assumption on s. Now we apply the
last two inequalities to

E [min {Fs, n}] = E [E [min {Fs, n} | V1,s] 1{E}] + E (cid:2)E [min {Fs, n} | V1,s] 1(cid:8) ¯E(cid:9)(cid:3)

≤ E (cid:2)n−11{E}(cid:3) + E (cid:2)n1(cid:8) ¯E(cid:9)(cid:3) ≤ 2n−1 .

Finally, we chain our upper bounds for all s ∈ [n] and get the upper bound on ai in (9). This concludes our proof.

C. Upper Bound on the Expected Inverse Probability of Being Optimistic

Theorem 4 provides an upper bound on the expected inverse probability of being optimistic,

E [1/P (U1,s ≥ (µ1 + a)s | V1,s)] ,

which is used in Section 5.2 and Appendix B. In the bound and its analysis, n is s, p is µ1, x is V1,s − as, and y is U1,s.

Theorem 4. Let m = (2a + 1)n and b =

< 2. Then

2a + 1
a(a + 1)

W =

B(x; n, p)

n
(cid:88)

x=0





m
(cid:88)

(cid:18)

B

y; m,

y=(cid:100)(a+p)n(cid:101)



−1

(cid:19)



≤

2e2

√
√

an + x
m

2a + 1
2π

exp

(cid:20) 8b
2 − b

(cid:21) (cid:32)

1 +

(cid:114) 2π

(cid:33)

.

4 − 2b

Proof. First, we apply the upper bound from Lemma 2 for





f (x) =

m
(cid:88)

(cid:18)

B

y; m,



−1

(cid:19)



.

an + x
m

y=(cid:100)(a+p)n(cid:101)

Note that this function decreases in x, as required by Lemma 2, because the probability of observing at least (cid:100)(a + p)n(cid:101)
ones increases with x, for any ﬁxed (cid:100)(a + p)n(cid:101). The resulting upper bound is

W ≤

exp[−2i2]

i0−1
(cid:88)

i=0





m
(cid:88)

(cid:18)

B

y; m,

y=(cid:100)(a+p)n(cid:101)

(a + p)n − (i + 1)



−1

√

(cid:19)

n



+ exp[−2i2
0]





m
(cid:88)

y=(cid:100)(a+p)n(cid:101)



−1

(cid:16)

B

y; m,

(cid:17)



an
m

,

m

√

where i0 is the smallest integer such that (i0 + 1)

n ≥ pn, as deﬁned in Lemma 2.

Second, we bound both above reciprocals using Lemma 3. The ﬁrst term is bounded for x = pn − (i + 1)

n as

√





m
(cid:88)

(cid:18)

B

y; m,

(a + p)n − (i + 1)

m

y=(cid:100)(a+p)n(cid:101)



−1

√

(cid:19)

n



≤

e2

√
2a + 1
√
2π

exp[b(i + 2)2] .

The second term is bounded for x = 0 as





m
(cid:88)

y=(cid:100)(a+p)n(cid:101)



−1

(cid:16)

B

y; m,

(cid:17)



an
m

e2

≤

√
2a + 1
√
2π

(cid:20)
b

exp

(pn +
n

√

(cid:21)

n)2

e2

≤

√
2a + 1
√
2π

exp[b(i0 + 2)2] ,

where the last inequality is from the deﬁnition of i0. Then we chain the above three inequalities and get

W ≤

e2

√
2a + 1
√
2π

i0(cid:88)

i=0

exp[−2i2 + b(i + 2)2] .

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

2i2 − b(i + 2)2 = (2 − b)

i2 −

(cid:18)

4bi
2 − b

+

4b2
(2 − b)2

(cid:19)

−

4b2
2 − b

− 4b = (2 − b)

i −

(cid:18)

(cid:19)2

2b
2 − b

−

8b
2 − b

.

Now note that

It follows that

W ≤

e2

√
2a + 1
√
2π

i0(cid:88)

i=0

(cid:34)

(cid:18)

exp

−(2 − b)

i −

(cid:19)2

2b
2 − b

+

8b
2 − b

(cid:35)

exp (cid:2)−(2 − b)i2(cid:3)

(cid:21) ∞
(cid:88)

i=0
(cid:21) (cid:32)

2e2

2e2

2e2

√
√

√
√

√
√

2a + 1
2π

2a + 1
2π

2a + 1
2π

exp

exp

exp

(cid:20) 8b
2 − b

(cid:20) 8b
2 − b

(cid:20) 8b
2 − b

≤

≤

≤

1 +

exp

−

(cid:90) ∞

u=0

(cid:114) 2π

(cid:34)

(cid:33)

.

4 − 2b

(cid:21) (cid:32)

1 +

(cid:35)

(cid:33)

du

u2
2
4−2b

This concludes our proof.

Lemma 2. Let f (x) ≥ 0 be a decreasing function of x and i0 be the smallest integer such that (i0 + 1)

n ≥ pn. Then

√

B(x; n, p)f (x) ≤

exp[−2i2]f (pn − (i + 1)

n) + exp[−2i2

0]f (0) .

√

n
(cid:88)

x=0

i0−1
(cid:88)

i=0

Proof. Let

(cid:40)

Xi =

√

(max {pn −
(max {pn − (i + 1)

n, 0} , n] ,
√

n, 0} , pn − i

n] ,

√

i = 0 ;
i > 0 ;

for i ∈ [i0] ∪ {0}. Then {Xi}i0

i=0 is a partition of [0, n]. Based on this observation,

n
(cid:88)

x=0

B(x; n, p)f (x) =

1{x ∈ Xi} B(x; n, p)f (x)

i0(cid:88)

n
(cid:88)

x=0

i=0
i0−1
(cid:88)

i=0

≤

f (pn − (i + 1)

n)

1{x ∈ Xi} B(x; n, p) + f (0)

1{x ∈ Xi0} B(x; n, p) ,

√

n
(cid:88)

x=0

n
(cid:88)

x=0

where the inequality holds because f (x) is a decreasing function of x. Now ﬁx i > 0. Then from the deﬁnition of Xi and
Hoeffding’s inequality,

1{x ∈ Xi} B(x; n, p) ≤ P (cid:0)X ≤ pn − i

n (cid:12)
(cid:12) X ∼ B(n, p)(cid:1) ≤ exp[−2i2] .

√

n
(cid:88)

x=0

Trivially, (cid:80)n

x=0

1{x ∈ X0} B(x; n, p) ≤ 1 = exp[−2 · 02]. Finally, we chain all inequalities and get our claim.

Lemma 3. Let x ∈ [0, pn], m = (2a + 1)n, and b =

. Then for any integer n > 0,

2a + 1
a(a + 1)

m
(cid:88)

(cid:18)

B

y; m,

(cid:19)

an + x
m

≥

e2

√
√

2π
2a + 1

(cid:20)

(pn +

exp

−b

√

n − x)2
n

(cid:21)

.

y=(cid:100)(a+p)n(cid:101)

Garbage In, Reward Out: Bootstrapping Exploration in Multi-Armed Bandits

(cid:18)

B

y; m,

an + x
m

(cid:19)

≥

√

2π
e2

(cid:114) m

y(m − y)

(cid:34)

exp

−

(y − an − x)2
(a+1)n−x
m an+x
m
m

(cid:35)

.

y(m − y)
m

≤

1
m

m2
4

=

(2a + 1)n
4

.

Proof. By Lemma 4,

Now note that

Moreover, since x ∈ [0, pn],

where b is deﬁned in the claim of this lemma. Now we combine the above three inequalities and have

m

an + x
m

(a + 1)n − x
m

≥ m

an
m

(a + 1)n
m

=

a(a + 1)n
2a + 1

=

n
b

,

(cid:18)

B

y; m,

(cid:19)

an + x
m

≥

e2

√
2
√

2π
2a + 1

1
√
n

(cid:20)

exp

−b

(y − an − x)2
n

(cid:21)

,

Finally, note the following two facts. First, the above lower bound decreases in y when y ≥ (a + p)n and x ≤ pn.
n, starting with
Second, by the pigeonhole principle, there exist at least (cid:98)
(cid:100)(a + p)n(cid:101). These observations lead to a trivial lower bound

n(cid:99) integers between (a + p)n and (a + p)n +

√

√

m
(cid:88)

(cid:18)

B

y; m,

(cid:19)

≥

(cid:98)

√
√

an + x
m

√

2
√

2π
2a + 1

e2

(cid:20)

(pn +

exp

−b

√

(cid:21)

n − x)2
n

y=(cid:100)(a+p)n(cid:101)

n(cid:99)
n
√
√

≥

e2

2π
2a + 1

(cid:20)

(pn +

exp

−b

√

n − x)2
n

(cid:21)

.

The last inequality is from (cid:98)

n(cid:99) /

n ≥ 1/2, which holds for n ≥ 1. This concludes our proof.

√

√

Lemma 4. For any binomial probability,

B(x; n, p) ≥

√

2π
e2

(cid:114) n

x(n − x)

(cid:20)

exp

−

(x − pn)2
p(1 − p)n

(cid:21)

.

Proof. By Stirling’s approximation, for any integer k ≥ 0,

√

2πkk+ 1

2 e−k ≤ k! ≤ ekk+ 1

2 e−k .

Therefore, any binomial probability can be bounded from below as

B(x; n, p) =

n!
x!(n − x)!

pxqn−x ≥

√

2π
e2

(cid:114) n

x(n − x)

(cid:16) pn
x

(cid:17)x (cid:18) qn
n − x

(cid:19)n−x

,

where q = 1 − p. Let

d(p1, p2) = p1 log

+ (1 − p1) log

p1
p2

1 − p1
1 − p2

be the KL divergence between Bernoulli random variables with means p1 and p2. Then
(cid:18) qn
n − x

(cid:17)x (cid:18) qn
n − x

+ (n − x) log

(cid:16) pn
x

(cid:16) pn
x

= exp

(cid:19)n−x

x log

(cid:17)

(cid:20)

(cid:19)(cid:21)

(cid:19)

(cid:18) x
pn

+

n − x
n

log

(cid:18) n − x
qn

(cid:19)(cid:19)(cid:21)

= exp

−n

= exp

(cid:104)
−nd

(cid:20)

(cid:20)

(cid:17)(cid:105)

log

(cid:18) x
n
(cid:16) x
n
(x − pn)2
p(1 − p)n

, p

(cid:21)

,

≥ exp

−

(p1 − p2)2
p2(1 − p2)

where the inequality is from d(p1, p2) ≤

. Finally, we chain all inequalities and get our claim.

