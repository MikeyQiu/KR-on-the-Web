SeGAN: Segmenting and Generating the Invisible

Kiana Ehsani1, Roozbeh Mottaghi2, Ali Farhadi1,2
1 University of Washington, 2 Allen Institute for AI (AI2)

8
1
0
2
 
y
a
M
 
7
 
 
]

V
C
.
s
c
[
 
 
3
v
9
3
2
0
1
.
3
0
7
1
:
v
i
X
r
a

Abstract

Objects often occlude each other in scenes; Inferring
their appearance beyond their visible parts plays an impor-
tant role in scene understanding, depth estimation, object
interaction and manipulation. In this paper, we study the
challenging problem of completing the appearance of oc-
cluded objects. Doing so requires knowing which pixels to
paint (segmenting the invisible parts of objects) and what
color to paint them (generating the invisible parts). Our
proposed novel solution, SeGAN, jointly optimizes for both
segmentation and generation of the invisible parts of ob-
jects. Our experimental results show that: (a) SeGAN can
learn to generate the appearance of the occluded parts of
objects; (b) SeGAN outperforms state-of-the-art segmenta-
tion baselines for the invisible parts of objects; (c) trained
on synthetic photo realistic images, SeGAN can reliably
segment natural images; (d) by reasoning about occluder-
occludee relations, our method can infer depth layering.
Code is available at https://github.com/ehsanik/SeGAN.

1. Introduction

Humans have strong ability to make inferences about the
appearance of the invisible and occluded parts of scenes [1,
34]. For example, when we look at the scene depicted in
Figure 1 we can make predictions about what is behind the
coffee table, and can even complete the sofa based on the
visible parts of the sofa, the coffee table, and what we know
in general about sofas and coffee tables and how they oc-
clude each other. Devising algorithms to infer the appear-
ance of what is behind an object exhibits several challenges.
Predicting the appearance of the occluded regions of objects
requires reasoning over multiple intertwined cues. Recog-
nizing if an object is occluded or not is the ﬁrst challenge
to begin with. Second, knowing what pixels to color re-
quires extending the boundaries of objects from their visi-
ble regions to invisible parts which requires some form of
knowledge about the shapes of objects. The complex rela-
tions between the appearance of objects and the change in
viewpoint and occlusion patterns form the third challenge.
Deformable objects can even make the problem ill-deﬁned.

Figure 1. Our goal is to jointly segment and paint the invisible
regions of objects. For instance, we predict how the sofa looks
like when the occluders (cushions, laptop and coffee table) are
removed. The input to our model is an image and a mask for the
visible regions of objects (shown in blue).

Fourth, it is challenging to provide large-scale, accurate,
and reliable training data to train models for occlusion rea-
soning.

In this paper, we study the problem of generating the in-
visible parts of objects. Doing so requires segmenting the
invisible part of the object and then generating the appear-
ance of (painting) it. Inspired by the principles of learning-
the-easy-thing-ﬁrst, we propose SeGAN, a novel model
that combines segmentation and generation and jointly op-
timizes for both of them. More speciﬁcally, given an in-
put image and a segmentation for the visible regions of an

object, our proposed GAN-based model learns to predict
a segmentation for the occluded regions and generate the
appearance by painting the invisible parts. Using segmen-
tation masks of the invisible part as our intermediate step
enables our network to learn about what pixels to paint be-
fore painting them. The generator network then paints the
selected pixels. By jointly learning segmentation and gener-
ation networks SeGAN learns about the interdependencies
between objects, their occlusion patterns, the shape and ap-
pearance of object segments. This allows us to address the
ﬁrst three challenges.

The key remaining challenge is training data; where can
we ﬁnd large-scale and accurate training data for what is be-
hind the visible part of images? We argue that the proposed
solution for Amodal segmentation in [55] is not suitable for
our approach. Human judgements for predictions about the
invisible parts of objects is subjective. Also, superimposing
segments of images over other images [27] would result in
unnatural occlusion boundaries. In this paper, we propose
to use photo-realistic synthetic data to learn how to extend
segmentation masks from the visible parts of objects to the
invisible regions and how to generate the appearance of the
invisible part. Doing so allows us to obtain large-scale and
accurate training data for the invisible regions of objects in
images.

Our experiments show that SeGAN can, in fact, segment
and generate the invisible regions of objects. Our results
also show that our proposed segmentation network can learn
to segment the occluded regions of objects and outperforms
various state of the art segmentation baselines. We also
show that our segmentation network can reliably segment
the invisible parts of objects in natural images, when trained
on our photo-realistic training set. By reasoning about oc-
clusion patterns, our model can also make predictions about
occluder-occludee relationships resulting in depth ordering
inferences. Note that SeGAN is category-agnostic and does
not require semantic category information.

2. Related Works

There is a large body of work on object detection [14, 13,
18, 41, 42, 45], semantic segmentation [31, 2, 3, 28, 36, 53,
7, 35, 30, 24] and instance segmentation [39, 26, 8, 6, 40,
51, 52] using deep learning. These methods are designed
for the visible regions of objects and they are not able to
capture occlusions or provide a depth ordering for objects
in an image. In contrast, our goal is to reconstruct occluded
regions.

Occlusion reasoning has been studied in the literature ex-
tensively. [47] propose a CRF for segmenting partially oc-
cluded objects. [44] infer occlusion edges of polygons that
represent objects. [11] make DPM more robust to occlusion
by inferring whether a cell inside the object bounding box
belongs to the object or not. [16] use scene priors to infer

[49] pro-
the label for the occluded background regions.
pose a layered object detection and segmentation method,
where the goal is to infer depth ordering for the detected ob-
jects. [20] propose an occlusion model for object instance
detection based on 3D interaction of objects. [15, 12] pro-
pose methods for detection and pose estimation of occluded
people.
[38] learn occluder-occludee patterns to improve
object detectors. [21] synthesize scenes by retrieving seg-
ments from training images, which requires reasoning about
depth layers in the scene. [46] provide a semantic label for
each pixel in an image along with the occlusion ordering
for objects. [5] use top-down information to tackle occlu-
sions in multi-instance segmentation. We differ from all of
these methods in that we complete the segmentation mask
for the occluded objects and generate the appearance for the
occluded regions of each object instance. Also, we show
transfer from synthetic to natural images.

The problem of bounding box completion has been tack-
led by [23], where the goal is to ﬁnd the full extent of the
object bounding box. Amodal segmentation methods have
been proposed by [55, 27], where they aim to provide a
complete mask for occluded objects. The annotations that
[55] provide is mainly based on the subjective judgment of
the annotators (since the occluded parts of objects are not
visible).
In contrast, we modify our scenes by removing
occluders and obtain an accurate groundtruth mask and tex-
ture for the occluded objects. The groundtruth annotation
of [27] is obtained by pasting an object over an arbitrary
image. Our argument is that occlusion relationships are not
arbitrary and follow certain characteristics, and the way that
we collect our occlusion data enables us to better model the
occlusion relationships. Also, in contrast to these methods,
we generate the appearance for the occluded regions.

Conditional Generative Adversarial Networks (cGANs)
[33] have been used for different applications such as pre-
diction of future frames [32], style transfer [25], colorizing
and synthesizing images from edge maps [22], etc. Image
inpainting using cGANs and DCGANs has been explored
by [37] and [50]. In this paper, we combine cGANs with
a convolutional network to segment and paint the occluded
regions of objects simultaneously. Our problem is different
from inpainting since our goal is to paint regions outside the
input mask.

Recently, [4] proposed a regression-based approach to
synthesize images from a given semantic segmentation lay-
out. Our method differ from [4] since their goal is not to
reconstruct occluded regions. Also, our method performs
both segmentation and painting and it is category-agnostic.

3. Model

Our goal is to segment and paint the occluded regions of
objects. The inputs to our model are a segmentation mask
for the visible (non-occluded) regions of an object and an

Figure 2. Model architecture. Our network has three parts: segmentor, generator, and discriminator. The input to our model is an RGB
image and a mask for the visible region of an object which is obtained automatically by [51]. The output is an RGB image that shows the
appearance and segmentation for the full object (visible and reconstructed invisible regions). The segmentor part outputs an intermediate
mask (the mask shown in the middle) that represents the full object, which is passed to the generator part of the network.

RGB image. The output is an RGB image where the oc-
cluded regions of that object have been reconstructed. The
segmentation masks for visible regions can be obtained au-
tomatically from any instance segmentation method (e.g.,
[51]).

We introduce SeGAN that infers the mask for the oc-
cluded regions and paints those regions in a joint fashion.
Our model has two main parts: (1) segmentation and (2)
painting. The segmentation part provides a mask for the oc-
cluded and non-occluded regions of objects, which is fed
into the painting part of the model. The painting part gen-
erates the appearance for the occluded region of the object.
These two parts of the network are trained jointly. The ar-
chitecture of the model is shown in Figure 2.

The segmentation part of the network is a CNN that takes
a four-channel tensor as input, where three channels corre-
spond to the RGB image, and there is a single channel for
the segmentation mask of the visible region of an object.
The mask for the visible region is obtained automatically
(refer to Section 5 for details). The idea is to use the infor-
mation from visible regions to segment and paint the invisi-
ble regions. We modify ResNet-18 [19] to generate a mask
image as output (the output of the last convolutional layer).
Then, the mask output is fed into an ROI pooling layer. The
ROI pooling layer is followed by a fully connected layer
with the output size of 3364 (58 × 58), and refer to its out-
put by o. An upsampling layer converts o to 256 × 256. We
denote the output of the upsampling layer by O. Our ﬁnal
result is more accurate when we use upsampling.

The painting part of the network generates the invisible
or occluded regions of the object. This part is a condi-
tional generative adversarial network (cGAN) [33], which
consists of a generator and a discriminator.

The input to the generator, M , is computed as follows:

M (I, O, V ) =

I (cid:12) V + R (cid:12) (O − V ) + B (cid:12) (J − O − V ),

(1)

where (cid:12) is element-wise multiplication, I and V are the in-
put RGB image and input binary visible mask (SV), J is an
all-one matrix of size 256×256, and R and B are 256×256
images, where their ﬁrst and third channels are 1s, respec-
tively, and the rest of their channels are 0s. All of the binary
masks in the above equation are repeated three times to form
a 3 channel image. Basically, in the generator’s input, the
mask for the invisible region (which is provided by the seg-
mentation part of the network) is red, and the region outside
the mask is blue.

We adopt Unet [43] for the generator network, which is
an encoder-decoder with skip connections from encoders to
the corresponding layers in the decoder. The discriminator
network includes four convolutional layers, followed by one
sigmoid layer. The architecture for this part is similar to that
of the Pix2Pix network [22].

The loss function for our model is a combination of the
losses for segmentation and painting. For segmentation, we
deﬁne a customized loss function using binary cross entropy
loss that is computed on the prediction of the network and
the groundtruth for the full object binary mask (referred to
as SF). In Section 4, we explain how we obtain accurate
groundtruth for the occluded regions. Ideally, the segmen-
tation part should learn 1) not to change the mask for the
pixels in SV (mask for visible regions) and 2) to predict the
mask for the pixels in SI (mask for invisible regions) cor-

rectly. The binary cross entropy loss is deﬁned as:

1
n

(cid:88)

ij∈S

LS

ent(g, o) = −

(gijlog(oij) + (1 − gij)log(1 − oij)),

(2)
where S is a subset of pixels (e.g., pixels of the visi-
ble region), gij and oij are pixels at location (i, j) of the
groundtruth SF and predicted mask, respectively, and n =
|S|.

Our loss function for segmentation is deﬁned as:

ent(g, o)+λSI LSI

ent(g, o)+λSV LSV

Lsegm(g, o) = λbgLSF

ent(g, o),
(3)
where SF is the set of pixels in the image patch not in SF ,
or in other words the pixels that do not belong to either vis-
ible or invisible parts of the object. A sigmoid function is
applied to the predicted output so we obtain a real number
between 0 and 1. The intuition for deﬁning this objective is
to differentiate among making mistakes in segmenting the
visible region, invisible region and the background.

The loss function for painting is deﬁned as follows:

LcGAN (G, D) = Ex∼pdata(x),z∼pz(z)[log D(G(x, z))]
+ Ex∼pdata(x),z∼pz(z)[log(1 − D(x, G(x, z))],

(4)

where G and D are the generator and the discriminator net-
works, respectively, x is the input and z is a random Gaus-
sian noise vector, which is mainly used for regularizing the
generator network.

Previous approaches found L1 and L2 distance losses to
be helpful for GANs [37, 22], thus the ﬁnal loss function for
the adversarial part is deﬁned as:

L∗(G) = LcGAN (G, D) + λLL1(G)

(5)

The loss function for our SeGAN end-to-end model,

Lf ull, is deﬁned as:

Lf ull = λL∗ L∗(G) + Lsegm(g, o)

(6)

4. Dataset

In this paper, we introduce DYCE, a dataset of syn-
thetic occluded objects. This is a synthetic dataset with
photo-realistic images and natural conﬁguration of objects
in scenes. All of the images of this dataset are taken in in-
door scenes. The annotations for each image contain the
segmentation mask for the visible and invisible regions of
objects. The images are obtained by taking snapshots from
our 3D synthetic scenes. A few examples of images and
their annotations are shown in Figure 3.

There are two advantages of a synthetic 3D dataset. First,
we can obtain a 2D dataset of the desired size, and there is
no restriction over the number of training samples we can

Figure 3. Example images of the dataset. The ﬁrst column shows
the images captured from 3D synthetic scenes. The second col-
umn shows the segmentation mask for the visible regions. Each
instance is encoded by a different color. The third column shows
the invisible regions. For example, in the second row, the cush-
ions occlude the sofa. Therefore, the regions behind the cushions
have grey color in the third column, which means that those pixels
belong to the grey sofa in the second column.

generate. Second, we can move the camera to any loca-
tion to capture interesting patterns of occlusion. We use the
scenes of [54] to generate our dataset.

4.1. Generating 2D Images from 3D Scenes

For generating the images, we change the location and
the viewpoint of the camera in order to get a variety of im-
ages. For each scene, we generate 500 images from differ-
ent viewpoints of the camera. We restrict the areas that the
camera can be located. We move the camera in locations
that the head of a person can be located in order to obtain
common patterns of occlusion that people observe. We also
restrict the orientation of the camera such that the camera
points to objects in the scenes. Otherwise, the dataset will
contain many images with no objects (for example, images
depicting a portion of a wall).

The procedure for generating the segmentation mask for
the visible and invisible regions of objects is as follows. For
each object, we generate an image with all other objects
removed. Then, we compare this image with the original
image, where no object is removed from the scene. The
pixels that are the same in both images are the visible pixels
of this particular object. To obtain the mask for the invisible
region, we subtract the mask of the visible region from the
mask of the full object.

4.2. Statistics

The number of the synthetic scenes that we use is 11,
where we use 7 scenes for training and validation, and 4
scenes for testing. Overall there are 5 living rooms and 6

kitchens, where 2 living rooms and 2 kitchen are used for
testing. On average, each scene contains 60 objects and the
number of visible objects per image is 17.5 (by visible we
mean having at least 10 visible pixels). There is no common
object instance in train and test scenes.

5. Experiments

Our model performs segmentation and painting jointly.
Hence, in this section, we evaluate our model from these
two perspectives. In addition, we show results of general-
ization to natural images. Finally, we present our evaluation
for the depth layering task. Our training and test sets in-
clude 41924 and 27617 objects depicted in 3500 and 2000
images, respectively.

5.1. Implementation details

The segmentation part is initialized by the weights of
ResNet-18 [19] that are pre-trained on ImageNet [9]. We
use random initialization for the painting part of the net-
work.

All input images and their masks are resized to 500×500.
We used bilinear interpolation for resizing. Thus, the seg-
mentation mask might contain values in the interval (0, 1).
To obtain bounding boxes for the ROI pooling layer we
expand the box around the input SV masks by a random
ratio between 10-30% from each side. Note that we ig-
nore the portions that lie outside the image. We compute
the segmentation loss on groundtruth segmentation masks
of size 58 × 58 (for each object, we crop the image us-
ing the expanded bounding box and scale the cropped im-
age to 58 × 58). Then, we upsample the predicted mask
to 256 × 256 using a bilinear upsampling layer and use the
256 × 256 mask as the input to the painter network. We
do not train the upsampling layer. The generator outputs a
three channel 256 × 256 image, which includes the RGB
values for the full object (invisible and visible regions).

We use the following coefﬁcients in the loss function:
λbg = 1, λSV = 5, λSI = 3, λL1 = 100, and λL∗ = 0.1.
These values are obtained using a validation set. Also, to
help the network to converge, we ﬁrst train the segmentation
network and the generator network jointly and then train the
whole network end to end.

5.2. Evaluation

Segmetation & Painting. We evaluate our model, SeGAN,
in two settings. First, we use the output of the Multipath
network [51], which is a state-of-the-art model for gener-
ating the segmentation mask for objects as our input mask
for the visible regions (SV masks). Secondly, to factor out
the effects of SV segmentation approach from our results,
we also show the results using the groundtruth mask as the
input for the visible region of the object.

After obtaining segmentation masks from Multipath, we
ﬁnd the segmentation mask that corresponds to the visible
region of the groundtruth training object. The segmentation
mask that has the largest intersection over union with the
visible region of the groundtruth mask is selected as the in-
put mask during training. For evaluation, we consider all
masks generated by Multipath.

We evaluate our model using three metrics for segmen-
tation and two for painting. For segmentation, we evaluate
how well we predict (1) the mask for the occluded regions
(SI), (2) the mask for non-occluded regions (SV), and (3)
the mask for the full object (SF=SV ∪ SI). The intuition for
evaluating the mask for visible regions is to check whether
our approach distorts the input mask when the object is not
occluded. For all of these settings, we compute intersection
over union between the predicted mask of the model and
the groundtruth mask. For evaluating painting, we use L1
and L2 distance of the predicted output and the ground truth
image.

Table 1 summarizes our results for segmentation. First,
our method (referred to as ‘SeGAN w/ predicted SV’) sig-
niﬁcantly outperforms Multipath for the task of predicting
masks for the full object (SF) and invisible regions (SI).
It is interesting to see that our method improves the seg-
mentation of the visible regions (SV) as well. We have two
variations of the Multipath network as our baselines: one
trained only on natural images data (trained on MS COCO
dataset [29]) and one trained on the combination of natu-
ral images data and our synthetic images (trained to predict
occluded and visible regions). Another baseline is IBBE
[27] (an amodal segmentation method), which is ﬁne-tuned
on our synthetic data. We also compare with Pix2Pix [22],
where it receives the same inputs as our model and gener-
ates the appearance for the full object. Using groundtruth
masks (SeGAN w/ GT SV) shows that our method will per-
form even better if it receives more accurate masks for the
visible regions as the input. Figure 4 shows qualitative seg-
mentation results of our method.

We now evaluate our network on appearance generation
(painting). Our ﬁrst baseline is a nearest neighbor method.
We feed the image into ResNet-18 pretrained on ImageNet
and obtain features from the layer before the classiﬁcation
layer. Similarly, we feed the mask image for the visible re-
gion into ResNet and obtain features for the mask as well.
We concatenate these features. For each test example, we
ﬁnd the training image and mask that has the smallest dis-
tance (L2 distance on the concatenated features).

As another baseline, we use the Context-Encoder net-
work [37]. The main task of their network is to complete a
cropped patch of an image using the context around it, so
we crop a box around the object but leave the visible pix-
els unchanged. In other words, we remove all the pixels on
the image patch that can potentially belong to the invisible

Input Mask Loss Mask Visible ∪ Invisible Visible Invisible

Model
IBBE [27]
Multipath [51]
Multipath [51]
Pix2Pix [22]

Training Data
natural and synthetic
natural and synthetic
natural
natural and synthetic
SeGAN (ours) w/ predicted SV natural and synthetic

SeGAN (ours) w/ GT SV

synthetic

SV
SV
SV
SV
SV
SV

SF
SF
SV
SF
SF
SF

31.0
36.0
47.51
52.3
68.78
75.71

25.2
34.8
48.58
49.6
64.76
68.05

5.1
12.3
6.01
11.9
15.59
23.26

Table 1. Segmentation evaluation. We compare our method with [27], [51], and [22] on the synthetic test data. SV and SF refer to the
mask for visible regions of objects and the full object, respectively. We evaluate how well we predict ‘Visible’ regions, ‘Invisible’ regions
and their combination. The bottom row is not comparable with other rows since it uses groundtruth information.

Figure 4. Qualitative results of segmentation. We show the results using groundtruth for the visible region (SV, GT) in the ﬁrst two rows,
and using the predicted mask in the last two rows. The groundtrouth for the full object (SF, GT), and our predicted mask for the full object
(SF, Ours) are also shown.

regions and calculate the loss on the full object.

As our last baseline, we train the Pix2Pix network [22]
on our dataset by feeding just the pixels for the visible part
of the image as an input and calculating the loss on the full
object (visible and invisible regions). The network is sup-
posed to learn to generate the appearance of the full object.

Table 2 shows the results for painting. Our model outper-
forms all of the baselines methods. Again, for factoring out
the performance of the SV prediction methods we repeat all
of the experiments with groundtruth SV masks. The quali-
tative results for this experiment can be seen in Figure 5.

Model
Nearest Neighbor (NN)
Context-Encoder [37]
Pix2Pix [22]
SeGAN (ours)
SeGAN (ours)

L1

Input

Image

L2
Image + SVp 0.20 0.12
0.18 0.09
Image + SVp 0.15 0.09
Image + SVp 0.07 0.03
Image + SVgt 0.03 0.01

Table 2. Painting evaluation. We use L1 and L2 distances as the
evaluation metric so lower numbers are better. p and gt subscripts
refer to predicted masks (by [51]) and groundtruth, respectively.

We also performed a human study using Mechanical

Figure 5. Qualitative results of painting. We show the input image, the groundtruth object (without any occlusion) and the result of
Pix2Pix [22] network.

Turk. Table 3 shows how often the result of a particular
method is chosen as the best generated image.

Model

NN Pix2Pix [22] SeGAN (ours)

Chosen as best 0.46% 29.74%

69.78%

Table 3. Human study results. We show how often the subjects
select the generated images of our method versus two baselines:
nearest neighbor (NN) and Pix2Pix [22].

Generalization to natural images. We now evaluate
whether our model generalizes to natural images when it
is trained on our synthetic data. A major issue is that there
is no dataset of natural images that provides large-scale and
accurate mask annotations and texturing for both occluded
and non-occluded regions of objects.
[55, 27] construct
datasets for object occlusion, but occlusion patterns of [27]
are unnatural, and the dataset of [55] does not include the
appearance for the occluded regions. Therefore, we report
the results only for the segmentation task.

To evaluate the performance of our model on natural im-
ages, we construct a dataset using PASCAL 3D dataset [48].
PASCAL 3D associates a 3D CAD model to each object
instance in the dataset and it also provides annotations in
terms of azimuth, elevation and distance of the camera with
respect to the objects. Therefore, we can project the 3D
CAD model onto the image and obtain the segmentation
mask for full objects. Note that the projection does not have
any occlusion information so it generates the mask for the
full object (SF) as if it is not occluded by any object. On

Figure 6. Qualitative results of generalization to natural im-
ages. We show the prediction for the visible region using Multi-
path (SV) and segmentation and painting results of our method.

the other hand, datasets such as [17] provide the segmenta-
tion mask for the visible region of the objects. Hence, we
can obtain the mask for the occluded regions by subtract-
ing these masks from the mask we obtain by projecting the
CAD models. We use ﬁve indoor categories of PASCAL
3D dataset (i.e. bottle, chair, diningtable, sofa, and tvmon-
itor) for our experiments. As before, we run Multipath on

Model
Multipath [51] (natural)
Multipath [51] (natural+syn.)
Ours w/ predicted SV
Ours w/ GT SV

Vis. ∪ Invis. Visible Invisible

46.8
46.3
47.3
50.7

58.9
54.0
58.1
58.9

13.9
8.4
18.7
23.1

Table 4. Evaluation of generalization to natural images. The
input masks of our network are SV masks, and the groundtruth
mask for the loss function is SF.

Single Image Depth [10] Ours
84.04

60.18

Table 5. Depth layering results. We compare our depth layering
results with the results of [10], which estimates depth from single
RGB images. We modify [10] to use masks.

these natural images to obtain the segmentation masks for
the visible regions.

Table 4 shows the results of generalization to natural im-
ages. Although, our method only uses synthetic occlusion
information for training, it is still able to provide accurate
results on natural images. More importantly, our method
outperforms Multipath on segmentation of the invisible re-
gions (SI), while there is only a slight degradation in the
performance for the visible regions. Combining natural and
synthetic data makes the performance worse. It probably
makes the training more difﬁcult. Example predictions of
our method on natural images are shown in Figure 6.
Depth layering. The ﬁnal experiment for evaluating our
network is depth layering i.e. it infers the depth layers for
a pair of objects with respect to the camera. Depth layering
can be inferred from occlusion relationships since typically
the occluder is in front of the occludee and is closer to the
camera. The groundtruth data for this problem can be eas-
ily obtained from our dataset since we have access to the
occlusion relationships in the data.

For this task, we ﬁrst predict the segmentation mask for
the full object (SF) using our network. Then amongst the
rest of the objects in this scene we ﬁnd the ones, whose seg-
mentation mask for visible region (SV) intersects with the
predicted mask for the invisible region (SI). An object q
occludes object p if intersection over union of the segmen-
tation mask for the visible region (SV) of object q with the
segmentation mask of the invisible region (SI) of object p
is above a threshold. The threshold that we use is 5%.

As the baseline for this task, we use the method of [10],
which infers depth map from a single image. To obtain
the depth layering result for this method, for each image,
we project the groundtruth segmentation mask for the visi-
ble region (SV) onto the output of the depth estimation and
compute the average depth value for all the pixels that are
inside the mask. This will be the estimated depth for this
object. Then, for each pair of occluding objects we com-
pare their depth, and the one that has a lower depth will be
closer to the camera and, therefore, we consider it as the
occluder.

The evaluation metric is deﬁned as the average ratio of
number of correct predictions over the number of occlusion
pairs for each image.

We report the average over all images in the test dataset.

Figure 7. Qualitative results of depth layering. We predict that
the object shown with the orange mask is closer to the camera than
the object shown with the green mask.

The number of occlusion pairs in our test set is 4M pairs.
The result for this task is shown in Table 5. This task has
been evaluated on the synthetic data since we have accu-
rate depth and occlusion information. Figure 7 shows the
qualitative results of depth layering.

There are several reasons why our model is more accu-
rate. First, in many cases the occluder and occludee do not
differ enormously in depth, which makes it difﬁcult for the
baseline to infer the occlusion relationship. Second, the pre-
dicted depth map is computed over the entire image. Hence,
many low-level details have been removed while our pre-
dicted mask is for a speciﬁc object and does not lose much
information around the occlusion boundaries. Third, our
network predicts the invisible regions of the object, but the
depth estimator does not have this capability.

6. Conclusion

In this paper, we address the problem of segmentation
and appearance generation for the invisible regions of ob-
jects. We introduced SeGAN, which is a Generative Ad-
versarial Network that generates the appearance and seg-
mentation mask for invisible and visible regions of objects.
Getting large-scale and accurate training data for this task is
challenging. Our solution is to use photo-realistic synthetic
data where we can obtain the exact boundaries of the invis-
ible regions. Our experimental evaluations show that our
model outperforms segmentation baselines, while it gener-
ates the appearance (as opposed to a binary mask). We also
showed that our method outperforms GAN-based baselines
for appearance generation and painting. We show gener-
alization to natural images when the method is trained on
synthetic scenes. Moreover, we evaluate our model for the
task of depth layering and show improvements over a single
image depth estimation baseline.

References

[1] A. Aguiar and R. Baillargeon. Developments in young in-
fants’ reasoning about occluded objects. Cognitive psychol-
ogy, 2002. 1

[2] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. arXiv, 2016. 2

[3] L.-C. Chen, Y. Yang, J. Wang, W. Xu, and A. L. Yuille. At-
tention to scale: Scale-aware semantic image segmentation.
In CVPR, 2016. 2

[4] Q. Chen and V. Koltun. Photographic image synthesis with

cascaded reﬁnement networks. In ICCV, 2017. 2

[5] Y.-T. Chen, X. Liu, and M.-H. Yang. Multi-instance object
segmentation with occlusion handling. In CVPR, 2015. 2
[6] J. Dai, K. He, Y. Li, S. Ren, and J. Sun. Instance-sensitive

fully convolutional networks. In ECCV, 2016. 2

[7] J. Dai, K. He, and J. Sun. Boxsup: Exploiting bounding
boxes to supervise convolutional networks for semantic seg-
mentation. In ICCV, 2015. 2

[8] J. Dai, K. He, and J. Sun. Instance-aware semantic segmen-
tation via multi-task network cascades. In CVPR, 2016. 2
[9] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR, 2009. 5

[10] D. Eigen and R. Fergus. Predicting depth, surface normals
and semantic labels with a common multi-scale convolu-
tional architecture. In ICCV, 2015. 8

[11] T. Gao, B. Packer, and D. Koller. A segmentation-aware
object detection model with occlusion handling. In CVPR,
2011. 2

[12] G. Ghiasi, Y. Yang, D. Ramanan, and C. Fowlkes. Parsing

occluded people. In CVPR, 2014. 2
[13] R. Girshick. Fast r-cnn. In ICCV, 2015. 2
[14] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 2

[15] R. B. Girshick, P. F. Felzenszwalb, and D. A. McAllester.

Object detection with grammar models. In NIPS. 2011. 2

[16] R. Guo and D. Hoiem. Beyond the line of sight: labeling the

underlying surfaces. In ECCV, 2012. 2

[17] B. Hariharan, P. A. Arbel´aez, L. D. Bourdev, S. Maji, and
J. Malik. Semantic contours from inverse detectors. In ICCV,
2011. 7

[18] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling
in deep convolutional networks for visual recognition.
In
ECCV, 2014. 2

[19] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 3, 5

[20] E. Hsiao and M. Hebert. Occlusion reasoning for object de-
tection under arbitrary viewpoint. In CVPR, 2012. 2
[21] P. Isola and C. Liu. Scene collaging: Analysis and synthesis

of natural images with semantic layers. In ICCV, 2013. 2

[22] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
translation with conditional adversarial networks. In CVPR,
2017. 2, 3, 4, 5, 6, 7

[23] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Amodal com-
pletion and size constancy in natural scenes. In ICCV, 2015.
2

[24] P. Kr¨ahenb¨uhl and V. Koltun. Learning to propose objects.

In CVPR, 2015. 2

[25] C. Li and M. Wand. Precomputed real-time texture synthesis
with markovian generative adversarial networks. In ECCV,
2016. 2

[26] K. Li, B. Hariharan, and J. Malik. Iterative instance segmen-

[27] K. Li and J. Malik. Amodal instance segmentation. In ECCV,

tation. In CVPR, 2016. 2

2016. 2, 5, 6, 7

[28] G. Lin, C. Shen, , and I. van den Hengel, Anton Reid. Ef-
ﬁcient piecewise training of deep structured models for se-
mantic segmentation. In CVPR, 2016. 2

[29] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014. 5

[30] Z. Liu, X. Li, P. Luo, C.-C. Loy, and X. Tang. Semantic im-
age segmentation via deep parsing network. In ICCV, 2015.
2

[31] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 2
[32] M. Mathieu, C. Couprie, and Y. LeCun. Deep multi-scale
video prediction beyond mean square error. In ICLR, 2016.
2

[33] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. ArXiv, 2014. 2, 3

[34] N. Newcombe, J. Huttenlocher, and A. Learmonth. Infants
coding of location in continuous space. Infant Behavior and
Development, 1999. 1

[35] H. Noh, S. Hong, and B. Han. Learning deconvolution net-

work for semantic segmentation. In ICCV, 2015. 2

[36] G. Papandreou, L.-C. Chen, K. Murphy, and A. L. Yuille.
Weakly-and semi-supervised learning of a dcnn for semantic
image segmentation. In ICCV, 2015. 2

[37] D. Pathak, P. Kr¨ahenb¨uhl, J. Donahue, T. Darrell, and
A. Efros. Context encoders: Feature learning by inpainting.
In CVPR, 2016. 2, 4, 5, 6

[38] B. Pepik, M. Stark, P. Gehler, and B. Schiele. Occlusion
patterns for object class detection. In CVPR, 2013. 2
[39] P. O. Pinheiro, R. Collobert, and P. Dollar. Learning to seg-

ment object candidates. In NIPS, 2015. 2

[40] P. O. Pinheiro, T.-Y. Lin, R. Collobert, and P. Doll´ar. Learn-

ing to reﬁne object segments. In ECCV, 2016. 2

[41] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. CVPR,
2016. 2

[42] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
NIPS, 2015. 2

[43] O. Ronneberger, P. Fischer, and T. Brox. U-net: Convolu-
tional networks for biomedical image segmentation. In MIC-
CAI, 2015. 3

[44] B. C. Russell and A. Torralba. Labelme3d: Building a
database of 3d scenes from user annotations. In CVPR, 2009.
2

[45] C. Szegedy, S. Reed, D. Erhan, and D. Anguelov. Scalable,

high-quality object detection. arXiv, 2014. 2

[46] J. Tighe, M. Niethammer, and S. Lazebnik. Scene pars-
ing with object instances and occlusion ordering. In CVPR,
2014. 2

[47] J. Winn and J. Shotton. The layout consistent random ﬁeld
for recognizing and segmenting partially occluded objects.
In CVPR, 2006. 2

[48] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
In WACV,

benchmark for 3d object detection in the wild.
2014. 7

[49] Y. Yang, S. Hallman, D. Ramanan, and C. Fowlkes. Layered
object models for image segmentation. In PAMI, 2012. 2
[50] R. Yeh, C. Chen, T. Y. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. arXiv, 2016. 2

[51] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. In BMVC, 2016. 2, 3, 5, 6, 8

[52] Z. Zhang, S. Fidler, and R. Urtasun. Instance-level segmen-
tation for autonomous driving with deep densely connected
mrfs. In CVPR, 2016. 2

[53] S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet,
Z. Su, D. Du, C. Huang, and P. H. Torr. Conditional ran-
dom ﬁelds as recurrent neural networks. In ICCV, 2015. 2

[54] Y. Zhu, R. Mottaghi, E. Kolve, J. J. Lim, A. Gupta, L. Fei-
Fei, and A. Farhadi. Target-driven visual navigation in in-
In ICRA,
door scenes using deep reinforcement learning.
2017. 4

[55] Y. Zhu, Y. Tian, D. Mexatas, and P. Doll´ar. Semantic amodal

segmentation. In CVPR, 2017. 2, 7

SeGAN: Segmenting and Generating the Invisible

Kiana Ehsani1, Roozbeh Mottaghi2, Ali Farhadi1,2
1 University of Washington, 2 Allen Institute for AI (AI2)

8
1
0
2
 
y
a
M
 
7
 
 
]

V
C
.
s
c
[
 
 
3
v
9
3
2
0
1
.
3
0
7
1
:
v
i
X
r
a

Abstract

Objects often occlude each other in scenes; Inferring
their appearance beyond their visible parts plays an impor-
tant role in scene understanding, depth estimation, object
interaction and manipulation. In this paper, we study the
challenging problem of completing the appearance of oc-
cluded objects. Doing so requires knowing which pixels to
paint (segmenting the invisible parts of objects) and what
color to paint them (generating the invisible parts). Our
proposed novel solution, SeGAN, jointly optimizes for both
segmentation and generation of the invisible parts of ob-
jects. Our experimental results show that: (a) SeGAN can
learn to generate the appearance of the occluded parts of
objects; (b) SeGAN outperforms state-of-the-art segmenta-
tion baselines for the invisible parts of objects; (c) trained
on synthetic photo realistic images, SeGAN can reliably
segment natural images; (d) by reasoning about occluder-
occludee relations, our method can infer depth layering.
Code is available at https://github.com/ehsanik/SeGAN.

1. Introduction

Humans have strong ability to make inferences about the
appearance of the invisible and occluded parts of scenes [1,
34]. For example, when we look at the scene depicted in
Figure 1 we can make predictions about what is behind the
coffee table, and can even complete the sofa based on the
visible parts of the sofa, the coffee table, and what we know
in general about sofas and coffee tables and how they oc-
clude each other. Devising algorithms to infer the appear-
ance of what is behind an object exhibits several challenges.
Predicting the appearance of the occluded regions of objects
requires reasoning over multiple intertwined cues. Recog-
nizing if an object is occluded or not is the ﬁrst challenge
to begin with. Second, knowing what pixels to color re-
quires extending the boundaries of objects from their visi-
ble regions to invisible parts which requires some form of
knowledge about the shapes of objects. The complex rela-
tions between the appearance of objects and the change in
viewpoint and occlusion patterns form the third challenge.
Deformable objects can even make the problem ill-deﬁned.

Figure 1. Our goal is to jointly segment and paint the invisible
regions of objects. For instance, we predict how the sofa looks
like when the occluders (cushions, laptop and coffee table) are
removed. The input to our model is an image and a mask for the
visible regions of objects (shown in blue).

Fourth, it is challenging to provide large-scale, accurate,
and reliable training data to train models for occlusion rea-
soning.

In this paper, we study the problem of generating the in-
visible parts of objects. Doing so requires segmenting the
invisible part of the object and then generating the appear-
ance of (painting) it. Inspired by the principles of learning-
the-easy-thing-ﬁrst, we propose SeGAN, a novel model
that combines segmentation and generation and jointly op-
timizes for both of them. More speciﬁcally, given an in-
put image and a segmentation for the visible regions of an

object, our proposed GAN-based model learns to predict
a segmentation for the occluded regions and generate the
appearance by painting the invisible parts. Using segmen-
tation masks of the invisible part as our intermediate step
enables our network to learn about what pixels to paint be-
fore painting them. The generator network then paints the
selected pixels. By jointly learning segmentation and gener-
ation networks SeGAN learns about the interdependencies
between objects, their occlusion patterns, the shape and ap-
pearance of object segments. This allows us to address the
ﬁrst three challenges.

The key remaining challenge is training data; where can
we ﬁnd large-scale and accurate training data for what is be-
hind the visible part of images? We argue that the proposed
solution for Amodal segmentation in [55] is not suitable for
our approach. Human judgements for predictions about the
invisible parts of objects is subjective. Also, superimposing
segments of images over other images [27] would result in
unnatural occlusion boundaries. In this paper, we propose
to use photo-realistic synthetic data to learn how to extend
segmentation masks from the visible parts of objects to the
invisible regions and how to generate the appearance of the
invisible part. Doing so allows us to obtain large-scale and
accurate training data for the invisible regions of objects in
images.

Our experiments show that SeGAN can, in fact, segment
and generate the invisible regions of objects. Our results
also show that our proposed segmentation network can learn
to segment the occluded regions of objects and outperforms
various state of the art segmentation baselines. We also
show that our segmentation network can reliably segment
the invisible parts of objects in natural images, when trained
on our photo-realistic training set. By reasoning about oc-
clusion patterns, our model can also make predictions about
occluder-occludee relationships resulting in depth ordering
inferences. Note that SeGAN is category-agnostic and does
not require semantic category information.

2. Related Works

There is a large body of work on object detection [14, 13,
18, 41, 42, 45], semantic segmentation [31, 2, 3, 28, 36, 53,
7, 35, 30, 24] and instance segmentation [39, 26, 8, 6, 40,
51, 52] using deep learning. These methods are designed
for the visible regions of objects and they are not able to
capture occlusions or provide a depth ordering for objects
in an image. In contrast, our goal is to reconstruct occluded
regions.

Occlusion reasoning has been studied in the literature ex-
tensively. [47] propose a CRF for segmenting partially oc-
cluded objects. [44] infer occlusion edges of polygons that
represent objects. [11] make DPM more robust to occlusion
by inferring whether a cell inside the object bounding box
belongs to the object or not. [16] use scene priors to infer

[49] pro-
the label for the occluded background regions.
pose a layered object detection and segmentation method,
where the goal is to infer depth ordering for the detected ob-
jects. [20] propose an occlusion model for object instance
detection based on 3D interaction of objects. [15, 12] pro-
pose methods for detection and pose estimation of occluded
people.
[38] learn occluder-occludee patterns to improve
object detectors. [21] synthesize scenes by retrieving seg-
ments from training images, which requires reasoning about
depth layers in the scene. [46] provide a semantic label for
each pixel in an image along with the occlusion ordering
for objects. [5] use top-down information to tackle occlu-
sions in multi-instance segmentation. We differ from all of
these methods in that we complete the segmentation mask
for the occluded objects and generate the appearance for the
occluded regions of each object instance. Also, we show
transfer from synthetic to natural images.

The problem of bounding box completion has been tack-
led by [23], where the goal is to ﬁnd the full extent of the
object bounding box. Amodal segmentation methods have
been proposed by [55, 27], where they aim to provide a
complete mask for occluded objects. The annotations that
[55] provide is mainly based on the subjective judgment of
the annotators (since the occluded parts of objects are not
visible).
In contrast, we modify our scenes by removing
occluders and obtain an accurate groundtruth mask and tex-
ture for the occluded objects. The groundtruth annotation
of [27] is obtained by pasting an object over an arbitrary
image. Our argument is that occlusion relationships are not
arbitrary and follow certain characteristics, and the way that
we collect our occlusion data enables us to better model the
occlusion relationships. Also, in contrast to these methods,
we generate the appearance for the occluded regions.

Conditional Generative Adversarial Networks (cGANs)
[33] have been used for different applications such as pre-
diction of future frames [32], style transfer [25], colorizing
and synthesizing images from edge maps [22], etc. Image
inpainting using cGANs and DCGANs has been explored
by [37] and [50]. In this paper, we combine cGANs with
a convolutional network to segment and paint the occluded
regions of objects simultaneously. Our problem is different
from inpainting since our goal is to paint regions outside the
input mask.

Recently, [4] proposed a regression-based approach to
synthesize images from a given semantic segmentation lay-
out. Our method differ from [4] since their goal is not to
reconstruct occluded regions. Also, our method performs
both segmentation and painting and it is category-agnostic.

3. Model

Our goal is to segment and paint the occluded regions of
objects. The inputs to our model are a segmentation mask
for the visible (non-occluded) regions of an object and an

Figure 2. Model architecture. Our network has three parts: segmentor, generator, and discriminator. The input to our model is an RGB
image and a mask for the visible region of an object which is obtained automatically by [51]. The output is an RGB image that shows the
appearance and segmentation for the full object (visible and reconstructed invisible regions). The segmentor part outputs an intermediate
mask (the mask shown in the middle) that represents the full object, which is passed to the generator part of the network.

RGB image. The output is an RGB image where the oc-
cluded regions of that object have been reconstructed. The
segmentation masks for visible regions can be obtained au-
tomatically from any instance segmentation method (e.g.,
[51]).

We introduce SeGAN that infers the mask for the oc-
cluded regions and paints those regions in a joint fashion.
Our model has two main parts: (1) segmentation and (2)
painting. The segmentation part provides a mask for the oc-
cluded and non-occluded regions of objects, which is fed
into the painting part of the model. The painting part gen-
erates the appearance for the occluded region of the object.
These two parts of the network are trained jointly. The ar-
chitecture of the model is shown in Figure 2.

The segmentation part of the network is a CNN that takes
a four-channel tensor as input, where three channels corre-
spond to the RGB image, and there is a single channel for
the segmentation mask of the visible region of an object.
The mask for the visible region is obtained automatically
(refer to Section 5 for details). The idea is to use the infor-
mation from visible regions to segment and paint the invisi-
ble regions. We modify ResNet-18 [19] to generate a mask
image as output (the output of the last convolutional layer).
Then, the mask output is fed into an ROI pooling layer. The
ROI pooling layer is followed by a fully connected layer
with the output size of 3364 (58 × 58), and refer to its out-
put by o. An upsampling layer converts o to 256 × 256. We
denote the output of the upsampling layer by O. Our ﬁnal
result is more accurate when we use upsampling.

The painting part of the network generates the invisible
or occluded regions of the object. This part is a condi-
tional generative adversarial network (cGAN) [33], which
consists of a generator and a discriminator.

The input to the generator, M , is computed as follows:

M (I, O, V ) =

I (cid:12) V + R (cid:12) (O − V ) + B (cid:12) (J − O − V ),

(1)

where (cid:12) is element-wise multiplication, I and V are the in-
put RGB image and input binary visible mask (SV), J is an
all-one matrix of size 256×256, and R and B are 256×256
images, where their ﬁrst and third channels are 1s, respec-
tively, and the rest of their channels are 0s. All of the binary
masks in the above equation are repeated three times to form
a 3 channel image. Basically, in the generator’s input, the
mask for the invisible region (which is provided by the seg-
mentation part of the network) is red, and the region outside
the mask is blue.

We adopt Unet [43] for the generator network, which is
an encoder-decoder with skip connections from encoders to
the corresponding layers in the decoder. The discriminator
network includes four convolutional layers, followed by one
sigmoid layer. The architecture for this part is similar to that
of the Pix2Pix network [22].

The loss function for our model is a combination of the
losses for segmentation and painting. For segmentation, we
deﬁne a customized loss function using binary cross entropy
loss that is computed on the prediction of the network and
the groundtruth for the full object binary mask (referred to
as SF). In Section 4, we explain how we obtain accurate
groundtruth for the occluded regions. Ideally, the segmen-
tation part should learn 1) not to change the mask for the
pixels in SV (mask for visible regions) and 2) to predict the
mask for the pixels in SI (mask for invisible regions) cor-

rectly. The binary cross entropy loss is deﬁned as:

1
n

(cid:88)

ij∈S

LS

ent(g, o) = −

(gijlog(oij) + (1 − gij)log(1 − oij)),

(2)
where S is a subset of pixels (e.g., pixels of the visi-
ble region), gij and oij are pixels at location (i, j) of the
groundtruth SF and predicted mask, respectively, and n =
|S|.

Our loss function for segmentation is deﬁned as:

ent(g, o)+λSI LSI

ent(g, o)+λSV LSV

Lsegm(g, o) = λbgLSF

ent(g, o),
(3)
where SF is the set of pixels in the image patch not in SF ,
or in other words the pixels that do not belong to either vis-
ible or invisible parts of the object. A sigmoid function is
applied to the predicted output so we obtain a real number
between 0 and 1. The intuition for deﬁning this objective is
to differentiate among making mistakes in segmenting the
visible region, invisible region and the background.

The loss function for painting is deﬁned as follows:

LcGAN (G, D) = Ex∼pdata(x),z∼pz(z)[log D(G(x, z))]
+ Ex∼pdata(x),z∼pz(z)[log(1 − D(x, G(x, z))],

(4)

where G and D are the generator and the discriminator net-
works, respectively, x is the input and z is a random Gaus-
sian noise vector, which is mainly used for regularizing the
generator network.

Previous approaches found L1 and L2 distance losses to
be helpful for GANs [37, 22], thus the ﬁnal loss function for
the adversarial part is deﬁned as:

L∗(G) = LcGAN (G, D) + λLL1(G)

(5)

The loss function for our SeGAN end-to-end model,

Lf ull, is deﬁned as:

Lf ull = λL∗ L∗(G) + Lsegm(g, o)

(6)

4. Dataset

In this paper, we introduce DYCE, a dataset of syn-
thetic occluded objects. This is a synthetic dataset with
photo-realistic images and natural conﬁguration of objects
in scenes. All of the images of this dataset are taken in in-
door scenes. The annotations for each image contain the
segmentation mask for the visible and invisible regions of
objects. The images are obtained by taking snapshots from
our 3D synthetic scenes. A few examples of images and
their annotations are shown in Figure 3.

There are two advantages of a synthetic 3D dataset. First,
we can obtain a 2D dataset of the desired size, and there is
no restriction over the number of training samples we can

Figure 3. Example images of the dataset. The ﬁrst column shows
the images captured from 3D synthetic scenes. The second col-
umn shows the segmentation mask for the visible regions. Each
instance is encoded by a different color. The third column shows
the invisible regions. For example, in the second row, the cush-
ions occlude the sofa. Therefore, the regions behind the cushions
have grey color in the third column, which means that those pixels
belong to the grey sofa in the second column.

generate. Second, we can move the camera to any loca-
tion to capture interesting patterns of occlusion. We use the
scenes of [54] to generate our dataset.

4.1. Generating 2D Images from 3D Scenes

For generating the images, we change the location and
the viewpoint of the camera in order to get a variety of im-
ages. For each scene, we generate 500 images from differ-
ent viewpoints of the camera. We restrict the areas that the
camera can be located. We move the camera in locations
that the head of a person can be located in order to obtain
common patterns of occlusion that people observe. We also
restrict the orientation of the camera such that the camera
points to objects in the scenes. Otherwise, the dataset will
contain many images with no objects (for example, images
depicting a portion of a wall).

The procedure for generating the segmentation mask for
the visible and invisible regions of objects is as follows. For
each object, we generate an image with all other objects
removed. Then, we compare this image with the original
image, where no object is removed from the scene. The
pixels that are the same in both images are the visible pixels
of this particular object. To obtain the mask for the invisible
region, we subtract the mask of the visible region from the
mask of the full object.

4.2. Statistics

The number of the synthetic scenes that we use is 11,
where we use 7 scenes for training and validation, and 4
scenes for testing. Overall there are 5 living rooms and 6

kitchens, where 2 living rooms and 2 kitchen are used for
testing. On average, each scene contains 60 objects and the
number of visible objects per image is 17.5 (by visible we
mean having at least 10 visible pixels). There is no common
object instance in train and test scenes.

5. Experiments

Our model performs segmentation and painting jointly.
Hence, in this section, we evaluate our model from these
two perspectives. In addition, we show results of general-
ization to natural images. Finally, we present our evaluation
for the depth layering task. Our training and test sets in-
clude 41924 and 27617 objects depicted in 3500 and 2000
images, respectively.

5.1. Implementation details

The segmentation part is initialized by the weights of
ResNet-18 [19] that are pre-trained on ImageNet [9]. We
use random initialization for the painting part of the net-
work.

All input images and their masks are resized to 500×500.
We used bilinear interpolation for resizing. Thus, the seg-
mentation mask might contain values in the interval (0, 1).
To obtain bounding boxes for the ROI pooling layer we
expand the box around the input SV masks by a random
ratio between 10-30% from each side. Note that we ig-
nore the portions that lie outside the image. We compute
the segmentation loss on groundtruth segmentation masks
of size 58 × 58 (for each object, we crop the image us-
ing the expanded bounding box and scale the cropped im-
age to 58 × 58). Then, we upsample the predicted mask
to 256 × 256 using a bilinear upsampling layer and use the
256 × 256 mask as the input to the painter network. We
do not train the upsampling layer. The generator outputs a
three channel 256 × 256 image, which includes the RGB
values for the full object (invisible and visible regions).

We use the following coefﬁcients in the loss function:
λbg = 1, λSV = 5, λSI = 3, λL1 = 100, and λL∗ = 0.1.
These values are obtained using a validation set. Also, to
help the network to converge, we ﬁrst train the segmentation
network and the generator network jointly and then train the
whole network end to end.

5.2. Evaluation

Segmetation & Painting. We evaluate our model, SeGAN,
in two settings. First, we use the output of the Multipath
network [51], which is a state-of-the-art model for gener-
ating the segmentation mask for objects as our input mask
for the visible regions (SV masks). Secondly, to factor out
the effects of SV segmentation approach from our results,
we also show the results using the groundtruth mask as the
input for the visible region of the object.

After obtaining segmentation masks from Multipath, we
ﬁnd the segmentation mask that corresponds to the visible
region of the groundtruth training object. The segmentation
mask that has the largest intersection over union with the
visible region of the groundtruth mask is selected as the in-
put mask during training. For evaluation, we consider all
masks generated by Multipath.

We evaluate our model using three metrics for segmen-
tation and two for painting. For segmentation, we evaluate
how well we predict (1) the mask for the occluded regions
(SI), (2) the mask for non-occluded regions (SV), and (3)
the mask for the full object (SF=SV ∪ SI). The intuition for
evaluating the mask for visible regions is to check whether
our approach distorts the input mask when the object is not
occluded. For all of these settings, we compute intersection
over union between the predicted mask of the model and
the groundtruth mask. For evaluating painting, we use L1
and L2 distance of the predicted output and the ground truth
image.

Table 1 summarizes our results for segmentation. First,
our method (referred to as ‘SeGAN w/ predicted SV’) sig-
niﬁcantly outperforms Multipath for the task of predicting
masks for the full object (SF) and invisible regions (SI).
It is interesting to see that our method improves the seg-
mentation of the visible regions (SV) as well. We have two
variations of the Multipath network as our baselines: one
trained only on natural images data (trained on MS COCO
dataset [29]) and one trained on the combination of natu-
ral images data and our synthetic images (trained to predict
occluded and visible regions). Another baseline is IBBE
[27] (an amodal segmentation method), which is ﬁne-tuned
on our synthetic data. We also compare with Pix2Pix [22],
where it receives the same inputs as our model and gener-
ates the appearance for the full object. Using groundtruth
masks (SeGAN w/ GT SV) shows that our method will per-
form even better if it receives more accurate masks for the
visible regions as the input. Figure 4 shows qualitative seg-
mentation results of our method.

We now evaluate our network on appearance generation
(painting). Our ﬁrst baseline is a nearest neighbor method.
We feed the image into ResNet-18 pretrained on ImageNet
and obtain features from the layer before the classiﬁcation
layer. Similarly, we feed the mask image for the visible re-
gion into ResNet and obtain features for the mask as well.
We concatenate these features. For each test example, we
ﬁnd the training image and mask that has the smallest dis-
tance (L2 distance on the concatenated features).

As another baseline, we use the Context-Encoder net-
work [37]. The main task of their network is to complete a
cropped patch of an image using the context around it, so
we crop a box around the object but leave the visible pix-
els unchanged. In other words, we remove all the pixels on
the image patch that can potentially belong to the invisible

Input Mask Loss Mask Visible ∪ Invisible Visible Invisible

Model
IBBE [27]
Multipath [51]
Multipath [51]
Pix2Pix [22]

Training Data
natural and synthetic
natural and synthetic
natural
natural and synthetic
SeGAN (ours) w/ predicted SV natural and synthetic

SeGAN (ours) w/ GT SV

synthetic

SV
SV
SV
SV
SV
SV

SF
SF
SV
SF
SF
SF

31.0
36.0
47.51
52.3
68.78
75.71

25.2
34.8
48.58
49.6
64.76
68.05

5.1
12.3
6.01
11.9
15.59
23.26

Table 1. Segmentation evaluation. We compare our method with [27], [51], and [22] on the synthetic test data. SV and SF refer to the
mask for visible regions of objects and the full object, respectively. We evaluate how well we predict ‘Visible’ regions, ‘Invisible’ regions
and their combination. The bottom row is not comparable with other rows since it uses groundtruth information.

Figure 4. Qualitative results of segmentation. We show the results using groundtruth for the visible region (SV, GT) in the ﬁrst two rows,
and using the predicted mask in the last two rows. The groundtrouth for the full object (SF, GT), and our predicted mask for the full object
(SF, Ours) are also shown.

regions and calculate the loss on the full object.

As our last baseline, we train the Pix2Pix network [22]
on our dataset by feeding just the pixels for the visible part
of the image as an input and calculating the loss on the full
object (visible and invisible regions). The network is sup-
posed to learn to generate the appearance of the full object.

Table 2 shows the results for painting. Our model outper-
forms all of the baselines methods. Again, for factoring out
the performance of the SV prediction methods we repeat all
of the experiments with groundtruth SV masks. The quali-
tative results for this experiment can be seen in Figure 5.

Model
Nearest Neighbor (NN)
Context-Encoder [37]
Pix2Pix [22]
SeGAN (ours)
SeGAN (ours)

L1

Input

Image

L2
Image + SVp 0.20 0.12
0.18 0.09
Image + SVp 0.15 0.09
Image + SVp 0.07 0.03
Image + SVgt 0.03 0.01

Table 2. Painting evaluation. We use L1 and L2 distances as the
evaluation metric so lower numbers are better. p and gt subscripts
refer to predicted masks (by [51]) and groundtruth, respectively.

We also performed a human study using Mechanical

Figure 5. Qualitative results of painting. We show the input image, the groundtruth object (without any occlusion) and the result of
Pix2Pix [22] network.

Turk. Table 3 shows how often the result of a particular
method is chosen as the best generated image.

Model

NN Pix2Pix [22] SeGAN (ours)

Chosen as best 0.46% 29.74%

69.78%

Table 3. Human study results. We show how often the subjects
select the generated images of our method versus two baselines:
nearest neighbor (NN) and Pix2Pix [22].

Generalization to natural images. We now evaluate
whether our model generalizes to natural images when it
is trained on our synthetic data. A major issue is that there
is no dataset of natural images that provides large-scale and
accurate mask annotations and texturing for both occluded
and non-occluded regions of objects.
[55, 27] construct
datasets for object occlusion, but occlusion patterns of [27]
are unnatural, and the dataset of [55] does not include the
appearance for the occluded regions. Therefore, we report
the results only for the segmentation task.

To evaluate the performance of our model on natural im-
ages, we construct a dataset using PASCAL 3D dataset [48].
PASCAL 3D associates a 3D CAD model to each object
instance in the dataset and it also provides annotations in
terms of azimuth, elevation and distance of the camera with
respect to the objects. Therefore, we can project the 3D
CAD model onto the image and obtain the segmentation
mask for full objects. Note that the projection does not have
any occlusion information so it generates the mask for the
full object (SF) as if it is not occluded by any object. On

Figure 6. Qualitative results of generalization to natural im-
ages. We show the prediction for the visible region using Multi-
path (SV) and segmentation and painting results of our method.

the other hand, datasets such as [17] provide the segmenta-
tion mask for the visible region of the objects. Hence, we
can obtain the mask for the occluded regions by subtract-
ing these masks from the mask we obtain by projecting the
CAD models. We use ﬁve indoor categories of PASCAL
3D dataset (i.e. bottle, chair, diningtable, sofa, and tvmon-
itor) for our experiments. As before, we run Multipath on

Model
Multipath [51] (natural)
Multipath [51] (natural+syn.)
Ours w/ predicted SV
Ours w/ GT SV

Vis. ∪ Invis. Visible Invisible

46.8
46.3
47.3
50.7

58.9
54.0
58.1
58.9

13.9
8.4
18.7
23.1

Table 4. Evaluation of generalization to natural images. The
input masks of our network are SV masks, and the groundtruth
mask for the loss function is SF.

Single Image Depth [10] Ours
84.04

60.18

Table 5. Depth layering results. We compare our depth layering
results with the results of [10], which estimates depth from single
RGB images. We modify [10] to use masks.

these natural images to obtain the segmentation masks for
the visible regions.

Table 4 shows the results of generalization to natural im-
ages. Although, our method only uses synthetic occlusion
information for training, it is still able to provide accurate
results on natural images. More importantly, our method
outperforms Multipath on segmentation of the invisible re-
gions (SI), while there is only a slight degradation in the
performance for the visible regions. Combining natural and
synthetic data makes the performance worse. It probably
makes the training more difﬁcult. Example predictions of
our method on natural images are shown in Figure 6.
Depth layering. The ﬁnal experiment for evaluating our
network is depth layering i.e. it infers the depth layers for
a pair of objects with respect to the camera. Depth layering
can be inferred from occlusion relationships since typically
the occluder is in front of the occludee and is closer to the
camera. The groundtruth data for this problem can be eas-
ily obtained from our dataset since we have access to the
occlusion relationships in the data.

For this task, we ﬁrst predict the segmentation mask for
the full object (SF) using our network. Then amongst the
rest of the objects in this scene we ﬁnd the ones, whose seg-
mentation mask for visible region (SV) intersects with the
predicted mask for the invisible region (SI). An object q
occludes object p if intersection over union of the segmen-
tation mask for the visible region (SV) of object q with the
segmentation mask of the invisible region (SI) of object p
is above a threshold. The threshold that we use is 5%.

As the baseline for this task, we use the method of [10],
which infers depth map from a single image. To obtain
the depth layering result for this method, for each image,
we project the groundtruth segmentation mask for the visi-
ble region (SV) onto the output of the depth estimation and
compute the average depth value for all the pixels that are
inside the mask. This will be the estimated depth for this
object. Then, for each pair of occluding objects we com-
pare their depth, and the one that has a lower depth will be
closer to the camera and, therefore, we consider it as the
occluder.

The evaluation metric is deﬁned as the average ratio of
number of correct predictions over the number of occlusion
pairs for each image.

We report the average over all images in the test dataset.

Figure 7. Qualitative results of depth layering. We predict that
the object shown with the orange mask is closer to the camera than
the object shown with the green mask.

The number of occlusion pairs in our test set is 4M pairs.
The result for this task is shown in Table 5. This task has
been evaluated on the synthetic data since we have accu-
rate depth and occlusion information. Figure 7 shows the
qualitative results of depth layering.

There are several reasons why our model is more accu-
rate. First, in many cases the occluder and occludee do not
differ enormously in depth, which makes it difﬁcult for the
baseline to infer the occlusion relationship. Second, the pre-
dicted depth map is computed over the entire image. Hence,
many low-level details have been removed while our pre-
dicted mask is for a speciﬁc object and does not lose much
information around the occlusion boundaries. Third, our
network predicts the invisible regions of the object, but the
depth estimator does not have this capability.

6. Conclusion

In this paper, we address the problem of segmentation
and appearance generation for the invisible regions of ob-
jects. We introduced SeGAN, which is a Generative Ad-
versarial Network that generates the appearance and seg-
mentation mask for invisible and visible regions of objects.
Getting large-scale and accurate training data for this task is
challenging. Our solution is to use photo-realistic synthetic
data where we can obtain the exact boundaries of the invis-
ible regions. Our experimental evaluations show that our
model outperforms segmentation baselines, while it gener-
ates the appearance (as opposed to a binary mask). We also
showed that our method outperforms GAN-based baselines
for appearance generation and painting. We show gener-
alization to natural images when the method is trained on
synthetic scenes. Moreover, we evaluate our model for the
task of depth layering and show improvements over a single
image depth estimation baseline.

References

[1] A. Aguiar and R. Baillargeon. Developments in young in-
fants’ reasoning about occluded objects. Cognitive psychol-
ogy, 2002. 1

[2] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. arXiv, 2016. 2

[3] L.-C. Chen, Y. Yang, J. Wang, W. Xu, and A. L. Yuille. At-
tention to scale: Scale-aware semantic image segmentation.
In CVPR, 2016. 2

[4] Q. Chen and V. Koltun. Photographic image synthesis with

cascaded reﬁnement networks. In ICCV, 2017. 2

[5] Y.-T. Chen, X. Liu, and M.-H. Yang. Multi-instance object
segmentation with occlusion handling. In CVPR, 2015. 2
[6] J. Dai, K. He, Y. Li, S. Ren, and J. Sun. Instance-sensitive

fully convolutional networks. In ECCV, 2016. 2

[7] J. Dai, K. He, and J. Sun. Boxsup: Exploiting bounding
boxes to supervise convolutional networks for semantic seg-
mentation. In ICCV, 2015. 2

[8] J. Dai, K. He, and J. Sun. Instance-aware semantic segmen-
tation via multi-task network cascades. In CVPR, 2016. 2
[9] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR, 2009. 5

[10] D. Eigen and R. Fergus. Predicting depth, surface normals
and semantic labels with a common multi-scale convolu-
tional architecture. In ICCV, 2015. 8

[11] T. Gao, B. Packer, and D. Koller. A segmentation-aware
object detection model with occlusion handling. In CVPR,
2011. 2

[12] G. Ghiasi, Y. Yang, D. Ramanan, and C. Fowlkes. Parsing

occluded people. In CVPR, 2014. 2
[13] R. Girshick. Fast r-cnn. In ICCV, 2015. 2
[14] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 2

[15] R. B. Girshick, P. F. Felzenszwalb, and D. A. McAllester.

Object detection with grammar models. In NIPS. 2011. 2

[16] R. Guo and D. Hoiem. Beyond the line of sight: labeling the

underlying surfaces. In ECCV, 2012. 2

[17] B. Hariharan, P. A. Arbel´aez, L. D. Bourdev, S. Maji, and
J. Malik. Semantic contours from inverse detectors. In ICCV,
2011. 7

[18] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling
in deep convolutional networks for visual recognition.
In
ECCV, 2014. 2

[19] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 3, 5

[20] E. Hsiao and M. Hebert. Occlusion reasoning for object de-
tection under arbitrary viewpoint. In CVPR, 2012. 2
[21] P. Isola and C. Liu. Scene collaging: Analysis and synthesis

of natural images with semantic layers. In ICCV, 2013. 2

[22] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
translation with conditional adversarial networks. In CVPR,
2017. 2, 3, 4, 5, 6, 7

[23] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Amodal com-
pletion and size constancy in natural scenes. In ICCV, 2015.
2

[24] P. Kr¨ahenb¨uhl and V. Koltun. Learning to propose objects.

In CVPR, 2015. 2

[25] C. Li and M. Wand. Precomputed real-time texture synthesis
with markovian generative adversarial networks. In ECCV,
2016. 2

[26] K. Li, B. Hariharan, and J. Malik. Iterative instance segmen-

[27] K. Li and J. Malik. Amodal instance segmentation. In ECCV,

tation. In CVPR, 2016. 2

2016. 2, 5, 6, 7

[28] G. Lin, C. Shen, , and I. van den Hengel, Anton Reid. Ef-
ﬁcient piecewise training of deep structured models for se-
mantic segmentation. In CVPR, 2016. 2

[29] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014. 5

[30] Z. Liu, X. Li, P. Luo, C.-C. Loy, and X. Tang. Semantic im-
age segmentation via deep parsing network. In ICCV, 2015.
2

[31] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 2
[32] M. Mathieu, C. Couprie, and Y. LeCun. Deep multi-scale
video prediction beyond mean square error. In ICLR, 2016.
2

[33] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. ArXiv, 2014. 2, 3

[34] N. Newcombe, J. Huttenlocher, and A. Learmonth. Infants
coding of location in continuous space. Infant Behavior and
Development, 1999. 1

[35] H. Noh, S. Hong, and B. Han. Learning deconvolution net-

work for semantic segmentation. In ICCV, 2015. 2

[36] G. Papandreou, L.-C. Chen, K. Murphy, and A. L. Yuille.
Weakly-and semi-supervised learning of a dcnn for semantic
image segmentation. In ICCV, 2015. 2

[37] D. Pathak, P. Kr¨ahenb¨uhl, J. Donahue, T. Darrell, and
A. Efros. Context encoders: Feature learning by inpainting.
In CVPR, 2016. 2, 4, 5, 6

[38] B. Pepik, M. Stark, P. Gehler, and B. Schiele. Occlusion
patterns for object class detection. In CVPR, 2013. 2
[39] P. O. Pinheiro, R. Collobert, and P. Dollar. Learning to seg-

ment object candidates. In NIPS, 2015. 2

[40] P. O. Pinheiro, T.-Y. Lin, R. Collobert, and P. Doll´ar. Learn-

ing to reﬁne object segments. In ECCV, 2016. 2

[41] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. CVPR,
2016. 2

[42] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
NIPS, 2015. 2

[43] O. Ronneberger, P. Fischer, and T. Brox. U-net: Convolu-
tional networks for biomedical image segmentation. In MIC-
CAI, 2015. 3

[44] B. C. Russell and A. Torralba. Labelme3d: Building a
database of 3d scenes from user annotations. In CVPR, 2009.
2

[45] C. Szegedy, S. Reed, D. Erhan, and D. Anguelov. Scalable,

high-quality object detection. arXiv, 2014. 2

[46] J. Tighe, M. Niethammer, and S. Lazebnik. Scene pars-
ing with object instances and occlusion ordering. In CVPR,
2014. 2

[47] J. Winn and J. Shotton. The layout consistent random ﬁeld
for recognizing and segmenting partially occluded objects.
In CVPR, 2006. 2

[48] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
In WACV,

benchmark for 3d object detection in the wild.
2014. 7

[49] Y. Yang, S. Hallman, D. Ramanan, and C. Fowlkes. Layered
object models for image segmentation. In PAMI, 2012. 2
[50] R. Yeh, C. Chen, T. Y. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. arXiv, 2016. 2

[51] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. In BMVC, 2016. 2, 3, 5, 6, 8

[52] Z. Zhang, S. Fidler, and R. Urtasun. Instance-level segmen-
tation for autonomous driving with deep densely connected
mrfs. In CVPR, 2016. 2

[53] S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet,
Z. Su, D. Du, C. Huang, and P. H. Torr. Conditional ran-
dom ﬁelds as recurrent neural networks. In ICCV, 2015. 2

[54] Y. Zhu, R. Mottaghi, E. Kolve, J. J. Lim, A. Gupta, L. Fei-
Fei, and A. Farhadi. Target-driven visual navigation in in-
In ICRA,
door scenes using deep reinforcement learning.
2017. 4

[55] Y. Zhu, Y. Tian, D. Mexatas, and P. Doll´ar. Semantic amodal

segmentation. In CVPR, 2017. 2, 7

