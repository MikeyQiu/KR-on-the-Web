7
1
0
2
 
g
u
A
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
4
1
5
5
0
.
8
0
7
1
:
v
i
X
r
a

Reﬂectance Intensity Assisted Automatic and Accurate Extrinsic
Calibration of 3D LiDAR and Panoramic Camera Using a Printed
Chessboard

Weimin Wang∗1, Ken Sakurada†1, and Nobuo Kawaguchi‡1

1Nagoya University, Japan

Abstract

This paper presents a novel method for fully automatic and convenient extrinsic calibration of a 3D
LiDAR and a panoramic camera with a normally printed chessboard. The proposed method is based on
the 3D corner estimation of the chessboard from the sparse point cloud generated by one frame scan
of the LiDAR. To estimate the corners, we formulate a full-scale model of the chessboard and ﬁt it to
the segmented 3D points of the chessboard. The model is ﬁtted by optimizing the cost function under
constraints of correlation between the reﬂectance intensity of laser and the color of the chessboard’s
patterns. Powell’s method is introduced for resolving the discontinuity problem in optimization. The
corners of the ﬁtted model are considered as the 3D corners of the chessboard. Once the corners of the
chessboard in the 3D point cloud are estimated, the extrinsic calibration of the two sensors is converted
to a 3D-2D matching problem. The corresponding 3D-2D points are used to calculate the absolute
pose of the two sensors with Uniﬁed Perspective-n-Point (UPnP). Further, the calculated parameters are
regarded as initial values and are reﬁned using the Levenberg-Marquardt method. The performance of the
proposed corner detection method from the 3D point cloud is evaluated using simulations. The results
of experiments, conducted on a Velodyne HDL-32e LiDAR and a Ladybug3 camera under the proposed
re-projection error metric, qualitatively and quantitatively demonstrate the accuracy and stability of the
ﬁnal extrinsic calibration parameters.

1 Introduction

A combination of the Light Detection And Ranging (LiDAR) sensor and the panoramic camera has been
widely utilized for deriving the beneﬁts of color as well as depth information. Two typical examples in which
the combination is used are 3D mapping and model generation, which use the LiDAR sensor and the color
and the texture information of images [1, 2], and the improvement of the pedestrian detection accuracy in
images using the distance information obtained from the LiDAR [3, 4, 5]. The ﬁrst and critical step for fusing
multi-modal data from the two devices is the accurate and convenient extrinsic calibration.

The process of the extrinsic calibration between the LiDAR and the camera involves the calculation of
a proper transformation matrix to align the coordinate systems of the two sensors. This process has been
studied for many years in the ﬁelds of both robotics and computer vision. Extrinsic calibration methods can
be classiﬁed into target-based methods and non-target methods. The focus of the target-based methods is
to ﬁnd corresponding features of the common target from multi-modal data. Non-target methods estimate
the transformation matrix by maximizing the correlation of mutual information in multi-modal data, such as
edges in images and discontinuity of the scanline in the point cloud [6, 7], as well as luminance of images and
reﬂectance of the point cloud [8]. In this work, we focus on the target-based extrinsic calibration.

For target-based calibration, the conventional method involves ﬁnding the vertices of a polygonal board,
which can be a chessboard or a triangular board, both in the point cloud obtained by the LiDAR and the
image captured by the camera either manually or automatically [9, 10, 11]. The vertices are estimated by
constructing the convex hull of the extracted board’s point cloud. However, the vertices only include the
geometric features of the target board’s outer contour, which are formed by the discontinuity of the scanlines,
while the information inside the counter is not used. To make full use of the information acquired by the
LiDAR, the “inner texture” of the point cloud, i.e., the reﬂectance intensity, which is also derived from the

∗Corresponding Author: weimin@ucl.nuee.nagoya-u.ac.jp
†sakurada@nagoya-u.jp
‡kawaguti@nagoya-u.jp

1

LiDAR sensor, is used. Unlike the approach in [8], we utilize the reﬂectance intensity to estimate the corners
of the chessboard from the 3D point cloud. If the corners of the 3D point cloud are identiﬁed, the extrinsic
calibration is converted to a 3D-2D matching problem.

The idea of the estimation of corners from the point cloud is based on the fact that the intensity of white
patterns diﬀers from that of black patterns, as seen in Figure 1. Figure 1a shows a point cloud; colors are
representatives of the intensity. Figure 1b shows the zoomed-in part of the chessboard shown in Figure 1c, in
which the change in reﬂectance intensity between the diﬀerent patterns can be observed. However, the noise
and sparsity of the point cloud present a challenge. To address this challenge, we propose a novel method
that ﬁts a chessboard model to the chessboard’s point cloud, and we also introduce Powell’s method [12] for
optimizing a deﬁned cost function to obtain the ﬁtting solution. After the corners of the chessboard in the
3D point cloud are estimated, the initial value of the transformation matrix is calculated using the Uniﬁed
Perspective-n-Point (UPnP) method [13]. The initial value is then applied to reﬁne the result by using the
nonlinear least squares optimization with the Levenberg-Marquardt (LM) method [14, 15]. We evaluate the
proposed method by using data obtained from a Velodyne HDL-32e LiDAR sensor and a FLIR Ladybug3
panoramic camera under the proposed reﬂectance intensity-based re-projection error metrics.

Three main contributions of this work are as follows. First, we propose a method that utilizes the reﬂectance
intensity of the point cloud to estimate the corners of the chessboard’s point cloud. Further, we introduce
Powell’s method to optimize the corner detection problem. To the best of our knowledge, this is the ﬁrst
published work that utilizes the intensity information to estimate the corners from the point cloud. Second,
the quantitative error evaluation of the proposed method is conducted using simulations.
In addition, we
analyze the relationship between the estimation error and other conditions such the measurement error and
the distance of the chessboard. Finally, we provide the Python implementation of the proposed method, which
can be downloaded from https://github.com/mfxox/ILCC.

The rest of this paper is structured as follows. Related works are revisited in Section 2. The overview of the
proposed method and notations used in this work are described in Section 3. In Section 4, detailed procedures
from automatic detection of the chessboard to the corner estimation and optimization are explained. The
corner detection on the panoramic image and the correspondence grouping of the detected corners in modal
In addition, the process of the ﬁnal extrinsic calibration
data for the two devices is described in Section 5.
after the correspondence grouping of the corners is described in this section. Simulation results for corners
estimation in the point cloud and experimental results are described in Section 6. Discussions about this work
and some tips for better extrinsic calibration with the proposed method are made in Section 7. Finally, we
present our conclusions and scope for future work in Section 8.

2 Related Works

Extrinsic calibration of two sensors in the ﬁelds of computer vision as well as robotics is usually achieved by
solving an optimization problem under certain constraints. These constraints can be geometric relationships,
the correspondence of common features, or the correlation of mutual information between two sensor modal-
ities. Related works we revisited during the course of this study are classiﬁed on the basis of these types of
constraints.

2.1 Multiple Views on a Planar Checkerboard

Zhang (2004) ﬁrst published the work about the calibration for a system comprising a 2D LiDAR and a
monocular camera [16]. He extrinsically calibrated the two sensors under the constraint that in the camera
coordinate system, the scalar projection of a vector between the origin and a point on the plane onto the
normal of the plane equals the distance between the origin and the plane. A system for 3D LiDAR sensors
with constraints similar to those in Zhang’s method was proposed and implemented as a MATLAB toolkit in
[17]. This system also made several assumptions, key among those being that the point cloud is dense enough,
which is challenging when using single frame data obtained by mobile LiDAR sensors such as the Velodyne
HDL-32e. Pandey et al. extended the method to a system of Velodyne HDL-64E LiDAR and Ladybug3
panoramic camera, which is similar to the set we used for this work [18]. This method was applied to the Ford
Campus Dataset [19]. Mirzaei et al. (2012) subsequently proposed a method for both intrinsic and extrinsic
calibration in [9].

2.2 Multiple Geometry Elements

The extrinsic calibration can also be performed if common geometry features like points, line segments, or
planes are extracted from the data obtained by the two sensors and the correspondence of features from the

2

(a)

(b)

Figure 1: Data from an identical scene captured by the LiDAR sensor and the panoramic camera. (a) The
points are colored by the reﬂectance intensity (blue indicates low intensity, red indicates high intensity); (b)
The zoomed chessboard. We can see the changes in reﬂection intensity of the point cloud between the white
and black patterns; (c) The panoramic image of the same scene.

two modalities are built. Scaramuzza et al. proposed a method based on the point correspondences [20]. Once
the point correspondences are known, the transformation matrix can be calculated using the methods for PnP
(Perspective n Points) problems. However, it is diﬃcult to manually identify the corresponding 3D point
features accurately in point cloud, especially for a sparse point cloud. To overcome this drawback, Moghadam
et al. proposed a method based on automatically extracted 2D and 3D lines [21]. However, this approach
requires the user to manually determine the correspondence of lines. Gong et al. proposed a method under the
plane-to-plane constraints using a trihedral object, which also requires human intervention for plane selection
[22]. There are also some methods that automatically extract feature points, such as vertices of a polygonal
planar checkerboard, from the LiDAR data. Nevertheless, these approaches require either manual operation
for feature points selection from the image [10] or customized checkerboard for feature points generation in
the point cloud [11]. Geiger et al. proposed an automatic method for extrinsic calibration with one shot of
multiple checkerboards in [23]. This approach recovers the 3D structure from the detected corners in images.
Then the calibration is performed under the constraints that planes of the chessboards recovered from the
images should coincide with the planes detected from the LiDAR data. This method was applied for extrinsic
calibration between the cameras and the LiDAR sensor in KITTI Dataset [24]. However, to recover the 3D
structure from corners of diﬀerent chessboards, the cameras require stereo conﬁguration for suﬃcient common
ﬁeld of view of the chessboards. This is challenging for panoramic camera like Ladybug3 we use in this work.
Geiger’s method for corner detection in images showed robustness from the experimental results, and hence
we also apply it for corners detection from the panoramic images in this work.

2.3 Correlation of Mutual Information

The abovementioned methods require either artiﬁcial observation objects (chessboards or triangular boards)
or user intervention (features or correspondence selection). This is inconvenient for applications that need
frequent extrinsic calibration like autonomous driving cars, in which case the relative pose may drift due to the
vibration. To solve this problem, several online calibration methods are proposed. These methods are generally
based on the maximization of the mutual information (MI), such as edges in images and discontinuity of the
scanline in the point cloud or luminance of images and reﬂectance intensity of the point cloud [6, 8, 7].
However, online calibration methods remain diﬃcult to apply with poor initializations. This means that the
pre-knowledge of a roughly accurate initial guess, which maybe estimate using the oﬀ-line calibration method

(c)

3

or manual measurement, is necessary.

2.4 Our Approach

In our proposed method for extrinsic calibration, we also applied constraints by obtaining corresponding feature
points on a printed chessboard. This method belongs to the constraints on multiple geometry elements.
However, unlike the approaches mentioned above, we use the corners instead of the vertices of the chessboard’s
point cloud. To estimate the corners of the point cloud, we formulate a cost function under the constraint
that the 3D points with high reﬂectance intensity must lie on the white patterns of the chessboard and vice
versa. Once the corners are detected in both multi-modal data, the correspondences are further made in a
predeﬁned order. Initial parameters can be obtained using the UPnP method [13] on the corresponding corners
and further reﬁned using the Levenberg-Marquardt method [14, 15]. Our method is fully automatic and thus
dose not require user intervention in the whole process from the detection of the chessboard, corner detection,
the correspondence of the corners, to the ﬁnal optimization.

A combination of a Velodyne HDL-32e LiDAR sensor and a Ladybug3 panoramic camera is used for
experiments in this work. There are several studies on the intrinsic calibration of the 3D LiDAR sensor [25, 9]
and the panoramic camera [26, 27]. In the remainder of this paper, we assume that before the process of the
extrinsic calibration, both the LiDAR and the panoramic cameras have been intrinsically calibrated from the
factory setting.

3 Overview and Notations
3.1 Overview

The overview of the proposed method is illustrated in Figure 2. First, the point cloud obtained from the LiDAR
is segmented into multiple parts. The point cloud of the chessboard is identiﬁed from within the segments
based on the characters of the segment. The corners of the chessboard in the point cloud are estimated by
minimizing a deﬁned cost function. On the other hand, corners of the chessboard in the image are detected
using an existing method. Correspondence of the corners is built based on the predeﬁned counting order.
The corresponding pairs are then used to estimate an initial value of the transformation matrix by solving an
absolute pose problem. Finally, the value is reﬁned by optimizing a proposed nonlinear cost function.

Figure 2: Overview of the proposed method.

3.2 Notations

For the convenience of explanation, the following notations are used in this paper.

pi = (xi, yi, zi)T : coordinates of a 3D point.

P =

p1, p2, . . . , pn
{

}

: set of n 3D points.

t = (tx, ty, tz)T : the translation vector.

R(θ) = Rz(θz)Ry(θy)Rx(θx): rotation matrix.

•

•

•

•

•

•

4

θ = (θx, θy, θz)T : rotation angle vector whose element corresponds to the rotation angle along x-, y-,
z-axis respectively.

Tr(θ, t, pi) = R(θ)pi + t:
translation vector t.

function that transforms the 3D point pi with the angle vector θ and

: set of estimated 3D corner points of the chessboard from the point cloud. N

ˆpi = Tr(θ, t, pi): transformed point of pi.

Pc =
is the number of the corners in the chessboard.

2, . . . , pc

1, pc
pc

N }

{

xi = (ui, vi)T : coordinates of 2D pixel.

•

•

•

•

Xc =

1, xc
xc
{

2, . . . , xc

N }

: set of detected 2D corner pixels of the chessboard from the image.

4 Corner Estimation from the Point Cloud

This section explains the detailed process of corner estimation from one frame of the point cloud data obtained
by the LiDAR sensor. All concerned coordinates are located in the LiDAR coordinate system in this section.

4.1 Automatic Detection of the Chessboard

This subsection describes the procedure of automatic extraction of the points that are reﬂected from the
chessboard. The points discussed in this subsection refer to all points in one frame of the point cloud.

4.1.1 Segmentation of the Point Cloud

Region growing [28] is often used to segment the point cloud. Region growing estimates the curvature value
and the normal vector of each point based on the plane constructed by its kNN points. Then the method
clusters the points according to the Euclidean distance and the angle of normal vectors of points. RANdom
Sample Consensus (RANSAC) [29] is also used for the shape extraction. For example, the RANSAC of the
planar model is applied for the plane ﬁtting and extraction from the point cloud. However, both methods
encounter challenges while processing the sparse and non-uniformly distributed point cloud, which may be
generated by a single frame scanning of the mobile LiDAR sensor like Velodyne HDL-32e in this work.

The scanline-based segmentation methods are suitable for processing this kind of point cloud, such as the
method in [30]. This method ﬁrst cluster a single frame of the point cloud into scanline segments according to
change of distance and direction between successive points along the scan direction. Then, scanline segments
are agglomerated into object segments based on their similarity. This method showed stable segmentation
result from the experimental results and thus we apply it for segmentation in this work.

4.1.2 Finding the Chessboard from the Segments

After the segmentation of the point cloud, the segment of the chessboard needs to be correctly identiﬁed.
We use characteristics such as the planarity, bounds, and points distribution of segments as the conditions for
ﬁltering the segments automatically.

To reduce the computational cost, we ﬁrst ﬁlter out some improbable segments based on the theoretical
number ntheo of points of a segment deﬁned in Equation (1). ntheo represents the theoretically maximum
number of points and calculated from the vertical and horizontal angle of the LiDAR when the chessboard is
parallel to the rotation axis of Velodyne, as shown in Figure 3. Segments in which the number of points fall
within the interval [(cid:15)theontheo, ntheo] are further processed, where (cid:15)theo is a coeﬃcient and empirically set to
0.5 for this study.

ntheo

dW
2r sin( ∆h

2 ) (cid:99)(cid:98)

dH
2r sin( ∆v

2 ) (cid:99)

≈ (cid:98)

(1)

where dW and dH are the width and height of the chessboard, r is the Euclidean distance from the segment’s
centroid to the LiDAR sensor, ∆h and ∆v represent horizontal and vertical angular resolution, which are 0.16◦
and 1.33◦ for Velodyne HDL-32e [31] respectively,

represents the ceiling truncation of a real number.

The planarity of the segment is veriﬁed using the Principle Components Analysis (PCA) [32] method.
The matrix Mn×3 consisting of all points in the segment is decomposed along three basis vectors Mb =
(µ1, µ2, µ3)T with components ratios λ1, λ2, λ3 on each basis vector. The segment whose least ratio λ3 is
less than 0.01 is considered as a planar object.

For a planar segment, all points in this segment are projected to the estimated plane formed by the
RANSAC method [29] for further veriﬁcation. Fitted points are denoted as Mn×3,f . As the ﬁnal step, the
range of the bounding box and the uniformity of the distribution are checked. For manipulation convenience,
we rotate coordinates of all points to the chessboard plane and align λ1, λ2 to the x-axis and y-axis with

(cid:98)(cid:99)

5

Figure 3: Angular resolution of the used LiDAR in
this work. The left ﬁgure is the top view and the
right one is the side view of the LiDAR and the chess-
board .

(a)

(b)

Figure 4: Uniformity of the points distribution.

(2)

(3)

the Equation (2). Then the centroid of the chessboard’s points Mn×3,f r is translated to the origin using of
Equation (3).

Mn×3,f r = (Mb

M

(cid:124)
(cid:124)
n×3,f )

·

Mn×3,f rt = Mn×3,f r

mean(Mn×3,f r)

−
After the transformation by Equations (2) and (3), the planar segment is transformed to the XOY plane and
the centroid of the segment coincides with the origin point. The segment with the bounding box within [0.8dW ,
1.6dW ] and [0.8dH , 1.6dH ] is considered as a potential chessboard. Uniformity of the point distribution is
determined by the diﬀerence between the points distribution in four equally divided regions, which is illustrated
in Figure 4. Two sample segments that fall in the range of the threshold bounding box are shown in Figure 4.
The dashed lines divide the theoretical region of the chessboard into four equal parts. The diﬀerence of the
points’ number in each part is used for uniformity check. For example, as the diﬀerence of points’ number in
each part in Figure 4a is smaller then that in Figure 4b, Figure 4a has better uniformity than Figure 4b. Let
us assume that the maximum number of points in the regions is nmax, and minimum is nmin. The uniformity
nmax−nmin
[0, 1), where nall is the total number of points
of the distribution is calculated as (cid:15)norm = 1
nall
in the segment. A large (cid:15)norm value indicates that the points are distributed normally. The threshold for
uniformity (cid:15)norm is set to 0.85.

−

∈

If more than one segment satisﬁes the above conditions, the segment with greater uniformity is selected.
(The super-

The set of points in the detected chessboard’s segment is denoted as PM =
script “M ” refers to the chessboard Marker).

2 , . . . , pM
n }

1 , pM
pM

{

This subsection explains the principle and detailed process for estimation of the corners from the point cloud
of the chessboard. The points discussed in this subsection refers to points of the chessboard only.

4.2 Corner Estimation

4.2.1 Model Formulation

After the chessboard points PM are automatically extracted, we utilize the intensity of points to estimate the
3 pattern as shown in Figure 5a.
corners. Without loss of generality, we use a model chessboard with a 2
Figure 5b illustrates theoretical laser-reﬂected points from the chessboard by lasers. The blue points indicate
low intensity reﬂected from black patterns while red points indicate high intensity reﬂected from white patterns.
If we ﬁnd a pose of the model that make the reﬂected points best ﬁt the model (Figure 5c), we can use the
corners (green points in Figure 5d) of the model to represent the corners of the points.

×

In addition, similar to the process in Section 4.1.2, the coordinate system of the chessboard is transformed
to the chessboard plane by rotating with the matrix consisting of three PCA vectors and subtracting the mean
of the rotated points, as shown in Figure 6. Then, we can treat the points as illustrated in Figure 5. However,
for the consistency of further correspondence with corners from images, the directions of principle vectors
µ1, µ2, µ3 are deliberately determined. The conditions for the basis vectors are illustrated in Figure 6:

directions of µ1, µ2, µ3 are deﬁned to obey to the right hand rule.

direction of µ3 (the normal of the chessboard) is deﬁned to point to the side of origin of the LiDAR
coordinate system.

angle between µ1 and x axis of the LiDAR coordinate system is not more than 90◦

•

•

•

6

(a)

(b)

(c)

(d)

Figure 5: The principle used to estimate corners in the points. (a) The chessboard model; (b) The scanned
point cloud of the chessboard. Colors indicate the intensity (blue for low and red for high reﬂectance intensity);
(c) Find a matrix that translates the most 3D points on the corresponding patterns. Green points are estimated
corners; (d) Consider the corners of the chessboard model as the corners of the point cloud.

The rotation matrix MM

XOY P is deﬁned as (µ1, µ2, µ3)T , where directions of µ1, µ2, µ3 satisfy the afore-
mentioned conditions. After the translation tM
XOY P by subtracting the mean of the rotated points, µ1, µ2, µ3
and the center of the original point cloud are transformed to xP -, yP -, zP -axis and the origin plane coordinates
respectively.

Figure 6: Directions of the basis vectors relative to the LiDAR coordinate system. Blue arrow lines in the left
ﬁgure represent the basis vectors decomposed by PCA. After transformation with the basis vectors, chessboard’s
points are mapped to the X P OY P (chessboard plane). Then we can apply the model described in Figure 5.

4.2.2 Correspondence of Intensity and Color

Another problem to solve before the formulation of the cost function is the correspondence between the
reﬂectance intensity and the color of the pattern. There are only two colors in the pattern, black and white.
However, the reﬂectance intensity values distribute discretely, mainly due to the divergence of the laser beam.
Figure 7a shows the scatter plot of the intensity values of a real chessboard’s point cloud. Further, the absolute
value of the reﬂectance intensity is also aﬀected by the distance.

(a)

(b)

Figure 7: Estimated parameters for each frame. (a) Scatter diagram of the intensity for all points in the
chessboard; (b) The histogram of the intensity. RL, RH can be found at the peaks of the two sides.

To process the intensity data adaptively, we deﬁne a range called the gray zone denoted as [τl, τh]. The

7

(4)

(7)

(8)

points with the intensity less than τl are considered as reﬂected from black patterns and those greater than τh
are considered as reﬂected from white patterns. To evaluate the values of τl and τh, the histogram is created
and the bins (RL, RH ) of peaks in both sides of the mean intensity are detected automatically, as shown in
Figure 7b for illustration. The gray zone [τl, τh] is then deﬁned as follows,

(cid:26) τl = (((cid:15)g

τh = (RL + ((cid:15)g

−

1)RL + RH )/(cid:15)g
1)RH )/(cid:15)g

−

where (cid:15)g
2 is a constant. (cid:15)g is set to 2 for corner estimation with enough points (gray zone will be zero and
all points are used) and 4 for error evaluation with enough conﬁdence of the pattern color from the reﬂectance
intensity in this study.

≥

4.2.3 Cost Function and Optimization

After completing the processes explained above, we formulate the cost function for corner estimation. The
cost function is formulated based on the constraints of the correspondence between the intensity and color,
and deﬁned in Equation (5).

Cm =

fg(ri)

fin( ˆpi, G)
{

|

ci

−

|

ˆci

fd( ˆpi, Vi) + [1

fin( ˆpi, G)]fd( ˆpi, G)
}

,

−

ˆpi

∈

M

ˆP

(5)

n
(cid:88)

i

M

}

M

∈

=

PM

M ), pi

Tr(θM , tM , pi
{

where ˆP
is the set of points that are transformed to the XOY plane using
the aforementioned processes, and z coordinates of all points in PM is 0. Namely 3D points are degenerated
to 2D after rotation by the matrix of three PCA vectors. Thus, the transformation parameters along the plane
y , 0]T . ri is the reﬂectance intensity of i-th point. fg(ri) is used
are θM = [0, 0, θM
to determine whether a point falls into the gray zone and is deﬁned in Equation (6). G represents the four
corners of the chessboard and Vi represents the four vertices of the grid corresponding to the i-th point.
(cid:26) 1 :
0 :

z ]T and tM = [tM

fg(ri) =

ri /
∈
else

x , tM

[τl, τh]

(6)

fin( ˆpi, Vi) =

(cid:26) 1 :
0 :

if ˆpi in the polygon with vertices G
else

fd = min(∆x1, ∆x2) + min(∆y1, ∆y2)

fin( ˆpi, Vi) indicates whether the polygon with the vertices Vi contains the point ˆpi. ci is the estimated
color from reﬂectance intensity ri. We deﬁne ci = 0 if ri < τl and ci = 1 if ri > τh. ˆci represents the color of
the pattern the ˆpi falls in. It is deﬁned as 0 for black and 1 for white. We experimentally use L1 distance to
calculate the cost for points that fall in the chessboard or out the chessboard as shown in Figure 8, and the
function fd is deﬁned in Equation (8). Figure 8a shows the situation that a point ˆpi falls in the wrong pattern
constructed by Vi. ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of the pattern and
∆y1, ∆y2 represent the distances to the other two sides. Figure 8b shows the situation that a point falls out
of the chessboard’s region. Similarly, ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of
the chessboard and ∆y1, ∆y2 represent the distances to the other two sides of the chessboard in Figure 8b.
Since the cost function Cm is discontinuous, it is impractical to derive for optimization. Thus, we utilize
the Powell optimization method [12] that needs no derivative. We used the implementation by SciPy [33] in
this work. As mentioned before, the set of chessboard’s points are almost ﬁtted to the chessboard model after
the transformation. Therefore, all three parameters θM
y are initialized with zero when the Powell’s
method is applied.

z , tM

x , tM

5 Extrinsic Calibration Estimation
5.1 Corner Estimation from the Image

There exist many methods for corner detection in perspective images or even in distorted or blurred images
[34, 23]. In this work, we utilize the method in [23] to detect the corners from the panoramic images directly.

5.2 Correspondence of the 3D-2D Corners

After the corners on the images are detected, the detected corners both on the image and in the point cloud
are corresponded by deﬁning the common counting order that starts from left-down side of the chessboard.

8

(a)

(b)

Figure 8: Cost deﬁnition for corner detection in the point cloud. (a) An example of the point falling into
the wrong pattern. The square represents a white pattern of the chessboard; (b) An example of the point
falling out of the chessboard model; (a) describes the ﬁrst term and (b) describes the second term of the cost
function (Equation (5)).

5.3

Initial Value by PnP

With these corresponding 3D-2D pair points, an initial value for nonlinear optimization can be obtained by
estimating the central absolute pose with the UPnP (Uniﬁed Perspective-n-Point) method [13]. We used the
implementation by OpenGV [35].

5.4 Reﬁnement with Nonlinear Optimization

We use the diﬀerence of inclination angle and azimuth angle in the spherical coordinate system as the error
metric for optimization to be independent of the panoramic image projection models. For the i-th 3D-2D pair,
f 2
x2a(xi), where fp2a and fx2a convert a 3D point and a
the residual is calculated as Eerr =
pixel to the inclination angle and azimuth angle, respectively, in the spherical coordinate system.

f 2
p2a( ˆpi)

(cid:113)

−

6 Experimental Results and Error Evaluation

The setup of the sensors and the measurement environment in this work are introduced in Section 6.1. To
evaluate the accuracy of 3D corner detection with the proposed method, simulation results under diﬀerent
conditions are presented in Section 6.2. Then the method is applied to the real data for 3D corner detection
of the chessboard’s point cloud. Some results of detected 3D corners as well as 2D corners of the panoramic
images are shown in Section 6.3. Section 6.4 presents the extrinsic parameters estimated with the 3D-2D
corner correspondences. Finally, quantitative and qualitative evaluations are performed in Sections 6.5 and
6.6 respectively.

6.1 Setup

We setup the system with a Velodyne HDL-32e LiDAR sensor mounted atop a Ladybug3 camera as shown
in Figure 9a. The chessboard used in this work is constructed by 6
8 grids with a side length of 7.5 cm
as shown in Figure 9b. Velodyne rotates at 600 rpm and the resolution of the panoramic image output by
Ladybug3 is set to 8000

6000.

×

In total, we captured 20 frames of the chessboard. For each horizontal camera of the Ladybug3, the

×

chessboard is placed at 4 diﬀerent places. The top and side views of the 20 frames are shown in Figure 10.

6.2 Simulation for Corner Detection Error in the Point Cloud

To evaluate the error of estimated corners from the point cloud, the ground truth is indispensable. However,
it is diﬃcult to obtain ground truth from the real data. Thus, we simulate the scanned point cloud of a
generated chessboard model and record the corners’ coordinates of the chessboard as the ground truth for
evaluation. Subsequently, the error is evaluated by comparing the estimated results with the ground truth.

9

(a)

(b)

Figure 9: Setup. (a) the image of the setup for two sensors; (b) a scene for the data acquisition.

(a)

(b)

Figure 10: Distribution of the 20 chessboard positions. The chessboard is captured by the LiDAR from diﬀerent
heights and angles. The length of the coordinate axis is 1 m. Four groups of colors represent four positions
of the chessboard for each horizontal camera. (a) Top view of the point clouds of the chessboard; (b) Side
view of the point clouds of the chessboard.

6.2.1 Simulation of the Point Cloud

There are many aspects that aﬀect the measured distance and intensity of the points reﬂected from the
chessboard, such as distance, noise, divergence of the laser beam and the pose of the chessboard. The
theoretical interval between two laser beams and two successive points along the scanning are calculated
based on the distance and the LiDAR laser distribution, as shown in Figure 11. The noise is added to the
points along x-, y-, z-axis independently. The probability model of the noise is considered as a Gaussian
distribution. The base line of the deviation σ for noise is empirically set to 0.0016, 0.0016 and 0.01 m with
the mean µ = 0 for each axis. Simulated points are transformed with a rotation matrix and translation vector.
Figure 12 shows some simulated point clouds for diﬀerent noise and distance conditions. The last row
shows the points from real data for comparison. By comparing the front view of the points clouds between the
ﬁrst row and the last row in Figure 12, we can see that the points with baseline noise are similar to the real data.
As for the side view of real data, we see that blue points and red points are generally distributed separately.
This indicates that the noise of distance diﬀers for diﬀerent intensity for real measurements. However, as
explained in Section 4.2.3, since the proposed corners estimation method project all points onto the XOY
plane, the noise along z-axis can be ignored. Thus, the diﬀerence between the simulated data and real data
along z-axis will not aﬀect the error evaluation of the proposed corner estimation method.

6.2.2 Error Results from the Simulation

We applied the proposed method to simulated points with varying noise and distance conditions to estimate the

coordinates of the point cloud. The distance error is calculated
, where ˆpi depicts coordinates
of the estimated corner and pi is the ground truth. Then the relative error is calculated with the unit of
percentage by dividing the side length (7.5 cm in this work) of a pattern in the chessboard. For each noise and
distance condition, we repeat the simulation with diﬀerent random seeds 100 times and calculate the average
and standard deviation. Error results are shown in Figure 13. The horizontal axes represent the simulation

n

√(cid:80)n

i=1 | ˆpi−pi|2

10

(a)

(b)

(c)

(d)

Figure 11: Vertical ﬁeld view of Velodyne HDL-32e and the relationship between interval and distance. (a)
Vertical angles of Velodyne HDL-32e; (b) Vertical ﬁeld of view; (c) Relationship between the horizontal
interval of two adjacent lasers and noise of the point cloud; (d) Relationship between the interval of two
successive points of the scanline and the distance of the chessboard. Red lines in (c,d) show the range of
chessboard’s distance we place in this work.

conditions and the vertical axes represent the relative error. From Figure 13a, we can see that the error and
uncertainty of the estimation increases drastically as the noise of measurement increases. The inﬂuence of
distance on the error is relatively lower than that of noise, as shown in Figure 13b.

6.3 Detected Corners
6.3.1 From the Image

We use the method in [23] to detect the corners in the panoramic image. Some example results are shown
in Figure 14. We can see that all corners are robustly detected. Compared to conventional vertex-based
methods, it is diﬃcult to detect vertices accurately and automatically when the background color is similar to
the color of the planar board (lower left of the chessboard in Figure 14c). However, it can be accurately and
automatically detected if we use the corners as feature points. For the correspondence with the corners from
the point cloud, corners are counted starting from the lower left board.

6.3.2 From the Point Cloud

We applied the proposed corner detection method from the point cloud to real measured data. An example
of the estimated corners is shown in Figure 15. Figure 15a shows the position of the chessboard’s point cloud
and the estimated chessboard model in the LiDAR coordinate system. The zoomed-in image of the chessboard
is shown in Figure 15b. The corners of the chessboard are the estimated corners, which can be calculated
with MM
XOY in Section 4.2.1 and Tr(θM , tM ) in Section 4.2.3. The counting order also starts from
the lower left, which is the same as that in the corners from the correspondence with corners from the image.
From Figure 15b, we can see that most blue points (low intensity) are mapped on the black patterns, and red
points (high intensity) are mapped on the white patterns. This means that the chessboard ﬁts the points well.

XOY , tM

11

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

(l)

(j)

(k)

Figure 12: Front view and side view of chessboard’s point clouds from simulation results and real data. (a–c)
Simulated point clouds with the multiplier 1 at diﬀerent distances; (d–f) Simulated point clouds with the
multiplier 2 at diﬀerent distances; (g–i) Simulated point clouds with the multiplier 3 at diﬀerent distances;
(j–l) Real point clouds at diﬀerent distances.

6.4 Estimated Extrinsic Parameters

The initial and reﬁned transformation parameters with diﬀerent numbers of frames are shown in Figure 16.
As mentioned above, 20 frames are used for this evaluation. The x-axis represents the number of frames used
for the estimation. For example, 5 indicates that the ﬁrst ﬁve frames frame#1
frame#5 are used for the
extrinsic calibration. The frames are indexed as in Table 1 to make the variation of the chessboard’s point
cloud increase in the horizontal direction as the number of frame increase for global optimization. The index
of each camera is deﬁned in [36].

∼

Figure 16 depicts the state from when the parameters start to become stable after the nonlinear reﬁnement
with more than four frames, while some parameters estimated by UPnP are erratic as the number of frames
changes. Generally, there is no signiﬁcant diﬀerence between the results obtained by UPnP and by nonlinear
reﬁnement. The translation value along the z-axis estimated by UPnP is 11.7 cm, which diﬀers from 18.7 cm
obtained using nonlinear reﬁnement. We manually measure the oﬀset between the LiDAR and the panoramic
camera of the set. It is diﬃcult to accurately ﬁnd the center of each sensor, the range of the oﬀset is supposed

12

(a)

(b)

Figure 13: Corner detection error by simulation. The horizontal axes represent diﬀerent simulation conditions
and the vertical axes represent the relative error. Red points represent the mean value and the vertical lines
represent the 3σ range of the results simulated by 100 times at each simulation condition. (a) Relationship
between the error and noise of the point cloud at 1 m. The x axis represent the multiplier for the noise
baseline; (b) Relationship between the error and the distance of the chessboard with the baseline noise.

(a)

(b)

(c)

Figure 14: Detected corners from the panoramic images. (a–c) Example results of detected corners from
images with diﬀerent poses and distances.

(a)

(b)

(c)

Figure 15: Estimated corners of chessboard. (a) The ﬁtted chessboard model of the point cloud in the real
Velobug LiDAR coordinate system; (b) The front view of the zoom checkerboard; (c) The side view of the
zoom checkerboard.

to be in the range between 17 and 20 cm. Thus, the reﬁned result is more accurate.

As a comparison, we also applied Pandey’s online method [8], which also uses laser’s reﬂectance intensity,
to the data in this work. The results under diﬀerent initial guesses are shown in Figure 16. One initial
guess is [10◦, 10◦, 10◦, 10 cm, 10 cm, 10 cm] and the other is [0◦, 0◦, 0◦,
0.17 cm, 18.72
cm] which are almost the accurate parameters. From the comparison of the two methods, we can conclude

0.13 cm,

−

−

13

that the proposed method is more stable and accurate in terms of both rotation and translation. The main
reason why Pandey’s method performed not well with the data in the work is considered that the surrounding
environment is almost static and the increment of the frames does not increase the variance of the data for the
optimization. However, as stated before, the original problem settings of two methods are diﬀerent. Online
calibration methods like Pandey’s are very convenient and can estimate an approximate results if a good initial
value is provided while the proposed methods is target-based, but it can provide accurate and stable extrinsic
calibration result.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 16: Estimated parameters by the proposed method and Pandey’s Mutual Information (MI) method [8]
with diﬀerent initial values as the numbers of frame increases. (a–c) Rotation angle along each axis; (d–f)
Translation along each axis.

Camera Index
Frame Index

0
1,6,11,16

1
2,7,12,17

2
3,8,13,18

3
4,9,14,19

4
5,10,15,20

Table 1: Relationship between the index of the frame and the index of the camera.

6.5 Re-Projection Error

To quantitatively evaluate two groups of estimated parameters, we deﬁne a re-projection error metric based
on intensity, which is similar to Equation (5) except that the error metric is deﬁned on the image plane. To
increase the conﬁdence, only the points that are contained within the polygon of the detected corners on the
images are counted. Moreover, the gray zone of intensity is increased for the same consideration and (cid:15)g in
Equation (4) is set to 4.

For the error calculation, we ﬁrst transform the point cloud of the chessboard with estimated extrinsic
parameters. After mapping all 3D points of the transformed chessboard point cloud at the panoramic image
based on an equirectangular projection model, we calculate the error on the chessboard plane of the panoramic
image. Only the point that is mapped within the quadrilateral region constructed by the four detected corners
on the image is counted, as shown in Figure 17a,b. As the gray zone is identiﬁed, we can classify the mapped
points into white or black colors.
If the estimated color of a mapped point diﬀers from the color of the
quadrilateral it falls in, the error of this point is calculated using Equation (8).

14

(a)

(b)

(c)

Figure 17: Re-projection error calculation and results. (a,b) Shaded quadrilaterals show the regions of black
and white patterns respectively. Points mapped into these regions are counted for error calculation; (c) The
errors for parameters estimated by diﬀerent numbers of frames. The point and vertical line represent the mean
and 3σ range of all errors calculated by applying the estimated parameters to the diﬀerent number of frames.

In the measurement, the farther the chessboard is, the smaller the occupied pixels of chessboard on the
image will be. Because the re-projection error is measured with absolute pixel, the error of farther chessboard
will be relatively smaller. To ensure that the error metric is unaﬀected by distance, we normalize the error
by multiplying the value of the distance with the consideration that the size of an object on the image is
generally proportional to the reciprocal of the distance. Moreover, the “attendance rate” of the point, which
indicates the rate at which points are counted for error calculation, is also taken into account for the overall
re-projection performance. The ﬁnal formula is deﬁned in Equation (9)

e =

Cm
Nc ·

rM

PcNa
PaNc

·

(9)

Here, Cm is the cost function deﬁned in Equation (5), rM is the Euclidean distance of the chessboard, Pa
is the total number of the patterns in the chessboard, Pc is the number of the quadrilaterals constructed by
detected corners for calculating the re-projection error, Na is the points number of chessboard’s point cloud,
Nc is the number of points that fall into the quadrilaterals constructed by detected corners, rM is a factor
of the error caused by the distance and PcNa
is the penalty factor by dividing the “attendance rate”. The
PaNc
“attendance rate” is derived from Nc
, which is the ratio of the average number of point in each pattern
of the region (Figure 17a,b) only counted for error calculation and the average number of point in each pattern
of the whole chessboard.

Pc ÷

Na
Pa

The re-projection error with the metric deﬁned above is shown in Figure 17c. The point and vertical line
represent the mean and 3σ range of all errors calculated by applying the estimated parameters to 20 frames.
The length of one grid of the chessboard in the 4000
8000 panoramic image at 1 m is approximately 100
×
pixels. The back projection error is 0.8 pixel when the optimization begins to converge after 4 frames, and
the relative error to the side length is 0.8%.

6.6 Re-Projection Results

For qualitative evaluation, we apply the ﬁnal extrinsic transformation matrix estimated by the proposed method
to rotate point cloud and project it to the image. The result of re-projected corners is shown in Figure 18.
The large green circles and cyan lines indicate the detected corners. The small pink circles in large green
circles and lines indicate re-projected corners estimated from the point cloud. The large blue and red circles

15

represent the start and end for counting the corners. We can see that the re-projected corners estimated from
the point cloud almost coincide with the corners detected in the image.

Figure 18: Re-projected corners and points of the chessboard (best viewed when zoomed in). Big green circles
and cyan lines indicate the detected corners. Small pink circles in big green circles and pink lines indicate
re-projected corners estimated from the point cloud. Big blue and red circles represent the start and end for
counting the corners. Blue points indicate low reﬂectance intensity and red points indicate high reﬂectance
intensity.

Re-projection results of all points within one frame are as listed in Figures 19–21. For better visualization,
points colored according to the intensity and distance are mapped to the original RGB images and the edges-
extracted images, respectively. Figure 19 shows the overall results on the panoramic image. Details of individual
objects are shown in Figure 20. We can see that the bounds generated by the change of re-projected 3D points
with diﬀerent intensities and distance ﬁt the edges of the image exactly, for example the fourth images in
Figure 20a,b. Some inconsistencies occur due to the occlusion, for example the lower left and upper right
parts of the chessboard in Figure 20a and the upper part of the human in Figure 20b. The ﬁnal colored point
cloud is shown in Figure 21. Red points indicate the region occluded by the chessboard.

Figure 19: Re-projection results. (a) All re-projected points on the color panoramic image and colored by
intensity; (b) All re-projected points on the color panoramic image and colored by distance; (c) Re-projected
result on edge extracted image of all points colored by intensity; (d) Re-projected result on edge extracted
image of all points colored by distance.

(a)

(b)

(c)

(d)

16

(a)

(b)

(c)

(d)

17

Figure 20: Zoomed details of re-projected points. (a–d) Re-projected results on chessboard, human, pillar
and car respectively. Each column represents re-projected points colored by intensity and distance on original
RGB images and edges-extracted images. Blue indicates low value and red indicates high value.

(a)

(b)

(c)

Figure 21: Projection of the RGB information from the image to the point cloud with the estimated extrinsic
parameters. (a) An example of the colored point cloud; (b) The zoomed view of the chessboard in (a). The
red points in (a,b) are occluded region caused by the chessboard; (c) The zoomed view of the car in (a).

7 Discussions

•

•

•

•

Automatic segmentation. As the ﬁrst step of the proposed method, automatic segmentation is per-
formed. The current segmentation method is only based on the distance information, which needs
the chessboard to be spatially separated from the surrounding objects. Nevertheless, slight under-
segmentation caused by the stand of the chessboard or over-segmentation caused by the measurement
noise may still occur. The degree of mis-segmentation generated by the segmentation method used in
this work is experimentally shown to be negligible for the corners estimation with the overall optimization
of the proposed method.

Simulation. To evaluate the performance for the corner estimation with the proposed method, we
approximately simulated the points by considering the probability model of the distance as Gaussian
distribution. However, the probability model for the noise of reﬂectance intensity, which is an aspect
for corners estimation, is not considered. Under the inﬂuence of reﬂectance intensity, the real error of
corner estimation is supposed to be higher than the simulated results in this work. This is one of the
reasons why the relative error for corners estimation is about 0.2%, as shown in Figure 13b, and the
ﬁnal re-projection error increased to 0.8% in Section 6.5. For a more precise simulation, the probability
model of the reﬂectance value related to the incidence angle, the distance and the divergence of laser
beam needs to be formulated.

Chessboard. As shown in Figure 11, both the horizontal and vertical intervals increase as the distance
increases. To gather enough information for corner estimation, the side length of one grid in the
chessboard is suggested to be greater than 1.5 times of the theoretical vertical interval at the farthest
place. In addition, the intersection angle between the diagonal line of the chessboard and the z-axis of
the LiDAR is suggested to be less than 15◦ to enable the scanning of as many patterns as possible.

We use the panoramic image for calibration, therefore, to remain unaﬀected by the stitching error, it is
better to place the chessboard in the center of the ﬁeld of view for each camera.

In this work, a chessboard with 6

Correspondence of 3D and 2D corners.
8 patterns is used and the
counting order is deﬁned as starting from the of the chessboard for automatic correspondence. To make
the “lower left” identiﬁed correctly, the chessboard should be captured to make the “lower left” of the
real chessboard be same with that of chessboard in the image during the data acquisition. Also, the
direction of z-axis of the two sensors should be almost consistent shown as in Figure 9b. However, these
restrictions can be released with the introduction of asymmetrical patterns in practical use.

∼

8 Conclusions and Future Works

In this work, we proposed a novel and fully automatic reﬂectance intensity based calibration method for LiDAR
and panoramic camera system. Compared to existing methods, we make use of the corners information of the
chessboard’s point cloud instead of the edges information. Corners of the sparse and noisy chessboard’s point
cloud are estimated by solving the optimization problem with the intensity information. After the correspon-
dence of corners both on the image and in the point cloud, the extrinsic transformation matrix is generated
by solving the nonlinear optimization problem. To evaluate the performance of the corner estimation from the
point cloud, we simulated the points and compared the estimated corners with the ground truth. We applied
the proposed method to an equipment set consisting of a Velodyne LiDAR sensor and a Ladybug3 panoramic

18

camera. Quantitative evaluation of the accuracy of the proposed method was performed with a proposed
intensity-based re-projection error metric. The re-projected results were veriﬁed by qualitative evaluation. The
Python implementation of the proposed method can be downloaded from https://github.com/mfxox/ILCC.

In this work we evaluate the proposed method only with the Velodyne LiDAR HDL-32e sensor, we will
evaluate on more types of sensor in the future. In practical 3D color mapping applications with the fusion of
two sensor modalities , occlusion due to the diﬀerence in views must be addressed in the future. In addition,
we aim to implement an online calibration without any information about the correct matrix based on the
segmentation of point cloud according to both scanline discontinuity and reﬂectance intensity.

References

[1] A. Mastin, J. Kepner, and J. Fisher, “Automatic registration of LIDAR and optical images of urban
scenes,” in 2009 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Institute of
Electrical and Electronics Engineers (IEEE), jun 2009.

[2] N. PAPARODITIS, J.-P. PAPELARD, B. CANNELLE, A. DEVAUX, B. SOHEILIAN, N. DAVID, and
E. HOUZAY, “Stereopolis ii: A multi-purpose and multi-sensor 3d mobile mapping system for street
visualisation and 3d metrology,” Revue fran¸caise de photogramm´etrie et de t´el´ed´etection, no. 200, pp. 69–
79, 2012.

[3] M. Szarvas, U. Sakai, and J. Ogata, “Real-time pedestrian detection using LIDAR and convolutional
neural networks,” in 2006 IEEE Intelligent Vehicles Symposium (IV), Institute of Electrical and Electronics
Engineers (IEEE).

[4] C. Premebida and U. Nunes, “Fusing LIDAR, camera and semantic information: A context-based ap-
proach for pedestrian detection,” The International Journal of Robotics Research (IJRR), vol. 32, pp. 371–
384, mar 2013.

[5] J. Schlosser, C. K. Chow, and Z. Kira, “Fusing LIDAR and images for pedestrian detection using convo-
lutional neural networks,” in 2016 IEEE International Conference on Robotics and Automation (ICRA),
Institute of Electrical and Electronics Engineers (IEEE), may 2016.

[6] J. Levinson and S. Thrun, “Automatic online calibration of cameras and lasers,” in Robotics: Science

and Systems IX, Robotics: Science and Systems Foundation, jun 2013.

[7] Z. Taylor, J. Nieto, and D. Johnson, “Multi-modal sensor calibration using a gradient orientation mea-

sure,” Journal of Field Robotics (JFR), vol. 32, pp. 675–695, jun 2014.

[8] G. Pandey, J. R. McBride, S. Savarese, and R. M. Eustice, “Automatic extrinsic calibration of vision
and lidar by maximizing mutual information,” Journal of Field Robotics (JFR), vol. 32, pp. 696–722, sep
2014.

[9] F. M. Mirzaei, D. G. Kottas, and S. I. Roumeliotis, “3d LIDAR–camera intrinsic and extrinsic calibration:
Identiﬁability and analytical least-squares-based initialization,” International Journal of Robotics Research
(IJRR), vol. 31, pp. 452–467, apr 2012.

[10] Y. Park, S. Yun, C. Won, K. Cho, K. Um, and S. Sim, “Calibration between color camera and 3d LIDAR

instruments with a polygonal planar board,” Sensors, vol. 14, pp. 5333–5353, mar 2014.

[11] A.-I. Garca-Moreno, D.-E. Hernandez-Garca, J.-J. Gonzalez-Barbosa, A. Ramrez-Pedraza, J. B. Hurtado-
Ramos, and F.-J. Ornelas-Rodriguez, “Error propagation and uncertainty analysis between 3d laser scanner
and camera,” Robotics and Autonomous Systems, vol. 62, no. 6, pp. 782 – 793, 2014.

[12] M. J. D. Powell, “An eﬃcient method for ﬁnding the minimum of a function of several variables without

calculating derivatives,” The Computer Journal, vol. 7, pp. 155–162, feb 1964.

[13] L. Kneip, H. Li, and Y. Seo, “UPnP: An optimal o(n) solution to the absolute pose problem with universal
applicability,” in European Conference on Computer Vision (ECCV), pp. 127–142, Springer Nature, 2014.

[14] K. Levenberg, “A method for the solution of certain non-linear problems in least squares,” Quarterly of

Applied Mathematics, vol. 2, pp. 164–168, jul 1944.

[15] D. W. Marquardt, “An algorithm for least-squares estimation of nonlinear parameters,” Journal of the

society for Industrial and Applied Mathematics, vol. 11, no. 2, pp. 431–441, 1963.

19

[16] Q. Zhang and R. Pless, “Extrinsic calibration of a camera and laser range ﬁnder (improves camera
calibration),” in 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),
Institute of Electrical and Electronics Engineers (IEEE).

[17] R. Unnikrishnan and M. Hebert, “Fast extrinsic calibration of a laser rangeﬁnder to a camera,” 2005.

[18] G. Pandey, J. McBride, S. Savarese, and R. Eustice, “Extrinsic calibration of a 3d laser scanner and an

omnidirectional camera,” IFAC Proceedings Volumes, vol. 43, no. 16, pp. 336–341, 2010.

[19] G. Pandey, J. R. McBride, and R. M. Eustice, “Ford campus vision and lidar data set,” The International

Journal of Robotics Research (IJRR), vol. 30, pp. 1543–1552, nov 2011.

[20] D. Scaramuzza, A. Harati, and R. Siegwart, “Extrinsic self calibration of a camera and a 3d laser range
ﬁnder from natural scenes,” in 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems
(IROS), IEEE, oct 2007.

[21] P. Moghadam, M. Bosse, and R. Zlot, “Line-based extrinsic calibration of range and image sensors,” in

2013 IEEE International Conference on Robotics and Automation, IEEE, may 2013.

[22] X. Gong, Y. Lin, and J. Liu, “3d lidar-camera extrinsic calibration using an arbitrary trihedron,” Sensors,

vol. 13, no. 2, pp. 1902–1918, 2013.

[23] A. Geiger, F. Moosmann, O. Car, and B. Schuster, “Automatic camera and range sensor calibration
using a single shot,” in IEEE International Conference on Robotics and Automation (ICRA), Institute of
Electrical and Electronics Engineers (IEEE), may 2012.

[24] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun, “Vision meets robotics: The KITTI dataset,” The Inter-

national Journal of Robotics Research (IJRR), vol. 32, pp. 1231–1237, aug 2013.

[25] G. Atanacio-Jim´enez, J.-J. Gonz´alez-Barbosa, J. B. Hurtado-Ramos, F. J. Ornelas-Rodr´ıguez, H. Jim´enez-
Hern´andez, T. Garc´ıa-Ramirez, and R. Gonz´alez-Barbosa, “LIDAR velodyne HDL-64e calibration using
pattern planes,” International Journal of Advanced Robotic Systems, vol. 8, p. 59, nov 2011.

[26] Z. Zhang, “A ﬂexible new technique for camera calibration,” IEEE Transactions on Pattern Analysis and

Machine Intelligence (TPAMI), vol. 22, no. 11, pp. 1330–1334, 2000.

[27] D. Scaramuzza, A. Martinelli, and R. Siegwart, “A toolbox for easily calibrating omnidirectional cameras,”
in 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IEEE, oct 2006.

[28] T. Rabbani, F. Van Den Heuvel, and G. Vosselmann, “Segmentation of point clouds using smoothness
constraint,” International Archives of the Photogrammetry, Remote Sensing and Spatial Information
Sciences (ISPRS), vol. 36, no. 5, pp. 248–253, 2006.

[29] M. A. Fischler and R. C. Bolles, “Random sample consensus: A paradigm for model ﬁtting with ap-
plications to image analysis and automated cartography,” Commun. ACM, vol. 24, pp. 381–395, June
1981.

[30] W. Wang, K. Sakurada, and N. Kawaguchi, “Incremental and enhanced scanline-based segmentation
method for surface reconstruction of sparse LiDAR data,” Remote Sensing, vol. 8, p. 967, nov 2016.

[31] Velodyne LiDAR, Inc, “Hdl-32e user’s manual,” 2012.

[32] I. Jolliﬀe, Principal component analysis. Wiley Online Library, 2002.

[33] E. Jones, T. Oliphant, P. Peterson, et al., “SciPy: Open source scientiﬁc tools for Python.” http:

//www.scipy.org, 2001–.

[34] M. Ruﬂi, D. Scaramuzza, and R. Siegwart, “Automatic detection of checkerboards on blurred and distorted
images,” in IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Institute of
Electrical and Electronics Engineers (IEEE), sep 2008.

[35] L. Kneip and P. Furgale, “Opengv: A uniﬁed and generalized approach to real-time calibrated geometric
vision,” in 2014 IEEE International Conference on Robotics and Automation (ICRA), pp. 1–8, May 2014.

[36] Point Grey Research, Inc, “Technical application note (tan2012009): Geometric vision using ladybug R(cid:13)

cameras,” 2012.

20

7
1
0
2
 
g
u
A
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
4
1
5
5
0
.
8
0
7
1
:
v
i
X
r
a

Reﬂectance Intensity Assisted Automatic and Accurate Extrinsic
Calibration of 3D LiDAR and Panoramic Camera Using a Printed
Chessboard

Weimin Wang∗1, Ken Sakurada†1, and Nobuo Kawaguchi‡1

1Nagoya University, Japan

Abstract

This paper presents a novel method for fully automatic and convenient extrinsic calibration of a 3D
LiDAR and a panoramic camera with a normally printed chessboard. The proposed method is based on
the 3D corner estimation of the chessboard from the sparse point cloud generated by one frame scan
of the LiDAR. To estimate the corners, we formulate a full-scale model of the chessboard and ﬁt it to
the segmented 3D points of the chessboard. The model is ﬁtted by optimizing the cost function under
constraints of correlation between the reﬂectance intensity of laser and the color of the chessboard’s
patterns. Powell’s method is introduced for resolving the discontinuity problem in optimization. The
corners of the ﬁtted model are considered as the 3D corners of the chessboard. Once the corners of the
chessboard in the 3D point cloud are estimated, the extrinsic calibration of the two sensors is converted
to a 3D-2D matching problem. The corresponding 3D-2D points are used to calculate the absolute
pose of the two sensors with Uniﬁed Perspective-n-Point (UPnP). Further, the calculated parameters are
regarded as initial values and are reﬁned using the Levenberg-Marquardt method. The performance of the
proposed corner detection method from the 3D point cloud is evaluated using simulations. The results
of experiments, conducted on a Velodyne HDL-32e LiDAR and a Ladybug3 camera under the proposed
re-projection error metric, qualitatively and quantitatively demonstrate the accuracy and stability of the
ﬁnal extrinsic calibration parameters.

1 Introduction

A combination of the Light Detection And Ranging (LiDAR) sensor and the panoramic camera has been
widely utilized for deriving the beneﬁts of color as well as depth information. Two typical examples in which
the combination is used are 3D mapping and model generation, which use the LiDAR sensor and the color
and the texture information of images [1, 2], and the improvement of the pedestrian detection accuracy in
images using the distance information obtained from the LiDAR [3, 4, 5]. The ﬁrst and critical step for fusing
multi-modal data from the two devices is the accurate and convenient extrinsic calibration.

The process of the extrinsic calibration between the LiDAR and the camera involves the calculation of
a proper transformation matrix to align the coordinate systems of the two sensors. This process has been
studied for many years in the ﬁelds of both robotics and computer vision. Extrinsic calibration methods can
be classiﬁed into target-based methods and non-target methods. The focus of the target-based methods is
to ﬁnd corresponding features of the common target from multi-modal data. Non-target methods estimate
the transformation matrix by maximizing the correlation of mutual information in multi-modal data, such as
edges in images and discontinuity of the scanline in the point cloud [6, 7], as well as luminance of images and
reﬂectance of the point cloud [8]. In this work, we focus on the target-based extrinsic calibration.

For target-based calibration, the conventional method involves ﬁnding the vertices of a polygonal board,
which can be a chessboard or a triangular board, both in the point cloud obtained by the LiDAR and the
image captured by the camera either manually or automatically [9, 10, 11]. The vertices are estimated by
constructing the convex hull of the extracted board’s point cloud. However, the vertices only include the
geometric features of the target board’s outer contour, which are formed by the discontinuity of the scanlines,
while the information inside the counter is not used. To make full use of the information acquired by the
LiDAR, the “inner texture” of the point cloud, i.e., the reﬂectance intensity, which is also derived from the

∗Corresponding Author: weimin@ucl.nuee.nagoya-u.ac.jp
†sakurada@nagoya-u.jp
‡kawaguti@nagoya-u.jp

1

LiDAR sensor, is used. Unlike the approach in [8], we utilize the reﬂectance intensity to estimate the corners
of the chessboard from the 3D point cloud. If the corners of the 3D point cloud are identiﬁed, the extrinsic
calibration is converted to a 3D-2D matching problem.

The idea of the estimation of corners from the point cloud is based on the fact that the intensity of white
patterns diﬀers from that of black patterns, as seen in Figure 1. Figure 1a shows a point cloud; colors are
representatives of the intensity. Figure 1b shows the zoomed-in part of the chessboard shown in Figure 1c, in
which the change in reﬂectance intensity between the diﬀerent patterns can be observed. However, the noise
and sparsity of the point cloud present a challenge. To address this challenge, we propose a novel method
that ﬁts a chessboard model to the chessboard’s point cloud, and we also introduce Powell’s method [12] for
optimizing a deﬁned cost function to obtain the ﬁtting solution. After the corners of the chessboard in the
3D point cloud are estimated, the initial value of the transformation matrix is calculated using the Uniﬁed
Perspective-n-Point (UPnP) method [13]. The initial value is then applied to reﬁne the result by using the
nonlinear least squares optimization with the Levenberg-Marquardt (LM) method [14, 15]. We evaluate the
proposed method by using data obtained from a Velodyne HDL-32e LiDAR sensor and a FLIR Ladybug3
panoramic camera under the proposed reﬂectance intensity-based re-projection error metrics.

Three main contributions of this work are as follows. First, we propose a method that utilizes the reﬂectance
intensity of the point cloud to estimate the corners of the chessboard’s point cloud. Further, we introduce
Powell’s method to optimize the corner detection problem. To the best of our knowledge, this is the ﬁrst
published work that utilizes the intensity information to estimate the corners from the point cloud. Second,
the quantitative error evaluation of the proposed method is conducted using simulations.
In addition, we
analyze the relationship between the estimation error and other conditions such the measurement error and
the distance of the chessboard. Finally, we provide the Python implementation of the proposed method, which
can be downloaded from https://github.com/mfxox/ILCC.

The rest of this paper is structured as follows. Related works are revisited in Section 2. The overview of the
proposed method and notations used in this work are described in Section 3. In Section 4, detailed procedures
from automatic detection of the chessboard to the corner estimation and optimization are explained. The
corner detection on the panoramic image and the correspondence grouping of the detected corners in modal
In addition, the process of the ﬁnal extrinsic calibration
data for the two devices is described in Section 5.
after the correspondence grouping of the corners is described in this section. Simulation results for corners
estimation in the point cloud and experimental results are described in Section 6. Discussions about this work
and some tips for better extrinsic calibration with the proposed method are made in Section 7. Finally, we
present our conclusions and scope for future work in Section 8.

2 Related Works

Extrinsic calibration of two sensors in the ﬁelds of computer vision as well as robotics is usually achieved by
solving an optimization problem under certain constraints. These constraints can be geometric relationships,
the correspondence of common features, or the correlation of mutual information between two sensor modal-
ities. Related works we revisited during the course of this study are classiﬁed on the basis of these types of
constraints.

2.1 Multiple Views on a Planar Checkerboard

Zhang (2004) ﬁrst published the work about the calibration for a system comprising a 2D LiDAR and a
monocular camera [16]. He extrinsically calibrated the two sensors under the constraint that in the camera
coordinate system, the scalar projection of a vector between the origin and a point on the plane onto the
normal of the plane equals the distance between the origin and the plane. A system for 3D LiDAR sensors
with constraints similar to those in Zhang’s method was proposed and implemented as a MATLAB toolkit in
[17]. This system also made several assumptions, key among those being that the point cloud is dense enough,
which is challenging when using single frame data obtained by mobile LiDAR sensors such as the Velodyne
HDL-32e. Pandey et al. extended the method to a system of Velodyne HDL-64E LiDAR and Ladybug3
panoramic camera, which is similar to the set we used for this work [18]. This method was applied to the Ford
Campus Dataset [19]. Mirzaei et al. (2012) subsequently proposed a method for both intrinsic and extrinsic
calibration in [9].

2.2 Multiple Geometry Elements

The extrinsic calibration can also be performed if common geometry features like points, line segments, or
planes are extracted from the data obtained by the two sensors and the correspondence of features from the

2

(a)

(b)

Figure 1: Data from an identical scene captured by the LiDAR sensor and the panoramic camera. (a) The
points are colored by the reﬂectance intensity (blue indicates low intensity, red indicates high intensity); (b)
The zoomed chessboard. We can see the changes in reﬂection intensity of the point cloud between the white
and black patterns; (c) The panoramic image of the same scene.

two modalities are built. Scaramuzza et al. proposed a method based on the point correspondences [20]. Once
the point correspondences are known, the transformation matrix can be calculated using the methods for PnP
(Perspective n Points) problems. However, it is diﬃcult to manually identify the corresponding 3D point
features accurately in point cloud, especially for a sparse point cloud. To overcome this drawback, Moghadam
et al. proposed a method based on automatically extracted 2D and 3D lines [21]. However, this approach
requires the user to manually determine the correspondence of lines. Gong et al. proposed a method under the
plane-to-plane constraints using a trihedral object, which also requires human intervention for plane selection
[22]. There are also some methods that automatically extract feature points, such as vertices of a polygonal
planar checkerboard, from the LiDAR data. Nevertheless, these approaches require either manual operation
for feature points selection from the image [10] or customized checkerboard for feature points generation in
the point cloud [11]. Geiger et al. proposed an automatic method for extrinsic calibration with one shot of
multiple checkerboards in [23]. This approach recovers the 3D structure from the detected corners in images.
Then the calibration is performed under the constraints that planes of the chessboards recovered from the
images should coincide with the planes detected from the LiDAR data. This method was applied for extrinsic
calibration between the cameras and the LiDAR sensor in KITTI Dataset [24]. However, to recover the 3D
structure from corners of diﬀerent chessboards, the cameras require stereo conﬁguration for suﬃcient common
ﬁeld of view of the chessboards. This is challenging for panoramic camera like Ladybug3 we use in this work.
Geiger’s method for corner detection in images showed robustness from the experimental results, and hence
we also apply it for corners detection from the panoramic images in this work.

2.3 Correlation of Mutual Information

The abovementioned methods require either artiﬁcial observation objects (chessboards or triangular boards)
or user intervention (features or correspondence selection). This is inconvenient for applications that need
frequent extrinsic calibration like autonomous driving cars, in which case the relative pose may drift due to the
vibration. To solve this problem, several online calibration methods are proposed. These methods are generally
based on the maximization of the mutual information (MI), such as edges in images and discontinuity of the
scanline in the point cloud or luminance of images and reﬂectance intensity of the point cloud [6, 8, 7].
However, online calibration methods remain diﬃcult to apply with poor initializations. This means that the
pre-knowledge of a roughly accurate initial guess, which maybe estimate using the oﬀ-line calibration method

(c)

3

or manual measurement, is necessary.

2.4 Our Approach

In our proposed method for extrinsic calibration, we also applied constraints by obtaining corresponding feature
points on a printed chessboard. This method belongs to the constraints on multiple geometry elements.
However, unlike the approaches mentioned above, we use the corners instead of the vertices of the chessboard’s
point cloud. To estimate the corners of the point cloud, we formulate a cost function under the constraint
that the 3D points with high reﬂectance intensity must lie on the white patterns of the chessboard and vice
versa. Once the corners are detected in both multi-modal data, the correspondences are further made in a
predeﬁned order. Initial parameters can be obtained using the UPnP method [13] on the corresponding corners
and further reﬁned using the Levenberg-Marquardt method [14, 15]. Our method is fully automatic and thus
dose not require user intervention in the whole process from the detection of the chessboard, corner detection,
the correspondence of the corners, to the ﬁnal optimization.

A combination of a Velodyne HDL-32e LiDAR sensor and a Ladybug3 panoramic camera is used for
experiments in this work. There are several studies on the intrinsic calibration of the 3D LiDAR sensor [25, 9]
and the panoramic camera [26, 27]. In the remainder of this paper, we assume that before the process of the
extrinsic calibration, both the LiDAR and the panoramic cameras have been intrinsically calibrated from the
factory setting.

3 Overview and Notations
3.1 Overview

The overview of the proposed method is illustrated in Figure 2. First, the point cloud obtained from the LiDAR
is segmented into multiple parts. The point cloud of the chessboard is identiﬁed from within the segments
based on the characters of the segment. The corners of the chessboard in the point cloud are estimated by
minimizing a deﬁned cost function. On the other hand, corners of the chessboard in the image are detected
using an existing method. Correspondence of the corners is built based on the predeﬁned counting order.
The corresponding pairs are then used to estimate an initial value of the transformation matrix by solving an
absolute pose problem. Finally, the value is reﬁned by optimizing a proposed nonlinear cost function.

Figure 2: Overview of the proposed method.

3.2 Notations

For the convenience of explanation, the following notations are used in this paper.

pi = (xi, yi, zi)T : coordinates of a 3D point.

P =

p1, p2, . . . , pn
{

}

: set of n 3D points.

t = (tx, ty, tz)T : the translation vector.

R(θ) = Rz(θz)Ry(θy)Rx(θx): rotation matrix.

•

•

•

•

•

•

4

θ = (θx, θy, θz)T : rotation angle vector whose element corresponds to the rotation angle along x-, y-,
z-axis respectively.

Tr(θ, t, pi) = R(θ)pi + t:
translation vector t.

function that transforms the 3D point pi with the angle vector θ and

: set of estimated 3D corner points of the chessboard from the point cloud. N

ˆpi = Tr(θ, t, pi): transformed point of pi.

Pc =
is the number of the corners in the chessboard.

2, . . . , pc

1, pc
pc

N }

{

xi = (ui, vi)T : coordinates of 2D pixel.

•

•

•

•

Xc =

1, xc
xc
{

2, . . . , xc

N }

: set of detected 2D corner pixels of the chessboard from the image.

4 Corner Estimation from the Point Cloud

This section explains the detailed process of corner estimation from one frame of the point cloud data obtained
by the LiDAR sensor. All concerned coordinates are located in the LiDAR coordinate system in this section.

4.1 Automatic Detection of the Chessboard

This subsection describes the procedure of automatic extraction of the points that are reﬂected from the
chessboard. The points discussed in this subsection refer to all points in one frame of the point cloud.

4.1.1 Segmentation of the Point Cloud

Region growing [28] is often used to segment the point cloud. Region growing estimates the curvature value
and the normal vector of each point based on the plane constructed by its kNN points. Then the method
clusters the points according to the Euclidean distance and the angle of normal vectors of points. RANdom
Sample Consensus (RANSAC) [29] is also used for the shape extraction. For example, the RANSAC of the
planar model is applied for the plane ﬁtting and extraction from the point cloud. However, both methods
encounter challenges while processing the sparse and non-uniformly distributed point cloud, which may be
generated by a single frame scanning of the mobile LiDAR sensor like Velodyne HDL-32e in this work.

The scanline-based segmentation methods are suitable for processing this kind of point cloud, such as the
method in [30]. This method ﬁrst cluster a single frame of the point cloud into scanline segments according to
change of distance and direction between successive points along the scan direction. Then, scanline segments
are agglomerated into object segments based on their similarity. This method showed stable segmentation
result from the experimental results and thus we apply it for segmentation in this work.

4.1.2 Finding the Chessboard from the Segments

After the segmentation of the point cloud, the segment of the chessboard needs to be correctly identiﬁed.
We use characteristics such as the planarity, bounds, and points distribution of segments as the conditions for
ﬁltering the segments automatically.

To reduce the computational cost, we ﬁrst ﬁlter out some improbable segments based on the theoretical
number ntheo of points of a segment deﬁned in Equation (1). ntheo represents the theoretically maximum
number of points and calculated from the vertical and horizontal angle of the LiDAR when the chessboard is
parallel to the rotation axis of Velodyne, as shown in Figure 3. Segments in which the number of points fall
within the interval [(cid:15)theontheo, ntheo] are further processed, where (cid:15)theo is a coeﬃcient and empirically set to
0.5 for this study.

ntheo

dW
2r sin( ∆h

2 ) (cid:99)(cid:98)

dH
2r sin( ∆v

2 ) (cid:99)

≈ (cid:98)

(1)

where dW and dH are the width and height of the chessboard, r is the Euclidean distance from the segment’s
centroid to the LiDAR sensor, ∆h and ∆v represent horizontal and vertical angular resolution, which are 0.16◦
and 1.33◦ for Velodyne HDL-32e [31] respectively,

represents the ceiling truncation of a real number.

The planarity of the segment is veriﬁed using the Principle Components Analysis (PCA) [32] method.
The matrix Mn×3 consisting of all points in the segment is decomposed along three basis vectors Mb =
(µ1, µ2, µ3)T with components ratios λ1, λ2, λ3 on each basis vector. The segment whose least ratio λ3 is
less than 0.01 is considered as a planar object.

For a planar segment, all points in this segment are projected to the estimated plane formed by the
RANSAC method [29] for further veriﬁcation. Fitted points are denoted as Mn×3,f . As the ﬁnal step, the
range of the bounding box and the uniformity of the distribution are checked. For manipulation convenience,
we rotate coordinates of all points to the chessboard plane and align λ1, λ2 to the x-axis and y-axis with

(cid:98)(cid:99)

5

Figure 3: Angular resolution of the used LiDAR in
this work. The left ﬁgure is the top view and the
right one is the side view of the LiDAR and the chess-
board .

(a)

(b)

Figure 4: Uniformity of the points distribution.

(2)

(3)

the Equation (2). Then the centroid of the chessboard’s points Mn×3,f r is translated to the origin using of
Equation (3).

Mn×3,f r = (Mb

M

(cid:124)
(cid:124)
n×3,f )

·

Mn×3,f rt = Mn×3,f r

mean(Mn×3,f r)

−
After the transformation by Equations (2) and (3), the planar segment is transformed to the XOY plane and
the centroid of the segment coincides with the origin point. The segment with the bounding box within [0.8dW ,
1.6dW ] and [0.8dH , 1.6dH ] is considered as a potential chessboard. Uniformity of the point distribution is
determined by the diﬀerence between the points distribution in four equally divided regions, which is illustrated
in Figure 4. Two sample segments that fall in the range of the threshold bounding box are shown in Figure 4.
The dashed lines divide the theoretical region of the chessboard into four equal parts. The diﬀerence of the
points’ number in each part is used for uniformity check. For example, as the diﬀerence of points’ number in
each part in Figure 4a is smaller then that in Figure 4b, Figure 4a has better uniformity than Figure 4b. Let
us assume that the maximum number of points in the regions is nmax, and minimum is nmin. The uniformity
nmax−nmin
[0, 1), where nall is the total number of points
of the distribution is calculated as (cid:15)norm = 1
nall
in the segment. A large (cid:15)norm value indicates that the points are distributed normally. The threshold for
uniformity (cid:15)norm is set to 0.85.

−

∈

If more than one segment satisﬁes the above conditions, the segment with greater uniformity is selected.
(The super-

The set of points in the detected chessboard’s segment is denoted as PM =
script “M ” refers to the chessboard Marker).

2 , . . . , pM
n }

1 , pM
pM

{

This subsection explains the principle and detailed process for estimation of the corners from the point cloud
of the chessboard. The points discussed in this subsection refers to points of the chessboard only.

4.2 Corner Estimation

4.2.1 Model Formulation

After the chessboard points PM are automatically extracted, we utilize the intensity of points to estimate the
3 pattern as shown in Figure 5a.
corners. Without loss of generality, we use a model chessboard with a 2
Figure 5b illustrates theoretical laser-reﬂected points from the chessboard by lasers. The blue points indicate
low intensity reﬂected from black patterns while red points indicate high intensity reﬂected from white patterns.
If we ﬁnd a pose of the model that make the reﬂected points best ﬁt the model (Figure 5c), we can use the
corners (green points in Figure 5d) of the model to represent the corners of the points.

×

In addition, similar to the process in Section 4.1.2, the coordinate system of the chessboard is transformed
to the chessboard plane by rotating with the matrix consisting of three PCA vectors and subtracting the mean
of the rotated points, as shown in Figure 6. Then, we can treat the points as illustrated in Figure 5. However,
for the consistency of further correspondence with corners from images, the directions of principle vectors
µ1, µ2, µ3 are deliberately determined. The conditions for the basis vectors are illustrated in Figure 6:

directions of µ1, µ2, µ3 are deﬁned to obey to the right hand rule.

direction of µ3 (the normal of the chessboard) is deﬁned to point to the side of origin of the LiDAR
coordinate system.

angle between µ1 and x axis of the LiDAR coordinate system is not more than 90◦

•

•

•

6

(a)

(b)

(c)

(d)

Figure 5: The principle used to estimate corners in the points. (a) The chessboard model; (b) The scanned
point cloud of the chessboard. Colors indicate the intensity (blue for low and red for high reﬂectance intensity);
(c) Find a matrix that translates the most 3D points on the corresponding patterns. Green points are estimated
corners; (d) Consider the corners of the chessboard model as the corners of the point cloud.

The rotation matrix MM

XOY P is deﬁned as (µ1, µ2, µ3)T , where directions of µ1, µ2, µ3 satisfy the afore-
mentioned conditions. After the translation tM
XOY P by subtracting the mean of the rotated points, µ1, µ2, µ3
and the center of the original point cloud are transformed to xP -, yP -, zP -axis and the origin plane coordinates
respectively.

Figure 6: Directions of the basis vectors relative to the LiDAR coordinate system. Blue arrow lines in the left
ﬁgure represent the basis vectors decomposed by PCA. After transformation with the basis vectors, chessboard’s
points are mapped to the X P OY P (chessboard plane). Then we can apply the model described in Figure 5.

4.2.2 Correspondence of Intensity and Color

Another problem to solve before the formulation of the cost function is the correspondence between the
reﬂectance intensity and the color of the pattern. There are only two colors in the pattern, black and white.
However, the reﬂectance intensity values distribute discretely, mainly due to the divergence of the laser beam.
Figure 7a shows the scatter plot of the intensity values of a real chessboard’s point cloud. Further, the absolute
value of the reﬂectance intensity is also aﬀected by the distance.

(a)

(b)

Figure 7: Estimated parameters for each frame. (a) Scatter diagram of the intensity for all points in the
chessboard; (b) The histogram of the intensity. RL, RH can be found at the peaks of the two sides.

To process the intensity data adaptively, we deﬁne a range called the gray zone denoted as [τl, τh]. The

7

(4)

(7)

(8)

points with the intensity less than τl are considered as reﬂected from black patterns and those greater than τh
are considered as reﬂected from white patterns. To evaluate the values of τl and τh, the histogram is created
and the bins (RL, RH ) of peaks in both sides of the mean intensity are detected automatically, as shown in
Figure 7b for illustration. The gray zone [τl, τh] is then deﬁned as follows,

(cid:26) τl = (((cid:15)g

τh = (RL + ((cid:15)g

−

1)RL + RH )/(cid:15)g
1)RH )/(cid:15)g

−

where (cid:15)g
2 is a constant. (cid:15)g is set to 2 for corner estimation with enough points (gray zone will be zero and
all points are used) and 4 for error evaluation with enough conﬁdence of the pattern color from the reﬂectance
intensity in this study.

≥

4.2.3 Cost Function and Optimization

After completing the processes explained above, we formulate the cost function for corner estimation. The
cost function is formulated based on the constraints of the correspondence between the intensity and color,
and deﬁned in Equation (5).

Cm =

fg(ri)

fin( ˆpi, G)
{

|

ci

−

|

ˆci

fd( ˆpi, Vi) + [1

fin( ˆpi, G)]fd( ˆpi, G)
}

,

−

ˆpi

∈

M

ˆP

(5)

n
(cid:88)

i

M

}

M

∈

=

PM

M ), pi

Tr(θM , tM , pi
{

where ˆP
is the set of points that are transformed to the XOY plane using
the aforementioned processes, and z coordinates of all points in PM is 0. Namely 3D points are degenerated
to 2D after rotation by the matrix of three PCA vectors. Thus, the transformation parameters along the plane
y , 0]T . ri is the reﬂectance intensity of i-th point. fg(ri) is used
are θM = [0, 0, θM
to determine whether a point falls into the gray zone and is deﬁned in Equation (6). G represents the four
corners of the chessboard and Vi represents the four vertices of the grid corresponding to the i-th point.
(cid:26) 1 :
0 :

z ]T and tM = [tM

fg(ri) =

ri /
∈
else

x , tM

[τl, τh]

(6)

fin( ˆpi, Vi) =

(cid:26) 1 :
0 :

if ˆpi in the polygon with vertices G
else

fd = min(∆x1, ∆x2) + min(∆y1, ∆y2)

fin( ˆpi, Vi) indicates whether the polygon with the vertices Vi contains the point ˆpi. ci is the estimated
color from reﬂectance intensity ri. We deﬁne ci = 0 if ri < τl and ci = 1 if ri > τh. ˆci represents the color of
the pattern the ˆpi falls in. It is deﬁned as 0 for black and 1 for white. We experimentally use L1 distance to
calculate the cost for points that fall in the chessboard or out the chessboard as shown in Figure 8, and the
function fd is deﬁned in Equation (8). Figure 8a shows the situation that a point ˆpi falls in the wrong pattern
constructed by Vi. ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of the pattern and
∆y1, ∆y2 represent the distances to the other two sides. Figure 8b shows the situation that a point falls out
of the chessboard’s region. Similarly, ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of
the chessboard and ∆y1, ∆y2 represent the distances to the other two sides of the chessboard in Figure 8b.
Since the cost function Cm is discontinuous, it is impractical to derive for optimization. Thus, we utilize
the Powell optimization method [12] that needs no derivative. We used the implementation by SciPy [33] in
this work. As mentioned before, the set of chessboard’s points are almost ﬁtted to the chessboard model after
the transformation. Therefore, all three parameters θM
y are initialized with zero when the Powell’s
method is applied.

z , tM

x , tM

5 Extrinsic Calibration Estimation
5.1 Corner Estimation from the Image

There exist many methods for corner detection in perspective images or even in distorted or blurred images
[34, 23]. In this work, we utilize the method in [23] to detect the corners from the panoramic images directly.

5.2 Correspondence of the 3D-2D Corners

After the corners on the images are detected, the detected corners both on the image and in the point cloud
are corresponded by deﬁning the common counting order that starts from left-down side of the chessboard.

8

(a)

(b)

Figure 8: Cost deﬁnition for corner detection in the point cloud. (a) An example of the point falling into
the wrong pattern. The square represents a white pattern of the chessboard; (b) An example of the point
falling out of the chessboard model; (a) describes the ﬁrst term and (b) describes the second term of the cost
function (Equation (5)).

5.3

Initial Value by PnP

With these corresponding 3D-2D pair points, an initial value for nonlinear optimization can be obtained by
estimating the central absolute pose with the UPnP (Uniﬁed Perspective-n-Point) method [13]. We used the
implementation by OpenGV [35].

5.4 Reﬁnement with Nonlinear Optimization

We use the diﬀerence of inclination angle and azimuth angle in the spherical coordinate system as the error
metric for optimization to be independent of the panoramic image projection models. For the i-th 3D-2D pair,
f 2
x2a(xi), where fp2a and fx2a convert a 3D point and a
the residual is calculated as Eerr =
pixel to the inclination angle and azimuth angle, respectively, in the spherical coordinate system.

f 2
p2a( ˆpi)

(cid:113)

−

6 Experimental Results and Error Evaluation

The setup of the sensors and the measurement environment in this work are introduced in Section 6.1. To
evaluate the accuracy of 3D corner detection with the proposed method, simulation results under diﬀerent
conditions are presented in Section 6.2. Then the method is applied to the real data for 3D corner detection
of the chessboard’s point cloud. Some results of detected 3D corners as well as 2D corners of the panoramic
images are shown in Section 6.3. Section 6.4 presents the extrinsic parameters estimated with the 3D-2D
corner correspondences. Finally, quantitative and qualitative evaluations are performed in Sections 6.5 and
6.6 respectively.

6.1 Setup

We setup the system with a Velodyne HDL-32e LiDAR sensor mounted atop a Ladybug3 camera as shown
in Figure 9a. The chessboard used in this work is constructed by 6
8 grids with a side length of 7.5 cm
as shown in Figure 9b. Velodyne rotates at 600 rpm and the resolution of the panoramic image output by
Ladybug3 is set to 8000

6000.

×

In total, we captured 20 frames of the chessboard. For each horizontal camera of the Ladybug3, the

×

chessboard is placed at 4 diﬀerent places. The top and side views of the 20 frames are shown in Figure 10.

6.2 Simulation for Corner Detection Error in the Point Cloud

To evaluate the error of estimated corners from the point cloud, the ground truth is indispensable. However,
it is diﬃcult to obtain ground truth from the real data. Thus, we simulate the scanned point cloud of a
generated chessboard model and record the corners’ coordinates of the chessboard as the ground truth for
evaluation. Subsequently, the error is evaluated by comparing the estimated results with the ground truth.

9

(a)

(b)

Figure 9: Setup. (a) the image of the setup for two sensors; (b) a scene for the data acquisition.

(a)

(b)

Figure 10: Distribution of the 20 chessboard positions. The chessboard is captured by the LiDAR from diﬀerent
heights and angles. The length of the coordinate axis is 1 m. Four groups of colors represent four positions
of the chessboard for each horizontal camera. (a) Top view of the point clouds of the chessboard; (b) Side
view of the point clouds of the chessboard.

6.2.1 Simulation of the Point Cloud

There are many aspects that aﬀect the measured distance and intensity of the points reﬂected from the
chessboard, such as distance, noise, divergence of the laser beam and the pose of the chessboard. The
theoretical interval between two laser beams and two successive points along the scanning are calculated
based on the distance and the LiDAR laser distribution, as shown in Figure 11. The noise is added to the
points along x-, y-, z-axis independently. The probability model of the noise is considered as a Gaussian
distribution. The base line of the deviation σ for noise is empirically set to 0.0016, 0.0016 and 0.01 m with
the mean µ = 0 for each axis. Simulated points are transformed with a rotation matrix and translation vector.
Figure 12 shows some simulated point clouds for diﬀerent noise and distance conditions. The last row
shows the points from real data for comparison. By comparing the front view of the points clouds between the
ﬁrst row and the last row in Figure 12, we can see that the points with baseline noise are similar to the real data.
As for the side view of real data, we see that blue points and red points are generally distributed separately.
This indicates that the noise of distance diﬀers for diﬀerent intensity for real measurements. However, as
explained in Section 4.2.3, since the proposed corners estimation method project all points onto the XOY
plane, the noise along z-axis can be ignored. Thus, the diﬀerence between the simulated data and real data
along z-axis will not aﬀect the error evaluation of the proposed corner estimation method.

6.2.2 Error Results from the Simulation

We applied the proposed method to simulated points with varying noise and distance conditions to estimate the

coordinates of the point cloud. The distance error is calculated
, where ˆpi depicts coordinates
of the estimated corner and pi is the ground truth. Then the relative error is calculated with the unit of
percentage by dividing the side length (7.5 cm in this work) of a pattern in the chessboard. For each noise and
distance condition, we repeat the simulation with diﬀerent random seeds 100 times and calculate the average
and standard deviation. Error results are shown in Figure 13. The horizontal axes represent the simulation

n

√(cid:80)n

i=1 | ˆpi−pi|2

10

(a)

(b)

(c)

(d)

Figure 11: Vertical ﬁeld view of Velodyne HDL-32e and the relationship between interval and distance. (a)
Vertical angles of Velodyne HDL-32e; (b) Vertical ﬁeld of view; (c) Relationship between the horizontal
interval of two adjacent lasers and noise of the point cloud; (d) Relationship between the interval of two
successive points of the scanline and the distance of the chessboard. Red lines in (c,d) show the range of
chessboard’s distance we place in this work.

conditions and the vertical axes represent the relative error. From Figure 13a, we can see that the error and
uncertainty of the estimation increases drastically as the noise of measurement increases. The inﬂuence of
distance on the error is relatively lower than that of noise, as shown in Figure 13b.

6.3 Detected Corners
6.3.1 From the Image

We use the method in [23] to detect the corners in the panoramic image. Some example results are shown
in Figure 14. We can see that all corners are robustly detected. Compared to conventional vertex-based
methods, it is diﬃcult to detect vertices accurately and automatically when the background color is similar to
the color of the planar board (lower left of the chessboard in Figure 14c). However, it can be accurately and
automatically detected if we use the corners as feature points. For the correspondence with the corners from
the point cloud, corners are counted starting from the lower left board.

6.3.2 From the Point Cloud

We applied the proposed corner detection method from the point cloud to real measured data. An example
of the estimated corners is shown in Figure 15. Figure 15a shows the position of the chessboard’s point cloud
and the estimated chessboard model in the LiDAR coordinate system. The zoomed-in image of the chessboard
is shown in Figure 15b. The corners of the chessboard are the estimated corners, which can be calculated
with MM
XOY in Section 4.2.1 and Tr(θM , tM ) in Section 4.2.3. The counting order also starts from
the lower left, which is the same as that in the corners from the correspondence with corners from the image.
From Figure 15b, we can see that most blue points (low intensity) are mapped on the black patterns, and red
points (high intensity) are mapped on the white patterns. This means that the chessboard ﬁts the points well.

XOY , tM

11

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

(l)

(j)

(k)

Figure 12: Front view and side view of chessboard’s point clouds from simulation results and real data. (a–c)
Simulated point clouds with the multiplier 1 at diﬀerent distances; (d–f) Simulated point clouds with the
multiplier 2 at diﬀerent distances; (g–i) Simulated point clouds with the multiplier 3 at diﬀerent distances;
(j–l) Real point clouds at diﬀerent distances.

6.4 Estimated Extrinsic Parameters

The initial and reﬁned transformation parameters with diﬀerent numbers of frames are shown in Figure 16.
As mentioned above, 20 frames are used for this evaluation. The x-axis represents the number of frames used
for the estimation. For example, 5 indicates that the ﬁrst ﬁve frames frame#1
frame#5 are used for the
extrinsic calibration. The frames are indexed as in Table 1 to make the variation of the chessboard’s point
cloud increase in the horizontal direction as the number of frame increase for global optimization. The index
of each camera is deﬁned in [36].

∼

Figure 16 depicts the state from when the parameters start to become stable after the nonlinear reﬁnement
with more than four frames, while some parameters estimated by UPnP are erratic as the number of frames
changes. Generally, there is no signiﬁcant diﬀerence between the results obtained by UPnP and by nonlinear
reﬁnement. The translation value along the z-axis estimated by UPnP is 11.7 cm, which diﬀers from 18.7 cm
obtained using nonlinear reﬁnement. We manually measure the oﬀset between the LiDAR and the panoramic
camera of the set. It is diﬃcult to accurately ﬁnd the center of each sensor, the range of the oﬀset is supposed

12

(a)

(b)

Figure 13: Corner detection error by simulation. The horizontal axes represent diﬀerent simulation conditions
and the vertical axes represent the relative error. Red points represent the mean value and the vertical lines
represent the 3σ range of the results simulated by 100 times at each simulation condition. (a) Relationship
between the error and noise of the point cloud at 1 m. The x axis represent the multiplier for the noise
baseline; (b) Relationship between the error and the distance of the chessboard with the baseline noise.

(a)

(b)

(c)

Figure 14: Detected corners from the panoramic images. (a–c) Example results of detected corners from
images with diﬀerent poses and distances.

(a)

(b)

(c)

Figure 15: Estimated corners of chessboard. (a) The ﬁtted chessboard model of the point cloud in the real
Velobug LiDAR coordinate system; (b) The front view of the zoom checkerboard; (c) The side view of the
zoom checkerboard.

to be in the range between 17 and 20 cm. Thus, the reﬁned result is more accurate.

As a comparison, we also applied Pandey’s online method [8], which also uses laser’s reﬂectance intensity,
to the data in this work. The results under diﬀerent initial guesses are shown in Figure 16. One initial
guess is [10◦, 10◦, 10◦, 10 cm, 10 cm, 10 cm] and the other is [0◦, 0◦, 0◦,
0.17 cm, 18.72
cm] which are almost the accurate parameters. From the comparison of the two methods, we can conclude

0.13 cm,

−

−

13

that the proposed method is more stable and accurate in terms of both rotation and translation. The main
reason why Pandey’s method performed not well with the data in the work is considered that the surrounding
environment is almost static and the increment of the frames does not increase the variance of the data for the
optimization. However, as stated before, the original problem settings of two methods are diﬀerent. Online
calibration methods like Pandey’s are very convenient and can estimate an approximate results if a good initial
value is provided while the proposed methods is target-based, but it can provide accurate and stable extrinsic
calibration result.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 16: Estimated parameters by the proposed method and Pandey’s Mutual Information (MI) method [8]
with diﬀerent initial values as the numbers of frame increases. (a–c) Rotation angle along each axis; (d–f)
Translation along each axis.

Camera Index
Frame Index

0
1,6,11,16

1
2,7,12,17

2
3,8,13,18

3
4,9,14,19

4
5,10,15,20

Table 1: Relationship between the index of the frame and the index of the camera.

6.5 Re-Projection Error

To quantitatively evaluate two groups of estimated parameters, we deﬁne a re-projection error metric based
on intensity, which is similar to Equation (5) except that the error metric is deﬁned on the image plane. To
increase the conﬁdence, only the points that are contained within the polygon of the detected corners on the
images are counted. Moreover, the gray zone of intensity is increased for the same consideration and (cid:15)g in
Equation (4) is set to 4.

For the error calculation, we ﬁrst transform the point cloud of the chessboard with estimated extrinsic
parameters. After mapping all 3D points of the transformed chessboard point cloud at the panoramic image
based on an equirectangular projection model, we calculate the error on the chessboard plane of the panoramic
image. Only the point that is mapped within the quadrilateral region constructed by the four detected corners
on the image is counted, as shown in Figure 17a,b. As the gray zone is identiﬁed, we can classify the mapped
points into white or black colors.
If the estimated color of a mapped point diﬀers from the color of the
quadrilateral it falls in, the error of this point is calculated using Equation (8).

14

(a)

(b)

(c)

Figure 17: Re-projection error calculation and results. (a,b) Shaded quadrilaterals show the regions of black
and white patterns respectively. Points mapped into these regions are counted for error calculation; (c) The
errors for parameters estimated by diﬀerent numbers of frames. The point and vertical line represent the mean
and 3σ range of all errors calculated by applying the estimated parameters to the diﬀerent number of frames.

In the measurement, the farther the chessboard is, the smaller the occupied pixels of chessboard on the
image will be. Because the re-projection error is measured with absolute pixel, the error of farther chessboard
will be relatively smaller. To ensure that the error metric is unaﬀected by distance, we normalize the error
by multiplying the value of the distance with the consideration that the size of an object on the image is
generally proportional to the reciprocal of the distance. Moreover, the “attendance rate” of the point, which
indicates the rate at which points are counted for error calculation, is also taken into account for the overall
re-projection performance. The ﬁnal formula is deﬁned in Equation (9)

e =

Cm
Nc ·

rM

PcNa
PaNc

·

(9)

Here, Cm is the cost function deﬁned in Equation (5), rM is the Euclidean distance of the chessboard, Pa
is the total number of the patterns in the chessboard, Pc is the number of the quadrilaterals constructed by
detected corners for calculating the re-projection error, Na is the points number of chessboard’s point cloud,
Nc is the number of points that fall into the quadrilaterals constructed by detected corners, rM is a factor
of the error caused by the distance and PcNa
is the penalty factor by dividing the “attendance rate”. The
PaNc
“attendance rate” is derived from Nc
, which is the ratio of the average number of point in each pattern
of the region (Figure 17a,b) only counted for error calculation and the average number of point in each pattern
of the whole chessboard.

Pc ÷

Na
Pa

The re-projection error with the metric deﬁned above is shown in Figure 17c. The point and vertical line
represent the mean and 3σ range of all errors calculated by applying the estimated parameters to 20 frames.
The length of one grid of the chessboard in the 4000
8000 panoramic image at 1 m is approximately 100
×
pixels. The back projection error is 0.8 pixel when the optimization begins to converge after 4 frames, and
the relative error to the side length is 0.8%.

6.6 Re-Projection Results

For qualitative evaluation, we apply the ﬁnal extrinsic transformation matrix estimated by the proposed method
to rotate point cloud and project it to the image. The result of re-projected corners is shown in Figure 18.
The large green circles and cyan lines indicate the detected corners. The small pink circles in large green
circles and lines indicate re-projected corners estimated from the point cloud. The large blue and red circles

15

represent the start and end for counting the corners. We can see that the re-projected corners estimated from
the point cloud almost coincide with the corners detected in the image.

Figure 18: Re-projected corners and points of the chessboard (best viewed when zoomed in). Big green circles
and cyan lines indicate the detected corners. Small pink circles in big green circles and pink lines indicate
re-projected corners estimated from the point cloud. Big blue and red circles represent the start and end for
counting the corners. Blue points indicate low reﬂectance intensity and red points indicate high reﬂectance
intensity.

Re-projection results of all points within one frame are as listed in Figures 19–21. For better visualization,
points colored according to the intensity and distance are mapped to the original RGB images and the edges-
extracted images, respectively. Figure 19 shows the overall results on the panoramic image. Details of individual
objects are shown in Figure 20. We can see that the bounds generated by the change of re-projected 3D points
with diﬀerent intensities and distance ﬁt the edges of the image exactly, for example the fourth images in
Figure 20a,b. Some inconsistencies occur due to the occlusion, for example the lower left and upper right
parts of the chessboard in Figure 20a and the upper part of the human in Figure 20b. The ﬁnal colored point
cloud is shown in Figure 21. Red points indicate the region occluded by the chessboard.

Figure 19: Re-projection results. (a) All re-projected points on the color panoramic image and colored by
intensity; (b) All re-projected points on the color panoramic image and colored by distance; (c) Re-projected
result on edge extracted image of all points colored by intensity; (d) Re-projected result on edge extracted
image of all points colored by distance.

(a)

(b)

(c)

(d)

16

(a)

(b)

(c)

(d)

17

Figure 20: Zoomed details of re-projected points. (a–d) Re-projected results on chessboard, human, pillar
and car respectively. Each column represents re-projected points colored by intensity and distance on original
RGB images and edges-extracted images. Blue indicates low value and red indicates high value.

(a)

(b)

(c)

Figure 21: Projection of the RGB information from the image to the point cloud with the estimated extrinsic
parameters. (a) An example of the colored point cloud; (b) The zoomed view of the chessboard in (a). The
red points in (a,b) are occluded region caused by the chessboard; (c) The zoomed view of the car in (a).

7 Discussions

•

•

•

•

Automatic segmentation. As the ﬁrst step of the proposed method, automatic segmentation is per-
formed. The current segmentation method is only based on the distance information, which needs
the chessboard to be spatially separated from the surrounding objects. Nevertheless, slight under-
segmentation caused by the stand of the chessboard or over-segmentation caused by the measurement
noise may still occur. The degree of mis-segmentation generated by the segmentation method used in
this work is experimentally shown to be negligible for the corners estimation with the overall optimization
of the proposed method.

Simulation. To evaluate the performance for the corner estimation with the proposed method, we
approximately simulated the points by considering the probability model of the distance as Gaussian
distribution. However, the probability model for the noise of reﬂectance intensity, which is an aspect
for corners estimation, is not considered. Under the inﬂuence of reﬂectance intensity, the real error of
corner estimation is supposed to be higher than the simulated results in this work. This is one of the
reasons why the relative error for corners estimation is about 0.2%, as shown in Figure 13b, and the
ﬁnal re-projection error increased to 0.8% in Section 6.5. For a more precise simulation, the probability
model of the reﬂectance value related to the incidence angle, the distance and the divergence of laser
beam needs to be formulated.

Chessboard. As shown in Figure 11, both the horizontal and vertical intervals increase as the distance
increases. To gather enough information for corner estimation, the side length of one grid in the
chessboard is suggested to be greater than 1.5 times of the theoretical vertical interval at the farthest
place. In addition, the intersection angle between the diagonal line of the chessboard and the z-axis of
the LiDAR is suggested to be less than 15◦ to enable the scanning of as many patterns as possible.

We use the panoramic image for calibration, therefore, to remain unaﬀected by the stitching error, it is
better to place the chessboard in the center of the ﬁeld of view for each camera.

In this work, a chessboard with 6

Correspondence of 3D and 2D corners.
8 patterns is used and the
counting order is deﬁned as starting from the of the chessboard for automatic correspondence. To make
the “lower left” identiﬁed correctly, the chessboard should be captured to make the “lower left” of the
real chessboard be same with that of chessboard in the image during the data acquisition. Also, the
direction of z-axis of the two sensors should be almost consistent shown as in Figure 9b. However, these
restrictions can be released with the introduction of asymmetrical patterns in practical use.

∼

8 Conclusions and Future Works

In this work, we proposed a novel and fully automatic reﬂectance intensity based calibration method for LiDAR
and panoramic camera system. Compared to existing methods, we make use of the corners information of the
chessboard’s point cloud instead of the edges information. Corners of the sparse and noisy chessboard’s point
cloud are estimated by solving the optimization problem with the intensity information. After the correspon-
dence of corners both on the image and in the point cloud, the extrinsic transformation matrix is generated
by solving the nonlinear optimization problem. To evaluate the performance of the corner estimation from the
point cloud, we simulated the points and compared the estimated corners with the ground truth. We applied
the proposed method to an equipment set consisting of a Velodyne LiDAR sensor and a Ladybug3 panoramic

18

camera. Quantitative evaluation of the accuracy of the proposed method was performed with a proposed
intensity-based re-projection error metric. The re-projected results were veriﬁed by qualitative evaluation. The
Python implementation of the proposed method can be downloaded from https://github.com/mfxox/ILCC.

In this work we evaluate the proposed method only with the Velodyne LiDAR HDL-32e sensor, we will
evaluate on more types of sensor in the future. In practical 3D color mapping applications with the fusion of
two sensor modalities , occlusion due to the diﬀerence in views must be addressed in the future. In addition,
we aim to implement an online calibration without any information about the correct matrix based on the
segmentation of point cloud according to both scanline discontinuity and reﬂectance intensity.

References

[1] A. Mastin, J. Kepner, and J. Fisher, “Automatic registration of LIDAR and optical images of urban
scenes,” in 2009 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Institute of
Electrical and Electronics Engineers (IEEE), jun 2009.

[2] N. PAPARODITIS, J.-P. PAPELARD, B. CANNELLE, A. DEVAUX, B. SOHEILIAN, N. DAVID, and
E. HOUZAY, “Stereopolis ii: A multi-purpose and multi-sensor 3d mobile mapping system for street
visualisation and 3d metrology,” Revue fran¸caise de photogramm´etrie et de t´el´ed´etection, no. 200, pp. 69–
79, 2012.

[3] M. Szarvas, U. Sakai, and J. Ogata, “Real-time pedestrian detection using LIDAR and convolutional
neural networks,” in 2006 IEEE Intelligent Vehicles Symposium (IV), Institute of Electrical and Electronics
Engineers (IEEE).

[4] C. Premebida and U. Nunes, “Fusing LIDAR, camera and semantic information: A context-based ap-
proach for pedestrian detection,” The International Journal of Robotics Research (IJRR), vol. 32, pp. 371–
384, mar 2013.

[5] J. Schlosser, C. K. Chow, and Z. Kira, “Fusing LIDAR and images for pedestrian detection using convo-
lutional neural networks,” in 2016 IEEE International Conference on Robotics and Automation (ICRA),
Institute of Electrical and Electronics Engineers (IEEE), may 2016.

[6] J. Levinson and S. Thrun, “Automatic online calibration of cameras and lasers,” in Robotics: Science

and Systems IX, Robotics: Science and Systems Foundation, jun 2013.

[7] Z. Taylor, J. Nieto, and D. Johnson, “Multi-modal sensor calibration using a gradient orientation mea-

sure,” Journal of Field Robotics (JFR), vol. 32, pp. 675–695, jun 2014.

[8] G. Pandey, J. R. McBride, S. Savarese, and R. M. Eustice, “Automatic extrinsic calibration of vision
and lidar by maximizing mutual information,” Journal of Field Robotics (JFR), vol. 32, pp. 696–722, sep
2014.

[9] F. M. Mirzaei, D. G. Kottas, and S. I. Roumeliotis, “3d LIDAR–camera intrinsic and extrinsic calibration:
Identiﬁability and analytical least-squares-based initialization,” International Journal of Robotics Research
(IJRR), vol. 31, pp. 452–467, apr 2012.

[10] Y. Park, S. Yun, C. Won, K. Cho, K. Um, and S. Sim, “Calibration between color camera and 3d LIDAR

instruments with a polygonal planar board,” Sensors, vol. 14, pp. 5333–5353, mar 2014.

[11] A.-I. Garca-Moreno, D.-E. Hernandez-Garca, J.-J. Gonzalez-Barbosa, A. Ramrez-Pedraza, J. B. Hurtado-
Ramos, and F.-J. Ornelas-Rodriguez, “Error propagation and uncertainty analysis between 3d laser scanner
and camera,” Robotics and Autonomous Systems, vol. 62, no. 6, pp. 782 – 793, 2014.

[12] M. J. D. Powell, “An eﬃcient method for ﬁnding the minimum of a function of several variables without

calculating derivatives,” The Computer Journal, vol. 7, pp. 155–162, feb 1964.

[13] L. Kneip, H. Li, and Y. Seo, “UPnP: An optimal o(n) solution to the absolute pose problem with universal
applicability,” in European Conference on Computer Vision (ECCV), pp. 127–142, Springer Nature, 2014.

[14] K. Levenberg, “A method for the solution of certain non-linear problems in least squares,” Quarterly of

Applied Mathematics, vol. 2, pp. 164–168, jul 1944.

[15] D. W. Marquardt, “An algorithm for least-squares estimation of nonlinear parameters,” Journal of the

society for Industrial and Applied Mathematics, vol. 11, no. 2, pp. 431–441, 1963.

19

[16] Q. Zhang and R. Pless, “Extrinsic calibration of a camera and laser range ﬁnder (improves camera
calibration),” in 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),
Institute of Electrical and Electronics Engineers (IEEE).

[17] R. Unnikrishnan and M. Hebert, “Fast extrinsic calibration of a laser rangeﬁnder to a camera,” 2005.

[18] G. Pandey, J. McBride, S. Savarese, and R. Eustice, “Extrinsic calibration of a 3d laser scanner and an

omnidirectional camera,” IFAC Proceedings Volumes, vol. 43, no. 16, pp. 336–341, 2010.

[19] G. Pandey, J. R. McBride, and R. M. Eustice, “Ford campus vision and lidar data set,” The International

Journal of Robotics Research (IJRR), vol. 30, pp. 1543–1552, nov 2011.

[20] D. Scaramuzza, A. Harati, and R. Siegwart, “Extrinsic self calibration of a camera and a 3d laser range
ﬁnder from natural scenes,” in 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems
(IROS), IEEE, oct 2007.

[21] P. Moghadam, M. Bosse, and R. Zlot, “Line-based extrinsic calibration of range and image sensors,” in

2013 IEEE International Conference on Robotics and Automation, IEEE, may 2013.

[22] X. Gong, Y. Lin, and J. Liu, “3d lidar-camera extrinsic calibration using an arbitrary trihedron,” Sensors,

vol. 13, no. 2, pp. 1902–1918, 2013.

[23] A. Geiger, F. Moosmann, O. Car, and B. Schuster, “Automatic camera and range sensor calibration
using a single shot,” in IEEE International Conference on Robotics and Automation (ICRA), Institute of
Electrical and Electronics Engineers (IEEE), may 2012.

[24] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun, “Vision meets robotics: The KITTI dataset,” The Inter-

national Journal of Robotics Research (IJRR), vol. 32, pp. 1231–1237, aug 2013.

[25] G. Atanacio-Jim´enez, J.-J. Gonz´alez-Barbosa, J. B. Hurtado-Ramos, F. J. Ornelas-Rodr´ıguez, H. Jim´enez-
Hern´andez, T. Garc´ıa-Ramirez, and R. Gonz´alez-Barbosa, “LIDAR velodyne HDL-64e calibration using
pattern planes,” International Journal of Advanced Robotic Systems, vol. 8, p. 59, nov 2011.

[26] Z. Zhang, “A ﬂexible new technique for camera calibration,” IEEE Transactions on Pattern Analysis and

Machine Intelligence (TPAMI), vol. 22, no. 11, pp. 1330–1334, 2000.

[27] D. Scaramuzza, A. Martinelli, and R. Siegwart, “A toolbox for easily calibrating omnidirectional cameras,”
in 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IEEE, oct 2006.

[28] T. Rabbani, F. Van Den Heuvel, and G. Vosselmann, “Segmentation of point clouds using smoothness
constraint,” International Archives of the Photogrammetry, Remote Sensing and Spatial Information
Sciences (ISPRS), vol. 36, no. 5, pp. 248–253, 2006.

[29] M. A. Fischler and R. C. Bolles, “Random sample consensus: A paradigm for model ﬁtting with ap-
plications to image analysis and automated cartography,” Commun. ACM, vol. 24, pp. 381–395, June
1981.

[30] W. Wang, K. Sakurada, and N. Kawaguchi, “Incremental and enhanced scanline-based segmentation
method for surface reconstruction of sparse LiDAR data,” Remote Sensing, vol. 8, p. 967, nov 2016.

[31] Velodyne LiDAR, Inc, “Hdl-32e user’s manual,” 2012.

[32] I. Jolliﬀe, Principal component analysis. Wiley Online Library, 2002.

[33] E. Jones, T. Oliphant, P. Peterson, et al., “SciPy: Open source scientiﬁc tools for Python.” http:

//www.scipy.org, 2001–.

[34] M. Ruﬂi, D. Scaramuzza, and R. Siegwart, “Automatic detection of checkerboards on blurred and distorted
images,” in IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Institute of
Electrical and Electronics Engineers (IEEE), sep 2008.

[35] L. Kneip and P. Furgale, “Opengv: A uniﬁed and generalized approach to real-time calibrated geometric
vision,” in 2014 IEEE International Conference on Robotics and Automation (ICRA), pp. 1–8, May 2014.

[36] Point Grey Research, Inc, “Technical application note (tan2012009): Geometric vision using ladybug R(cid:13)

cameras,” 2012.

20

7
1
0
2
 
g
u
A
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
4
1
5
5
0
.
8
0
7
1
:
v
i
X
r
a

Reﬂectance Intensity Assisted Automatic and Accurate Extrinsic
Calibration of 3D LiDAR and Panoramic Camera Using a Printed
Chessboard

Weimin Wang∗1, Ken Sakurada†1, and Nobuo Kawaguchi‡1

1Nagoya University, Japan

Abstract

This paper presents a novel method for fully automatic and convenient extrinsic calibration of a 3D
LiDAR and a panoramic camera with a normally printed chessboard. The proposed method is based on
the 3D corner estimation of the chessboard from the sparse point cloud generated by one frame scan
of the LiDAR. To estimate the corners, we formulate a full-scale model of the chessboard and ﬁt it to
the segmented 3D points of the chessboard. The model is ﬁtted by optimizing the cost function under
constraints of correlation between the reﬂectance intensity of laser and the color of the chessboard’s
patterns. Powell’s method is introduced for resolving the discontinuity problem in optimization. The
corners of the ﬁtted model are considered as the 3D corners of the chessboard. Once the corners of the
chessboard in the 3D point cloud are estimated, the extrinsic calibration of the two sensors is converted
to a 3D-2D matching problem. The corresponding 3D-2D points are used to calculate the absolute
pose of the two sensors with Uniﬁed Perspective-n-Point (UPnP). Further, the calculated parameters are
regarded as initial values and are reﬁned using the Levenberg-Marquardt method. The performance of the
proposed corner detection method from the 3D point cloud is evaluated using simulations. The results
of experiments, conducted on a Velodyne HDL-32e LiDAR and a Ladybug3 camera under the proposed
re-projection error metric, qualitatively and quantitatively demonstrate the accuracy and stability of the
ﬁnal extrinsic calibration parameters.

1 Introduction

A combination of the Light Detection And Ranging (LiDAR) sensor and the panoramic camera has been
widely utilized for deriving the beneﬁts of color as well as depth information. Two typical examples in which
the combination is used are 3D mapping and model generation, which use the LiDAR sensor and the color
and the texture information of images [1, 2], and the improvement of the pedestrian detection accuracy in
images using the distance information obtained from the LiDAR [3, 4, 5]. The ﬁrst and critical step for fusing
multi-modal data from the two devices is the accurate and convenient extrinsic calibration.

The process of the extrinsic calibration between the LiDAR and the camera involves the calculation of
a proper transformation matrix to align the coordinate systems of the two sensors. This process has been
studied for many years in the ﬁelds of both robotics and computer vision. Extrinsic calibration methods can
be classiﬁed into target-based methods and non-target methods. The focus of the target-based methods is
to ﬁnd corresponding features of the common target from multi-modal data. Non-target methods estimate
the transformation matrix by maximizing the correlation of mutual information in multi-modal data, such as
edges in images and discontinuity of the scanline in the point cloud [6, 7], as well as luminance of images and
reﬂectance of the point cloud [8]. In this work, we focus on the target-based extrinsic calibration.

For target-based calibration, the conventional method involves ﬁnding the vertices of a polygonal board,
which can be a chessboard or a triangular board, both in the point cloud obtained by the LiDAR and the
image captured by the camera either manually or automatically [9, 10, 11]. The vertices are estimated by
constructing the convex hull of the extracted board’s point cloud. However, the vertices only include the
geometric features of the target board’s outer contour, which are formed by the discontinuity of the scanlines,
while the information inside the counter is not used. To make full use of the information acquired by the
LiDAR, the “inner texture” of the point cloud, i.e., the reﬂectance intensity, which is also derived from the

∗Corresponding Author: weimin@ucl.nuee.nagoya-u.ac.jp
†sakurada@nagoya-u.jp
‡kawaguti@nagoya-u.jp

1

LiDAR sensor, is used. Unlike the approach in [8], we utilize the reﬂectance intensity to estimate the corners
of the chessboard from the 3D point cloud. If the corners of the 3D point cloud are identiﬁed, the extrinsic
calibration is converted to a 3D-2D matching problem.

The idea of the estimation of corners from the point cloud is based on the fact that the intensity of white
patterns diﬀers from that of black patterns, as seen in Figure 1. Figure 1a shows a point cloud; colors are
representatives of the intensity. Figure 1b shows the zoomed-in part of the chessboard shown in Figure 1c, in
which the change in reﬂectance intensity between the diﬀerent patterns can be observed. However, the noise
and sparsity of the point cloud present a challenge. To address this challenge, we propose a novel method
that ﬁts a chessboard model to the chessboard’s point cloud, and we also introduce Powell’s method [12] for
optimizing a deﬁned cost function to obtain the ﬁtting solution. After the corners of the chessboard in the
3D point cloud are estimated, the initial value of the transformation matrix is calculated using the Uniﬁed
Perspective-n-Point (UPnP) method [13]. The initial value is then applied to reﬁne the result by using the
nonlinear least squares optimization with the Levenberg-Marquardt (LM) method [14, 15]. We evaluate the
proposed method by using data obtained from a Velodyne HDL-32e LiDAR sensor and a FLIR Ladybug3
panoramic camera under the proposed reﬂectance intensity-based re-projection error metrics.

Three main contributions of this work are as follows. First, we propose a method that utilizes the reﬂectance
intensity of the point cloud to estimate the corners of the chessboard’s point cloud. Further, we introduce
Powell’s method to optimize the corner detection problem. To the best of our knowledge, this is the ﬁrst
published work that utilizes the intensity information to estimate the corners from the point cloud. Second,
the quantitative error evaluation of the proposed method is conducted using simulations.
In addition, we
analyze the relationship between the estimation error and other conditions such the measurement error and
the distance of the chessboard. Finally, we provide the Python implementation of the proposed method, which
can be downloaded from https://github.com/mfxox/ILCC.

The rest of this paper is structured as follows. Related works are revisited in Section 2. The overview of the
proposed method and notations used in this work are described in Section 3. In Section 4, detailed procedures
from automatic detection of the chessboard to the corner estimation and optimization are explained. The
corner detection on the panoramic image and the correspondence grouping of the detected corners in modal
In addition, the process of the ﬁnal extrinsic calibration
data for the two devices is described in Section 5.
after the correspondence grouping of the corners is described in this section. Simulation results for corners
estimation in the point cloud and experimental results are described in Section 6. Discussions about this work
and some tips for better extrinsic calibration with the proposed method are made in Section 7. Finally, we
present our conclusions and scope for future work in Section 8.

2 Related Works

Extrinsic calibration of two sensors in the ﬁelds of computer vision as well as robotics is usually achieved by
solving an optimization problem under certain constraints. These constraints can be geometric relationships,
the correspondence of common features, or the correlation of mutual information between two sensor modal-
ities. Related works we revisited during the course of this study are classiﬁed on the basis of these types of
constraints.

2.1 Multiple Views on a Planar Checkerboard

Zhang (2004) ﬁrst published the work about the calibration for a system comprising a 2D LiDAR and a
monocular camera [16]. He extrinsically calibrated the two sensors under the constraint that in the camera
coordinate system, the scalar projection of a vector between the origin and a point on the plane onto the
normal of the plane equals the distance between the origin and the plane. A system for 3D LiDAR sensors
with constraints similar to those in Zhang’s method was proposed and implemented as a MATLAB toolkit in
[17]. This system also made several assumptions, key among those being that the point cloud is dense enough,
which is challenging when using single frame data obtained by mobile LiDAR sensors such as the Velodyne
HDL-32e. Pandey et al. extended the method to a system of Velodyne HDL-64E LiDAR and Ladybug3
panoramic camera, which is similar to the set we used for this work [18]. This method was applied to the Ford
Campus Dataset [19]. Mirzaei et al. (2012) subsequently proposed a method for both intrinsic and extrinsic
calibration in [9].

2.2 Multiple Geometry Elements

The extrinsic calibration can also be performed if common geometry features like points, line segments, or
planes are extracted from the data obtained by the two sensors and the correspondence of features from the

2

(a)

(b)

Figure 1: Data from an identical scene captured by the LiDAR sensor and the panoramic camera. (a) The
points are colored by the reﬂectance intensity (blue indicates low intensity, red indicates high intensity); (b)
The zoomed chessboard. We can see the changes in reﬂection intensity of the point cloud between the white
and black patterns; (c) The panoramic image of the same scene.

two modalities are built. Scaramuzza et al. proposed a method based on the point correspondences [20]. Once
the point correspondences are known, the transformation matrix can be calculated using the methods for PnP
(Perspective n Points) problems. However, it is diﬃcult to manually identify the corresponding 3D point
features accurately in point cloud, especially for a sparse point cloud. To overcome this drawback, Moghadam
et al. proposed a method based on automatically extracted 2D and 3D lines [21]. However, this approach
requires the user to manually determine the correspondence of lines. Gong et al. proposed a method under the
plane-to-plane constraints using a trihedral object, which also requires human intervention for plane selection
[22]. There are also some methods that automatically extract feature points, such as vertices of a polygonal
planar checkerboard, from the LiDAR data. Nevertheless, these approaches require either manual operation
for feature points selection from the image [10] or customized checkerboard for feature points generation in
the point cloud [11]. Geiger et al. proposed an automatic method for extrinsic calibration with one shot of
multiple checkerboards in [23]. This approach recovers the 3D structure from the detected corners in images.
Then the calibration is performed under the constraints that planes of the chessboards recovered from the
images should coincide with the planes detected from the LiDAR data. This method was applied for extrinsic
calibration between the cameras and the LiDAR sensor in KITTI Dataset [24]. However, to recover the 3D
structure from corners of diﬀerent chessboards, the cameras require stereo conﬁguration for suﬃcient common
ﬁeld of view of the chessboards. This is challenging for panoramic camera like Ladybug3 we use in this work.
Geiger’s method for corner detection in images showed robustness from the experimental results, and hence
we also apply it for corners detection from the panoramic images in this work.

2.3 Correlation of Mutual Information

The abovementioned methods require either artiﬁcial observation objects (chessboards or triangular boards)
or user intervention (features or correspondence selection). This is inconvenient for applications that need
frequent extrinsic calibration like autonomous driving cars, in which case the relative pose may drift due to the
vibration. To solve this problem, several online calibration methods are proposed. These methods are generally
based on the maximization of the mutual information (MI), such as edges in images and discontinuity of the
scanline in the point cloud or luminance of images and reﬂectance intensity of the point cloud [6, 8, 7].
However, online calibration methods remain diﬃcult to apply with poor initializations. This means that the
pre-knowledge of a roughly accurate initial guess, which maybe estimate using the oﬀ-line calibration method

(c)

3

or manual measurement, is necessary.

2.4 Our Approach

In our proposed method for extrinsic calibration, we also applied constraints by obtaining corresponding feature
points on a printed chessboard. This method belongs to the constraints on multiple geometry elements.
However, unlike the approaches mentioned above, we use the corners instead of the vertices of the chessboard’s
point cloud. To estimate the corners of the point cloud, we formulate a cost function under the constraint
that the 3D points with high reﬂectance intensity must lie on the white patterns of the chessboard and vice
versa. Once the corners are detected in both multi-modal data, the correspondences are further made in a
predeﬁned order. Initial parameters can be obtained using the UPnP method [13] on the corresponding corners
and further reﬁned using the Levenberg-Marquardt method [14, 15]. Our method is fully automatic and thus
dose not require user intervention in the whole process from the detection of the chessboard, corner detection,
the correspondence of the corners, to the ﬁnal optimization.

A combination of a Velodyne HDL-32e LiDAR sensor and a Ladybug3 panoramic camera is used for
experiments in this work. There are several studies on the intrinsic calibration of the 3D LiDAR sensor [25, 9]
and the panoramic camera [26, 27]. In the remainder of this paper, we assume that before the process of the
extrinsic calibration, both the LiDAR and the panoramic cameras have been intrinsically calibrated from the
factory setting.

3 Overview and Notations
3.1 Overview

The overview of the proposed method is illustrated in Figure 2. First, the point cloud obtained from the LiDAR
is segmented into multiple parts. The point cloud of the chessboard is identiﬁed from within the segments
based on the characters of the segment. The corners of the chessboard in the point cloud are estimated by
minimizing a deﬁned cost function. On the other hand, corners of the chessboard in the image are detected
using an existing method. Correspondence of the corners is built based on the predeﬁned counting order.
The corresponding pairs are then used to estimate an initial value of the transformation matrix by solving an
absolute pose problem. Finally, the value is reﬁned by optimizing a proposed nonlinear cost function.

Figure 2: Overview of the proposed method.

3.2 Notations

For the convenience of explanation, the following notations are used in this paper.

pi = (xi, yi, zi)T : coordinates of a 3D point.

P =

p1, p2, . . . , pn
{

}

: set of n 3D points.

t = (tx, ty, tz)T : the translation vector.

R(θ) = Rz(θz)Ry(θy)Rx(θx): rotation matrix.

•

•

•

•

•

•

4

θ = (θx, θy, θz)T : rotation angle vector whose element corresponds to the rotation angle along x-, y-,
z-axis respectively.

Tr(θ, t, pi) = R(θ)pi + t:
translation vector t.

function that transforms the 3D point pi with the angle vector θ and

: set of estimated 3D corner points of the chessboard from the point cloud. N

ˆpi = Tr(θ, t, pi): transformed point of pi.

Pc =
is the number of the corners in the chessboard.

2, . . . , pc

1, pc
pc

N }

{

xi = (ui, vi)T : coordinates of 2D pixel.

•

•

•

•

Xc =

1, xc
xc
{

2, . . . , xc

N }

: set of detected 2D corner pixels of the chessboard from the image.

4 Corner Estimation from the Point Cloud

This section explains the detailed process of corner estimation from one frame of the point cloud data obtained
by the LiDAR sensor. All concerned coordinates are located in the LiDAR coordinate system in this section.

4.1 Automatic Detection of the Chessboard

This subsection describes the procedure of automatic extraction of the points that are reﬂected from the
chessboard. The points discussed in this subsection refer to all points in one frame of the point cloud.

4.1.1 Segmentation of the Point Cloud

Region growing [28] is often used to segment the point cloud. Region growing estimates the curvature value
and the normal vector of each point based on the plane constructed by its kNN points. Then the method
clusters the points according to the Euclidean distance and the angle of normal vectors of points. RANdom
Sample Consensus (RANSAC) [29] is also used for the shape extraction. For example, the RANSAC of the
planar model is applied for the plane ﬁtting and extraction from the point cloud. However, both methods
encounter challenges while processing the sparse and non-uniformly distributed point cloud, which may be
generated by a single frame scanning of the mobile LiDAR sensor like Velodyne HDL-32e in this work.

The scanline-based segmentation methods are suitable for processing this kind of point cloud, such as the
method in [30]. This method ﬁrst cluster a single frame of the point cloud into scanline segments according to
change of distance and direction between successive points along the scan direction. Then, scanline segments
are agglomerated into object segments based on their similarity. This method showed stable segmentation
result from the experimental results and thus we apply it for segmentation in this work.

4.1.2 Finding the Chessboard from the Segments

After the segmentation of the point cloud, the segment of the chessboard needs to be correctly identiﬁed.
We use characteristics such as the planarity, bounds, and points distribution of segments as the conditions for
ﬁltering the segments automatically.

To reduce the computational cost, we ﬁrst ﬁlter out some improbable segments based on the theoretical
number ntheo of points of a segment deﬁned in Equation (1). ntheo represents the theoretically maximum
number of points and calculated from the vertical and horizontal angle of the LiDAR when the chessboard is
parallel to the rotation axis of Velodyne, as shown in Figure 3. Segments in which the number of points fall
within the interval [(cid:15)theontheo, ntheo] are further processed, where (cid:15)theo is a coeﬃcient and empirically set to
0.5 for this study.

ntheo

dW
2r sin( ∆h

2 ) (cid:99)(cid:98)

dH
2r sin( ∆v

2 ) (cid:99)

≈ (cid:98)

(1)

where dW and dH are the width and height of the chessboard, r is the Euclidean distance from the segment’s
centroid to the LiDAR sensor, ∆h and ∆v represent horizontal and vertical angular resolution, which are 0.16◦
and 1.33◦ for Velodyne HDL-32e [31] respectively,

represents the ceiling truncation of a real number.

The planarity of the segment is veriﬁed using the Principle Components Analysis (PCA) [32] method.
The matrix Mn×3 consisting of all points in the segment is decomposed along three basis vectors Mb =
(µ1, µ2, µ3)T with components ratios λ1, λ2, λ3 on each basis vector. The segment whose least ratio λ3 is
less than 0.01 is considered as a planar object.

For a planar segment, all points in this segment are projected to the estimated plane formed by the
RANSAC method [29] for further veriﬁcation. Fitted points are denoted as Mn×3,f . As the ﬁnal step, the
range of the bounding box and the uniformity of the distribution are checked. For manipulation convenience,
we rotate coordinates of all points to the chessboard plane and align λ1, λ2 to the x-axis and y-axis with

(cid:98)(cid:99)

5

Figure 3: Angular resolution of the used LiDAR in
this work. The left ﬁgure is the top view and the
right one is the side view of the LiDAR and the chess-
board .

(a)

(b)

Figure 4: Uniformity of the points distribution.

(2)

(3)

the Equation (2). Then the centroid of the chessboard’s points Mn×3,f r is translated to the origin using of
Equation (3).

Mn×3,f r = (Mb

M

(cid:124)
(cid:124)
n×3,f )

·

Mn×3,f rt = Mn×3,f r

mean(Mn×3,f r)

−
After the transformation by Equations (2) and (3), the planar segment is transformed to the XOY plane and
the centroid of the segment coincides with the origin point. The segment with the bounding box within [0.8dW ,
1.6dW ] and [0.8dH , 1.6dH ] is considered as a potential chessboard. Uniformity of the point distribution is
determined by the diﬀerence between the points distribution in four equally divided regions, which is illustrated
in Figure 4. Two sample segments that fall in the range of the threshold bounding box are shown in Figure 4.
The dashed lines divide the theoretical region of the chessboard into four equal parts. The diﬀerence of the
points’ number in each part is used for uniformity check. For example, as the diﬀerence of points’ number in
each part in Figure 4a is smaller then that in Figure 4b, Figure 4a has better uniformity than Figure 4b. Let
us assume that the maximum number of points in the regions is nmax, and minimum is nmin. The uniformity
nmax−nmin
[0, 1), where nall is the total number of points
of the distribution is calculated as (cid:15)norm = 1
nall
in the segment. A large (cid:15)norm value indicates that the points are distributed normally. The threshold for
uniformity (cid:15)norm is set to 0.85.

−

∈

If more than one segment satisﬁes the above conditions, the segment with greater uniformity is selected.
(The super-

The set of points in the detected chessboard’s segment is denoted as PM =
script “M ” refers to the chessboard Marker).

2 , . . . , pM
n }

1 , pM
pM

{

This subsection explains the principle and detailed process for estimation of the corners from the point cloud
of the chessboard. The points discussed in this subsection refers to points of the chessboard only.

4.2 Corner Estimation

4.2.1 Model Formulation

After the chessboard points PM are automatically extracted, we utilize the intensity of points to estimate the
3 pattern as shown in Figure 5a.
corners. Without loss of generality, we use a model chessboard with a 2
Figure 5b illustrates theoretical laser-reﬂected points from the chessboard by lasers. The blue points indicate
low intensity reﬂected from black patterns while red points indicate high intensity reﬂected from white patterns.
If we ﬁnd a pose of the model that make the reﬂected points best ﬁt the model (Figure 5c), we can use the
corners (green points in Figure 5d) of the model to represent the corners of the points.

×

In addition, similar to the process in Section 4.1.2, the coordinate system of the chessboard is transformed
to the chessboard plane by rotating with the matrix consisting of three PCA vectors and subtracting the mean
of the rotated points, as shown in Figure 6. Then, we can treat the points as illustrated in Figure 5. However,
for the consistency of further correspondence with corners from images, the directions of principle vectors
µ1, µ2, µ3 are deliberately determined. The conditions for the basis vectors are illustrated in Figure 6:

directions of µ1, µ2, µ3 are deﬁned to obey to the right hand rule.

direction of µ3 (the normal of the chessboard) is deﬁned to point to the side of origin of the LiDAR
coordinate system.

angle between µ1 and x axis of the LiDAR coordinate system is not more than 90◦

•

•

•

6

(a)

(b)

(c)

(d)

Figure 5: The principle used to estimate corners in the points. (a) The chessboard model; (b) The scanned
point cloud of the chessboard. Colors indicate the intensity (blue for low and red for high reﬂectance intensity);
(c) Find a matrix that translates the most 3D points on the corresponding patterns. Green points are estimated
corners; (d) Consider the corners of the chessboard model as the corners of the point cloud.

The rotation matrix MM

XOY P is deﬁned as (µ1, µ2, µ3)T , where directions of µ1, µ2, µ3 satisfy the afore-
mentioned conditions. After the translation tM
XOY P by subtracting the mean of the rotated points, µ1, µ2, µ3
and the center of the original point cloud are transformed to xP -, yP -, zP -axis and the origin plane coordinates
respectively.

Figure 6: Directions of the basis vectors relative to the LiDAR coordinate system. Blue arrow lines in the left
ﬁgure represent the basis vectors decomposed by PCA. After transformation with the basis vectors, chessboard’s
points are mapped to the X P OY P (chessboard plane). Then we can apply the model described in Figure 5.

4.2.2 Correspondence of Intensity and Color

Another problem to solve before the formulation of the cost function is the correspondence between the
reﬂectance intensity and the color of the pattern. There are only two colors in the pattern, black and white.
However, the reﬂectance intensity values distribute discretely, mainly due to the divergence of the laser beam.
Figure 7a shows the scatter plot of the intensity values of a real chessboard’s point cloud. Further, the absolute
value of the reﬂectance intensity is also aﬀected by the distance.

(a)

(b)

Figure 7: Estimated parameters for each frame. (a) Scatter diagram of the intensity for all points in the
chessboard; (b) The histogram of the intensity. RL, RH can be found at the peaks of the two sides.

To process the intensity data adaptively, we deﬁne a range called the gray zone denoted as [τl, τh]. The

7

(4)

(7)

(8)

points with the intensity less than τl are considered as reﬂected from black patterns and those greater than τh
are considered as reﬂected from white patterns. To evaluate the values of τl and τh, the histogram is created
and the bins (RL, RH ) of peaks in both sides of the mean intensity are detected automatically, as shown in
Figure 7b for illustration. The gray zone [τl, τh] is then deﬁned as follows,

(cid:26) τl = (((cid:15)g

τh = (RL + ((cid:15)g

−

1)RL + RH )/(cid:15)g
1)RH )/(cid:15)g

−

where (cid:15)g
2 is a constant. (cid:15)g is set to 2 for corner estimation with enough points (gray zone will be zero and
all points are used) and 4 for error evaluation with enough conﬁdence of the pattern color from the reﬂectance
intensity in this study.

≥

4.2.3 Cost Function and Optimization

After completing the processes explained above, we formulate the cost function for corner estimation. The
cost function is formulated based on the constraints of the correspondence between the intensity and color,
and deﬁned in Equation (5).

Cm =

fg(ri)

fin( ˆpi, G)
{

|

ci

−

|

ˆci

fd( ˆpi, Vi) + [1

fin( ˆpi, G)]fd( ˆpi, G)
}

,

−

ˆpi

∈

M

ˆP

(5)

n
(cid:88)

i

M

}

M

∈

=

PM

M ), pi

Tr(θM , tM , pi
{

where ˆP
is the set of points that are transformed to the XOY plane using
the aforementioned processes, and z coordinates of all points in PM is 0. Namely 3D points are degenerated
to 2D after rotation by the matrix of three PCA vectors. Thus, the transformation parameters along the plane
y , 0]T . ri is the reﬂectance intensity of i-th point. fg(ri) is used
are θM = [0, 0, θM
to determine whether a point falls into the gray zone and is deﬁned in Equation (6). G represents the four
corners of the chessboard and Vi represents the four vertices of the grid corresponding to the i-th point.
(cid:26) 1 :
0 :

z ]T and tM = [tM

fg(ri) =

ri /
∈
else

x , tM

[τl, τh]

(6)

fin( ˆpi, Vi) =

(cid:26) 1 :
0 :

if ˆpi in the polygon with vertices G
else

fd = min(∆x1, ∆x2) + min(∆y1, ∆y2)

fin( ˆpi, Vi) indicates whether the polygon with the vertices Vi contains the point ˆpi. ci is the estimated
color from reﬂectance intensity ri. We deﬁne ci = 0 if ri < τl and ci = 1 if ri > τh. ˆci represents the color of
the pattern the ˆpi falls in. It is deﬁned as 0 for black and 1 for white. We experimentally use L1 distance to
calculate the cost for points that fall in the chessboard or out the chessboard as shown in Figure 8, and the
function fd is deﬁned in Equation (8). Figure 8a shows the situation that a point ˆpi falls in the wrong pattern
constructed by Vi. ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of the pattern and
∆y1, ∆y2 represent the distances to the other two sides. Figure 8b shows the situation that a point falls out
of the chessboard’s region. Similarly, ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of
the chessboard and ∆y1, ∆y2 represent the distances to the other two sides of the chessboard in Figure 8b.
Since the cost function Cm is discontinuous, it is impractical to derive for optimization. Thus, we utilize
the Powell optimization method [12] that needs no derivative. We used the implementation by SciPy [33] in
this work. As mentioned before, the set of chessboard’s points are almost ﬁtted to the chessboard model after
the transformation. Therefore, all three parameters θM
y are initialized with zero when the Powell’s
method is applied.

z , tM

x , tM

5 Extrinsic Calibration Estimation
5.1 Corner Estimation from the Image

There exist many methods for corner detection in perspective images or even in distorted or blurred images
[34, 23]. In this work, we utilize the method in [23] to detect the corners from the panoramic images directly.

5.2 Correspondence of the 3D-2D Corners

After the corners on the images are detected, the detected corners both on the image and in the point cloud
are corresponded by deﬁning the common counting order that starts from left-down side of the chessboard.

8

(a)

(b)

Figure 8: Cost deﬁnition for corner detection in the point cloud. (a) An example of the point falling into
the wrong pattern. The square represents a white pattern of the chessboard; (b) An example of the point
falling out of the chessboard model; (a) describes the ﬁrst term and (b) describes the second term of the cost
function (Equation (5)).

5.3

Initial Value by PnP

With these corresponding 3D-2D pair points, an initial value for nonlinear optimization can be obtained by
estimating the central absolute pose with the UPnP (Uniﬁed Perspective-n-Point) method [13]. We used the
implementation by OpenGV [35].

5.4 Reﬁnement with Nonlinear Optimization

We use the diﬀerence of inclination angle and azimuth angle in the spherical coordinate system as the error
metric for optimization to be independent of the panoramic image projection models. For the i-th 3D-2D pair,
f 2
x2a(xi), where fp2a and fx2a convert a 3D point and a
the residual is calculated as Eerr =
pixel to the inclination angle and azimuth angle, respectively, in the spherical coordinate system.

f 2
p2a( ˆpi)

(cid:113)

−

6 Experimental Results and Error Evaluation

The setup of the sensors and the measurement environment in this work are introduced in Section 6.1. To
evaluate the accuracy of 3D corner detection with the proposed method, simulation results under diﬀerent
conditions are presented in Section 6.2. Then the method is applied to the real data for 3D corner detection
of the chessboard’s point cloud. Some results of detected 3D corners as well as 2D corners of the panoramic
images are shown in Section 6.3. Section 6.4 presents the extrinsic parameters estimated with the 3D-2D
corner correspondences. Finally, quantitative and qualitative evaluations are performed in Sections 6.5 and
6.6 respectively.

6.1 Setup

We setup the system with a Velodyne HDL-32e LiDAR sensor mounted atop a Ladybug3 camera as shown
in Figure 9a. The chessboard used in this work is constructed by 6
8 grids with a side length of 7.5 cm
as shown in Figure 9b. Velodyne rotates at 600 rpm and the resolution of the panoramic image output by
Ladybug3 is set to 8000

6000.

×

In total, we captured 20 frames of the chessboard. For each horizontal camera of the Ladybug3, the

×

chessboard is placed at 4 diﬀerent places. The top and side views of the 20 frames are shown in Figure 10.

6.2 Simulation for Corner Detection Error in the Point Cloud

To evaluate the error of estimated corners from the point cloud, the ground truth is indispensable. However,
it is diﬃcult to obtain ground truth from the real data. Thus, we simulate the scanned point cloud of a
generated chessboard model and record the corners’ coordinates of the chessboard as the ground truth for
evaluation. Subsequently, the error is evaluated by comparing the estimated results with the ground truth.

9

(a)

(b)

Figure 9: Setup. (a) the image of the setup for two sensors; (b) a scene for the data acquisition.

(a)

(b)

Figure 10: Distribution of the 20 chessboard positions. The chessboard is captured by the LiDAR from diﬀerent
heights and angles. The length of the coordinate axis is 1 m. Four groups of colors represent four positions
of the chessboard for each horizontal camera. (a) Top view of the point clouds of the chessboard; (b) Side
view of the point clouds of the chessboard.

6.2.1 Simulation of the Point Cloud

There are many aspects that aﬀect the measured distance and intensity of the points reﬂected from the
chessboard, such as distance, noise, divergence of the laser beam and the pose of the chessboard. The
theoretical interval between two laser beams and two successive points along the scanning are calculated
based on the distance and the LiDAR laser distribution, as shown in Figure 11. The noise is added to the
points along x-, y-, z-axis independently. The probability model of the noise is considered as a Gaussian
distribution. The base line of the deviation σ for noise is empirically set to 0.0016, 0.0016 and 0.01 m with
the mean µ = 0 for each axis. Simulated points are transformed with a rotation matrix and translation vector.
Figure 12 shows some simulated point clouds for diﬀerent noise and distance conditions. The last row
shows the points from real data for comparison. By comparing the front view of the points clouds between the
ﬁrst row and the last row in Figure 12, we can see that the points with baseline noise are similar to the real data.
As for the side view of real data, we see that blue points and red points are generally distributed separately.
This indicates that the noise of distance diﬀers for diﬀerent intensity for real measurements. However, as
explained in Section 4.2.3, since the proposed corners estimation method project all points onto the XOY
plane, the noise along z-axis can be ignored. Thus, the diﬀerence between the simulated data and real data
along z-axis will not aﬀect the error evaluation of the proposed corner estimation method.

6.2.2 Error Results from the Simulation

We applied the proposed method to simulated points with varying noise and distance conditions to estimate the

coordinates of the point cloud. The distance error is calculated
, where ˆpi depicts coordinates
of the estimated corner and pi is the ground truth. Then the relative error is calculated with the unit of
percentage by dividing the side length (7.5 cm in this work) of a pattern in the chessboard. For each noise and
distance condition, we repeat the simulation with diﬀerent random seeds 100 times and calculate the average
and standard deviation. Error results are shown in Figure 13. The horizontal axes represent the simulation

n

√(cid:80)n

i=1 | ˆpi−pi|2

10

(a)

(b)

(c)

(d)

Figure 11: Vertical ﬁeld view of Velodyne HDL-32e and the relationship between interval and distance. (a)
Vertical angles of Velodyne HDL-32e; (b) Vertical ﬁeld of view; (c) Relationship between the horizontal
interval of two adjacent lasers and noise of the point cloud; (d) Relationship between the interval of two
successive points of the scanline and the distance of the chessboard. Red lines in (c,d) show the range of
chessboard’s distance we place in this work.

conditions and the vertical axes represent the relative error. From Figure 13a, we can see that the error and
uncertainty of the estimation increases drastically as the noise of measurement increases. The inﬂuence of
distance on the error is relatively lower than that of noise, as shown in Figure 13b.

6.3 Detected Corners
6.3.1 From the Image

We use the method in [23] to detect the corners in the panoramic image. Some example results are shown
in Figure 14. We can see that all corners are robustly detected. Compared to conventional vertex-based
methods, it is diﬃcult to detect vertices accurately and automatically when the background color is similar to
the color of the planar board (lower left of the chessboard in Figure 14c). However, it can be accurately and
automatically detected if we use the corners as feature points. For the correspondence with the corners from
the point cloud, corners are counted starting from the lower left board.

6.3.2 From the Point Cloud

We applied the proposed corner detection method from the point cloud to real measured data. An example
of the estimated corners is shown in Figure 15. Figure 15a shows the position of the chessboard’s point cloud
and the estimated chessboard model in the LiDAR coordinate system. The zoomed-in image of the chessboard
is shown in Figure 15b. The corners of the chessboard are the estimated corners, which can be calculated
with MM
XOY in Section 4.2.1 and Tr(θM , tM ) in Section 4.2.3. The counting order also starts from
the lower left, which is the same as that in the corners from the correspondence with corners from the image.
From Figure 15b, we can see that most blue points (low intensity) are mapped on the black patterns, and red
points (high intensity) are mapped on the white patterns. This means that the chessboard ﬁts the points well.

XOY , tM

11

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

(l)

(j)

(k)

Figure 12: Front view and side view of chessboard’s point clouds from simulation results and real data. (a–c)
Simulated point clouds with the multiplier 1 at diﬀerent distances; (d–f) Simulated point clouds with the
multiplier 2 at diﬀerent distances; (g–i) Simulated point clouds with the multiplier 3 at diﬀerent distances;
(j–l) Real point clouds at diﬀerent distances.

6.4 Estimated Extrinsic Parameters

The initial and reﬁned transformation parameters with diﬀerent numbers of frames are shown in Figure 16.
As mentioned above, 20 frames are used for this evaluation. The x-axis represents the number of frames used
for the estimation. For example, 5 indicates that the ﬁrst ﬁve frames frame#1
frame#5 are used for the
extrinsic calibration. The frames are indexed as in Table 1 to make the variation of the chessboard’s point
cloud increase in the horizontal direction as the number of frame increase for global optimization. The index
of each camera is deﬁned in [36].

∼

Figure 16 depicts the state from when the parameters start to become stable after the nonlinear reﬁnement
with more than four frames, while some parameters estimated by UPnP are erratic as the number of frames
changes. Generally, there is no signiﬁcant diﬀerence between the results obtained by UPnP and by nonlinear
reﬁnement. The translation value along the z-axis estimated by UPnP is 11.7 cm, which diﬀers from 18.7 cm
obtained using nonlinear reﬁnement. We manually measure the oﬀset between the LiDAR and the panoramic
camera of the set. It is diﬃcult to accurately ﬁnd the center of each sensor, the range of the oﬀset is supposed

12

(a)

(b)

Figure 13: Corner detection error by simulation. The horizontal axes represent diﬀerent simulation conditions
and the vertical axes represent the relative error. Red points represent the mean value and the vertical lines
represent the 3σ range of the results simulated by 100 times at each simulation condition. (a) Relationship
between the error and noise of the point cloud at 1 m. The x axis represent the multiplier for the noise
baseline; (b) Relationship between the error and the distance of the chessboard with the baseline noise.

(a)

(b)

(c)

Figure 14: Detected corners from the panoramic images. (a–c) Example results of detected corners from
images with diﬀerent poses and distances.

(a)

(b)

(c)

Figure 15: Estimated corners of chessboard. (a) The ﬁtted chessboard model of the point cloud in the real
Velobug LiDAR coordinate system; (b) The front view of the zoom checkerboard; (c) The side view of the
zoom checkerboard.

to be in the range between 17 and 20 cm. Thus, the reﬁned result is more accurate.

As a comparison, we also applied Pandey’s online method [8], which also uses laser’s reﬂectance intensity,
to the data in this work. The results under diﬀerent initial guesses are shown in Figure 16. One initial
guess is [10◦, 10◦, 10◦, 10 cm, 10 cm, 10 cm] and the other is [0◦, 0◦, 0◦,
0.17 cm, 18.72
cm] which are almost the accurate parameters. From the comparison of the two methods, we can conclude

0.13 cm,

−

−

13

that the proposed method is more stable and accurate in terms of both rotation and translation. The main
reason why Pandey’s method performed not well with the data in the work is considered that the surrounding
environment is almost static and the increment of the frames does not increase the variance of the data for the
optimization. However, as stated before, the original problem settings of two methods are diﬀerent. Online
calibration methods like Pandey’s are very convenient and can estimate an approximate results if a good initial
value is provided while the proposed methods is target-based, but it can provide accurate and stable extrinsic
calibration result.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 16: Estimated parameters by the proposed method and Pandey’s Mutual Information (MI) method [8]
with diﬀerent initial values as the numbers of frame increases. (a–c) Rotation angle along each axis; (d–f)
Translation along each axis.

Camera Index
Frame Index

0
1,6,11,16

1
2,7,12,17

2
3,8,13,18

3
4,9,14,19

4
5,10,15,20

Table 1: Relationship between the index of the frame and the index of the camera.

6.5 Re-Projection Error

To quantitatively evaluate two groups of estimated parameters, we deﬁne a re-projection error metric based
on intensity, which is similar to Equation (5) except that the error metric is deﬁned on the image plane. To
increase the conﬁdence, only the points that are contained within the polygon of the detected corners on the
images are counted. Moreover, the gray zone of intensity is increased for the same consideration and (cid:15)g in
Equation (4) is set to 4.

For the error calculation, we ﬁrst transform the point cloud of the chessboard with estimated extrinsic
parameters. After mapping all 3D points of the transformed chessboard point cloud at the panoramic image
based on an equirectangular projection model, we calculate the error on the chessboard plane of the panoramic
image. Only the point that is mapped within the quadrilateral region constructed by the four detected corners
on the image is counted, as shown in Figure 17a,b. As the gray zone is identiﬁed, we can classify the mapped
points into white or black colors.
If the estimated color of a mapped point diﬀers from the color of the
quadrilateral it falls in, the error of this point is calculated using Equation (8).

14

(a)

(b)

(c)

Figure 17: Re-projection error calculation and results. (a,b) Shaded quadrilaterals show the regions of black
and white patterns respectively. Points mapped into these regions are counted for error calculation; (c) The
errors for parameters estimated by diﬀerent numbers of frames. The point and vertical line represent the mean
and 3σ range of all errors calculated by applying the estimated parameters to the diﬀerent number of frames.

In the measurement, the farther the chessboard is, the smaller the occupied pixels of chessboard on the
image will be. Because the re-projection error is measured with absolute pixel, the error of farther chessboard
will be relatively smaller. To ensure that the error metric is unaﬀected by distance, we normalize the error
by multiplying the value of the distance with the consideration that the size of an object on the image is
generally proportional to the reciprocal of the distance. Moreover, the “attendance rate” of the point, which
indicates the rate at which points are counted for error calculation, is also taken into account for the overall
re-projection performance. The ﬁnal formula is deﬁned in Equation (9)

e =

Cm
Nc ·

rM

PcNa
PaNc

·

(9)

Here, Cm is the cost function deﬁned in Equation (5), rM is the Euclidean distance of the chessboard, Pa
is the total number of the patterns in the chessboard, Pc is the number of the quadrilaterals constructed by
detected corners for calculating the re-projection error, Na is the points number of chessboard’s point cloud,
Nc is the number of points that fall into the quadrilaterals constructed by detected corners, rM is a factor
of the error caused by the distance and PcNa
is the penalty factor by dividing the “attendance rate”. The
PaNc
“attendance rate” is derived from Nc
, which is the ratio of the average number of point in each pattern
of the region (Figure 17a,b) only counted for error calculation and the average number of point in each pattern
of the whole chessboard.

Pc ÷

Na
Pa

The re-projection error with the metric deﬁned above is shown in Figure 17c. The point and vertical line
represent the mean and 3σ range of all errors calculated by applying the estimated parameters to 20 frames.
The length of one grid of the chessboard in the 4000
8000 panoramic image at 1 m is approximately 100
×
pixels. The back projection error is 0.8 pixel when the optimization begins to converge after 4 frames, and
the relative error to the side length is 0.8%.

6.6 Re-Projection Results

For qualitative evaluation, we apply the ﬁnal extrinsic transformation matrix estimated by the proposed method
to rotate point cloud and project it to the image. The result of re-projected corners is shown in Figure 18.
The large green circles and cyan lines indicate the detected corners. The small pink circles in large green
circles and lines indicate re-projected corners estimated from the point cloud. The large blue and red circles

15

represent the start and end for counting the corners. We can see that the re-projected corners estimated from
the point cloud almost coincide with the corners detected in the image.

Figure 18: Re-projected corners and points of the chessboard (best viewed when zoomed in). Big green circles
and cyan lines indicate the detected corners. Small pink circles in big green circles and pink lines indicate
re-projected corners estimated from the point cloud. Big blue and red circles represent the start and end for
counting the corners. Blue points indicate low reﬂectance intensity and red points indicate high reﬂectance
intensity.

Re-projection results of all points within one frame are as listed in Figures 19–21. For better visualization,
points colored according to the intensity and distance are mapped to the original RGB images and the edges-
extracted images, respectively. Figure 19 shows the overall results on the panoramic image. Details of individual
objects are shown in Figure 20. We can see that the bounds generated by the change of re-projected 3D points
with diﬀerent intensities and distance ﬁt the edges of the image exactly, for example the fourth images in
Figure 20a,b. Some inconsistencies occur due to the occlusion, for example the lower left and upper right
parts of the chessboard in Figure 20a and the upper part of the human in Figure 20b. The ﬁnal colored point
cloud is shown in Figure 21. Red points indicate the region occluded by the chessboard.

Figure 19: Re-projection results. (a) All re-projected points on the color panoramic image and colored by
intensity; (b) All re-projected points on the color panoramic image and colored by distance; (c) Re-projected
result on edge extracted image of all points colored by intensity; (d) Re-projected result on edge extracted
image of all points colored by distance.

(a)

(b)

(c)

(d)

16

(a)

(b)

(c)

(d)

17

Figure 20: Zoomed details of re-projected points. (a–d) Re-projected results on chessboard, human, pillar
and car respectively. Each column represents re-projected points colored by intensity and distance on original
RGB images and edges-extracted images. Blue indicates low value and red indicates high value.

(a)

(b)

(c)

Figure 21: Projection of the RGB information from the image to the point cloud with the estimated extrinsic
parameters. (a) An example of the colored point cloud; (b) The zoomed view of the chessboard in (a). The
red points in (a,b) are occluded region caused by the chessboard; (c) The zoomed view of the car in (a).

7 Discussions

•

•

•

•

Automatic segmentation. As the ﬁrst step of the proposed method, automatic segmentation is per-
formed. The current segmentation method is only based on the distance information, which needs
the chessboard to be spatially separated from the surrounding objects. Nevertheless, slight under-
segmentation caused by the stand of the chessboard or over-segmentation caused by the measurement
noise may still occur. The degree of mis-segmentation generated by the segmentation method used in
this work is experimentally shown to be negligible for the corners estimation with the overall optimization
of the proposed method.

Simulation. To evaluate the performance for the corner estimation with the proposed method, we
approximately simulated the points by considering the probability model of the distance as Gaussian
distribution. However, the probability model for the noise of reﬂectance intensity, which is an aspect
for corners estimation, is not considered. Under the inﬂuence of reﬂectance intensity, the real error of
corner estimation is supposed to be higher than the simulated results in this work. This is one of the
reasons why the relative error for corners estimation is about 0.2%, as shown in Figure 13b, and the
ﬁnal re-projection error increased to 0.8% in Section 6.5. For a more precise simulation, the probability
model of the reﬂectance value related to the incidence angle, the distance and the divergence of laser
beam needs to be formulated.

Chessboard. As shown in Figure 11, both the horizontal and vertical intervals increase as the distance
increases. To gather enough information for corner estimation, the side length of one grid in the
chessboard is suggested to be greater than 1.5 times of the theoretical vertical interval at the farthest
place. In addition, the intersection angle between the diagonal line of the chessboard and the z-axis of
the LiDAR is suggested to be less than 15◦ to enable the scanning of as many patterns as possible.

We use the panoramic image for calibration, therefore, to remain unaﬀected by the stitching error, it is
better to place the chessboard in the center of the ﬁeld of view for each camera.

In this work, a chessboard with 6

Correspondence of 3D and 2D corners.
8 patterns is used and the
counting order is deﬁned as starting from the of the chessboard for automatic correspondence. To make
the “lower left” identiﬁed correctly, the chessboard should be captured to make the “lower left” of the
real chessboard be same with that of chessboard in the image during the data acquisition. Also, the
direction of z-axis of the two sensors should be almost consistent shown as in Figure 9b. However, these
restrictions can be released with the introduction of asymmetrical patterns in practical use.

∼

8 Conclusions and Future Works

In this work, we proposed a novel and fully automatic reﬂectance intensity based calibration method for LiDAR
and panoramic camera system. Compared to existing methods, we make use of the corners information of the
chessboard’s point cloud instead of the edges information. Corners of the sparse and noisy chessboard’s point
cloud are estimated by solving the optimization problem with the intensity information. After the correspon-
dence of corners both on the image and in the point cloud, the extrinsic transformation matrix is generated
by solving the nonlinear optimization problem. To evaluate the performance of the corner estimation from the
point cloud, we simulated the points and compared the estimated corners with the ground truth. We applied
the proposed method to an equipment set consisting of a Velodyne LiDAR sensor and a Ladybug3 panoramic

18

camera. Quantitative evaluation of the accuracy of the proposed method was performed with a proposed
intensity-based re-projection error metric. The re-projected results were veriﬁed by qualitative evaluation. The
Python implementation of the proposed method can be downloaded from https://github.com/mfxox/ILCC.

In this work we evaluate the proposed method only with the Velodyne LiDAR HDL-32e sensor, we will
evaluate on more types of sensor in the future. In practical 3D color mapping applications with the fusion of
two sensor modalities , occlusion due to the diﬀerence in views must be addressed in the future. In addition,
we aim to implement an online calibration without any information about the correct matrix based on the
segmentation of point cloud according to both scanline discontinuity and reﬂectance intensity.

References

[1] A. Mastin, J. Kepner, and J. Fisher, “Automatic registration of LIDAR and optical images of urban
scenes,” in 2009 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Institute of
Electrical and Electronics Engineers (IEEE), jun 2009.

[2] N. PAPARODITIS, J.-P. PAPELARD, B. CANNELLE, A. DEVAUX, B. SOHEILIAN, N. DAVID, and
E. HOUZAY, “Stereopolis ii: A multi-purpose and multi-sensor 3d mobile mapping system for street
visualisation and 3d metrology,” Revue fran¸caise de photogramm´etrie et de t´el´ed´etection, no. 200, pp. 69–
79, 2012.

[3] M. Szarvas, U. Sakai, and J. Ogata, “Real-time pedestrian detection using LIDAR and convolutional
neural networks,” in 2006 IEEE Intelligent Vehicles Symposium (IV), Institute of Electrical and Electronics
Engineers (IEEE).

[4] C. Premebida and U. Nunes, “Fusing LIDAR, camera and semantic information: A context-based ap-
proach for pedestrian detection,” The International Journal of Robotics Research (IJRR), vol. 32, pp. 371–
384, mar 2013.

[5] J. Schlosser, C. K. Chow, and Z. Kira, “Fusing LIDAR and images for pedestrian detection using convo-
lutional neural networks,” in 2016 IEEE International Conference on Robotics and Automation (ICRA),
Institute of Electrical and Electronics Engineers (IEEE), may 2016.

[6] J. Levinson and S. Thrun, “Automatic online calibration of cameras and lasers,” in Robotics: Science

and Systems IX, Robotics: Science and Systems Foundation, jun 2013.

[7] Z. Taylor, J. Nieto, and D. Johnson, “Multi-modal sensor calibration using a gradient orientation mea-

sure,” Journal of Field Robotics (JFR), vol. 32, pp. 675–695, jun 2014.

[8] G. Pandey, J. R. McBride, S. Savarese, and R. M. Eustice, “Automatic extrinsic calibration of vision
and lidar by maximizing mutual information,” Journal of Field Robotics (JFR), vol. 32, pp. 696–722, sep
2014.

[9] F. M. Mirzaei, D. G. Kottas, and S. I. Roumeliotis, “3d LIDAR–camera intrinsic and extrinsic calibration:
Identiﬁability and analytical least-squares-based initialization,” International Journal of Robotics Research
(IJRR), vol. 31, pp. 452–467, apr 2012.

[10] Y. Park, S. Yun, C. Won, K. Cho, K. Um, and S. Sim, “Calibration between color camera and 3d LIDAR

instruments with a polygonal planar board,” Sensors, vol. 14, pp. 5333–5353, mar 2014.

[11] A.-I. Garca-Moreno, D.-E. Hernandez-Garca, J.-J. Gonzalez-Barbosa, A. Ramrez-Pedraza, J. B. Hurtado-
Ramos, and F.-J. Ornelas-Rodriguez, “Error propagation and uncertainty analysis between 3d laser scanner
and camera,” Robotics and Autonomous Systems, vol. 62, no. 6, pp. 782 – 793, 2014.

[12] M. J. D. Powell, “An eﬃcient method for ﬁnding the minimum of a function of several variables without

calculating derivatives,” The Computer Journal, vol. 7, pp. 155–162, feb 1964.

[13] L. Kneip, H. Li, and Y. Seo, “UPnP: An optimal o(n) solution to the absolute pose problem with universal
applicability,” in European Conference on Computer Vision (ECCV), pp. 127–142, Springer Nature, 2014.

[14] K. Levenberg, “A method for the solution of certain non-linear problems in least squares,” Quarterly of

Applied Mathematics, vol. 2, pp. 164–168, jul 1944.

[15] D. W. Marquardt, “An algorithm for least-squares estimation of nonlinear parameters,” Journal of the

society for Industrial and Applied Mathematics, vol. 11, no. 2, pp. 431–441, 1963.

19

[16] Q. Zhang and R. Pless, “Extrinsic calibration of a camera and laser range ﬁnder (improves camera
calibration),” in 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),
Institute of Electrical and Electronics Engineers (IEEE).

[17] R. Unnikrishnan and M. Hebert, “Fast extrinsic calibration of a laser rangeﬁnder to a camera,” 2005.

[18] G. Pandey, J. McBride, S. Savarese, and R. Eustice, “Extrinsic calibration of a 3d laser scanner and an

omnidirectional camera,” IFAC Proceedings Volumes, vol. 43, no. 16, pp. 336–341, 2010.

[19] G. Pandey, J. R. McBride, and R. M. Eustice, “Ford campus vision and lidar data set,” The International

Journal of Robotics Research (IJRR), vol. 30, pp. 1543–1552, nov 2011.

[20] D. Scaramuzza, A. Harati, and R. Siegwart, “Extrinsic self calibration of a camera and a 3d laser range
ﬁnder from natural scenes,” in 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems
(IROS), IEEE, oct 2007.

[21] P. Moghadam, M. Bosse, and R. Zlot, “Line-based extrinsic calibration of range and image sensors,” in

2013 IEEE International Conference on Robotics and Automation, IEEE, may 2013.

[22] X. Gong, Y. Lin, and J. Liu, “3d lidar-camera extrinsic calibration using an arbitrary trihedron,” Sensors,

vol. 13, no. 2, pp. 1902–1918, 2013.

[23] A. Geiger, F. Moosmann, O. Car, and B. Schuster, “Automatic camera and range sensor calibration
using a single shot,” in IEEE International Conference on Robotics and Automation (ICRA), Institute of
Electrical and Electronics Engineers (IEEE), may 2012.

[24] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun, “Vision meets robotics: The KITTI dataset,” The Inter-

national Journal of Robotics Research (IJRR), vol. 32, pp. 1231–1237, aug 2013.

[25] G. Atanacio-Jim´enez, J.-J. Gonz´alez-Barbosa, J. B. Hurtado-Ramos, F. J. Ornelas-Rodr´ıguez, H. Jim´enez-
Hern´andez, T. Garc´ıa-Ramirez, and R. Gonz´alez-Barbosa, “LIDAR velodyne HDL-64e calibration using
pattern planes,” International Journal of Advanced Robotic Systems, vol. 8, p. 59, nov 2011.

[26] Z. Zhang, “A ﬂexible new technique for camera calibration,” IEEE Transactions on Pattern Analysis and

Machine Intelligence (TPAMI), vol. 22, no. 11, pp. 1330–1334, 2000.

[27] D. Scaramuzza, A. Martinelli, and R. Siegwart, “A toolbox for easily calibrating omnidirectional cameras,”
in 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IEEE, oct 2006.

[28] T. Rabbani, F. Van Den Heuvel, and G. Vosselmann, “Segmentation of point clouds using smoothness
constraint,” International Archives of the Photogrammetry, Remote Sensing and Spatial Information
Sciences (ISPRS), vol. 36, no. 5, pp. 248–253, 2006.

[29] M. A. Fischler and R. C. Bolles, “Random sample consensus: A paradigm for model ﬁtting with ap-
plications to image analysis and automated cartography,” Commun. ACM, vol. 24, pp. 381–395, June
1981.

[30] W. Wang, K. Sakurada, and N. Kawaguchi, “Incremental and enhanced scanline-based segmentation
method for surface reconstruction of sparse LiDAR data,” Remote Sensing, vol. 8, p. 967, nov 2016.

[31] Velodyne LiDAR, Inc, “Hdl-32e user’s manual,” 2012.

[32] I. Jolliﬀe, Principal component analysis. Wiley Online Library, 2002.

[33] E. Jones, T. Oliphant, P. Peterson, et al., “SciPy: Open source scientiﬁc tools for Python.” http:

//www.scipy.org, 2001–.

[34] M. Ruﬂi, D. Scaramuzza, and R. Siegwart, “Automatic detection of checkerboards on blurred and distorted
images,” in IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Institute of
Electrical and Electronics Engineers (IEEE), sep 2008.

[35] L. Kneip and P. Furgale, “Opengv: A uniﬁed and generalized approach to real-time calibrated geometric
vision,” in 2014 IEEE International Conference on Robotics and Automation (ICRA), pp. 1–8, May 2014.

[36] Point Grey Research, Inc, “Technical application note (tan2012009): Geometric vision using ladybug R(cid:13)

cameras,” 2012.

20

7
1
0
2
 
g
u
A
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
4
1
5
5
0
.
8
0
7
1
:
v
i
X
r
a

Reﬂectance Intensity Assisted Automatic and Accurate Extrinsic
Calibration of 3D LiDAR and Panoramic Camera Using a Printed
Chessboard

Weimin Wang∗1, Ken Sakurada†1, and Nobuo Kawaguchi‡1

1Nagoya University, Japan

Abstract

This paper presents a novel method for fully automatic and convenient extrinsic calibration of a 3D
LiDAR and a panoramic camera with a normally printed chessboard. The proposed method is based on
the 3D corner estimation of the chessboard from the sparse point cloud generated by one frame scan
of the LiDAR. To estimate the corners, we formulate a full-scale model of the chessboard and ﬁt it to
the segmented 3D points of the chessboard. The model is ﬁtted by optimizing the cost function under
constraints of correlation between the reﬂectance intensity of laser and the color of the chessboard’s
patterns. Powell’s method is introduced for resolving the discontinuity problem in optimization. The
corners of the ﬁtted model are considered as the 3D corners of the chessboard. Once the corners of the
chessboard in the 3D point cloud are estimated, the extrinsic calibration of the two sensors is converted
to a 3D-2D matching problem. The corresponding 3D-2D points are used to calculate the absolute
pose of the two sensors with Uniﬁed Perspective-n-Point (UPnP). Further, the calculated parameters are
regarded as initial values and are reﬁned using the Levenberg-Marquardt method. The performance of the
proposed corner detection method from the 3D point cloud is evaluated using simulations. The results
of experiments, conducted on a Velodyne HDL-32e LiDAR and a Ladybug3 camera under the proposed
re-projection error metric, qualitatively and quantitatively demonstrate the accuracy and stability of the
ﬁnal extrinsic calibration parameters.

1 Introduction

A combination of the Light Detection And Ranging (LiDAR) sensor and the panoramic camera has been
widely utilized for deriving the beneﬁts of color as well as depth information. Two typical examples in which
the combination is used are 3D mapping and model generation, which use the LiDAR sensor and the color
and the texture information of images [1, 2], and the improvement of the pedestrian detection accuracy in
images using the distance information obtained from the LiDAR [3, 4, 5]. The ﬁrst and critical step for fusing
multi-modal data from the two devices is the accurate and convenient extrinsic calibration.

The process of the extrinsic calibration between the LiDAR and the camera involves the calculation of
a proper transformation matrix to align the coordinate systems of the two sensors. This process has been
studied for many years in the ﬁelds of both robotics and computer vision. Extrinsic calibration methods can
be classiﬁed into target-based methods and non-target methods. The focus of the target-based methods is
to ﬁnd corresponding features of the common target from multi-modal data. Non-target methods estimate
the transformation matrix by maximizing the correlation of mutual information in multi-modal data, such as
edges in images and discontinuity of the scanline in the point cloud [6, 7], as well as luminance of images and
reﬂectance of the point cloud [8]. In this work, we focus on the target-based extrinsic calibration.

For target-based calibration, the conventional method involves ﬁnding the vertices of a polygonal board,
which can be a chessboard or a triangular board, both in the point cloud obtained by the LiDAR and the
image captured by the camera either manually or automatically [9, 10, 11]. The vertices are estimated by
constructing the convex hull of the extracted board’s point cloud. However, the vertices only include the
geometric features of the target board’s outer contour, which are formed by the discontinuity of the scanlines,
while the information inside the counter is not used. To make full use of the information acquired by the
LiDAR, the “inner texture” of the point cloud, i.e., the reﬂectance intensity, which is also derived from the

∗Corresponding Author: weimin@ucl.nuee.nagoya-u.ac.jp
†sakurada@nagoya-u.jp
‡kawaguti@nagoya-u.jp

1

LiDAR sensor, is used. Unlike the approach in [8], we utilize the reﬂectance intensity to estimate the corners
of the chessboard from the 3D point cloud. If the corners of the 3D point cloud are identiﬁed, the extrinsic
calibration is converted to a 3D-2D matching problem.

The idea of the estimation of corners from the point cloud is based on the fact that the intensity of white
patterns diﬀers from that of black patterns, as seen in Figure 1. Figure 1a shows a point cloud; colors are
representatives of the intensity. Figure 1b shows the zoomed-in part of the chessboard shown in Figure 1c, in
which the change in reﬂectance intensity between the diﬀerent patterns can be observed. However, the noise
and sparsity of the point cloud present a challenge. To address this challenge, we propose a novel method
that ﬁts a chessboard model to the chessboard’s point cloud, and we also introduce Powell’s method [12] for
optimizing a deﬁned cost function to obtain the ﬁtting solution. After the corners of the chessboard in the
3D point cloud are estimated, the initial value of the transformation matrix is calculated using the Uniﬁed
Perspective-n-Point (UPnP) method [13]. The initial value is then applied to reﬁne the result by using the
nonlinear least squares optimization with the Levenberg-Marquardt (LM) method [14, 15]. We evaluate the
proposed method by using data obtained from a Velodyne HDL-32e LiDAR sensor and a FLIR Ladybug3
panoramic camera under the proposed reﬂectance intensity-based re-projection error metrics.

Three main contributions of this work are as follows. First, we propose a method that utilizes the reﬂectance
intensity of the point cloud to estimate the corners of the chessboard’s point cloud. Further, we introduce
Powell’s method to optimize the corner detection problem. To the best of our knowledge, this is the ﬁrst
published work that utilizes the intensity information to estimate the corners from the point cloud. Second,
the quantitative error evaluation of the proposed method is conducted using simulations.
In addition, we
analyze the relationship between the estimation error and other conditions such the measurement error and
the distance of the chessboard. Finally, we provide the Python implementation of the proposed method, which
can be downloaded from https://github.com/mfxox/ILCC.

The rest of this paper is structured as follows. Related works are revisited in Section 2. The overview of the
proposed method and notations used in this work are described in Section 3. In Section 4, detailed procedures
from automatic detection of the chessboard to the corner estimation and optimization are explained. The
corner detection on the panoramic image and the correspondence grouping of the detected corners in modal
In addition, the process of the ﬁnal extrinsic calibration
data for the two devices is described in Section 5.
after the correspondence grouping of the corners is described in this section. Simulation results for corners
estimation in the point cloud and experimental results are described in Section 6. Discussions about this work
and some tips for better extrinsic calibration with the proposed method are made in Section 7. Finally, we
present our conclusions and scope for future work in Section 8.

2 Related Works

Extrinsic calibration of two sensors in the ﬁelds of computer vision as well as robotics is usually achieved by
solving an optimization problem under certain constraints. These constraints can be geometric relationships,
the correspondence of common features, or the correlation of mutual information between two sensor modal-
ities. Related works we revisited during the course of this study are classiﬁed on the basis of these types of
constraints.

2.1 Multiple Views on a Planar Checkerboard

Zhang (2004) ﬁrst published the work about the calibration for a system comprising a 2D LiDAR and a
monocular camera [16]. He extrinsically calibrated the two sensors under the constraint that in the camera
coordinate system, the scalar projection of a vector between the origin and a point on the plane onto the
normal of the plane equals the distance between the origin and the plane. A system for 3D LiDAR sensors
with constraints similar to those in Zhang’s method was proposed and implemented as a MATLAB toolkit in
[17]. This system also made several assumptions, key among those being that the point cloud is dense enough,
which is challenging when using single frame data obtained by mobile LiDAR sensors such as the Velodyne
HDL-32e. Pandey et al. extended the method to a system of Velodyne HDL-64E LiDAR and Ladybug3
panoramic camera, which is similar to the set we used for this work [18]. This method was applied to the Ford
Campus Dataset [19]. Mirzaei et al. (2012) subsequently proposed a method for both intrinsic and extrinsic
calibration in [9].

2.2 Multiple Geometry Elements

The extrinsic calibration can also be performed if common geometry features like points, line segments, or
planes are extracted from the data obtained by the two sensors and the correspondence of features from the

2

(a)

(b)

Figure 1: Data from an identical scene captured by the LiDAR sensor and the panoramic camera. (a) The
points are colored by the reﬂectance intensity (blue indicates low intensity, red indicates high intensity); (b)
The zoomed chessboard. We can see the changes in reﬂection intensity of the point cloud between the white
and black patterns; (c) The panoramic image of the same scene.

two modalities are built. Scaramuzza et al. proposed a method based on the point correspondences [20]. Once
the point correspondences are known, the transformation matrix can be calculated using the methods for PnP
(Perspective n Points) problems. However, it is diﬃcult to manually identify the corresponding 3D point
features accurately in point cloud, especially for a sparse point cloud. To overcome this drawback, Moghadam
et al. proposed a method based on automatically extracted 2D and 3D lines [21]. However, this approach
requires the user to manually determine the correspondence of lines. Gong et al. proposed a method under the
plane-to-plane constraints using a trihedral object, which also requires human intervention for plane selection
[22]. There are also some methods that automatically extract feature points, such as vertices of a polygonal
planar checkerboard, from the LiDAR data. Nevertheless, these approaches require either manual operation
for feature points selection from the image [10] or customized checkerboard for feature points generation in
the point cloud [11]. Geiger et al. proposed an automatic method for extrinsic calibration with one shot of
multiple checkerboards in [23]. This approach recovers the 3D structure from the detected corners in images.
Then the calibration is performed under the constraints that planes of the chessboards recovered from the
images should coincide with the planes detected from the LiDAR data. This method was applied for extrinsic
calibration between the cameras and the LiDAR sensor in KITTI Dataset [24]. However, to recover the 3D
structure from corners of diﬀerent chessboards, the cameras require stereo conﬁguration for suﬃcient common
ﬁeld of view of the chessboards. This is challenging for panoramic camera like Ladybug3 we use in this work.
Geiger’s method for corner detection in images showed robustness from the experimental results, and hence
we also apply it for corners detection from the panoramic images in this work.

2.3 Correlation of Mutual Information

The abovementioned methods require either artiﬁcial observation objects (chessboards or triangular boards)
or user intervention (features or correspondence selection). This is inconvenient for applications that need
frequent extrinsic calibration like autonomous driving cars, in which case the relative pose may drift due to the
vibration. To solve this problem, several online calibration methods are proposed. These methods are generally
based on the maximization of the mutual information (MI), such as edges in images and discontinuity of the
scanline in the point cloud or luminance of images and reﬂectance intensity of the point cloud [6, 8, 7].
However, online calibration methods remain diﬃcult to apply with poor initializations. This means that the
pre-knowledge of a roughly accurate initial guess, which maybe estimate using the oﬀ-line calibration method

(c)

3

or manual measurement, is necessary.

2.4 Our Approach

In our proposed method for extrinsic calibration, we also applied constraints by obtaining corresponding feature
points on a printed chessboard. This method belongs to the constraints on multiple geometry elements.
However, unlike the approaches mentioned above, we use the corners instead of the vertices of the chessboard’s
point cloud. To estimate the corners of the point cloud, we formulate a cost function under the constraint
that the 3D points with high reﬂectance intensity must lie on the white patterns of the chessboard and vice
versa. Once the corners are detected in both multi-modal data, the correspondences are further made in a
predeﬁned order. Initial parameters can be obtained using the UPnP method [13] on the corresponding corners
and further reﬁned using the Levenberg-Marquardt method [14, 15]. Our method is fully automatic and thus
dose not require user intervention in the whole process from the detection of the chessboard, corner detection,
the correspondence of the corners, to the ﬁnal optimization.

A combination of a Velodyne HDL-32e LiDAR sensor and a Ladybug3 panoramic camera is used for
experiments in this work. There are several studies on the intrinsic calibration of the 3D LiDAR sensor [25, 9]
and the panoramic camera [26, 27]. In the remainder of this paper, we assume that before the process of the
extrinsic calibration, both the LiDAR and the panoramic cameras have been intrinsically calibrated from the
factory setting.

3 Overview and Notations
3.1 Overview

The overview of the proposed method is illustrated in Figure 2. First, the point cloud obtained from the LiDAR
is segmented into multiple parts. The point cloud of the chessboard is identiﬁed from within the segments
based on the characters of the segment. The corners of the chessboard in the point cloud are estimated by
minimizing a deﬁned cost function. On the other hand, corners of the chessboard in the image are detected
using an existing method. Correspondence of the corners is built based on the predeﬁned counting order.
The corresponding pairs are then used to estimate an initial value of the transformation matrix by solving an
absolute pose problem. Finally, the value is reﬁned by optimizing a proposed nonlinear cost function.

Figure 2: Overview of the proposed method.

3.2 Notations

For the convenience of explanation, the following notations are used in this paper.

pi = (xi, yi, zi)T : coordinates of a 3D point.

P =

p1, p2, . . . , pn
{

}

: set of n 3D points.

t = (tx, ty, tz)T : the translation vector.

R(θ) = Rz(θz)Ry(θy)Rx(θx): rotation matrix.

•

•

•

•

•

•

4

θ = (θx, θy, θz)T : rotation angle vector whose element corresponds to the rotation angle along x-, y-,
z-axis respectively.

Tr(θ, t, pi) = R(θ)pi + t:
translation vector t.

function that transforms the 3D point pi with the angle vector θ and

: set of estimated 3D corner points of the chessboard from the point cloud. N

ˆpi = Tr(θ, t, pi): transformed point of pi.

Pc =
is the number of the corners in the chessboard.

2, . . . , pc

1, pc
pc

N }

{

xi = (ui, vi)T : coordinates of 2D pixel.

•

•

•

•

Xc =

1, xc
xc
{

2, . . . , xc

N }

: set of detected 2D corner pixels of the chessboard from the image.

4 Corner Estimation from the Point Cloud

This section explains the detailed process of corner estimation from one frame of the point cloud data obtained
by the LiDAR sensor. All concerned coordinates are located in the LiDAR coordinate system in this section.

4.1 Automatic Detection of the Chessboard

This subsection describes the procedure of automatic extraction of the points that are reﬂected from the
chessboard. The points discussed in this subsection refer to all points in one frame of the point cloud.

4.1.1 Segmentation of the Point Cloud

Region growing [28] is often used to segment the point cloud. Region growing estimates the curvature value
and the normal vector of each point based on the plane constructed by its kNN points. Then the method
clusters the points according to the Euclidean distance and the angle of normal vectors of points. RANdom
Sample Consensus (RANSAC) [29] is also used for the shape extraction. For example, the RANSAC of the
planar model is applied for the plane ﬁtting and extraction from the point cloud. However, both methods
encounter challenges while processing the sparse and non-uniformly distributed point cloud, which may be
generated by a single frame scanning of the mobile LiDAR sensor like Velodyne HDL-32e in this work.

The scanline-based segmentation methods are suitable for processing this kind of point cloud, such as the
method in [30]. This method ﬁrst cluster a single frame of the point cloud into scanline segments according to
change of distance and direction between successive points along the scan direction. Then, scanline segments
are agglomerated into object segments based on their similarity. This method showed stable segmentation
result from the experimental results and thus we apply it for segmentation in this work.

4.1.2 Finding the Chessboard from the Segments

After the segmentation of the point cloud, the segment of the chessboard needs to be correctly identiﬁed.
We use characteristics such as the planarity, bounds, and points distribution of segments as the conditions for
ﬁltering the segments automatically.

To reduce the computational cost, we ﬁrst ﬁlter out some improbable segments based on the theoretical
number ntheo of points of a segment deﬁned in Equation (1). ntheo represents the theoretically maximum
number of points and calculated from the vertical and horizontal angle of the LiDAR when the chessboard is
parallel to the rotation axis of Velodyne, as shown in Figure 3. Segments in which the number of points fall
within the interval [(cid:15)theontheo, ntheo] are further processed, where (cid:15)theo is a coeﬃcient and empirically set to
0.5 for this study.

ntheo

dW
2r sin( ∆h

2 ) (cid:99)(cid:98)

dH
2r sin( ∆v

2 ) (cid:99)

≈ (cid:98)

(1)

where dW and dH are the width and height of the chessboard, r is the Euclidean distance from the segment’s
centroid to the LiDAR sensor, ∆h and ∆v represent horizontal and vertical angular resolution, which are 0.16◦
and 1.33◦ for Velodyne HDL-32e [31] respectively,

represents the ceiling truncation of a real number.

The planarity of the segment is veriﬁed using the Principle Components Analysis (PCA) [32] method.
The matrix Mn×3 consisting of all points in the segment is decomposed along three basis vectors Mb =
(µ1, µ2, µ3)T with components ratios λ1, λ2, λ3 on each basis vector. The segment whose least ratio λ3 is
less than 0.01 is considered as a planar object.

For a planar segment, all points in this segment are projected to the estimated plane formed by the
RANSAC method [29] for further veriﬁcation. Fitted points are denoted as Mn×3,f . As the ﬁnal step, the
range of the bounding box and the uniformity of the distribution are checked. For manipulation convenience,
we rotate coordinates of all points to the chessboard plane and align λ1, λ2 to the x-axis and y-axis with

(cid:98)(cid:99)

5

Figure 3: Angular resolution of the used LiDAR in
this work. The left ﬁgure is the top view and the
right one is the side view of the LiDAR and the chess-
board .

(a)

(b)

Figure 4: Uniformity of the points distribution.

(2)

(3)

the Equation (2). Then the centroid of the chessboard’s points Mn×3,f r is translated to the origin using of
Equation (3).

Mn×3,f r = (Mb

M

(cid:124)
(cid:124)
n×3,f )

·

Mn×3,f rt = Mn×3,f r

mean(Mn×3,f r)

−
After the transformation by Equations (2) and (3), the planar segment is transformed to the XOY plane and
the centroid of the segment coincides with the origin point. The segment with the bounding box within [0.8dW ,
1.6dW ] and [0.8dH , 1.6dH ] is considered as a potential chessboard. Uniformity of the point distribution is
determined by the diﬀerence between the points distribution in four equally divided regions, which is illustrated
in Figure 4. Two sample segments that fall in the range of the threshold bounding box are shown in Figure 4.
The dashed lines divide the theoretical region of the chessboard into four equal parts. The diﬀerence of the
points’ number in each part is used for uniformity check. For example, as the diﬀerence of points’ number in
each part in Figure 4a is smaller then that in Figure 4b, Figure 4a has better uniformity than Figure 4b. Let
us assume that the maximum number of points in the regions is nmax, and minimum is nmin. The uniformity
nmax−nmin
[0, 1), where nall is the total number of points
of the distribution is calculated as (cid:15)norm = 1
nall
in the segment. A large (cid:15)norm value indicates that the points are distributed normally. The threshold for
uniformity (cid:15)norm is set to 0.85.

−

∈

If more than one segment satisﬁes the above conditions, the segment with greater uniformity is selected.
(The super-

The set of points in the detected chessboard’s segment is denoted as PM =
script “M ” refers to the chessboard Marker).

2 , . . . , pM
n }

1 , pM
pM

{

This subsection explains the principle and detailed process for estimation of the corners from the point cloud
of the chessboard. The points discussed in this subsection refers to points of the chessboard only.

4.2 Corner Estimation

4.2.1 Model Formulation

After the chessboard points PM are automatically extracted, we utilize the intensity of points to estimate the
3 pattern as shown in Figure 5a.
corners. Without loss of generality, we use a model chessboard with a 2
Figure 5b illustrates theoretical laser-reﬂected points from the chessboard by lasers. The blue points indicate
low intensity reﬂected from black patterns while red points indicate high intensity reﬂected from white patterns.
If we ﬁnd a pose of the model that make the reﬂected points best ﬁt the model (Figure 5c), we can use the
corners (green points in Figure 5d) of the model to represent the corners of the points.

×

In addition, similar to the process in Section 4.1.2, the coordinate system of the chessboard is transformed
to the chessboard plane by rotating with the matrix consisting of three PCA vectors and subtracting the mean
of the rotated points, as shown in Figure 6. Then, we can treat the points as illustrated in Figure 5. However,
for the consistency of further correspondence with corners from images, the directions of principle vectors
µ1, µ2, µ3 are deliberately determined. The conditions for the basis vectors are illustrated in Figure 6:

directions of µ1, µ2, µ3 are deﬁned to obey to the right hand rule.

direction of µ3 (the normal of the chessboard) is deﬁned to point to the side of origin of the LiDAR
coordinate system.

angle between µ1 and x axis of the LiDAR coordinate system is not more than 90◦

•

•

•

6

(a)

(b)

(c)

(d)

Figure 5: The principle used to estimate corners in the points. (a) The chessboard model; (b) The scanned
point cloud of the chessboard. Colors indicate the intensity (blue for low and red for high reﬂectance intensity);
(c) Find a matrix that translates the most 3D points on the corresponding patterns. Green points are estimated
corners; (d) Consider the corners of the chessboard model as the corners of the point cloud.

The rotation matrix MM

XOY P is deﬁned as (µ1, µ2, µ3)T , where directions of µ1, µ2, µ3 satisfy the afore-
mentioned conditions. After the translation tM
XOY P by subtracting the mean of the rotated points, µ1, µ2, µ3
and the center of the original point cloud are transformed to xP -, yP -, zP -axis and the origin plane coordinates
respectively.

Figure 6: Directions of the basis vectors relative to the LiDAR coordinate system. Blue arrow lines in the left
ﬁgure represent the basis vectors decomposed by PCA. After transformation with the basis vectors, chessboard’s
points are mapped to the X P OY P (chessboard plane). Then we can apply the model described in Figure 5.

4.2.2 Correspondence of Intensity and Color

Another problem to solve before the formulation of the cost function is the correspondence between the
reﬂectance intensity and the color of the pattern. There are only two colors in the pattern, black and white.
However, the reﬂectance intensity values distribute discretely, mainly due to the divergence of the laser beam.
Figure 7a shows the scatter plot of the intensity values of a real chessboard’s point cloud. Further, the absolute
value of the reﬂectance intensity is also aﬀected by the distance.

(a)

(b)

Figure 7: Estimated parameters for each frame. (a) Scatter diagram of the intensity for all points in the
chessboard; (b) The histogram of the intensity. RL, RH can be found at the peaks of the two sides.

To process the intensity data adaptively, we deﬁne a range called the gray zone denoted as [τl, τh]. The

7

(4)

(7)

(8)

points with the intensity less than τl are considered as reﬂected from black patterns and those greater than τh
are considered as reﬂected from white patterns. To evaluate the values of τl and τh, the histogram is created
and the bins (RL, RH ) of peaks in both sides of the mean intensity are detected automatically, as shown in
Figure 7b for illustration. The gray zone [τl, τh] is then deﬁned as follows,

(cid:26) τl = (((cid:15)g

τh = (RL + ((cid:15)g

−

1)RL + RH )/(cid:15)g
1)RH )/(cid:15)g

−

where (cid:15)g
2 is a constant. (cid:15)g is set to 2 for corner estimation with enough points (gray zone will be zero and
all points are used) and 4 for error evaluation with enough conﬁdence of the pattern color from the reﬂectance
intensity in this study.

≥

4.2.3 Cost Function and Optimization

After completing the processes explained above, we formulate the cost function for corner estimation. The
cost function is formulated based on the constraints of the correspondence between the intensity and color,
and deﬁned in Equation (5).

Cm =

fg(ri)

fin( ˆpi, G)
{

|

ci

−

|

ˆci

fd( ˆpi, Vi) + [1

fin( ˆpi, G)]fd( ˆpi, G)
}

,

−

ˆpi

∈

M

ˆP

(5)

n
(cid:88)

i

M

}

M

∈

=

PM

M ), pi

Tr(θM , tM , pi
{

where ˆP
is the set of points that are transformed to the XOY plane using
the aforementioned processes, and z coordinates of all points in PM is 0. Namely 3D points are degenerated
to 2D after rotation by the matrix of three PCA vectors. Thus, the transformation parameters along the plane
y , 0]T . ri is the reﬂectance intensity of i-th point. fg(ri) is used
are θM = [0, 0, θM
to determine whether a point falls into the gray zone and is deﬁned in Equation (6). G represents the four
corners of the chessboard and Vi represents the four vertices of the grid corresponding to the i-th point.
(cid:26) 1 :
0 :

z ]T and tM = [tM

fg(ri) =

ri /
∈
else

x , tM

[τl, τh]

(6)

fin( ˆpi, Vi) =

(cid:26) 1 :
0 :

if ˆpi in the polygon with vertices G
else

fd = min(∆x1, ∆x2) + min(∆y1, ∆y2)

fin( ˆpi, Vi) indicates whether the polygon with the vertices Vi contains the point ˆpi. ci is the estimated
color from reﬂectance intensity ri. We deﬁne ci = 0 if ri < τl and ci = 1 if ri > τh. ˆci represents the color of
the pattern the ˆpi falls in. It is deﬁned as 0 for black and 1 for white. We experimentally use L1 distance to
calculate the cost for points that fall in the chessboard or out the chessboard as shown in Figure 8, and the
function fd is deﬁned in Equation (8). Figure 8a shows the situation that a point ˆpi falls in the wrong pattern
constructed by Vi. ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of the pattern and
∆y1, ∆y2 represent the distances to the other two sides. Figure 8b shows the situation that a point falls out
of the chessboard’s region. Similarly, ∆x1, ∆x2 represent the distances from the point ˆpi to the two sides of
the chessboard and ∆y1, ∆y2 represent the distances to the other two sides of the chessboard in Figure 8b.
Since the cost function Cm is discontinuous, it is impractical to derive for optimization. Thus, we utilize
the Powell optimization method [12] that needs no derivative. We used the implementation by SciPy [33] in
this work. As mentioned before, the set of chessboard’s points are almost ﬁtted to the chessboard model after
the transformation. Therefore, all three parameters θM
y are initialized with zero when the Powell’s
method is applied.

z , tM

x , tM

5 Extrinsic Calibration Estimation
5.1 Corner Estimation from the Image

There exist many methods for corner detection in perspective images or even in distorted or blurred images
[34, 23]. In this work, we utilize the method in [23] to detect the corners from the panoramic images directly.

5.2 Correspondence of the 3D-2D Corners

After the corners on the images are detected, the detected corners both on the image and in the point cloud
are corresponded by deﬁning the common counting order that starts from left-down side of the chessboard.

8

(a)

(b)

Figure 8: Cost deﬁnition for corner detection in the point cloud. (a) An example of the point falling into
the wrong pattern. The square represents a white pattern of the chessboard; (b) An example of the point
falling out of the chessboard model; (a) describes the ﬁrst term and (b) describes the second term of the cost
function (Equation (5)).

5.3

Initial Value by PnP

With these corresponding 3D-2D pair points, an initial value for nonlinear optimization can be obtained by
estimating the central absolute pose with the UPnP (Uniﬁed Perspective-n-Point) method [13]. We used the
implementation by OpenGV [35].

5.4 Reﬁnement with Nonlinear Optimization

We use the diﬀerence of inclination angle and azimuth angle in the spherical coordinate system as the error
metric for optimization to be independent of the panoramic image projection models. For the i-th 3D-2D pair,
f 2
x2a(xi), where fp2a and fx2a convert a 3D point and a
the residual is calculated as Eerr =
pixel to the inclination angle and azimuth angle, respectively, in the spherical coordinate system.

f 2
p2a( ˆpi)

(cid:113)

−

6 Experimental Results and Error Evaluation

The setup of the sensors and the measurement environment in this work are introduced in Section 6.1. To
evaluate the accuracy of 3D corner detection with the proposed method, simulation results under diﬀerent
conditions are presented in Section 6.2. Then the method is applied to the real data for 3D corner detection
of the chessboard’s point cloud. Some results of detected 3D corners as well as 2D corners of the panoramic
images are shown in Section 6.3. Section 6.4 presents the extrinsic parameters estimated with the 3D-2D
corner correspondences. Finally, quantitative and qualitative evaluations are performed in Sections 6.5 and
6.6 respectively.

6.1 Setup

We setup the system with a Velodyne HDL-32e LiDAR sensor mounted atop a Ladybug3 camera as shown
in Figure 9a. The chessboard used in this work is constructed by 6
8 grids with a side length of 7.5 cm
as shown in Figure 9b. Velodyne rotates at 600 rpm and the resolution of the panoramic image output by
Ladybug3 is set to 8000

6000.

×

In total, we captured 20 frames of the chessboard. For each horizontal camera of the Ladybug3, the

×

chessboard is placed at 4 diﬀerent places. The top and side views of the 20 frames are shown in Figure 10.

6.2 Simulation for Corner Detection Error in the Point Cloud

To evaluate the error of estimated corners from the point cloud, the ground truth is indispensable. However,
it is diﬃcult to obtain ground truth from the real data. Thus, we simulate the scanned point cloud of a
generated chessboard model and record the corners’ coordinates of the chessboard as the ground truth for
evaluation. Subsequently, the error is evaluated by comparing the estimated results with the ground truth.

9

(a)

(b)

Figure 9: Setup. (a) the image of the setup for two sensors; (b) a scene for the data acquisition.

(a)

(b)

Figure 10: Distribution of the 20 chessboard positions. The chessboard is captured by the LiDAR from diﬀerent
heights and angles. The length of the coordinate axis is 1 m. Four groups of colors represent four positions
of the chessboard for each horizontal camera. (a) Top view of the point clouds of the chessboard; (b) Side
view of the point clouds of the chessboard.

6.2.1 Simulation of the Point Cloud

There are many aspects that aﬀect the measured distance and intensity of the points reﬂected from the
chessboard, such as distance, noise, divergence of the laser beam and the pose of the chessboard. The
theoretical interval between two laser beams and two successive points along the scanning are calculated
based on the distance and the LiDAR laser distribution, as shown in Figure 11. The noise is added to the
points along x-, y-, z-axis independently. The probability model of the noise is considered as a Gaussian
distribution. The base line of the deviation σ for noise is empirically set to 0.0016, 0.0016 and 0.01 m with
the mean µ = 0 for each axis. Simulated points are transformed with a rotation matrix and translation vector.
Figure 12 shows some simulated point clouds for diﬀerent noise and distance conditions. The last row
shows the points from real data for comparison. By comparing the front view of the points clouds between the
ﬁrst row and the last row in Figure 12, we can see that the points with baseline noise are similar to the real data.
As for the side view of real data, we see that blue points and red points are generally distributed separately.
This indicates that the noise of distance diﬀers for diﬀerent intensity for real measurements. However, as
explained in Section 4.2.3, since the proposed corners estimation method project all points onto the XOY
plane, the noise along z-axis can be ignored. Thus, the diﬀerence between the simulated data and real data
along z-axis will not aﬀect the error evaluation of the proposed corner estimation method.

6.2.2 Error Results from the Simulation

We applied the proposed method to simulated points with varying noise and distance conditions to estimate the

coordinates of the point cloud. The distance error is calculated
, where ˆpi depicts coordinates
of the estimated corner and pi is the ground truth. Then the relative error is calculated with the unit of
percentage by dividing the side length (7.5 cm in this work) of a pattern in the chessboard. For each noise and
distance condition, we repeat the simulation with diﬀerent random seeds 100 times and calculate the average
and standard deviation. Error results are shown in Figure 13. The horizontal axes represent the simulation

n

√(cid:80)n

i=1 | ˆpi−pi|2

10

(a)

(b)

(c)

(d)

Figure 11: Vertical ﬁeld view of Velodyne HDL-32e and the relationship between interval and distance. (a)
Vertical angles of Velodyne HDL-32e; (b) Vertical ﬁeld of view; (c) Relationship between the horizontal
interval of two adjacent lasers and noise of the point cloud; (d) Relationship between the interval of two
successive points of the scanline and the distance of the chessboard. Red lines in (c,d) show the range of
chessboard’s distance we place in this work.

conditions and the vertical axes represent the relative error. From Figure 13a, we can see that the error and
uncertainty of the estimation increases drastically as the noise of measurement increases. The inﬂuence of
distance on the error is relatively lower than that of noise, as shown in Figure 13b.

6.3 Detected Corners
6.3.1 From the Image

We use the method in [23] to detect the corners in the panoramic image. Some example results are shown
in Figure 14. We can see that all corners are robustly detected. Compared to conventional vertex-based
methods, it is diﬃcult to detect vertices accurately and automatically when the background color is similar to
the color of the planar board (lower left of the chessboard in Figure 14c). However, it can be accurately and
automatically detected if we use the corners as feature points. For the correspondence with the corners from
the point cloud, corners are counted starting from the lower left board.

6.3.2 From the Point Cloud

We applied the proposed corner detection method from the point cloud to real measured data. An example
of the estimated corners is shown in Figure 15. Figure 15a shows the position of the chessboard’s point cloud
and the estimated chessboard model in the LiDAR coordinate system. The zoomed-in image of the chessboard
is shown in Figure 15b. The corners of the chessboard are the estimated corners, which can be calculated
with MM
XOY in Section 4.2.1 and Tr(θM , tM ) in Section 4.2.3. The counting order also starts from
the lower left, which is the same as that in the corners from the correspondence with corners from the image.
From Figure 15b, we can see that most blue points (low intensity) are mapped on the black patterns, and red
points (high intensity) are mapped on the white patterns. This means that the chessboard ﬁts the points well.

XOY , tM

11

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

(l)

(j)

(k)

Figure 12: Front view and side view of chessboard’s point clouds from simulation results and real data. (a–c)
Simulated point clouds with the multiplier 1 at diﬀerent distances; (d–f) Simulated point clouds with the
multiplier 2 at diﬀerent distances; (g–i) Simulated point clouds with the multiplier 3 at diﬀerent distances;
(j–l) Real point clouds at diﬀerent distances.

6.4 Estimated Extrinsic Parameters

The initial and reﬁned transformation parameters with diﬀerent numbers of frames are shown in Figure 16.
As mentioned above, 20 frames are used for this evaluation. The x-axis represents the number of frames used
for the estimation. For example, 5 indicates that the ﬁrst ﬁve frames frame#1
frame#5 are used for the
extrinsic calibration. The frames are indexed as in Table 1 to make the variation of the chessboard’s point
cloud increase in the horizontal direction as the number of frame increase for global optimization. The index
of each camera is deﬁned in [36].

∼

Figure 16 depicts the state from when the parameters start to become stable after the nonlinear reﬁnement
with more than four frames, while some parameters estimated by UPnP are erratic as the number of frames
changes. Generally, there is no signiﬁcant diﬀerence between the results obtained by UPnP and by nonlinear
reﬁnement. The translation value along the z-axis estimated by UPnP is 11.7 cm, which diﬀers from 18.7 cm
obtained using nonlinear reﬁnement. We manually measure the oﬀset between the LiDAR and the panoramic
camera of the set. It is diﬃcult to accurately ﬁnd the center of each sensor, the range of the oﬀset is supposed

12

(a)

(b)

Figure 13: Corner detection error by simulation. The horizontal axes represent diﬀerent simulation conditions
and the vertical axes represent the relative error. Red points represent the mean value and the vertical lines
represent the 3σ range of the results simulated by 100 times at each simulation condition. (a) Relationship
between the error and noise of the point cloud at 1 m. The x axis represent the multiplier for the noise
baseline; (b) Relationship between the error and the distance of the chessboard with the baseline noise.

(a)

(b)

(c)

Figure 14: Detected corners from the panoramic images. (a–c) Example results of detected corners from
images with diﬀerent poses and distances.

(a)

(b)

(c)

Figure 15: Estimated corners of chessboard. (a) The ﬁtted chessboard model of the point cloud in the real
Velobug LiDAR coordinate system; (b) The front view of the zoom checkerboard; (c) The side view of the
zoom checkerboard.

to be in the range between 17 and 20 cm. Thus, the reﬁned result is more accurate.

As a comparison, we also applied Pandey’s online method [8], which also uses laser’s reﬂectance intensity,
to the data in this work. The results under diﬀerent initial guesses are shown in Figure 16. One initial
guess is [10◦, 10◦, 10◦, 10 cm, 10 cm, 10 cm] and the other is [0◦, 0◦, 0◦,
0.17 cm, 18.72
cm] which are almost the accurate parameters. From the comparison of the two methods, we can conclude

0.13 cm,

−

−

13

that the proposed method is more stable and accurate in terms of both rotation and translation. The main
reason why Pandey’s method performed not well with the data in the work is considered that the surrounding
environment is almost static and the increment of the frames does not increase the variance of the data for the
optimization. However, as stated before, the original problem settings of two methods are diﬀerent. Online
calibration methods like Pandey’s are very convenient and can estimate an approximate results if a good initial
value is provided while the proposed methods is target-based, but it can provide accurate and stable extrinsic
calibration result.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 16: Estimated parameters by the proposed method and Pandey’s Mutual Information (MI) method [8]
with diﬀerent initial values as the numbers of frame increases. (a–c) Rotation angle along each axis; (d–f)
Translation along each axis.

Camera Index
Frame Index

0
1,6,11,16

1
2,7,12,17

2
3,8,13,18

3
4,9,14,19

4
5,10,15,20

Table 1: Relationship between the index of the frame and the index of the camera.

6.5 Re-Projection Error

To quantitatively evaluate two groups of estimated parameters, we deﬁne a re-projection error metric based
on intensity, which is similar to Equation (5) except that the error metric is deﬁned on the image plane. To
increase the conﬁdence, only the points that are contained within the polygon of the detected corners on the
images are counted. Moreover, the gray zone of intensity is increased for the same consideration and (cid:15)g in
Equation (4) is set to 4.

For the error calculation, we ﬁrst transform the point cloud of the chessboard with estimated extrinsic
parameters. After mapping all 3D points of the transformed chessboard point cloud at the panoramic image
based on an equirectangular projection model, we calculate the error on the chessboard plane of the panoramic
image. Only the point that is mapped within the quadrilateral region constructed by the four detected corners
on the image is counted, as shown in Figure 17a,b. As the gray zone is identiﬁed, we can classify the mapped
points into white or black colors.
If the estimated color of a mapped point diﬀers from the color of the
quadrilateral it falls in, the error of this point is calculated using Equation (8).

14

(a)

(b)

(c)

Figure 17: Re-projection error calculation and results. (a,b) Shaded quadrilaterals show the regions of black
and white patterns respectively. Points mapped into these regions are counted for error calculation; (c) The
errors for parameters estimated by diﬀerent numbers of frames. The point and vertical line represent the mean
and 3σ range of all errors calculated by applying the estimated parameters to the diﬀerent number of frames.

In the measurement, the farther the chessboard is, the smaller the occupied pixels of chessboard on the
image will be. Because the re-projection error is measured with absolute pixel, the error of farther chessboard
will be relatively smaller. To ensure that the error metric is unaﬀected by distance, we normalize the error
by multiplying the value of the distance with the consideration that the size of an object on the image is
generally proportional to the reciprocal of the distance. Moreover, the “attendance rate” of the point, which
indicates the rate at which points are counted for error calculation, is also taken into account for the overall
re-projection performance. The ﬁnal formula is deﬁned in Equation (9)

e =

Cm
Nc ·

rM

PcNa
PaNc

·

(9)

Here, Cm is the cost function deﬁned in Equation (5), rM is the Euclidean distance of the chessboard, Pa
is the total number of the patterns in the chessboard, Pc is the number of the quadrilaterals constructed by
detected corners for calculating the re-projection error, Na is the points number of chessboard’s point cloud,
Nc is the number of points that fall into the quadrilaterals constructed by detected corners, rM is a factor
of the error caused by the distance and PcNa
is the penalty factor by dividing the “attendance rate”. The
PaNc
“attendance rate” is derived from Nc
, which is the ratio of the average number of point in each pattern
of the region (Figure 17a,b) only counted for error calculation and the average number of point in each pattern
of the whole chessboard.

Pc ÷

Na
Pa

The re-projection error with the metric deﬁned above is shown in Figure 17c. The point and vertical line
represent the mean and 3σ range of all errors calculated by applying the estimated parameters to 20 frames.
The length of one grid of the chessboard in the 4000
8000 panoramic image at 1 m is approximately 100
×
pixels. The back projection error is 0.8 pixel when the optimization begins to converge after 4 frames, and
the relative error to the side length is 0.8%.

6.6 Re-Projection Results

For qualitative evaluation, we apply the ﬁnal extrinsic transformation matrix estimated by the proposed method
to rotate point cloud and project it to the image. The result of re-projected corners is shown in Figure 18.
The large green circles and cyan lines indicate the detected corners. The small pink circles in large green
circles and lines indicate re-projected corners estimated from the point cloud. The large blue and red circles

15

represent the start and end for counting the corners. We can see that the re-projected corners estimated from
the point cloud almost coincide with the corners detected in the image.

Figure 18: Re-projected corners and points of the chessboard (best viewed when zoomed in). Big green circles
and cyan lines indicate the detected corners. Small pink circles in big green circles and pink lines indicate
re-projected corners estimated from the point cloud. Big blue and red circles represent the start and end for
counting the corners. Blue points indicate low reﬂectance intensity and red points indicate high reﬂectance
intensity.

Re-projection results of all points within one frame are as listed in Figures 19–21. For better visualization,
points colored according to the intensity and distance are mapped to the original RGB images and the edges-
extracted images, respectively. Figure 19 shows the overall results on the panoramic image. Details of individual
objects are shown in Figure 20. We can see that the bounds generated by the change of re-projected 3D points
with diﬀerent intensities and distance ﬁt the edges of the image exactly, for example the fourth images in
Figure 20a,b. Some inconsistencies occur due to the occlusion, for example the lower left and upper right
parts of the chessboard in Figure 20a and the upper part of the human in Figure 20b. The ﬁnal colored point
cloud is shown in Figure 21. Red points indicate the region occluded by the chessboard.

Figure 19: Re-projection results. (a) All re-projected points on the color panoramic image and colored by
intensity; (b) All re-projected points on the color panoramic image and colored by distance; (c) Re-projected
result on edge extracted image of all points colored by intensity; (d) Re-projected result on edge extracted
image of all points colored by distance.

(a)

(b)

(c)

(d)

16

(a)

(b)

(c)

(d)

17

Figure 20: Zoomed details of re-projected points. (a–d) Re-projected results on chessboard, human, pillar
and car respectively. Each column represents re-projected points colored by intensity and distance on original
RGB images and edges-extracted images. Blue indicates low value and red indicates high value.

(a)

(b)

(c)

Figure 21: Projection of the RGB information from the image to the point cloud with the estimated extrinsic
parameters. (a) An example of the colored point cloud; (b) The zoomed view of the chessboard in (a). The
red points in (a,b) are occluded region caused by the chessboard; (c) The zoomed view of the car in (a).

7 Discussions

•

•

•

•

Automatic segmentation. As the ﬁrst step of the proposed method, automatic segmentation is per-
formed. The current segmentation method is only based on the distance information, which needs
the chessboard to be spatially separated from the surrounding objects. Nevertheless, slight under-
segmentation caused by the stand of the chessboard or over-segmentation caused by the measurement
noise may still occur. The degree of mis-segmentation generated by the segmentation method used in
this work is experimentally shown to be negligible for the corners estimation with the overall optimization
of the proposed method.

Simulation. To evaluate the performance for the corner estimation with the proposed method, we
approximately simulated the points by considering the probability model of the distance as Gaussian
distribution. However, the probability model for the noise of reﬂectance intensity, which is an aspect
for corners estimation, is not considered. Under the inﬂuence of reﬂectance intensity, the real error of
corner estimation is supposed to be higher than the simulated results in this work. This is one of the
reasons why the relative error for corners estimation is about 0.2%, as shown in Figure 13b, and the
ﬁnal re-projection error increased to 0.8% in Section 6.5. For a more precise simulation, the probability
model of the reﬂectance value related to the incidence angle, the distance and the divergence of laser
beam needs to be formulated.

Chessboard. As shown in Figure 11, both the horizontal and vertical intervals increase as the distance
increases. To gather enough information for corner estimation, the side length of one grid in the
chessboard is suggested to be greater than 1.5 times of the theoretical vertical interval at the farthest
place. In addition, the intersection angle between the diagonal line of the chessboard and the z-axis of
the LiDAR is suggested to be less than 15◦ to enable the scanning of as many patterns as possible.

We use the panoramic image for calibration, therefore, to remain unaﬀected by the stitching error, it is
better to place the chessboard in the center of the ﬁeld of view for each camera.

In this work, a chessboard with 6

Correspondence of 3D and 2D corners.
8 patterns is used and the
counting order is deﬁned as starting from the of the chessboard for automatic correspondence. To make
the “lower left” identiﬁed correctly, the chessboard should be captured to make the “lower left” of the
real chessboard be same with that of chessboard in the image during the data acquisition. Also, the
direction of z-axis of the two sensors should be almost consistent shown as in Figure 9b. However, these
restrictions can be released with the introduction of asymmetrical patterns in practical use.

∼

8 Conclusions and Future Works

In this work, we proposed a novel and fully automatic reﬂectance intensity based calibration method for LiDAR
and panoramic camera system. Compared to existing methods, we make use of the corners information of the
chessboard’s point cloud instead of the edges information. Corners of the sparse and noisy chessboard’s point
cloud are estimated by solving the optimization problem with the intensity information. After the correspon-
dence of corners both on the image and in the point cloud, the extrinsic transformation matrix is generated
by solving the nonlinear optimization problem. To evaluate the performance of the corner estimation from the
point cloud, we simulated the points and compared the estimated corners with the ground truth. We applied
the proposed method to an equipment set consisting of a Velodyne LiDAR sensor and a Ladybug3 panoramic

18

camera. Quantitative evaluation of the accuracy of the proposed method was performed with a proposed
intensity-based re-projection error metric. The re-projected results were veriﬁed by qualitative evaluation. The
Python implementation of the proposed method can be downloaded from https://github.com/mfxox/ILCC.

In this work we evaluate the proposed method only with the Velodyne LiDAR HDL-32e sensor, we will
evaluate on more types of sensor in the future. In practical 3D color mapping applications with the fusion of
two sensor modalities , occlusion due to the diﬀerence in views must be addressed in the future. In addition,
we aim to implement an online calibration without any information about the correct matrix based on the
segmentation of point cloud according to both scanline discontinuity and reﬂectance intensity.

References

[1] A. Mastin, J. Kepner, and J. Fisher, “Automatic registration of LIDAR and optical images of urban
scenes,” in 2009 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Institute of
Electrical and Electronics Engineers (IEEE), jun 2009.

[2] N. PAPARODITIS, J.-P. PAPELARD, B. CANNELLE, A. DEVAUX, B. SOHEILIAN, N. DAVID, and
E. HOUZAY, “Stereopolis ii: A multi-purpose and multi-sensor 3d mobile mapping system for street
visualisation and 3d metrology,” Revue fran¸caise de photogramm´etrie et de t´el´ed´etection, no. 200, pp. 69–
79, 2012.

[3] M. Szarvas, U. Sakai, and J. Ogata, “Real-time pedestrian detection using LIDAR and convolutional
neural networks,” in 2006 IEEE Intelligent Vehicles Symposium (IV), Institute of Electrical and Electronics
Engineers (IEEE).

[4] C. Premebida and U. Nunes, “Fusing LIDAR, camera and semantic information: A context-based ap-
proach for pedestrian detection,” The International Journal of Robotics Research (IJRR), vol. 32, pp. 371–
384, mar 2013.

[5] J. Schlosser, C. K. Chow, and Z. Kira, “Fusing LIDAR and images for pedestrian detection using convo-
lutional neural networks,” in 2016 IEEE International Conference on Robotics and Automation (ICRA),
Institute of Electrical and Electronics Engineers (IEEE), may 2016.

[6] J. Levinson and S. Thrun, “Automatic online calibration of cameras and lasers,” in Robotics: Science

and Systems IX, Robotics: Science and Systems Foundation, jun 2013.

[7] Z. Taylor, J. Nieto, and D. Johnson, “Multi-modal sensor calibration using a gradient orientation mea-

sure,” Journal of Field Robotics (JFR), vol. 32, pp. 675–695, jun 2014.

[8] G. Pandey, J. R. McBride, S. Savarese, and R. M. Eustice, “Automatic extrinsic calibration of vision
and lidar by maximizing mutual information,” Journal of Field Robotics (JFR), vol. 32, pp. 696–722, sep
2014.

[9] F. M. Mirzaei, D. G. Kottas, and S. I. Roumeliotis, “3d LIDAR–camera intrinsic and extrinsic calibration:
Identiﬁability and analytical least-squares-based initialization,” International Journal of Robotics Research
(IJRR), vol. 31, pp. 452–467, apr 2012.

[10] Y. Park, S. Yun, C. Won, K. Cho, K. Um, and S. Sim, “Calibration between color camera and 3d LIDAR

instruments with a polygonal planar board,” Sensors, vol. 14, pp. 5333–5353, mar 2014.

[11] A.-I. Garca-Moreno, D.-E. Hernandez-Garca, J.-J. Gonzalez-Barbosa, A. Ramrez-Pedraza, J. B. Hurtado-
Ramos, and F.-J. Ornelas-Rodriguez, “Error propagation and uncertainty analysis between 3d laser scanner
and camera,” Robotics and Autonomous Systems, vol. 62, no. 6, pp. 782 – 793, 2014.

[12] M. J. D. Powell, “An eﬃcient method for ﬁnding the minimum of a function of several variables without

calculating derivatives,” The Computer Journal, vol. 7, pp. 155–162, feb 1964.

[13] L. Kneip, H. Li, and Y. Seo, “UPnP: An optimal o(n) solution to the absolute pose problem with universal
applicability,” in European Conference on Computer Vision (ECCV), pp. 127–142, Springer Nature, 2014.

[14] K. Levenberg, “A method for the solution of certain non-linear problems in least squares,” Quarterly of

Applied Mathematics, vol. 2, pp. 164–168, jul 1944.

[15] D. W. Marquardt, “An algorithm for least-squares estimation of nonlinear parameters,” Journal of the

society for Industrial and Applied Mathematics, vol. 11, no. 2, pp. 431–441, 1963.

19

[16] Q. Zhang and R. Pless, “Extrinsic calibration of a camera and laser range ﬁnder (improves camera
calibration),” in 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),
Institute of Electrical and Electronics Engineers (IEEE).

[17] R. Unnikrishnan and M. Hebert, “Fast extrinsic calibration of a laser rangeﬁnder to a camera,” 2005.

[18] G. Pandey, J. McBride, S. Savarese, and R. Eustice, “Extrinsic calibration of a 3d laser scanner and an

omnidirectional camera,” IFAC Proceedings Volumes, vol. 43, no. 16, pp. 336–341, 2010.

[19] G. Pandey, J. R. McBride, and R. M. Eustice, “Ford campus vision and lidar data set,” The International

Journal of Robotics Research (IJRR), vol. 30, pp. 1543–1552, nov 2011.

[20] D. Scaramuzza, A. Harati, and R. Siegwart, “Extrinsic self calibration of a camera and a 3d laser range
ﬁnder from natural scenes,” in 2007 IEEE/RSJ International Conference on Intelligent Robots and Systems
(IROS), IEEE, oct 2007.

[21] P. Moghadam, M. Bosse, and R. Zlot, “Line-based extrinsic calibration of range and image sensors,” in

2013 IEEE International Conference on Robotics and Automation, IEEE, may 2013.

[22] X. Gong, Y. Lin, and J. Liu, “3d lidar-camera extrinsic calibration using an arbitrary trihedron,” Sensors,

vol. 13, no. 2, pp. 1902–1918, 2013.

[23] A. Geiger, F. Moosmann, O. Car, and B. Schuster, “Automatic camera and range sensor calibration
using a single shot,” in IEEE International Conference on Robotics and Automation (ICRA), Institute of
Electrical and Electronics Engineers (IEEE), may 2012.

[24] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun, “Vision meets robotics: The KITTI dataset,” The Inter-

national Journal of Robotics Research (IJRR), vol. 32, pp. 1231–1237, aug 2013.

[25] G. Atanacio-Jim´enez, J.-J. Gonz´alez-Barbosa, J. B. Hurtado-Ramos, F. J. Ornelas-Rodr´ıguez, H. Jim´enez-
Hern´andez, T. Garc´ıa-Ramirez, and R. Gonz´alez-Barbosa, “LIDAR velodyne HDL-64e calibration using
pattern planes,” International Journal of Advanced Robotic Systems, vol. 8, p. 59, nov 2011.

[26] Z. Zhang, “A ﬂexible new technique for camera calibration,” IEEE Transactions on Pattern Analysis and

Machine Intelligence (TPAMI), vol. 22, no. 11, pp. 1330–1334, 2000.

[27] D. Scaramuzza, A. Martinelli, and R. Siegwart, “A toolbox for easily calibrating omnidirectional cameras,”
in 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IEEE, oct 2006.

[28] T. Rabbani, F. Van Den Heuvel, and G. Vosselmann, “Segmentation of point clouds using smoothness
constraint,” International Archives of the Photogrammetry, Remote Sensing and Spatial Information
Sciences (ISPRS), vol. 36, no. 5, pp. 248–253, 2006.

[29] M. A. Fischler and R. C. Bolles, “Random sample consensus: A paradigm for model ﬁtting with ap-
plications to image analysis and automated cartography,” Commun. ACM, vol. 24, pp. 381–395, June
1981.

[30] W. Wang, K. Sakurada, and N. Kawaguchi, “Incremental and enhanced scanline-based segmentation
method for surface reconstruction of sparse LiDAR data,” Remote Sensing, vol. 8, p. 967, nov 2016.

[31] Velodyne LiDAR, Inc, “Hdl-32e user’s manual,” 2012.

[32] I. Jolliﬀe, Principal component analysis. Wiley Online Library, 2002.

[33] E. Jones, T. Oliphant, P. Peterson, et al., “SciPy: Open source scientiﬁc tools for Python.” http:

//www.scipy.org, 2001–.

[34] M. Ruﬂi, D. Scaramuzza, and R. Siegwart, “Automatic detection of checkerboards on blurred and distorted
images,” in IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Institute of
Electrical and Electronics Engineers (IEEE), sep 2008.

[35] L. Kneip and P. Furgale, “Opengv: A uniﬁed and generalized approach to real-time calibrated geometric
vision,” in 2014 IEEE International Conference on Robotics and Automation (ICRA), pp. 1–8, May 2014.

[36] Point Grey Research, Inc, “Technical application note (tan2012009): Geometric vision using ladybug R(cid:13)

cameras,” 2012.

20

