8
1
0
2
 
r
a

M
 
5
1
 
 
]
L
M

.
t
a
t
s
[
 
 
3
v
6
0
1
4
0
.
8
0
7
1
:
v
i
X
r
a

Rocket Launching: A Universal and Efﬁcient Framework for Training
Well-performing Light Net

Guorui Zhou,1∗ Ying Fan,1 Runpeng Cui,2 Weijie Bian1
Xiaoqiang Zhu1 and Kun Gai1
1Alibaba Inc, Beijing, China
2Department of automation, Tsinghua university
{guorui.xgr, fanying.fy, weijie.bwj, xiaoqiang.zxq}@alibaba-inc.com, cuirunpeng@gmail.com, jingshi.gk@taobao.com

Abstract

Models applied on real time response tasks, like click-through
rate (CTR) prediction model, require high accuracy and rig-
orous response time. Therefore, top-performing deep models
of high depth and complexity are not well suited for these
applications with the limitations on the inference time. In or-
der to get neural networks of better performance given the
time limitations, we propose a universal framework that ex-
ploits a booster net to help train the lightweight net for pre-
diction. We dub the whole process rocket launching, where
the booster net is used to guide the learning of our light net
throughout the whole training process. We analyze different
loss functions aiming at pushing the light net to behave simi-
larly to the booster net. Besides, we use one technique called
gradient block to improve the performance of light net and
booster net further. Experiments on benchmark datasets and
real-life industrial advertisement data show the effectiveness
of our proposed method.

Introduction
Deep networks have achieved state-of-the-art results in
many areas, such as computer vision (Huang et al. 2016) and
nature language processing (Bahdanau, Cho, and Bengio
2014). From AlexNet (Krizhevsky, Sutskever, and Hinton
2012) to recently proposed DenseNet (Huang et al. 2016),
better performances are accompanied with deeper and wider
networks and more complex and adaptable structures. A
more complex structure of neural networks means longer
inference time, which is not tolerated in industrial environ-
ment. Networks mentioned above only consider the evalu-
ation criterion of accuracy, while neglect the necessity of
real-time response in industrial applications.

At the same time, some nets like DIN (Zhou et al. 2017)
and wide & deep model (Cheng et al. 2016) get more and
more attention. These nets share some characteristics: nets
are shallow, layers are very simple and with less computa-
tion cost. In industrial applications, e.g. online advertising
systems, models have to make prediction of hundreds of ad-
vertisements for one user in several milliseconds, which re-
stricts the complexity of model. Only simple and shallow

∗Correspondence author is Guorui Zhou. The source code is

available at https://github.com/zhougr1993/Rocket-Launching.
Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

structure meets the stringent response time requirements in
industry.

Accuracy and latency are the two points that we pay at-
tention to. In general, there are two solutions to reduce
runtime complexities while keeping a decent performance.
Some works make use of factorizing or compressing to di-
rectly simplify the computation, such as matrix SVD (Den-
ton et al. 2014), MobileNet (Howard et al. 2017), and Shuf-
ﬂeNet (Zhang et al. 2017). Other approaches adopt the
teacher-student strategy. They use light networks with fewer
layers and parameters to decrease the inference time, while
the light nets are trained helped by a complicated teacher
network that trained in advance, like knowledge distilla-
tion (Hinton, Vinyals, and Dean 2015) and FitNet (Romero
et al. 2014). These teacher-student methods decrease the
runtime complexities, and can be further combined with ap-
proaches of the ﬁrst category. In this work, we propose a
novel universal framework to train decent small networks,
motivated by the potential of teacher-student methods.

In this work, we develop a novel network training pro-
cess dubbed rocket launching. The light net is the target
network for inference, the booster relates to the deeper and
more complex network from the architecture. Both the light
and the booster net compose the architecture of rocket net-
work. At the training stage, the light and booster networks
are trained simultaneously on the same task. Besides, the
light net also keeps getting knowledge learned by the booster
through the optimization of the hint loss, which is included
in the objective function to make both nets have similar be-
haviour during training. The booster guides the optimization
of the target light network along all the training process. At
the inference stage, only the trained light network is used.
Different from previous teacher-student methods (Hinton,
Vinyals, and Dean 2015; Romero et al. 2014), we make the
light model share some lower layers with the cumbersome
one and train them simultaneously.

In this paper, we propose a universal method aiming to
obtain a well-behaved light net considering limitations on
inference time. Our method is suitable to many different net-
work structures. In brief, our contributions can be summa-
rized as follows:
• We propose a novel universal training process called
rocket launching, which makes use of the booster net
to supervise the learning of the light network through

whole training process. We show that a light model can
be trained to perform close to deeper and more complex
models in experiments.

• We analyze different hint loss functions to transfer the in-

formation from booster to the light net.

• In order to push light net to be close to booster net, we
use gradient block technique to cancel the effect of hint
loss’s back-propagation on layers of the booster, which
gives booster net more freedom to update its parameters
based on ground truth and improve the performance fur-
ther.
Our method achieves the state-of-the-art results on pub-
licly available benchmarks as well as industrial dataset. It is
notable that our method performs better than other teacher-
student approaches. Experimental results present that the
performance can be further improved when combining other
teacher-student approaches with our framework.

The remainder of this paper starts from a summary of re-
lated work. Then we introduce our approach, followed by
experiments and conclusions.

Related work
Deep neural networks have drawn increasing attention in re-
cent years due to their overwhelming performance on many
research areas. One main trend of network structure design
is to develop neural networks with larger depth, more pa-
rameters and higher complexity to achieve better perfor-
mance (Simonyan and Zisserman 2015; Szegedy et al. 2015;
He et al. 2016; Zagoruyko and Nikos 2016). However, these
top-performing networks with high complexity will result
in time consuming systems at the inference phase. There-
fore, they are not well suitable for applications with infer-
ence time limitations.

There have been some explorations of model compres-
sion by directly simplifying the computation or pruning of
the original neural operations. Denton et al. (Denton et al.
2014) use SVD to approximate the convolutional operations
in deep CNNs. MobileNets (Howard et al. 2017) are based
on a streamlined architecture that uses depthwise separa-
ble convolutions to build lightweight deep neural networks.
ShufﬂeNet (Zhang et al. 2017) uses pointwise group con-
volution and channel shufﬂe to reduce computation cost.
ThiNet (Luo, Wu, and Lin 2017) uses statistic information
from next layer to prune ﬁlters which accelerates CNN mod-
els while maintaining accuracy.

Besides designing delicate net structure, light net can
get more information from extra pre-trained model during
training phrase. This idea has been emphasized in Learn-
ware (Zhou 2016). There have been some attempts adopting
a teacher-student strategy, where a more complex teacher
network is employed to teach a lightweight student network
on a given task. The teacher network helps the student net to
get a decent performance at the inference phase. Buciluˇa et
al. (Buciluˇa, Caruana, and Niculescu-Mizil 2006) improve
compression model, which pioneers this type of learning
process. They expound that the knowledge of a large en-
semble of models could transfer to a single small model,
they use a large ensemble of models to label large amounts

of unlabel data, then use the data labeled by the ensemble
models to train small model. Furthermore, Ba et al. (Ba and
Caruana 2014) train a wider and shallower net called student
net to mimic the big model called teacher net via regressing
logits before the softmax layer with (cid:96)2 loss. They think that
matching logits could get more information than the hard
label that provided by the cumbersome model. Hinton et
al. (Hinton, Vinyals, and Dean 2015) point out that identify-
ing knowledge in a trained model with the learned parameter
value is hard. Instead, they make use of one abstract view of
the knowledge that is the learned mapping from input vec-
tors to output vectors, they propose the strategy of knowl-
edge distillation which uses the class probabilities produced
by the cumbersome model as ”soft targets” for training the
small model. They prove that they are the general version of
matching logits which uesd by Ba and Caruana(2014).

Besides using the output of the teacher network, people
try to get more supervised information from the teacher.
FitNets (Romero et al. 2014) use not only the outputs but
also the intermediate representations learned by the cumber-
some model as the hint to supervise the training process.
Zagoruyko et al. (Zagoruyko and Komodakis 2016) use at-
tention as a mechanism of transferring knowledge from one
network to another. By properly deﬁning attention for con-
volutional neural networks, they improve the performance
of a student CNN by forcing it to mimic the attention maps
of a powerful teacher network.

In previous teacher-student approaches, the cumbersome
teacher networks are trained in advance. Instead of only
transferring the ﬁnal stationary outputs of the pretrained
model, we let the booster model guide the whole training
process of light net in rocket launching. We think that the
knowledge learned by the cumbersome model exists not
only in the ﬁnal outputs, but also in the full learning pro-
cess. The light model gets not only the difference between
the target and the temporary outputs, but also the possible
path towards the ﬁnal target provided by a complex model
of more learning capability. Another difference of our ap-
proach is that the part parameters of the light model and the
booster are shared in our framework. We adopt the param-
eter sharing scheme since the lower-level representation of
the same task should be universal. In the proposed architec-
ture, the booster has a much deeper speciﬁc layers to ensure
the capability to guide the light model to learn the task bet-
ter.

Training several nets together is often applied on multi
input scenes (Andrew et al. 2013; Bromley et al. 1994)
or semi-supervised task (Laine and Aila 2016). Parameters
sharing has also been used in multi-task (He et al. 2017).
However, to the best of our knowledge, there is no attempt
on using these techniques to train small net to get better per-
formance. We are the ﬁrst to utilize these schemes in model
compression attempts, and results in experiments present the
effectiveness of our method.

Our approach

In this section, we will describe our proposed rocket net
training process in detail. We will further analyze the high-

H(p, q) = − (cid:80)
i pi log qi is the cross-entropy, λ is the pa-
rameter to balance the cross-entropy and the hint loss. Here
we use the cross-entropy terms for the booster and light nets
to learn the true labels, and use hint loss function to exploit
the knowledge learned by the booster to guide the learning
process of the light network.

Characters of our method
There are some highlights in our method, which have no-
table effects on the training process and distinguish our
method from other teacher-student approaches.

Parameter sharing In our approach, the light net shares
parameter with the booster net. This scheme helps the light
net get direct thrust from the booster, which pushes it get
better performance.

The technique of parameter sharing is not new in deep
learning. In the area of computer vision, it is a common
scheme to train deep convolutional neural networks in a
multi-task manner. We assume that these tasks can be built
on some shared low-level representations of the images.
Given this assumption, we could reduce the parameters in
neural network and improve its generalization capability. It
is noticeable that, in industrial applications, e.g. CTR predic-
tion, reusing the embedding layers from other tasks helps a
new task converge more easily and get a better performance.

Simultaneous training
In most teacher-student methods,
the teacher network is trained on the target database in ad-
vance, and its parameters are ﬁxed when guiding the training
process of the student net. Different from these approaches,
we have the light and booster nets trained simultaneously,
the whole learning process of the target light net is guided
by the booster net. The light model can learn from not only
the difference between the target and its temporary outputs,
but also the possible path towards the ﬁnal target provided
by a complex model with more learning capability.

Notice that instead of training the teacher and student nets
separately, the whole training time of our proposed architec-
ture is shortened. Therefore, the compressed model can be
trained more efﬁciently to meet the requirement in industrial
applications that the inference model be updated frequently.

Hint loss functions
In our approach, we transfer the
booster net’s knowledge to the light net by minimizing the
hint loss. Several different hint loss functions are considered
in this work:
• MSE of ﬁnal softmax: LMSE(x) = (cid:107)p(x) − q(x)(cid:107)2
2,
• MSE of

logits before softmax activation, which is
also adopted in SNN-MIMIC (Ba and Caruana 2014):
Lmimic(x) = (cid:107)l(x) − z(x)(cid:107)2
2,

• knowledge distillation (Hinton, Vinyals, and Dean 2015):

LKD(x) = H( p(x)
For the MSE of ﬁnal softmax LMSE, we have the deriva-

T ), where T is the temperature.

T , q(x)

tive of the hint loss with respect to li(x):

∂LMSE(x)
∂li(x)

= 2pi(x)

(cid:104)
pi(x) − qi(x)

(cid:88)

+

k

pk(x)(qk(x) − pk(x))

(cid:105)
.

(2)

Figure 1: Whole Net Structure, blue dashed circle represents
light net, pink dashed circle represents booster net. Yellow
layers are shared by light net and booster net.

lights of our method and compare different hint loss func-
tions.

The sketch of our method
Fig. 1 represents the general structure of our architecture, it
is composed of two parts: the light net and the booster net.
These two networks share some lower-level layers (anno-
tated in yellow), and they both have their speciﬁc layers for
the learning and prediction on the same task.

We let x and y denote the inputs and one-hot ground truth
labels of our neural architecture. Let L be the light net with
an output softmax as p(x) = softmax(l(x)), where l(x)
is the weighted sum before the softmax activation. Param-
eters for the light net consist of two components: parame-
ters in shared layers WS and parameters in its lightweight
particular layers for prediction WL. We let B denote the
booster network with shared parameters WS and its partic-
ular weights WB to get the ﬁnal output. Similar to the light
net, we have q(x) = softmax(z(x)) as the output softmax
for the booster, where z(x) is the weighted sum before the
softmax activation. We expect that the light net is trained
similar to the true labels y, as well as approximate to the
knowledge learned by the booster net with much more rep-
resentation capability. To solve this problem, we take hint
loss in the training objective in order to convey knowledge
from the booster net to the light net. The objective function
for rocket launching is deﬁned as follows:

L(x; WS, WL, WB) = H(y, p(x)) + H(y, q(x))

+ λ(cid:107)l(x) − z(x)(cid:107)2
2,

(1)

where the last term is the hint loss function as the mean
square error (MSE) between the logits z(x) and l(x),

Notice that the gradient is proportional to the prediction out-
puts of the light net. If li(x) is very negative, causing pi(x)
close to zero and the gradient to vanish, the MSE of ﬁnal
softmax may fail to learn the difference in outputs, even
when the light net makes radically different outputs from
the booster net.

SNN-MIMIC learning (Ba and Caruana 2014) uses the
formulation of Lmimic between the teacher and student net-
works. We have the derivative w.r.t. li(x):

∂Lmimic(x)
∂li(x)

= li(x) − zi(x).

(3)

We observe that the update directly reduces the difference
between the logits before softmax, which prevents the prob-
lem of gradient vanishing with LMSE. Experimental results
also present that training with Lmimic achieves the best per-
formance among these different hint loss formulations.

Knowledge distillation (Hinton, Vinyals, and Dean 2015)
uses cross-entropy to restrict the probability outputs of two
models. In their work, a temperature T is introduced to pro-
duce a softer probability distribution among classes. They
think that knowledge distillation is the general case of
matching logits. They prove that with a high temperature,
the gradient w.r.t. li(x) is:

∂LKD(x)
∂li(x)

≈

1
N T 2 (li(x) − zi(x)),

(4)

where N is the number of classes, and approximation
eli(x)/T ≈ 1 + li(x)/T is used. Their approximation ne-
glects the term (li(x)/T )2 in Taylor series when the tem-
perature is high enough compared with the magnitude of the
1
N T 2 (li(x) −
logits. Notice that the approximate gradient
zi(x)) is the same order of inﬁnitesimal to the neglected
term (li(x)/T )2, this approximation may also cause a neg-
ligible gradient. But we approve the temperature’s effect that
it can soften class probability, which makes the distillation
pays more attention to matching the negative logits below
the average. In practice, Hinton et al. (Hinton, Vinyals, and
Dean 2015) suggest that intermediate temperatures work
best, which ignores the very negative logits that might be
noisy. While in this work, we ﬁnd that the optimization of
all the logits’ difference in our framework outperforms using
the formulation of LKD. We think that some very negative
logits may convey useful knowledge acquired by the cum-
bersome net, which helps the student network to get a better
performance.

Gradient block In our proposed training process, the light
net shares parameters and is trained together with the booster
net. This simultaneous training scheme has an inevitable ef-
fect on the performance of the booster network. Using both
cross-entropy H(y, q(x)) and hint loss as the objective to
update booster’s parameters will make the categorical out-
puts of the booster strongly affected by those of the light net,
and hinder the booster from learning on the task directly.
Since the learning capability of the light model is limited,
the performance of the booster net will be inevitably deterio-
rated. Notice that the light model learns from the knowledge

Figure 2: Gradient backward with the gradient block
scheme.

conveyed by the booster net during training, this deteriora-
tion in the booster model’s learning will further diminish the
learning potential of the light network.

In order to solve this problem, during the training process,
we develop the gradient block scheme to prevent the booster
model from minimizing the hint loss objective. As we can
see from Fig. 2, during the back-propagation of the hint loss
term, we ﬁx the gradient of booster net’s speciﬁc parame-
ters (WB), and use this moment booster net’s probability as
target to supervise light net’s study.

This operation makes the speciﬁc parameters WB in
booster net away from the effect given by the light model,
thus the booster can directly learn from the ground truth la-
bels to achieve its best performance. For the light net, the
parameters are normally updated to optimize the objective
function in Eq. 1. Both the supervisory information and the
booster’s knowledge are the targets for the light model to
learn from.

Experiments
In this section, we evaluate our rocket launching on sev-
eral classiﬁcation datasets and a real advertisement database
from a Chinese leading e-commerce site. Experimental re-
sults present that our proposed approach achieves notable
improvements in the light net’s performance and outper-
forms other teacher-student methods. In experiments on
public benchmarks, we compare our method with knowl-
edge distillation (KD) (Hinton, Vinyals, and Dean 2015) and
attention transfer (AT) (Zagoruyko and Komodakis 2016).

Experiments on CIFAR-10
The CIFAR-10 dataset (Krizhevsky and Hinton 2009) con-
sists of 32 × 32 color images from 10 class. These images
are split into 50, 000 training samples and 10, 000 testing

Table 1: Comparisons of classiﬁcation performance(test error) on CIFAR-10

light

booster

base1 AT

KD rocket2

rocket+KD3 booster4 booster only5

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 8.77
WRN-16-2, 0.7M(b) WRN-40-2, 2.2M 6.31
WRN-16-1, 0.2M(a) WRN-40-1, 0.6M 8.69

8.25
5.85
-6

7.87
6.64
5.67
5.20
7.85
7.27
2 rocket means light net’s result in rocket launching.

8.39
6.08
8.34

7.52
5.64
7.51

6.58
5.23
6.58

1 base means WRN-16 trains individually.
3 rocket+KD means light net’s result using rocket launching combined with KD.
4 booster means booster net’s result in rocket launching.
6 WRN-16-1, 0.2M(b) can’t be applied on AT directly, so we did not report this result.

5 booster only means WRN-40 trains individually.

samples. We preprocess the data with the same operations
as in Zagoruyko and Komodakis(2016). All the experiments
are repeated 3 times with different seed, and we take the
median of error rates as the ﬁnal results. All the experi-
ments, we use the same learning rate tuning and epochs as
in Zagoruyko and Komodakis(2016). We set the initial learn-
ing rate to be 0.1 with momentum to be 0.9, while we drop
learning rate by 0.2 at [60, 120, 160] epochs and train for to-
tal 200 epochs.

We employ wide residual net (Zagoruyko and Nikos
2016) to be the instantiation of rocket launching on CIFAR-
10 datasets. Wide residual net (WRN) has three groups of
block, each block has two convolutional layers with larger
width in contrast with the original ResNet. The wider layers
are accompanied with more parameters, which could offer
more representation capability. Fig. 3(a) shows the schemat-
ics of the rocket net structure based on wide residual net-
works. Layers in red are shared by the light net and the
booster. As we can see, sharing layers (layers in red) are in
the lower group of wide residual net. The yellow part is the
speciﬁc structure designed for light net to make prediction.
The blue part is the speciﬁc layers of the booster, which is
removed at inference phrase. Attention transfer (AT) uses
teacher net’s output activations of each group of residual
blocks to supervise student net’s each group’s activations.
In order to compare with AT fairly, we design another shar-
ing way. As Fig. 3(b) shows, the light net shares some lower
blocks with the booster in each group.

We explore rocket launching on light and booster net
with different network depths and widths (e.g. WRN-16-
1(a),0.2M means wide residual network with depth of 16
and widening factor of 1, using the layer sharing way like
Fig. 3(a), its parameters’ size is 0.2M). As shown in Table 1,
our approach achieves consistently notable improvement
compared to the base light net with different experimental
settings. Taking the ﬁrst line of Table 1 as example, using
the same WRN-16-1(b) net structure, our rocket launching
get 0.9% improvement compared with this net trained in-
dividual. We also observe that our approach outperforms
other teacher-student methods, such as knowledge distilla-
tion (KD) (Hinton, Vinyals, and Dean 2015) and attention
transfer (Zagoruyko and Komodakis 2016). It’s notable that
beneﬁtting from the structure characteristic of residual net,
the way of sharing shown in Fig. 3(b) still obtains decent
result.

Besides comparing with other approaches, we also try to

combine KD with our method by adding LKD to the objec-
tive in Eq. 1. It’s notable that we use probability that pre-
trained by booster net in LKD, which means light net can
also obtain additional guidance from a pre-trained booster
network. From Table 1, we see that the performance can be
further improved with the application of KD, which means
our rocket launching has different effect on the light net with
KD. The light net beneﬁts from both the supervisory in-
formation brought by the pre-trained teacher network, and
the knowledge conveyed by the booster network during the
training process.

We also investigate our framework with different hint loss
formulations. From Table 3, we see that the adopted hint loss
to match the logits achieves the best performance among the
different objectives. While hint loss to match the probability
performs worst, which means gradient vanishing affects the
training process. The experimental results are in accordance
with our previous analysis.

Performance of each part of our framework Experi-
ments are also carried out on CIFAR-10 to evaluate our
framework design (see Fig. 3). We observe that simulta-
neous training, layer sharing and gradient block all con-
tribute to the improvements of our approach. For WRN-16-
1(b), gradient block (GB) gets 0.63% improvement com-
pared with rocket (no GB); Parameter sharing gets 0.19%
improvement compared with rocket (no sharing). Using part
parameter from booster to initialize the light net, using both
cross-entropy which learns the ground truth and Lmimic be-
tween light net’s logits and ﬁxed logits from booster to train
light net alone, we get worse results than rocket, which
shows the effectiveness of simultaneous training.

Besides, our rocket launching with joint training could
reduce the whole training time. On CIFAR-10 dataset, the
training process of 40-layer booster takes 173 epochs to
converge, with 24.6s per epoch on average, and the train-
ing of the 16-layer light net takes 165 epochs, with 18.3s
for each epoch. The total time is 7275.3s. In contrast, our
rocket launching process takes 180 epochs and a total time
of 6153.0s to converge, with 34.2s for each epoch. We see
that the rocket launching do shorten the time for training the
architecture when compared with training the two networks
separately.

Performance with different depths
In this part, we in-
vestigate the learning capability of the light model with dif-
ferent depths and parameter sizes. Different from previous

Table 2: Comparisons of different framework design’s result (test error) on CIFAR-10.

light

booster

rocket (no GB)1

rocket (no sharing)2

rocket (no joint training)3

rocket

WRN-16-1(b) WRN-40-1
WRN-16-1(a) WRN-40-1

8.50
8.30

8.06
8.23

8.04
8.23

7.87
7.85

1 rocket (no GB) means rocket launching without gradient block.
2 rocket (no sharing) means rocket launching without parameter sharing.
net trains ﬁrst, then light net use some layers of booster to initialize, and use hint loss to learn booster net’s logits.

3 rocket (no joint training) means booster

base

8.77
8.69

Table 3: Different hint loss functions on CIFAR-10
Lmimic LMSE LKD

booster

light

WRN-16-1 (b) WRN-40-1
WRN-16-1 (a) WER-40-1

7.87
7.85

8.32
8.36

7.98
8.26

(a) bottom rocket net on wide residual net

(b) interval rocket net on wide residual net

Figure 4: The accuracy with different sharing layers of light
net on CIFAR-10

Figure 3: Proposed network structures for rocket net.

booster net in low layer.

net structure, in order to make the size of parameter propor-
tional to the layers, we use residual net with ﬁxed width from
bottom to top. Light net shares the bottom ns convolutional
layers with booster net. we tune the number of ns from 10 to
18 while the number of booster net’s layers is 40(In order to
make booster has prominent better learning ability than light
net, we set ns less than half of booster’s depth).

From Fig. 4, we see that the light model performs better
than base and KD stably, which means our light net with
different depths all can get extra information with the help of
cumbersome booster. It’s notable that the gap between base
and rocket is not proportional to the depth of light net, this
phenomenon may be caused by the balance between light
learning ability and extra information from booster net.

Visualization of rocket launching and attention transfer
In order to explain our method intuitively, we visualize each
group’s output of light net and booster net respectively. To
be consist with previous part, we use Fig. 3(b) as the basic
net. For comparison, we visualize the corresponding results
of spatial attention mapping. As we can see from Fig. 5, for
both rocket launching and attention transfer (AT), the feature
maps generated from lower groups are similar between light
and booster net. It indicates that parameter sharing and at-
tention have similar effect on lower layers. It can also show
that these methods can learn the feature representation from

Experiments on SVHN and CIFAR-100
Aiming to verify the effectiveness of rocket launching fur-
ther, we apply our method on CIFAR-100 and SVHN re-
spectively. In order to compare with AT (which is based on
WRN), we still use WRN as basic net structure, and the shar-
ing method is shown in Fig. 3(b) .

The CIFAR-100 dataset (Krizhevsky and Hinton 2009)
consists of 32 × 32 color images from 100 classes. Like
CIFAR-10, these images are still split into 50, 000 train-
ing and 10, 000 testing samples. The experiment setting of
CIFAR-100 is same as CIFAR-10.

The SVHN database (Netzer et al. 2011) is obtained from
house numbers in Google Street View images. It contains
32 × 32 images with RGB color channels in 10 class. There
are 73, 257 images in the training set, 26, 032 images in test-
ing set and 531, 131 samples in extra set. We follow the same
evaluation procedure as Sermanet et al. (Sermanet, Chintala,
and LeCun 2012) to compose our training, validation and
test sets. For this dataset, we use validation dataset to choose
the ﬁnal model. In our experiment, we use Adam (Kingma
and Ba 2014) with initial learning rate 0.001, while we
drop learning rate by 0.2 at [20, 40, 60] epochs. Because this
dataset is easy to learn, we add dropout after each speciﬁc
layer of booster net with dropout rate 20% to prevent over-
ﬁtting. For booster trained alone, same dropout layers are
added to keep consistent.

Table 4: Comparisons of classiﬁcation performance (test error) on CIFAR-100 and SVHN

dataset

light

booster

base

AT

KD rocket

rocket+KD

SVHN

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 3.58
CIFAR-100 WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 43.7

2.99
34.1

2.31
36.4

2.29
33.3

2.20
33.0

Table 5: Experiments on real Advertisement Dataset

model

# params in FC layers

# multiplications in FC layers

# inference time of FC Layers GAUC

base
rocket
booster only

576 × 200 × 80 × 2
576 × 200 × 80 × 2
576 × 720 × 360 × 240 × 180 × 90 × 2

131360
131360
837900

7.6 ms
7.6 ms
23.2 ms

0.632
0.635
0.637

dataset1 comes from productive display advertising system
in Alibaba, we use rocket launching to predict whether user
clicks given product. The size of training set is 4 billion, the
test set is 0.285 billion.

The network that we use is shown in DIN (Zhou et al.
2017). In the online system, most calculations focus on the
fully connected layers after the embedding layers. So we try
to use a booster net with more complex fully connected lay-
ers to guide our light net. The light net shares embedding
layers with booster net. The booster net has seven wide hid-
den layers using complicated operation like batch normal-
ization(Ioffe and Szegedy 2015), light net’s speciﬁc layers
with less hidden units and has only fully connected layers.
The light net in the huge real data gets 0.3% improvement
on GAUC (the generalization of AUC) (Zhou et al. 2017)
with the same latency as the base model. The booster net
gets the best performance on the ofﬂine metric, but it needs
23.2 ms for one requirement to infer hundreds candidate ad-
vertisements, which is unacceptable for online system. Our
approach can get improvement on a model with same struc-
ture and parameter quantity. And this experiment proves that
one can use our approach to break the boundary brought by
the latency limitation to some degree.

Conclusion
We propose a general framework named rocket launching
to get a efﬁcient well-performing light model with the help
of a cumbersome booster net. In order to get as much as
information from the booster model, we make the booster
and the light net train on the same task together with the
hint loss objective, which pushes the booster model to su-
pervise the whole training process of the light one. Besides,
the light model shares parameter with the booster to make
the light net get low-level representation directly from the
booster. We also analyze different hint loss functions clude-
that can convey knowledge from the booster to the light
model. Moreover, we develop the gradient block scheme to
prevent the booster net from deterioration. For future work,
we would like to explore training networks with not only
smaller depths but also fewer neurons in each layer to fur-
ther improve the inference efﬁciency.

(a) different group’s visualization result on attention transfer

(b) different group’s visualization result on rocket launching

Figure 5: The visualization results on both rocket launching
and attention transfer, in each group, the ﬁrst and second
picture in each group stands for booster net and light net
respectively

Error rate on above two dataset is shown in Table 4.
We observe that our approach gets 1.29% improvement on
SVHN and 10.4% improvement on CIFAR-100 compared
with base model. What’s more, rocket launching outper-
forms other teacher-student methods on all settings.

Experiments on real Advertisement Dataset

In order to verity the effectiveness of rocket launching fur-
ther, we test our method on huge real industry dataset. The

1 https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176100
073.888.26.70c5adaeMeJQpW&id=19

References
[Andrew et al. 2013] Andrew, G.; Arora, R.; Bilmes, J.; and
Livescu, K. 2013. Deep canonical correlation analysis. In
Proceedings of the 30th International Conference on Ma-
chine Learning, 1247–1255.
[Ba and Caruana 2014] Ba, J., and Caruana, R. 2014. Do
deep nets really need to be deep? In Advances in Neural
Information Processing Systems 27, 2654–2662.
[Bahdanau, Cho, and Bengio 2014] Bahdanau, D.; Cho, K.;
2014. Neural machine translation by
and Bengio, Y.
arXiv preprint
jointly learning to align and translate.
arXiv:1409.0473.
[Bromley et al. 1994] Bromley, J.; Guyon, I.; LeCun, Y.;
S¨ackinger, E.; and Shah, R. 1994. Signature veriﬁcation
using a siamese time delay neural network. In Advances in
Neural Information Processing Systems 12, 737–744.
[Buciluˇa, Caruana, and Niculescu-Mizil 2006] Buciluˇa, C.;
Caruana, R.; and Niculescu-Mizil, A. 2006. Model com-
pression. In Proceedings of the 12th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining,
535–541.
[Cheng et al. 2016] Cheng, H.-T.; Koc, L.; Harmsen, J.;
Shaked, T.; Chandra, T.; Aradhye, H.; Anderson, G.; Cor-
rado, G.; Chai, W.; Ispir, M.; et al. 2016. Wide & deep
In Proceedings of the
learning for recommender systems.
1st Workshop on Deep Learning for Recommender Systems,
7–10. Boston, USA: ACM.
[Denton et al. 2014] Denton, E. L.; Zaremba, W.; Bruna, J.;
LeCun, Y.; and Fergus, R. 2014. Exploiting linear struc-
ture within convolutional networks for efﬁcient evaluation.
In Advances in Neural Information Processing Systems 27,
1269–1277.
[He et al. 2016] He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on Computer Vision and Pattern
Recognition, 770–778.
[He et al. 2017] He, K.; Gkioxari, G.; Dollar, P.; and Gir-
arXiv preprint
shick, R.
arXiv:1703.06870.
[Hinton, Vinyals, and Dean 2015] Hinton, G.; Vinyals, O.;
and Dean, J. 2015. Distilling the knowledge in a neural
network. arXiv preprint arXiv:1503.02531.
[Howard et al. 2017] Howard, A. G.; Zhu, M.; Chen, B.;
Kalenichenko, D.; Wang, W.; Weyand, T.; Andreetto, M.;
and Adam, H. 2017. Mobilenets: Efﬁcient convolutional
arXiv
neural networks for mobile vision applications.
preprint arXiv:1704.04861.
[Huang et al. 2016] Huang, G.; Liu, Z.; Weinberger, K. Q.;
and van der Maaten, L. 2016. Densely connected convolu-
tional networks. arXiv preprint arXiv:1608.06993.
[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015.
Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Proceedings of the 32nd
International Conference on Machine Learning.
[Kingma and Ba 2014] Kingma, D., and Ba, J. 2014. Adam:

2017. Mask R-CNN.

arXiv preprint

A method for stochastic optimization.
arXiv:1412.6980.
[Krizhevsky and Hinton 2009] Krizhevsky, A., and Hinton,
G. 2009. Learning multiple layers of features from tiny
images.
[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.;
Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiﬁca-
tion with deep convolutional neural networks. In Advances
in Neural Information Processing Systems 25, 1097–1105.
[Laine and Aila 2016] Laine, S., and Aila, T. 2016. Tempo-
ral ensembling for semi-supervised learning. arXiv preprint
arXiv:1610.02242.
[Luo, Wu, and Lin 2017] Luo, J.-H.; Wu, J.; and Lin, W.
2017. Thinet: A ﬁlter level pruning method for deep neu-
ral network compression. arXiv preprint arXiv:1707.06342.
[Netzer et al. 2011] Netzer, Y.; Wang, T.; Coates, A.; Bis-
sacco, A.; Wu, B.; and Ng, A. Y. 2011. Reading digits in
natural images with unsupervised feature learning. In NIPS
workshop on deep learning and unsupervised feature learn-
ing, volume 2011, 5.
[Romero et al. 2014] Romero, A.; Ballas, N.; Kahou, S. E.;
and Chassang, A. 2014. Fitnets: Hints for thin deep nets.
arXiv preprint arXiv:1412.655d0.
[Sermanet, Chintala, and LeCun 2012] Sermanet, P.; Chin-
tala, S.; and LeCun, Y. 2012. Convolutional neural networks
applied to house numbers digit classiﬁcation. In Proceed-
ings of the 21st International Conference on Pattern Recog-
nition, 3288–3291. IEEE.
[Simonyan and Zisserman 2015] Simonyan, K., and Zisser-
man, A. 2015. Very deep convolutional networks for large-
scale image recognition. In Proceedings of the 3th Interna-
tional Conference on Learning Representations, 621–630.
[Szegedy et al. 2015] Szegedy, C.; Liu, W.; Jia, Y.; Sermanet,
P.; Reed, S.; Anguelov, D.; Erhan, D.; Vanhoucke, V.; and
Rabinovich, A. 2015. Going deeper with convolutions.
In Proceedings of the IEEE conference on Computer Vision
and Pattern Recognition, 1–9.
[Zagoruyko and Komodakis 2016] Zagoruyko, Z., and Ko-
modakis, K. 2016. Paying more attention to attention: Im-
proving the performance of convolutional neural networks
via attention transfer. arXiv preprint arXiv:1612.03928.
[Zagoruyko and Nikos 2016] Zagoruyko, S., and Nikos, K.
arXiv preprint
2016.
arXiv:1605.07146.
[Zhang et al. 2017] Zhang, X.; Zhou, X.; Lin, M.; and Sun,
Shufﬂenet: An extremely efﬁcient convolu-
J.
tional neural network for mobile devices. arXiv preprint
arXiv:1707.01083.
[Zhou et al. 2017] Zhou, G.; Song, C.; Zhu, X.; Ma, X.; Yan,
Y.; Dai, X.; Zhu, H.; Jin, J.; Li, H.; and Gai, K. 2017. Deep
interest network for click-through rate prediction. arXiv
preprint arXiv:1706.06978.
[Zhou 2016] Zhou, Z.-H.
2016. Learnware: on the fu-
ture of machine learning. Frontiers of Computer Science
10(4):589–590.

Wide residual networks.

2017.

8
1
0
2
 
r
a

M
 
5
1
 
 
]
L
M

.
t
a
t
s
[
 
 
3
v
6
0
1
4
0
.
8
0
7
1
:
v
i
X
r
a

Rocket Launching: A Universal and Efﬁcient Framework for Training
Well-performing Light Net

Guorui Zhou,1∗ Ying Fan,1 Runpeng Cui,2 Weijie Bian1
Xiaoqiang Zhu1 and Kun Gai1
1Alibaba Inc, Beijing, China
2Department of automation, Tsinghua university
{guorui.xgr, fanying.fy, weijie.bwj, xiaoqiang.zxq}@alibaba-inc.com, cuirunpeng@gmail.com, jingshi.gk@taobao.com

Abstract

Models applied on real time response tasks, like click-through
rate (CTR) prediction model, require high accuracy and rig-
orous response time. Therefore, top-performing deep models
of high depth and complexity are not well suited for these
applications with the limitations on the inference time. In or-
der to get neural networks of better performance given the
time limitations, we propose a universal framework that ex-
ploits a booster net to help train the lightweight net for pre-
diction. We dub the whole process rocket launching, where
the booster net is used to guide the learning of our light net
throughout the whole training process. We analyze different
loss functions aiming at pushing the light net to behave simi-
larly to the booster net. Besides, we use one technique called
gradient block to improve the performance of light net and
booster net further. Experiments on benchmark datasets and
real-life industrial advertisement data show the effectiveness
of our proposed method.

Introduction
Deep networks have achieved state-of-the-art results in
many areas, such as computer vision (Huang et al. 2016) and
nature language processing (Bahdanau, Cho, and Bengio
2014). From AlexNet (Krizhevsky, Sutskever, and Hinton
2012) to recently proposed DenseNet (Huang et al. 2016),
better performances are accompanied with deeper and wider
networks and more complex and adaptable structures. A
more complex structure of neural networks means longer
inference time, which is not tolerated in industrial environ-
ment. Networks mentioned above only consider the evalu-
ation criterion of accuracy, while neglect the necessity of
real-time response in industrial applications.

At the same time, some nets like DIN (Zhou et al. 2017)
and wide & deep model (Cheng et al. 2016) get more and
more attention. These nets share some characteristics: nets
are shallow, layers are very simple and with less computa-
tion cost. In industrial applications, e.g. online advertising
systems, models have to make prediction of hundreds of ad-
vertisements for one user in several milliseconds, which re-
stricts the complexity of model. Only simple and shallow

∗Correspondence author is Guorui Zhou. The source code is

available at https://github.com/zhougr1993/Rocket-Launching.
Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

structure meets the stringent response time requirements in
industry.

Accuracy and latency are the two points that we pay at-
tention to. In general, there are two solutions to reduce
runtime complexities while keeping a decent performance.
Some works make use of factorizing or compressing to di-
rectly simplify the computation, such as matrix SVD (Den-
ton et al. 2014), MobileNet (Howard et al. 2017), and Shuf-
ﬂeNet (Zhang et al. 2017). Other approaches adopt the
teacher-student strategy. They use light networks with fewer
layers and parameters to decrease the inference time, while
the light nets are trained helped by a complicated teacher
network that trained in advance, like knowledge distilla-
tion (Hinton, Vinyals, and Dean 2015) and FitNet (Romero
et al. 2014). These teacher-student methods decrease the
runtime complexities, and can be further combined with ap-
proaches of the ﬁrst category. In this work, we propose a
novel universal framework to train decent small networks,
motivated by the potential of teacher-student methods.

In this work, we develop a novel network training pro-
cess dubbed rocket launching. The light net is the target
network for inference, the booster relates to the deeper and
more complex network from the architecture. Both the light
and the booster net compose the architecture of rocket net-
work. At the training stage, the light and booster networks
are trained simultaneously on the same task. Besides, the
light net also keeps getting knowledge learned by the booster
through the optimization of the hint loss, which is included
in the objective function to make both nets have similar be-
haviour during training. The booster guides the optimization
of the target light network along all the training process. At
the inference stage, only the trained light network is used.
Different from previous teacher-student methods (Hinton,
Vinyals, and Dean 2015; Romero et al. 2014), we make the
light model share some lower layers with the cumbersome
one and train them simultaneously.

In this paper, we propose a universal method aiming to
obtain a well-behaved light net considering limitations on
inference time. Our method is suitable to many different net-
work structures. In brief, our contributions can be summa-
rized as follows:
• We propose a novel universal training process called
rocket launching, which makes use of the booster net
to supervise the learning of the light network through

whole training process. We show that a light model can
be trained to perform close to deeper and more complex
models in experiments.

• We analyze different hint loss functions to transfer the in-

formation from booster to the light net.

• In order to push light net to be close to booster net, we
use gradient block technique to cancel the effect of hint
loss’s back-propagation on layers of the booster, which
gives booster net more freedom to update its parameters
based on ground truth and improve the performance fur-
ther.
Our method achieves the state-of-the-art results on pub-
licly available benchmarks as well as industrial dataset. It is
notable that our method performs better than other teacher-
student approaches. Experimental results present that the
performance can be further improved when combining other
teacher-student approaches with our framework.

The remainder of this paper starts from a summary of re-
lated work. Then we introduce our approach, followed by
experiments and conclusions.

Related work
Deep neural networks have drawn increasing attention in re-
cent years due to their overwhelming performance on many
research areas. One main trend of network structure design
is to develop neural networks with larger depth, more pa-
rameters and higher complexity to achieve better perfor-
mance (Simonyan and Zisserman 2015; Szegedy et al. 2015;
He et al. 2016; Zagoruyko and Nikos 2016). However, these
top-performing networks with high complexity will result
in time consuming systems at the inference phase. There-
fore, they are not well suitable for applications with infer-
ence time limitations.

There have been some explorations of model compres-
sion by directly simplifying the computation or pruning of
the original neural operations. Denton et al. (Denton et al.
2014) use SVD to approximate the convolutional operations
in deep CNNs. MobileNets (Howard et al. 2017) are based
on a streamlined architecture that uses depthwise separa-
ble convolutions to build lightweight deep neural networks.
ShufﬂeNet (Zhang et al. 2017) uses pointwise group con-
volution and channel shufﬂe to reduce computation cost.
ThiNet (Luo, Wu, and Lin 2017) uses statistic information
from next layer to prune ﬁlters which accelerates CNN mod-
els while maintaining accuracy.

Besides designing delicate net structure, light net can
get more information from extra pre-trained model during
training phrase. This idea has been emphasized in Learn-
ware (Zhou 2016). There have been some attempts adopting
a teacher-student strategy, where a more complex teacher
network is employed to teach a lightweight student network
on a given task. The teacher network helps the student net to
get a decent performance at the inference phase. Buciluˇa et
al. (Buciluˇa, Caruana, and Niculescu-Mizil 2006) improve
compression model, which pioneers this type of learning
process. They expound that the knowledge of a large en-
semble of models could transfer to a single small model,
they use a large ensemble of models to label large amounts

of unlabel data, then use the data labeled by the ensemble
models to train small model. Furthermore, Ba et al. (Ba and
Caruana 2014) train a wider and shallower net called student
net to mimic the big model called teacher net via regressing
logits before the softmax layer with (cid:96)2 loss. They think that
matching logits could get more information than the hard
label that provided by the cumbersome model. Hinton et
al. (Hinton, Vinyals, and Dean 2015) point out that identify-
ing knowledge in a trained model with the learned parameter
value is hard. Instead, they make use of one abstract view of
the knowledge that is the learned mapping from input vec-
tors to output vectors, they propose the strategy of knowl-
edge distillation which uses the class probabilities produced
by the cumbersome model as ”soft targets” for training the
small model. They prove that they are the general version of
matching logits which uesd by Ba and Caruana(2014).

Besides using the output of the teacher network, people
try to get more supervised information from the teacher.
FitNets (Romero et al. 2014) use not only the outputs but
also the intermediate representations learned by the cumber-
some model as the hint to supervise the training process.
Zagoruyko et al. (Zagoruyko and Komodakis 2016) use at-
tention as a mechanism of transferring knowledge from one
network to another. By properly deﬁning attention for con-
volutional neural networks, they improve the performance
of a student CNN by forcing it to mimic the attention maps
of a powerful teacher network.

In previous teacher-student approaches, the cumbersome
teacher networks are trained in advance. Instead of only
transferring the ﬁnal stationary outputs of the pretrained
model, we let the booster model guide the whole training
process of light net in rocket launching. We think that the
knowledge learned by the cumbersome model exists not
only in the ﬁnal outputs, but also in the full learning pro-
cess. The light model gets not only the difference between
the target and the temporary outputs, but also the possible
path towards the ﬁnal target provided by a complex model
of more learning capability. Another difference of our ap-
proach is that the part parameters of the light model and the
booster are shared in our framework. We adopt the param-
eter sharing scheme since the lower-level representation of
the same task should be universal. In the proposed architec-
ture, the booster has a much deeper speciﬁc layers to ensure
the capability to guide the light model to learn the task bet-
ter.

Training several nets together is often applied on multi
input scenes (Andrew et al. 2013; Bromley et al. 1994)
or semi-supervised task (Laine and Aila 2016). Parameters
sharing has also been used in multi-task (He et al. 2017).
However, to the best of our knowledge, there is no attempt
on using these techniques to train small net to get better per-
formance. We are the ﬁrst to utilize these schemes in model
compression attempts, and results in experiments present the
effectiveness of our method.

Our approach

In this section, we will describe our proposed rocket net
training process in detail. We will further analyze the high-

H(p, q) = − (cid:80)
i pi log qi is the cross-entropy, λ is the pa-
rameter to balance the cross-entropy and the hint loss. Here
we use the cross-entropy terms for the booster and light nets
to learn the true labels, and use hint loss function to exploit
the knowledge learned by the booster to guide the learning
process of the light network.

Characters of our method
There are some highlights in our method, which have no-
table effects on the training process and distinguish our
method from other teacher-student approaches.

Parameter sharing In our approach, the light net shares
parameter with the booster net. This scheme helps the light
net get direct thrust from the booster, which pushes it get
better performance.

The technique of parameter sharing is not new in deep
learning. In the area of computer vision, it is a common
scheme to train deep convolutional neural networks in a
multi-task manner. We assume that these tasks can be built
on some shared low-level representations of the images.
Given this assumption, we could reduce the parameters in
neural network and improve its generalization capability. It
is noticeable that, in industrial applications, e.g. CTR predic-
tion, reusing the embedding layers from other tasks helps a
new task converge more easily and get a better performance.

Simultaneous training
In most teacher-student methods,
the teacher network is trained on the target database in ad-
vance, and its parameters are ﬁxed when guiding the training
process of the student net. Different from these approaches,
we have the light and booster nets trained simultaneously,
the whole learning process of the target light net is guided
by the booster net. The light model can learn from not only
the difference between the target and its temporary outputs,
but also the possible path towards the ﬁnal target provided
by a complex model with more learning capability.

Notice that instead of training the teacher and student nets
separately, the whole training time of our proposed architec-
ture is shortened. Therefore, the compressed model can be
trained more efﬁciently to meet the requirement in industrial
applications that the inference model be updated frequently.

Hint loss functions
In our approach, we transfer the
booster net’s knowledge to the light net by minimizing the
hint loss. Several different hint loss functions are considered
in this work:
• MSE of ﬁnal softmax: LMSE(x) = (cid:107)p(x) − q(x)(cid:107)2
2,
• MSE of

logits before softmax activation, which is
also adopted in SNN-MIMIC (Ba and Caruana 2014):
Lmimic(x) = (cid:107)l(x) − z(x)(cid:107)2
2,

• knowledge distillation (Hinton, Vinyals, and Dean 2015):

LKD(x) = H( p(x)
For the MSE of ﬁnal softmax LMSE, we have the deriva-

T ), where T is the temperature.

T , q(x)

tive of the hint loss with respect to li(x):

∂LMSE(x)
∂li(x)

= 2pi(x)

(cid:104)
pi(x) − qi(x)

(cid:88)

+

k

pk(x)(qk(x) − pk(x))

(cid:105)
.

(2)

Figure 1: Whole Net Structure, blue dashed circle represents
light net, pink dashed circle represents booster net. Yellow
layers are shared by light net and booster net.

lights of our method and compare different hint loss func-
tions.

The sketch of our method
Fig. 1 represents the general structure of our architecture, it
is composed of two parts: the light net and the booster net.
These two networks share some lower-level layers (anno-
tated in yellow), and they both have their speciﬁc layers for
the learning and prediction on the same task.

We let x and y denote the inputs and one-hot ground truth
labels of our neural architecture. Let L be the light net with
an output softmax as p(x) = softmax(l(x)), where l(x)
is the weighted sum before the softmax activation. Param-
eters for the light net consist of two components: parame-
ters in shared layers WS and parameters in its lightweight
particular layers for prediction WL. We let B denote the
booster network with shared parameters WS and its partic-
ular weights WB to get the ﬁnal output. Similar to the light
net, we have q(x) = softmax(z(x)) as the output softmax
for the booster, where z(x) is the weighted sum before the
softmax activation. We expect that the light net is trained
similar to the true labels y, as well as approximate to the
knowledge learned by the booster net with much more rep-
resentation capability. To solve this problem, we take hint
loss in the training objective in order to convey knowledge
from the booster net to the light net. The objective function
for rocket launching is deﬁned as follows:

L(x; WS, WL, WB) = H(y, p(x)) + H(y, q(x))

+ λ(cid:107)l(x) − z(x)(cid:107)2
2,

(1)

where the last term is the hint loss function as the mean
square error (MSE) between the logits z(x) and l(x),

Notice that the gradient is proportional to the prediction out-
puts of the light net. If li(x) is very negative, causing pi(x)
close to zero and the gradient to vanish, the MSE of ﬁnal
softmax may fail to learn the difference in outputs, even
when the light net makes radically different outputs from
the booster net.

SNN-MIMIC learning (Ba and Caruana 2014) uses the
formulation of Lmimic between the teacher and student net-
works. We have the derivative w.r.t. li(x):

∂Lmimic(x)
∂li(x)

= li(x) − zi(x).

(3)

We observe that the update directly reduces the difference
between the logits before softmax, which prevents the prob-
lem of gradient vanishing with LMSE. Experimental results
also present that training with Lmimic achieves the best per-
formance among these different hint loss formulations.

Knowledge distillation (Hinton, Vinyals, and Dean 2015)
uses cross-entropy to restrict the probability outputs of two
models. In their work, a temperature T is introduced to pro-
duce a softer probability distribution among classes. They
think that knowledge distillation is the general case of
matching logits. They prove that with a high temperature,
the gradient w.r.t. li(x) is:

∂LKD(x)
∂li(x)

≈

1
N T 2 (li(x) − zi(x)),

(4)

where N is the number of classes, and approximation
eli(x)/T ≈ 1 + li(x)/T is used. Their approximation ne-
glects the term (li(x)/T )2 in Taylor series when the tem-
perature is high enough compared with the magnitude of the
1
N T 2 (li(x) −
logits. Notice that the approximate gradient
zi(x)) is the same order of inﬁnitesimal to the neglected
term (li(x)/T )2, this approximation may also cause a neg-
ligible gradient. But we approve the temperature’s effect that
it can soften class probability, which makes the distillation
pays more attention to matching the negative logits below
the average. In practice, Hinton et al. (Hinton, Vinyals, and
Dean 2015) suggest that intermediate temperatures work
best, which ignores the very negative logits that might be
noisy. While in this work, we ﬁnd that the optimization of
all the logits’ difference in our framework outperforms using
the formulation of LKD. We think that some very negative
logits may convey useful knowledge acquired by the cum-
bersome net, which helps the student network to get a better
performance.

Gradient block In our proposed training process, the light
net shares parameters and is trained together with the booster
net. This simultaneous training scheme has an inevitable ef-
fect on the performance of the booster network. Using both
cross-entropy H(y, q(x)) and hint loss as the objective to
update booster’s parameters will make the categorical out-
puts of the booster strongly affected by those of the light net,
and hinder the booster from learning on the task directly.
Since the learning capability of the light model is limited,
the performance of the booster net will be inevitably deterio-
rated. Notice that the light model learns from the knowledge

Figure 2: Gradient backward with the gradient block
scheme.

conveyed by the booster net during training, this deteriora-
tion in the booster model’s learning will further diminish the
learning potential of the light network.

In order to solve this problem, during the training process,
we develop the gradient block scheme to prevent the booster
model from minimizing the hint loss objective. As we can
see from Fig. 2, during the back-propagation of the hint loss
term, we ﬁx the gradient of booster net’s speciﬁc parame-
ters (WB), and use this moment booster net’s probability as
target to supervise light net’s study.

This operation makes the speciﬁc parameters WB in
booster net away from the effect given by the light model,
thus the booster can directly learn from the ground truth la-
bels to achieve its best performance. For the light net, the
parameters are normally updated to optimize the objective
function in Eq. 1. Both the supervisory information and the
booster’s knowledge are the targets for the light model to
learn from.

Experiments
In this section, we evaluate our rocket launching on sev-
eral classiﬁcation datasets and a real advertisement database
from a Chinese leading e-commerce site. Experimental re-
sults present that our proposed approach achieves notable
improvements in the light net’s performance and outper-
forms other teacher-student methods. In experiments on
public benchmarks, we compare our method with knowl-
edge distillation (KD) (Hinton, Vinyals, and Dean 2015) and
attention transfer (AT) (Zagoruyko and Komodakis 2016).

Experiments on CIFAR-10
The CIFAR-10 dataset (Krizhevsky and Hinton 2009) con-
sists of 32 × 32 color images from 10 class. These images
are split into 50, 000 training samples and 10, 000 testing

Table 1: Comparisons of classiﬁcation performance(test error) on CIFAR-10

light

booster

base1 AT

KD rocket2

rocket+KD3 booster4 booster only5

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 8.77
WRN-16-2, 0.7M(b) WRN-40-2, 2.2M 6.31
WRN-16-1, 0.2M(a) WRN-40-1, 0.6M 8.69

8.25
5.85
-6

7.87
6.64
5.67
5.20
7.85
7.27
2 rocket means light net’s result in rocket launching.

8.39
6.08
8.34

7.52
5.64
7.51

6.58
5.23
6.58

1 base means WRN-16 trains individually.
3 rocket+KD means light net’s result using rocket launching combined with KD.
4 booster means booster net’s result in rocket launching.
6 WRN-16-1, 0.2M(b) can’t be applied on AT directly, so we did not report this result.

5 booster only means WRN-40 trains individually.

samples. We preprocess the data with the same operations
as in Zagoruyko and Komodakis(2016). All the experiments
are repeated 3 times with different seed, and we take the
median of error rates as the ﬁnal results. All the experi-
ments, we use the same learning rate tuning and epochs as
in Zagoruyko and Komodakis(2016). We set the initial learn-
ing rate to be 0.1 with momentum to be 0.9, while we drop
learning rate by 0.2 at [60, 120, 160] epochs and train for to-
tal 200 epochs.

We employ wide residual net (Zagoruyko and Nikos
2016) to be the instantiation of rocket launching on CIFAR-
10 datasets. Wide residual net (WRN) has three groups of
block, each block has two convolutional layers with larger
width in contrast with the original ResNet. The wider layers
are accompanied with more parameters, which could offer
more representation capability. Fig. 3(a) shows the schemat-
ics of the rocket net structure based on wide residual net-
works. Layers in red are shared by the light net and the
booster. As we can see, sharing layers (layers in red) are in
the lower group of wide residual net. The yellow part is the
speciﬁc structure designed for light net to make prediction.
The blue part is the speciﬁc layers of the booster, which is
removed at inference phrase. Attention transfer (AT) uses
teacher net’s output activations of each group of residual
blocks to supervise student net’s each group’s activations.
In order to compare with AT fairly, we design another shar-
ing way. As Fig. 3(b) shows, the light net shares some lower
blocks with the booster in each group.

We explore rocket launching on light and booster net
with different network depths and widths (e.g. WRN-16-
1(a),0.2M means wide residual network with depth of 16
and widening factor of 1, using the layer sharing way like
Fig. 3(a), its parameters’ size is 0.2M). As shown in Table 1,
our approach achieves consistently notable improvement
compared to the base light net with different experimental
settings. Taking the ﬁrst line of Table 1 as example, using
the same WRN-16-1(b) net structure, our rocket launching
get 0.9% improvement compared with this net trained in-
dividual. We also observe that our approach outperforms
other teacher-student methods, such as knowledge distilla-
tion (KD) (Hinton, Vinyals, and Dean 2015) and attention
transfer (Zagoruyko and Komodakis 2016). It’s notable that
beneﬁtting from the structure characteristic of residual net,
the way of sharing shown in Fig. 3(b) still obtains decent
result.

Besides comparing with other approaches, we also try to

combine KD with our method by adding LKD to the objec-
tive in Eq. 1. It’s notable that we use probability that pre-
trained by booster net in LKD, which means light net can
also obtain additional guidance from a pre-trained booster
network. From Table 1, we see that the performance can be
further improved with the application of KD, which means
our rocket launching has different effect on the light net with
KD. The light net beneﬁts from both the supervisory in-
formation brought by the pre-trained teacher network, and
the knowledge conveyed by the booster network during the
training process.

We also investigate our framework with different hint loss
formulations. From Table 3, we see that the adopted hint loss
to match the logits achieves the best performance among the
different objectives. While hint loss to match the probability
performs worst, which means gradient vanishing affects the
training process. The experimental results are in accordance
with our previous analysis.

Performance of each part of our framework Experi-
ments are also carried out on CIFAR-10 to evaluate our
framework design (see Fig. 3). We observe that simulta-
neous training, layer sharing and gradient block all con-
tribute to the improvements of our approach. For WRN-16-
1(b), gradient block (GB) gets 0.63% improvement com-
pared with rocket (no GB); Parameter sharing gets 0.19%
improvement compared with rocket (no sharing). Using part
parameter from booster to initialize the light net, using both
cross-entropy which learns the ground truth and Lmimic be-
tween light net’s logits and ﬁxed logits from booster to train
light net alone, we get worse results than rocket, which
shows the effectiveness of simultaneous training.

Besides, our rocket launching with joint training could
reduce the whole training time. On CIFAR-10 dataset, the
training process of 40-layer booster takes 173 epochs to
converge, with 24.6s per epoch on average, and the train-
ing of the 16-layer light net takes 165 epochs, with 18.3s
for each epoch. The total time is 7275.3s. In contrast, our
rocket launching process takes 180 epochs and a total time
of 6153.0s to converge, with 34.2s for each epoch. We see
that the rocket launching do shorten the time for training the
architecture when compared with training the two networks
separately.

Performance with different depths
In this part, we in-
vestigate the learning capability of the light model with dif-
ferent depths and parameter sizes. Different from previous

Table 2: Comparisons of different framework design’s result (test error) on CIFAR-10.

light

booster

rocket (no GB)1

rocket (no sharing)2

rocket (no joint training)3

rocket

WRN-16-1(b) WRN-40-1
WRN-16-1(a) WRN-40-1

8.50
8.30

8.06
8.23

8.04
8.23

7.87
7.85

1 rocket (no GB) means rocket launching without gradient block.
2 rocket (no sharing) means rocket launching without parameter sharing.
net trains ﬁrst, then light net use some layers of booster to initialize, and use hint loss to learn booster net’s logits.

3 rocket (no joint training) means booster

base

8.77
8.69

Table 3: Different hint loss functions on CIFAR-10
Lmimic LMSE LKD

booster

light

WRN-16-1 (b) WRN-40-1
WRN-16-1 (a) WER-40-1

7.87
7.85

8.32
8.36

7.98
8.26

(a) bottom rocket net on wide residual net

(b) interval rocket net on wide residual net

Figure 4: The accuracy with different sharing layers of light
net on CIFAR-10

Figure 3: Proposed network structures for rocket net.

booster net in low layer.

net structure, in order to make the size of parameter propor-
tional to the layers, we use residual net with ﬁxed width from
bottom to top. Light net shares the bottom ns convolutional
layers with booster net. we tune the number of ns from 10 to
18 while the number of booster net’s layers is 40(In order to
make booster has prominent better learning ability than light
net, we set ns less than half of booster’s depth).

From Fig. 4, we see that the light model performs better
than base and KD stably, which means our light net with
different depths all can get extra information with the help of
cumbersome booster. It’s notable that the gap between base
and rocket is not proportional to the depth of light net, this
phenomenon may be caused by the balance between light
learning ability and extra information from booster net.

Visualization of rocket launching and attention transfer
In order to explain our method intuitively, we visualize each
group’s output of light net and booster net respectively. To
be consist with previous part, we use Fig. 3(b) as the basic
net. For comparison, we visualize the corresponding results
of spatial attention mapping. As we can see from Fig. 5, for
both rocket launching and attention transfer (AT), the feature
maps generated from lower groups are similar between light
and booster net. It indicates that parameter sharing and at-
tention have similar effect on lower layers. It can also show
that these methods can learn the feature representation from

Experiments on SVHN and CIFAR-100
Aiming to verify the effectiveness of rocket launching fur-
ther, we apply our method on CIFAR-100 and SVHN re-
spectively. In order to compare with AT (which is based on
WRN), we still use WRN as basic net structure, and the shar-
ing method is shown in Fig. 3(b) .

The CIFAR-100 dataset (Krizhevsky and Hinton 2009)
consists of 32 × 32 color images from 100 classes. Like
CIFAR-10, these images are still split into 50, 000 train-
ing and 10, 000 testing samples. The experiment setting of
CIFAR-100 is same as CIFAR-10.

The SVHN database (Netzer et al. 2011) is obtained from
house numbers in Google Street View images. It contains
32 × 32 images with RGB color channels in 10 class. There
are 73, 257 images in the training set, 26, 032 images in test-
ing set and 531, 131 samples in extra set. We follow the same
evaluation procedure as Sermanet et al. (Sermanet, Chintala,
and LeCun 2012) to compose our training, validation and
test sets. For this dataset, we use validation dataset to choose
the ﬁnal model. In our experiment, we use Adam (Kingma
and Ba 2014) with initial learning rate 0.001, while we
drop learning rate by 0.2 at [20, 40, 60] epochs. Because this
dataset is easy to learn, we add dropout after each speciﬁc
layer of booster net with dropout rate 20% to prevent over-
ﬁtting. For booster trained alone, same dropout layers are
added to keep consistent.

Table 4: Comparisons of classiﬁcation performance (test error) on CIFAR-100 and SVHN

dataset

light

booster

base

AT

KD rocket

rocket+KD

SVHN

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 3.58
CIFAR-100 WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 43.7

2.99
34.1

2.31
36.4

2.29
33.3

2.20
33.0

Table 5: Experiments on real Advertisement Dataset

model

# params in FC layers

# multiplications in FC layers

# inference time of FC Layers GAUC

base
rocket
booster only

576 × 200 × 80 × 2
576 × 200 × 80 × 2
576 × 720 × 360 × 240 × 180 × 90 × 2

131360
131360
837900

7.6 ms
7.6 ms
23.2 ms

0.632
0.635
0.637

dataset1 comes from productive display advertising system
in Alibaba, we use rocket launching to predict whether user
clicks given product. The size of training set is 4 billion, the
test set is 0.285 billion.

The network that we use is shown in DIN (Zhou et al.
2017). In the online system, most calculations focus on the
fully connected layers after the embedding layers. So we try
to use a booster net with more complex fully connected lay-
ers to guide our light net. The light net shares embedding
layers with booster net. The booster net has seven wide hid-
den layers using complicated operation like batch normal-
ization(Ioffe and Szegedy 2015), light net’s speciﬁc layers
with less hidden units and has only fully connected layers.
The light net in the huge real data gets 0.3% improvement
on GAUC (the generalization of AUC) (Zhou et al. 2017)
with the same latency as the base model. The booster net
gets the best performance on the ofﬂine metric, but it needs
23.2 ms for one requirement to infer hundreds candidate ad-
vertisements, which is unacceptable for online system. Our
approach can get improvement on a model with same struc-
ture and parameter quantity. And this experiment proves that
one can use our approach to break the boundary brought by
the latency limitation to some degree.

Conclusion
We propose a general framework named rocket launching
to get a efﬁcient well-performing light model with the help
of a cumbersome booster net. In order to get as much as
information from the booster model, we make the booster
and the light net train on the same task together with the
hint loss objective, which pushes the booster model to su-
pervise the whole training process of the light one. Besides,
the light model shares parameter with the booster to make
the light net get low-level representation directly from the
booster. We also analyze different hint loss functions clude-
that can convey knowledge from the booster to the light
model. Moreover, we develop the gradient block scheme to
prevent the booster net from deterioration. For future work,
we would like to explore training networks with not only
smaller depths but also fewer neurons in each layer to fur-
ther improve the inference efﬁciency.

(a) different group’s visualization result on attention transfer

(b) different group’s visualization result on rocket launching

Figure 5: The visualization results on both rocket launching
and attention transfer, in each group, the ﬁrst and second
picture in each group stands for booster net and light net
respectively

Error rate on above two dataset is shown in Table 4.
We observe that our approach gets 1.29% improvement on
SVHN and 10.4% improvement on CIFAR-100 compared
with base model. What’s more, rocket launching outper-
forms other teacher-student methods on all settings.

Experiments on real Advertisement Dataset

In order to verity the effectiveness of rocket launching fur-
ther, we test our method on huge real industry dataset. The

1 https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176100
073.888.26.70c5adaeMeJQpW&id=19

References
[Andrew et al. 2013] Andrew, G.; Arora, R.; Bilmes, J.; and
Livescu, K. 2013. Deep canonical correlation analysis. In
Proceedings of the 30th International Conference on Ma-
chine Learning, 1247–1255.
[Ba and Caruana 2014] Ba, J., and Caruana, R. 2014. Do
deep nets really need to be deep? In Advances in Neural
Information Processing Systems 27, 2654–2662.
[Bahdanau, Cho, and Bengio 2014] Bahdanau, D.; Cho, K.;
2014. Neural machine translation by
and Bengio, Y.
arXiv preprint
jointly learning to align and translate.
arXiv:1409.0473.
[Bromley et al. 1994] Bromley, J.; Guyon, I.; LeCun, Y.;
S¨ackinger, E.; and Shah, R. 1994. Signature veriﬁcation
using a siamese time delay neural network. In Advances in
Neural Information Processing Systems 12, 737–744.
[Buciluˇa, Caruana, and Niculescu-Mizil 2006] Buciluˇa, C.;
Caruana, R.; and Niculescu-Mizil, A. 2006. Model com-
pression. In Proceedings of the 12th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining,
535–541.
[Cheng et al. 2016] Cheng, H.-T.; Koc, L.; Harmsen, J.;
Shaked, T.; Chandra, T.; Aradhye, H.; Anderson, G.; Cor-
rado, G.; Chai, W.; Ispir, M.; et al. 2016. Wide & deep
In Proceedings of the
learning for recommender systems.
1st Workshop on Deep Learning for Recommender Systems,
7–10. Boston, USA: ACM.
[Denton et al. 2014] Denton, E. L.; Zaremba, W.; Bruna, J.;
LeCun, Y.; and Fergus, R. 2014. Exploiting linear struc-
ture within convolutional networks for efﬁcient evaluation.
In Advances in Neural Information Processing Systems 27,
1269–1277.
[He et al. 2016] He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on Computer Vision and Pattern
Recognition, 770–778.
[He et al. 2017] He, K.; Gkioxari, G.; Dollar, P.; and Gir-
arXiv preprint
shick, R.
arXiv:1703.06870.
[Hinton, Vinyals, and Dean 2015] Hinton, G.; Vinyals, O.;
and Dean, J. 2015. Distilling the knowledge in a neural
network. arXiv preprint arXiv:1503.02531.
[Howard et al. 2017] Howard, A. G.; Zhu, M.; Chen, B.;
Kalenichenko, D.; Wang, W.; Weyand, T.; Andreetto, M.;
and Adam, H. 2017. Mobilenets: Efﬁcient convolutional
arXiv
neural networks for mobile vision applications.
preprint arXiv:1704.04861.
[Huang et al. 2016] Huang, G.; Liu, Z.; Weinberger, K. Q.;
and van der Maaten, L. 2016. Densely connected convolu-
tional networks. arXiv preprint arXiv:1608.06993.
[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015.
Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Proceedings of the 32nd
International Conference on Machine Learning.
[Kingma and Ba 2014] Kingma, D., and Ba, J. 2014. Adam:

2017. Mask R-CNN.

arXiv preprint

A method for stochastic optimization.
arXiv:1412.6980.
[Krizhevsky and Hinton 2009] Krizhevsky, A., and Hinton,
G. 2009. Learning multiple layers of features from tiny
images.
[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.;
Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiﬁca-
tion with deep convolutional neural networks. In Advances
in Neural Information Processing Systems 25, 1097–1105.
[Laine and Aila 2016] Laine, S., and Aila, T. 2016. Tempo-
ral ensembling for semi-supervised learning. arXiv preprint
arXiv:1610.02242.
[Luo, Wu, and Lin 2017] Luo, J.-H.; Wu, J.; and Lin, W.
2017. Thinet: A ﬁlter level pruning method for deep neu-
ral network compression. arXiv preprint arXiv:1707.06342.
[Netzer et al. 2011] Netzer, Y.; Wang, T.; Coates, A.; Bis-
sacco, A.; Wu, B.; and Ng, A. Y. 2011. Reading digits in
natural images with unsupervised feature learning. In NIPS
workshop on deep learning and unsupervised feature learn-
ing, volume 2011, 5.
[Romero et al. 2014] Romero, A.; Ballas, N.; Kahou, S. E.;
and Chassang, A. 2014. Fitnets: Hints for thin deep nets.
arXiv preprint arXiv:1412.655d0.
[Sermanet, Chintala, and LeCun 2012] Sermanet, P.; Chin-
tala, S.; and LeCun, Y. 2012. Convolutional neural networks
applied to house numbers digit classiﬁcation. In Proceed-
ings of the 21st International Conference on Pattern Recog-
nition, 3288–3291. IEEE.
[Simonyan and Zisserman 2015] Simonyan, K., and Zisser-
man, A. 2015. Very deep convolutional networks for large-
scale image recognition. In Proceedings of the 3th Interna-
tional Conference on Learning Representations, 621–630.
[Szegedy et al. 2015] Szegedy, C.; Liu, W.; Jia, Y.; Sermanet,
P.; Reed, S.; Anguelov, D.; Erhan, D.; Vanhoucke, V.; and
Rabinovich, A. 2015. Going deeper with convolutions.
In Proceedings of the IEEE conference on Computer Vision
and Pattern Recognition, 1–9.
[Zagoruyko and Komodakis 2016] Zagoruyko, Z., and Ko-
modakis, K. 2016. Paying more attention to attention: Im-
proving the performance of convolutional neural networks
via attention transfer. arXiv preprint arXiv:1612.03928.
[Zagoruyko and Nikos 2016] Zagoruyko, S., and Nikos, K.
arXiv preprint
2016.
arXiv:1605.07146.
[Zhang et al. 2017] Zhang, X.; Zhou, X.; Lin, M.; and Sun,
Shufﬂenet: An extremely efﬁcient convolu-
J.
tional neural network for mobile devices. arXiv preprint
arXiv:1707.01083.
[Zhou et al. 2017] Zhou, G.; Song, C.; Zhu, X.; Ma, X.; Yan,
Y.; Dai, X.; Zhu, H.; Jin, J.; Li, H.; and Gai, K. 2017. Deep
interest network for click-through rate prediction. arXiv
preprint arXiv:1706.06978.
[Zhou 2016] Zhou, Z.-H.
2016. Learnware: on the fu-
ture of machine learning. Frontiers of Computer Science
10(4):589–590.

Wide residual networks.

2017.

8
1
0
2
 
r
a

M
 
5
1
 
 
]
L
M

.
t
a
t
s
[
 
 
3
v
6
0
1
4
0
.
8
0
7
1
:
v
i
X
r
a

Rocket Launching: A Universal and Efﬁcient Framework for Training
Well-performing Light Net

Guorui Zhou,1∗ Ying Fan,1 Runpeng Cui,2 Weijie Bian1
Xiaoqiang Zhu1 and Kun Gai1
1Alibaba Inc, Beijing, China
2Department of automation, Tsinghua university
{guorui.xgr, fanying.fy, weijie.bwj, xiaoqiang.zxq}@alibaba-inc.com, cuirunpeng@gmail.com, jingshi.gk@taobao.com

Abstract

Models applied on real time response tasks, like click-through
rate (CTR) prediction model, require high accuracy and rig-
orous response time. Therefore, top-performing deep models
of high depth and complexity are not well suited for these
applications with the limitations on the inference time. In or-
der to get neural networks of better performance given the
time limitations, we propose a universal framework that ex-
ploits a booster net to help train the lightweight net for pre-
diction. We dub the whole process rocket launching, where
the booster net is used to guide the learning of our light net
throughout the whole training process. We analyze different
loss functions aiming at pushing the light net to behave simi-
larly to the booster net. Besides, we use one technique called
gradient block to improve the performance of light net and
booster net further. Experiments on benchmark datasets and
real-life industrial advertisement data show the effectiveness
of our proposed method.

Introduction
Deep networks have achieved state-of-the-art results in
many areas, such as computer vision (Huang et al. 2016) and
nature language processing (Bahdanau, Cho, and Bengio
2014). From AlexNet (Krizhevsky, Sutskever, and Hinton
2012) to recently proposed DenseNet (Huang et al. 2016),
better performances are accompanied with deeper and wider
networks and more complex and adaptable structures. A
more complex structure of neural networks means longer
inference time, which is not tolerated in industrial environ-
ment. Networks mentioned above only consider the evalu-
ation criterion of accuracy, while neglect the necessity of
real-time response in industrial applications.

At the same time, some nets like DIN (Zhou et al. 2017)
and wide & deep model (Cheng et al. 2016) get more and
more attention. These nets share some characteristics: nets
are shallow, layers are very simple and with less computa-
tion cost. In industrial applications, e.g. online advertising
systems, models have to make prediction of hundreds of ad-
vertisements for one user in several milliseconds, which re-
stricts the complexity of model. Only simple and shallow

∗Correspondence author is Guorui Zhou. The source code is

available at https://github.com/zhougr1993/Rocket-Launching.
Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

structure meets the stringent response time requirements in
industry.

Accuracy and latency are the two points that we pay at-
tention to. In general, there are two solutions to reduce
runtime complexities while keeping a decent performance.
Some works make use of factorizing or compressing to di-
rectly simplify the computation, such as matrix SVD (Den-
ton et al. 2014), MobileNet (Howard et al. 2017), and Shuf-
ﬂeNet (Zhang et al. 2017). Other approaches adopt the
teacher-student strategy. They use light networks with fewer
layers and parameters to decrease the inference time, while
the light nets are trained helped by a complicated teacher
network that trained in advance, like knowledge distilla-
tion (Hinton, Vinyals, and Dean 2015) and FitNet (Romero
et al. 2014). These teacher-student methods decrease the
runtime complexities, and can be further combined with ap-
proaches of the ﬁrst category. In this work, we propose a
novel universal framework to train decent small networks,
motivated by the potential of teacher-student methods.

In this work, we develop a novel network training pro-
cess dubbed rocket launching. The light net is the target
network for inference, the booster relates to the deeper and
more complex network from the architecture. Both the light
and the booster net compose the architecture of rocket net-
work. At the training stage, the light and booster networks
are trained simultaneously on the same task. Besides, the
light net also keeps getting knowledge learned by the booster
through the optimization of the hint loss, which is included
in the objective function to make both nets have similar be-
haviour during training. The booster guides the optimization
of the target light network along all the training process. At
the inference stage, only the trained light network is used.
Different from previous teacher-student methods (Hinton,
Vinyals, and Dean 2015; Romero et al. 2014), we make the
light model share some lower layers with the cumbersome
one and train them simultaneously.

In this paper, we propose a universal method aiming to
obtain a well-behaved light net considering limitations on
inference time. Our method is suitable to many different net-
work structures. In brief, our contributions can be summa-
rized as follows:
• We propose a novel universal training process called
rocket launching, which makes use of the booster net
to supervise the learning of the light network through

whole training process. We show that a light model can
be trained to perform close to deeper and more complex
models in experiments.

• We analyze different hint loss functions to transfer the in-

formation from booster to the light net.

• In order to push light net to be close to booster net, we
use gradient block technique to cancel the effect of hint
loss’s back-propagation on layers of the booster, which
gives booster net more freedom to update its parameters
based on ground truth and improve the performance fur-
ther.
Our method achieves the state-of-the-art results on pub-
licly available benchmarks as well as industrial dataset. It is
notable that our method performs better than other teacher-
student approaches. Experimental results present that the
performance can be further improved when combining other
teacher-student approaches with our framework.

The remainder of this paper starts from a summary of re-
lated work. Then we introduce our approach, followed by
experiments and conclusions.

Related work
Deep neural networks have drawn increasing attention in re-
cent years due to their overwhelming performance on many
research areas. One main trend of network structure design
is to develop neural networks with larger depth, more pa-
rameters and higher complexity to achieve better perfor-
mance (Simonyan and Zisserman 2015; Szegedy et al. 2015;
He et al. 2016; Zagoruyko and Nikos 2016). However, these
top-performing networks with high complexity will result
in time consuming systems at the inference phase. There-
fore, they are not well suitable for applications with infer-
ence time limitations.

There have been some explorations of model compres-
sion by directly simplifying the computation or pruning of
the original neural operations. Denton et al. (Denton et al.
2014) use SVD to approximate the convolutional operations
in deep CNNs. MobileNets (Howard et al. 2017) are based
on a streamlined architecture that uses depthwise separa-
ble convolutions to build lightweight deep neural networks.
ShufﬂeNet (Zhang et al. 2017) uses pointwise group con-
volution and channel shufﬂe to reduce computation cost.
ThiNet (Luo, Wu, and Lin 2017) uses statistic information
from next layer to prune ﬁlters which accelerates CNN mod-
els while maintaining accuracy.

Besides designing delicate net structure, light net can
get more information from extra pre-trained model during
training phrase. This idea has been emphasized in Learn-
ware (Zhou 2016). There have been some attempts adopting
a teacher-student strategy, where a more complex teacher
network is employed to teach a lightweight student network
on a given task. The teacher network helps the student net to
get a decent performance at the inference phase. Buciluˇa et
al. (Buciluˇa, Caruana, and Niculescu-Mizil 2006) improve
compression model, which pioneers this type of learning
process. They expound that the knowledge of a large en-
semble of models could transfer to a single small model,
they use a large ensemble of models to label large amounts

of unlabel data, then use the data labeled by the ensemble
models to train small model. Furthermore, Ba et al. (Ba and
Caruana 2014) train a wider and shallower net called student
net to mimic the big model called teacher net via regressing
logits before the softmax layer with (cid:96)2 loss. They think that
matching logits could get more information than the hard
label that provided by the cumbersome model. Hinton et
al. (Hinton, Vinyals, and Dean 2015) point out that identify-
ing knowledge in a trained model with the learned parameter
value is hard. Instead, they make use of one abstract view of
the knowledge that is the learned mapping from input vec-
tors to output vectors, they propose the strategy of knowl-
edge distillation which uses the class probabilities produced
by the cumbersome model as ”soft targets” for training the
small model. They prove that they are the general version of
matching logits which uesd by Ba and Caruana(2014).

Besides using the output of the teacher network, people
try to get more supervised information from the teacher.
FitNets (Romero et al. 2014) use not only the outputs but
also the intermediate representations learned by the cumber-
some model as the hint to supervise the training process.
Zagoruyko et al. (Zagoruyko and Komodakis 2016) use at-
tention as a mechanism of transferring knowledge from one
network to another. By properly deﬁning attention for con-
volutional neural networks, they improve the performance
of a student CNN by forcing it to mimic the attention maps
of a powerful teacher network.

In previous teacher-student approaches, the cumbersome
teacher networks are trained in advance. Instead of only
transferring the ﬁnal stationary outputs of the pretrained
model, we let the booster model guide the whole training
process of light net in rocket launching. We think that the
knowledge learned by the cumbersome model exists not
only in the ﬁnal outputs, but also in the full learning pro-
cess. The light model gets not only the difference between
the target and the temporary outputs, but also the possible
path towards the ﬁnal target provided by a complex model
of more learning capability. Another difference of our ap-
proach is that the part parameters of the light model and the
booster are shared in our framework. We adopt the param-
eter sharing scheme since the lower-level representation of
the same task should be universal. In the proposed architec-
ture, the booster has a much deeper speciﬁc layers to ensure
the capability to guide the light model to learn the task bet-
ter.

Training several nets together is often applied on multi
input scenes (Andrew et al. 2013; Bromley et al. 1994)
or semi-supervised task (Laine and Aila 2016). Parameters
sharing has also been used in multi-task (He et al. 2017).
However, to the best of our knowledge, there is no attempt
on using these techniques to train small net to get better per-
formance. We are the ﬁrst to utilize these schemes in model
compression attempts, and results in experiments present the
effectiveness of our method.

Our approach

In this section, we will describe our proposed rocket net
training process in detail. We will further analyze the high-

H(p, q) = − (cid:80)
i pi log qi is the cross-entropy, λ is the pa-
rameter to balance the cross-entropy and the hint loss. Here
we use the cross-entropy terms for the booster and light nets
to learn the true labels, and use hint loss function to exploit
the knowledge learned by the booster to guide the learning
process of the light network.

Characters of our method
There are some highlights in our method, which have no-
table effects on the training process and distinguish our
method from other teacher-student approaches.

Parameter sharing In our approach, the light net shares
parameter with the booster net. This scheme helps the light
net get direct thrust from the booster, which pushes it get
better performance.

The technique of parameter sharing is not new in deep
learning. In the area of computer vision, it is a common
scheme to train deep convolutional neural networks in a
multi-task manner. We assume that these tasks can be built
on some shared low-level representations of the images.
Given this assumption, we could reduce the parameters in
neural network and improve its generalization capability. It
is noticeable that, in industrial applications, e.g. CTR predic-
tion, reusing the embedding layers from other tasks helps a
new task converge more easily and get a better performance.

Simultaneous training
In most teacher-student methods,
the teacher network is trained on the target database in ad-
vance, and its parameters are ﬁxed when guiding the training
process of the student net. Different from these approaches,
we have the light and booster nets trained simultaneously,
the whole learning process of the target light net is guided
by the booster net. The light model can learn from not only
the difference between the target and its temporary outputs,
but also the possible path towards the ﬁnal target provided
by a complex model with more learning capability.

Notice that instead of training the teacher and student nets
separately, the whole training time of our proposed architec-
ture is shortened. Therefore, the compressed model can be
trained more efﬁciently to meet the requirement in industrial
applications that the inference model be updated frequently.

Hint loss functions
In our approach, we transfer the
booster net’s knowledge to the light net by minimizing the
hint loss. Several different hint loss functions are considered
in this work:
• MSE of ﬁnal softmax: LMSE(x) = (cid:107)p(x) − q(x)(cid:107)2
2,
• MSE of

logits before softmax activation, which is
also adopted in SNN-MIMIC (Ba and Caruana 2014):
Lmimic(x) = (cid:107)l(x) − z(x)(cid:107)2
2,

• knowledge distillation (Hinton, Vinyals, and Dean 2015):

LKD(x) = H( p(x)
For the MSE of ﬁnal softmax LMSE, we have the deriva-

T ), where T is the temperature.

T , q(x)

tive of the hint loss with respect to li(x):

∂LMSE(x)
∂li(x)

= 2pi(x)

(cid:104)
pi(x) − qi(x)

(cid:88)

+

k

pk(x)(qk(x) − pk(x))

(cid:105)
.

(2)

Figure 1: Whole Net Structure, blue dashed circle represents
light net, pink dashed circle represents booster net. Yellow
layers are shared by light net and booster net.

lights of our method and compare different hint loss func-
tions.

The sketch of our method
Fig. 1 represents the general structure of our architecture, it
is composed of two parts: the light net and the booster net.
These two networks share some lower-level layers (anno-
tated in yellow), and they both have their speciﬁc layers for
the learning and prediction on the same task.

We let x and y denote the inputs and one-hot ground truth
labels of our neural architecture. Let L be the light net with
an output softmax as p(x) = softmax(l(x)), where l(x)
is the weighted sum before the softmax activation. Param-
eters for the light net consist of two components: parame-
ters in shared layers WS and parameters in its lightweight
particular layers for prediction WL. We let B denote the
booster network with shared parameters WS and its partic-
ular weights WB to get the ﬁnal output. Similar to the light
net, we have q(x) = softmax(z(x)) as the output softmax
for the booster, where z(x) is the weighted sum before the
softmax activation. We expect that the light net is trained
similar to the true labels y, as well as approximate to the
knowledge learned by the booster net with much more rep-
resentation capability. To solve this problem, we take hint
loss in the training objective in order to convey knowledge
from the booster net to the light net. The objective function
for rocket launching is deﬁned as follows:

L(x; WS, WL, WB) = H(y, p(x)) + H(y, q(x))

+ λ(cid:107)l(x) − z(x)(cid:107)2
2,

(1)

where the last term is the hint loss function as the mean
square error (MSE) between the logits z(x) and l(x),

Notice that the gradient is proportional to the prediction out-
puts of the light net. If li(x) is very negative, causing pi(x)
close to zero and the gradient to vanish, the MSE of ﬁnal
softmax may fail to learn the difference in outputs, even
when the light net makes radically different outputs from
the booster net.

SNN-MIMIC learning (Ba and Caruana 2014) uses the
formulation of Lmimic between the teacher and student net-
works. We have the derivative w.r.t. li(x):

∂Lmimic(x)
∂li(x)

= li(x) − zi(x).

(3)

We observe that the update directly reduces the difference
between the logits before softmax, which prevents the prob-
lem of gradient vanishing with LMSE. Experimental results
also present that training with Lmimic achieves the best per-
formance among these different hint loss formulations.

Knowledge distillation (Hinton, Vinyals, and Dean 2015)
uses cross-entropy to restrict the probability outputs of two
models. In their work, a temperature T is introduced to pro-
duce a softer probability distribution among classes. They
think that knowledge distillation is the general case of
matching logits. They prove that with a high temperature,
the gradient w.r.t. li(x) is:

∂LKD(x)
∂li(x)

≈

1
N T 2 (li(x) − zi(x)),

(4)

where N is the number of classes, and approximation
eli(x)/T ≈ 1 + li(x)/T is used. Their approximation ne-
glects the term (li(x)/T )2 in Taylor series when the tem-
perature is high enough compared with the magnitude of the
1
N T 2 (li(x) −
logits. Notice that the approximate gradient
zi(x)) is the same order of inﬁnitesimal to the neglected
term (li(x)/T )2, this approximation may also cause a neg-
ligible gradient. But we approve the temperature’s effect that
it can soften class probability, which makes the distillation
pays more attention to matching the negative logits below
the average. In practice, Hinton et al. (Hinton, Vinyals, and
Dean 2015) suggest that intermediate temperatures work
best, which ignores the very negative logits that might be
noisy. While in this work, we ﬁnd that the optimization of
all the logits’ difference in our framework outperforms using
the formulation of LKD. We think that some very negative
logits may convey useful knowledge acquired by the cum-
bersome net, which helps the student network to get a better
performance.

Gradient block In our proposed training process, the light
net shares parameters and is trained together with the booster
net. This simultaneous training scheme has an inevitable ef-
fect on the performance of the booster network. Using both
cross-entropy H(y, q(x)) and hint loss as the objective to
update booster’s parameters will make the categorical out-
puts of the booster strongly affected by those of the light net,
and hinder the booster from learning on the task directly.
Since the learning capability of the light model is limited,
the performance of the booster net will be inevitably deterio-
rated. Notice that the light model learns from the knowledge

Figure 2: Gradient backward with the gradient block
scheme.

conveyed by the booster net during training, this deteriora-
tion in the booster model’s learning will further diminish the
learning potential of the light network.

In order to solve this problem, during the training process,
we develop the gradient block scheme to prevent the booster
model from minimizing the hint loss objective. As we can
see from Fig. 2, during the back-propagation of the hint loss
term, we ﬁx the gradient of booster net’s speciﬁc parame-
ters (WB), and use this moment booster net’s probability as
target to supervise light net’s study.

This operation makes the speciﬁc parameters WB in
booster net away from the effect given by the light model,
thus the booster can directly learn from the ground truth la-
bels to achieve its best performance. For the light net, the
parameters are normally updated to optimize the objective
function in Eq. 1. Both the supervisory information and the
booster’s knowledge are the targets for the light model to
learn from.

Experiments
In this section, we evaluate our rocket launching on sev-
eral classiﬁcation datasets and a real advertisement database
from a Chinese leading e-commerce site. Experimental re-
sults present that our proposed approach achieves notable
improvements in the light net’s performance and outper-
forms other teacher-student methods. In experiments on
public benchmarks, we compare our method with knowl-
edge distillation (KD) (Hinton, Vinyals, and Dean 2015) and
attention transfer (AT) (Zagoruyko and Komodakis 2016).

Experiments on CIFAR-10
The CIFAR-10 dataset (Krizhevsky and Hinton 2009) con-
sists of 32 × 32 color images from 10 class. These images
are split into 50, 000 training samples and 10, 000 testing

Table 1: Comparisons of classiﬁcation performance(test error) on CIFAR-10

light

booster

base1 AT

KD rocket2

rocket+KD3 booster4 booster only5

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 8.77
WRN-16-2, 0.7M(b) WRN-40-2, 2.2M 6.31
WRN-16-1, 0.2M(a) WRN-40-1, 0.6M 8.69

8.25
5.85
-6

7.87
6.64
5.67
5.20
7.85
7.27
2 rocket means light net’s result in rocket launching.

8.39
6.08
8.34

7.52
5.64
7.51

6.58
5.23
6.58

1 base means WRN-16 trains individually.
3 rocket+KD means light net’s result using rocket launching combined with KD.
4 booster means booster net’s result in rocket launching.
6 WRN-16-1, 0.2M(b) can’t be applied on AT directly, so we did not report this result.

5 booster only means WRN-40 trains individually.

samples. We preprocess the data with the same operations
as in Zagoruyko and Komodakis(2016). All the experiments
are repeated 3 times with different seed, and we take the
median of error rates as the ﬁnal results. All the experi-
ments, we use the same learning rate tuning and epochs as
in Zagoruyko and Komodakis(2016). We set the initial learn-
ing rate to be 0.1 with momentum to be 0.9, while we drop
learning rate by 0.2 at [60, 120, 160] epochs and train for to-
tal 200 epochs.

We employ wide residual net (Zagoruyko and Nikos
2016) to be the instantiation of rocket launching on CIFAR-
10 datasets. Wide residual net (WRN) has three groups of
block, each block has two convolutional layers with larger
width in contrast with the original ResNet. The wider layers
are accompanied with more parameters, which could offer
more representation capability. Fig. 3(a) shows the schemat-
ics of the rocket net structure based on wide residual net-
works. Layers in red are shared by the light net and the
booster. As we can see, sharing layers (layers in red) are in
the lower group of wide residual net. The yellow part is the
speciﬁc structure designed for light net to make prediction.
The blue part is the speciﬁc layers of the booster, which is
removed at inference phrase. Attention transfer (AT) uses
teacher net’s output activations of each group of residual
blocks to supervise student net’s each group’s activations.
In order to compare with AT fairly, we design another shar-
ing way. As Fig. 3(b) shows, the light net shares some lower
blocks with the booster in each group.

We explore rocket launching on light and booster net
with different network depths and widths (e.g. WRN-16-
1(a),0.2M means wide residual network with depth of 16
and widening factor of 1, using the layer sharing way like
Fig. 3(a), its parameters’ size is 0.2M). As shown in Table 1,
our approach achieves consistently notable improvement
compared to the base light net with different experimental
settings. Taking the ﬁrst line of Table 1 as example, using
the same WRN-16-1(b) net structure, our rocket launching
get 0.9% improvement compared with this net trained in-
dividual. We also observe that our approach outperforms
other teacher-student methods, such as knowledge distilla-
tion (KD) (Hinton, Vinyals, and Dean 2015) and attention
transfer (Zagoruyko and Komodakis 2016). It’s notable that
beneﬁtting from the structure characteristic of residual net,
the way of sharing shown in Fig. 3(b) still obtains decent
result.

Besides comparing with other approaches, we also try to

combine KD with our method by adding LKD to the objec-
tive in Eq. 1. It’s notable that we use probability that pre-
trained by booster net in LKD, which means light net can
also obtain additional guidance from a pre-trained booster
network. From Table 1, we see that the performance can be
further improved with the application of KD, which means
our rocket launching has different effect on the light net with
KD. The light net beneﬁts from both the supervisory in-
formation brought by the pre-trained teacher network, and
the knowledge conveyed by the booster network during the
training process.

We also investigate our framework with different hint loss
formulations. From Table 3, we see that the adopted hint loss
to match the logits achieves the best performance among the
different objectives. While hint loss to match the probability
performs worst, which means gradient vanishing affects the
training process. The experimental results are in accordance
with our previous analysis.

Performance of each part of our framework Experi-
ments are also carried out on CIFAR-10 to evaluate our
framework design (see Fig. 3). We observe that simulta-
neous training, layer sharing and gradient block all con-
tribute to the improvements of our approach. For WRN-16-
1(b), gradient block (GB) gets 0.63% improvement com-
pared with rocket (no GB); Parameter sharing gets 0.19%
improvement compared with rocket (no sharing). Using part
parameter from booster to initialize the light net, using both
cross-entropy which learns the ground truth and Lmimic be-
tween light net’s logits and ﬁxed logits from booster to train
light net alone, we get worse results than rocket, which
shows the effectiveness of simultaneous training.

Besides, our rocket launching with joint training could
reduce the whole training time. On CIFAR-10 dataset, the
training process of 40-layer booster takes 173 epochs to
converge, with 24.6s per epoch on average, and the train-
ing of the 16-layer light net takes 165 epochs, with 18.3s
for each epoch. The total time is 7275.3s. In contrast, our
rocket launching process takes 180 epochs and a total time
of 6153.0s to converge, with 34.2s for each epoch. We see
that the rocket launching do shorten the time for training the
architecture when compared with training the two networks
separately.

Performance with different depths
In this part, we in-
vestigate the learning capability of the light model with dif-
ferent depths and parameter sizes. Different from previous

Table 2: Comparisons of different framework design’s result (test error) on CIFAR-10.

light

booster

rocket (no GB)1

rocket (no sharing)2

rocket (no joint training)3

rocket

WRN-16-1(b) WRN-40-1
WRN-16-1(a) WRN-40-1

8.50
8.30

8.06
8.23

8.04
8.23

7.87
7.85

1 rocket (no GB) means rocket launching without gradient block.
2 rocket (no sharing) means rocket launching without parameter sharing.
net trains ﬁrst, then light net use some layers of booster to initialize, and use hint loss to learn booster net’s logits.

3 rocket (no joint training) means booster

base

8.77
8.69

Table 3: Different hint loss functions on CIFAR-10
Lmimic LMSE LKD

booster

light

WRN-16-1 (b) WRN-40-1
WRN-16-1 (a) WER-40-1

7.87
7.85

8.32
8.36

7.98
8.26

(a) bottom rocket net on wide residual net

(b) interval rocket net on wide residual net

Figure 4: The accuracy with different sharing layers of light
net on CIFAR-10

Figure 3: Proposed network structures for rocket net.

booster net in low layer.

net structure, in order to make the size of parameter propor-
tional to the layers, we use residual net with ﬁxed width from
bottom to top. Light net shares the bottom ns convolutional
layers with booster net. we tune the number of ns from 10 to
18 while the number of booster net’s layers is 40(In order to
make booster has prominent better learning ability than light
net, we set ns less than half of booster’s depth).

From Fig. 4, we see that the light model performs better
than base and KD stably, which means our light net with
different depths all can get extra information with the help of
cumbersome booster. It’s notable that the gap between base
and rocket is not proportional to the depth of light net, this
phenomenon may be caused by the balance between light
learning ability and extra information from booster net.

Visualization of rocket launching and attention transfer
In order to explain our method intuitively, we visualize each
group’s output of light net and booster net respectively. To
be consist with previous part, we use Fig. 3(b) as the basic
net. For comparison, we visualize the corresponding results
of spatial attention mapping. As we can see from Fig. 5, for
both rocket launching and attention transfer (AT), the feature
maps generated from lower groups are similar between light
and booster net. It indicates that parameter sharing and at-
tention have similar effect on lower layers. It can also show
that these methods can learn the feature representation from

Experiments on SVHN and CIFAR-100
Aiming to verify the effectiveness of rocket launching fur-
ther, we apply our method on CIFAR-100 and SVHN re-
spectively. In order to compare with AT (which is based on
WRN), we still use WRN as basic net structure, and the shar-
ing method is shown in Fig. 3(b) .

The CIFAR-100 dataset (Krizhevsky and Hinton 2009)
consists of 32 × 32 color images from 100 classes. Like
CIFAR-10, these images are still split into 50, 000 train-
ing and 10, 000 testing samples. The experiment setting of
CIFAR-100 is same as CIFAR-10.

The SVHN database (Netzer et al. 2011) is obtained from
house numbers in Google Street View images. It contains
32 × 32 images with RGB color channels in 10 class. There
are 73, 257 images in the training set, 26, 032 images in test-
ing set and 531, 131 samples in extra set. We follow the same
evaluation procedure as Sermanet et al. (Sermanet, Chintala,
and LeCun 2012) to compose our training, validation and
test sets. For this dataset, we use validation dataset to choose
the ﬁnal model. In our experiment, we use Adam (Kingma
and Ba 2014) with initial learning rate 0.001, while we
drop learning rate by 0.2 at [20, 40, 60] epochs. Because this
dataset is easy to learn, we add dropout after each speciﬁc
layer of booster net with dropout rate 20% to prevent over-
ﬁtting. For booster trained alone, same dropout layers are
added to keep consistent.

Table 4: Comparisons of classiﬁcation performance (test error) on CIFAR-100 and SVHN

dataset

light

booster

base

AT

KD rocket

rocket+KD

SVHN

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 3.58
CIFAR-100 WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 43.7

2.99
34.1

2.31
36.4

2.29
33.3

2.20
33.0

Table 5: Experiments on real Advertisement Dataset

model

# params in FC layers

# multiplications in FC layers

# inference time of FC Layers GAUC

base
rocket
booster only

576 × 200 × 80 × 2
576 × 200 × 80 × 2
576 × 720 × 360 × 240 × 180 × 90 × 2

131360
131360
837900

7.6 ms
7.6 ms
23.2 ms

0.632
0.635
0.637

dataset1 comes from productive display advertising system
in Alibaba, we use rocket launching to predict whether user
clicks given product. The size of training set is 4 billion, the
test set is 0.285 billion.

The network that we use is shown in DIN (Zhou et al.
2017). In the online system, most calculations focus on the
fully connected layers after the embedding layers. So we try
to use a booster net with more complex fully connected lay-
ers to guide our light net. The light net shares embedding
layers with booster net. The booster net has seven wide hid-
den layers using complicated operation like batch normal-
ization(Ioffe and Szegedy 2015), light net’s speciﬁc layers
with less hidden units and has only fully connected layers.
The light net in the huge real data gets 0.3% improvement
on GAUC (the generalization of AUC) (Zhou et al. 2017)
with the same latency as the base model. The booster net
gets the best performance on the ofﬂine metric, but it needs
23.2 ms for one requirement to infer hundreds candidate ad-
vertisements, which is unacceptable for online system. Our
approach can get improvement on a model with same struc-
ture and parameter quantity. And this experiment proves that
one can use our approach to break the boundary brought by
the latency limitation to some degree.

Conclusion
We propose a general framework named rocket launching
to get a efﬁcient well-performing light model with the help
of a cumbersome booster net. In order to get as much as
information from the booster model, we make the booster
and the light net train on the same task together with the
hint loss objective, which pushes the booster model to su-
pervise the whole training process of the light one. Besides,
the light model shares parameter with the booster to make
the light net get low-level representation directly from the
booster. We also analyze different hint loss functions clude-
that can convey knowledge from the booster to the light
model. Moreover, we develop the gradient block scheme to
prevent the booster net from deterioration. For future work,
we would like to explore training networks with not only
smaller depths but also fewer neurons in each layer to fur-
ther improve the inference efﬁciency.

(a) different group’s visualization result on attention transfer

(b) different group’s visualization result on rocket launching

Figure 5: The visualization results on both rocket launching
and attention transfer, in each group, the ﬁrst and second
picture in each group stands for booster net and light net
respectively

Error rate on above two dataset is shown in Table 4.
We observe that our approach gets 1.29% improvement on
SVHN and 10.4% improvement on CIFAR-100 compared
with base model. What’s more, rocket launching outper-
forms other teacher-student methods on all settings.

Experiments on real Advertisement Dataset

In order to verity the effectiveness of rocket launching fur-
ther, we test our method on huge real industry dataset. The

1 https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176100
073.888.26.70c5adaeMeJQpW&id=19

References
[Andrew et al. 2013] Andrew, G.; Arora, R.; Bilmes, J.; and
Livescu, K. 2013. Deep canonical correlation analysis. In
Proceedings of the 30th International Conference on Ma-
chine Learning, 1247–1255.
[Ba and Caruana 2014] Ba, J., and Caruana, R. 2014. Do
deep nets really need to be deep? In Advances in Neural
Information Processing Systems 27, 2654–2662.
[Bahdanau, Cho, and Bengio 2014] Bahdanau, D.; Cho, K.;
2014. Neural machine translation by
and Bengio, Y.
arXiv preprint
jointly learning to align and translate.
arXiv:1409.0473.
[Bromley et al. 1994] Bromley, J.; Guyon, I.; LeCun, Y.;
S¨ackinger, E.; and Shah, R. 1994. Signature veriﬁcation
using a siamese time delay neural network. In Advances in
Neural Information Processing Systems 12, 737–744.
[Buciluˇa, Caruana, and Niculescu-Mizil 2006] Buciluˇa, C.;
Caruana, R.; and Niculescu-Mizil, A. 2006. Model com-
pression. In Proceedings of the 12th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining,
535–541.
[Cheng et al. 2016] Cheng, H.-T.; Koc, L.; Harmsen, J.;
Shaked, T.; Chandra, T.; Aradhye, H.; Anderson, G.; Cor-
rado, G.; Chai, W.; Ispir, M.; et al. 2016. Wide & deep
In Proceedings of the
learning for recommender systems.
1st Workshop on Deep Learning for Recommender Systems,
7–10. Boston, USA: ACM.
[Denton et al. 2014] Denton, E. L.; Zaremba, W.; Bruna, J.;
LeCun, Y.; and Fergus, R. 2014. Exploiting linear struc-
ture within convolutional networks for efﬁcient evaluation.
In Advances in Neural Information Processing Systems 27,
1269–1277.
[He et al. 2016] He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on Computer Vision and Pattern
Recognition, 770–778.
[He et al. 2017] He, K.; Gkioxari, G.; Dollar, P.; and Gir-
arXiv preprint
shick, R.
arXiv:1703.06870.
[Hinton, Vinyals, and Dean 2015] Hinton, G.; Vinyals, O.;
and Dean, J. 2015. Distilling the knowledge in a neural
network. arXiv preprint arXiv:1503.02531.
[Howard et al. 2017] Howard, A. G.; Zhu, M.; Chen, B.;
Kalenichenko, D.; Wang, W.; Weyand, T.; Andreetto, M.;
and Adam, H. 2017. Mobilenets: Efﬁcient convolutional
arXiv
neural networks for mobile vision applications.
preprint arXiv:1704.04861.
[Huang et al. 2016] Huang, G.; Liu, Z.; Weinberger, K. Q.;
and van der Maaten, L. 2016. Densely connected convolu-
tional networks. arXiv preprint arXiv:1608.06993.
[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015.
Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Proceedings of the 32nd
International Conference on Machine Learning.
[Kingma and Ba 2014] Kingma, D., and Ba, J. 2014. Adam:

2017. Mask R-CNN.

arXiv preprint

A method for stochastic optimization.
arXiv:1412.6980.
[Krizhevsky and Hinton 2009] Krizhevsky, A., and Hinton,
G. 2009. Learning multiple layers of features from tiny
images.
[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.;
Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiﬁca-
tion with deep convolutional neural networks. In Advances
in Neural Information Processing Systems 25, 1097–1105.
[Laine and Aila 2016] Laine, S., and Aila, T. 2016. Tempo-
ral ensembling for semi-supervised learning. arXiv preprint
arXiv:1610.02242.
[Luo, Wu, and Lin 2017] Luo, J.-H.; Wu, J.; and Lin, W.
2017. Thinet: A ﬁlter level pruning method for deep neu-
ral network compression. arXiv preprint arXiv:1707.06342.
[Netzer et al. 2011] Netzer, Y.; Wang, T.; Coates, A.; Bis-
sacco, A.; Wu, B.; and Ng, A. Y. 2011. Reading digits in
natural images with unsupervised feature learning. In NIPS
workshop on deep learning and unsupervised feature learn-
ing, volume 2011, 5.
[Romero et al. 2014] Romero, A.; Ballas, N.; Kahou, S. E.;
and Chassang, A. 2014. Fitnets: Hints for thin deep nets.
arXiv preprint arXiv:1412.655d0.
[Sermanet, Chintala, and LeCun 2012] Sermanet, P.; Chin-
tala, S.; and LeCun, Y. 2012. Convolutional neural networks
applied to house numbers digit classiﬁcation. In Proceed-
ings of the 21st International Conference on Pattern Recog-
nition, 3288–3291. IEEE.
[Simonyan and Zisserman 2015] Simonyan, K., and Zisser-
man, A. 2015. Very deep convolutional networks for large-
scale image recognition. In Proceedings of the 3th Interna-
tional Conference on Learning Representations, 621–630.
[Szegedy et al. 2015] Szegedy, C.; Liu, W.; Jia, Y.; Sermanet,
P.; Reed, S.; Anguelov, D.; Erhan, D.; Vanhoucke, V.; and
Rabinovich, A. 2015. Going deeper with convolutions.
In Proceedings of the IEEE conference on Computer Vision
and Pattern Recognition, 1–9.
[Zagoruyko and Komodakis 2016] Zagoruyko, Z., and Ko-
modakis, K. 2016. Paying more attention to attention: Im-
proving the performance of convolutional neural networks
via attention transfer. arXiv preprint arXiv:1612.03928.
[Zagoruyko and Nikos 2016] Zagoruyko, S., and Nikos, K.
arXiv preprint
2016.
arXiv:1605.07146.
[Zhang et al. 2017] Zhang, X.; Zhou, X.; Lin, M.; and Sun,
Shufﬂenet: An extremely efﬁcient convolu-
J.
tional neural network for mobile devices. arXiv preprint
arXiv:1707.01083.
[Zhou et al. 2017] Zhou, G.; Song, C.; Zhu, X.; Ma, X.; Yan,
Y.; Dai, X.; Zhu, H.; Jin, J.; Li, H.; and Gai, K. 2017. Deep
interest network for click-through rate prediction. arXiv
preprint arXiv:1706.06978.
[Zhou 2016] Zhou, Z.-H.
2016. Learnware: on the fu-
ture of machine learning. Frontiers of Computer Science
10(4):589–590.

Wide residual networks.

2017.

8
1
0
2
 
r
a

M
 
5
1
 
 
]
L
M

.
t
a
t
s
[
 
 
3
v
6
0
1
4
0
.
8
0
7
1
:
v
i
X
r
a

Rocket Launching: A Universal and Efﬁcient Framework for Training
Well-performing Light Net

Guorui Zhou,1∗ Ying Fan,1 Runpeng Cui,2 Weijie Bian1
Xiaoqiang Zhu1 and Kun Gai1
1Alibaba Inc, Beijing, China
2Department of automation, Tsinghua university
{guorui.xgr, fanying.fy, weijie.bwj, xiaoqiang.zxq}@alibaba-inc.com, cuirunpeng@gmail.com, jingshi.gk@taobao.com

Abstract

Models applied on real time response tasks, like click-through
rate (CTR) prediction model, require high accuracy and rig-
orous response time. Therefore, top-performing deep models
of high depth and complexity are not well suited for these
applications with the limitations on the inference time. In or-
der to get neural networks of better performance given the
time limitations, we propose a universal framework that ex-
ploits a booster net to help train the lightweight net for pre-
diction. We dub the whole process rocket launching, where
the booster net is used to guide the learning of our light net
throughout the whole training process. We analyze different
loss functions aiming at pushing the light net to behave simi-
larly to the booster net. Besides, we use one technique called
gradient block to improve the performance of light net and
booster net further. Experiments on benchmark datasets and
real-life industrial advertisement data show the effectiveness
of our proposed method.

Introduction
Deep networks have achieved state-of-the-art results in
many areas, such as computer vision (Huang et al. 2016) and
nature language processing (Bahdanau, Cho, and Bengio
2014). From AlexNet (Krizhevsky, Sutskever, and Hinton
2012) to recently proposed DenseNet (Huang et al. 2016),
better performances are accompanied with deeper and wider
networks and more complex and adaptable structures. A
more complex structure of neural networks means longer
inference time, which is not tolerated in industrial environ-
ment. Networks mentioned above only consider the evalu-
ation criterion of accuracy, while neglect the necessity of
real-time response in industrial applications.

At the same time, some nets like DIN (Zhou et al. 2017)
and wide & deep model (Cheng et al. 2016) get more and
more attention. These nets share some characteristics: nets
are shallow, layers are very simple and with less computa-
tion cost. In industrial applications, e.g. online advertising
systems, models have to make prediction of hundreds of ad-
vertisements for one user in several milliseconds, which re-
stricts the complexity of model. Only simple and shallow

∗Correspondence author is Guorui Zhou. The source code is

available at https://github.com/zhougr1993/Rocket-Launching.
Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

structure meets the stringent response time requirements in
industry.

Accuracy and latency are the two points that we pay at-
tention to. In general, there are two solutions to reduce
runtime complexities while keeping a decent performance.
Some works make use of factorizing or compressing to di-
rectly simplify the computation, such as matrix SVD (Den-
ton et al. 2014), MobileNet (Howard et al. 2017), and Shuf-
ﬂeNet (Zhang et al. 2017). Other approaches adopt the
teacher-student strategy. They use light networks with fewer
layers and parameters to decrease the inference time, while
the light nets are trained helped by a complicated teacher
network that trained in advance, like knowledge distilla-
tion (Hinton, Vinyals, and Dean 2015) and FitNet (Romero
et al. 2014). These teacher-student methods decrease the
runtime complexities, and can be further combined with ap-
proaches of the ﬁrst category. In this work, we propose a
novel universal framework to train decent small networks,
motivated by the potential of teacher-student methods.

In this work, we develop a novel network training pro-
cess dubbed rocket launching. The light net is the target
network for inference, the booster relates to the deeper and
more complex network from the architecture. Both the light
and the booster net compose the architecture of rocket net-
work. At the training stage, the light and booster networks
are trained simultaneously on the same task. Besides, the
light net also keeps getting knowledge learned by the booster
through the optimization of the hint loss, which is included
in the objective function to make both nets have similar be-
haviour during training. The booster guides the optimization
of the target light network along all the training process. At
the inference stage, only the trained light network is used.
Different from previous teacher-student methods (Hinton,
Vinyals, and Dean 2015; Romero et al. 2014), we make the
light model share some lower layers with the cumbersome
one and train them simultaneously.

In this paper, we propose a universal method aiming to
obtain a well-behaved light net considering limitations on
inference time. Our method is suitable to many different net-
work structures. In brief, our contributions can be summa-
rized as follows:
• We propose a novel universal training process called
rocket launching, which makes use of the booster net
to supervise the learning of the light network through

whole training process. We show that a light model can
be trained to perform close to deeper and more complex
models in experiments.

• We analyze different hint loss functions to transfer the in-

formation from booster to the light net.

• In order to push light net to be close to booster net, we
use gradient block technique to cancel the effect of hint
loss’s back-propagation on layers of the booster, which
gives booster net more freedom to update its parameters
based on ground truth and improve the performance fur-
ther.
Our method achieves the state-of-the-art results on pub-
licly available benchmarks as well as industrial dataset. It is
notable that our method performs better than other teacher-
student approaches. Experimental results present that the
performance can be further improved when combining other
teacher-student approaches with our framework.

The remainder of this paper starts from a summary of re-
lated work. Then we introduce our approach, followed by
experiments and conclusions.

Related work
Deep neural networks have drawn increasing attention in re-
cent years due to their overwhelming performance on many
research areas. One main trend of network structure design
is to develop neural networks with larger depth, more pa-
rameters and higher complexity to achieve better perfor-
mance (Simonyan and Zisserman 2015; Szegedy et al. 2015;
He et al. 2016; Zagoruyko and Nikos 2016). However, these
top-performing networks with high complexity will result
in time consuming systems at the inference phase. There-
fore, they are not well suitable for applications with infer-
ence time limitations.

There have been some explorations of model compres-
sion by directly simplifying the computation or pruning of
the original neural operations. Denton et al. (Denton et al.
2014) use SVD to approximate the convolutional operations
in deep CNNs. MobileNets (Howard et al. 2017) are based
on a streamlined architecture that uses depthwise separa-
ble convolutions to build lightweight deep neural networks.
ShufﬂeNet (Zhang et al. 2017) uses pointwise group con-
volution and channel shufﬂe to reduce computation cost.
ThiNet (Luo, Wu, and Lin 2017) uses statistic information
from next layer to prune ﬁlters which accelerates CNN mod-
els while maintaining accuracy.

Besides designing delicate net structure, light net can
get more information from extra pre-trained model during
training phrase. This idea has been emphasized in Learn-
ware (Zhou 2016). There have been some attempts adopting
a teacher-student strategy, where a more complex teacher
network is employed to teach a lightweight student network
on a given task. The teacher network helps the student net to
get a decent performance at the inference phase. Buciluˇa et
al. (Buciluˇa, Caruana, and Niculescu-Mizil 2006) improve
compression model, which pioneers this type of learning
process. They expound that the knowledge of a large en-
semble of models could transfer to a single small model,
they use a large ensemble of models to label large amounts

of unlabel data, then use the data labeled by the ensemble
models to train small model. Furthermore, Ba et al. (Ba and
Caruana 2014) train a wider and shallower net called student
net to mimic the big model called teacher net via regressing
logits before the softmax layer with (cid:96)2 loss. They think that
matching logits could get more information than the hard
label that provided by the cumbersome model. Hinton et
al. (Hinton, Vinyals, and Dean 2015) point out that identify-
ing knowledge in a trained model with the learned parameter
value is hard. Instead, they make use of one abstract view of
the knowledge that is the learned mapping from input vec-
tors to output vectors, they propose the strategy of knowl-
edge distillation which uses the class probabilities produced
by the cumbersome model as ”soft targets” for training the
small model. They prove that they are the general version of
matching logits which uesd by Ba and Caruana(2014).

Besides using the output of the teacher network, people
try to get more supervised information from the teacher.
FitNets (Romero et al. 2014) use not only the outputs but
also the intermediate representations learned by the cumber-
some model as the hint to supervise the training process.
Zagoruyko et al. (Zagoruyko and Komodakis 2016) use at-
tention as a mechanism of transferring knowledge from one
network to another. By properly deﬁning attention for con-
volutional neural networks, they improve the performance
of a student CNN by forcing it to mimic the attention maps
of a powerful teacher network.

In previous teacher-student approaches, the cumbersome
teacher networks are trained in advance. Instead of only
transferring the ﬁnal stationary outputs of the pretrained
model, we let the booster model guide the whole training
process of light net in rocket launching. We think that the
knowledge learned by the cumbersome model exists not
only in the ﬁnal outputs, but also in the full learning pro-
cess. The light model gets not only the difference between
the target and the temporary outputs, but also the possible
path towards the ﬁnal target provided by a complex model
of more learning capability. Another difference of our ap-
proach is that the part parameters of the light model and the
booster are shared in our framework. We adopt the param-
eter sharing scheme since the lower-level representation of
the same task should be universal. In the proposed architec-
ture, the booster has a much deeper speciﬁc layers to ensure
the capability to guide the light model to learn the task bet-
ter.

Training several nets together is often applied on multi
input scenes (Andrew et al. 2013; Bromley et al. 1994)
or semi-supervised task (Laine and Aila 2016). Parameters
sharing has also been used in multi-task (He et al. 2017).
However, to the best of our knowledge, there is no attempt
on using these techniques to train small net to get better per-
formance. We are the ﬁrst to utilize these schemes in model
compression attempts, and results in experiments present the
effectiveness of our method.

Our approach

In this section, we will describe our proposed rocket net
training process in detail. We will further analyze the high-

H(p, q) = − (cid:80)
i pi log qi is the cross-entropy, λ is the pa-
rameter to balance the cross-entropy and the hint loss. Here
we use the cross-entropy terms for the booster and light nets
to learn the true labels, and use hint loss function to exploit
the knowledge learned by the booster to guide the learning
process of the light network.

Characters of our method
There are some highlights in our method, which have no-
table effects on the training process and distinguish our
method from other teacher-student approaches.

Parameter sharing In our approach, the light net shares
parameter with the booster net. This scheme helps the light
net get direct thrust from the booster, which pushes it get
better performance.

The technique of parameter sharing is not new in deep
learning. In the area of computer vision, it is a common
scheme to train deep convolutional neural networks in a
multi-task manner. We assume that these tasks can be built
on some shared low-level representations of the images.
Given this assumption, we could reduce the parameters in
neural network and improve its generalization capability. It
is noticeable that, in industrial applications, e.g. CTR predic-
tion, reusing the embedding layers from other tasks helps a
new task converge more easily and get a better performance.

Simultaneous training
In most teacher-student methods,
the teacher network is trained on the target database in ad-
vance, and its parameters are ﬁxed when guiding the training
process of the student net. Different from these approaches,
we have the light and booster nets trained simultaneously,
the whole learning process of the target light net is guided
by the booster net. The light model can learn from not only
the difference between the target and its temporary outputs,
but also the possible path towards the ﬁnal target provided
by a complex model with more learning capability.

Notice that instead of training the teacher and student nets
separately, the whole training time of our proposed architec-
ture is shortened. Therefore, the compressed model can be
trained more efﬁciently to meet the requirement in industrial
applications that the inference model be updated frequently.

Hint loss functions
In our approach, we transfer the
booster net’s knowledge to the light net by minimizing the
hint loss. Several different hint loss functions are considered
in this work:
• MSE of ﬁnal softmax: LMSE(x) = (cid:107)p(x) − q(x)(cid:107)2
2,
• MSE of

logits before softmax activation, which is
also adopted in SNN-MIMIC (Ba and Caruana 2014):
Lmimic(x) = (cid:107)l(x) − z(x)(cid:107)2
2,

• knowledge distillation (Hinton, Vinyals, and Dean 2015):

LKD(x) = H( p(x)
For the MSE of ﬁnal softmax LMSE, we have the deriva-

T ), where T is the temperature.

T , q(x)

tive of the hint loss with respect to li(x):

∂LMSE(x)
∂li(x)

= 2pi(x)

(cid:104)
pi(x) − qi(x)

(cid:88)

+

k

pk(x)(qk(x) − pk(x))

(cid:105)
.

(2)

Figure 1: Whole Net Structure, blue dashed circle represents
light net, pink dashed circle represents booster net. Yellow
layers are shared by light net and booster net.

lights of our method and compare different hint loss func-
tions.

The sketch of our method
Fig. 1 represents the general structure of our architecture, it
is composed of two parts: the light net and the booster net.
These two networks share some lower-level layers (anno-
tated in yellow), and they both have their speciﬁc layers for
the learning and prediction on the same task.

We let x and y denote the inputs and one-hot ground truth
labels of our neural architecture. Let L be the light net with
an output softmax as p(x) = softmax(l(x)), where l(x)
is the weighted sum before the softmax activation. Param-
eters for the light net consist of two components: parame-
ters in shared layers WS and parameters in its lightweight
particular layers for prediction WL. We let B denote the
booster network with shared parameters WS and its partic-
ular weights WB to get the ﬁnal output. Similar to the light
net, we have q(x) = softmax(z(x)) as the output softmax
for the booster, where z(x) is the weighted sum before the
softmax activation. We expect that the light net is trained
similar to the true labels y, as well as approximate to the
knowledge learned by the booster net with much more rep-
resentation capability. To solve this problem, we take hint
loss in the training objective in order to convey knowledge
from the booster net to the light net. The objective function
for rocket launching is deﬁned as follows:

L(x; WS, WL, WB) = H(y, p(x)) + H(y, q(x))

+ λ(cid:107)l(x) − z(x)(cid:107)2
2,

(1)

where the last term is the hint loss function as the mean
square error (MSE) between the logits z(x) and l(x),

Notice that the gradient is proportional to the prediction out-
puts of the light net. If li(x) is very negative, causing pi(x)
close to zero and the gradient to vanish, the MSE of ﬁnal
softmax may fail to learn the difference in outputs, even
when the light net makes radically different outputs from
the booster net.

SNN-MIMIC learning (Ba and Caruana 2014) uses the
formulation of Lmimic between the teacher and student net-
works. We have the derivative w.r.t. li(x):

∂Lmimic(x)
∂li(x)

= li(x) − zi(x).

(3)

We observe that the update directly reduces the difference
between the logits before softmax, which prevents the prob-
lem of gradient vanishing with LMSE. Experimental results
also present that training with Lmimic achieves the best per-
formance among these different hint loss formulations.

Knowledge distillation (Hinton, Vinyals, and Dean 2015)
uses cross-entropy to restrict the probability outputs of two
models. In their work, a temperature T is introduced to pro-
duce a softer probability distribution among classes. They
think that knowledge distillation is the general case of
matching logits. They prove that with a high temperature,
the gradient w.r.t. li(x) is:

∂LKD(x)
∂li(x)

≈

1
N T 2 (li(x) − zi(x)),

(4)

where N is the number of classes, and approximation
eli(x)/T ≈ 1 + li(x)/T is used. Their approximation ne-
glects the term (li(x)/T )2 in Taylor series when the tem-
perature is high enough compared with the magnitude of the
1
N T 2 (li(x) −
logits. Notice that the approximate gradient
zi(x)) is the same order of inﬁnitesimal to the neglected
term (li(x)/T )2, this approximation may also cause a neg-
ligible gradient. But we approve the temperature’s effect that
it can soften class probability, which makes the distillation
pays more attention to matching the negative logits below
the average. In practice, Hinton et al. (Hinton, Vinyals, and
Dean 2015) suggest that intermediate temperatures work
best, which ignores the very negative logits that might be
noisy. While in this work, we ﬁnd that the optimization of
all the logits’ difference in our framework outperforms using
the formulation of LKD. We think that some very negative
logits may convey useful knowledge acquired by the cum-
bersome net, which helps the student network to get a better
performance.

Gradient block In our proposed training process, the light
net shares parameters and is trained together with the booster
net. This simultaneous training scheme has an inevitable ef-
fect on the performance of the booster network. Using both
cross-entropy H(y, q(x)) and hint loss as the objective to
update booster’s parameters will make the categorical out-
puts of the booster strongly affected by those of the light net,
and hinder the booster from learning on the task directly.
Since the learning capability of the light model is limited,
the performance of the booster net will be inevitably deterio-
rated. Notice that the light model learns from the knowledge

Figure 2: Gradient backward with the gradient block
scheme.

conveyed by the booster net during training, this deteriora-
tion in the booster model’s learning will further diminish the
learning potential of the light network.

In order to solve this problem, during the training process,
we develop the gradient block scheme to prevent the booster
model from minimizing the hint loss objective. As we can
see from Fig. 2, during the back-propagation of the hint loss
term, we ﬁx the gradient of booster net’s speciﬁc parame-
ters (WB), and use this moment booster net’s probability as
target to supervise light net’s study.

This operation makes the speciﬁc parameters WB in
booster net away from the effect given by the light model,
thus the booster can directly learn from the ground truth la-
bels to achieve its best performance. For the light net, the
parameters are normally updated to optimize the objective
function in Eq. 1. Both the supervisory information and the
booster’s knowledge are the targets for the light model to
learn from.

Experiments
In this section, we evaluate our rocket launching on sev-
eral classiﬁcation datasets and a real advertisement database
from a Chinese leading e-commerce site. Experimental re-
sults present that our proposed approach achieves notable
improvements in the light net’s performance and outper-
forms other teacher-student methods. In experiments on
public benchmarks, we compare our method with knowl-
edge distillation (KD) (Hinton, Vinyals, and Dean 2015) and
attention transfer (AT) (Zagoruyko and Komodakis 2016).

Experiments on CIFAR-10
The CIFAR-10 dataset (Krizhevsky and Hinton 2009) con-
sists of 32 × 32 color images from 10 class. These images
are split into 50, 000 training samples and 10, 000 testing

Table 1: Comparisons of classiﬁcation performance(test error) on CIFAR-10

light

booster

base1 AT

KD rocket2

rocket+KD3 booster4 booster only5

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 8.77
WRN-16-2, 0.7M(b) WRN-40-2, 2.2M 6.31
WRN-16-1, 0.2M(a) WRN-40-1, 0.6M 8.69

8.25
5.85
-6

7.87
6.64
5.67
5.20
7.85
7.27
2 rocket means light net’s result in rocket launching.

8.39
6.08
8.34

7.52
5.64
7.51

6.58
5.23
6.58

1 base means WRN-16 trains individually.
3 rocket+KD means light net’s result using rocket launching combined with KD.
4 booster means booster net’s result in rocket launching.
6 WRN-16-1, 0.2M(b) can’t be applied on AT directly, so we did not report this result.

5 booster only means WRN-40 trains individually.

samples. We preprocess the data with the same operations
as in Zagoruyko and Komodakis(2016). All the experiments
are repeated 3 times with different seed, and we take the
median of error rates as the ﬁnal results. All the experi-
ments, we use the same learning rate tuning and epochs as
in Zagoruyko and Komodakis(2016). We set the initial learn-
ing rate to be 0.1 with momentum to be 0.9, while we drop
learning rate by 0.2 at [60, 120, 160] epochs and train for to-
tal 200 epochs.

We employ wide residual net (Zagoruyko and Nikos
2016) to be the instantiation of rocket launching on CIFAR-
10 datasets. Wide residual net (WRN) has three groups of
block, each block has two convolutional layers with larger
width in contrast with the original ResNet. The wider layers
are accompanied with more parameters, which could offer
more representation capability. Fig. 3(a) shows the schemat-
ics of the rocket net structure based on wide residual net-
works. Layers in red are shared by the light net and the
booster. As we can see, sharing layers (layers in red) are in
the lower group of wide residual net. The yellow part is the
speciﬁc structure designed for light net to make prediction.
The blue part is the speciﬁc layers of the booster, which is
removed at inference phrase. Attention transfer (AT) uses
teacher net’s output activations of each group of residual
blocks to supervise student net’s each group’s activations.
In order to compare with AT fairly, we design another shar-
ing way. As Fig. 3(b) shows, the light net shares some lower
blocks with the booster in each group.

We explore rocket launching on light and booster net
with different network depths and widths (e.g. WRN-16-
1(a),0.2M means wide residual network with depth of 16
and widening factor of 1, using the layer sharing way like
Fig. 3(a), its parameters’ size is 0.2M). As shown in Table 1,
our approach achieves consistently notable improvement
compared to the base light net with different experimental
settings. Taking the ﬁrst line of Table 1 as example, using
the same WRN-16-1(b) net structure, our rocket launching
get 0.9% improvement compared with this net trained in-
dividual. We also observe that our approach outperforms
other teacher-student methods, such as knowledge distilla-
tion (KD) (Hinton, Vinyals, and Dean 2015) and attention
transfer (Zagoruyko and Komodakis 2016). It’s notable that
beneﬁtting from the structure characteristic of residual net,
the way of sharing shown in Fig. 3(b) still obtains decent
result.

Besides comparing with other approaches, we also try to

combine KD with our method by adding LKD to the objec-
tive in Eq. 1. It’s notable that we use probability that pre-
trained by booster net in LKD, which means light net can
also obtain additional guidance from a pre-trained booster
network. From Table 1, we see that the performance can be
further improved with the application of KD, which means
our rocket launching has different effect on the light net with
KD. The light net beneﬁts from both the supervisory in-
formation brought by the pre-trained teacher network, and
the knowledge conveyed by the booster network during the
training process.

We also investigate our framework with different hint loss
formulations. From Table 3, we see that the adopted hint loss
to match the logits achieves the best performance among the
different objectives. While hint loss to match the probability
performs worst, which means gradient vanishing affects the
training process. The experimental results are in accordance
with our previous analysis.

Performance of each part of our framework Experi-
ments are also carried out on CIFAR-10 to evaluate our
framework design (see Fig. 3). We observe that simulta-
neous training, layer sharing and gradient block all con-
tribute to the improvements of our approach. For WRN-16-
1(b), gradient block (GB) gets 0.63% improvement com-
pared with rocket (no GB); Parameter sharing gets 0.19%
improvement compared with rocket (no sharing). Using part
parameter from booster to initialize the light net, using both
cross-entropy which learns the ground truth and Lmimic be-
tween light net’s logits and ﬁxed logits from booster to train
light net alone, we get worse results than rocket, which
shows the effectiveness of simultaneous training.

Besides, our rocket launching with joint training could
reduce the whole training time. On CIFAR-10 dataset, the
training process of 40-layer booster takes 173 epochs to
converge, with 24.6s per epoch on average, and the train-
ing of the 16-layer light net takes 165 epochs, with 18.3s
for each epoch. The total time is 7275.3s. In contrast, our
rocket launching process takes 180 epochs and a total time
of 6153.0s to converge, with 34.2s for each epoch. We see
that the rocket launching do shorten the time for training the
architecture when compared with training the two networks
separately.

Performance with different depths
In this part, we in-
vestigate the learning capability of the light model with dif-
ferent depths and parameter sizes. Different from previous

Table 2: Comparisons of different framework design’s result (test error) on CIFAR-10.

light

booster

rocket (no GB)1

rocket (no sharing)2

rocket (no joint training)3

rocket

WRN-16-1(b) WRN-40-1
WRN-16-1(a) WRN-40-1

8.50
8.30

8.06
8.23

8.04
8.23

7.87
7.85

1 rocket (no GB) means rocket launching without gradient block.
2 rocket (no sharing) means rocket launching without parameter sharing.
net trains ﬁrst, then light net use some layers of booster to initialize, and use hint loss to learn booster net’s logits.

3 rocket (no joint training) means booster

base

8.77
8.69

Table 3: Different hint loss functions on CIFAR-10
Lmimic LMSE LKD

booster

light

WRN-16-1 (b) WRN-40-1
WRN-16-1 (a) WER-40-1

7.87
7.85

8.32
8.36

7.98
8.26

(a) bottom rocket net on wide residual net

(b) interval rocket net on wide residual net

Figure 4: The accuracy with different sharing layers of light
net on CIFAR-10

Figure 3: Proposed network structures for rocket net.

booster net in low layer.

net structure, in order to make the size of parameter propor-
tional to the layers, we use residual net with ﬁxed width from
bottom to top. Light net shares the bottom ns convolutional
layers with booster net. we tune the number of ns from 10 to
18 while the number of booster net’s layers is 40(In order to
make booster has prominent better learning ability than light
net, we set ns less than half of booster’s depth).

From Fig. 4, we see that the light model performs better
than base and KD stably, which means our light net with
different depths all can get extra information with the help of
cumbersome booster. It’s notable that the gap between base
and rocket is not proportional to the depth of light net, this
phenomenon may be caused by the balance between light
learning ability and extra information from booster net.

Visualization of rocket launching and attention transfer
In order to explain our method intuitively, we visualize each
group’s output of light net and booster net respectively. To
be consist with previous part, we use Fig. 3(b) as the basic
net. For comparison, we visualize the corresponding results
of spatial attention mapping. As we can see from Fig. 5, for
both rocket launching and attention transfer (AT), the feature
maps generated from lower groups are similar between light
and booster net. It indicates that parameter sharing and at-
tention have similar effect on lower layers. It can also show
that these methods can learn the feature representation from

Experiments on SVHN and CIFAR-100
Aiming to verify the effectiveness of rocket launching fur-
ther, we apply our method on CIFAR-100 and SVHN re-
spectively. In order to compare with AT (which is based on
WRN), we still use WRN as basic net structure, and the shar-
ing method is shown in Fig. 3(b) .

The CIFAR-100 dataset (Krizhevsky and Hinton 2009)
consists of 32 × 32 color images from 100 classes. Like
CIFAR-10, these images are still split into 50, 000 train-
ing and 10, 000 testing samples. The experiment setting of
CIFAR-100 is same as CIFAR-10.

The SVHN database (Netzer et al. 2011) is obtained from
house numbers in Google Street View images. It contains
32 × 32 images with RGB color channels in 10 class. There
are 73, 257 images in the training set, 26, 032 images in test-
ing set and 531, 131 samples in extra set. We follow the same
evaluation procedure as Sermanet et al. (Sermanet, Chintala,
and LeCun 2012) to compose our training, validation and
test sets. For this dataset, we use validation dataset to choose
the ﬁnal model. In our experiment, we use Adam (Kingma
and Ba 2014) with initial learning rate 0.001, while we
drop learning rate by 0.2 at [20, 40, 60] epochs. Because this
dataset is easy to learn, we add dropout after each speciﬁc
layer of booster net with dropout rate 20% to prevent over-
ﬁtting. For booster trained alone, same dropout layers are
added to keep consistent.

Table 4: Comparisons of classiﬁcation performance (test error) on CIFAR-100 and SVHN

dataset

light

booster

base

AT

KD rocket

rocket+KD

SVHN

WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 3.58
CIFAR-100 WRN-16-1, 0.2M(b) WRN-40-1, 0.6M 43.7

2.99
34.1

2.31
36.4

2.29
33.3

2.20
33.0

Table 5: Experiments on real Advertisement Dataset

model

# params in FC layers

# multiplications in FC layers

# inference time of FC Layers GAUC

base
rocket
booster only

576 × 200 × 80 × 2
576 × 200 × 80 × 2
576 × 720 × 360 × 240 × 180 × 90 × 2

131360
131360
837900

7.6 ms
7.6 ms
23.2 ms

0.632
0.635
0.637

dataset1 comes from productive display advertising system
in Alibaba, we use rocket launching to predict whether user
clicks given product. The size of training set is 4 billion, the
test set is 0.285 billion.

The network that we use is shown in DIN (Zhou et al.
2017). In the online system, most calculations focus on the
fully connected layers after the embedding layers. So we try
to use a booster net with more complex fully connected lay-
ers to guide our light net. The light net shares embedding
layers with booster net. The booster net has seven wide hid-
den layers using complicated operation like batch normal-
ization(Ioffe and Szegedy 2015), light net’s speciﬁc layers
with less hidden units and has only fully connected layers.
The light net in the huge real data gets 0.3% improvement
on GAUC (the generalization of AUC) (Zhou et al. 2017)
with the same latency as the base model. The booster net
gets the best performance on the ofﬂine metric, but it needs
23.2 ms for one requirement to infer hundreds candidate ad-
vertisements, which is unacceptable for online system. Our
approach can get improvement on a model with same struc-
ture and parameter quantity. And this experiment proves that
one can use our approach to break the boundary brought by
the latency limitation to some degree.

Conclusion
We propose a general framework named rocket launching
to get a efﬁcient well-performing light model with the help
of a cumbersome booster net. In order to get as much as
information from the booster model, we make the booster
and the light net train on the same task together with the
hint loss objective, which pushes the booster model to su-
pervise the whole training process of the light one. Besides,
the light model shares parameter with the booster to make
the light net get low-level representation directly from the
booster. We also analyze different hint loss functions clude-
that can convey knowledge from the booster to the light
model. Moreover, we develop the gradient block scheme to
prevent the booster net from deterioration. For future work,
we would like to explore training networks with not only
smaller depths but also fewer neurons in each layer to fur-
ther improve the inference efﬁciency.

(a) different group’s visualization result on attention transfer

(b) different group’s visualization result on rocket launching

Figure 5: The visualization results on both rocket launching
and attention transfer, in each group, the ﬁrst and second
picture in each group stands for booster net and light net
respectively

Error rate on above two dataset is shown in Table 4.
We observe that our approach gets 1.29% improvement on
SVHN and 10.4% improvement on CIFAR-100 compared
with base model. What’s more, rocket launching outper-
forms other teacher-student methods on all settings.

Experiments on real Advertisement Dataset

In order to verity the effectiveness of rocket launching fur-
ther, we test our method on huge real industry dataset. The

1 https://tianchi.aliyun.com/datalab/dataSet.htm?spm=5176100
073.888.26.70c5adaeMeJQpW&id=19

References
[Andrew et al. 2013] Andrew, G.; Arora, R.; Bilmes, J.; and
Livescu, K. 2013. Deep canonical correlation analysis. In
Proceedings of the 30th International Conference on Ma-
chine Learning, 1247–1255.
[Ba and Caruana 2014] Ba, J., and Caruana, R. 2014. Do
deep nets really need to be deep? In Advances in Neural
Information Processing Systems 27, 2654–2662.
[Bahdanau, Cho, and Bengio 2014] Bahdanau, D.; Cho, K.;
2014. Neural machine translation by
and Bengio, Y.
arXiv preprint
jointly learning to align and translate.
arXiv:1409.0473.
[Bromley et al. 1994] Bromley, J.; Guyon, I.; LeCun, Y.;
S¨ackinger, E.; and Shah, R. 1994. Signature veriﬁcation
using a siamese time delay neural network. In Advances in
Neural Information Processing Systems 12, 737–744.
[Buciluˇa, Caruana, and Niculescu-Mizil 2006] Buciluˇa, C.;
Caruana, R.; and Niculescu-Mizil, A. 2006. Model com-
pression. In Proceedings of the 12th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining,
535–541.
[Cheng et al. 2016] Cheng, H.-T.; Koc, L.; Harmsen, J.;
Shaked, T.; Chandra, T.; Aradhye, H.; Anderson, G.; Cor-
rado, G.; Chai, W.; Ispir, M.; et al. 2016. Wide & deep
In Proceedings of the
learning for recommender systems.
1st Workshop on Deep Learning for Recommender Systems,
7–10. Boston, USA: ACM.
[Denton et al. 2014] Denton, E. L.; Zaremba, W.; Bruna, J.;
LeCun, Y.; and Fergus, R. 2014. Exploiting linear struc-
ture within convolutional networks for efﬁcient evaluation.
In Advances in Neural Information Processing Systems 27,
1269–1277.
[He et al. 2016] He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on Computer Vision and Pattern
Recognition, 770–778.
[He et al. 2017] He, K.; Gkioxari, G.; Dollar, P.; and Gir-
arXiv preprint
shick, R.
arXiv:1703.06870.
[Hinton, Vinyals, and Dean 2015] Hinton, G.; Vinyals, O.;
and Dean, J. 2015. Distilling the knowledge in a neural
network. arXiv preprint arXiv:1503.02531.
[Howard et al. 2017] Howard, A. G.; Zhu, M.; Chen, B.;
Kalenichenko, D.; Wang, W.; Weyand, T.; Andreetto, M.;
and Adam, H. 2017. Mobilenets: Efﬁcient convolutional
arXiv
neural networks for mobile vision applications.
preprint arXiv:1704.04861.
[Huang et al. 2016] Huang, G.; Liu, Z.; Weinberger, K. Q.;
and van der Maaten, L. 2016. Densely connected convolu-
tional networks. arXiv preprint arXiv:1608.06993.
[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015.
Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In Proceedings of the 32nd
International Conference on Machine Learning.
[Kingma and Ba 2014] Kingma, D., and Ba, J. 2014. Adam:

2017. Mask R-CNN.

arXiv preprint

A method for stochastic optimization.
arXiv:1412.6980.
[Krizhevsky and Hinton 2009] Krizhevsky, A., and Hinton,
G. 2009. Learning multiple layers of features from tiny
images.
[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.;
Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiﬁca-
tion with deep convolutional neural networks. In Advances
in Neural Information Processing Systems 25, 1097–1105.
[Laine and Aila 2016] Laine, S., and Aila, T. 2016. Tempo-
ral ensembling for semi-supervised learning. arXiv preprint
arXiv:1610.02242.
[Luo, Wu, and Lin 2017] Luo, J.-H.; Wu, J.; and Lin, W.
2017. Thinet: A ﬁlter level pruning method for deep neu-
ral network compression. arXiv preprint arXiv:1707.06342.
[Netzer et al. 2011] Netzer, Y.; Wang, T.; Coates, A.; Bis-
sacco, A.; Wu, B.; and Ng, A. Y. 2011. Reading digits in
natural images with unsupervised feature learning. In NIPS
workshop on deep learning and unsupervised feature learn-
ing, volume 2011, 5.
[Romero et al. 2014] Romero, A.; Ballas, N.; Kahou, S. E.;
and Chassang, A. 2014. Fitnets: Hints for thin deep nets.
arXiv preprint arXiv:1412.655d0.
[Sermanet, Chintala, and LeCun 2012] Sermanet, P.; Chin-
tala, S.; and LeCun, Y. 2012. Convolutional neural networks
applied to house numbers digit classiﬁcation. In Proceed-
ings of the 21st International Conference on Pattern Recog-
nition, 3288–3291. IEEE.
[Simonyan and Zisserman 2015] Simonyan, K., and Zisser-
man, A. 2015. Very deep convolutional networks for large-
scale image recognition. In Proceedings of the 3th Interna-
tional Conference on Learning Representations, 621–630.
[Szegedy et al. 2015] Szegedy, C.; Liu, W.; Jia, Y.; Sermanet,
P.; Reed, S.; Anguelov, D.; Erhan, D.; Vanhoucke, V.; and
Rabinovich, A. 2015. Going deeper with convolutions.
In Proceedings of the IEEE conference on Computer Vision
and Pattern Recognition, 1–9.
[Zagoruyko and Komodakis 2016] Zagoruyko, Z., and Ko-
modakis, K. 2016. Paying more attention to attention: Im-
proving the performance of convolutional neural networks
via attention transfer. arXiv preprint arXiv:1612.03928.
[Zagoruyko and Nikos 2016] Zagoruyko, S., and Nikos, K.
arXiv preprint
2016.
arXiv:1605.07146.
[Zhang et al. 2017] Zhang, X.; Zhou, X.; Lin, M.; and Sun,
Shufﬂenet: An extremely efﬁcient convolu-
J.
tional neural network for mobile devices. arXiv preprint
arXiv:1707.01083.
[Zhou et al. 2017] Zhou, G.; Song, C.; Zhu, X.; Ma, X.; Yan,
Y.; Dai, X.; Zhu, H.; Jin, J.; Li, H.; and Gai, K. 2017. Deep
interest network for click-through rate prediction. arXiv
preprint arXiv:1706.06978.
[Zhou 2016] Zhou, Z.-H.
2016. Learnware: on the fu-
ture of machine learning. Frontiers of Computer Science
10(4):589–590.

Wide residual networks.

2017.

