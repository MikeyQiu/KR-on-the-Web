Convolutional Image Captioning

Jyoti Aneja∗, Aditya Deshpande∗, Alexander Schwing
University of Illinois at Urbana-Champaign
{janeja2, ardeshp2, aschwing}@illinois.edu

7
1
0
2
 
v
o
N
 
4
2
 
 
]

V
C
.
s
c
[
 
 
1
v
1
5
1
9
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Image captioning is an important but challenging task,
applicable to virtual assistants, editing tools, image index-
ing, and support of the disabled.
Its challenges are due
to the variability and ambiguity of possible image descrip-
tions. In recent years signiﬁcant progress has been made in
image captioning, using Recurrent Neural Networks pow-
ered by long-short-term-memory (LSTM) units. Despite
mitigating the vanishing gradient problem, and despite their
compelling ability to memorize dependencies, LSTM units
are complex and inherently sequential across time. To ad-
dress this issue, recent work has shown beneﬁts of convo-
lutional networks for machine translation and conditional
image generation [9, 34, 35].
Inspired by their success,
in this paper, we develop a convolutional image caption-
ing technique. We demonstrate its efﬁcacy on the challeng-
ing MSCOCO dataset and demonstrate performance on par
with the baseline, while having a faster training time per
number of parameters. We also perform a detailed analy-
sis, providing compelling reasons in favor of convolutional
language generation approaches.

1. Introduction

Image captioning, i.e., describing the content observed
in an image, has received a signiﬁcant amount of attention
in recent years. It is applicable in various scenarios, e.g.,
recommendation in editing applications, usage in virtual as-
sistants, for image indexing, and support of the disabled. It
is also a basic ingredient for more complex operations such
as storytelling [13] and visual summarization [37].

In recent years, with the availability of larger datasets,
deep neural network (DNN) based methods have been
shown to achieve impressive results on image captioning
tasks [16, 38]. These techniques are largely based on recur-
rent neural nets (RNNs), often powered by a Long-Short-
Term-Memory (LSTM) [11] component which mitigates
the issue of vanishing or exploding gradients [25]. Figure 1

∗ Denotes equal contribution.

Figure 1: Examples of captions generated by a standard
LSTM-based network, our convolutional network (CNN)
and ground-truth (GT) captions by a human annotator.

shows examples of captions generated by an LSTM-based
network.

LSTM nets have been considered as the de-facto stan-
dard for vision-language tasks of image captioning [5, 16,
38, 39], visual question answering [2, 30], question gen-
eration [14, 21], situation recognition [19], and visual dia-
log [7], due to their compelling ability to memorize long-
term dependencies through a memory cell. However, the
complex addressing and overwriting mechanism combined
with inherently sequential processing, and signiﬁcant stor-
age required due to back-propagation through time (BPTT),
poses challenges during training. Also, in contrast to CNNs,
that are non-sequential, LSTMs often require more careful
engineering, when considering a novel task. Previously,
CNNs have not matched up to the LSTM performance on
vision-language tasks.

Inspired by the recent successes of convolutional archi-
tectures on other sequence-to-sequence tasks – conditional
image generation [34], machine translation [9, 35] – we
study convolutional architectures for the task of image cap-
tioning. To the best of our knowledge, ours is the ﬁrst con-
volutional network for image captioning that compares fa-
vorably to LSTM-based methods. On the MSCOCO dataset
we match performance of the LSTM with a .952 CIDEr
score and get a better BLEU-4 score of .316 (see Table 2).
Our key contributions are: a) A convolutional (CNN-
based) image captioning method that shows comparable

1

A variety of probabilistic models have been considered
(Section 7), from hidden Markov models [40] to recurrent
neural networks. First, we brieﬂy review the inference and
learning of RNN-based approaches (Section 3) and then
delve into our convolutional approach (Section 4).

3. RNN Approach

An illustration of a classical RNN architecture for image
captioning is provided in Figure 2. It consists of three ma-
jor components, all of which contain trainable parameters:
the input word embeddings, the sequential LSTM units con-
taining the memory cell, and the output word embeddings.
Inference. RNNs sequentially predict one word at a time,
from y1 up to yN . At every time-step i, a conditional proba-
bility distribution pi,w(yi|I), which depends on parameters
w, is predicted (see top of Figure 2). During inference, we
typically choose the word yi with the highest probability
pi,w(yi|I). The sentence terminates once the end of sen-
tence token is chosen, or after a maximum of N steps.

For modeling pi,w(yi|I), in the spirit of auto-regressive
models, the dependence of word yi on its ancestors y<i is
implicitly captured by a hidden representation hi (see ar-
rows in Figure 2). Formally, the probability is computed
via

pi,w(yi|hi, I) = gw(yi, hi, I),

(1)

where gw can be any differentiable function/deep net. This
function may depend directly on the image I. However,
classical image captioning techniques usually encode the
image into the hidden representation h0 (Figure 2).

Importantly, RNNs just like other auto-regressive models
are described by a recurrence relation which governs com-
putation of the hidden state hi based on its values at the pre-
vious time instant, hi−1, as well as the word yi−1, predicted
at the previous time step:

hi = fw(hi−1, yi−1, I).

(2)

Again, fw can be any differentiable function. For image
captioning, long-short-term-memory (LSTM) [11] nets and
variants thereof based on gated recurrent units (GRU) [6],
or forward-backward LSTM nets are used here.

The recurrent function given in Eq. (2) generally doesn’t
operate directly on one-hot input vectors yi. Instead, input
words are encoded into a vectorial representation via an em-
bedding layer (input word embeddings in Figure 2). Note
that the functions gw and fw are identical across time.
Learning. Following classical supervised learning, it is
common to ﬁnd the parameters w of the word embed-
dings and the LSTM unit by minimizing the negative log-
likelihood of the training data D, i.e., we optimize:

min
w

−

(cid:88)

N
(cid:88)

(I,y∗)∈D

i=1

ln pi,w(y∗

i |hi, I).

(3)

Figure 2: A sequential RNN powered by an LSTM cell.
At each time step output is conditioned on the previously
generated word, the image is fed at the start only.

performance to an LSTM based method on standard met-
rics (Section 6.2, Table 1 and Table 2); b) Improved per-
formance with a CNN model that uses attention mecha-
nism to leverage spatial image features. With attention,
we outperform the current attention baseline and qualita-
tively demonstrate that our method ﬁnds salient objects in
(Figure 6, Table 2); c) We analyze the char-
the image.
acteristics of CNN and LSTM nets and provide useful in-
sights such as – CNNs produce more entropy (useful for di-
verse predictions), better classiﬁcation accuracy, and do not
suffer from vanishing gradients (Section 6 and Figure 7, 8
and 9). We evaluate our architecture on the challenging
MSCOCO [18] dataset, and compare it to an LSTM [16]
and an LSTM+Attention baseline [39].

The paper is organized as follows: Section 2 describes
our notation, Section 3 brieﬂy reviews the RNN/LSTM
based approach, Section 4 describes our convolutional
method and Section 5 gives the details of our CNN architec-
ture, Section 6 contains our results and Section 7 discusses
previous work on image captioning.

2. Problem Setup and Notation

For image captioning, we are given an input image I
and we are required to generate a sequence of words y =
(y1, . . . , yN ). The possible words yi ∈ Y at time-step i are
subsumed in a discrete set Y of options. The number of
possible options |Y| easily reaches several thousands. This
set of options Y often contains special tokens that denote a
start token (<S>), an end of sentence token (<E>), and an
unknown token (<UNK>) which refers to all words not in
Y.

Given a training set D = {(I, y∗)} which contains pairs
(I, y∗) of input image I and corresponding ground-truth
caption y∗ = (y∗
i ∈ Y,
i ∈ {1, . . . , N }, we maximize w.r.t. parameters w, a proba-
bilistic model pw(y1, . . . , yN |I).

N ), consisting of words y∗

1, . . . , y∗

4. Convolutional Approach

Our model is based on the convolutional machine trans-
lation model used in [9]. Figure 3 provides an overview of
our feed-forward convolutional (or CNN-based) approach
for image captioning. As the ﬁgure illustrates, our tech-
nique contains three main components similar to the RNN
technique. The ﬁrst and the last components are word em-
beddings in both cases. However, while the center com-
ponent contains LSTM or GRU units in the RNN case,
masked convolutions are employed in our CNN-based ap-
proach. This component, unlike the RNN, is feed-forward
without any recurrent function. We brieﬂy review inference
and learning of our model. The problem setup and notation
follows Section 2.
Inference. In contrast to the RNN formulation, where the
probabilistic model is unrolled in time via the recurrence
relation given in Eq. (4), we use a simple feed-forward deep
net, fw, for modeling pi,w(yi|I). Prediction of a word yi
relies on past words y<i or their representations:

pi,w(yi|y<i, I) = fw(yi, y<i, I).

(5)

To disallow convolution operations from using informa-
tion of future word tokens, we use masked convolutional
layers that operate only on ‘past’ data. This is similar
to [9, 34].

Inference can now be performed sequentially, one word
at a time. Hence, inference begins with the start token <S>
and employs a feed-forward pass to generate p1,w(y1|∅, I).
Afterwards, y1 ∼ p1,w(y1|∅, I) is sampled. Note that it
is possible to retrieve the maximizing argument or to per-
form beam search. After sampling, y1 is fed back into the
feed-forward network to generate subsequent words y2, etc.
Inference continues until the end token is predicted, or until
we reach a ﬁxed upper bound of N steps.
Learning.
Similar to RNN training, we use ground-
truth y∗
<i for past words, instead of using the most re-
cently generated ones. For prediction of word probabil-
ity pi,w(yi|y∗
<i, I), the considered feed-forward network is
fw(yi, y∗
<i, I) and we optimize for parameters w using a
likelihood similar to Eq. (3).

Since there are no recurrent connections and all ground-
truth words are available at any given time-step i, our CNN
based model can be trained in parallel for all words. In Sec-
tion 5, we provide details about the convolutional architec-
ture used in our experiments.

5. Architecture

The detailed architecture for our convolutional image
In this ﬁgure, we
captioning is illustrated in Figure 4.
show a training iteration with input (ground-truth) words
{y∗
5} = { a, woman, is, playing, tennis }. Addition-

1, . . . , y∗

Figure 3: Our convolutional model for image captioning.
We use a feed forward network with masked convolutions.
Unlike RNNs, our model operates over all words in parallel.

To compute the gradient of the objective given in Eq. (3),
back-propagation through time (BPTT) is the de-facto stan-
dard these days. BPTT is necessary due to the recurrence
relationship encoded in fw (Eq. (2)), which is unrolled as
illustrated in Figure 2. The gradients of the function fw at
time i depend on the gradients obtained in successive time-
steps.

To avoid more complicated gradient ﬂows through the
recurrence relationship, during training, it is common to use

hi = fw(hi−1, y∗

i−1, I),

(4)

rather than the form provided in Eq. (2). I.e., during train-
ing, when computing the latent representation hi, we use the
ground-truth symbol y∗
i−1 rather than the prediction yi−1.
This is termed as teacher forcing. While this simpliﬁes the
gradient ﬂow, it obviously causes the input statistics to dif-
fer between train and test. This issue has been subject to
recent work [4, 10].

Although highly successful, RNN-based techniques suf-
fer from some drawbacks. First, the training process is in-
herently sequential for a particular image-caption pair. This
results from unrolling the recurrent relation in time. Hence,
the output at time-step i has a true dependency on the output
at i − 1. Secondly, as we will show in our results for image
captioning, RNNs tend to produce lower classiﬁcation ac-
curacy (Figure 7), and, despite LSTM units, they still suffer
to some degree from vanishing gradients (Figure 9).

Next, we describe an alternative convolutional approach
to image captioning which attempts to overcome some of
these challenges.

Figure 4: Our convolutional architecture for image captioning. Our architecture has four components: (i) Input embedding
layer, (ii) Image embedding, (iii) Convolutional module and (iii) Output embedding layer. Details of these components can
be found in Section 5.

ally, we add the start token <S> at the beginning and also,
the end of sentence token <E>.

These words are processed as follows:

(1) they pass
through an input embedding layer; (2) they are combined
with the image embedding; (3) they are processed by the
CNN module; and (4) the output embedding (or classiﬁ-
cation) layer produces output probability distributions (see
{p1, . . . , p6} at top of Figure 4). Each of the four aforemen-
tioned steps is discussed below.
Input Embedding.
For consistency with RNN/LSTM
baseline, we train (from scratch) an embedding layer over
one-hot encoded input words. We use |Y| = 9221 and we
embed the input words to 512-dimensional vectors, same
as the baseline. This embedding is concatenated to the im-
age embedding (discussed next) and provided as input to the
feed-forward CNN module.
Image Embedding. Image features for image I, are ob-
tained from the fc7 layer of the VGG16 network [31]. The
VGG16 is pre-trained on the ImageNet dataset [28]. We ap-
ply dropout, ReLU on the fc7 and use a linear layer to obtain
a 512-dimensional embedding. This is consistent with the
image features used in the baseline LSTM method [16].
CNN Module. The CNN module operates on the combined
input and image embedding vector. It performs three lay-
ers of masked convolutions, keeping the feature dimensions
after convolution to 512. Consistent with [9, 34], we use
gated linear unit (or GLU) activations for our conv layers.
However, we did not observe a signiﬁcant change in perfor-
mance when using the standard ReLU activation. We ex-
periment with weight normalization, residual connections
and dropout in these layers and show that they help improve
performance (Table 1). Our masked convolutions have a re-

ceptive ﬁeld of 5 words in the past. We set N (steps or
max-sentence length) to 15 for both CNN/RNN. The output
of the CNN module after three layers is a 512-dimensional
vector for each word.
Classiﬁcation Layer. We use a linear layer to encode the
512-dimensional vectors obtained from the CNN module
into a 256-dimensional representation per word. Then, we
upsample this vector to a |Y|-dimensional activation via a
fully connected layer, and pass it through a softmax to ob-
tain the output word probabilities pi,w(yi|I).
Training. We use a cross-entropy loss on the probabilities
pi,w(yi|y<i, I) to train the CNN module and the embedding
layers. Consistent with [16], we start to ﬁne-tune VGG16
along with our network after 8 training epochs. We opti-
mize with RMSProp using an initial learning rate of 5e−5
and decay the learning rate by a factor of .1 after every 15
epochs. All methods were trained for 30 epochs and we
evaluate the metrics (given in Section 6.2) on the validation
set to pick the best model for each method.

5.1. Attention

In addition to the aforementioned CNN architecture, we
also experiment with an attention mechanism, since atten-
tion beneﬁted [9, 35]. We form an attended image vector of
dimension 512 and add it to the word embedding at every
layer (shown with red, green and blue arrows in Figure 4).
We compute separate attention parameters and a separate at-
tended vector for every word. To obtain this attended vector
we predict 7×7 attention parameters, over the VGG16 max-
pooled conv-5 features of dimensions 7 × 7 × 512 [31]. We
use attention on all three masked convolution layers in our
CNN module. We continue to use the fc7 image embedding

Method

Baselines:
LSTM [16]
LSTM + Attn (Soft) [39]
LSTM + Attn (Hard) [39]
Our CNN:
CNN
CNN + Weight Norm.
CNN +WN +Dropout
CNN +WN +Dropout
+Residual

CNN +WN +Drop.
+Res. +Attn

MSCOCO Val Set
B1 B2 B3 B4 M R

C

S

MSCOCO Test Set
B1 B2 B3 B4 M R

C

S

.710 .535 .389 .281 .244 .521 .899 .169 .713 .541 .404 .303 .247 .525 .912 .172

-
-

-
-

-
-

-
-

-
-

-
-

-
-

-
-

.707 .492 .344 .243 .239
.718 .504 .357 .250 .230

-
-

-
-

-
-

.693 .518 .374 .268 .238 .511 .855 .167 .695 .521 .380 .276 .241 .514 .881 .171
.702 .528 .384 .279 .242 .517 .881 .169 .699 .525 .382 .276 .241 .516 .878 .170
.707 .532 .386 .278 .242 .517 .883 .171 .704 .532 .389 .283 .243 .520 .904 .173

.706 .532 .389 .284 .244 .519 .899 .173 .704 .532 .389 .284 .244 .520 .906 .175

.710 .537 .391 .281 .241 .519 .890 .171 .711 .538 .394 .287 .244 .522 .912 .175

Table 1: Comparison of different methods on standard evaluation metrics: BLEU-1 (B1), BLEU-2 (B2), BLEU-3 (B3),
BLEU-4 (B4), METEOR (M), ROUGE (R), CIDEr (C) and SPICE (S). Our CNN with attention (attn) achieves comparable
performance (equal CIDEr scores on MSCOCO test set) to [16] and outperforms LSTM+Attention baseline of [39]. We ex-
periment with various conﬁgurations of our CNN. We start with a CNN comprising masked convolutions and fully connected
layers only. Then, we add weight normalization, dropout, residual connections and attention incrementally and show that
performance improves with every addition. Here, for our CNN and [16] we use the model that obtains the best CIDEr scores
on val-set and report its scores for the test set. We evaluate CIDEr scores after every training epoch for val-set. Note, the
val set is not used for any hyper-parameter tuning other than choosing the best model for test set. For [39], we report all the
available metrics for soft/hard attention from their paper (missing numbers are marked by -).

Method

Beam Size=2

Beam Size=3

Beam Size=4

B1 B2 B3 B4 M R

B1 B2 B3 B4 M R
LSTM [16] .715 .545 .407 .304 .248 .526 .940 .178 .715 .544 .409 .310 .249 .528 .946 .178 .714 .543 .410 .311 .250 .529 .951 .179
CNN
.712 .541 .404 .303 .248 .527 .937 .178 .709 .538 .403 .303 .247 .525 .929 .176 .706 .533 .400 .302 .247 .522 .925 .175
CNN+Attn .718 .549 .411 .306 .248 .528 .942 .177 .722 .553 .418 .316 .250 .531 .952 .179 .718 .550 .415 .314 .249 .528 .951 .179

B1 B2 B3 B4 M R

C

C

C

S

S

S

Table 2: Comparison of different methods (metrics same as Table 1) with beam search on the output word probabilities.
Our results show that with beam size= 3 our CNN outperforms LSTM [16] on all metrics. Note, compared to Table 1, the
performance improves with beam search. We use the MS COCO test split for this experiment. For beam search, we pick one
caption with maximum log probability (sum of log probability of words) from the top-k beams and report the above metrics
for it. Beam = 1 is same as the test set results reported in Table 1.

discussed above.

To discuss attention more formally, let dj denote the em-
bedding of word j in the conv module (i.e., its activations
after GLU shown in Figure 4), let W refer to a linear layer
applied to dj, let ci denote a 512-dimensional spatial conv-5
feature at location i (in 7 × 7 feature map) and let aij indi-
cate the attention parameters. With this notation at hand,
the attention parameter aij is computed via

exp(W (dj)T ci)

exp(W (dj)T ci)

,

aij =

(cid:80)
i

(6)

and the attended image vector for word j is obtained from
(cid:80)
i

aijci.

Note that [39] uses the LSTM hidden state to compute
the attention parameters. Instead, we compute attention pa-

rameters using the conv-layer activations. This form of at-
tention mechanism was ﬁrst proposed in [3].

6. Results and Analysis

In this section, we demonstrate the following results:

• Our convolutional (or CNN) approach performs on par
with LSTM (or RNN) based approaches on image cap-
tioning metrics (Table 1). Our performance improves
with beam search (Table 2).

• Adding attention to our CNN gives improvements
on metrics and we outperform the LSTM+Attn base-
line [39] (Table 1). Figure 6 shows that with attention
we identify salient objects for the given image.

• We analyze the CNN and RNN approaches and show
that CNN produces (1) more entropy in the output

c5 (Beam = 1)

c40 (Beam = 1)

B1 B2 B3 B4 M R
.704 .528 .384 .278 .241 .517 .876 .880 .778 .656 .537 .321 .655 .898
LSTM
CNN+Attn .708 .534 .389 .280 .241 .517 .872 .883 .786 .667 .545 .321 .657 .893

B1 B2 B3 B4 M R

C

C

c5 (Beam = 3)

c40 (Beam = 3)

B1 B2 B3 B4 M R
.710 .537 .399 .299 .246 .523 .904 .889 .794 .681 .570 .334 .671 .912
LSTM
CNN+Attn .715 .545 .408 .304 .246 .525 .910 .896 .805 .694 .582 .333 .673 .914

B1 B2 B3 B4 M R

C

C

Table 3: Above, we show that CNN outperforms LSTM on BLEU metrics and gives comparable scores to LSTM on other
metrics for test split on MSCOCO evaluation server. Here, we submitted our results to the MSCOCO evaluation server to
evaluate on the hidden test split. Note, this test split of 40, 775 images is different from the 5000 images test split used in
Tables 1 and 2. We compare our CNN+Attn method to the LSTM baseline on standard evaluation metrics: BLEU-1 (B1),
BLEU-2 (B2), BLEU-3 (B3), BLEU-4 (B4), METEOR (M), ROUGE (R) and CIDEr (C). The c5 scores above are computed
with 5 reference captions per test image and c40 scores are computed with 40 reference captions. We show comparison
results for beam size 1 and beam size 3 for both the methods.

LSTM: a man and a woman
in a suit and tie
CNN: a black and white photo
of a man and woman in a suit
GT: A man sitting next to a
woman while wearing a suit.

LSTM: a man is walking down
a path in the woods
CNN: a truck is parked in
the dirt near a tree
GT: a truck is parked at a
campground with snow on it

LSTM: a cat is laying
down on a bed
CNN: a polar bear is drinking
water from a white bowl
GT: A white polar bear laying
on top of a pool of water

LSTM: a bear is standing
on a rock in a zoo
CNN: two bears are walking
on a rock in the zoo
GT: two bears touching
noses standing on rocks

LSTM: a box of donuts with
a variety of toppings
CNN: a box of doughnuts with
sprinkles and a sign
GT:A bunch of doughnuts
with sprinkles on them

LSTM: a dog is standing in
the grass near a tree
CNN: a dog is standing in
the grass with a frisbee
in its mouth
GT: large dog retrieving
the frisbee for his owner

LSTM: a parking meter
with a sign on it
CNN: a doll is sitting
next to a parking meter
GT: A doll with articulated
joints stares from her perch
between two parking meters.

LSTM: a boat is docked in
the water near a dock
CNN: a boat is docked in
the water near a mountain
GT: A white boat ﬂoating on
a lake under mountains

LSTM: a cat is standing on
top of a refrigerator
CNN: a cat is standing in a
kitchen looking at the camera
GT: A cat in a kitchen
on top of a refrigerator

LSTM: a dog and a
dog in a ﬁeld
CNN: two cows are
standing in a ﬁeld of grass
GT: A dog and a horse
standing near each other

Figure 5: Captions generated by our CNN are compared to the LSTM and ground-truth caption. In the examples above our
CNN can describe things like black and white photo, polar bear/white bowl, number of bears, sign in the donut image which
LSTM fails to do. The last two images (bottom right) show failure cases for CNN. Typically we observe that CNN and LSTM
captions are of similar quality. We use our CNN+Attn method (Section 5.1) and the MSCOCO test split for these results.

probability distribution, (2) gives better word predic-
tion accuracy (Figure 7), and (3) does not suffer as
much from vanishing gradients (Figure 9).

volutional image captioning is available on github.1

6.1. Dataset and Baselines

• In Table 4, we show that a CNN with 1.5× more pa-
rameters can be trained in comparable time. This is
because we avoid the sequential processing of RNNs.

The details of our experimental setup and these results
are discussed below. PyTorch implementation of our con-

We

conducted experiments on the MS COCO
dataset [18]. Our train/val/test splits follow [16, 39].
We use 113287 training images, 5000 images for valida-
tion, and 5000 for testing. Henceforth, we will refer to
our approach as CNN, and our approach with the attention
(Section 5.1) as CNN+Attn. We use the following naming

1https://github.com/aditya12agd5/convcap

CNN: a baby holding a
toothbrush in his hand
GT: A child holds a
toothbrush in their hand.

CNN: a plate of food with
broccoli and rice
GT: A BBQ steak on a plate
next to mashed potatoes
and mixed vegetables.

a

a

baby

holding

a

toothbrush

in

... hand

plate

of

food

with

broccoli

... rice

a

CNN: a man sitting on a
bench overlooking the ocean
GT: A man sitting on top
of a bench near the ocean
Figure 6: We overlay the attention parameters on the image. These results show that we focus on salient objects such
as broccoli, bench, toothbrush in the image when predicting these words. Also, the attention is spread out/uniform when
predicting words such as a, of and on which are unrelated to image content.

... ocean

sitting

bench

man

on

a

convention for our baselines: [16] is denoted by LSTM and
[39] is referred to as LSTM+Attn.

6.2. Comparison on Image Captioning Metrics

We consider multiple conventional evaluation metrics,
BLEU-1, BLEU-2, BLEU-3, BLEU-4 [24], METEOR [8],
ROUGE [17], CIDEr [36] and SPICE [1]. See Table 1 for
the performance on all these metrics for our val/test splits.
Note that we obtain comparable CIDEr scores and better
SPICE scores than LSTM on test set with our CNN+Attn
method. Our BLEU, METEOR, ROUGE scores are less
than the LSTM ones, but the margin is very small. Our
CNN+Attn method outperforms the LSTM+Attn baseline
on the test set for all metrics reported in [39]. For Table 1,
we form the caption by choosing the word with maximum
probability at each step. The metrics are reported for this
one caption formed by choosing maximum probability word
at every step.

Instead of sampling the maximum probability words, we
also perform beam search with different beam sizes. We
perform beam search for both LSTM and our CNN meth-
ods. With beam search, we pick the maximum probability
caption (sum of log word probability in the beam). The re-
sults reported in Table 2 demonstrate that with beam size
of 3 we achieve better BLEU, ROUGE, CIDEr scores than
LSTM and equal METEOR and SPICE scores.

In Table 3, we show the results obtained on the

MSCOCO evaluation server. These results are computed
over a test set of 40, 775 images for which ground-truth
is not publicly available. We demonstrate that our method
does better on all BLEU metrics, especially with beam size
3, we perform better than the LSTM based method.

6.3. Qualitative Comparison

See Figure 5 for a qualitative comparison of captions
generated by CNN and LSTM. In Figure 6, we overlay the
attention parameters on the image for each word prediction.
Note that our attention parameters are 7 × 7 as described
in Section 5.1 and therefore the image is divided in a 7 × 7
grid. These results show that our attention focuses on salient
objects such as man, broccoli, ocean, bench, etc., when pre-
dicting these respective words. Our results also show that
the attention is uniform when predicting words such as a,
of, on, etc., which are unrelated to the image content.

6.4. Analysis of CNN and RNN

In Table 4 we report the number of trainable parameters
and the training time per epoch. CNNs with 1.5 times more
parameters can be trained in comparable time.

Table 1, 2 and 3 show that we obtain comparable per-
formance from both CNN and RNN/LSTM-based methods.
Encouraged by this result, we analyze the characteristics of
these two methods. For fair comparison, we use our CNN
without attention, since the RNN method does not use spa-

# Parameters Train time per epoch

7. Related Work

Method
LSTM [16]
Our CNN
Our CNN+Attn

13M
19M
20M

1529s
1585s
1620s

Table 4: Comparison of train time (in seconds) for LSTM
and CNN. We train a CNN faster per parameter than the
LSTM. This is because CNN is not sequential like the
LSTM. We use PyTorch implementation of [16] and our
CNN-based method for fair comparison. The timings are
obtained on Nvidia Titan X GPU.

tial image features. First, we compare the negative log- like-
lihoods (or cross-entropy loss) on a subset of train and the
entire val set (see Figure 7 (a)). We ﬁnd that the loss is
higher for CNN than RNN, this is because CNNs are being
penalized for producing less-peaky word probability distri-
butions. To evaluate this further, we plot the entropy of the
output probability distribution (Figure 7 (b)) and the clas-
siﬁcation accuracy, i.e., the number of times the maximum
probability word is the ground truth (Figure 7 (c)). These
plots show that RNNs are good at producing low entropy
and therefore peaky word probability distributions at the
output, while CNNs produce less peaky distributions (and
high entropy). Less peaky distributions are not necessarily
bad, particularly for a problem like image captioning, where
multiple word predictions are possible. Despite, less peaky
distributions, Figure 7(c) shows that the maximum probabil-
ity word is correct more often on the train set and it is within
approx. 1% accuracy on the val set. Note, cross-entropy loss
is a proxy for the classiﬁcation accuracy and we show that
CNNs have higher cross entropy loss, but their classiﬁca-
tion accuracy is good. Less peaky posterior distributions
provided by a CNN may be indicative of CNNs being more
capable of predicting diverse captions.

In Figure 8, we plot the unique words predicted at ev-
ery word position or time-step. The plot is for word posi-
tions 1 to 13. This plot shows that for the CNN we have
higher unique words for more word positions than LSTM.
This supports our analysis that CNNs have less peaky (or
one-hot) posteriors and therefore can produce more diver-
sity. For these diversity experiments, we perform a beam
search with beam size 10 and use all the top 10 beams.

Since RNNs/LSTMs are known to suffer from vanishing
gradient problems, in Figure 9, we plot the gradient norm at
the output embedding/classiﬁcation layer and the gradient
norm at the input embedding layer. The values are averaged
over 1 training epoch. These plots show that the gradients
in RNN/LSTM diminishes more than the ones in CNNs.
Hence RNN/LSTM nets are more likely to suffer from van-
ishing gradients, which stalls learning. If learning is stalled,
for larger datasets than the ones we currently use for image
captioning, the performance of RNN and CNN may differ
signiﬁcantly.

Describing the content of an observed image is related
to a large variety of tasks. Object detection [26, 27] and se-
mantic segmentation [22, 29] can be used to obtain a list of
objects. Detection of co-occurrence patterns and relation-
ships between objects can help to form sentences. Generat-
ing sentences by taking advantage of surrogate tasks is then
a multi-step approach which is beneﬁcial for interpretability
but lacks a joint objective that can be trained end-to-end.

Early techniques formulate image captioning as a re-
trieval problem and ﬁnd the best ﬁtting description from a
pool of possible captions [12, 15, 23, 32]. Those techniques
are built upon the idea that the ﬁtness between available tex-
tual descriptions and images can be learned. While this per-
mits end-to-end training, matching image descriptors to a
sufﬁciently large pool of captions is computationally expen-
sive. In addition, constructing a database of captions that is
sufﬁcient for describing a reasonably large fraction of im-
ages seems prohibitive.

To address this issue, recurrent neural nets (RNNs) or
probabilistic models like Markov chains, which decompose
the space of a caption into a product space of individual
words are compelling. The success of RNNs for image cap-
tioning is based on a key component, i.e., the Long-Short-
Term-Memory (LSTM) [11] or recent alternatives like the
gated recurrent unit (GRU) [6]. These components capture
long-term dependencies by adding a memory cell, and they
address the vanishing or exploding gradient issue of classi-
cal RNNs to some degree.

Based on this success, [20] train a vision (or image)
CNN and a language RNN that shares a joint embedding
layer. [38] jointly train a vision (or image) CNN with a
language RNN to generate sentences, [39] extends [38]
with additional attention parameters and learns to iden-
tify salient objects for caption generation. [16] use a bi-
directional RNN along with a structured loss function in a
shared vision-language space. These recurrent neural nets
have found widespread use for captioning because they have
been shown to produce remarkably ﬁtting descriptions.

Despite the fact that the above RNNs based on LSTM or
GRU units deliver remarkable results, e.g., for image cap-
tioning, their training procedure is all but trivial. For in-
stance, while the forward pass during training can be paral-
lelized across samples, it is inherently sequential in time,
limiting the parallelization abilities. To address this is-
sue, [34] proposed a PixelCNN architecture for conditional
image generation that approximates an RNN for the same
task. [9] and [35] demonstrate that convolutional architec-
tures with attention achieve state-of-the-art performance on
machine translation tasks. In spirit similar is our approach
for image captioning, which is convolutional but addresses
a different task.

(a) CNN gives higher cross-entropy loss on
train/val set of MSCOCO compared to LSTM.
But, as we show in (c), our CNN obtains bet-
ter % word accuracy than LSTM. Therefore, it
still assigns max. probability to correct word.
The CNN loss is high because our output prob-
ability distributions have more entropy than
LSTM.

(b) The entropy of the softmax layer (or pos-
terior probability distribution) of our CNN is
higher than the LSTM. For ambiguous prob-
lems such as image captioning, it is desirable to
have a less peaky (multi-modal) posterior (like
ours) capable of producing multiple captions,
rather than a peaky one (like LSTM).

(c) Even though the CNN training loss is
higher than LSTM, its word prediction accu-
racy is better than LSTM on train set. On val
set, the difference in accuracy between LSTM
and CNN is small (only ∼ 1%).

Figure 7: In the ﬁgures above we plot (a) Cross-entropy loss, (b) Entropy of the softmax layer, (c) Word accuracy on train/val
set. Blue line denotes our method and red denotes the LSTM based method [16]. In (a), (b) and (c) solid/dotted lines denote
train/val set of MSCOCO respectively. For these plots, at the end of every epoch we randomly sample 10k images from train
set and use the entire val set.

Figure 8: We perform beam search of beam size 10 with our
best performing LSTM and CNN models. We use the top
10 beams to plot the unique words predicted for every word
position. CNN produces higher unique words at more word
positions than LSTM.

8. Conclusion

We discussed a convolutional approach for

image
captioning and showed that it performs on par with existing
LSTM techniques. We also analyzed the differences
between RNN based learning and our method, and found
gradients of lower magnitude as well as overly conﬁdent
predictions to be existing LSTM network concerns.

Figure 9: Here, we plot the gradient norm at the input
embedding (ﬁrst) and output embedding (last/classiﬁcation)
layer. The gradient to the ﬁrst layer of LSTM decays by a
factor ∼ 100 in contrast to our CNN, where it decays by
a factor of ∼ 10. There is prior evidence in literature that
unlike CNNs, RNN/LSTMs suffer from vanishing gradients
[25, 33]. Here, we use solid line for input embedding layer
and dotted line for the classiﬁcation layer.

9. Acknowledgments
We thank Arun Mallya for providing us with an efﬁcient Py-
Torch implementation of [16], we thank Tanmay Gangwani
for the beam search code used for Figure 8 and we thank
David Forsyth for insightful discussions and his comments.
This material is based upon work supported in part by the
National Science Foundation under Grant No. 1718221.

References

[1] P. Anderson, B. Fernando, M. Johnson, and S. Gould. Spice:
Semantic propositional image caption evaluation. In ECCV,
2016. 7

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L. Zit-
nick, and D. Parikh. VQA: Visual Question Answering. In
International Conference on Computer Vision (ICCV), 2015.
1

[3] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. CoRR,
abs/1409.0473, 2014. 5

[4] S. Bengio, O. Vinyals, N. Jaitly, and N. Shazeer. Sched-
uled sampling for sequence prediction with recurrent neural
networks. In Proceedings of the 28th International Confer-
ence on Neural Information Processing Systems - Volume 1,
NIPS’15, pages 1171–1179, Cambridge, MA, USA, 2015.
MIT Press. 3

[5] X. Chen and C. L. Zitnick. Mind’s eye: A recurrent vi-
In 2015
sual representation for image caption generation.
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2422–2431, June 2015. 1

[6] K. Cho, B. van Merri¨enboer, C¸ . G¨ulc¸ehre, D. Bahdanau,
F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase
representations using rnn encoder–decoder for statistical ma-
In Proceedings of the 2014 Confer-
chine translation.
ence on Empirical Methods in Natural Language Processing
(EMNLP), pages 1724–1734, Doha, Qatar, Oct. 2014. Asso-
ciation for Computational Linguistics. 2, 8

[7] A. Das, S. Kottur, K. Gupta, A. Singh, D. Yadav, J. M. F.
Moura, D. Parikh, and D. Batra. Visual dialog. 2017. 1
[8] M. Denkowski and A. Lavie. Meteor universal: Language
In
speciﬁc translation evaluation for any target language.
Proceedings of the EACL 2014 Workshop on Statistical Ma-
chine Translation, 2014. 7

[9] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning.
CoRR, abs/1705.03122, 2017. 1, 3, 4, 8

[10] A. Goyal, A. Lamb, Y. Zhang, S. Zhang, A. Courville, and
Y. Bengio. Professor forcing: A new algorithm for training
recurrent networks. pages 4601–4609. 2016. 3

[11] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural Comput., 9(8):1735–1780, Nov. 1997. 1, 2, 8
[12] M. Hodosh, P. Young, and J. Hockenmaier. Framing image
description as a ranking task: Data, models and evaluation
metrics. J. Artif. Int. Res., 47(1), May 2013. 8

[13] T. K. Huang, F. Ferraro, N. Mostafazadeh,

I. Misra,
A. Agrawal, J. Devlin, R. B. Girshick, X. He, P. Kohli, D. Ba-
tra, C. L. Zitnick, D. Parikh, L. Vanderwende, M. Galley, and
M. Mitchell. Visual storytelling. CoRR, abs/1604.03968,
2016. 1

[14] U. Jain, Z. Zhang, and A. G. Schwing. Creativity: Gener-
ating diverse questions using variational autoencoders.
In
Computer Vision and Pattern Recognition, 2017. 1

[15] Y. Jia, M. Salzmann, and T. Darrell. Learning cross-modality
similarity for multinomial data. In Proceedings of the 2011
International Conference on Computer Vision, ICCV ’11,

pages 2407–2414, Washington, DC, USA, 2011. IEEE Com-
puter Society. 8

[16] A. Karpathy and L. Fei-Fei. Deep visual-semantic align-
In 2015 IEEE
ments for generating image descriptions.
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 3128–3137, June 2015. 1, 2, 4, 5, 6, 7, 8,
9

[17] C.-Y. Lin. Rouge: a package for automatic evaluation of

summaries. July 2004. 7

[18] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon Objects in Context, pages 740–755. Springer Interna-
tional Publishing, Cham, 2014. 2, 6

[19] A. Mallya and S. Lazebnik. Recurrent models for situation

recognition. In ICCV, 2017. 1

[20] J. Mao, W. Xu, Y. Yang, J. Wang, and A. L. Yuille. Deep
captioning with multimodal recurrent neural networks (m-
rnn). CoRR, abs/1412.6632, 2014. 8

[21] N. Mostafazadeh, I. Misra, J. Devlin, M. Mitchell, X. He,
and L. Vanderwende. Generating natural questions about an
image. In ACL (1). The Association for Computer Linguis-
tics, 2016. 1

[22] M. Mostajabi, P. Yadollahpour, and G. Shakhnarovich. Feed-
forward semantic segmentation with zoom-out features. In
2015 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 3376–3385, June 2015. 8
[23] V. Ordonez, G. Kulkarni, and T. L. Berg. Im2text: Describ-
ing images using 1 million captioned photographs. In Pro-
ceedings of the 24th International Conference on Neural In-
formation Processing Systems, NIPS’11, pages 1143–1151,
USA, 2011. Curran Associates Inc. 8

[24] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu:
A method for automatic evaluation of machine translation.
In Proceedings of the 40th Annual Meeting on Association
for Computational Linguistics, ACL ’02, pages 311–318,
Stroudsburg, PA, USA, 2002. Association for Computational
Linguistics. 7

[25] R. Pascanu, T. Mikolov, and Y. Bengio. On the difﬁculty
of training recurrent neural networks. In Proceedings of the
30th International Conference on International Conference
on Machine Learning - Volume 28, ICML’13, pages III–
1310–III–1318. JMLR.org, 2013. 1, 9

[26] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection.
CoRR, abs/1506.02640, 2015. 8

[27] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Proceedings of the 28th International Conference on Neural
Information Processing Systems - Volume 1, NIPS’15, pages
91–99, Cambridge, MA, USA, 2015. MIT Press. 8

[28] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei. Imagenet large scale visual recog-
nition challenge. International Journal of Computer Vision,
115(3):211–252, Dec 2015. 4

[29] E. Shelhamer, J. Long, and T. Darrell. Fully convolutional
IEEE Trans. Pattern

networks for semantic segmentation.
Anal. Mach. Intell., 39(4):640–651, Apr. 2017. 8

[30] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In Computer Vision
and Pattern Recognition, 2016. 1

[31] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 4

[32] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014. 8

[33] I. Sutskever, J. Martens, and G. Hinton. Generating text with
recurrent neural networks. In L. Getoor and T. Scheffer, ed-
itors, Proceedings of the 28th International Conference on
Machine Learning (ICML-11), ICML ’11, pages 1017–1024,
New York, NY, USA, June 2011. ACM. 9

[34] A. van den Oord, N. Kalchbrenner, O. Vinyals, L. Espeholt,
A. Graves, and K. Kavukcuoglu. Conditional image genera-
tion with pixelcnn decoders. In NIPS, 2016. 1, 3, 4, 8
[35] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all
you need. CoRR, abs/1706.03762, 2017. 1, 4, 8

[36] R. Vedantam, C. L. Zitnick, and D. Parikh.

Consensus-based image description evaluation.
pages 4566–4575. IEEE Computer Society, 2015. 7

Cider:
In CVPR,

[37] S. Venugopalan, H. Xu,

J. Donahue, M. Rohrbach,
R. Mooney, and K. Saenko. Translating videos to natural
language using deep recurrent neural networks. In NAACL
HLT, 2015. 1

[38] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
image caption generation with visual attention. In F. Bach
and D. Blei, editors, Proceedings of the 32nd International
Conference on Machine Learning, volume 37 of Proceed-
ings of Machine Learning Research, pages 2048–2057, Lille,
France, 07–09 Jul 2015. PMLR. 1, 8

[39] K. Xu, J. L. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhut-
dinov, R. S. Zemel, and Y. Bengio. Show, attend and tell:
Neural image caption generation with visual attention.
In
Proceedings of the 32Nd International Conference on In-
ternational Conference on Machine Learning - Volume 37,
ICML’15, pages 2048–2057. JMLR.org, 2015. 1, 2, 5, 6, 7,
8

[40] Y. Yang, C. L. Teo, H. Daum´e, III, and Y. Aloimonos.
Corpus-guided sentence generation of natural images.
In
Proceedings of the Conference on Empirical Methods in Nat-
ural Language Processing, EMNLP ’11, pages 444–454,
Stroudsburg, PA, USA, 2011. Association for Computational
Linguistics. 2

Convolutional Image Captioning

Jyoti Aneja∗, Aditya Deshpande∗, Alexander Schwing
University of Illinois at Urbana-Champaign
{janeja2, ardeshp2, aschwing}@illinois.edu

7
1
0
2
 
v
o
N
 
4
2
 
 
]

V
C
.
s
c
[
 
 
1
v
1
5
1
9
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Image captioning is an important but challenging task,
applicable to virtual assistants, editing tools, image index-
ing, and support of the disabled.
Its challenges are due
to the variability and ambiguity of possible image descrip-
tions. In recent years signiﬁcant progress has been made in
image captioning, using Recurrent Neural Networks pow-
ered by long-short-term-memory (LSTM) units. Despite
mitigating the vanishing gradient problem, and despite their
compelling ability to memorize dependencies, LSTM units
are complex and inherently sequential across time. To ad-
dress this issue, recent work has shown beneﬁts of convo-
lutional networks for machine translation and conditional
image generation [9, 34, 35].
Inspired by their success,
in this paper, we develop a convolutional image caption-
ing technique. We demonstrate its efﬁcacy on the challeng-
ing MSCOCO dataset and demonstrate performance on par
with the baseline, while having a faster training time per
number of parameters. We also perform a detailed analy-
sis, providing compelling reasons in favor of convolutional
language generation approaches.

1. Introduction

Image captioning, i.e., describing the content observed
in an image, has received a signiﬁcant amount of attention
in recent years. It is applicable in various scenarios, e.g.,
recommendation in editing applications, usage in virtual as-
sistants, for image indexing, and support of the disabled. It
is also a basic ingredient for more complex operations such
as storytelling [13] and visual summarization [37].

In recent years, with the availability of larger datasets,
deep neural network (DNN) based methods have been
shown to achieve impressive results on image captioning
tasks [16, 38]. These techniques are largely based on recur-
rent neural nets (RNNs), often powered by a Long-Short-
Term-Memory (LSTM) [11] component which mitigates
the issue of vanishing or exploding gradients [25]. Figure 1

∗ Denotes equal contribution.

Figure 1: Examples of captions generated by a standard
LSTM-based network, our convolutional network (CNN)
and ground-truth (GT) captions by a human annotator.

shows examples of captions generated by an LSTM-based
network.

LSTM nets have been considered as the de-facto stan-
dard for vision-language tasks of image captioning [5, 16,
38, 39], visual question answering [2, 30], question gen-
eration [14, 21], situation recognition [19], and visual dia-
log [7], due to their compelling ability to memorize long-
term dependencies through a memory cell. However, the
complex addressing and overwriting mechanism combined
with inherently sequential processing, and signiﬁcant stor-
age required due to back-propagation through time (BPTT),
poses challenges during training. Also, in contrast to CNNs,
that are non-sequential, LSTMs often require more careful
engineering, when considering a novel task. Previously,
CNNs have not matched up to the LSTM performance on
vision-language tasks.

Inspired by the recent successes of convolutional archi-
tectures on other sequence-to-sequence tasks – conditional
image generation [34], machine translation [9, 35] – we
study convolutional architectures for the task of image cap-
tioning. To the best of our knowledge, ours is the ﬁrst con-
volutional network for image captioning that compares fa-
vorably to LSTM-based methods. On the MSCOCO dataset
we match performance of the LSTM with a .952 CIDEr
score and get a better BLEU-4 score of .316 (see Table 2).
Our key contributions are: a) A convolutional (CNN-
based) image captioning method that shows comparable

1

A variety of probabilistic models have been considered
(Section 7), from hidden Markov models [40] to recurrent
neural networks. First, we brieﬂy review the inference and
learning of RNN-based approaches (Section 3) and then
delve into our convolutional approach (Section 4).

3. RNN Approach

An illustration of a classical RNN architecture for image
captioning is provided in Figure 2. It consists of three ma-
jor components, all of which contain trainable parameters:
the input word embeddings, the sequential LSTM units con-
taining the memory cell, and the output word embeddings.
Inference. RNNs sequentially predict one word at a time,
from y1 up to yN . At every time-step i, a conditional proba-
bility distribution pi,w(yi|I), which depends on parameters
w, is predicted (see top of Figure 2). During inference, we
typically choose the word yi with the highest probability
pi,w(yi|I). The sentence terminates once the end of sen-
tence token is chosen, or after a maximum of N steps.

For modeling pi,w(yi|I), in the spirit of auto-regressive
models, the dependence of word yi on its ancestors y<i is
implicitly captured by a hidden representation hi (see ar-
rows in Figure 2). Formally, the probability is computed
via

pi,w(yi|hi, I) = gw(yi, hi, I),

(1)

where gw can be any differentiable function/deep net. This
function may depend directly on the image I. However,
classical image captioning techniques usually encode the
image into the hidden representation h0 (Figure 2).

Importantly, RNNs just like other auto-regressive models
are described by a recurrence relation which governs com-
putation of the hidden state hi based on its values at the pre-
vious time instant, hi−1, as well as the word yi−1, predicted
at the previous time step:

hi = fw(hi−1, yi−1, I).

(2)

Again, fw can be any differentiable function. For image
captioning, long-short-term-memory (LSTM) [11] nets and
variants thereof based on gated recurrent units (GRU) [6],
or forward-backward LSTM nets are used here.

The recurrent function given in Eq. (2) generally doesn’t
operate directly on one-hot input vectors yi. Instead, input
words are encoded into a vectorial representation via an em-
bedding layer (input word embeddings in Figure 2). Note
that the functions gw and fw are identical across time.
Learning. Following classical supervised learning, it is
common to ﬁnd the parameters w of the word embed-
dings and the LSTM unit by minimizing the negative log-
likelihood of the training data D, i.e., we optimize:

min
w

−

(cid:88)

N
(cid:88)

(I,y∗)∈D

i=1

ln pi,w(y∗

i |hi, I).

(3)

Figure 2: A sequential RNN powered by an LSTM cell.
At each time step output is conditioned on the previously
generated word, the image is fed at the start only.

performance to an LSTM based method on standard met-
rics (Section 6.2, Table 1 and Table 2); b) Improved per-
formance with a CNN model that uses attention mecha-
nism to leverage spatial image features. With attention,
we outperform the current attention baseline and qualita-
tively demonstrate that our method ﬁnds salient objects in
(Figure 6, Table 2); c) We analyze the char-
the image.
acteristics of CNN and LSTM nets and provide useful in-
sights such as – CNNs produce more entropy (useful for di-
verse predictions), better classiﬁcation accuracy, and do not
suffer from vanishing gradients (Section 6 and Figure 7, 8
and 9). We evaluate our architecture on the challenging
MSCOCO [18] dataset, and compare it to an LSTM [16]
and an LSTM+Attention baseline [39].

The paper is organized as follows: Section 2 describes
our notation, Section 3 brieﬂy reviews the RNN/LSTM
based approach, Section 4 describes our convolutional
method and Section 5 gives the details of our CNN architec-
ture, Section 6 contains our results and Section 7 discusses
previous work on image captioning.

2. Problem Setup and Notation

For image captioning, we are given an input image I
and we are required to generate a sequence of words y =
(y1, . . . , yN ). The possible words yi ∈ Y at time-step i are
subsumed in a discrete set Y of options. The number of
possible options |Y| easily reaches several thousands. This
set of options Y often contains special tokens that denote a
start token (<S>), an end of sentence token (<E>), and an
unknown token (<UNK>) which refers to all words not in
Y.

Given a training set D = {(I, y∗)} which contains pairs
(I, y∗) of input image I and corresponding ground-truth
caption y∗ = (y∗
i ∈ Y,
i ∈ {1, . . . , N }, we maximize w.r.t. parameters w, a proba-
bilistic model pw(y1, . . . , yN |I).

N ), consisting of words y∗

1, . . . , y∗

4. Convolutional Approach

Our model is based on the convolutional machine trans-
lation model used in [9]. Figure 3 provides an overview of
our feed-forward convolutional (or CNN-based) approach
for image captioning. As the ﬁgure illustrates, our tech-
nique contains three main components similar to the RNN
technique. The ﬁrst and the last components are word em-
beddings in both cases. However, while the center com-
ponent contains LSTM or GRU units in the RNN case,
masked convolutions are employed in our CNN-based ap-
proach. This component, unlike the RNN, is feed-forward
without any recurrent function. We brieﬂy review inference
and learning of our model. The problem setup and notation
follows Section 2.
Inference. In contrast to the RNN formulation, where the
probabilistic model is unrolled in time via the recurrence
relation given in Eq. (4), we use a simple feed-forward deep
net, fw, for modeling pi,w(yi|I). Prediction of a word yi
relies on past words y<i or their representations:

pi,w(yi|y<i, I) = fw(yi, y<i, I).

(5)

To disallow convolution operations from using informa-
tion of future word tokens, we use masked convolutional
layers that operate only on ‘past’ data. This is similar
to [9, 34].

Inference can now be performed sequentially, one word
at a time. Hence, inference begins with the start token <S>
and employs a feed-forward pass to generate p1,w(y1|∅, I).
Afterwards, y1 ∼ p1,w(y1|∅, I) is sampled. Note that it
is possible to retrieve the maximizing argument or to per-
form beam search. After sampling, y1 is fed back into the
feed-forward network to generate subsequent words y2, etc.
Inference continues until the end token is predicted, or until
we reach a ﬁxed upper bound of N steps.
Learning.
Similar to RNN training, we use ground-
truth y∗
<i for past words, instead of using the most re-
cently generated ones. For prediction of word probabil-
ity pi,w(yi|y∗
<i, I), the considered feed-forward network is
fw(yi, y∗
<i, I) and we optimize for parameters w using a
likelihood similar to Eq. (3).

Since there are no recurrent connections and all ground-
truth words are available at any given time-step i, our CNN
based model can be trained in parallel for all words. In Sec-
tion 5, we provide details about the convolutional architec-
ture used in our experiments.

5. Architecture

The detailed architecture for our convolutional image
In this ﬁgure, we
captioning is illustrated in Figure 4.
show a training iteration with input (ground-truth) words
{y∗
5} = { a, woman, is, playing, tennis }. Addition-

1, . . . , y∗

Figure 3: Our convolutional model for image captioning.
We use a feed forward network with masked convolutions.
Unlike RNNs, our model operates over all words in parallel.

To compute the gradient of the objective given in Eq. (3),
back-propagation through time (BPTT) is the de-facto stan-
dard these days. BPTT is necessary due to the recurrence
relationship encoded in fw (Eq. (2)), which is unrolled as
illustrated in Figure 2. The gradients of the function fw at
time i depend on the gradients obtained in successive time-
steps.

To avoid more complicated gradient ﬂows through the
recurrence relationship, during training, it is common to use

hi = fw(hi−1, y∗

i−1, I),

(4)

rather than the form provided in Eq. (2). I.e., during train-
ing, when computing the latent representation hi, we use the
ground-truth symbol y∗
i−1 rather than the prediction yi−1.
This is termed as teacher forcing. While this simpliﬁes the
gradient ﬂow, it obviously causes the input statistics to dif-
fer between train and test. This issue has been subject to
recent work [4, 10].

Although highly successful, RNN-based techniques suf-
fer from some drawbacks. First, the training process is in-
herently sequential for a particular image-caption pair. This
results from unrolling the recurrent relation in time. Hence,
the output at time-step i has a true dependency on the output
at i − 1. Secondly, as we will show in our results for image
captioning, RNNs tend to produce lower classiﬁcation ac-
curacy (Figure 7), and, despite LSTM units, they still suffer
to some degree from vanishing gradients (Figure 9).

Next, we describe an alternative convolutional approach
to image captioning which attempts to overcome some of
these challenges.

Figure 4: Our convolutional architecture for image captioning. Our architecture has four components: (i) Input embedding
layer, (ii) Image embedding, (iii) Convolutional module and (iii) Output embedding layer. Details of these components can
be found in Section 5.

ally, we add the start token <S> at the beginning and also,
the end of sentence token <E>.

These words are processed as follows:

(1) they pass
through an input embedding layer; (2) they are combined
with the image embedding; (3) they are processed by the
CNN module; and (4) the output embedding (or classiﬁ-
cation) layer produces output probability distributions (see
{p1, . . . , p6} at top of Figure 4). Each of the four aforemen-
tioned steps is discussed below.
Input Embedding.
For consistency with RNN/LSTM
baseline, we train (from scratch) an embedding layer over
one-hot encoded input words. We use |Y| = 9221 and we
embed the input words to 512-dimensional vectors, same
as the baseline. This embedding is concatenated to the im-
age embedding (discussed next) and provided as input to the
feed-forward CNN module.
Image Embedding. Image features for image I, are ob-
tained from the fc7 layer of the VGG16 network [31]. The
VGG16 is pre-trained on the ImageNet dataset [28]. We ap-
ply dropout, ReLU on the fc7 and use a linear layer to obtain
a 512-dimensional embedding. This is consistent with the
image features used in the baseline LSTM method [16].
CNN Module. The CNN module operates on the combined
input and image embedding vector. It performs three lay-
ers of masked convolutions, keeping the feature dimensions
after convolution to 512. Consistent with [9, 34], we use
gated linear unit (or GLU) activations for our conv layers.
However, we did not observe a signiﬁcant change in perfor-
mance when using the standard ReLU activation. We ex-
periment with weight normalization, residual connections
and dropout in these layers and show that they help improve
performance (Table 1). Our masked convolutions have a re-

ceptive ﬁeld of 5 words in the past. We set N (steps or
max-sentence length) to 15 for both CNN/RNN. The output
of the CNN module after three layers is a 512-dimensional
vector for each word.
Classiﬁcation Layer. We use a linear layer to encode the
512-dimensional vectors obtained from the CNN module
into a 256-dimensional representation per word. Then, we
upsample this vector to a |Y|-dimensional activation via a
fully connected layer, and pass it through a softmax to ob-
tain the output word probabilities pi,w(yi|I).
Training. We use a cross-entropy loss on the probabilities
pi,w(yi|y<i, I) to train the CNN module and the embedding
layers. Consistent with [16], we start to ﬁne-tune VGG16
along with our network after 8 training epochs. We opti-
mize with RMSProp using an initial learning rate of 5e−5
and decay the learning rate by a factor of .1 after every 15
epochs. All methods were trained for 30 epochs and we
evaluate the metrics (given in Section 6.2) on the validation
set to pick the best model for each method.

5.1. Attention

In addition to the aforementioned CNN architecture, we
also experiment with an attention mechanism, since atten-
tion beneﬁted [9, 35]. We form an attended image vector of
dimension 512 and add it to the word embedding at every
layer (shown with red, green and blue arrows in Figure 4).
We compute separate attention parameters and a separate at-
tended vector for every word. To obtain this attended vector
we predict 7×7 attention parameters, over the VGG16 max-
pooled conv-5 features of dimensions 7 × 7 × 512 [31]. We
use attention on all three masked convolution layers in our
CNN module. We continue to use the fc7 image embedding

Method

Baselines:
LSTM [16]
LSTM + Attn (Soft) [39]
LSTM + Attn (Hard) [39]
Our CNN:
CNN
CNN + Weight Norm.
CNN +WN +Dropout
CNN +WN +Dropout
+Residual

CNN +WN +Drop.
+Res. +Attn

MSCOCO Val Set
B1 B2 B3 B4 M R

C

S

MSCOCO Test Set
B1 B2 B3 B4 M R

C

S

.710 .535 .389 .281 .244 .521 .899 .169 .713 .541 .404 .303 .247 .525 .912 .172

-
-

-
-

-
-

-
-

-
-

-
-

-
-

-
-

.707 .492 .344 .243 .239
.718 .504 .357 .250 .230

-
-

-
-

-
-

.693 .518 .374 .268 .238 .511 .855 .167 .695 .521 .380 .276 .241 .514 .881 .171
.702 .528 .384 .279 .242 .517 .881 .169 .699 .525 .382 .276 .241 .516 .878 .170
.707 .532 .386 .278 .242 .517 .883 .171 .704 .532 .389 .283 .243 .520 .904 .173

.706 .532 .389 .284 .244 .519 .899 .173 .704 .532 .389 .284 .244 .520 .906 .175

.710 .537 .391 .281 .241 .519 .890 .171 .711 .538 .394 .287 .244 .522 .912 .175

Table 1: Comparison of different methods on standard evaluation metrics: BLEU-1 (B1), BLEU-2 (B2), BLEU-3 (B3),
BLEU-4 (B4), METEOR (M), ROUGE (R), CIDEr (C) and SPICE (S). Our CNN with attention (attn) achieves comparable
performance (equal CIDEr scores on MSCOCO test set) to [16] and outperforms LSTM+Attention baseline of [39]. We ex-
periment with various conﬁgurations of our CNN. We start with a CNN comprising masked convolutions and fully connected
layers only. Then, we add weight normalization, dropout, residual connections and attention incrementally and show that
performance improves with every addition. Here, for our CNN and [16] we use the model that obtains the best CIDEr scores
on val-set and report its scores for the test set. We evaluate CIDEr scores after every training epoch for val-set. Note, the
val set is not used for any hyper-parameter tuning other than choosing the best model for test set. For [39], we report all the
available metrics for soft/hard attention from their paper (missing numbers are marked by -).

Method

Beam Size=2

Beam Size=3

Beam Size=4

B1 B2 B3 B4 M R

B1 B2 B3 B4 M R
LSTM [16] .715 .545 .407 .304 .248 .526 .940 .178 .715 .544 .409 .310 .249 .528 .946 .178 .714 .543 .410 .311 .250 .529 .951 .179
CNN
.712 .541 .404 .303 .248 .527 .937 .178 .709 .538 .403 .303 .247 .525 .929 .176 .706 .533 .400 .302 .247 .522 .925 .175
CNN+Attn .718 .549 .411 .306 .248 .528 .942 .177 .722 .553 .418 .316 .250 .531 .952 .179 .718 .550 .415 .314 .249 .528 .951 .179

B1 B2 B3 B4 M R

C

C

C

S

S

S

Table 2: Comparison of different methods (metrics same as Table 1) with beam search on the output word probabilities.
Our results show that with beam size= 3 our CNN outperforms LSTM [16] on all metrics. Note, compared to Table 1, the
performance improves with beam search. We use the MS COCO test split for this experiment. For beam search, we pick one
caption with maximum log probability (sum of log probability of words) from the top-k beams and report the above metrics
for it. Beam = 1 is same as the test set results reported in Table 1.

discussed above.

To discuss attention more formally, let dj denote the em-
bedding of word j in the conv module (i.e., its activations
after GLU shown in Figure 4), let W refer to a linear layer
applied to dj, let ci denote a 512-dimensional spatial conv-5
feature at location i (in 7 × 7 feature map) and let aij indi-
cate the attention parameters. With this notation at hand,
the attention parameter aij is computed via

exp(W (dj)T ci)

exp(W (dj)T ci)

,

aij =

(cid:80)
i

(6)

and the attended image vector for word j is obtained from
(cid:80)
i

aijci.

Note that [39] uses the LSTM hidden state to compute
the attention parameters. Instead, we compute attention pa-

rameters using the conv-layer activations. This form of at-
tention mechanism was ﬁrst proposed in [3].

6. Results and Analysis

In this section, we demonstrate the following results:

• Our convolutional (or CNN) approach performs on par
with LSTM (or RNN) based approaches on image cap-
tioning metrics (Table 1). Our performance improves
with beam search (Table 2).

• Adding attention to our CNN gives improvements
on metrics and we outperform the LSTM+Attn base-
line [39] (Table 1). Figure 6 shows that with attention
we identify salient objects for the given image.

• We analyze the CNN and RNN approaches and show
that CNN produces (1) more entropy in the output

c5 (Beam = 1)

c40 (Beam = 1)

B1 B2 B3 B4 M R
.704 .528 .384 .278 .241 .517 .876 .880 .778 .656 .537 .321 .655 .898
LSTM
CNN+Attn .708 .534 .389 .280 .241 .517 .872 .883 .786 .667 .545 .321 .657 .893

B1 B2 B3 B4 M R

C

C

c5 (Beam = 3)

c40 (Beam = 3)

B1 B2 B3 B4 M R
.710 .537 .399 .299 .246 .523 .904 .889 .794 .681 .570 .334 .671 .912
LSTM
CNN+Attn .715 .545 .408 .304 .246 .525 .910 .896 .805 .694 .582 .333 .673 .914

B1 B2 B3 B4 M R

C

C

Table 3: Above, we show that CNN outperforms LSTM on BLEU metrics and gives comparable scores to LSTM on other
metrics for test split on MSCOCO evaluation server. Here, we submitted our results to the MSCOCO evaluation server to
evaluate on the hidden test split. Note, this test split of 40, 775 images is different from the 5000 images test split used in
Tables 1 and 2. We compare our CNN+Attn method to the LSTM baseline on standard evaluation metrics: BLEU-1 (B1),
BLEU-2 (B2), BLEU-3 (B3), BLEU-4 (B4), METEOR (M), ROUGE (R) and CIDEr (C). The c5 scores above are computed
with 5 reference captions per test image and c40 scores are computed with 40 reference captions. We show comparison
results for beam size 1 and beam size 3 for both the methods.

LSTM: a man and a woman
in a suit and tie
CNN: a black and white photo
of a man and woman in a suit
GT: A man sitting next to a
woman while wearing a suit.

LSTM: a man is walking down
a path in the woods
CNN: a truck is parked in
the dirt near a tree
GT: a truck is parked at a
campground with snow on it

LSTM: a cat is laying
down on a bed
CNN: a polar bear is drinking
water from a white bowl
GT: A white polar bear laying
on top of a pool of water

LSTM: a bear is standing
on a rock in a zoo
CNN: two bears are walking
on a rock in the zoo
GT: two bears touching
noses standing on rocks

LSTM: a box of donuts with
a variety of toppings
CNN: a box of doughnuts with
sprinkles and a sign
GT:A bunch of doughnuts
with sprinkles on them

LSTM: a dog is standing in
the grass near a tree
CNN: a dog is standing in
the grass with a frisbee
in its mouth
GT: large dog retrieving
the frisbee for his owner

LSTM: a parking meter
with a sign on it
CNN: a doll is sitting
next to a parking meter
GT: A doll with articulated
joints stares from her perch
between two parking meters.

LSTM: a boat is docked in
the water near a dock
CNN: a boat is docked in
the water near a mountain
GT: A white boat ﬂoating on
a lake under mountains

LSTM: a cat is standing on
top of a refrigerator
CNN: a cat is standing in a
kitchen looking at the camera
GT: A cat in a kitchen
on top of a refrigerator

LSTM: a dog and a
dog in a ﬁeld
CNN: two cows are
standing in a ﬁeld of grass
GT: A dog and a horse
standing near each other

Figure 5: Captions generated by our CNN are compared to the LSTM and ground-truth caption. In the examples above our
CNN can describe things like black and white photo, polar bear/white bowl, number of bears, sign in the donut image which
LSTM fails to do. The last two images (bottom right) show failure cases for CNN. Typically we observe that CNN and LSTM
captions are of similar quality. We use our CNN+Attn method (Section 5.1) and the MSCOCO test split for these results.

probability distribution, (2) gives better word predic-
tion accuracy (Figure 7), and (3) does not suffer as
much from vanishing gradients (Figure 9).

volutional image captioning is available on github.1

6.1. Dataset and Baselines

• In Table 4, we show that a CNN with 1.5× more pa-
rameters can be trained in comparable time. This is
because we avoid the sequential processing of RNNs.

The details of our experimental setup and these results
are discussed below. PyTorch implementation of our con-

We

conducted experiments on the MS COCO
dataset [18]. Our train/val/test splits follow [16, 39].
We use 113287 training images, 5000 images for valida-
tion, and 5000 for testing. Henceforth, we will refer to
our approach as CNN, and our approach with the attention
(Section 5.1) as CNN+Attn. We use the following naming

1https://github.com/aditya12agd5/convcap

CNN: a baby holding a
toothbrush in his hand
GT: A child holds a
toothbrush in their hand.

CNN: a plate of food with
broccoli and rice
GT: A BBQ steak on a plate
next to mashed potatoes
and mixed vegetables.

a

a

baby

holding

a

toothbrush

in

... hand

plate

of

food

with

broccoli

... rice

a

CNN: a man sitting on a
bench overlooking the ocean
GT: A man sitting on top
of a bench near the ocean
Figure 6: We overlay the attention parameters on the image. These results show that we focus on salient objects such
as broccoli, bench, toothbrush in the image when predicting these words. Also, the attention is spread out/uniform when
predicting words such as a, of and on which are unrelated to image content.

... ocean

sitting

bench

man

on

a

convention for our baselines: [16] is denoted by LSTM and
[39] is referred to as LSTM+Attn.

6.2. Comparison on Image Captioning Metrics

We consider multiple conventional evaluation metrics,
BLEU-1, BLEU-2, BLEU-3, BLEU-4 [24], METEOR [8],
ROUGE [17], CIDEr [36] and SPICE [1]. See Table 1 for
the performance on all these metrics for our val/test splits.
Note that we obtain comparable CIDEr scores and better
SPICE scores than LSTM on test set with our CNN+Attn
method. Our BLEU, METEOR, ROUGE scores are less
than the LSTM ones, but the margin is very small. Our
CNN+Attn method outperforms the LSTM+Attn baseline
on the test set for all metrics reported in [39]. For Table 1,
we form the caption by choosing the word with maximum
probability at each step. The metrics are reported for this
one caption formed by choosing maximum probability word
at every step.

Instead of sampling the maximum probability words, we
also perform beam search with different beam sizes. We
perform beam search for both LSTM and our CNN meth-
ods. With beam search, we pick the maximum probability
caption (sum of log word probability in the beam). The re-
sults reported in Table 2 demonstrate that with beam size
of 3 we achieve better BLEU, ROUGE, CIDEr scores than
LSTM and equal METEOR and SPICE scores.

In Table 3, we show the results obtained on the

MSCOCO evaluation server. These results are computed
over a test set of 40, 775 images for which ground-truth
is not publicly available. We demonstrate that our method
does better on all BLEU metrics, especially with beam size
3, we perform better than the LSTM based method.

6.3. Qualitative Comparison

See Figure 5 for a qualitative comparison of captions
generated by CNN and LSTM. In Figure 6, we overlay the
attention parameters on the image for each word prediction.
Note that our attention parameters are 7 × 7 as described
in Section 5.1 and therefore the image is divided in a 7 × 7
grid. These results show that our attention focuses on salient
objects such as man, broccoli, ocean, bench, etc., when pre-
dicting these respective words. Our results also show that
the attention is uniform when predicting words such as a,
of, on, etc., which are unrelated to the image content.

6.4. Analysis of CNN and RNN

In Table 4 we report the number of trainable parameters
and the training time per epoch. CNNs with 1.5 times more
parameters can be trained in comparable time.

Table 1, 2 and 3 show that we obtain comparable per-
formance from both CNN and RNN/LSTM-based methods.
Encouraged by this result, we analyze the characteristics of
these two methods. For fair comparison, we use our CNN
without attention, since the RNN method does not use spa-

# Parameters Train time per epoch

7. Related Work

Method
LSTM [16]
Our CNN
Our CNN+Attn

13M
19M
20M

1529s
1585s
1620s

Table 4: Comparison of train time (in seconds) for LSTM
and CNN. We train a CNN faster per parameter than the
LSTM. This is because CNN is not sequential like the
LSTM. We use PyTorch implementation of [16] and our
CNN-based method for fair comparison. The timings are
obtained on Nvidia Titan X GPU.

tial image features. First, we compare the negative log- like-
lihoods (or cross-entropy loss) on a subset of train and the
entire val set (see Figure 7 (a)). We ﬁnd that the loss is
higher for CNN than RNN, this is because CNNs are being
penalized for producing less-peaky word probability distri-
butions. To evaluate this further, we plot the entropy of the
output probability distribution (Figure 7 (b)) and the clas-
siﬁcation accuracy, i.e., the number of times the maximum
probability word is the ground truth (Figure 7 (c)). These
plots show that RNNs are good at producing low entropy
and therefore peaky word probability distributions at the
output, while CNNs produce less peaky distributions (and
high entropy). Less peaky distributions are not necessarily
bad, particularly for a problem like image captioning, where
multiple word predictions are possible. Despite, less peaky
distributions, Figure 7(c) shows that the maximum probabil-
ity word is correct more often on the train set and it is within
approx. 1% accuracy on the val set. Note, cross-entropy loss
is a proxy for the classiﬁcation accuracy and we show that
CNNs have higher cross entropy loss, but their classiﬁca-
tion accuracy is good. Less peaky posterior distributions
provided by a CNN may be indicative of CNNs being more
capable of predicting diverse captions.

In Figure 8, we plot the unique words predicted at ev-
ery word position or time-step. The plot is for word posi-
tions 1 to 13. This plot shows that for the CNN we have
higher unique words for more word positions than LSTM.
This supports our analysis that CNNs have less peaky (or
one-hot) posteriors and therefore can produce more diver-
sity. For these diversity experiments, we perform a beam
search with beam size 10 and use all the top 10 beams.

Since RNNs/LSTMs are known to suffer from vanishing
gradient problems, in Figure 9, we plot the gradient norm at
the output embedding/classiﬁcation layer and the gradient
norm at the input embedding layer. The values are averaged
over 1 training epoch. These plots show that the gradients
in RNN/LSTM diminishes more than the ones in CNNs.
Hence RNN/LSTM nets are more likely to suffer from van-
ishing gradients, which stalls learning. If learning is stalled,
for larger datasets than the ones we currently use for image
captioning, the performance of RNN and CNN may differ
signiﬁcantly.

Describing the content of an observed image is related
to a large variety of tasks. Object detection [26, 27] and se-
mantic segmentation [22, 29] can be used to obtain a list of
objects. Detection of co-occurrence patterns and relation-
ships between objects can help to form sentences. Generat-
ing sentences by taking advantage of surrogate tasks is then
a multi-step approach which is beneﬁcial for interpretability
but lacks a joint objective that can be trained end-to-end.

Early techniques formulate image captioning as a re-
trieval problem and ﬁnd the best ﬁtting description from a
pool of possible captions [12, 15, 23, 32]. Those techniques
are built upon the idea that the ﬁtness between available tex-
tual descriptions and images can be learned. While this per-
mits end-to-end training, matching image descriptors to a
sufﬁciently large pool of captions is computationally expen-
sive. In addition, constructing a database of captions that is
sufﬁcient for describing a reasonably large fraction of im-
ages seems prohibitive.

To address this issue, recurrent neural nets (RNNs) or
probabilistic models like Markov chains, which decompose
the space of a caption into a product space of individual
words are compelling. The success of RNNs for image cap-
tioning is based on a key component, i.e., the Long-Short-
Term-Memory (LSTM) [11] or recent alternatives like the
gated recurrent unit (GRU) [6]. These components capture
long-term dependencies by adding a memory cell, and they
address the vanishing or exploding gradient issue of classi-
cal RNNs to some degree.

Based on this success, [20] train a vision (or image)
CNN and a language RNN that shares a joint embedding
layer. [38] jointly train a vision (or image) CNN with a
language RNN to generate sentences, [39] extends [38]
with additional attention parameters and learns to iden-
tify salient objects for caption generation. [16] use a bi-
directional RNN along with a structured loss function in a
shared vision-language space. These recurrent neural nets
have found widespread use for captioning because they have
been shown to produce remarkably ﬁtting descriptions.

Despite the fact that the above RNNs based on LSTM or
GRU units deliver remarkable results, e.g., for image cap-
tioning, their training procedure is all but trivial. For in-
stance, while the forward pass during training can be paral-
lelized across samples, it is inherently sequential in time,
limiting the parallelization abilities. To address this is-
sue, [34] proposed a PixelCNN architecture for conditional
image generation that approximates an RNN for the same
task. [9] and [35] demonstrate that convolutional architec-
tures with attention achieve state-of-the-art performance on
machine translation tasks. In spirit similar is our approach
for image captioning, which is convolutional but addresses
a different task.

(a) CNN gives higher cross-entropy loss on
train/val set of MSCOCO compared to LSTM.
But, as we show in (c), our CNN obtains bet-
ter % word accuracy than LSTM. Therefore, it
still assigns max. probability to correct word.
The CNN loss is high because our output prob-
ability distributions have more entropy than
LSTM.

(b) The entropy of the softmax layer (or pos-
terior probability distribution) of our CNN is
higher than the LSTM. For ambiguous prob-
lems such as image captioning, it is desirable to
have a less peaky (multi-modal) posterior (like
ours) capable of producing multiple captions,
rather than a peaky one (like LSTM).

(c) Even though the CNN training loss is
higher than LSTM, its word prediction accu-
racy is better than LSTM on train set. On val
set, the difference in accuracy between LSTM
and CNN is small (only ∼ 1%).

Figure 7: In the ﬁgures above we plot (a) Cross-entropy loss, (b) Entropy of the softmax layer, (c) Word accuracy on train/val
set. Blue line denotes our method and red denotes the LSTM based method [16]. In (a), (b) and (c) solid/dotted lines denote
train/val set of MSCOCO respectively. For these plots, at the end of every epoch we randomly sample 10k images from train
set and use the entire val set.

Figure 8: We perform beam search of beam size 10 with our
best performing LSTM and CNN models. We use the top
10 beams to plot the unique words predicted for every word
position. CNN produces higher unique words at more word
positions than LSTM.

8. Conclusion

We discussed a convolutional approach for

image
captioning and showed that it performs on par with existing
LSTM techniques. We also analyzed the differences
between RNN based learning and our method, and found
gradients of lower magnitude as well as overly conﬁdent
predictions to be existing LSTM network concerns.

Figure 9: Here, we plot the gradient norm at the input
embedding (ﬁrst) and output embedding (last/classiﬁcation)
layer. The gradient to the ﬁrst layer of LSTM decays by a
factor ∼ 100 in contrast to our CNN, where it decays by
a factor of ∼ 10. There is prior evidence in literature that
unlike CNNs, RNN/LSTMs suffer from vanishing gradients
[25, 33]. Here, we use solid line for input embedding layer
and dotted line for the classiﬁcation layer.

9. Acknowledgments
We thank Arun Mallya for providing us with an efﬁcient Py-
Torch implementation of [16], we thank Tanmay Gangwani
for the beam search code used for Figure 8 and we thank
David Forsyth for insightful discussions and his comments.
This material is based upon work supported in part by the
National Science Foundation under Grant No. 1718221.

References

[1] P. Anderson, B. Fernando, M. Johnson, and S. Gould. Spice:
Semantic propositional image caption evaluation. In ECCV,
2016. 7

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L. Zit-
nick, and D. Parikh. VQA: Visual Question Answering. In
International Conference on Computer Vision (ICCV), 2015.
1

[3] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. CoRR,
abs/1409.0473, 2014. 5

[4] S. Bengio, O. Vinyals, N. Jaitly, and N. Shazeer. Sched-
uled sampling for sequence prediction with recurrent neural
networks. In Proceedings of the 28th International Confer-
ence on Neural Information Processing Systems - Volume 1,
NIPS’15, pages 1171–1179, Cambridge, MA, USA, 2015.
MIT Press. 3

[5] X. Chen and C. L. Zitnick. Mind’s eye: A recurrent vi-
In 2015
sual representation for image caption generation.
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2422–2431, June 2015. 1

[6] K. Cho, B. van Merri¨enboer, C¸ . G¨ulc¸ehre, D. Bahdanau,
F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase
representations using rnn encoder–decoder for statistical ma-
In Proceedings of the 2014 Confer-
chine translation.
ence on Empirical Methods in Natural Language Processing
(EMNLP), pages 1724–1734, Doha, Qatar, Oct. 2014. Asso-
ciation for Computational Linguistics. 2, 8

[7] A. Das, S. Kottur, K. Gupta, A. Singh, D. Yadav, J. M. F.
Moura, D. Parikh, and D. Batra. Visual dialog. 2017. 1
[8] M. Denkowski and A. Lavie. Meteor universal: Language
In
speciﬁc translation evaluation for any target language.
Proceedings of the EACL 2014 Workshop on Statistical Ma-
chine Translation, 2014. 7

[9] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning.
CoRR, abs/1705.03122, 2017. 1, 3, 4, 8

[10] A. Goyal, A. Lamb, Y. Zhang, S. Zhang, A. Courville, and
Y. Bengio. Professor forcing: A new algorithm for training
recurrent networks. pages 4601–4609. 2016. 3

[11] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural Comput., 9(8):1735–1780, Nov. 1997. 1, 2, 8
[12] M. Hodosh, P. Young, and J. Hockenmaier. Framing image
description as a ranking task: Data, models and evaluation
metrics. J. Artif. Int. Res., 47(1), May 2013. 8

[13] T. K. Huang, F. Ferraro, N. Mostafazadeh,

I. Misra,
A. Agrawal, J. Devlin, R. B. Girshick, X. He, P. Kohli, D. Ba-
tra, C. L. Zitnick, D. Parikh, L. Vanderwende, M. Galley, and
M. Mitchell. Visual storytelling. CoRR, abs/1604.03968,
2016. 1

[14] U. Jain, Z. Zhang, and A. G. Schwing. Creativity: Gener-
ating diverse questions using variational autoencoders.
In
Computer Vision and Pattern Recognition, 2017. 1

[15] Y. Jia, M. Salzmann, and T. Darrell. Learning cross-modality
similarity for multinomial data. In Proceedings of the 2011
International Conference on Computer Vision, ICCV ’11,

pages 2407–2414, Washington, DC, USA, 2011. IEEE Com-
puter Society. 8

[16] A. Karpathy and L. Fei-Fei. Deep visual-semantic align-
In 2015 IEEE
ments for generating image descriptions.
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 3128–3137, June 2015. 1, 2, 4, 5, 6, 7, 8,
9

[17] C.-Y. Lin. Rouge: a package for automatic evaluation of

summaries. July 2004. 7

[18] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon Objects in Context, pages 740–755. Springer Interna-
tional Publishing, Cham, 2014. 2, 6

[19] A. Mallya and S. Lazebnik. Recurrent models for situation

recognition. In ICCV, 2017. 1

[20] J. Mao, W. Xu, Y. Yang, J. Wang, and A. L. Yuille. Deep
captioning with multimodal recurrent neural networks (m-
rnn). CoRR, abs/1412.6632, 2014. 8

[21] N. Mostafazadeh, I. Misra, J. Devlin, M. Mitchell, X. He,
and L. Vanderwende. Generating natural questions about an
image. In ACL (1). The Association for Computer Linguis-
tics, 2016. 1

[22] M. Mostajabi, P. Yadollahpour, and G. Shakhnarovich. Feed-
forward semantic segmentation with zoom-out features. In
2015 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 3376–3385, June 2015. 8
[23] V. Ordonez, G. Kulkarni, and T. L. Berg. Im2text: Describ-
ing images using 1 million captioned photographs. In Pro-
ceedings of the 24th International Conference on Neural In-
formation Processing Systems, NIPS’11, pages 1143–1151,
USA, 2011. Curran Associates Inc. 8

[24] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu:
A method for automatic evaluation of machine translation.
In Proceedings of the 40th Annual Meeting on Association
for Computational Linguistics, ACL ’02, pages 311–318,
Stroudsburg, PA, USA, 2002. Association for Computational
Linguistics. 7

[25] R. Pascanu, T. Mikolov, and Y. Bengio. On the difﬁculty
of training recurrent neural networks. In Proceedings of the
30th International Conference on International Conference
on Machine Learning - Volume 28, ICML’13, pages III–
1310–III–1318. JMLR.org, 2013. 1, 9

[26] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection.
CoRR, abs/1506.02640, 2015. 8

[27] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Proceedings of the 28th International Conference on Neural
Information Processing Systems - Volume 1, NIPS’15, pages
91–99, Cambridge, MA, USA, 2015. MIT Press. 8

[28] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei. Imagenet large scale visual recog-
nition challenge. International Journal of Computer Vision,
115(3):211–252, Dec 2015. 4

[29] E. Shelhamer, J. Long, and T. Darrell. Fully convolutional
IEEE Trans. Pattern

networks for semantic segmentation.
Anal. Mach. Intell., 39(4):640–651, Apr. 2017. 8

[30] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In Computer Vision
and Pattern Recognition, 2016. 1

[31] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 4

[32] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014. 8

[33] I. Sutskever, J. Martens, and G. Hinton. Generating text with
recurrent neural networks. In L. Getoor and T. Scheffer, ed-
itors, Proceedings of the 28th International Conference on
Machine Learning (ICML-11), ICML ’11, pages 1017–1024,
New York, NY, USA, June 2011. ACM. 9

[34] A. van den Oord, N. Kalchbrenner, O. Vinyals, L. Espeholt,
A. Graves, and K. Kavukcuoglu. Conditional image genera-
tion with pixelcnn decoders. In NIPS, 2016. 1, 3, 4, 8
[35] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all
you need. CoRR, abs/1706.03762, 2017. 1, 4, 8

[36] R. Vedantam, C. L. Zitnick, and D. Parikh.

Consensus-based image description evaluation.
pages 4566–4575. IEEE Computer Society, 2015. 7

Cider:
In CVPR,

[37] S. Venugopalan, H. Xu,

J. Donahue, M. Rohrbach,
R. Mooney, and K. Saenko. Translating videos to natural
language using deep recurrent neural networks. In NAACL
HLT, 2015. 1

[38] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
image caption generation with visual attention. In F. Bach
and D. Blei, editors, Proceedings of the 32nd International
Conference on Machine Learning, volume 37 of Proceed-
ings of Machine Learning Research, pages 2048–2057, Lille,
France, 07–09 Jul 2015. PMLR. 1, 8

[39] K. Xu, J. L. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhut-
dinov, R. S. Zemel, and Y. Bengio. Show, attend and tell:
Neural image caption generation with visual attention.
In
Proceedings of the 32Nd International Conference on In-
ternational Conference on Machine Learning - Volume 37,
ICML’15, pages 2048–2057. JMLR.org, 2015. 1, 2, 5, 6, 7,
8

[40] Y. Yang, C. L. Teo, H. Daum´e, III, and Y. Aloimonos.
Corpus-guided sentence generation of natural images.
In
Proceedings of the Conference on Empirical Methods in Nat-
ural Language Processing, EMNLP ’11, pages 444–454,
Stroudsburg, PA, USA, 2011. Association for Computational
Linguistics. 2

Convolutional Image Captioning

Jyoti Aneja∗, Aditya Deshpande∗, Alexander Schwing
University of Illinois at Urbana-Champaign
{janeja2, ardeshp2, aschwing}@illinois.edu

7
1
0
2
 
v
o
N
 
4
2
 
 
]

V
C
.
s
c
[
 
 
1
v
1
5
1
9
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Image captioning is an important but challenging task,
applicable to virtual assistants, editing tools, image index-
ing, and support of the disabled.
Its challenges are due
to the variability and ambiguity of possible image descrip-
tions. In recent years signiﬁcant progress has been made in
image captioning, using Recurrent Neural Networks pow-
ered by long-short-term-memory (LSTM) units. Despite
mitigating the vanishing gradient problem, and despite their
compelling ability to memorize dependencies, LSTM units
are complex and inherently sequential across time. To ad-
dress this issue, recent work has shown beneﬁts of convo-
lutional networks for machine translation and conditional
image generation [9, 34, 35].
Inspired by their success,
in this paper, we develop a convolutional image caption-
ing technique. We demonstrate its efﬁcacy on the challeng-
ing MSCOCO dataset and demonstrate performance on par
with the baseline, while having a faster training time per
number of parameters. We also perform a detailed analy-
sis, providing compelling reasons in favor of convolutional
language generation approaches.

1. Introduction

Image captioning, i.e., describing the content observed
in an image, has received a signiﬁcant amount of attention
in recent years. It is applicable in various scenarios, e.g.,
recommendation in editing applications, usage in virtual as-
sistants, for image indexing, and support of the disabled. It
is also a basic ingredient for more complex operations such
as storytelling [13] and visual summarization [37].

In recent years, with the availability of larger datasets,
deep neural network (DNN) based methods have been
shown to achieve impressive results on image captioning
tasks [16, 38]. These techniques are largely based on recur-
rent neural nets (RNNs), often powered by a Long-Short-
Term-Memory (LSTM) [11] component which mitigates
the issue of vanishing or exploding gradients [25]. Figure 1

∗ Denotes equal contribution.

Figure 1: Examples of captions generated by a standard
LSTM-based network, our convolutional network (CNN)
and ground-truth (GT) captions by a human annotator.

shows examples of captions generated by an LSTM-based
network.

LSTM nets have been considered as the de-facto stan-
dard for vision-language tasks of image captioning [5, 16,
38, 39], visual question answering [2, 30], question gen-
eration [14, 21], situation recognition [19], and visual dia-
log [7], due to their compelling ability to memorize long-
term dependencies through a memory cell. However, the
complex addressing and overwriting mechanism combined
with inherently sequential processing, and signiﬁcant stor-
age required due to back-propagation through time (BPTT),
poses challenges during training. Also, in contrast to CNNs,
that are non-sequential, LSTMs often require more careful
engineering, when considering a novel task. Previously,
CNNs have not matched up to the LSTM performance on
vision-language tasks.

Inspired by the recent successes of convolutional archi-
tectures on other sequence-to-sequence tasks – conditional
image generation [34], machine translation [9, 35] – we
study convolutional architectures for the task of image cap-
tioning. To the best of our knowledge, ours is the ﬁrst con-
volutional network for image captioning that compares fa-
vorably to LSTM-based methods. On the MSCOCO dataset
we match performance of the LSTM with a .952 CIDEr
score and get a better BLEU-4 score of .316 (see Table 2).
Our key contributions are: a) A convolutional (CNN-
based) image captioning method that shows comparable

1

A variety of probabilistic models have been considered
(Section 7), from hidden Markov models [40] to recurrent
neural networks. First, we brieﬂy review the inference and
learning of RNN-based approaches (Section 3) and then
delve into our convolutional approach (Section 4).

3. RNN Approach

An illustration of a classical RNN architecture for image
captioning is provided in Figure 2. It consists of three ma-
jor components, all of which contain trainable parameters:
the input word embeddings, the sequential LSTM units con-
taining the memory cell, and the output word embeddings.
Inference. RNNs sequentially predict one word at a time,
from y1 up to yN . At every time-step i, a conditional proba-
bility distribution pi,w(yi|I), which depends on parameters
w, is predicted (see top of Figure 2). During inference, we
typically choose the word yi with the highest probability
pi,w(yi|I). The sentence terminates once the end of sen-
tence token is chosen, or after a maximum of N steps.

For modeling pi,w(yi|I), in the spirit of auto-regressive
models, the dependence of word yi on its ancestors y<i is
implicitly captured by a hidden representation hi (see ar-
rows in Figure 2). Formally, the probability is computed
via

pi,w(yi|hi, I) = gw(yi, hi, I),

(1)

where gw can be any differentiable function/deep net. This
function may depend directly on the image I. However,
classical image captioning techniques usually encode the
image into the hidden representation h0 (Figure 2).

Importantly, RNNs just like other auto-regressive models
are described by a recurrence relation which governs com-
putation of the hidden state hi based on its values at the pre-
vious time instant, hi−1, as well as the word yi−1, predicted
at the previous time step:

hi = fw(hi−1, yi−1, I).

(2)

Again, fw can be any differentiable function. For image
captioning, long-short-term-memory (LSTM) [11] nets and
variants thereof based on gated recurrent units (GRU) [6],
or forward-backward LSTM nets are used here.

The recurrent function given in Eq. (2) generally doesn’t
operate directly on one-hot input vectors yi. Instead, input
words are encoded into a vectorial representation via an em-
bedding layer (input word embeddings in Figure 2). Note
that the functions gw and fw are identical across time.
Learning. Following classical supervised learning, it is
common to ﬁnd the parameters w of the word embed-
dings and the LSTM unit by minimizing the negative log-
likelihood of the training data D, i.e., we optimize:

min
w

−

(cid:88)

N
(cid:88)

(I,y∗)∈D

i=1

ln pi,w(y∗

i |hi, I).

(3)

Figure 2: A sequential RNN powered by an LSTM cell.
At each time step output is conditioned on the previously
generated word, the image is fed at the start only.

performance to an LSTM based method on standard met-
rics (Section 6.2, Table 1 and Table 2); b) Improved per-
formance with a CNN model that uses attention mecha-
nism to leverage spatial image features. With attention,
we outperform the current attention baseline and qualita-
tively demonstrate that our method ﬁnds salient objects in
(Figure 6, Table 2); c) We analyze the char-
the image.
acteristics of CNN and LSTM nets and provide useful in-
sights such as – CNNs produce more entropy (useful for di-
verse predictions), better classiﬁcation accuracy, and do not
suffer from vanishing gradients (Section 6 and Figure 7, 8
and 9). We evaluate our architecture on the challenging
MSCOCO [18] dataset, and compare it to an LSTM [16]
and an LSTM+Attention baseline [39].

The paper is organized as follows: Section 2 describes
our notation, Section 3 brieﬂy reviews the RNN/LSTM
based approach, Section 4 describes our convolutional
method and Section 5 gives the details of our CNN architec-
ture, Section 6 contains our results and Section 7 discusses
previous work on image captioning.

2. Problem Setup and Notation

For image captioning, we are given an input image I
and we are required to generate a sequence of words y =
(y1, . . . , yN ). The possible words yi ∈ Y at time-step i are
subsumed in a discrete set Y of options. The number of
possible options |Y| easily reaches several thousands. This
set of options Y often contains special tokens that denote a
start token (<S>), an end of sentence token (<E>), and an
unknown token (<UNK>) which refers to all words not in
Y.

Given a training set D = {(I, y∗)} which contains pairs
(I, y∗) of input image I and corresponding ground-truth
caption y∗ = (y∗
i ∈ Y,
i ∈ {1, . . . , N }, we maximize w.r.t. parameters w, a proba-
bilistic model pw(y1, . . . , yN |I).

N ), consisting of words y∗

1, . . . , y∗

4. Convolutional Approach

Our model is based on the convolutional machine trans-
lation model used in [9]. Figure 3 provides an overview of
our feed-forward convolutional (or CNN-based) approach
for image captioning. As the ﬁgure illustrates, our tech-
nique contains three main components similar to the RNN
technique. The ﬁrst and the last components are word em-
beddings in both cases. However, while the center com-
ponent contains LSTM or GRU units in the RNN case,
masked convolutions are employed in our CNN-based ap-
proach. This component, unlike the RNN, is feed-forward
without any recurrent function. We brieﬂy review inference
and learning of our model. The problem setup and notation
follows Section 2.
Inference. In contrast to the RNN formulation, where the
probabilistic model is unrolled in time via the recurrence
relation given in Eq. (4), we use a simple feed-forward deep
net, fw, for modeling pi,w(yi|I). Prediction of a word yi
relies on past words y<i or their representations:

pi,w(yi|y<i, I) = fw(yi, y<i, I).

(5)

To disallow convolution operations from using informa-
tion of future word tokens, we use masked convolutional
layers that operate only on ‘past’ data. This is similar
to [9, 34].

Inference can now be performed sequentially, one word
at a time. Hence, inference begins with the start token <S>
and employs a feed-forward pass to generate p1,w(y1|∅, I).
Afterwards, y1 ∼ p1,w(y1|∅, I) is sampled. Note that it
is possible to retrieve the maximizing argument or to per-
form beam search. After sampling, y1 is fed back into the
feed-forward network to generate subsequent words y2, etc.
Inference continues until the end token is predicted, or until
we reach a ﬁxed upper bound of N steps.
Learning.
Similar to RNN training, we use ground-
truth y∗
<i for past words, instead of using the most re-
cently generated ones. For prediction of word probabil-
ity pi,w(yi|y∗
<i, I), the considered feed-forward network is
fw(yi, y∗
<i, I) and we optimize for parameters w using a
likelihood similar to Eq. (3).

Since there are no recurrent connections and all ground-
truth words are available at any given time-step i, our CNN
based model can be trained in parallel for all words. In Sec-
tion 5, we provide details about the convolutional architec-
ture used in our experiments.

5. Architecture

The detailed architecture for our convolutional image
In this ﬁgure, we
captioning is illustrated in Figure 4.
show a training iteration with input (ground-truth) words
{y∗
5} = { a, woman, is, playing, tennis }. Addition-

1, . . . , y∗

Figure 3: Our convolutional model for image captioning.
We use a feed forward network with masked convolutions.
Unlike RNNs, our model operates over all words in parallel.

To compute the gradient of the objective given in Eq. (3),
back-propagation through time (BPTT) is the de-facto stan-
dard these days. BPTT is necessary due to the recurrence
relationship encoded in fw (Eq. (2)), which is unrolled as
illustrated in Figure 2. The gradients of the function fw at
time i depend on the gradients obtained in successive time-
steps.

To avoid more complicated gradient ﬂows through the
recurrence relationship, during training, it is common to use

hi = fw(hi−1, y∗

i−1, I),

(4)

rather than the form provided in Eq. (2). I.e., during train-
ing, when computing the latent representation hi, we use the
ground-truth symbol y∗
i−1 rather than the prediction yi−1.
This is termed as teacher forcing. While this simpliﬁes the
gradient ﬂow, it obviously causes the input statistics to dif-
fer between train and test. This issue has been subject to
recent work [4, 10].

Although highly successful, RNN-based techniques suf-
fer from some drawbacks. First, the training process is in-
herently sequential for a particular image-caption pair. This
results from unrolling the recurrent relation in time. Hence,
the output at time-step i has a true dependency on the output
at i − 1. Secondly, as we will show in our results for image
captioning, RNNs tend to produce lower classiﬁcation ac-
curacy (Figure 7), and, despite LSTM units, they still suffer
to some degree from vanishing gradients (Figure 9).

Next, we describe an alternative convolutional approach
to image captioning which attempts to overcome some of
these challenges.

Figure 4: Our convolutional architecture for image captioning. Our architecture has four components: (i) Input embedding
layer, (ii) Image embedding, (iii) Convolutional module and (iii) Output embedding layer. Details of these components can
be found in Section 5.

ally, we add the start token <S> at the beginning and also,
the end of sentence token <E>.

These words are processed as follows:

(1) they pass
through an input embedding layer; (2) they are combined
with the image embedding; (3) they are processed by the
CNN module; and (4) the output embedding (or classiﬁ-
cation) layer produces output probability distributions (see
{p1, . . . , p6} at top of Figure 4). Each of the four aforemen-
tioned steps is discussed below.
Input Embedding.
For consistency with RNN/LSTM
baseline, we train (from scratch) an embedding layer over
one-hot encoded input words. We use |Y| = 9221 and we
embed the input words to 512-dimensional vectors, same
as the baseline. This embedding is concatenated to the im-
age embedding (discussed next) and provided as input to the
feed-forward CNN module.
Image Embedding. Image features for image I, are ob-
tained from the fc7 layer of the VGG16 network [31]. The
VGG16 is pre-trained on the ImageNet dataset [28]. We ap-
ply dropout, ReLU on the fc7 and use a linear layer to obtain
a 512-dimensional embedding. This is consistent with the
image features used in the baseline LSTM method [16].
CNN Module. The CNN module operates on the combined
input and image embedding vector. It performs three lay-
ers of masked convolutions, keeping the feature dimensions
after convolution to 512. Consistent with [9, 34], we use
gated linear unit (or GLU) activations for our conv layers.
However, we did not observe a signiﬁcant change in perfor-
mance when using the standard ReLU activation. We ex-
periment with weight normalization, residual connections
and dropout in these layers and show that they help improve
performance (Table 1). Our masked convolutions have a re-

ceptive ﬁeld of 5 words in the past. We set N (steps or
max-sentence length) to 15 for both CNN/RNN. The output
of the CNN module after three layers is a 512-dimensional
vector for each word.
Classiﬁcation Layer. We use a linear layer to encode the
512-dimensional vectors obtained from the CNN module
into a 256-dimensional representation per word. Then, we
upsample this vector to a |Y|-dimensional activation via a
fully connected layer, and pass it through a softmax to ob-
tain the output word probabilities pi,w(yi|I).
Training. We use a cross-entropy loss on the probabilities
pi,w(yi|y<i, I) to train the CNN module and the embedding
layers. Consistent with [16], we start to ﬁne-tune VGG16
along with our network after 8 training epochs. We opti-
mize with RMSProp using an initial learning rate of 5e−5
and decay the learning rate by a factor of .1 after every 15
epochs. All methods were trained for 30 epochs and we
evaluate the metrics (given in Section 6.2) on the validation
set to pick the best model for each method.

5.1. Attention

In addition to the aforementioned CNN architecture, we
also experiment with an attention mechanism, since atten-
tion beneﬁted [9, 35]. We form an attended image vector of
dimension 512 and add it to the word embedding at every
layer (shown with red, green and blue arrows in Figure 4).
We compute separate attention parameters and a separate at-
tended vector for every word. To obtain this attended vector
we predict 7×7 attention parameters, over the VGG16 max-
pooled conv-5 features of dimensions 7 × 7 × 512 [31]. We
use attention on all three masked convolution layers in our
CNN module. We continue to use the fc7 image embedding

Method

Baselines:
LSTM [16]
LSTM + Attn (Soft) [39]
LSTM + Attn (Hard) [39]
Our CNN:
CNN
CNN + Weight Norm.
CNN +WN +Dropout
CNN +WN +Dropout
+Residual

CNN +WN +Drop.
+Res. +Attn

MSCOCO Val Set
B1 B2 B3 B4 M R

C

S

MSCOCO Test Set
B1 B2 B3 B4 M R

C

S

.710 .535 .389 .281 .244 .521 .899 .169 .713 .541 .404 .303 .247 .525 .912 .172

-
-

-
-

-
-

-
-

-
-

-
-

-
-

-
-

.707 .492 .344 .243 .239
.718 .504 .357 .250 .230

-
-

-
-

-
-

.693 .518 .374 .268 .238 .511 .855 .167 .695 .521 .380 .276 .241 .514 .881 .171
.702 .528 .384 .279 .242 .517 .881 .169 .699 .525 .382 .276 .241 .516 .878 .170
.707 .532 .386 .278 .242 .517 .883 .171 .704 .532 .389 .283 .243 .520 .904 .173

.706 .532 .389 .284 .244 .519 .899 .173 .704 .532 .389 .284 .244 .520 .906 .175

.710 .537 .391 .281 .241 .519 .890 .171 .711 .538 .394 .287 .244 .522 .912 .175

Table 1: Comparison of different methods on standard evaluation metrics: BLEU-1 (B1), BLEU-2 (B2), BLEU-3 (B3),
BLEU-4 (B4), METEOR (M), ROUGE (R), CIDEr (C) and SPICE (S). Our CNN with attention (attn) achieves comparable
performance (equal CIDEr scores on MSCOCO test set) to [16] and outperforms LSTM+Attention baseline of [39]. We ex-
periment with various conﬁgurations of our CNN. We start with a CNN comprising masked convolutions and fully connected
layers only. Then, we add weight normalization, dropout, residual connections and attention incrementally and show that
performance improves with every addition. Here, for our CNN and [16] we use the model that obtains the best CIDEr scores
on val-set and report its scores for the test set. We evaluate CIDEr scores after every training epoch for val-set. Note, the
val set is not used for any hyper-parameter tuning other than choosing the best model for test set. For [39], we report all the
available metrics for soft/hard attention from their paper (missing numbers are marked by -).

Method

Beam Size=2

Beam Size=3

Beam Size=4

B1 B2 B3 B4 M R

B1 B2 B3 B4 M R
LSTM [16] .715 .545 .407 .304 .248 .526 .940 .178 .715 .544 .409 .310 .249 .528 .946 .178 .714 .543 .410 .311 .250 .529 .951 .179
CNN
.712 .541 .404 .303 .248 .527 .937 .178 .709 .538 .403 .303 .247 .525 .929 .176 .706 .533 .400 .302 .247 .522 .925 .175
CNN+Attn .718 .549 .411 .306 .248 .528 .942 .177 .722 .553 .418 .316 .250 .531 .952 .179 .718 .550 .415 .314 .249 .528 .951 .179

B1 B2 B3 B4 M R

C

C

C

S

S

S

Table 2: Comparison of different methods (metrics same as Table 1) with beam search on the output word probabilities.
Our results show that with beam size= 3 our CNN outperforms LSTM [16] on all metrics. Note, compared to Table 1, the
performance improves with beam search. We use the MS COCO test split for this experiment. For beam search, we pick one
caption with maximum log probability (sum of log probability of words) from the top-k beams and report the above metrics
for it. Beam = 1 is same as the test set results reported in Table 1.

discussed above.

To discuss attention more formally, let dj denote the em-
bedding of word j in the conv module (i.e., its activations
after GLU shown in Figure 4), let W refer to a linear layer
applied to dj, let ci denote a 512-dimensional spatial conv-5
feature at location i (in 7 × 7 feature map) and let aij indi-
cate the attention parameters. With this notation at hand,
the attention parameter aij is computed via

exp(W (dj)T ci)

exp(W (dj)T ci)

,

aij =

(cid:80)
i

(6)

and the attended image vector for word j is obtained from
(cid:80)
i

aijci.

Note that [39] uses the LSTM hidden state to compute
the attention parameters. Instead, we compute attention pa-

rameters using the conv-layer activations. This form of at-
tention mechanism was ﬁrst proposed in [3].

6. Results and Analysis

In this section, we demonstrate the following results:

• Our convolutional (or CNN) approach performs on par
with LSTM (or RNN) based approaches on image cap-
tioning metrics (Table 1). Our performance improves
with beam search (Table 2).

• Adding attention to our CNN gives improvements
on metrics and we outperform the LSTM+Attn base-
line [39] (Table 1). Figure 6 shows that with attention
we identify salient objects for the given image.

• We analyze the CNN and RNN approaches and show
that CNN produces (1) more entropy in the output

c5 (Beam = 1)

c40 (Beam = 1)

B1 B2 B3 B4 M R
.704 .528 .384 .278 .241 .517 .876 .880 .778 .656 .537 .321 .655 .898
LSTM
CNN+Attn .708 .534 .389 .280 .241 .517 .872 .883 .786 .667 .545 .321 .657 .893

B1 B2 B3 B4 M R

C

C

c5 (Beam = 3)

c40 (Beam = 3)

B1 B2 B3 B4 M R
.710 .537 .399 .299 .246 .523 .904 .889 .794 .681 .570 .334 .671 .912
LSTM
CNN+Attn .715 .545 .408 .304 .246 .525 .910 .896 .805 .694 .582 .333 .673 .914

B1 B2 B3 B4 M R

C

C

Table 3: Above, we show that CNN outperforms LSTM on BLEU metrics and gives comparable scores to LSTM on other
metrics for test split on MSCOCO evaluation server. Here, we submitted our results to the MSCOCO evaluation server to
evaluate on the hidden test split. Note, this test split of 40, 775 images is different from the 5000 images test split used in
Tables 1 and 2. We compare our CNN+Attn method to the LSTM baseline on standard evaluation metrics: BLEU-1 (B1),
BLEU-2 (B2), BLEU-3 (B3), BLEU-4 (B4), METEOR (M), ROUGE (R) and CIDEr (C). The c5 scores above are computed
with 5 reference captions per test image and c40 scores are computed with 40 reference captions. We show comparison
results for beam size 1 and beam size 3 for both the methods.

LSTM: a man and a woman
in a suit and tie
CNN: a black and white photo
of a man and woman in a suit
GT: A man sitting next to a
woman while wearing a suit.

LSTM: a man is walking down
a path in the woods
CNN: a truck is parked in
the dirt near a tree
GT: a truck is parked at a
campground with snow on it

LSTM: a cat is laying
down on a bed
CNN: a polar bear is drinking
water from a white bowl
GT: A white polar bear laying
on top of a pool of water

LSTM: a bear is standing
on a rock in a zoo
CNN: two bears are walking
on a rock in the zoo
GT: two bears touching
noses standing on rocks

LSTM: a box of donuts with
a variety of toppings
CNN: a box of doughnuts with
sprinkles and a sign
GT:A bunch of doughnuts
with sprinkles on them

LSTM: a dog is standing in
the grass near a tree
CNN: a dog is standing in
the grass with a frisbee
in its mouth
GT: large dog retrieving
the frisbee for his owner

LSTM: a parking meter
with a sign on it
CNN: a doll is sitting
next to a parking meter
GT: A doll with articulated
joints stares from her perch
between two parking meters.

LSTM: a boat is docked in
the water near a dock
CNN: a boat is docked in
the water near a mountain
GT: A white boat ﬂoating on
a lake under mountains

LSTM: a cat is standing on
top of a refrigerator
CNN: a cat is standing in a
kitchen looking at the camera
GT: A cat in a kitchen
on top of a refrigerator

LSTM: a dog and a
dog in a ﬁeld
CNN: two cows are
standing in a ﬁeld of grass
GT: A dog and a horse
standing near each other

Figure 5: Captions generated by our CNN are compared to the LSTM and ground-truth caption. In the examples above our
CNN can describe things like black and white photo, polar bear/white bowl, number of bears, sign in the donut image which
LSTM fails to do. The last two images (bottom right) show failure cases for CNN. Typically we observe that CNN and LSTM
captions are of similar quality. We use our CNN+Attn method (Section 5.1) and the MSCOCO test split for these results.

probability distribution, (2) gives better word predic-
tion accuracy (Figure 7), and (3) does not suffer as
much from vanishing gradients (Figure 9).

volutional image captioning is available on github.1

6.1. Dataset and Baselines

• In Table 4, we show that a CNN with 1.5× more pa-
rameters can be trained in comparable time. This is
because we avoid the sequential processing of RNNs.

The details of our experimental setup and these results
are discussed below. PyTorch implementation of our con-

We

conducted experiments on the MS COCO
dataset [18]. Our train/val/test splits follow [16, 39].
We use 113287 training images, 5000 images for valida-
tion, and 5000 for testing. Henceforth, we will refer to
our approach as CNN, and our approach with the attention
(Section 5.1) as CNN+Attn. We use the following naming

1https://github.com/aditya12agd5/convcap

CNN: a baby holding a
toothbrush in his hand
GT: A child holds a
toothbrush in their hand.

CNN: a plate of food with
broccoli and rice
GT: A BBQ steak on a plate
next to mashed potatoes
and mixed vegetables.

a

a

baby

holding

a

toothbrush

in

... hand

plate

of

food

with

broccoli

... rice

a

CNN: a man sitting on a
bench overlooking the ocean
GT: A man sitting on top
of a bench near the ocean
Figure 6: We overlay the attention parameters on the image. These results show that we focus on salient objects such
as broccoli, bench, toothbrush in the image when predicting these words. Also, the attention is spread out/uniform when
predicting words such as a, of and on which are unrelated to image content.

... ocean

sitting

bench

man

on

a

convention for our baselines: [16] is denoted by LSTM and
[39] is referred to as LSTM+Attn.

6.2. Comparison on Image Captioning Metrics

We consider multiple conventional evaluation metrics,
BLEU-1, BLEU-2, BLEU-3, BLEU-4 [24], METEOR [8],
ROUGE [17], CIDEr [36] and SPICE [1]. See Table 1 for
the performance on all these metrics for our val/test splits.
Note that we obtain comparable CIDEr scores and better
SPICE scores than LSTM on test set with our CNN+Attn
method. Our BLEU, METEOR, ROUGE scores are less
than the LSTM ones, but the margin is very small. Our
CNN+Attn method outperforms the LSTM+Attn baseline
on the test set for all metrics reported in [39]. For Table 1,
we form the caption by choosing the word with maximum
probability at each step. The metrics are reported for this
one caption formed by choosing maximum probability word
at every step.

Instead of sampling the maximum probability words, we
also perform beam search with different beam sizes. We
perform beam search for both LSTM and our CNN meth-
ods. With beam search, we pick the maximum probability
caption (sum of log word probability in the beam). The re-
sults reported in Table 2 demonstrate that with beam size
of 3 we achieve better BLEU, ROUGE, CIDEr scores than
LSTM and equal METEOR and SPICE scores.

In Table 3, we show the results obtained on the

MSCOCO evaluation server. These results are computed
over a test set of 40, 775 images for which ground-truth
is not publicly available. We demonstrate that our method
does better on all BLEU metrics, especially with beam size
3, we perform better than the LSTM based method.

6.3. Qualitative Comparison

See Figure 5 for a qualitative comparison of captions
generated by CNN and LSTM. In Figure 6, we overlay the
attention parameters on the image for each word prediction.
Note that our attention parameters are 7 × 7 as described
in Section 5.1 and therefore the image is divided in a 7 × 7
grid. These results show that our attention focuses on salient
objects such as man, broccoli, ocean, bench, etc., when pre-
dicting these respective words. Our results also show that
the attention is uniform when predicting words such as a,
of, on, etc., which are unrelated to the image content.

6.4. Analysis of CNN and RNN

In Table 4 we report the number of trainable parameters
and the training time per epoch. CNNs with 1.5 times more
parameters can be trained in comparable time.

Table 1, 2 and 3 show that we obtain comparable per-
formance from both CNN and RNN/LSTM-based methods.
Encouraged by this result, we analyze the characteristics of
these two methods. For fair comparison, we use our CNN
without attention, since the RNN method does not use spa-

# Parameters Train time per epoch

7. Related Work

Method
LSTM [16]
Our CNN
Our CNN+Attn

13M
19M
20M

1529s
1585s
1620s

Table 4: Comparison of train time (in seconds) for LSTM
and CNN. We train a CNN faster per parameter than the
LSTM. This is because CNN is not sequential like the
LSTM. We use PyTorch implementation of [16] and our
CNN-based method for fair comparison. The timings are
obtained on Nvidia Titan X GPU.

tial image features. First, we compare the negative log- like-
lihoods (or cross-entropy loss) on a subset of train and the
entire val set (see Figure 7 (a)). We ﬁnd that the loss is
higher for CNN than RNN, this is because CNNs are being
penalized for producing less-peaky word probability distri-
butions. To evaluate this further, we plot the entropy of the
output probability distribution (Figure 7 (b)) and the clas-
siﬁcation accuracy, i.e., the number of times the maximum
probability word is the ground truth (Figure 7 (c)). These
plots show that RNNs are good at producing low entropy
and therefore peaky word probability distributions at the
output, while CNNs produce less peaky distributions (and
high entropy). Less peaky distributions are not necessarily
bad, particularly for a problem like image captioning, where
multiple word predictions are possible. Despite, less peaky
distributions, Figure 7(c) shows that the maximum probabil-
ity word is correct more often on the train set and it is within
approx. 1% accuracy on the val set. Note, cross-entropy loss
is a proxy for the classiﬁcation accuracy and we show that
CNNs have higher cross entropy loss, but their classiﬁca-
tion accuracy is good. Less peaky posterior distributions
provided by a CNN may be indicative of CNNs being more
capable of predicting diverse captions.

In Figure 8, we plot the unique words predicted at ev-
ery word position or time-step. The plot is for word posi-
tions 1 to 13. This plot shows that for the CNN we have
higher unique words for more word positions than LSTM.
This supports our analysis that CNNs have less peaky (or
one-hot) posteriors and therefore can produce more diver-
sity. For these diversity experiments, we perform a beam
search with beam size 10 and use all the top 10 beams.

Since RNNs/LSTMs are known to suffer from vanishing
gradient problems, in Figure 9, we plot the gradient norm at
the output embedding/classiﬁcation layer and the gradient
norm at the input embedding layer. The values are averaged
over 1 training epoch. These plots show that the gradients
in RNN/LSTM diminishes more than the ones in CNNs.
Hence RNN/LSTM nets are more likely to suffer from van-
ishing gradients, which stalls learning. If learning is stalled,
for larger datasets than the ones we currently use for image
captioning, the performance of RNN and CNN may differ
signiﬁcantly.

Describing the content of an observed image is related
to a large variety of tasks. Object detection [26, 27] and se-
mantic segmentation [22, 29] can be used to obtain a list of
objects. Detection of co-occurrence patterns and relation-
ships between objects can help to form sentences. Generat-
ing sentences by taking advantage of surrogate tasks is then
a multi-step approach which is beneﬁcial for interpretability
but lacks a joint objective that can be trained end-to-end.

Early techniques formulate image captioning as a re-
trieval problem and ﬁnd the best ﬁtting description from a
pool of possible captions [12, 15, 23, 32]. Those techniques
are built upon the idea that the ﬁtness between available tex-
tual descriptions and images can be learned. While this per-
mits end-to-end training, matching image descriptors to a
sufﬁciently large pool of captions is computationally expen-
sive. In addition, constructing a database of captions that is
sufﬁcient for describing a reasonably large fraction of im-
ages seems prohibitive.

To address this issue, recurrent neural nets (RNNs) or
probabilistic models like Markov chains, which decompose
the space of a caption into a product space of individual
words are compelling. The success of RNNs for image cap-
tioning is based on a key component, i.e., the Long-Short-
Term-Memory (LSTM) [11] or recent alternatives like the
gated recurrent unit (GRU) [6]. These components capture
long-term dependencies by adding a memory cell, and they
address the vanishing or exploding gradient issue of classi-
cal RNNs to some degree.

Based on this success, [20] train a vision (or image)
CNN and a language RNN that shares a joint embedding
layer. [38] jointly train a vision (or image) CNN with a
language RNN to generate sentences, [39] extends [38]
with additional attention parameters and learns to iden-
tify salient objects for caption generation. [16] use a bi-
directional RNN along with a structured loss function in a
shared vision-language space. These recurrent neural nets
have found widespread use for captioning because they have
been shown to produce remarkably ﬁtting descriptions.

Despite the fact that the above RNNs based on LSTM or
GRU units deliver remarkable results, e.g., for image cap-
tioning, their training procedure is all but trivial. For in-
stance, while the forward pass during training can be paral-
lelized across samples, it is inherently sequential in time,
limiting the parallelization abilities. To address this is-
sue, [34] proposed a PixelCNN architecture for conditional
image generation that approximates an RNN for the same
task. [9] and [35] demonstrate that convolutional architec-
tures with attention achieve state-of-the-art performance on
machine translation tasks. In spirit similar is our approach
for image captioning, which is convolutional but addresses
a different task.

(a) CNN gives higher cross-entropy loss on
train/val set of MSCOCO compared to LSTM.
But, as we show in (c), our CNN obtains bet-
ter % word accuracy than LSTM. Therefore, it
still assigns max. probability to correct word.
The CNN loss is high because our output prob-
ability distributions have more entropy than
LSTM.

(b) The entropy of the softmax layer (or pos-
terior probability distribution) of our CNN is
higher than the LSTM. For ambiguous prob-
lems such as image captioning, it is desirable to
have a less peaky (multi-modal) posterior (like
ours) capable of producing multiple captions,
rather than a peaky one (like LSTM).

(c) Even though the CNN training loss is
higher than LSTM, its word prediction accu-
racy is better than LSTM on train set. On val
set, the difference in accuracy between LSTM
and CNN is small (only ∼ 1%).

Figure 7: In the ﬁgures above we plot (a) Cross-entropy loss, (b) Entropy of the softmax layer, (c) Word accuracy on train/val
set. Blue line denotes our method and red denotes the LSTM based method [16]. In (a), (b) and (c) solid/dotted lines denote
train/val set of MSCOCO respectively. For these plots, at the end of every epoch we randomly sample 10k images from train
set and use the entire val set.

Figure 8: We perform beam search of beam size 10 with our
best performing LSTM and CNN models. We use the top
10 beams to plot the unique words predicted for every word
position. CNN produces higher unique words at more word
positions than LSTM.

8. Conclusion

We discussed a convolutional approach for

image
captioning and showed that it performs on par with existing
LSTM techniques. We also analyzed the differences
between RNN based learning and our method, and found
gradients of lower magnitude as well as overly conﬁdent
predictions to be existing LSTM network concerns.

Figure 9: Here, we plot the gradient norm at the input
embedding (ﬁrst) and output embedding (last/classiﬁcation)
layer. The gradient to the ﬁrst layer of LSTM decays by a
factor ∼ 100 in contrast to our CNN, where it decays by
a factor of ∼ 10. There is prior evidence in literature that
unlike CNNs, RNN/LSTMs suffer from vanishing gradients
[25, 33]. Here, we use solid line for input embedding layer
and dotted line for the classiﬁcation layer.

9. Acknowledgments
We thank Arun Mallya for providing us with an efﬁcient Py-
Torch implementation of [16], we thank Tanmay Gangwani
for the beam search code used for Figure 8 and we thank
David Forsyth for insightful discussions and his comments.
This material is based upon work supported in part by the
National Science Foundation under Grant No. 1718221.

References

[1] P. Anderson, B. Fernando, M. Johnson, and S. Gould. Spice:
Semantic propositional image caption evaluation. In ECCV,
2016. 7

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L. Zit-
nick, and D. Parikh. VQA: Visual Question Answering. In
International Conference on Computer Vision (ICCV), 2015.
1

[3] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. CoRR,
abs/1409.0473, 2014. 5

[4] S. Bengio, O. Vinyals, N. Jaitly, and N. Shazeer. Sched-
uled sampling for sequence prediction with recurrent neural
networks. In Proceedings of the 28th International Confer-
ence on Neural Information Processing Systems - Volume 1,
NIPS’15, pages 1171–1179, Cambridge, MA, USA, 2015.
MIT Press. 3

[5] X. Chen and C. L. Zitnick. Mind’s eye: A recurrent vi-
In 2015
sual representation for image caption generation.
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2422–2431, June 2015. 1

[6] K. Cho, B. van Merri¨enboer, C¸ . G¨ulc¸ehre, D. Bahdanau,
F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase
representations using rnn encoder–decoder for statistical ma-
In Proceedings of the 2014 Confer-
chine translation.
ence on Empirical Methods in Natural Language Processing
(EMNLP), pages 1724–1734, Doha, Qatar, Oct. 2014. Asso-
ciation for Computational Linguistics. 2, 8

[7] A. Das, S. Kottur, K. Gupta, A. Singh, D. Yadav, J. M. F.
Moura, D. Parikh, and D. Batra. Visual dialog. 2017. 1
[8] M. Denkowski and A. Lavie. Meteor universal: Language
In
speciﬁc translation evaluation for any target language.
Proceedings of the EACL 2014 Workshop on Statistical Ma-
chine Translation, 2014. 7

[9] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning.
CoRR, abs/1705.03122, 2017. 1, 3, 4, 8

[10] A. Goyal, A. Lamb, Y. Zhang, S. Zhang, A. Courville, and
Y. Bengio. Professor forcing: A new algorithm for training
recurrent networks. pages 4601–4609. 2016. 3

[11] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural Comput., 9(8):1735–1780, Nov. 1997. 1, 2, 8
[12] M. Hodosh, P. Young, and J. Hockenmaier. Framing image
description as a ranking task: Data, models and evaluation
metrics. J. Artif. Int. Res., 47(1), May 2013. 8

[13] T. K. Huang, F. Ferraro, N. Mostafazadeh,

I. Misra,
A. Agrawal, J. Devlin, R. B. Girshick, X. He, P. Kohli, D. Ba-
tra, C. L. Zitnick, D. Parikh, L. Vanderwende, M. Galley, and
M. Mitchell. Visual storytelling. CoRR, abs/1604.03968,
2016. 1

[14] U. Jain, Z. Zhang, and A. G. Schwing. Creativity: Gener-
ating diverse questions using variational autoencoders.
In
Computer Vision and Pattern Recognition, 2017. 1

[15] Y. Jia, M. Salzmann, and T. Darrell. Learning cross-modality
similarity for multinomial data. In Proceedings of the 2011
International Conference on Computer Vision, ICCV ’11,

pages 2407–2414, Washington, DC, USA, 2011. IEEE Com-
puter Society. 8

[16] A. Karpathy and L. Fei-Fei. Deep visual-semantic align-
In 2015 IEEE
ments for generating image descriptions.
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 3128–3137, June 2015. 1, 2, 4, 5, 6, 7, 8,
9

[17] C.-Y. Lin. Rouge: a package for automatic evaluation of

summaries. July 2004. 7

[18] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon Objects in Context, pages 740–755. Springer Interna-
tional Publishing, Cham, 2014. 2, 6

[19] A. Mallya and S. Lazebnik. Recurrent models for situation

recognition. In ICCV, 2017. 1

[20] J. Mao, W. Xu, Y. Yang, J. Wang, and A. L. Yuille. Deep
captioning with multimodal recurrent neural networks (m-
rnn). CoRR, abs/1412.6632, 2014. 8

[21] N. Mostafazadeh, I. Misra, J. Devlin, M. Mitchell, X. He,
and L. Vanderwende. Generating natural questions about an
image. In ACL (1). The Association for Computer Linguis-
tics, 2016. 1

[22] M. Mostajabi, P. Yadollahpour, and G. Shakhnarovich. Feed-
forward semantic segmentation with zoom-out features. In
2015 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 3376–3385, June 2015. 8
[23] V. Ordonez, G. Kulkarni, and T. L. Berg. Im2text: Describ-
ing images using 1 million captioned photographs. In Pro-
ceedings of the 24th International Conference on Neural In-
formation Processing Systems, NIPS’11, pages 1143–1151,
USA, 2011. Curran Associates Inc. 8

[24] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu:
A method for automatic evaluation of machine translation.
In Proceedings of the 40th Annual Meeting on Association
for Computational Linguistics, ACL ’02, pages 311–318,
Stroudsburg, PA, USA, 2002. Association for Computational
Linguistics. 7

[25] R. Pascanu, T. Mikolov, and Y. Bengio. On the difﬁculty
of training recurrent neural networks. In Proceedings of the
30th International Conference on International Conference
on Machine Learning - Volume 28, ICML’13, pages III–
1310–III–1318. JMLR.org, 2013. 1, 9

[26] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection.
CoRR, abs/1506.02640, 2015. 8

[27] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Proceedings of the 28th International Conference on Neural
Information Processing Systems - Volume 1, NIPS’15, pages
91–99, Cambridge, MA, USA, 2015. MIT Press. 8

[28] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei. Imagenet large scale visual recog-
nition challenge. International Journal of Computer Vision,
115(3):211–252, Dec 2015. 4

[29] E. Shelhamer, J. Long, and T. Darrell. Fully convolutional
IEEE Trans. Pattern

networks for semantic segmentation.
Anal. Mach. Intell., 39(4):640–651, Apr. 2017. 8

[30] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In Computer Vision
and Pattern Recognition, 2016. 1

[31] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 4

[32] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014. 8

[33] I. Sutskever, J. Martens, and G. Hinton. Generating text with
recurrent neural networks. In L. Getoor and T. Scheffer, ed-
itors, Proceedings of the 28th International Conference on
Machine Learning (ICML-11), ICML ’11, pages 1017–1024,
New York, NY, USA, June 2011. ACM. 9

[34] A. van den Oord, N. Kalchbrenner, O. Vinyals, L. Espeholt,
A. Graves, and K. Kavukcuoglu. Conditional image genera-
tion with pixelcnn decoders. In NIPS, 2016. 1, 3, 4, 8
[35] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all
you need. CoRR, abs/1706.03762, 2017. 1, 4, 8

[36] R. Vedantam, C. L. Zitnick, and D. Parikh.

Consensus-based image description evaluation.
pages 4566–4575. IEEE Computer Society, 2015. 7

Cider:
In CVPR,

[37] S. Venugopalan, H. Xu,

J. Donahue, M. Rohrbach,
R. Mooney, and K. Saenko. Translating videos to natural
language using deep recurrent neural networks. In NAACL
HLT, 2015. 1

[38] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
image caption generation with visual attention. In F. Bach
and D. Blei, editors, Proceedings of the 32nd International
Conference on Machine Learning, volume 37 of Proceed-
ings of Machine Learning Research, pages 2048–2057, Lille,
France, 07–09 Jul 2015. PMLR. 1, 8

[39] K. Xu, J. L. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhut-
dinov, R. S. Zemel, and Y. Bengio. Show, attend and tell:
Neural image caption generation with visual attention.
In
Proceedings of the 32Nd International Conference on In-
ternational Conference on Machine Learning - Volume 37,
ICML’15, pages 2048–2057. JMLR.org, 2015. 1, 2, 5, 6, 7,
8

[40] Y. Yang, C. L. Teo, H. Daum´e, III, and Y. Aloimonos.
Corpus-guided sentence generation of natural images.
In
Proceedings of the Conference on Empirical Methods in Nat-
ural Language Processing, EMNLP ’11, pages 444–454,
Stroudsburg, PA, USA, 2011. Association for Computational
Linguistics. 2

Convolutional Image Captioning

Jyoti Aneja∗, Aditya Deshpande∗, Alexander Schwing
University of Illinois at Urbana-Champaign
{janeja2, ardeshp2, aschwing}@illinois.edu

7
1
0
2
 
v
o
N
 
4
2
 
 
]

V
C
.
s
c
[
 
 
1
v
1
5
1
9
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Image captioning is an important but challenging task,
applicable to virtual assistants, editing tools, image index-
ing, and support of the disabled.
Its challenges are due
to the variability and ambiguity of possible image descrip-
tions. In recent years signiﬁcant progress has been made in
image captioning, using Recurrent Neural Networks pow-
ered by long-short-term-memory (LSTM) units. Despite
mitigating the vanishing gradient problem, and despite their
compelling ability to memorize dependencies, LSTM units
are complex and inherently sequential across time. To ad-
dress this issue, recent work has shown beneﬁts of convo-
lutional networks for machine translation and conditional
image generation [9, 34, 35].
Inspired by their success,
in this paper, we develop a convolutional image caption-
ing technique. We demonstrate its efﬁcacy on the challeng-
ing MSCOCO dataset and demonstrate performance on par
with the baseline, while having a faster training time per
number of parameters. We also perform a detailed analy-
sis, providing compelling reasons in favor of convolutional
language generation approaches.

1. Introduction

Image captioning, i.e., describing the content observed
in an image, has received a signiﬁcant amount of attention
in recent years. It is applicable in various scenarios, e.g.,
recommendation in editing applications, usage in virtual as-
sistants, for image indexing, and support of the disabled. It
is also a basic ingredient for more complex operations such
as storytelling [13] and visual summarization [37].

In recent years, with the availability of larger datasets,
deep neural network (DNN) based methods have been
shown to achieve impressive results on image captioning
tasks [16, 38]. These techniques are largely based on recur-
rent neural nets (RNNs), often powered by a Long-Short-
Term-Memory (LSTM) [11] component which mitigates
the issue of vanishing or exploding gradients [25]. Figure 1

∗ Denotes equal contribution.

Figure 1: Examples of captions generated by a standard
LSTM-based network, our convolutional network (CNN)
and ground-truth (GT) captions by a human annotator.

shows examples of captions generated by an LSTM-based
network.

LSTM nets have been considered as the de-facto stan-
dard for vision-language tasks of image captioning [5, 16,
38, 39], visual question answering [2, 30], question gen-
eration [14, 21], situation recognition [19], and visual dia-
log [7], due to their compelling ability to memorize long-
term dependencies through a memory cell. However, the
complex addressing and overwriting mechanism combined
with inherently sequential processing, and signiﬁcant stor-
age required due to back-propagation through time (BPTT),
poses challenges during training. Also, in contrast to CNNs,
that are non-sequential, LSTMs often require more careful
engineering, when considering a novel task. Previously,
CNNs have not matched up to the LSTM performance on
vision-language tasks.

Inspired by the recent successes of convolutional archi-
tectures on other sequence-to-sequence tasks – conditional
image generation [34], machine translation [9, 35] – we
study convolutional architectures for the task of image cap-
tioning. To the best of our knowledge, ours is the ﬁrst con-
volutional network for image captioning that compares fa-
vorably to LSTM-based methods. On the MSCOCO dataset
we match performance of the LSTM with a .952 CIDEr
score and get a better BLEU-4 score of .316 (see Table 2).
Our key contributions are: a) A convolutional (CNN-
based) image captioning method that shows comparable

1

A variety of probabilistic models have been considered
(Section 7), from hidden Markov models [40] to recurrent
neural networks. First, we brieﬂy review the inference and
learning of RNN-based approaches (Section 3) and then
delve into our convolutional approach (Section 4).

3. RNN Approach

An illustration of a classical RNN architecture for image
captioning is provided in Figure 2. It consists of three ma-
jor components, all of which contain trainable parameters:
the input word embeddings, the sequential LSTM units con-
taining the memory cell, and the output word embeddings.
Inference. RNNs sequentially predict one word at a time,
from y1 up to yN . At every time-step i, a conditional proba-
bility distribution pi,w(yi|I), which depends on parameters
w, is predicted (see top of Figure 2). During inference, we
typically choose the word yi with the highest probability
pi,w(yi|I). The sentence terminates once the end of sen-
tence token is chosen, or after a maximum of N steps.

For modeling pi,w(yi|I), in the spirit of auto-regressive
models, the dependence of word yi on its ancestors y<i is
implicitly captured by a hidden representation hi (see ar-
rows in Figure 2). Formally, the probability is computed
via

pi,w(yi|hi, I) = gw(yi, hi, I),

(1)

where gw can be any differentiable function/deep net. This
function may depend directly on the image I. However,
classical image captioning techniques usually encode the
image into the hidden representation h0 (Figure 2).

Importantly, RNNs just like other auto-regressive models
are described by a recurrence relation which governs com-
putation of the hidden state hi based on its values at the pre-
vious time instant, hi−1, as well as the word yi−1, predicted
at the previous time step:

hi = fw(hi−1, yi−1, I).

(2)

Again, fw can be any differentiable function. For image
captioning, long-short-term-memory (LSTM) [11] nets and
variants thereof based on gated recurrent units (GRU) [6],
or forward-backward LSTM nets are used here.

The recurrent function given in Eq. (2) generally doesn’t
operate directly on one-hot input vectors yi. Instead, input
words are encoded into a vectorial representation via an em-
bedding layer (input word embeddings in Figure 2). Note
that the functions gw and fw are identical across time.
Learning. Following classical supervised learning, it is
common to ﬁnd the parameters w of the word embed-
dings and the LSTM unit by minimizing the negative log-
likelihood of the training data D, i.e., we optimize:

min
w

−

(cid:88)

N
(cid:88)

(I,y∗)∈D

i=1

ln pi,w(y∗

i |hi, I).

(3)

Figure 2: A sequential RNN powered by an LSTM cell.
At each time step output is conditioned on the previously
generated word, the image is fed at the start only.

performance to an LSTM based method on standard met-
rics (Section 6.2, Table 1 and Table 2); b) Improved per-
formance with a CNN model that uses attention mecha-
nism to leverage spatial image features. With attention,
we outperform the current attention baseline and qualita-
tively demonstrate that our method ﬁnds salient objects in
(Figure 6, Table 2); c) We analyze the char-
the image.
acteristics of CNN and LSTM nets and provide useful in-
sights such as – CNNs produce more entropy (useful for di-
verse predictions), better classiﬁcation accuracy, and do not
suffer from vanishing gradients (Section 6 and Figure 7, 8
and 9). We evaluate our architecture on the challenging
MSCOCO [18] dataset, and compare it to an LSTM [16]
and an LSTM+Attention baseline [39].

The paper is organized as follows: Section 2 describes
our notation, Section 3 brieﬂy reviews the RNN/LSTM
based approach, Section 4 describes our convolutional
method and Section 5 gives the details of our CNN architec-
ture, Section 6 contains our results and Section 7 discusses
previous work on image captioning.

2. Problem Setup and Notation

For image captioning, we are given an input image I
and we are required to generate a sequence of words y =
(y1, . . . , yN ). The possible words yi ∈ Y at time-step i are
subsumed in a discrete set Y of options. The number of
possible options |Y| easily reaches several thousands. This
set of options Y often contains special tokens that denote a
start token (<S>), an end of sentence token (<E>), and an
unknown token (<UNK>) which refers to all words not in
Y.

Given a training set D = {(I, y∗)} which contains pairs
(I, y∗) of input image I and corresponding ground-truth
caption y∗ = (y∗
i ∈ Y,
i ∈ {1, . . . , N }, we maximize w.r.t. parameters w, a proba-
bilistic model pw(y1, . . . , yN |I).

N ), consisting of words y∗

1, . . . , y∗

4. Convolutional Approach

Our model is based on the convolutional machine trans-
lation model used in [9]. Figure 3 provides an overview of
our feed-forward convolutional (or CNN-based) approach
for image captioning. As the ﬁgure illustrates, our tech-
nique contains three main components similar to the RNN
technique. The ﬁrst and the last components are word em-
beddings in both cases. However, while the center com-
ponent contains LSTM or GRU units in the RNN case,
masked convolutions are employed in our CNN-based ap-
proach. This component, unlike the RNN, is feed-forward
without any recurrent function. We brieﬂy review inference
and learning of our model. The problem setup and notation
follows Section 2.
Inference. In contrast to the RNN formulation, where the
probabilistic model is unrolled in time via the recurrence
relation given in Eq. (4), we use a simple feed-forward deep
net, fw, for modeling pi,w(yi|I). Prediction of a word yi
relies on past words y<i or their representations:

pi,w(yi|y<i, I) = fw(yi, y<i, I).

(5)

To disallow convolution operations from using informa-
tion of future word tokens, we use masked convolutional
layers that operate only on ‘past’ data. This is similar
to [9, 34].

Inference can now be performed sequentially, one word
at a time. Hence, inference begins with the start token <S>
and employs a feed-forward pass to generate p1,w(y1|∅, I).
Afterwards, y1 ∼ p1,w(y1|∅, I) is sampled. Note that it
is possible to retrieve the maximizing argument or to per-
form beam search. After sampling, y1 is fed back into the
feed-forward network to generate subsequent words y2, etc.
Inference continues until the end token is predicted, or until
we reach a ﬁxed upper bound of N steps.
Learning.
Similar to RNN training, we use ground-
truth y∗
<i for past words, instead of using the most re-
cently generated ones. For prediction of word probabil-
ity pi,w(yi|y∗
<i, I), the considered feed-forward network is
fw(yi, y∗
<i, I) and we optimize for parameters w using a
likelihood similar to Eq. (3).

Since there are no recurrent connections and all ground-
truth words are available at any given time-step i, our CNN
based model can be trained in parallel for all words. In Sec-
tion 5, we provide details about the convolutional architec-
ture used in our experiments.

5. Architecture

The detailed architecture for our convolutional image
In this ﬁgure, we
captioning is illustrated in Figure 4.
show a training iteration with input (ground-truth) words
{y∗
5} = { a, woman, is, playing, tennis }. Addition-

1, . . . , y∗

Figure 3: Our convolutional model for image captioning.
We use a feed forward network with masked convolutions.
Unlike RNNs, our model operates over all words in parallel.

To compute the gradient of the objective given in Eq. (3),
back-propagation through time (BPTT) is the de-facto stan-
dard these days. BPTT is necessary due to the recurrence
relationship encoded in fw (Eq. (2)), which is unrolled as
illustrated in Figure 2. The gradients of the function fw at
time i depend on the gradients obtained in successive time-
steps.

To avoid more complicated gradient ﬂows through the
recurrence relationship, during training, it is common to use

hi = fw(hi−1, y∗

i−1, I),

(4)

rather than the form provided in Eq. (2). I.e., during train-
ing, when computing the latent representation hi, we use the
ground-truth symbol y∗
i−1 rather than the prediction yi−1.
This is termed as teacher forcing. While this simpliﬁes the
gradient ﬂow, it obviously causes the input statistics to dif-
fer between train and test. This issue has been subject to
recent work [4, 10].

Although highly successful, RNN-based techniques suf-
fer from some drawbacks. First, the training process is in-
herently sequential for a particular image-caption pair. This
results from unrolling the recurrent relation in time. Hence,
the output at time-step i has a true dependency on the output
at i − 1. Secondly, as we will show in our results for image
captioning, RNNs tend to produce lower classiﬁcation ac-
curacy (Figure 7), and, despite LSTM units, they still suffer
to some degree from vanishing gradients (Figure 9).

Next, we describe an alternative convolutional approach
to image captioning which attempts to overcome some of
these challenges.

Figure 4: Our convolutional architecture for image captioning. Our architecture has four components: (i) Input embedding
layer, (ii) Image embedding, (iii) Convolutional module and (iii) Output embedding layer. Details of these components can
be found in Section 5.

ally, we add the start token <S> at the beginning and also,
the end of sentence token <E>.

These words are processed as follows:

(1) they pass
through an input embedding layer; (2) they are combined
with the image embedding; (3) they are processed by the
CNN module; and (4) the output embedding (or classiﬁ-
cation) layer produces output probability distributions (see
{p1, . . . , p6} at top of Figure 4). Each of the four aforemen-
tioned steps is discussed below.
Input Embedding.
For consistency with RNN/LSTM
baseline, we train (from scratch) an embedding layer over
one-hot encoded input words. We use |Y| = 9221 and we
embed the input words to 512-dimensional vectors, same
as the baseline. This embedding is concatenated to the im-
age embedding (discussed next) and provided as input to the
feed-forward CNN module.
Image Embedding. Image features for image I, are ob-
tained from the fc7 layer of the VGG16 network [31]. The
VGG16 is pre-trained on the ImageNet dataset [28]. We ap-
ply dropout, ReLU on the fc7 and use a linear layer to obtain
a 512-dimensional embedding. This is consistent with the
image features used in the baseline LSTM method [16].
CNN Module. The CNN module operates on the combined
input and image embedding vector. It performs three lay-
ers of masked convolutions, keeping the feature dimensions
after convolution to 512. Consistent with [9, 34], we use
gated linear unit (or GLU) activations for our conv layers.
However, we did not observe a signiﬁcant change in perfor-
mance when using the standard ReLU activation. We ex-
periment with weight normalization, residual connections
and dropout in these layers and show that they help improve
performance (Table 1). Our masked convolutions have a re-

ceptive ﬁeld of 5 words in the past. We set N (steps or
max-sentence length) to 15 for both CNN/RNN. The output
of the CNN module after three layers is a 512-dimensional
vector for each word.
Classiﬁcation Layer. We use a linear layer to encode the
512-dimensional vectors obtained from the CNN module
into a 256-dimensional representation per word. Then, we
upsample this vector to a |Y|-dimensional activation via a
fully connected layer, and pass it through a softmax to ob-
tain the output word probabilities pi,w(yi|I).
Training. We use a cross-entropy loss on the probabilities
pi,w(yi|y<i, I) to train the CNN module and the embedding
layers. Consistent with [16], we start to ﬁne-tune VGG16
along with our network after 8 training epochs. We opti-
mize with RMSProp using an initial learning rate of 5e−5
and decay the learning rate by a factor of .1 after every 15
epochs. All methods were trained for 30 epochs and we
evaluate the metrics (given in Section 6.2) on the validation
set to pick the best model for each method.

5.1. Attention

In addition to the aforementioned CNN architecture, we
also experiment with an attention mechanism, since atten-
tion beneﬁted [9, 35]. We form an attended image vector of
dimension 512 and add it to the word embedding at every
layer (shown with red, green and blue arrows in Figure 4).
We compute separate attention parameters and a separate at-
tended vector for every word. To obtain this attended vector
we predict 7×7 attention parameters, over the VGG16 max-
pooled conv-5 features of dimensions 7 × 7 × 512 [31]. We
use attention on all three masked convolution layers in our
CNN module. We continue to use the fc7 image embedding

Method

Baselines:
LSTM [16]
LSTM + Attn (Soft) [39]
LSTM + Attn (Hard) [39]
Our CNN:
CNN
CNN + Weight Norm.
CNN +WN +Dropout
CNN +WN +Dropout
+Residual

CNN +WN +Drop.
+Res. +Attn

MSCOCO Val Set
B1 B2 B3 B4 M R

C

S

MSCOCO Test Set
B1 B2 B3 B4 M R

C

S

.710 .535 .389 .281 .244 .521 .899 .169 .713 .541 .404 .303 .247 .525 .912 .172

-
-

-
-

-
-

-
-

-
-

-
-

-
-

-
-

.707 .492 .344 .243 .239
.718 .504 .357 .250 .230

-
-

-
-

-
-

.693 .518 .374 .268 .238 .511 .855 .167 .695 .521 .380 .276 .241 .514 .881 .171
.702 .528 .384 .279 .242 .517 .881 .169 .699 .525 .382 .276 .241 .516 .878 .170
.707 .532 .386 .278 .242 .517 .883 .171 .704 .532 .389 .283 .243 .520 .904 .173

.706 .532 .389 .284 .244 .519 .899 .173 .704 .532 .389 .284 .244 .520 .906 .175

.710 .537 .391 .281 .241 .519 .890 .171 .711 .538 .394 .287 .244 .522 .912 .175

Table 1: Comparison of different methods on standard evaluation metrics: BLEU-1 (B1), BLEU-2 (B2), BLEU-3 (B3),
BLEU-4 (B4), METEOR (M), ROUGE (R), CIDEr (C) and SPICE (S). Our CNN with attention (attn) achieves comparable
performance (equal CIDEr scores on MSCOCO test set) to [16] and outperforms LSTM+Attention baseline of [39]. We ex-
periment with various conﬁgurations of our CNN. We start with a CNN comprising masked convolutions and fully connected
layers only. Then, we add weight normalization, dropout, residual connections and attention incrementally and show that
performance improves with every addition. Here, for our CNN and [16] we use the model that obtains the best CIDEr scores
on val-set and report its scores for the test set. We evaluate CIDEr scores after every training epoch for val-set. Note, the
val set is not used for any hyper-parameter tuning other than choosing the best model for test set. For [39], we report all the
available metrics for soft/hard attention from their paper (missing numbers are marked by -).

Method

Beam Size=2

Beam Size=3

Beam Size=4

B1 B2 B3 B4 M R

B1 B2 B3 B4 M R
LSTM [16] .715 .545 .407 .304 .248 .526 .940 .178 .715 .544 .409 .310 .249 .528 .946 .178 .714 .543 .410 .311 .250 .529 .951 .179
CNN
.712 .541 .404 .303 .248 .527 .937 .178 .709 .538 .403 .303 .247 .525 .929 .176 .706 .533 .400 .302 .247 .522 .925 .175
CNN+Attn .718 .549 .411 .306 .248 .528 .942 .177 .722 .553 .418 .316 .250 .531 .952 .179 .718 .550 .415 .314 .249 .528 .951 .179

B1 B2 B3 B4 M R

C

C

C

S

S

S

Table 2: Comparison of different methods (metrics same as Table 1) with beam search on the output word probabilities.
Our results show that with beam size= 3 our CNN outperforms LSTM [16] on all metrics. Note, compared to Table 1, the
performance improves with beam search. We use the MS COCO test split for this experiment. For beam search, we pick one
caption with maximum log probability (sum of log probability of words) from the top-k beams and report the above metrics
for it. Beam = 1 is same as the test set results reported in Table 1.

discussed above.

To discuss attention more formally, let dj denote the em-
bedding of word j in the conv module (i.e., its activations
after GLU shown in Figure 4), let W refer to a linear layer
applied to dj, let ci denote a 512-dimensional spatial conv-5
feature at location i (in 7 × 7 feature map) and let aij indi-
cate the attention parameters. With this notation at hand,
the attention parameter aij is computed via

exp(W (dj)T ci)

exp(W (dj)T ci)

,

aij =

(cid:80)
i

(6)

and the attended image vector for word j is obtained from
(cid:80)
i

aijci.

Note that [39] uses the LSTM hidden state to compute
the attention parameters. Instead, we compute attention pa-

rameters using the conv-layer activations. This form of at-
tention mechanism was ﬁrst proposed in [3].

6. Results and Analysis

In this section, we demonstrate the following results:

• Our convolutional (or CNN) approach performs on par
with LSTM (or RNN) based approaches on image cap-
tioning metrics (Table 1). Our performance improves
with beam search (Table 2).

• Adding attention to our CNN gives improvements
on metrics and we outperform the LSTM+Attn base-
line [39] (Table 1). Figure 6 shows that with attention
we identify salient objects for the given image.

• We analyze the CNN and RNN approaches and show
that CNN produces (1) more entropy in the output

c5 (Beam = 1)

c40 (Beam = 1)

B1 B2 B3 B4 M R
.704 .528 .384 .278 .241 .517 .876 .880 .778 .656 .537 .321 .655 .898
LSTM
CNN+Attn .708 .534 .389 .280 .241 .517 .872 .883 .786 .667 .545 .321 .657 .893

B1 B2 B3 B4 M R

C

C

c5 (Beam = 3)

c40 (Beam = 3)

B1 B2 B3 B4 M R
.710 .537 .399 .299 .246 .523 .904 .889 .794 .681 .570 .334 .671 .912
LSTM
CNN+Attn .715 .545 .408 .304 .246 .525 .910 .896 .805 .694 .582 .333 .673 .914

B1 B2 B3 B4 M R

C

C

Table 3: Above, we show that CNN outperforms LSTM on BLEU metrics and gives comparable scores to LSTM on other
metrics for test split on MSCOCO evaluation server. Here, we submitted our results to the MSCOCO evaluation server to
evaluate on the hidden test split. Note, this test split of 40, 775 images is different from the 5000 images test split used in
Tables 1 and 2. We compare our CNN+Attn method to the LSTM baseline on standard evaluation metrics: BLEU-1 (B1),
BLEU-2 (B2), BLEU-3 (B3), BLEU-4 (B4), METEOR (M), ROUGE (R) and CIDEr (C). The c5 scores above are computed
with 5 reference captions per test image and c40 scores are computed with 40 reference captions. We show comparison
results for beam size 1 and beam size 3 for both the methods.

LSTM: a man and a woman
in a suit and tie
CNN: a black and white photo
of a man and woman in a suit
GT: A man sitting next to a
woman while wearing a suit.

LSTM: a man is walking down
a path in the woods
CNN: a truck is parked in
the dirt near a tree
GT: a truck is parked at a
campground with snow on it

LSTM: a cat is laying
down on a bed
CNN: a polar bear is drinking
water from a white bowl
GT: A white polar bear laying
on top of a pool of water

LSTM: a bear is standing
on a rock in a zoo
CNN: two bears are walking
on a rock in the zoo
GT: two bears touching
noses standing on rocks

LSTM: a box of donuts with
a variety of toppings
CNN: a box of doughnuts with
sprinkles and a sign
GT:A bunch of doughnuts
with sprinkles on them

LSTM: a dog is standing in
the grass near a tree
CNN: a dog is standing in
the grass with a frisbee
in its mouth
GT: large dog retrieving
the frisbee for his owner

LSTM: a parking meter
with a sign on it
CNN: a doll is sitting
next to a parking meter
GT: A doll with articulated
joints stares from her perch
between two parking meters.

LSTM: a boat is docked in
the water near a dock
CNN: a boat is docked in
the water near a mountain
GT: A white boat ﬂoating on
a lake under mountains

LSTM: a cat is standing on
top of a refrigerator
CNN: a cat is standing in a
kitchen looking at the camera
GT: A cat in a kitchen
on top of a refrigerator

LSTM: a dog and a
dog in a ﬁeld
CNN: two cows are
standing in a ﬁeld of grass
GT: A dog and a horse
standing near each other

Figure 5: Captions generated by our CNN are compared to the LSTM and ground-truth caption. In the examples above our
CNN can describe things like black and white photo, polar bear/white bowl, number of bears, sign in the donut image which
LSTM fails to do. The last two images (bottom right) show failure cases for CNN. Typically we observe that CNN and LSTM
captions are of similar quality. We use our CNN+Attn method (Section 5.1) and the MSCOCO test split for these results.

probability distribution, (2) gives better word predic-
tion accuracy (Figure 7), and (3) does not suffer as
much from vanishing gradients (Figure 9).

volutional image captioning is available on github.1

6.1. Dataset and Baselines

• In Table 4, we show that a CNN with 1.5× more pa-
rameters can be trained in comparable time. This is
because we avoid the sequential processing of RNNs.

The details of our experimental setup and these results
are discussed below. PyTorch implementation of our con-

We

conducted experiments on the MS COCO
dataset [18]. Our train/val/test splits follow [16, 39].
We use 113287 training images, 5000 images for valida-
tion, and 5000 for testing. Henceforth, we will refer to
our approach as CNN, and our approach with the attention
(Section 5.1) as CNN+Attn. We use the following naming

1https://github.com/aditya12agd5/convcap

CNN: a baby holding a
toothbrush in his hand
GT: A child holds a
toothbrush in their hand.

CNN: a plate of food with
broccoli and rice
GT: A BBQ steak on a plate
next to mashed potatoes
and mixed vegetables.

a

a

baby

holding

a

toothbrush

in

... hand

plate

of

food

with

broccoli

... rice

a

CNN: a man sitting on a
bench overlooking the ocean
GT: A man sitting on top
of a bench near the ocean
Figure 6: We overlay the attention parameters on the image. These results show that we focus on salient objects such
as broccoli, bench, toothbrush in the image when predicting these words. Also, the attention is spread out/uniform when
predicting words such as a, of and on which are unrelated to image content.

... ocean

sitting

bench

man

on

a

convention for our baselines: [16] is denoted by LSTM and
[39] is referred to as LSTM+Attn.

6.2. Comparison on Image Captioning Metrics

We consider multiple conventional evaluation metrics,
BLEU-1, BLEU-2, BLEU-3, BLEU-4 [24], METEOR [8],
ROUGE [17], CIDEr [36] and SPICE [1]. See Table 1 for
the performance on all these metrics for our val/test splits.
Note that we obtain comparable CIDEr scores and better
SPICE scores than LSTM on test set with our CNN+Attn
method. Our BLEU, METEOR, ROUGE scores are less
than the LSTM ones, but the margin is very small. Our
CNN+Attn method outperforms the LSTM+Attn baseline
on the test set for all metrics reported in [39]. For Table 1,
we form the caption by choosing the word with maximum
probability at each step. The metrics are reported for this
one caption formed by choosing maximum probability word
at every step.

Instead of sampling the maximum probability words, we
also perform beam search with different beam sizes. We
perform beam search for both LSTM and our CNN meth-
ods. With beam search, we pick the maximum probability
caption (sum of log word probability in the beam). The re-
sults reported in Table 2 demonstrate that with beam size
of 3 we achieve better BLEU, ROUGE, CIDEr scores than
LSTM and equal METEOR and SPICE scores.

In Table 3, we show the results obtained on the

MSCOCO evaluation server. These results are computed
over a test set of 40, 775 images for which ground-truth
is not publicly available. We demonstrate that our method
does better on all BLEU metrics, especially with beam size
3, we perform better than the LSTM based method.

6.3. Qualitative Comparison

See Figure 5 for a qualitative comparison of captions
generated by CNN and LSTM. In Figure 6, we overlay the
attention parameters on the image for each word prediction.
Note that our attention parameters are 7 × 7 as described
in Section 5.1 and therefore the image is divided in a 7 × 7
grid. These results show that our attention focuses on salient
objects such as man, broccoli, ocean, bench, etc., when pre-
dicting these respective words. Our results also show that
the attention is uniform when predicting words such as a,
of, on, etc., which are unrelated to the image content.

6.4. Analysis of CNN and RNN

In Table 4 we report the number of trainable parameters
and the training time per epoch. CNNs with 1.5 times more
parameters can be trained in comparable time.

Table 1, 2 and 3 show that we obtain comparable per-
formance from both CNN and RNN/LSTM-based methods.
Encouraged by this result, we analyze the characteristics of
these two methods. For fair comparison, we use our CNN
without attention, since the RNN method does not use spa-

# Parameters Train time per epoch

7. Related Work

Method
LSTM [16]
Our CNN
Our CNN+Attn

13M
19M
20M

1529s
1585s
1620s

Table 4: Comparison of train time (in seconds) for LSTM
and CNN. We train a CNN faster per parameter than the
LSTM. This is because CNN is not sequential like the
LSTM. We use PyTorch implementation of [16] and our
CNN-based method for fair comparison. The timings are
obtained on Nvidia Titan X GPU.

tial image features. First, we compare the negative log- like-
lihoods (or cross-entropy loss) on a subset of train and the
entire val set (see Figure 7 (a)). We ﬁnd that the loss is
higher for CNN than RNN, this is because CNNs are being
penalized for producing less-peaky word probability distri-
butions. To evaluate this further, we plot the entropy of the
output probability distribution (Figure 7 (b)) and the clas-
siﬁcation accuracy, i.e., the number of times the maximum
probability word is the ground truth (Figure 7 (c)). These
plots show that RNNs are good at producing low entropy
and therefore peaky word probability distributions at the
output, while CNNs produce less peaky distributions (and
high entropy). Less peaky distributions are not necessarily
bad, particularly for a problem like image captioning, where
multiple word predictions are possible. Despite, less peaky
distributions, Figure 7(c) shows that the maximum probabil-
ity word is correct more often on the train set and it is within
approx. 1% accuracy on the val set. Note, cross-entropy loss
is a proxy for the classiﬁcation accuracy and we show that
CNNs have higher cross entropy loss, but their classiﬁca-
tion accuracy is good. Less peaky posterior distributions
provided by a CNN may be indicative of CNNs being more
capable of predicting diverse captions.

In Figure 8, we plot the unique words predicted at ev-
ery word position or time-step. The plot is for word posi-
tions 1 to 13. This plot shows that for the CNN we have
higher unique words for more word positions than LSTM.
This supports our analysis that CNNs have less peaky (or
one-hot) posteriors and therefore can produce more diver-
sity. For these diversity experiments, we perform a beam
search with beam size 10 and use all the top 10 beams.

Since RNNs/LSTMs are known to suffer from vanishing
gradient problems, in Figure 9, we plot the gradient norm at
the output embedding/classiﬁcation layer and the gradient
norm at the input embedding layer. The values are averaged
over 1 training epoch. These plots show that the gradients
in RNN/LSTM diminishes more than the ones in CNNs.
Hence RNN/LSTM nets are more likely to suffer from van-
ishing gradients, which stalls learning. If learning is stalled,
for larger datasets than the ones we currently use for image
captioning, the performance of RNN and CNN may differ
signiﬁcantly.

Describing the content of an observed image is related
to a large variety of tasks. Object detection [26, 27] and se-
mantic segmentation [22, 29] can be used to obtain a list of
objects. Detection of co-occurrence patterns and relation-
ships between objects can help to form sentences. Generat-
ing sentences by taking advantage of surrogate tasks is then
a multi-step approach which is beneﬁcial for interpretability
but lacks a joint objective that can be trained end-to-end.

Early techniques formulate image captioning as a re-
trieval problem and ﬁnd the best ﬁtting description from a
pool of possible captions [12, 15, 23, 32]. Those techniques
are built upon the idea that the ﬁtness between available tex-
tual descriptions and images can be learned. While this per-
mits end-to-end training, matching image descriptors to a
sufﬁciently large pool of captions is computationally expen-
sive. In addition, constructing a database of captions that is
sufﬁcient for describing a reasonably large fraction of im-
ages seems prohibitive.

To address this issue, recurrent neural nets (RNNs) or
probabilistic models like Markov chains, which decompose
the space of a caption into a product space of individual
words are compelling. The success of RNNs for image cap-
tioning is based on a key component, i.e., the Long-Short-
Term-Memory (LSTM) [11] or recent alternatives like the
gated recurrent unit (GRU) [6]. These components capture
long-term dependencies by adding a memory cell, and they
address the vanishing or exploding gradient issue of classi-
cal RNNs to some degree.

Based on this success, [20] train a vision (or image)
CNN and a language RNN that shares a joint embedding
layer. [38] jointly train a vision (or image) CNN with a
language RNN to generate sentences, [39] extends [38]
with additional attention parameters and learns to iden-
tify salient objects for caption generation. [16] use a bi-
directional RNN along with a structured loss function in a
shared vision-language space. These recurrent neural nets
have found widespread use for captioning because they have
been shown to produce remarkably ﬁtting descriptions.

Despite the fact that the above RNNs based on LSTM or
GRU units deliver remarkable results, e.g., for image cap-
tioning, their training procedure is all but trivial. For in-
stance, while the forward pass during training can be paral-
lelized across samples, it is inherently sequential in time,
limiting the parallelization abilities. To address this is-
sue, [34] proposed a PixelCNN architecture for conditional
image generation that approximates an RNN for the same
task. [9] and [35] demonstrate that convolutional architec-
tures with attention achieve state-of-the-art performance on
machine translation tasks. In spirit similar is our approach
for image captioning, which is convolutional but addresses
a different task.

(a) CNN gives higher cross-entropy loss on
train/val set of MSCOCO compared to LSTM.
But, as we show in (c), our CNN obtains bet-
ter % word accuracy than LSTM. Therefore, it
still assigns max. probability to correct word.
The CNN loss is high because our output prob-
ability distributions have more entropy than
LSTM.

(b) The entropy of the softmax layer (or pos-
terior probability distribution) of our CNN is
higher than the LSTM. For ambiguous prob-
lems such as image captioning, it is desirable to
have a less peaky (multi-modal) posterior (like
ours) capable of producing multiple captions,
rather than a peaky one (like LSTM).

(c) Even though the CNN training loss is
higher than LSTM, its word prediction accu-
racy is better than LSTM on train set. On val
set, the difference in accuracy between LSTM
and CNN is small (only ∼ 1%).

Figure 7: In the ﬁgures above we plot (a) Cross-entropy loss, (b) Entropy of the softmax layer, (c) Word accuracy on train/val
set. Blue line denotes our method and red denotes the LSTM based method [16]. In (a), (b) and (c) solid/dotted lines denote
train/val set of MSCOCO respectively. For these plots, at the end of every epoch we randomly sample 10k images from train
set and use the entire val set.

Figure 8: We perform beam search of beam size 10 with our
best performing LSTM and CNN models. We use the top
10 beams to plot the unique words predicted for every word
position. CNN produces higher unique words at more word
positions than LSTM.

8. Conclusion

We discussed a convolutional approach for

image
captioning and showed that it performs on par with existing
LSTM techniques. We also analyzed the differences
between RNN based learning and our method, and found
gradients of lower magnitude as well as overly conﬁdent
predictions to be existing LSTM network concerns.

Figure 9: Here, we plot the gradient norm at the input
embedding (ﬁrst) and output embedding (last/classiﬁcation)
layer. The gradient to the ﬁrst layer of LSTM decays by a
factor ∼ 100 in contrast to our CNN, where it decays by
a factor of ∼ 10. There is prior evidence in literature that
unlike CNNs, RNN/LSTMs suffer from vanishing gradients
[25, 33]. Here, we use solid line for input embedding layer
and dotted line for the classiﬁcation layer.

9. Acknowledgments
We thank Arun Mallya for providing us with an efﬁcient Py-
Torch implementation of [16], we thank Tanmay Gangwani
for the beam search code used for Figure 8 and we thank
David Forsyth for insightful discussions and his comments.
This material is based upon work supported in part by the
National Science Foundation under Grant No. 1718221.

References

[1] P. Anderson, B. Fernando, M. Johnson, and S. Gould. Spice:
Semantic propositional image caption evaluation. In ECCV,
2016. 7

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L. Zit-
nick, and D. Parikh. VQA: Visual Question Answering. In
International Conference on Computer Vision (ICCV), 2015.
1

[3] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. CoRR,
abs/1409.0473, 2014. 5

[4] S. Bengio, O. Vinyals, N. Jaitly, and N. Shazeer. Sched-
uled sampling for sequence prediction with recurrent neural
networks. In Proceedings of the 28th International Confer-
ence on Neural Information Processing Systems - Volume 1,
NIPS’15, pages 1171–1179, Cambridge, MA, USA, 2015.
MIT Press. 3

[5] X. Chen and C. L. Zitnick. Mind’s eye: A recurrent vi-
In 2015
sual representation for image caption generation.
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2422–2431, June 2015. 1

[6] K. Cho, B. van Merri¨enboer, C¸ . G¨ulc¸ehre, D. Bahdanau,
F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase
representations using rnn encoder–decoder for statistical ma-
In Proceedings of the 2014 Confer-
chine translation.
ence on Empirical Methods in Natural Language Processing
(EMNLP), pages 1724–1734, Doha, Qatar, Oct. 2014. Asso-
ciation for Computational Linguistics. 2, 8

[7] A. Das, S. Kottur, K. Gupta, A. Singh, D. Yadav, J. M. F.
Moura, D. Parikh, and D. Batra. Visual dialog. 2017. 1
[8] M. Denkowski and A. Lavie. Meteor universal: Language
In
speciﬁc translation evaluation for any target language.
Proceedings of the EACL 2014 Workshop on Statistical Ma-
chine Translation, 2014. 7

[9] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning.
CoRR, abs/1705.03122, 2017. 1, 3, 4, 8

[10] A. Goyal, A. Lamb, Y. Zhang, S. Zhang, A. Courville, and
Y. Bengio. Professor forcing: A new algorithm for training
recurrent networks. pages 4601–4609. 2016. 3

[11] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural Comput., 9(8):1735–1780, Nov. 1997. 1, 2, 8
[12] M. Hodosh, P. Young, and J. Hockenmaier. Framing image
description as a ranking task: Data, models and evaluation
metrics. J. Artif. Int. Res., 47(1), May 2013. 8

[13] T. K. Huang, F. Ferraro, N. Mostafazadeh,

I. Misra,
A. Agrawal, J. Devlin, R. B. Girshick, X. He, P. Kohli, D. Ba-
tra, C. L. Zitnick, D. Parikh, L. Vanderwende, M. Galley, and
M. Mitchell. Visual storytelling. CoRR, abs/1604.03968,
2016. 1

[14] U. Jain, Z. Zhang, and A. G. Schwing. Creativity: Gener-
ating diverse questions using variational autoencoders.
In
Computer Vision and Pattern Recognition, 2017. 1

[15] Y. Jia, M. Salzmann, and T. Darrell. Learning cross-modality
similarity for multinomial data. In Proceedings of the 2011
International Conference on Computer Vision, ICCV ’11,

pages 2407–2414, Washington, DC, USA, 2011. IEEE Com-
puter Society. 8

[16] A. Karpathy and L. Fei-Fei. Deep visual-semantic align-
In 2015 IEEE
ments for generating image descriptions.
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 3128–3137, June 2015. 1, 2, 4, 5, 6, 7, 8,
9

[17] C.-Y. Lin. Rouge: a package for automatic evaluation of

summaries. July 2004. 7

[18] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon Objects in Context, pages 740–755. Springer Interna-
tional Publishing, Cham, 2014. 2, 6

[19] A. Mallya and S. Lazebnik. Recurrent models for situation

recognition. In ICCV, 2017. 1

[20] J. Mao, W. Xu, Y. Yang, J. Wang, and A. L. Yuille. Deep
captioning with multimodal recurrent neural networks (m-
rnn). CoRR, abs/1412.6632, 2014. 8

[21] N. Mostafazadeh, I. Misra, J. Devlin, M. Mitchell, X. He,
and L. Vanderwende. Generating natural questions about an
image. In ACL (1). The Association for Computer Linguis-
tics, 2016. 1

[22] M. Mostajabi, P. Yadollahpour, and G. Shakhnarovich. Feed-
forward semantic segmentation with zoom-out features. In
2015 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 3376–3385, June 2015. 8
[23] V. Ordonez, G. Kulkarni, and T. L. Berg. Im2text: Describ-
ing images using 1 million captioned photographs. In Pro-
ceedings of the 24th International Conference on Neural In-
formation Processing Systems, NIPS’11, pages 1143–1151,
USA, 2011. Curran Associates Inc. 8

[24] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu:
A method for automatic evaluation of machine translation.
In Proceedings of the 40th Annual Meeting on Association
for Computational Linguistics, ACL ’02, pages 311–318,
Stroudsburg, PA, USA, 2002. Association for Computational
Linguistics. 7

[25] R. Pascanu, T. Mikolov, and Y. Bengio. On the difﬁculty
of training recurrent neural networks. In Proceedings of the
30th International Conference on International Conference
on Machine Learning - Volume 28, ICML’13, pages III–
1310–III–1318. JMLR.org, 2013. 1, 9

[26] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection.
CoRR, abs/1506.02640, 2015. 8

[27] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Proceedings of the 28th International Conference on Neural
Information Processing Systems - Volume 1, NIPS’15, pages
91–99, Cambridge, MA, USA, 2015. MIT Press. 8

[28] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei. Imagenet large scale visual recog-
nition challenge. International Journal of Computer Vision,
115(3):211–252, Dec 2015. 4

[29] E. Shelhamer, J. Long, and T. Darrell. Fully convolutional
IEEE Trans. Pattern

networks for semantic segmentation.
Anal. Mach. Intell., 39(4):640–651, Apr. 2017. 8

[30] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In Computer Vision
and Pattern Recognition, 2016. 1

[31] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 4

[32] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014. 8

[33] I. Sutskever, J. Martens, and G. Hinton. Generating text with
recurrent neural networks. In L. Getoor and T. Scheffer, ed-
itors, Proceedings of the 28th International Conference on
Machine Learning (ICML-11), ICML ’11, pages 1017–1024,
New York, NY, USA, June 2011. ACM. 9

[34] A. van den Oord, N. Kalchbrenner, O. Vinyals, L. Espeholt,
A. Graves, and K. Kavukcuoglu. Conditional image genera-
tion with pixelcnn decoders. In NIPS, 2016. 1, 3, 4, 8
[35] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, L. Kaiser, and I. Polosukhin. Attention is all
you need. CoRR, abs/1706.03762, 2017. 1, 4, 8

[36] R. Vedantam, C. L. Zitnick, and D. Parikh.

Consensus-based image description evaluation.
pages 4566–4575. IEEE Computer Society, 2015. 7

Cider:
In CVPR,

[37] S. Venugopalan, H. Xu,

J. Donahue, M. Rohrbach,
R. Mooney, and K. Saenko. Translating videos to natural
language using deep recurrent neural networks. In NAACL
HLT, 2015. 1

[38] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
image caption generation with visual attention. In F. Bach
and D. Blei, editors, Proceedings of the 32nd International
Conference on Machine Learning, volume 37 of Proceed-
ings of Machine Learning Research, pages 2048–2057, Lille,
France, 07–09 Jul 2015. PMLR. 1, 8

[39] K. Xu, J. L. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhut-
dinov, R. S. Zemel, and Y. Bengio. Show, attend and tell:
Neural image caption generation with visual attention.
In
Proceedings of the 32Nd International Conference on In-
ternational Conference on Machine Learning - Volume 37,
ICML’15, pages 2048–2057. JMLR.org, 2015. 1, 2, 5, 6, 7,
8

[40] Y. Yang, C. L. Teo, H. Daum´e, III, and Y. Aloimonos.
Corpus-guided sentence generation of natural images.
In
Proceedings of the Conference on Empirical Methods in Nat-
ural Language Processing, EMNLP ’11, pages 444–454,
Stroudsburg, PA, USA, 2011. Association for Computational
Linguistics. 2

