Convolutional Sequence to Sequence Model for Human Dynamics

Chen Li∗

Wee Sun Lee

Zhen Zhang∗
Department of Computer Science,
National University of Singapore, Singapore
{lic,zhangz,leews,gimhee.lee}comp.nus.edu.sg

Gim Hee Lee

8
1
0
2
 
y
a
M
 
2
 
 
]

V
C
.
s
c
[
 
 
1
v
5
5
6
0
0
.
5
0
8
1
:
v
i
X
r
a

Abstract

Human motion modeling is a classic problem in com-
puter vision and graphics. Challenges in modeling human
motion include high dimensional prediction as well as ex-
tremely complicated dynamics.We present a novel approach
to human motion modeling based on convolutional neural
networks (CNN). The hierarchical structure of CNN makes
it capable of capturing both spatial and temporal correla-
tions effectively. In our proposed approach, a convolutional
long-term encoder is used to encode the whole given motion
sequence into a long-term hidden variable, which is used
with a decoder to predict the remainder of the sequence.
The decoder itself also has an encoder-decoder structure, in
which the short-term encoder encodes a shorter sequence to
a short-term hidden variable, and the spatial decoder maps
the long and short-term hidden variable to motion predic-
tions. By using such a model, we are able to capture both
invariant and dynamic information of human motion, which
results in more accurate predictions. Experiments show that
our algorithm outperforms the state-of-the-art methods on
the Human3.6M and CMU Motion Capture datasets. Our
code is available at the project website1.

1. Introduction

Understanding human motion is extremely important for
various applications in computer vision and robotics, partic-
ularly for applications that require interaction with humans.
For example, an unmanned vehicle must have the ability to
predict human motion in order to avoid potential collision in
a crowded street. Besides, applications such as sports anal-
ysis and medical diagnosis may also beneﬁt from human
motion modeling.

The biomechanical dynamics of human motion is ex-
tremely complicated. Although several analytic models
have been proposed, they are limited to few simple actions

∗Considered as equal contribution.
1https://github.com/chaneyddtt/Convolutional-

Sequence-to-Sequence-Model-for-Human-Dynamics

Figure 1. Frames on the left are the observations fed into our net-
work. The middle part is the short-term prediction results for RNN
(on the top) and our model (in the bottom). The right part is the
long-term prediction results, in which RNN converge to a mean
pose, while our model can predict future frames which are similar
to the ground truth (in the middle).

such as standing and walking [18]. For more complicated
actions, data-driven methods are required to attain accept-
able accuracy [3, 14, 18]. In this paper, we focus on the
human motion prediction task, using learning based meth-
ods from motion capture data.

Recently, along with the success of deep learning in vari-
ous areas of computer vision and machine learning, deep re-
current neural network based models have been introduced
in human motion prediction [5, 7, 10, 14]. In earlier works
[5, 10], it is often observed that there is a signiﬁcant dis-
continuity between the ﬁrst predicted frame of motion and
the last frame of the true observed motion. Martinez et al.
[14] solved the problem by adding a residual unit in the re-
current network. However, their residual unit based model
often converges to an undesired mean pose in the long-term
predictions, i.e., the predictor gives static predictions simi-
lar to the mean of the ground truth of future sequences (see
Figure 1). We believe that the mean pose problem is caused
by the fact that it is difﬁcult for recurrent models to learn
to keep track of long-term information; the mean pose be-
comes a good prediction of the future pose when the model
loses track of information from the distant past. For a chain-
structured RNN model, it takes n steps for two elements that

1

are n time steps apart to interact with each other; this may
make it difﬁcult for an RNN to learn a structure that is able
to exploit long-term correlations [6].

The current state-of-the-art for human motion modeling
[14] is based on the sequence-to-sequence model, which is
ﬁrst proposed for machine translation [16]. The sequence-
to-sequence model consists of an encoder and a decoder, in
which the encoder maps a given seed sequence to a hidden
variable, and the decoder maps the hidden variable to the
target sequence. A major difference between human motion
prediction and other sequence-to-sequence tasks is that hu-
man motion is a highly constrained system by environment
properties, human body properties and Newton’s Laws. As
a result, the encoder needs to learn these constraints from
a relative long seed sequence. However, RNN may not be
able to learn these constraints accurately, and the accumu-
lation of these errors in decoder may result in larger error in
long-term prediction.

Furthermore, the human body is often not static stable
during motion, and our central neural system must make
multiple parts of our body coordinate with each other to sta-
bilize the motion under gravity and other loads [20]. Thus
joints from different limbs have both temporal and spatial
correlations. A typical example is human walking. During
walking, most people tend to move left arm forward while
moving right leg forward. However, RNN based methods
have difﬁculties learning to capture this kind of spatial cor-
relations well, and thus may generate some unrealistic pre-
dictions. Despite these limitations, the RNN based method
[14] is considered to be the current state-of-the-art as its
performance is superior to other human motion prediction
methods in terms of accuracy.

In this paper, we build a convolutional sequence-to-
sequence model for the human motion prediction problem.
Unlike previous chain-structured RNN models, the hierar-
chical structure of convolutional neural networks allows it
to naturally model and learn both spatial dependencies as
well as long-term temporal dependencies [6]. We evalu-
ate the proposed method on the Human3.6M and the CMU
Motion Capture datasets. Experimental results show that
our method can better avoid the long-term mean pose prob-
lem, and give more realistic predictions. The quantitative
results also show that our algorithm outperforms state-of-
the-art methods in terms of accuracy.

2. Related Works

The main task of this work is human motion prediction
via convolutional models, while previous works[3, 5, 14]
mainly focus on RNN based models. We brieﬂy review the
literature as follows.

Modeling of human motion Data driven methods in hu-
man motion modeling face a series of difﬁculties including

high-dimensionality, complicated non-linear dynamics and
the uncertainty of human movement. Previously, Hidden
Markov Model [2], linear dynamics system [15], Gaussian
Process latent variable models [19] etc. have been applied
to model human motion. Due to limited computational re-
source, all these models have some trade-off between model
capacity and inference complexity. Conditional Restricted
Boltzmann Machine (CRBM) based method has also been
applied to human motion modeling [17]. However, CRBM
requires a more complicated training process and it also re-
quires sampling for approximate inference.

RNN based human motion prediction Due to the suc-
cess of recurrent models in sequence-to-sequence learn-
ing, a series of recurrent neural network based meth-
ods are proposed for the human motion prediction task
[5, 10, 14]. Most of these works have a recurrent network
based encoder-decoder structure, where the encoder accepts
a given motion frames or sequence and propagates an en-
coded hidden variable to the decoder, which then generates
the future motion frame or series. The main differences
in these works lie in their different encoder and decoder
structures. For example, in the Encoder-Recurrent-Decoder
(ERD) model [5], additional non-recurrent spatial encoder
and decoder are are added to its recurrent part, which cap-
tures the temporal dependencies [16]. In Structural-RNN
[10], several RNNs are stacked together according to a
hand-crafted spatial-temporal graph. Martinez et al. [14]
proposed a residual based model, which predicts the gradi-
ent of human motion rather than human motion directly, and
used a standard sequence-to -sequence learning model with
(GRU) [4] cell as the encoder and decoder. In these RNN
based models, fully-connected layers are used to learn a rep-
resentation of human action, and the recurrent middle layers
are applied to model the temporal dynamics. In contrast to
previous RNN based models, we use a convolutional model
to learn the spatial and the temporal dynamics at the same
time and we show that this outperforms the state-of-the-art
methods in human motion prediction.

Convolutional sequence-to-sequence model The task of
a sequence-to-sequence model is to generate a target se-
quence from a given seed sequence. Most sequence-to-
sequence models consist of two parts, an encoder which
encodes the seed sequence into a hidden variable and a de-
coder which generates the target sequence from the hidden
variable. Although RNNs seem to be a natural choice for se-
quential data, convolutional models have also been adopted
to sequence-to-sequence tasks such as machine translation.
Kalchbrenner and Blunsom [11] proposed the Recurrent
Continuous Translation Model (RCTM) which uses a con-
volutional model as encoder to generate hidden variables
and a RNN as decoder to generate target sequences, while

later methods [1, 6, 12] are fully convolutional sequence-
to-sequence model. However, unlike machine translation,
where only temporal correlations exist, there exist compli-
cated spatial-temporal dynamics in human motion. Thus we
design a convolutional sequence-to-sequence model that is
suitable for complicated spatial-temporal dynamics.

3. Network Architecture

We adapt a multi-layer convolutional architecture, which
has the advantage of expressing input sequences hierarchi-
cally. In particular, when we apply convolution to the in-
put skeleton sequences, lower layers will capture dependen-
cies between nearby frames and higher layers will capture
dependencies between distant frames. Unlike the chain-
structured RNN, the hierarchical structure of a multi-layer
convolutional architecture is designed to capture long-term
dependencies. Figure 2 shows an illustration of the architec-
ture of our network, where the convolutional encoding mod-
ule (CEM) plays the central role. We use the CEM module
as long and short-term encoder. The long-term encoder is
used to memorize a given motion sequence as the long-term
hidden variable ze
l , and the short-term encoder is used to
map a shorter sequence to the short-term hidden variable
ze
s. Finally the hidden variables ze
s are concatenated
together and propagated to the decoder to give a prediction
of next frame. The short-term encoder and decoder are ap-
plied recursively to produce the whole predicted sequence.
We use convolutional layers with stride two in the CEM,
thus two elements with distance n are able to interact with
each other in O(log n) operations. Furthermore, we use a
rectangle convolution kernel to get a larger perception range
in the spatial domain.

l and ze

3.1. Convolutional sequence-to-sequence model

Similar to previous works [3, 14], we also use an
encoder-decoder model as a predictor to generate future
motion sequences. However unlike previous works, we
adapt a convolutional model for this sequence-to-sequence
modeling task. Speciﬁcally, both the encoder and the de-
coder consist of similar convolutional structure, which com-
putes a hidden variable based on a ﬁxed number of in-
puts. There have been several convolutional sequence-to-
sequence models [1, 6, 12] that have been shown to give bet-
ter performance than RNN based models in machine trans-
lation. However, these models mainly use convolution in
the temporal domain to capture correlations, while in hu-
man motion there are also complicated spatial correlations
between different body parts.

We ﬁrst formalize the human motion prediction problem
before giving more details of our convolutional model. As-
sume that we are given a series of seed human motion poses
X1:t = [x1, x2, . . . , xt], where each xi ∈ RL is a param-
eterization of human pose. The goal of human motion pre-

diction is to generate a target prediction ˆX(t+1):(t+T ) for
the next T frame poses.

We aim to capture the long-term information, such as
categories of actions, human body properties (e.g. step
length, step pace etc.), environmental constraints etc. from
the seed human motion poses. To this end, a convolutional
long-term encoder is used in our model. It maps the whole
sequence X1:t = [x1, x2, . . . , xt] to a hidden variable

l = he
ze

l (X1:t | we

l ),

(1)

where we

l is the parameter of the long-term encoder he
l .
Our decoder has an encoder-decoder structure, which
consists of a short-term encoder and a spatial decoder. The
short-term encoder

s = he
ze

s(Xt−C+1:t | we

s),

(2)

s is the parameter.

where we
It maps a shorter sequence
Xt−C+1:t, which consists of C neighboring frames of the
current frame, to a hidden variable. Note that our short-term
encoder is a sliding window of size C, it only encodes the
most recent C frames. Finally, the long-term and short-term
hidden variables ze
e are concatenated together as a in-
put of the spatial decoder, which predicts the next pose ˆxt+1
as

l and ze

ˆxt+1 = hd([ze

l , ze

s]| wd),

(3)

where wd is the parameter of the spatial decoder hd. To pre-
dict a sequence, the short-term encoder will slide one frame
forward once a new frame is generated, thus the short-term
encoder and decoder are applied recursively as

s(k) = he
ze
ˆxt+k = hd([ze

s( ¯Xt−C+k:t+k−1| we
s),

l , ze

s(k)]| wd),

(4)

where

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k, . . . , xt,

ˆxt+1, . . . , ˆxt+k−1].

(5)

In our model, the long-term encoder and short-term en-
coder have the similar structure, i.e.
the CEM, which in-
cludes 3 convolutional layers and 1 fully connected layers.
The number of output channels for each convolutional layer
is 64, 128 and 128, and the output number of the fully con-
nected layer is 512. As discussed earlier, the CEM needs
to capture long-term correlations in order to improve the
prediction accuracy. Thus the stride of every convolutional
layer is set to 2. With such convolutional layers, two ele-
ments of distance n are able to interact with each other with
a path length O(log(n)), while O(n) steps are required in a
conventional RNN.

Figure 2. An illustration of our network architecture.

3.2. Optimization

Furthermore, the perception range of the CEM in the
spatial domain should be large enough to capture the spa-
tial correlations of joints from different limbs. Hence, we
use a rectangle 2 × 7 convolutional kernel (2 along tem-
poral domain, and 7 along spatial domain) to enlarge the
perception domain in the spatial domain. We use a sim-
ple two layer fully-connected neural network for the spatial
decoder. The ﬁrst layer maps a 1024 dimensional hidden
variable to 512 dimensions and uses a leaky ReLU as the
activation function. The second layer maps the hidden vari-
able to one frame of human poses, and does not include an
activation function. We also use a residual link in our net-
work as suggested by previous works [8, 14]. This means
that out decoder actually predicts the residual value rather
than directly generates the next frame. Consequently, the
output of our network consists of two parts:

ˆxt+k = hd([ze

l , ze

s(k)]| wd) + ˆxt+k−1.

(6)

hd and wd denote the decoder and its parameters.

Comparison to RNN In recurrent neural network based
models (e.g. [5, 14, 16]), the encoded hidden variable often
serves as the initial state of the decoding RNN. Thus during
the long propagation path in RNN, the encoded information
may vanish. However, our proposed model does not have
this problem because the encoded hidden variable ze
l is al-
ways maintained. In recurrent neural networks, the model
captures short-term dynamical information through varia-
tion of hidden states. In our model, the short-term dynami-
cal information is captured by the short-term encoder from a
short sequence. By using such a structure, our model is able
to capture long-term invariant information and short-term
dynamical information, and thus resulting in better perfor-
mance in both long-term and short-term predictions.

During training, we use the mean squared error of the

predicted poses as the loss function:

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

=

1
T

T
(cid:88)

t(cid:48)=1

(cid:107)ˆxt+t(cid:48) − xt+t(cid:48) (cid:107)2
2.

(7)

Three different types of regularizing technique are used to
prevent overﬁtting - dropout, (cid:96)2 regularizer and adversar-
ial regularizer. We added a dropout layer between the last
convolutional and ﬁrst fully-connected layers in our CEM
module. In our decoder, we added a dropout layer between
the two fully-connected layer. The dropout probability in
both dropout layers is set to 0.5.

Motivated by the generative adversarial network (GAN),
we apply an adversarial regularizer for the proposed model,
which mainly improves the qualitative performance. We
train an additional discriminator to classify the generated
and real sequences as follows

log D(X1:t+T | wD)

(8)

log(1 − D([X1:t, ˆXt+1:t+T ]| wD)).

min
wD

−

(cid:88)

X1:t+T

(cid:88)

−

[X1:t, ˆXt+1:t+T ]

The discriminator D is then used to encourage the genera-
tion of realistic sequences.

Finally, the objective becomes
(cid:88)

min
l ,we

s,wd

we

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

X1:t+T
+ λ2[(cid:107) we
− λadv log(D([X1:t, ˆXt+1:t+T ]| wD)),

2 + (cid:107) wd (cid:107)2
2]

2 + (cid:107) we

l (cid:107)2

s (cid:107)2

(9)

where the weights λ2 and λadv are set to 0.001 and 0.01, re-
spectively. In the optimization procedure, we used stochas-
tic gradient descent based optimizer to run iteratively opti-
mizing over (9) and (8).

Remarks There are multiple choices of ¯Xt−C+k:t+k−1
in (5), which may have different effects on the training re-
sults. In previous works, the corresponding part is often set
to ground truth, or ground truth with noise [5]. Besides set-
ting ¯Xt−C+k:t+k−1 as (5), it can also be set to

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k+1, . . . , xt,

(10)
ηˆxt+1 + (1 − η) xt+1, . . . , ηˆxt+k−1 + (1 − η) xt+k−1],

where η ∈ [0, 1] is a manually speciﬁed parameter.

Note that the window size of the short-term encoder C
may also affect the results. The model may not capture
enough short-term information when C is too small. On
the other hand, it may be a waste of computation when C
is too large since we already have the long-term encoder.
Hence, the value of C should be a trade-off between accu-
racy and computation. The effect of different window sizes
are explored in our experiments.

4. Experiments

In this section, we apply the proposed convolutional
model on several human motion prediction tasks. The pro-
posed method is compared with several recent and state-of-
the-art matching algorithms:

• The Encoder-Recurrent-Decoder (ERD) method [5];

• An three layer LSTM with linear encoder and decoder

(LSTM-3LR) [5];

• Stuctural Recurrent Neural Networks (SRNN) [10];

• Residual Recurrent Neural Networks (RRNN) [14];

• An three layer LSTM with an denoising auto encoder

(LSTM-AE) [7].

Our model is implemented in tensorﬂow, and we used
the ADAM [13] optimizer to optimize over our model. The
batch size is set to 64 and the learning rate is 0.0002. For
more optimizing details, please refer to Section 3.2. Fol-
lowing the setting of previous works[5, 10], the length of
seed pose sequence is set to 50, and the length of target se-
quence is set to 25. We trained RRNN [14] model based
on the public available implementation2. We quote the re-
sults from [14] for ERD, LSTM-3LR, SRNN, and [7] for
LSTM-AE.

Action speciﬁc vs. general model ERD [5], LSTM-3LR
[5] and SRNN [10] are action speciﬁc models, where they
train a speciﬁc model for each action. On the other hand,
the RRNN model [14] considers the more challenging task
of training a general model for multiple actions. In our ex-
periments, we also train a single model for multiple actions.

2https://github.com/una-dinosauria/human-

motion-prediction

4.1. Dataset and Preprosessing

In the experiments, we consider two datasets: the Human

3.6M dataset [9] and the CMU Motion Capture dataset 3.

The Human 3.6M dataset is currently the largest avail-
able video pose dataset, which provides accurate 3D body
joint locations recorded by a Vicon motion capture system.
It is regarded as one of the most challenging datasets be-
cause of the large pose variations performed by different
actors. There are 15 activity scenarios in total. Each ac-
tion scenario includes 12 trials lasting between 3000 to 5000
frames. The 12 trials are categorized as 6 subjects, where
each subject includes 2 trials. Each 3D pose consists of 32
joints plus a root orientation and displacement represented
as an exponential map.

During the experiments, each pose would subtract to the
mean pose over all trials and gets divided by the standard
deviation. We eliminate the joint angle dimensions with
constant standard deviation, which corresponds to joints
with less than three degrees of freedom. Furthermore, the
global rotation and translation are set to zero since our mod-
els are not trained with this information. Finally, the dimen-
sion of the input vector is set to 54. Similar to [5, 10, 14],
we treat the two sequences in subject 5 as the test set and
all others as the training set. For evaluation, we calculate
the Euclidean error in terms of Euler angle. Speciﬁcally,
we measure the Euclidean distance between our predictions
and the ground truth in terms of Euler angle for each action,
followed by calculating the mean value over all sequences
which are randomly selected from the test set.

We also apply our model to the CMU Motion Capture
dataset in order to test its generalization ability. There are
ﬁve main categories in the dataset - “human interaction”,
“interaction with environment”, “locomotion”, “physical
activities & sports” and “situations & scenarios”. We
choose some of the actions for our experiments based on
some criteria. Firstly, we do not use data from the “hu-
man interaction” category since multiple subjects motion
prediction is out of the scope of this paper. Secondly, ac-
tion categories which include less than six trials are ex-
cluded on the consideration that we need enough data for
each action to train our model. Lastly, some action cate-
gories in the dataset are actually combinations of other ac-
tions, e.g. actions in the subcategory “playground” consist
of jump, climb and other actions which already exist in the
dataset. We do not chose these action categories to avoid
repetition. Finally, eight actions are selected for our exper-
iments - running, walking and jumping from category “lo-
comotion”, basketball and soccer from category “physical
activities & sports”, wash windows from category “com-
mon behaviours and expressions”, trafﬁc direction and bas-
ketball signals from category “communication gestures and

3Available at http://mocap.cs.cmu.edu

Table 1. Motion prediction error in terms of Euler angle error for walking, eating, smoking and discussion in the Human3.6M dataset for
short-term of 80, 160, 320, 400, and long-term of 1000ms (best result in bold).

Walking

Eating

Smoking

Discussion

80

ms
ERD[5]

160 320 400 1000

160 320 400 1000

80
160 320 400 1000
0.93 1.18 1.59 1.78 N/A 1.27 1.45 1.66 1.80 N/A 1.66 1.95 2.35 2.42 N/A 2.27 2.47 2.68 2.76 N/A
LSTM-3LR[5] 0.77 1.00 1.29 1.47 N/A 0.89 1.09 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.88 2.12 2.25 2.23 N/A
0.81 0.94 1.16 1.30 N/A 0.97 1.14 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.22 1.49 1.83 1.93 N/A
0.33 0.56 0.78 0.85 1.14 0.26 0.43 0.66 0.81 1.34 0.35 0.64 1.03 1.15 1.83 0.37 0.77 1.06 1.10 1.79
RRNN [14]
LSTM-AE[7] 1.00 1.11 1.39 N/A 1.39 1.31 1.49 1.86 N/A 2.01 0.92 1.03 1.15 N/A 1.77 1.11 1.20 1.38 N/A 1.73
0.33 0.54 0.68 0.73 0.92 0.22 0.36 0.58 0.71 1.24 0.26 0.49 0.96 0.92 1.62 0.32 0.67 0.94 1.01 1.86

160 320 400 1000

SRNN [10]

Ours

80

80

Table 2. Motion prediction error in terms of Euler angle error for the rest actions in the Human3.6M dataset for short-term of 80, 160, 320,
400, and long-term of 1000ms (best result in bold).

Directions

Greeting

Phoning

Posing

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.44 0.70 0.86 0.97 1.59 0.55 0.90 1.34 1.51 2.03 0.62 1.10 1.54 1.70 1.89 0.40 0.76 1.37 1.62 2.56
0.39 0.60 0.80 0.91 1.45 0.51 0.82 1.21 1.38 1.72 0.59 1.13 1.51 1.65 1.81 0.29 0.60 1.12 1.37 2.65

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Purchases

Sitting

Sittingdown

Takingphoto

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.59 0.83 1.22 1.30 2.30 0.47 0.80 1.30 1.53 2.14 0.50 0.96 1.50 1.72 2.72 0.32 0.63 0.98 1.12 1.51
0.63 0.91 1.19 1.29 2.52 0.39 0.61 1.02 1.18 1.67 0.41 0.78 1.16 1.31 2.06 0.23 0.49 0.88 1.06 1.40

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Waiting

Walkingdog

80

ms

160 320 400 1000

160 320 400 1000
RNN [14] 0.35 0.68 1.14 1.34 2.34 0.55 0.91 1.23 1.35 1.86 0.29 0.59 0.86 0.92 1.42 0.43 0.75 1.12 1.27 1.90
0.30 0.62 1.09 1.30 2.50 0.59 1.00 1.32 1.44 1.92 0.27 0.52 0.71 0.74 1.28 0.38 0.68 1.01 1.13 1.77

160 320 400 1000

Ours

80

80

80

Walkingtogether
160 320 400 1000

Average

signals”. We pre-process the data and evaluate the results in
the same way as we did on the Human 3.6M dataset.

4.2. Evaluation on Human3.6M and CMU Datasets

We ﬁrst report our results on all actions in the Human
3.6M dataset for both short-term prediction of 80 ms, 160
ms, 320 ms, 400 ms and long-term prediction of 1000 ms.
Among the 15 actions in the dataset, the four actions “walk-
ing”, “eating”, “smoking” and “discussion” are commonly
used in comparison of action speciﬁc human motion predic-
tion methods. Thus we compare the accuracy of our method
against four action speciﬁc methods ERD [5], LSTM-3LR
[5], Structural RNN (SRNN) [10] and LSTM-AE [7], as
well as one general motion prediction method RRNN[14] in
Table 1. From the results, we can see that our method out-
performs the others in most cases. We also provide the qual-
itative comparison results with the state-of-the-art RRNN
method in Figure 3. Both RRNN and our model achieve
good result on “walking” because of its periodic property,
which makes the action easier to model. But for other ape-
riodic classes like “eating”, “smoking” and “discussion”,
RRNN quickly converges to a mean pose – the predicted
ﬁgure could not put its hands down in “eating” and raise its
hand up in “discussion”.

Rather than maintaining a gesture in which one leg
should be put on the other one in the action “smoking”,
RRNN generates an implausible motion in real life that
would cause the subject to go off balance. This further

shows that it is very important to take the correlation be-
tween different body parts into consideration so that the pre-
dicted pose is more realistic. In comparison, our model pre-
dicts plausible motions for both “eating” and “smoking”.
Furthermore, it is observed in the highly aperiodic action
“discussion” that our model can still predict the correct mo-
tion trend, i.e. raising the hands while talking, even though
this motion is not exactly the same as the ground truth. We
compare our algorithm with the general human prediction
model RRNN [14] for the other 11 actions. The quantitative
comparison results are provided in Table 2, which suggest
that our algorithm outperforms RRNN in most cases. Addi-
tionally, our method outperforms RRNN on the average in
both long and short-term predictions. The out-performance
of our method becomes more signiﬁcant for longer term
predictions.

We only consider the more challenging task of training
a general motion prediction model for all actions using the
CMU Motion Caption dataset. Hence, we only show com-
parison results with the state-of-the-art RRNN method. For
a fair comparison, both our model and RRNN are trained us-
ing the same settings on the Human3.6M dataset. The test-
ing error of each action is given in Table 3 and the average
testing error is given in Table 4. In the quantitative compar-
ison, our method outperforms the RRNN method in several
challenging actions such as jumping and running. The qual-
itative comparisons of running and jumping are also shown
in Figure 5. In the qualitative comparisons, we can see that

Figure 3. Qualitative results on for long-term prediction based on the Human3.6M dataset. Starting from the left top clockwisely the
four actions are “walking”, “sitting”, “smoking” and “discussion”. For each action, the top, middle and bottom sequences correspond to
RRNN, our model and ground truth respectively. The ﬁrst four frames are the last four frames of conditional seed frames and the next ones
are predicted frames. The RRNN converges to mean pose for eating and discussion, and generates a prediction which is not realistic for
smoking. Our model suffers less from the mean pose problem and predicts more realistic future.

Figure 4. Left: Prediction error vs time for the model. For the model with LSTM as encoder (LSTM ENC), the error accumulates much
faster than the original model, which means that our model performs better especially for long-term prediction. Middle: Comparison of
testing error with different window length C for training, namely 5, 10, 20. The long-term error decreases when window size increases
from 5 to 10, while the improvement is not obvious when further increase from 10 to 20. Right : Compare the testing error of our model
with and without adversarial regularizer, it shows that adversarial regularizer helps to train a model with better performance in long-term.

RRNN converges to mean pose for both running and jump-
ing. On the other hand, our prediction for running is very
close to the realistic one. For jumping, our model also pre-
dicts the correct motion trend, i.e. squatting followed by
jumping, and the main error comes from the duration of
squatting.

4.3. Ablation Study

The role of long-term encoder The long-term encoder in
our model is used to capture long-term dependencies. We
verify its effectiveness by removing it from our model. The
results in Table 5 suggest that the average error gets larger
without the long-term encoder, especially for long-term pre-
diction of 1000 ms.

Rectangular kernel over spatial axis We use a rectangular
kernel over the spatial axis (2 × 7 kernel) in our CEM in
order to better capture the dependencies between different

body parts. We also verify the effectiveness by comparing
it with square kernel (4 × 4 kernel) and rectangular kernel
over the temporal axis (7 × 2 kernel). The results in Table 6
indicate that the 2 × 7 kernel is the best choice.

Adversarial regularizer We use an adversarial regularizer
in our model to help generate more plausible motion.
In
order to explore the role of the adversarial regularizer, we
compare the performance of our model with and without the
regularizer. The result in Figure 4 suggests that the adver-
sarial regularizer helps to improve the performance of our
model even though marginally. Moreover, since the adver-
sarial regularizer is only used during training, it does not
add complexity to our model during inference.

Different window size C In our decoder, different window
sizes C result in different perception range. Intuitively, en-
larging the window size may enlarge the perception range
and results in better performance, but also requires more

Table 3. Motion prediction error in terms of Euler angle error for eight actions in the CMU Motion capture dataset for short-term of 80,
160, 320, 400, and long-term of 1000ms (best results in bold).

Basketball

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.50 0.80 1.27 1.45 1.78 0.41 0.76 1.32 1.54 2.15 0.33 0.59 0.93 1.10 2.05 0.56 0.88 1.77 2.02 2.40
0.37 0.62 1.07 1.18 1.95 0.32 0.59 1.04 1.24 1.96 0.25 0.56 0.89 1.00 2.04 0.39 0.60 1.36 1.56 2.01

Ours

80

80

80

Basketball Signal
160 320 400 1000

Directing Trafﬁc
160 320 400 1000

Jumping

Running

Soccer

Walking

Washwindow

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.33 0.50 0.66 0.75 1.00 0.29 0.51 0.88 0.99 1.72 0.35 0.47 0.60 0.65 0.88 0.30 0.46 0.72 0.91 1.36
0.28 0.41 0.52 0.57 0.67 0.26 0.44 0.75 0.87 1.56 0.35 0.44 0.45 0.50 0.78 0.30 0.47 0.80 1.01 1.39

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Figure 5. Qualitative result on the CMU Motion Capture dataset. Top: “Running” action; Bottom: “Jumping” action. For each action,
the top, middle are the results of RRNN and our model, and the ground truth is given in the bottom. The ﬁrst four frames are the last four
frames of the conditional seed frames and the next are the predicted ones.

Table 4. Average testing error on the CMU Motion Capture dataset
in terms of Euler angle error.

ms
RRNN [14]

Ours

80
0.38
0.31

160
0.62
0.52

320
1.02
0.86

400
1.17
0.99

1000
1.67
1.55

ms
4 × 4 kernel

Table 6. Comparison of different kernels on Human3.6M.
160
0.72
0.71
0.68

1000
1.80
1.79
1.77

320
1.05
1.05
1.01

80
0.41
0.40
0.38

400
1.16
1.17
1.13

2 × 7 kernel

7 × 2 kernel

Table 5. Our model w/wo long-term Encoder on Human3.6M.
1000
1.77
1.88

ms
With long-term Encoder

Without long-term Encoder

320
1.01
1.05

160
0.68
0.72

400
1.13
1.17

80
0.38
0.41

computation resources. We thus train three different models
with window size C = 5 10 and 20. In the right plot of Fig-
ure 4, we show average testing error over all 15 actions. The
result suggests that there is not much improvement when the
window size is larger than 10. Consequently, we set C = 20
for our model in view of the trade-off between accuracy and
computational accuracy.

two types of convolutional encoders in our model, namely
the long-term encoder and short-term encoder, so that both
distant and nearby temporal motion information can be used
for future prediction. We demonstrated that our model per-
forms better than existing state-of-the-art RNN based mod-
els, especially for long-term prediction tasks. Moreover,
we show that our model can generate better predictions for
complex actions due to the use of hierarchical convolutional
structure for modeling complicated spatial-temporal corre-
lations.

5. Conclusion

In this work, we proposed a convolutional sequence-to-
sequence model for human motion prediction. We adopted

This work was partially supported by the Singapore
MOE Tier 1 grant R-252-000-637-112 and the National
University of Singapore AcRF grant R-252-000-639-114.

Acknowledgements

learning with neural networks. In Advances in neural infor-
mation processing systems, pages 3104–3112, 2014.
[17] G. W. Taylor, G. E. Hinton, and S. T. Roweis. Modeling
In Advances
human motion using binary latent variables.
in neural information processing systems, pages 1345–1352,
2007.

[18] A. T¨ozeren. Human body dynamics: classical mechanics
and human movement. Springer Science & Business Media,
1999.

[19] J. M. Wang, D. J. Fleet, and A. Hertzmann. Gaussian process
dynamical models for human motion. IEEE transactions on
pattern analysis and machine intelligence, 30(2):283–298,
2008.

[20] D. A. Winter. Human balance and posture control during
standing and walking. Gait & posture, 3(4):193–214, 1995.

References

[1] J. Bradbury, S. Merity, C. Xiong, and R. Socher. Quasi-
In International Conference on

recurrent neural networks.
Learning Representation (ICLR) 2016, 2016.

[2] M. Brand and A. Hertzmann.

In
Proceedings of the 27th annual conference on Computer
graphics and interactive techniques, pages 183–192. ACM
Press/Addison-Wesley Publishing Co., 2000.

Style machines.

[3] J. Butepage, M. J. Black, D. Kragic, and H. Kjellstrom.
Deep representation learning for human motion prediction
and classiﬁcation. In The IEEE Conference on Computer Vi-
sion and Pattern Recognition (CVPR), July 2017.

[4] K. Cho, B. van Merri¨enboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder–
decoder approaches. Syntax, Semantics and Structure in Sta-
tistical Translation, page 103, 2014.

[5] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent
network models for human dynamics. In Proceedings of the
IEEE International Conference on Computer Vision, pages
4346–4354, 2015.

[6] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning. In
D. Precup and Y. W. Teh, editors, Proceedings of the 34th
International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 1243–
1252, International Convention Centre, Sydney, Australia,
06–11 Aug 2017. PMLR.

[7] P. Ghosh, J. Song, E. Aksan, and O. Hilliges. Learning hu-
man motion models for long-term predictions. arXiv preprint
arXiv:1704.02827, 2017.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016.

[9] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu.
Human3.6m: Large scale datasets and predictive meth-
IEEE
ods for 3D human sensing in natural environments.
Transactions on Pattern Analysis and Machine Intelligence,
36(7):1325–1339, jul 2014.

[10] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
RNN: Deep learning on spatio-temporal graphs. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5308–5317, 2016.

[11] N. Kalchbrenner and P. Blunsom. Recurrent continuous

translation models. In EMNLP, volume 3, page 413, 2013.

[12] N. Kalchbrenner, L. Espeholt, K. Simonyan, A. van den
Oord, A. Graves, and K. Kavukcuoglu. Neural machine
translation in linear time. CoRR, abs/1610.10099, 2016.
[13] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014.

[14] J. Martinez, M. J. Black, and J. Romero. On human mo-
tion prediction using recurrent neural networks. In The IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), July 2017.

[15] V. Pavlovic, J. M. Rehg, and J. MacCormick. Learning
In Advances
switching linear models of human motion.
in neural information processing systems, pages 981–987,
2001.

[16] I. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence

Convolutional Sequence to Sequence Model for Human Dynamics

Chen Li∗

Wee Sun Lee

Zhen Zhang∗
Department of Computer Science,
National University of Singapore, Singapore
{lic,zhangz,leews,gimhee.lee}comp.nus.edu.sg

Gim Hee Lee

8
1
0
2
 
y
a
M
 
2
 
 
]

V
C
.
s
c
[
 
 
1
v
5
5
6
0
0
.
5
0
8
1
:
v
i
X
r
a

Abstract

Human motion modeling is a classic problem in com-
puter vision and graphics. Challenges in modeling human
motion include high dimensional prediction as well as ex-
tremely complicated dynamics.We present a novel approach
to human motion modeling based on convolutional neural
networks (CNN). The hierarchical structure of CNN makes
it capable of capturing both spatial and temporal correla-
tions effectively. In our proposed approach, a convolutional
long-term encoder is used to encode the whole given motion
sequence into a long-term hidden variable, which is used
with a decoder to predict the remainder of the sequence.
The decoder itself also has an encoder-decoder structure, in
which the short-term encoder encodes a shorter sequence to
a short-term hidden variable, and the spatial decoder maps
the long and short-term hidden variable to motion predic-
tions. By using such a model, we are able to capture both
invariant and dynamic information of human motion, which
results in more accurate predictions. Experiments show that
our algorithm outperforms the state-of-the-art methods on
the Human3.6M and CMU Motion Capture datasets. Our
code is available at the project website1.

1. Introduction

Understanding human motion is extremely important for
various applications in computer vision and robotics, partic-
ularly for applications that require interaction with humans.
For example, an unmanned vehicle must have the ability to
predict human motion in order to avoid potential collision in
a crowded street. Besides, applications such as sports anal-
ysis and medical diagnosis may also beneﬁt from human
motion modeling.

The biomechanical dynamics of human motion is ex-
tremely complicated. Although several analytic models
have been proposed, they are limited to few simple actions

∗Considered as equal contribution.
1https://github.com/chaneyddtt/Convolutional-

Sequence-to-Sequence-Model-for-Human-Dynamics

Figure 1. Frames on the left are the observations fed into our net-
work. The middle part is the short-term prediction results for RNN
(on the top) and our model (in the bottom). The right part is the
long-term prediction results, in which RNN converge to a mean
pose, while our model can predict future frames which are similar
to the ground truth (in the middle).

such as standing and walking [18]. For more complicated
actions, data-driven methods are required to attain accept-
able accuracy [3, 14, 18]. In this paper, we focus on the
human motion prediction task, using learning based meth-
ods from motion capture data.

Recently, along with the success of deep learning in vari-
ous areas of computer vision and machine learning, deep re-
current neural network based models have been introduced
in human motion prediction [5, 7, 10, 14]. In earlier works
[5, 10], it is often observed that there is a signiﬁcant dis-
continuity between the ﬁrst predicted frame of motion and
the last frame of the true observed motion. Martinez et al.
[14] solved the problem by adding a residual unit in the re-
current network. However, their residual unit based model
often converges to an undesired mean pose in the long-term
predictions, i.e., the predictor gives static predictions simi-
lar to the mean of the ground truth of future sequences (see
Figure 1). We believe that the mean pose problem is caused
by the fact that it is difﬁcult for recurrent models to learn
to keep track of long-term information; the mean pose be-
comes a good prediction of the future pose when the model
loses track of information from the distant past. For a chain-
structured RNN model, it takes n steps for two elements that

1

are n time steps apart to interact with each other; this may
make it difﬁcult for an RNN to learn a structure that is able
to exploit long-term correlations [6].

The current state-of-the-art for human motion modeling
[14] is based on the sequence-to-sequence model, which is
ﬁrst proposed for machine translation [16]. The sequence-
to-sequence model consists of an encoder and a decoder, in
which the encoder maps a given seed sequence to a hidden
variable, and the decoder maps the hidden variable to the
target sequence. A major difference between human motion
prediction and other sequence-to-sequence tasks is that hu-
man motion is a highly constrained system by environment
properties, human body properties and Newton’s Laws. As
a result, the encoder needs to learn these constraints from
a relative long seed sequence. However, RNN may not be
able to learn these constraints accurately, and the accumu-
lation of these errors in decoder may result in larger error in
long-term prediction.

Furthermore, the human body is often not static stable
during motion, and our central neural system must make
multiple parts of our body coordinate with each other to sta-
bilize the motion under gravity and other loads [20]. Thus
joints from different limbs have both temporal and spatial
correlations. A typical example is human walking. During
walking, most people tend to move left arm forward while
moving right leg forward. However, RNN based methods
have difﬁculties learning to capture this kind of spatial cor-
relations well, and thus may generate some unrealistic pre-
dictions. Despite these limitations, the RNN based method
[14] is considered to be the current state-of-the-art as its
performance is superior to other human motion prediction
methods in terms of accuracy.

In this paper, we build a convolutional sequence-to-
sequence model for the human motion prediction problem.
Unlike previous chain-structured RNN models, the hierar-
chical structure of convolutional neural networks allows it
to naturally model and learn both spatial dependencies as
well as long-term temporal dependencies [6]. We evalu-
ate the proposed method on the Human3.6M and the CMU
Motion Capture datasets. Experimental results show that
our method can better avoid the long-term mean pose prob-
lem, and give more realistic predictions. The quantitative
results also show that our algorithm outperforms state-of-
the-art methods in terms of accuracy.

2. Related Works

The main task of this work is human motion prediction
via convolutional models, while previous works[3, 5, 14]
mainly focus on RNN based models. We brieﬂy review the
literature as follows.

Modeling of human motion Data driven methods in hu-
man motion modeling face a series of difﬁculties including

high-dimensionality, complicated non-linear dynamics and
the uncertainty of human movement. Previously, Hidden
Markov Model [2], linear dynamics system [15], Gaussian
Process latent variable models [19] etc. have been applied
to model human motion. Due to limited computational re-
source, all these models have some trade-off between model
capacity and inference complexity. Conditional Restricted
Boltzmann Machine (CRBM) based method has also been
applied to human motion modeling [17]. However, CRBM
requires a more complicated training process and it also re-
quires sampling for approximate inference.

RNN based human motion prediction Due to the suc-
cess of recurrent models in sequence-to-sequence learn-
ing, a series of recurrent neural network based meth-
ods are proposed for the human motion prediction task
[5, 10, 14]. Most of these works have a recurrent network
based encoder-decoder structure, where the encoder accepts
a given motion frames or sequence and propagates an en-
coded hidden variable to the decoder, which then generates
the future motion frame or series. The main differences
in these works lie in their different encoder and decoder
structures. For example, in the Encoder-Recurrent-Decoder
(ERD) model [5], additional non-recurrent spatial encoder
and decoder are are added to its recurrent part, which cap-
tures the temporal dependencies [16]. In Structural-RNN
[10], several RNNs are stacked together according to a
hand-crafted spatial-temporal graph. Martinez et al. [14]
proposed a residual based model, which predicts the gradi-
ent of human motion rather than human motion directly, and
used a standard sequence-to -sequence learning model with
(GRU) [4] cell as the encoder and decoder. In these RNN
based models, fully-connected layers are used to learn a rep-
resentation of human action, and the recurrent middle layers
are applied to model the temporal dynamics. In contrast to
previous RNN based models, we use a convolutional model
to learn the spatial and the temporal dynamics at the same
time and we show that this outperforms the state-of-the-art
methods in human motion prediction.

Convolutional sequence-to-sequence model The task of
a sequence-to-sequence model is to generate a target se-
quence from a given seed sequence. Most sequence-to-
sequence models consist of two parts, an encoder which
encodes the seed sequence into a hidden variable and a de-
coder which generates the target sequence from the hidden
variable. Although RNNs seem to be a natural choice for se-
quential data, convolutional models have also been adopted
to sequence-to-sequence tasks such as machine translation.
Kalchbrenner and Blunsom [11] proposed the Recurrent
Continuous Translation Model (RCTM) which uses a con-
volutional model as encoder to generate hidden variables
and a RNN as decoder to generate target sequences, while

later methods [1, 6, 12] are fully convolutional sequence-
to-sequence model. However, unlike machine translation,
where only temporal correlations exist, there exist compli-
cated spatial-temporal dynamics in human motion. Thus we
design a convolutional sequence-to-sequence model that is
suitable for complicated spatial-temporal dynamics.

3. Network Architecture

We adapt a multi-layer convolutional architecture, which
has the advantage of expressing input sequences hierarchi-
cally. In particular, when we apply convolution to the in-
put skeleton sequences, lower layers will capture dependen-
cies between nearby frames and higher layers will capture
dependencies between distant frames. Unlike the chain-
structured RNN, the hierarchical structure of a multi-layer
convolutional architecture is designed to capture long-term
dependencies. Figure 2 shows an illustration of the architec-
ture of our network, where the convolutional encoding mod-
ule (CEM) plays the central role. We use the CEM module
as long and short-term encoder. The long-term encoder is
used to memorize a given motion sequence as the long-term
hidden variable ze
l , and the short-term encoder is used to
map a shorter sequence to the short-term hidden variable
ze
s. Finally the hidden variables ze
s are concatenated
together and propagated to the decoder to give a prediction
of next frame. The short-term encoder and decoder are ap-
plied recursively to produce the whole predicted sequence.
We use convolutional layers with stride two in the CEM,
thus two elements with distance n are able to interact with
each other in O(log n) operations. Furthermore, we use a
rectangle convolution kernel to get a larger perception range
in the spatial domain.

l and ze

3.1. Convolutional sequence-to-sequence model

Similar to previous works [3, 14], we also use an
encoder-decoder model as a predictor to generate future
motion sequences. However unlike previous works, we
adapt a convolutional model for this sequence-to-sequence
modeling task. Speciﬁcally, both the encoder and the de-
coder consist of similar convolutional structure, which com-
putes a hidden variable based on a ﬁxed number of in-
puts. There have been several convolutional sequence-to-
sequence models [1, 6, 12] that have been shown to give bet-
ter performance than RNN based models in machine trans-
lation. However, these models mainly use convolution in
the temporal domain to capture correlations, while in hu-
man motion there are also complicated spatial correlations
between different body parts.

We ﬁrst formalize the human motion prediction problem
before giving more details of our convolutional model. As-
sume that we are given a series of seed human motion poses
X1:t = [x1, x2, . . . , xt], where each xi ∈ RL is a param-
eterization of human pose. The goal of human motion pre-

diction is to generate a target prediction ˆX(t+1):(t+T ) for
the next T frame poses.

We aim to capture the long-term information, such as
categories of actions, human body properties (e.g. step
length, step pace etc.), environmental constraints etc. from
the seed human motion poses. To this end, a convolutional
long-term encoder is used in our model. It maps the whole
sequence X1:t = [x1, x2, . . . , xt] to a hidden variable

l = he
ze

l (X1:t | we

l ),

(1)

where we

l is the parameter of the long-term encoder he
l .
Our decoder has an encoder-decoder structure, which
consists of a short-term encoder and a spatial decoder. The
short-term encoder

s = he
ze

s(Xt−C+1:t | we

s),

(2)

s is the parameter.

where we
It maps a shorter sequence
Xt−C+1:t, which consists of C neighboring frames of the
current frame, to a hidden variable. Note that our short-term
encoder is a sliding window of size C, it only encodes the
most recent C frames. Finally, the long-term and short-term
hidden variables ze
e are concatenated together as a in-
put of the spatial decoder, which predicts the next pose ˆxt+1
as

l and ze

ˆxt+1 = hd([ze

l , ze

s]| wd),

(3)

where wd is the parameter of the spatial decoder hd. To pre-
dict a sequence, the short-term encoder will slide one frame
forward once a new frame is generated, thus the short-term
encoder and decoder are applied recursively as

s(k) = he
ze
ˆxt+k = hd([ze

s( ¯Xt−C+k:t+k−1| we
s),

l , ze

s(k)]| wd),

(4)

where

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k, . . . , xt,

ˆxt+1, . . . , ˆxt+k−1].

(5)

In our model, the long-term encoder and short-term en-
coder have the similar structure, i.e.
the CEM, which in-
cludes 3 convolutional layers and 1 fully connected layers.
The number of output channels for each convolutional layer
is 64, 128 and 128, and the output number of the fully con-
nected layer is 512. As discussed earlier, the CEM needs
to capture long-term correlations in order to improve the
prediction accuracy. Thus the stride of every convolutional
layer is set to 2. With such convolutional layers, two ele-
ments of distance n are able to interact with each other with
a path length O(log(n)), while O(n) steps are required in a
conventional RNN.

Figure 2. An illustration of our network architecture.

3.2. Optimization

Furthermore, the perception range of the CEM in the
spatial domain should be large enough to capture the spa-
tial correlations of joints from different limbs. Hence, we
use a rectangle 2 × 7 convolutional kernel (2 along tem-
poral domain, and 7 along spatial domain) to enlarge the
perception domain in the spatial domain. We use a sim-
ple two layer fully-connected neural network for the spatial
decoder. The ﬁrst layer maps a 1024 dimensional hidden
variable to 512 dimensions and uses a leaky ReLU as the
activation function. The second layer maps the hidden vari-
able to one frame of human poses, and does not include an
activation function. We also use a residual link in our net-
work as suggested by previous works [8, 14]. This means
that out decoder actually predicts the residual value rather
than directly generates the next frame. Consequently, the
output of our network consists of two parts:

ˆxt+k = hd([ze

l , ze

s(k)]| wd) + ˆxt+k−1.

(6)

hd and wd denote the decoder and its parameters.

Comparison to RNN In recurrent neural network based
models (e.g. [5, 14, 16]), the encoded hidden variable often
serves as the initial state of the decoding RNN. Thus during
the long propagation path in RNN, the encoded information
may vanish. However, our proposed model does not have
this problem because the encoded hidden variable ze
l is al-
ways maintained. In recurrent neural networks, the model
captures short-term dynamical information through varia-
tion of hidden states. In our model, the short-term dynami-
cal information is captured by the short-term encoder from a
short sequence. By using such a structure, our model is able
to capture long-term invariant information and short-term
dynamical information, and thus resulting in better perfor-
mance in both long-term and short-term predictions.

During training, we use the mean squared error of the

predicted poses as the loss function:

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

=

1
T

T
(cid:88)

t(cid:48)=1

(cid:107)ˆxt+t(cid:48) − xt+t(cid:48) (cid:107)2
2.

(7)

Three different types of regularizing technique are used to
prevent overﬁtting - dropout, (cid:96)2 regularizer and adversar-
ial regularizer. We added a dropout layer between the last
convolutional and ﬁrst fully-connected layers in our CEM
module. In our decoder, we added a dropout layer between
the two fully-connected layer. The dropout probability in
both dropout layers is set to 0.5.

Motivated by the generative adversarial network (GAN),
we apply an adversarial regularizer for the proposed model,
which mainly improves the qualitative performance. We
train an additional discriminator to classify the generated
and real sequences as follows

log D(X1:t+T | wD)

(8)

log(1 − D([X1:t, ˆXt+1:t+T ]| wD)).

min
wD

−

(cid:88)

X1:t+T

(cid:88)

−

[X1:t, ˆXt+1:t+T ]

The discriminator D is then used to encourage the genera-
tion of realistic sequences.

Finally, the objective becomes
(cid:88)

min
l ,we

s,wd

we

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

X1:t+T
+ λ2[(cid:107) we
− λadv log(D([X1:t, ˆXt+1:t+T ]| wD)),

2 + (cid:107) wd (cid:107)2
2]

2 + (cid:107) we

l (cid:107)2

s (cid:107)2

(9)

where the weights λ2 and λadv are set to 0.001 and 0.01, re-
spectively. In the optimization procedure, we used stochas-
tic gradient descent based optimizer to run iteratively opti-
mizing over (9) and (8).

Remarks There are multiple choices of ¯Xt−C+k:t+k−1
in (5), which may have different effects on the training re-
sults. In previous works, the corresponding part is often set
to ground truth, or ground truth with noise [5]. Besides set-
ting ¯Xt−C+k:t+k−1 as (5), it can also be set to

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k+1, . . . , xt,

(10)
ηˆxt+1 + (1 − η) xt+1, . . . , ηˆxt+k−1 + (1 − η) xt+k−1],

where η ∈ [0, 1] is a manually speciﬁed parameter.

Note that the window size of the short-term encoder C
may also affect the results. The model may not capture
enough short-term information when C is too small. On
the other hand, it may be a waste of computation when C
is too large since we already have the long-term encoder.
Hence, the value of C should be a trade-off between accu-
racy and computation. The effect of different window sizes
are explored in our experiments.

4. Experiments

In this section, we apply the proposed convolutional
model on several human motion prediction tasks. The pro-
posed method is compared with several recent and state-of-
the-art matching algorithms:

• The Encoder-Recurrent-Decoder (ERD) method [5];

• An three layer LSTM with linear encoder and decoder

(LSTM-3LR) [5];

• Stuctural Recurrent Neural Networks (SRNN) [10];

• Residual Recurrent Neural Networks (RRNN) [14];

• An three layer LSTM with an denoising auto encoder

(LSTM-AE) [7].

Our model is implemented in tensorﬂow, and we used
the ADAM [13] optimizer to optimize over our model. The
batch size is set to 64 and the learning rate is 0.0002. For
more optimizing details, please refer to Section 3.2. Fol-
lowing the setting of previous works[5, 10], the length of
seed pose sequence is set to 50, and the length of target se-
quence is set to 25. We trained RRNN [14] model based
on the public available implementation2. We quote the re-
sults from [14] for ERD, LSTM-3LR, SRNN, and [7] for
LSTM-AE.

Action speciﬁc vs. general model ERD [5], LSTM-3LR
[5] and SRNN [10] are action speciﬁc models, where they
train a speciﬁc model for each action. On the other hand,
the RRNN model [14] considers the more challenging task
of training a general model for multiple actions. In our ex-
periments, we also train a single model for multiple actions.

2https://github.com/una-dinosauria/human-

motion-prediction

4.1. Dataset and Preprosessing

In the experiments, we consider two datasets: the Human

3.6M dataset [9] and the CMU Motion Capture dataset 3.

The Human 3.6M dataset is currently the largest avail-
able video pose dataset, which provides accurate 3D body
joint locations recorded by a Vicon motion capture system.
It is regarded as one of the most challenging datasets be-
cause of the large pose variations performed by different
actors. There are 15 activity scenarios in total. Each ac-
tion scenario includes 12 trials lasting between 3000 to 5000
frames. The 12 trials are categorized as 6 subjects, where
each subject includes 2 trials. Each 3D pose consists of 32
joints plus a root orientation and displacement represented
as an exponential map.

During the experiments, each pose would subtract to the
mean pose over all trials and gets divided by the standard
deviation. We eliminate the joint angle dimensions with
constant standard deviation, which corresponds to joints
with less than three degrees of freedom. Furthermore, the
global rotation and translation are set to zero since our mod-
els are not trained with this information. Finally, the dimen-
sion of the input vector is set to 54. Similar to [5, 10, 14],
we treat the two sequences in subject 5 as the test set and
all others as the training set. For evaluation, we calculate
the Euclidean error in terms of Euler angle. Speciﬁcally,
we measure the Euclidean distance between our predictions
and the ground truth in terms of Euler angle for each action,
followed by calculating the mean value over all sequences
which are randomly selected from the test set.

We also apply our model to the CMU Motion Capture
dataset in order to test its generalization ability. There are
ﬁve main categories in the dataset - “human interaction”,
“interaction with environment”, “locomotion”, “physical
activities & sports” and “situations & scenarios”. We
choose some of the actions for our experiments based on
some criteria. Firstly, we do not use data from the “hu-
man interaction” category since multiple subjects motion
prediction is out of the scope of this paper. Secondly, ac-
tion categories which include less than six trials are ex-
cluded on the consideration that we need enough data for
each action to train our model. Lastly, some action cate-
gories in the dataset are actually combinations of other ac-
tions, e.g. actions in the subcategory “playground” consist
of jump, climb and other actions which already exist in the
dataset. We do not chose these action categories to avoid
repetition. Finally, eight actions are selected for our exper-
iments - running, walking and jumping from category “lo-
comotion”, basketball and soccer from category “physical
activities & sports”, wash windows from category “com-
mon behaviours and expressions”, trafﬁc direction and bas-
ketball signals from category “communication gestures and

3Available at http://mocap.cs.cmu.edu

Table 1. Motion prediction error in terms of Euler angle error for walking, eating, smoking and discussion in the Human3.6M dataset for
short-term of 80, 160, 320, 400, and long-term of 1000ms (best result in bold).

Walking

Eating

Smoking

Discussion

80

ms
ERD[5]

160 320 400 1000

160 320 400 1000

80
160 320 400 1000
0.93 1.18 1.59 1.78 N/A 1.27 1.45 1.66 1.80 N/A 1.66 1.95 2.35 2.42 N/A 2.27 2.47 2.68 2.76 N/A
LSTM-3LR[5] 0.77 1.00 1.29 1.47 N/A 0.89 1.09 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.88 2.12 2.25 2.23 N/A
0.81 0.94 1.16 1.30 N/A 0.97 1.14 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.22 1.49 1.83 1.93 N/A
0.33 0.56 0.78 0.85 1.14 0.26 0.43 0.66 0.81 1.34 0.35 0.64 1.03 1.15 1.83 0.37 0.77 1.06 1.10 1.79
RRNN [14]
LSTM-AE[7] 1.00 1.11 1.39 N/A 1.39 1.31 1.49 1.86 N/A 2.01 0.92 1.03 1.15 N/A 1.77 1.11 1.20 1.38 N/A 1.73
0.33 0.54 0.68 0.73 0.92 0.22 0.36 0.58 0.71 1.24 0.26 0.49 0.96 0.92 1.62 0.32 0.67 0.94 1.01 1.86

160 320 400 1000

SRNN [10]

Ours

80

80

Table 2. Motion prediction error in terms of Euler angle error for the rest actions in the Human3.6M dataset for short-term of 80, 160, 320,
400, and long-term of 1000ms (best result in bold).

Directions

Greeting

Phoning

Posing

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.44 0.70 0.86 0.97 1.59 0.55 0.90 1.34 1.51 2.03 0.62 1.10 1.54 1.70 1.89 0.40 0.76 1.37 1.62 2.56
0.39 0.60 0.80 0.91 1.45 0.51 0.82 1.21 1.38 1.72 0.59 1.13 1.51 1.65 1.81 0.29 0.60 1.12 1.37 2.65

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Purchases

Sitting

Sittingdown

Takingphoto

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.59 0.83 1.22 1.30 2.30 0.47 0.80 1.30 1.53 2.14 0.50 0.96 1.50 1.72 2.72 0.32 0.63 0.98 1.12 1.51
0.63 0.91 1.19 1.29 2.52 0.39 0.61 1.02 1.18 1.67 0.41 0.78 1.16 1.31 2.06 0.23 0.49 0.88 1.06 1.40

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Waiting

Walkingdog

80

ms

160 320 400 1000

160 320 400 1000
RNN [14] 0.35 0.68 1.14 1.34 2.34 0.55 0.91 1.23 1.35 1.86 0.29 0.59 0.86 0.92 1.42 0.43 0.75 1.12 1.27 1.90
0.30 0.62 1.09 1.30 2.50 0.59 1.00 1.32 1.44 1.92 0.27 0.52 0.71 0.74 1.28 0.38 0.68 1.01 1.13 1.77

160 320 400 1000

Ours

80

80

80

Walkingtogether
160 320 400 1000

Average

signals”. We pre-process the data and evaluate the results in
the same way as we did on the Human 3.6M dataset.

4.2. Evaluation on Human3.6M and CMU Datasets

We ﬁrst report our results on all actions in the Human
3.6M dataset for both short-term prediction of 80 ms, 160
ms, 320 ms, 400 ms and long-term prediction of 1000 ms.
Among the 15 actions in the dataset, the four actions “walk-
ing”, “eating”, “smoking” and “discussion” are commonly
used in comparison of action speciﬁc human motion predic-
tion methods. Thus we compare the accuracy of our method
against four action speciﬁc methods ERD [5], LSTM-3LR
[5], Structural RNN (SRNN) [10] and LSTM-AE [7], as
well as one general motion prediction method RRNN[14] in
Table 1. From the results, we can see that our method out-
performs the others in most cases. We also provide the qual-
itative comparison results with the state-of-the-art RRNN
method in Figure 3. Both RRNN and our model achieve
good result on “walking” because of its periodic property,
which makes the action easier to model. But for other ape-
riodic classes like “eating”, “smoking” and “discussion”,
RRNN quickly converges to a mean pose – the predicted
ﬁgure could not put its hands down in “eating” and raise its
hand up in “discussion”.

Rather than maintaining a gesture in which one leg
should be put on the other one in the action “smoking”,
RRNN generates an implausible motion in real life that
would cause the subject to go off balance. This further

shows that it is very important to take the correlation be-
tween different body parts into consideration so that the pre-
dicted pose is more realistic. In comparison, our model pre-
dicts plausible motions for both “eating” and “smoking”.
Furthermore, it is observed in the highly aperiodic action
“discussion” that our model can still predict the correct mo-
tion trend, i.e. raising the hands while talking, even though
this motion is not exactly the same as the ground truth. We
compare our algorithm with the general human prediction
model RRNN [14] for the other 11 actions. The quantitative
comparison results are provided in Table 2, which suggest
that our algorithm outperforms RRNN in most cases. Addi-
tionally, our method outperforms RRNN on the average in
both long and short-term predictions. The out-performance
of our method becomes more signiﬁcant for longer term
predictions.

We only consider the more challenging task of training
a general motion prediction model for all actions using the
CMU Motion Caption dataset. Hence, we only show com-
parison results with the state-of-the-art RRNN method. For
a fair comparison, both our model and RRNN are trained us-
ing the same settings on the Human3.6M dataset. The test-
ing error of each action is given in Table 3 and the average
testing error is given in Table 4. In the quantitative compar-
ison, our method outperforms the RRNN method in several
challenging actions such as jumping and running. The qual-
itative comparisons of running and jumping are also shown
in Figure 5. In the qualitative comparisons, we can see that

Figure 3. Qualitative results on for long-term prediction based on the Human3.6M dataset. Starting from the left top clockwisely the
four actions are “walking”, “sitting”, “smoking” and “discussion”. For each action, the top, middle and bottom sequences correspond to
RRNN, our model and ground truth respectively. The ﬁrst four frames are the last four frames of conditional seed frames and the next ones
are predicted frames. The RRNN converges to mean pose for eating and discussion, and generates a prediction which is not realistic for
smoking. Our model suffers less from the mean pose problem and predicts more realistic future.

Figure 4. Left: Prediction error vs time for the model. For the model with LSTM as encoder (LSTM ENC), the error accumulates much
faster than the original model, which means that our model performs better especially for long-term prediction. Middle: Comparison of
testing error with different window length C for training, namely 5, 10, 20. The long-term error decreases when window size increases
from 5 to 10, while the improvement is not obvious when further increase from 10 to 20. Right : Compare the testing error of our model
with and without adversarial regularizer, it shows that adversarial regularizer helps to train a model with better performance in long-term.

RRNN converges to mean pose for both running and jump-
ing. On the other hand, our prediction for running is very
close to the realistic one. For jumping, our model also pre-
dicts the correct motion trend, i.e. squatting followed by
jumping, and the main error comes from the duration of
squatting.

4.3. Ablation Study

The role of long-term encoder The long-term encoder in
our model is used to capture long-term dependencies. We
verify its effectiveness by removing it from our model. The
results in Table 5 suggest that the average error gets larger
without the long-term encoder, especially for long-term pre-
diction of 1000 ms.

Rectangular kernel over spatial axis We use a rectangular
kernel over the spatial axis (2 × 7 kernel) in our CEM in
order to better capture the dependencies between different

body parts. We also verify the effectiveness by comparing
it with square kernel (4 × 4 kernel) and rectangular kernel
over the temporal axis (7 × 2 kernel). The results in Table 6
indicate that the 2 × 7 kernel is the best choice.

Adversarial regularizer We use an adversarial regularizer
in our model to help generate more plausible motion.
In
order to explore the role of the adversarial regularizer, we
compare the performance of our model with and without the
regularizer. The result in Figure 4 suggests that the adver-
sarial regularizer helps to improve the performance of our
model even though marginally. Moreover, since the adver-
sarial regularizer is only used during training, it does not
add complexity to our model during inference.

Different window size C In our decoder, different window
sizes C result in different perception range. Intuitively, en-
larging the window size may enlarge the perception range
and results in better performance, but also requires more

Table 3. Motion prediction error in terms of Euler angle error for eight actions in the CMU Motion capture dataset for short-term of 80,
160, 320, 400, and long-term of 1000ms (best results in bold).

Basketball

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.50 0.80 1.27 1.45 1.78 0.41 0.76 1.32 1.54 2.15 0.33 0.59 0.93 1.10 2.05 0.56 0.88 1.77 2.02 2.40
0.37 0.62 1.07 1.18 1.95 0.32 0.59 1.04 1.24 1.96 0.25 0.56 0.89 1.00 2.04 0.39 0.60 1.36 1.56 2.01

Ours

80

80

80

Basketball Signal
160 320 400 1000

Directing Trafﬁc
160 320 400 1000

Jumping

Running

Soccer

Walking

Washwindow

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.33 0.50 0.66 0.75 1.00 0.29 0.51 0.88 0.99 1.72 0.35 0.47 0.60 0.65 0.88 0.30 0.46 0.72 0.91 1.36
0.28 0.41 0.52 0.57 0.67 0.26 0.44 0.75 0.87 1.56 0.35 0.44 0.45 0.50 0.78 0.30 0.47 0.80 1.01 1.39

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Figure 5. Qualitative result on the CMU Motion Capture dataset. Top: “Running” action; Bottom: “Jumping” action. For each action,
the top, middle are the results of RRNN and our model, and the ground truth is given in the bottom. The ﬁrst four frames are the last four
frames of the conditional seed frames and the next are the predicted ones.

Table 4. Average testing error on the CMU Motion Capture dataset
in terms of Euler angle error.

ms
RRNN [14]

Ours

80
0.38
0.31

160
0.62
0.52

320
1.02
0.86

400
1.17
0.99

1000
1.67
1.55

ms
4 × 4 kernel

Table 6. Comparison of different kernels on Human3.6M.
160
0.72
0.71
0.68

1000
1.80
1.79
1.77

320
1.05
1.05
1.01

80
0.41
0.40
0.38

400
1.16
1.17
1.13

2 × 7 kernel

7 × 2 kernel

Table 5. Our model w/wo long-term Encoder on Human3.6M.
1000
1.77
1.88

ms
With long-term Encoder

Without long-term Encoder

320
1.01
1.05

160
0.68
0.72

400
1.13
1.17

80
0.38
0.41

computation resources. We thus train three different models
with window size C = 5 10 and 20. In the right plot of Fig-
ure 4, we show average testing error over all 15 actions. The
result suggests that there is not much improvement when the
window size is larger than 10. Consequently, we set C = 20
for our model in view of the trade-off between accuracy and
computational accuracy.

two types of convolutional encoders in our model, namely
the long-term encoder and short-term encoder, so that both
distant and nearby temporal motion information can be used
for future prediction. We demonstrated that our model per-
forms better than existing state-of-the-art RNN based mod-
els, especially for long-term prediction tasks. Moreover,
we show that our model can generate better predictions for
complex actions due to the use of hierarchical convolutional
structure for modeling complicated spatial-temporal corre-
lations.

5. Conclusion

In this work, we proposed a convolutional sequence-to-
sequence model for human motion prediction. We adopted

This work was partially supported by the Singapore
MOE Tier 1 grant R-252-000-637-112 and the National
University of Singapore AcRF grant R-252-000-639-114.

Acknowledgements

learning with neural networks. In Advances in neural infor-
mation processing systems, pages 3104–3112, 2014.
[17] G. W. Taylor, G. E. Hinton, and S. T. Roweis. Modeling
In Advances
human motion using binary latent variables.
in neural information processing systems, pages 1345–1352,
2007.

[18] A. T¨ozeren. Human body dynamics: classical mechanics
and human movement. Springer Science & Business Media,
1999.

[19] J. M. Wang, D. J. Fleet, and A. Hertzmann. Gaussian process
dynamical models for human motion. IEEE transactions on
pattern analysis and machine intelligence, 30(2):283–298,
2008.

[20] D. A. Winter. Human balance and posture control during
standing and walking. Gait & posture, 3(4):193–214, 1995.

References

[1] J. Bradbury, S. Merity, C. Xiong, and R. Socher. Quasi-
In International Conference on

recurrent neural networks.
Learning Representation (ICLR) 2016, 2016.

[2] M. Brand and A. Hertzmann.

In
Proceedings of the 27th annual conference on Computer
graphics and interactive techniques, pages 183–192. ACM
Press/Addison-Wesley Publishing Co., 2000.

Style machines.

[3] J. Butepage, M. J. Black, D. Kragic, and H. Kjellstrom.
Deep representation learning for human motion prediction
and classiﬁcation. In The IEEE Conference on Computer Vi-
sion and Pattern Recognition (CVPR), July 2017.

[4] K. Cho, B. van Merri¨enboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder–
decoder approaches. Syntax, Semantics and Structure in Sta-
tistical Translation, page 103, 2014.

[5] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent
network models for human dynamics. In Proceedings of the
IEEE International Conference on Computer Vision, pages
4346–4354, 2015.

[6] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning. In
D. Precup and Y. W. Teh, editors, Proceedings of the 34th
International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 1243–
1252, International Convention Centre, Sydney, Australia,
06–11 Aug 2017. PMLR.

[7] P. Ghosh, J. Song, E. Aksan, and O. Hilliges. Learning hu-
man motion models for long-term predictions. arXiv preprint
arXiv:1704.02827, 2017.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016.

[9] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu.
Human3.6m: Large scale datasets and predictive meth-
IEEE
ods for 3D human sensing in natural environments.
Transactions on Pattern Analysis and Machine Intelligence,
36(7):1325–1339, jul 2014.

[10] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
RNN: Deep learning on spatio-temporal graphs. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5308–5317, 2016.

[11] N. Kalchbrenner and P. Blunsom. Recurrent continuous

translation models. In EMNLP, volume 3, page 413, 2013.

[12] N. Kalchbrenner, L. Espeholt, K. Simonyan, A. van den
Oord, A. Graves, and K. Kavukcuoglu. Neural machine
translation in linear time. CoRR, abs/1610.10099, 2016.
[13] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014.

[14] J. Martinez, M. J. Black, and J. Romero. On human mo-
tion prediction using recurrent neural networks. In The IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), July 2017.

[15] V. Pavlovic, J. M. Rehg, and J. MacCormick. Learning
In Advances
switching linear models of human motion.
in neural information processing systems, pages 981–987,
2001.

[16] I. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence

Convolutional Sequence to Sequence Model for Human Dynamics

Chen Li∗

Wee Sun Lee

Zhen Zhang∗
Department of Computer Science,
National University of Singapore, Singapore
{lic,zhangz,leews,gimhee.lee}comp.nus.edu.sg

Gim Hee Lee

8
1
0
2
 
y
a
M
 
2
 
 
]

V
C
.
s
c
[
 
 
1
v
5
5
6
0
0
.
5
0
8
1
:
v
i
X
r
a

Abstract

Human motion modeling is a classic problem in com-
puter vision and graphics. Challenges in modeling human
motion include high dimensional prediction as well as ex-
tremely complicated dynamics.We present a novel approach
to human motion modeling based on convolutional neural
networks (CNN). The hierarchical structure of CNN makes
it capable of capturing both spatial and temporal correla-
tions effectively. In our proposed approach, a convolutional
long-term encoder is used to encode the whole given motion
sequence into a long-term hidden variable, which is used
with a decoder to predict the remainder of the sequence.
The decoder itself also has an encoder-decoder structure, in
which the short-term encoder encodes a shorter sequence to
a short-term hidden variable, and the spatial decoder maps
the long and short-term hidden variable to motion predic-
tions. By using such a model, we are able to capture both
invariant and dynamic information of human motion, which
results in more accurate predictions. Experiments show that
our algorithm outperforms the state-of-the-art methods on
the Human3.6M and CMU Motion Capture datasets. Our
code is available at the project website1.

1. Introduction

Understanding human motion is extremely important for
various applications in computer vision and robotics, partic-
ularly for applications that require interaction with humans.
For example, an unmanned vehicle must have the ability to
predict human motion in order to avoid potential collision in
a crowded street. Besides, applications such as sports anal-
ysis and medical diagnosis may also beneﬁt from human
motion modeling.

The biomechanical dynamics of human motion is ex-
tremely complicated. Although several analytic models
have been proposed, they are limited to few simple actions

∗Considered as equal contribution.
1https://github.com/chaneyddtt/Convolutional-

Sequence-to-Sequence-Model-for-Human-Dynamics

Figure 1. Frames on the left are the observations fed into our net-
work. The middle part is the short-term prediction results for RNN
(on the top) and our model (in the bottom). The right part is the
long-term prediction results, in which RNN converge to a mean
pose, while our model can predict future frames which are similar
to the ground truth (in the middle).

such as standing and walking [18]. For more complicated
actions, data-driven methods are required to attain accept-
able accuracy [3, 14, 18]. In this paper, we focus on the
human motion prediction task, using learning based meth-
ods from motion capture data.

Recently, along with the success of deep learning in vari-
ous areas of computer vision and machine learning, deep re-
current neural network based models have been introduced
in human motion prediction [5, 7, 10, 14]. In earlier works
[5, 10], it is often observed that there is a signiﬁcant dis-
continuity between the ﬁrst predicted frame of motion and
the last frame of the true observed motion. Martinez et al.
[14] solved the problem by adding a residual unit in the re-
current network. However, their residual unit based model
often converges to an undesired mean pose in the long-term
predictions, i.e., the predictor gives static predictions simi-
lar to the mean of the ground truth of future sequences (see
Figure 1). We believe that the mean pose problem is caused
by the fact that it is difﬁcult for recurrent models to learn
to keep track of long-term information; the mean pose be-
comes a good prediction of the future pose when the model
loses track of information from the distant past. For a chain-
structured RNN model, it takes n steps for two elements that

1

are n time steps apart to interact with each other; this may
make it difﬁcult for an RNN to learn a structure that is able
to exploit long-term correlations [6].

The current state-of-the-art for human motion modeling
[14] is based on the sequence-to-sequence model, which is
ﬁrst proposed for machine translation [16]. The sequence-
to-sequence model consists of an encoder and a decoder, in
which the encoder maps a given seed sequence to a hidden
variable, and the decoder maps the hidden variable to the
target sequence. A major difference between human motion
prediction and other sequence-to-sequence tasks is that hu-
man motion is a highly constrained system by environment
properties, human body properties and Newton’s Laws. As
a result, the encoder needs to learn these constraints from
a relative long seed sequence. However, RNN may not be
able to learn these constraints accurately, and the accumu-
lation of these errors in decoder may result in larger error in
long-term prediction.

Furthermore, the human body is often not static stable
during motion, and our central neural system must make
multiple parts of our body coordinate with each other to sta-
bilize the motion under gravity and other loads [20]. Thus
joints from different limbs have both temporal and spatial
correlations. A typical example is human walking. During
walking, most people tend to move left arm forward while
moving right leg forward. However, RNN based methods
have difﬁculties learning to capture this kind of spatial cor-
relations well, and thus may generate some unrealistic pre-
dictions. Despite these limitations, the RNN based method
[14] is considered to be the current state-of-the-art as its
performance is superior to other human motion prediction
methods in terms of accuracy.

In this paper, we build a convolutional sequence-to-
sequence model for the human motion prediction problem.
Unlike previous chain-structured RNN models, the hierar-
chical structure of convolutional neural networks allows it
to naturally model and learn both spatial dependencies as
well as long-term temporal dependencies [6]. We evalu-
ate the proposed method on the Human3.6M and the CMU
Motion Capture datasets. Experimental results show that
our method can better avoid the long-term mean pose prob-
lem, and give more realistic predictions. The quantitative
results also show that our algorithm outperforms state-of-
the-art methods in terms of accuracy.

2. Related Works

The main task of this work is human motion prediction
via convolutional models, while previous works[3, 5, 14]
mainly focus on RNN based models. We brieﬂy review the
literature as follows.

Modeling of human motion Data driven methods in hu-
man motion modeling face a series of difﬁculties including

high-dimensionality, complicated non-linear dynamics and
the uncertainty of human movement. Previously, Hidden
Markov Model [2], linear dynamics system [15], Gaussian
Process latent variable models [19] etc. have been applied
to model human motion. Due to limited computational re-
source, all these models have some trade-off between model
capacity and inference complexity. Conditional Restricted
Boltzmann Machine (CRBM) based method has also been
applied to human motion modeling [17]. However, CRBM
requires a more complicated training process and it also re-
quires sampling for approximate inference.

RNN based human motion prediction Due to the suc-
cess of recurrent models in sequence-to-sequence learn-
ing, a series of recurrent neural network based meth-
ods are proposed for the human motion prediction task
[5, 10, 14]. Most of these works have a recurrent network
based encoder-decoder structure, where the encoder accepts
a given motion frames or sequence and propagates an en-
coded hidden variable to the decoder, which then generates
the future motion frame or series. The main differences
in these works lie in their different encoder and decoder
structures. For example, in the Encoder-Recurrent-Decoder
(ERD) model [5], additional non-recurrent spatial encoder
and decoder are are added to its recurrent part, which cap-
tures the temporal dependencies [16]. In Structural-RNN
[10], several RNNs are stacked together according to a
hand-crafted spatial-temporal graph. Martinez et al. [14]
proposed a residual based model, which predicts the gradi-
ent of human motion rather than human motion directly, and
used a standard sequence-to -sequence learning model with
(GRU) [4] cell as the encoder and decoder. In these RNN
based models, fully-connected layers are used to learn a rep-
resentation of human action, and the recurrent middle layers
are applied to model the temporal dynamics. In contrast to
previous RNN based models, we use a convolutional model
to learn the spatial and the temporal dynamics at the same
time and we show that this outperforms the state-of-the-art
methods in human motion prediction.

Convolutional sequence-to-sequence model The task of
a sequence-to-sequence model is to generate a target se-
quence from a given seed sequence. Most sequence-to-
sequence models consist of two parts, an encoder which
encodes the seed sequence into a hidden variable and a de-
coder which generates the target sequence from the hidden
variable. Although RNNs seem to be a natural choice for se-
quential data, convolutional models have also been adopted
to sequence-to-sequence tasks such as machine translation.
Kalchbrenner and Blunsom [11] proposed the Recurrent
Continuous Translation Model (RCTM) which uses a con-
volutional model as encoder to generate hidden variables
and a RNN as decoder to generate target sequences, while

later methods [1, 6, 12] are fully convolutional sequence-
to-sequence model. However, unlike machine translation,
where only temporal correlations exist, there exist compli-
cated spatial-temporal dynamics in human motion. Thus we
design a convolutional sequence-to-sequence model that is
suitable for complicated spatial-temporal dynamics.

3. Network Architecture

We adapt a multi-layer convolutional architecture, which
has the advantage of expressing input sequences hierarchi-
cally. In particular, when we apply convolution to the in-
put skeleton sequences, lower layers will capture dependen-
cies between nearby frames and higher layers will capture
dependencies between distant frames. Unlike the chain-
structured RNN, the hierarchical structure of a multi-layer
convolutional architecture is designed to capture long-term
dependencies. Figure 2 shows an illustration of the architec-
ture of our network, where the convolutional encoding mod-
ule (CEM) plays the central role. We use the CEM module
as long and short-term encoder. The long-term encoder is
used to memorize a given motion sequence as the long-term
hidden variable ze
l , and the short-term encoder is used to
map a shorter sequence to the short-term hidden variable
ze
s. Finally the hidden variables ze
s are concatenated
together and propagated to the decoder to give a prediction
of next frame. The short-term encoder and decoder are ap-
plied recursively to produce the whole predicted sequence.
We use convolutional layers with stride two in the CEM,
thus two elements with distance n are able to interact with
each other in O(log n) operations. Furthermore, we use a
rectangle convolution kernel to get a larger perception range
in the spatial domain.

l and ze

3.1. Convolutional sequence-to-sequence model

Similar to previous works [3, 14], we also use an
encoder-decoder model as a predictor to generate future
motion sequences. However unlike previous works, we
adapt a convolutional model for this sequence-to-sequence
modeling task. Speciﬁcally, both the encoder and the de-
coder consist of similar convolutional structure, which com-
putes a hidden variable based on a ﬁxed number of in-
puts. There have been several convolutional sequence-to-
sequence models [1, 6, 12] that have been shown to give bet-
ter performance than RNN based models in machine trans-
lation. However, these models mainly use convolution in
the temporal domain to capture correlations, while in hu-
man motion there are also complicated spatial correlations
between different body parts.

We ﬁrst formalize the human motion prediction problem
before giving more details of our convolutional model. As-
sume that we are given a series of seed human motion poses
X1:t = [x1, x2, . . . , xt], where each xi ∈ RL is a param-
eterization of human pose. The goal of human motion pre-

diction is to generate a target prediction ˆX(t+1):(t+T ) for
the next T frame poses.

We aim to capture the long-term information, such as
categories of actions, human body properties (e.g. step
length, step pace etc.), environmental constraints etc. from
the seed human motion poses. To this end, a convolutional
long-term encoder is used in our model. It maps the whole
sequence X1:t = [x1, x2, . . . , xt] to a hidden variable

l = he
ze

l (X1:t | we

l ),

(1)

where we

l is the parameter of the long-term encoder he
l .
Our decoder has an encoder-decoder structure, which
consists of a short-term encoder and a spatial decoder. The
short-term encoder

s = he
ze

s(Xt−C+1:t | we

s),

(2)

s is the parameter.

where we
It maps a shorter sequence
Xt−C+1:t, which consists of C neighboring frames of the
current frame, to a hidden variable. Note that our short-term
encoder is a sliding window of size C, it only encodes the
most recent C frames. Finally, the long-term and short-term
hidden variables ze
e are concatenated together as a in-
put of the spatial decoder, which predicts the next pose ˆxt+1
as

l and ze

ˆxt+1 = hd([ze

l , ze

s]| wd),

(3)

where wd is the parameter of the spatial decoder hd. To pre-
dict a sequence, the short-term encoder will slide one frame
forward once a new frame is generated, thus the short-term
encoder and decoder are applied recursively as

s(k) = he
ze
ˆxt+k = hd([ze

s( ¯Xt−C+k:t+k−1| we
s),

l , ze

s(k)]| wd),

(4)

where

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k, . . . , xt,

ˆxt+1, . . . , ˆxt+k−1].

(5)

In our model, the long-term encoder and short-term en-
coder have the similar structure, i.e.
the CEM, which in-
cludes 3 convolutional layers and 1 fully connected layers.
The number of output channels for each convolutional layer
is 64, 128 and 128, and the output number of the fully con-
nected layer is 512. As discussed earlier, the CEM needs
to capture long-term correlations in order to improve the
prediction accuracy. Thus the stride of every convolutional
layer is set to 2. With such convolutional layers, two ele-
ments of distance n are able to interact with each other with
a path length O(log(n)), while O(n) steps are required in a
conventional RNN.

Figure 2. An illustration of our network architecture.

3.2. Optimization

Furthermore, the perception range of the CEM in the
spatial domain should be large enough to capture the spa-
tial correlations of joints from different limbs. Hence, we
use a rectangle 2 × 7 convolutional kernel (2 along tem-
poral domain, and 7 along spatial domain) to enlarge the
perception domain in the spatial domain. We use a sim-
ple two layer fully-connected neural network for the spatial
decoder. The ﬁrst layer maps a 1024 dimensional hidden
variable to 512 dimensions and uses a leaky ReLU as the
activation function. The second layer maps the hidden vari-
able to one frame of human poses, and does not include an
activation function. We also use a residual link in our net-
work as suggested by previous works [8, 14]. This means
that out decoder actually predicts the residual value rather
than directly generates the next frame. Consequently, the
output of our network consists of two parts:

ˆxt+k = hd([ze

l , ze

s(k)]| wd) + ˆxt+k−1.

(6)

hd and wd denote the decoder and its parameters.

Comparison to RNN In recurrent neural network based
models (e.g. [5, 14, 16]), the encoded hidden variable often
serves as the initial state of the decoding RNN. Thus during
the long propagation path in RNN, the encoded information
may vanish. However, our proposed model does not have
this problem because the encoded hidden variable ze
l is al-
ways maintained. In recurrent neural networks, the model
captures short-term dynamical information through varia-
tion of hidden states. In our model, the short-term dynami-
cal information is captured by the short-term encoder from a
short sequence. By using such a structure, our model is able
to capture long-term invariant information and short-term
dynamical information, and thus resulting in better perfor-
mance in both long-term and short-term predictions.

During training, we use the mean squared error of the

predicted poses as the loss function:

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

=

1
T

T
(cid:88)

t(cid:48)=1

(cid:107)ˆxt+t(cid:48) − xt+t(cid:48) (cid:107)2
2.

(7)

Three different types of regularizing technique are used to
prevent overﬁtting - dropout, (cid:96)2 regularizer and adversar-
ial regularizer. We added a dropout layer between the last
convolutional and ﬁrst fully-connected layers in our CEM
module. In our decoder, we added a dropout layer between
the two fully-connected layer. The dropout probability in
both dropout layers is set to 0.5.

Motivated by the generative adversarial network (GAN),
we apply an adversarial regularizer for the proposed model,
which mainly improves the qualitative performance. We
train an additional discriminator to classify the generated
and real sequences as follows

log D(X1:t+T | wD)

(8)

log(1 − D([X1:t, ˆXt+1:t+T ]| wD)).

min
wD

−

(cid:88)

X1:t+T

(cid:88)

−

[X1:t, ˆXt+1:t+T ]

The discriminator D is then used to encourage the genera-
tion of realistic sequences.

Finally, the objective becomes
(cid:88)

min
l ,we

s,wd

we

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

X1:t+T
+ λ2[(cid:107) we
− λadv log(D([X1:t, ˆXt+1:t+T ]| wD)),

2 + (cid:107) wd (cid:107)2
2]

2 + (cid:107) we

l (cid:107)2

s (cid:107)2

(9)

where the weights λ2 and λadv are set to 0.001 and 0.01, re-
spectively. In the optimization procedure, we used stochas-
tic gradient descent based optimizer to run iteratively opti-
mizing over (9) and (8).

Remarks There are multiple choices of ¯Xt−C+k:t+k−1
in (5), which may have different effects on the training re-
sults. In previous works, the corresponding part is often set
to ground truth, or ground truth with noise [5]. Besides set-
ting ¯Xt−C+k:t+k−1 as (5), it can also be set to

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k+1, . . . , xt,

(10)
ηˆxt+1 + (1 − η) xt+1, . . . , ηˆxt+k−1 + (1 − η) xt+k−1],

where η ∈ [0, 1] is a manually speciﬁed parameter.

Note that the window size of the short-term encoder C
may also affect the results. The model may not capture
enough short-term information when C is too small. On
the other hand, it may be a waste of computation when C
is too large since we already have the long-term encoder.
Hence, the value of C should be a trade-off between accu-
racy and computation. The effect of different window sizes
are explored in our experiments.

4. Experiments

In this section, we apply the proposed convolutional
model on several human motion prediction tasks. The pro-
posed method is compared with several recent and state-of-
the-art matching algorithms:

• The Encoder-Recurrent-Decoder (ERD) method [5];

• An three layer LSTM with linear encoder and decoder

(LSTM-3LR) [5];

• Stuctural Recurrent Neural Networks (SRNN) [10];

• Residual Recurrent Neural Networks (RRNN) [14];

• An three layer LSTM with an denoising auto encoder

(LSTM-AE) [7].

Our model is implemented in tensorﬂow, and we used
the ADAM [13] optimizer to optimize over our model. The
batch size is set to 64 and the learning rate is 0.0002. For
more optimizing details, please refer to Section 3.2. Fol-
lowing the setting of previous works[5, 10], the length of
seed pose sequence is set to 50, and the length of target se-
quence is set to 25. We trained RRNN [14] model based
on the public available implementation2. We quote the re-
sults from [14] for ERD, LSTM-3LR, SRNN, and [7] for
LSTM-AE.

Action speciﬁc vs. general model ERD [5], LSTM-3LR
[5] and SRNN [10] are action speciﬁc models, where they
train a speciﬁc model for each action. On the other hand,
the RRNN model [14] considers the more challenging task
of training a general model for multiple actions. In our ex-
periments, we also train a single model for multiple actions.

2https://github.com/una-dinosauria/human-

motion-prediction

4.1. Dataset and Preprosessing

In the experiments, we consider two datasets: the Human

3.6M dataset [9] and the CMU Motion Capture dataset 3.

The Human 3.6M dataset is currently the largest avail-
able video pose dataset, which provides accurate 3D body
joint locations recorded by a Vicon motion capture system.
It is regarded as one of the most challenging datasets be-
cause of the large pose variations performed by different
actors. There are 15 activity scenarios in total. Each ac-
tion scenario includes 12 trials lasting between 3000 to 5000
frames. The 12 trials are categorized as 6 subjects, where
each subject includes 2 trials. Each 3D pose consists of 32
joints plus a root orientation and displacement represented
as an exponential map.

During the experiments, each pose would subtract to the
mean pose over all trials and gets divided by the standard
deviation. We eliminate the joint angle dimensions with
constant standard deviation, which corresponds to joints
with less than three degrees of freedom. Furthermore, the
global rotation and translation are set to zero since our mod-
els are not trained with this information. Finally, the dimen-
sion of the input vector is set to 54. Similar to [5, 10, 14],
we treat the two sequences in subject 5 as the test set and
all others as the training set. For evaluation, we calculate
the Euclidean error in terms of Euler angle. Speciﬁcally,
we measure the Euclidean distance between our predictions
and the ground truth in terms of Euler angle for each action,
followed by calculating the mean value over all sequences
which are randomly selected from the test set.

We also apply our model to the CMU Motion Capture
dataset in order to test its generalization ability. There are
ﬁve main categories in the dataset - “human interaction”,
“interaction with environment”, “locomotion”, “physical
activities & sports” and “situations & scenarios”. We
choose some of the actions for our experiments based on
some criteria. Firstly, we do not use data from the “hu-
man interaction” category since multiple subjects motion
prediction is out of the scope of this paper. Secondly, ac-
tion categories which include less than six trials are ex-
cluded on the consideration that we need enough data for
each action to train our model. Lastly, some action cate-
gories in the dataset are actually combinations of other ac-
tions, e.g. actions in the subcategory “playground” consist
of jump, climb and other actions which already exist in the
dataset. We do not chose these action categories to avoid
repetition. Finally, eight actions are selected for our exper-
iments - running, walking and jumping from category “lo-
comotion”, basketball and soccer from category “physical
activities & sports”, wash windows from category “com-
mon behaviours and expressions”, trafﬁc direction and bas-
ketball signals from category “communication gestures and

3Available at http://mocap.cs.cmu.edu

Table 1. Motion prediction error in terms of Euler angle error for walking, eating, smoking and discussion in the Human3.6M dataset for
short-term of 80, 160, 320, 400, and long-term of 1000ms (best result in bold).

Walking

Eating

Smoking

Discussion

80

ms
ERD[5]

160 320 400 1000

160 320 400 1000

80
160 320 400 1000
0.93 1.18 1.59 1.78 N/A 1.27 1.45 1.66 1.80 N/A 1.66 1.95 2.35 2.42 N/A 2.27 2.47 2.68 2.76 N/A
LSTM-3LR[5] 0.77 1.00 1.29 1.47 N/A 0.89 1.09 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.88 2.12 2.25 2.23 N/A
0.81 0.94 1.16 1.30 N/A 0.97 1.14 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.22 1.49 1.83 1.93 N/A
0.33 0.56 0.78 0.85 1.14 0.26 0.43 0.66 0.81 1.34 0.35 0.64 1.03 1.15 1.83 0.37 0.77 1.06 1.10 1.79
RRNN [14]
LSTM-AE[7] 1.00 1.11 1.39 N/A 1.39 1.31 1.49 1.86 N/A 2.01 0.92 1.03 1.15 N/A 1.77 1.11 1.20 1.38 N/A 1.73
0.33 0.54 0.68 0.73 0.92 0.22 0.36 0.58 0.71 1.24 0.26 0.49 0.96 0.92 1.62 0.32 0.67 0.94 1.01 1.86

160 320 400 1000

SRNN [10]

Ours

80

80

Table 2. Motion prediction error in terms of Euler angle error for the rest actions in the Human3.6M dataset for short-term of 80, 160, 320,
400, and long-term of 1000ms (best result in bold).

Directions

Greeting

Phoning

Posing

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.44 0.70 0.86 0.97 1.59 0.55 0.90 1.34 1.51 2.03 0.62 1.10 1.54 1.70 1.89 0.40 0.76 1.37 1.62 2.56
0.39 0.60 0.80 0.91 1.45 0.51 0.82 1.21 1.38 1.72 0.59 1.13 1.51 1.65 1.81 0.29 0.60 1.12 1.37 2.65

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Purchases

Sitting

Sittingdown

Takingphoto

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.59 0.83 1.22 1.30 2.30 0.47 0.80 1.30 1.53 2.14 0.50 0.96 1.50 1.72 2.72 0.32 0.63 0.98 1.12 1.51
0.63 0.91 1.19 1.29 2.52 0.39 0.61 1.02 1.18 1.67 0.41 0.78 1.16 1.31 2.06 0.23 0.49 0.88 1.06 1.40

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Waiting

Walkingdog

80

ms

160 320 400 1000

160 320 400 1000
RNN [14] 0.35 0.68 1.14 1.34 2.34 0.55 0.91 1.23 1.35 1.86 0.29 0.59 0.86 0.92 1.42 0.43 0.75 1.12 1.27 1.90
0.30 0.62 1.09 1.30 2.50 0.59 1.00 1.32 1.44 1.92 0.27 0.52 0.71 0.74 1.28 0.38 0.68 1.01 1.13 1.77

160 320 400 1000

Ours

80

80

80

Walkingtogether
160 320 400 1000

Average

signals”. We pre-process the data and evaluate the results in
the same way as we did on the Human 3.6M dataset.

4.2. Evaluation on Human3.6M and CMU Datasets

We ﬁrst report our results on all actions in the Human
3.6M dataset for both short-term prediction of 80 ms, 160
ms, 320 ms, 400 ms and long-term prediction of 1000 ms.
Among the 15 actions in the dataset, the four actions “walk-
ing”, “eating”, “smoking” and “discussion” are commonly
used in comparison of action speciﬁc human motion predic-
tion methods. Thus we compare the accuracy of our method
against four action speciﬁc methods ERD [5], LSTM-3LR
[5], Structural RNN (SRNN) [10] and LSTM-AE [7], as
well as one general motion prediction method RRNN[14] in
Table 1. From the results, we can see that our method out-
performs the others in most cases. We also provide the qual-
itative comparison results with the state-of-the-art RRNN
method in Figure 3. Both RRNN and our model achieve
good result on “walking” because of its periodic property,
which makes the action easier to model. But for other ape-
riodic classes like “eating”, “smoking” and “discussion”,
RRNN quickly converges to a mean pose – the predicted
ﬁgure could not put its hands down in “eating” and raise its
hand up in “discussion”.

Rather than maintaining a gesture in which one leg
should be put on the other one in the action “smoking”,
RRNN generates an implausible motion in real life that
would cause the subject to go off balance. This further

shows that it is very important to take the correlation be-
tween different body parts into consideration so that the pre-
dicted pose is more realistic. In comparison, our model pre-
dicts plausible motions for both “eating” and “smoking”.
Furthermore, it is observed in the highly aperiodic action
“discussion” that our model can still predict the correct mo-
tion trend, i.e. raising the hands while talking, even though
this motion is not exactly the same as the ground truth. We
compare our algorithm with the general human prediction
model RRNN [14] for the other 11 actions. The quantitative
comparison results are provided in Table 2, which suggest
that our algorithm outperforms RRNN in most cases. Addi-
tionally, our method outperforms RRNN on the average in
both long and short-term predictions. The out-performance
of our method becomes more signiﬁcant for longer term
predictions.

We only consider the more challenging task of training
a general motion prediction model for all actions using the
CMU Motion Caption dataset. Hence, we only show com-
parison results with the state-of-the-art RRNN method. For
a fair comparison, both our model and RRNN are trained us-
ing the same settings on the Human3.6M dataset. The test-
ing error of each action is given in Table 3 and the average
testing error is given in Table 4. In the quantitative compar-
ison, our method outperforms the RRNN method in several
challenging actions such as jumping and running. The qual-
itative comparisons of running and jumping are also shown
in Figure 5. In the qualitative comparisons, we can see that

Figure 3. Qualitative results on for long-term prediction based on the Human3.6M dataset. Starting from the left top clockwisely the
four actions are “walking”, “sitting”, “smoking” and “discussion”. For each action, the top, middle and bottom sequences correspond to
RRNN, our model and ground truth respectively. The ﬁrst four frames are the last four frames of conditional seed frames and the next ones
are predicted frames. The RRNN converges to mean pose for eating and discussion, and generates a prediction which is not realistic for
smoking. Our model suffers less from the mean pose problem and predicts more realistic future.

Figure 4. Left: Prediction error vs time for the model. For the model with LSTM as encoder (LSTM ENC), the error accumulates much
faster than the original model, which means that our model performs better especially for long-term prediction. Middle: Comparison of
testing error with different window length C for training, namely 5, 10, 20. The long-term error decreases when window size increases
from 5 to 10, while the improvement is not obvious when further increase from 10 to 20. Right : Compare the testing error of our model
with and without adversarial regularizer, it shows that adversarial regularizer helps to train a model with better performance in long-term.

RRNN converges to mean pose for both running and jump-
ing. On the other hand, our prediction for running is very
close to the realistic one. For jumping, our model also pre-
dicts the correct motion trend, i.e. squatting followed by
jumping, and the main error comes from the duration of
squatting.

4.3. Ablation Study

The role of long-term encoder The long-term encoder in
our model is used to capture long-term dependencies. We
verify its effectiveness by removing it from our model. The
results in Table 5 suggest that the average error gets larger
without the long-term encoder, especially for long-term pre-
diction of 1000 ms.

Rectangular kernel over spatial axis We use a rectangular
kernel over the spatial axis (2 × 7 kernel) in our CEM in
order to better capture the dependencies between different

body parts. We also verify the effectiveness by comparing
it with square kernel (4 × 4 kernel) and rectangular kernel
over the temporal axis (7 × 2 kernel). The results in Table 6
indicate that the 2 × 7 kernel is the best choice.

Adversarial regularizer We use an adversarial regularizer
in our model to help generate more plausible motion.
In
order to explore the role of the adversarial regularizer, we
compare the performance of our model with and without the
regularizer. The result in Figure 4 suggests that the adver-
sarial regularizer helps to improve the performance of our
model even though marginally. Moreover, since the adver-
sarial regularizer is only used during training, it does not
add complexity to our model during inference.

Different window size C In our decoder, different window
sizes C result in different perception range. Intuitively, en-
larging the window size may enlarge the perception range
and results in better performance, but also requires more

Table 3. Motion prediction error in terms of Euler angle error for eight actions in the CMU Motion capture dataset for short-term of 80,
160, 320, 400, and long-term of 1000ms (best results in bold).

Basketball

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.50 0.80 1.27 1.45 1.78 0.41 0.76 1.32 1.54 2.15 0.33 0.59 0.93 1.10 2.05 0.56 0.88 1.77 2.02 2.40
0.37 0.62 1.07 1.18 1.95 0.32 0.59 1.04 1.24 1.96 0.25 0.56 0.89 1.00 2.04 0.39 0.60 1.36 1.56 2.01

Ours

80

80

80

Basketball Signal
160 320 400 1000

Directing Trafﬁc
160 320 400 1000

Jumping

Running

Soccer

Walking

Washwindow

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.33 0.50 0.66 0.75 1.00 0.29 0.51 0.88 0.99 1.72 0.35 0.47 0.60 0.65 0.88 0.30 0.46 0.72 0.91 1.36
0.28 0.41 0.52 0.57 0.67 0.26 0.44 0.75 0.87 1.56 0.35 0.44 0.45 0.50 0.78 0.30 0.47 0.80 1.01 1.39

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Figure 5. Qualitative result on the CMU Motion Capture dataset. Top: “Running” action; Bottom: “Jumping” action. For each action,
the top, middle are the results of RRNN and our model, and the ground truth is given in the bottom. The ﬁrst four frames are the last four
frames of the conditional seed frames and the next are the predicted ones.

Table 4. Average testing error on the CMU Motion Capture dataset
in terms of Euler angle error.

ms
RRNN [14]

Ours

80
0.38
0.31

160
0.62
0.52

320
1.02
0.86

400
1.17
0.99

1000
1.67
1.55

ms
4 × 4 kernel

Table 6. Comparison of different kernels on Human3.6M.
160
0.72
0.71
0.68

1000
1.80
1.79
1.77

320
1.05
1.05
1.01

80
0.41
0.40
0.38

400
1.16
1.17
1.13

2 × 7 kernel

7 × 2 kernel

Table 5. Our model w/wo long-term Encoder on Human3.6M.
1000
1.77
1.88

ms
With long-term Encoder

Without long-term Encoder

320
1.01
1.05

160
0.68
0.72

400
1.13
1.17

80
0.38
0.41

computation resources. We thus train three different models
with window size C = 5 10 and 20. In the right plot of Fig-
ure 4, we show average testing error over all 15 actions. The
result suggests that there is not much improvement when the
window size is larger than 10. Consequently, we set C = 20
for our model in view of the trade-off between accuracy and
computational accuracy.

two types of convolutional encoders in our model, namely
the long-term encoder and short-term encoder, so that both
distant and nearby temporal motion information can be used
for future prediction. We demonstrated that our model per-
forms better than existing state-of-the-art RNN based mod-
els, especially for long-term prediction tasks. Moreover,
we show that our model can generate better predictions for
complex actions due to the use of hierarchical convolutional
structure for modeling complicated spatial-temporal corre-
lations.

5. Conclusion

In this work, we proposed a convolutional sequence-to-
sequence model for human motion prediction. We adopted

This work was partially supported by the Singapore
MOE Tier 1 grant R-252-000-637-112 and the National
University of Singapore AcRF grant R-252-000-639-114.

Acknowledgements

learning with neural networks. In Advances in neural infor-
mation processing systems, pages 3104–3112, 2014.
[17] G. W. Taylor, G. E. Hinton, and S. T. Roweis. Modeling
In Advances
human motion using binary latent variables.
in neural information processing systems, pages 1345–1352,
2007.

[18] A. T¨ozeren. Human body dynamics: classical mechanics
and human movement. Springer Science & Business Media,
1999.

[19] J. M. Wang, D. J. Fleet, and A. Hertzmann. Gaussian process
dynamical models for human motion. IEEE transactions on
pattern analysis and machine intelligence, 30(2):283–298,
2008.

[20] D. A. Winter. Human balance and posture control during
standing and walking. Gait & posture, 3(4):193–214, 1995.

References

[1] J. Bradbury, S. Merity, C. Xiong, and R. Socher. Quasi-
In International Conference on

recurrent neural networks.
Learning Representation (ICLR) 2016, 2016.

[2] M. Brand and A. Hertzmann.

In
Proceedings of the 27th annual conference on Computer
graphics and interactive techniques, pages 183–192. ACM
Press/Addison-Wesley Publishing Co., 2000.

Style machines.

[3] J. Butepage, M. J. Black, D. Kragic, and H. Kjellstrom.
Deep representation learning for human motion prediction
and classiﬁcation. In The IEEE Conference on Computer Vi-
sion and Pattern Recognition (CVPR), July 2017.

[4] K. Cho, B. van Merri¨enboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder–
decoder approaches. Syntax, Semantics and Structure in Sta-
tistical Translation, page 103, 2014.

[5] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent
network models for human dynamics. In Proceedings of the
IEEE International Conference on Computer Vision, pages
4346–4354, 2015.

[6] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning. In
D. Precup and Y. W. Teh, editors, Proceedings of the 34th
International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 1243–
1252, International Convention Centre, Sydney, Australia,
06–11 Aug 2017. PMLR.

[7] P. Ghosh, J. Song, E. Aksan, and O. Hilliges. Learning hu-
man motion models for long-term predictions. arXiv preprint
arXiv:1704.02827, 2017.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016.

[9] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu.
Human3.6m: Large scale datasets and predictive meth-
IEEE
ods for 3D human sensing in natural environments.
Transactions on Pattern Analysis and Machine Intelligence,
36(7):1325–1339, jul 2014.

[10] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
RNN: Deep learning on spatio-temporal graphs. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5308–5317, 2016.

[11] N. Kalchbrenner and P. Blunsom. Recurrent continuous

translation models. In EMNLP, volume 3, page 413, 2013.

[12] N. Kalchbrenner, L. Espeholt, K. Simonyan, A. van den
Oord, A. Graves, and K. Kavukcuoglu. Neural machine
translation in linear time. CoRR, abs/1610.10099, 2016.
[13] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014.

[14] J. Martinez, M. J. Black, and J. Romero. On human mo-
tion prediction using recurrent neural networks. In The IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), July 2017.

[15] V. Pavlovic, J. M. Rehg, and J. MacCormick. Learning
In Advances
switching linear models of human motion.
in neural information processing systems, pages 981–987,
2001.

[16] I. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence

Convolutional Sequence to Sequence Model for Human Dynamics

Chen Li∗

Wee Sun Lee

Zhen Zhang∗
Department of Computer Science,
National University of Singapore, Singapore
{lic,zhangz,leews,gimhee.lee}comp.nus.edu.sg

Gim Hee Lee

8
1
0
2
 
y
a
M
 
2
 
 
]

V
C
.
s
c
[
 
 
1
v
5
5
6
0
0
.
5
0
8
1
:
v
i
X
r
a

Abstract

Human motion modeling is a classic problem in com-
puter vision and graphics. Challenges in modeling human
motion include high dimensional prediction as well as ex-
tremely complicated dynamics.We present a novel approach
to human motion modeling based on convolutional neural
networks (CNN). The hierarchical structure of CNN makes
it capable of capturing both spatial and temporal correla-
tions effectively. In our proposed approach, a convolutional
long-term encoder is used to encode the whole given motion
sequence into a long-term hidden variable, which is used
with a decoder to predict the remainder of the sequence.
The decoder itself also has an encoder-decoder structure, in
which the short-term encoder encodes a shorter sequence to
a short-term hidden variable, and the spatial decoder maps
the long and short-term hidden variable to motion predic-
tions. By using such a model, we are able to capture both
invariant and dynamic information of human motion, which
results in more accurate predictions. Experiments show that
our algorithm outperforms the state-of-the-art methods on
the Human3.6M and CMU Motion Capture datasets. Our
code is available at the project website1.

1. Introduction

Understanding human motion is extremely important for
various applications in computer vision and robotics, partic-
ularly for applications that require interaction with humans.
For example, an unmanned vehicle must have the ability to
predict human motion in order to avoid potential collision in
a crowded street. Besides, applications such as sports anal-
ysis and medical diagnosis may also beneﬁt from human
motion modeling.

The biomechanical dynamics of human motion is ex-
tremely complicated. Although several analytic models
have been proposed, they are limited to few simple actions

∗Considered as equal contribution.
1https://github.com/chaneyddtt/Convolutional-

Sequence-to-Sequence-Model-for-Human-Dynamics

Figure 1. Frames on the left are the observations fed into our net-
work. The middle part is the short-term prediction results for RNN
(on the top) and our model (in the bottom). The right part is the
long-term prediction results, in which RNN converge to a mean
pose, while our model can predict future frames which are similar
to the ground truth (in the middle).

such as standing and walking [18]. For more complicated
actions, data-driven methods are required to attain accept-
able accuracy [3, 14, 18]. In this paper, we focus on the
human motion prediction task, using learning based meth-
ods from motion capture data.

Recently, along with the success of deep learning in vari-
ous areas of computer vision and machine learning, deep re-
current neural network based models have been introduced
in human motion prediction [5, 7, 10, 14]. In earlier works
[5, 10], it is often observed that there is a signiﬁcant dis-
continuity between the ﬁrst predicted frame of motion and
the last frame of the true observed motion. Martinez et al.
[14] solved the problem by adding a residual unit in the re-
current network. However, their residual unit based model
often converges to an undesired mean pose in the long-term
predictions, i.e., the predictor gives static predictions simi-
lar to the mean of the ground truth of future sequences (see
Figure 1). We believe that the mean pose problem is caused
by the fact that it is difﬁcult for recurrent models to learn
to keep track of long-term information; the mean pose be-
comes a good prediction of the future pose when the model
loses track of information from the distant past. For a chain-
structured RNN model, it takes n steps for two elements that

1

are n time steps apart to interact with each other; this may
make it difﬁcult for an RNN to learn a structure that is able
to exploit long-term correlations [6].

The current state-of-the-art for human motion modeling
[14] is based on the sequence-to-sequence model, which is
ﬁrst proposed for machine translation [16]. The sequence-
to-sequence model consists of an encoder and a decoder, in
which the encoder maps a given seed sequence to a hidden
variable, and the decoder maps the hidden variable to the
target sequence. A major difference between human motion
prediction and other sequence-to-sequence tasks is that hu-
man motion is a highly constrained system by environment
properties, human body properties and Newton’s Laws. As
a result, the encoder needs to learn these constraints from
a relative long seed sequence. However, RNN may not be
able to learn these constraints accurately, and the accumu-
lation of these errors in decoder may result in larger error in
long-term prediction.

Furthermore, the human body is often not static stable
during motion, and our central neural system must make
multiple parts of our body coordinate with each other to sta-
bilize the motion under gravity and other loads [20]. Thus
joints from different limbs have both temporal and spatial
correlations. A typical example is human walking. During
walking, most people tend to move left arm forward while
moving right leg forward. However, RNN based methods
have difﬁculties learning to capture this kind of spatial cor-
relations well, and thus may generate some unrealistic pre-
dictions. Despite these limitations, the RNN based method
[14] is considered to be the current state-of-the-art as its
performance is superior to other human motion prediction
methods in terms of accuracy.

In this paper, we build a convolutional sequence-to-
sequence model for the human motion prediction problem.
Unlike previous chain-structured RNN models, the hierar-
chical structure of convolutional neural networks allows it
to naturally model and learn both spatial dependencies as
well as long-term temporal dependencies [6]. We evalu-
ate the proposed method on the Human3.6M and the CMU
Motion Capture datasets. Experimental results show that
our method can better avoid the long-term mean pose prob-
lem, and give more realistic predictions. The quantitative
results also show that our algorithm outperforms state-of-
the-art methods in terms of accuracy.

2. Related Works

The main task of this work is human motion prediction
via convolutional models, while previous works[3, 5, 14]
mainly focus on RNN based models. We brieﬂy review the
literature as follows.

Modeling of human motion Data driven methods in hu-
man motion modeling face a series of difﬁculties including

high-dimensionality, complicated non-linear dynamics and
the uncertainty of human movement. Previously, Hidden
Markov Model [2], linear dynamics system [15], Gaussian
Process latent variable models [19] etc. have been applied
to model human motion. Due to limited computational re-
source, all these models have some trade-off between model
capacity and inference complexity. Conditional Restricted
Boltzmann Machine (CRBM) based method has also been
applied to human motion modeling [17]. However, CRBM
requires a more complicated training process and it also re-
quires sampling for approximate inference.

RNN based human motion prediction Due to the suc-
cess of recurrent models in sequence-to-sequence learn-
ing, a series of recurrent neural network based meth-
ods are proposed for the human motion prediction task
[5, 10, 14]. Most of these works have a recurrent network
based encoder-decoder structure, where the encoder accepts
a given motion frames or sequence and propagates an en-
coded hidden variable to the decoder, which then generates
the future motion frame or series. The main differences
in these works lie in their different encoder and decoder
structures. For example, in the Encoder-Recurrent-Decoder
(ERD) model [5], additional non-recurrent spatial encoder
and decoder are are added to its recurrent part, which cap-
tures the temporal dependencies [16]. In Structural-RNN
[10], several RNNs are stacked together according to a
hand-crafted spatial-temporal graph. Martinez et al. [14]
proposed a residual based model, which predicts the gradi-
ent of human motion rather than human motion directly, and
used a standard sequence-to -sequence learning model with
(GRU) [4] cell as the encoder and decoder. In these RNN
based models, fully-connected layers are used to learn a rep-
resentation of human action, and the recurrent middle layers
are applied to model the temporal dynamics. In contrast to
previous RNN based models, we use a convolutional model
to learn the spatial and the temporal dynamics at the same
time and we show that this outperforms the state-of-the-art
methods in human motion prediction.

Convolutional sequence-to-sequence model The task of
a sequence-to-sequence model is to generate a target se-
quence from a given seed sequence. Most sequence-to-
sequence models consist of two parts, an encoder which
encodes the seed sequence into a hidden variable and a de-
coder which generates the target sequence from the hidden
variable. Although RNNs seem to be a natural choice for se-
quential data, convolutional models have also been adopted
to sequence-to-sequence tasks such as machine translation.
Kalchbrenner and Blunsom [11] proposed the Recurrent
Continuous Translation Model (RCTM) which uses a con-
volutional model as encoder to generate hidden variables
and a RNN as decoder to generate target sequences, while

later methods [1, 6, 12] are fully convolutional sequence-
to-sequence model. However, unlike machine translation,
where only temporal correlations exist, there exist compli-
cated spatial-temporal dynamics in human motion. Thus we
design a convolutional sequence-to-sequence model that is
suitable for complicated spatial-temporal dynamics.

3. Network Architecture

We adapt a multi-layer convolutional architecture, which
has the advantage of expressing input sequences hierarchi-
cally. In particular, when we apply convolution to the in-
put skeleton sequences, lower layers will capture dependen-
cies between nearby frames and higher layers will capture
dependencies between distant frames. Unlike the chain-
structured RNN, the hierarchical structure of a multi-layer
convolutional architecture is designed to capture long-term
dependencies. Figure 2 shows an illustration of the architec-
ture of our network, where the convolutional encoding mod-
ule (CEM) plays the central role. We use the CEM module
as long and short-term encoder. The long-term encoder is
used to memorize a given motion sequence as the long-term
hidden variable ze
l , and the short-term encoder is used to
map a shorter sequence to the short-term hidden variable
ze
s. Finally the hidden variables ze
s are concatenated
together and propagated to the decoder to give a prediction
of next frame. The short-term encoder and decoder are ap-
plied recursively to produce the whole predicted sequence.
We use convolutional layers with stride two in the CEM,
thus two elements with distance n are able to interact with
each other in O(log n) operations. Furthermore, we use a
rectangle convolution kernel to get a larger perception range
in the spatial domain.

l and ze

3.1. Convolutional sequence-to-sequence model

Similar to previous works [3, 14], we also use an
encoder-decoder model as a predictor to generate future
motion sequences. However unlike previous works, we
adapt a convolutional model for this sequence-to-sequence
modeling task. Speciﬁcally, both the encoder and the de-
coder consist of similar convolutional structure, which com-
putes a hidden variable based on a ﬁxed number of in-
puts. There have been several convolutional sequence-to-
sequence models [1, 6, 12] that have been shown to give bet-
ter performance than RNN based models in machine trans-
lation. However, these models mainly use convolution in
the temporal domain to capture correlations, while in hu-
man motion there are also complicated spatial correlations
between different body parts.

We ﬁrst formalize the human motion prediction problem
before giving more details of our convolutional model. As-
sume that we are given a series of seed human motion poses
X1:t = [x1, x2, . . . , xt], where each xi ∈ RL is a param-
eterization of human pose. The goal of human motion pre-

diction is to generate a target prediction ˆX(t+1):(t+T ) for
the next T frame poses.

We aim to capture the long-term information, such as
categories of actions, human body properties (e.g. step
length, step pace etc.), environmental constraints etc. from
the seed human motion poses. To this end, a convolutional
long-term encoder is used in our model. It maps the whole
sequence X1:t = [x1, x2, . . . , xt] to a hidden variable

l = he
ze

l (X1:t | we

l ),

(1)

where we

l is the parameter of the long-term encoder he
l .
Our decoder has an encoder-decoder structure, which
consists of a short-term encoder and a spatial decoder. The
short-term encoder

s = he
ze

s(Xt−C+1:t | we

s),

(2)

s is the parameter.

where we
It maps a shorter sequence
Xt−C+1:t, which consists of C neighboring frames of the
current frame, to a hidden variable. Note that our short-term
encoder is a sliding window of size C, it only encodes the
most recent C frames. Finally, the long-term and short-term
hidden variables ze
e are concatenated together as a in-
put of the spatial decoder, which predicts the next pose ˆxt+1
as

l and ze

ˆxt+1 = hd([ze

l , ze

s]| wd),

(3)

where wd is the parameter of the spatial decoder hd. To pre-
dict a sequence, the short-term encoder will slide one frame
forward once a new frame is generated, thus the short-term
encoder and decoder are applied recursively as

s(k) = he
ze
ˆxt+k = hd([ze

s( ¯Xt−C+k:t+k−1| we
s),

l , ze

s(k)]| wd),

(4)

where

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k, . . . , xt,

ˆxt+1, . . . , ˆxt+k−1].

(5)

In our model, the long-term encoder and short-term en-
coder have the similar structure, i.e.
the CEM, which in-
cludes 3 convolutional layers and 1 fully connected layers.
The number of output channels for each convolutional layer
is 64, 128 and 128, and the output number of the fully con-
nected layer is 512. As discussed earlier, the CEM needs
to capture long-term correlations in order to improve the
prediction accuracy. Thus the stride of every convolutional
layer is set to 2. With such convolutional layers, two ele-
ments of distance n are able to interact with each other with
a path length O(log(n)), while O(n) steps are required in a
conventional RNN.

Figure 2. An illustration of our network architecture.

3.2. Optimization

Furthermore, the perception range of the CEM in the
spatial domain should be large enough to capture the spa-
tial correlations of joints from different limbs. Hence, we
use a rectangle 2 × 7 convolutional kernel (2 along tem-
poral domain, and 7 along spatial domain) to enlarge the
perception domain in the spatial domain. We use a sim-
ple two layer fully-connected neural network for the spatial
decoder. The ﬁrst layer maps a 1024 dimensional hidden
variable to 512 dimensions and uses a leaky ReLU as the
activation function. The second layer maps the hidden vari-
able to one frame of human poses, and does not include an
activation function. We also use a residual link in our net-
work as suggested by previous works [8, 14]. This means
that out decoder actually predicts the residual value rather
than directly generates the next frame. Consequently, the
output of our network consists of two parts:

ˆxt+k = hd([ze

l , ze

s(k)]| wd) + ˆxt+k−1.

(6)

hd and wd denote the decoder and its parameters.

Comparison to RNN In recurrent neural network based
models (e.g. [5, 14, 16]), the encoded hidden variable often
serves as the initial state of the decoding RNN. Thus during
the long propagation path in RNN, the encoded information
may vanish. However, our proposed model does not have
this problem because the encoded hidden variable ze
l is al-
ways maintained. In recurrent neural networks, the model
captures short-term dynamical information through varia-
tion of hidden states. In our model, the short-term dynami-
cal information is captured by the short-term encoder from a
short sequence. By using such a structure, our model is able
to capture long-term invariant information and short-term
dynamical information, and thus resulting in better perfor-
mance in both long-term and short-term predictions.

During training, we use the mean squared error of the

predicted poses as the loss function:

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

=

1
T

T
(cid:88)

t(cid:48)=1

(cid:107)ˆxt+t(cid:48) − xt+t(cid:48) (cid:107)2
2.

(7)

Three different types of regularizing technique are used to
prevent overﬁtting - dropout, (cid:96)2 regularizer and adversar-
ial regularizer. We added a dropout layer between the last
convolutional and ﬁrst fully-connected layers in our CEM
module. In our decoder, we added a dropout layer between
the two fully-connected layer. The dropout probability in
both dropout layers is set to 0.5.

Motivated by the generative adversarial network (GAN),
we apply an adversarial regularizer for the proposed model,
which mainly improves the qualitative performance. We
train an additional discriminator to classify the generated
and real sequences as follows

log D(X1:t+T | wD)

(8)

log(1 − D([X1:t, ˆXt+1:t+T ]| wD)).

min
wD

−

(cid:88)

X1:t+T

(cid:88)

−

[X1:t, ˆXt+1:t+T ]

The discriminator D is then used to encourage the genera-
tion of realistic sequences.

Finally, the objective becomes
(cid:88)

min
l ,we

s,wd

we

(cid:96)model( ˆX(t+1):(t+T ), X(t+1):(t+T ))

X1:t+T
+ λ2[(cid:107) we
− λadv log(D([X1:t, ˆXt+1:t+T ]| wD)),

2 + (cid:107) wd (cid:107)2
2]

2 + (cid:107) we

l (cid:107)2

s (cid:107)2

(9)

where the weights λ2 and λadv are set to 0.001 and 0.01, re-
spectively. In the optimization procedure, we used stochas-
tic gradient descent based optimizer to run iteratively opti-
mizing over (9) and (8).

Remarks There are multiple choices of ¯Xt−C+k:t+k−1
in (5), which may have different effects on the training re-
sults. In previous works, the corresponding part is often set
to ground truth, or ground truth with noise [5]. Besides set-
ting ¯Xt−C+k:t+k−1 as (5), it can also be set to

¯Xt−C+k:t+k−1 = [xt−C+k, xt−C+k+1, . . . , xt,

(10)
ηˆxt+1 + (1 − η) xt+1, . . . , ηˆxt+k−1 + (1 − η) xt+k−1],

where η ∈ [0, 1] is a manually speciﬁed parameter.

Note that the window size of the short-term encoder C
may also affect the results. The model may not capture
enough short-term information when C is too small. On
the other hand, it may be a waste of computation when C
is too large since we already have the long-term encoder.
Hence, the value of C should be a trade-off between accu-
racy and computation. The effect of different window sizes
are explored in our experiments.

4. Experiments

In this section, we apply the proposed convolutional
model on several human motion prediction tasks. The pro-
posed method is compared with several recent and state-of-
the-art matching algorithms:

• The Encoder-Recurrent-Decoder (ERD) method [5];

• An three layer LSTM with linear encoder and decoder

(LSTM-3LR) [5];

• Stuctural Recurrent Neural Networks (SRNN) [10];

• Residual Recurrent Neural Networks (RRNN) [14];

• An three layer LSTM with an denoising auto encoder

(LSTM-AE) [7].

Our model is implemented in tensorﬂow, and we used
the ADAM [13] optimizer to optimize over our model. The
batch size is set to 64 and the learning rate is 0.0002. For
more optimizing details, please refer to Section 3.2. Fol-
lowing the setting of previous works[5, 10], the length of
seed pose sequence is set to 50, and the length of target se-
quence is set to 25. We trained RRNN [14] model based
on the public available implementation2. We quote the re-
sults from [14] for ERD, LSTM-3LR, SRNN, and [7] for
LSTM-AE.

Action speciﬁc vs. general model ERD [5], LSTM-3LR
[5] and SRNN [10] are action speciﬁc models, where they
train a speciﬁc model for each action. On the other hand,
the RRNN model [14] considers the more challenging task
of training a general model for multiple actions. In our ex-
periments, we also train a single model for multiple actions.

2https://github.com/una-dinosauria/human-

motion-prediction

4.1. Dataset and Preprosessing

In the experiments, we consider two datasets: the Human

3.6M dataset [9] and the CMU Motion Capture dataset 3.

The Human 3.6M dataset is currently the largest avail-
able video pose dataset, which provides accurate 3D body
joint locations recorded by a Vicon motion capture system.
It is regarded as one of the most challenging datasets be-
cause of the large pose variations performed by different
actors. There are 15 activity scenarios in total. Each ac-
tion scenario includes 12 trials lasting between 3000 to 5000
frames. The 12 trials are categorized as 6 subjects, where
each subject includes 2 trials. Each 3D pose consists of 32
joints plus a root orientation and displacement represented
as an exponential map.

During the experiments, each pose would subtract to the
mean pose over all trials and gets divided by the standard
deviation. We eliminate the joint angle dimensions with
constant standard deviation, which corresponds to joints
with less than three degrees of freedom. Furthermore, the
global rotation and translation are set to zero since our mod-
els are not trained with this information. Finally, the dimen-
sion of the input vector is set to 54. Similar to [5, 10, 14],
we treat the two sequences in subject 5 as the test set and
all others as the training set. For evaluation, we calculate
the Euclidean error in terms of Euler angle. Speciﬁcally,
we measure the Euclidean distance between our predictions
and the ground truth in terms of Euler angle for each action,
followed by calculating the mean value over all sequences
which are randomly selected from the test set.

We also apply our model to the CMU Motion Capture
dataset in order to test its generalization ability. There are
ﬁve main categories in the dataset - “human interaction”,
“interaction with environment”, “locomotion”, “physical
activities & sports” and “situations & scenarios”. We
choose some of the actions for our experiments based on
some criteria. Firstly, we do not use data from the “hu-
man interaction” category since multiple subjects motion
prediction is out of the scope of this paper. Secondly, ac-
tion categories which include less than six trials are ex-
cluded on the consideration that we need enough data for
each action to train our model. Lastly, some action cate-
gories in the dataset are actually combinations of other ac-
tions, e.g. actions in the subcategory “playground” consist
of jump, climb and other actions which already exist in the
dataset. We do not chose these action categories to avoid
repetition. Finally, eight actions are selected for our exper-
iments - running, walking and jumping from category “lo-
comotion”, basketball and soccer from category “physical
activities & sports”, wash windows from category “com-
mon behaviours and expressions”, trafﬁc direction and bas-
ketball signals from category “communication gestures and

3Available at http://mocap.cs.cmu.edu

Table 1. Motion prediction error in terms of Euler angle error for walking, eating, smoking and discussion in the Human3.6M dataset for
short-term of 80, 160, 320, 400, and long-term of 1000ms (best result in bold).

Walking

Eating

Smoking

Discussion

80

ms
ERD[5]

160 320 400 1000

160 320 400 1000

80
160 320 400 1000
0.93 1.18 1.59 1.78 N/A 1.27 1.45 1.66 1.80 N/A 1.66 1.95 2.35 2.42 N/A 2.27 2.47 2.68 2.76 N/A
LSTM-3LR[5] 0.77 1.00 1.29 1.47 N/A 0.89 1.09 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.88 2.12 2.25 2.23 N/A
0.81 0.94 1.16 1.30 N/A 0.97 1.14 1.35 1.46 N/A 1.45 1.68 1.94 2.08 N/A 1.22 1.49 1.83 1.93 N/A
0.33 0.56 0.78 0.85 1.14 0.26 0.43 0.66 0.81 1.34 0.35 0.64 1.03 1.15 1.83 0.37 0.77 1.06 1.10 1.79
RRNN [14]
LSTM-AE[7] 1.00 1.11 1.39 N/A 1.39 1.31 1.49 1.86 N/A 2.01 0.92 1.03 1.15 N/A 1.77 1.11 1.20 1.38 N/A 1.73
0.33 0.54 0.68 0.73 0.92 0.22 0.36 0.58 0.71 1.24 0.26 0.49 0.96 0.92 1.62 0.32 0.67 0.94 1.01 1.86

160 320 400 1000

SRNN [10]

Ours

80

80

Table 2. Motion prediction error in terms of Euler angle error for the rest actions in the Human3.6M dataset for short-term of 80, 160, 320,
400, and long-term of 1000ms (best result in bold).

Directions

Greeting

Phoning

Posing

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.44 0.70 0.86 0.97 1.59 0.55 0.90 1.34 1.51 2.03 0.62 1.10 1.54 1.70 1.89 0.40 0.76 1.37 1.62 2.56
0.39 0.60 0.80 0.91 1.45 0.51 0.82 1.21 1.38 1.72 0.59 1.13 1.51 1.65 1.81 0.29 0.60 1.12 1.37 2.65

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Purchases

Sitting

Sittingdown

Takingphoto

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.59 0.83 1.22 1.30 2.30 0.47 0.80 1.30 1.53 2.14 0.50 0.96 1.50 1.72 2.72 0.32 0.63 0.98 1.12 1.51
0.63 0.91 1.19 1.29 2.52 0.39 0.61 1.02 1.18 1.67 0.41 0.78 1.16 1.31 2.06 0.23 0.49 0.88 1.06 1.40

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Waiting

Walkingdog

80

ms

160 320 400 1000

160 320 400 1000
RNN [14] 0.35 0.68 1.14 1.34 2.34 0.55 0.91 1.23 1.35 1.86 0.29 0.59 0.86 0.92 1.42 0.43 0.75 1.12 1.27 1.90
0.30 0.62 1.09 1.30 2.50 0.59 1.00 1.32 1.44 1.92 0.27 0.52 0.71 0.74 1.28 0.38 0.68 1.01 1.13 1.77

160 320 400 1000

Ours

80

80

80

Walkingtogether
160 320 400 1000

Average

signals”. We pre-process the data and evaluate the results in
the same way as we did on the Human 3.6M dataset.

4.2. Evaluation on Human3.6M and CMU Datasets

We ﬁrst report our results on all actions in the Human
3.6M dataset for both short-term prediction of 80 ms, 160
ms, 320 ms, 400 ms and long-term prediction of 1000 ms.
Among the 15 actions in the dataset, the four actions “walk-
ing”, “eating”, “smoking” and “discussion” are commonly
used in comparison of action speciﬁc human motion predic-
tion methods. Thus we compare the accuracy of our method
against four action speciﬁc methods ERD [5], LSTM-3LR
[5], Structural RNN (SRNN) [10] and LSTM-AE [7], as
well as one general motion prediction method RRNN[14] in
Table 1. From the results, we can see that our method out-
performs the others in most cases. We also provide the qual-
itative comparison results with the state-of-the-art RRNN
method in Figure 3. Both RRNN and our model achieve
good result on “walking” because of its periodic property,
which makes the action easier to model. But for other ape-
riodic classes like “eating”, “smoking” and “discussion”,
RRNN quickly converges to a mean pose – the predicted
ﬁgure could not put its hands down in “eating” and raise its
hand up in “discussion”.

Rather than maintaining a gesture in which one leg
should be put on the other one in the action “smoking”,
RRNN generates an implausible motion in real life that
would cause the subject to go off balance. This further

shows that it is very important to take the correlation be-
tween different body parts into consideration so that the pre-
dicted pose is more realistic. In comparison, our model pre-
dicts plausible motions for both “eating” and “smoking”.
Furthermore, it is observed in the highly aperiodic action
“discussion” that our model can still predict the correct mo-
tion trend, i.e. raising the hands while talking, even though
this motion is not exactly the same as the ground truth. We
compare our algorithm with the general human prediction
model RRNN [14] for the other 11 actions. The quantitative
comparison results are provided in Table 2, which suggest
that our algorithm outperforms RRNN in most cases. Addi-
tionally, our method outperforms RRNN on the average in
both long and short-term predictions. The out-performance
of our method becomes more signiﬁcant for longer term
predictions.

We only consider the more challenging task of training
a general motion prediction model for all actions using the
CMU Motion Caption dataset. Hence, we only show com-
parison results with the state-of-the-art RRNN method. For
a fair comparison, both our model and RRNN are trained us-
ing the same settings on the Human3.6M dataset. The test-
ing error of each action is given in Table 3 and the average
testing error is given in Table 4. In the quantitative compar-
ison, our method outperforms the RRNN method in several
challenging actions such as jumping and running. The qual-
itative comparisons of running and jumping are also shown
in Figure 5. In the qualitative comparisons, we can see that

Figure 3. Qualitative results on for long-term prediction based on the Human3.6M dataset. Starting from the left top clockwisely the
four actions are “walking”, “sitting”, “smoking” and “discussion”. For each action, the top, middle and bottom sequences correspond to
RRNN, our model and ground truth respectively. The ﬁrst four frames are the last four frames of conditional seed frames and the next ones
are predicted frames. The RRNN converges to mean pose for eating and discussion, and generates a prediction which is not realistic for
smoking. Our model suffers less from the mean pose problem and predicts more realistic future.

Figure 4. Left: Prediction error vs time for the model. For the model with LSTM as encoder (LSTM ENC), the error accumulates much
faster than the original model, which means that our model performs better especially for long-term prediction. Middle: Comparison of
testing error with different window length C for training, namely 5, 10, 20. The long-term error decreases when window size increases
from 5 to 10, while the improvement is not obvious when further increase from 10 to 20. Right : Compare the testing error of our model
with and without adversarial regularizer, it shows that adversarial regularizer helps to train a model with better performance in long-term.

RRNN converges to mean pose for both running and jump-
ing. On the other hand, our prediction for running is very
close to the realistic one. For jumping, our model also pre-
dicts the correct motion trend, i.e. squatting followed by
jumping, and the main error comes from the duration of
squatting.

4.3. Ablation Study

The role of long-term encoder The long-term encoder in
our model is used to capture long-term dependencies. We
verify its effectiveness by removing it from our model. The
results in Table 5 suggest that the average error gets larger
without the long-term encoder, especially for long-term pre-
diction of 1000 ms.

Rectangular kernel over spatial axis We use a rectangular
kernel over the spatial axis (2 × 7 kernel) in our CEM in
order to better capture the dependencies between different

body parts. We also verify the effectiveness by comparing
it with square kernel (4 × 4 kernel) and rectangular kernel
over the temporal axis (7 × 2 kernel). The results in Table 6
indicate that the 2 × 7 kernel is the best choice.

Adversarial regularizer We use an adversarial regularizer
in our model to help generate more plausible motion.
In
order to explore the role of the adversarial regularizer, we
compare the performance of our model with and without the
regularizer. The result in Figure 4 suggests that the adver-
sarial regularizer helps to improve the performance of our
model even though marginally. Moreover, since the adver-
sarial regularizer is only used during training, it does not
add complexity to our model during inference.

Different window size C In our decoder, different window
sizes C result in different perception range. Intuitively, en-
larging the window size may enlarge the perception range
and results in better performance, but also requires more

Table 3. Motion prediction error in terms of Euler angle error for eight actions in the CMU Motion capture dataset for short-term of 80,
160, 320, 400, and long-term of 1000ms (best results in bold).

Basketball

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.50 0.80 1.27 1.45 1.78 0.41 0.76 1.32 1.54 2.15 0.33 0.59 0.93 1.10 2.05 0.56 0.88 1.77 2.02 2.40
0.37 0.62 1.07 1.18 1.95 0.32 0.59 1.04 1.24 1.96 0.25 0.56 0.89 1.00 2.04 0.39 0.60 1.36 1.56 2.01

Ours

80

80

80

Basketball Signal
160 320 400 1000

Directing Trafﬁc
160 320 400 1000

Jumping

Running

Soccer

Walking

Washwindow

80

ms

160 320 400 1000

160 320 400 1000
RRNN [14] 0.33 0.50 0.66 0.75 1.00 0.29 0.51 0.88 0.99 1.72 0.35 0.47 0.60 0.65 0.88 0.30 0.46 0.72 0.91 1.36
0.28 0.41 0.52 0.57 0.67 0.26 0.44 0.75 0.87 1.56 0.35 0.44 0.45 0.50 0.78 0.30 0.47 0.80 1.01 1.39

160 320 400 1000

160 320 400 1000

Ours

80

80

80

Figure 5. Qualitative result on the CMU Motion Capture dataset. Top: “Running” action; Bottom: “Jumping” action. For each action,
the top, middle are the results of RRNN and our model, and the ground truth is given in the bottom. The ﬁrst four frames are the last four
frames of the conditional seed frames and the next are the predicted ones.

Table 4. Average testing error on the CMU Motion Capture dataset
in terms of Euler angle error.

ms
RRNN [14]

Ours

80
0.38
0.31

160
0.62
0.52

320
1.02
0.86

400
1.17
0.99

1000
1.67
1.55

ms
4 × 4 kernel

Table 6. Comparison of different kernels on Human3.6M.
160
0.72
0.71
0.68

1000
1.80
1.79
1.77

320
1.05
1.05
1.01

80
0.41
0.40
0.38

400
1.16
1.17
1.13

2 × 7 kernel

7 × 2 kernel

Table 5. Our model w/wo long-term Encoder on Human3.6M.
1000
1.77
1.88

ms
With long-term Encoder

Without long-term Encoder

320
1.01
1.05

160
0.68
0.72

400
1.13
1.17

80
0.38
0.41

computation resources. We thus train three different models
with window size C = 5 10 and 20. In the right plot of Fig-
ure 4, we show average testing error over all 15 actions. The
result suggests that there is not much improvement when the
window size is larger than 10. Consequently, we set C = 20
for our model in view of the trade-off between accuracy and
computational accuracy.

two types of convolutional encoders in our model, namely
the long-term encoder and short-term encoder, so that both
distant and nearby temporal motion information can be used
for future prediction. We demonstrated that our model per-
forms better than existing state-of-the-art RNN based mod-
els, especially for long-term prediction tasks. Moreover,
we show that our model can generate better predictions for
complex actions due to the use of hierarchical convolutional
structure for modeling complicated spatial-temporal corre-
lations.

5. Conclusion

In this work, we proposed a convolutional sequence-to-
sequence model for human motion prediction. We adopted

This work was partially supported by the Singapore
MOE Tier 1 grant R-252-000-637-112 and the National
University of Singapore AcRF grant R-252-000-639-114.

Acknowledgements

learning with neural networks. In Advances in neural infor-
mation processing systems, pages 3104–3112, 2014.
[17] G. W. Taylor, G. E. Hinton, and S. T. Roweis. Modeling
In Advances
human motion using binary latent variables.
in neural information processing systems, pages 1345–1352,
2007.

[18] A. T¨ozeren. Human body dynamics: classical mechanics
and human movement. Springer Science & Business Media,
1999.

[19] J. M. Wang, D. J. Fleet, and A. Hertzmann. Gaussian process
dynamical models for human motion. IEEE transactions on
pattern analysis and machine intelligence, 30(2):283–298,
2008.

[20] D. A. Winter. Human balance and posture control during
standing and walking. Gait & posture, 3(4):193–214, 1995.

References

[1] J. Bradbury, S. Merity, C. Xiong, and R. Socher. Quasi-
In International Conference on

recurrent neural networks.
Learning Representation (ICLR) 2016, 2016.

[2] M. Brand and A. Hertzmann.

In
Proceedings of the 27th annual conference on Computer
graphics and interactive techniques, pages 183–192. ACM
Press/Addison-Wesley Publishing Co., 2000.

Style machines.

[3] J. Butepage, M. J. Black, D. Kragic, and H. Kjellstrom.
Deep representation learning for human motion prediction
and classiﬁcation. In The IEEE Conference on Computer Vi-
sion and Pattern Recognition (CVPR), July 2017.

[4] K. Cho, B. van Merri¨enboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder–
decoder approaches. Syntax, Semantics and Structure in Sta-
tistical Translation, page 103, 2014.

[5] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent
network models for human dynamics. In Proceedings of the
IEEE International Conference on Computer Vision, pages
4346–4354, 2015.

[6] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning. In
D. Precup and Y. W. Teh, editors, Proceedings of the 34th
International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 1243–
1252, International Convention Centre, Sydney, Australia,
06–11 Aug 2017. PMLR.

[7] P. Ghosh, J. Song, E. Aksan, and O. Hilliges. Learning hu-
man motion models for long-term predictions. arXiv preprint
arXiv:1704.02827, 2017.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016.

[9] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu.
Human3.6m: Large scale datasets and predictive meth-
IEEE
ods for 3D human sensing in natural environments.
Transactions on Pattern Analysis and Machine Intelligence,
36(7):1325–1339, jul 2014.

[10] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
RNN: Deep learning on spatio-temporal graphs. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5308–5317, 2016.

[11] N. Kalchbrenner and P. Blunsom. Recurrent continuous

translation models. In EMNLP, volume 3, page 413, 2013.

[12] N. Kalchbrenner, L. Espeholt, K. Simonyan, A. van den
Oord, A. Graves, and K. Kavukcuoglu. Neural machine
translation in linear time. CoRR, abs/1610.10099, 2016.
[13] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014.

[14] J. Martinez, M. J. Black, and J. Romero. On human mo-
tion prediction using recurrent neural networks. In The IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), July 2017.

[15] V. Pavlovic, J. M. Rehg, and J. MacCormick. Learning
In Advances
switching linear models of human motion.
in neural information processing systems, pages 981–987,
2001.

[16] I. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence

