VERSE: Versatile Graph Embeddings from Similarity Measures

Anton Tsitsulin
Hasso Plattner Institute
anton.tsitsulin@hpi.de

Panagiotis Karras
Aarhus University
panos@cs.au.dk

Davide Mottin
Hasso Plattner Institute
davide.mottin@hpi.de

Emmanuel Müller
Hasso Plattner Institute
emmanuel.mueller@hpi.de

8
1
0
2
 
r
a

M
 
3
1
 
 
]
I
S
.
s
c
[
 
 
1
v
2
4
7
4
0
.
3
0
8
1
:
v
i
X
r
a

ABSTRACT
Embedding a web-scale information network into a low-dimensional
vector space facilitates tasks such as link prediction, classification,
and visualization. Past research has addressed the problem of ex-
tracting such embeddings by adopting methods from words to
graphs, without defining a clearly comprehensible graph-related
objective. Yet, as we show, the objectives used in past works implic-
itly utilize similarity measures among graph nodes.

In this paper, we carry the similarity orientation of previous
works to its logical conclusion; we propose VERtex Similarity Em-
beddings (VERSE), a simple, versatile, and memory-efficient method
that derives graph embeddings explicitly calibrated to preserve
the distributions of a selected vertex-to-vertex similarity measure.
VERSE learns such embeddings by training a single-layer neural
network. While its default, scalable version does so via sampling
similarity information, we also develop a variant using the full infor-
mation per vertex. Our experimental study on standard benchmarks
and real-world datasets demonstrates that VERSE, instantiated with
diverse similarity measures, outperforms state-of-the-art methods
in terms of precision and recall in major data mining tasks and
supersedes them in time and space efficiency, while the scalable
sampling-based variant achieves equally good results as the non-
scalable full variant.
ACM Reference Format:
Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller.
2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In
WWW 2018: The 2018 Web Conference, April 23–27, 2018, Lyon, France. ACM,
New York, NY, USA, 10 pages. https://doi.org/10.1145/3178876.3186120

1 INTRODUCTION

Graph data naturally arises in many domains, including social
networks, protein networks, and the web. Over the past years,
numerous graph mining techniques have been proposed to analyze
and explore such real-world networks. Commonly, such techniques
apply machine learning to address tasks such as node classification,
link prediction, anomaly detection, and node clustering.

Machine learning algorithms require a set of expressive discrim-
inant features to characterize graph nodes and edges. To this end,
one can use features representing similarities among nodes [18].

This paper is published under the Creative Commons Attribution 4.0 International
(CC BY 4.0) license. Authors reserve their rights to disseminate the work on their
personal and corporate Web sites with the appropriate attribution.
WWW 2018, April 23–27, 2018, Lyon, France
© 2018 IW3C2 (International World Wide Web Conference Committee), published
under Creative Commons CC BY 4.0 License.
ACM ISBN 978-1-4503-5639-8/18/04.
https://doi.org/10.1145/3178876.3186120

(a) Community structure

(b) Roles

(c) Structural equivalence

Figure 1: Three node properties are highlighted on the same
graph. Can a single model capture these properties?

However, feature engineering is tedious work, and the results do
not translate well across tasks [15].

An alternative to feature design is to learn feature vectors, or
embeddings by solving an optimization problem in unsupervised
fashion. Yet devising and solving a universal and tractable optimiza-
tion problem for learning representations has withstood research
efforts [7]. One line of research [11, 42] applies classical dimension-
ality reduction methods, such as SVD, to similarity matrices over
the graph; yet these methods are burdened with constructing the
matrix. While a recent approach [33] overcomes this impediment,
it results in poor quality in prediction tasks due to its linear nature.
Another line of research aims to generate features capturing
neighborhood locality, usually through an objective that can be opti-
mized by Stochastic Gradient Descent (SGD) [37, 41]. Such methods
rely on an implicit, albeit rigid, notion of node neighborhood; yet
this one-size-fits-all approach cannot grapple with the diversity of
real-world networks and applications. Grover et al. [15] discerned
this inflexibility in the notion of the local neighborhood; to ame-
liorate it, they proposed Node2vec, which biases the exploration
strategy of [37] using two hyperparameters. Yet this hyperparame-
ter-tuned approach raises a cubic worst-case space complexity and
compels the user to traverse several feature sets and gauge the one
that attains the best performance in the downstream task. Besides,
a local neighborhood, even when found by hyperparameter tun-
ing, still represents only one locality-based class of features; hence,
Node2vec does not adequately escape the rigidity it tries to mend.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We argue that features extracted by a more versatile similarity
notion than that of a local neighborhood would achieve the flexibil-
ity to solve diverse data mining tasks in a large variety of graphs.
Figure 1 makes a case for such a versatile similarity notion by ex-
posing three distinct kinds of similarity on a graph: community
structure guides community detection tasks, roles are typically used
in classification, while structural equivalence defines peer corre-
spondences in knowledge graphs. As real-world tasks rely on a mix
of such properties, a versatile feature learning algorithm should be
capable of capturing all such similarities.

In this paper, we propose VERSE, the first, to our knowledge, ver-
satile graph embedding method that explicitly learns any similarity
measures among nodes. In its learning core, VERSE stands between
deep learning approaches [12, 48] on the one hand and the direct
decomposition of the similarity matrix [11, 42] on the other hand.
Instead, VERSE trains a simple, yet expressive, single-layer neu-
ral network to reconstruct similarity distributions between nodes.
Thereby, it outperforms previous methods in terms of both runtime
and quality on a variety of large real networks and tasks.

Thanks to its ability to choose any appropriate similarity measure
for the task at hand, VERSE adjusts to that task without needing
to change its core. Thereby, it fully ameliorates the rigidity ob-
served in [15], and integrates representation learning with feature
engineering: any similarity measure, including those developed
in feature engineering, can be used as input to VERSE. For the
sake of illustration, we instantiate our generic methodology using
three popular similarity measures, namely Personalized PageRank
(PPR) [34], SimRank [21], and adjacency similarity. We also show
that versatility does not imply a new burden to the user, merely
substituting hyperparameter tuning with similarity measure tuning:
using PPR as a default choice for the similarity measure leads to
good performance in nearly all tasks and networks we examined.

We summarize our contributions as follows.

• We propose a versatile framework for graph embeddings
that explicitly learns the distribution of any vertex similarity
measure for each graph vertex.

• We interpret previous graph embeddings through the lens
of our similarity framework, and instantiate VERSE with
Personalized PageRank, SimRank, and Adjacency similarity.
• We devise an efficient algorithm, linear in graph size, based
on a single-layer neural network minimizing the divergence
from real to reconstructed similarity distributions.

• In a thorough experimental evaluation, we show that VERSE
outperforms the state-of-the-art approaches in various graph
mining tasks in quality while being even more efficient.

2 RELATED WORK

In the absence of a general-purpose representation for graphs, graph
analysis tasks require domain experts to craft features [4, 18] or
to use specialized feature selection algorithms [36, 40]. Recently,
specialized methods were introduced to learn representations of dif-
ferent graph parts [2, 31] and graphs with annotations on nodes [20,
55], or edges [19, 49]. We focus on learning representations of nodes
in graphs without any prior or additional information other than
graph structure.

Traditional feature learning learns features by compressing rep-
resentations such as the Laplacian or adjacency matrix to a low-
dimensional space. Early works in this area include spectral tech-
niques [6] and nonlinear dimensionality reduction [39, 44]. In an-
other vein, Marginal Fisher Analysis [51] analyzes the dimension-
ality reduction of a point data set as the embedding of a graph
capturing its statistic and geometric properties. Such methods can-
not be applied to large graphs, as they operate on dense matrices.
Some efforts have been made to overcome this limitation using
enhanced linear algebra tools. Ahmed et al. [3] adopt stochastic
gradient optimization for fast adjacency matrix eigendecomposi-
tion; Ou et al. [33] utilize sparse generalized SVD to generate a
graph embedding, HOPE, from a similarity matrix amenable to de-
composition into two sparse proximity matrices. HOPE is the first
to support diverse similarity measures; however, it still requires
the entire graph matrix as input and views the problem as one of
linear dimensionality reduction rather than as one of nonlinear
learning. This way, it deviates not only from current research on
graph embeddings but also from older works [51].

Neural methods for representation learning. Advances in ma-
chine learning have led to the adoption of neural methods for learn-
ing representations [7]. Building on the success of deep learning in
domains such as image processing [24] and Natural Language Pro-
cessing (NLP) [8, 29, 35], word2vec [29] builds word embeddings
by training a single-layer neural network to guess the contextual
words of a given word in a text. Likewise, GloVe [35] learns a
word space through a stochastic version of SVD in a transformed
cooccurrence matrix. While such text-based methods inherently
take neighbor relationships into account, they require conceptual
adaptations to model graphs [37].

Neural Graph Embeddings. The success of neural word embed-
dings inspired natural extensions towards learning graph repre-
sentations [11, 12, 15, 37, 46, 48]. DeepWalk [37] first proposed
to learn latent representations in a low-dimensional vector space
exploiting local node neighborhoods. It runs a series of random
walks of fixed length from each vertex and creates a matrix of d-
dimensional vertex representations using the SkipGram algorithm
of [29]. These representations maximize the posterior probability
of observing a neighboring vertex in a random walk. DeepWalk
embeddings can inform classification tasks using a simple linear
classifier such as logistic regression.

GraRep [11] suggests using Singular Value Decomposition (SVD)
on a log-transformed DeepWalk transition probability matrix of
different orders, and then concatenate the resulting representations.
Struc2vec [38] rewires the graph to reflect isomorphism among
nodes and capture structural similarities, and then derives an em-
bedding relying on the DeepWalk core. Works such as [12, 48]
investigate deep learning approaches for graph embeddings. Their
results amount to complex models that require elaborate parameter
tuning and computationally expensive optimization, leading to time
and space complexities unsuitable for large graphs.

Nevertheless, all DeepWalk-based approaches use objective
functions that are not tailored to graph structures. Some works [15,
38, 41] try to infuse graph-native principles into the learning pro-
cess. LINE [41] proposed graph embeddings that capture more

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Algorithm

Similarity

method

Local Scalable Nonlinear Global

Versatile

DeepWalk [37] ✔
Node2vec [15]
LINE [41]
GraRep [11]
SDNE [48]
DNGR [12]
HOPE [33]

✔
✘
✔
✘
✘

VERSE

✔

✔

✔
✘
✘
✘
✔

✔

✔

✔
✔
✔
✔
✘

✔

✔

✘
✔
✘
✔
✔

✔

✘

✘
✘
✘
✘
✔

✔

Table 1: Outline of related work in terms of fulfilled (✔) and
missing (✘) properties of algorithm and similarity measure.

elaborate proximity notions. However, even LINE’s notion of prox-
imity is restricted to the immediate neighborhoods of each node;
that is insufficient to capture the complete palette of node rela-
tionships [15, 33, 38]. Furthermore, Node2vec [15] introduces two
hyperparameters to regulate the generation of random walks and
thereby tailor the learning process to the graph at hand in semi-
supervised fashion. However, Node2vec remains attached to the
goal of preserving local neighborhoods and requires laborious tun-
ing for each dataset and each task.

Overview. Table 1 outlines five desirable properties for a graph
embedding, and the extent to which previous methods possess
them. We distinguish between properties of algorithms, on the one
hand, and those of any implicit or explicit similarity measure among
nodes a method may express, on the other hand.

• local: not requiring the entire graph matrix as input; GraRep,
DNGR, and HOPE fail in this respect.
• scalable: capable to process graphs with more than 106 nodes
in less than a day; some methods fail in this criterion due to the
dense matrix (GraRep), deep learning computations (SDNE), or
both (DNGR).
• nonlinear: employing nonlinear transformations; HOPE relies
on a linear dimensionality reduction method, SVD; that is detri-
mental to its performance on building graph representations, just
like linear dimensionality reduction methods fail to confer the
advantages of their nonlinear counterparts in general [26].
• global: capable to model relationships between any pair of
nodes; LINE and SDNE do not share this property as they fail
to look beyond a node’s immediate neighborhood.
• versatile: supporting diverse similarity functions; HOPE does
so, yet is compromised by its linear character.

3 VERSATILE GRAPH EMBEDDING

VERSE possesses all properties mentioned in our taxonomy; it
employs nonlinear transformation, desirable for dimensionality
reduction [26]; it is local in terms of the input it requires per node,
but global in terms of the potential provenance of that input; it is
scalable as it is based on sampling, and versatile by virtue of its
generality.

(a) Similarity

(b) VERSE

(c) SVD

Figure 2: An example similarity matrix and its reconstruc-
tions by VERSE and SVD. Karate club graph [53], dimension-
ality d = 4 for both methods.

3.1 VERSE Objective

Given a graph G = (V , E), where V = (v1, . . . , vn ), n = |V |, is
the set of vertices and E ⊆ (V × V ) the set of edges, we aim to
learn a nonlinear representation of vertices v ∈ V to d-dimensional
embeddings, where d ≪ n. Such representation is encoded into a
n × d matrix W ; the embedding of a node v is the row Wv, · in the
matrix; we denote it as Wv for compactness.

Our embeddings reflect distributions of a given graph similarity
simG : V × V → R for every node v ∈ V . As such, we require that
the similarities from any vertex v to all other vertices simG(v, ·) are
amenable to be interpreted as a distribution with (cid:80)u ∈V simG(v, u) =
1 for all v ∈ V . We aim to devise W by a scalable method that
requires neither the V ×V stochastic similarity matrix nor its explicit
materialization.

The corresponding node-to-node similarity in the embedded
space is simE : V × V → R. As an optimization objective, we aim
to minimize the Kullback-Leibler (KL) divergence from the given
similarity distribution simG to that of simE in the embedded space:

(cid:88)

v ∈V

KL (simG(v, ·) || simE(v, ·))

(1)

We illustrate the usefulness of this objective using a small simi-
larity matrix. Figure 2 shows (a) the Personalized PageRank matrix,
(b) the reconstruction of the same matrix by VERSE, and (c) the
reconstruction of the same matrix using SVD. It is visible that the
nonlinear minimization of KL divergence between distributions
preserves most of the information in the original matrix, while the
linear SVD-based reconstruction fails to differentiate some nodes.

3.2 VERSE Embedding Model

We define the unnormalized distance between two nodes u, v in
the embedding space as the dot product of their embeddings Wu ·
W ⊤
v . The similarity distribution in the embedded space is then
normalized with softmax:

simE(v, ·) =

exp(WvW ⊤)
i=1 exp (Wv · Wi )

(cid:80)n

(2)

By Equation 1, we should minimize the KL-divergence from simG
to simE; omitting parts dependent on simG only, this objective is
equivalent to minimizing the cross-entropy loss function [14]:

L = − (cid:88)
v ∈V

simG(v, ·) log (simE (v, ·))

(3)

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We can accommodate this objective by stochastic gradient de-
scent, which allows updating the model on each node singularly.
However, a naïve version of gradient descent would require the
full materialization of simE and simG. Even in case simG is easy to
compute on the fly, such as the adjacency matrix, the softmax in
Equation 2 still has to be normalized over all nodes in the graph.

We use Noise Contrastive Estimation (NCE) [16, 30], which al-
lows us to learn a model that provably converges to its objective
(see [17], Theorem 2). NCE trains a binary classifier to distinguish
between node samples coming from the empirical similarity dis-
tribution simG and those generated by a noise distribution Q over
the nodes. Consider an auxiliary random variable D for node clas-
sification, such that D = 1 for a node drawn from the empirical
distribution and D = 0 for a sample drawn from the noise distribu-
tion. Given a node u drawn from some distribution P and a node
v drawn from the distribution of simG (u, ·), we draw s ≪ n nodes
(cid:101)v from Q(u) and use logistic regression to minimize the negative
log-likelihood:

(cid:104)

log PrW (D = 1|simE(u, v))+

LN C E = (cid:88)
u∼P
v∼simG(u, ·)
sE
(cid:101)v∼Q(u) log PrW (D = 0|simE(u, (cid:101)v))

(cid:105)

(4)

where PrW is computed from W as a sigmoid σ (x) = (1 + e−x )−1 of
the dot product between vectors Wu and Wv , while we compute
simE (u, ·) without the normalization of Equation 2. As the number
of noise samples s increases, the NCE derivative provably converges
to the gradient of cross-entropy [30]; thus, by virtue of NCE’s
asymptotic convergence guarantees, we are in effect minimizing
the KL-divergence from simG. NCE’s theoretical guarantees depend
on s, yet small values work well in practice [30]. In our experiments,
we use s = 3. These convergence guarantees of NCE are not affected
by choice of distributions P and Q (see [17], Corollary 5); however,
its performance is empirically dependent on Q [25].

3.3 Instantiations of VERSE

While VERSE can be used with any similarity function, we choose
to instantiate our model to widely used similarities simG, namely
Personalized PageRank (PPR), Adjacency Similarity, and SimRank.

Personalized PageRank. Personalized PageRank [34] is a com-
mon similarity measure among nodes, practically used for many
graph mining tasks [15, 28].

Definition 3.1. Given a starting node distribution s, damping
factor α, and the normalized adjacency matrix A, the Personalized
PageRank vector πs is defined by the recursive equation:

πs = αs + (1 − α)πs A
The stationary distribution of a random walk with restart with
probability α converges to PPR [34]. Thus, a sample from simG(v, ·)
is the last node in a single random walk from node v. The damping
factor α controls the average size of the explored neighborhood. In
Section 3.6 we show that α is tightly coupled with the window size
parameter w of DeepWalk and Node2vec.

Adjacency similarity. A straightforward similarity measure is
the normalized adjacency matrix; this similarity corresponds to the

LINE-1 model and takes into account only the immediate neighbors
of each node. More formally, given the out degree Out(u) of node u

simADJ

G (u, v) =

(cid:40)

1/Out(u)
0

if (u, v) ∈ E
otherwise

(5)

We experimentally demonstrate that VERSE model is effective

even in preserving the adjacency matrix of the graph.
SimRank. SimRank [21] is a measure of structural relatedness
between two nodes, based on the assumption that two nodes are
similar if they are connected to other similar nodes; SimRank is
defined recursively as follows:

simSR

G (u, v) =

C
|I (u)| |I (v)|

|I (u) |
(cid:88)

|I (v)|
(cid:88)

simSR

G (Ii (u), Ij (v))

(6)

j=1

i=1
where I (v) denotes the set of in-neighbors of node v, and C is
a number between 0 and 1 that geometrically discounts the im-
portance of farther nodes. SimRank is a recursive procedure that
involves computationally expensive operations: the straightforward
method has the complexity of O(n4).

√

SimRank values can be approximated up to a multiplicative
factor dependent on C through SimRank-Aware Random Walks
(SARW) [22]. SARW computes a SimRank approximation through
two reversed random walks with restart where the damping factor
α is set to α =
C. A reversed random walk traverses any edge
(u, v) in the opposite direction (v, u). Since we are only interested in
the distribution of each simSR
G (v, ·), we can ignore the multiplicative
factor in the approximation [22] that has little impact on our task.
Algorithm 1 VERSE

1: function VERSE(G, simG, d)
W ← N (cid:0)0, d−1(cid:1)
2:
repeat

▷ With W ∈ R|V |×d

▷ Sample a node
▷ Sample positive example

▷ Sample negative example

u ∼ P
v ∼ simG(u)
Wu ,Wv ← Update(u, v, 1)
for i ← 1 . . . s do
(cid:101)v ∼ Q(u)
Wu ,W

(cid:101)v ← Update(u, (cid:101)v, 0)

3:

4:

5:

6:

7:

8:

9:

10:

▷ Logistic gradient update

until converged
return W

11:
12: function Update(u, v, D)
13:

д ← (D − σ (Wu · Wv )) ∗ λ
Wu ← д ∗ Wv
Wv ← д ∗ Wu

14:

15:

3.4 VERSE Algorithm

Algorithm 1 presents the overall flow of VERSE. Given a graph,
a similarity function simG, and the embedding space dimension-
ality d, we initialize the output embedding matrix W to N (0, 1
d ).
Then, we optimize our objective (Equation 4) by gradient descent
using the NCE algorithm discussed in the previous section. To do
so, we repeatedly sample a node from the positive distribution P,
sample the simG (e.g. pick a neighboring node), and draw s nega-
tive examples. The σ in Line 13 represents the sigmoid function
σ = (1 + e−x )−1, and λ the learning rate. We choose P and Q to be
distributed uniformly by U(1, n).

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

As a strong baseline for applications handling smaller graphs,
we also consider an elaborate, exhaustive variant of VERSE, which
computes full similarity distribution vectors per node instead of
performing NCE-based sampling. We name this variant fVERSE
and include it in our experimental study.

Figure 3 presents our measures on the ability to reconstruct a
similarity matrix for (i) VERSE using NCE; (ii) VERSE using Nega-
tive Sampling (NS) (also used in Node2vec); and (ii) the exhaustive
fVERSE variant. We observe that, while NCE approaches the ex-
haustive method in terms of matching the ground truth top-100
most similar nodes, NS fails to deliver the same quality.

1

0.8

0.6

0.4

k
@
G
C
D
N

full VERSE
NS, s = 3
NCE, s = 3
NCE, s = 100

20

40

60

80

100

k

Figure 3: Ranking preformance in terms of NDCG for recon-
structing PPR similarity, averaged across nodes in a graph.

3.5 Complexity Comparison

Table 2 presents the average (Θ) and worst-case (O) time and space
complexity of VERSE, along with those of methods in previous
works; d is the embedding dimensionality, n the number of nodes,
m the number of edges, and s the number of samples used, and t the
number of iterations in GraRep. Methods that rely on fast sampling
(VERSE and LINE) require time linear in n and space quadratic in
n in the worst case. DeepWalk requires O(n log n) time due to its
use of hierarchical softmax. Node2vec stores the neighbors-of-a-
neighbor, incurring a quadratic cost in sparse graphs, but cubic in
dense graphs. Thus, VERSE comes at the low end of complexities
compared to previous work on graph embeddings. Remarkably,
even the computationally expensive fVERSE affords complexity
comparable to some previous works.

Time

Space

method

Θ
dn log n
tn3
dsn
dsn
d2m
dn2
dsn

DeepWalk
GraRep
LINE
Node2vec
HOPE
fVERSE
VERSE

O
dn log n
tn3
dsn
dsn
d2n2
dn2
dsn
Table 2: Comparison of neural embedding methods in terms
of average (Θ) and worst-case (O) time and space complexity.

Θ
m
n2
m
m2
n
m
n2
m

O
n2
n2
n2
n3
n2
n2
n2

3.6 Similarity Notions in Previous Approaches

Here, we provide additional theoretical considerations of VERSE
compared to LINE [41], DeepWalk [37] and Node2vec [15] and
demonstrate how our general model subsumes and extends previous
research in versatility and scalability.

Comparison with DeepWalk and Node2vec. DeepWalk and
Node2vec generate samples from random walks of fixed window
size w by the word2vec sampling strategy [29]. We derive a re-
lationship between the window size w of that strategy and the
damping factor α of Personalized PageRank.

Lemma 3.2. Let Xr be the random variable that represents the
length of a random walk r sampled with parameter w by the word2vec
sampling strategy. Then for any 0 < j ≤ w

Pr(Xr = j) =

(w − j + 1)

(7)

2
w(w + 1)

Proof. For each node v ∈ V , word2vec strategy samples two
random walks of length w starting from v ∈ V . These two random
walks represents the context of v, where v is the central node of
a walk of length 2w + 1. The model is then trained on increasing
context size up to w. Therefore, the number of nodes sampled for
each random walk amount to (cid:80)w
. A node at distance
0 < j ≤ w is sampled (w − j + 1) times; thus, the final probability is
□
w (w +1) (w − j + 1).

i=1 i = w (w +1)

2

2

Personalized PageRank provides the maximum likelihood esti-
mation for the distribution in Equation 7 for α = w −1
w +1 . Then, w = 10
corresponds to α = 0.82, which is close to the standard α = 0.85,
proved effective in practice [10]. On the other hand, α = 0.95, which,
for example, achieves the best performance on a task in Section 4.2,
corresponds to w = 39. Such large w prohibitively increases the
computation time for DeepWalk and Node2vec.

Comparison with LINE. LINE introduces the concept of first- and
second-order proximities to model complex node relationships. As
we discussed, in VERSE, first-order proximity corresponds to the
dot-product among the similarity vectors in the embedding space:

simE(u, v) = Wu · Wv

On the other hand, second-order proximity corresponds to let-
ting VERSE learn one more matrix W ′, so as to model asymmetric
similarities of nodes in the embedding space. We do that by defining
simE asymmetrically, using both W and W ′:

simE(u, v) = Wu · W ′
v

The intuition behind second-order proximity is the same as that
of SimRank: similar nodes have similar neighborhoods. Every pre-
vious method, except for LINE-1, used second-order proximities,
due to the word2vec interpretation of embeddings borrowed by
DeepWalk and Node2vec. In our model, second-order proximities
can be encoded by adding an additional matrix; we empirically
evaluate their effectiveness in Section 4.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

4 EXPERIMENTS

We evaluate VERSE against several state-of-the-art graph embed-
ding algorithms. For repeatability purposes, we provide all data sets
and the C++ source code for VERSE1, DeepWalk2 and Node2vec3.
We run the experiments on an Amazon AWS c4.8 instance with
60Gb RAM. Each method is assessed on the best possible parame-
ters, with early termination of the computation in case no result is
returned within one day. We provide the following state-of-the-art
graph embedding methods for comparison:

• DeepWalk [37]: This approach learns an embedding by sam-
pling random walks from each node, applying word2vec-based
learning on those walks. We use the default parameters described
in the paper, i.e., walk length t = 80, number of walks per node
γ = 80, and window size w = 10.
• LINE [41]: This approach learns a d-dimensional embedding
in two steps , both using adjacency similarity. First, it learns d/2
dimensions using first-order proximity; then, it learns another d/2
features using second-order proximity. Last, the two halves are
normalized and concatenated. We obtained a copy of the code4 and
run experiments with total T = 1010 samples and s = 5 negative
samples, as described in the paper.
• GraRep [11]: This method factorizes the full adjacency similarity
matrix using SVD, multiplies the matrix by itself, and repeats the
process t times. The final embedding is obtained by concatenating
the factorized vectors. We use t = 4 and 32 dimensions for each
SVD factorization; thus, the final embedding has d = 128.
• HOPE [33]: This method is a revised Singular Value Decomposi-
tion restricted to sparse similarity matrices. We report the results
obtained running HOPE with the default parameters, i.e, Katz simi-
larity (an extension of Katz centrality [23]) as the similarity measure
and β inversely proportional to the spectral radius. Since Katz simi-
larity does not converge on directed graphs with sink nodes, we
used Personalized PageRank with α = 0.85 for the CoCit dataset.
• Node2vec [15]: This is a hyperparameter-supervised approach
that extends DeepWalk by adding two parameters, p and q, so as to
control DeepWalk’s random walk sampling. The special case with
parameters p = 1, q = 1 corresponds to DeepWalk; yet, sometimes
Node2vec shows worse performance than DeepWalk in our evalu-
ation, due to the fact it uses negative sampling, while DeepWalk
uses hierarchical softmax. We fine-tuned the hyperparameters p
and q on each dataset and task. Moreover, we used a large train-
ing data to fairly compare to DeepWalk, i.e., walk length l = 80,
number of walks per node r = 80, and window size w = 10.

Baselines. In addition to graph embeddings methods, we imple-
mented the following baselines.

• Logistic regression: We use the well-known logistic regression
method as a baseline for link prediction. We train the model on a set
of common node-specific features, namely node degree, number of
common neighbors, Adamic-Adar, Jaccard coefficient, preferential
attachment, and resource allocation index [27, 28].

1https://github.com/xgfs/verse
2https://github.com/xgfs/deepwalk-c
3https://github.com/xgfs/node2vec-c
4https://github.com/tangjianpku/LINE

Size

Statistics

dataset

|V |

|E |

| L | Avg. degree Mod.

BlogCatalog
CoCit
CoAuthor
VK
YouTube
Orkut

39
334k
10k
195k
15
44k
178k —
52k
2.7M 2
79k
1.1M
3M 47
3.1M 234M 50

64.8
8.86
6.94
34.1
5.25
70

Density
6.3 × 10−3
2.0 × 10−4
1.3 × 10−4
8.7 × 10−4
9.2 × 10−6
2.4 × 10−5

0.24
0.72
0.84
0.47
0.71
0.68

Table 3: Dataset characteristics: number of vertices |V |, num-
ber of edges |E|; number of node labels |L|; average node de-
gree; modularity [32]; density defined as |E|/(cid:0) |V |
2

(cid:1).

• Louvain community detection [9]: We employ a standard par-
tition method for community detection as a baseline for graph
clustering, reporting the best partition in terms of modularity [32].

Parameter settings. In line with previous research [15, 37, 41] we
set the embedding dimensionality d to 128. The learning procedure
(Algorithm 1, Line 3) is run 105 times for VERSE and 250 times for
fVERSE; the difference in setting is motivated by the number of
model updates which is O(n) in VERSE and O(n2) in fVERSE.

We use LIBLINEAR [13] to perform logistic regression with
default parameter settings. Unlike previous work [15, 37, 41] we
employ a stricter assumption for multi-label node classification: the
number of correct classes is not known apriori, but found through
the Label Powerset multi-label classification approach [45].

For link prediction and multi-label classification, we evaluated
each individual embedding 10 times in order to reduce the noise
introduced by the classifier. Unless otherwise stated, we run each
experiment 10 times, and report the average value among the runs.
Throughout our experimental study, we use the above parameters
as default, unless indicated otherwise.
Datasets. We test our methods on six real datasets; we report the
main data characteristics in Table 3.
• BlogCatalog [54] is a network of social interactions among blog-
gers in the BlogCatalog website. Node-labels represent topic cate-
gories provided by authors.
• Microsoft Academic Graph [1] is a network of academic papers,
citations, authors, and affiliations from Microsoft Academic website
released for the KDD-2016 cup. It contains 150 million papers up to
February 2016 spanning various disciplines from math to biology.
We extracted two separate subgraphs from the original network,
using 15 conferences in data mining, databases, and machine learn-
ing. The first, CoAuthor, is a co-authorship network among authors.
The second, CoCit, is a network of papers citing other papers; labels
represent conferences in which papers were published.
• VK is a Russian all-encompassing social network. We extracted
two snapshots of the network in November 2016 and May 2017 to
obtain information about link appearance. We use the gender of
the user for classification and country for clustering.
• YouTube [43] is a network of social interactions among users of
the YouTube video platform. The labels represent groups of viewers
by video genres.
• Orkut [52] is a network of social interactions among users of the
Orkut social network platform. The labels represent communities
of users. We extracted the 50 biggest communities and use them as
labels for classification.

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Evaluation methodology. The default form of VERSE runs Per-
sonalized PageRank with α = 0.85. For the sake of fairness, we
design a hyperparameter-supervised variant of VERSE, by analogy
to the hyperparameter-tuned variant of DeepWalk introduced
by Node2vec [15]. This variant, hsVERSE, selects the best simi-
larity with cross-validation across two proximity orders (as dis-
cussed in Section 3.6) and three similarities (Section 3.3) with
α ∈{0.45, 0.55, 0.65, 0.75, 0.85, 0.95} for simPPR
G and C ∈ {0.15, 0.25,
0.35, 0.45, 0.55, 0.65} for simSR
G .

Operator

Average
Concat
Hadamard
Weighted L1
Weighted L2

Result

(a + b)/2
[a1, . . . , ad , b1, . . . , bd ]
[a1 ∗ b1, . . . , ad ∗ bd ]
[|a1 − b1|, . . . , |ad − bd |]
[(a1 − b1)2, . . . , (ad − bd )2]

Table 4: Vector operators used for link-prediction task for
each u, v ∈ V and corresponding embeddings a, b ∈ Rd .

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

Average Concat Hadamard
79.69
78.79
68.06
74.91
77.39
74.83
79.10
76.67

80.06
79.16
68.43
74.87
77.49
74.90
79.52
77.07

86.71
85.69
66.54
82.24
77.73
74.81
86.15
79.42
77.53

Node2vec
Feature Eng.
Table 5: Link prediction results on the CoAuthor coauthor-
ship graph. Best results per method are underlined.

method
fVERSE
VERSE

DeepWalk
LINE
HOPE
hsVERSE

Average Concat Hadamard
74.81
73.66
69.92
75.13
71.90
74.02
71.22

74.94
73.78
70.05
75.17
71.89
74.14
71.29

80.77
79.71
69.79
72.54
70.22
80.26
72.43
78.84

Node2vec
Feature Eng.
Table 6: Link prediction results on the VK social graph. Best
results per method are underlined.

L1
84.49
71.93
79.06
80.03
70.55
74.34
76.45
81.25

L1
78.49
74.11
78.38
63.77
71.22
73.04
78.38

L2
84.97
72.11
78.11
80.05
71.83
74.81
76.72
80.85

L2
79.13
74.56
77.37
64.47
70.63
73.53
78.66

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

1%
27.52
27.32
26.81
27.68
23.68
22.81
27.46
27.45

labelled nodes, %
5%
31.01
30.67
30.37
30.24
27.89
27.59
30.67
30.82

3%
29.83
29.42
29.27
29.21
26.90
26.63
29.45
29.66

7%
31.68
31.32
31.04
30.23
28.49
28.19
31.38
31.54

9%
32.24
31.83
31.43
30.79
28.80
28.58
31.92
32.04

Node2vec
Table 7: Multi-class classification results in CoCit dataset.

f (v). On the CoAuthor data, we predict new links for 2015 and 2016
co-authorships, using the network until 2014 for training; on VK, we
predict whether a new friendship link appears between November
2016 and May 2017, using 50% of the new links for training and 50%
for testing. We train the binary classifier by sampling non-existing
edges as negative examples. Tables 5 and 6 report the attained
accuracy. As a baseline, we use a logistic regression classifier trained
on the respective data sets’ features.

VERSE with Hadamard product of vectors is consistently the
best edge representation. We attribute this quality to the explicit re-
construction we achieve using noise contrastive estimation. VERSE
consistently outperforms the baseline in the tested datasets. Be-
sides, the hyperparameter-supervised hsVERSE variant outruns
Node2vec on all datasets.

4.2 Node Classification

We now conduct an extensive evaluation on classification and report
results for all the methods, where possible, with the CoCit, VK,
YouTube, and Orkut graphs. Node classification aims to predict of
the correct node labels in a graph, as described previously in this
section.

We evaluate accuracy by the Micro-F1 and Macro-F1 percentage
measures. We report only Macro-F1, since we experience similar
behaviors with Micro-F1. For each dataset we conduct multiple
experiments, selecting a random sample of nodes for training and
leaving the remaining nodes for testing. The results for four datasets,
shown in Tables 7-10, exhibit similar trends: VERSE yields predic-
tions comparable or superior to those of the other contestants, while
it scales to large networks such as Orkut. LINE outperforms VERSE
only in VK, where the gender of users is better captured using the
direct neighborhood. The hyperparameter-supervised variant, hs-
VERSE, is on a par with Node2vec in terms of quality on CoCit and
VK; on the largest datasets YouTube and Orkut, hsVERSE keeps
outperforming unsupervised alternatives, while Node2vec depletes
the memory.

4.1 Link Prediction

4.3 Node Clustering

Link prediction is the task of anticipating the appearance of a link
between two nodes in a network. Conventional measures for link
prediction include Adamic-Adar, Preferential attachment, Katz, and
Jaccard coefficient. We train a Logistic regression classifier on edge-
wise features obtained with the methods shown in Table 4. For
instance, for a pair of nodes u, v, the Concat operator returns a
vector as the sequential concatenation of the embeddings f (u) and

Graph clustering detects groups of nodes with similar characteris-
tics [9, 32]. We assess the embedding methods, using the k-means
algorithm with k-means++ initialization [5] to cluster the embedded
points in a d-dimensional space. Table 11 reports the Normalized
Mutual Information (NMI) with respect to the original label distri-
bution. On CoAuthor, VERSE has comparable performance with
DeepWalk; yet on VK, VERSE outperforms all other methods.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

method
fVERSE
VERSE

9%
62.50
62.13
62.49
64.23
57.68
63.16
63.30
Table 8: Multi-class classification results in VK dataset.

labelled nodes, %
5%
61.74
61.43
61.79
63.58
57.04
62.50
62.62

3%
61.01
60.53
60.93
62.83
56.65
61.67
61.79

7%
62.26
61.86
62.17
64.01
57.40
62.97
63.04

1%
58.32
57.89
58.22
60.39
54.88
58.87
58.85

DeepWalk
LINE
HOPE
hsVERSE

Node2vec

method
VERSE

DeepWalk
LINE
HOPE
hsVERSE

method
VERSE

DeepWalk
LINE
hsVERSE

1%
17.92
18.16
13.71
9.22
18.16

1%
25.16
24.21
26.79
27.73

labelled nodes, %
5%
24.07
22.89
18.69
15.09
25.40

3%
22.26
21.55
17.36
13.80
22.84

7%
25.07
23.64
19.84
16.18
27.38

labelled nodes, %
5%
29.60
29.63
32.34
32.73

3%
28.22
27.99
30.89
30.70

7%
31.46
30.60
32.92
34.00

9%
25.99
24.54
20.64
16.78
29.09

9%
32.63
31.27
33.65
35.20

Table 9: Multi-label classification results in YouTube dataset.

Table 10: Multi-class classification results in Orkut dataset.

We also assess graph embeddings on their ability to capture the
graph community structure. We apply k-means with different k
values between 2 and 50 and select the best modularity [32] score.
Table 12 presents our results, along with the modularity obtained by
the Louvain method, the state-of-the-art modularity maximization
algorithm [9]. VERSE variants produce result almost equal that
those of Louvain, outperforming previous methods, while the three
methods that could manage the Orkut data perform similarly.

method
fVERSE
VERSE
DeepWalk
LINE
GraRep
HOPE
hsVERSE
Node2vec
Louvain

CoCit
33.22
32.93
34.33
18.79
27.43
19.05
33.24
32.84
30.73
Table 11: Node clustering results in terms of NMI.

VK
9.24
7.62
7.59
7.49
—
6.47
8.77
8.05
4.54

4.4 Graph Reconstruction

Good graph embeddings should preserve the graph structure in the
embedding space. We evaluate the performance of our method on
reconstructing the graph’s adjacency matrix. Since each adjacent

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec
Louvain

CoCit CoAuthor
70.12
69.43
70.04
60.02
67.61
42.45
69.81
70.06
72.05

80.95
79.25
73.83
71.58
77.40
69.57
79.31
75.78
84.29

VK
44.59
45.78
43.30
39.65
—
21.70
45.84
44.27
46.60

YouTube Orkut

—
67.63
58.08
63.40
—
37.94
69.13
—
71.06

—
42.64
44.66
42.59
—
—
—
—
—

Table 12: Node clustering results in terms of modularity.

node should be close in the embedding space, we first sort any
node other than the one considered by decreasing cosine distance
among the vectors. Afterwards, we take a number of nodes equal
to the actual degree of the node in the graph and connect to the
considered node to create the graph structure.

Table 13 reports the relative accuracy measured as the number
of correct nodes in the neighborhood of a node in the embedding
space. Again, VERSE performs comparably well; its exhaustive
variant, fVERSE, which harnesses the full similarity does even
better; however, the top performer is hsVERSE, which achieves the
obtained result when instantiated to the Adjacency Similarity. This
result is unsurprising, given that the adjacency similarity measure
tailors hsVERSE for the task of graph reconstruction.

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec

CoCit CoAuthor
88.96
58.73
51.54
23.32
67.61
25.88
97.53
66.35

98.20
74.30
68.44
62.01
77.40
49.70
98.91
72.70

VK
66.45
50.18
43.04
42.80
—
12.01
78.38
53.70

YouTube Orkut

—
28.64
32.21
17.76
—
33.42
38.34
—

—
18.39
19.75
10.82
—
—
28.81
—

Table 13: Graph reconstruction % for all datasets.

4.5 Parameter Sensitivity

We also evaluate the sensitivity of VERSE to parameter choice.
Figures 4(a),4(b) depict node classification performance in terms of
Micro-F1 on the BlogCatalog dataset, with 10% of nodes labeled.

The dimensionality d determines the size of the embedding,
and hence the possibility to compute more fine-grained representa-
tions. The performance grows linearly as the number of dimensions
approaches 128, while with larger d we observe no further improve-
ment. Sampled VERSE instead, performs comparably better than
fVERSE in low dimensional spaces, but degrades as d becomes
larger than 128; this behavior reflects a characteristic of node sam-
pling that tends to preserve similarities of close neighborhoods in
low-dimensional embeddings, while the VERSE leverages the entire
graph structure for larger dimensionality

The last parameter we study is the damping factor α which
amounts to the inverse of the probability of restarting random
walks from the initial node. As shown in Figure 4(b), the quality

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

1
F
-
o
r
c
i
M

0.4

0.3

0.2

0.1

0

2

0.4

0.3

0.2

1
F
-
o
r
c
i
M

fVERSE
VERSE
DeepWalk
Node2vec
LINE-2

104

s
d
n
o
c
e
s

103

fVERSE
VERSE

fVERSE
VERSE

4

8

16

32

64

128

256

512 1024

0.1

0

0.2

0.4

0.6

0.8

1

102

104

d

(a) Dimensionality d

α

(b) PPR damping factor α

105
nodes

(c) Time, log scale

106

Figure 4: Classification performance of various parameters in Fig. 4(a), 4(b) and scalability of different methods in Fig. 4(c).

LINE, and Node2vec. For each method, we report the total wall-
clock time, with graph loading and necessary preprocessing steps
included. We used LINE-2 time for fair comparison. As Figure 4
shows, VERSE is comfortably the most efficient and scalable method,
processing 106 nodes in about 3 hours, while DeepWalk and LINE
take from 6 to 15 hours.

4.7 Visualization

Last, we show how different embeddings are visualized on a plane.
We apply t-SNE [47] with default parameters to each embedding for
a subset of 1500 nodes from the CoCit dataset, equally distributed
in 5 classes (i.e., conferences); we set the density areas for each class
by Kernel Density Estimation. Figure 5 depicts the result. VERSE
produces well separated clusters with low noise, even finding dis-
tinctions among papers of the same community, namely ICDE (
)
and VLDB (

).

5 CONCLUSIONS

We introduced a new perspective on graph embeddings: to be ex-
pressive, a graph embedding should capture some similarity mea-
sure among nodes. Armed with this perspective, we developed a
scalable embedding algorithm, VERSE. In a departure from previous
works in the area, VERSE aims to reconstruct the distribution of any
chosen similarity measure for each graph node. Thereby, VERSE
brings in its scope a global view of the graph, while substantially
reducing the number of parameters required for training. VERSE
attains linear time complexity, hence it scales to large real graphs,
while it only requires space to store the graph. Besides, we have
shed light on some previous works on graph embeddings, looking at
them and interpreting them through the prism of vertex similarity.
Our thorough experimental study shows that, even instantiated
with PPR as a default similarity notion, VERSE consistently out-
performs state-of-the-art approaches for graph embeddings in a
plethora of graph tasks, while a hyperparameter-supervised vari-
ant does even better. Thus, we have provided strong evidence that
embeddings genuinely based on vertex similarity address graph
mining challenges better than others.

Figure 5: Visualizations of a subset of nodes from CoCit
ICDE, KDD,
graph with selected conferences: VLDB,
WWW, and NIPS. Note that the number of nodes per

class is the same for all conferences.

of classification accurary is quite robust with respect to α for both
VERSE and fVERSE, only compromised by extreme values. An α
value close to 0 reduces PPR to an exploration of the immediate
neighborhood of the node. On the other hand, a value close to 1
amounts to regular PageRank, deeming all nodes as equally im-
portant. This result vindicates our work and distinguishes it from
previous methods based on local neighborhood expansion.

4.6 Scalability

We now present runtime results on synthetic graphs of growing size,
generated by the Watts Strogatz model [50], setting VERSE against
scalable methods with C++ implementations, namely DeepWalk,

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

REFERENCES
[1] 2016. Microsoft Academic Graph - KDD cup 2016.
azurewebsites.net/Data. (2016). Accessed: 2016-04-30.

https://kddcup2016.

[2] Sami Abu-El-Haija, Bryan Perozzi, and Rami Al-Rfou. 2017. Learning Edge

Representations via Low-Rank Asymmetric Projections. CIKM (2017).

[3] Amr Ahmed, Nino Shervashidze, Shravan Narayanamurthy, Vanja Josifovski,
and Alexander J Smola. 2013. Distributed large-scale natural graph factorization.
In WWW. ACM, 37–48.

[4] Leman Akoglu, Mary McGlohon, and Christos Faloutsos. 2010. Oddball: Spotting

anomalies in weighted graphs. In PAKDD. 410–421.

[5] David Arthur and Sergei Vassilvitskii. 2007. k-means++: The advantages of

careful seeding. In SIAM. 1027–1035.

[6] Mikhail Belkin and Partha Niyogi. 2001. Laplacian eigenmaps and spectral

techniques for embedding and clustering. In NIPS. 585–591.

[7] Yoshua Bengio, Aaron Courville, and Pascal Vincent. 2013. Representation

learning: A review and new perspectives. TPAMI (2013), 1798–1828.

[8] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A

neural probabilistic language model. JMLR (2003), 1137–1155.

[9] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefeb-
vre. 2008. Fast unfolding of communities in large networks. Journal of statistical
mechanics: theory and experiment 10 (2008).

[10] Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual
Web search engine. Computer Networks and ISDN Systems (1998), 107 – 117.
[11] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2015. GraRep: Learning Graph Repre-

sentations with Global Structural Information. In CIKM. 891–900.

[12] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2016. Deep Neural Networks for

Learning Graph Representations. In AAAI. 1145–1152.

[13] Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-Rui Wang, and Chih-Jen Lin.
2008. LIBLINEAR: A library for large linear classification. JMLR 9, Aug (2008),
1871–1874.

[14] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep learning. MIT

[16] Michael Gutmann and Aapo Hyvärinen. 2010. Noise-contrastive estimation:
A new estimation principle for unnormalized statistical models.. In AISTATS.
297–304.

[17] Michael U Gutmann and Aapo Hyvärinen. 2012. Noise-contrastive estimation
of unnormalized statistical models, with applications to natural image statistics.
JMLR 13 (2012), 307–361.

[18] Keith Henderson, Brian Gallagher, Lei Li, Leman Akoglu, Tina Eliassi-Rad, Hang-
hang Tong, and Christos Faloutsos. 2011. It’s who you know: graph mining using
recursive structural features. In KDD. 663–671.

[19] Jiafeng Hu, CK Cheng, Zhipeng Huang, Yixiang Fang, and Siqiang Luo. 2017. On

Embedding Uncertain Graphs. In CIKM. ACM.

[20] Xiao Huang, Jundong Li, and Xia Hu. 2017. Label informed attributed network

embedding. In WSDM. ACM, 731–739.

[21] Glen Jeh and Jennifer Widom. 2002. SimRank: a measure of structural-context

similarity. In KDD. 538–543.

[22] Minhao Jiang, Ada Wai-Chee Fu, and Raymond Chi-Wing Wong. 2017. READS:
a random walk approach for efficient and accurate dynamic SimRank. VLDB 10,
9 (2017), 937–948.

[23] Leo Katz. 1953. A new status index derived from sociometric analysis. Psychome-

trika 18, 1 (1953), 39–43.

[24] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classifi-

cation with deep convolutional neural networks. 1097–1105.

[25] Matthieu Labeau and Alexandre Allauzen. 2017. An experimental analysis of
Noise-Contrastive Estimation: the noise distribution matters. EACL (2017).
[26] John A. Lee and Michel Verleysen. 2007. Nonlinear Dimensionality Reduction (1st

ed.). Springer Publishing Company, Incorporated.

[27] Ryan N Lichtenwalter, Jake T Lussier, and Nitesh V Chawla. 2010. New perspec-

tives and methods in link prediction. In KDD. 243–252.

[28] Linyuan Lü and Tao Zhou. 2011. Link prediction in complex networks: A survey.
Physica A: Statistical Mechanics and its Applications 390, 6 (2011), 1150–1170.
[29] Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jeffrey Dean.
2013. Distributed Representations of Words and Phrases and their Composition-
ality. In NIPS. 3111–3119.

[30] Andriy Mnih and Yee Whye Teh. 2012. A fast and simple algorithm for training

neural probabilistic language models. In ICML. 1751–1758.

[31] Annamalai Narayanan, Mahinthan Chandramohan, Lihui Chen, Yang Liu, and
Santhoshkumar Saminathan. 2016. subgraph2vec: Learning distributed represen-
tations of rooted sub-graphs from large graphs. arXiv preprint arXiv:1606.08928
(2016).

[32] Mark EJ Newman. 2006. Modularity and community structure in networks. PNAS

(2006), 8577–8582.

[33] Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym-

metric transitivity preserving graph embedding. In KDD. 1105–1114.

[34] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. 1999. The

PageRank citation ranking: bringing order to the web. (1999).

[35] Jeffrey Pennington, Richard Socher, and Christopher D Manning. 2014. Glove:

Global Vectors for Word Representation.. In EMNLP. 1532–1543.

[36] Bryan Perozzi, Leman Akoglu, Patricia Iglesias Sánchez, and Emmanuel Müller.
2014. Focused clustering and outlier detection in large attributed graphs. In KDD.
1346–1355.

[37] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: online learning

of social representations. In KDD. 701–710.

[38] Leonardo FR Ribeiro, Pedro HP Saverese, and Daniel R Figueiredo. 2017. struc2vec:
Learning node representations from structural identity. In KDD. ACM, 385–394.
[39] Sam T Roweis and Lawrence K Saul. 2000. Nonlinear dimensionality reduction

by locally linear embedding. science 290, 5500 (2000), 2323–2326.

[40] Jiliang Tang and Huan Liu. 2012. Unsupervised Feature Selection for Linked

Social Media Data. In KDD. 904–912.

[41] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. LINE: Large-scale Information Network Embedding. In WWW. 1067–1077.
[42] Lei Tang and Huan Liu. 2009. Relational learning via latent social dimensions. In

[43] Lei Tang and Huan Liu. 2009. Scalable learning of collective behavior based on

sparse social dimensions. In CIKM. 1107–1116.

[44] Joshua B Tenenbaum, Vin De Silva, and John C Langford. 2000. A global geometric
framework for nonlinear dimensionality reduction. science 290, 5500 (2000), 2319–
2323.

[45] Grigorios Tsoumakas and Ioannis Katakis. 2006. Multi-label classification: An

overview. IJDWM 3, 3 (2006).

[46] Cunchao Tu, Weicheng Zhang, Zhiyuan Liu, and Maosong Sun. 2016. Max-
Margin DeepWalk: Discriminative Learning of Network Representation. In IJCAI.
3889–3895.

[47] L.J.P. van der Maaten and G.E. Hinton. 2008. Visualizing High-Dimensional Data
Using t-SNE. Journal of Machine Learning Research 9 (2008), 2579–2605.
[48] Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural Deep Network Em-

bedding. In KDD. 1225–1234.

[49] Suhang Wang, Charu Aggarwal, Jiliang Tang, and Huan Liu. 2017. Attributed

Signed Network Embedding. CIKM (2017).

[50] Duncan J Watts and Steven H Strogatz. 1998. Collective dynamics of ‘small-world’

networks. Nature 393 (1998), 440–442.

[51] Shuicheng Yan, Dong Xu, Benyu Zhang, Hong-Jiang Zhang, Qiang Yang, and
Stephen Lin. 2007. Graph embedding and extensions: A general framework for
dimensionality reduction. TPAMI 29, 1 (2007).

[52] Jaewon Yang and Jure Leskovec. 2015. Defining and evaluating network com-
munities based on ground-truth. Knowledge and Information Systems 42 (2015),
181–213.

[53] Wayne W Zachary. 1977. An information flow model for conflict and fission in

small groups. Journal of anthropological research 33, 4 (1977), 452–473.

[54] R. Zafarani and H. Liu. 2009. Social Computing Data Repository at ASU. (2009).

http://socialcomputing.asu.edu

[55] Daokun Zhanga, Jie Yinb, Xingquan Zhuc, and Chengqi Zhanga. 2017. User

profile preserving social network embedding. In IJCAI.

[15] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable Feature Learning for

KDD. 817–826.

Press.

Networks. In KDD. 855–864.

VERSE: Versatile Graph Embeddings from Similarity Measures

Anton Tsitsulin
Hasso Plattner Institute
anton.tsitsulin@hpi.de

Panagiotis Karras
Aarhus University
panos@cs.au.dk

Davide Mottin
Hasso Plattner Institute
davide.mottin@hpi.de

Emmanuel Müller
Hasso Plattner Institute
emmanuel.mueller@hpi.de

8
1
0
2
 
r
a

M
 
3
1
 
 
]
I
S
.
s
c
[
 
 
1
v
2
4
7
4
0
.
3
0
8
1
:
v
i
X
r
a

ABSTRACT
Embedding a web-scale information network into a low-dimensional
vector space facilitates tasks such as link prediction, classification,
and visualization. Past research has addressed the problem of ex-
tracting such embeddings by adopting methods from words to
graphs, without defining a clearly comprehensible graph-related
objective. Yet, as we show, the objectives used in past works implic-
itly utilize similarity measures among graph nodes.

In this paper, we carry the similarity orientation of previous
works to its logical conclusion; we propose VERtex Similarity Em-
beddings (VERSE), a simple, versatile, and memory-efficient method
that derives graph embeddings explicitly calibrated to preserve
the distributions of a selected vertex-to-vertex similarity measure.
VERSE learns such embeddings by training a single-layer neural
network. While its default, scalable version does so via sampling
similarity information, we also develop a variant using the full infor-
mation per vertex. Our experimental study on standard benchmarks
and real-world datasets demonstrates that VERSE, instantiated with
diverse similarity measures, outperforms state-of-the-art methods
in terms of precision and recall in major data mining tasks and
supersedes them in time and space efficiency, while the scalable
sampling-based variant achieves equally good results as the non-
scalable full variant.
ACM Reference Format:
Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller.
2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In
WWW 2018: The 2018 Web Conference, April 23–27, 2018, Lyon, France. ACM,
New York, NY, USA, 10 pages. https://doi.org/10.1145/3178876.3186120

1 INTRODUCTION

Graph data naturally arises in many domains, including social
networks, protein networks, and the web. Over the past years,
numerous graph mining techniques have been proposed to analyze
and explore such real-world networks. Commonly, such techniques
apply machine learning to address tasks such as node classification,
link prediction, anomaly detection, and node clustering.

Machine learning algorithms require a set of expressive discrim-
inant features to characterize graph nodes and edges. To this end,
one can use features representing similarities among nodes [18].

This paper is published under the Creative Commons Attribution 4.0 International
(CC BY 4.0) license. Authors reserve their rights to disseminate the work on their
personal and corporate Web sites with the appropriate attribution.
WWW 2018, April 23–27, 2018, Lyon, France
© 2018 IW3C2 (International World Wide Web Conference Committee), published
under Creative Commons CC BY 4.0 License.
ACM ISBN 978-1-4503-5639-8/18/04.
https://doi.org/10.1145/3178876.3186120

(a) Community structure

(b) Roles

(c) Structural equivalence

Figure 1: Three node properties are highlighted on the same
graph. Can a single model capture these properties?

However, feature engineering is tedious work, and the results do
not translate well across tasks [15].

An alternative to feature design is to learn feature vectors, or
embeddings by solving an optimization problem in unsupervised
fashion. Yet devising and solving a universal and tractable optimiza-
tion problem for learning representations has withstood research
efforts [7]. One line of research [11, 42] applies classical dimension-
ality reduction methods, such as SVD, to similarity matrices over
the graph; yet these methods are burdened with constructing the
matrix. While a recent approach [33] overcomes this impediment,
it results in poor quality in prediction tasks due to its linear nature.
Another line of research aims to generate features capturing
neighborhood locality, usually through an objective that can be opti-
mized by Stochastic Gradient Descent (SGD) [37, 41]. Such methods
rely on an implicit, albeit rigid, notion of node neighborhood; yet
this one-size-fits-all approach cannot grapple with the diversity of
real-world networks and applications. Grover et al. [15] discerned
this inflexibility in the notion of the local neighborhood; to ame-
liorate it, they proposed Node2vec, which biases the exploration
strategy of [37] using two hyperparameters. Yet this hyperparame-
ter-tuned approach raises a cubic worst-case space complexity and
compels the user to traverse several feature sets and gauge the one
that attains the best performance in the downstream task. Besides,
a local neighborhood, even when found by hyperparameter tun-
ing, still represents only one locality-based class of features; hence,
Node2vec does not adequately escape the rigidity it tries to mend.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We argue that features extracted by a more versatile similarity
notion than that of a local neighborhood would achieve the flexibil-
ity to solve diverse data mining tasks in a large variety of graphs.
Figure 1 makes a case for such a versatile similarity notion by ex-
posing three distinct kinds of similarity on a graph: community
structure guides community detection tasks, roles are typically used
in classification, while structural equivalence defines peer corre-
spondences in knowledge graphs. As real-world tasks rely on a mix
of such properties, a versatile feature learning algorithm should be
capable of capturing all such similarities.

In this paper, we propose VERSE, the first, to our knowledge, ver-
satile graph embedding method that explicitly learns any similarity
measures among nodes. In its learning core, VERSE stands between
deep learning approaches [12, 48] on the one hand and the direct
decomposition of the similarity matrix [11, 42] on the other hand.
Instead, VERSE trains a simple, yet expressive, single-layer neu-
ral network to reconstruct similarity distributions between nodes.
Thereby, it outperforms previous methods in terms of both runtime
and quality on a variety of large real networks and tasks.

Thanks to its ability to choose any appropriate similarity measure
for the task at hand, VERSE adjusts to that task without needing
to change its core. Thereby, it fully ameliorates the rigidity ob-
served in [15], and integrates representation learning with feature
engineering: any similarity measure, including those developed
in feature engineering, can be used as input to VERSE. For the
sake of illustration, we instantiate our generic methodology using
three popular similarity measures, namely Personalized PageRank
(PPR) [34], SimRank [21], and adjacency similarity. We also show
that versatility does not imply a new burden to the user, merely
substituting hyperparameter tuning with similarity measure tuning:
using PPR as a default choice for the similarity measure leads to
good performance in nearly all tasks and networks we examined.

We summarize our contributions as follows.

• We propose a versatile framework for graph embeddings
that explicitly learns the distribution of any vertex similarity
measure for each graph vertex.

• We interpret previous graph embeddings through the lens
of our similarity framework, and instantiate VERSE with
Personalized PageRank, SimRank, and Adjacency similarity.
• We devise an efficient algorithm, linear in graph size, based
on a single-layer neural network minimizing the divergence
from real to reconstructed similarity distributions.

• In a thorough experimental evaluation, we show that VERSE
outperforms the state-of-the-art approaches in various graph
mining tasks in quality while being even more efficient.

2 RELATED WORK

In the absence of a general-purpose representation for graphs, graph
analysis tasks require domain experts to craft features [4, 18] or
to use specialized feature selection algorithms [36, 40]. Recently,
specialized methods were introduced to learn representations of dif-
ferent graph parts [2, 31] and graphs with annotations on nodes [20,
55], or edges [19, 49]. We focus on learning representations of nodes
in graphs without any prior or additional information other than
graph structure.

Traditional feature learning learns features by compressing rep-
resentations such as the Laplacian or adjacency matrix to a low-
dimensional space. Early works in this area include spectral tech-
niques [6] and nonlinear dimensionality reduction [39, 44]. In an-
other vein, Marginal Fisher Analysis [51] analyzes the dimension-
ality reduction of a point data set as the embedding of a graph
capturing its statistic and geometric properties. Such methods can-
not be applied to large graphs, as they operate on dense matrices.
Some efforts have been made to overcome this limitation using
enhanced linear algebra tools. Ahmed et al. [3] adopt stochastic
gradient optimization for fast adjacency matrix eigendecomposi-
tion; Ou et al. [33] utilize sparse generalized SVD to generate a
graph embedding, HOPE, from a similarity matrix amenable to de-
composition into two sparse proximity matrices. HOPE is the first
to support diverse similarity measures; however, it still requires
the entire graph matrix as input and views the problem as one of
linear dimensionality reduction rather than as one of nonlinear
learning. This way, it deviates not only from current research on
graph embeddings but also from older works [51].

Neural methods for representation learning. Advances in ma-
chine learning have led to the adoption of neural methods for learn-
ing representations [7]. Building on the success of deep learning in
domains such as image processing [24] and Natural Language Pro-
cessing (NLP) [8, 29, 35], word2vec [29] builds word embeddings
by training a single-layer neural network to guess the contextual
words of a given word in a text. Likewise, GloVe [35] learns a
word space through a stochastic version of SVD in a transformed
cooccurrence matrix. While such text-based methods inherently
take neighbor relationships into account, they require conceptual
adaptations to model graphs [37].

Neural Graph Embeddings. The success of neural word embed-
dings inspired natural extensions towards learning graph repre-
sentations [11, 12, 15, 37, 46, 48]. DeepWalk [37] first proposed
to learn latent representations in a low-dimensional vector space
exploiting local node neighborhoods. It runs a series of random
walks of fixed length from each vertex and creates a matrix of d-
dimensional vertex representations using the SkipGram algorithm
of [29]. These representations maximize the posterior probability
of observing a neighboring vertex in a random walk. DeepWalk
embeddings can inform classification tasks using a simple linear
classifier such as logistic regression.

GraRep [11] suggests using Singular Value Decomposition (SVD)
on a log-transformed DeepWalk transition probability matrix of
different orders, and then concatenate the resulting representations.
Struc2vec [38] rewires the graph to reflect isomorphism among
nodes and capture structural similarities, and then derives an em-
bedding relying on the DeepWalk core. Works such as [12, 48]
investigate deep learning approaches for graph embeddings. Their
results amount to complex models that require elaborate parameter
tuning and computationally expensive optimization, leading to time
and space complexities unsuitable for large graphs.

Nevertheless, all DeepWalk-based approaches use objective
functions that are not tailored to graph structures. Some works [15,
38, 41] try to infuse graph-native principles into the learning pro-
cess. LINE [41] proposed graph embeddings that capture more

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Algorithm

Similarity

method

Local Scalable Nonlinear Global

Versatile

DeepWalk [37] ✔
Node2vec [15]
LINE [41]
GraRep [11]
SDNE [48]
DNGR [12]
HOPE [33]

✔
✘
✔
✘
✘

VERSE

✔

✔

✔
✘
✘
✘
✔

✔

✔

✔
✔
✔
✔
✘

✔

✔

✘
✔
✘
✔
✔

✔

✘

✘
✘
✘
✘
✔

✔

Table 1: Outline of related work in terms of fulfilled (✔) and
missing (✘) properties of algorithm and similarity measure.

elaborate proximity notions. However, even LINE’s notion of prox-
imity is restricted to the immediate neighborhoods of each node;
that is insufficient to capture the complete palette of node rela-
tionships [15, 33, 38]. Furthermore, Node2vec [15] introduces two
hyperparameters to regulate the generation of random walks and
thereby tailor the learning process to the graph at hand in semi-
supervised fashion. However, Node2vec remains attached to the
goal of preserving local neighborhoods and requires laborious tun-
ing for each dataset and each task.

Overview. Table 1 outlines five desirable properties for a graph
embedding, and the extent to which previous methods possess
them. We distinguish between properties of algorithms, on the one
hand, and those of any implicit or explicit similarity measure among
nodes a method may express, on the other hand.

• local: not requiring the entire graph matrix as input; GraRep,
DNGR, and HOPE fail in this respect.
• scalable: capable to process graphs with more than 106 nodes
in less than a day; some methods fail in this criterion due to the
dense matrix (GraRep), deep learning computations (SDNE), or
both (DNGR).
• nonlinear: employing nonlinear transformations; HOPE relies
on a linear dimensionality reduction method, SVD; that is detri-
mental to its performance on building graph representations, just
like linear dimensionality reduction methods fail to confer the
advantages of their nonlinear counterparts in general [26].
• global: capable to model relationships between any pair of
nodes; LINE and SDNE do not share this property as they fail
to look beyond a node’s immediate neighborhood.
• versatile: supporting diverse similarity functions; HOPE does
so, yet is compromised by its linear character.

3 VERSATILE GRAPH EMBEDDING

VERSE possesses all properties mentioned in our taxonomy; it
employs nonlinear transformation, desirable for dimensionality
reduction [26]; it is local in terms of the input it requires per node,
but global in terms of the potential provenance of that input; it is
scalable as it is based on sampling, and versatile by virtue of its
generality.

(a) Similarity

(b) VERSE

(c) SVD

Figure 2: An example similarity matrix and its reconstruc-
tions by VERSE and SVD. Karate club graph [53], dimension-
ality d = 4 for both methods.

3.1 VERSE Objective

Given a graph G = (V , E), where V = (v1, . . . , vn ), n = |V |, is
the set of vertices and E ⊆ (V × V ) the set of edges, we aim to
learn a nonlinear representation of vertices v ∈ V to d-dimensional
embeddings, where d ≪ n. Such representation is encoded into a
n × d matrix W ; the embedding of a node v is the row Wv, · in the
matrix; we denote it as Wv for compactness.

Our embeddings reflect distributions of a given graph similarity
simG : V × V → R for every node v ∈ V . As such, we require that
the similarities from any vertex v to all other vertices simG(v, ·) are
amenable to be interpreted as a distribution with (cid:80)u ∈V simG(v, u) =
1 for all v ∈ V . We aim to devise W by a scalable method that
requires neither the V ×V stochastic similarity matrix nor its explicit
materialization.

The corresponding node-to-node similarity in the embedded
space is simE : V × V → R. As an optimization objective, we aim
to minimize the Kullback-Leibler (KL) divergence from the given
similarity distribution simG to that of simE in the embedded space:

(cid:88)

v ∈V

KL (simG(v, ·) || simE(v, ·))

(1)

We illustrate the usefulness of this objective using a small simi-
larity matrix. Figure 2 shows (a) the Personalized PageRank matrix,
(b) the reconstruction of the same matrix by VERSE, and (c) the
reconstruction of the same matrix using SVD. It is visible that the
nonlinear minimization of KL divergence between distributions
preserves most of the information in the original matrix, while the
linear SVD-based reconstruction fails to differentiate some nodes.

3.2 VERSE Embedding Model

We define the unnormalized distance between two nodes u, v in
the embedding space as the dot product of their embeddings Wu ·
W ⊤
v . The similarity distribution in the embedded space is then
normalized with softmax:

simE(v, ·) =

exp(WvW ⊤)
i=1 exp (Wv · Wi )

(cid:80)n

(2)

By Equation 1, we should minimize the KL-divergence from simG
to simE; omitting parts dependent on simG only, this objective is
equivalent to minimizing the cross-entropy loss function [14]:

L = − (cid:88)
v ∈V

simG(v, ·) log (simE (v, ·))

(3)

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We can accommodate this objective by stochastic gradient de-
scent, which allows updating the model on each node singularly.
However, a naïve version of gradient descent would require the
full materialization of simE and simG. Even in case simG is easy to
compute on the fly, such as the adjacency matrix, the softmax in
Equation 2 still has to be normalized over all nodes in the graph.

We use Noise Contrastive Estimation (NCE) [16, 30], which al-
lows us to learn a model that provably converges to its objective
(see [17], Theorem 2). NCE trains a binary classifier to distinguish
between node samples coming from the empirical similarity dis-
tribution simG and those generated by a noise distribution Q over
the nodes. Consider an auxiliary random variable D for node clas-
sification, such that D = 1 for a node drawn from the empirical
distribution and D = 0 for a sample drawn from the noise distribu-
tion. Given a node u drawn from some distribution P and a node
v drawn from the distribution of simG (u, ·), we draw s ≪ n nodes
(cid:101)v from Q(u) and use logistic regression to minimize the negative
log-likelihood:

(cid:104)

log PrW (D = 1|simE(u, v))+

LN C E = (cid:88)
u∼P
v∼simG(u, ·)
sE
(cid:101)v∼Q(u) log PrW (D = 0|simE(u, (cid:101)v))

(cid:105)

(4)

where PrW is computed from W as a sigmoid σ (x) = (1 + e−x )−1 of
the dot product between vectors Wu and Wv , while we compute
simE (u, ·) without the normalization of Equation 2. As the number
of noise samples s increases, the NCE derivative provably converges
to the gradient of cross-entropy [30]; thus, by virtue of NCE’s
asymptotic convergence guarantees, we are in effect minimizing
the KL-divergence from simG. NCE’s theoretical guarantees depend
on s, yet small values work well in practice [30]. In our experiments,
we use s = 3. These convergence guarantees of NCE are not affected
by choice of distributions P and Q (see [17], Corollary 5); however,
its performance is empirically dependent on Q [25].

3.3 Instantiations of VERSE

While VERSE can be used with any similarity function, we choose
to instantiate our model to widely used similarities simG, namely
Personalized PageRank (PPR), Adjacency Similarity, and SimRank.

Personalized PageRank. Personalized PageRank [34] is a com-
mon similarity measure among nodes, practically used for many
graph mining tasks [15, 28].

Definition 3.1. Given a starting node distribution s, damping
factor α, and the normalized adjacency matrix A, the Personalized
PageRank vector πs is defined by the recursive equation:

πs = αs + (1 − α)πs A
The stationary distribution of a random walk with restart with
probability α converges to PPR [34]. Thus, a sample from simG(v, ·)
is the last node in a single random walk from node v. The damping
factor α controls the average size of the explored neighborhood. In
Section 3.6 we show that α is tightly coupled with the window size
parameter w of DeepWalk and Node2vec.

Adjacency similarity. A straightforward similarity measure is
the normalized adjacency matrix; this similarity corresponds to the

LINE-1 model and takes into account only the immediate neighbors
of each node. More formally, given the out degree Out(u) of node u

simADJ

G (u, v) =

(cid:40)

1/Out(u)
0

if (u, v) ∈ E
otherwise

(5)

We experimentally demonstrate that VERSE model is effective

even in preserving the adjacency matrix of the graph.
SimRank. SimRank [21] is a measure of structural relatedness
between two nodes, based on the assumption that two nodes are
similar if they are connected to other similar nodes; SimRank is
defined recursively as follows:

simSR

G (u, v) =

C
|I (u)| |I (v)|

|I (u) |
(cid:88)

|I (v)|
(cid:88)

simSR

G (Ii (u), Ij (v))

(6)

j=1

i=1
where I (v) denotes the set of in-neighbors of node v, and C is
a number between 0 and 1 that geometrically discounts the im-
portance of farther nodes. SimRank is a recursive procedure that
involves computationally expensive operations: the straightforward
method has the complexity of O(n4).

√

SimRank values can be approximated up to a multiplicative
factor dependent on C through SimRank-Aware Random Walks
(SARW) [22]. SARW computes a SimRank approximation through
two reversed random walks with restart where the damping factor
α is set to α =
C. A reversed random walk traverses any edge
(u, v) in the opposite direction (v, u). Since we are only interested in
the distribution of each simSR
G (v, ·), we can ignore the multiplicative
factor in the approximation [22] that has little impact on our task.
Algorithm 1 VERSE

1: function VERSE(G, simG, d)
W ← N (cid:0)0, d−1(cid:1)
2:
repeat

▷ With W ∈ R|V |×d

▷ Sample a node
▷ Sample positive example

▷ Sample negative example

u ∼ P
v ∼ simG(u)
Wu ,Wv ← Update(u, v, 1)
for i ← 1 . . . s do
(cid:101)v ∼ Q(u)
Wu ,W

(cid:101)v ← Update(u, (cid:101)v, 0)

3:

4:

5:

6:

7:

8:

9:

10:

▷ Logistic gradient update

until converged
return W

11:
12: function Update(u, v, D)
13:

д ← (D − σ (Wu · Wv )) ∗ λ
Wu ← д ∗ Wv
Wv ← д ∗ Wu

14:

15:

3.4 VERSE Algorithm

Algorithm 1 presents the overall flow of VERSE. Given a graph,
a similarity function simG, and the embedding space dimension-
ality d, we initialize the output embedding matrix W to N (0, 1
d ).
Then, we optimize our objective (Equation 4) by gradient descent
using the NCE algorithm discussed in the previous section. To do
so, we repeatedly sample a node from the positive distribution P,
sample the simG (e.g. pick a neighboring node), and draw s nega-
tive examples. The σ in Line 13 represents the sigmoid function
σ = (1 + e−x )−1, and λ the learning rate. We choose P and Q to be
distributed uniformly by U(1, n).

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

As a strong baseline for applications handling smaller graphs,
we also consider an elaborate, exhaustive variant of VERSE, which
computes full similarity distribution vectors per node instead of
performing NCE-based sampling. We name this variant fVERSE
and include it in our experimental study.

Figure 3 presents our measures on the ability to reconstruct a
similarity matrix for (i) VERSE using NCE; (ii) VERSE using Nega-
tive Sampling (NS) (also used in Node2vec); and (ii) the exhaustive
fVERSE variant. We observe that, while NCE approaches the ex-
haustive method in terms of matching the ground truth top-100
most similar nodes, NS fails to deliver the same quality.

1

0.8

0.6

0.4

k
@
G
C
D
N

full VERSE
NS, s = 3
NCE, s = 3
NCE, s = 100

20

40

60

80

100

k

Figure 3: Ranking preformance in terms of NDCG for recon-
structing PPR similarity, averaged across nodes in a graph.

3.5 Complexity Comparison

Table 2 presents the average (Θ) and worst-case (O) time and space
complexity of VERSE, along with those of methods in previous
works; d is the embedding dimensionality, n the number of nodes,
m the number of edges, and s the number of samples used, and t the
number of iterations in GraRep. Methods that rely on fast sampling
(VERSE and LINE) require time linear in n and space quadratic in
n in the worst case. DeepWalk requires O(n log n) time due to its
use of hierarchical softmax. Node2vec stores the neighbors-of-a-
neighbor, incurring a quadratic cost in sparse graphs, but cubic in
dense graphs. Thus, VERSE comes at the low end of complexities
compared to previous work on graph embeddings. Remarkably,
even the computationally expensive fVERSE affords complexity
comparable to some previous works.

Time

Space

method

Θ
dn log n
tn3
dsn
dsn
d2m
dn2
dsn

DeepWalk
GraRep
LINE
Node2vec
HOPE
fVERSE
VERSE

O
dn log n
tn3
dsn
dsn
d2n2
dn2
dsn
Table 2: Comparison of neural embedding methods in terms
of average (Θ) and worst-case (O) time and space complexity.

Θ
m
n2
m
m2
n
m
n2
m

O
n2
n2
n2
n3
n2
n2
n2

3.6 Similarity Notions in Previous Approaches

Here, we provide additional theoretical considerations of VERSE
compared to LINE [41], DeepWalk [37] and Node2vec [15] and
demonstrate how our general model subsumes and extends previous
research in versatility and scalability.

Comparison with DeepWalk and Node2vec. DeepWalk and
Node2vec generate samples from random walks of fixed window
size w by the word2vec sampling strategy [29]. We derive a re-
lationship between the window size w of that strategy and the
damping factor α of Personalized PageRank.

Lemma 3.2. Let Xr be the random variable that represents the
length of a random walk r sampled with parameter w by the word2vec
sampling strategy. Then for any 0 < j ≤ w

Pr(Xr = j) =

(w − j + 1)

(7)

2
w(w + 1)

Proof. For each node v ∈ V , word2vec strategy samples two
random walks of length w starting from v ∈ V . These two random
walks represents the context of v, where v is the central node of
a walk of length 2w + 1. The model is then trained on increasing
context size up to w. Therefore, the number of nodes sampled for
each random walk amount to (cid:80)w
. A node at distance
0 < j ≤ w is sampled (w − j + 1) times; thus, the final probability is
□
w (w +1) (w − j + 1).

i=1 i = w (w +1)

2

2

Personalized PageRank provides the maximum likelihood esti-
mation for the distribution in Equation 7 for α = w −1
w +1 . Then, w = 10
corresponds to α = 0.82, which is close to the standard α = 0.85,
proved effective in practice [10]. On the other hand, α = 0.95, which,
for example, achieves the best performance on a task in Section 4.2,
corresponds to w = 39. Such large w prohibitively increases the
computation time for DeepWalk and Node2vec.

Comparison with LINE. LINE introduces the concept of first- and
second-order proximities to model complex node relationships. As
we discussed, in VERSE, first-order proximity corresponds to the
dot-product among the similarity vectors in the embedding space:

simE(u, v) = Wu · Wv

On the other hand, second-order proximity corresponds to let-
ting VERSE learn one more matrix W ′, so as to model asymmetric
similarities of nodes in the embedding space. We do that by defining
simE asymmetrically, using both W and W ′:

simE(u, v) = Wu · W ′
v

The intuition behind second-order proximity is the same as that
of SimRank: similar nodes have similar neighborhoods. Every pre-
vious method, except for LINE-1, used second-order proximities,
due to the word2vec interpretation of embeddings borrowed by
DeepWalk and Node2vec. In our model, second-order proximities
can be encoded by adding an additional matrix; we empirically
evaluate their effectiveness in Section 4.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

4 EXPERIMENTS

We evaluate VERSE against several state-of-the-art graph embed-
ding algorithms. For repeatability purposes, we provide all data sets
and the C++ source code for VERSE1, DeepWalk2 and Node2vec3.
We run the experiments on an Amazon AWS c4.8 instance with
60Gb RAM. Each method is assessed on the best possible parame-
ters, with early termination of the computation in case no result is
returned within one day. We provide the following state-of-the-art
graph embedding methods for comparison:

• DeepWalk [37]: This approach learns an embedding by sam-
pling random walks from each node, applying word2vec-based
learning on those walks. We use the default parameters described
in the paper, i.e., walk length t = 80, number of walks per node
γ = 80, and window size w = 10.
• LINE [41]: This approach learns a d-dimensional embedding
in two steps , both using adjacency similarity. First, it learns d/2
dimensions using first-order proximity; then, it learns another d/2
features using second-order proximity. Last, the two halves are
normalized and concatenated. We obtained a copy of the code4 and
run experiments with total T = 1010 samples and s = 5 negative
samples, as described in the paper.
• GraRep [11]: This method factorizes the full adjacency similarity
matrix using SVD, multiplies the matrix by itself, and repeats the
process t times. The final embedding is obtained by concatenating
the factorized vectors. We use t = 4 and 32 dimensions for each
SVD factorization; thus, the final embedding has d = 128.
• HOPE [33]: This method is a revised Singular Value Decomposi-
tion restricted to sparse similarity matrices. We report the results
obtained running HOPE with the default parameters, i.e, Katz simi-
larity (an extension of Katz centrality [23]) as the similarity measure
and β inversely proportional to the spectral radius. Since Katz simi-
larity does not converge on directed graphs with sink nodes, we
used Personalized PageRank with α = 0.85 for the CoCit dataset.
• Node2vec [15]: This is a hyperparameter-supervised approach
that extends DeepWalk by adding two parameters, p and q, so as to
control DeepWalk’s random walk sampling. The special case with
parameters p = 1, q = 1 corresponds to DeepWalk; yet, sometimes
Node2vec shows worse performance than DeepWalk in our evalu-
ation, due to the fact it uses negative sampling, while DeepWalk
uses hierarchical softmax. We fine-tuned the hyperparameters p
and q on each dataset and task. Moreover, we used a large train-
ing data to fairly compare to DeepWalk, i.e., walk length l = 80,
number of walks per node r = 80, and window size w = 10.

Baselines. In addition to graph embeddings methods, we imple-
mented the following baselines.

• Logistic regression: We use the well-known logistic regression
method as a baseline for link prediction. We train the model on a set
of common node-specific features, namely node degree, number of
common neighbors, Adamic-Adar, Jaccard coefficient, preferential
attachment, and resource allocation index [27, 28].

1https://github.com/xgfs/verse
2https://github.com/xgfs/deepwalk-c
3https://github.com/xgfs/node2vec-c
4https://github.com/tangjianpku/LINE

Size

Statistics

dataset

|V |

|E |

| L | Avg. degree Mod.

BlogCatalog
CoCit
CoAuthor
VK
YouTube
Orkut

39
334k
10k
195k
15
44k
178k —
52k
2.7M 2
79k
1.1M
3M 47
3.1M 234M 50

64.8
8.86
6.94
34.1
5.25
70

Density
6.3 × 10−3
2.0 × 10−4
1.3 × 10−4
8.7 × 10−4
9.2 × 10−6
2.4 × 10−5

0.24
0.72
0.84
0.47
0.71
0.68

Table 3: Dataset characteristics: number of vertices |V |, num-
ber of edges |E|; number of node labels |L|; average node de-
gree; modularity [32]; density defined as |E|/(cid:0) |V |
2

(cid:1).

• Louvain community detection [9]: We employ a standard par-
tition method for community detection as a baseline for graph
clustering, reporting the best partition in terms of modularity [32].

Parameter settings. In line with previous research [15, 37, 41] we
set the embedding dimensionality d to 128. The learning procedure
(Algorithm 1, Line 3) is run 105 times for VERSE and 250 times for
fVERSE; the difference in setting is motivated by the number of
model updates which is O(n) in VERSE and O(n2) in fVERSE.

We use LIBLINEAR [13] to perform logistic regression with
default parameter settings. Unlike previous work [15, 37, 41] we
employ a stricter assumption for multi-label node classification: the
number of correct classes is not known apriori, but found through
the Label Powerset multi-label classification approach [45].

For link prediction and multi-label classification, we evaluated
each individual embedding 10 times in order to reduce the noise
introduced by the classifier. Unless otherwise stated, we run each
experiment 10 times, and report the average value among the runs.
Throughout our experimental study, we use the above parameters
as default, unless indicated otherwise.
Datasets. We test our methods on six real datasets; we report the
main data characteristics in Table 3.
• BlogCatalog [54] is a network of social interactions among blog-
gers in the BlogCatalog website. Node-labels represent topic cate-
gories provided by authors.
• Microsoft Academic Graph [1] is a network of academic papers,
citations, authors, and affiliations from Microsoft Academic website
released for the KDD-2016 cup. It contains 150 million papers up to
February 2016 spanning various disciplines from math to biology.
We extracted two separate subgraphs from the original network,
using 15 conferences in data mining, databases, and machine learn-
ing. The first, CoAuthor, is a co-authorship network among authors.
The second, CoCit, is a network of papers citing other papers; labels
represent conferences in which papers were published.
• VK is a Russian all-encompassing social network. We extracted
two snapshots of the network in November 2016 and May 2017 to
obtain information about link appearance. We use the gender of
the user for classification and country for clustering.
• YouTube [43] is a network of social interactions among users of
the YouTube video platform. The labels represent groups of viewers
by video genres.
• Orkut [52] is a network of social interactions among users of the
Orkut social network platform. The labels represent communities
of users. We extracted the 50 biggest communities and use them as
labels for classification.

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Evaluation methodology. The default form of VERSE runs Per-
sonalized PageRank with α = 0.85. For the sake of fairness, we
design a hyperparameter-supervised variant of VERSE, by analogy
to the hyperparameter-tuned variant of DeepWalk introduced
by Node2vec [15]. This variant, hsVERSE, selects the best simi-
larity with cross-validation across two proximity orders (as dis-
cussed in Section 3.6) and three similarities (Section 3.3) with
α ∈{0.45, 0.55, 0.65, 0.75, 0.85, 0.95} for simPPR
G and C ∈ {0.15, 0.25,
0.35, 0.45, 0.55, 0.65} for simSR
G .

Operator

Average
Concat
Hadamard
Weighted L1
Weighted L2

Result

(a + b)/2
[a1, . . . , ad , b1, . . . , bd ]
[a1 ∗ b1, . . . , ad ∗ bd ]
[|a1 − b1|, . . . , |ad − bd |]
[(a1 − b1)2, . . . , (ad − bd )2]

Table 4: Vector operators used for link-prediction task for
each u, v ∈ V and corresponding embeddings a, b ∈ Rd .

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

Average Concat Hadamard
79.69
78.79
68.06
74.91
77.39
74.83
79.10
76.67

80.06
79.16
68.43
74.87
77.49
74.90
79.52
77.07

86.71
85.69
66.54
82.24
77.73
74.81
86.15
79.42
77.53

Node2vec
Feature Eng.
Table 5: Link prediction results on the CoAuthor coauthor-
ship graph. Best results per method are underlined.

method
fVERSE
VERSE

DeepWalk
LINE
HOPE
hsVERSE

Average Concat Hadamard
74.81
73.66
69.92
75.13
71.90
74.02
71.22

74.94
73.78
70.05
75.17
71.89
74.14
71.29

80.77
79.71
69.79
72.54
70.22
80.26
72.43
78.84

Node2vec
Feature Eng.
Table 6: Link prediction results on the VK social graph. Best
results per method are underlined.

L1
84.49
71.93
79.06
80.03
70.55
74.34
76.45
81.25

L1
78.49
74.11
78.38
63.77
71.22
73.04
78.38

L2
84.97
72.11
78.11
80.05
71.83
74.81
76.72
80.85

L2
79.13
74.56
77.37
64.47
70.63
73.53
78.66

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

1%
27.52
27.32
26.81
27.68
23.68
22.81
27.46
27.45

labelled nodes, %
5%
31.01
30.67
30.37
30.24
27.89
27.59
30.67
30.82

3%
29.83
29.42
29.27
29.21
26.90
26.63
29.45
29.66

7%
31.68
31.32
31.04
30.23
28.49
28.19
31.38
31.54

9%
32.24
31.83
31.43
30.79
28.80
28.58
31.92
32.04

Node2vec
Table 7: Multi-class classification results in CoCit dataset.

f (v). On the CoAuthor data, we predict new links for 2015 and 2016
co-authorships, using the network until 2014 for training; on VK, we
predict whether a new friendship link appears between November
2016 and May 2017, using 50% of the new links for training and 50%
for testing. We train the binary classifier by sampling non-existing
edges as negative examples. Tables 5 and 6 report the attained
accuracy. As a baseline, we use a logistic regression classifier trained
on the respective data sets’ features.

VERSE with Hadamard product of vectors is consistently the
best edge representation. We attribute this quality to the explicit re-
construction we achieve using noise contrastive estimation. VERSE
consistently outperforms the baseline in the tested datasets. Be-
sides, the hyperparameter-supervised hsVERSE variant outruns
Node2vec on all datasets.

4.2 Node Classification

We now conduct an extensive evaluation on classification and report
results for all the methods, where possible, with the CoCit, VK,
YouTube, and Orkut graphs. Node classification aims to predict of
the correct node labels in a graph, as described previously in this
section.

We evaluate accuracy by the Micro-F1 and Macro-F1 percentage
measures. We report only Macro-F1, since we experience similar
behaviors with Micro-F1. For each dataset we conduct multiple
experiments, selecting a random sample of nodes for training and
leaving the remaining nodes for testing. The results for four datasets,
shown in Tables 7-10, exhibit similar trends: VERSE yields predic-
tions comparable or superior to those of the other contestants, while
it scales to large networks such as Orkut. LINE outperforms VERSE
only in VK, where the gender of users is better captured using the
direct neighborhood. The hyperparameter-supervised variant, hs-
VERSE, is on a par with Node2vec in terms of quality on CoCit and
VK; on the largest datasets YouTube and Orkut, hsVERSE keeps
outperforming unsupervised alternatives, while Node2vec depletes
the memory.

4.1 Link Prediction

4.3 Node Clustering

Link prediction is the task of anticipating the appearance of a link
between two nodes in a network. Conventional measures for link
prediction include Adamic-Adar, Preferential attachment, Katz, and
Jaccard coefficient. We train a Logistic regression classifier on edge-
wise features obtained with the methods shown in Table 4. For
instance, for a pair of nodes u, v, the Concat operator returns a
vector as the sequential concatenation of the embeddings f (u) and

Graph clustering detects groups of nodes with similar characteris-
tics [9, 32]. We assess the embedding methods, using the k-means
algorithm with k-means++ initialization [5] to cluster the embedded
points in a d-dimensional space. Table 11 reports the Normalized
Mutual Information (NMI) with respect to the original label distri-
bution. On CoAuthor, VERSE has comparable performance with
DeepWalk; yet on VK, VERSE outperforms all other methods.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

method
fVERSE
VERSE

9%
62.50
62.13
62.49
64.23
57.68
63.16
63.30
Table 8: Multi-class classification results in VK dataset.

labelled nodes, %
5%
61.74
61.43
61.79
63.58
57.04
62.50
62.62

3%
61.01
60.53
60.93
62.83
56.65
61.67
61.79

7%
62.26
61.86
62.17
64.01
57.40
62.97
63.04

1%
58.32
57.89
58.22
60.39
54.88
58.87
58.85

DeepWalk
LINE
HOPE
hsVERSE

Node2vec

method
VERSE

DeepWalk
LINE
HOPE
hsVERSE

method
VERSE

DeepWalk
LINE
hsVERSE

1%
17.92
18.16
13.71
9.22
18.16

1%
25.16
24.21
26.79
27.73

labelled nodes, %
5%
24.07
22.89
18.69
15.09
25.40

3%
22.26
21.55
17.36
13.80
22.84

7%
25.07
23.64
19.84
16.18
27.38

labelled nodes, %
5%
29.60
29.63
32.34
32.73

3%
28.22
27.99
30.89
30.70

7%
31.46
30.60
32.92
34.00

9%
25.99
24.54
20.64
16.78
29.09

9%
32.63
31.27
33.65
35.20

Table 9: Multi-label classification results in YouTube dataset.

Table 10: Multi-class classification results in Orkut dataset.

We also assess graph embeddings on their ability to capture the
graph community structure. We apply k-means with different k
values between 2 and 50 and select the best modularity [32] score.
Table 12 presents our results, along with the modularity obtained by
the Louvain method, the state-of-the-art modularity maximization
algorithm [9]. VERSE variants produce result almost equal that
those of Louvain, outperforming previous methods, while the three
methods that could manage the Orkut data perform similarly.

method
fVERSE
VERSE
DeepWalk
LINE
GraRep
HOPE
hsVERSE
Node2vec
Louvain

CoCit
33.22
32.93
34.33
18.79
27.43
19.05
33.24
32.84
30.73
Table 11: Node clustering results in terms of NMI.

VK
9.24
7.62
7.59
7.49
—
6.47
8.77
8.05
4.54

4.4 Graph Reconstruction

Good graph embeddings should preserve the graph structure in the
embedding space. We evaluate the performance of our method on
reconstructing the graph’s adjacency matrix. Since each adjacent

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec
Louvain

CoCit CoAuthor
70.12
69.43
70.04
60.02
67.61
42.45
69.81
70.06
72.05

80.95
79.25
73.83
71.58
77.40
69.57
79.31
75.78
84.29

VK
44.59
45.78
43.30
39.65
—
21.70
45.84
44.27
46.60

YouTube Orkut

—
67.63
58.08
63.40
—
37.94
69.13
—
71.06

—
42.64
44.66
42.59
—
—
—
—
—

Table 12: Node clustering results in terms of modularity.

node should be close in the embedding space, we first sort any
node other than the one considered by decreasing cosine distance
among the vectors. Afterwards, we take a number of nodes equal
to the actual degree of the node in the graph and connect to the
considered node to create the graph structure.

Table 13 reports the relative accuracy measured as the number
of correct nodes in the neighborhood of a node in the embedding
space. Again, VERSE performs comparably well; its exhaustive
variant, fVERSE, which harnesses the full similarity does even
better; however, the top performer is hsVERSE, which achieves the
obtained result when instantiated to the Adjacency Similarity. This
result is unsurprising, given that the adjacency similarity measure
tailors hsVERSE for the task of graph reconstruction.

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec

CoCit CoAuthor
88.96
58.73
51.54
23.32
67.61
25.88
97.53
66.35

98.20
74.30
68.44
62.01
77.40
49.70
98.91
72.70

VK
66.45
50.18
43.04
42.80
—
12.01
78.38
53.70

YouTube Orkut

—
28.64
32.21
17.76
—
33.42
38.34
—

—
18.39
19.75
10.82
—
—
28.81
—

Table 13: Graph reconstruction % for all datasets.

4.5 Parameter Sensitivity

We also evaluate the sensitivity of VERSE to parameter choice.
Figures 4(a),4(b) depict node classification performance in terms of
Micro-F1 on the BlogCatalog dataset, with 10% of nodes labeled.

The dimensionality d determines the size of the embedding,
and hence the possibility to compute more fine-grained representa-
tions. The performance grows linearly as the number of dimensions
approaches 128, while with larger d we observe no further improve-
ment. Sampled VERSE instead, performs comparably better than
fVERSE in low dimensional spaces, but degrades as d becomes
larger than 128; this behavior reflects a characteristic of node sam-
pling that tends to preserve similarities of close neighborhoods in
low-dimensional embeddings, while the VERSE leverages the entire
graph structure for larger dimensionality

The last parameter we study is the damping factor α which
amounts to the inverse of the probability of restarting random
walks from the initial node. As shown in Figure 4(b), the quality

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

1
F
-
o
r
c
i
M

0.4

0.3

0.2

0.1

0

2

0.4

0.3

0.2

1
F
-
o
r
c
i
M

fVERSE
VERSE
DeepWalk
Node2vec
LINE-2

104

s
d
n
o
c
e
s

103

fVERSE
VERSE

fVERSE
VERSE

4

8

16

32

64

128

256

512 1024

0.1

0

0.2

0.4

0.6

0.8

1

102

104

d

(a) Dimensionality d

α

(b) PPR damping factor α

105
nodes

(c) Time, log scale

106

Figure 4: Classification performance of various parameters in Fig. 4(a), 4(b) and scalability of different methods in Fig. 4(c).

LINE, and Node2vec. For each method, we report the total wall-
clock time, with graph loading and necessary preprocessing steps
included. We used LINE-2 time for fair comparison. As Figure 4
shows, VERSE is comfortably the most efficient and scalable method,
processing 106 nodes in about 3 hours, while DeepWalk and LINE
take from 6 to 15 hours.

4.7 Visualization

Last, we show how different embeddings are visualized on a plane.
We apply t-SNE [47] with default parameters to each embedding for
a subset of 1500 nodes from the CoCit dataset, equally distributed
in 5 classes (i.e., conferences); we set the density areas for each class
by Kernel Density Estimation. Figure 5 depicts the result. VERSE
produces well separated clusters with low noise, even finding dis-
tinctions among papers of the same community, namely ICDE (
)
and VLDB (

).

5 CONCLUSIONS

We introduced a new perspective on graph embeddings: to be ex-
pressive, a graph embedding should capture some similarity mea-
sure among nodes. Armed with this perspective, we developed a
scalable embedding algorithm, VERSE. In a departure from previous
works in the area, VERSE aims to reconstruct the distribution of any
chosen similarity measure for each graph node. Thereby, VERSE
brings in its scope a global view of the graph, while substantially
reducing the number of parameters required for training. VERSE
attains linear time complexity, hence it scales to large real graphs,
while it only requires space to store the graph. Besides, we have
shed light on some previous works on graph embeddings, looking at
them and interpreting them through the prism of vertex similarity.
Our thorough experimental study shows that, even instantiated
with PPR as a default similarity notion, VERSE consistently out-
performs state-of-the-art approaches for graph embeddings in a
plethora of graph tasks, while a hyperparameter-supervised vari-
ant does even better. Thus, we have provided strong evidence that
embeddings genuinely based on vertex similarity address graph
mining challenges better than others.

Figure 5: Visualizations of a subset of nodes from CoCit
ICDE, KDD,
graph with selected conferences: VLDB,
WWW, and NIPS. Note that the number of nodes per

class is the same for all conferences.

of classification accurary is quite robust with respect to α for both
VERSE and fVERSE, only compromised by extreme values. An α
value close to 0 reduces PPR to an exploration of the immediate
neighborhood of the node. On the other hand, a value close to 1
amounts to regular PageRank, deeming all nodes as equally im-
portant. This result vindicates our work and distinguishes it from
previous methods based on local neighborhood expansion.

4.6 Scalability

We now present runtime results on synthetic graphs of growing size,
generated by the Watts Strogatz model [50], setting VERSE against
scalable methods with C++ implementations, namely DeepWalk,

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

REFERENCES
[1] 2016. Microsoft Academic Graph - KDD cup 2016.
azurewebsites.net/Data. (2016). Accessed: 2016-04-30.

https://kddcup2016.

[2] Sami Abu-El-Haija, Bryan Perozzi, and Rami Al-Rfou. 2017. Learning Edge

Representations via Low-Rank Asymmetric Projections. CIKM (2017).

[3] Amr Ahmed, Nino Shervashidze, Shravan Narayanamurthy, Vanja Josifovski,
and Alexander J Smola. 2013. Distributed large-scale natural graph factorization.
In WWW. ACM, 37–48.

[4] Leman Akoglu, Mary McGlohon, and Christos Faloutsos. 2010. Oddball: Spotting

anomalies in weighted graphs. In PAKDD. 410–421.

[5] David Arthur and Sergei Vassilvitskii. 2007. k-means++: The advantages of

careful seeding. In SIAM. 1027–1035.

[6] Mikhail Belkin and Partha Niyogi. 2001. Laplacian eigenmaps and spectral

techniques for embedding and clustering. In NIPS. 585–591.

[7] Yoshua Bengio, Aaron Courville, and Pascal Vincent. 2013. Representation

learning: A review and new perspectives. TPAMI (2013), 1798–1828.

[8] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A

neural probabilistic language model. JMLR (2003), 1137–1155.

[9] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefeb-
vre. 2008. Fast unfolding of communities in large networks. Journal of statistical
mechanics: theory and experiment 10 (2008).

[10] Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual
Web search engine. Computer Networks and ISDN Systems (1998), 107 – 117.
[11] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2015. GraRep: Learning Graph Repre-

sentations with Global Structural Information. In CIKM. 891–900.

[12] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2016. Deep Neural Networks for

Learning Graph Representations. In AAAI. 1145–1152.

[13] Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-Rui Wang, and Chih-Jen Lin.
2008. LIBLINEAR: A library for large linear classification. JMLR 9, Aug (2008),
1871–1874.

[14] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep learning. MIT

[16] Michael Gutmann and Aapo Hyvärinen. 2010. Noise-contrastive estimation:
A new estimation principle for unnormalized statistical models.. In AISTATS.
297–304.

[17] Michael U Gutmann and Aapo Hyvärinen. 2012. Noise-contrastive estimation
of unnormalized statistical models, with applications to natural image statistics.
JMLR 13 (2012), 307–361.

[18] Keith Henderson, Brian Gallagher, Lei Li, Leman Akoglu, Tina Eliassi-Rad, Hang-
hang Tong, and Christos Faloutsos. 2011. It’s who you know: graph mining using
recursive structural features. In KDD. 663–671.

[19] Jiafeng Hu, CK Cheng, Zhipeng Huang, Yixiang Fang, and Siqiang Luo. 2017. On

Embedding Uncertain Graphs. In CIKM. ACM.

[20] Xiao Huang, Jundong Li, and Xia Hu. 2017. Label informed attributed network

embedding. In WSDM. ACM, 731–739.

[21] Glen Jeh and Jennifer Widom. 2002. SimRank: a measure of structural-context

similarity. In KDD. 538–543.

[22] Minhao Jiang, Ada Wai-Chee Fu, and Raymond Chi-Wing Wong. 2017. READS:
a random walk approach for efficient and accurate dynamic SimRank. VLDB 10,
9 (2017), 937–948.

[23] Leo Katz. 1953. A new status index derived from sociometric analysis. Psychome-

trika 18, 1 (1953), 39–43.

[24] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classifi-

cation with deep convolutional neural networks. 1097–1105.

[25] Matthieu Labeau and Alexandre Allauzen. 2017. An experimental analysis of
Noise-Contrastive Estimation: the noise distribution matters. EACL (2017).
[26] John A. Lee and Michel Verleysen. 2007. Nonlinear Dimensionality Reduction (1st

ed.). Springer Publishing Company, Incorporated.

[27] Ryan N Lichtenwalter, Jake T Lussier, and Nitesh V Chawla. 2010. New perspec-

tives and methods in link prediction. In KDD. 243–252.

[28] Linyuan Lü and Tao Zhou. 2011. Link prediction in complex networks: A survey.
Physica A: Statistical Mechanics and its Applications 390, 6 (2011), 1150–1170.
[29] Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jeffrey Dean.
2013. Distributed Representations of Words and Phrases and their Composition-
ality. In NIPS. 3111–3119.

[30] Andriy Mnih and Yee Whye Teh. 2012. A fast and simple algorithm for training

neural probabilistic language models. In ICML. 1751–1758.

[31] Annamalai Narayanan, Mahinthan Chandramohan, Lihui Chen, Yang Liu, and
Santhoshkumar Saminathan. 2016. subgraph2vec: Learning distributed represen-
tations of rooted sub-graphs from large graphs. arXiv preprint arXiv:1606.08928
(2016).

[32] Mark EJ Newman. 2006. Modularity and community structure in networks. PNAS

(2006), 8577–8582.

[33] Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym-

metric transitivity preserving graph embedding. In KDD. 1105–1114.

[34] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. 1999. The

PageRank citation ranking: bringing order to the web. (1999).

[35] Jeffrey Pennington, Richard Socher, and Christopher D Manning. 2014. Glove:

Global Vectors for Word Representation.. In EMNLP. 1532–1543.

[36] Bryan Perozzi, Leman Akoglu, Patricia Iglesias Sánchez, and Emmanuel Müller.
2014. Focused clustering and outlier detection in large attributed graphs. In KDD.
1346–1355.

[37] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: online learning

of social representations. In KDD. 701–710.

[38] Leonardo FR Ribeiro, Pedro HP Saverese, and Daniel R Figueiredo. 2017. struc2vec:
Learning node representations from structural identity. In KDD. ACM, 385–394.
[39] Sam T Roweis and Lawrence K Saul. 2000. Nonlinear dimensionality reduction

by locally linear embedding. science 290, 5500 (2000), 2323–2326.

[40] Jiliang Tang and Huan Liu. 2012. Unsupervised Feature Selection for Linked

Social Media Data. In KDD. 904–912.

[41] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. LINE: Large-scale Information Network Embedding. In WWW. 1067–1077.
[42] Lei Tang and Huan Liu. 2009. Relational learning via latent social dimensions. In

[43] Lei Tang and Huan Liu. 2009. Scalable learning of collective behavior based on

sparse social dimensions. In CIKM. 1107–1116.

[44] Joshua B Tenenbaum, Vin De Silva, and John C Langford. 2000. A global geometric
framework for nonlinear dimensionality reduction. science 290, 5500 (2000), 2319–
2323.

[45] Grigorios Tsoumakas and Ioannis Katakis. 2006. Multi-label classification: An

overview. IJDWM 3, 3 (2006).

[46] Cunchao Tu, Weicheng Zhang, Zhiyuan Liu, and Maosong Sun. 2016. Max-
Margin DeepWalk: Discriminative Learning of Network Representation. In IJCAI.
3889–3895.

[47] L.J.P. van der Maaten and G.E. Hinton. 2008. Visualizing High-Dimensional Data
Using t-SNE. Journal of Machine Learning Research 9 (2008), 2579–2605.
[48] Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural Deep Network Em-

bedding. In KDD. 1225–1234.

[49] Suhang Wang, Charu Aggarwal, Jiliang Tang, and Huan Liu. 2017. Attributed

Signed Network Embedding. CIKM (2017).

[50] Duncan J Watts and Steven H Strogatz. 1998. Collective dynamics of ‘small-world’

networks. Nature 393 (1998), 440–442.

[51] Shuicheng Yan, Dong Xu, Benyu Zhang, Hong-Jiang Zhang, Qiang Yang, and
Stephen Lin. 2007. Graph embedding and extensions: A general framework for
dimensionality reduction. TPAMI 29, 1 (2007).

[52] Jaewon Yang and Jure Leskovec. 2015. Defining and evaluating network com-
munities based on ground-truth. Knowledge and Information Systems 42 (2015),
181–213.

[53] Wayne W Zachary. 1977. An information flow model for conflict and fission in

small groups. Journal of anthropological research 33, 4 (1977), 452–473.

[54] R. Zafarani and H. Liu. 2009. Social Computing Data Repository at ASU. (2009).

http://socialcomputing.asu.edu

[55] Daokun Zhanga, Jie Yinb, Xingquan Zhuc, and Chengqi Zhanga. 2017. User

profile preserving social network embedding. In IJCAI.

[15] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable Feature Learning for

KDD. 817–826.

Press.

Networks. In KDD. 855–864.

VERSE: Versatile Graph Embeddings from Similarity Measures

Anton Tsitsulin
Hasso Plattner Institute
anton.tsitsulin@hpi.de

Panagiotis Karras
Aarhus University
panos@cs.au.dk

Davide Mottin
Hasso Plattner Institute
davide.mottin@hpi.de

Emmanuel Müller
Hasso Plattner Institute
emmanuel.mueller@hpi.de

8
1
0
2
 
r
a

M
 
3
1
 
 
]
I
S
.
s
c
[
 
 
1
v
2
4
7
4
0
.
3
0
8
1
:
v
i
X
r
a

ABSTRACT
Embedding a web-scale information network into a low-dimensional
vector space facilitates tasks such as link prediction, classification,
and visualization. Past research has addressed the problem of ex-
tracting such embeddings by adopting methods from words to
graphs, without defining a clearly comprehensible graph-related
objective. Yet, as we show, the objectives used in past works implic-
itly utilize similarity measures among graph nodes.

In this paper, we carry the similarity orientation of previous
works to its logical conclusion; we propose VERtex Similarity Em-
beddings (VERSE), a simple, versatile, and memory-efficient method
that derives graph embeddings explicitly calibrated to preserve
the distributions of a selected vertex-to-vertex similarity measure.
VERSE learns such embeddings by training a single-layer neural
network. While its default, scalable version does so via sampling
similarity information, we also develop a variant using the full infor-
mation per vertex. Our experimental study on standard benchmarks
and real-world datasets demonstrates that VERSE, instantiated with
diverse similarity measures, outperforms state-of-the-art methods
in terms of precision and recall in major data mining tasks and
supersedes them in time and space efficiency, while the scalable
sampling-based variant achieves equally good results as the non-
scalable full variant.
ACM Reference Format:
Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller.
2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In
WWW 2018: The 2018 Web Conference, April 23–27, 2018, Lyon, France. ACM,
New York, NY, USA, 10 pages. https://doi.org/10.1145/3178876.3186120

1 INTRODUCTION

Graph data naturally arises in many domains, including social
networks, protein networks, and the web. Over the past years,
numerous graph mining techniques have been proposed to analyze
and explore such real-world networks. Commonly, such techniques
apply machine learning to address tasks such as node classification,
link prediction, anomaly detection, and node clustering.

Machine learning algorithms require a set of expressive discrim-
inant features to characterize graph nodes and edges. To this end,
one can use features representing similarities among nodes [18].

This paper is published under the Creative Commons Attribution 4.0 International
(CC BY 4.0) license. Authors reserve their rights to disseminate the work on their
personal and corporate Web sites with the appropriate attribution.
WWW 2018, April 23–27, 2018, Lyon, France
© 2018 IW3C2 (International World Wide Web Conference Committee), published
under Creative Commons CC BY 4.0 License.
ACM ISBN 978-1-4503-5639-8/18/04.
https://doi.org/10.1145/3178876.3186120

(a) Community structure

(b) Roles

(c) Structural equivalence

Figure 1: Three node properties are highlighted on the same
graph. Can a single model capture these properties?

However, feature engineering is tedious work, and the results do
not translate well across tasks [15].

An alternative to feature design is to learn feature vectors, or
embeddings by solving an optimization problem in unsupervised
fashion. Yet devising and solving a universal and tractable optimiza-
tion problem for learning representations has withstood research
efforts [7]. One line of research [11, 42] applies classical dimension-
ality reduction methods, such as SVD, to similarity matrices over
the graph; yet these methods are burdened with constructing the
matrix. While a recent approach [33] overcomes this impediment,
it results in poor quality in prediction tasks due to its linear nature.
Another line of research aims to generate features capturing
neighborhood locality, usually through an objective that can be opti-
mized by Stochastic Gradient Descent (SGD) [37, 41]. Such methods
rely on an implicit, albeit rigid, notion of node neighborhood; yet
this one-size-fits-all approach cannot grapple with the diversity of
real-world networks and applications. Grover et al. [15] discerned
this inflexibility in the notion of the local neighborhood; to ame-
liorate it, they proposed Node2vec, which biases the exploration
strategy of [37] using two hyperparameters. Yet this hyperparame-
ter-tuned approach raises a cubic worst-case space complexity and
compels the user to traverse several feature sets and gauge the one
that attains the best performance in the downstream task. Besides,
a local neighborhood, even when found by hyperparameter tun-
ing, still represents only one locality-based class of features; hence,
Node2vec does not adequately escape the rigidity it tries to mend.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We argue that features extracted by a more versatile similarity
notion than that of a local neighborhood would achieve the flexibil-
ity to solve diverse data mining tasks in a large variety of graphs.
Figure 1 makes a case for such a versatile similarity notion by ex-
posing three distinct kinds of similarity on a graph: community
structure guides community detection tasks, roles are typically used
in classification, while structural equivalence defines peer corre-
spondences in knowledge graphs. As real-world tasks rely on a mix
of such properties, a versatile feature learning algorithm should be
capable of capturing all such similarities.

In this paper, we propose VERSE, the first, to our knowledge, ver-
satile graph embedding method that explicitly learns any similarity
measures among nodes. In its learning core, VERSE stands between
deep learning approaches [12, 48] on the one hand and the direct
decomposition of the similarity matrix [11, 42] on the other hand.
Instead, VERSE trains a simple, yet expressive, single-layer neu-
ral network to reconstruct similarity distributions between nodes.
Thereby, it outperforms previous methods in terms of both runtime
and quality on a variety of large real networks and tasks.

Thanks to its ability to choose any appropriate similarity measure
for the task at hand, VERSE adjusts to that task without needing
to change its core. Thereby, it fully ameliorates the rigidity ob-
served in [15], and integrates representation learning with feature
engineering: any similarity measure, including those developed
in feature engineering, can be used as input to VERSE. For the
sake of illustration, we instantiate our generic methodology using
three popular similarity measures, namely Personalized PageRank
(PPR) [34], SimRank [21], and adjacency similarity. We also show
that versatility does not imply a new burden to the user, merely
substituting hyperparameter tuning with similarity measure tuning:
using PPR as a default choice for the similarity measure leads to
good performance in nearly all tasks and networks we examined.

We summarize our contributions as follows.

• We propose a versatile framework for graph embeddings
that explicitly learns the distribution of any vertex similarity
measure for each graph vertex.

• We interpret previous graph embeddings through the lens
of our similarity framework, and instantiate VERSE with
Personalized PageRank, SimRank, and Adjacency similarity.
• We devise an efficient algorithm, linear in graph size, based
on a single-layer neural network minimizing the divergence
from real to reconstructed similarity distributions.

• In a thorough experimental evaluation, we show that VERSE
outperforms the state-of-the-art approaches in various graph
mining tasks in quality while being even more efficient.

2 RELATED WORK

In the absence of a general-purpose representation for graphs, graph
analysis tasks require domain experts to craft features [4, 18] or
to use specialized feature selection algorithms [36, 40]. Recently,
specialized methods were introduced to learn representations of dif-
ferent graph parts [2, 31] and graphs with annotations on nodes [20,
55], or edges [19, 49]. We focus on learning representations of nodes
in graphs without any prior or additional information other than
graph structure.

Traditional feature learning learns features by compressing rep-
resentations such as the Laplacian or adjacency matrix to a low-
dimensional space. Early works in this area include spectral tech-
niques [6] and nonlinear dimensionality reduction [39, 44]. In an-
other vein, Marginal Fisher Analysis [51] analyzes the dimension-
ality reduction of a point data set as the embedding of a graph
capturing its statistic and geometric properties. Such methods can-
not be applied to large graphs, as they operate on dense matrices.
Some efforts have been made to overcome this limitation using
enhanced linear algebra tools. Ahmed et al. [3] adopt stochastic
gradient optimization for fast adjacency matrix eigendecomposi-
tion; Ou et al. [33] utilize sparse generalized SVD to generate a
graph embedding, HOPE, from a similarity matrix amenable to de-
composition into two sparse proximity matrices. HOPE is the first
to support diverse similarity measures; however, it still requires
the entire graph matrix as input and views the problem as one of
linear dimensionality reduction rather than as one of nonlinear
learning. This way, it deviates not only from current research on
graph embeddings but also from older works [51].

Neural methods for representation learning. Advances in ma-
chine learning have led to the adoption of neural methods for learn-
ing representations [7]. Building on the success of deep learning in
domains such as image processing [24] and Natural Language Pro-
cessing (NLP) [8, 29, 35], word2vec [29] builds word embeddings
by training a single-layer neural network to guess the contextual
words of a given word in a text. Likewise, GloVe [35] learns a
word space through a stochastic version of SVD in a transformed
cooccurrence matrix. While such text-based methods inherently
take neighbor relationships into account, they require conceptual
adaptations to model graphs [37].

Neural Graph Embeddings. The success of neural word embed-
dings inspired natural extensions towards learning graph repre-
sentations [11, 12, 15, 37, 46, 48]. DeepWalk [37] first proposed
to learn latent representations in a low-dimensional vector space
exploiting local node neighborhoods. It runs a series of random
walks of fixed length from each vertex and creates a matrix of d-
dimensional vertex representations using the SkipGram algorithm
of [29]. These representations maximize the posterior probability
of observing a neighboring vertex in a random walk. DeepWalk
embeddings can inform classification tasks using a simple linear
classifier such as logistic regression.

GraRep [11] suggests using Singular Value Decomposition (SVD)
on a log-transformed DeepWalk transition probability matrix of
different orders, and then concatenate the resulting representations.
Struc2vec [38] rewires the graph to reflect isomorphism among
nodes and capture structural similarities, and then derives an em-
bedding relying on the DeepWalk core. Works such as [12, 48]
investigate deep learning approaches for graph embeddings. Their
results amount to complex models that require elaborate parameter
tuning and computationally expensive optimization, leading to time
and space complexities unsuitable for large graphs.

Nevertheless, all DeepWalk-based approaches use objective
functions that are not tailored to graph structures. Some works [15,
38, 41] try to infuse graph-native principles into the learning pro-
cess. LINE [41] proposed graph embeddings that capture more

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Algorithm

Similarity

method

Local Scalable Nonlinear Global

Versatile

DeepWalk [37] ✔
Node2vec [15]
LINE [41]
GraRep [11]
SDNE [48]
DNGR [12]
HOPE [33]

✔
✘
✔
✘
✘

VERSE

✔

✔

✔
✘
✘
✘
✔

✔

✔

✔
✔
✔
✔
✘

✔

✔

✘
✔
✘
✔
✔

✔

✘

✘
✘
✘
✘
✔

✔

Table 1: Outline of related work in terms of fulfilled (✔) and
missing (✘) properties of algorithm and similarity measure.

elaborate proximity notions. However, even LINE’s notion of prox-
imity is restricted to the immediate neighborhoods of each node;
that is insufficient to capture the complete palette of node rela-
tionships [15, 33, 38]. Furthermore, Node2vec [15] introduces two
hyperparameters to regulate the generation of random walks and
thereby tailor the learning process to the graph at hand in semi-
supervised fashion. However, Node2vec remains attached to the
goal of preserving local neighborhoods and requires laborious tun-
ing for each dataset and each task.

Overview. Table 1 outlines five desirable properties for a graph
embedding, and the extent to which previous methods possess
them. We distinguish between properties of algorithms, on the one
hand, and those of any implicit or explicit similarity measure among
nodes a method may express, on the other hand.

• local: not requiring the entire graph matrix as input; GraRep,
DNGR, and HOPE fail in this respect.
• scalable: capable to process graphs with more than 106 nodes
in less than a day; some methods fail in this criterion due to the
dense matrix (GraRep), deep learning computations (SDNE), or
both (DNGR).
• nonlinear: employing nonlinear transformations; HOPE relies
on a linear dimensionality reduction method, SVD; that is detri-
mental to its performance on building graph representations, just
like linear dimensionality reduction methods fail to confer the
advantages of their nonlinear counterparts in general [26].
• global: capable to model relationships between any pair of
nodes; LINE and SDNE do not share this property as they fail
to look beyond a node’s immediate neighborhood.
• versatile: supporting diverse similarity functions; HOPE does
so, yet is compromised by its linear character.

3 VERSATILE GRAPH EMBEDDING

VERSE possesses all properties mentioned in our taxonomy; it
employs nonlinear transformation, desirable for dimensionality
reduction [26]; it is local in terms of the input it requires per node,
but global in terms of the potential provenance of that input; it is
scalable as it is based on sampling, and versatile by virtue of its
generality.

(a) Similarity

(b) VERSE

(c) SVD

Figure 2: An example similarity matrix and its reconstruc-
tions by VERSE and SVD. Karate club graph [53], dimension-
ality d = 4 for both methods.

3.1 VERSE Objective

Given a graph G = (V , E), where V = (v1, . . . , vn ), n = |V |, is
the set of vertices and E ⊆ (V × V ) the set of edges, we aim to
learn a nonlinear representation of vertices v ∈ V to d-dimensional
embeddings, where d ≪ n. Such representation is encoded into a
n × d matrix W ; the embedding of a node v is the row Wv, · in the
matrix; we denote it as Wv for compactness.

Our embeddings reflect distributions of a given graph similarity
simG : V × V → R for every node v ∈ V . As such, we require that
the similarities from any vertex v to all other vertices simG(v, ·) are
amenable to be interpreted as a distribution with (cid:80)u ∈V simG(v, u) =
1 for all v ∈ V . We aim to devise W by a scalable method that
requires neither the V ×V stochastic similarity matrix nor its explicit
materialization.

The corresponding node-to-node similarity in the embedded
space is simE : V × V → R. As an optimization objective, we aim
to minimize the Kullback-Leibler (KL) divergence from the given
similarity distribution simG to that of simE in the embedded space:

(cid:88)

v ∈V

KL (simG(v, ·) || simE(v, ·))

(1)

We illustrate the usefulness of this objective using a small simi-
larity matrix. Figure 2 shows (a) the Personalized PageRank matrix,
(b) the reconstruction of the same matrix by VERSE, and (c) the
reconstruction of the same matrix using SVD. It is visible that the
nonlinear minimization of KL divergence between distributions
preserves most of the information in the original matrix, while the
linear SVD-based reconstruction fails to differentiate some nodes.

3.2 VERSE Embedding Model

We define the unnormalized distance between two nodes u, v in
the embedding space as the dot product of their embeddings Wu ·
W ⊤
v . The similarity distribution in the embedded space is then
normalized with softmax:

simE(v, ·) =

exp(WvW ⊤)
i=1 exp (Wv · Wi )

(cid:80)n

(2)

By Equation 1, we should minimize the KL-divergence from simG
to simE; omitting parts dependent on simG only, this objective is
equivalent to minimizing the cross-entropy loss function [14]:

L = − (cid:88)
v ∈V

simG(v, ·) log (simE (v, ·))

(3)

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We can accommodate this objective by stochastic gradient de-
scent, which allows updating the model on each node singularly.
However, a naïve version of gradient descent would require the
full materialization of simE and simG. Even in case simG is easy to
compute on the fly, such as the adjacency matrix, the softmax in
Equation 2 still has to be normalized over all nodes in the graph.

We use Noise Contrastive Estimation (NCE) [16, 30], which al-
lows us to learn a model that provably converges to its objective
(see [17], Theorem 2). NCE trains a binary classifier to distinguish
between node samples coming from the empirical similarity dis-
tribution simG and those generated by a noise distribution Q over
the nodes. Consider an auxiliary random variable D for node clas-
sification, such that D = 1 for a node drawn from the empirical
distribution and D = 0 for a sample drawn from the noise distribu-
tion. Given a node u drawn from some distribution P and a node
v drawn from the distribution of simG (u, ·), we draw s ≪ n nodes
(cid:101)v from Q(u) and use logistic regression to minimize the negative
log-likelihood:

(cid:104)

log PrW (D = 1|simE(u, v))+

LN C E = (cid:88)
u∼P
v∼simG(u, ·)
sE
(cid:101)v∼Q(u) log PrW (D = 0|simE(u, (cid:101)v))

(cid:105)

(4)

where PrW is computed from W as a sigmoid σ (x) = (1 + e−x )−1 of
the dot product between vectors Wu and Wv , while we compute
simE (u, ·) without the normalization of Equation 2. As the number
of noise samples s increases, the NCE derivative provably converges
to the gradient of cross-entropy [30]; thus, by virtue of NCE’s
asymptotic convergence guarantees, we are in effect minimizing
the KL-divergence from simG. NCE’s theoretical guarantees depend
on s, yet small values work well in practice [30]. In our experiments,
we use s = 3. These convergence guarantees of NCE are not affected
by choice of distributions P and Q (see [17], Corollary 5); however,
its performance is empirically dependent on Q [25].

3.3 Instantiations of VERSE

While VERSE can be used with any similarity function, we choose
to instantiate our model to widely used similarities simG, namely
Personalized PageRank (PPR), Adjacency Similarity, and SimRank.

Personalized PageRank. Personalized PageRank [34] is a com-
mon similarity measure among nodes, practically used for many
graph mining tasks [15, 28].

Definition 3.1. Given a starting node distribution s, damping
factor α, and the normalized adjacency matrix A, the Personalized
PageRank vector πs is defined by the recursive equation:

πs = αs + (1 − α)πs A
The stationary distribution of a random walk with restart with
probability α converges to PPR [34]. Thus, a sample from simG(v, ·)
is the last node in a single random walk from node v. The damping
factor α controls the average size of the explored neighborhood. In
Section 3.6 we show that α is tightly coupled with the window size
parameter w of DeepWalk and Node2vec.

Adjacency similarity. A straightforward similarity measure is
the normalized adjacency matrix; this similarity corresponds to the

LINE-1 model and takes into account only the immediate neighbors
of each node. More formally, given the out degree Out(u) of node u

simADJ

G (u, v) =

(cid:40)

1/Out(u)
0

if (u, v) ∈ E
otherwise

(5)

We experimentally demonstrate that VERSE model is effective

even in preserving the adjacency matrix of the graph.
SimRank. SimRank [21] is a measure of structural relatedness
between two nodes, based on the assumption that two nodes are
similar if they are connected to other similar nodes; SimRank is
defined recursively as follows:

simSR

G (u, v) =

C
|I (u)| |I (v)|

|I (u) |
(cid:88)

|I (v)|
(cid:88)

simSR

G (Ii (u), Ij (v))

(6)

j=1

i=1
where I (v) denotes the set of in-neighbors of node v, and C is
a number between 0 and 1 that geometrically discounts the im-
portance of farther nodes. SimRank is a recursive procedure that
involves computationally expensive operations: the straightforward
method has the complexity of O(n4).

√

SimRank values can be approximated up to a multiplicative
factor dependent on C through SimRank-Aware Random Walks
(SARW) [22]. SARW computes a SimRank approximation through
two reversed random walks with restart where the damping factor
α is set to α =
C. A reversed random walk traverses any edge
(u, v) in the opposite direction (v, u). Since we are only interested in
the distribution of each simSR
G (v, ·), we can ignore the multiplicative
factor in the approximation [22] that has little impact on our task.
Algorithm 1 VERSE

1: function VERSE(G, simG, d)
W ← N (cid:0)0, d−1(cid:1)
2:
repeat

▷ With W ∈ R|V |×d

▷ Sample a node
▷ Sample positive example

▷ Sample negative example

u ∼ P
v ∼ simG(u)
Wu ,Wv ← Update(u, v, 1)
for i ← 1 . . . s do
(cid:101)v ∼ Q(u)
Wu ,W

(cid:101)v ← Update(u, (cid:101)v, 0)

3:

4:

5:

6:

7:

8:

9:

10:

▷ Logistic gradient update

until converged
return W

11:
12: function Update(u, v, D)
13:

д ← (D − σ (Wu · Wv )) ∗ λ
Wu ← д ∗ Wv
Wv ← д ∗ Wu

14:

15:

3.4 VERSE Algorithm

Algorithm 1 presents the overall flow of VERSE. Given a graph,
a similarity function simG, and the embedding space dimension-
ality d, we initialize the output embedding matrix W to N (0, 1
d ).
Then, we optimize our objective (Equation 4) by gradient descent
using the NCE algorithm discussed in the previous section. To do
so, we repeatedly sample a node from the positive distribution P,
sample the simG (e.g. pick a neighboring node), and draw s nega-
tive examples. The σ in Line 13 represents the sigmoid function
σ = (1 + e−x )−1, and λ the learning rate. We choose P and Q to be
distributed uniformly by U(1, n).

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

As a strong baseline for applications handling smaller graphs,
we also consider an elaborate, exhaustive variant of VERSE, which
computes full similarity distribution vectors per node instead of
performing NCE-based sampling. We name this variant fVERSE
and include it in our experimental study.

Figure 3 presents our measures on the ability to reconstruct a
similarity matrix for (i) VERSE using NCE; (ii) VERSE using Nega-
tive Sampling (NS) (also used in Node2vec); and (ii) the exhaustive
fVERSE variant. We observe that, while NCE approaches the ex-
haustive method in terms of matching the ground truth top-100
most similar nodes, NS fails to deliver the same quality.

1

0.8

0.6

0.4

k
@
G
C
D
N

full VERSE
NS, s = 3
NCE, s = 3
NCE, s = 100

20

40

60

80

100

k

Figure 3: Ranking preformance in terms of NDCG for recon-
structing PPR similarity, averaged across nodes in a graph.

3.5 Complexity Comparison

Table 2 presents the average (Θ) and worst-case (O) time and space
complexity of VERSE, along with those of methods in previous
works; d is the embedding dimensionality, n the number of nodes,
m the number of edges, and s the number of samples used, and t the
number of iterations in GraRep. Methods that rely on fast sampling
(VERSE and LINE) require time linear in n and space quadratic in
n in the worst case. DeepWalk requires O(n log n) time due to its
use of hierarchical softmax. Node2vec stores the neighbors-of-a-
neighbor, incurring a quadratic cost in sparse graphs, but cubic in
dense graphs. Thus, VERSE comes at the low end of complexities
compared to previous work on graph embeddings. Remarkably,
even the computationally expensive fVERSE affords complexity
comparable to some previous works.

Time

Space

method

Θ
dn log n
tn3
dsn
dsn
d2m
dn2
dsn

DeepWalk
GraRep
LINE
Node2vec
HOPE
fVERSE
VERSE

O
dn log n
tn3
dsn
dsn
d2n2
dn2
dsn
Table 2: Comparison of neural embedding methods in terms
of average (Θ) and worst-case (O) time and space complexity.

Θ
m
n2
m
m2
n
m
n2
m

O
n2
n2
n2
n3
n2
n2
n2

3.6 Similarity Notions in Previous Approaches

Here, we provide additional theoretical considerations of VERSE
compared to LINE [41], DeepWalk [37] and Node2vec [15] and
demonstrate how our general model subsumes and extends previous
research in versatility and scalability.

Comparison with DeepWalk and Node2vec. DeepWalk and
Node2vec generate samples from random walks of fixed window
size w by the word2vec sampling strategy [29]. We derive a re-
lationship between the window size w of that strategy and the
damping factor α of Personalized PageRank.

Lemma 3.2. Let Xr be the random variable that represents the
length of a random walk r sampled with parameter w by the word2vec
sampling strategy. Then for any 0 < j ≤ w

Pr(Xr = j) =

(w − j + 1)

(7)

2
w(w + 1)

Proof. For each node v ∈ V , word2vec strategy samples two
random walks of length w starting from v ∈ V . These two random
walks represents the context of v, where v is the central node of
a walk of length 2w + 1. The model is then trained on increasing
context size up to w. Therefore, the number of nodes sampled for
each random walk amount to (cid:80)w
. A node at distance
0 < j ≤ w is sampled (w − j + 1) times; thus, the final probability is
□
w (w +1) (w − j + 1).

i=1 i = w (w +1)

2

2

Personalized PageRank provides the maximum likelihood esti-
mation for the distribution in Equation 7 for α = w −1
w +1 . Then, w = 10
corresponds to α = 0.82, which is close to the standard α = 0.85,
proved effective in practice [10]. On the other hand, α = 0.95, which,
for example, achieves the best performance on a task in Section 4.2,
corresponds to w = 39. Such large w prohibitively increases the
computation time for DeepWalk and Node2vec.

Comparison with LINE. LINE introduces the concept of first- and
second-order proximities to model complex node relationships. As
we discussed, in VERSE, first-order proximity corresponds to the
dot-product among the similarity vectors in the embedding space:

simE(u, v) = Wu · Wv

On the other hand, second-order proximity corresponds to let-
ting VERSE learn one more matrix W ′, so as to model asymmetric
similarities of nodes in the embedding space. We do that by defining
simE asymmetrically, using both W and W ′:

simE(u, v) = Wu · W ′
v

The intuition behind second-order proximity is the same as that
of SimRank: similar nodes have similar neighborhoods. Every pre-
vious method, except for LINE-1, used second-order proximities,
due to the word2vec interpretation of embeddings borrowed by
DeepWalk and Node2vec. In our model, second-order proximities
can be encoded by adding an additional matrix; we empirically
evaluate their effectiveness in Section 4.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

4 EXPERIMENTS

We evaluate VERSE against several state-of-the-art graph embed-
ding algorithms. For repeatability purposes, we provide all data sets
and the C++ source code for VERSE1, DeepWalk2 and Node2vec3.
We run the experiments on an Amazon AWS c4.8 instance with
60Gb RAM. Each method is assessed on the best possible parame-
ters, with early termination of the computation in case no result is
returned within one day. We provide the following state-of-the-art
graph embedding methods for comparison:

• DeepWalk [37]: This approach learns an embedding by sam-
pling random walks from each node, applying word2vec-based
learning on those walks. We use the default parameters described
in the paper, i.e., walk length t = 80, number of walks per node
γ = 80, and window size w = 10.
• LINE [41]: This approach learns a d-dimensional embedding
in two steps , both using adjacency similarity. First, it learns d/2
dimensions using first-order proximity; then, it learns another d/2
features using second-order proximity. Last, the two halves are
normalized and concatenated. We obtained a copy of the code4 and
run experiments with total T = 1010 samples and s = 5 negative
samples, as described in the paper.
• GraRep [11]: This method factorizes the full adjacency similarity
matrix using SVD, multiplies the matrix by itself, and repeats the
process t times. The final embedding is obtained by concatenating
the factorized vectors. We use t = 4 and 32 dimensions for each
SVD factorization; thus, the final embedding has d = 128.
• HOPE [33]: This method is a revised Singular Value Decomposi-
tion restricted to sparse similarity matrices. We report the results
obtained running HOPE with the default parameters, i.e, Katz simi-
larity (an extension of Katz centrality [23]) as the similarity measure
and β inversely proportional to the spectral radius. Since Katz simi-
larity does not converge on directed graphs with sink nodes, we
used Personalized PageRank with α = 0.85 for the CoCit dataset.
• Node2vec [15]: This is a hyperparameter-supervised approach
that extends DeepWalk by adding two parameters, p and q, so as to
control DeepWalk’s random walk sampling. The special case with
parameters p = 1, q = 1 corresponds to DeepWalk; yet, sometimes
Node2vec shows worse performance than DeepWalk in our evalu-
ation, due to the fact it uses negative sampling, while DeepWalk
uses hierarchical softmax. We fine-tuned the hyperparameters p
and q on each dataset and task. Moreover, we used a large train-
ing data to fairly compare to DeepWalk, i.e., walk length l = 80,
number of walks per node r = 80, and window size w = 10.

Baselines. In addition to graph embeddings methods, we imple-
mented the following baselines.

• Logistic regression: We use the well-known logistic regression
method as a baseline for link prediction. We train the model on a set
of common node-specific features, namely node degree, number of
common neighbors, Adamic-Adar, Jaccard coefficient, preferential
attachment, and resource allocation index [27, 28].

1https://github.com/xgfs/verse
2https://github.com/xgfs/deepwalk-c
3https://github.com/xgfs/node2vec-c
4https://github.com/tangjianpku/LINE

Size

Statistics

dataset

|V |

|E |

| L | Avg. degree Mod.

BlogCatalog
CoCit
CoAuthor
VK
YouTube
Orkut

39
334k
10k
195k
15
44k
178k —
52k
2.7M 2
79k
1.1M
3M 47
3.1M 234M 50

64.8
8.86
6.94
34.1
5.25
70

Density
6.3 × 10−3
2.0 × 10−4
1.3 × 10−4
8.7 × 10−4
9.2 × 10−6
2.4 × 10−5

0.24
0.72
0.84
0.47
0.71
0.68

Table 3: Dataset characteristics: number of vertices |V |, num-
ber of edges |E|; number of node labels |L|; average node de-
gree; modularity [32]; density defined as |E|/(cid:0) |V |
2

(cid:1).

• Louvain community detection [9]: We employ a standard par-
tition method for community detection as a baseline for graph
clustering, reporting the best partition in terms of modularity [32].

Parameter settings. In line with previous research [15, 37, 41] we
set the embedding dimensionality d to 128. The learning procedure
(Algorithm 1, Line 3) is run 105 times for VERSE and 250 times for
fVERSE; the difference in setting is motivated by the number of
model updates which is O(n) in VERSE and O(n2) in fVERSE.

We use LIBLINEAR [13] to perform logistic regression with
default parameter settings. Unlike previous work [15, 37, 41] we
employ a stricter assumption for multi-label node classification: the
number of correct classes is not known apriori, but found through
the Label Powerset multi-label classification approach [45].

For link prediction and multi-label classification, we evaluated
each individual embedding 10 times in order to reduce the noise
introduced by the classifier. Unless otherwise stated, we run each
experiment 10 times, and report the average value among the runs.
Throughout our experimental study, we use the above parameters
as default, unless indicated otherwise.
Datasets. We test our methods on six real datasets; we report the
main data characteristics in Table 3.
• BlogCatalog [54] is a network of social interactions among blog-
gers in the BlogCatalog website. Node-labels represent topic cate-
gories provided by authors.
• Microsoft Academic Graph [1] is a network of academic papers,
citations, authors, and affiliations from Microsoft Academic website
released for the KDD-2016 cup. It contains 150 million papers up to
February 2016 spanning various disciplines from math to biology.
We extracted two separate subgraphs from the original network,
using 15 conferences in data mining, databases, and machine learn-
ing. The first, CoAuthor, is a co-authorship network among authors.
The second, CoCit, is a network of papers citing other papers; labels
represent conferences in which papers were published.
• VK is a Russian all-encompassing social network. We extracted
two snapshots of the network in November 2016 and May 2017 to
obtain information about link appearance. We use the gender of
the user for classification and country for clustering.
• YouTube [43] is a network of social interactions among users of
the YouTube video platform. The labels represent groups of viewers
by video genres.
• Orkut [52] is a network of social interactions among users of the
Orkut social network platform. The labels represent communities
of users. We extracted the 50 biggest communities and use them as
labels for classification.

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Evaluation methodology. The default form of VERSE runs Per-
sonalized PageRank with α = 0.85. For the sake of fairness, we
design a hyperparameter-supervised variant of VERSE, by analogy
to the hyperparameter-tuned variant of DeepWalk introduced
by Node2vec [15]. This variant, hsVERSE, selects the best simi-
larity with cross-validation across two proximity orders (as dis-
cussed in Section 3.6) and three similarities (Section 3.3) with
α ∈{0.45, 0.55, 0.65, 0.75, 0.85, 0.95} for simPPR
G and C ∈ {0.15, 0.25,
0.35, 0.45, 0.55, 0.65} for simSR
G .

Operator

Average
Concat
Hadamard
Weighted L1
Weighted L2

Result

(a + b)/2
[a1, . . . , ad , b1, . . . , bd ]
[a1 ∗ b1, . . . , ad ∗ bd ]
[|a1 − b1|, . . . , |ad − bd |]
[(a1 − b1)2, . . . , (ad − bd )2]

Table 4: Vector operators used for link-prediction task for
each u, v ∈ V and corresponding embeddings a, b ∈ Rd .

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

Average Concat Hadamard
79.69
78.79
68.06
74.91
77.39
74.83
79.10
76.67

80.06
79.16
68.43
74.87
77.49
74.90
79.52
77.07

86.71
85.69
66.54
82.24
77.73
74.81
86.15
79.42
77.53

Node2vec
Feature Eng.
Table 5: Link prediction results on the CoAuthor coauthor-
ship graph. Best results per method are underlined.

method
fVERSE
VERSE

DeepWalk
LINE
HOPE
hsVERSE

Average Concat Hadamard
74.81
73.66
69.92
75.13
71.90
74.02
71.22

74.94
73.78
70.05
75.17
71.89
74.14
71.29

80.77
79.71
69.79
72.54
70.22
80.26
72.43
78.84

Node2vec
Feature Eng.
Table 6: Link prediction results on the VK social graph. Best
results per method are underlined.

L1
84.49
71.93
79.06
80.03
70.55
74.34
76.45
81.25

L1
78.49
74.11
78.38
63.77
71.22
73.04
78.38

L2
84.97
72.11
78.11
80.05
71.83
74.81
76.72
80.85

L2
79.13
74.56
77.37
64.47
70.63
73.53
78.66

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

1%
27.52
27.32
26.81
27.68
23.68
22.81
27.46
27.45

labelled nodes, %
5%
31.01
30.67
30.37
30.24
27.89
27.59
30.67
30.82

3%
29.83
29.42
29.27
29.21
26.90
26.63
29.45
29.66

7%
31.68
31.32
31.04
30.23
28.49
28.19
31.38
31.54

9%
32.24
31.83
31.43
30.79
28.80
28.58
31.92
32.04

Node2vec
Table 7: Multi-class classification results in CoCit dataset.

f (v). On the CoAuthor data, we predict new links for 2015 and 2016
co-authorships, using the network until 2014 for training; on VK, we
predict whether a new friendship link appears between November
2016 and May 2017, using 50% of the new links for training and 50%
for testing. We train the binary classifier by sampling non-existing
edges as negative examples. Tables 5 and 6 report the attained
accuracy. As a baseline, we use a logistic regression classifier trained
on the respective data sets’ features.

VERSE with Hadamard product of vectors is consistently the
best edge representation. We attribute this quality to the explicit re-
construction we achieve using noise contrastive estimation. VERSE
consistently outperforms the baseline in the tested datasets. Be-
sides, the hyperparameter-supervised hsVERSE variant outruns
Node2vec on all datasets.

4.2 Node Classification

We now conduct an extensive evaluation on classification and report
results for all the methods, where possible, with the CoCit, VK,
YouTube, and Orkut graphs. Node classification aims to predict of
the correct node labels in a graph, as described previously in this
section.

We evaluate accuracy by the Micro-F1 and Macro-F1 percentage
measures. We report only Macro-F1, since we experience similar
behaviors with Micro-F1. For each dataset we conduct multiple
experiments, selecting a random sample of nodes for training and
leaving the remaining nodes for testing. The results for four datasets,
shown in Tables 7-10, exhibit similar trends: VERSE yields predic-
tions comparable or superior to those of the other contestants, while
it scales to large networks such as Orkut. LINE outperforms VERSE
only in VK, where the gender of users is better captured using the
direct neighborhood. The hyperparameter-supervised variant, hs-
VERSE, is on a par with Node2vec in terms of quality on CoCit and
VK; on the largest datasets YouTube and Orkut, hsVERSE keeps
outperforming unsupervised alternatives, while Node2vec depletes
the memory.

4.1 Link Prediction

4.3 Node Clustering

Link prediction is the task of anticipating the appearance of a link
between two nodes in a network. Conventional measures for link
prediction include Adamic-Adar, Preferential attachment, Katz, and
Jaccard coefficient. We train a Logistic regression classifier on edge-
wise features obtained with the methods shown in Table 4. For
instance, for a pair of nodes u, v, the Concat operator returns a
vector as the sequential concatenation of the embeddings f (u) and

Graph clustering detects groups of nodes with similar characteris-
tics [9, 32]. We assess the embedding methods, using the k-means
algorithm with k-means++ initialization [5] to cluster the embedded
points in a d-dimensional space. Table 11 reports the Normalized
Mutual Information (NMI) with respect to the original label distri-
bution. On CoAuthor, VERSE has comparable performance with
DeepWalk; yet on VK, VERSE outperforms all other methods.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

method
fVERSE
VERSE

9%
62.50
62.13
62.49
64.23
57.68
63.16
63.30
Table 8: Multi-class classification results in VK dataset.

labelled nodes, %
5%
61.74
61.43
61.79
63.58
57.04
62.50
62.62

3%
61.01
60.53
60.93
62.83
56.65
61.67
61.79

7%
62.26
61.86
62.17
64.01
57.40
62.97
63.04

1%
58.32
57.89
58.22
60.39
54.88
58.87
58.85

DeepWalk
LINE
HOPE
hsVERSE

Node2vec

method
VERSE

DeepWalk
LINE
HOPE
hsVERSE

method
VERSE

DeepWalk
LINE
hsVERSE

1%
17.92
18.16
13.71
9.22
18.16

1%
25.16
24.21
26.79
27.73

labelled nodes, %
5%
24.07
22.89
18.69
15.09
25.40

3%
22.26
21.55
17.36
13.80
22.84

7%
25.07
23.64
19.84
16.18
27.38

labelled nodes, %
5%
29.60
29.63
32.34
32.73

3%
28.22
27.99
30.89
30.70

7%
31.46
30.60
32.92
34.00

9%
25.99
24.54
20.64
16.78
29.09

9%
32.63
31.27
33.65
35.20

Table 9: Multi-label classification results in YouTube dataset.

Table 10: Multi-class classification results in Orkut dataset.

We also assess graph embeddings on their ability to capture the
graph community structure. We apply k-means with different k
values between 2 and 50 and select the best modularity [32] score.
Table 12 presents our results, along with the modularity obtained by
the Louvain method, the state-of-the-art modularity maximization
algorithm [9]. VERSE variants produce result almost equal that
those of Louvain, outperforming previous methods, while the three
methods that could manage the Orkut data perform similarly.

method
fVERSE
VERSE
DeepWalk
LINE
GraRep
HOPE
hsVERSE
Node2vec
Louvain

CoCit
33.22
32.93
34.33
18.79
27.43
19.05
33.24
32.84
30.73
Table 11: Node clustering results in terms of NMI.

VK
9.24
7.62
7.59
7.49
—
6.47
8.77
8.05
4.54

4.4 Graph Reconstruction

Good graph embeddings should preserve the graph structure in the
embedding space. We evaluate the performance of our method on
reconstructing the graph’s adjacency matrix. Since each adjacent

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec
Louvain

CoCit CoAuthor
70.12
69.43
70.04
60.02
67.61
42.45
69.81
70.06
72.05

80.95
79.25
73.83
71.58
77.40
69.57
79.31
75.78
84.29

VK
44.59
45.78
43.30
39.65
—
21.70
45.84
44.27
46.60

YouTube Orkut

—
67.63
58.08
63.40
—
37.94
69.13
—
71.06

—
42.64
44.66
42.59
—
—
—
—
—

Table 12: Node clustering results in terms of modularity.

node should be close in the embedding space, we first sort any
node other than the one considered by decreasing cosine distance
among the vectors. Afterwards, we take a number of nodes equal
to the actual degree of the node in the graph and connect to the
considered node to create the graph structure.

Table 13 reports the relative accuracy measured as the number
of correct nodes in the neighborhood of a node in the embedding
space. Again, VERSE performs comparably well; its exhaustive
variant, fVERSE, which harnesses the full similarity does even
better; however, the top performer is hsVERSE, which achieves the
obtained result when instantiated to the Adjacency Similarity. This
result is unsurprising, given that the adjacency similarity measure
tailors hsVERSE for the task of graph reconstruction.

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec

CoCit CoAuthor
88.96
58.73
51.54
23.32
67.61
25.88
97.53
66.35

98.20
74.30
68.44
62.01
77.40
49.70
98.91
72.70

VK
66.45
50.18
43.04
42.80
—
12.01
78.38
53.70

YouTube Orkut

—
28.64
32.21
17.76
—
33.42
38.34
—

—
18.39
19.75
10.82
—
—
28.81
—

Table 13: Graph reconstruction % for all datasets.

4.5 Parameter Sensitivity

We also evaluate the sensitivity of VERSE to parameter choice.
Figures 4(a),4(b) depict node classification performance in terms of
Micro-F1 on the BlogCatalog dataset, with 10% of nodes labeled.

The dimensionality d determines the size of the embedding,
and hence the possibility to compute more fine-grained representa-
tions. The performance grows linearly as the number of dimensions
approaches 128, while with larger d we observe no further improve-
ment. Sampled VERSE instead, performs comparably better than
fVERSE in low dimensional spaces, but degrades as d becomes
larger than 128; this behavior reflects a characteristic of node sam-
pling that tends to preserve similarities of close neighborhoods in
low-dimensional embeddings, while the VERSE leverages the entire
graph structure for larger dimensionality

The last parameter we study is the damping factor α which
amounts to the inverse of the probability of restarting random
walks from the initial node. As shown in Figure 4(b), the quality

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

1
F
-
o
r
c
i
M

0.4

0.3

0.2

0.1

0

2

0.4

0.3

0.2

1
F
-
o
r
c
i
M

fVERSE
VERSE
DeepWalk
Node2vec
LINE-2

104

s
d
n
o
c
e
s

103

fVERSE
VERSE

fVERSE
VERSE

4

8

16

32

64

128

256

512 1024

0.1

0

0.2

0.4

0.6

0.8

1

102

104

d

(a) Dimensionality d

α

(b) PPR damping factor α

105
nodes

(c) Time, log scale

106

Figure 4: Classification performance of various parameters in Fig. 4(a), 4(b) and scalability of different methods in Fig. 4(c).

LINE, and Node2vec. For each method, we report the total wall-
clock time, with graph loading and necessary preprocessing steps
included. We used LINE-2 time for fair comparison. As Figure 4
shows, VERSE is comfortably the most efficient and scalable method,
processing 106 nodes in about 3 hours, while DeepWalk and LINE
take from 6 to 15 hours.

4.7 Visualization

Last, we show how different embeddings are visualized on a plane.
We apply t-SNE [47] with default parameters to each embedding for
a subset of 1500 nodes from the CoCit dataset, equally distributed
in 5 classes (i.e., conferences); we set the density areas for each class
by Kernel Density Estimation. Figure 5 depicts the result. VERSE
produces well separated clusters with low noise, even finding dis-
tinctions among papers of the same community, namely ICDE (
)
and VLDB (

).

5 CONCLUSIONS

We introduced a new perspective on graph embeddings: to be ex-
pressive, a graph embedding should capture some similarity mea-
sure among nodes. Armed with this perspective, we developed a
scalable embedding algorithm, VERSE. In a departure from previous
works in the area, VERSE aims to reconstruct the distribution of any
chosen similarity measure for each graph node. Thereby, VERSE
brings in its scope a global view of the graph, while substantially
reducing the number of parameters required for training. VERSE
attains linear time complexity, hence it scales to large real graphs,
while it only requires space to store the graph. Besides, we have
shed light on some previous works on graph embeddings, looking at
them and interpreting them through the prism of vertex similarity.
Our thorough experimental study shows that, even instantiated
with PPR as a default similarity notion, VERSE consistently out-
performs state-of-the-art approaches for graph embeddings in a
plethora of graph tasks, while a hyperparameter-supervised vari-
ant does even better. Thus, we have provided strong evidence that
embeddings genuinely based on vertex similarity address graph
mining challenges better than others.

Figure 5: Visualizations of a subset of nodes from CoCit
ICDE, KDD,
graph with selected conferences: VLDB,
WWW, and NIPS. Note that the number of nodes per

class is the same for all conferences.

of classification accurary is quite robust with respect to α for both
VERSE and fVERSE, only compromised by extreme values. An α
value close to 0 reduces PPR to an exploration of the immediate
neighborhood of the node. On the other hand, a value close to 1
amounts to regular PageRank, deeming all nodes as equally im-
portant. This result vindicates our work and distinguishes it from
previous methods based on local neighborhood expansion.

4.6 Scalability

We now present runtime results on synthetic graphs of growing size,
generated by the Watts Strogatz model [50], setting VERSE against
scalable methods with C++ implementations, namely DeepWalk,

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

REFERENCES
[1] 2016. Microsoft Academic Graph - KDD cup 2016.
azurewebsites.net/Data. (2016). Accessed: 2016-04-30.

https://kddcup2016.

[2] Sami Abu-El-Haija, Bryan Perozzi, and Rami Al-Rfou. 2017. Learning Edge

Representations via Low-Rank Asymmetric Projections. CIKM (2017).

[3] Amr Ahmed, Nino Shervashidze, Shravan Narayanamurthy, Vanja Josifovski,
and Alexander J Smola. 2013. Distributed large-scale natural graph factorization.
In WWW. ACM, 37–48.

[4] Leman Akoglu, Mary McGlohon, and Christos Faloutsos. 2010. Oddball: Spotting

anomalies in weighted graphs. In PAKDD. 410–421.

[5] David Arthur and Sergei Vassilvitskii. 2007. k-means++: The advantages of

careful seeding. In SIAM. 1027–1035.

[6] Mikhail Belkin and Partha Niyogi. 2001. Laplacian eigenmaps and spectral

techniques for embedding and clustering. In NIPS. 585–591.

[7] Yoshua Bengio, Aaron Courville, and Pascal Vincent. 2013. Representation

learning: A review and new perspectives. TPAMI (2013), 1798–1828.

[8] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A

neural probabilistic language model. JMLR (2003), 1137–1155.

[9] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefeb-
vre. 2008. Fast unfolding of communities in large networks. Journal of statistical
mechanics: theory and experiment 10 (2008).

[10] Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual
Web search engine. Computer Networks and ISDN Systems (1998), 107 – 117.
[11] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2015. GraRep: Learning Graph Repre-

sentations with Global Structural Information. In CIKM. 891–900.

[12] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2016. Deep Neural Networks for

Learning Graph Representations. In AAAI. 1145–1152.

[13] Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-Rui Wang, and Chih-Jen Lin.
2008. LIBLINEAR: A library for large linear classification. JMLR 9, Aug (2008),
1871–1874.

[14] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep learning. MIT

[16] Michael Gutmann and Aapo Hyvärinen. 2010. Noise-contrastive estimation:
A new estimation principle for unnormalized statistical models.. In AISTATS.
297–304.

[17] Michael U Gutmann and Aapo Hyvärinen. 2012. Noise-contrastive estimation
of unnormalized statistical models, with applications to natural image statistics.
JMLR 13 (2012), 307–361.

[18] Keith Henderson, Brian Gallagher, Lei Li, Leman Akoglu, Tina Eliassi-Rad, Hang-
hang Tong, and Christos Faloutsos. 2011. It’s who you know: graph mining using
recursive structural features. In KDD. 663–671.

[19] Jiafeng Hu, CK Cheng, Zhipeng Huang, Yixiang Fang, and Siqiang Luo. 2017. On

Embedding Uncertain Graphs. In CIKM. ACM.

[20] Xiao Huang, Jundong Li, and Xia Hu. 2017. Label informed attributed network

embedding. In WSDM. ACM, 731–739.

[21] Glen Jeh and Jennifer Widom. 2002. SimRank: a measure of structural-context

similarity. In KDD. 538–543.

[22] Minhao Jiang, Ada Wai-Chee Fu, and Raymond Chi-Wing Wong. 2017. READS:
a random walk approach for efficient and accurate dynamic SimRank. VLDB 10,
9 (2017), 937–948.

[23] Leo Katz. 1953. A new status index derived from sociometric analysis. Psychome-

trika 18, 1 (1953), 39–43.

[24] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classifi-

cation with deep convolutional neural networks. 1097–1105.

[25] Matthieu Labeau and Alexandre Allauzen. 2017. An experimental analysis of
Noise-Contrastive Estimation: the noise distribution matters. EACL (2017).
[26] John A. Lee and Michel Verleysen. 2007. Nonlinear Dimensionality Reduction (1st

ed.). Springer Publishing Company, Incorporated.

[27] Ryan N Lichtenwalter, Jake T Lussier, and Nitesh V Chawla. 2010. New perspec-

tives and methods in link prediction. In KDD. 243–252.

[28] Linyuan Lü and Tao Zhou. 2011. Link prediction in complex networks: A survey.
Physica A: Statistical Mechanics and its Applications 390, 6 (2011), 1150–1170.
[29] Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jeffrey Dean.
2013. Distributed Representations of Words and Phrases and their Composition-
ality. In NIPS. 3111–3119.

[30] Andriy Mnih and Yee Whye Teh. 2012. A fast and simple algorithm for training

neural probabilistic language models. In ICML. 1751–1758.

[31] Annamalai Narayanan, Mahinthan Chandramohan, Lihui Chen, Yang Liu, and
Santhoshkumar Saminathan. 2016. subgraph2vec: Learning distributed represen-
tations of rooted sub-graphs from large graphs. arXiv preprint arXiv:1606.08928
(2016).

[32] Mark EJ Newman. 2006. Modularity and community structure in networks. PNAS

(2006), 8577–8582.

[33] Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym-

metric transitivity preserving graph embedding. In KDD. 1105–1114.

[34] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. 1999. The

PageRank citation ranking: bringing order to the web. (1999).

[35] Jeffrey Pennington, Richard Socher, and Christopher D Manning. 2014. Glove:

Global Vectors for Word Representation.. In EMNLP. 1532–1543.

[36] Bryan Perozzi, Leman Akoglu, Patricia Iglesias Sánchez, and Emmanuel Müller.
2014. Focused clustering and outlier detection in large attributed graphs. In KDD.
1346–1355.

[37] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: online learning

of social representations. In KDD. 701–710.

[38] Leonardo FR Ribeiro, Pedro HP Saverese, and Daniel R Figueiredo. 2017. struc2vec:
Learning node representations from structural identity. In KDD. ACM, 385–394.
[39] Sam T Roweis and Lawrence K Saul. 2000. Nonlinear dimensionality reduction

by locally linear embedding. science 290, 5500 (2000), 2323–2326.

[40] Jiliang Tang and Huan Liu. 2012. Unsupervised Feature Selection for Linked

Social Media Data. In KDD. 904–912.

[41] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. LINE: Large-scale Information Network Embedding. In WWW. 1067–1077.
[42] Lei Tang and Huan Liu. 2009. Relational learning via latent social dimensions. In

[43] Lei Tang and Huan Liu. 2009. Scalable learning of collective behavior based on

sparse social dimensions. In CIKM. 1107–1116.

[44] Joshua B Tenenbaum, Vin De Silva, and John C Langford. 2000. A global geometric
framework for nonlinear dimensionality reduction. science 290, 5500 (2000), 2319–
2323.

[45] Grigorios Tsoumakas and Ioannis Katakis. 2006. Multi-label classification: An

overview. IJDWM 3, 3 (2006).

[46] Cunchao Tu, Weicheng Zhang, Zhiyuan Liu, and Maosong Sun. 2016. Max-
Margin DeepWalk: Discriminative Learning of Network Representation. In IJCAI.
3889–3895.

[47] L.J.P. van der Maaten and G.E. Hinton. 2008. Visualizing High-Dimensional Data
Using t-SNE. Journal of Machine Learning Research 9 (2008), 2579–2605.
[48] Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural Deep Network Em-

bedding. In KDD. 1225–1234.

[49] Suhang Wang, Charu Aggarwal, Jiliang Tang, and Huan Liu. 2017. Attributed

Signed Network Embedding. CIKM (2017).

[50] Duncan J Watts and Steven H Strogatz. 1998. Collective dynamics of ‘small-world’

networks. Nature 393 (1998), 440–442.

[51] Shuicheng Yan, Dong Xu, Benyu Zhang, Hong-Jiang Zhang, Qiang Yang, and
Stephen Lin. 2007. Graph embedding and extensions: A general framework for
dimensionality reduction. TPAMI 29, 1 (2007).

[52] Jaewon Yang and Jure Leskovec. 2015. Defining and evaluating network com-
munities based on ground-truth. Knowledge and Information Systems 42 (2015),
181–213.

[53] Wayne W Zachary. 1977. An information flow model for conflict and fission in

small groups. Journal of anthropological research 33, 4 (1977), 452–473.

[54] R. Zafarani and H. Liu. 2009. Social Computing Data Repository at ASU. (2009).

http://socialcomputing.asu.edu

[55] Daokun Zhanga, Jie Yinb, Xingquan Zhuc, and Chengqi Zhanga. 2017. User

profile preserving social network embedding. In IJCAI.

[15] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable Feature Learning for

KDD. 817–826.

Press.

Networks. In KDD. 855–864.

VERSE: Versatile Graph Embeddings from Similarity Measures

Anton Tsitsulin
Hasso Plattner Institute
anton.tsitsulin@hpi.de

Panagiotis Karras
Aarhus University
panos@cs.au.dk

Davide Mottin
Hasso Plattner Institute
davide.mottin@hpi.de

Emmanuel Müller
Hasso Plattner Institute
emmanuel.mueller@hpi.de

8
1
0
2
 
r
a

M
 
3
1
 
 
]
I
S
.
s
c
[
 
 
1
v
2
4
7
4
0
.
3
0
8
1
:
v
i
X
r
a

ABSTRACT
Embedding a web-scale information network into a low-dimensional
vector space facilitates tasks such as link prediction, classification,
and visualization. Past research has addressed the problem of ex-
tracting such embeddings by adopting methods from words to
graphs, without defining a clearly comprehensible graph-related
objective. Yet, as we show, the objectives used in past works implic-
itly utilize similarity measures among graph nodes.

In this paper, we carry the similarity orientation of previous
works to its logical conclusion; we propose VERtex Similarity Em-
beddings (VERSE), a simple, versatile, and memory-efficient method
that derives graph embeddings explicitly calibrated to preserve
the distributions of a selected vertex-to-vertex similarity measure.
VERSE learns such embeddings by training a single-layer neural
network. While its default, scalable version does so via sampling
similarity information, we also develop a variant using the full infor-
mation per vertex. Our experimental study on standard benchmarks
and real-world datasets demonstrates that VERSE, instantiated with
diverse similarity measures, outperforms state-of-the-art methods
in terms of precision and recall in major data mining tasks and
supersedes them in time and space efficiency, while the scalable
sampling-based variant achieves equally good results as the non-
scalable full variant.
ACM Reference Format:
Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller.
2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In
WWW 2018: The 2018 Web Conference, April 23–27, 2018, Lyon, France. ACM,
New York, NY, USA, 10 pages. https://doi.org/10.1145/3178876.3186120

1 INTRODUCTION

Graph data naturally arises in many domains, including social
networks, protein networks, and the web. Over the past years,
numerous graph mining techniques have been proposed to analyze
and explore such real-world networks. Commonly, such techniques
apply machine learning to address tasks such as node classification,
link prediction, anomaly detection, and node clustering.

Machine learning algorithms require a set of expressive discrim-
inant features to characterize graph nodes and edges. To this end,
one can use features representing similarities among nodes [18].

This paper is published under the Creative Commons Attribution 4.0 International
(CC BY 4.0) license. Authors reserve their rights to disseminate the work on their
personal and corporate Web sites with the appropriate attribution.
WWW 2018, April 23–27, 2018, Lyon, France
© 2018 IW3C2 (International World Wide Web Conference Committee), published
under Creative Commons CC BY 4.0 License.
ACM ISBN 978-1-4503-5639-8/18/04.
https://doi.org/10.1145/3178876.3186120

(a) Community structure

(b) Roles

(c) Structural equivalence

Figure 1: Three node properties are highlighted on the same
graph. Can a single model capture these properties?

However, feature engineering is tedious work, and the results do
not translate well across tasks [15].

An alternative to feature design is to learn feature vectors, or
embeddings by solving an optimization problem in unsupervised
fashion. Yet devising and solving a universal and tractable optimiza-
tion problem for learning representations has withstood research
efforts [7]. One line of research [11, 42] applies classical dimension-
ality reduction methods, such as SVD, to similarity matrices over
the graph; yet these methods are burdened with constructing the
matrix. While a recent approach [33] overcomes this impediment,
it results in poor quality in prediction tasks due to its linear nature.
Another line of research aims to generate features capturing
neighborhood locality, usually through an objective that can be opti-
mized by Stochastic Gradient Descent (SGD) [37, 41]. Such methods
rely on an implicit, albeit rigid, notion of node neighborhood; yet
this one-size-fits-all approach cannot grapple with the diversity of
real-world networks and applications. Grover et al. [15] discerned
this inflexibility in the notion of the local neighborhood; to ame-
liorate it, they proposed Node2vec, which biases the exploration
strategy of [37] using two hyperparameters. Yet this hyperparame-
ter-tuned approach raises a cubic worst-case space complexity and
compels the user to traverse several feature sets and gauge the one
that attains the best performance in the downstream task. Besides,
a local neighborhood, even when found by hyperparameter tun-
ing, still represents only one locality-based class of features; hence,
Node2vec does not adequately escape the rigidity it tries to mend.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We argue that features extracted by a more versatile similarity
notion than that of a local neighborhood would achieve the flexibil-
ity to solve diverse data mining tasks in a large variety of graphs.
Figure 1 makes a case for such a versatile similarity notion by ex-
posing three distinct kinds of similarity on a graph: community
structure guides community detection tasks, roles are typically used
in classification, while structural equivalence defines peer corre-
spondences in knowledge graphs. As real-world tasks rely on a mix
of such properties, a versatile feature learning algorithm should be
capable of capturing all such similarities.

In this paper, we propose VERSE, the first, to our knowledge, ver-
satile graph embedding method that explicitly learns any similarity
measures among nodes. In its learning core, VERSE stands between
deep learning approaches [12, 48] on the one hand and the direct
decomposition of the similarity matrix [11, 42] on the other hand.
Instead, VERSE trains a simple, yet expressive, single-layer neu-
ral network to reconstruct similarity distributions between nodes.
Thereby, it outperforms previous methods in terms of both runtime
and quality on a variety of large real networks and tasks.

Thanks to its ability to choose any appropriate similarity measure
for the task at hand, VERSE adjusts to that task without needing
to change its core. Thereby, it fully ameliorates the rigidity ob-
served in [15], and integrates representation learning with feature
engineering: any similarity measure, including those developed
in feature engineering, can be used as input to VERSE. For the
sake of illustration, we instantiate our generic methodology using
three popular similarity measures, namely Personalized PageRank
(PPR) [34], SimRank [21], and adjacency similarity. We also show
that versatility does not imply a new burden to the user, merely
substituting hyperparameter tuning with similarity measure tuning:
using PPR as a default choice for the similarity measure leads to
good performance in nearly all tasks and networks we examined.

We summarize our contributions as follows.

• We propose a versatile framework for graph embeddings
that explicitly learns the distribution of any vertex similarity
measure for each graph vertex.

• We interpret previous graph embeddings through the lens
of our similarity framework, and instantiate VERSE with
Personalized PageRank, SimRank, and Adjacency similarity.
• We devise an efficient algorithm, linear in graph size, based
on a single-layer neural network minimizing the divergence
from real to reconstructed similarity distributions.

• In a thorough experimental evaluation, we show that VERSE
outperforms the state-of-the-art approaches in various graph
mining tasks in quality while being even more efficient.

2 RELATED WORK

In the absence of a general-purpose representation for graphs, graph
analysis tasks require domain experts to craft features [4, 18] or
to use specialized feature selection algorithms [36, 40]. Recently,
specialized methods were introduced to learn representations of dif-
ferent graph parts [2, 31] and graphs with annotations on nodes [20,
55], or edges [19, 49]. We focus on learning representations of nodes
in graphs without any prior or additional information other than
graph structure.

Traditional feature learning learns features by compressing rep-
resentations such as the Laplacian or adjacency matrix to a low-
dimensional space. Early works in this area include spectral tech-
niques [6] and nonlinear dimensionality reduction [39, 44]. In an-
other vein, Marginal Fisher Analysis [51] analyzes the dimension-
ality reduction of a point data set as the embedding of a graph
capturing its statistic and geometric properties. Such methods can-
not be applied to large graphs, as they operate on dense matrices.
Some efforts have been made to overcome this limitation using
enhanced linear algebra tools. Ahmed et al. [3] adopt stochastic
gradient optimization for fast adjacency matrix eigendecomposi-
tion; Ou et al. [33] utilize sparse generalized SVD to generate a
graph embedding, HOPE, from a similarity matrix amenable to de-
composition into two sparse proximity matrices. HOPE is the first
to support diverse similarity measures; however, it still requires
the entire graph matrix as input and views the problem as one of
linear dimensionality reduction rather than as one of nonlinear
learning. This way, it deviates not only from current research on
graph embeddings but also from older works [51].

Neural methods for representation learning. Advances in ma-
chine learning have led to the adoption of neural methods for learn-
ing representations [7]. Building on the success of deep learning in
domains such as image processing [24] and Natural Language Pro-
cessing (NLP) [8, 29, 35], word2vec [29] builds word embeddings
by training a single-layer neural network to guess the contextual
words of a given word in a text. Likewise, GloVe [35] learns a
word space through a stochastic version of SVD in a transformed
cooccurrence matrix. While such text-based methods inherently
take neighbor relationships into account, they require conceptual
adaptations to model graphs [37].

Neural Graph Embeddings. The success of neural word embed-
dings inspired natural extensions towards learning graph repre-
sentations [11, 12, 15, 37, 46, 48]. DeepWalk [37] first proposed
to learn latent representations in a low-dimensional vector space
exploiting local node neighborhoods. It runs a series of random
walks of fixed length from each vertex and creates a matrix of d-
dimensional vertex representations using the SkipGram algorithm
of [29]. These representations maximize the posterior probability
of observing a neighboring vertex in a random walk. DeepWalk
embeddings can inform classification tasks using a simple linear
classifier such as logistic regression.

GraRep [11] suggests using Singular Value Decomposition (SVD)
on a log-transformed DeepWalk transition probability matrix of
different orders, and then concatenate the resulting representations.
Struc2vec [38] rewires the graph to reflect isomorphism among
nodes and capture structural similarities, and then derives an em-
bedding relying on the DeepWalk core. Works such as [12, 48]
investigate deep learning approaches for graph embeddings. Their
results amount to complex models that require elaborate parameter
tuning and computationally expensive optimization, leading to time
and space complexities unsuitable for large graphs.

Nevertheless, all DeepWalk-based approaches use objective
functions that are not tailored to graph structures. Some works [15,
38, 41] try to infuse graph-native principles into the learning pro-
cess. LINE [41] proposed graph embeddings that capture more

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Algorithm

Similarity

method

Local Scalable Nonlinear Global

Versatile

DeepWalk [37] ✔
Node2vec [15]
LINE [41]
GraRep [11]
SDNE [48]
DNGR [12]
HOPE [33]

✔
✘
✔
✘
✘

VERSE

✔

✔

✔
✘
✘
✘
✔

✔

✔

✔
✔
✔
✔
✘

✔

✔

✘
✔
✘
✔
✔

✔

✘

✘
✘
✘
✘
✔

✔

Table 1: Outline of related work in terms of fulfilled (✔) and
missing (✘) properties of algorithm and similarity measure.

elaborate proximity notions. However, even LINE’s notion of prox-
imity is restricted to the immediate neighborhoods of each node;
that is insufficient to capture the complete palette of node rela-
tionships [15, 33, 38]. Furthermore, Node2vec [15] introduces two
hyperparameters to regulate the generation of random walks and
thereby tailor the learning process to the graph at hand in semi-
supervised fashion. However, Node2vec remains attached to the
goal of preserving local neighborhoods and requires laborious tun-
ing for each dataset and each task.

Overview. Table 1 outlines five desirable properties for a graph
embedding, and the extent to which previous methods possess
them. We distinguish between properties of algorithms, on the one
hand, and those of any implicit or explicit similarity measure among
nodes a method may express, on the other hand.

• local: not requiring the entire graph matrix as input; GraRep,
DNGR, and HOPE fail in this respect.
• scalable: capable to process graphs with more than 106 nodes
in less than a day; some methods fail in this criterion due to the
dense matrix (GraRep), deep learning computations (SDNE), or
both (DNGR).
• nonlinear: employing nonlinear transformations; HOPE relies
on a linear dimensionality reduction method, SVD; that is detri-
mental to its performance on building graph representations, just
like linear dimensionality reduction methods fail to confer the
advantages of their nonlinear counterparts in general [26].
• global: capable to model relationships between any pair of
nodes; LINE and SDNE do not share this property as they fail
to look beyond a node’s immediate neighborhood.
• versatile: supporting diverse similarity functions; HOPE does
so, yet is compromised by its linear character.

3 VERSATILE GRAPH EMBEDDING

VERSE possesses all properties mentioned in our taxonomy; it
employs nonlinear transformation, desirable for dimensionality
reduction [26]; it is local in terms of the input it requires per node,
but global in terms of the potential provenance of that input; it is
scalable as it is based on sampling, and versatile by virtue of its
generality.

(a) Similarity

(b) VERSE

(c) SVD

Figure 2: An example similarity matrix and its reconstruc-
tions by VERSE and SVD. Karate club graph [53], dimension-
ality d = 4 for both methods.

3.1 VERSE Objective

Given a graph G = (V , E), where V = (v1, . . . , vn ), n = |V |, is
the set of vertices and E ⊆ (V × V ) the set of edges, we aim to
learn a nonlinear representation of vertices v ∈ V to d-dimensional
embeddings, where d ≪ n. Such representation is encoded into a
n × d matrix W ; the embedding of a node v is the row Wv, · in the
matrix; we denote it as Wv for compactness.

Our embeddings reflect distributions of a given graph similarity
simG : V × V → R for every node v ∈ V . As such, we require that
the similarities from any vertex v to all other vertices simG(v, ·) are
amenable to be interpreted as a distribution with (cid:80)u ∈V simG(v, u) =
1 for all v ∈ V . We aim to devise W by a scalable method that
requires neither the V ×V stochastic similarity matrix nor its explicit
materialization.

The corresponding node-to-node similarity in the embedded
space is simE : V × V → R. As an optimization objective, we aim
to minimize the Kullback-Leibler (KL) divergence from the given
similarity distribution simG to that of simE in the embedded space:

(cid:88)

v ∈V

KL (simG(v, ·) || simE(v, ·))

(1)

We illustrate the usefulness of this objective using a small simi-
larity matrix. Figure 2 shows (a) the Personalized PageRank matrix,
(b) the reconstruction of the same matrix by VERSE, and (c) the
reconstruction of the same matrix using SVD. It is visible that the
nonlinear minimization of KL divergence between distributions
preserves most of the information in the original matrix, while the
linear SVD-based reconstruction fails to differentiate some nodes.

3.2 VERSE Embedding Model

We define the unnormalized distance between two nodes u, v in
the embedding space as the dot product of their embeddings Wu ·
W ⊤
v . The similarity distribution in the embedded space is then
normalized with softmax:

simE(v, ·) =

exp(WvW ⊤)
i=1 exp (Wv · Wi )

(cid:80)n

(2)

By Equation 1, we should minimize the KL-divergence from simG
to simE; omitting parts dependent on simG only, this objective is
equivalent to minimizing the cross-entropy loss function [14]:

L = − (cid:88)
v ∈V

simG(v, ·) log (simE (v, ·))

(3)

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

We can accommodate this objective by stochastic gradient de-
scent, which allows updating the model on each node singularly.
However, a naïve version of gradient descent would require the
full materialization of simE and simG. Even in case simG is easy to
compute on the fly, such as the adjacency matrix, the softmax in
Equation 2 still has to be normalized over all nodes in the graph.

We use Noise Contrastive Estimation (NCE) [16, 30], which al-
lows us to learn a model that provably converges to its objective
(see [17], Theorem 2). NCE trains a binary classifier to distinguish
between node samples coming from the empirical similarity dis-
tribution simG and those generated by a noise distribution Q over
the nodes. Consider an auxiliary random variable D for node clas-
sification, such that D = 1 for a node drawn from the empirical
distribution and D = 0 for a sample drawn from the noise distribu-
tion. Given a node u drawn from some distribution P and a node
v drawn from the distribution of simG (u, ·), we draw s ≪ n nodes
(cid:101)v from Q(u) and use logistic regression to minimize the negative
log-likelihood:

(cid:104)

log PrW (D = 1|simE(u, v))+

LN C E = (cid:88)
u∼P
v∼simG(u, ·)
sE
(cid:101)v∼Q(u) log PrW (D = 0|simE(u, (cid:101)v))

(cid:105)

(4)

where PrW is computed from W as a sigmoid σ (x) = (1 + e−x )−1 of
the dot product between vectors Wu and Wv , while we compute
simE (u, ·) without the normalization of Equation 2. As the number
of noise samples s increases, the NCE derivative provably converges
to the gradient of cross-entropy [30]; thus, by virtue of NCE’s
asymptotic convergence guarantees, we are in effect minimizing
the KL-divergence from simG. NCE’s theoretical guarantees depend
on s, yet small values work well in practice [30]. In our experiments,
we use s = 3. These convergence guarantees of NCE are not affected
by choice of distributions P and Q (see [17], Corollary 5); however,
its performance is empirically dependent on Q [25].

3.3 Instantiations of VERSE

While VERSE can be used with any similarity function, we choose
to instantiate our model to widely used similarities simG, namely
Personalized PageRank (PPR), Adjacency Similarity, and SimRank.

Personalized PageRank. Personalized PageRank [34] is a com-
mon similarity measure among nodes, practically used for many
graph mining tasks [15, 28].

Definition 3.1. Given a starting node distribution s, damping
factor α, and the normalized adjacency matrix A, the Personalized
PageRank vector πs is defined by the recursive equation:

πs = αs + (1 − α)πs A
The stationary distribution of a random walk with restart with
probability α converges to PPR [34]. Thus, a sample from simG(v, ·)
is the last node in a single random walk from node v. The damping
factor α controls the average size of the explored neighborhood. In
Section 3.6 we show that α is tightly coupled with the window size
parameter w of DeepWalk and Node2vec.

Adjacency similarity. A straightforward similarity measure is
the normalized adjacency matrix; this similarity corresponds to the

LINE-1 model and takes into account only the immediate neighbors
of each node. More formally, given the out degree Out(u) of node u

simADJ

G (u, v) =

(cid:40)

1/Out(u)
0

if (u, v) ∈ E
otherwise

(5)

We experimentally demonstrate that VERSE model is effective

even in preserving the adjacency matrix of the graph.
SimRank. SimRank [21] is a measure of structural relatedness
between two nodes, based on the assumption that two nodes are
similar if they are connected to other similar nodes; SimRank is
defined recursively as follows:

simSR

G (u, v) =

C
|I (u)| |I (v)|

|I (u) |
(cid:88)

|I (v)|
(cid:88)

simSR

G (Ii (u), Ij (v))

(6)

j=1

i=1
where I (v) denotes the set of in-neighbors of node v, and C is
a number between 0 and 1 that geometrically discounts the im-
portance of farther nodes. SimRank is a recursive procedure that
involves computationally expensive operations: the straightforward
method has the complexity of O(n4).

√

SimRank values can be approximated up to a multiplicative
factor dependent on C through SimRank-Aware Random Walks
(SARW) [22]. SARW computes a SimRank approximation through
two reversed random walks with restart where the damping factor
α is set to α =
C. A reversed random walk traverses any edge
(u, v) in the opposite direction (v, u). Since we are only interested in
the distribution of each simSR
G (v, ·), we can ignore the multiplicative
factor in the approximation [22] that has little impact on our task.
Algorithm 1 VERSE

1: function VERSE(G, simG, d)
W ← N (cid:0)0, d−1(cid:1)
2:
repeat

▷ With W ∈ R|V |×d

▷ Sample a node
▷ Sample positive example

▷ Sample negative example

u ∼ P
v ∼ simG(u)
Wu ,Wv ← Update(u, v, 1)
for i ← 1 . . . s do
(cid:101)v ∼ Q(u)
Wu ,W

(cid:101)v ← Update(u, (cid:101)v, 0)

3:

4:

5:

6:

7:

8:

9:

10:

▷ Logistic gradient update

until converged
return W

11:
12: function Update(u, v, D)
13:

д ← (D − σ (Wu · Wv )) ∗ λ
Wu ← д ∗ Wv
Wv ← д ∗ Wu

14:

15:

3.4 VERSE Algorithm

Algorithm 1 presents the overall flow of VERSE. Given a graph,
a similarity function simG, and the embedding space dimension-
ality d, we initialize the output embedding matrix W to N (0, 1
d ).
Then, we optimize our objective (Equation 4) by gradient descent
using the NCE algorithm discussed in the previous section. To do
so, we repeatedly sample a node from the positive distribution P,
sample the simG (e.g. pick a neighboring node), and draw s nega-
tive examples. The σ in Line 13 represents the sigmoid function
σ = (1 + e−x )−1, and λ the learning rate. We choose P and Q to be
distributed uniformly by U(1, n).

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

As a strong baseline for applications handling smaller graphs,
we also consider an elaborate, exhaustive variant of VERSE, which
computes full similarity distribution vectors per node instead of
performing NCE-based sampling. We name this variant fVERSE
and include it in our experimental study.

Figure 3 presents our measures on the ability to reconstruct a
similarity matrix for (i) VERSE using NCE; (ii) VERSE using Nega-
tive Sampling (NS) (also used in Node2vec); and (ii) the exhaustive
fVERSE variant. We observe that, while NCE approaches the ex-
haustive method in terms of matching the ground truth top-100
most similar nodes, NS fails to deliver the same quality.

1

0.8

0.6

0.4

k
@
G
C
D
N

full VERSE
NS, s = 3
NCE, s = 3
NCE, s = 100

20

40

60

80

100

k

Figure 3: Ranking preformance in terms of NDCG for recon-
structing PPR similarity, averaged across nodes in a graph.

3.5 Complexity Comparison

Table 2 presents the average (Θ) and worst-case (O) time and space
complexity of VERSE, along with those of methods in previous
works; d is the embedding dimensionality, n the number of nodes,
m the number of edges, and s the number of samples used, and t the
number of iterations in GraRep. Methods that rely on fast sampling
(VERSE and LINE) require time linear in n and space quadratic in
n in the worst case. DeepWalk requires O(n log n) time due to its
use of hierarchical softmax. Node2vec stores the neighbors-of-a-
neighbor, incurring a quadratic cost in sparse graphs, but cubic in
dense graphs. Thus, VERSE comes at the low end of complexities
compared to previous work on graph embeddings. Remarkably,
even the computationally expensive fVERSE affords complexity
comparable to some previous works.

Time

Space

method

Θ
dn log n
tn3
dsn
dsn
d2m
dn2
dsn

DeepWalk
GraRep
LINE
Node2vec
HOPE
fVERSE
VERSE

O
dn log n
tn3
dsn
dsn
d2n2
dn2
dsn
Table 2: Comparison of neural embedding methods in terms
of average (Θ) and worst-case (O) time and space complexity.

Θ
m
n2
m
m2
n
m
n2
m

O
n2
n2
n2
n3
n2
n2
n2

3.6 Similarity Notions in Previous Approaches

Here, we provide additional theoretical considerations of VERSE
compared to LINE [41], DeepWalk [37] and Node2vec [15] and
demonstrate how our general model subsumes and extends previous
research in versatility and scalability.

Comparison with DeepWalk and Node2vec. DeepWalk and
Node2vec generate samples from random walks of fixed window
size w by the word2vec sampling strategy [29]. We derive a re-
lationship between the window size w of that strategy and the
damping factor α of Personalized PageRank.

Lemma 3.2. Let Xr be the random variable that represents the
length of a random walk r sampled with parameter w by the word2vec
sampling strategy. Then for any 0 < j ≤ w

Pr(Xr = j) =

(w − j + 1)

(7)

2
w(w + 1)

Proof. For each node v ∈ V , word2vec strategy samples two
random walks of length w starting from v ∈ V . These two random
walks represents the context of v, where v is the central node of
a walk of length 2w + 1. The model is then trained on increasing
context size up to w. Therefore, the number of nodes sampled for
each random walk amount to (cid:80)w
. A node at distance
0 < j ≤ w is sampled (w − j + 1) times; thus, the final probability is
□
w (w +1) (w − j + 1).

i=1 i = w (w +1)

2

2

Personalized PageRank provides the maximum likelihood esti-
mation for the distribution in Equation 7 for α = w −1
w +1 . Then, w = 10
corresponds to α = 0.82, which is close to the standard α = 0.85,
proved effective in practice [10]. On the other hand, α = 0.95, which,
for example, achieves the best performance on a task in Section 4.2,
corresponds to w = 39. Such large w prohibitively increases the
computation time for DeepWalk and Node2vec.

Comparison with LINE. LINE introduces the concept of first- and
second-order proximities to model complex node relationships. As
we discussed, in VERSE, first-order proximity corresponds to the
dot-product among the similarity vectors in the embedding space:

simE(u, v) = Wu · Wv

On the other hand, second-order proximity corresponds to let-
ting VERSE learn one more matrix W ′, so as to model asymmetric
similarities of nodes in the embedding space. We do that by defining
simE asymmetrically, using both W and W ′:

simE(u, v) = Wu · W ′
v

The intuition behind second-order proximity is the same as that
of SimRank: similar nodes have similar neighborhoods. Every pre-
vious method, except for LINE-1, used second-order proximities,
due to the word2vec interpretation of embeddings borrowed by
DeepWalk and Node2vec. In our model, second-order proximities
can be encoded by adding an additional matrix; we empirically
evaluate their effectiveness in Section 4.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

4 EXPERIMENTS

We evaluate VERSE against several state-of-the-art graph embed-
ding algorithms. For repeatability purposes, we provide all data sets
and the C++ source code for VERSE1, DeepWalk2 and Node2vec3.
We run the experiments on an Amazon AWS c4.8 instance with
60Gb RAM. Each method is assessed on the best possible parame-
ters, with early termination of the computation in case no result is
returned within one day. We provide the following state-of-the-art
graph embedding methods for comparison:

• DeepWalk [37]: This approach learns an embedding by sam-
pling random walks from each node, applying word2vec-based
learning on those walks. We use the default parameters described
in the paper, i.e., walk length t = 80, number of walks per node
γ = 80, and window size w = 10.
• LINE [41]: This approach learns a d-dimensional embedding
in two steps , both using adjacency similarity. First, it learns d/2
dimensions using first-order proximity; then, it learns another d/2
features using second-order proximity. Last, the two halves are
normalized and concatenated. We obtained a copy of the code4 and
run experiments with total T = 1010 samples and s = 5 negative
samples, as described in the paper.
• GraRep [11]: This method factorizes the full adjacency similarity
matrix using SVD, multiplies the matrix by itself, and repeats the
process t times. The final embedding is obtained by concatenating
the factorized vectors. We use t = 4 and 32 dimensions for each
SVD factorization; thus, the final embedding has d = 128.
• HOPE [33]: This method is a revised Singular Value Decomposi-
tion restricted to sparse similarity matrices. We report the results
obtained running HOPE with the default parameters, i.e, Katz simi-
larity (an extension of Katz centrality [23]) as the similarity measure
and β inversely proportional to the spectral radius. Since Katz simi-
larity does not converge on directed graphs with sink nodes, we
used Personalized PageRank with α = 0.85 for the CoCit dataset.
• Node2vec [15]: This is a hyperparameter-supervised approach
that extends DeepWalk by adding two parameters, p and q, so as to
control DeepWalk’s random walk sampling. The special case with
parameters p = 1, q = 1 corresponds to DeepWalk; yet, sometimes
Node2vec shows worse performance than DeepWalk in our evalu-
ation, due to the fact it uses negative sampling, while DeepWalk
uses hierarchical softmax. We fine-tuned the hyperparameters p
and q on each dataset and task. Moreover, we used a large train-
ing data to fairly compare to DeepWalk, i.e., walk length l = 80,
number of walks per node r = 80, and window size w = 10.

Baselines. In addition to graph embeddings methods, we imple-
mented the following baselines.

• Logistic regression: We use the well-known logistic regression
method as a baseline for link prediction. We train the model on a set
of common node-specific features, namely node degree, number of
common neighbors, Adamic-Adar, Jaccard coefficient, preferential
attachment, and resource allocation index [27, 28].

1https://github.com/xgfs/verse
2https://github.com/xgfs/deepwalk-c
3https://github.com/xgfs/node2vec-c
4https://github.com/tangjianpku/LINE

Size

Statistics

dataset

|V |

|E |

| L | Avg. degree Mod.

BlogCatalog
CoCit
CoAuthor
VK
YouTube
Orkut

39
334k
10k
195k
15
44k
178k —
52k
2.7M 2
79k
1.1M
3M 47
3.1M 234M 50

64.8
8.86
6.94
34.1
5.25
70

Density
6.3 × 10−3
2.0 × 10−4
1.3 × 10−4
8.7 × 10−4
9.2 × 10−6
2.4 × 10−5

0.24
0.72
0.84
0.47
0.71
0.68

Table 3: Dataset characteristics: number of vertices |V |, num-
ber of edges |E|; number of node labels |L|; average node de-
gree; modularity [32]; density defined as |E|/(cid:0) |V |
2

(cid:1).

• Louvain community detection [9]: We employ a standard par-
tition method for community detection as a baseline for graph
clustering, reporting the best partition in terms of modularity [32].

Parameter settings. In line with previous research [15, 37, 41] we
set the embedding dimensionality d to 128. The learning procedure
(Algorithm 1, Line 3) is run 105 times for VERSE and 250 times for
fVERSE; the difference in setting is motivated by the number of
model updates which is O(n) in VERSE and O(n2) in fVERSE.

We use LIBLINEAR [13] to perform logistic regression with
default parameter settings. Unlike previous work [15, 37, 41] we
employ a stricter assumption for multi-label node classification: the
number of correct classes is not known apriori, but found through
the Label Powerset multi-label classification approach [45].

For link prediction and multi-label classification, we evaluated
each individual embedding 10 times in order to reduce the noise
introduced by the classifier. Unless otherwise stated, we run each
experiment 10 times, and report the average value among the runs.
Throughout our experimental study, we use the above parameters
as default, unless indicated otherwise.
Datasets. We test our methods on six real datasets; we report the
main data characteristics in Table 3.
• BlogCatalog [54] is a network of social interactions among blog-
gers in the BlogCatalog website. Node-labels represent topic cate-
gories provided by authors.
• Microsoft Academic Graph [1] is a network of academic papers,
citations, authors, and affiliations from Microsoft Academic website
released for the KDD-2016 cup. It contains 150 million papers up to
February 2016 spanning various disciplines from math to biology.
We extracted two separate subgraphs from the original network,
using 15 conferences in data mining, databases, and machine learn-
ing. The first, CoAuthor, is a co-authorship network among authors.
The second, CoCit, is a network of papers citing other papers; labels
represent conferences in which papers were published.
• VK is a Russian all-encompassing social network. We extracted
two snapshots of the network in November 2016 and May 2017 to
obtain information about link appearance. We use the gender of
the user for classification and country for clustering.
• YouTube [43] is a network of social interactions among users of
the YouTube video platform. The labels represent groups of viewers
by video genres.
• Orkut [52] is a network of social interactions among users of the
Orkut social network platform. The labels represent communities
of users. We extracted the 50 biggest communities and use them as
labels for classification.

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

Evaluation methodology. The default form of VERSE runs Per-
sonalized PageRank with α = 0.85. For the sake of fairness, we
design a hyperparameter-supervised variant of VERSE, by analogy
to the hyperparameter-tuned variant of DeepWalk introduced
by Node2vec [15]. This variant, hsVERSE, selects the best simi-
larity with cross-validation across two proximity orders (as dis-
cussed in Section 3.6) and three similarities (Section 3.3) with
α ∈{0.45, 0.55, 0.65, 0.75, 0.85, 0.95} for simPPR
G and C ∈ {0.15, 0.25,
0.35, 0.45, 0.55, 0.65} for simSR
G .

Operator

Average
Concat
Hadamard
Weighted L1
Weighted L2

Result

(a + b)/2
[a1, . . . , ad , b1, . . . , bd ]
[a1 ∗ b1, . . . , ad ∗ bd ]
[|a1 − b1|, . . . , |ad − bd |]
[(a1 − b1)2, . . . , (ad − bd )2]

Table 4: Vector operators used for link-prediction task for
each u, v ∈ V and corresponding embeddings a, b ∈ Rd .

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

Average Concat Hadamard
79.69
78.79
68.06
74.91
77.39
74.83
79.10
76.67

80.06
79.16
68.43
74.87
77.49
74.90
79.52
77.07

86.71
85.69
66.54
82.24
77.73
74.81
86.15
79.42
77.53

Node2vec
Feature Eng.
Table 5: Link prediction results on the CoAuthor coauthor-
ship graph. Best results per method are underlined.

method
fVERSE
VERSE

DeepWalk
LINE
HOPE
hsVERSE

Average Concat Hadamard
74.81
73.66
69.92
75.13
71.90
74.02
71.22

74.94
73.78
70.05
75.17
71.89
74.14
71.29

80.77
79.71
69.79
72.54
70.22
80.26
72.43
78.84

Node2vec
Feature Eng.
Table 6: Link prediction results on the VK social graph. Best
results per method are underlined.

L1
84.49
71.93
79.06
80.03
70.55
74.34
76.45
81.25

L1
78.49
74.11
78.38
63.77
71.22
73.04
78.38

L2
84.97
72.11
78.11
80.05
71.83
74.81
76.72
80.85

L2
79.13
74.56
77.37
64.47
70.63
73.53
78.66

method
fVERSE
VERSE

DeepWalk
GraRep
LINE
HOPE
hsVERSE

1%
27.52
27.32
26.81
27.68
23.68
22.81
27.46
27.45

labelled nodes, %
5%
31.01
30.67
30.37
30.24
27.89
27.59
30.67
30.82

3%
29.83
29.42
29.27
29.21
26.90
26.63
29.45
29.66

7%
31.68
31.32
31.04
30.23
28.49
28.19
31.38
31.54

9%
32.24
31.83
31.43
30.79
28.80
28.58
31.92
32.04

Node2vec
Table 7: Multi-class classification results in CoCit dataset.

f (v). On the CoAuthor data, we predict new links for 2015 and 2016
co-authorships, using the network until 2014 for training; on VK, we
predict whether a new friendship link appears between November
2016 and May 2017, using 50% of the new links for training and 50%
for testing. We train the binary classifier by sampling non-existing
edges as negative examples. Tables 5 and 6 report the attained
accuracy. As a baseline, we use a logistic regression classifier trained
on the respective data sets’ features.

VERSE with Hadamard product of vectors is consistently the
best edge representation. We attribute this quality to the explicit re-
construction we achieve using noise contrastive estimation. VERSE
consistently outperforms the baseline in the tested datasets. Be-
sides, the hyperparameter-supervised hsVERSE variant outruns
Node2vec on all datasets.

4.2 Node Classification

We now conduct an extensive evaluation on classification and report
results for all the methods, where possible, with the CoCit, VK,
YouTube, and Orkut graphs. Node classification aims to predict of
the correct node labels in a graph, as described previously in this
section.

We evaluate accuracy by the Micro-F1 and Macro-F1 percentage
measures. We report only Macro-F1, since we experience similar
behaviors with Micro-F1. For each dataset we conduct multiple
experiments, selecting a random sample of nodes for training and
leaving the remaining nodes for testing. The results for four datasets,
shown in Tables 7-10, exhibit similar trends: VERSE yields predic-
tions comparable or superior to those of the other contestants, while
it scales to large networks such as Orkut. LINE outperforms VERSE
only in VK, where the gender of users is better captured using the
direct neighborhood. The hyperparameter-supervised variant, hs-
VERSE, is on a par with Node2vec in terms of quality on CoCit and
VK; on the largest datasets YouTube and Orkut, hsVERSE keeps
outperforming unsupervised alternatives, while Node2vec depletes
the memory.

4.1 Link Prediction

4.3 Node Clustering

Link prediction is the task of anticipating the appearance of a link
between two nodes in a network. Conventional measures for link
prediction include Adamic-Adar, Preferential attachment, Katz, and
Jaccard coefficient. We train a Logistic regression classifier on edge-
wise features obtained with the methods shown in Table 4. For
instance, for a pair of nodes u, v, the Concat operator returns a
vector as the sequential concatenation of the embeddings f (u) and

Graph clustering detects groups of nodes with similar characteris-
tics [9, 32]. We assess the embedding methods, using the k-means
algorithm with k-means++ initialization [5] to cluster the embedded
points in a d-dimensional space. Table 11 reports the Normalized
Mutual Information (NMI) with respect to the original label distri-
bution. On CoAuthor, VERSE has comparable performance with
DeepWalk; yet on VK, VERSE outperforms all other methods.

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

method
fVERSE
VERSE

9%
62.50
62.13
62.49
64.23
57.68
63.16
63.30
Table 8: Multi-class classification results in VK dataset.

labelled nodes, %
5%
61.74
61.43
61.79
63.58
57.04
62.50
62.62

3%
61.01
60.53
60.93
62.83
56.65
61.67
61.79

7%
62.26
61.86
62.17
64.01
57.40
62.97
63.04

1%
58.32
57.89
58.22
60.39
54.88
58.87
58.85

DeepWalk
LINE
HOPE
hsVERSE

Node2vec

method
VERSE

DeepWalk
LINE
HOPE
hsVERSE

method
VERSE

DeepWalk
LINE
hsVERSE

1%
17.92
18.16
13.71
9.22
18.16

1%
25.16
24.21
26.79
27.73

labelled nodes, %
5%
24.07
22.89
18.69
15.09
25.40

3%
22.26
21.55
17.36
13.80
22.84

7%
25.07
23.64
19.84
16.18
27.38

labelled nodes, %
5%
29.60
29.63
32.34
32.73

3%
28.22
27.99
30.89
30.70

7%
31.46
30.60
32.92
34.00

9%
25.99
24.54
20.64
16.78
29.09

9%
32.63
31.27
33.65
35.20

Table 9: Multi-label classification results in YouTube dataset.

Table 10: Multi-class classification results in Orkut dataset.

We also assess graph embeddings on their ability to capture the
graph community structure. We apply k-means with different k
values between 2 and 50 and select the best modularity [32] score.
Table 12 presents our results, along with the modularity obtained by
the Louvain method, the state-of-the-art modularity maximization
algorithm [9]. VERSE variants produce result almost equal that
those of Louvain, outperforming previous methods, while the three
methods that could manage the Orkut data perform similarly.

method
fVERSE
VERSE
DeepWalk
LINE
GraRep
HOPE
hsVERSE
Node2vec
Louvain

CoCit
33.22
32.93
34.33
18.79
27.43
19.05
33.24
32.84
30.73
Table 11: Node clustering results in terms of NMI.

VK
9.24
7.62
7.59
7.49
—
6.47
8.77
8.05
4.54

4.4 Graph Reconstruction

Good graph embeddings should preserve the graph structure in the
embedding space. We evaluate the performance of our method on
reconstructing the graph’s adjacency matrix. Since each adjacent

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec
Louvain

CoCit CoAuthor
70.12
69.43
70.04
60.02
67.61
42.45
69.81
70.06
72.05

80.95
79.25
73.83
71.58
77.40
69.57
79.31
75.78
84.29

VK
44.59
45.78
43.30
39.65
—
21.70
45.84
44.27
46.60

YouTube Orkut

—
67.63
58.08
63.40
—
37.94
69.13
—
71.06

—
42.64
44.66
42.59
—
—
—
—
—

Table 12: Node clustering results in terms of modularity.

node should be close in the embedding space, we first sort any
node other than the one considered by decreasing cosine distance
among the vectors. Afterwards, we take a number of nodes equal
to the actual degree of the node in the graph and connect to the
considered node to create the graph structure.

Table 13 reports the relative accuracy measured as the number
of correct nodes in the neighborhood of a node in the embedding
space. Again, VERSE performs comparably well; its exhaustive
variant, fVERSE, which harnesses the full similarity does even
better; however, the top performer is hsVERSE, which achieves the
obtained result when instantiated to the Adjacency Similarity. This
result is unsurprising, given that the adjacency similarity measure
tailors hsVERSE for the task of graph reconstruction.

method
fVERSE
VERSE

DeepWalk
LINE
GraRep
HOPE
hsVERSE

Node2vec

CoCit CoAuthor
88.96
58.73
51.54
23.32
67.61
25.88
97.53
66.35

98.20
74.30
68.44
62.01
77.40
49.70
98.91
72.70

VK
66.45
50.18
43.04
42.80
—
12.01
78.38
53.70

YouTube Orkut

—
28.64
32.21
17.76
—
33.42
38.34
—

—
18.39
19.75
10.82
—
—
28.81
—

Table 13: Graph reconstruction % for all datasets.

4.5 Parameter Sensitivity

We also evaluate the sensitivity of VERSE to parameter choice.
Figures 4(a),4(b) depict node classification performance in terms of
Micro-F1 on the BlogCatalog dataset, with 10% of nodes labeled.

The dimensionality d determines the size of the embedding,
and hence the possibility to compute more fine-grained representa-
tions. The performance grows linearly as the number of dimensions
approaches 128, while with larger d we observe no further improve-
ment. Sampled VERSE instead, performs comparably better than
fVERSE in low dimensional spaces, but degrades as d becomes
larger than 128; this behavior reflects a characteristic of node sam-
pling that tends to preserve similarities of close neighborhoods in
low-dimensional embeddings, while the VERSE leverages the entire
graph structure for larger dimensionality

The last parameter we study is the damping factor α which
amounts to the inverse of the probability of restarting random
walks from the initial node. As shown in Figure 4(b), the quality

VERSE: Versatile Graph Embeddings from Similarity Measures

WWW 2018, April 23–27, 2018, Lyon, France

1
F
-
o
r
c
i
M

0.4

0.3

0.2

0.1

0

2

0.4

0.3

0.2

1
F
-
o
r
c
i
M

fVERSE
VERSE
DeepWalk
Node2vec
LINE-2

104

s
d
n
o
c
e
s

103

fVERSE
VERSE

fVERSE
VERSE

4

8

16

32

64

128

256

512 1024

0.1

0

0.2

0.4

0.6

0.8

1

102

104

d

(a) Dimensionality d

α

(b) PPR damping factor α

105
nodes

(c) Time, log scale

106

Figure 4: Classification performance of various parameters in Fig. 4(a), 4(b) and scalability of different methods in Fig. 4(c).

LINE, and Node2vec. For each method, we report the total wall-
clock time, with graph loading and necessary preprocessing steps
included. We used LINE-2 time for fair comparison. As Figure 4
shows, VERSE is comfortably the most efficient and scalable method,
processing 106 nodes in about 3 hours, while DeepWalk and LINE
take from 6 to 15 hours.

4.7 Visualization

Last, we show how different embeddings are visualized on a plane.
We apply t-SNE [47] with default parameters to each embedding for
a subset of 1500 nodes from the CoCit dataset, equally distributed
in 5 classes (i.e., conferences); we set the density areas for each class
by Kernel Density Estimation. Figure 5 depicts the result. VERSE
produces well separated clusters with low noise, even finding dis-
tinctions among papers of the same community, namely ICDE (
)
and VLDB (

).

5 CONCLUSIONS

We introduced a new perspective on graph embeddings: to be ex-
pressive, a graph embedding should capture some similarity mea-
sure among nodes. Armed with this perspective, we developed a
scalable embedding algorithm, VERSE. In a departure from previous
works in the area, VERSE aims to reconstruct the distribution of any
chosen similarity measure for each graph node. Thereby, VERSE
brings in its scope a global view of the graph, while substantially
reducing the number of parameters required for training. VERSE
attains linear time complexity, hence it scales to large real graphs,
while it only requires space to store the graph. Besides, we have
shed light on some previous works on graph embeddings, looking at
them and interpreting them through the prism of vertex similarity.
Our thorough experimental study shows that, even instantiated
with PPR as a default similarity notion, VERSE consistently out-
performs state-of-the-art approaches for graph embeddings in a
plethora of graph tasks, while a hyperparameter-supervised vari-
ant does even better. Thus, we have provided strong evidence that
embeddings genuinely based on vertex similarity address graph
mining challenges better than others.

Figure 5: Visualizations of a subset of nodes from CoCit
ICDE, KDD,
graph with selected conferences: VLDB,
WWW, and NIPS. Note that the number of nodes per

class is the same for all conferences.

of classification accurary is quite robust with respect to α for both
VERSE and fVERSE, only compromised by extreme values. An α
value close to 0 reduces PPR to an exploration of the immediate
neighborhood of the node. On the other hand, a value close to 1
amounts to regular PageRank, deeming all nodes as equally im-
portant. This result vindicates our work and distinguishes it from
previous methods based on local neighborhood expansion.

4.6 Scalability

We now present runtime results on synthetic graphs of growing size,
generated by the Watts Strogatz model [50], setting VERSE against
scalable methods with C++ implementations, namely DeepWalk,

WWW 2018, April 23–27, 2018, Lyon, France

Anton Tsitsulin, Davide Mottin, Panagiotis Karras, and Emmanuel Müller

REFERENCES
[1] 2016. Microsoft Academic Graph - KDD cup 2016.
azurewebsites.net/Data. (2016). Accessed: 2016-04-30.

https://kddcup2016.

[2] Sami Abu-El-Haija, Bryan Perozzi, and Rami Al-Rfou. 2017. Learning Edge

Representations via Low-Rank Asymmetric Projections. CIKM (2017).

[3] Amr Ahmed, Nino Shervashidze, Shravan Narayanamurthy, Vanja Josifovski,
and Alexander J Smola. 2013. Distributed large-scale natural graph factorization.
In WWW. ACM, 37–48.

[4] Leman Akoglu, Mary McGlohon, and Christos Faloutsos. 2010. Oddball: Spotting

anomalies in weighted graphs. In PAKDD. 410–421.

[5] David Arthur and Sergei Vassilvitskii. 2007. k-means++: The advantages of

careful seeding. In SIAM. 1027–1035.

[6] Mikhail Belkin and Partha Niyogi. 2001. Laplacian eigenmaps and spectral

techniques for embedding and clustering. In NIPS. 585–591.

[7] Yoshua Bengio, Aaron Courville, and Pascal Vincent. 2013. Representation

learning: A review and new perspectives. TPAMI (2013), 1798–1828.

[8] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A

neural probabilistic language model. JMLR (2003), 1137–1155.

[9] Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefeb-
vre. 2008. Fast unfolding of communities in large networks. Journal of statistical
mechanics: theory and experiment 10 (2008).

[10] Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual
Web search engine. Computer Networks and ISDN Systems (1998), 107 – 117.
[11] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2015. GraRep: Learning Graph Repre-

sentations with Global Structural Information. In CIKM. 891–900.

[12] Shaosheng Cao, Wei Lu, and Qiongkai Xu. 2016. Deep Neural Networks for

Learning Graph Representations. In AAAI. 1145–1152.

[13] Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-Rui Wang, and Chih-Jen Lin.
2008. LIBLINEAR: A library for large linear classification. JMLR 9, Aug (2008),
1871–1874.

[14] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep learning. MIT

[16] Michael Gutmann and Aapo Hyvärinen. 2010. Noise-contrastive estimation:
A new estimation principle for unnormalized statistical models.. In AISTATS.
297–304.

[17] Michael U Gutmann and Aapo Hyvärinen. 2012. Noise-contrastive estimation
of unnormalized statistical models, with applications to natural image statistics.
JMLR 13 (2012), 307–361.

[18] Keith Henderson, Brian Gallagher, Lei Li, Leman Akoglu, Tina Eliassi-Rad, Hang-
hang Tong, and Christos Faloutsos. 2011. It’s who you know: graph mining using
recursive structural features. In KDD. 663–671.

[19] Jiafeng Hu, CK Cheng, Zhipeng Huang, Yixiang Fang, and Siqiang Luo. 2017. On

Embedding Uncertain Graphs. In CIKM. ACM.

[20] Xiao Huang, Jundong Li, and Xia Hu. 2017. Label informed attributed network

embedding. In WSDM. ACM, 731–739.

[21] Glen Jeh and Jennifer Widom. 2002. SimRank: a measure of structural-context

similarity. In KDD. 538–543.

[22] Minhao Jiang, Ada Wai-Chee Fu, and Raymond Chi-Wing Wong. 2017. READS:
a random walk approach for efficient and accurate dynamic SimRank. VLDB 10,
9 (2017), 937–948.

[23] Leo Katz. 1953. A new status index derived from sociometric analysis. Psychome-

trika 18, 1 (1953), 39–43.

[24] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classifi-

cation with deep convolutional neural networks. 1097–1105.

[25] Matthieu Labeau and Alexandre Allauzen. 2017. An experimental analysis of
Noise-Contrastive Estimation: the noise distribution matters. EACL (2017).
[26] John A. Lee and Michel Verleysen. 2007. Nonlinear Dimensionality Reduction (1st

ed.). Springer Publishing Company, Incorporated.

[27] Ryan N Lichtenwalter, Jake T Lussier, and Nitesh V Chawla. 2010. New perspec-

tives and methods in link prediction. In KDD. 243–252.

[28] Linyuan Lü and Tao Zhou. 2011. Link prediction in complex networks: A survey.
Physica A: Statistical Mechanics and its Applications 390, 6 (2011), 1150–1170.
[29] Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jeffrey Dean.
2013. Distributed Representations of Words and Phrases and their Composition-
ality. In NIPS. 3111–3119.

[30] Andriy Mnih and Yee Whye Teh. 2012. A fast and simple algorithm for training

neural probabilistic language models. In ICML. 1751–1758.

[31] Annamalai Narayanan, Mahinthan Chandramohan, Lihui Chen, Yang Liu, and
Santhoshkumar Saminathan. 2016. subgraph2vec: Learning distributed represen-
tations of rooted sub-graphs from large graphs. arXiv preprint arXiv:1606.08928
(2016).

[32] Mark EJ Newman. 2006. Modularity and community structure in networks. PNAS

(2006), 8577–8582.

[33] Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym-

metric transitivity preserving graph embedding. In KDD. 1105–1114.

[34] Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Winograd. 1999. The

PageRank citation ranking: bringing order to the web. (1999).

[35] Jeffrey Pennington, Richard Socher, and Christopher D Manning. 2014. Glove:

Global Vectors for Word Representation.. In EMNLP. 1532–1543.

[36] Bryan Perozzi, Leman Akoglu, Patricia Iglesias Sánchez, and Emmanuel Müller.
2014. Focused clustering and outlier detection in large attributed graphs. In KDD.
1346–1355.

[37] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: online learning

of social representations. In KDD. 701–710.

[38] Leonardo FR Ribeiro, Pedro HP Saverese, and Daniel R Figueiredo. 2017. struc2vec:
Learning node representations from structural identity. In KDD. ACM, 385–394.
[39] Sam T Roweis and Lawrence K Saul. 2000. Nonlinear dimensionality reduction

by locally linear embedding. science 290, 5500 (2000), 2323–2326.

[40] Jiliang Tang and Huan Liu. 2012. Unsupervised Feature Selection for Linked

Social Media Data. In KDD. 904–912.

[41] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. LINE: Large-scale Information Network Embedding. In WWW. 1067–1077.
[42] Lei Tang and Huan Liu. 2009. Relational learning via latent social dimensions. In

[43] Lei Tang and Huan Liu. 2009. Scalable learning of collective behavior based on

sparse social dimensions. In CIKM. 1107–1116.

[44] Joshua B Tenenbaum, Vin De Silva, and John C Langford. 2000. A global geometric
framework for nonlinear dimensionality reduction. science 290, 5500 (2000), 2319–
2323.

[45] Grigorios Tsoumakas and Ioannis Katakis. 2006. Multi-label classification: An

overview. IJDWM 3, 3 (2006).

[46] Cunchao Tu, Weicheng Zhang, Zhiyuan Liu, and Maosong Sun. 2016. Max-
Margin DeepWalk: Discriminative Learning of Network Representation. In IJCAI.
3889–3895.

[47] L.J.P. van der Maaten and G.E. Hinton. 2008. Visualizing High-Dimensional Data
Using t-SNE. Journal of Machine Learning Research 9 (2008), 2579–2605.
[48] Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural Deep Network Em-

bedding. In KDD. 1225–1234.

[49] Suhang Wang, Charu Aggarwal, Jiliang Tang, and Huan Liu. 2017. Attributed

Signed Network Embedding. CIKM (2017).

[50] Duncan J Watts and Steven H Strogatz. 1998. Collective dynamics of ‘small-world’

networks. Nature 393 (1998), 440–442.

[51] Shuicheng Yan, Dong Xu, Benyu Zhang, Hong-Jiang Zhang, Qiang Yang, and
Stephen Lin. 2007. Graph embedding and extensions: A general framework for
dimensionality reduction. TPAMI 29, 1 (2007).

[52] Jaewon Yang and Jure Leskovec. 2015. Defining and evaluating network com-
munities based on ground-truth. Knowledge and Information Systems 42 (2015),
181–213.

[53] Wayne W Zachary. 1977. An information flow model for conflict and fission in

small groups. Journal of anthropological research 33, 4 (1977), 452–473.

[54] R. Zafarani and H. Liu. 2009. Social Computing Data Repository at ASU. (2009).

http://socialcomputing.asu.edu

[55] Daokun Zhanga, Jie Yinb, Xingquan Zhuc, and Chengqi Zhanga. 2017. User

profile preserving social network embedding. In IJCAI.

[15] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable Feature Learning for

KDD. 817–826.

Press.

Networks. In KDD. 855–864.

