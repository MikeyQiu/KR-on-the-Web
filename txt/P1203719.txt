MUTAN: Multimodal Tucker Fusion for Visual Question Answering

Hedi Ben-younes 1,2 *

R´emi Cadene 1*

Matthieu Cord 1

Nicolas Thome 3

1 Sorbonne Universit´es, UPMC Univ Paris 06, CNRS, LIP6 UMR 7606, 4 place Jussieu, 75005 Paris
2 Heuritech, 248 rue du Faubourg Saint-Antoine, 75012 Paris
3 Conservatoire National des Arts et M´etiers
hedi.ben-younes@lip6.fr, remi.cadene@lip6.fr, matthieu.cord@lip6.fr, nicolas.thome@cnam.fr

7
1
0
2
 
y
a
M
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
6
7
6
6
0
.
5
0
7
1
:
v
i
X
r
a

Abstract

We introduce MUTAN, a multimodal

Bilinear models provide an appealing framework for
mixing and merging information in Visual Question An-
swering (VQA) tasks. They help to learn high level asso-
ciations between question meaning and visual concepts in
the image, but they suffer from huge dimensionality issues.
tensor-based
Tucker decomposition to efﬁciently parametrize bilinear in-
teractions between visual and textual representations. Ad-
ditionally to the Tucker framework, we design a low-rank
matrix-based decomposition to explicitly constrain the in-
teraction rank. With MUTAN, we control the complexity
of the merging scheme while keeping nice interpretable fu-
sion relations. We show how our MUTAN model generalizes
some of the latest VQA architectures, providing state-of-the-
art results.

1. Introduction

Multimodal representation learning for text and image
has been extensively studied in recent years. Currently, the
most popular task is certainly Visual Question Answering
(VQA) [19, 2]. VQA is a complex multimodal task which
aims at answering a question about an image. A speciﬁc
benchmark has been ﬁrst proposed [19], and large scale
datasets have been recently collected [21, 2, 31], enabeling
the development of more powerful models.

To solve this problem, precise image and text models are
required and, most importantly, high level interactions be-
tween these two modalities have to be carefully encoded
into the model in order to provide the correct answer. This
projection from the unimodal spaces to a multimodal one
is supposed to extract and model the relevant correlations
between the two spaces. Besides, the model must have the
ability to understand the full scene, focus its attention on the
relevant visual regions and discard the useless information
regarding the question.

*Equal contribution

Figure 1: The proposed MUTAN model uses a Tucker de-
composition of the image/question correlation tensor, which
enables modeling rich and accurate multi-modal interac-
tions. For the same input image, we show the result of the
MUTAN fusion process when integrated into an attention
mechanism [28]: we can see that the regions with larger at-
tention scores (in red) indicate a very ﬁne understanding of
the image and question contents, enabling MUTAN to prop-
erly answer the question (see detailed maps in experiments
section).

Bilinear models are powerful approaches for the fusion
problem in VQA because they encode full second-order
interactions. They currently hold state-of the-art perfor-
mances [5, 8]. The main issue with these bilinear models
is related to the number of parameters, which quickly be-
comes intractable with respect to the input and output di-
mensions. Therefore, current bilinear approaches must be
simpliﬁed or approximated by reducing the model complex-
ity: in [5], the authors sacriﬁce trainability by using a hand-
crafted multi-modal projection, while a global tensor rank
constraint is applied in [8], reducing correlations to a sim-
ple element-wise product.

In this work, we introduce a new architecture called MU-
TAN (Figure 2), which focuses on modeling ﬁne and rich
interactions between image and textual modalities. Our ap-
proach is based on a Tucker decomposition [24] of the cor-

1

relation tensor, which is able to represent full bilinear inter-
actions, while maintaining the size of the model tractable.
The resulting scheme allows us to explicitly control the
model complexity, and to choose an accurate and inter-
pretable repartition of the learnable parameters.

In the next section, we provide more details on related
VQA works and highlight our contributions. The MUTAN
fusion model, based on a Tucker decomposition, is pre-
sented in section 3, and successful experiments are reported
in section 4.

2. Related work

The main task in multimodal visual and textual analy-
sis aims at learning an alignment between feature spaces
[29, 23, 18]. Thus, the recent task of image captioning aims
at generating linguistic descriptions of images [25, 10, 28].
Instead of explicitly learning an alignment between two
spaces, the goal of VQA [2, 19] is to merge both modali-
ties in order to decide which answer is correct. This prob-
lem requires modeling very precise correlations between the
image and the question representations.
Attention. Attention mechanisms [28] have been a real
breakthrough in multimodal systems, and are fundamental
for VQA models to obtain the best possible results. [30]
propose to stack multiple question-guided attention mecha-
nisms, each one looking at different regions of the image.

[22] and [14] extract bounding boxes in the image and
score each one of them according to the textual features. In
[17], word features are aggregated with an attention mech-
anism guided by the image regions and, equivalently, the
region visual features are aggregated into one global image
embedding. This co-attentional framework uses concatena-
tions and sum pooling to merge all the components. On the
contrary, [5] and [8] developed their own fusion methods
that they use for global and attention-based strategies.

In this paper, we use the attentional modeling, proposed
in [5], as a tool that we integrate in our new fusion strategy
for both the global fusion and the attentional modeling.
Fusion strategies. Early works have modeled interactions
between multiple modalities with ﬁrst order interactions.
The IMG+BOW model in [21] is the ﬁrst to use a con-
catenation to merge a global image representation with a
question embedding, obtained by summing all the learnt
word embeddings from the question. In [22], (image, ques-
tion, answer) triplets are scored in an attentional framework.
Each local feature is given a score corresponding to its sim-
ilarity with textual features. These scores are used to weight
region multimodal embeddings, obtained from a concatena-
tion between the region’s visual features and the textual em-
beddings. The hierarchical co-attention network [17], after
extracting multiple textual and visual features, merges them
with concatenations and sums.

interactions between two embedding spaces. Bilinear in-
teractions have shown great success in deep learning for
ﬁne-grained classiﬁcation [16], and Multimodal language
modeling [10]. In VQA, a simple element-wise product be-
[7] also uses
tween the two vectors is performed in [2].
an element-wise product in a more complex iterative global
merging scheme. In [14], they use the element-wise product
aggregation in an attentional framework. To go deeper in
bilinear interactions, Multimodal Compact Bilinear pooling
(MCB) [5] uses an outer product q⊗v between visual v and
textual q embeddings. The count-sketch projection [3] Ψ is
used to project q⊗v on a lower dimensional space. Interest-
ingly, nice count-sketch properties are capitalized to com-
pute the projection without having to explicitly compute
the outer product. However, interaction parameters in MCB
are ﬁxed by the count-sketch projection (randomly chosen
in {0; −1; 1}), limiting its expressive power for modeling
complex interactions between image and questions. In con-
trast, our approach is able to model rich second order inter-
action with learned parameters.

In the recent Multimodal Low-rank Bilinear (MLB)
pooling work [8], full bilinear interactions between im-
age and question spaces are parametrized by a tensor.
Again, to limit the number of free parameters, this ten-
sor is constrained to be of low rank r. The MLB strategy
reaches state-of-the-art performances on the well-known
VQA database [2]. Despite these impressive results, the
low rank tensor structure is equivalent to a projection of
both visual and question representations into a common
r-dimensional space, and to compute simple element-wise
product interactions in this space. MLB is thus essentially
designed to learn a powerful mono-modal embedding for
text and image modalities, but relies on a simple fusion
scheme in this space.

In this work, we introduce MUTAN, a multimodal fusion
scheme based on bilinear interactions between modalities.
To control the number of model parameters, MUTAN re-
duces the size of the mono-modal embeddings, while mod-
eling their interaction as accurately as possible with a full
bilinear fusion scheme. Our submission therefore encom-
passes the following contributions:

– New fusion scheme for VQA relying on a Tucker
tensor-based decomposition, consisting in a factorization
into three matrices and a core tensor. We show that the MU-
TAN fusion scheme generalizes the latest bilinear models,
i.e. MCB [5] and MLB [8], while having more expressive
power.

– Additional structured sparsity constraint the core ten-
sor to further control the number of model parameters.
This acts as a regularizer during training and prevents over-
ﬁtting, giving us more ﬂexibility to adjust the input/output
projections.

Second order models are a more powerful way to model

– State-of-the-art results on the most widely used dataset

Figure 2: MUTAN fusion scheme for global Visual QA. The prediction is modeled as a bilinear interaction between visual
and linguistic features, parametrized by the tensor T . In MUTAN, we factorise the tensor T using a Tucker decomposition,
resulting in an architecture with three intra-modal matrices Wq, Wv and Wo, and a smaller tensor T c. The complexity of
T c is controlled via a structured sparsity constraint on the slice matrices of the tensor.

for Visual QA [2]. We also show that MUTAN outperforms
MCB [5] and MLB [8] in the same setting, and that perfor-
mances can be further improved when combined with MLB,
validating the complementarity potential between the two
approaches.

3. MUTAN Model

Our method deals with the problem of Visual Question
Answering (VQA). In VQA, one is given a question q ∈ Q
about an image v ∈ I, and the goal is to provide a mean-
ingful answer. During training, we aim at learning a model
such that the predicted answer ˆa matches the correct one a(cid:63).
More formally, denoting as Θ the whole set of parameters
of the model, the predicted output ˆa can be written as:

ˆa = arg max
a∈A

pΘ (a|v, q)

(1)

The general architecture of the proposed approach is
shown in Figure 2. As commonly done in VQA, images
v and questions q are ﬁrstly embedded into vectors and
the output is represented as a classiﬁcation vector y . In
this work, we use a fully convolutional neural network [6]
(ResNet-152) to describe the image content, and a GRU re-
current network [11, 4] for the question, yielding represen-
tations v ∈ Rdv for the image and q ∈ Rdq for the question.
Vision and language representations v and q are then fused
using the operator T (explained below) to produce a vector
y, providing (through a softmax function) the ﬁnal answer
in Eq. (1). This global merging scheme is also embedded
into a visual attention-based mechanism [8] to provide our
ﬁnal MUTAN architecture.

Bilinear models [5, 8] are recent powerful solutions to
the fusion problem, since they encode fully-parametrized
bilinear interactions between the vectors q and v:

y = (T ×1 q) ×2 v

(2)

their

bilinear

appealing modeling power,

with the full tensor T ∈ Rdq×dv×|A|, and the operator ×i
designing the i-mode product between a tensor and a matrix
(here a vector).
Despite
fully-
become
parametrized
intractable in VQA, because the size of the full tensor
is prohibitive using common dimensions for textual, visual
and output spaces. For example, with dv ≈ dq ≈ 2048 and
|A| ≈ 2000, the number of free parameters in the tensor
T is ∼ 1010. Such a huge number of free parameters
is a problem both for learning and for GPU memory
consumption1.

interactions

quickly

In MUTAN, we factorize the full tensor T using a
Tucker decomposition. We also propose to complete our
decomposition by structuring the second tensor T c (see
gray box in Fig. 2) in order to keep ﬂexibility over the in-
put/output dimensions while keeping the number of param-
eters tractable.

3.1. Tucker decomposition

The Tucker decomposition [24] of a 3-way tensor
T ∈ Rdq×dv×|A| expresses T as a tensor product between
factor matrices Wq, Wv and Wo, and a core tensor T c in
such a way that:

T = ((T c ×1 Wq) ×2 Wv) ×3 Wo

(3)

Fusion and Bilinear models The issue of merging visual
and linguistic information is crucial in VQA. Complex and
high-level interactions between textual meaning in the ques-
tion and visual concepts in the image have to be extracted
to provide a meaningful answer.

with Wq ∈ Rdq×tq , Wv ∈ Rdv×tv and Wo ∈ R|A|×to,
and T c ∈ Rtq×tv×to. Interestingly, Eq. (3) states that the

1A tensor with 8 billion ﬂoat32 scalars approximately needs 32Go to

be stored, while top-grade GPUs hold about 24Go each.

weights in T are functions of a restricted number of param-
eters ∀i ∈ [1, dq], j ∈ [1, dv], k ∈ [1, do]:
T [i, j, k] =

T c[l, m, n]Wq[i, l]Wv[j, m]Wo[k, n]

(cid:88)

l∈[1,tq],m∈[1,tv],n∈[1,to]

T is usually summarized as T =
.
(cid:75)
A comprehensive discussion on Tucker decomposition and
tensor analysis may be found in [12].

T c; Wq, Wv, Wo

(cid:74)

3.2. Multimodal Tucker Fusion

As we parametrize the weights of the tensor T with its
Tucker decomposition of the Eq. (3), we can rewrite Eq. (2)
as follows:

y = (cid:0)(cid:0)T c ×1

(cid:0)q(cid:62)Wq

(cid:1)(cid:1) ×2

(cid:0)v(cid:62)Wv

(cid:1)(cid:1) ×3 Wo

(4)

This is strictly equivalent to encode a full bilinear interac-
tion of projections of q and v into a latent pair representation
z, and to use this latent code to predict the correct answer.
If we deﬁne ˜q = q(cid:62)Wq ∈ Rtq and ˜v = v(cid:62)Wv ∈ Rtv , we
have:

z = (T c ×1 ˜q) ×2 ˜v ∈ Rto

(5)

z is projected into the prediction space y = z(cid:62)Wo ∈ R|A|
and p = softmax(y).
In our experiments, we use non-
linearities ˜q = tanh(q(cid:62)Wq) and ˜v = tanh(v(cid:62)Wv) in
the fusion, as in [8], providing slightly better results. The
multimodal Tucker fusion is depicted in Figure 2.

Interpretation Using the Tucker decomposition, we have
separated T into four components, each having a speciﬁc
role in the modeling. Matrices Wq and Wv project the
question and the image vectors into spaces of respective di-
mensions tq and tv. These dimensions directly impact the
modeling complexity that will be allowed for each modal-
ity. The higher tq (resp.
tv) will be, the more complex
image) modeling will be. Tensor T c
the question (resp.
is used to model interactions between ˜q and ˜v. It learns a
projection from all the correlations ˜q[i]˜v[j] to a vector z of
size to. This dimension controls the complexity allowed for
the interactions between modalities. Finally, the matrix Wo
scores this pair embedding z for each class in A.

3.3. Tensor sparsity

To further balance between expressivity and complexity
of the interactions modeling, we introduce a structured spar-
sity constraint based on the rank of the slice matrices in T c.
When we perform the to bilinear combinations between ˜q
and ˜v of Eq. (5), each dimension k ∈
in z can be
written as:

(cid:74)
z[k] = ˜q(cid:62)T c[:, :, k]˜v
The correlations between elements of ˜q and ˜v are weighted
by the parameters of T c[:, :, k]. We might beneﬁt from the

1, to

(6)

(cid:75)

introduction of a structure in each of these slices. This struc-
ture can be expressed in terms of rank constraints on the
slices of T c. We impose the rank of each slice to be equal
to a constant R. Thus we express each slice T c[:, :, k] as a
sum of R rank one matrices:

with mk

r ∈ Rtq and nk

r ∈ Rtv Eq. (6) becomes:

T c[:, :, k] =

mk

r ⊗ nk(cid:62)

r

R
(cid:88)

r=1

z[k] =

(cid:0)˜q(cid:62)mk

(cid:1) (cid:0)˜v(cid:62)nk

(cid:1)

r

r

R
(cid:88)

r=1

We can deﬁne R matrices Mr
Nr ∈ Rtv × to) such as ∀k ∈
(resp. Nr[:, k] = nk
then be written as:

∈
(resp.
, Mr[:, k] = mk
1, do
r
r ). The structured sparsity on T c can

Rtq × to

(cid:74)

(cid:75)

R
(cid:88)

zr

z =

r=1
zr = (˜q(cid:62)Mr) ∗ (˜v(cid:62)Nr)

(7)

(8)

(9)

(10)

Interpretation Adding this rank constraint on T c leads
to expressing the output vector z as a sum over R vectors
zr. To obtain each of these vectors, we project ˜q and ˜v
into a common space and merge them with an elementwise
product. Thus, we can interpret z as modeling an OR in-
teraction over multiple AND gates (R in MUTAN) between
projections of ˜q and ˜v. z[k] can described in terms of logi-
cal operators as:

zr[k] = (cid:0)˜q similar to mk

r

(cid:1) AND (cid:0)˜v similar to nk

z[k] = z1[k] OR ... OR zR[k]

r

(cid:1) (11)
(12)

This decomposition gives a very clear insight of how the
fusion is carried out in our MUTAN model. In our experi-
ments, we will show how different r’s in
behave, de-
pending on the type of question. We will exhibit some cases
where some r’s specialize over speciﬁc question types.

1, R
(cid:74)

(cid:75)

3.4. Model Uniﬁcation and Discussion

In this subsection, we show how two state of the art
models, namely Multimodal Low-rank bilinear pooling
[8] (MLB) and Multimodal Compact Bilinear pooling [5]
(MCB), can be seen as special cases of our Multimodal
Tucker Fusion. Each of these models use a different type
of bilinear interaction between q and v, hence instantiating
a speciﬁc parametrization of the weight tensor T . These
parameterizations actually consist in a Tucker decomposi-
tion with speciﬁc constraints on the elements T c, Wq, Wv
and Wo. More importantly, when we cast MCB and MLB

(a) MCB

(b) MLB

(c) MUTAN

Figure 3: Tensor design strategies. (a) MCB: Wq and Wv are ﬁxed diagonal matrices, T c is a sparse ﬁxed tensor, only the
output factor matrix Wo is learnt; (b) MLB: the 3 factor matrices are learnt but the core tensor is T c set to identity; (c) MU-
TAN: Wq, Wv, Wo and T c are learnt. The full bilinear interaction T c is structured with a low-rank (R) decomposition.

into the framework of Tucker decompositions, we show that
the structural constraints imposed by these two models state
that some parameters are ﬁxed, while they are free to be
learnt in our full Tucker fusion. This is illustrated in Fig-
ure 3. We show in color the learnt parameters.

3.4.1 Multimodal Compact Bilinear (MCB)

q

q

v

v

and W mcb

= Diag (sq) and W mcb

We can show that the Multimodal Compact Bilinear pool-
ing [5] can be written as a bilinear model where the weight
tensor T mcb is decomposed into its Tucker decomposition,
with speciﬁc structures on the decompositions’ elements.
The intramodal projection matrices W mcb
are
diagonal matrices where the non-zero coefﬁcients take their
values in {−1; 1}: W mcb
=
Diag (sv), where sq ∈ Rdq and sv ∈ Rdv are random vec-
tors sampled at the instanciation of the model but kept ﬁxed
afterwards. The core tensor T c is sparse and its values fol-
low the rule: T mcb
[i, j, k] = 1 if h(i, j) = k (and 0 else),
where h :
×
is randomly sampled
(cid:75)
at the beginning of training and no longer changed.

(cid:74)
As was noticed in [8], all the learnt parameters in MCB
are located after the fusion. The combinations of dimen-
sions from q and from v that are supposed to interact with
each other are randomly sampled beforehand (through h).
To compensate for the fact of ﬁxing the parameters sq, sv
and h, they must set a very high to dimension (typically
16,000). This set of combinations is taken as a feature vec-
tor for classiﬁcation.

1, dv

1, do

1, dq

→

(cid:74)

(cid:74)

(cid:75)

(cid:75)

c

3.4.2 Multimodal Low-rank Bilinear (MLB)

The low-rank bilinear interaction corresponds to a canoni-
cal decomposition of the tensor T such as its rank is equal
to R. It is well-known that the low-rank decomposition of a
tensor is a special case of the Tucker decomposition, such
as T mlb =
where tq = tv = to = R.
Two major constraints are imposed when reducing Tucker
decomposition to low-rank decomposition. First, the three
dimensions tq, tv and to are structurally set to be equal. The

I R; Wq, Wv, Wo
(cid:74)

(cid:75)

dimension of the space in which a modality is projected (tq
and tv) quantiﬁes the model’s complexity. Our intuition is
that since the image and language spaces are different, they
may require to be modeled with different levels of complex-
ity, hence different projection dimensions. The second con-
straint is on the core tensor, which is set to be the identity.
A dimension k of ˜qmlb is only allowed to interact with the
same dimension of ˜vmlb, which might be restrictive. We
will experimentally show the beneﬁcial effect of removing
these constraints.

We would like to point out the differences between MLB
and the structured sparsity per slice presented in 3.3. There
are two main differences between the two approaches. First,
our rank reduction is made on the core tensor of the Tucker
decomposition T c, while in MLB they constrain the rank
of the global tensor T . This lets us keep different dimen-
sionalities for the projected vectors ˜q and ˜v. The second
difference is we do not reduce the tensor on the third mode,
but only on the ﬁrst two modes corresponding to the image
and question modalities. The implicit parameters in T c are
correlated inside a mode-3 slice but independent between
the slices.

4. Experiments

VQA Dataset The VQA dataset [2] is built over images
of MSCOCO [15], where each image was manually anno-
tated with 3 questions. Each one of these questions is then
answered by 10 annotators, yielding a list of 10 ground-
truth answers. The dataset is composed of 248,349 pairs
(image, question) for the training set, 121,512 for valida-
tion and 244,302 for testing. The ground truth answers are
given for the train and val splits, and one must submit their
predictions to an evaluation server to get the scores on test-
std split. Note that the evaluation server makes it possible
to submit multiple models per day on test-dev, which is a
subsample of test-std. The whole submission on test-std
can only be done ﬁve times. We focus on the open-ended
task, where the ground truth answers are given in free natu-
ral language phrases. This dataset comes with its evaluation

metric, presented in [2]. When the model predicts an an-
swer for a visual question, the VQA accuracy is given by:

(cid:18)

min

1,

# humans that provided that answer
3

(cid:19)

(13)

If the predicted answer appears at least 3 times in the ground
truth answers, the accuracy for this example is considered
to be 1. Intuitively, this metrics takes into account the con-
sensus between annotators.

MUTAN Setup We ﬁrst resize our images to be of size
(448, 448). We use ResNet152 [6] as our visual feature ex-
tractor, which produces feature maps of size 14×14×2048.
We keep the 14 × 14 tiling when attention models are used
(section 4.2). Otherwise, the image is represented as the
average of 14 × 14 vectors at the output of the CNN (sec-
tion 4.1). To represent questions, we use a GRU [4] ini-
tialized with the parameters of a pretrained Skip-thoughts
model [11]. Each model is trained to predict the most com-
mon answer in the 10 annotated responses. |A| is ﬁxed to
the 2000 most frequent answers as in [8], and we train our
model using ADAM [9] (see details in supplementary ma-
terial).

4.1. Fusion Scheme Comparison

To point out the performance variation due to the fusion
modules, we ﬁrst compare MUTAN to state-of-the-art bi-
linear models, under the same experimental framework. We
do not use attention models here. Several merging scheme
results are presented in Table 1: Concat denotes a baseline
where v and q are merged by simply concatenating them.
For MCB [5] and MLB [8], we use the available code 2 3
to train models on the same visual and linguistic features.
We choose an output dimension of 16,000 for MCB and
1,200 for MLB, as indicated in the respective articles. MU-
TAN noR designates the MUTAN model without the rank
sparsity constraint. We choose all the projection dimensions
to be equal to each other: tq = tv = to = 160. These
parameters are chosen considering the results on val split.
Finally, our MUTAN 4 designates the full Tucker decompo-
sition with rank sparsity strategy. We choose all the projec-
tion dimensions to be equal to each other: tq = tv = to =
360, and a rank R = 10. These parameters were chosen
so that MUTAN and MUTAN noR have the same number
of parameters. As we can see in Table 1, MUTAN noR per-
forms better than MLB, which validates the fact that model-
ing full bilinear interactions between low dimensional pro-
jections yields a more powerful representation than having
strong mono-modal transformations with a simple fusion

2https://github.com/jnhwkim/cbp
3https://github.com/jnhwkim/MulLowBiVQA
4https://github.com/cadene/vqa.pytorch

test-dev

val

Y/N No. Other All All
Model
79.25 36.18 46.69 58.91 56.92
Concat
80.81 35.91 46.43 59.40 57.39
MCB
82.02 36.61 46.65 60.08 57.91
MLB
81.44 36.42 46.86 59.92 57.94
MUTAN noR
81.45 37.32 47.17 60.17 58.16
MUTAN
MUTAN+MLB 17.5 82.29 37.27 48.23 61.02 58.76

Θ
8.9
32
7.7
4.9
4.9

Table 1: Comparison between different fusion under the
same setup on the test-dev split. Θ indicates the number of
learnable parameters (in million).

scheme (element-wise product). With the structured spar-
sity, MUTAN obtains the best results, validating our intu-
ition of having a nice tradeoff between the projection di-
mensions and a reasonable number of useful bilinear inter-
action parameters in the core tensor T c. Finally, a naive
late fusion MUTAN+MLB further improves performances
(about +1pt on test-dev). It validates the complementarity
between the two types of tensor decomposition.

4.2. State-of-the-art comparison

To compare the performance of the proposed approach
to state-of-the-art works, we associate the MUTAN fusion
with recently introduced techniques for VQA, which are de-
scribed below.

Attention mechanism We use the same kind of multi-
glimpse attention mechanisms as the ones presented in [5]
and [8]. We use MUTAN to score the region embeddings
according to the question vector, and compute a global vi-
sual vector as a sum pooling weighted by these scores.

Answer sampling (Ans. Sampl.) Each (image,question)
pair in the VQA dataset is annotated with 10 ground truth
answers, corresponding to the different annotators. In those
10, we keep only the answers occuring more than 3 times,
and randomly choose the one we ask our model to predict.

Data augmentation (DAVG) We use Visual Genome
[13] as a data augmentation to train our model, keeping only
the example whose answer is in our vocabulary. This triples
the size of our training set.

Ensembling MUTAN (5) consist in an ensemble of ﬁve
models trained on train+val splits. We use 3 attentional
MUTAN architectures with one trained with additional Vi-
sual Genome data. The 2 other models are instances of
MLB, which can be seen as a special case of MUTAN. De-
tails about the ensembling will be provided in the supple-
mentary material.

Results State-of-the-art comparison results are gathered
in Table 2. Firstly, we can notice that bilinear models, i.e.

test-dev

test-
std
All

36.6
38.6

58.7
59.4

Y/N No. Other All
80.87 37.32 43.12 57.99 58.24
78.39 36.45 46.28 58.39 58.43
58.9
46.1
79.3
81.1
59.4
45.5
81.01 38.42 45.23 59.17 59.44
82.28 38.82 49.25 61.68 61.84
62.1
51.7
79.7
83.4
66.5
58.5
84.57 39.21 57.81 66.77 66.89
84.54 39.32 57.36 67.03 66.96
85.14 39.81 58.52 67.42 67.36

61.8
66.7

38.7
39.8

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Table 2: MUTAN performance comparison on the test-dev
and test-standard splits VQA dataset; (n) for an ensemble
of n models.

MCB [5] and MLB [8] have a strong edge over other meth-
ods with a less powerful fusion scheme.

MUTAN outperforms all the previous methods with a
large margin on test-dev and test-std. This validates the rele-
vance of the proposed fusion scheme, which models precise
interactions between modalities. The good performances of
MUTAN (5) also conﬁrms its complementarity with MLB,
already seen in section 4.1 without attention mecanism:
MLB learns informative mono-modal projections, wheras
MUTAN is explicitly devoted to accurately models bilinear
interactions. Finally, we can notice that the performance
improvement of MUTAN in this enhanced setup is conform
to the performance gap reported in section 4.1, showing that
the beneﬁt of the fusion scheme directly translates for the
whole VQA task.

Finally, we also evaluated an ensemble of 3 models
based on the MUTAN fusion scheme (without MLB), that
we denote as MUTAN (3). This ensemble also outperforms
state-of-the-art results. We can point out that this improve-
ment is reached with is an ensembling of 3 models, which is
smaller than the previous state-of-the-art MLB results con-
taining an ensembling of 7 models.

4.3. Further analysis

Experimental setup In this section, we study the behav-
ior of MUTAN under different conditions. Here, we exam-
ine under different aspects the fusion between q and v with
the Tucker decomposition of tensor T . As we did previ-
ously, we don’t use the attention mechanism in this section.
We only consider a global visual vector, computed as the av-
erage of the 14 × 14 region vectors given by our CNN. We
also don’t use the answer sampling, asking our model to
always predict the most frequent answer of the 10 ground

Figure 4: The improvements given by MUTAN noR over
a model trained with the identity tensor as a fusion operator
between ˜q and ˜v.

truth responses. All the models are trained on the VQA
train split, and the scores are reported on val.

Impact of a plain tensor The goal is to see how important
are all the parameters in the core tensor T c, which model
the correlations between projections of q and v. We train
multiple MUTAN noR, where we ﬁx all projection dimen-
sions to be equal tq = tv = to = t and t ranges from
20 to 220.
In Figure 4, we compare these MUTAN noR
with a model trained with the same projection dimension,
but where T c is replaced by the identity tensor5. One can
see that MUTAN noR gives much better results than iden-
tity tensor, even for very small core tensor dimensions. This
shows that MUTAN noR is able to learn powerful correla-
tions between modalities6.

Impact of rank sparsity We want to study the impact of
introducing the rank constraint in the core tensor T c. We ﬁx
the input dimensions tq = 210 and tv = 210, and vary the
output dimension to for multiple rank constraints R. As we
can see in Figure 5, controlling the rank of slices in T c al-
lows to better model the interactions between the unimodal
spaces. The different colored lines show the behavior of
MUTAN for different values of R. Comparing R = 60 (blue
line) and R = 20 (green line), we see that a lower rank al-
lows to reach higher values of to without overﬁtting. The
number of parameters in the fusion is lower, and the accu-
racy on the val split is higher.

5This is strictly equivalent to MLB [8] without attention. However, we
are fully aware that it takes between 1000 and 2000 dimensions of projec-
tion to be around the operating point of MLB. With our experimental setup,
we just focus on the effect of adding parameters to our fusion scheme.

6Notice that for each t, MUTAN noR has t3 parameters. For instance,

for t = 220, MUTAN adds 10.6M parameters over identity.

(a) Question: Where is the woman ? - Answer: on the elephant

Figure 5: Accuracy on VQA val in function of to. Each
colored dot shows the score of a MUTAN model trained on
train. The yellow labels indicate the number of parameters
in the fusion.

(b) Question: Where is the smoke coming from ? - Answer: train

Figure 7: The original image is shown on the left. The cen-
ter and right images show heatmaps obtained when turning
off all the projections but one, for two different projections.
Each projection focuses on a speciﬁc concept needed to an-
swer the question.

(a) ”Is there”

(b) ”What room is”

(c) ”What is the man”

(d) ”What sport is”

Figure 6: Visualizing the performances of ablated systems
according to the R variables. Full system performance is
denoted in dotted line.

In MUTAN, the vector z that
Qualitative observations
encodes the (image,question) pair is expressed as a sum
over R vectors zr. We want to study the R different la-
tent projections that have been learnt during training, and
assess whether the representations have captured different
semantic properties of inputs. We quantify the differences
between each of the R spaces using the VQA question types.
We ﬁrst train a model on the train split, with R = 20, and
measure its performance on the val set. Then, we set to 0
all of the zr vectors except one, and evaluate this ablated
system on the validation set. In Figure 6, we compare the
full system to the R ablated systems for 4 different ques-

tion types. The dotted line shows the accuracy of the full
system, while the different bars show the accuracy of the
ablated system for each R. Depending on the question type,
we observe 3 different behaviors of the ranks. When the
question type’s answer support is small, we observe that
each rank has learnt enough to reach almost the same ac-
curacy as the global system. This is the case for questions
starting by ”Is there”, whose answer is almost always ”yes”
or ”no”. Other question types require information from all
the latent projections, as in the case of ”What is the man”.
This leads to cases where all projections perform equally
and signiﬁcantly worst when taken individually than when
combined to get the full model. At last, we observe that
speciﬁc projections contribute more than others depending
on the question type. For example, latent variable 16 per-
forms well on ”what room is”, and is less informative to
answer questions starting by ”what sport is”. The opposite
behavior is observed for latent variable 17.

We run the same kind of analysis for the MUTAN fusion
in the attention mechanism. In Figure 7, we show for two
images the different attentions that we obtain when turning
off all the projections but one. For the ﬁrst image, we can
see that a projection focuses on the elephant, while another
focuses on the woman. Both these visual informations are
necessary to answer the question ”Where is the woman ?”.
The same behavior is observed for the second image, where
a projection focuses on the smoke while another gives high
attention to the train.

5. Conclusion

In this paper, we introduced our MUTAN strategy for
the VQA task. Our main contribution is a multimodal fu-
sion between visual and textual information using a bilinear
framework. Our model combines a Tucker decomposition
with a low-rank matrix constraint. It is designed to control
the full bilinear interaction’s complexity. MUTAN factor-
izes the interaction tensor into interpretable elements, and
allows an easy control of the model’s expressiveness. We
also show how the Tucker decomposition framework gener-
alizes the most competitive VQA architectures. MUTAN is
evaluated on the most recent VQA dataset, reaching state-
of-the-art.

References

[1] J. Andreas, M. Rohrbach, T. Darrell, and D. Klein. Learn-
ing to compose neural networks for question answering. In
NAACL HLT 2016, San Diego California, USA, June 12-17,
2016, pages 1545–1554, 2016.

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L.
Zitnick, and D. Parikh. VQA: Visual Question Answering.
In ICCV, 2015.

[3] M. Charikar, K. Chen, and M. Farach-Colton. Finding fre-
In International Colloquium
quent items in data streams.
on Automata, Languages and Programming, pages 693–703,
2002.

[4] K. Cho, B. van Merrienboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder-
decoder approaches. In Eighth Workshop on Syntax, Seman-
tics and Structure in Statistical Translation, EMNLP 2014,
pages 103–111, 2014.

[5] A. Fukui, D. H. Park, D. Yang, A. Rohrbach, T. Dar-
rell, and M. Rohrbach. Multimodal compact bilinear pool-
ing for visual question answering and visual grounding.
arXiv:1606.01847, 2016.

[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015.

[7] J.-H. Kim, S.-W. Lee, D. Kwak, M.-O. Heo, J. Kim, J.-W.
Ha, and B.-T. Zhang. Multimodal Residual Learning for Vi-
sual QA. In NIPS, pages 361–369, 2016.

[8] J.-H. Kim, K.-W. On, J. Kim, J.-W. Ha, and B.-T. Zhang.
Hadamard Product for Low-rank Bilinear Pooling. In 5th In-
ternational Conference on Learning Representations, 2017.
[9] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014.

[10] R. Kiros, R. Salakhutdinov, and R. Zemel. Multimodal neu-
ral language models. In ICML, pages 595–603, 2014.
[11] R. Kiros, Y. Zhu, R. Salakhutdinov, R. S. Zemel, A. Torralba,
R. Urtasun, and S. Fidler. Skip-thought vectors. In NIPS,
pages 3294–3302, 2015.

[12] T. G. Kolda and B. W. Bader. Tensor decompositions and
applications. SIAM Rev., 51(3):455–500, Aug. 2009.
[13] R. Krishna, Y. Zhu, O. Groth, J. Johnson, K. Hata, J. Kravitz,
S. Chen, Y. Kalantidis, L.-J. Li, D. A. Shamma, M. Bern-
stein, and L. Fei-Fei. Visual genome: Connecting language

and vision using crowdsourced dense image annotations.
2016.

[14] R. Li and J. Jia. Visual question answering with question rep-
resentation update (qru). In NIPS, pages 4655–4663. 2016.
[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014.

[16] T.-Y. Lin, A. RoyChowdhury, and S. Maji. Bilinear cnn mod-
els for ﬁne-grained visual recognition. In ICCV, 2015.
[17] J. Lu, J. Yang, D. Batra, and D. Parikh. Hierarchical
question-image co-attention for visual question answering.
In NIPS, pages 289–297, 2016.

[18] L. Ma, Z. Lu, L. Shang, and H. Li. Multimodal convolutional
neural networks for matching image and sentence. In ICCV,
pages 2623–2631, 2015.

[19] M. Malinowski and M. Fritz. Towards a visual turing chal-
lenge. In Learning Semantics (NIPS workshop), December
2014.

[20] M. Malinowski, M. Rohrbach, and M. Fritz. Ask your neu-
rons: A deep learning approach to visual question answering.
arXiv:1605.02697, 2016.

[21] M. Ren, R. Kiros, and R. S. Zemel. Exploring models and
In NIPS, pages 2953–

data for image question answering.
2961, 2015.

[22] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In CVPR, 2016.
[23] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014.

[24] L. R. Tucker. Some mathematical notes on three-mode factor

analysis. Psychometrika, 31(3):279–311, 1966.

[25] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
In CVPR, pages

tell: A neural image caption generator.
3156–3164, 2015.

[26] Q. Wu, P. Wang, C. Shen, A. Dick, and A. van den Hengel.
Ask me anything: free-form visual question answering based
on knowledge from external sources. In CVPR, 2016.
[27] H. Xu and K. Saenko. Ask, attend and answer: Exploring
question-guided spatial attention for visual question answer-
ing. In ECCV, pages 451–466, 2016.

[28] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
In ICML,
image caption generation with visual attention.
pages 2048–2057, 2015.

[29] F. Yan and K. Mikolajczyk. Deep correlation for matching

images and text. In CVPR, June 2015.

[30] Z. Yang, X. He, J. Gao, L. Deng, and A. J. Smola. Stacked
attention networks for image question answering. In CVPR,
pages 21–29, 2016.

[31] Y. Zhu, O. Groth, M. Bernstein, and L. Fei-Fei. Visual7W:

Grounded Question Answering in Images. In CVPR, 2016.

Supplementary material

Preprocessing details

Image As in [5] (MCB) or [8] (MLB), we preprocess the
images before training our VQA models as follow. We load
and rescal the image to 448. It is important to notice that
we keep the proportion. Thus, 448 will be the size of the
smaller edge. Then, we crop the image at the center to have
a region of size 448 × 448. We normalize the image using
the ImageNet normalization. Finally, we feed the image to
a pretrained ResNet-152 and extract the features before the
last Rectiﬁed Linear Unit (ReLU).

Question We use almost the same preprocessing as [5] or
[8] for the questions. We keep the questions which are as-
sociated to the 2000 most occuring answers. We convert the
questions characters to lower case and remove all the ponc-
tuations. We use the space character to split the question
into a sequence of words. Then, we replace all the words
which are not in the vocabulary of our pretrained Skip-
thoughts model by a special ”unknown” word (”UNK”). Fi-
nally, we pad all the sequences of words with zero-padding
to match the maximum sequence length of 26 words. We
use TrimZero as in [8] to avoid the zero values from the
padding.

Optimization details

Algorithm It is important to notice that we use the classi-
cal implementation of Adam 1 with a learning rate of 10−4
unlike in [5] or [8]. In fact, we tried RMSPROP, SGD Nes-
terov and Adam with or without learning rate decay. We
found that Adam without learning rate decay was more con-
venient and lead to the same accuracy.

Batch size During the optimization process, we use a
batch size of 512 for the models without an attention mod-
eling. For the others, we use a batch size of 100, because
the models are more memory consuming.

Early stopping As in [5] and [8], we use early stopping
as a regularizer. During our training process, we save the

model parameters after each epoch. To evaluate our model
on the evaluation server, we chose the best epoch according
to the Open Ended validation accuracy computed on the val
split when available.

As in [5] and [8], for the models trained on the train-
val split, we use the test-dev split as a validation set and
are obliged to submit several times on the evaluation server.
Note that we are limited to 10 submissions per day. In prac-
tice, we submit 3 to 4 times per models for epochs associ-
ated to training accuracies between 63% to 70%.

Ensemble details

In table 3, we report several single models which com-
pose our two ensembles. MUTAN(3) is made of a MUTAN
trained on the trainval split with 2 glimpses, an other MU-
TAN with 3 glimpses and a third MUTAN with 2 glimpses
trained on the trainval split with the visual genome data
augmentation. All three have been trained with the same
hyper-parameters besides the number of glimpses.

MUTAN(5) is made of the three same MUTAN models
of MUTAN(3) and two MLB models which can be viewed
as a special case of our Multimodal Tucker Fusion. The
ﬁrst MLB has 2 glimpses and was trained on the trainval
split. It has been made available by the authors of [8] 2. The
second MLB has 4 glimpses and was trained by ourself on
the trainval split with the visual genome data augmentation.
The ﬁnal results of both ensembles are obtained by aver-
aging the features extracted before the ﬁnal Softmax layer
of all their models.

Scores details

In table 3, we provide the scores for each answer type
processed on the val and test-dev splits. In table 4, we pro-
vide the same scores for test-dev and test-standard.

*Equal contribution
1https://github.com/torch/optim/blob/master/

adam.lua

master/model

2https://github.com/jnhwkim/MulLowBiVQA/tree/

10

test-dev

val

Model
Concat
MCB
MLB
MUTAN noR
MUTAN
MUTAN+MLB

Θ
8.9
32
7.7
4.9
4.9
17.5

Y/N
79.25
80.81
82.02
81.44
81.45
82.29

No.
36.18
35.91
36.61
36.42
37.32
37.27

Other
46.69
46.43
46.65
46.86
47.17
48.23

All
58.91
59.40
60.08
59.92
60.17
61.02

Y/N
80.01
81.61
82.36
82.28
82.07
82.59

No.
33.72
33.94
34.35
35.07
35.16
35.21

Other
45.46
45.14
45.54
45.48
46.03
46.84

All
56.92
57.39
57.91
57.94
58.16
58.76

Table 3: Comparison between different fusion under the same setup on the test-dev split. Θ indicates the number of learnable
parameters (in million).

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Y/N
80.87
78.39
79.3
81.1
81.01
82.28
79.7
83.4
84.54
84.57
85.14

test-dev

test-std

No.
37.32
36.45
36.6
38.6
38.42
38.82
38.7
39.8
39.21
39.32
39.81

Other
43.12
46.28
46.1
45.5
45.23
49.25
51.7
58.5
57.81
57.36
58.52

All
57.99
58.39
58.7
59.4
59.17
61.68
61.8
66.7
66.77
67.03
67.42

Y/N
80.0
78.24
-
-
81.07
82.39
-
83.2
84.61
84.39
84.91

No.
37.53
36.27
-
-
37.12
38.23
-
39.5
39.07
38.70
39.79

Other
43.48
46.32
-
-
45.83
49.41
-
58.0
57.79
58.20
58.35

All
58.24
58.43
58.9
59.4
59.44
61.84
62.1
66.5
66.89
66.96
67.36

Table 4: MUTAN performance comparison on the test-dev and test-standard splits VQA dataset; (n) for an ensemble of n
models.

MUTAN: Multimodal Tucker Fusion for Visual Question Answering

Hedi Ben-younes 1,2 *

R´emi Cadene 1*

Matthieu Cord 1

Nicolas Thome 3

1 Sorbonne Universit´es, UPMC Univ Paris 06, CNRS, LIP6 UMR 7606, 4 place Jussieu, 75005 Paris
2 Heuritech, 248 rue du Faubourg Saint-Antoine, 75012 Paris
3 Conservatoire National des Arts et M´etiers
hedi.ben-younes@lip6.fr, remi.cadene@lip6.fr, matthieu.cord@lip6.fr, nicolas.thome@cnam.fr

7
1
0
2
 
y
a
M
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
6
7
6
6
0
.
5
0
7
1
:
v
i
X
r
a

Abstract

We introduce MUTAN, a multimodal

Bilinear models provide an appealing framework for
mixing and merging information in Visual Question An-
swering (VQA) tasks. They help to learn high level asso-
ciations between question meaning and visual concepts in
the image, but they suffer from huge dimensionality issues.
tensor-based
Tucker decomposition to efﬁciently parametrize bilinear in-
teractions between visual and textual representations. Ad-
ditionally to the Tucker framework, we design a low-rank
matrix-based decomposition to explicitly constrain the in-
teraction rank. With MUTAN, we control the complexity
of the merging scheme while keeping nice interpretable fu-
sion relations. We show how our MUTAN model generalizes
some of the latest VQA architectures, providing state-of-the-
art results.

1. Introduction

Multimodal representation learning for text and image
has been extensively studied in recent years. Currently, the
most popular task is certainly Visual Question Answering
(VQA) [19, 2]. VQA is a complex multimodal task which
aims at answering a question about an image. A speciﬁc
benchmark has been ﬁrst proposed [19], and large scale
datasets have been recently collected [21, 2, 31], enabeling
the development of more powerful models.

To solve this problem, precise image and text models are
required and, most importantly, high level interactions be-
tween these two modalities have to be carefully encoded
into the model in order to provide the correct answer. This
projection from the unimodal spaces to a multimodal one
is supposed to extract and model the relevant correlations
between the two spaces. Besides, the model must have the
ability to understand the full scene, focus its attention on the
relevant visual regions and discard the useless information
regarding the question.

*Equal contribution

Figure 1: The proposed MUTAN model uses a Tucker de-
composition of the image/question correlation tensor, which
enables modeling rich and accurate multi-modal interac-
tions. For the same input image, we show the result of the
MUTAN fusion process when integrated into an attention
mechanism [28]: we can see that the regions with larger at-
tention scores (in red) indicate a very ﬁne understanding of
the image and question contents, enabling MUTAN to prop-
erly answer the question (see detailed maps in experiments
section).

Bilinear models are powerful approaches for the fusion
problem in VQA because they encode full second-order
interactions. They currently hold state-of the-art perfor-
mances [5, 8]. The main issue with these bilinear models
is related to the number of parameters, which quickly be-
comes intractable with respect to the input and output di-
mensions. Therefore, current bilinear approaches must be
simpliﬁed or approximated by reducing the model complex-
ity: in [5], the authors sacriﬁce trainability by using a hand-
crafted multi-modal projection, while a global tensor rank
constraint is applied in [8], reducing correlations to a sim-
ple element-wise product.

In this work, we introduce a new architecture called MU-
TAN (Figure 2), which focuses on modeling ﬁne and rich
interactions between image and textual modalities. Our ap-
proach is based on a Tucker decomposition [24] of the cor-

1

relation tensor, which is able to represent full bilinear inter-
actions, while maintaining the size of the model tractable.
The resulting scheme allows us to explicitly control the
model complexity, and to choose an accurate and inter-
pretable repartition of the learnable parameters.

In the next section, we provide more details on related
VQA works and highlight our contributions. The MUTAN
fusion model, based on a Tucker decomposition, is pre-
sented in section 3, and successful experiments are reported
in section 4.

2. Related work

The main task in multimodal visual and textual analy-
sis aims at learning an alignment between feature spaces
[29, 23, 18]. Thus, the recent task of image captioning aims
at generating linguistic descriptions of images [25, 10, 28].
Instead of explicitly learning an alignment between two
spaces, the goal of VQA [2, 19] is to merge both modali-
ties in order to decide which answer is correct. This prob-
lem requires modeling very precise correlations between the
image and the question representations.
Attention. Attention mechanisms [28] have been a real
breakthrough in multimodal systems, and are fundamental
for VQA models to obtain the best possible results. [30]
propose to stack multiple question-guided attention mecha-
nisms, each one looking at different regions of the image.

[22] and [14] extract bounding boxes in the image and
score each one of them according to the textual features. In
[17], word features are aggregated with an attention mech-
anism guided by the image regions and, equivalently, the
region visual features are aggregated into one global image
embedding. This co-attentional framework uses concatena-
tions and sum pooling to merge all the components. On the
contrary, [5] and [8] developed their own fusion methods
that they use for global and attention-based strategies.

In this paper, we use the attentional modeling, proposed
in [5], as a tool that we integrate in our new fusion strategy
for both the global fusion and the attentional modeling.
Fusion strategies. Early works have modeled interactions
between multiple modalities with ﬁrst order interactions.
The IMG+BOW model in [21] is the ﬁrst to use a con-
catenation to merge a global image representation with a
question embedding, obtained by summing all the learnt
word embeddings from the question. In [22], (image, ques-
tion, answer) triplets are scored in an attentional framework.
Each local feature is given a score corresponding to its sim-
ilarity with textual features. These scores are used to weight
region multimodal embeddings, obtained from a concatena-
tion between the region’s visual features and the textual em-
beddings. The hierarchical co-attention network [17], after
extracting multiple textual and visual features, merges them
with concatenations and sums.

interactions between two embedding spaces. Bilinear in-
teractions have shown great success in deep learning for
ﬁne-grained classiﬁcation [16], and Multimodal language
modeling [10]. In VQA, a simple element-wise product be-
[7] also uses
tween the two vectors is performed in [2].
an element-wise product in a more complex iterative global
merging scheme. In [14], they use the element-wise product
aggregation in an attentional framework. To go deeper in
bilinear interactions, Multimodal Compact Bilinear pooling
(MCB) [5] uses an outer product q⊗v between visual v and
textual q embeddings. The count-sketch projection [3] Ψ is
used to project q⊗v on a lower dimensional space. Interest-
ingly, nice count-sketch properties are capitalized to com-
pute the projection without having to explicitly compute
the outer product. However, interaction parameters in MCB
are ﬁxed by the count-sketch projection (randomly chosen
in {0; −1; 1}), limiting its expressive power for modeling
complex interactions between image and questions. In con-
trast, our approach is able to model rich second order inter-
action with learned parameters.

In the recent Multimodal Low-rank Bilinear (MLB)
pooling work [8], full bilinear interactions between im-
age and question spaces are parametrized by a tensor.
Again, to limit the number of free parameters, this ten-
sor is constrained to be of low rank r. The MLB strategy
reaches state-of-the-art performances on the well-known
VQA database [2]. Despite these impressive results, the
low rank tensor structure is equivalent to a projection of
both visual and question representations into a common
r-dimensional space, and to compute simple element-wise
product interactions in this space. MLB is thus essentially
designed to learn a powerful mono-modal embedding for
text and image modalities, but relies on a simple fusion
scheme in this space.

In this work, we introduce MUTAN, a multimodal fusion
scheme based on bilinear interactions between modalities.
To control the number of model parameters, MUTAN re-
duces the size of the mono-modal embeddings, while mod-
eling their interaction as accurately as possible with a full
bilinear fusion scheme. Our submission therefore encom-
passes the following contributions:

– New fusion scheme for VQA relying on a Tucker
tensor-based decomposition, consisting in a factorization
into three matrices and a core tensor. We show that the MU-
TAN fusion scheme generalizes the latest bilinear models,
i.e. MCB [5] and MLB [8], while having more expressive
power.

– Additional structured sparsity constraint the core ten-
sor to further control the number of model parameters.
This acts as a regularizer during training and prevents over-
ﬁtting, giving us more ﬂexibility to adjust the input/output
projections.

Second order models are a more powerful way to model

– State-of-the-art results on the most widely used dataset

Figure 2: MUTAN fusion scheme for global Visual QA. The prediction is modeled as a bilinear interaction between visual
and linguistic features, parametrized by the tensor T . In MUTAN, we factorise the tensor T using a Tucker decomposition,
resulting in an architecture with three intra-modal matrices Wq, Wv and Wo, and a smaller tensor T c. The complexity of
T c is controlled via a structured sparsity constraint on the slice matrices of the tensor.

for Visual QA [2]. We also show that MUTAN outperforms
MCB [5] and MLB [8] in the same setting, and that perfor-
mances can be further improved when combined with MLB,
validating the complementarity potential between the two
approaches.

3. MUTAN Model

Our method deals with the problem of Visual Question
Answering (VQA). In VQA, one is given a question q ∈ Q
about an image v ∈ I, and the goal is to provide a mean-
ingful answer. During training, we aim at learning a model
such that the predicted answer ˆa matches the correct one a(cid:63).
More formally, denoting as Θ the whole set of parameters
of the model, the predicted output ˆa can be written as:

ˆa = arg max
a∈A

pΘ (a|v, q)

(1)

The general architecture of the proposed approach is
shown in Figure 2. As commonly done in VQA, images
v and questions q are ﬁrstly embedded into vectors and
the output is represented as a classiﬁcation vector y . In
this work, we use a fully convolutional neural network [6]
(ResNet-152) to describe the image content, and a GRU re-
current network [11, 4] for the question, yielding represen-
tations v ∈ Rdv for the image and q ∈ Rdq for the question.
Vision and language representations v and q are then fused
using the operator T (explained below) to produce a vector
y, providing (through a softmax function) the ﬁnal answer
in Eq. (1). This global merging scheme is also embedded
into a visual attention-based mechanism [8] to provide our
ﬁnal MUTAN architecture.

Bilinear models [5, 8] are recent powerful solutions to
the fusion problem, since they encode fully-parametrized
bilinear interactions between the vectors q and v:

y = (T ×1 q) ×2 v

(2)

their

bilinear

appealing modeling power,

with the full tensor T ∈ Rdq×dv×|A|, and the operator ×i
designing the i-mode product between a tensor and a matrix
(here a vector).
Despite
fully-
become
parametrized
intractable in VQA, because the size of the full tensor
is prohibitive using common dimensions for textual, visual
and output spaces. For example, with dv ≈ dq ≈ 2048 and
|A| ≈ 2000, the number of free parameters in the tensor
T is ∼ 1010. Such a huge number of free parameters
is a problem both for learning and for GPU memory
consumption1.

interactions

quickly

In MUTAN, we factorize the full tensor T using a
Tucker decomposition. We also propose to complete our
decomposition by structuring the second tensor T c (see
gray box in Fig. 2) in order to keep ﬂexibility over the in-
put/output dimensions while keeping the number of param-
eters tractable.

3.1. Tucker decomposition

The Tucker decomposition [24] of a 3-way tensor
T ∈ Rdq×dv×|A| expresses T as a tensor product between
factor matrices Wq, Wv and Wo, and a core tensor T c in
such a way that:

T = ((T c ×1 Wq) ×2 Wv) ×3 Wo

(3)

Fusion and Bilinear models The issue of merging visual
and linguistic information is crucial in VQA. Complex and
high-level interactions between textual meaning in the ques-
tion and visual concepts in the image have to be extracted
to provide a meaningful answer.

with Wq ∈ Rdq×tq , Wv ∈ Rdv×tv and Wo ∈ R|A|×to,
and T c ∈ Rtq×tv×to. Interestingly, Eq. (3) states that the

1A tensor with 8 billion ﬂoat32 scalars approximately needs 32Go to

be stored, while top-grade GPUs hold about 24Go each.

weights in T are functions of a restricted number of param-
eters ∀i ∈ [1, dq], j ∈ [1, dv], k ∈ [1, do]:
T [i, j, k] =

T c[l, m, n]Wq[i, l]Wv[j, m]Wo[k, n]

(cid:88)

l∈[1,tq],m∈[1,tv],n∈[1,to]

T is usually summarized as T =
.
(cid:75)
A comprehensive discussion on Tucker decomposition and
tensor analysis may be found in [12].

T c; Wq, Wv, Wo

(cid:74)

3.2. Multimodal Tucker Fusion

As we parametrize the weights of the tensor T with its
Tucker decomposition of the Eq. (3), we can rewrite Eq. (2)
as follows:

y = (cid:0)(cid:0)T c ×1

(cid:0)q(cid:62)Wq

(cid:1)(cid:1) ×2

(cid:0)v(cid:62)Wv

(cid:1)(cid:1) ×3 Wo

(4)

This is strictly equivalent to encode a full bilinear interac-
tion of projections of q and v into a latent pair representation
z, and to use this latent code to predict the correct answer.
If we deﬁne ˜q = q(cid:62)Wq ∈ Rtq and ˜v = v(cid:62)Wv ∈ Rtv , we
have:

z = (T c ×1 ˜q) ×2 ˜v ∈ Rto

(5)

z is projected into the prediction space y = z(cid:62)Wo ∈ R|A|
and p = softmax(y).
In our experiments, we use non-
linearities ˜q = tanh(q(cid:62)Wq) and ˜v = tanh(v(cid:62)Wv) in
the fusion, as in [8], providing slightly better results. The
multimodal Tucker fusion is depicted in Figure 2.

Interpretation Using the Tucker decomposition, we have
separated T into four components, each having a speciﬁc
role in the modeling. Matrices Wq and Wv project the
question and the image vectors into spaces of respective di-
mensions tq and tv. These dimensions directly impact the
modeling complexity that will be allowed for each modal-
ity. The higher tq (resp.
tv) will be, the more complex
image) modeling will be. Tensor T c
the question (resp.
is used to model interactions between ˜q and ˜v. It learns a
projection from all the correlations ˜q[i]˜v[j] to a vector z of
size to. This dimension controls the complexity allowed for
the interactions between modalities. Finally, the matrix Wo
scores this pair embedding z for each class in A.

3.3. Tensor sparsity

To further balance between expressivity and complexity
of the interactions modeling, we introduce a structured spar-
sity constraint based on the rank of the slice matrices in T c.
When we perform the to bilinear combinations between ˜q
and ˜v of Eq. (5), each dimension k ∈
in z can be
written as:

(cid:74)
z[k] = ˜q(cid:62)T c[:, :, k]˜v
The correlations between elements of ˜q and ˜v are weighted
by the parameters of T c[:, :, k]. We might beneﬁt from the

1, to

(6)

(cid:75)

introduction of a structure in each of these slices. This struc-
ture can be expressed in terms of rank constraints on the
slices of T c. We impose the rank of each slice to be equal
to a constant R. Thus we express each slice T c[:, :, k] as a
sum of R rank one matrices:

with mk

r ∈ Rtq and nk

r ∈ Rtv Eq. (6) becomes:

T c[:, :, k] =

mk

r ⊗ nk(cid:62)

r

R
(cid:88)

r=1

z[k] =

(cid:0)˜q(cid:62)mk

(cid:1) (cid:0)˜v(cid:62)nk

(cid:1)

r

r

R
(cid:88)

r=1

We can deﬁne R matrices Mr
Nr ∈ Rtv × to) such as ∀k ∈
(resp. Nr[:, k] = nk
then be written as:

∈
(resp.
, Mr[:, k] = mk
1, do
r
r ). The structured sparsity on T c can

Rtq × to

(cid:74)

(cid:75)

R
(cid:88)

zr

z =

r=1
zr = (˜q(cid:62)Mr) ∗ (˜v(cid:62)Nr)

(7)

(8)

(9)

(10)

Interpretation Adding this rank constraint on T c leads
to expressing the output vector z as a sum over R vectors
zr. To obtain each of these vectors, we project ˜q and ˜v
into a common space and merge them with an elementwise
product. Thus, we can interpret z as modeling an OR in-
teraction over multiple AND gates (R in MUTAN) between
projections of ˜q and ˜v. z[k] can described in terms of logi-
cal operators as:

zr[k] = (cid:0)˜q similar to mk

r

(cid:1) AND (cid:0)˜v similar to nk

z[k] = z1[k] OR ... OR zR[k]

r

(cid:1) (11)
(12)

This decomposition gives a very clear insight of how the
fusion is carried out in our MUTAN model. In our experi-
ments, we will show how different r’s in
behave, de-
pending on the type of question. We will exhibit some cases
where some r’s specialize over speciﬁc question types.

1, R
(cid:74)

(cid:75)

3.4. Model Uniﬁcation and Discussion

In this subsection, we show how two state of the art
models, namely Multimodal Low-rank bilinear pooling
[8] (MLB) and Multimodal Compact Bilinear pooling [5]
(MCB), can be seen as special cases of our Multimodal
Tucker Fusion. Each of these models use a different type
of bilinear interaction between q and v, hence instantiating
a speciﬁc parametrization of the weight tensor T . These
parameterizations actually consist in a Tucker decomposi-
tion with speciﬁc constraints on the elements T c, Wq, Wv
and Wo. More importantly, when we cast MCB and MLB

(a) MCB

(b) MLB

(c) MUTAN

Figure 3: Tensor design strategies. (a) MCB: Wq and Wv are ﬁxed diagonal matrices, T c is a sparse ﬁxed tensor, only the
output factor matrix Wo is learnt; (b) MLB: the 3 factor matrices are learnt but the core tensor is T c set to identity; (c) MU-
TAN: Wq, Wv, Wo and T c are learnt. The full bilinear interaction T c is structured with a low-rank (R) decomposition.

into the framework of Tucker decompositions, we show that
the structural constraints imposed by these two models state
that some parameters are ﬁxed, while they are free to be
learnt in our full Tucker fusion. This is illustrated in Fig-
ure 3. We show in color the learnt parameters.

3.4.1 Multimodal Compact Bilinear (MCB)

q

q

v

v

and W mcb

= Diag (sq) and W mcb

We can show that the Multimodal Compact Bilinear pool-
ing [5] can be written as a bilinear model where the weight
tensor T mcb is decomposed into its Tucker decomposition,
with speciﬁc structures on the decompositions’ elements.
The intramodal projection matrices W mcb
are
diagonal matrices where the non-zero coefﬁcients take their
values in {−1; 1}: W mcb
=
Diag (sv), where sq ∈ Rdq and sv ∈ Rdv are random vec-
tors sampled at the instanciation of the model but kept ﬁxed
afterwards. The core tensor T c is sparse and its values fol-
low the rule: T mcb
[i, j, k] = 1 if h(i, j) = k (and 0 else),
where h :
×
is randomly sampled
(cid:75)
at the beginning of training and no longer changed.

(cid:74)
As was noticed in [8], all the learnt parameters in MCB
are located after the fusion. The combinations of dimen-
sions from q and from v that are supposed to interact with
each other are randomly sampled beforehand (through h).
To compensate for the fact of ﬁxing the parameters sq, sv
and h, they must set a very high to dimension (typically
16,000). This set of combinations is taken as a feature vec-
tor for classiﬁcation.

1, dv

1, do

1, dq

→

(cid:74)

(cid:74)

(cid:75)

(cid:75)

c

3.4.2 Multimodal Low-rank Bilinear (MLB)

The low-rank bilinear interaction corresponds to a canoni-
cal decomposition of the tensor T such as its rank is equal
to R. It is well-known that the low-rank decomposition of a
tensor is a special case of the Tucker decomposition, such
as T mlb =
where tq = tv = to = R.
Two major constraints are imposed when reducing Tucker
decomposition to low-rank decomposition. First, the three
dimensions tq, tv and to are structurally set to be equal. The

I R; Wq, Wv, Wo
(cid:74)

(cid:75)

dimension of the space in which a modality is projected (tq
and tv) quantiﬁes the model’s complexity. Our intuition is
that since the image and language spaces are different, they
may require to be modeled with different levels of complex-
ity, hence different projection dimensions. The second con-
straint is on the core tensor, which is set to be the identity.
A dimension k of ˜qmlb is only allowed to interact with the
same dimension of ˜vmlb, which might be restrictive. We
will experimentally show the beneﬁcial effect of removing
these constraints.

We would like to point out the differences between MLB
and the structured sparsity per slice presented in 3.3. There
are two main differences between the two approaches. First,
our rank reduction is made on the core tensor of the Tucker
decomposition T c, while in MLB they constrain the rank
of the global tensor T . This lets us keep different dimen-
sionalities for the projected vectors ˜q and ˜v. The second
difference is we do not reduce the tensor on the third mode,
but only on the ﬁrst two modes corresponding to the image
and question modalities. The implicit parameters in T c are
correlated inside a mode-3 slice but independent between
the slices.

4. Experiments

VQA Dataset The VQA dataset [2] is built over images
of MSCOCO [15], where each image was manually anno-
tated with 3 questions. Each one of these questions is then
answered by 10 annotators, yielding a list of 10 ground-
truth answers. The dataset is composed of 248,349 pairs
(image, question) for the training set, 121,512 for valida-
tion and 244,302 for testing. The ground truth answers are
given for the train and val splits, and one must submit their
predictions to an evaluation server to get the scores on test-
std split. Note that the evaluation server makes it possible
to submit multiple models per day on test-dev, which is a
subsample of test-std. The whole submission on test-std
can only be done ﬁve times. We focus on the open-ended
task, where the ground truth answers are given in free natu-
ral language phrases. This dataset comes with its evaluation

metric, presented in [2]. When the model predicts an an-
swer for a visual question, the VQA accuracy is given by:

(cid:18)

min

1,

# humans that provided that answer
3

(cid:19)

(13)

If the predicted answer appears at least 3 times in the ground
truth answers, the accuracy for this example is considered
to be 1. Intuitively, this metrics takes into account the con-
sensus between annotators.

MUTAN Setup We ﬁrst resize our images to be of size
(448, 448). We use ResNet152 [6] as our visual feature ex-
tractor, which produces feature maps of size 14×14×2048.
We keep the 14 × 14 tiling when attention models are used
(section 4.2). Otherwise, the image is represented as the
average of 14 × 14 vectors at the output of the CNN (sec-
tion 4.1). To represent questions, we use a GRU [4] ini-
tialized with the parameters of a pretrained Skip-thoughts
model [11]. Each model is trained to predict the most com-
mon answer in the 10 annotated responses. |A| is ﬁxed to
the 2000 most frequent answers as in [8], and we train our
model using ADAM [9] (see details in supplementary ma-
terial).

4.1. Fusion Scheme Comparison

To point out the performance variation due to the fusion
modules, we ﬁrst compare MUTAN to state-of-the-art bi-
linear models, under the same experimental framework. We
do not use attention models here. Several merging scheme
results are presented in Table 1: Concat denotes a baseline
where v and q are merged by simply concatenating them.
For MCB [5] and MLB [8], we use the available code 2 3
to train models on the same visual and linguistic features.
We choose an output dimension of 16,000 for MCB and
1,200 for MLB, as indicated in the respective articles. MU-
TAN noR designates the MUTAN model without the rank
sparsity constraint. We choose all the projection dimensions
to be equal to each other: tq = tv = to = 160. These
parameters are chosen considering the results on val split.
Finally, our MUTAN 4 designates the full Tucker decompo-
sition with rank sparsity strategy. We choose all the projec-
tion dimensions to be equal to each other: tq = tv = to =
360, and a rank R = 10. These parameters were chosen
so that MUTAN and MUTAN noR have the same number
of parameters. As we can see in Table 1, MUTAN noR per-
forms better than MLB, which validates the fact that model-
ing full bilinear interactions between low dimensional pro-
jections yields a more powerful representation than having
strong mono-modal transformations with a simple fusion

2https://github.com/jnhwkim/cbp
3https://github.com/jnhwkim/MulLowBiVQA
4https://github.com/cadene/vqa.pytorch

test-dev

val

Y/N No. Other All All
Model
79.25 36.18 46.69 58.91 56.92
Concat
80.81 35.91 46.43 59.40 57.39
MCB
82.02 36.61 46.65 60.08 57.91
MLB
81.44 36.42 46.86 59.92 57.94
MUTAN noR
81.45 37.32 47.17 60.17 58.16
MUTAN
MUTAN+MLB 17.5 82.29 37.27 48.23 61.02 58.76

Θ
8.9
32
7.7
4.9
4.9

Table 1: Comparison between different fusion under the
same setup on the test-dev split. Θ indicates the number of
learnable parameters (in million).

scheme (element-wise product). With the structured spar-
sity, MUTAN obtains the best results, validating our intu-
ition of having a nice tradeoff between the projection di-
mensions and a reasonable number of useful bilinear inter-
action parameters in the core tensor T c. Finally, a naive
late fusion MUTAN+MLB further improves performances
(about +1pt on test-dev). It validates the complementarity
between the two types of tensor decomposition.

4.2. State-of-the-art comparison

To compare the performance of the proposed approach
to state-of-the-art works, we associate the MUTAN fusion
with recently introduced techniques for VQA, which are de-
scribed below.

Attention mechanism We use the same kind of multi-
glimpse attention mechanisms as the ones presented in [5]
and [8]. We use MUTAN to score the region embeddings
according to the question vector, and compute a global vi-
sual vector as a sum pooling weighted by these scores.

Answer sampling (Ans. Sampl.) Each (image,question)
pair in the VQA dataset is annotated with 10 ground truth
answers, corresponding to the different annotators. In those
10, we keep only the answers occuring more than 3 times,
and randomly choose the one we ask our model to predict.

Data augmentation (DAVG) We use Visual Genome
[13] as a data augmentation to train our model, keeping only
the example whose answer is in our vocabulary. This triples
the size of our training set.

Ensembling MUTAN (5) consist in an ensemble of ﬁve
models trained on train+val splits. We use 3 attentional
MUTAN architectures with one trained with additional Vi-
sual Genome data. The 2 other models are instances of
MLB, which can be seen as a special case of MUTAN. De-
tails about the ensembling will be provided in the supple-
mentary material.

Results State-of-the-art comparison results are gathered
in Table 2. Firstly, we can notice that bilinear models, i.e.

test-dev

test-
std
All

36.6
38.6

58.7
59.4

Y/N No. Other All
80.87 37.32 43.12 57.99 58.24
78.39 36.45 46.28 58.39 58.43
58.9
46.1
79.3
81.1
59.4
45.5
81.01 38.42 45.23 59.17 59.44
82.28 38.82 49.25 61.68 61.84
62.1
51.7
79.7
83.4
66.5
58.5
84.57 39.21 57.81 66.77 66.89
84.54 39.32 57.36 67.03 66.96
85.14 39.81 58.52 67.42 67.36

61.8
66.7

38.7
39.8

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Table 2: MUTAN performance comparison on the test-dev
and test-standard splits VQA dataset; (n) for an ensemble
of n models.

MCB [5] and MLB [8] have a strong edge over other meth-
ods with a less powerful fusion scheme.

MUTAN outperforms all the previous methods with a
large margin on test-dev and test-std. This validates the rele-
vance of the proposed fusion scheme, which models precise
interactions between modalities. The good performances of
MUTAN (5) also conﬁrms its complementarity with MLB,
already seen in section 4.1 without attention mecanism:
MLB learns informative mono-modal projections, wheras
MUTAN is explicitly devoted to accurately models bilinear
interactions. Finally, we can notice that the performance
improvement of MUTAN in this enhanced setup is conform
to the performance gap reported in section 4.1, showing that
the beneﬁt of the fusion scheme directly translates for the
whole VQA task.

Finally, we also evaluated an ensemble of 3 models
based on the MUTAN fusion scheme (without MLB), that
we denote as MUTAN (3). This ensemble also outperforms
state-of-the-art results. We can point out that this improve-
ment is reached with is an ensembling of 3 models, which is
smaller than the previous state-of-the-art MLB results con-
taining an ensembling of 7 models.

4.3. Further analysis

Experimental setup In this section, we study the behav-
ior of MUTAN under different conditions. Here, we exam-
ine under different aspects the fusion between q and v with
the Tucker decomposition of tensor T . As we did previ-
ously, we don’t use the attention mechanism in this section.
We only consider a global visual vector, computed as the av-
erage of the 14 × 14 region vectors given by our CNN. We
also don’t use the answer sampling, asking our model to
always predict the most frequent answer of the 10 ground

Figure 4: The improvements given by MUTAN noR over
a model trained with the identity tensor as a fusion operator
between ˜q and ˜v.

truth responses. All the models are trained on the VQA
train split, and the scores are reported on val.

Impact of a plain tensor The goal is to see how important
are all the parameters in the core tensor T c, which model
the correlations between projections of q and v. We train
multiple MUTAN noR, where we ﬁx all projection dimen-
sions to be equal tq = tv = to = t and t ranges from
20 to 220.
In Figure 4, we compare these MUTAN noR
with a model trained with the same projection dimension,
but where T c is replaced by the identity tensor5. One can
see that MUTAN noR gives much better results than iden-
tity tensor, even for very small core tensor dimensions. This
shows that MUTAN noR is able to learn powerful correla-
tions between modalities6.

Impact of rank sparsity We want to study the impact of
introducing the rank constraint in the core tensor T c. We ﬁx
the input dimensions tq = 210 and tv = 210, and vary the
output dimension to for multiple rank constraints R. As we
can see in Figure 5, controlling the rank of slices in T c al-
lows to better model the interactions between the unimodal
spaces. The different colored lines show the behavior of
MUTAN for different values of R. Comparing R = 60 (blue
line) and R = 20 (green line), we see that a lower rank al-
lows to reach higher values of to without overﬁtting. The
number of parameters in the fusion is lower, and the accu-
racy on the val split is higher.

5This is strictly equivalent to MLB [8] without attention. However, we
are fully aware that it takes between 1000 and 2000 dimensions of projec-
tion to be around the operating point of MLB. With our experimental setup,
we just focus on the effect of adding parameters to our fusion scheme.

6Notice that for each t, MUTAN noR has t3 parameters. For instance,

for t = 220, MUTAN adds 10.6M parameters over identity.

(a) Question: Where is the woman ? - Answer: on the elephant

Figure 5: Accuracy on VQA val in function of to. Each
colored dot shows the score of a MUTAN model trained on
train. The yellow labels indicate the number of parameters
in the fusion.

(b) Question: Where is the smoke coming from ? - Answer: train

Figure 7: The original image is shown on the left. The cen-
ter and right images show heatmaps obtained when turning
off all the projections but one, for two different projections.
Each projection focuses on a speciﬁc concept needed to an-
swer the question.

(a) ”Is there”

(b) ”What room is”

(c) ”What is the man”

(d) ”What sport is”

Figure 6: Visualizing the performances of ablated systems
according to the R variables. Full system performance is
denoted in dotted line.

In MUTAN, the vector z that
Qualitative observations
encodes the (image,question) pair is expressed as a sum
over R vectors zr. We want to study the R different la-
tent projections that have been learnt during training, and
assess whether the representations have captured different
semantic properties of inputs. We quantify the differences
between each of the R spaces using the VQA question types.
We ﬁrst train a model on the train split, with R = 20, and
measure its performance on the val set. Then, we set to 0
all of the zr vectors except one, and evaluate this ablated
system on the validation set. In Figure 6, we compare the
full system to the R ablated systems for 4 different ques-

tion types. The dotted line shows the accuracy of the full
system, while the different bars show the accuracy of the
ablated system for each R. Depending on the question type,
we observe 3 different behaviors of the ranks. When the
question type’s answer support is small, we observe that
each rank has learnt enough to reach almost the same ac-
curacy as the global system. This is the case for questions
starting by ”Is there”, whose answer is almost always ”yes”
or ”no”. Other question types require information from all
the latent projections, as in the case of ”What is the man”.
This leads to cases where all projections perform equally
and signiﬁcantly worst when taken individually than when
combined to get the full model. At last, we observe that
speciﬁc projections contribute more than others depending
on the question type. For example, latent variable 16 per-
forms well on ”what room is”, and is less informative to
answer questions starting by ”what sport is”. The opposite
behavior is observed for latent variable 17.

We run the same kind of analysis for the MUTAN fusion
in the attention mechanism. In Figure 7, we show for two
images the different attentions that we obtain when turning
off all the projections but one. For the ﬁrst image, we can
see that a projection focuses on the elephant, while another
focuses on the woman. Both these visual informations are
necessary to answer the question ”Where is the woman ?”.
The same behavior is observed for the second image, where
a projection focuses on the smoke while another gives high
attention to the train.

5. Conclusion

In this paper, we introduced our MUTAN strategy for
the VQA task. Our main contribution is a multimodal fu-
sion between visual and textual information using a bilinear
framework. Our model combines a Tucker decomposition
with a low-rank matrix constraint. It is designed to control
the full bilinear interaction’s complexity. MUTAN factor-
izes the interaction tensor into interpretable elements, and
allows an easy control of the model’s expressiveness. We
also show how the Tucker decomposition framework gener-
alizes the most competitive VQA architectures. MUTAN is
evaluated on the most recent VQA dataset, reaching state-
of-the-art.

References

[1] J. Andreas, M. Rohrbach, T. Darrell, and D. Klein. Learn-
ing to compose neural networks for question answering. In
NAACL HLT 2016, San Diego California, USA, June 12-17,
2016, pages 1545–1554, 2016.

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L.
Zitnick, and D. Parikh. VQA: Visual Question Answering.
In ICCV, 2015.

[3] M. Charikar, K. Chen, and M. Farach-Colton. Finding fre-
In International Colloquium
quent items in data streams.
on Automata, Languages and Programming, pages 693–703,
2002.

[4] K. Cho, B. van Merrienboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder-
decoder approaches. In Eighth Workshop on Syntax, Seman-
tics and Structure in Statistical Translation, EMNLP 2014,
pages 103–111, 2014.

[5] A. Fukui, D. H. Park, D. Yang, A. Rohrbach, T. Dar-
rell, and M. Rohrbach. Multimodal compact bilinear pool-
ing for visual question answering and visual grounding.
arXiv:1606.01847, 2016.

[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015.

[7] J.-H. Kim, S.-W. Lee, D. Kwak, M.-O. Heo, J. Kim, J.-W.
Ha, and B.-T. Zhang. Multimodal Residual Learning for Vi-
sual QA. In NIPS, pages 361–369, 2016.

[8] J.-H. Kim, K.-W. On, J. Kim, J.-W. Ha, and B.-T. Zhang.
Hadamard Product for Low-rank Bilinear Pooling. In 5th In-
ternational Conference on Learning Representations, 2017.
[9] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014.

[10] R. Kiros, R. Salakhutdinov, and R. Zemel. Multimodal neu-
ral language models. In ICML, pages 595–603, 2014.
[11] R. Kiros, Y. Zhu, R. Salakhutdinov, R. S. Zemel, A. Torralba,
R. Urtasun, and S. Fidler. Skip-thought vectors. In NIPS,
pages 3294–3302, 2015.

[12] T. G. Kolda and B. W. Bader. Tensor decompositions and
applications. SIAM Rev., 51(3):455–500, Aug. 2009.
[13] R. Krishna, Y. Zhu, O. Groth, J. Johnson, K. Hata, J. Kravitz,
S. Chen, Y. Kalantidis, L.-J. Li, D. A. Shamma, M. Bern-
stein, and L. Fei-Fei. Visual genome: Connecting language

and vision using crowdsourced dense image annotations.
2016.

[14] R. Li and J. Jia. Visual question answering with question rep-
resentation update (qru). In NIPS, pages 4655–4663. 2016.
[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014.

[16] T.-Y. Lin, A. RoyChowdhury, and S. Maji. Bilinear cnn mod-
els for ﬁne-grained visual recognition. In ICCV, 2015.
[17] J. Lu, J. Yang, D. Batra, and D. Parikh. Hierarchical
question-image co-attention for visual question answering.
In NIPS, pages 289–297, 2016.

[18] L. Ma, Z. Lu, L. Shang, and H. Li. Multimodal convolutional
neural networks for matching image and sentence. In ICCV,
pages 2623–2631, 2015.

[19] M. Malinowski and M. Fritz. Towards a visual turing chal-
lenge. In Learning Semantics (NIPS workshop), December
2014.

[20] M. Malinowski, M. Rohrbach, and M. Fritz. Ask your neu-
rons: A deep learning approach to visual question answering.
arXiv:1605.02697, 2016.

[21] M. Ren, R. Kiros, and R. S. Zemel. Exploring models and
In NIPS, pages 2953–

data for image question answering.
2961, 2015.

[22] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In CVPR, 2016.
[23] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014.

[24] L. R. Tucker. Some mathematical notes on three-mode factor

analysis. Psychometrika, 31(3):279–311, 1966.

[25] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
In CVPR, pages

tell: A neural image caption generator.
3156–3164, 2015.

[26] Q. Wu, P. Wang, C. Shen, A. Dick, and A. van den Hengel.
Ask me anything: free-form visual question answering based
on knowledge from external sources. In CVPR, 2016.
[27] H. Xu and K. Saenko. Ask, attend and answer: Exploring
question-guided spatial attention for visual question answer-
ing. In ECCV, pages 451–466, 2016.

[28] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
In ICML,
image caption generation with visual attention.
pages 2048–2057, 2015.

[29] F. Yan and K. Mikolajczyk. Deep correlation for matching

images and text. In CVPR, June 2015.

[30] Z. Yang, X. He, J. Gao, L. Deng, and A. J. Smola. Stacked
attention networks for image question answering. In CVPR,
pages 21–29, 2016.

[31] Y. Zhu, O. Groth, M. Bernstein, and L. Fei-Fei. Visual7W:

Grounded Question Answering in Images. In CVPR, 2016.

Supplementary material

Preprocessing details

Image As in [5] (MCB) or [8] (MLB), we preprocess the
images before training our VQA models as follow. We load
and rescal the image to 448. It is important to notice that
we keep the proportion. Thus, 448 will be the size of the
smaller edge. Then, we crop the image at the center to have
a region of size 448 × 448. We normalize the image using
the ImageNet normalization. Finally, we feed the image to
a pretrained ResNet-152 and extract the features before the
last Rectiﬁed Linear Unit (ReLU).

Question We use almost the same preprocessing as [5] or
[8] for the questions. We keep the questions which are as-
sociated to the 2000 most occuring answers. We convert the
questions characters to lower case and remove all the ponc-
tuations. We use the space character to split the question
into a sequence of words. Then, we replace all the words
which are not in the vocabulary of our pretrained Skip-
thoughts model by a special ”unknown” word (”UNK”). Fi-
nally, we pad all the sequences of words with zero-padding
to match the maximum sequence length of 26 words. We
use TrimZero as in [8] to avoid the zero values from the
padding.

Optimization details

Algorithm It is important to notice that we use the classi-
cal implementation of Adam 1 with a learning rate of 10−4
unlike in [5] or [8]. In fact, we tried RMSPROP, SGD Nes-
terov and Adam with or without learning rate decay. We
found that Adam without learning rate decay was more con-
venient and lead to the same accuracy.

Batch size During the optimization process, we use a
batch size of 512 for the models without an attention mod-
eling. For the others, we use a batch size of 100, because
the models are more memory consuming.

Early stopping As in [5] and [8], we use early stopping
as a regularizer. During our training process, we save the

model parameters after each epoch. To evaluate our model
on the evaluation server, we chose the best epoch according
to the Open Ended validation accuracy computed on the val
split when available.

As in [5] and [8], for the models trained on the train-
val split, we use the test-dev split as a validation set and
are obliged to submit several times on the evaluation server.
Note that we are limited to 10 submissions per day. In prac-
tice, we submit 3 to 4 times per models for epochs associ-
ated to training accuracies between 63% to 70%.

Ensemble details

In table 3, we report several single models which com-
pose our two ensembles. MUTAN(3) is made of a MUTAN
trained on the trainval split with 2 glimpses, an other MU-
TAN with 3 glimpses and a third MUTAN with 2 glimpses
trained on the trainval split with the visual genome data
augmentation. All three have been trained with the same
hyper-parameters besides the number of glimpses.

MUTAN(5) is made of the three same MUTAN models
of MUTAN(3) and two MLB models which can be viewed
as a special case of our Multimodal Tucker Fusion. The
ﬁrst MLB has 2 glimpses and was trained on the trainval
split. It has been made available by the authors of [8] 2. The
second MLB has 4 glimpses and was trained by ourself on
the trainval split with the visual genome data augmentation.
The ﬁnal results of both ensembles are obtained by aver-
aging the features extracted before the ﬁnal Softmax layer
of all their models.

Scores details

In table 3, we provide the scores for each answer type
processed on the val and test-dev splits. In table 4, we pro-
vide the same scores for test-dev and test-standard.

*Equal contribution
1https://github.com/torch/optim/blob/master/

adam.lua

master/model

2https://github.com/jnhwkim/MulLowBiVQA/tree/

10

test-dev

val

Model
Concat
MCB
MLB
MUTAN noR
MUTAN
MUTAN+MLB

Θ
8.9
32
7.7
4.9
4.9
17.5

Y/N
79.25
80.81
82.02
81.44
81.45
82.29

No.
36.18
35.91
36.61
36.42
37.32
37.27

Other
46.69
46.43
46.65
46.86
47.17
48.23

All
58.91
59.40
60.08
59.92
60.17
61.02

Y/N
80.01
81.61
82.36
82.28
82.07
82.59

No.
33.72
33.94
34.35
35.07
35.16
35.21

Other
45.46
45.14
45.54
45.48
46.03
46.84

All
56.92
57.39
57.91
57.94
58.16
58.76

Table 3: Comparison between different fusion under the same setup on the test-dev split. Θ indicates the number of learnable
parameters (in million).

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Y/N
80.87
78.39
79.3
81.1
81.01
82.28
79.7
83.4
84.54
84.57
85.14

test-dev

test-std

No.
37.32
36.45
36.6
38.6
38.42
38.82
38.7
39.8
39.21
39.32
39.81

Other
43.12
46.28
46.1
45.5
45.23
49.25
51.7
58.5
57.81
57.36
58.52

All
57.99
58.39
58.7
59.4
59.17
61.68
61.8
66.7
66.77
67.03
67.42

Y/N
80.0
78.24
-
-
81.07
82.39
-
83.2
84.61
84.39
84.91

No.
37.53
36.27
-
-
37.12
38.23
-
39.5
39.07
38.70
39.79

Other
43.48
46.32
-
-
45.83
49.41
-
58.0
57.79
58.20
58.35

All
58.24
58.43
58.9
59.4
59.44
61.84
62.1
66.5
66.89
66.96
67.36

Table 4: MUTAN performance comparison on the test-dev and test-standard splits VQA dataset; (n) for an ensemble of n
models.

MUTAN: Multimodal Tucker Fusion for Visual Question Answering

Hedi Ben-younes 1,2 *

R´emi Cadene 1*

Matthieu Cord 1

Nicolas Thome 3

1 Sorbonne Universit´es, UPMC Univ Paris 06, CNRS, LIP6 UMR 7606, 4 place Jussieu, 75005 Paris
2 Heuritech, 248 rue du Faubourg Saint-Antoine, 75012 Paris
3 Conservatoire National des Arts et M´etiers
hedi.ben-younes@lip6.fr, remi.cadene@lip6.fr, matthieu.cord@lip6.fr, nicolas.thome@cnam.fr

7
1
0
2
 
y
a
M
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
6
7
6
6
0
.
5
0
7
1
:
v
i
X
r
a

Abstract

We introduce MUTAN, a multimodal

Bilinear models provide an appealing framework for
mixing and merging information in Visual Question An-
swering (VQA) tasks. They help to learn high level asso-
ciations between question meaning and visual concepts in
the image, but they suffer from huge dimensionality issues.
tensor-based
Tucker decomposition to efﬁciently parametrize bilinear in-
teractions between visual and textual representations. Ad-
ditionally to the Tucker framework, we design a low-rank
matrix-based decomposition to explicitly constrain the in-
teraction rank. With MUTAN, we control the complexity
of the merging scheme while keeping nice interpretable fu-
sion relations. We show how our MUTAN model generalizes
some of the latest VQA architectures, providing state-of-the-
art results.

1. Introduction

Multimodal representation learning for text and image
has been extensively studied in recent years. Currently, the
most popular task is certainly Visual Question Answering
(VQA) [19, 2]. VQA is a complex multimodal task which
aims at answering a question about an image. A speciﬁc
benchmark has been ﬁrst proposed [19], and large scale
datasets have been recently collected [21, 2, 31], enabeling
the development of more powerful models.

To solve this problem, precise image and text models are
required and, most importantly, high level interactions be-
tween these two modalities have to be carefully encoded
into the model in order to provide the correct answer. This
projection from the unimodal spaces to a multimodal one
is supposed to extract and model the relevant correlations
between the two spaces. Besides, the model must have the
ability to understand the full scene, focus its attention on the
relevant visual regions and discard the useless information
regarding the question.

*Equal contribution

Figure 1: The proposed MUTAN model uses a Tucker de-
composition of the image/question correlation tensor, which
enables modeling rich and accurate multi-modal interac-
tions. For the same input image, we show the result of the
MUTAN fusion process when integrated into an attention
mechanism [28]: we can see that the regions with larger at-
tention scores (in red) indicate a very ﬁne understanding of
the image and question contents, enabling MUTAN to prop-
erly answer the question (see detailed maps in experiments
section).

Bilinear models are powerful approaches for the fusion
problem in VQA because they encode full second-order
interactions. They currently hold state-of the-art perfor-
mances [5, 8]. The main issue with these bilinear models
is related to the number of parameters, which quickly be-
comes intractable with respect to the input and output di-
mensions. Therefore, current bilinear approaches must be
simpliﬁed or approximated by reducing the model complex-
ity: in [5], the authors sacriﬁce trainability by using a hand-
crafted multi-modal projection, while a global tensor rank
constraint is applied in [8], reducing correlations to a sim-
ple element-wise product.

In this work, we introduce a new architecture called MU-
TAN (Figure 2), which focuses on modeling ﬁne and rich
interactions between image and textual modalities. Our ap-
proach is based on a Tucker decomposition [24] of the cor-

1

relation tensor, which is able to represent full bilinear inter-
actions, while maintaining the size of the model tractable.
The resulting scheme allows us to explicitly control the
model complexity, and to choose an accurate and inter-
pretable repartition of the learnable parameters.

In the next section, we provide more details on related
VQA works and highlight our contributions. The MUTAN
fusion model, based on a Tucker decomposition, is pre-
sented in section 3, and successful experiments are reported
in section 4.

2. Related work

The main task in multimodal visual and textual analy-
sis aims at learning an alignment between feature spaces
[29, 23, 18]. Thus, the recent task of image captioning aims
at generating linguistic descriptions of images [25, 10, 28].
Instead of explicitly learning an alignment between two
spaces, the goal of VQA [2, 19] is to merge both modali-
ties in order to decide which answer is correct. This prob-
lem requires modeling very precise correlations between the
image and the question representations.
Attention. Attention mechanisms [28] have been a real
breakthrough in multimodal systems, and are fundamental
for VQA models to obtain the best possible results. [30]
propose to stack multiple question-guided attention mecha-
nisms, each one looking at different regions of the image.

[22] and [14] extract bounding boxes in the image and
score each one of them according to the textual features. In
[17], word features are aggregated with an attention mech-
anism guided by the image regions and, equivalently, the
region visual features are aggregated into one global image
embedding. This co-attentional framework uses concatena-
tions and sum pooling to merge all the components. On the
contrary, [5] and [8] developed their own fusion methods
that they use for global and attention-based strategies.

In this paper, we use the attentional modeling, proposed
in [5], as a tool that we integrate in our new fusion strategy
for both the global fusion and the attentional modeling.
Fusion strategies. Early works have modeled interactions
between multiple modalities with ﬁrst order interactions.
The IMG+BOW model in [21] is the ﬁrst to use a con-
catenation to merge a global image representation with a
question embedding, obtained by summing all the learnt
word embeddings from the question. In [22], (image, ques-
tion, answer) triplets are scored in an attentional framework.
Each local feature is given a score corresponding to its sim-
ilarity with textual features. These scores are used to weight
region multimodal embeddings, obtained from a concatena-
tion between the region’s visual features and the textual em-
beddings. The hierarchical co-attention network [17], after
extracting multiple textual and visual features, merges them
with concatenations and sums.

interactions between two embedding spaces. Bilinear in-
teractions have shown great success in deep learning for
ﬁne-grained classiﬁcation [16], and Multimodal language
modeling [10]. In VQA, a simple element-wise product be-
[7] also uses
tween the two vectors is performed in [2].
an element-wise product in a more complex iterative global
merging scheme. In [14], they use the element-wise product
aggregation in an attentional framework. To go deeper in
bilinear interactions, Multimodal Compact Bilinear pooling
(MCB) [5] uses an outer product q⊗v between visual v and
textual q embeddings. The count-sketch projection [3] Ψ is
used to project q⊗v on a lower dimensional space. Interest-
ingly, nice count-sketch properties are capitalized to com-
pute the projection without having to explicitly compute
the outer product. However, interaction parameters in MCB
are ﬁxed by the count-sketch projection (randomly chosen
in {0; −1; 1}), limiting its expressive power for modeling
complex interactions between image and questions. In con-
trast, our approach is able to model rich second order inter-
action with learned parameters.

In the recent Multimodal Low-rank Bilinear (MLB)
pooling work [8], full bilinear interactions between im-
age and question spaces are parametrized by a tensor.
Again, to limit the number of free parameters, this ten-
sor is constrained to be of low rank r. The MLB strategy
reaches state-of-the-art performances on the well-known
VQA database [2]. Despite these impressive results, the
low rank tensor structure is equivalent to a projection of
both visual and question representations into a common
r-dimensional space, and to compute simple element-wise
product interactions in this space. MLB is thus essentially
designed to learn a powerful mono-modal embedding for
text and image modalities, but relies on a simple fusion
scheme in this space.

In this work, we introduce MUTAN, a multimodal fusion
scheme based on bilinear interactions between modalities.
To control the number of model parameters, MUTAN re-
duces the size of the mono-modal embeddings, while mod-
eling their interaction as accurately as possible with a full
bilinear fusion scheme. Our submission therefore encom-
passes the following contributions:

– New fusion scheme for VQA relying on a Tucker
tensor-based decomposition, consisting in a factorization
into three matrices and a core tensor. We show that the MU-
TAN fusion scheme generalizes the latest bilinear models,
i.e. MCB [5] and MLB [8], while having more expressive
power.

– Additional structured sparsity constraint the core ten-
sor to further control the number of model parameters.
This acts as a regularizer during training and prevents over-
ﬁtting, giving us more ﬂexibility to adjust the input/output
projections.

Second order models are a more powerful way to model

– State-of-the-art results on the most widely used dataset

Figure 2: MUTAN fusion scheme for global Visual QA. The prediction is modeled as a bilinear interaction between visual
and linguistic features, parametrized by the tensor T . In MUTAN, we factorise the tensor T using a Tucker decomposition,
resulting in an architecture with three intra-modal matrices Wq, Wv and Wo, and a smaller tensor T c. The complexity of
T c is controlled via a structured sparsity constraint on the slice matrices of the tensor.

for Visual QA [2]. We also show that MUTAN outperforms
MCB [5] and MLB [8] in the same setting, and that perfor-
mances can be further improved when combined with MLB,
validating the complementarity potential between the two
approaches.

3. MUTAN Model

Our method deals with the problem of Visual Question
Answering (VQA). In VQA, one is given a question q ∈ Q
about an image v ∈ I, and the goal is to provide a mean-
ingful answer. During training, we aim at learning a model
such that the predicted answer ˆa matches the correct one a(cid:63).
More formally, denoting as Θ the whole set of parameters
of the model, the predicted output ˆa can be written as:

ˆa = arg max
a∈A

pΘ (a|v, q)

(1)

The general architecture of the proposed approach is
shown in Figure 2. As commonly done in VQA, images
v and questions q are ﬁrstly embedded into vectors and
the output is represented as a classiﬁcation vector y . In
this work, we use a fully convolutional neural network [6]
(ResNet-152) to describe the image content, and a GRU re-
current network [11, 4] for the question, yielding represen-
tations v ∈ Rdv for the image and q ∈ Rdq for the question.
Vision and language representations v and q are then fused
using the operator T (explained below) to produce a vector
y, providing (through a softmax function) the ﬁnal answer
in Eq. (1). This global merging scheme is also embedded
into a visual attention-based mechanism [8] to provide our
ﬁnal MUTAN architecture.

Bilinear models [5, 8] are recent powerful solutions to
the fusion problem, since they encode fully-parametrized
bilinear interactions between the vectors q and v:

y = (T ×1 q) ×2 v

(2)

their

bilinear

appealing modeling power,

with the full tensor T ∈ Rdq×dv×|A|, and the operator ×i
designing the i-mode product between a tensor and a matrix
(here a vector).
Despite
fully-
become
parametrized
intractable in VQA, because the size of the full tensor
is prohibitive using common dimensions for textual, visual
and output spaces. For example, with dv ≈ dq ≈ 2048 and
|A| ≈ 2000, the number of free parameters in the tensor
T is ∼ 1010. Such a huge number of free parameters
is a problem both for learning and for GPU memory
consumption1.

interactions

quickly

In MUTAN, we factorize the full tensor T using a
Tucker decomposition. We also propose to complete our
decomposition by structuring the second tensor T c (see
gray box in Fig. 2) in order to keep ﬂexibility over the in-
put/output dimensions while keeping the number of param-
eters tractable.

3.1. Tucker decomposition

The Tucker decomposition [24] of a 3-way tensor
T ∈ Rdq×dv×|A| expresses T as a tensor product between
factor matrices Wq, Wv and Wo, and a core tensor T c in
such a way that:

T = ((T c ×1 Wq) ×2 Wv) ×3 Wo

(3)

Fusion and Bilinear models The issue of merging visual
and linguistic information is crucial in VQA. Complex and
high-level interactions between textual meaning in the ques-
tion and visual concepts in the image have to be extracted
to provide a meaningful answer.

with Wq ∈ Rdq×tq , Wv ∈ Rdv×tv and Wo ∈ R|A|×to,
and T c ∈ Rtq×tv×to. Interestingly, Eq. (3) states that the

1A tensor with 8 billion ﬂoat32 scalars approximately needs 32Go to

be stored, while top-grade GPUs hold about 24Go each.

weights in T are functions of a restricted number of param-
eters ∀i ∈ [1, dq], j ∈ [1, dv], k ∈ [1, do]:
T [i, j, k] =

T c[l, m, n]Wq[i, l]Wv[j, m]Wo[k, n]

(cid:88)

l∈[1,tq],m∈[1,tv],n∈[1,to]

T is usually summarized as T =
.
(cid:75)
A comprehensive discussion on Tucker decomposition and
tensor analysis may be found in [12].

T c; Wq, Wv, Wo

(cid:74)

3.2. Multimodal Tucker Fusion

As we parametrize the weights of the tensor T with its
Tucker decomposition of the Eq. (3), we can rewrite Eq. (2)
as follows:

y = (cid:0)(cid:0)T c ×1

(cid:0)q(cid:62)Wq

(cid:1)(cid:1) ×2

(cid:0)v(cid:62)Wv

(cid:1)(cid:1) ×3 Wo

(4)

This is strictly equivalent to encode a full bilinear interac-
tion of projections of q and v into a latent pair representation
z, and to use this latent code to predict the correct answer.
If we deﬁne ˜q = q(cid:62)Wq ∈ Rtq and ˜v = v(cid:62)Wv ∈ Rtv , we
have:

z = (T c ×1 ˜q) ×2 ˜v ∈ Rto

(5)

z is projected into the prediction space y = z(cid:62)Wo ∈ R|A|
and p = softmax(y).
In our experiments, we use non-
linearities ˜q = tanh(q(cid:62)Wq) and ˜v = tanh(v(cid:62)Wv) in
the fusion, as in [8], providing slightly better results. The
multimodal Tucker fusion is depicted in Figure 2.

Interpretation Using the Tucker decomposition, we have
separated T into four components, each having a speciﬁc
role in the modeling. Matrices Wq and Wv project the
question and the image vectors into spaces of respective di-
mensions tq and tv. These dimensions directly impact the
modeling complexity that will be allowed for each modal-
ity. The higher tq (resp.
tv) will be, the more complex
image) modeling will be. Tensor T c
the question (resp.
is used to model interactions between ˜q and ˜v. It learns a
projection from all the correlations ˜q[i]˜v[j] to a vector z of
size to. This dimension controls the complexity allowed for
the interactions between modalities. Finally, the matrix Wo
scores this pair embedding z for each class in A.

3.3. Tensor sparsity

To further balance between expressivity and complexity
of the interactions modeling, we introduce a structured spar-
sity constraint based on the rank of the slice matrices in T c.
When we perform the to bilinear combinations between ˜q
and ˜v of Eq. (5), each dimension k ∈
in z can be
written as:

(cid:74)
z[k] = ˜q(cid:62)T c[:, :, k]˜v
The correlations between elements of ˜q and ˜v are weighted
by the parameters of T c[:, :, k]. We might beneﬁt from the

1, to

(6)

(cid:75)

introduction of a structure in each of these slices. This struc-
ture can be expressed in terms of rank constraints on the
slices of T c. We impose the rank of each slice to be equal
to a constant R. Thus we express each slice T c[:, :, k] as a
sum of R rank one matrices:

with mk

r ∈ Rtq and nk

r ∈ Rtv Eq. (6) becomes:

T c[:, :, k] =

mk

r ⊗ nk(cid:62)

r

R
(cid:88)

r=1

z[k] =

(cid:0)˜q(cid:62)mk

(cid:1) (cid:0)˜v(cid:62)nk

(cid:1)

r

r

R
(cid:88)

r=1

We can deﬁne R matrices Mr
Nr ∈ Rtv × to) such as ∀k ∈
(resp. Nr[:, k] = nk
then be written as:

∈
(resp.
, Mr[:, k] = mk
1, do
r
r ). The structured sparsity on T c can

Rtq × to

(cid:74)

(cid:75)

R
(cid:88)

zr

z =

r=1
zr = (˜q(cid:62)Mr) ∗ (˜v(cid:62)Nr)

(7)

(8)

(9)

(10)

Interpretation Adding this rank constraint on T c leads
to expressing the output vector z as a sum over R vectors
zr. To obtain each of these vectors, we project ˜q and ˜v
into a common space and merge them with an elementwise
product. Thus, we can interpret z as modeling an OR in-
teraction over multiple AND gates (R in MUTAN) between
projections of ˜q and ˜v. z[k] can described in terms of logi-
cal operators as:

zr[k] = (cid:0)˜q similar to mk

r

(cid:1) AND (cid:0)˜v similar to nk

z[k] = z1[k] OR ... OR zR[k]

r

(cid:1) (11)
(12)

This decomposition gives a very clear insight of how the
fusion is carried out in our MUTAN model. In our experi-
ments, we will show how different r’s in
behave, de-
pending on the type of question. We will exhibit some cases
where some r’s specialize over speciﬁc question types.

1, R
(cid:74)

(cid:75)

3.4. Model Uniﬁcation and Discussion

In this subsection, we show how two state of the art
models, namely Multimodal Low-rank bilinear pooling
[8] (MLB) and Multimodal Compact Bilinear pooling [5]
(MCB), can be seen as special cases of our Multimodal
Tucker Fusion. Each of these models use a different type
of bilinear interaction between q and v, hence instantiating
a speciﬁc parametrization of the weight tensor T . These
parameterizations actually consist in a Tucker decomposi-
tion with speciﬁc constraints on the elements T c, Wq, Wv
and Wo. More importantly, when we cast MCB and MLB

(a) MCB

(b) MLB

(c) MUTAN

Figure 3: Tensor design strategies. (a) MCB: Wq and Wv are ﬁxed diagonal matrices, T c is a sparse ﬁxed tensor, only the
output factor matrix Wo is learnt; (b) MLB: the 3 factor matrices are learnt but the core tensor is T c set to identity; (c) MU-
TAN: Wq, Wv, Wo and T c are learnt. The full bilinear interaction T c is structured with a low-rank (R) decomposition.

into the framework of Tucker decompositions, we show that
the structural constraints imposed by these two models state
that some parameters are ﬁxed, while they are free to be
learnt in our full Tucker fusion. This is illustrated in Fig-
ure 3. We show in color the learnt parameters.

3.4.1 Multimodal Compact Bilinear (MCB)

q

q

v

v

and W mcb

= Diag (sq) and W mcb

We can show that the Multimodal Compact Bilinear pool-
ing [5] can be written as a bilinear model where the weight
tensor T mcb is decomposed into its Tucker decomposition,
with speciﬁc structures on the decompositions’ elements.
The intramodal projection matrices W mcb
are
diagonal matrices where the non-zero coefﬁcients take their
values in {−1; 1}: W mcb
=
Diag (sv), where sq ∈ Rdq and sv ∈ Rdv are random vec-
tors sampled at the instanciation of the model but kept ﬁxed
afterwards. The core tensor T c is sparse and its values fol-
low the rule: T mcb
[i, j, k] = 1 if h(i, j) = k (and 0 else),
where h :
×
is randomly sampled
(cid:75)
at the beginning of training and no longer changed.

(cid:74)
As was noticed in [8], all the learnt parameters in MCB
are located after the fusion. The combinations of dimen-
sions from q and from v that are supposed to interact with
each other are randomly sampled beforehand (through h).
To compensate for the fact of ﬁxing the parameters sq, sv
and h, they must set a very high to dimension (typically
16,000). This set of combinations is taken as a feature vec-
tor for classiﬁcation.

1, dv

1, do

1, dq

→

(cid:74)

(cid:74)

(cid:75)

(cid:75)

c

3.4.2 Multimodal Low-rank Bilinear (MLB)

The low-rank bilinear interaction corresponds to a canoni-
cal decomposition of the tensor T such as its rank is equal
to R. It is well-known that the low-rank decomposition of a
tensor is a special case of the Tucker decomposition, such
as T mlb =
where tq = tv = to = R.
Two major constraints are imposed when reducing Tucker
decomposition to low-rank decomposition. First, the three
dimensions tq, tv and to are structurally set to be equal. The

I R; Wq, Wv, Wo
(cid:74)

(cid:75)

dimension of the space in which a modality is projected (tq
and tv) quantiﬁes the model’s complexity. Our intuition is
that since the image and language spaces are different, they
may require to be modeled with different levels of complex-
ity, hence different projection dimensions. The second con-
straint is on the core tensor, which is set to be the identity.
A dimension k of ˜qmlb is only allowed to interact with the
same dimension of ˜vmlb, which might be restrictive. We
will experimentally show the beneﬁcial effect of removing
these constraints.

We would like to point out the differences between MLB
and the structured sparsity per slice presented in 3.3. There
are two main differences between the two approaches. First,
our rank reduction is made on the core tensor of the Tucker
decomposition T c, while in MLB they constrain the rank
of the global tensor T . This lets us keep different dimen-
sionalities for the projected vectors ˜q and ˜v. The second
difference is we do not reduce the tensor on the third mode,
but only on the ﬁrst two modes corresponding to the image
and question modalities. The implicit parameters in T c are
correlated inside a mode-3 slice but independent between
the slices.

4. Experiments

VQA Dataset The VQA dataset [2] is built over images
of MSCOCO [15], where each image was manually anno-
tated with 3 questions. Each one of these questions is then
answered by 10 annotators, yielding a list of 10 ground-
truth answers. The dataset is composed of 248,349 pairs
(image, question) for the training set, 121,512 for valida-
tion and 244,302 for testing. The ground truth answers are
given for the train and val splits, and one must submit their
predictions to an evaluation server to get the scores on test-
std split. Note that the evaluation server makes it possible
to submit multiple models per day on test-dev, which is a
subsample of test-std. The whole submission on test-std
can only be done ﬁve times. We focus on the open-ended
task, where the ground truth answers are given in free natu-
ral language phrases. This dataset comes with its evaluation

metric, presented in [2]. When the model predicts an an-
swer for a visual question, the VQA accuracy is given by:

(cid:18)

min

1,

# humans that provided that answer
3

(cid:19)

(13)

If the predicted answer appears at least 3 times in the ground
truth answers, the accuracy for this example is considered
to be 1. Intuitively, this metrics takes into account the con-
sensus between annotators.

MUTAN Setup We ﬁrst resize our images to be of size
(448, 448). We use ResNet152 [6] as our visual feature ex-
tractor, which produces feature maps of size 14×14×2048.
We keep the 14 × 14 tiling when attention models are used
(section 4.2). Otherwise, the image is represented as the
average of 14 × 14 vectors at the output of the CNN (sec-
tion 4.1). To represent questions, we use a GRU [4] ini-
tialized with the parameters of a pretrained Skip-thoughts
model [11]. Each model is trained to predict the most com-
mon answer in the 10 annotated responses. |A| is ﬁxed to
the 2000 most frequent answers as in [8], and we train our
model using ADAM [9] (see details in supplementary ma-
terial).

4.1. Fusion Scheme Comparison

To point out the performance variation due to the fusion
modules, we ﬁrst compare MUTAN to state-of-the-art bi-
linear models, under the same experimental framework. We
do not use attention models here. Several merging scheme
results are presented in Table 1: Concat denotes a baseline
where v and q are merged by simply concatenating them.
For MCB [5] and MLB [8], we use the available code 2 3
to train models on the same visual and linguistic features.
We choose an output dimension of 16,000 for MCB and
1,200 for MLB, as indicated in the respective articles. MU-
TAN noR designates the MUTAN model without the rank
sparsity constraint. We choose all the projection dimensions
to be equal to each other: tq = tv = to = 160. These
parameters are chosen considering the results on val split.
Finally, our MUTAN 4 designates the full Tucker decompo-
sition with rank sparsity strategy. We choose all the projec-
tion dimensions to be equal to each other: tq = tv = to =
360, and a rank R = 10. These parameters were chosen
so that MUTAN and MUTAN noR have the same number
of parameters. As we can see in Table 1, MUTAN noR per-
forms better than MLB, which validates the fact that model-
ing full bilinear interactions between low dimensional pro-
jections yields a more powerful representation than having
strong mono-modal transformations with a simple fusion

2https://github.com/jnhwkim/cbp
3https://github.com/jnhwkim/MulLowBiVQA
4https://github.com/cadene/vqa.pytorch

test-dev

val

Y/N No. Other All All
Model
79.25 36.18 46.69 58.91 56.92
Concat
80.81 35.91 46.43 59.40 57.39
MCB
82.02 36.61 46.65 60.08 57.91
MLB
81.44 36.42 46.86 59.92 57.94
MUTAN noR
81.45 37.32 47.17 60.17 58.16
MUTAN
MUTAN+MLB 17.5 82.29 37.27 48.23 61.02 58.76

Θ
8.9
32
7.7
4.9
4.9

Table 1: Comparison between different fusion under the
same setup on the test-dev split. Θ indicates the number of
learnable parameters (in million).

scheme (element-wise product). With the structured spar-
sity, MUTAN obtains the best results, validating our intu-
ition of having a nice tradeoff between the projection di-
mensions and a reasonable number of useful bilinear inter-
action parameters in the core tensor T c. Finally, a naive
late fusion MUTAN+MLB further improves performances
(about +1pt on test-dev). It validates the complementarity
between the two types of tensor decomposition.

4.2. State-of-the-art comparison

To compare the performance of the proposed approach
to state-of-the-art works, we associate the MUTAN fusion
with recently introduced techniques for VQA, which are de-
scribed below.

Attention mechanism We use the same kind of multi-
glimpse attention mechanisms as the ones presented in [5]
and [8]. We use MUTAN to score the region embeddings
according to the question vector, and compute a global vi-
sual vector as a sum pooling weighted by these scores.

Answer sampling (Ans. Sampl.) Each (image,question)
pair in the VQA dataset is annotated with 10 ground truth
answers, corresponding to the different annotators. In those
10, we keep only the answers occuring more than 3 times,
and randomly choose the one we ask our model to predict.

Data augmentation (DAVG) We use Visual Genome
[13] as a data augmentation to train our model, keeping only
the example whose answer is in our vocabulary. This triples
the size of our training set.

Ensembling MUTAN (5) consist in an ensemble of ﬁve
models trained on train+val splits. We use 3 attentional
MUTAN architectures with one trained with additional Vi-
sual Genome data. The 2 other models are instances of
MLB, which can be seen as a special case of MUTAN. De-
tails about the ensembling will be provided in the supple-
mentary material.

Results State-of-the-art comparison results are gathered
in Table 2. Firstly, we can notice that bilinear models, i.e.

test-dev

test-
std
All

36.6
38.6

58.7
59.4

Y/N No. Other All
80.87 37.32 43.12 57.99 58.24
78.39 36.45 46.28 58.39 58.43
58.9
46.1
79.3
81.1
59.4
45.5
81.01 38.42 45.23 59.17 59.44
82.28 38.82 49.25 61.68 61.84
62.1
51.7
79.7
83.4
66.5
58.5
84.57 39.21 57.81 66.77 66.89
84.54 39.32 57.36 67.03 66.96
85.14 39.81 58.52 67.42 67.36

61.8
66.7

38.7
39.8

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Table 2: MUTAN performance comparison on the test-dev
and test-standard splits VQA dataset; (n) for an ensemble
of n models.

MCB [5] and MLB [8] have a strong edge over other meth-
ods with a less powerful fusion scheme.

MUTAN outperforms all the previous methods with a
large margin on test-dev and test-std. This validates the rele-
vance of the proposed fusion scheme, which models precise
interactions between modalities. The good performances of
MUTAN (5) also conﬁrms its complementarity with MLB,
already seen in section 4.1 without attention mecanism:
MLB learns informative mono-modal projections, wheras
MUTAN is explicitly devoted to accurately models bilinear
interactions. Finally, we can notice that the performance
improvement of MUTAN in this enhanced setup is conform
to the performance gap reported in section 4.1, showing that
the beneﬁt of the fusion scheme directly translates for the
whole VQA task.

Finally, we also evaluated an ensemble of 3 models
based on the MUTAN fusion scheme (without MLB), that
we denote as MUTAN (3). This ensemble also outperforms
state-of-the-art results. We can point out that this improve-
ment is reached with is an ensembling of 3 models, which is
smaller than the previous state-of-the-art MLB results con-
taining an ensembling of 7 models.

4.3. Further analysis

Experimental setup In this section, we study the behav-
ior of MUTAN under different conditions. Here, we exam-
ine under different aspects the fusion between q and v with
the Tucker decomposition of tensor T . As we did previ-
ously, we don’t use the attention mechanism in this section.
We only consider a global visual vector, computed as the av-
erage of the 14 × 14 region vectors given by our CNN. We
also don’t use the answer sampling, asking our model to
always predict the most frequent answer of the 10 ground

Figure 4: The improvements given by MUTAN noR over
a model trained with the identity tensor as a fusion operator
between ˜q and ˜v.

truth responses. All the models are trained on the VQA
train split, and the scores are reported on val.

Impact of a plain tensor The goal is to see how important
are all the parameters in the core tensor T c, which model
the correlations between projections of q and v. We train
multiple MUTAN noR, where we ﬁx all projection dimen-
sions to be equal tq = tv = to = t and t ranges from
20 to 220.
In Figure 4, we compare these MUTAN noR
with a model trained with the same projection dimension,
but where T c is replaced by the identity tensor5. One can
see that MUTAN noR gives much better results than iden-
tity tensor, even for very small core tensor dimensions. This
shows that MUTAN noR is able to learn powerful correla-
tions between modalities6.

Impact of rank sparsity We want to study the impact of
introducing the rank constraint in the core tensor T c. We ﬁx
the input dimensions tq = 210 and tv = 210, and vary the
output dimension to for multiple rank constraints R. As we
can see in Figure 5, controlling the rank of slices in T c al-
lows to better model the interactions between the unimodal
spaces. The different colored lines show the behavior of
MUTAN for different values of R. Comparing R = 60 (blue
line) and R = 20 (green line), we see that a lower rank al-
lows to reach higher values of to without overﬁtting. The
number of parameters in the fusion is lower, and the accu-
racy on the val split is higher.

5This is strictly equivalent to MLB [8] without attention. However, we
are fully aware that it takes between 1000 and 2000 dimensions of projec-
tion to be around the operating point of MLB. With our experimental setup,
we just focus on the effect of adding parameters to our fusion scheme.

6Notice that for each t, MUTAN noR has t3 parameters. For instance,

for t = 220, MUTAN adds 10.6M parameters over identity.

(a) Question: Where is the woman ? - Answer: on the elephant

Figure 5: Accuracy on VQA val in function of to. Each
colored dot shows the score of a MUTAN model trained on
train. The yellow labels indicate the number of parameters
in the fusion.

(b) Question: Where is the smoke coming from ? - Answer: train

Figure 7: The original image is shown on the left. The cen-
ter and right images show heatmaps obtained when turning
off all the projections but one, for two different projections.
Each projection focuses on a speciﬁc concept needed to an-
swer the question.

(a) ”Is there”

(b) ”What room is”

(c) ”What is the man”

(d) ”What sport is”

Figure 6: Visualizing the performances of ablated systems
according to the R variables. Full system performance is
denoted in dotted line.

In MUTAN, the vector z that
Qualitative observations
encodes the (image,question) pair is expressed as a sum
over R vectors zr. We want to study the R different la-
tent projections that have been learnt during training, and
assess whether the representations have captured different
semantic properties of inputs. We quantify the differences
between each of the R spaces using the VQA question types.
We ﬁrst train a model on the train split, with R = 20, and
measure its performance on the val set. Then, we set to 0
all of the zr vectors except one, and evaluate this ablated
system on the validation set. In Figure 6, we compare the
full system to the R ablated systems for 4 different ques-

tion types. The dotted line shows the accuracy of the full
system, while the different bars show the accuracy of the
ablated system for each R. Depending on the question type,
we observe 3 different behaviors of the ranks. When the
question type’s answer support is small, we observe that
each rank has learnt enough to reach almost the same ac-
curacy as the global system. This is the case for questions
starting by ”Is there”, whose answer is almost always ”yes”
or ”no”. Other question types require information from all
the latent projections, as in the case of ”What is the man”.
This leads to cases where all projections perform equally
and signiﬁcantly worst when taken individually than when
combined to get the full model. At last, we observe that
speciﬁc projections contribute more than others depending
on the question type. For example, latent variable 16 per-
forms well on ”what room is”, and is less informative to
answer questions starting by ”what sport is”. The opposite
behavior is observed for latent variable 17.

We run the same kind of analysis for the MUTAN fusion
in the attention mechanism. In Figure 7, we show for two
images the different attentions that we obtain when turning
off all the projections but one. For the ﬁrst image, we can
see that a projection focuses on the elephant, while another
focuses on the woman. Both these visual informations are
necessary to answer the question ”Where is the woman ?”.
The same behavior is observed for the second image, where
a projection focuses on the smoke while another gives high
attention to the train.

5. Conclusion

In this paper, we introduced our MUTAN strategy for
the VQA task. Our main contribution is a multimodal fu-
sion between visual and textual information using a bilinear
framework. Our model combines a Tucker decomposition
with a low-rank matrix constraint. It is designed to control
the full bilinear interaction’s complexity. MUTAN factor-
izes the interaction tensor into interpretable elements, and
allows an easy control of the model’s expressiveness. We
also show how the Tucker decomposition framework gener-
alizes the most competitive VQA architectures. MUTAN is
evaluated on the most recent VQA dataset, reaching state-
of-the-art.

References

[1] J. Andreas, M. Rohrbach, T. Darrell, and D. Klein. Learn-
ing to compose neural networks for question answering. In
NAACL HLT 2016, San Diego California, USA, June 12-17,
2016, pages 1545–1554, 2016.

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L.
Zitnick, and D. Parikh. VQA: Visual Question Answering.
In ICCV, 2015.

[3] M. Charikar, K. Chen, and M. Farach-Colton. Finding fre-
In International Colloquium
quent items in data streams.
on Automata, Languages and Programming, pages 693–703,
2002.

[4] K. Cho, B. van Merrienboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder-
decoder approaches. In Eighth Workshop on Syntax, Seman-
tics and Structure in Statistical Translation, EMNLP 2014,
pages 103–111, 2014.

[5] A. Fukui, D. H. Park, D. Yang, A. Rohrbach, T. Dar-
rell, and M. Rohrbach. Multimodal compact bilinear pool-
ing for visual question answering and visual grounding.
arXiv:1606.01847, 2016.

[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015.

[7] J.-H. Kim, S.-W. Lee, D. Kwak, M.-O. Heo, J. Kim, J.-W.
Ha, and B.-T. Zhang. Multimodal Residual Learning for Vi-
sual QA. In NIPS, pages 361–369, 2016.

[8] J.-H. Kim, K.-W. On, J. Kim, J.-W. Ha, and B.-T. Zhang.
Hadamard Product for Low-rank Bilinear Pooling. In 5th In-
ternational Conference on Learning Representations, 2017.
[9] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014.

[10] R. Kiros, R. Salakhutdinov, and R. Zemel. Multimodal neu-
ral language models. In ICML, pages 595–603, 2014.
[11] R. Kiros, Y. Zhu, R. Salakhutdinov, R. S. Zemel, A. Torralba,
R. Urtasun, and S. Fidler. Skip-thought vectors. In NIPS,
pages 3294–3302, 2015.

[12] T. G. Kolda and B. W. Bader. Tensor decompositions and
applications. SIAM Rev., 51(3):455–500, Aug. 2009.
[13] R. Krishna, Y. Zhu, O. Groth, J. Johnson, K. Hata, J. Kravitz,
S. Chen, Y. Kalantidis, L.-J. Li, D. A. Shamma, M. Bern-
stein, and L. Fei-Fei. Visual genome: Connecting language

and vision using crowdsourced dense image annotations.
2016.

[14] R. Li and J. Jia. Visual question answering with question rep-
resentation update (qru). In NIPS, pages 4655–4663. 2016.
[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014.

[16] T.-Y. Lin, A. RoyChowdhury, and S. Maji. Bilinear cnn mod-
els for ﬁne-grained visual recognition. In ICCV, 2015.
[17] J. Lu, J. Yang, D. Batra, and D. Parikh. Hierarchical
question-image co-attention for visual question answering.
In NIPS, pages 289–297, 2016.

[18] L. Ma, Z. Lu, L. Shang, and H. Li. Multimodal convolutional
neural networks for matching image and sentence. In ICCV,
pages 2623–2631, 2015.

[19] M. Malinowski and M. Fritz. Towards a visual turing chal-
lenge. In Learning Semantics (NIPS workshop), December
2014.

[20] M. Malinowski, M. Rohrbach, and M. Fritz. Ask your neu-
rons: A deep learning approach to visual question answering.
arXiv:1605.02697, 2016.

[21] M. Ren, R. Kiros, and R. S. Zemel. Exploring models and
In NIPS, pages 2953–

data for image question answering.
2961, 2015.

[22] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In CVPR, 2016.
[23] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014.

[24] L. R. Tucker. Some mathematical notes on three-mode factor

analysis. Psychometrika, 31(3):279–311, 1966.

[25] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
In CVPR, pages

tell: A neural image caption generator.
3156–3164, 2015.

[26] Q. Wu, P. Wang, C. Shen, A. Dick, and A. van den Hengel.
Ask me anything: free-form visual question answering based
on knowledge from external sources. In CVPR, 2016.
[27] H. Xu and K. Saenko. Ask, attend and answer: Exploring
question-guided spatial attention for visual question answer-
ing. In ECCV, pages 451–466, 2016.

[28] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
In ICML,
image caption generation with visual attention.
pages 2048–2057, 2015.

[29] F. Yan and K. Mikolajczyk. Deep correlation for matching

images and text. In CVPR, June 2015.

[30] Z. Yang, X. He, J. Gao, L. Deng, and A. J. Smola. Stacked
attention networks for image question answering. In CVPR,
pages 21–29, 2016.

[31] Y. Zhu, O. Groth, M. Bernstein, and L. Fei-Fei. Visual7W:

Grounded Question Answering in Images. In CVPR, 2016.

Supplementary material

Preprocessing details

Image As in [5] (MCB) or [8] (MLB), we preprocess the
images before training our VQA models as follow. We load
and rescal the image to 448. It is important to notice that
we keep the proportion. Thus, 448 will be the size of the
smaller edge. Then, we crop the image at the center to have
a region of size 448 × 448. We normalize the image using
the ImageNet normalization. Finally, we feed the image to
a pretrained ResNet-152 and extract the features before the
last Rectiﬁed Linear Unit (ReLU).

Question We use almost the same preprocessing as [5] or
[8] for the questions. We keep the questions which are as-
sociated to the 2000 most occuring answers. We convert the
questions characters to lower case and remove all the ponc-
tuations. We use the space character to split the question
into a sequence of words. Then, we replace all the words
which are not in the vocabulary of our pretrained Skip-
thoughts model by a special ”unknown” word (”UNK”). Fi-
nally, we pad all the sequences of words with zero-padding
to match the maximum sequence length of 26 words. We
use TrimZero as in [8] to avoid the zero values from the
padding.

Optimization details

Algorithm It is important to notice that we use the classi-
cal implementation of Adam 1 with a learning rate of 10−4
unlike in [5] or [8]. In fact, we tried RMSPROP, SGD Nes-
terov and Adam with or without learning rate decay. We
found that Adam without learning rate decay was more con-
venient and lead to the same accuracy.

Batch size During the optimization process, we use a
batch size of 512 for the models without an attention mod-
eling. For the others, we use a batch size of 100, because
the models are more memory consuming.

Early stopping As in [5] and [8], we use early stopping
as a regularizer. During our training process, we save the

model parameters after each epoch. To evaluate our model
on the evaluation server, we chose the best epoch according
to the Open Ended validation accuracy computed on the val
split when available.

As in [5] and [8], for the models trained on the train-
val split, we use the test-dev split as a validation set and
are obliged to submit several times on the evaluation server.
Note that we are limited to 10 submissions per day. In prac-
tice, we submit 3 to 4 times per models for epochs associ-
ated to training accuracies between 63% to 70%.

Ensemble details

In table 3, we report several single models which com-
pose our two ensembles. MUTAN(3) is made of a MUTAN
trained on the trainval split with 2 glimpses, an other MU-
TAN with 3 glimpses and a third MUTAN with 2 glimpses
trained on the trainval split with the visual genome data
augmentation. All three have been trained with the same
hyper-parameters besides the number of glimpses.

MUTAN(5) is made of the three same MUTAN models
of MUTAN(3) and two MLB models which can be viewed
as a special case of our Multimodal Tucker Fusion. The
ﬁrst MLB has 2 glimpses and was trained on the trainval
split. It has been made available by the authors of [8] 2. The
second MLB has 4 glimpses and was trained by ourself on
the trainval split with the visual genome data augmentation.
The ﬁnal results of both ensembles are obtained by aver-
aging the features extracted before the ﬁnal Softmax layer
of all their models.

Scores details

In table 3, we provide the scores for each answer type
processed on the val and test-dev splits. In table 4, we pro-
vide the same scores for test-dev and test-standard.

*Equal contribution
1https://github.com/torch/optim/blob/master/

adam.lua

master/model

2https://github.com/jnhwkim/MulLowBiVQA/tree/

10

test-dev

val

Model
Concat
MCB
MLB
MUTAN noR
MUTAN
MUTAN+MLB

Θ
8.9
32
7.7
4.9
4.9
17.5

Y/N
79.25
80.81
82.02
81.44
81.45
82.29

No.
36.18
35.91
36.61
36.42
37.32
37.27

Other
46.69
46.43
46.65
46.86
47.17
48.23

All
58.91
59.40
60.08
59.92
60.17
61.02

Y/N
80.01
81.61
82.36
82.28
82.07
82.59

No.
33.72
33.94
34.35
35.07
35.16
35.21

Other
45.46
45.14
45.54
45.48
46.03
46.84

All
56.92
57.39
57.91
57.94
58.16
58.76

Table 3: Comparison between different fusion under the same setup on the test-dev split. Θ indicates the number of learnable
parameters (in million).

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Y/N
80.87
78.39
79.3
81.1
81.01
82.28
79.7
83.4
84.54
84.57
85.14

test-dev

test-std

No.
37.32
36.45
36.6
38.6
38.42
38.82
38.7
39.8
39.21
39.32
39.81

Other
43.12
46.28
46.1
45.5
45.23
49.25
51.7
58.5
57.81
57.36
58.52

All
57.99
58.39
58.7
59.4
59.17
61.68
61.8
66.7
66.77
67.03
67.42

Y/N
80.0
78.24
-
-
81.07
82.39
-
83.2
84.61
84.39
84.91

No.
37.53
36.27
-
-
37.12
38.23
-
39.5
39.07
38.70
39.79

Other
43.48
46.32
-
-
45.83
49.41
-
58.0
57.79
58.20
58.35

All
58.24
58.43
58.9
59.4
59.44
61.84
62.1
66.5
66.89
66.96
67.36

Table 4: MUTAN performance comparison on the test-dev and test-standard splits VQA dataset; (n) for an ensemble of n
models.

MUTAN: Multimodal Tucker Fusion for Visual Question Answering

Hedi Ben-younes 1,2 *

R´emi Cadene 1*

Matthieu Cord 1

Nicolas Thome 3

1 Sorbonne Universit´es, UPMC Univ Paris 06, CNRS, LIP6 UMR 7606, 4 place Jussieu, 75005 Paris
2 Heuritech, 248 rue du Faubourg Saint-Antoine, 75012 Paris
3 Conservatoire National des Arts et M´etiers
hedi.ben-younes@lip6.fr, remi.cadene@lip6.fr, matthieu.cord@lip6.fr, nicolas.thome@cnam.fr

7
1
0
2
 
y
a
M
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
6
7
6
6
0
.
5
0
7
1
:
v
i
X
r
a

Abstract

We introduce MUTAN, a multimodal

Bilinear models provide an appealing framework for
mixing and merging information in Visual Question An-
swering (VQA) tasks. They help to learn high level asso-
ciations between question meaning and visual concepts in
the image, but they suffer from huge dimensionality issues.
tensor-based
Tucker decomposition to efﬁciently parametrize bilinear in-
teractions between visual and textual representations. Ad-
ditionally to the Tucker framework, we design a low-rank
matrix-based decomposition to explicitly constrain the in-
teraction rank. With MUTAN, we control the complexity
of the merging scheme while keeping nice interpretable fu-
sion relations. We show how our MUTAN model generalizes
some of the latest VQA architectures, providing state-of-the-
art results.

1. Introduction

Multimodal representation learning for text and image
has been extensively studied in recent years. Currently, the
most popular task is certainly Visual Question Answering
(VQA) [19, 2]. VQA is a complex multimodal task which
aims at answering a question about an image. A speciﬁc
benchmark has been ﬁrst proposed [19], and large scale
datasets have been recently collected [21, 2, 31], enabeling
the development of more powerful models.

To solve this problem, precise image and text models are
required and, most importantly, high level interactions be-
tween these two modalities have to be carefully encoded
into the model in order to provide the correct answer. This
projection from the unimodal spaces to a multimodal one
is supposed to extract and model the relevant correlations
between the two spaces. Besides, the model must have the
ability to understand the full scene, focus its attention on the
relevant visual regions and discard the useless information
regarding the question.

*Equal contribution

Figure 1: The proposed MUTAN model uses a Tucker de-
composition of the image/question correlation tensor, which
enables modeling rich and accurate multi-modal interac-
tions. For the same input image, we show the result of the
MUTAN fusion process when integrated into an attention
mechanism [28]: we can see that the regions with larger at-
tention scores (in red) indicate a very ﬁne understanding of
the image and question contents, enabling MUTAN to prop-
erly answer the question (see detailed maps in experiments
section).

Bilinear models are powerful approaches for the fusion
problem in VQA because they encode full second-order
interactions. They currently hold state-of the-art perfor-
mances [5, 8]. The main issue with these bilinear models
is related to the number of parameters, which quickly be-
comes intractable with respect to the input and output di-
mensions. Therefore, current bilinear approaches must be
simpliﬁed or approximated by reducing the model complex-
ity: in [5], the authors sacriﬁce trainability by using a hand-
crafted multi-modal projection, while a global tensor rank
constraint is applied in [8], reducing correlations to a sim-
ple element-wise product.

In this work, we introduce a new architecture called MU-
TAN (Figure 2), which focuses on modeling ﬁne and rich
interactions between image and textual modalities. Our ap-
proach is based on a Tucker decomposition [24] of the cor-

1

relation tensor, which is able to represent full bilinear inter-
actions, while maintaining the size of the model tractable.
The resulting scheme allows us to explicitly control the
model complexity, and to choose an accurate and inter-
pretable repartition of the learnable parameters.

In the next section, we provide more details on related
VQA works and highlight our contributions. The MUTAN
fusion model, based on a Tucker decomposition, is pre-
sented in section 3, and successful experiments are reported
in section 4.

2. Related work

The main task in multimodal visual and textual analy-
sis aims at learning an alignment between feature spaces
[29, 23, 18]. Thus, the recent task of image captioning aims
at generating linguistic descriptions of images [25, 10, 28].
Instead of explicitly learning an alignment between two
spaces, the goal of VQA [2, 19] is to merge both modali-
ties in order to decide which answer is correct. This prob-
lem requires modeling very precise correlations between the
image and the question representations.
Attention. Attention mechanisms [28] have been a real
breakthrough in multimodal systems, and are fundamental
for VQA models to obtain the best possible results. [30]
propose to stack multiple question-guided attention mecha-
nisms, each one looking at different regions of the image.

[22] and [14] extract bounding boxes in the image and
score each one of them according to the textual features. In
[17], word features are aggregated with an attention mech-
anism guided by the image regions and, equivalently, the
region visual features are aggregated into one global image
embedding. This co-attentional framework uses concatena-
tions and sum pooling to merge all the components. On the
contrary, [5] and [8] developed their own fusion methods
that they use for global and attention-based strategies.

In this paper, we use the attentional modeling, proposed
in [5], as a tool that we integrate in our new fusion strategy
for both the global fusion and the attentional modeling.
Fusion strategies. Early works have modeled interactions
between multiple modalities with ﬁrst order interactions.
The IMG+BOW model in [21] is the ﬁrst to use a con-
catenation to merge a global image representation with a
question embedding, obtained by summing all the learnt
word embeddings from the question. In [22], (image, ques-
tion, answer) triplets are scored in an attentional framework.
Each local feature is given a score corresponding to its sim-
ilarity with textual features. These scores are used to weight
region multimodal embeddings, obtained from a concatena-
tion between the region’s visual features and the textual em-
beddings. The hierarchical co-attention network [17], after
extracting multiple textual and visual features, merges them
with concatenations and sums.

interactions between two embedding spaces. Bilinear in-
teractions have shown great success in deep learning for
ﬁne-grained classiﬁcation [16], and Multimodal language
modeling [10]. In VQA, a simple element-wise product be-
[7] also uses
tween the two vectors is performed in [2].
an element-wise product in a more complex iterative global
merging scheme. In [14], they use the element-wise product
aggregation in an attentional framework. To go deeper in
bilinear interactions, Multimodal Compact Bilinear pooling
(MCB) [5] uses an outer product q⊗v between visual v and
textual q embeddings. The count-sketch projection [3] Ψ is
used to project q⊗v on a lower dimensional space. Interest-
ingly, nice count-sketch properties are capitalized to com-
pute the projection without having to explicitly compute
the outer product. However, interaction parameters in MCB
are ﬁxed by the count-sketch projection (randomly chosen
in {0; −1; 1}), limiting its expressive power for modeling
complex interactions between image and questions. In con-
trast, our approach is able to model rich second order inter-
action with learned parameters.

In the recent Multimodal Low-rank Bilinear (MLB)
pooling work [8], full bilinear interactions between im-
age and question spaces are parametrized by a tensor.
Again, to limit the number of free parameters, this ten-
sor is constrained to be of low rank r. The MLB strategy
reaches state-of-the-art performances on the well-known
VQA database [2]. Despite these impressive results, the
low rank tensor structure is equivalent to a projection of
both visual and question representations into a common
r-dimensional space, and to compute simple element-wise
product interactions in this space. MLB is thus essentially
designed to learn a powerful mono-modal embedding for
text and image modalities, but relies on a simple fusion
scheme in this space.

In this work, we introduce MUTAN, a multimodal fusion
scheme based on bilinear interactions between modalities.
To control the number of model parameters, MUTAN re-
duces the size of the mono-modal embeddings, while mod-
eling their interaction as accurately as possible with a full
bilinear fusion scheme. Our submission therefore encom-
passes the following contributions:

– New fusion scheme for VQA relying on a Tucker
tensor-based decomposition, consisting in a factorization
into three matrices and a core tensor. We show that the MU-
TAN fusion scheme generalizes the latest bilinear models,
i.e. MCB [5] and MLB [8], while having more expressive
power.

– Additional structured sparsity constraint the core ten-
sor to further control the number of model parameters.
This acts as a regularizer during training and prevents over-
ﬁtting, giving us more ﬂexibility to adjust the input/output
projections.

Second order models are a more powerful way to model

– State-of-the-art results on the most widely used dataset

Figure 2: MUTAN fusion scheme for global Visual QA. The prediction is modeled as a bilinear interaction between visual
and linguistic features, parametrized by the tensor T . In MUTAN, we factorise the tensor T using a Tucker decomposition,
resulting in an architecture with three intra-modal matrices Wq, Wv and Wo, and a smaller tensor T c. The complexity of
T c is controlled via a structured sparsity constraint on the slice matrices of the tensor.

for Visual QA [2]. We also show that MUTAN outperforms
MCB [5] and MLB [8] in the same setting, and that perfor-
mances can be further improved when combined with MLB,
validating the complementarity potential between the two
approaches.

3. MUTAN Model

Our method deals with the problem of Visual Question
Answering (VQA). In VQA, one is given a question q ∈ Q
about an image v ∈ I, and the goal is to provide a mean-
ingful answer. During training, we aim at learning a model
such that the predicted answer ˆa matches the correct one a(cid:63).
More formally, denoting as Θ the whole set of parameters
of the model, the predicted output ˆa can be written as:

ˆa = arg max
a∈A

pΘ (a|v, q)

(1)

The general architecture of the proposed approach is
shown in Figure 2. As commonly done in VQA, images
v and questions q are ﬁrstly embedded into vectors and
the output is represented as a classiﬁcation vector y . In
this work, we use a fully convolutional neural network [6]
(ResNet-152) to describe the image content, and a GRU re-
current network [11, 4] for the question, yielding represen-
tations v ∈ Rdv for the image and q ∈ Rdq for the question.
Vision and language representations v and q are then fused
using the operator T (explained below) to produce a vector
y, providing (through a softmax function) the ﬁnal answer
in Eq. (1). This global merging scheme is also embedded
into a visual attention-based mechanism [8] to provide our
ﬁnal MUTAN architecture.

Bilinear models [5, 8] are recent powerful solutions to
the fusion problem, since they encode fully-parametrized
bilinear interactions between the vectors q and v:

y = (T ×1 q) ×2 v

(2)

their

bilinear

appealing modeling power,

with the full tensor T ∈ Rdq×dv×|A|, and the operator ×i
designing the i-mode product between a tensor and a matrix
(here a vector).
Despite
fully-
become
parametrized
intractable in VQA, because the size of the full tensor
is prohibitive using common dimensions for textual, visual
and output spaces. For example, with dv ≈ dq ≈ 2048 and
|A| ≈ 2000, the number of free parameters in the tensor
T is ∼ 1010. Such a huge number of free parameters
is a problem both for learning and for GPU memory
consumption1.

interactions

quickly

In MUTAN, we factorize the full tensor T using a
Tucker decomposition. We also propose to complete our
decomposition by structuring the second tensor T c (see
gray box in Fig. 2) in order to keep ﬂexibility over the in-
put/output dimensions while keeping the number of param-
eters tractable.

3.1. Tucker decomposition

The Tucker decomposition [24] of a 3-way tensor
T ∈ Rdq×dv×|A| expresses T as a tensor product between
factor matrices Wq, Wv and Wo, and a core tensor T c in
such a way that:

T = ((T c ×1 Wq) ×2 Wv) ×3 Wo

(3)

Fusion and Bilinear models The issue of merging visual
and linguistic information is crucial in VQA. Complex and
high-level interactions between textual meaning in the ques-
tion and visual concepts in the image have to be extracted
to provide a meaningful answer.

with Wq ∈ Rdq×tq , Wv ∈ Rdv×tv and Wo ∈ R|A|×to,
and T c ∈ Rtq×tv×to. Interestingly, Eq. (3) states that the

1A tensor with 8 billion ﬂoat32 scalars approximately needs 32Go to

be stored, while top-grade GPUs hold about 24Go each.

weights in T are functions of a restricted number of param-
eters ∀i ∈ [1, dq], j ∈ [1, dv], k ∈ [1, do]:
T [i, j, k] =

T c[l, m, n]Wq[i, l]Wv[j, m]Wo[k, n]

(cid:88)

l∈[1,tq],m∈[1,tv],n∈[1,to]

T is usually summarized as T =
.
(cid:75)
A comprehensive discussion on Tucker decomposition and
tensor analysis may be found in [12].

T c; Wq, Wv, Wo

(cid:74)

3.2. Multimodal Tucker Fusion

As we parametrize the weights of the tensor T with its
Tucker decomposition of the Eq. (3), we can rewrite Eq. (2)
as follows:

y = (cid:0)(cid:0)T c ×1

(cid:0)q(cid:62)Wq

(cid:1)(cid:1) ×2

(cid:0)v(cid:62)Wv

(cid:1)(cid:1) ×3 Wo

(4)

This is strictly equivalent to encode a full bilinear interac-
tion of projections of q and v into a latent pair representation
z, and to use this latent code to predict the correct answer.
If we deﬁne ˜q = q(cid:62)Wq ∈ Rtq and ˜v = v(cid:62)Wv ∈ Rtv , we
have:

z = (T c ×1 ˜q) ×2 ˜v ∈ Rto

(5)

z is projected into the prediction space y = z(cid:62)Wo ∈ R|A|
and p = softmax(y).
In our experiments, we use non-
linearities ˜q = tanh(q(cid:62)Wq) and ˜v = tanh(v(cid:62)Wv) in
the fusion, as in [8], providing slightly better results. The
multimodal Tucker fusion is depicted in Figure 2.

Interpretation Using the Tucker decomposition, we have
separated T into four components, each having a speciﬁc
role in the modeling. Matrices Wq and Wv project the
question and the image vectors into spaces of respective di-
mensions tq and tv. These dimensions directly impact the
modeling complexity that will be allowed for each modal-
ity. The higher tq (resp.
tv) will be, the more complex
image) modeling will be. Tensor T c
the question (resp.
is used to model interactions between ˜q and ˜v. It learns a
projection from all the correlations ˜q[i]˜v[j] to a vector z of
size to. This dimension controls the complexity allowed for
the interactions between modalities. Finally, the matrix Wo
scores this pair embedding z for each class in A.

3.3. Tensor sparsity

To further balance between expressivity and complexity
of the interactions modeling, we introduce a structured spar-
sity constraint based on the rank of the slice matrices in T c.
When we perform the to bilinear combinations between ˜q
and ˜v of Eq. (5), each dimension k ∈
in z can be
written as:

(cid:74)
z[k] = ˜q(cid:62)T c[:, :, k]˜v
The correlations between elements of ˜q and ˜v are weighted
by the parameters of T c[:, :, k]. We might beneﬁt from the

1, to

(6)

(cid:75)

introduction of a structure in each of these slices. This struc-
ture can be expressed in terms of rank constraints on the
slices of T c. We impose the rank of each slice to be equal
to a constant R. Thus we express each slice T c[:, :, k] as a
sum of R rank one matrices:

with mk

r ∈ Rtq and nk

r ∈ Rtv Eq. (6) becomes:

T c[:, :, k] =

mk

r ⊗ nk(cid:62)

r

R
(cid:88)

r=1

z[k] =

(cid:0)˜q(cid:62)mk

(cid:1) (cid:0)˜v(cid:62)nk

(cid:1)

r

r

R
(cid:88)

r=1

We can deﬁne R matrices Mr
Nr ∈ Rtv × to) such as ∀k ∈
(resp. Nr[:, k] = nk
then be written as:

∈
(resp.
, Mr[:, k] = mk
1, do
r
r ). The structured sparsity on T c can

Rtq × to

(cid:74)

(cid:75)

R
(cid:88)

zr

z =

r=1
zr = (˜q(cid:62)Mr) ∗ (˜v(cid:62)Nr)

(7)

(8)

(9)

(10)

Interpretation Adding this rank constraint on T c leads
to expressing the output vector z as a sum over R vectors
zr. To obtain each of these vectors, we project ˜q and ˜v
into a common space and merge them with an elementwise
product. Thus, we can interpret z as modeling an OR in-
teraction over multiple AND gates (R in MUTAN) between
projections of ˜q and ˜v. z[k] can described in terms of logi-
cal operators as:

zr[k] = (cid:0)˜q similar to mk

r

(cid:1) AND (cid:0)˜v similar to nk

z[k] = z1[k] OR ... OR zR[k]

r

(cid:1) (11)
(12)

This decomposition gives a very clear insight of how the
fusion is carried out in our MUTAN model. In our experi-
ments, we will show how different r’s in
behave, de-
pending on the type of question. We will exhibit some cases
where some r’s specialize over speciﬁc question types.

1, R
(cid:74)

(cid:75)

3.4. Model Uniﬁcation and Discussion

In this subsection, we show how two state of the art
models, namely Multimodal Low-rank bilinear pooling
[8] (MLB) and Multimodal Compact Bilinear pooling [5]
(MCB), can be seen as special cases of our Multimodal
Tucker Fusion. Each of these models use a different type
of bilinear interaction between q and v, hence instantiating
a speciﬁc parametrization of the weight tensor T . These
parameterizations actually consist in a Tucker decomposi-
tion with speciﬁc constraints on the elements T c, Wq, Wv
and Wo. More importantly, when we cast MCB and MLB

(a) MCB

(b) MLB

(c) MUTAN

Figure 3: Tensor design strategies. (a) MCB: Wq and Wv are ﬁxed diagonal matrices, T c is a sparse ﬁxed tensor, only the
output factor matrix Wo is learnt; (b) MLB: the 3 factor matrices are learnt but the core tensor is T c set to identity; (c) MU-
TAN: Wq, Wv, Wo and T c are learnt. The full bilinear interaction T c is structured with a low-rank (R) decomposition.

into the framework of Tucker decompositions, we show that
the structural constraints imposed by these two models state
that some parameters are ﬁxed, while they are free to be
learnt in our full Tucker fusion. This is illustrated in Fig-
ure 3. We show in color the learnt parameters.

3.4.1 Multimodal Compact Bilinear (MCB)

q

q

v

v

and W mcb

= Diag (sq) and W mcb

We can show that the Multimodal Compact Bilinear pool-
ing [5] can be written as a bilinear model where the weight
tensor T mcb is decomposed into its Tucker decomposition,
with speciﬁc structures on the decompositions’ elements.
The intramodal projection matrices W mcb
are
diagonal matrices where the non-zero coefﬁcients take their
values in {−1; 1}: W mcb
=
Diag (sv), where sq ∈ Rdq and sv ∈ Rdv are random vec-
tors sampled at the instanciation of the model but kept ﬁxed
afterwards. The core tensor T c is sparse and its values fol-
low the rule: T mcb
[i, j, k] = 1 if h(i, j) = k (and 0 else),
where h :
×
is randomly sampled
(cid:75)
at the beginning of training and no longer changed.

(cid:74)
As was noticed in [8], all the learnt parameters in MCB
are located after the fusion. The combinations of dimen-
sions from q and from v that are supposed to interact with
each other are randomly sampled beforehand (through h).
To compensate for the fact of ﬁxing the parameters sq, sv
and h, they must set a very high to dimension (typically
16,000). This set of combinations is taken as a feature vec-
tor for classiﬁcation.

1, dv

1, do

1, dq

→

(cid:74)

(cid:74)

(cid:75)

(cid:75)

c

3.4.2 Multimodal Low-rank Bilinear (MLB)

The low-rank bilinear interaction corresponds to a canoni-
cal decomposition of the tensor T such as its rank is equal
to R. It is well-known that the low-rank decomposition of a
tensor is a special case of the Tucker decomposition, such
as T mlb =
where tq = tv = to = R.
Two major constraints are imposed when reducing Tucker
decomposition to low-rank decomposition. First, the three
dimensions tq, tv and to are structurally set to be equal. The

I R; Wq, Wv, Wo
(cid:74)

(cid:75)

dimension of the space in which a modality is projected (tq
and tv) quantiﬁes the model’s complexity. Our intuition is
that since the image and language spaces are different, they
may require to be modeled with different levels of complex-
ity, hence different projection dimensions. The second con-
straint is on the core tensor, which is set to be the identity.
A dimension k of ˜qmlb is only allowed to interact with the
same dimension of ˜vmlb, which might be restrictive. We
will experimentally show the beneﬁcial effect of removing
these constraints.

We would like to point out the differences between MLB
and the structured sparsity per slice presented in 3.3. There
are two main differences between the two approaches. First,
our rank reduction is made on the core tensor of the Tucker
decomposition T c, while in MLB they constrain the rank
of the global tensor T . This lets us keep different dimen-
sionalities for the projected vectors ˜q and ˜v. The second
difference is we do not reduce the tensor on the third mode,
but only on the ﬁrst two modes corresponding to the image
and question modalities. The implicit parameters in T c are
correlated inside a mode-3 slice but independent between
the slices.

4. Experiments

VQA Dataset The VQA dataset [2] is built over images
of MSCOCO [15], where each image was manually anno-
tated with 3 questions. Each one of these questions is then
answered by 10 annotators, yielding a list of 10 ground-
truth answers. The dataset is composed of 248,349 pairs
(image, question) for the training set, 121,512 for valida-
tion and 244,302 for testing. The ground truth answers are
given for the train and val splits, and one must submit their
predictions to an evaluation server to get the scores on test-
std split. Note that the evaluation server makes it possible
to submit multiple models per day on test-dev, which is a
subsample of test-std. The whole submission on test-std
can only be done ﬁve times. We focus on the open-ended
task, where the ground truth answers are given in free natu-
ral language phrases. This dataset comes with its evaluation

metric, presented in [2]. When the model predicts an an-
swer for a visual question, the VQA accuracy is given by:

(cid:18)

min

1,

# humans that provided that answer
3

(cid:19)

(13)

If the predicted answer appears at least 3 times in the ground
truth answers, the accuracy for this example is considered
to be 1. Intuitively, this metrics takes into account the con-
sensus between annotators.

MUTAN Setup We ﬁrst resize our images to be of size
(448, 448). We use ResNet152 [6] as our visual feature ex-
tractor, which produces feature maps of size 14×14×2048.
We keep the 14 × 14 tiling when attention models are used
(section 4.2). Otherwise, the image is represented as the
average of 14 × 14 vectors at the output of the CNN (sec-
tion 4.1). To represent questions, we use a GRU [4] ini-
tialized with the parameters of a pretrained Skip-thoughts
model [11]. Each model is trained to predict the most com-
mon answer in the 10 annotated responses. |A| is ﬁxed to
the 2000 most frequent answers as in [8], and we train our
model using ADAM [9] (see details in supplementary ma-
terial).

4.1. Fusion Scheme Comparison

To point out the performance variation due to the fusion
modules, we ﬁrst compare MUTAN to state-of-the-art bi-
linear models, under the same experimental framework. We
do not use attention models here. Several merging scheme
results are presented in Table 1: Concat denotes a baseline
where v and q are merged by simply concatenating them.
For MCB [5] and MLB [8], we use the available code 2 3
to train models on the same visual and linguistic features.
We choose an output dimension of 16,000 for MCB and
1,200 for MLB, as indicated in the respective articles. MU-
TAN noR designates the MUTAN model without the rank
sparsity constraint. We choose all the projection dimensions
to be equal to each other: tq = tv = to = 160. These
parameters are chosen considering the results on val split.
Finally, our MUTAN 4 designates the full Tucker decompo-
sition with rank sparsity strategy. We choose all the projec-
tion dimensions to be equal to each other: tq = tv = to =
360, and a rank R = 10. These parameters were chosen
so that MUTAN and MUTAN noR have the same number
of parameters. As we can see in Table 1, MUTAN noR per-
forms better than MLB, which validates the fact that model-
ing full bilinear interactions between low dimensional pro-
jections yields a more powerful representation than having
strong mono-modal transformations with a simple fusion

2https://github.com/jnhwkim/cbp
3https://github.com/jnhwkim/MulLowBiVQA
4https://github.com/cadene/vqa.pytorch

test-dev

val

Y/N No. Other All All
Model
79.25 36.18 46.69 58.91 56.92
Concat
80.81 35.91 46.43 59.40 57.39
MCB
82.02 36.61 46.65 60.08 57.91
MLB
81.44 36.42 46.86 59.92 57.94
MUTAN noR
81.45 37.32 47.17 60.17 58.16
MUTAN
MUTAN+MLB 17.5 82.29 37.27 48.23 61.02 58.76

Θ
8.9
32
7.7
4.9
4.9

Table 1: Comparison between different fusion under the
same setup on the test-dev split. Θ indicates the number of
learnable parameters (in million).

scheme (element-wise product). With the structured spar-
sity, MUTAN obtains the best results, validating our intu-
ition of having a nice tradeoff between the projection di-
mensions and a reasonable number of useful bilinear inter-
action parameters in the core tensor T c. Finally, a naive
late fusion MUTAN+MLB further improves performances
(about +1pt on test-dev). It validates the complementarity
between the two types of tensor decomposition.

4.2. State-of-the-art comparison

To compare the performance of the proposed approach
to state-of-the-art works, we associate the MUTAN fusion
with recently introduced techniques for VQA, which are de-
scribed below.

Attention mechanism We use the same kind of multi-
glimpse attention mechanisms as the ones presented in [5]
and [8]. We use MUTAN to score the region embeddings
according to the question vector, and compute a global vi-
sual vector as a sum pooling weighted by these scores.

Answer sampling (Ans. Sampl.) Each (image,question)
pair in the VQA dataset is annotated with 10 ground truth
answers, corresponding to the different annotators. In those
10, we keep only the answers occuring more than 3 times,
and randomly choose the one we ask our model to predict.

Data augmentation (DAVG) We use Visual Genome
[13] as a data augmentation to train our model, keeping only
the example whose answer is in our vocabulary. This triples
the size of our training set.

Ensembling MUTAN (5) consist in an ensemble of ﬁve
models trained on train+val splits. We use 3 attentional
MUTAN architectures with one trained with additional Vi-
sual Genome data. The 2 other models are instances of
MLB, which can be seen as a special case of MUTAN. De-
tails about the ensembling will be provided in the supple-
mentary material.

Results State-of-the-art comparison results are gathered
in Table 2. Firstly, we can notice that bilinear models, i.e.

test-dev

test-
std
All

36.6
38.6

58.7
59.4

Y/N No. Other All
80.87 37.32 43.12 57.99 58.24
78.39 36.45 46.28 58.39 58.43
58.9
46.1
79.3
81.1
59.4
45.5
81.01 38.42 45.23 59.17 59.44
82.28 38.82 49.25 61.68 61.84
62.1
51.7
79.7
83.4
66.5
58.5
84.57 39.21 57.81 66.77 66.89
84.54 39.32 57.36 67.03 66.96
85.14 39.81 58.52 67.42 67.36

61.8
66.7

38.7
39.8

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Table 2: MUTAN performance comparison on the test-dev
and test-standard splits VQA dataset; (n) for an ensemble
of n models.

MCB [5] and MLB [8] have a strong edge over other meth-
ods with a less powerful fusion scheme.

MUTAN outperforms all the previous methods with a
large margin on test-dev and test-std. This validates the rele-
vance of the proposed fusion scheme, which models precise
interactions between modalities. The good performances of
MUTAN (5) also conﬁrms its complementarity with MLB,
already seen in section 4.1 without attention mecanism:
MLB learns informative mono-modal projections, wheras
MUTAN is explicitly devoted to accurately models bilinear
interactions. Finally, we can notice that the performance
improvement of MUTAN in this enhanced setup is conform
to the performance gap reported in section 4.1, showing that
the beneﬁt of the fusion scheme directly translates for the
whole VQA task.

Finally, we also evaluated an ensemble of 3 models
based on the MUTAN fusion scheme (without MLB), that
we denote as MUTAN (3). This ensemble also outperforms
state-of-the-art results. We can point out that this improve-
ment is reached with is an ensembling of 3 models, which is
smaller than the previous state-of-the-art MLB results con-
taining an ensembling of 7 models.

4.3. Further analysis

Experimental setup In this section, we study the behav-
ior of MUTAN under different conditions. Here, we exam-
ine under different aspects the fusion between q and v with
the Tucker decomposition of tensor T . As we did previ-
ously, we don’t use the attention mechanism in this section.
We only consider a global visual vector, computed as the av-
erage of the 14 × 14 region vectors given by our CNN. We
also don’t use the answer sampling, asking our model to
always predict the most frequent answer of the 10 ground

Figure 4: The improvements given by MUTAN noR over
a model trained with the identity tensor as a fusion operator
between ˜q and ˜v.

truth responses. All the models are trained on the VQA
train split, and the scores are reported on val.

Impact of a plain tensor The goal is to see how important
are all the parameters in the core tensor T c, which model
the correlations between projections of q and v. We train
multiple MUTAN noR, where we ﬁx all projection dimen-
sions to be equal tq = tv = to = t and t ranges from
20 to 220.
In Figure 4, we compare these MUTAN noR
with a model trained with the same projection dimension,
but where T c is replaced by the identity tensor5. One can
see that MUTAN noR gives much better results than iden-
tity tensor, even for very small core tensor dimensions. This
shows that MUTAN noR is able to learn powerful correla-
tions between modalities6.

Impact of rank sparsity We want to study the impact of
introducing the rank constraint in the core tensor T c. We ﬁx
the input dimensions tq = 210 and tv = 210, and vary the
output dimension to for multiple rank constraints R. As we
can see in Figure 5, controlling the rank of slices in T c al-
lows to better model the interactions between the unimodal
spaces. The different colored lines show the behavior of
MUTAN for different values of R. Comparing R = 60 (blue
line) and R = 20 (green line), we see that a lower rank al-
lows to reach higher values of to without overﬁtting. The
number of parameters in the fusion is lower, and the accu-
racy on the val split is higher.

5This is strictly equivalent to MLB [8] without attention. However, we
are fully aware that it takes between 1000 and 2000 dimensions of projec-
tion to be around the operating point of MLB. With our experimental setup,
we just focus on the effect of adding parameters to our fusion scheme.

6Notice that for each t, MUTAN noR has t3 parameters. For instance,

for t = 220, MUTAN adds 10.6M parameters over identity.

(a) Question: Where is the woman ? - Answer: on the elephant

Figure 5: Accuracy on VQA val in function of to. Each
colored dot shows the score of a MUTAN model trained on
train. The yellow labels indicate the number of parameters
in the fusion.

(b) Question: Where is the smoke coming from ? - Answer: train

Figure 7: The original image is shown on the left. The cen-
ter and right images show heatmaps obtained when turning
off all the projections but one, for two different projections.
Each projection focuses on a speciﬁc concept needed to an-
swer the question.

(a) ”Is there”

(b) ”What room is”

(c) ”What is the man”

(d) ”What sport is”

Figure 6: Visualizing the performances of ablated systems
according to the R variables. Full system performance is
denoted in dotted line.

In MUTAN, the vector z that
Qualitative observations
encodes the (image,question) pair is expressed as a sum
over R vectors zr. We want to study the R different la-
tent projections that have been learnt during training, and
assess whether the representations have captured different
semantic properties of inputs. We quantify the differences
between each of the R spaces using the VQA question types.
We ﬁrst train a model on the train split, with R = 20, and
measure its performance on the val set. Then, we set to 0
all of the zr vectors except one, and evaluate this ablated
system on the validation set. In Figure 6, we compare the
full system to the R ablated systems for 4 different ques-

tion types. The dotted line shows the accuracy of the full
system, while the different bars show the accuracy of the
ablated system for each R. Depending on the question type,
we observe 3 different behaviors of the ranks. When the
question type’s answer support is small, we observe that
each rank has learnt enough to reach almost the same ac-
curacy as the global system. This is the case for questions
starting by ”Is there”, whose answer is almost always ”yes”
or ”no”. Other question types require information from all
the latent projections, as in the case of ”What is the man”.
This leads to cases where all projections perform equally
and signiﬁcantly worst when taken individually than when
combined to get the full model. At last, we observe that
speciﬁc projections contribute more than others depending
on the question type. For example, latent variable 16 per-
forms well on ”what room is”, and is less informative to
answer questions starting by ”what sport is”. The opposite
behavior is observed for latent variable 17.

We run the same kind of analysis for the MUTAN fusion
in the attention mechanism. In Figure 7, we show for two
images the different attentions that we obtain when turning
off all the projections but one. For the ﬁrst image, we can
see that a projection focuses on the elephant, while another
focuses on the woman. Both these visual informations are
necessary to answer the question ”Where is the woman ?”.
The same behavior is observed for the second image, where
a projection focuses on the smoke while another gives high
attention to the train.

5. Conclusion

In this paper, we introduced our MUTAN strategy for
the VQA task. Our main contribution is a multimodal fu-
sion between visual and textual information using a bilinear
framework. Our model combines a Tucker decomposition
with a low-rank matrix constraint. It is designed to control
the full bilinear interaction’s complexity. MUTAN factor-
izes the interaction tensor into interpretable elements, and
allows an easy control of the model’s expressiveness. We
also show how the Tucker decomposition framework gener-
alizes the most competitive VQA architectures. MUTAN is
evaluated on the most recent VQA dataset, reaching state-
of-the-art.

References

[1] J. Andreas, M. Rohrbach, T. Darrell, and D. Klein. Learn-
ing to compose neural networks for question answering. In
NAACL HLT 2016, San Diego California, USA, June 12-17,
2016, pages 1545–1554, 2016.

[2] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L.
Zitnick, and D. Parikh. VQA: Visual Question Answering.
In ICCV, 2015.

[3] M. Charikar, K. Chen, and M. Farach-Colton. Finding fre-
In International Colloquium
quent items in data streams.
on Automata, Languages and Programming, pages 693–703,
2002.

[4] K. Cho, B. van Merrienboer, D. Bahdanau, and Y. Bengio.
On the properties of neural machine translation: Encoder-
decoder approaches. In Eighth Workshop on Syntax, Seman-
tics and Structure in Statistical Translation, EMNLP 2014,
pages 103–111, 2014.

[5] A. Fukui, D. H. Park, D. Yang, A. Rohrbach, T. Dar-
rell, and M. Rohrbach. Multimodal compact bilinear pool-
ing for visual question answering and visual grounding.
arXiv:1606.01847, 2016.

[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015.

[7] J.-H. Kim, S.-W. Lee, D. Kwak, M.-O. Heo, J. Kim, J.-W.
Ha, and B.-T. Zhang. Multimodal Residual Learning for Vi-
sual QA. In NIPS, pages 361–369, 2016.

[8] J.-H. Kim, K.-W. On, J. Kim, J.-W. Ha, and B.-T. Zhang.
Hadamard Product for Low-rank Bilinear Pooling. In 5th In-
ternational Conference on Learning Representations, 2017.
[9] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014.

[10] R. Kiros, R. Salakhutdinov, and R. Zemel. Multimodal neu-
ral language models. In ICML, pages 595–603, 2014.
[11] R. Kiros, Y. Zhu, R. Salakhutdinov, R. S. Zemel, A. Torralba,
R. Urtasun, and S. Fidler. Skip-thought vectors. In NIPS,
pages 3294–3302, 2015.

[12] T. G. Kolda and B. W. Bader. Tensor decompositions and
applications. SIAM Rev., 51(3):455–500, Aug. 2009.
[13] R. Krishna, Y. Zhu, O. Groth, J. Johnson, K. Hata, J. Kravitz,
S. Chen, Y. Kalantidis, L.-J. Li, D. A. Shamma, M. Bern-
stein, and L. Fei-Fei. Visual genome: Connecting language

and vision using crowdsourced dense image annotations.
2016.

[14] R. Li and J. Jia. Visual question answering with question rep-
resentation update (qru). In NIPS, pages 4655–4663. 2016.
[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Dollr, and C. L. Zitnick. Microsoft coco: Common
objects in context. In ECCV, 2014.

[16] T.-Y. Lin, A. RoyChowdhury, and S. Maji. Bilinear cnn mod-
els for ﬁne-grained visual recognition. In ICCV, 2015.
[17] J. Lu, J. Yang, D. Batra, and D. Parikh. Hierarchical
question-image co-attention for visual question answering.
In NIPS, pages 289–297, 2016.

[18] L. Ma, Z. Lu, L. Shang, and H. Li. Multimodal convolutional
neural networks for matching image and sentence. In ICCV,
pages 2623–2631, 2015.

[19] M. Malinowski and M. Fritz. Towards a visual turing chal-
lenge. In Learning Semantics (NIPS workshop), December
2014.

[20] M. Malinowski, M. Rohrbach, and M. Fritz. Ask your neu-
rons: A deep learning approach to visual question answering.
arXiv:1605.02697, 2016.

[21] M. Ren, R. Kiros, and R. S. Zemel. Exploring models and
In NIPS, pages 2953–

data for image question answering.
2961, 2015.

[22] K. J. Shih, S. Singh, and D. Hoiem. Where to look: Focus
regions for visual question answering. In CVPR, 2016.
[23] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng.
Grounded compositional semantics for ﬁnding and describ-
ing images with sentences. Transactions of the Association
for Computational Linguistics, 2:207–218, 2014.

[24] L. R. Tucker. Some mathematical notes on three-mode factor

analysis. Psychometrika, 31(3):279–311, 1966.

[25] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
In CVPR, pages

tell: A neural image caption generator.
3156–3164, 2015.

[26] Q. Wu, P. Wang, C. Shen, A. Dick, and A. van den Hengel.
Ask me anything: free-form visual question answering based
on knowledge from external sources. In CVPR, 2016.
[27] H. Xu and K. Saenko. Ask, attend and answer: Exploring
question-guided spatial attention for visual question answer-
ing. In ECCV, pages 451–466, 2016.

[28] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
In ICML,
image caption generation with visual attention.
pages 2048–2057, 2015.

[29] F. Yan and K. Mikolajczyk. Deep correlation for matching

images and text. In CVPR, June 2015.

[30] Z. Yang, X. He, J. Gao, L. Deng, and A. J. Smola. Stacked
attention networks for image question answering. In CVPR,
pages 21–29, 2016.

[31] Y. Zhu, O. Groth, M. Bernstein, and L. Fei-Fei. Visual7W:

Grounded Question Answering in Images. In CVPR, 2016.

Supplementary material

Preprocessing details

Image As in [5] (MCB) or [8] (MLB), we preprocess the
images before training our VQA models as follow. We load
and rescal the image to 448. It is important to notice that
we keep the proportion. Thus, 448 will be the size of the
smaller edge. Then, we crop the image at the center to have
a region of size 448 × 448. We normalize the image using
the ImageNet normalization. Finally, we feed the image to
a pretrained ResNet-152 and extract the features before the
last Rectiﬁed Linear Unit (ReLU).

Question We use almost the same preprocessing as [5] or
[8] for the questions. We keep the questions which are as-
sociated to the 2000 most occuring answers. We convert the
questions characters to lower case and remove all the ponc-
tuations. We use the space character to split the question
into a sequence of words. Then, we replace all the words
which are not in the vocabulary of our pretrained Skip-
thoughts model by a special ”unknown” word (”UNK”). Fi-
nally, we pad all the sequences of words with zero-padding
to match the maximum sequence length of 26 words. We
use TrimZero as in [8] to avoid the zero values from the
padding.

Optimization details

Algorithm It is important to notice that we use the classi-
cal implementation of Adam 1 with a learning rate of 10−4
unlike in [5] or [8]. In fact, we tried RMSPROP, SGD Nes-
terov and Adam with or without learning rate decay. We
found that Adam without learning rate decay was more con-
venient and lead to the same accuracy.

Batch size During the optimization process, we use a
batch size of 512 for the models without an attention mod-
eling. For the others, we use a batch size of 100, because
the models are more memory consuming.

Early stopping As in [5] and [8], we use early stopping
as a regularizer. During our training process, we save the

model parameters after each epoch. To evaluate our model
on the evaluation server, we chose the best epoch according
to the Open Ended validation accuracy computed on the val
split when available.

As in [5] and [8], for the models trained on the train-
val split, we use the test-dev split as a validation set and
are obliged to submit several times on the evaluation server.
Note that we are limited to 10 submissions per day. In prac-
tice, we submit 3 to 4 times per models for epochs associ-
ated to training accuracies between 63% to 70%.

Ensemble details

In table 3, we report several single models which com-
pose our two ensembles. MUTAN(3) is made of a MUTAN
trained on the trainval split with 2 glimpses, an other MU-
TAN with 3 glimpses and a third MUTAN with 2 glimpses
trained on the trainval split with the visual genome data
augmentation. All three have been trained with the same
hyper-parameters besides the number of glimpses.

MUTAN(5) is made of the three same MUTAN models
of MUTAN(3) and two MLB models which can be viewed
as a special case of our Multimodal Tucker Fusion. The
ﬁrst MLB has 2 glimpses and was trained on the trainval
split. It has been made available by the authors of [8] 2. The
second MLB has 4 glimpses and was trained by ourself on
the trainval split with the visual genome data augmentation.
The ﬁnal results of both ensembles are obtained by aver-
aging the features extracted before the ﬁnal Softmax layer
of all their models.

Scores details

In table 3, we provide the scores for each answer type
processed on the val and test-dev splits. In table 4, we pro-
vide the same scores for test-dev and test-standard.

*Equal contribution
1https://github.com/torch/optim/blob/master/

adam.lua

master/model

2https://github.com/jnhwkim/MulLowBiVQA/tree/

10

test-dev

val

Model
Concat
MCB
MLB
MUTAN noR
MUTAN
MUTAN+MLB

Θ
8.9
32
7.7
4.9
4.9
17.5

Y/N
79.25
80.81
82.02
81.44
81.45
82.29

No.
36.18
35.91
36.61
36.42
37.32
37.27

Other
46.69
46.43
46.65
46.86
47.17
48.23

All
58.91
59.40
60.08
59.92
60.17
61.02

Y/N
80.01
81.61
82.36
82.28
82.07
82.59

No.
33.72
33.94
34.35
35.07
35.16
35.21

Other
45.46
45.14
45.54
45.48
46.03
46.84

All
56.92
57.39
57.91
57.94
58.16
58.76

Table 3: Comparison between different fusion under the same setup on the test-dev split. Θ indicates the number of learnable
parameters (in million).

SMem 2-hop [27]
Ask Your Neur. [20]
SAN [30]
D-NMN [1]
ACK [26]
MRN [7]
HieCoAtt [17]
MCB (7) [5]
MLB (7) [8]
MUTAN (3)
MUTAN (5)

Y/N
80.87
78.39
79.3
81.1
81.01
82.28
79.7
83.4
84.54
84.57
85.14

test-dev

test-std

No.
37.32
36.45
36.6
38.6
38.42
38.82
38.7
39.8
39.21
39.32
39.81

Other
43.12
46.28
46.1
45.5
45.23
49.25
51.7
58.5
57.81
57.36
58.52

All
57.99
58.39
58.7
59.4
59.17
61.68
61.8
66.7
66.77
67.03
67.42

Y/N
80.0
78.24
-
-
81.07
82.39
-
83.2
84.61
84.39
84.91

No.
37.53
36.27
-
-
37.12
38.23
-
39.5
39.07
38.70
39.79

Other
43.48
46.32
-
-
45.83
49.41
-
58.0
57.79
58.20
58.35

All
58.24
58.43
58.9
59.4
59.44
61.84
62.1
66.5
66.89
66.96
67.36

Table 4: MUTAN performance comparison on the test-dev and test-standard splits VQA dataset; (n) for an ensemble of n
models.

