A guide to convolution arithmetic for deep
learning

Vincent Dumoulin1(cid:70) and Francesco Visin2(cid:70)†

(cid:70)MILA, Université de Montréal
†AIRLab, Politecnico di Milano

January 12, 2018

8
1
0
2
 
n
a
J
 
1
1
 
 
]
L
M

.
t
a
t
s
[
 
 
2
v
5
8
2
7
0
.
3
0
6
1
:
v
i
X
r
a

1dumouliv@iro.umontreal.ca
2francesco.visin@polimi.it

All models are wrong, but some
are useful.

George E. P. Box

2

Acknowledgements

The authors of this guide would like to thank David Warde-Farley,
Guillaume Alain and Caglar Gulcehre for their valuable feedback. We
are likewise grateful to all those who helped improve this tutorial with
helpful comments, constructive criticisms and code contributions. Keep
them coming!

Special thanks to Ethan Schoonover, creator of the Solarized color

scheme,1 whose colors were used for the ﬁgures.

Feedback

Your feedback is welcomed! We did our best to be as precise, infor-
mative and up to the point as possible, but should there be anything you
feel might be an error or could be rephrased to be more precise or com-
prehensible, please don’t refrain from contacting us. Likewise, drop us a
line if you think there is something that might ﬁt this technical report
and you would like us to discuss – we will make our best eﬀort to update
this document.

Source code and animations

The code used to generate this guide along with its ﬁgures is available
on GitHub.2 There the reader can also ﬁnd an animated version of the
ﬁgures.

1http://ethanschoonover.com/solarized
2https://github.com/vdumoulin/conv_arithmetic

3

Contents

1 Introduction

1.1 Discrete convolutions . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Pooling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2 Convolution arithmetic

. . . . . . . . . . . . . . . . . . . .
2.1 No zero padding, unit strides
2.2 Zero padding, unit strides . . . . . . . . . . . . . . . . . . . . . .
2.2.1 Half (same) padding . . . . . . . . . . . . . . . . . . . . .
2.2.2 Full padding . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 No zero padding, non-unit strides . . . . . . . . . . . . . . . . . .
2.4 Zero padding, non-unit strides . . . . . . . . . . . . . . . . . . . .

3 Pooling arithmetic

4 Transposed convolution arithmetic

4.1 Convolution as a matrix operation . . . . . . . . . . . . . . . . .
4.2 Transposed convolution . . . . . . . . . . . . . . . . . . . . . . .
4.3 No zero padding, unit strides, transposed . . . . . . . . . . . . .
4.4 Zero padding, unit strides, transposed . . . . . . . . . . . . . . .
4.4.1 Half (same) padding, transposed . . . . . . . . . . . . . .
4.4.2 Full padding, transposed . . . . . . . . . . . . . . . . . . .
4.5 No zero padding, non-unit strides, transposed . . . . . . . . . . .
4.6 Zero padding, non-unit strides, transposed . . . . . . . . . . . . .

5 Miscellaneous convolutions

5.1 Dilated convolutions . . . . . . . . . . . . . . . . . . . . . . . . .

5
6
10

12
12
13
13
13
15
15

18

19
20
20
21
22
22
22
24
24

28
28

4

Chapter 1

Introduction

Deep convolutional neural networks (CNNs) have been at the heart of spectac-
ular advances in deep learning. Although CNNs have been used as early as the
nineties to solve character recognition tasks (Le Cun et al., 1997), their current
widespread application is due to much more recent work, when a deep CNN
was used to beat state-of-the-art in the ImageNet image classiﬁcation challenge
(Krizhevsky et al., 2012).

Convolutional neural networks therefore constitute a very useful tool for ma-
chine learning practitioners. However, learning to use CNNs for the ﬁrst time
is generally an intimidating experience. A convolutional layer’s output shape
is aﬀected by the shape of its input as well as the choice of kernel shape, zero
padding and strides, and the relationship between these properties is not triv-
ial to infer. This contrasts with fully-connected layers, whose output size is
independent of the input size. Additionally, CNNs also usually feature a pool-
ing stage, adding yet another level of complexity with respect to fully-connected
networks. Finally, so-called transposed convolutional layers (also known as frac-
tionally strided convolutional layers) have been employed in more and more work
as of late (Zeiler et al., 2011; Zeiler and Fergus, 2014; Long et al., 2015; Rad-
ford et al., 2015; Visin et al., 2015; Im et al., 2016), and their relationship with
convolutional layers has been explained with various degrees of clarity.

This guide’s objective is twofold:

1. Explain the relationship between convolutional layers and transposed con-

volutional layers.

2. Provide an intuitive understanding of the relationship between input shape,
kernel shape, zero padding, strides and output shape in convolutional,
pooling and transposed convolutional layers.

In order to remain broadly applicable, the results shown in this guide are
independent of implementation details and apply to all commonly used machine
learning frameworks, such as Theano (Bergstra et al., 2010; Bastien et al., 2012),

5

Torch (Collobert et al., 2011), Tensorﬂow (Abadi et al., 2015) and Caﬀe (Jia
et al., 2014).

This chapter brieﬂy reviews the main building blocks of CNNs, namely dis-
crete convolutions and pooling. For an in-depth treatment of the subject, see
Chapter 9 of the Deep Learning textbook (Goodfellow et al., 2016).

1.1 Discrete convolutions

The bread and butter of neural networks is aﬃne transformations: a vector
is received as input and is multiplied with a matrix to produce an output (to
which a bias vector is usually added before passing the result through a non-
linearity). This is applicable to any type of input, be it an image, a sound
clip or an unordered collection of features: whatever their dimensionality, their
representation can always be ﬂattened into a vector before the transformation.
Images, sound clips and many other similar kinds of data have an intrinsic

structure. More formally, they share these important properties:

• They are stored as multi-dimensional arrays.

• They feature one or more axes for which ordering matters (e.g., width and

height axes for an image, time axis for a sound clip).

• One axis, called the channel axis, is used to access diﬀerent views of the
data (e.g., the red, green and blue channels of a color image, or the left
and right channels of a stereo audio track).

These properties are not exploited when an aﬃne transformation is applied;
in fact, all the axes are treated in the same way and the topological information
is not taken into account. Still, taking advantage of the implicit structure of
the data may prove very handy in solving some tasks, like computer vision and
speech recognition, and in these cases it would be best to preserve it. This is
where discrete convolutions come into play.

A discrete convolution is a linear transformation that preserves this notion
of ordering. It is sparse (only a few input units contribute to a given output
unit) and reuses parameters (the same weights are applied to multiple locations
in the input).

Figure 1.1 provides an example of a discrete convolution. The light blue
grid is called the input feature map. To keep the drawing simple, a single input
feature map is represented, but it is not uncommon to have multiple feature
maps stacked one onto another.1 A kernel (shaded area) of value

0

2

0

1

2

1

2

0

2

6

Figure 1.1: Computing the output values of a discrete convolution.

Figure 1.2: Computing the output values of a discrete convolution for N = 2,
i1 = i2 = 5, k1 = k2 = 3, s1 = s2 = 2, and p1 = p2 = 1.

7

slides across the input feature map. At each location, the product between
each element of the kernel and the input element it overlaps is computed and
the results are summed up to obtain the output in the current location. The
procedure can be repeated using diﬀerent kernels to form as many output feature
maps as desired (Figure 1.3). The ﬁnal outputs of this procedure are called
output feature maps.2 If there are multiple input feature maps, the kernel will
have to be 3-dimensional – or, equivalently each one of the feature maps will
be convolved with a distinct kernel – and the resulting feature maps will be
summed up elementwise to produce the output feature map.

The convolution depicted in Figure 1.1 is an instance of a 2-D convolution,
but it can be generalized to N-D convolutions. For instance, in a 3-D convolu-
tion, the kernel would be a cuboid and would slide across the height, width and
depth of the input feature map.

The collection of kernels deﬁning a discrete convolution has a shape corre-

sponding to some permutation of (n, m, k1, . . . , kN ), where

n ≡ number of output feature maps,

m ≡ number of input feature maps,
kj ≡ kernel size along axis j.

The following properties aﬀect the output size oj of a convolutional layer

along axis j:

• ij: input size along axis j,

• kj: kernel size along axis j,

• sj: stride (distance between two consecutive positions of the kernel) along

axis j,

• pj: zero padding (number of zeros concatenated at the beginning and at

the end of an axis) along axis j.

For instance, Figure 1.2 shows a 3 × 3 kernel applied to a 5 × 5 input padded
with a 1 × 1 border of zeros using 2 × 2 strides.

Note that strides constitute a form of subsampling. As an alternative to
being interpreted as a measure of how much the kernel is translated, strides can
also be viewed as how much of the output is retained. For instance, moving
the kernel by hops of two is equivalent to moving the kernel by hops of one but
retaining only odd output elements (Figure 1.4).

1An example of this is what was referred to earlier as channels for images and sound clips.
2While there is a distinction between convolution and cross-correlation from a signal pro-
cessing perspective, the two become interchangeable when the kernel is learned. For the sake
of simplicity and to stay consistent with most of the machine learning literature, the term
convolution will be used in this guide.

8

+

+

+

Figure 1.3: A convolution mapping from two input feature maps to three output
feature maps using a 3 × 2 × 3 × 3 collection of kernels w. In the left pathway,
input feature map 1 is convolved with kernel w1,1 and input feature map 2 is
convolved with kernel w1,2, and the results are summed together elementwise
to form the ﬁrst output feature map. The same is repeated for the middle and
right pathways to form the second and third feature maps, and all three output
feature maps are grouped together to form the output.

Figure 1.4: An alternative way of viewing strides. Instead of translating the
3 × 3 kernel by increments of s = 2 (left), the kernel is translated by increments
of 1 and only one in s = 2 output elements is retained (right).

9

1.2 Pooling

In addition to discrete convolutions themselves, pooling operations make up
another important building block in CNNs. Pooling operations reduce the size
of feature maps by using some function to summarize subregions, such as taking
the average or the maximum value.

Pooling works by sliding a window across the input and feeding the content
of the window to a pooling function. In some sense, pooling works very much
like a discrete convolution, but replaces the linear combination described by the
kernel with some other function. Figure 1.5 provides an example for average
pooling, and Figure 1.6 does the same for max pooling.

The following properties aﬀect the output size oj of a pooling layer along

axis j:

• ij: input size along axis j,

• kj: pooling window size along axis j,

• sj: stride (distance between two consecutive positions of the pooling win-

dow) along axis j.

10

Figure 1.5: Computing the output values of a 3 × 3 average pooling operation
on a 5 × 5 input using 1 × 1 strides.

Figure 1.6: Computing the output values of a 3 × 3 max pooling operation on
a 5 × 5 input using 1 × 1 strides.

11

Chapter 2

Convolution arithmetic

The analysis of the relationship between convolutional layer properties is eased
by the fact that they don’t interact across axes, i.e., the choice of kernel size,
stride and zero padding along axis j only aﬀects the output size of axis j.
Because of that, this chapter will focus on the following simpliﬁed setting:

• 2-D discrete convolutions (N = 2),

• square inputs (i1 = i2 = i),

• square kernel size (k1 = k2 = k),

• same strides along both axes (s1 = s2 = s),

• same zero padding along both axes (p1 = p2 = p).

This facilitates the analysis and the visualization, but keep in mind that the

results outlined here also generalize to the N-D and non-square cases.

2.1 No zero padding, unit strides

The simplest case to analyze is when the kernel just slides across every position
of the input (i.e., s = 1 and p = 0). Figure 2.1 provides an example for i = 4
and k = 3.

One way of deﬁning the output size in this case is by the number of possible
placements of the kernel on the input. Let’s consider the width axis: the kernel
starts on the leftmost part of the input feature map and slides by steps of one
until it touches the right side of the input. The size of the output will be equal
to the number of steps made, plus one, accounting for the initial position of the
kernel (Figure 2.8a). The same logic applies for the height axis.
More formally, the following relationship can be inferred:

12

Relationship 1. For any i and k, and for s = 1 and p = 0,

o = (i − k) + 1.

2.2 Zero padding, unit strides

To factor in zero padding (i.e., only restricting to s = 1), let’s consider its eﬀect
on the eﬀective input size: padding with p zeros changes the eﬀective input size
from i to i + 2p. In the general case, Relationship 1 can then be used to infer
the following relationship:

Relationship 2. For any i, k and p, and for s = 1,

o = (i − k) + 2p + 1.

Figure 2.2 provides an example for i = 5, k = 4 and p = 2.

In practice, two speciﬁc instances of zero padding are used quite extensively

because of their respective properties. Let’s discuss them in more detail.

2.2.1 Half (same) padding

Having the output size be the same as the input size (i.e., o = i) can be a
desirable property:

Relationship 3. For any i and for k odd (k = 2n + 1, n ∈ N),
s = 1 and p = (cid:98)k/2(cid:99) = n,

o = i + 2(cid:98)k/2(cid:99) − (k − 1)

= i + 2n − 2n

= i.

This is sometimes referred to as half (or same) padding. Figure 2.3 provides an
example for i = 5, k = 3 and (therefore) p = 1.

2.2.2 Full padding

While convolving a kernel generally decreases the output size with respect to
the input size, sometimes the opposite is required. This can be achieved with
proper zero padding:

Relationship 4. For any i and k, and for p = k − 1 and s = 1,

o = i + 2(k − 1) − (k − 1)

= i + (k − 1).

13

Figure 2.1:
input using unit strides (i.e., i = 4, k = 3, s = 1 and p = 0).

(No padding, unit strides) Convolving a 3 × 3 kernel over a 4 × 4

Figure 2.2:
(Arbitrary padding, unit strides) Convolving a 4 × 4 kernel over a
5 × 5 input padded with a 2 × 2 border of zeros using unit strides (i.e., i = 5,
k = 4, s = 1 and p = 2).

Figure 2.3: (Half padding, unit strides) Convolving a 3 × 3 kernel over a 5 × 5
input using half padding and unit strides (i.e., i = 5, k = 3, s = 1 and p = 1).

Figure 2.4:
input using full padding and unit strides (i.e., i = 5, k = 3, s = 1 and p = 2).

(Full padding, unit strides) Convolving a 3 × 3 kernel over a 5 × 5

14

This is sometimes referred to as full padding, because in this setting every
possible partial or complete superimposition of the kernel on the input feature
map is taken into account. Figure 2.4 provides an example for i = 5, k = 3 and
(therefore) p = 2.

2.3 No zero padding, non-unit strides

All relationships derived so far only apply for unit-strided convolutions.
In-
corporating non unitary strides requires another inference leap. To facilitate
the analysis, let’s momentarily ignore zero padding (i.e., s > 1 and p = 0).
Figure 2.5 provides an example for i = 5, k = 3 and s = 2.

Once again, the output size can be deﬁned in terms of the number of possible
placements of the kernel on the input. Let’s consider the width axis: the kernel
starts as usual on the leftmost part of the input, but this time it slides by steps
of size s until it touches the right side of the input. The size of the output is
again equal to the number of steps made, plus one, accounting for the initial
position of the kernel (Figure 2.8b). The same logic applies for the height axis.

From this, the following relationship can be inferred:

Relationship 5. For any i, k and s, and for p = 0,

o =

(cid:23)

(cid:22) i − k
s

+ 1.

The ﬂoor function accounts for the fact that sometimes the last possible step
does not coincide with the kernel reaching the end of the input, i.e., some input
units are left out (see Figure 2.7 for an example of such a case).

2.4 Zero padding, non-unit strides

The most general case (convolving over a zero padded input using non-unit
strides) can be derived by applying Relationship 5 on an eﬀective input of size
i + 2p, in analogy to what was done for Relationship 2:

Relationship 6. For any i, k, p and s,

o =

(cid:22) i + 2p − k
s

(cid:23)

+ 1.

As before, the ﬂoor function means that in some cases a convolution will produce
the same output size for multiple input sizes. More speciﬁcally, if i + 2p − k is
a ∈ {0, . . . , s − 1} will produce
a multiple of s, then any input size j = i + a,
the same output size. Note that this ambiguity applies only for s > 1.

Figure 2.6 shows an example with i = 5, k = 3, s = 2 and p = 1, while
Figure 2.7 provides an example for i = 6, k = 3, s = 2 and p = 1. Interestingly,

15

despite having diﬀerent input sizes these convolutions share the same output
size. While this doesn’t aﬀect the analysis for convolutions, this will complicate
the analysis in the case of transposed convolutions.

16

Figure 2.5: (No zero padding, arbitrary strides) Convolving a 3 × 3 kernel over
a 5 × 5 input using 2 × 2 strides (i.e., i = 5, k = 3, s = 2 and p = 0).

Figure 2.6:
(Arbitrary padding and strides) Convolving a 3 × 3 kernel over a
5 × 5 input padded with a 1 × 1 border of zeros using 2 × 2 strides (i.e., i = 5,
k = 3, s = 2 and p = 1).

(Arbitrary padding and strides) Convolving a 3 × 3 kernel over a
Figure 2.7:
6 × 6 input padded with a 1 × 1 border of zeros using 2 × 2 strides (i.e., i = 6,
k = 3, s = 2 and p = 1). In this case, the bottom row and right column of the
zero padded input are not covered by the kernel.

(a) The kernel has to slide two steps
to the right to touch the right side of
the input (and equivalently downwards).
Adding one to account for the initial ker-
nel position, the output size is 3 × 3.

(b) The kernel has to slide one step of
size two to the right to touch the right
side of the input (and equivalently down-
wards). Adding one to account for the
initial kernel position, the output size is
2 × 2.

Figure 2.8: Counting kernel positions.

17

Chapter 3

Pooling arithmetic

In a neural network, pooling layers provide invariance to small translations of
the input. The most common kind of pooling is max pooling, which consists
in splitting the input in (usually non-overlapping) patches and outputting the
maximum value of each patch. Other kinds of pooling exist, e.g., mean or
average pooling, which all share the same idea of aggregating the input locally
by applying a non-linearity to the content of some patches (Boureau et al.,
2010a,b, 2011; Saxe et al., 2011).

Some readers may have noticed that the treatment of convolution arithmetic
only relies on the assumption that some function is repeatedly applied onto
subsets of the input. This means that the relationships derived in the previous
chapter can be reused in the case of pooling arithmetic. Since pooling does not
involve zero padding, the relationship describing the general case is as follows:

Relationship 7. For any i, k and s,

o =

(cid:23)

(cid:22) i − k
s

+ 1.

This relationship holds for any type of pooling.

18

Chapter 4

Transposed convolution
arithmetic

The need for transposed convolutions generally arises from the desire to use a
transformation going in the opposite direction of a normal convolution, i.e., from
something that has the shape of the output of some convolution to something
that has the shape of its input while maintaining a connectivity pattern that
is compatible with said convolution. For instance, one might use such a trans-
formation as the decoding layer of a convolutional autoencoder or to project
feature maps to a higher-dimensional space.

Once again, the convolutional case is considerably more complex than the
fully-connected case, which only requires to use a weight matrix whose shape has
been transposed. However, since every convolution boils down to an eﬃcient im-
plementation of a matrix operation, the insights gained from the fully-connected
case are useful in solving the convolutional case.

Like for convolution arithmetic, the dissertation about transposed convolu-
tion arithmetic is simpliﬁed by the fact that transposed convolution properties
don’t interact across axes.

The chapter will focus on the following setting:

• 2-D transposed convolutions (N = 2),

• square inputs (i1 = i2 = i),

• square kernel size (k1 = k2 = k),

• same strides along both axes (s1 = s2 = s),

• same zero padding along both axes (p1 = p2 = p).

Once again, the results outlined generalize to the N-D and non-square cases.

19

4.1 Convolution as a matrix operation

Take for example the convolution represented in Figure 2.1. If the input and
output were to be unrolled into vectors from left to right, top to bottom, the
convolution could be represented as a sparse matrix C where the non-zero ele-
ments are the elements wi,j of the kernel (with i and j being the row and column
of the kernel respectively):







0
0
0

w0,0 w0,1 w0,2

0

w1,0 w1,1 w1,2

w2,0 w2,1 w2,2

w0,0 w0,1 w0,2
0
0

0
0

0
0

0

0

w1,0 w1,1 w1,2

w2,0 w2,1 w2,2

w0,0 w0,1 w0,2

w1,0 w1,1 w1,2

w0,0 w0,1 w0,2

w1,0 w1,1 w1,2

0

w2,0 w2,1 w2,2

0

0

0
0

0
0
w2,0 w2,1 w2,2

0
0

0
0
0







0

0

0

0

This linear operation takes the input matrix ﬂattened as a 16-dimensional
vector and produces a 4-dimensional vector that is later reshaped as the 2 × 2
output matrix.

Using this representation, the backward pass is easily obtained by trans-
posing C; in other words, the error is backpropagated by multiplying the loss
with CT . This operation takes a 4-dimensional vector as input and produces
a 16-dimensional vector as output, and its connectivity pattern is compatible
with C by construction.

Notably, the kernel w deﬁnes both the matrices C and CT used for the

forward and backward passes.

4.2 Transposed convolution

Let’s now consider what would be required to go the other way around, i.e.,
map from a 4-dimensional space to a 16-dimensional space, while keeping the
connectivity pattern of the convolution depicted in Figure 2.1. This operation
is known as a transposed convolution.

Transposed convolutions – also called fractionally strided convolutions or
deconvolutions 1 – work by swapping the forward and backward passes of a con-
volution. One way to put it is to note that the kernel deﬁnes a convolution, but
whether it’s a direct convolution or a transposed convolution is determined by
how the forward and backward passes are computed.

For instance, although the kernel w deﬁnes a convolution whose forward and
backward passes are computed by multiplying with C and CT respectively, it
also deﬁnes a transposed convolution whose forward and backward passes are
computed by multiplying with CT and (CT )T = C respectively.2

Finally note that it is always possible to emulate a transposed convolution
with a direct convolution. The disadvantage is that it usually involves adding

1The term “deconvolution” is sometimes used in the literature, but we advocate against it
on the grounds that a deconvolution is mathematically deﬁned as the inverse of a convolution,
which is diﬀerent from a transposed convolution.

2The transposed convolution operation can be thought of as the gradient of some convolu-
tion with respect to its input, which is usually how transposed convolutions are implemented
in practice.

20

many columns and rows of zeros to the input, resulting in a much less eﬃcient
implementation.

Building on what has been introduced so far, this chapter will proceed some-
what backwards with respect to the convolution arithmetic chapter, deriving the
properties of each transposed convolution by referring to the direct convolution
with which it shares the kernel, and deﬁning the equivalent direct convolution.

4.3 No zero padding, unit strides, transposed

The simplest way to think about a transposed convolution on a given input is
to imagine such an input as being the result of a direct convolution applied on
some initial feature map. The trasposed convolution can be then considered as
the operation that allows to recover the shape 3 of this initial feature map.

Let’s consider the convolution of a 3 × 3 kernel on a 4 × 4 input with unitary
stride and no padding (i.e., i = 4, k = 3, s = 1 and p = 0). As depicted in
Figure 2.1, this produces a 2 × 2 output. The transpose of this convolution will
then have an output of shape 4 × 4 when applied on a 2 × 2 input.

Another way to obtain the result of a transposed convolution is to apply an
equivalent – but much less eﬃcient – direct convolution. The example described
so far could be tackled by convolving a 3 × 3 kernel over a 2 × 2 input padded
with a 2 × 2 border of zeros using unit strides (i.e., i(cid:48) = 2, k(cid:48) = k, s(cid:48) = 1 and
p(cid:48) = 2), as shown in Figure 4.1. Notably, the kernel’s and stride’s sizes remain
the same, but the input of the transposed convolution is now zero padded.4

One way to understand the logic behind zero padding is to consider the
connectivity pattern of the transposed convolution and use it to guide the design
of the equivalent convolution. For example, the top left pixel of the input of the
direct convolution only contribute to the top left pixel of the output, the top
right pixel is only connected to the top right output pixel, and so on.

To maintain the same connectivity pattern in the equivalent convolution it is
necessary to zero pad the input in such a way that the ﬁrst (top-left) application
of the kernel only touches the top-left pixel, i.e., the padding has to be equal to
the size of the kernel minus one.

Proceeding in the same fashion it is possible to determine similar observa-
tions for the other elements of the image, giving rise to the following relationship:

3Note that the transposed convolution does not guarantee to recover the input itself, as it
is not deﬁned as the inverse of the convolution, but rather just returns a feature map that has
the same width and height.

4Note that although equivalent to applying the transposed matrix, this visualization adds
a lot of zero multiplications in the form of zero padding. This is done here for illustration
purposes, but it is ineﬃcient, and software implementations will normally not perform the
useless zero multiplications.

21

Relationship 8. A convolution described by s = 1, p = 0 and k
has an associated transposed convolution described by k(cid:48) = k, s(cid:48) = s
and p(cid:48) = k − 1 and its output size is

o(cid:48) = i(cid:48) + (k − 1).

Interestingly, this corresponds to a fully padded convolution with unit strides.

4.4 Zero padding, unit strides, transposed

Knowing that the transpose of a non-padded convolution is equivalent to con-
volving a zero padded input, it would be reasonable to suppose that the trans-
pose of a zero padded convolution is equivalent to convolving an input padded
with less zeros.

It is indeed the case, as shown in Figure 4.2 for i = 5, k = 4 and p = 2.
Formally, the following relationship applies for zero padded convolutions:

Relationship 9. A convolution described by s = 1, k and p has an
associated transposed convolution described by k(cid:48) = k, s(cid:48) = s and
p(cid:48) = k − p − 1 and its output size is

o(cid:48) = i(cid:48) + (k − 1) − 2p.

4.4.1 Half (same) padding, transposed

By applying the same inductive reasoning as before, it is reasonable to expect
that the equivalent convolution of the transpose of a half padded convolution
is itself a half padded convolution, given that the output size of a half padded
convolution is the same as its input size. Thus the following relation applies:

Relationship 10. A convolution described by k = 2n + 1, n ∈ N,
s = 1 and p = (cid:98)k/2(cid:99) = n has an associated transposed convolution
described by k(cid:48) = k, s(cid:48) = s and p(cid:48) = p and its output size is

o(cid:48) = i(cid:48) + (k − 1) − 2p
= i(cid:48) + 2n − 2n
= i(cid:48).

Figure 4.3 provides an example for i = 5, k = 3 and (therefore) p = 1.

4.4.2 Full padding, transposed

Knowing that the equivalent convolution of the transpose of a non-padded con-
volution involves full padding, it is unsurprising that the equivalent of the trans-
pose of a fully padded convolution is a non-padded convolution:

22

Figure 4.1: The transpose of convolving a 3 × 3 kernel over a 4 × 4 input using
unit strides (i.e., i = 4, k = 3, s = 1 and p = 0). It is equivalent to convolving
a 3 × 3 kernel over a 2 × 2 input padded with a 2 × 2 border of zeros using unit
strides (i.e., i(cid:48) = 2, k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = 2).

Figure 4.2: The transpose of convolving a 4 × 4 kernel over a 5 × 5 input padded
with a 2 × 2 border of zeros using unit strides (i.e., i = 5, k = 4, s = 1 and
p = 2). It is equivalent to convolving a 4 × 4 kernel over a 6 × 6 input padded
with a 1 × 1 border of zeros using unit strides (i.e., i(cid:48) = 6, k(cid:48) = k, s(cid:48) = 1 and
p(cid:48) = 1).

Figure 4.3: The transpose of convolving a 3 × 3 kernel over a 5 × 5 input using
It is
half padding and unit strides (i.e., i = 5, k = 3, s = 1 and p = 1).
equivalent to convolving a 3 × 3 kernel over a 5 × 5 input using half padding
and unit strides (i.e., i(cid:48) = 5, k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = 1).

23

Relationship 11. A convolution described by s = 1, k and p = k−1
has an associated transposed convolution described by k(cid:48) = k, s(cid:48) = s
and p(cid:48) = 0 and its output size is

o(cid:48) = i(cid:48) + (k − 1) − 2p

= i(cid:48) − (k − 1)

Figure 4.4 provides an example for i = 5, k = 3 and (therefore) p = 2.

4.5 No zero padding, non-unit strides, transposed

Using the same kind of inductive logic as for zero padded convolutions, one
might expect that the transpose of a convolution with s > 1 involves an equiv-
alent convolution with s < 1. As will be explained, this is a valid intuition,
which is why transposed convolutions are sometimes called fractionally strided
convolutions.

Figure 4.5 provides an example for i = 5, k = 3 and s = 2 which helps
understand what fractional strides involve: zeros are inserted between input
units, which makes the kernel move around at a slower pace than with unit
strides.5

For the moment, it will be assumed that the convolution is non-padded
(p = 0) and that its input size i is such that i − k is a multiple of s. In that
case, the following relationship holds:

Relationship 12. A convolution described by p = 0, k and s and
whose input size is such that i−k is a multiple of s, has an associated
transposed convolution described by ˜i(cid:48), k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = k − 1,
where ˜i(cid:48) is the size of the stretched input obtained by adding s − 1
zeros between each input unit, and its output size is

o(cid:48) = s(i(cid:48) − 1) + k.

4.6 Zero padding, non-unit strides, transposed

When the convolution’s input size i is such that i + 2p − k is a multiple of s,
the analysis can extended to the zero padded case by combining Relationship 9
and Relationship 12:

5Doing so is ineﬃcient and real-world implementations avoid useless multiplications by

zero, but conceptually it is how the transpose of a strided convolution can be thought of.

24

Figure 4.4: The transpose of convolving a 3 × 3 kernel over a 5 × 5 input using
full padding and unit strides (i.e., i = 5, k = 3, s = 1 and p = 2). It is equivalent
to convolving a 3 × 3 kernel over a 7 × 7 input using unit strides (i.e., i(cid:48) = 7,
k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = 0).

Figure 4.5: The transpose of convolving a 3 × 3 kernel over a 5 × 5 input using
2 × 2 strides (i.e., i = 5, k = 3, s = 2 and p = 0). It is equivalent to convolving
a 3 × 3 kernel over a 2 × 2 input (with 1 zero inserted between inputs) padded
with a 2 × 2 border of zeros using unit strides (i.e., i(cid:48) = 2, ˜i(cid:48) = 3, k(cid:48) = k, s(cid:48) = 1
and p(cid:48) = 2).

Figure 4.6: The transpose of convolving a 3 × 3 kernel over a 5 × 5 input padded
with a 1 × 1 border of zeros using 2 × 2 strides (i.e., i = 5, k = 3, s = 2 and
p = 1). It is equivalent to convolving a 3 × 3 kernel over a 3 × 3 input (with
1 zero inserted between inputs) padded with a 1 × 1 border of zeros using unit
strides (i.e., i(cid:48) = 3, ˜i(cid:48) = 5, k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = 1).

25

Relationship 13. A convolution described by k, s and p and whose
input size i is such that i + 2p − k is a multiple of s has an associated
transposed convolution described by ˜i(cid:48), k(cid:48) = k, s(cid:48) = 1 and p(cid:48) =
k − p − 1, where ˜i(cid:48) is the size of the stretched input obtained by
adding s − 1 zeros between each input unit, and its output size is

o(cid:48) = s(i(cid:48) − 1) + k − 2p.

Figure 4.6 provides an example for i = 5, k = 3, s = 2 and p = 1.
The constraint on the size of the input i can be relaxed by introducing
another parameter a ∈ {0, . . . , s − 1} that allows to distinguish between the s
diﬀerent cases that all lead to the same i(cid:48):

Relationship 14. A convolution described by k, s and p has an
associated transposed convolution described by a, ˜i(cid:48), k(cid:48) = k, s(cid:48) = 1
and p(cid:48) = k − p − 1, where ˜i(cid:48) is the size of the stretched input obtained
by adding s − 1 zeros between each input unit, and a = (i + 2p − k)
mod s represents the number of zeros added to the bottom and right
edges of the input, and its output size is

o(cid:48) = s(i(cid:48) − 1) + a + k − 2p.

Figure 4.7 provides an example for i = 6, k = 3, s = 2 and p = 1.

26

Figure 4.7: The transpose of convolving a 3 × 3 kernel over a 6 × 6 input padded
with a 1 × 1 border of zeros using 2 × 2 strides (i.e., i = 6, k = 3, s = 2 and
p = 1). It is equivalent to convolving a 3 × 3 kernel over a 2 × 2 input (with
1 zero inserted between inputs) padded with a 1 × 1 border of zeros (with an
additional border of size 1 added to the bottom and right edges) using unit
strides (i.e., i(cid:48) = 3, ˜i(cid:48) = 5, a = 1, k(cid:48) = k, s(cid:48) = 1 and p(cid:48) = 1).

27

Chapter 5

Miscellaneous convolutions

5.1 Dilated convolutions

Readers familiar with the deep learning literature may have noticed the term
“dilated convolutions” (or “atrous convolutions”, from the French expression con-
volutions à trous) appear in recent papers. Here we attempt to provide an in-
tuitive understanding of dilated convolutions. For a more in-depth description
and to understand in what contexts they are applied, see Chen et al. (2014); Yu
and Koltun (2015).

Dilated convolutions “inﬂate” the kernel by inserting spaces between the ker-
nel elements. The dilation “rate” is controlled by an additional hyperparameter
d. Implementations may vary, but there are usually d−1 spaces inserted between
kernel elements such that d = 1 corresponds to a regular convolution.

Dilated convolutions are used to cheaply increase the receptive ﬁeld of output
units without increasing the kernel size, which is especially eﬀective when multi-
ple dilated convolutions are stacked one after another. For a concrete example,
see Oord et al. (2016), in which the proposed WaveNet model implements an
autoregressive generative model for raw audio which uses dilated convolutions
to condition new audio frames on a large context of past audio frames.

To understand the relationship tying the dilation rate d and the output size
o, it is useful to think of the impact of d on the eﬀective kernel size. A kernel
of size k dilated by a factor d has an eﬀective size

ˆk = k + (k − 1)(d − 1).

This can be combined with Relationship 6 to form the following relationship for
dilated convolutions:

Relationship 15. For any i, k, p and s, and for a dilation rate d,

o =

(cid:22) i + 2p − k − (k − 1)(d − 1)
s

(cid:23)

+ 1.

28

Figure 5.1: (Dilated convolution) Convolving a 3 × 3 kernel over a 7 × 7 input
with a dilation factor of 2 (i.e., i = 7, k = 3, d = 2, s = 1 and p = 0).

Figure 5.1 provides an example for i = 7, k = 3 and d = 2.

29

Bibliography

Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Corrado,
G. S., Davis, A., Dean, J., Devin, M., et al. (2015). Tensorﬂow: Large-
scale machine learning on heterogeneous systems. Software available from
tensorﬂow.org.

Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I., Bergeron,
A., Bouchard, N., Warde-Farley, D., and Bengio, Y. (2012). Theano: new
features and speed improvements. arXiv preprint arXiv:1211.5590 .

Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins,
G., Turian, J., Warde-Farley, D., and Bengio, Y. (2010). Theano: A cpu and
gpu math compiler in python. In Proc. 9th Python in Science Conf , pages
1–7.

Boureau, Y., Bach, F., LeCun, Y., and Ponce, J. (2010a). Learning mid-level
features for recognition. In Proc. International Conference on Computer Vi-
sion and Pattern Recognition (CVPR’10). IEEE.

Boureau, Y., Ponce, J., and LeCun, Y. (2010b). A theoretical analysis of feature
pooling in vision algorithms. In Proc. International Conference on Machine
learning (ICML’10).

Boureau, Y., Le Roux, N., Bach, F., Ponce, J., and LeCun, Y. (2011). Ask the
locals: multi-way local pooling for image recognition. In Proc. International
Conference on Computer Vision (ICCV’11). IEEE.

Chen, L.-C., Papandreou, G., Kokkinos, I., Murphy, K., and Yuille, A. L. (2014).
Semantic image segmentation with deep convolutional nets and fully con-
nected crfs. arXiv preprint arXiv:1412.7062 .

Collobert, R., Kavukcuoglu, K., and Farabet, C. (2011). Torch7: A matlab-like
In BigLearn, NIPS Workshop, number

environment for machine learning.
EPFL-CONF-192376.

Goodfellow, I., Bengio, Y., and Courville, A. (2016). Deep learning. Book in

preparation for MIT Press.

30

Im, D. J., Kim, C. D., Jiang, H., and Memisevic, R. (2016). Generating images

with recurrent adversarial networks. arXiv preprint arXiv:1602.05110 .

Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R., Guadar-
rama, S., and Darrell, T. (2014). Caﬀe: Convolutional architecture for fast
feature embedding. In Proceedings of the ACM International Conference on
Multimedia, pages 675–678. ACM.

Krizhevsky, A., Sutskever, I., and Hinton, G. E. (2012). Imagenet classiﬁcation
with deep convolutional neural networks. In Advances in neural information
processing systems, pages 1097–1105.

Le Cun, Y., Bottou, L., and Bengio, Y. (1997). Reading checks with multilayer
In Acoustics, Speech, and Signal Processing,
graph transformer networks.
1997. ICASSP-97., 1997 IEEE International Conference on, volume 1, pages
151–154. IEEE.

Long, J., Shelhamer, E., and Darrell, T. (2015). Fully convolutional networks for
semantic segmentation. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 3431–3440.

Oord, A. v. d., Dieleman, S., Zen, H., Simonyan, K., Vinyals, O., Graves, A.,
Kalchbrenner, N., Senior, A., and Kavukcuoglu, K. (2016). Wavenet: A
generative model for raw audio. arXiv preprint arXiv:1609.03499 .

Radford, A., Metz, L., and Chintala, S. (2015). Unsupervised representa-
tion learning with deep convolutional generative adversarial networks. arXiv
preprint arXiv:1511.06434 .

Saxe, A., Koh, P. W., Chen, Z., Bhand, M., Suresh, B., and Ng, A. (2011).
On random weights and unsupervised feature learning.
In L. Getoor and
T. Scheﬀer, editors, Proceedings of the 28th International Conference on Ma-
chine Learning (ICML-11), ICML ’11, pages 1089–1096, New York, NY, USA.
ACM.

Visin, F., Kastner, K., Courville, A. C., Bengio, Y., Matteucci, M., and Cho,

K. (2015). Reseg: A recurrent neural network for object segmentation.

Yu, F. and Koltun, V. (2015). Multi-scale context aggregation by dilated con-

volutions. arXiv preprint arXiv:1511.07122 .

Zeiler, M. D. and Fergus, R. (2014). Visualizing and understanding convolu-
tional networks. In Computer vision–ECCV 2014 , pages 818–833. Springer.

Zeiler, M. D., Taylor, G. W., and Fergus, R. (2011). Adaptive deconvolutional
networks for mid and high level feature learning. In Computer Vision (ICCV),
2011 IEEE International Conference on, pages 2018–2025. IEEE.

31

