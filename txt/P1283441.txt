6
1
0
2
 
g
u
A
 
6
2
 
 
]

V
C
.
s
c
[
 
 
1
v
0
7
4
7
0
.
8
0
6
1
:
v
i
X
r
a

1

A Fast Ellipse Detector Using Projective
Invariant Pruning

Qi Jia, Xin Fan, Member, IEEE, Zhongxuan Luo, Lianbo Song, and Tie Qiu

Abstract—Detecting elliptical objects from an image is a central task in robot navigation and industrial diagnosis where the detection
time is always a critical issue. Existing methods are hardly applicable to these real-time scenarios of limited hardware resource due to
the huge number of fragment candidates (edges or arcs) for ﬁtting ellipse equations. In this paper, we present a fast algorithm detecting
ellipses with high accuracy. The algorithm leverage a newly developed projective invariant to signiﬁcantly prune the undesired
candidates and to pick out elliptical ones. The invariant is able to reﬂect the intrinsic geometry of a planar curve, giving the value of −1
on any three collinear points and +1 for any six points on an ellipse. Thus, we apply the pruning and picking by simply comparing these
binary values. Moreover, the calculation of the invariant only involves the determinant of a 3 × 3 matrix. Extensive experiments on three
challenging data sets with 650 images demonstrate that our detector runs 20%-50% faster than the state-of-the-art algorithms with the
comparable or higher precision.

Index Terms—Ellipse detection, Projective invariant, Real-time.

(cid:70)

1 INTRODUCTION

E LLIPSES are quite common in natural or artiﬁcial scenes. The

detection of ellipses in a fast and reliable manner from real
world images provides a powerful analysis tool for many computer
vision applications such as wheels detection [1], biological cell di-
vision [2], and object segmentation for industrial applications [3].
Ellipse detection still remains unresolved as one of the classical
tasks with long history. Most existing methods perform far from
real time, which hinder their applications in reality.

The earliest ellipse detection algorithm dates back to the
classical Hough transform (HT) that ﬁts the parametric form of
an ellipse using a voting scheme [4]. The standard HT approach
extracts ellipses by ﬁnding the clusters in a ﬁve-dimensional
(5D) parametric space, consuming a great deal of memory and
time. The randomized HT (RHT) improves the performance by
reducing the number of false alarms [5]. The iterative RHT (IRHT)
speeds up RHT so signiﬁcant by focusing on the candidates
likely to be an ellipse that it only needs 1-D accumulators [6].
However, both RHT and IRHT are still quite slow attributing to the
voting processing among numerous candidates, and the geometry
relationships between points are also neglected during voting.

Researchers introduce algebraic or geometric constraints on
points of an ellipse to screening candidates. Liang et al. [7] intro-
duce the maximum correntropy criterion into the constrained least-
square ﬁtting to alleviate the inﬂuence of outliers. Mulleti et al. [8]
use the ﬁnite rate of innovation sampling principle to ﬁt noisy
or partial ellipse. Both methods produce ellipses with less bias.
However, they can only work on the image with one single
ellipse. Xie and Ji exploit the symmetry of two points on ellipse,

• Q. Jia, X. Fan, Z. Luo, L. Song, and T. Qiu are with the School of Software,
Dalian University of Technology, China, and also with the Key Laboratory
for Ubiquitous Network and Service Software of Liaoning Province.
E-mail: xin.fan@ieee.org
Z. Luo is also with the School of Mathematical Sciences, Dalian University
of Technology, China.
This work was supported in part by the National Natural Science Founda-
tion of China under Grant 61402077, Grant 61432003, Grant 61328206,
Grant 11171052.

•

•

reducing the voting parameter to one [9]. However, it is time-
prohibitive to enumerate every point pairs as elliptical candidates.
Basca et al. [10] accelerate Xie et al.’s method with RHT by
considering only a small random subset of initial point pairs.
Zhang and Liu [11] use edge directional properties to reduce point
combinations that lie out of the same ellipse boundary.

Many methods take into account the geometric constraints on
arc segments as the symmetry between points brings too many
candidate pairs. Kim et al. [12] extract arc segments approximated
by short straight lines. Libuda et al. [13] and Prasad et al. [14]
improve Kim et al.’s method with less memory usage. However,
these candidate arcs connecting short line segments may merge
intersected arcs from different ellipses, resulting in lower pre-
cisions [12], [13]. Nguyen et al. [15] detect ellipses upon arcs
by edge grouping. Their method is able to handle incomplete
ellipses, but fails to detect ellipses splitting into many short
arcs. Some other works formulate the mergence of elliptical arcs
as an assignment problem, and iteratively correct the detection
results [16], [17], [18]. These methods have high detection rates,
but suffer from heavy computational costs. Prasad et al. [19]
merge elliptical arcs with the relationship score given by the
center of the ellipse ﬁtting the arcs. Recently, Fornaciari et al. [20]
develop an ellipse detector that classiﬁes elliptical arcs into four
groups and estimates the ellipse parameters using the decomposed
parameter space. There are still a number of candidate arcs in
each group while their method renders a relatively faster detection
than previous methods. Especially, it is quite time consuming to
calculate every possible combinations of arcs from each group,
not to mention that many of them are wrong combinations.

All aforementioned methods start the estimation from points
or arcs with their positional constraints. Actually, there exist more
constraints whether points or arcs are amenable to the analytical
ellipse equation. In [21], RANSAC is used to randomly choose
ﬁve points repeatedly until the ellipse determined by these ﬁve
points closely passes through a maximum number of edge points.
This method is inefﬁcient as there exist so many combinations of
ﬁve points and one has to calculate ellipse parameters for each

ﬁve-point combination. Instead of directly calculating the ellipse
parameters, Liu and Hu [22] use geometric distances of points
to a conic in order to evaluate the similarity between any two
of selected arcs. There are still a large number of wrong arcs
combinations, and the computation of distances between points
and arcs lower down its efﬁciency.

In this paper, we circumvent the high computational load by
pruning and picking candidates using a projective invariant, named
characteristic number (CN) [23]. The projective invariance of CN
is introduced in [24] acting as geometric constraints for ﬁducial
point localization under face pose changes. Later, Jia et al. employ
this invariant property to construct a shape descriptor robust to
perspective deformations [25]. For the ﬁrst time, we explicitly
take the advantage of the CN property giving the characterization
of the intrinsic geometry of an underlying planar curve of points.
The invariant gives the value of −1 on any three collinear points
and +1 for any six points on a conic (ellipse or other conic curves).
We are able to efﬁciently pruning straight lines and to determine
whether non-collinear six points belong to the same conic without
need of analytically ﬁtting nor voting. The calculation of CN is
also quite fast since the determinants of 3 × 3 matrices constitute
the primitives of CN.

Figure 1(b) illustrates the pruning and picking on an input
image with a bunches of ellipses in Fig. 1(a). Candidate arc
segments appear different colors, and we are able to prune those
line segments having the CN value −1. We use six points on
two arc segments, three on each, to calculate a CN value. The
points on the bold arcs in pink and blue form the light brown
triangle, while those on blue and green bold arcs generate the light
green triangle. These triangles (closed loops) formed by auxiliary
lines connecting arc points are necessary for CN calculation.
The six points on the arc pairs from the same ellipse, e.g., the
blue and green pair in Fig. 1(b), give the CN value +1. Thus,
the arcs belonging to one ellipse easily pop out by CN values,
and Fig. 1(c) shows the ellipse candidates formed by these picked
arc segments. Figure 1(d) presents the ﬁnal detection results by
further ellipse ﬁtting and validation. The proposed method is
robust with high efﬁciency, suitable for real-time applications as
validated in experiments.

The rest of this paper is organized as follows. Section 2
introduces the characteristic number (CN) and its property on lines
and conic curves. Section 3 elaborates our fast ellipse detection
algorithm with line pruning and arc picking using CN. Section 4
demonstrates experimental evaluations on accuracy and efﬁciency.
Section 5 concludes the paper.

2 CHARACTERISTIC NUMBER ON LINE AND CONIC
In this section, we ﬁrst introduce the general deﬁnition of the
characteristic number (CN), and give its computation on three
collinear points (CNL) and six points in a conic curve (CNC),
respectively. Also, we present the CN properties for these two
conﬁgurations, the key to efﬁciently pruning line segments and
picking candidates for elliptical arcs.

2.1 Characteristic number

The characteristic number extends the classical cross ratio in
various respects, and reﬂects the intrinsic geometry underlying
given points. The CN value of three collinear points is −1, while
six points lying on a conic curve have a common CN value +1.
We give the deﬁnition of CN below [23].

2

(1)

(2)

1 , Q(1)
3 . Three pairwise intersecting lines a, b and c form a closed loop

Fig. 2. Characteristic number on three collinear points (CNL), Q(1)
and Q(1)
(cid:52)P1P2P3.

2

Deﬁnition 1 Let Pm be m-dimension projective space over
K, and P1, P2, . . . , Pr be r distinct points in Pm that con-
struct a closed loop (Pr+1 = P1). There are n distinct points
Q(1)
on the line segment PiPi+1, i = 1, . . . , r. Each
i
point Q(j)

i
can be linearly represented by Pi and Pi+1 as

, . . . Q(n)

i

Q(j)

i = a(j)

i Pi + b(j)

i Pi+1.

Let P = {Pi}r

i=1 and Q= {Q(j)

i }j=1,...,n

i=1,...,r , the quantity

CN (P, Q) =

r
(cid:89)

(cid:32) n
(cid:89)

i=1

j=1

(cid:33)
,

b(j)
i
a(j)
i

is deﬁned as the characteristic number of P and Q.

The classical cross ratio is a special case of CN when r = 2
and n = 2. The characteristic number is proven to be a projective
invariant, meaning that CN values keep unchanged under projec-
tive/perspective transformations.

The deﬁnition of CN requires a closed loop with r sides,
and the number of points Q(j) at every side has to be identical.
Subsequently, we draw auxiliary lines to set up this geometric
conﬁguration required for calculating CN on three collinear points
and six points on a conic curve (ellipse).

2.2 Characteristic number on three collinear points

Three pairwise intersecting lines a, b and c intersect at three points
P1, P2 and P3, forming a closed loop. These three lines intersect
another line l at three points Q(1)
1 , Q(1)
3 , as shown
in Fig. 2. According to Deﬁnition 1, Q(1)
and Q(1)
can
3
be linearly represented by P1, P2 and P3 as:

1 , Q(1)

and Q(1)

2

2






Q1
Q2
Q3

(1) = a1
(1) = a2
(1) = a3

(1)P1 + b1
(1)P2 + b2
(1)P3 + b3

(1)P2,
(1)P3,
(1)P1,

(3)

(a)

(b)

(c)

(d)

Fig. 1. Ellipse detection process: (a) input image, (b) line pruning and arc picking, (c) candidate ellipse given by picked arcs, and (d) ﬁnal detection
with parameter ﬁtting and ellipse validation.

3

(6)

(8)

Similar to (3), each point of {Qi
linearly represented by a pair of points from {P1, P2, P3}.

(j)|i = 1, 2, 3; j = 1, 2} can be

Q1
Q1
Q2
Q2
Q3
Q3

(1) = a1
(2) = a1
(1) = a2
(2) = a2
(1) = a3
(2) = a3

(1)P1 + b1
(2)P1 + b1
(1)P2 + b2
(2)P2 + b2
(1)P3 + b3
(2)P3 + b3

(1)P2,
(2)P2,
(1)P3,
(2)P3,
(1)P1,
(2)P1.

We have the characteristic number on six points of a conic (CNC)
and b(j)
as (7) by substituting the representation coefﬁcients a(j)
into (2), and the CNC value equals +1. We apply this property of
CN to pick arc segments likely lying on an ellipse.

i

i

CN C(P, Q) =

= 1.

(7)

3
(cid:89)

2
(cid:89)

i=1

j=1

b(j)
i
a(j)
i

We provide a simple proof to CN C(P, Q) = +1 based on

Pascal’s hexagon theorem [26] as below.

Proof Let {Qi

(j)|i = 1, 2, 3; j = 1, 2} be six points on a
conic. As shown in Fig. 3, we can obtain three more intersections
as





R1 =< Q(2)
R2 =< Q(1)
R3 =< Q(2)

2 Q(1)
1 Q(2)
1 Q(1)

3 , P1P2 >,
3 , P2P3 >,
2 , P1P3 > .

Then R1, R2, and R3 can be represented by {Qi

(j)|i =
1, 2, 3; j = 1, 2} and {P1, P2, P3} through simple calculations
as






R1 = −|Q2
R2 = −|Q1
R3 = −|Q1

(2), Q3
(1), Q3
(2), Q2

(1), P2|P1 + |Q2
(2), P3|P2 + |Q1
(1), P3|P1 + |Q1

(2), Q3
(1), Q3
(2), Q2

(1), P1|P2,
(2), P2|P3,
(1), P1|P3,

(9)

where we use homogeneous coordination to represent a planar
point as A = [A(x), A(y), A(z)]T , and |A, B, C| denotes the
determinant of the 3 × 3 matrix given by the homogeneous
coordinates of the three points A, B and C as

|A, B, C| =

(10)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

A(x) B(x) C(x)
A(y) B(y) C(y)
A(z) B(z) C(z)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

.

Fig. 3. Characteristic number on six points of a conic (CNC). The closed
loop (cid:52)P1P2P3 intersects a conic (ellipse) at two points on each side
(j)|i = 1, 2, 3; j = 1, 2}. The points Ri(i = 1, 2, 3) are auxiliary
as {Qi
points to prove CN C = +1.

Substituting the coefﬁcients into (2), we calculate CN on three
collinear points (CNL) as (4). It can be proved that the CN value
and Q(1)
equals to −1 if Q(1)
3

are collinear [24].

1 , Q(1)

2

CN L(P, Q) = CN (P, Q) =

= −1,

(4)

3
(cid:89)

i=1

(1)

(1)

bi
ai

The proof process also implies that the calculation of CNL is
achieved by the determinant of a 3 × 3 matrix. In this study, we
use this property to prune line segments in ellipse detection.

2.3 Characteristic number on six points of a conic

(1)Q1

(1)Q1

(2), and the intersection of
(2) >. Let {Qi

(1) and Q1
We denote the line through two points Q1
two lines as <
as Q1
(j)|i = 1, 2, 3; j = 1, 2}
Q1
be six distinct points on a conic (ellipse) as shown in Fig. 3, and
P1, P2 and P3 be three intersection points of the lines connecting
some pairs of the six points on the conic:

(2), Q2

(1)Q2

(2)

P1 =< Q3
P2 =< Q1
P3 =< Q2

(1)Q3
(1)Q1
(1)Q2

(2), Q1
(2), Q2
(2), Q3

(1)Q1
(1)Q2
(1)Q3

(2) >,
(2) >,
(2) > .

(5)

As the homogeneous coordinate of a point in a projective plane
is independent on the initial points constructing the plane, we
specify P1 = (1, 0, 0)T , P2 = (0, 1, 0)T , and P3 = (0, 0, 1)T .

(11)

(12)

Consequently, the points R1,R2 and R3 can be represented by Pi,
a(j)
i (i = 1, 2, 3; j = 1, 2) by substituting (6) into (9) as
i

and b(j)






2 b(1)
R1 = (b(2)
R2 = (0, −b(1)
1 a(1)
R3 = (a(2)

2 a(1)
3 , −a(2)
1 b(2)
3 , a(1)
2 , 0, −b(2)

3 , 0)T ,
1 a(2)
3 )T ,
1 b(1)
2 )T .

According to Pascal’s hexagon theorem [26], R1,R2, and R3

are collinear, i.e.,

|R1, R2, R3| = 0.

The proof of (12) is provided in Appendix A.

Finally, we can obtain (7) by substituting (11) into (12). The
proof is completed. Again, as seen from (9), the ratios of several
determinants of 3 × 3 matrices generate CNC.

3 FAST ELLIPSE DETECTION
In this section, we present our ellipse detector using the char-
acteristic number to prune non-elliptical line segments and pick
arc segments lying on an ellipse. These pruning and picking
processes signiﬁcantly reduce the number of arc candidates for
ﬁnal ﬁtting, rendering fast detection. The complete detection
procedure includes preprocessing, line pruning, arc selection, and
parameter ﬁtting and ellipse validation.

At the preprocessing step, edge points are detected and linked
to generate arc segments, where short segments are removed as
noise. We delete those arc segments likely to be lines detected
by CNL values at the line pruning step. This step reduces the
number of arc segments that are not parts of any ellipses. However,
the possible arc combinations are still too many to efﬁciently
ﬁt elliptical parameters. At the following arc selection step, we
ﬁrstly divide arc segments into four groups, and remove some
impossible arc combinations across these groups according to their
relatively positional relationships. Subsequently, we apply CNC
to pick the arc combinations belonging to one ellipse. Only those
picked arc segments are used to ﬁt elliptic parameters in the last
ﬁtting and validation step. The pruning and picking with CNL and
CNC signiﬁcantly reduce the number of possible arc combinations
that determine the computational load of the ﬁtting. Also, these
pruning and picking steps run fast so that the overall detector is
quite efﬁcient.

3.1 Preprocessing

Given an image, we ﬁrstly smooth the image to partially suppress
noise, and apply the Canny edge detector [27] with default
thresholds in Matlab to extract consecutive edge points. The edge
detector outputs both the position xi and yi, and gradient τi on
each edge point as ei = (xi, yi, τi), where i = 1, 2, ..., N , τi =
dy/dx, N is the number of edge points.

It is possible to apply the CN constraint on any three or six
edge points to determine whether they lie in a line or ellipse.
However, we have to calculate C 3
N point combinations
for N edge points, resulting in high computational complexity.
Moreover, most of these combinations come from noise, or differ-
ent ellipses and lines, spending a large amount time on invalid CN
calculations. Instead, we apply the constraints on arc segments.

N and C 6

In order to efﬁciently shear invalid arc combinations for later
processing, we group arc segments into four sets corresponding
to the arcs from one ellipse distributing in four quadrants as
ArcI , ArcII , ArcIII , and ArcIV , named quadrant sets. In the

4

Fig. 5. Grouping arcs into four sets. The ﬁrst two ﬁgures are two arcs
in ArcI ∪ ArcIII . The difference between the numbers of pixels above
and below (slashed and solid white blocks) can split the sets into two
sets further. The last ﬁgure shows the splitting process.

preprocessing step, we separate edge points ei(i = 1, 2, ..., N )
into two groups ArcII ∪ ArcIV and ArcI ∪ ArcIII by the signs
of edge gradients τi as the ﬁrst stage of this arc grouping:

ß

τi > 0, ei ∈ ArcII ∪ ArcIV ,
τi < 0, ei ∈ ArcI ∪ ArcIII .

(13)

We link each edge point with the other edge points in its eight
neighborhood from the same group with a breadth-ﬁrst strategy
until no edge point exists in the neighborhoods. Consequently, we
separately generate a series of arc segments in two groups shown
in Fig. 4. Figure 4(b) demonstrates the arcs by linking edge points
from the Canny detector (shown in Fig. 4(a)) of the group ArcII ∪
ArcIV , and Fig. 4(c) shows the arc segments of ArcI ∪ ArcIII .
As the second stage of arc grouping, we divide each group
into two sets, eventually producing four sets. As shown in Fig. 5,
the vertices (e1(x), e1(y)), (e1(x), et(y)), (et(x), e1(y)), and
(et(x), et(y)) constitute the bounding box of an arc with the
length of t, where the starting and ending edge points of the arc
are e1 and et, respectively. Denoting the difference between the
numbers of pixels above and below (slashed and solid white blocks
in Fig. 5) as δ, we split each group into two by the sign of δ.
Taking an arc segment in the ArcI ∪ ArcIII group for example,
the arc falls in the ArcIII set if the pixel number above the arc is
greater than the below (δ > 0) otherwise (δ < 0) falls in the ArcI
set. The last plot in Fig. 5 illustrates this splitting processing. We
preform this stage of grouping after line pruning, and hence the
cases of δ = 0 are quite rare. Finally, every arc segment in each
of these four sets comes from one unique ellipse so that only arc
combinations from different sets are necessary for the arc picking
process. Therefore, this preprocessing is also designated for an
efﬁcient ellipse detector.

3.2 Line pruning

As a typical treatment to noise in literature, we simply set a
threshold T hlength (T hlength = 16 in all experiments of this
study) to remove short segments. Following the noise attenuation,
we employ CNL to prune line segments unlikely to come from
an ellipse. The determinant of three edge points, the starting,
midpoint, and ending of an arc segment (e1, ei and et) is taken
as the fast calculation of the CNL value for the segment given
in (12). The geometric interpretation of the determinant is the area
of (cid:52)e1eiet. We use the ratio of the area to the length of the
arc (CN L/t) to robustly estimate whether these three points are
collinear. The ratio close to zero indicates a line segment to be
removed. Figures 4(d) and 6 presents the segments after removing
noise and lines. The top row of Fig. 6 gives the arc segments

5

(a)

(b)

(c)

(d)

Fig. 4. Arcs detection and grouping. (a) shows edge points from Canny detector; (b) shows the arcs in sets ArcII and ArcIV ; (c) shows the arcs
in sets ArcI and ArcIII ; (d) shows the result after removing noise and lines, and the arcs in the same set are labeled in the same color. There are
four colors represent arcs in four sets.

Fig. 6. The segments after removing noise and lines. The top row gives
the arc segments with edge linking, and the bottom provides those after
noise and line pruning.

with edge linking, and the bottom provides those after noise
and line pruning. Many segments from noise and lines disappear,
signiﬁcantly reducing the number of arc candidates.

3.3 Arc selection

i

i

2

1

1

3

2

and b(j)

1 Q(2)

3 Q(2)

(cid:95)
arc2. We intersect Q(1)

1 Q(2)
1
at P2, and Q(1)

and Q(2)
3
at P1, Q(1)
3 Q(2)
3
and Q(1)

In this step, we pick candidate arcs, that are likely to assemble an
ellipse, across the four sets where noise and line segments have
been removed. Speciﬁcally, two arcs, each with three edge points,
are taken from two different sets (one arc per set) in order to
(cid:95)
arc1 and
construct CNC. As shown in Fig. 7, there are two arcs
(cid:95)
arc2, where Q(2)
and Q(1)
1 , Q(1)
are the mid and two endpoints of
2
(cid:95)
3 , Q(2)
arc1, respectively. Similarly, Q(1)
are the points
2
2 Q(2)
and Q(1)
in
2 Q(2)
and Q(1)
at P3. Given
these points in P and Q, we are able to have the representation
coefﬁcients a(j)
(i = 1, 2, 3 and j = 1, 2), and calculate
the CNC value for this arc combination by substituting these
coefﬁcients into (7). Equation 7 also tells that the CNC value
equals +1 if these two arc segments with six points come from
one identical ellipse. Therefore, picking two arc candidates from
one ellipse turns out to simply comparing the CNC value of the arc
combination with the value +1. Similar to line pruning, we can
also use a threshold (T hCN C ) that determines false negative for
this process. The arc pair belonging the same ellipse obtains the
value of CNC close to +1, and the absolute difference of CNC
value and +1, represented as DisCN C , is close to 0, as shown
in Fig. 8 where the triangle constructed by the six points from the
pair is labeled in light green. The red-brown triangle indicates the
arc pair having the CNC value greater than T hCN C , where the
two arc segments of this pair lie on different ellipses.

We only consider

the combinations with arc segments
from two adjacent quadrant sets, e.g., {ArcI , ArcII } and

Fig. 7. Construction of CNC based on two arcs. Q(2)
is the mid points
1
(cid:95)
arc1. Similarly, Q(1)
of
3 ,
Q(2)

2 are two endpoints of
(cid:95)
arc2.

1 and Q(1)
3 are three points on

(cid:95)
arc1, while Q(1)
2 and Q(2)

Fig. 8. Threshold (T hCN C ) is used to determine false negative for arc
selection. The arc pair (labeled in green and blue) belonging the same
ellipse obtains the value of CNC, DisCN C , close to +1, and the triangle
is labeled in light green. The red-brown triangle indicates the arc pair
(labeled in blue and pink) having the CNC value greater than T hCN C .
Points on arcs are labeled in purple, and vertices of triangles are labeled
in grey.

6

Algorithm 1 Picking algorithm for a three-arc combination
Input: ArcI ArcII ArcIII
Output: valid arc combinations set

for each ˆarci ∈ ArcII do
for each ˆarcj ∈ ArcI do

if ˆarci, ˆarcj do not meet coordinate constraints then

Continue.

end if
if DisCN C(ˆarci, ˆarcj) > T hCN C then

Continue.

end if
for each ˆarck ∈ ArcIII do

if ˆarci, ˆarck do not meet coordinate constraints then

Continue.

end if
Add {ˆarci ˆarcj ˆarck} to valid arc combinations set

end for

end for

end for
return valid arc combinations set

3.4 Parameter ﬁtting

There are ﬁve parameters to determine an ellipse, including its
center (two), orientation (one), and major and minor semi-axes
(two). We follow the procedure in [20] to estimate all these
parameters but the center whose calculation we provide below.

We estimate the center as the intersection of auxiliary lines
generated from any two-point pairs on the three arcs picked by the
previous procedure. As illustrated in the top ﬁgure of Fig. 10, S1
and E1 are two points on an arc segment, T1 is the intersection
of the two tangent lines from S1 and E1, and M1 is the middle
point of the line segment S1E1. It is proved that the line M1T1
passes through the ellipse center O. For practical images, it is
unnecessary that all such auxiliary line segments like M1T1 given
by any point pairs on the elliptical arcs, but we are able to locate
the center as the point closest to those lines by the least square
ﬁtting. In this study, we ﬁnd that the accuracy of this ﬁtting
(estimation) also depends on the tangents of the points along the
ellipse.

We use nd (nd = 16 for our experiments) parallel chords
instead of tangent lines in order to minimize the effects from
tangent deviations, as shown in the bottom ﬁgure of Fig. 10. The
points F1 and F2 are the mid points of the arcs ˘S1E1 and ˘S2E2,
respectively. We generate nd chords parallel to S1F2, and so we
do to the chord S2F1. The points M1s and M2s (s = 1, 2, ..., nd)
are the mid-points of the two series of parallel chords to S1F2
and S2F1, respectively. The points of M1s are collinear at m1,
M2s lying on the line m2, and the intersection of m1 and m2
determines the ellipse center O. We estimate m1 and m2 using a
fast variant of the robust Theil-Sen estimator [28] with two arcs in
adjacent quadrant sets. Consequently, we obtain four lines through
the ellipse center generated from a three-arc combination, yielding
at most six pairwise intersections. The algebraic average of the
coordinates of these six intersections is taken as the output ellipse
center (x0, y0).

3.5 Ellipses validation

Candidate ellipses are available after the parameter ﬁtting step.
There may exist false positives or duplicated ones in these candi-
dates so that a validate step is necessary.

Fig. 9. Two examples of invalid three-arc combinations that form one
ellipse.

{ArcII , ArcIII }, but leave out those two-arc combinations from
diagonal sets {ArcI , ArcIII } and {ArcII , ArcIV }. This choice
further lowers down possible combinations, and more importantly
improves the robustness to calculate CNC values. As shown
in Fig. 7, the lines Q(1)
and Q(1)
are likely to be parallel
for arcs from diagonal quadrant sets so that the intersection P1
does not exit, or lies quite far from the edge points. The calculation
of CNC value is so instable that the determination of ellipse is no
more effective. We exclude the combinations with arcs from two
diagonal quadrant sets, avoiding this instability.

1 Q(2)

3 Q(2)

3

1

The combinations with more arc segments are also able to
yield more accurate parameter estimation in the later step. Unfor-
tunately, noise and/or occlusions are likely to bring the absence
of arc segments from one quadrant set. Hence, we constitute the
combinations with three arcs from three different quadrant sets
upon the arc pairs picked by CNC for later parameter ﬁtting. There
are four kinds of valid arc combinations from three quadrant sets
for an ellipse, as shown in the ﬁrst row of Tab. I. We pick out
these combinations in each kind by using both coordinate and
CNC constraints together, where the coordinate constraint takes
relative locations of arcs to remove invalidate combinations. The
second and third rows of Tab. I list the picking rules for valid
combinations using CNC and coordinate constraints, respectively.
(cid:95)
The symbols e1
arc1.
Figure 9 illustrates two examples of invalid three-arc combinations
that form one ellipse, removed by the constraints in Tab. I.

t denote the starting and end points of

1 and e1

Speciﬁcally, the picking process for a three-arc combination
begins with an arc segment in the middle quadrant set, and then
proceed to those in the other two sets. We ﬁnd an arc pair ﬁrst,
and then the third arc to form the combination by alternatively
applying the coordinate and CNC constraints. We take the set
combination {ArcI , ArcII , ArcIII } in Tab. I as an example to
illustrate the picking process. We starts with one arc in ArcII ,
and test the pair of the arc of ArcII and every arc segments
in ArcI with the coordinate constraint. If one pair meet the
coordinate constraint, the CNC constraint is applied to this pair
further. Subsequently, we search the set ArcIII to ﬁnd the third
arc segments forming a pair with the arc in ArcII that follow the
coordinate constraint. Herein, the CNC constraint runs only once
in order to balance the speed and accuracy. We repeatedly run the
picking process for every arc segments in ArcII , and ﬁnd all valid
three-arc combinations for {ArcI , ArcII , ArcIII }. Algorithm 1
details the picking process for this set combination. The similar
process applies to the other three-set combinations in the ﬁrst row
of Tab. I, and ﬁnally we have all valid three-arc combinations
ready for parameter ﬁtting given in the next section.

TABLE I
The picking rules for valid combinations using CNC and coordinate constraints

7

Valid arc
combinations

Sets constraints

(cid:40) ˆarc1 ∈ ArcII
ˆarc2 ∈ ArcI
ˆarc3 ∈ ArcIII

(cid:40) ˆarc1 ∈ ArcIII
ˆarc2 ∈ ArcII
ˆarc3 ∈ ArcIV

(cid:40) ˆarc1 ∈ ArcIV
ˆarc2 ∈ ArcIII
ˆarc3 ∈ ArcI

(cid:40) ˆarc1 ∈ ArcI
ˆarc2 ∈ ArcIV
ˆarc3 ∈ ArcII

Coordinate
constraints

(cid:110) e1
t (x) < e2
1(y) < e3
e1

1(x)
1(y)

(cid:110) e1
t (x) < e3
1(y) > e2
e1

1(x)
1(y)

(cid:110) e1
1(x) > e2
t (y) > e3
e1

t (x)
t (y)

(cid:110) e1
1(x) > e3
t (y) < e2
e1

t (x)
t (y)

ellipses.

4 EXPERIMENTAL RESULTS AND ANALYSIS
We perform a series of experiments on data sets with both
synthetic and real images to evaluate the performance of our fast
detector by comparing with other state-of-the-art methods 1.

4.1 Evaluation metrics and data sets

All the experiments in this paper are executed on a desktop with
Intel(R) Core(TM) i7-6700 CPU whose clock frequency is 3.40
GHz. The performance of ellipse detectors is evaluated in terms
of running time and F-measure. The most time-consuming step in
many existing methods lie in parameter ﬁtting because too many
arc or point candidates are fed to the step. In addition to executing
time, we count candidate combinations of arcs (CC) for ellipse
ﬁtting, and use CC as a direct index to demonstrate the impacts of
CNC and CNL.

F-measure is deﬁned as:

F − measure =

2 × Precision × Recall
Precision + Recall

,

(14)

where

, Recall =

Precision =

Ψ
Ω
The symbol Ω denotes the number of detected ellipses, and Γ
indicates the number of ground-truth ellipses. Ψ is the number
of correctly detected ellipses. The overlapping ratio of a detected
ellipse Ed to the ground truth Eg is deﬁned as:

Ψ
Γ

(15)

.

M(Ed, Eg) =

area(Ed) ∩ area(Eg)
area(Ed) ∪ area(Eg)

,

(16)

where area(E) is the number of pixels inside the ellipse E.
The detected ellipse Ed is considered as a correct detection if
M(Ed, Eg) > T ho. The threshold T ho is set to 0.8 throughout
our experiments, as did in [29].

Experimental data contain both real world and synthetic im-
ages. We use data sets with real world images to validate efﬁciency

1. The source code and resultant images of our detector can be found at

https://github.com/dlut-dimt/ellipse-detector

Fig. 10. Computing the center of the ellipse. The top ﬁgure shows the
ellipse center calculated by two arcs. The bottom ﬁgure shows the
ellipse center calculated by a series of parallel chords.

We provide two indices to validate the candidates. The ﬁrst
one measures how many edge points ﬁtting the corresponding
ellipse. The more edge points ﬁt, the more likely the ellipse exists.
We substitute every edge points into the correspondence ellipse
equation to calculate how it ﬁts the equation. We count the number
of the ﬁtting edge points, and calculate the ratio to the total points
that generate the ellipse by ﬁtting arc combinations.

The second index accounts for arc lengths of three-arc com-
binations giving ellipse parameters. Ideally, the length of an arc
combination is larger than the sum of two semi-axes. We use
the ratio between the total length of one three-arc combination
and three times of the semi-axes summation as the index. Larger
values indicate more stable detection of the ellipse.

The validation in [19] is able to discover duplicated ellipses,
which allows to assess the similarity of two ellipses by comparing
the differences of ellipse parameters. A voting strategy is adopted
to pick up the center of a given cluster, removing duplicate

and accuracy, while synthetic ones are designated to demonstrate
robustness to noise and ellipse variations. Real world images are
those from Dataset #1 and Dataset Prasad, the same as [20],
for fair comparisons. Dataset #1 is composed of 400 images
having elliptic shapes, collected from MIRFlickr and LabelMe
repositories [30]. Those MIRFlickr images are of high quality, and
most of them contain only one object (ellipse), while those from
LabelM are noisy images of low resolution, containing multiple
objects. Dataset Prasad contains 198 real
images from [29],
where objects of oval shapes like human faces are regarded as
ellipses. Besides evaluations on the original Dataset Prasad, we
also construct Dataset #2 by selecting 50 images with rigorous
ellipses in order to show the accuracy of our method on detecting
ellipses. These rigorously elliptical shapes are quite common in
industrial inspection and diagnosis.

4.2 Performance analysis

The effectiveness of line pruning and arc selection steps are
illustrated by comparisons on detection results with and without
these steps. We also provide empirical studies on the hyper-
parameters involved in these steps. The parameters for ellipse
ﬁtting and validation are taken the same values as those in [20].

4.2.1 Performance analysis of line pruning
We remove short and straight line segments using CNL as dis-
cussed in Section 3.2. Our goal is to prune noise effects and lines
in input images as much as possible but preserve arcs of ellipses.
We perform line pruning on Dataset #1 by tuning T hCN L from
0 to 5.0. Intuitively, the threshold T hCN L limits the height of
the triangle formed by the three edge points for CNL calculation.
Therefore, the larger T hCN L is, the more arcs are to be removed.
The zero threshold, T hCN L = 0, indicates no line pruning step
included.

Table II lists the values of arc numbers, running time, and F-
measure with varying T hCN L values. There are averagely 181 arc
segments without line pruning (T hCN L = 0), and more segments
are removed when increasing T hCN L values. The computing time
is 28.86ms, and F-measure is 0.4313 without line pruning. When
noise and line segments are removed by CNL, the computing time
is becoming lower and F-measure increases. We obtain the best
performance, 8.52ms for computation and 0.4692 for F-measure
when T hCN L = 3.0. The computing time is still decreasing
when more arc segments are pruned by the thresholds larger than
3.0. The values of F-measure slightly decrease due to increased
false negative. These results show that the line pruning step using
CNL is effective to remove noise and lines, and also alleviate
the computational load for later steps. We set T hCN L = 3.0 to
balance the accuracy and computing time in all comparisons with
the others.

TABLE II
The performance of line pruning step.

T hCN L

arc num avg. time(ms)

F-measure

0
1
2
3
4
5

181
170
108
65
40
26

28.86
26.52
13.75
8.52
6.79
6.17

0.4313
0.4338
0.4576
0.4692
0.4499
0.4226

8

Fig. 11. Relationship between point coordinates and CNC values. Dif-
ferent colors indicate various CNC values given by the color bar on the
right most. Five distinct points P1, ..., P5 on the ellipse are ﬁxed, and the
sixth point around the ellipse are varied to show the distribution of CNC
values.

4.2.2 Performance analysis of arc selection

We use the geometric constraint of six points on arcs derived
from CNC to pick up arc segments belonging to one ellipse.
Theoretically, the CNC value of six points lying on an ellipse
equals +1, but various imaging conditions (e.g., thermal noise
and lens distortions) in practical applications may cause the value
deviating from +1. As discussed in Section 3.3, we relax this hard
constraint to a range in the vicinity of +1 determined by T hCN C .
Herein, we perform experimental analysis on the relationship
between point coordinates and CNC values. This analysis does
not only give arise to an appropriate threshold, but also validates
the effectiveness of the arc selection based on CNC.

Supposing an ellipse centering at the coordinate origin, we ﬁx
ﬁve distinct points P1, ..., P5 on the ellipse, and vary the sixth
point around the ellipse to show the distribution of CNC values
in Fig. 11. Different colors indicate various CNC values given by
the color bar on the right most of Fig. 11. All the CNC values
higher than 1.4 are colored in red-brown, while all those lower
than 0.6 in blue. Figure 11 illustrates that most of CNC values
with the sixth point close to the ellipse fall within the range from
0.6 to 1.4. There exist several regions where CNC values lie in
the range while the sixth point locates far from the ellipse. These
regions include the star-shaped area out of the ellipse between P2
and P3, and the bottom left and top right ends of the line stretching
out of P5. This observation can be explained by the fact that the
CNC value of +1 indicates the points lying on a conic curve not
only an ellipse. However, these ’outliers’ have few effects on our
detector, because other types of conic curves, e.g., hyperbola and
parabola, seldom appear in practical industrial images, and the
majority can be also removed by the coordinate constraint even if
a few of them appear.

We further apply our detector on dataset #1 by varying
T hCN C , the absolute deviation from +1, from 0 to 50, giving
seventeen values in total. Figure 12 illustrates the values of
computing time with varying thresholds. The blue line in Fig. 12
demonstrates the seventeen values of T hCN C in an ascending
order, also listed in the third row below the plot. The step values

vary with the value ranges of T hCN C , i.e., 0.1 for the range from
0 to 0.6, 1.0 for 1 to 5, and 10 for values larger than 10. The
orange and grey bars show the computing time with and without
the arc selection step, whose values are listed in the ﬁrst and
second rows below, respectively. The average computing time is
6.96 ms for each image, one half of the detection time without
CNC, 13.4ms, when we use the hard constraint T hCN C = 0
picking only a small fraction of arc segments. More arc segments
are included for parameter ﬁtting, demanding more computing
time, when increasing the threshold values. When T hCN C is
larger than 20, the detector spends more time than that without
the selection step since the calculation of CNC takes more time
than what the constraint can save. As a result, the orange bars are
higher than the grey ones for these T hCN C values in Fig. 12.

Figure 13 shows the values of F-measure (F-m) with varying
threshold values. The F-measure for the detector without the CNC
constraint is 0.4385 labeled in the gray bar, while ours in orange
bars. The hard constraint yields a very low F-m 0.0033 since
the choice excludes many arc segments slightly deviating from an
ellipse, resulting in signiﬁcant false negatives. The threshold 0.2
outputs the best F-m 0.4641, even higher than the detector without
this constraint. This improvement shows that the CNC constraint
is also able to exclude false positives in addition to decreasing the
computing time from 13.40ms to 8.58ms. As expected, the values
of F-m given by the thresholds larger than 20 are quite close to
that without the selection step. In these cases, the selection step
takes no effect on lowering down false positives. Therefore, the
arc selection step using CNC is quite crucial to both efﬁciency and
accuracy. We choose the threshold as T hCN C = 0.2 to generate
the best performance in the following experiments.

4.3 Comparisons with the state of the art

Firstly, we compare our detector with three recent arc-based
methods, i.e., Zhang [11], Libuda [13], and Fornaciari [20], on
Dataset #1. The set consists of images with different qualities and
various numbers of target ellipses. The latest works of [7] and [8]
are not so relevant as these three because both are point-based
and applicable to sceneries where only one ellipse appear. The
execution program of [20] is provided by the authors, and we take
the results of [11] and [13] reported in [20]. Table III lists the
comparisons on average running time and F-measure. The method
of Zhang [11] performs the worst: the ﬁtting on a large number of
pixel combinations takes much time over 4s for an image; its F-
measure is the lowest as 0.3421. Libuda [13] and Fornaciari [20]
output the similar efﬁciency with the average execution time for
each image 14.38 ms and 12.79 ms, respectively. The values of
their F-measure are also quite close. Our detector achieves the
best in terms of both efﬁciency(8.54ms) and accuracy (F-measure
about 0.47). Speciﬁcally, we buy 7% higher accuracy with 33%
less execution time than the fastest method [20].

TABLE III
F-measure and runtime compared with the state of the art on Dataset
#1

9

Several examples of the above methods on Dataset #1 are
shown in Fig. 14 where the ﬁrst column is the input images, and
the second one lists the ground truth (GT). False negatives occur in
all the results of Libuda [13] except for the ﬁfth row. The method
of Fornaciari [20] works quite close to ours that correctly detects
almost all the ellipses in these images. It is worth noting that
only our method successfully picks out the middle wheel partially
occluded by the lady in the third image, while the other three fail.
Compared with the ground truth, our detector outputs one extra
ellipse out of the bottom right tray. Actually, one can ﬁnd a dim
elliptical trail along the tray, but the ground truth neglects it.

Secondly, we compare the execution time on each processing
step with the-state-of-the-art on Dataset #1, as shown in Tab. IV.
The method of Zhang [11] spends about 4243 ms on estimating
the parameters due to huge numbers of possible point combina-
tions. The method of Prasad [29] reduces the time on parameter
estimation via grouping arcs with curvature and convexity, but the
grouping spends additional 278ms. The method of Libuda [13]
uses an iterative strategy, and the time spent on each of the ﬁrst
three steps equals about 4.5ms. Fornaciari’s detector [20], the
fastest one among the existing, spends the most time 4.9ms on
grouping arcs with their relative locations against the other steps.
In contrast, our method only uses about half of the execution time
of [20] on the grouping step, and the total execution time is less
than two third of [20]. Thus, our detector reduces the time for the
grouping step, the bottleneck for efﬁcient detectors.

Further, we peer into the proposed detector to analyze how line
pruning and arc selection accelerate detection. Table V illustrates
the effects of CNL and CNC by listing the averaged values of arc
numbers, arc combination numbers (CC) for parameter ﬁtting, ex-
ecution time and F-measure on Dataset #1. Without any processing
using CNL nor CNC, possible averaged arcs and arc combinations
(CC) are 181 and 2619, respectively. After line pruning, the arc
number reduces to 65, about one third of of the original, and
the CC value signiﬁcantly decreases to 196, 6% of the original.
Only 40 arc combinations remain for parameter ﬁtting, shearing
98.5% combinations from the original. Naturally, the execution
time drops down 93% from 129.33ms to 8.52ms. The value
of F-measure also increases from 0.3163 to 0.4692 since many
false positives are removed by these two steps using CNL and
CNC. Green curves in the ﬁrst and second rows of Fig. 15 present
possible ellipses to be ﬁtted without and with our pruning/selection
steps, respectively. It is evident that the green curves in the second
row are much less than those in the ﬁrst row, intuitively showing
the effectiveness of our CNL/CNC based processing to save time
and improve accuracy.

TABLE V
The effect of CNL and CNC

arc Num
CC
avg.time (ms)
F-measure

After arc
detection

After line
pruning

After arc
selection

181
2619
129.33
0.3163

65
196
12.73
0.4090

65
40
8.52
0.4692

Method

F-measure

avg.time(ms)

Libuda[13]
Prasad[29]
Zhang[11]
Fornaciari[20]
Our

0.4258
0.4512
0.3421
0.4385
0.4692

14.38
823.38
4243.86
12.79
8.54

Finally, we compare our detector with [20], giving the best
performance among the existing, in terms of CC, F-measure, and
execution time on three data sets including Datast #1, Dataset
#2, and Dataset Prasad. As shown in Tab. VI, our method out-
performs [20] on all the three data sets. The last column shows

10

Fig. 12. The values of computing time with varying thresholds. We vary the absolute deviation from +1, from 0 to 50, giving seventeen T hCN C
values in total, labeled in blue line and listed in the third row. The orange and grey bars show the computing time with and without the arc selection
step.

Fig. 13. The values of F-measure (F-m) with varying thresholds. We take the same deviation from +1 as did in Fig. 12, while the orange and grey
bars show the F-measure with and without the arc selection step.

TABLE IV
Execution times (ms) for each step compared with the-state-of-the-art on Dataset #1.

Libuda [13]

Prasad [29]

Zhang [11]

Fornaciari [20]

Our

Edage detection
Pre-processing
Grouping
Estimation
Validation and Clustering
Total

4.49
4.15
4.89
0.84
0.00
14.38

3.54
78.03
278.01
3.40
460.39
823.38

3.97
3.55
0.25
4236.06
0.03
4243.86

3.45
1.94
4.90
2.30
0.21
12.79

3.43
1.90
2.53
0.63
0.06
8.54

11

Fig. 14. Several examples of the compared methods on Dataset #1. The ﬁrst column is the input images, and the second one lists the ground truth
(GT).

The ﬁrst synthetic data set consists of 9100 ellipses with
various semi-axes ratios and orientations. One semi-axis is ﬁxed
as 100, and the other one varies so that the ratios range from 0.01
to 1 at the step of 0.01. Orientations vary from 1◦ to 90◦ at the
step of 1◦. The second data set contains 10000 images with a ﬁxed
center and orientation, showing changes on ratios and lengths of
semi-axes. One semi-axis varies from 1 to 100 at the step of 1,
and the other one changes accordingly so that axes ratios range
from 0.01 to 1 at the step of 0.01. Both data sets come from [20]
that generates synthetic 400 × 400 images, each containing one
single ellipse without noise.

Figure 16 illustrates comparisons with [20], where black points
indicate failures of detection. The results on the ﬁrst data set are
given in Fig. 16(a) and Fig. 16(b). The horizontal axis gives ratios
of two semi-axes, and the vertical one shows orientations. Both
methods are robust to orientation changes as long as axes ratios
are larger than 0.25, but they fail in the cases of small axes ratios
when ellipses degenerate into straight lines. The results on the
second data set are shown in Fig. 16(c) and Fig. 16(d), where the
vertical axis indicates lengths of major axes. The robustness of
both methods is quite similar, working well on ellipses whose
major axis is longer than 10 and axes ratio is larger than 0.25.
Small arcs are likely to be pruned as noise when the ellipse only
has a few pixels. Fortunately, one may tackle the problem of small
ellipses by upscaling the image as did in [20]. Therefore, the
proposed method is quite robust, and only fails in some extreme
cases, e.g., small and extremely oblate ellipses, which are quite

Fig. 15. Ellipses needed to be ﬁtted with or without line pruning and
arc selection. Green curves in the ﬁrst and second rows present pos-
sible ellipses to be ﬁtted without and with our pruning/selection steps,
respectively.

the improvement percentage both on efﬁciency and accuracy. The
accuracy of the proposed detector increases about 6.6% in average
over [20], and more signiﬁcantly our detector averagely runs about
31.0% faster than [20] on all the three data sets. These results show
that our detector is applicable to real time scenarios in practice.

4.4 Robustness to ellipse variations and noise

In order to investigate the robustness to ellipse variations and
noise, we use two synthetic data sets with different orientations
and ratios of two semi-axes of ellipses, and also apply salt-
and-pepper noise to real world images. The noise break arcs
into several small fragments, which may affect the accuracy and
efﬁciency.

12

(17)

(18)

(19)

TABLE VI
Testing results of the proposed methods compared with [20] on three datasets.

DataBase

avg. time(ms)
Ours
[20]

F-m

CC

[20]

Ours

[20]

Ours

improvement percentage
accuracy

speed

Dataset Prasad
Dataset #1
Dataset #2

4.34
13.58
5.26

3.35
8.55
4.09

0.2874
0.4385
0.5893

0.3059
0.4692
0.6271

82
267
117

19
40
34

22.70%
37.05%
22.27%

6.44%
7.00%
6.41%

(a) [20]

(b) Ours

(c) [20]

(d) Ours

Fig. 16. Robustness to ellipse variations compared with [20]. Figure (a)-(b) are results on the ﬁrst dataset. The horizontal axis gives ratios of two
semi-axes, and the vertical one shows orientations. Figure (c)-(d) are results on the second dataset. The vertical axis indicates lengths of major
axes, and the black points indicate failures of detection.

rare in reality.

Then three intersections

We add salt-and-pepper noise to images of Dataset #2 with
the ratios of noise to image set as 3%, 6%, 9%, 12%, 15% and
18% to validate the robustness of our method to noise. Again, we
compare with [20] on efﬁciency and accuracy, shown in Fig. 17.
The values of F-measure for these two methods on images without
noise are 6.2 and 5.8, respectively. The values decrease for both
methods when the noise increases. When the ratio of noise to
image is up to 18%, our value is about 0.35, higher than that
of [20]. When the noise level is getting higher, the execution time
of our detector stays around 4ms, and that of [20] ﬂuctuates a bit
around 5ms not so stable as ours. Generally, both methods runs
faster as noise increases because they are able to remove small arc
segments caused by noise. As a summary, noise has few effect on
the efﬁciency, but slightly lower down the accuracy.

5 CONCLUSIONS

In this paper, an ellipse detector for real-time application is
proposed. We trades off accuracy and efﬁciency and pay more
attention to the execution time. We introduce a new geometry
constraint to prune lines and select arcs belong to the same ellipse.
The detector removes the straight arcs based on characteristic on
line (CNL), and selects candidate elliptical arc combinations by
characteristic on conic (CNC). Our method outperforms the-state-
of-the-art by the experiments on real images, which can be used in
real-time for various applications. In the future, we will improve
our method to make it possible to detect quite small ellipses in
images, which is a challenge for most existing methods.

APPENDIX A
PROOF OF PASCAL’S HEXAGON THEOREM





R1 =< Q(2)
R2 =< Q(2)
R3 =< Q(2)

2 Q(1)
3 Q(1)
1 Q(1)

3 , Q(2)
1 , Q(2)
2 , Q(1)

1 Q(1)
2 Q(1)
3 Q(2)

1 >,
2 >,
3 >

are collinear.

Proof: The coordinate of R1, R2 and R3 can be represented

by {Qi

(j)|i = 1, 2, 3; j = 1, 2} as






R1 = (Q2
R2 = (Q3
R3 = (Q1

(2) × Q3
(2) × Q1
(2) × Q2

(1)) × (Q1
(1)) × (Q2
(1)) × (Q3

(2) × Q1
(2) × Q2
(1) × Q3

(1)),
(1)),
(2)),

where × denotes the cross product of two points. Then R1, R2
and R3 can be represented through simple calculations as
(2), Q3

R1 = |Q2

(1), Q1

(1)|Q1






−|Q2

(2), Q3

(1), Q1

R2 = |Q3

(2), Q1

(1), Q2

(1)|Q2

−|Q3

(2), Q1

(1), Q2

R3 = |Q1

(2), Q2

(1), Q3

(2)|Q3

(1),

(1),

(2)
(2)|Q1
(2)
(2)|Q2
(1)
(1)|Q3

(2), Q2
To prove that R1, R2 and R3 are collinear is equivalent to prove

(1), Q3

−|Q1

(2).

|R1, R2, R3| = 0.

(20)

Then we can substitute (19) into (20), and get the equivalent
equation as

|Q1
|Q2
= |Q1
|Q2

(1), Q2
(2), Q3

(1), Q3
(2), Q1

(1)||Q1
(1)||Q3

(2), Q2
(2), Q1

(2), Q3
(2), Q2

(2), Q2

(2), Q3

(2)||Q1

(1), Q2

(1)|

(1), Q3

(2), Q1

(1)||Q3

(1), Q1

(2), Q2

(1)|
(1)|
(2), Q3
(1)|.

(21)

(j)|i = 1, 2, 3; j = 1, 2} be
Pascal’s hexagon theorem: Let {Qi
different points on a non-degenerative conic C, as shown in Fig. 3.

In order to prove it, we can replace any point Qi
general point Q(x, y, z), taking Q1

(j) with the
(1) for example, then we can

13

(a) F-measure

(b) Execution time

Fig. 17. Robustness to salt-and-pepper noise. The ratios of noise to image are set as 3%, 6%, 9%, 12%, 15% and 18%. (a) shows the F-measure of
[20] and our method. (b) Running time are plotted against noise density. Each point of these curves is obtained from the detection results of Dataset
#2.

get the parametric equations of conic C by other ﬁve points. As
(1) is one point on conic C, it must meet (21). The proof is
Q1
completed.

ACKNOWLEDGMENTS
We thank Dr. M. Fornaciari, Dr. S. Mulleti and Dr. T. Lu for
providing their executables and insights. We also thank Dr. M.
Fornaciari for his experimental data.

REFERENCES
[1] T. Cooke, “A fast automatic ellipse detector,” in 2010 International
Conference on Digital Image Computing: Techniques and Applications.
IEEE, 2010, pp. 575–580.

[2] S. Zafari, T. Eerola, J. Sampo, H. Kalviainen, and H. Haario, “Seg-
mentation of overlapping elliptical objects in silhouette images,” IEEE
Transactions on Image Processing, vol. 24, no. 12, pp. 5942–5952, 2015.
[3] C. Teutsch, D. Berndt, E. Trostmann, and M. Weber, “Real-time detection
of elliptic shapes for automated object recognition and object tracking,”
in Electronic Imaging 2006.
International Society for Optics and
Photonics, 2006, pp. 60 700J–60 700J.
J. Illingworth and J. Kittler, “A survey of the hough transform,” Computer
vision, graphics, and image processing, vol. 44, no. 1, pp. 87–116, 1988.
[5] R. A. McLaughlin, “Randomized hough transform: improved ellipse
detection with comparison,” Pattern Recognition Letters, vol. 19, no. 3,
pp. 299–305, 1998.

[4]

[6] W. Lu and J. Tan, “Detection of incomplete ellipse in images with
strong noise by iterative randomized hough transform (irht),” Pattern
Recognition, vol. 41, no. 4, pp. 1268–1279, 2008.
J. Liang, Y. Wang, and X. Zeng, “Robust ellipse ﬁtting via half-quadratic
and semideﬁnite relaxation optimization,” IEEE Transactions on Image
Processing, vol. 24, no. 11, pp. 4276–4286, 2015.

[7]

[8] S. Mulleti and C. S. Seelamantula, “Ellipse ﬁtting using the ﬁnite rate of
innovation sampling principle,” IEEE Transactions on Image Processing,
vol. 25, no. 3, pp. 1451–1464, 2016.

[9] Y. Xie and Q. Ji, “A new efﬁcient ellipse detection method,” in 16th
IEEE, 2002,

International Conference on Pattern Recognition, vol. 2.
pp. 957–960.

[10] C. Basca, M. Talos, and R. Brad, “Randomized hough transform for
ellipse detection with result clustering,” in EUROCON 2005-The Inter-
national Conference on ”Computer as a Tool”, vol. 2.
IEEE, 2005, pp.
1397–1400.

[11] S.-C. Zhang and Z.-Q. Liu, “A robust, real-time ellipse detector,” Pattern

Recognition, vol. 38, no. 2, pp. 273–287, 2005.

[12] E. Kim, M. Haseyama, and H. Kitajima, “Fast and robust ellipse ex-
traction from complicated images,” in Proceedings of IEEE information
technology and applications. Citeseer, 2002.

[13] L. Libuda, I. Grothues, and K.-F. Kraiss, “Ellipse detection in digital
image data using geometric features,” in Advances in Computer Graphics
and Computer Vision. Springer, 2007, pp. 229–239.

[14] D. K. Prasad, M. K. Leung, and C. Quek, “Elliﬁt: An unconstrained, non-
iterative, least squares based geometric ellipse ﬁtting method,” Pattern
Recognition, vol. 46, no. 5, pp. 1449–1465, 2013.

[15] T. M. Nguyen, S. Ahuja, and Q. J. Wu, “A real-time ellipse detection
based on edge grouping,” in IEEE International Conference on Systems,
Man and Cybernetics.

IEEE, 2009, pp. 3280–3286.

[16] F. Mai, Y. Hung, H. Zhong, and W. Sze, “A hierarchical approach for
fast and robust ellipse extraction,” Pattern Recognition, vol. 41, no. 8,
pp. 2512–2524, 2008.

[17] A. Y.-S. Chia, S. Rahardja, D. Rajan, and M. K. Leung, “A split
and merge based ellipse detector with self-correcting capability,” IEEE
Transactions on Image Processing, vol. 20, no. 7, pp. 1991–2006, 2011.
[18] T. Lu, W. Hu, C. Liu, and D. Yang, “Effective ellipse detector with
polygonal curve and likelihood ratio test,” IET Computer Vision, vol. 9,
no. 6, pp. 914–925, 2015.

[19] D. K. Prasad and M. K. Leung, “Clustering of ellipses based on their
distinctiveness: An aid to ellipse detection algorithms,” in 3rd IEEE Inter-
national Conference on Computer Science and Information Technology
(ICCSIT), vol. 8.

IEEE, 2010, pp. 292–297.
[20] M. Fornaciari, A. Prati, and R. Cucchiara, “A fast and effective ellipse
detector for embedded vision applications,” Pattern Recognition, vol. 47,
no. 11, pp. 3693–3708, 2014.

[21] Y. Sugaya, “Ellipse detection by combining division and model selection
based integration of edge points,” in 2010 Fourth Paciﬁc-Rim Symposium
on Image and Video Technology (PSIVT).

IEEE, 2010, pp. 64–69.

[22] C. Liu and W. Hu, “Effective method for ellipse extraction and integration
for spacecraft images,” Optical Engineering, vol. 52, no. 5, pp. 057 002–
057 002, 2013.

[23] Z. Luo, X. Zhou, and D. X. Gu, “From a projective invariant to some
new properties of algebraic hypersurfaces,” Science China Mathematics,
vol. 57, no. 11, pp. 2273–2284, 2014.

[24] X. Fan, H. Wang, Z. Luo, Y. Li, W. Hu, and D. Luo, “Fiducial facial
point extraction using a novel projective invariant,” IEEE Transactions
on Image Processing, vol. 24, no. 3, pp. 1164–1177, 2015.

[25] Q. Jia, X. Fan, Y. Liu, H. Li, Z. Luo, and H. Guo, “Hierarchical projective
invariant contexts for shape recognition,” Pattern Recognition, vol. 52,
pp. 358–374, 2016.

[26] N. Stefanovi´c and M. Miloˇsevi´c, “A very simple proof of pascals hexagon
theorem and some applications,” Proceedings-Mathematical Sciences,
vol. 120, no. 5, pp. 619–629, 2010.

[27] J. Canny, “A computational approach to edge detection,” IEEE Transac-
tions on pattern analysis and machine intelligence, no. 6, pp. 679–698,
1986.

[28] J. Matouˇsek, “Randomized optimal algorithm for slope selection,” Infor-

mation processing letters, vol. 39, no. 4, pp. 183–187, 1991.

[29] D. K. Prasad, M. K. Leung, and S.-Y. Cho, “Edge curvature and convexity
based ellipse detection method,” Pattern Recognition, vol. 45, no. 9, pp.
3204–3221, 2012.

[30] R. Hartley and A. Zisserman, Multiple view geometry in computer vision.

Cambridge university press, 2003.

6
1
0
2
 
g
u
A
 
6
2
 
 
]

V
C
.
s
c
[
 
 
1
v
0
7
4
7
0
.
8
0
6
1
:
v
i
X
r
a

1

A Fast Ellipse Detector Using Projective
Invariant Pruning

Qi Jia, Xin Fan, Member, IEEE, Zhongxuan Luo, Lianbo Song, and Tie Qiu

Abstract—Detecting elliptical objects from an image is a central task in robot navigation and industrial diagnosis where the detection
time is always a critical issue. Existing methods are hardly applicable to these real-time scenarios of limited hardware resource due to
the huge number of fragment candidates (edges or arcs) for ﬁtting ellipse equations. In this paper, we present a fast algorithm detecting
ellipses with high accuracy. The algorithm leverage a newly developed projective invariant to signiﬁcantly prune the undesired
candidates and to pick out elliptical ones. The invariant is able to reﬂect the intrinsic geometry of a planar curve, giving the value of −1
on any three collinear points and +1 for any six points on an ellipse. Thus, we apply the pruning and picking by simply comparing these
binary values. Moreover, the calculation of the invariant only involves the determinant of a 3 × 3 matrix. Extensive experiments on three
challenging data sets with 650 images demonstrate that our detector runs 20%-50% faster than the state-of-the-art algorithms with the
comparable or higher precision.

Index Terms—Ellipse detection, Projective invariant, Real-time.

(cid:70)

1 INTRODUCTION

E LLIPSES are quite common in natural or artiﬁcial scenes. The

detection of ellipses in a fast and reliable manner from real
world images provides a powerful analysis tool for many computer
vision applications such as wheels detection [1], biological cell di-
vision [2], and object segmentation for industrial applications [3].
Ellipse detection still remains unresolved as one of the classical
tasks with long history. Most existing methods perform far from
real time, which hinder their applications in reality.

The earliest ellipse detection algorithm dates back to the
classical Hough transform (HT) that ﬁts the parametric form of
an ellipse using a voting scheme [4]. The standard HT approach
extracts ellipses by ﬁnding the clusters in a ﬁve-dimensional
(5D) parametric space, consuming a great deal of memory and
time. The randomized HT (RHT) improves the performance by
reducing the number of false alarms [5]. The iterative RHT (IRHT)
speeds up RHT so signiﬁcant by focusing on the candidates
likely to be an ellipse that it only needs 1-D accumulators [6].
However, both RHT and IRHT are still quite slow attributing to the
voting processing among numerous candidates, and the geometry
relationships between points are also neglected during voting.

Researchers introduce algebraic or geometric constraints on
points of an ellipse to screening candidates. Liang et al. [7] intro-
duce the maximum correntropy criterion into the constrained least-
square ﬁtting to alleviate the inﬂuence of outliers. Mulleti et al. [8]
use the ﬁnite rate of innovation sampling principle to ﬁt noisy
or partial ellipse. Both methods produce ellipses with less bias.
However, they can only work on the image with one single
ellipse. Xie and Ji exploit the symmetry of two points on ellipse,

• Q. Jia, X. Fan, Z. Luo, L. Song, and T. Qiu are with the School of Software,
Dalian University of Technology, China, and also with the Key Laboratory
for Ubiquitous Network and Service Software of Liaoning Province.
E-mail: xin.fan@ieee.org
Z. Luo is also with the School of Mathematical Sciences, Dalian University
of Technology, China.
This work was supported in part by the National Natural Science Founda-
tion of China under Grant 61402077, Grant 61432003, Grant 61328206,
Grant 11171052.

•

•

reducing the voting parameter to one [9]. However, it is time-
prohibitive to enumerate every point pairs as elliptical candidates.
Basca et al. [10] accelerate Xie et al.’s method with RHT by
considering only a small random subset of initial point pairs.
Zhang and Liu [11] use edge directional properties to reduce point
combinations that lie out of the same ellipse boundary.

Many methods take into account the geometric constraints on
arc segments as the symmetry between points brings too many
candidate pairs. Kim et al. [12] extract arc segments approximated
by short straight lines. Libuda et al. [13] and Prasad et al. [14]
improve Kim et al.’s method with less memory usage. However,
these candidate arcs connecting short line segments may merge
intersected arcs from different ellipses, resulting in lower pre-
cisions [12], [13]. Nguyen et al. [15] detect ellipses upon arcs
by edge grouping. Their method is able to handle incomplete
ellipses, but fails to detect ellipses splitting into many short
arcs. Some other works formulate the mergence of elliptical arcs
as an assignment problem, and iteratively correct the detection
results [16], [17], [18]. These methods have high detection rates,
but suffer from heavy computational costs. Prasad et al. [19]
merge elliptical arcs with the relationship score given by the
center of the ellipse ﬁtting the arcs. Recently, Fornaciari et al. [20]
develop an ellipse detector that classiﬁes elliptical arcs into four
groups and estimates the ellipse parameters using the decomposed
parameter space. There are still a number of candidate arcs in
each group while their method renders a relatively faster detection
than previous methods. Especially, it is quite time consuming to
calculate every possible combinations of arcs from each group,
not to mention that many of them are wrong combinations.

All aforementioned methods start the estimation from points
or arcs with their positional constraints. Actually, there exist more
constraints whether points or arcs are amenable to the analytical
ellipse equation. In [21], RANSAC is used to randomly choose
ﬁve points repeatedly until the ellipse determined by these ﬁve
points closely passes through a maximum number of edge points.
This method is inefﬁcient as there exist so many combinations of
ﬁve points and one has to calculate ellipse parameters for each

ﬁve-point combination. Instead of directly calculating the ellipse
parameters, Liu and Hu [22] use geometric distances of points
to a conic in order to evaluate the similarity between any two
of selected arcs. There are still a large number of wrong arcs
combinations, and the computation of distances between points
and arcs lower down its efﬁciency.

In this paper, we circumvent the high computational load by
pruning and picking candidates using a projective invariant, named
characteristic number (CN) [23]. The projective invariance of CN
is introduced in [24] acting as geometric constraints for ﬁducial
point localization under face pose changes. Later, Jia et al. employ
this invariant property to construct a shape descriptor robust to
perspective deformations [25]. For the ﬁrst time, we explicitly
take the advantage of the CN property giving the characterization
of the intrinsic geometry of an underlying planar curve of points.
The invariant gives the value of −1 on any three collinear points
and +1 for any six points on a conic (ellipse or other conic curves).
We are able to efﬁciently pruning straight lines and to determine
whether non-collinear six points belong to the same conic without
need of analytically ﬁtting nor voting. The calculation of CN is
also quite fast since the determinants of 3 × 3 matrices constitute
the primitives of CN.

Figure 1(b) illustrates the pruning and picking on an input
image with a bunches of ellipses in Fig. 1(a). Candidate arc
segments appear different colors, and we are able to prune those
line segments having the CN value −1. We use six points on
two arc segments, three on each, to calculate a CN value. The
points on the bold arcs in pink and blue form the light brown
triangle, while those on blue and green bold arcs generate the light
green triangle. These triangles (closed loops) formed by auxiliary
lines connecting arc points are necessary for CN calculation.
The six points on the arc pairs from the same ellipse, e.g., the
blue and green pair in Fig. 1(b), give the CN value +1. Thus,
the arcs belonging to one ellipse easily pop out by CN values,
and Fig. 1(c) shows the ellipse candidates formed by these picked
arc segments. Figure 1(d) presents the ﬁnal detection results by
further ellipse ﬁtting and validation. The proposed method is
robust with high efﬁciency, suitable for real-time applications as
validated in experiments.

The rest of this paper is organized as follows. Section 2
introduces the characteristic number (CN) and its property on lines
and conic curves. Section 3 elaborates our fast ellipse detection
algorithm with line pruning and arc picking using CN. Section 4
demonstrates experimental evaluations on accuracy and efﬁciency.
Section 5 concludes the paper.

2 CHARACTERISTIC NUMBER ON LINE AND CONIC
In this section, we ﬁrst introduce the general deﬁnition of the
characteristic number (CN), and give its computation on three
collinear points (CNL) and six points in a conic curve (CNC),
respectively. Also, we present the CN properties for these two
conﬁgurations, the key to efﬁciently pruning line segments and
picking candidates for elliptical arcs.

2.1 Characteristic number

The characteristic number extends the classical cross ratio in
various respects, and reﬂects the intrinsic geometry underlying
given points. The CN value of three collinear points is −1, while
six points lying on a conic curve have a common CN value +1.
We give the deﬁnition of CN below [23].

2

(1)

(2)

1 , Q(1)
3 . Three pairwise intersecting lines a, b and c form a closed loop

Fig. 2. Characteristic number on three collinear points (CNL), Q(1)
and Q(1)
(cid:52)P1P2P3.

2

Deﬁnition 1 Let Pm be m-dimension projective space over
K, and P1, P2, . . . , Pr be r distinct points in Pm that con-
struct a closed loop (Pr+1 = P1). There are n distinct points
Q(1)
on the line segment PiPi+1, i = 1, . . . , r. Each
i
point Q(j)

i
can be linearly represented by Pi and Pi+1 as

, . . . Q(n)

i

Q(j)

i = a(j)

i Pi + b(j)

i Pi+1.

Let P = {Pi}r

i=1 and Q= {Q(j)

i }j=1,...,n

i=1,...,r , the quantity

CN (P, Q) =

r
(cid:89)

(cid:32) n
(cid:89)

i=1

j=1

(cid:33)
,

b(j)
i
a(j)
i

is deﬁned as the characteristic number of P and Q.

The classical cross ratio is a special case of CN when r = 2
and n = 2. The characteristic number is proven to be a projective
invariant, meaning that CN values keep unchanged under projec-
tive/perspective transformations.

The deﬁnition of CN requires a closed loop with r sides,
and the number of points Q(j) at every side has to be identical.
Subsequently, we draw auxiliary lines to set up this geometric
conﬁguration required for calculating CN on three collinear points
and six points on a conic curve (ellipse).

2.2 Characteristic number on three collinear points

Three pairwise intersecting lines a, b and c intersect at three points
P1, P2 and P3, forming a closed loop. These three lines intersect
another line l at three points Q(1)
1 , Q(1)
3 , as shown
in Fig. 2. According to Deﬁnition 1, Q(1)
and Q(1)
can
3
be linearly represented by P1, P2 and P3 as:

1 , Q(1)

and Q(1)

2

2






Q1
Q2
Q3

(1) = a1
(1) = a2
(1) = a3

(1)P1 + b1
(1)P2 + b2
(1)P3 + b3

(1)P2,
(1)P3,
(1)P1,

(3)

(a)

(b)

(c)

(d)

Fig. 1. Ellipse detection process: (a) input image, (b) line pruning and arc picking, (c) candidate ellipse given by picked arcs, and (d) ﬁnal detection
with parameter ﬁtting and ellipse validation.

3

(6)

(8)

Similar to (3), each point of {Qi
linearly represented by a pair of points from {P1, P2, P3}.

(j)|i = 1, 2, 3; j = 1, 2} can be

Q1
Q1
Q2
Q2
Q3
Q3

(1) = a1
(2) = a1
(1) = a2
(2) = a2
(1) = a3
(2) = a3

(1)P1 + b1
(2)P1 + b1
(1)P2 + b2
(2)P2 + b2
(1)P3 + b3
(2)P3 + b3

(1)P2,
(2)P2,
(1)P3,
(2)P3,
(1)P1,
(2)P1.

We have the characteristic number on six points of a conic (CNC)
and b(j)
as (7) by substituting the representation coefﬁcients a(j)
into (2), and the CNC value equals +1. We apply this property of
CN to pick arc segments likely lying on an ellipse.

i

i

CN C(P, Q) =

= 1.

(7)

3
(cid:89)

2
(cid:89)

i=1

j=1

b(j)
i
a(j)
i

We provide a simple proof to CN C(P, Q) = +1 based on

Pascal’s hexagon theorem [26] as below.

Proof Let {Qi

(j)|i = 1, 2, 3; j = 1, 2} be six points on a
conic. As shown in Fig. 3, we can obtain three more intersections
as





R1 =< Q(2)
R2 =< Q(1)
R3 =< Q(2)

2 Q(1)
1 Q(2)
1 Q(1)

3 , P1P2 >,
3 , P2P3 >,
2 , P1P3 > .

Then R1, R2, and R3 can be represented by {Qi

(j)|i =
1, 2, 3; j = 1, 2} and {P1, P2, P3} through simple calculations
as






R1 = −|Q2
R2 = −|Q1
R3 = −|Q1

(2), Q3
(1), Q3
(2), Q2

(1), P2|P1 + |Q2
(2), P3|P2 + |Q1
(1), P3|P1 + |Q1

(2), Q3
(1), Q3
(2), Q2

(1), P1|P2,
(2), P2|P3,
(1), P1|P3,

(9)

where we use homogeneous coordination to represent a planar
point as A = [A(x), A(y), A(z)]T , and |A, B, C| denotes the
determinant of the 3 × 3 matrix given by the homogeneous
coordinates of the three points A, B and C as

|A, B, C| =

(10)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

A(x) B(x) C(x)
A(y) B(y) C(y)
A(z) B(z) C(z)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

.

Fig. 3. Characteristic number on six points of a conic (CNC). The closed
loop (cid:52)P1P2P3 intersects a conic (ellipse) at two points on each side
(j)|i = 1, 2, 3; j = 1, 2}. The points Ri(i = 1, 2, 3) are auxiliary
as {Qi
points to prove CN C = +1.

Substituting the coefﬁcients into (2), we calculate CN on three
collinear points (CNL) as (4). It can be proved that the CN value
and Q(1)
equals to −1 if Q(1)
3

are collinear [24].

1 , Q(1)

2

CN L(P, Q) = CN (P, Q) =

= −1,

(4)

3
(cid:89)

i=1

(1)

(1)

bi
ai

The proof process also implies that the calculation of CNL is
achieved by the determinant of a 3 × 3 matrix. In this study, we
use this property to prune line segments in ellipse detection.

2.3 Characteristic number on six points of a conic

(1)Q1

(1)Q1

(2), and the intersection of
(2) >. Let {Qi

(1) and Q1
We denote the line through two points Q1
two lines as <
as Q1
(j)|i = 1, 2, 3; j = 1, 2}
Q1
be six distinct points on a conic (ellipse) as shown in Fig. 3, and
P1, P2 and P3 be three intersection points of the lines connecting
some pairs of the six points on the conic:

(2), Q2

(1)Q2

(2)

P1 =< Q3
P2 =< Q1
P3 =< Q2

(1)Q3
(1)Q1
(1)Q2

(2), Q1
(2), Q2
(2), Q3

(1)Q1
(1)Q2
(1)Q3

(2) >,
(2) >,
(2) > .

(5)

As the homogeneous coordinate of a point in a projective plane
is independent on the initial points constructing the plane, we
specify P1 = (1, 0, 0)T , P2 = (0, 1, 0)T , and P3 = (0, 0, 1)T .

(11)

(12)

Consequently, the points R1,R2 and R3 can be represented by Pi,
a(j)
i (i = 1, 2, 3; j = 1, 2) by substituting (6) into (9) as
i

and b(j)






2 b(1)
R1 = (b(2)
R2 = (0, −b(1)
1 a(1)
R3 = (a(2)

2 a(1)
3 , −a(2)
1 b(2)
3 , a(1)
2 , 0, −b(2)

3 , 0)T ,
1 a(2)
3 )T ,
1 b(1)
2 )T .

According to Pascal’s hexagon theorem [26], R1,R2, and R3

are collinear, i.e.,

|R1, R2, R3| = 0.

The proof of (12) is provided in Appendix A.

Finally, we can obtain (7) by substituting (11) into (12). The
proof is completed. Again, as seen from (9), the ratios of several
determinants of 3 × 3 matrices generate CNC.

3 FAST ELLIPSE DETECTION
In this section, we present our ellipse detector using the char-
acteristic number to prune non-elliptical line segments and pick
arc segments lying on an ellipse. These pruning and picking
processes signiﬁcantly reduce the number of arc candidates for
ﬁnal ﬁtting, rendering fast detection. The complete detection
procedure includes preprocessing, line pruning, arc selection, and
parameter ﬁtting and ellipse validation.

At the preprocessing step, edge points are detected and linked
to generate arc segments, where short segments are removed as
noise. We delete those arc segments likely to be lines detected
by CNL values at the line pruning step. This step reduces the
number of arc segments that are not parts of any ellipses. However,
the possible arc combinations are still too many to efﬁciently
ﬁt elliptical parameters. At the following arc selection step, we
ﬁrstly divide arc segments into four groups, and remove some
impossible arc combinations across these groups according to their
relatively positional relationships. Subsequently, we apply CNC
to pick the arc combinations belonging to one ellipse. Only those
picked arc segments are used to ﬁt elliptic parameters in the last
ﬁtting and validation step. The pruning and picking with CNL and
CNC signiﬁcantly reduce the number of possible arc combinations
that determine the computational load of the ﬁtting. Also, these
pruning and picking steps run fast so that the overall detector is
quite efﬁcient.

3.1 Preprocessing

Given an image, we ﬁrstly smooth the image to partially suppress
noise, and apply the Canny edge detector [27] with default
thresholds in Matlab to extract consecutive edge points. The edge
detector outputs both the position xi and yi, and gradient τi on
each edge point as ei = (xi, yi, τi), where i = 1, 2, ..., N , τi =
dy/dx, N is the number of edge points.

It is possible to apply the CN constraint on any three or six
edge points to determine whether they lie in a line or ellipse.
However, we have to calculate C 3
N point combinations
for N edge points, resulting in high computational complexity.
Moreover, most of these combinations come from noise, or differ-
ent ellipses and lines, spending a large amount time on invalid CN
calculations. Instead, we apply the constraints on arc segments.

N and C 6

In order to efﬁciently shear invalid arc combinations for later
processing, we group arc segments into four sets corresponding
to the arcs from one ellipse distributing in four quadrants as
ArcI , ArcII , ArcIII , and ArcIV , named quadrant sets. In the

4

Fig. 5. Grouping arcs into four sets. The ﬁrst two ﬁgures are two arcs
in ArcI ∪ ArcIII . The difference between the numbers of pixels above
and below (slashed and solid white blocks) can split the sets into two
sets further. The last ﬁgure shows the splitting process.

preprocessing step, we separate edge points ei(i = 1, 2, ..., N )
into two groups ArcII ∪ ArcIV and ArcI ∪ ArcIII by the signs
of edge gradients τi as the ﬁrst stage of this arc grouping:

ß

τi > 0, ei ∈ ArcII ∪ ArcIV ,
τi < 0, ei ∈ ArcI ∪ ArcIII .

(13)

We link each edge point with the other edge points in its eight
neighborhood from the same group with a breadth-ﬁrst strategy
until no edge point exists in the neighborhoods. Consequently, we
separately generate a series of arc segments in two groups shown
in Fig. 4. Figure 4(b) demonstrates the arcs by linking edge points
from the Canny detector (shown in Fig. 4(a)) of the group ArcII ∪
ArcIV , and Fig. 4(c) shows the arc segments of ArcI ∪ ArcIII .
As the second stage of arc grouping, we divide each group
into two sets, eventually producing four sets. As shown in Fig. 5,
the vertices (e1(x), e1(y)), (e1(x), et(y)), (et(x), e1(y)), and
(et(x), et(y)) constitute the bounding box of an arc with the
length of t, where the starting and ending edge points of the arc
are e1 and et, respectively. Denoting the difference between the
numbers of pixels above and below (slashed and solid white blocks
in Fig. 5) as δ, we split each group into two by the sign of δ.
Taking an arc segment in the ArcI ∪ ArcIII group for example,
the arc falls in the ArcIII set if the pixel number above the arc is
greater than the below (δ > 0) otherwise (δ < 0) falls in the ArcI
set. The last plot in Fig. 5 illustrates this splitting processing. We
preform this stage of grouping after line pruning, and hence the
cases of δ = 0 are quite rare. Finally, every arc segment in each
of these four sets comes from one unique ellipse so that only arc
combinations from different sets are necessary for the arc picking
process. Therefore, this preprocessing is also designated for an
efﬁcient ellipse detector.

3.2 Line pruning

As a typical treatment to noise in literature, we simply set a
threshold T hlength (T hlength = 16 in all experiments of this
study) to remove short segments. Following the noise attenuation,
we employ CNL to prune line segments unlikely to come from
an ellipse. The determinant of three edge points, the starting,
midpoint, and ending of an arc segment (e1, ei and et) is taken
as the fast calculation of the CNL value for the segment given
in (12). The geometric interpretation of the determinant is the area
of (cid:52)e1eiet. We use the ratio of the area to the length of the
arc (CN L/t) to robustly estimate whether these three points are
collinear. The ratio close to zero indicates a line segment to be
removed. Figures 4(d) and 6 presents the segments after removing
noise and lines. The top row of Fig. 6 gives the arc segments

5

(a)

(b)

(c)

(d)

Fig. 4. Arcs detection and grouping. (a) shows edge points from Canny detector; (b) shows the arcs in sets ArcII and ArcIV ; (c) shows the arcs
in sets ArcI and ArcIII ; (d) shows the result after removing noise and lines, and the arcs in the same set are labeled in the same color. There are
four colors represent arcs in four sets.

Fig. 6. The segments after removing noise and lines. The top row gives
the arc segments with edge linking, and the bottom provides those after
noise and line pruning.

with edge linking, and the bottom provides those after noise
and line pruning. Many segments from noise and lines disappear,
signiﬁcantly reducing the number of arc candidates.

3.3 Arc selection

i

i

2

1

1

2

3

and b(j)

1 Q(2)

3 Q(2)

(cid:95)
arc2. We intersect Q(1)

1 Q(2)
1
at P2, and Q(1)

and Q(2)
3
at P1, Q(1)
3 Q(2)
3
and Q(1)

In this step, we pick candidate arcs, that are likely to assemble an
ellipse, across the four sets where noise and line segments have
been removed. Speciﬁcally, two arcs, each with three edge points,
are taken from two different sets (one arc per set) in order to
(cid:95)
arc1 and
construct CNC. As shown in Fig. 7, there are two arcs
(cid:95)
arc2, where Q(2)
and Q(1)
1 , Q(1)
are the mid and two endpoints of
2
(cid:95)
3 , Q(2)
arc1, respectively. Similarly, Q(1)
are the points
2
2 Q(2)
and Q(1)
in
2 Q(2)
and Q(1)
at P3. Given
these points in P and Q, we are able to have the representation
coefﬁcients a(j)
(i = 1, 2, 3 and j = 1, 2), and calculate
the CNC value for this arc combination by substituting these
coefﬁcients into (7). Equation 7 also tells that the CNC value
equals +1 if these two arc segments with six points come from
one identical ellipse. Therefore, picking two arc candidates from
one ellipse turns out to simply comparing the CNC value of the arc
combination with the value +1. Similar to line pruning, we can
also use a threshold (T hCN C ) that determines false negative for
this process. The arc pair belonging the same ellipse obtains the
value of CNC close to +1, and the absolute difference of CNC
value and +1, represented as DisCN C , is close to 0, as shown
in Fig. 8 where the triangle constructed by the six points from the
pair is labeled in light green. The red-brown triangle indicates the
arc pair having the CNC value greater than T hCN C , where the
two arc segments of this pair lie on different ellipses.

We only consider

the combinations with arc segments
from two adjacent quadrant sets, e.g., {ArcI , ArcII } and

Fig. 7. Construction of CNC based on two arcs. Q(2)
is the mid points
1
(cid:95)
arc1. Similarly, Q(1)
of
3 ,
Q(2)

2 are two endpoints of
(cid:95)
arc2.

1 and Q(1)
3 are three points on

(cid:95)
arc1, while Q(1)
2 and Q(2)

Fig. 8. Threshold (T hCN C ) is used to determine false negative for arc
selection. The arc pair (labeled in green and blue) belonging the same
ellipse obtains the value of CNC, DisCN C , close to +1, and the triangle
is labeled in light green. The red-brown triangle indicates the arc pair
(labeled in blue and pink) having the CNC value greater than T hCN C .
Points on arcs are labeled in purple, and vertices of triangles are labeled
in grey.

6

Algorithm 1 Picking algorithm for a three-arc combination
Input: ArcI ArcII ArcIII
Output: valid arc combinations set

for each ˆarci ∈ ArcII do
for each ˆarcj ∈ ArcI do

if ˆarci, ˆarcj do not meet coordinate constraints then

Continue.

end if
if DisCN C(ˆarci, ˆarcj) > T hCN C then

Continue.

end if
for each ˆarck ∈ ArcIII do

if ˆarci, ˆarck do not meet coordinate constraints then

Continue.

end if
Add {ˆarci ˆarcj ˆarck} to valid arc combinations set

end for

end for

end for
return valid arc combinations set

3.4 Parameter ﬁtting

There are ﬁve parameters to determine an ellipse, including its
center (two), orientation (one), and major and minor semi-axes
(two). We follow the procedure in [20] to estimate all these
parameters but the center whose calculation we provide below.

We estimate the center as the intersection of auxiliary lines
generated from any two-point pairs on the three arcs picked by the
previous procedure. As illustrated in the top ﬁgure of Fig. 10, S1
and E1 are two points on an arc segment, T1 is the intersection
of the two tangent lines from S1 and E1, and M1 is the middle
point of the line segment S1E1. It is proved that the line M1T1
passes through the ellipse center O. For practical images, it is
unnecessary that all such auxiliary line segments like M1T1 given
by any point pairs on the elliptical arcs, but we are able to locate
the center as the point closest to those lines by the least square
ﬁtting. In this study, we ﬁnd that the accuracy of this ﬁtting
(estimation) also depends on the tangents of the points along the
ellipse.

We use nd (nd = 16 for our experiments) parallel chords
instead of tangent lines in order to minimize the effects from
tangent deviations, as shown in the bottom ﬁgure of Fig. 10. The
points F1 and F2 are the mid points of the arcs ˘S1E1 and ˘S2E2,
respectively. We generate nd chords parallel to S1F2, and so we
do to the chord S2F1. The points M1s and M2s (s = 1, 2, ..., nd)
are the mid-points of the two series of parallel chords to S1F2
and S2F1, respectively. The points of M1s are collinear at m1,
M2s lying on the line m2, and the intersection of m1 and m2
determines the ellipse center O. We estimate m1 and m2 using a
fast variant of the robust Theil-Sen estimator [28] with two arcs in
adjacent quadrant sets. Consequently, we obtain four lines through
the ellipse center generated from a three-arc combination, yielding
at most six pairwise intersections. The algebraic average of the
coordinates of these six intersections is taken as the output ellipse
center (x0, y0).

3.5 Ellipses validation

Candidate ellipses are available after the parameter ﬁtting step.
There may exist false positives or duplicated ones in these candi-
dates so that a validate step is necessary.

Fig. 9. Two examples of invalid three-arc combinations that form one
ellipse.

{ArcII , ArcIII }, but leave out those two-arc combinations from
diagonal sets {ArcI , ArcIII } and {ArcII , ArcIV }. This choice
further lowers down possible combinations, and more importantly
improves the robustness to calculate CNC values. As shown
in Fig. 7, the lines Q(1)
and Q(1)
are likely to be parallel
for arcs from diagonal quadrant sets so that the intersection P1
does not exit, or lies quite far from the edge points. The calculation
of CNC value is so instable that the determination of ellipse is no
more effective. We exclude the combinations with arcs from two
diagonal quadrant sets, avoiding this instability.

1 Q(2)

3 Q(2)

3

1

The combinations with more arc segments are also able to
yield more accurate parameter estimation in the later step. Unfor-
tunately, noise and/or occlusions are likely to bring the absence
of arc segments from one quadrant set. Hence, we constitute the
combinations with three arcs from three different quadrant sets
upon the arc pairs picked by CNC for later parameter ﬁtting. There
are four kinds of valid arc combinations from three quadrant sets
for an ellipse, as shown in the ﬁrst row of Tab. I. We pick out
these combinations in each kind by using both coordinate and
CNC constraints together, where the coordinate constraint takes
relative locations of arcs to remove invalidate combinations. The
second and third rows of Tab. I list the picking rules for valid
combinations using CNC and coordinate constraints, respectively.
(cid:95)
The symbols e1
arc1.
Figure 9 illustrates two examples of invalid three-arc combinations
that form one ellipse, removed by the constraints in Tab. I.

t denote the starting and end points of

1 and e1

Speciﬁcally, the picking process for a three-arc combination
begins with an arc segment in the middle quadrant set, and then
proceed to those in the other two sets. We ﬁnd an arc pair ﬁrst,
and then the third arc to form the combination by alternatively
applying the coordinate and CNC constraints. We take the set
combination {ArcI , ArcII , ArcIII } in Tab. I as an example to
illustrate the picking process. We starts with one arc in ArcII ,
and test the pair of the arc of ArcII and every arc segments
in ArcI with the coordinate constraint. If one pair meet the
coordinate constraint, the CNC constraint is applied to this pair
further. Subsequently, we search the set ArcIII to ﬁnd the third
arc segments forming a pair with the arc in ArcII that follow the
coordinate constraint. Herein, the CNC constraint runs only once
in order to balance the speed and accuracy. We repeatedly run the
picking process for every arc segments in ArcII , and ﬁnd all valid
three-arc combinations for {ArcI , ArcII , ArcIII }. Algorithm 1
details the picking process for this set combination. The similar
process applies to the other three-set combinations in the ﬁrst row
of Tab. I, and ﬁnally we have all valid three-arc combinations
ready for parameter ﬁtting given in the next section.

TABLE I
The picking rules for valid combinations using CNC and coordinate constraints

7

Valid arc
combinations

Sets constraints

(cid:40) ˆarc1 ∈ ArcII
ˆarc2 ∈ ArcI
ˆarc3 ∈ ArcIII

(cid:40) ˆarc1 ∈ ArcIII
ˆarc2 ∈ ArcII
ˆarc3 ∈ ArcIV

(cid:40) ˆarc1 ∈ ArcIV
ˆarc2 ∈ ArcIII
ˆarc3 ∈ ArcI

(cid:40) ˆarc1 ∈ ArcI
ˆarc2 ∈ ArcIV
ˆarc3 ∈ ArcII

Coordinate
constraints

(cid:110) e1
t (x) < e2
1(y) < e3
e1

1(x)
1(y)

(cid:110) e1
t (x) < e3
1(y) > e2
e1

1(x)
1(y)

(cid:110) e1
1(x) > e2
t (y) > e3
e1

t (x)
t (y)

(cid:110) e1
1(x) > e3
t (y) < e2
e1

t (x)
t (y)

ellipses.

4 EXPERIMENTAL RESULTS AND ANALYSIS
We perform a series of experiments on data sets with both
synthetic and real images to evaluate the performance of our fast
detector by comparing with other state-of-the-art methods 1.

4.1 Evaluation metrics and data sets

All the experiments in this paper are executed on a desktop with
Intel(R) Core(TM) i7-6700 CPU whose clock frequency is 3.40
GHz. The performance of ellipse detectors is evaluated in terms
of running time and F-measure. The most time-consuming step in
many existing methods lie in parameter ﬁtting because too many
arc or point candidates are fed to the step. In addition to executing
time, we count candidate combinations of arcs (CC) for ellipse
ﬁtting, and use CC as a direct index to demonstrate the impacts of
CNC and CNL.

F-measure is deﬁned as:

F − measure =

2 × Precision × Recall
Precision + Recall

,

(14)

where

, Recall =

Precision =

Ψ
Ω
The symbol Ω denotes the number of detected ellipses, and Γ
indicates the number of ground-truth ellipses. Ψ is the number
of correctly detected ellipses. The overlapping ratio of a detected
ellipse Ed to the ground truth Eg is deﬁned as:

Ψ
Γ

(15)

.

M(Ed, Eg) =

area(Ed) ∩ area(Eg)
area(Ed) ∪ area(Eg)

,

(16)

where area(E) is the number of pixels inside the ellipse E.
The detected ellipse Ed is considered as a correct detection if
M(Ed, Eg) > T ho. The threshold T ho is set to 0.8 throughout
our experiments, as did in [29].

Experimental data contain both real world and synthetic im-
ages. We use data sets with real world images to validate efﬁciency

1. The source code and resultant images of our detector can be found at

https://github.com/dlut-dimt/ellipse-detector

Fig. 10. Computing the center of the ellipse. The top ﬁgure shows the
ellipse center calculated by two arcs. The bottom ﬁgure shows the
ellipse center calculated by a series of parallel chords.

We provide two indices to validate the candidates. The ﬁrst
one measures how many edge points ﬁtting the corresponding
ellipse. The more edge points ﬁt, the more likely the ellipse exists.
We substitute every edge points into the correspondence ellipse
equation to calculate how it ﬁts the equation. We count the number
of the ﬁtting edge points, and calculate the ratio to the total points
that generate the ellipse by ﬁtting arc combinations.

The second index accounts for arc lengths of three-arc com-
binations giving ellipse parameters. Ideally, the length of an arc
combination is larger than the sum of two semi-axes. We use
the ratio between the total length of one three-arc combination
and three times of the semi-axes summation as the index. Larger
values indicate more stable detection of the ellipse.

The validation in [19] is able to discover duplicated ellipses,
which allows to assess the similarity of two ellipses by comparing
the differences of ellipse parameters. A voting strategy is adopted
to pick up the center of a given cluster, removing duplicate

and accuracy, while synthetic ones are designated to demonstrate
robustness to noise and ellipse variations. Real world images are
those from Dataset #1 and Dataset Prasad, the same as [20],
for fair comparisons. Dataset #1 is composed of 400 images
having elliptic shapes, collected from MIRFlickr and LabelMe
repositories [30]. Those MIRFlickr images are of high quality, and
most of them contain only one object (ellipse), while those from
LabelM are noisy images of low resolution, containing multiple
objects. Dataset Prasad contains 198 real
images from [29],
where objects of oval shapes like human faces are regarded as
ellipses. Besides evaluations on the original Dataset Prasad, we
also construct Dataset #2 by selecting 50 images with rigorous
ellipses in order to show the accuracy of our method on detecting
ellipses. These rigorously elliptical shapes are quite common in
industrial inspection and diagnosis.

4.2 Performance analysis

The effectiveness of line pruning and arc selection steps are
illustrated by comparisons on detection results with and without
these steps. We also provide empirical studies on the hyper-
parameters involved in these steps. The parameters for ellipse
ﬁtting and validation are taken the same values as those in [20].

4.2.1 Performance analysis of line pruning
We remove short and straight line segments using CNL as dis-
cussed in Section 3.2. Our goal is to prune noise effects and lines
in input images as much as possible but preserve arcs of ellipses.
We perform line pruning on Dataset #1 by tuning T hCN L from
0 to 5.0. Intuitively, the threshold T hCN L limits the height of
the triangle formed by the three edge points for CNL calculation.
Therefore, the larger T hCN L is, the more arcs are to be removed.
The zero threshold, T hCN L = 0, indicates no line pruning step
included.

Table II lists the values of arc numbers, running time, and F-
measure with varying T hCN L values. There are averagely 181 arc
segments without line pruning (T hCN L = 0), and more segments
are removed when increasing T hCN L values. The computing time
is 28.86ms, and F-measure is 0.4313 without line pruning. When
noise and line segments are removed by CNL, the computing time
is becoming lower and F-measure increases. We obtain the best
performance, 8.52ms for computation and 0.4692 for F-measure
when T hCN L = 3.0. The computing time is still decreasing
when more arc segments are pruned by the thresholds larger than
3.0. The values of F-measure slightly decrease due to increased
false negative. These results show that the line pruning step using
CNL is effective to remove noise and lines, and also alleviate
the computational load for later steps. We set T hCN L = 3.0 to
balance the accuracy and computing time in all comparisons with
the others.

TABLE II
The performance of line pruning step.

T hCN L

arc num avg. time(ms)

F-measure

0
1
2
3
4
5

181
170
108
65
40
26

28.86
26.52
13.75
8.52
6.79
6.17

0.4313
0.4338
0.4576
0.4692
0.4499
0.4226

8

Fig. 11. Relationship between point coordinates and CNC values. Dif-
ferent colors indicate various CNC values given by the color bar on the
right most. Five distinct points P1, ..., P5 on the ellipse are ﬁxed, and the
sixth point around the ellipse are varied to show the distribution of CNC
values.

4.2.2 Performance analysis of arc selection

We use the geometric constraint of six points on arcs derived
from CNC to pick up arc segments belonging to one ellipse.
Theoretically, the CNC value of six points lying on an ellipse
equals +1, but various imaging conditions (e.g., thermal noise
and lens distortions) in practical applications may cause the value
deviating from +1. As discussed in Section 3.3, we relax this hard
constraint to a range in the vicinity of +1 determined by T hCN C .
Herein, we perform experimental analysis on the relationship
between point coordinates and CNC values. This analysis does
not only give arise to an appropriate threshold, but also validates
the effectiveness of the arc selection based on CNC.

Supposing an ellipse centering at the coordinate origin, we ﬁx
ﬁve distinct points P1, ..., P5 on the ellipse, and vary the sixth
point around the ellipse to show the distribution of CNC values
in Fig. 11. Different colors indicate various CNC values given by
the color bar on the right most of Fig. 11. All the CNC values
higher than 1.4 are colored in red-brown, while all those lower
than 0.6 in blue. Figure 11 illustrates that most of CNC values
with the sixth point close to the ellipse fall within the range from
0.6 to 1.4. There exist several regions where CNC values lie in
the range while the sixth point locates far from the ellipse. These
regions include the star-shaped area out of the ellipse between P2
and P3, and the bottom left and top right ends of the line stretching
out of P5. This observation can be explained by the fact that the
CNC value of +1 indicates the points lying on a conic curve not
only an ellipse. However, these ’outliers’ have few effects on our
detector, because other types of conic curves, e.g., hyperbola and
parabola, seldom appear in practical industrial images, and the
majority can be also removed by the coordinate constraint even if
a few of them appear.

We further apply our detector on dataset #1 by varying
T hCN C , the absolute deviation from +1, from 0 to 50, giving
seventeen values in total. Figure 12 illustrates the values of
computing time with varying thresholds. The blue line in Fig. 12
demonstrates the seventeen values of T hCN C in an ascending
order, also listed in the third row below the plot. The step values

vary with the value ranges of T hCN C , i.e., 0.1 for the range from
0 to 0.6, 1.0 for 1 to 5, and 10 for values larger than 10. The
orange and grey bars show the computing time with and without
the arc selection step, whose values are listed in the ﬁrst and
second rows below, respectively. The average computing time is
6.96 ms for each image, one half of the detection time without
CNC, 13.4ms, when we use the hard constraint T hCN C = 0
picking only a small fraction of arc segments. More arc segments
are included for parameter ﬁtting, demanding more computing
time, when increasing the threshold values. When T hCN C is
larger than 20, the detector spends more time than that without
the selection step since the calculation of CNC takes more time
than what the constraint can save. As a result, the orange bars are
higher than the grey ones for these T hCN C values in Fig. 12.

Figure 13 shows the values of F-measure (F-m) with varying
threshold values. The F-measure for the detector without the CNC
constraint is 0.4385 labeled in the gray bar, while ours in orange
bars. The hard constraint yields a very low F-m 0.0033 since
the choice excludes many arc segments slightly deviating from an
ellipse, resulting in signiﬁcant false negatives. The threshold 0.2
outputs the best F-m 0.4641, even higher than the detector without
this constraint. This improvement shows that the CNC constraint
is also able to exclude false positives in addition to decreasing the
computing time from 13.40ms to 8.58ms. As expected, the values
of F-m given by the thresholds larger than 20 are quite close to
that without the selection step. In these cases, the selection step
takes no effect on lowering down false positives. Therefore, the
arc selection step using CNC is quite crucial to both efﬁciency and
accuracy. We choose the threshold as T hCN C = 0.2 to generate
the best performance in the following experiments.

4.3 Comparisons with the state of the art

Firstly, we compare our detector with three recent arc-based
methods, i.e., Zhang [11], Libuda [13], and Fornaciari [20], on
Dataset #1. The set consists of images with different qualities and
various numbers of target ellipses. The latest works of [7] and [8]
are not so relevant as these three because both are point-based
and applicable to sceneries where only one ellipse appear. The
execution program of [20] is provided by the authors, and we take
the results of [11] and [13] reported in [20]. Table III lists the
comparisons on average running time and F-measure. The method
of Zhang [11] performs the worst: the ﬁtting on a large number of
pixel combinations takes much time over 4s for an image; its F-
measure is the lowest as 0.3421. Libuda [13] and Fornaciari [20]
output the similar efﬁciency with the average execution time for
each image 14.38 ms and 12.79 ms, respectively. The values of
their F-measure are also quite close. Our detector achieves the
best in terms of both efﬁciency(8.54ms) and accuracy (F-measure
about 0.47). Speciﬁcally, we buy 7% higher accuracy with 33%
less execution time than the fastest method [20].

TABLE III
F-measure and runtime compared with the state of the art on Dataset
#1

9

Several examples of the above methods on Dataset #1 are
shown in Fig. 14 where the ﬁrst column is the input images, and
the second one lists the ground truth (GT). False negatives occur in
all the results of Libuda [13] except for the ﬁfth row. The method
of Fornaciari [20] works quite close to ours that correctly detects
almost all the ellipses in these images. It is worth noting that
only our method successfully picks out the middle wheel partially
occluded by the lady in the third image, while the other three fail.
Compared with the ground truth, our detector outputs one extra
ellipse out of the bottom right tray. Actually, one can ﬁnd a dim
elliptical trail along the tray, but the ground truth neglects it.

Secondly, we compare the execution time on each processing
step with the-state-of-the-art on Dataset #1, as shown in Tab. IV.
The method of Zhang [11] spends about 4243 ms on estimating
the parameters due to huge numbers of possible point combina-
tions. The method of Prasad [29] reduces the time on parameter
estimation via grouping arcs with curvature and convexity, but the
grouping spends additional 278ms. The method of Libuda [13]
uses an iterative strategy, and the time spent on each of the ﬁrst
three steps equals about 4.5ms. Fornaciari’s detector [20], the
fastest one among the existing, spends the most time 4.9ms on
grouping arcs with their relative locations against the other steps.
In contrast, our method only uses about half of the execution time
of [20] on the grouping step, and the total execution time is less
than two third of [20]. Thus, our detector reduces the time for the
grouping step, the bottleneck for efﬁcient detectors.

Further, we peer into the proposed detector to analyze how line
pruning and arc selection accelerate detection. Table V illustrates
the effects of CNL and CNC by listing the averaged values of arc
numbers, arc combination numbers (CC) for parameter ﬁtting, ex-
ecution time and F-measure on Dataset #1. Without any processing
using CNL nor CNC, possible averaged arcs and arc combinations
(CC) are 181 and 2619, respectively. After line pruning, the arc
number reduces to 65, about one third of of the original, and
the CC value signiﬁcantly decreases to 196, 6% of the original.
Only 40 arc combinations remain for parameter ﬁtting, shearing
98.5% combinations from the original. Naturally, the execution
time drops down 93% from 129.33ms to 8.52ms. The value
of F-measure also increases from 0.3163 to 0.4692 since many
false positives are removed by these two steps using CNL and
CNC. Green curves in the ﬁrst and second rows of Fig. 15 present
possible ellipses to be ﬁtted without and with our pruning/selection
steps, respectively. It is evident that the green curves in the second
row are much less than those in the ﬁrst row, intuitively showing
the effectiveness of our CNL/CNC based processing to save time
and improve accuracy.

TABLE V
The effect of CNL and CNC

arc Num
CC
avg.time (ms)
F-measure

After arc
detection

After line
pruning

After arc
selection

181
2619
129.33
0.3163

65
196
12.73
0.4090

65
40
8.52
0.4692

Method

F-measure

avg.time(ms)

Libuda[13]
Prasad[29]
Zhang[11]
Fornaciari[20]
Our

0.4258
0.4512
0.3421
0.4385
0.4692

14.38
823.38
4243.86
12.79
8.54

Finally, we compare our detector with [20], giving the best
performance among the existing, in terms of CC, F-measure, and
execution time on three data sets including Datast #1, Dataset
#2, and Dataset Prasad. As shown in Tab. VI, our method out-
performs [20] on all the three data sets. The last column shows

10

Fig. 12. The values of computing time with varying thresholds. We vary the absolute deviation from +1, from 0 to 50, giving seventeen T hCN C
values in total, labeled in blue line and listed in the third row. The orange and grey bars show the computing time with and without the arc selection
step.

Fig. 13. The values of F-measure (F-m) with varying thresholds. We take the same deviation from +1 as did in Fig. 12, while the orange and grey
bars show the F-measure with and without the arc selection step.

TABLE IV
Execution times (ms) for each step compared with the-state-of-the-art on Dataset #1.

Libuda [13]

Prasad [29]

Zhang [11]

Fornaciari [20]

Our

Edage detection
Pre-processing
Grouping
Estimation
Validation and Clustering
Total

4.49
4.15
4.89
0.84
0.00
14.38

3.54
78.03
278.01
3.40
460.39
823.38

3.97
3.55
0.25
4236.06
0.03
4243.86

3.45
1.94
4.90
2.30
0.21
12.79

3.43
1.90
2.53
0.63
0.06
8.54

11

Fig. 14. Several examples of the compared methods on Dataset #1. The ﬁrst column is the input images, and the second one lists the ground truth
(GT).

The ﬁrst synthetic data set consists of 9100 ellipses with
various semi-axes ratios and orientations. One semi-axis is ﬁxed
as 100, and the other one varies so that the ratios range from 0.01
to 1 at the step of 0.01. Orientations vary from 1◦ to 90◦ at the
step of 1◦. The second data set contains 10000 images with a ﬁxed
center and orientation, showing changes on ratios and lengths of
semi-axes. One semi-axis varies from 1 to 100 at the step of 1,
and the other one changes accordingly so that axes ratios range
from 0.01 to 1 at the step of 0.01. Both data sets come from [20]
that generates synthetic 400 × 400 images, each containing one
single ellipse without noise.

Figure 16 illustrates comparisons with [20], where black points
indicate failures of detection. The results on the ﬁrst data set are
given in Fig. 16(a) and Fig. 16(b). The horizontal axis gives ratios
of two semi-axes, and the vertical one shows orientations. Both
methods are robust to orientation changes as long as axes ratios
are larger than 0.25, but they fail in the cases of small axes ratios
when ellipses degenerate into straight lines. The results on the
second data set are shown in Fig. 16(c) and Fig. 16(d), where the
vertical axis indicates lengths of major axes. The robustness of
both methods is quite similar, working well on ellipses whose
major axis is longer than 10 and axes ratio is larger than 0.25.
Small arcs are likely to be pruned as noise when the ellipse only
has a few pixels. Fortunately, one may tackle the problem of small
ellipses by upscaling the image as did in [20]. Therefore, the
proposed method is quite robust, and only fails in some extreme
cases, e.g., small and extremely oblate ellipses, which are quite

Fig. 15. Ellipses needed to be ﬁtted with or without line pruning and
arc selection. Green curves in the ﬁrst and second rows present pos-
sible ellipses to be ﬁtted without and with our pruning/selection steps,
respectively.

the improvement percentage both on efﬁciency and accuracy. The
accuracy of the proposed detector increases about 6.6% in average
over [20], and more signiﬁcantly our detector averagely runs about
31.0% faster than [20] on all the three data sets. These results show
that our detector is applicable to real time scenarios in practice.

4.4 Robustness to ellipse variations and noise

In order to investigate the robustness to ellipse variations and
noise, we use two synthetic data sets with different orientations
and ratios of two semi-axes of ellipses, and also apply salt-
and-pepper noise to real world images. The noise break arcs
into several small fragments, which may affect the accuracy and
efﬁciency.

12

(17)

(18)

(19)

TABLE VI
Testing results of the proposed methods compared with [20] on three datasets.

DataBase

avg. time(ms)
Ours
[20]

F-m

CC

[20]

Ours

[20]

Ours

improvement percentage
accuracy

speed

Dataset Prasad
Dataset #1
Dataset #2

4.34
13.58
5.26

3.35
8.55
4.09

0.2874
0.4385
0.5893

0.3059
0.4692
0.6271

82
267
117

19
40
34

22.70%
37.05%
22.27%

6.44%
7.00%
6.41%

(a) [20]

(b) Ours

(c) [20]

(d) Ours

Fig. 16. Robustness to ellipse variations compared with [20]. Figure (a)-(b) are results on the ﬁrst dataset. The horizontal axis gives ratios of two
semi-axes, and the vertical one shows orientations. Figure (c)-(d) are results on the second dataset. The vertical axis indicates lengths of major
axes, and the black points indicate failures of detection.

rare in reality.

Then three intersections

We add salt-and-pepper noise to images of Dataset #2 with
the ratios of noise to image set as 3%, 6%, 9%, 12%, 15% and
18% to validate the robustness of our method to noise. Again, we
compare with [20] on efﬁciency and accuracy, shown in Fig. 17.
The values of F-measure for these two methods on images without
noise are 6.2 and 5.8, respectively. The values decrease for both
methods when the noise increases. When the ratio of noise to
image is up to 18%, our value is about 0.35, higher than that
of [20]. When the noise level is getting higher, the execution time
of our detector stays around 4ms, and that of [20] ﬂuctuates a bit
around 5ms not so stable as ours. Generally, both methods runs
faster as noise increases because they are able to remove small arc
segments caused by noise. As a summary, noise has few effect on
the efﬁciency, but slightly lower down the accuracy.

5 CONCLUSIONS

In this paper, an ellipse detector for real-time application is
proposed. We trades off accuracy and efﬁciency and pay more
attention to the execution time. We introduce a new geometry
constraint to prune lines and select arcs belong to the same ellipse.
The detector removes the straight arcs based on characteristic on
line (CNL), and selects candidate elliptical arc combinations by
characteristic on conic (CNC). Our method outperforms the-state-
of-the-art by the experiments on real images, which can be used in
real-time for various applications. In the future, we will improve
our method to make it possible to detect quite small ellipses in
images, which is a challenge for most existing methods.

APPENDIX A
PROOF OF PASCAL’S HEXAGON THEOREM





R1 =< Q(2)
R2 =< Q(2)
R3 =< Q(2)

2 Q(1)
3 Q(1)
1 Q(1)

3 , Q(2)
1 , Q(2)
2 , Q(1)

1 Q(1)
2 Q(1)
3 Q(2)

1 >,
2 >,
3 >

are collinear.

Proof: The coordinate of R1, R2 and R3 can be represented

by {Qi

(j)|i = 1, 2, 3; j = 1, 2} as






R1 = (Q2
R2 = (Q3
R3 = (Q1

(2) × Q3
(2) × Q1
(2) × Q2

(1)) × (Q1
(1)) × (Q2
(1)) × (Q3

(2) × Q1
(2) × Q2
(1) × Q3

(1)),
(1)),
(2)),

where × denotes the cross product of two points. Then R1, R2
and R3 can be represented through simple calculations as
(2), Q3

R1 = |Q2

(1), Q1

(1)|Q1






−|Q2

(2), Q3

(1), Q1

R2 = |Q3

(2), Q1

(1), Q2

(1)|Q2

−|Q3

(2), Q1

(1), Q2

R3 = |Q1

(2), Q2

(1), Q3

(2)|Q3

(1),

(1),

(2)
(2)|Q1
(2)
(2)|Q2
(1)
(1)|Q3

(2), Q2
To prove that R1, R2 and R3 are collinear is equivalent to prove

(1), Q3

−|Q1

(2).

|R1, R2, R3| = 0.

(20)

Then we can substitute (19) into (20), and get the equivalent
equation as

|Q1
|Q2
= |Q1
|Q2

(1), Q2
(2), Q3

(1), Q3
(2), Q1

(1)||Q1
(1)||Q3

(2), Q2
(2), Q1

(2), Q3
(2), Q2

(2), Q2

(2), Q3

(2)||Q1

(1), Q2

(1)|

(1), Q3

(2), Q1

(1)||Q3

(1), Q1

(2), Q2

(1)|
(1)|
(2), Q3
(1)|.

(21)

(j)|i = 1, 2, 3; j = 1, 2} be
Pascal’s hexagon theorem: Let {Qi
different points on a non-degenerative conic C, as shown in Fig. 3.

In order to prove it, we can replace any point Qi
general point Q(x, y, z), taking Q1

(j) with the
(1) for example, then we can

13

(a) F-measure

(b) Execution time

Fig. 17. Robustness to salt-and-pepper noise. The ratios of noise to image are set as 3%, 6%, 9%, 12%, 15% and 18%. (a) shows the F-measure of
[20] and our method. (b) Running time are plotted against noise density. Each point of these curves is obtained from the detection results of Dataset
#2.

get the parametric equations of conic C by other ﬁve points. As
(1) is one point on conic C, it must meet (21). The proof is
Q1
completed.

ACKNOWLEDGMENTS
We thank Dr. M. Fornaciari, Dr. S. Mulleti and Dr. T. Lu for
providing their executables and insights. We also thank Dr. M.
Fornaciari for his experimental data.

REFERENCES
[1] T. Cooke, “A fast automatic ellipse detector,” in 2010 International
Conference on Digital Image Computing: Techniques and Applications.
IEEE, 2010, pp. 575–580.

[2] S. Zafari, T. Eerola, J. Sampo, H. Kalviainen, and H. Haario, “Seg-
mentation of overlapping elliptical objects in silhouette images,” IEEE
Transactions on Image Processing, vol. 24, no. 12, pp. 5942–5952, 2015.
[3] C. Teutsch, D. Berndt, E. Trostmann, and M. Weber, “Real-time detection
of elliptic shapes for automated object recognition and object tracking,”
in Electronic Imaging 2006.
International Society for Optics and
Photonics, 2006, pp. 60 700J–60 700J.
J. Illingworth and J. Kittler, “A survey of the hough transform,” Computer
vision, graphics, and image processing, vol. 44, no. 1, pp. 87–116, 1988.
[5] R. A. McLaughlin, “Randomized hough transform: improved ellipse
detection with comparison,” Pattern Recognition Letters, vol. 19, no. 3,
pp. 299–305, 1998.

[4]

[6] W. Lu and J. Tan, “Detection of incomplete ellipse in images with
strong noise by iterative randomized hough transform (irht),” Pattern
Recognition, vol. 41, no. 4, pp. 1268–1279, 2008.
J. Liang, Y. Wang, and X. Zeng, “Robust ellipse ﬁtting via half-quadratic
and semideﬁnite relaxation optimization,” IEEE Transactions on Image
Processing, vol. 24, no. 11, pp. 4276–4286, 2015.

[7]

[8] S. Mulleti and C. S. Seelamantula, “Ellipse ﬁtting using the ﬁnite rate of
innovation sampling principle,” IEEE Transactions on Image Processing,
vol. 25, no. 3, pp. 1451–1464, 2016.

[9] Y. Xie and Q. Ji, “A new efﬁcient ellipse detection method,” in 16th
IEEE, 2002,

International Conference on Pattern Recognition, vol. 2.
pp. 957–960.

[10] C. Basca, M. Talos, and R. Brad, “Randomized hough transform for
ellipse detection with result clustering,” in EUROCON 2005-The Inter-
national Conference on ”Computer as a Tool”, vol. 2.
IEEE, 2005, pp.
1397–1400.

[11] S.-C. Zhang and Z.-Q. Liu, “A robust, real-time ellipse detector,” Pattern

Recognition, vol. 38, no. 2, pp. 273–287, 2005.

[12] E. Kim, M. Haseyama, and H. Kitajima, “Fast and robust ellipse ex-
traction from complicated images,” in Proceedings of IEEE information
technology and applications. Citeseer, 2002.

[13] L. Libuda, I. Grothues, and K.-F. Kraiss, “Ellipse detection in digital
image data using geometric features,” in Advances in Computer Graphics
and Computer Vision. Springer, 2007, pp. 229–239.

[14] D. K. Prasad, M. K. Leung, and C. Quek, “Elliﬁt: An unconstrained, non-
iterative, least squares based geometric ellipse ﬁtting method,” Pattern
Recognition, vol. 46, no. 5, pp. 1449–1465, 2013.

[15] T. M. Nguyen, S. Ahuja, and Q. J. Wu, “A real-time ellipse detection
based on edge grouping,” in IEEE International Conference on Systems,
Man and Cybernetics.

IEEE, 2009, pp. 3280–3286.

[16] F. Mai, Y. Hung, H. Zhong, and W. Sze, “A hierarchical approach for
fast and robust ellipse extraction,” Pattern Recognition, vol. 41, no. 8,
pp. 2512–2524, 2008.

[17] A. Y.-S. Chia, S. Rahardja, D. Rajan, and M. K. Leung, “A split
and merge based ellipse detector with self-correcting capability,” IEEE
Transactions on Image Processing, vol. 20, no. 7, pp. 1991–2006, 2011.
[18] T. Lu, W. Hu, C. Liu, and D. Yang, “Effective ellipse detector with
polygonal curve and likelihood ratio test,” IET Computer Vision, vol. 9,
no. 6, pp. 914–925, 2015.

[19] D. K. Prasad and M. K. Leung, “Clustering of ellipses based on their
distinctiveness: An aid to ellipse detection algorithms,” in 3rd IEEE Inter-
national Conference on Computer Science and Information Technology
(ICCSIT), vol. 8.

IEEE, 2010, pp. 292–297.
[20] M. Fornaciari, A. Prati, and R. Cucchiara, “A fast and effective ellipse
detector for embedded vision applications,” Pattern Recognition, vol. 47,
no. 11, pp. 3693–3708, 2014.

[21] Y. Sugaya, “Ellipse detection by combining division and model selection
based integration of edge points,” in 2010 Fourth Paciﬁc-Rim Symposium
on Image and Video Technology (PSIVT).

IEEE, 2010, pp. 64–69.

[22] C. Liu and W. Hu, “Effective method for ellipse extraction and integration
for spacecraft images,” Optical Engineering, vol. 52, no. 5, pp. 057 002–
057 002, 2013.

[23] Z. Luo, X. Zhou, and D. X. Gu, “From a projective invariant to some
new properties of algebraic hypersurfaces,” Science China Mathematics,
vol. 57, no. 11, pp. 2273–2284, 2014.

[24] X. Fan, H. Wang, Z. Luo, Y. Li, W. Hu, and D. Luo, “Fiducial facial
point extraction using a novel projective invariant,” IEEE Transactions
on Image Processing, vol. 24, no. 3, pp. 1164–1177, 2015.

[25] Q. Jia, X. Fan, Y. Liu, H. Li, Z. Luo, and H. Guo, “Hierarchical projective
invariant contexts for shape recognition,” Pattern Recognition, vol. 52,
pp. 358–374, 2016.

[26] N. Stefanovi´c and M. Miloˇsevi´c, “A very simple proof of pascals hexagon
theorem and some applications,” Proceedings-Mathematical Sciences,
vol. 120, no. 5, pp. 619–629, 2010.

[27] J. Canny, “A computational approach to edge detection,” IEEE Transac-
tions on pattern analysis and machine intelligence, no. 6, pp. 679–698,
1986.

[28] J. Matouˇsek, “Randomized optimal algorithm for slope selection,” Infor-

mation processing letters, vol. 39, no. 4, pp. 183–187, 1991.

[29] D. K. Prasad, M. K. Leung, and S.-Y. Cho, “Edge curvature and convexity
based ellipse detection method,” Pattern Recognition, vol. 45, no. 9, pp.
3204–3221, 2012.

[30] R. Hartley and A. Zisserman, Multiple view geometry in computer vision.

Cambridge university press, 2003.

6
1
0
2
 
g
u
A
 
6
2
 
 
]

V
C
.
s
c
[
 
 
1
v
0
7
4
7
0
.
8
0
6
1
:
v
i
X
r
a

1

A Fast Ellipse Detector Using Projective
Invariant Pruning

Qi Jia, Xin Fan, Member, IEEE, Zhongxuan Luo, Lianbo Song, and Tie Qiu

Abstract—Detecting elliptical objects from an image is a central task in robot navigation and industrial diagnosis where the detection
time is always a critical issue. Existing methods are hardly applicable to these real-time scenarios of limited hardware resource due to
the huge number of fragment candidates (edges or arcs) for ﬁtting ellipse equations. In this paper, we present a fast algorithm detecting
ellipses with high accuracy. The algorithm leverage a newly developed projective invariant to signiﬁcantly prune the undesired
candidates and to pick out elliptical ones. The invariant is able to reﬂect the intrinsic geometry of a planar curve, giving the value of −1
on any three collinear points and +1 for any six points on an ellipse. Thus, we apply the pruning and picking by simply comparing these
binary values. Moreover, the calculation of the invariant only involves the determinant of a 3 × 3 matrix. Extensive experiments on three
challenging data sets with 650 images demonstrate that our detector runs 20%-50% faster than the state-of-the-art algorithms with the
comparable or higher precision.

Index Terms—Ellipse detection, Projective invariant, Real-time.

(cid:70)

1 INTRODUCTION

E LLIPSES are quite common in natural or artiﬁcial scenes. The

detection of ellipses in a fast and reliable manner from real
world images provides a powerful analysis tool for many computer
vision applications such as wheels detection [1], biological cell di-
vision [2], and object segmentation for industrial applications [3].
Ellipse detection still remains unresolved as one of the classical
tasks with long history. Most existing methods perform far from
real time, which hinder their applications in reality.

The earliest ellipse detection algorithm dates back to the
classical Hough transform (HT) that ﬁts the parametric form of
an ellipse using a voting scheme [4]. The standard HT approach
extracts ellipses by ﬁnding the clusters in a ﬁve-dimensional
(5D) parametric space, consuming a great deal of memory and
time. The randomized HT (RHT) improves the performance by
reducing the number of false alarms [5]. The iterative RHT (IRHT)
speeds up RHT so signiﬁcant by focusing on the candidates
likely to be an ellipse that it only needs 1-D accumulators [6].
However, both RHT and IRHT are still quite slow attributing to the
voting processing among numerous candidates, and the geometry
relationships between points are also neglected during voting.

Researchers introduce algebraic or geometric constraints on
points of an ellipse to screening candidates. Liang et al. [7] intro-
duce the maximum correntropy criterion into the constrained least-
square ﬁtting to alleviate the inﬂuence of outliers. Mulleti et al. [8]
use the ﬁnite rate of innovation sampling principle to ﬁt noisy
or partial ellipse. Both methods produce ellipses with less bias.
However, they can only work on the image with one single
ellipse. Xie and Ji exploit the symmetry of two points on ellipse,

• Q. Jia, X. Fan, Z. Luo, L. Song, and T. Qiu are with the School of Software,
Dalian University of Technology, China, and also with the Key Laboratory
for Ubiquitous Network and Service Software of Liaoning Province.
E-mail: xin.fan@ieee.org
Z. Luo is also with the School of Mathematical Sciences, Dalian University
of Technology, China.
This work was supported in part by the National Natural Science Founda-
tion of China under Grant 61402077, Grant 61432003, Grant 61328206,
Grant 11171052.

•

•

reducing the voting parameter to one [9]. However, it is time-
prohibitive to enumerate every point pairs as elliptical candidates.
Basca et al. [10] accelerate Xie et al.’s method with RHT by
considering only a small random subset of initial point pairs.
Zhang and Liu [11] use edge directional properties to reduce point
combinations that lie out of the same ellipse boundary.

Many methods take into account the geometric constraints on
arc segments as the symmetry between points brings too many
candidate pairs. Kim et al. [12] extract arc segments approximated
by short straight lines. Libuda et al. [13] and Prasad et al. [14]
improve Kim et al.’s method with less memory usage. However,
these candidate arcs connecting short line segments may merge
intersected arcs from different ellipses, resulting in lower pre-
cisions [12], [13]. Nguyen et al. [15] detect ellipses upon arcs
by edge grouping. Their method is able to handle incomplete
ellipses, but fails to detect ellipses splitting into many short
arcs. Some other works formulate the mergence of elliptical arcs
as an assignment problem, and iteratively correct the detection
results [16], [17], [18]. These methods have high detection rates,
but suffer from heavy computational costs. Prasad et al. [19]
merge elliptical arcs with the relationship score given by the
center of the ellipse ﬁtting the arcs. Recently, Fornaciari et al. [20]
develop an ellipse detector that classiﬁes elliptical arcs into four
groups and estimates the ellipse parameters using the decomposed
parameter space. There are still a number of candidate arcs in
each group while their method renders a relatively faster detection
than previous methods. Especially, it is quite time consuming to
calculate every possible combinations of arcs from each group,
not to mention that many of them are wrong combinations.

All aforementioned methods start the estimation from points
or arcs with their positional constraints. Actually, there exist more
constraints whether points or arcs are amenable to the analytical
ellipse equation. In [21], RANSAC is used to randomly choose
ﬁve points repeatedly until the ellipse determined by these ﬁve
points closely passes through a maximum number of edge points.
This method is inefﬁcient as there exist so many combinations of
ﬁve points and one has to calculate ellipse parameters for each

ﬁve-point combination. Instead of directly calculating the ellipse
parameters, Liu and Hu [22] use geometric distances of points
to a conic in order to evaluate the similarity between any two
of selected arcs. There are still a large number of wrong arcs
combinations, and the computation of distances between points
and arcs lower down its efﬁciency.

In this paper, we circumvent the high computational load by
pruning and picking candidates using a projective invariant, named
characteristic number (CN) [23]. The projective invariance of CN
is introduced in [24] acting as geometric constraints for ﬁducial
point localization under face pose changes. Later, Jia et al. employ
this invariant property to construct a shape descriptor robust to
perspective deformations [25]. For the ﬁrst time, we explicitly
take the advantage of the CN property giving the characterization
of the intrinsic geometry of an underlying planar curve of points.
The invariant gives the value of −1 on any three collinear points
and +1 for any six points on a conic (ellipse or other conic curves).
We are able to efﬁciently pruning straight lines and to determine
whether non-collinear six points belong to the same conic without
need of analytically ﬁtting nor voting. The calculation of CN is
also quite fast since the determinants of 3 × 3 matrices constitute
the primitives of CN.

Figure 1(b) illustrates the pruning and picking on an input
image with a bunches of ellipses in Fig. 1(a). Candidate arc
segments appear different colors, and we are able to prune those
line segments having the CN value −1. We use six points on
two arc segments, three on each, to calculate a CN value. The
points on the bold arcs in pink and blue form the light brown
triangle, while those on blue and green bold arcs generate the light
green triangle. These triangles (closed loops) formed by auxiliary
lines connecting arc points are necessary for CN calculation.
The six points on the arc pairs from the same ellipse, e.g., the
blue and green pair in Fig. 1(b), give the CN value +1. Thus,
the arcs belonging to one ellipse easily pop out by CN values,
and Fig. 1(c) shows the ellipse candidates formed by these picked
arc segments. Figure 1(d) presents the ﬁnal detection results by
further ellipse ﬁtting and validation. The proposed method is
robust with high efﬁciency, suitable for real-time applications as
validated in experiments.

The rest of this paper is organized as follows. Section 2
introduces the characteristic number (CN) and its property on lines
and conic curves. Section 3 elaborates our fast ellipse detection
algorithm with line pruning and arc picking using CN. Section 4
demonstrates experimental evaluations on accuracy and efﬁciency.
Section 5 concludes the paper.

2 CHARACTERISTIC NUMBER ON LINE AND CONIC
In this section, we ﬁrst introduce the general deﬁnition of the
characteristic number (CN), and give its computation on three
collinear points (CNL) and six points in a conic curve (CNC),
respectively. Also, we present the CN properties for these two
conﬁgurations, the key to efﬁciently pruning line segments and
picking candidates for elliptical arcs.

2.1 Characteristic number

The characteristic number extends the classical cross ratio in
various respects, and reﬂects the intrinsic geometry underlying
given points. The CN value of three collinear points is −1, while
six points lying on a conic curve have a common CN value +1.
We give the deﬁnition of CN below [23].

2

(1)

(2)

1 , Q(1)
3 . Three pairwise intersecting lines a, b and c form a closed loop

Fig. 2. Characteristic number on three collinear points (CNL), Q(1)
and Q(1)
(cid:52)P1P2P3.

2

Deﬁnition 1 Let Pm be m-dimension projective space over
K, and P1, P2, . . . , Pr be r distinct points in Pm that con-
struct a closed loop (Pr+1 = P1). There are n distinct points
Q(1)
on the line segment PiPi+1, i = 1, . . . , r. Each
i
point Q(j)

i
can be linearly represented by Pi and Pi+1 as

, . . . Q(n)

i

Q(j)

i = a(j)

i Pi + b(j)

i Pi+1.

Let P = {Pi}r

i=1 and Q= {Q(j)

i }j=1,...,n

i=1,...,r , the quantity

CN (P, Q) =

r
(cid:89)

(cid:32) n
(cid:89)

i=1

j=1

(cid:33)
,

b(j)
i
a(j)
i

is deﬁned as the characteristic number of P and Q.

The classical cross ratio is a special case of CN when r = 2
and n = 2. The characteristic number is proven to be a projective
invariant, meaning that CN values keep unchanged under projec-
tive/perspective transformations.

The deﬁnition of CN requires a closed loop with r sides,
and the number of points Q(j) at every side has to be identical.
Subsequently, we draw auxiliary lines to set up this geometric
conﬁguration required for calculating CN on three collinear points
and six points on a conic curve (ellipse).

2.2 Characteristic number on three collinear points

Three pairwise intersecting lines a, b and c intersect at three points
P1, P2 and P3, forming a closed loop. These three lines intersect
another line l at three points Q(1)
1 , Q(1)
3 , as shown
in Fig. 2. According to Deﬁnition 1, Q(1)
and Q(1)
can
3
be linearly represented by P1, P2 and P3 as:

1 , Q(1)

and Q(1)

2

2






Q1
Q2
Q3

(1) = a1
(1) = a2
(1) = a3

(1)P1 + b1
(1)P2 + b2
(1)P3 + b3

(1)P2,
(1)P3,
(1)P1,

(3)

(a)

(b)

(c)

(d)

Fig. 1. Ellipse detection process: (a) input image, (b) line pruning and arc picking, (c) candidate ellipse given by picked arcs, and (d) ﬁnal detection
with parameter ﬁtting and ellipse validation.

3

(6)

(8)

Similar to (3), each point of {Qi
linearly represented by a pair of points from {P1, P2, P3}.

(j)|i = 1, 2, 3; j = 1, 2} can be

Q1
Q1
Q2
Q2
Q3
Q3

(1) = a1
(2) = a1
(1) = a2
(2) = a2
(1) = a3
(2) = a3

(1)P1 + b1
(2)P1 + b1
(1)P2 + b2
(2)P2 + b2
(1)P3 + b3
(2)P3 + b3

(1)P2,
(2)P2,
(1)P3,
(2)P3,
(1)P1,
(2)P1.

We have the characteristic number on six points of a conic (CNC)
and b(j)
as (7) by substituting the representation coefﬁcients a(j)
into (2), and the CNC value equals +1. We apply this property of
CN to pick arc segments likely lying on an ellipse.

i

i

CN C(P, Q) =

= 1.

(7)

3
(cid:89)

2
(cid:89)

i=1

j=1

b(j)
i
a(j)
i

We provide a simple proof to CN C(P, Q) = +1 based on

Pascal’s hexagon theorem [26] as below.

Proof Let {Qi

(j)|i = 1, 2, 3; j = 1, 2} be six points on a
conic. As shown in Fig. 3, we can obtain three more intersections
as





R1 =< Q(2)
R2 =< Q(1)
R3 =< Q(2)

2 Q(1)
1 Q(2)
1 Q(1)

3 , P1P2 >,
3 , P2P3 >,
2 , P1P3 > .

Then R1, R2, and R3 can be represented by {Qi

(j)|i =
1, 2, 3; j = 1, 2} and {P1, P2, P3} through simple calculations
as






R1 = −|Q2
R2 = −|Q1
R3 = −|Q1

(2), Q3
(1), Q3
(2), Q2

(1), P2|P1 + |Q2
(2), P3|P2 + |Q1
(1), P3|P1 + |Q1

(2), Q3
(1), Q3
(2), Q2

(1), P1|P2,
(2), P2|P3,
(1), P1|P3,

(9)

where we use homogeneous coordination to represent a planar
point as A = [A(x), A(y), A(z)]T , and |A, B, C| denotes the
determinant of the 3 × 3 matrix given by the homogeneous
coordinates of the three points A, B and C as

|A, B, C| =

(10)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

A(x) B(x) C(x)
A(y) B(y) C(y)
A(z) B(z) C(z)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

.

Fig. 3. Characteristic number on six points of a conic (CNC). The closed
loop (cid:52)P1P2P3 intersects a conic (ellipse) at two points on each side
(j)|i = 1, 2, 3; j = 1, 2}. The points Ri(i = 1, 2, 3) are auxiliary
as {Qi
points to prove CN C = +1.

Substituting the coefﬁcients into (2), we calculate CN on three
collinear points (CNL) as (4). It can be proved that the CN value
and Q(1)
equals to −1 if Q(1)
3

are collinear [24].

1 , Q(1)

2

CN L(P, Q) = CN (P, Q) =

= −1,

(4)

3
(cid:89)

i=1

(1)

(1)

bi
ai

The proof process also implies that the calculation of CNL is
achieved by the determinant of a 3 × 3 matrix. In this study, we
use this property to prune line segments in ellipse detection.

2.3 Characteristic number on six points of a conic

(1)Q1

(1)Q1

(2), and the intersection of
(2) >. Let {Qi

(1) and Q1
We denote the line through two points Q1
two lines as <
as Q1
(j)|i = 1, 2, 3; j = 1, 2}
Q1
be six distinct points on a conic (ellipse) as shown in Fig. 3, and
P1, P2 and P3 be three intersection points of the lines connecting
some pairs of the six points on the conic:

(2), Q2

(1)Q2

(2)

P1 =< Q3
P2 =< Q1
P3 =< Q2

(1)Q3
(1)Q1
(1)Q2

(2), Q1
(2), Q2
(2), Q3

(1)Q1
(1)Q2
(1)Q3

(2) >,
(2) >,
(2) > .

(5)

As the homogeneous coordinate of a point in a projective plane
is independent on the initial points constructing the plane, we
specify P1 = (1, 0, 0)T , P2 = (0, 1, 0)T , and P3 = (0, 0, 1)T .

(11)

(12)

Consequently, the points R1,R2 and R3 can be represented by Pi,
a(j)
i (i = 1, 2, 3; j = 1, 2) by substituting (6) into (9) as
i

and b(j)






2 b(1)
R1 = (b(2)
R2 = (0, −b(1)
1 a(1)
R3 = (a(2)

2 a(1)
3 , −a(2)
1 b(2)
3 , a(1)
2 , 0, −b(2)

3 , 0)T ,
1 a(2)
3 )T ,
1 b(1)
2 )T .

According to Pascal’s hexagon theorem [26], R1,R2, and R3

are collinear, i.e.,

|R1, R2, R3| = 0.

The proof of (12) is provided in Appendix A.

Finally, we can obtain (7) by substituting (11) into (12). The
proof is completed. Again, as seen from (9), the ratios of several
determinants of 3 × 3 matrices generate CNC.

3 FAST ELLIPSE DETECTION
In this section, we present our ellipse detector using the char-
acteristic number to prune non-elliptical line segments and pick
arc segments lying on an ellipse. These pruning and picking
processes signiﬁcantly reduce the number of arc candidates for
ﬁnal ﬁtting, rendering fast detection. The complete detection
procedure includes preprocessing, line pruning, arc selection, and
parameter ﬁtting and ellipse validation.

At the preprocessing step, edge points are detected and linked
to generate arc segments, where short segments are removed as
noise. We delete those arc segments likely to be lines detected
by CNL values at the line pruning step. This step reduces the
number of arc segments that are not parts of any ellipses. However,
the possible arc combinations are still too many to efﬁciently
ﬁt elliptical parameters. At the following arc selection step, we
ﬁrstly divide arc segments into four groups, and remove some
impossible arc combinations across these groups according to their
relatively positional relationships. Subsequently, we apply CNC
to pick the arc combinations belonging to one ellipse. Only those
picked arc segments are used to ﬁt elliptic parameters in the last
ﬁtting and validation step. The pruning and picking with CNL and
CNC signiﬁcantly reduce the number of possible arc combinations
that determine the computational load of the ﬁtting. Also, these
pruning and picking steps run fast so that the overall detector is
quite efﬁcient.

3.1 Preprocessing

Given an image, we ﬁrstly smooth the image to partially suppress
noise, and apply the Canny edge detector [27] with default
thresholds in Matlab to extract consecutive edge points. The edge
detector outputs both the position xi and yi, and gradient τi on
each edge point as ei = (xi, yi, τi), where i = 1, 2, ..., N , τi =
dy/dx, N is the number of edge points.

It is possible to apply the CN constraint on any three or six
edge points to determine whether they lie in a line or ellipse.
However, we have to calculate C 3
N point combinations
for N edge points, resulting in high computational complexity.
Moreover, most of these combinations come from noise, or differ-
ent ellipses and lines, spending a large amount time on invalid CN
calculations. Instead, we apply the constraints on arc segments.

N and C 6

In order to efﬁciently shear invalid arc combinations for later
processing, we group arc segments into four sets corresponding
to the arcs from one ellipse distributing in four quadrants as
ArcI , ArcII , ArcIII , and ArcIV , named quadrant sets. In the

4

Fig. 5. Grouping arcs into four sets. The ﬁrst two ﬁgures are two arcs
in ArcI ∪ ArcIII . The difference between the numbers of pixels above
and below (slashed and solid white blocks) can split the sets into two
sets further. The last ﬁgure shows the splitting process.

preprocessing step, we separate edge points ei(i = 1, 2, ..., N )
into two groups ArcII ∪ ArcIV and ArcI ∪ ArcIII by the signs
of edge gradients τi as the ﬁrst stage of this arc grouping:

ß

τi > 0, ei ∈ ArcII ∪ ArcIV ,
τi < 0, ei ∈ ArcI ∪ ArcIII .

(13)

We link each edge point with the other edge points in its eight
neighborhood from the same group with a breadth-ﬁrst strategy
until no edge point exists in the neighborhoods. Consequently, we
separately generate a series of arc segments in two groups shown
in Fig. 4. Figure 4(b) demonstrates the arcs by linking edge points
from the Canny detector (shown in Fig. 4(a)) of the group ArcII ∪
ArcIV , and Fig. 4(c) shows the arc segments of ArcI ∪ ArcIII .
As the second stage of arc grouping, we divide each group
into two sets, eventually producing four sets. As shown in Fig. 5,
the vertices (e1(x), e1(y)), (e1(x), et(y)), (et(x), e1(y)), and
(et(x), et(y)) constitute the bounding box of an arc with the
length of t, where the starting and ending edge points of the arc
are e1 and et, respectively. Denoting the difference between the
numbers of pixels above and below (slashed and solid white blocks
in Fig. 5) as δ, we split each group into two by the sign of δ.
Taking an arc segment in the ArcI ∪ ArcIII group for example,
the arc falls in the ArcIII set if the pixel number above the arc is
greater than the below (δ > 0) otherwise (δ < 0) falls in the ArcI
set. The last plot in Fig. 5 illustrates this splitting processing. We
preform this stage of grouping after line pruning, and hence the
cases of δ = 0 are quite rare. Finally, every arc segment in each
of these four sets comes from one unique ellipse so that only arc
combinations from different sets are necessary for the arc picking
process. Therefore, this preprocessing is also designated for an
efﬁcient ellipse detector.

3.2 Line pruning

As a typical treatment to noise in literature, we simply set a
threshold T hlength (T hlength = 16 in all experiments of this
study) to remove short segments. Following the noise attenuation,
we employ CNL to prune line segments unlikely to come from
an ellipse. The determinant of three edge points, the starting,
midpoint, and ending of an arc segment (e1, ei and et) is taken
as the fast calculation of the CNL value for the segment given
in (12). The geometric interpretation of the determinant is the area
of (cid:52)e1eiet. We use the ratio of the area to the length of the
arc (CN L/t) to robustly estimate whether these three points are
collinear. The ratio close to zero indicates a line segment to be
removed. Figures 4(d) and 6 presents the segments after removing
noise and lines. The top row of Fig. 6 gives the arc segments

5

(a)

(b)

(c)

(d)

Fig. 4. Arcs detection and grouping. (a) shows edge points from Canny detector; (b) shows the arcs in sets ArcII and ArcIV ; (c) shows the arcs
in sets ArcI and ArcIII ; (d) shows the result after removing noise and lines, and the arcs in the same set are labeled in the same color. There are
four colors represent arcs in four sets.

Fig. 6. The segments after removing noise and lines. The top row gives
the arc segments with edge linking, and the bottom provides those after
noise and line pruning.

with edge linking, and the bottom provides those after noise
and line pruning. Many segments from noise and lines disappear,
signiﬁcantly reducing the number of arc candidates.

3.3 Arc selection

i

i

2

1

1

3

2

and b(j)

1 Q(2)

3 Q(2)

(cid:95)
arc2. We intersect Q(1)

1 Q(2)
1
at P2, and Q(1)

and Q(2)
3
at P1, Q(1)
3 Q(2)
3
and Q(1)

In this step, we pick candidate arcs, that are likely to assemble an
ellipse, across the four sets where noise and line segments have
been removed. Speciﬁcally, two arcs, each with three edge points,
are taken from two different sets (one arc per set) in order to
(cid:95)
arc1 and
construct CNC. As shown in Fig. 7, there are two arcs
(cid:95)
arc2, where Q(2)
and Q(1)
1 , Q(1)
are the mid and two endpoints of
2
(cid:95)
3 , Q(2)
arc1, respectively. Similarly, Q(1)
are the points
2
2 Q(2)
and Q(1)
in
2 Q(2)
and Q(1)
at P3. Given
these points in P and Q, we are able to have the representation
coefﬁcients a(j)
(i = 1, 2, 3 and j = 1, 2), and calculate
the CNC value for this arc combination by substituting these
coefﬁcients into (7). Equation 7 also tells that the CNC value
equals +1 if these two arc segments with six points come from
one identical ellipse. Therefore, picking two arc candidates from
one ellipse turns out to simply comparing the CNC value of the arc
combination with the value +1. Similar to line pruning, we can
also use a threshold (T hCN C ) that determines false negative for
this process. The arc pair belonging the same ellipse obtains the
value of CNC close to +1, and the absolute difference of CNC
value and +1, represented as DisCN C , is close to 0, as shown
in Fig. 8 where the triangle constructed by the six points from the
pair is labeled in light green. The red-brown triangle indicates the
arc pair having the CNC value greater than T hCN C , where the
two arc segments of this pair lie on different ellipses.

We only consider

the combinations with arc segments
from two adjacent quadrant sets, e.g., {ArcI , ArcII } and

Fig. 7. Construction of CNC based on two arcs. Q(2)
is the mid points
1
(cid:95)
arc1. Similarly, Q(1)
of
3 ,
Q(2)

2 are two endpoints of
(cid:95)
arc2.

1 and Q(1)
3 are three points on

(cid:95)
arc1, while Q(1)
2 and Q(2)

Fig. 8. Threshold (T hCN C ) is used to determine false negative for arc
selection. The arc pair (labeled in green and blue) belonging the same
ellipse obtains the value of CNC, DisCN C , close to +1, and the triangle
is labeled in light green. The red-brown triangle indicates the arc pair
(labeled in blue and pink) having the CNC value greater than T hCN C .
Points on arcs are labeled in purple, and vertices of triangles are labeled
in grey.

6

Algorithm 1 Picking algorithm for a three-arc combination
Input: ArcI ArcII ArcIII
Output: valid arc combinations set

for each ˆarci ∈ ArcII do
for each ˆarcj ∈ ArcI do

if ˆarci, ˆarcj do not meet coordinate constraints then

Continue.

end if
if DisCN C(ˆarci, ˆarcj) > T hCN C then

Continue.

end if
for each ˆarck ∈ ArcIII do

if ˆarci, ˆarck do not meet coordinate constraints then

Continue.

end if
Add {ˆarci ˆarcj ˆarck} to valid arc combinations set

end for

end for

end for
return valid arc combinations set

3.4 Parameter ﬁtting

There are ﬁve parameters to determine an ellipse, including its
center (two), orientation (one), and major and minor semi-axes
(two). We follow the procedure in [20] to estimate all these
parameters but the center whose calculation we provide below.

We estimate the center as the intersection of auxiliary lines
generated from any two-point pairs on the three arcs picked by the
previous procedure. As illustrated in the top ﬁgure of Fig. 10, S1
and E1 are two points on an arc segment, T1 is the intersection
of the two tangent lines from S1 and E1, and M1 is the middle
point of the line segment S1E1. It is proved that the line M1T1
passes through the ellipse center O. For practical images, it is
unnecessary that all such auxiliary line segments like M1T1 given
by any point pairs on the elliptical arcs, but we are able to locate
the center as the point closest to those lines by the least square
ﬁtting. In this study, we ﬁnd that the accuracy of this ﬁtting
(estimation) also depends on the tangents of the points along the
ellipse.

We use nd (nd = 16 for our experiments) parallel chords
instead of tangent lines in order to minimize the effects from
tangent deviations, as shown in the bottom ﬁgure of Fig. 10. The
points F1 and F2 are the mid points of the arcs ˘S1E1 and ˘S2E2,
respectively. We generate nd chords parallel to S1F2, and so we
do to the chord S2F1. The points M1s and M2s (s = 1, 2, ..., nd)
are the mid-points of the two series of parallel chords to S1F2
and S2F1, respectively. The points of M1s are collinear at m1,
M2s lying on the line m2, and the intersection of m1 and m2
determines the ellipse center O. We estimate m1 and m2 using a
fast variant of the robust Theil-Sen estimator [28] with two arcs in
adjacent quadrant sets. Consequently, we obtain four lines through
the ellipse center generated from a three-arc combination, yielding
at most six pairwise intersections. The algebraic average of the
coordinates of these six intersections is taken as the output ellipse
center (x0, y0).

3.5 Ellipses validation

Candidate ellipses are available after the parameter ﬁtting step.
There may exist false positives or duplicated ones in these candi-
dates so that a validate step is necessary.

Fig. 9. Two examples of invalid three-arc combinations that form one
ellipse.

{ArcII , ArcIII }, but leave out those two-arc combinations from
diagonal sets {ArcI , ArcIII } and {ArcII , ArcIV }. This choice
further lowers down possible combinations, and more importantly
improves the robustness to calculate CNC values. As shown
in Fig. 7, the lines Q(1)
and Q(1)
are likely to be parallel
for arcs from diagonal quadrant sets so that the intersection P1
does not exit, or lies quite far from the edge points. The calculation
of CNC value is so instable that the determination of ellipse is no
more effective. We exclude the combinations with arcs from two
diagonal quadrant sets, avoiding this instability.

1 Q(2)

3 Q(2)

3

1

The combinations with more arc segments are also able to
yield more accurate parameter estimation in the later step. Unfor-
tunately, noise and/or occlusions are likely to bring the absence
of arc segments from one quadrant set. Hence, we constitute the
combinations with three arcs from three different quadrant sets
upon the arc pairs picked by CNC for later parameter ﬁtting. There
are four kinds of valid arc combinations from three quadrant sets
for an ellipse, as shown in the ﬁrst row of Tab. I. We pick out
these combinations in each kind by using both coordinate and
CNC constraints together, where the coordinate constraint takes
relative locations of arcs to remove invalidate combinations. The
second and third rows of Tab. I list the picking rules for valid
combinations using CNC and coordinate constraints, respectively.
(cid:95)
The symbols e1
arc1.
Figure 9 illustrates two examples of invalid three-arc combinations
that form one ellipse, removed by the constraints in Tab. I.

t denote the starting and end points of

1 and e1

Speciﬁcally, the picking process for a three-arc combination
begins with an arc segment in the middle quadrant set, and then
proceed to those in the other two sets. We ﬁnd an arc pair ﬁrst,
and then the third arc to form the combination by alternatively
applying the coordinate and CNC constraints. We take the set
combination {ArcI , ArcII , ArcIII } in Tab. I as an example to
illustrate the picking process. We starts with one arc in ArcII ,
and test the pair of the arc of ArcII and every arc segments
in ArcI with the coordinate constraint. If one pair meet the
coordinate constraint, the CNC constraint is applied to this pair
further. Subsequently, we search the set ArcIII to ﬁnd the third
arc segments forming a pair with the arc in ArcII that follow the
coordinate constraint. Herein, the CNC constraint runs only once
in order to balance the speed and accuracy. We repeatedly run the
picking process for every arc segments in ArcII , and ﬁnd all valid
three-arc combinations for {ArcI , ArcII , ArcIII }. Algorithm 1
details the picking process for this set combination. The similar
process applies to the other three-set combinations in the ﬁrst row
of Tab. I, and ﬁnally we have all valid three-arc combinations
ready for parameter ﬁtting given in the next section.

TABLE I
The picking rules for valid combinations using CNC and coordinate constraints

7

Valid arc
combinations

Sets constraints

(cid:40) ˆarc1 ∈ ArcII
ˆarc2 ∈ ArcI
ˆarc3 ∈ ArcIII

(cid:40) ˆarc1 ∈ ArcIII
ˆarc2 ∈ ArcII
ˆarc3 ∈ ArcIV

(cid:40) ˆarc1 ∈ ArcIV
ˆarc2 ∈ ArcIII
ˆarc3 ∈ ArcI

(cid:40) ˆarc1 ∈ ArcI
ˆarc2 ∈ ArcIV
ˆarc3 ∈ ArcII

Coordinate
constraints

(cid:110) e1
t (x) < e2
1(y) < e3
e1

1(x)
1(y)

(cid:110) e1
t (x) < e3
1(y) > e2
e1

1(x)
1(y)

(cid:110) e1
1(x) > e2
t (y) > e3
e1

t (x)
t (y)

(cid:110) e1
1(x) > e3
t (y) < e2
e1

t (x)
t (y)

ellipses.

4 EXPERIMENTAL RESULTS AND ANALYSIS
We perform a series of experiments on data sets with both
synthetic and real images to evaluate the performance of our fast
detector by comparing with other state-of-the-art methods 1.

4.1 Evaluation metrics and data sets

All the experiments in this paper are executed on a desktop with
Intel(R) Core(TM) i7-6700 CPU whose clock frequency is 3.40
GHz. The performance of ellipse detectors is evaluated in terms
of running time and F-measure. The most time-consuming step in
many existing methods lie in parameter ﬁtting because too many
arc or point candidates are fed to the step. In addition to executing
time, we count candidate combinations of arcs (CC) for ellipse
ﬁtting, and use CC as a direct index to demonstrate the impacts of
CNC and CNL.

F-measure is deﬁned as:

F − measure =

2 × Precision × Recall
Precision + Recall

,

(14)

where

, Recall =

Precision =

Ψ
Ω
The symbol Ω denotes the number of detected ellipses, and Γ
indicates the number of ground-truth ellipses. Ψ is the number
of correctly detected ellipses. The overlapping ratio of a detected
ellipse Ed to the ground truth Eg is deﬁned as:

Ψ
Γ

(15)

.

M(Ed, Eg) =

area(Ed) ∩ area(Eg)
area(Ed) ∪ area(Eg)

,

(16)

where area(E) is the number of pixels inside the ellipse E.
The detected ellipse Ed is considered as a correct detection if
M(Ed, Eg) > T ho. The threshold T ho is set to 0.8 throughout
our experiments, as did in [29].

Experimental data contain both real world and synthetic im-
ages. We use data sets with real world images to validate efﬁciency

1. The source code and resultant images of our detector can be found at

https://github.com/dlut-dimt/ellipse-detector

Fig. 10. Computing the center of the ellipse. The top ﬁgure shows the
ellipse center calculated by two arcs. The bottom ﬁgure shows the
ellipse center calculated by a series of parallel chords.

We provide two indices to validate the candidates. The ﬁrst
one measures how many edge points ﬁtting the corresponding
ellipse. The more edge points ﬁt, the more likely the ellipse exists.
We substitute every edge points into the correspondence ellipse
equation to calculate how it ﬁts the equation. We count the number
of the ﬁtting edge points, and calculate the ratio to the total points
that generate the ellipse by ﬁtting arc combinations.

The second index accounts for arc lengths of three-arc com-
binations giving ellipse parameters. Ideally, the length of an arc
combination is larger than the sum of two semi-axes. We use
the ratio between the total length of one three-arc combination
and three times of the semi-axes summation as the index. Larger
values indicate more stable detection of the ellipse.

The validation in [19] is able to discover duplicated ellipses,
which allows to assess the similarity of two ellipses by comparing
the differences of ellipse parameters. A voting strategy is adopted
to pick up the center of a given cluster, removing duplicate

and accuracy, while synthetic ones are designated to demonstrate
robustness to noise and ellipse variations. Real world images are
those from Dataset #1 and Dataset Prasad, the same as [20],
for fair comparisons. Dataset #1 is composed of 400 images
having elliptic shapes, collected from MIRFlickr and LabelMe
repositories [30]. Those MIRFlickr images are of high quality, and
most of them contain only one object (ellipse), while those from
LabelM are noisy images of low resolution, containing multiple
objects. Dataset Prasad contains 198 real
images from [29],
where objects of oval shapes like human faces are regarded as
ellipses. Besides evaluations on the original Dataset Prasad, we
also construct Dataset #2 by selecting 50 images with rigorous
ellipses in order to show the accuracy of our method on detecting
ellipses. These rigorously elliptical shapes are quite common in
industrial inspection and diagnosis.

4.2 Performance analysis

The effectiveness of line pruning and arc selection steps are
illustrated by comparisons on detection results with and without
these steps. We also provide empirical studies on the hyper-
parameters involved in these steps. The parameters for ellipse
ﬁtting and validation are taken the same values as those in [20].

4.2.1 Performance analysis of line pruning
We remove short and straight line segments using CNL as dis-
cussed in Section 3.2. Our goal is to prune noise effects and lines
in input images as much as possible but preserve arcs of ellipses.
We perform line pruning on Dataset #1 by tuning T hCN L from
0 to 5.0. Intuitively, the threshold T hCN L limits the height of
the triangle formed by the three edge points for CNL calculation.
Therefore, the larger T hCN L is, the more arcs are to be removed.
The zero threshold, T hCN L = 0, indicates no line pruning step
included.

Table II lists the values of arc numbers, running time, and F-
measure with varying T hCN L values. There are averagely 181 arc
segments without line pruning (T hCN L = 0), and more segments
are removed when increasing T hCN L values. The computing time
is 28.86ms, and F-measure is 0.4313 without line pruning. When
noise and line segments are removed by CNL, the computing time
is becoming lower and F-measure increases. We obtain the best
performance, 8.52ms for computation and 0.4692 for F-measure
when T hCN L = 3.0. The computing time is still decreasing
when more arc segments are pruned by the thresholds larger than
3.0. The values of F-measure slightly decrease due to increased
false negative. These results show that the line pruning step using
CNL is effective to remove noise and lines, and also alleviate
the computational load for later steps. We set T hCN L = 3.0 to
balance the accuracy and computing time in all comparisons with
the others.

TABLE II
The performance of line pruning step.

T hCN L

arc num avg. time(ms)

F-measure

0
1
2
3
4
5

181
170
108
65
40
26

28.86
26.52
13.75
8.52
6.79
6.17

0.4313
0.4338
0.4576
0.4692
0.4499
0.4226

8

Fig. 11. Relationship between point coordinates and CNC values. Dif-
ferent colors indicate various CNC values given by the color bar on the
right most. Five distinct points P1, ..., P5 on the ellipse are ﬁxed, and the
sixth point around the ellipse are varied to show the distribution of CNC
values.

4.2.2 Performance analysis of arc selection

We use the geometric constraint of six points on arcs derived
from CNC to pick up arc segments belonging to one ellipse.
Theoretically, the CNC value of six points lying on an ellipse
equals +1, but various imaging conditions (e.g., thermal noise
and lens distortions) in practical applications may cause the value
deviating from +1. As discussed in Section 3.3, we relax this hard
constraint to a range in the vicinity of +1 determined by T hCN C .
Herein, we perform experimental analysis on the relationship
between point coordinates and CNC values. This analysis does
not only give arise to an appropriate threshold, but also validates
the effectiveness of the arc selection based on CNC.

Supposing an ellipse centering at the coordinate origin, we ﬁx
ﬁve distinct points P1, ..., P5 on the ellipse, and vary the sixth
point around the ellipse to show the distribution of CNC values
in Fig. 11. Different colors indicate various CNC values given by
the color bar on the right most of Fig. 11. All the CNC values
higher than 1.4 are colored in red-brown, while all those lower
than 0.6 in blue. Figure 11 illustrates that most of CNC values
with the sixth point close to the ellipse fall within the range from
0.6 to 1.4. There exist several regions where CNC values lie in
the range while the sixth point locates far from the ellipse. These
regions include the star-shaped area out of the ellipse between P2
and P3, and the bottom left and top right ends of the line stretching
out of P5. This observation can be explained by the fact that the
CNC value of +1 indicates the points lying on a conic curve not
only an ellipse. However, these ’outliers’ have few effects on our
detector, because other types of conic curves, e.g., hyperbola and
parabola, seldom appear in practical industrial images, and the
majority can be also removed by the coordinate constraint even if
a few of them appear.

We further apply our detector on dataset #1 by varying
T hCN C , the absolute deviation from +1, from 0 to 50, giving
seventeen values in total. Figure 12 illustrates the values of
computing time with varying thresholds. The blue line in Fig. 12
demonstrates the seventeen values of T hCN C in an ascending
order, also listed in the third row below the plot. The step values

vary with the value ranges of T hCN C , i.e., 0.1 for the range from
0 to 0.6, 1.0 for 1 to 5, and 10 for values larger than 10. The
orange and grey bars show the computing time with and without
the arc selection step, whose values are listed in the ﬁrst and
second rows below, respectively. The average computing time is
6.96 ms for each image, one half of the detection time without
CNC, 13.4ms, when we use the hard constraint T hCN C = 0
picking only a small fraction of arc segments. More arc segments
are included for parameter ﬁtting, demanding more computing
time, when increasing the threshold values. When T hCN C is
larger than 20, the detector spends more time than that without
the selection step since the calculation of CNC takes more time
than what the constraint can save. As a result, the orange bars are
higher than the grey ones for these T hCN C values in Fig. 12.

Figure 13 shows the values of F-measure (F-m) with varying
threshold values. The F-measure for the detector without the CNC
constraint is 0.4385 labeled in the gray bar, while ours in orange
bars. The hard constraint yields a very low F-m 0.0033 since
the choice excludes many arc segments slightly deviating from an
ellipse, resulting in signiﬁcant false negatives. The threshold 0.2
outputs the best F-m 0.4641, even higher than the detector without
this constraint. This improvement shows that the CNC constraint
is also able to exclude false positives in addition to decreasing the
computing time from 13.40ms to 8.58ms. As expected, the values
of F-m given by the thresholds larger than 20 are quite close to
that without the selection step. In these cases, the selection step
takes no effect on lowering down false positives. Therefore, the
arc selection step using CNC is quite crucial to both efﬁciency and
accuracy. We choose the threshold as T hCN C = 0.2 to generate
the best performance in the following experiments.

4.3 Comparisons with the state of the art

Firstly, we compare our detector with three recent arc-based
methods, i.e., Zhang [11], Libuda [13], and Fornaciari [20], on
Dataset #1. The set consists of images with different qualities and
various numbers of target ellipses. The latest works of [7] and [8]
are not so relevant as these three because both are point-based
and applicable to sceneries where only one ellipse appear. The
execution program of [20] is provided by the authors, and we take
the results of [11] and [13] reported in [20]. Table III lists the
comparisons on average running time and F-measure. The method
of Zhang [11] performs the worst: the ﬁtting on a large number of
pixel combinations takes much time over 4s for an image; its F-
measure is the lowest as 0.3421. Libuda [13] and Fornaciari [20]
output the similar efﬁciency with the average execution time for
each image 14.38 ms and 12.79 ms, respectively. The values of
their F-measure are also quite close. Our detector achieves the
best in terms of both efﬁciency(8.54ms) and accuracy (F-measure
about 0.47). Speciﬁcally, we buy 7% higher accuracy with 33%
less execution time than the fastest method [20].

TABLE III
F-measure and runtime compared with the state of the art on Dataset
#1

9

Several examples of the above methods on Dataset #1 are
shown in Fig. 14 where the ﬁrst column is the input images, and
the second one lists the ground truth (GT). False negatives occur in
all the results of Libuda [13] except for the ﬁfth row. The method
of Fornaciari [20] works quite close to ours that correctly detects
almost all the ellipses in these images. It is worth noting that
only our method successfully picks out the middle wheel partially
occluded by the lady in the third image, while the other three fail.
Compared with the ground truth, our detector outputs one extra
ellipse out of the bottom right tray. Actually, one can ﬁnd a dim
elliptical trail along the tray, but the ground truth neglects it.

Secondly, we compare the execution time on each processing
step with the-state-of-the-art on Dataset #1, as shown in Tab. IV.
The method of Zhang [11] spends about 4243 ms on estimating
the parameters due to huge numbers of possible point combina-
tions. The method of Prasad [29] reduces the time on parameter
estimation via grouping arcs with curvature and convexity, but the
grouping spends additional 278ms. The method of Libuda [13]
uses an iterative strategy, and the time spent on each of the ﬁrst
three steps equals about 4.5ms. Fornaciari’s detector [20], the
fastest one among the existing, spends the most time 4.9ms on
grouping arcs with their relative locations against the other steps.
In contrast, our method only uses about half of the execution time
of [20] on the grouping step, and the total execution time is less
than two third of [20]. Thus, our detector reduces the time for the
grouping step, the bottleneck for efﬁcient detectors.

Further, we peer into the proposed detector to analyze how line
pruning and arc selection accelerate detection. Table V illustrates
the effects of CNL and CNC by listing the averaged values of arc
numbers, arc combination numbers (CC) for parameter ﬁtting, ex-
ecution time and F-measure on Dataset #1. Without any processing
using CNL nor CNC, possible averaged arcs and arc combinations
(CC) are 181 and 2619, respectively. After line pruning, the arc
number reduces to 65, about one third of of the original, and
the CC value signiﬁcantly decreases to 196, 6% of the original.
Only 40 arc combinations remain for parameter ﬁtting, shearing
98.5% combinations from the original. Naturally, the execution
time drops down 93% from 129.33ms to 8.52ms. The value
of F-measure also increases from 0.3163 to 0.4692 since many
false positives are removed by these two steps using CNL and
CNC. Green curves in the ﬁrst and second rows of Fig. 15 present
possible ellipses to be ﬁtted without and with our pruning/selection
steps, respectively. It is evident that the green curves in the second
row are much less than those in the ﬁrst row, intuitively showing
the effectiveness of our CNL/CNC based processing to save time
and improve accuracy.

TABLE V
The effect of CNL and CNC

arc Num
CC
avg.time (ms)
F-measure

After arc
detection

After line
pruning

After arc
selection

181
2619
129.33
0.3163

65
196
12.73
0.4090

65
40
8.52
0.4692

Method

F-measure

avg.time(ms)

Libuda[13]
Prasad[29]
Zhang[11]
Fornaciari[20]
Our

0.4258
0.4512
0.3421
0.4385
0.4692

14.38
823.38
4243.86
12.79
8.54

Finally, we compare our detector with [20], giving the best
performance among the existing, in terms of CC, F-measure, and
execution time on three data sets including Datast #1, Dataset
#2, and Dataset Prasad. As shown in Tab. VI, our method out-
performs [20] on all the three data sets. The last column shows

10

Fig. 12. The values of computing time with varying thresholds. We vary the absolute deviation from +1, from 0 to 50, giving seventeen T hCN C
values in total, labeled in blue line and listed in the third row. The orange and grey bars show the computing time with and without the arc selection
step.

Fig. 13. The values of F-measure (F-m) with varying thresholds. We take the same deviation from +1 as did in Fig. 12, while the orange and grey
bars show the F-measure with and without the arc selection step.

TABLE IV
Execution times (ms) for each step compared with the-state-of-the-art on Dataset #1.

Libuda [13]

Prasad [29]

Zhang [11]

Fornaciari [20]

Our

Edage detection
Pre-processing
Grouping
Estimation
Validation and Clustering
Total

4.49
4.15
4.89
0.84
0.00
14.38

3.54
78.03
278.01
3.40
460.39
823.38

3.97
3.55
0.25
4236.06
0.03
4243.86

3.45
1.94
4.90
2.30
0.21
12.79

3.43
1.90
2.53
0.63
0.06
8.54

11

Fig. 14. Several examples of the compared methods on Dataset #1. The ﬁrst column is the input images, and the second one lists the ground truth
(GT).

The ﬁrst synthetic data set consists of 9100 ellipses with
various semi-axes ratios and orientations. One semi-axis is ﬁxed
as 100, and the other one varies so that the ratios range from 0.01
to 1 at the step of 0.01. Orientations vary from 1◦ to 90◦ at the
step of 1◦. The second data set contains 10000 images with a ﬁxed
center and orientation, showing changes on ratios and lengths of
semi-axes. One semi-axis varies from 1 to 100 at the step of 1,
and the other one changes accordingly so that axes ratios range
from 0.01 to 1 at the step of 0.01. Both data sets come from [20]
that generates synthetic 400 × 400 images, each containing one
single ellipse without noise.

Figure 16 illustrates comparisons with [20], where black points
indicate failures of detection. The results on the ﬁrst data set are
given in Fig. 16(a) and Fig. 16(b). The horizontal axis gives ratios
of two semi-axes, and the vertical one shows orientations. Both
methods are robust to orientation changes as long as axes ratios
are larger than 0.25, but they fail in the cases of small axes ratios
when ellipses degenerate into straight lines. The results on the
second data set are shown in Fig. 16(c) and Fig. 16(d), where the
vertical axis indicates lengths of major axes. The robustness of
both methods is quite similar, working well on ellipses whose
major axis is longer than 10 and axes ratio is larger than 0.25.
Small arcs are likely to be pruned as noise when the ellipse only
has a few pixels. Fortunately, one may tackle the problem of small
ellipses by upscaling the image as did in [20]. Therefore, the
proposed method is quite robust, and only fails in some extreme
cases, e.g., small and extremely oblate ellipses, which are quite

Fig. 15. Ellipses needed to be ﬁtted with or without line pruning and
arc selection. Green curves in the ﬁrst and second rows present pos-
sible ellipses to be ﬁtted without and with our pruning/selection steps,
respectively.

the improvement percentage both on efﬁciency and accuracy. The
accuracy of the proposed detector increases about 6.6% in average
over [20], and more signiﬁcantly our detector averagely runs about
31.0% faster than [20] on all the three data sets. These results show
that our detector is applicable to real time scenarios in practice.

4.4 Robustness to ellipse variations and noise

In order to investigate the robustness to ellipse variations and
noise, we use two synthetic data sets with different orientations
and ratios of two semi-axes of ellipses, and also apply salt-
and-pepper noise to real world images. The noise break arcs
into several small fragments, which may affect the accuracy and
efﬁciency.

12

(17)

(18)

(19)

TABLE VI
Testing results of the proposed methods compared with [20] on three datasets.

DataBase

avg. time(ms)
Ours
[20]

F-m

CC

[20]

Ours

[20]

Ours

improvement percentage
accuracy

speed

Dataset Prasad
Dataset #1
Dataset #2

4.34
13.58
5.26

3.35
8.55
4.09

0.2874
0.4385
0.5893

0.3059
0.4692
0.6271

82
267
117

19
40
34

22.70%
37.05%
22.27%

6.44%
7.00%
6.41%

(a) [20]

(b) Ours

(c) [20]

(d) Ours

Fig. 16. Robustness to ellipse variations compared with [20]. Figure (a)-(b) are results on the ﬁrst dataset. The horizontal axis gives ratios of two
semi-axes, and the vertical one shows orientations. Figure (c)-(d) are results on the second dataset. The vertical axis indicates lengths of major
axes, and the black points indicate failures of detection.

rare in reality.

Then three intersections

We add salt-and-pepper noise to images of Dataset #2 with
the ratios of noise to image set as 3%, 6%, 9%, 12%, 15% and
18% to validate the robustness of our method to noise. Again, we
compare with [20] on efﬁciency and accuracy, shown in Fig. 17.
The values of F-measure for these two methods on images without
noise are 6.2 and 5.8, respectively. The values decrease for both
methods when the noise increases. When the ratio of noise to
image is up to 18%, our value is about 0.35, higher than that
of [20]. When the noise level is getting higher, the execution time
of our detector stays around 4ms, and that of [20] ﬂuctuates a bit
around 5ms not so stable as ours. Generally, both methods runs
faster as noise increases because they are able to remove small arc
segments caused by noise. As a summary, noise has few effect on
the efﬁciency, but slightly lower down the accuracy.

5 CONCLUSIONS

In this paper, an ellipse detector for real-time application is
proposed. We trades off accuracy and efﬁciency and pay more
attention to the execution time. We introduce a new geometry
constraint to prune lines and select arcs belong to the same ellipse.
The detector removes the straight arcs based on characteristic on
line (CNL), and selects candidate elliptical arc combinations by
characteristic on conic (CNC). Our method outperforms the-state-
of-the-art by the experiments on real images, which can be used in
real-time for various applications. In the future, we will improve
our method to make it possible to detect quite small ellipses in
images, which is a challenge for most existing methods.

APPENDIX A
PROOF OF PASCAL’S HEXAGON THEOREM





R1 =< Q(2)
R2 =< Q(2)
R3 =< Q(2)

2 Q(1)
3 Q(1)
1 Q(1)

3 , Q(2)
1 , Q(2)
2 , Q(1)

1 Q(1)
2 Q(1)
3 Q(2)

1 >,
2 >,
3 >

are collinear.

Proof: The coordinate of R1, R2 and R3 can be represented

by {Qi

(j)|i = 1, 2, 3; j = 1, 2} as






R1 = (Q2
R2 = (Q3
R3 = (Q1

(2) × Q3
(2) × Q1
(2) × Q2

(1)) × (Q1
(1)) × (Q2
(1)) × (Q3

(2) × Q1
(2) × Q2
(1) × Q3

(1)),
(1)),
(2)),

where × denotes the cross product of two points. Then R1, R2
and R3 can be represented through simple calculations as
(2), Q3

R1 = |Q2

(1), Q1

(1)|Q1






−|Q2

(2), Q3

(1), Q1

R2 = |Q3

(2), Q1

(1), Q2

(1)|Q2

−|Q3

(2), Q1

(1), Q2

R3 = |Q1

(2), Q2

(1), Q3

(2)|Q3

(1),

(1),

(2)
(2)|Q1
(2)
(2)|Q2
(1)
(1)|Q3

(2), Q2
To prove that R1, R2 and R3 are collinear is equivalent to prove

(1), Q3

−|Q1

(2).

|R1, R2, R3| = 0.

(20)

Then we can substitute (19) into (20), and get the equivalent
equation as

|Q1
|Q2
= |Q1
|Q2

(1), Q2
(2), Q3

(1), Q3
(2), Q1

(1)||Q1
(1)||Q3

(2), Q2
(2), Q1

(2), Q3
(2), Q2

(2), Q2

(2), Q3

(2)||Q1

(1), Q2

(1)|

(1), Q3

(2), Q1

(1)||Q3

(1), Q1

(2), Q2

(1)|
(1)|
(2), Q3
(1)|.

(21)

(j)|i = 1, 2, 3; j = 1, 2} be
Pascal’s hexagon theorem: Let {Qi
different points on a non-degenerative conic C, as shown in Fig. 3.

In order to prove it, we can replace any point Qi
general point Q(x, y, z), taking Q1

(j) with the
(1) for example, then we can

13

(a) F-measure

(b) Execution time

Fig. 17. Robustness to salt-and-pepper noise. The ratios of noise to image are set as 3%, 6%, 9%, 12%, 15% and 18%. (a) shows the F-measure of
[20] and our method. (b) Running time are plotted against noise density. Each point of these curves is obtained from the detection results of Dataset
#2.

get the parametric equations of conic C by other ﬁve points. As
(1) is one point on conic C, it must meet (21). The proof is
Q1
completed.

ACKNOWLEDGMENTS
We thank Dr. M. Fornaciari, Dr. S. Mulleti and Dr. T. Lu for
providing their executables and insights. We also thank Dr. M.
Fornaciari for his experimental data.

REFERENCES
[1] T. Cooke, “A fast automatic ellipse detector,” in 2010 International
Conference on Digital Image Computing: Techniques and Applications.
IEEE, 2010, pp. 575–580.

[2] S. Zafari, T. Eerola, J. Sampo, H. Kalviainen, and H. Haario, “Seg-
mentation of overlapping elliptical objects in silhouette images,” IEEE
Transactions on Image Processing, vol. 24, no. 12, pp. 5942–5952, 2015.
[3] C. Teutsch, D. Berndt, E. Trostmann, and M. Weber, “Real-time detection
of elliptic shapes for automated object recognition and object tracking,”
in Electronic Imaging 2006.
International Society for Optics and
Photonics, 2006, pp. 60 700J–60 700J.
J. Illingworth and J. Kittler, “A survey of the hough transform,” Computer
vision, graphics, and image processing, vol. 44, no. 1, pp. 87–116, 1988.
[5] R. A. McLaughlin, “Randomized hough transform: improved ellipse
detection with comparison,” Pattern Recognition Letters, vol. 19, no. 3,
pp. 299–305, 1998.

[4]

[6] W. Lu and J. Tan, “Detection of incomplete ellipse in images with
strong noise by iterative randomized hough transform (irht),” Pattern
Recognition, vol. 41, no. 4, pp. 1268–1279, 2008.
J. Liang, Y. Wang, and X. Zeng, “Robust ellipse ﬁtting via half-quadratic
and semideﬁnite relaxation optimization,” IEEE Transactions on Image
Processing, vol. 24, no. 11, pp. 4276–4286, 2015.

[7]

[8] S. Mulleti and C. S. Seelamantula, “Ellipse ﬁtting using the ﬁnite rate of
innovation sampling principle,” IEEE Transactions on Image Processing,
vol. 25, no. 3, pp. 1451–1464, 2016.

[9] Y. Xie and Q. Ji, “A new efﬁcient ellipse detection method,” in 16th
IEEE, 2002,

International Conference on Pattern Recognition, vol. 2.
pp. 957–960.

[10] C. Basca, M. Talos, and R. Brad, “Randomized hough transform for
ellipse detection with result clustering,” in EUROCON 2005-The Inter-
national Conference on ”Computer as a Tool”, vol. 2.
IEEE, 2005, pp.
1397–1400.

[11] S.-C. Zhang and Z.-Q. Liu, “A robust, real-time ellipse detector,” Pattern

Recognition, vol. 38, no. 2, pp. 273–287, 2005.

[12] E. Kim, M. Haseyama, and H. Kitajima, “Fast and robust ellipse ex-
traction from complicated images,” in Proceedings of IEEE information
technology and applications. Citeseer, 2002.

[13] L. Libuda, I. Grothues, and K.-F. Kraiss, “Ellipse detection in digital
image data using geometric features,” in Advances in Computer Graphics
and Computer Vision. Springer, 2007, pp. 229–239.

[14] D. K. Prasad, M. K. Leung, and C. Quek, “Elliﬁt: An unconstrained, non-
iterative, least squares based geometric ellipse ﬁtting method,” Pattern
Recognition, vol. 46, no. 5, pp. 1449–1465, 2013.

[15] T. M. Nguyen, S. Ahuja, and Q. J. Wu, “A real-time ellipse detection
based on edge grouping,” in IEEE International Conference on Systems,
Man and Cybernetics.

IEEE, 2009, pp. 3280–3286.

[16] F. Mai, Y. Hung, H. Zhong, and W. Sze, “A hierarchical approach for
fast and robust ellipse extraction,” Pattern Recognition, vol. 41, no. 8,
pp. 2512–2524, 2008.

[17] A. Y.-S. Chia, S. Rahardja, D. Rajan, and M. K. Leung, “A split
and merge based ellipse detector with self-correcting capability,” IEEE
Transactions on Image Processing, vol. 20, no. 7, pp. 1991–2006, 2011.
[18] T. Lu, W. Hu, C. Liu, and D. Yang, “Effective ellipse detector with
polygonal curve and likelihood ratio test,” IET Computer Vision, vol. 9,
no. 6, pp. 914–925, 2015.

[19] D. K. Prasad and M. K. Leung, “Clustering of ellipses based on their
distinctiveness: An aid to ellipse detection algorithms,” in 3rd IEEE Inter-
national Conference on Computer Science and Information Technology
(ICCSIT), vol. 8.

IEEE, 2010, pp. 292–297.
[20] M. Fornaciari, A. Prati, and R. Cucchiara, “A fast and effective ellipse
detector for embedded vision applications,” Pattern Recognition, vol. 47,
no. 11, pp. 3693–3708, 2014.

[21] Y. Sugaya, “Ellipse detection by combining division and model selection
based integration of edge points,” in 2010 Fourth Paciﬁc-Rim Symposium
on Image and Video Technology (PSIVT).

IEEE, 2010, pp. 64–69.

[22] C. Liu and W. Hu, “Effective method for ellipse extraction and integration
for spacecraft images,” Optical Engineering, vol. 52, no. 5, pp. 057 002–
057 002, 2013.

[23] Z. Luo, X. Zhou, and D. X. Gu, “From a projective invariant to some
new properties of algebraic hypersurfaces,” Science China Mathematics,
vol. 57, no. 11, pp. 2273–2284, 2014.

[24] X. Fan, H. Wang, Z. Luo, Y. Li, W. Hu, and D. Luo, “Fiducial facial
point extraction using a novel projective invariant,” IEEE Transactions
on Image Processing, vol. 24, no. 3, pp. 1164–1177, 2015.

[25] Q. Jia, X. Fan, Y. Liu, H. Li, Z. Luo, and H. Guo, “Hierarchical projective
invariant contexts for shape recognition,” Pattern Recognition, vol. 52,
pp. 358–374, 2016.

[26] N. Stefanovi´c and M. Miloˇsevi´c, “A very simple proof of pascals hexagon
theorem and some applications,” Proceedings-Mathematical Sciences,
vol. 120, no. 5, pp. 619–629, 2010.

[27] J. Canny, “A computational approach to edge detection,” IEEE Transac-
tions on pattern analysis and machine intelligence, no. 6, pp. 679–698,
1986.

[28] J. Matouˇsek, “Randomized optimal algorithm for slope selection,” Infor-

mation processing letters, vol. 39, no. 4, pp. 183–187, 1991.

[29] D. K. Prasad, M. K. Leung, and S.-Y. Cho, “Edge curvature and convexity
based ellipse detection method,” Pattern Recognition, vol. 45, no. 9, pp.
3204–3221, 2012.

[30] R. Hartley and A. Zisserman, Multiple view geometry in computer vision.

Cambridge university press, 2003.

6
1
0
2
 
g
u
A
 
6
2
 
 
]

V
C
.
s
c
[
 
 
1
v
0
7
4
7
0
.
8
0
6
1
:
v
i
X
r
a

1

A Fast Ellipse Detector Using Projective
Invariant Pruning

Qi Jia, Xin Fan, Member, IEEE, Zhongxuan Luo, Lianbo Song, and Tie Qiu

Abstract—Detecting elliptical objects from an image is a central task in robot navigation and industrial diagnosis where the detection
time is always a critical issue. Existing methods are hardly applicable to these real-time scenarios of limited hardware resource due to
the huge number of fragment candidates (edges or arcs) for ﬁtting ellipse equations. In this paper, we present a fast algorithm detecting
ellipses with high accuracy. The algorithm leverage a newly developed projective invariant to signiﬁcantly prune the undesired
candidates and to pick out elliptical ones. The invariant is able to reﬂect the intrinsic geometry of a planar curve, giving the value of −1
on any three collinear points and +1 for any six points on an ellipse. Thus, we apply the pruning and picking by simply comparing these
binary values. Moreover, the calculation of the invariant only involves the determinant of a 3 × 3 matrix. Extensive experiments on three
challenging data sets with 650 images demonstrate that our detector runs 20%-50% faster than the state-of-the-art algorithms with the
comparable or higher precision.

Index Terms—Ellipse detection, Projective invariant, Real-time.

(cid:70)

1 INTRODUCTION

E LLIPSES are quite common in natural or artiﬁcial scenes. The

detection of ellipses in a fast and reliable manner from real
world images provides a powerful analysis tool for many computer
vision applications such as wheels detection [1], biological cell di-
vision [2], and object segmentation for industrial applications [3].
Ellipse detection still remains unresolved as one of the classical
tasks with long history. Most existing methods perform far from
real time, which hinder their applications in reality.

The earliest ellipse detection algorithm dates back to the
classical Hough transform (HT) that ﬁts the parametric form of
an ellipse using a voting scheme [4]. The standard HT approach
extracts ellipses by ﬁnding the clusters in a ﬁve-dimensional
(5D) parametric space, consuming a great deal of memory and
time. The randomized HT (RHT) improves the performance by
reducing the number of false alarms [5]. The iterative RHT (IRHT)
speeds up RHT so signiﬁcant by focusing on the candidates
likely to be an ellipse that it only needs 1-D accumulators [6].
However, both RHT and IRHT are still quite slow attributing to the
voting processing among numerous candidates, and the geometry
relationships between points are also neglected during voting.

Researchers introduce algebraic or geometric constraints on
points of an ellipse to screening candidates. Liang et al. [7] intro-
duce the maximum correntropy criterion into the constrained least-
square ﬁtting to alleviate the inﬂuence of outliers. Mulleti et al. [8]
use the ﬁnite rate of innovation sampling principle to ﬁt noisy
or partial ellipse. Both methods produce ellipses with less bias.
However, they can only work on the image with one single
ellipse. Xie and Ji exploit the symmetry of two points on ellipse,

• Q. Jia, X. Fan, Z. Luo, L. Song, and T. Qiu are with the School of Software,
Dalian University of Technology, China, and also with the Key Laboratory
for Ubiquitous Network and Service Software of Liaoning Province.
E-mail: xin.fan@ieee.org
Z. Luo is also with the School of Mathematical Sciences, Dalian University
of Technology, China.
This work was supported in part by the National Natural Science Founda-
tion of China under Grant 61402077, Grant 61432003, Grant 61328206,
Grant 11171052.

•

•

reducing the voting parameter to one [9]. However, it is time-
prohibitive to enumerate every point pairs as elliptical candidates.
Basca et al. [10] accelerate Xie et al.’s method with RHT by
considering only a small random subset of initial point pairs.
Zhang and Liu [11] use edge directional properties to reduce point
combinations that lie out of the same ellipse boundary.

Many methods take into account the geometric constraints on
arc segments as the symmetry between points brings too many
candidate pairs. Kim et al. [12] extract arc segments approximated
by short straight lines. Libuda et al. [13] and Prasad et al. [14]
improve Kim et al.’s method with less memory usage. However,
these candidate arcs connecting short line segments may merge
intersected arcs from different ellipses, resulting in lower pre-
cisions [12], [13]. Nguyen et al. [15] detect ellipses upon arcs
by edge grouping. Their method is able to handle incomplete
ellipses, but fails to detect ellipses splitting into many short
arcs. Some other works formulate the mergence of elliptical arcs
as an assignment problem, and iteratively correct the detection
results [16], [17], [18]. These methods have high detection rates,
but suffer from heavy computational costs. Prasad et al. [19]
merge elliptical arcs with the relationship score given by the
center of the ellipse ﬁtting the arcs. Recently, Fornaciari et al. [20]
develop an ellipse detector that classiﬁes elliptical arcs into four
groups and estimates the ellipse parameters using the decomposed
parameter space. There are still a number of candidate arcs in
each group while their method renders a relatively faster detection
than previous methods. Especially, it is quite time consuming to
calculate every possible combinations of arcs from each group,
not to mention that many of them are wrong combinations.

All aforementioned methods start the estimation from points
or arcs with their positional constraints. Actually, there exist more
constraints whether points or arcs are amenable to the analytical
ellipse equation. In [21], RANSAC is used to randomly choose
ﬁve points repeatedly until the ellipse determined by these ﬁve
points closely passes through a maximum number of edge points.
This method is inefﬁcient as there exist so many combinations of
ﬁve points and one has to calculate ellipse parameters for each

ﬁve-point combination. Instead of directly calculating the ellipse
parameters, Liu and Hu [22] use geometric distances of points
to a conic in order to evaluate the similarity between any two
of selected arcs. There are still a large number of wrong arcs
combinations, and the computation of distances between points
and arcs lower down its efﬁciency.

In this paper, we circumvent the high computational load by
pruning and picking candidates using a projective invariant, named
characteristic number (CN) [23]. The projective invariance of CN
is introduced in [24] acting as geometric constraints for ﬁducial
point localization under face pose changes. Later, Jia et al. employ
this invariant property to construct a shape descriptor robust to
perspective deformations [25]. For the ﬁrst time, we explicitly
take the advantage of the CN property giving the characterization
of the intrinsic geometry of an underlying planar curve of points.
The invariant gives the value of −1 on any three collinear points
and +1 for any six points on a conic (ellipse or other conic curves).
We are able to efﬁciently pruning straight lines and to determine
whether non-collinear six points belong to the same conic without
need of analytically ﬁtting nor voting. The calculation of CN is
also quite fast since the determinants of 3 × 3 matrices constitute
the primitives of CN.

Figure 1(b) illustrates the pruning and picking on an input
image with a bunches of ellipses in Fig. 1(a). Candidate arc
segments appear different colors, and we are able to prune those
line segments having the CN value −1. We use six points on
two arc segments, three on each, to calculate a CN value. The
points on the bold arcs in pink and blue form the light brown
triangle, while those on blue and green bold arcs generate the light
green triangle. These triangles (closed loops) formed by auxiliary
lines connecting arc points are necessary for CN calculation.
The six points on the arc pairs from the same ellipse, e.g., the
blue and green pair in Fig. 1(b), give the CN value +1. Thus,
the arcs belonging to one ellipse easily pop out by CN values,
and Fig. 1(c) shows the ellipse candidates formed by these picked
arc segments. Figure 1(d) presents the ﬁnal detection results by
further ellipse ﬁtting and validation. The proposed method is
robust with high efﬁciency, suitable for real-time applications as
validated in experiments.

The rest of this paper is organized as follows. Section 2
introduces the characteristic number (CN) and its property on lines
and conic curves. Section 3 elaborates our fast ellipse detection
algorithm with line pruning and arc picking using CN. Section 4
demonstrates experimental evaluations on accuracy and efﬁciency.
Section 5 concludes the paper.

2 CHARACTERISTIC NUMBER ON LINE AND CONIC
In this section, we ﬁrst introduce the general deﬁnition of the
characteristic number (CN), and give its computation on three
collinear points (CNL) and six points in a conic curve (CNC),
respectively. Also, we present the CN properties for these two
conﬁgurations, the key to efﬁciently pruning line segments and
picking candidates for elliptical arcs.

2.1 Characteristic number

The characteristic number extends the classical cross ratio in
various respects, and reﬂects the intrinsic geometry underlying
given points. The CN value of three collinear points is −1, while
six points lying on a conic curve have a common CN value +1.
We give the deﬁnition of CN below [23].

2

(1)

(2)

1 , Q(1)
3 . Three pairwise intersecting lines a, b and c form a closed loop

Fig. 2. Characteristic number on three collinear points (CNL), Q(1)
and Q(1)
(cid:52)P1P2P3.

2

Deﬁnition 1 Let Pm be m-dimension projective space over
K, and P1, P2, . . . , Pr be r distinct points in Pm that con-
struct a closed loop (Pr+1 = P1). There are n distinct points
Q(1)
on the line segment PiPi+1, i = 1, . . . , r. Each
i
point Q(j)

i
can be linearly represented by Pi and Pi+1 as

, . . . Q(n)

i

Q(j)

i = a(j)

i Pi + b(j)

i Pi+1.

Let P = {Pi}r

i=1 and Q= {Q(j)

i }j=1,...,n

i=1,...,r , the quantity

CN (P, Q) =

r
(cid:89)

(cid:32) n
(cid:89)

i=1

j=1

(cid:33)
,

b(j)
i
a(j)
i

is deﬁned as the characteristic number of P and Q.

The classical cross ratio is a special case of CN when r = 2
and n = 2. The characteristic number is proven to be a projective
invariant, meaning that CN values keep unchanged under projec-
tive/perspective transformations.

The deﬁnition of CN requires a closed loop with r sides,
and the number of points Q(j) at every side has to be identical.
Subsequently, we draw auxiliary lines to set up this geometric
conﬁguration required for calculating CN on three collinear points
and six points on a conic curve (ellipse).

2.2 Characteristic number on three collinear points

Three pairwise intersecting lines a, b and c intersect at three points
P1, P2 and P3, forming a closed loop. These three lines intersect
another line l at three points Q(1)
1 , Q(1)
3 , as shown
in Fig. 2. According to Deﬁnition 1, Q(1)
and Q(1)
can
3
be linearly represented by P1, P2 and P3 as:

1 , Q(1)

and Q(1)

2

2






Q1
Q2
Q3

(1) = a1
(1) = a2
(1) = a3

(1)P1 + b1
(1)P2 + b2
(1)P3 + b3

(1)P2,
(1)P3,
(1)P1,

(3)

(a)

(b)

(c)

(d)

Fig. 1. Ellipse detection process: (a) input image, (b) line pruning and arc picking, (c) candidate ellipse given by picked arcs, and (d) ﬁnal detection
with parameter ﬁtting and ellipse validation.

3

(6)

(8)

Similar to (3), each point of {Qi
linearly represented by a pair of points from {P1, P2, P3}.

(j)|i = 1, 2, 3; j = 1, 2} can be

Q1
Q1
Q2
Q2
Q3
Q3

(1) = a1
(2) = a1
(1) = a2
(2) = a2
(1) = a3
(2) = a3

(1)P1 + b1
(2)P1 + b1
(1)P2 + b2
(2)P2 + b2
(1)P3 + b3
(2)P3 + b3

(1)P2,
(2)P2,
(1)P3,
(2)P3,
(1)P1,
(2)P1.

We have the characteristic number on six points of a conic (CNC)
and b(j)
as (7) by substituting the representation coefﬁcients a(j)
into (2), and the CNC value equals +1. We apply this property of
CN to pick arc segments likely lying on an ellipse.

i

i

CN C(P, Q) =

= 1.

(7)

3
(cid:89)

2
(cid:89)

i=1

j=1

b(j)
i
a(j)
i

We provide a simple proof to CN C(P, Q) = +1 based on

Pascal’s hexagon theorem [26] as below.

Proof Let {Qi

(j)|i = 1, 2, 3; j = 1, 2} be six points on a
conic. As shown in Fig. 3, we can obtain three more intersections
as





R1 =< Q(2)
R2 =< Q(1)
R3 =< Q(2)

2 Q(1)
1 Q(2)
1 Q(1)

3 , P1P2 >,
3 , P2P3 >,
2 , P1P3 > .

Then R1, R2, and R3 can be represented by {Qi

(j)|i =
1, 2, 3; j = 1, 2} and {P1, P2, P3} through simple calculations
as






R1 = −|Q2
R2 = −|Q1
R3 = −|Q1

(2), Q3
(1), Q3
(2), Q2

(1), P2|P1 + |Q2
(2), P3|P2 + |Q1
(1), P3|P1 + |Q1

(2), Q3
(1), Q3
(2), Q2

(1), P1|P2,
(2), P2|P3,
(1), P1|P3,

(9)

where we use homogeneous coordination to represent a planar
point as A = [A(x), A(y), A(z)]T , and |A, B, C| denotes the
determinant of the 3 × 3 matrix given by the homogeneous
coordinates of the three points A, B and C as

|A, B, C| =

(10)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

A(x) B(x) C(x)
A(y) B(y) C(y)
A(z) B(z) C(z)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

.

Fig. 3. Characteristic number on six points of a conic (CNC). The closed
loop (cid:52)P1P2P3 intersects a conic (ellipse) at two points on each side
(j)|i = 1, 2, 3; j = 1, 2}. The points Ri(i = 1, 2, 3) are auxiliary
as {Qi
points to prove CN C = +1.

Substituting the coefﬁcients into (2), we calculate CN on three
collinear points (CNL) as (4). It can be proved that the CN value
and Q(1)
equals to −1 if Q(1)
3

are collinear [24].

1 , Q(1)

2

CN L(P, Q) = CN (P, Q) =

= −1,

(4)

3
(cid:89)

i=1

(1)

(1)

bi
ai

The proof process also implies that the calculation of CNL is
achieved by the determinant of a 3 × 3 matrix. In this study, we
use this property to prune line segments in ellipse detection.

2.3 Characteristic number on six points of a conic

(1)Q1

(1)Q1

(2), and the intersection of
(2) >. Let {Qi

(1) and Q1
We denote the line through two points Q1
two lines as <
as Q1
(j)|i = 1, 2, 3; j = 1, 2}
Q1
be six distinct points on a conic (ellipse) as shown in Fig. 3, and
P1, P2 and P3 be three intersection points of the lines connecting
some pairs of the six points on the conic:

(2), Q2

(1)Q2

(2)

P1 =< Q3
P2 =< Q1
P3 =< Q2

(1)Q3
(1)Q1
(1)Q2

(2), Q1
(2), Q2
(2), Q3

(1)Q1
(1)Q2
(1)Q3

(2) >,
(2) >,
(2) > .

(5)

As the homogeneous coordinate of a point in a projective plane
is independent on the initial points constructing the plane, we
specify P1 = (1, 0, 0)T , P2 = (0, 1, 0)T , and P3 = (0, 0, 1)T .

(11)

(12)

Consequently, the points R1,R2 and R3 can be represented by Pi,
a(j)
i (i = 1, 2, 3; j = 1, 2) by substituting (6) into (9) as
i

and b(j)






2 b(1)
R1 = (b(2)
R2 = (0, −b(1)
1 a(1)
R3 = (a(2)

2 a(1)
3 , −a(2)
1 b(2)
3 , a(1)
2 , 0, −b(2)

3 , 0)T ,
1 a(2)
3 )T ,
1 b(1)
2 )T .

According to Pascal’s hexagon theorem [26], R1,R2, and R3

are collinear, i.e.,

|R1, R2, R3| = 0.

The proof of (12) is provided in Appendix A.

Finally, we can obtain (7) by substituting (11) into (12). The
proof is completed. Again, as seen from (9), the ratios of several
determinants of 3 × 3 matrices generate CNC.

3 FAST ELLIPSE DETECTION
In this section, we present our ellipse detector using the char-
acteristic number to prune non-elliptical line segments and pick
arc segments lying on an ellipse. These pruning and picking
processes signiﬁcantly reduce the number of arc candidates for
ﬁnal ﬁtting, rendering fast detection. The complete detection
procedure includes preprocessing, line pruning, arc selection, and
parameter ﬁtting and ellipse validation.

At the preprocessing step, edge points are detected and linked
to generate arc segments, where short segments are removed as
noise. We delete those arc segments likely to be lines detected
by CNL values at the line pruning step. This step reduces the
number of arc segments that are not parts of any ellipses. However,
the possible arc combinations are still too many to efﬁciently
ﬁt elliptical parameters. At the following arc selection step, we
ﬁrstly divide arc segments into four groups, and remove some
impossible arc combinations across these groups according to their
relatively positional relationships. Subsequently, we apply CNC
to pick the arc combinations belonging to one ellipse. Only those
picked arc segments are used to ﬁt elliptic parameters in the last
ﬁtting and validation step. The pruning and picking with CNL and
CNC signiﬁcantly reduce the number of possible arc combinations
that determine the computational load of the ﬁtting. Also, these
pruning and picking steps run fast so that the overall detector is
quite efﬁcient.

3.1 Preprocessing

Given an image, we ﬁrstly smooth the image to partially suppress
noise, and apply the Canny edge detector [27] with default
thresholds in Matlab to extract consecutive edge points. The edge
detector outputs both the position xi and yi, and gradient τi on
each edge point as ei = (xi, yi, τi), where i = 1, 2, ..., N , τi =
dy/dx, N is the number of edge points.

It is possible to apply the CN constraint on any three or six
edge points to determine whether they lie in a line or ellipse.
However, we have to calculate C 3
N point combinations
for N edge points, resulting in high computational complexity.
Moreover, most of these combinations come from noise, or differ-
ent ellipses and lines, spending a large amount time on invalid CN
calculations. Instead, we apply the constraints on arc segments.

N and C 6

In order to efﬁciently shear invalid arc combinations for later
processing, we group arc segments into four sets corresponding
to the arcs from one ellipse distributing in four quadrants as
ArcI , ArcII , ArcIII , and ArcIV , named quadrant sets. In the

4

Fig. 5. Grouping arcs into four sets. The ﬁrst two ﬁgures are two arcs
in ArcI ∪ ArcIII . The difference between the numbers of pixels above
and below (slashed and solid white blocks) can split the sets into two
sets further. The last ﬁgure shows the splitting process.

preprocessing step, we separate edge points ei(i = 1, 2, ..., N )
into two groups ArcII ∪ ArcIV and ArcI ∪ ArcIII by the signs
of edge gradients τi as the ﬁrst stage of this arc grouping:

ß

τi > 0, ei ∈ ArcII ∪ ArcIV ,
τi < 0, ei ∈ ArcI ∪ ArcIII .

(13)

We link each edge point with the other edge points in its eight
neighborhood from the same group with a breadth-ﬁrst strategy
until no edge point exists in the neighborhoods. Consequently, we
separately generate a series of arc segments in two groups shown
in Fig. 4. Figure 4(b) demonstrates the arcs by linking edge points
from the Canny detector (shown in Fig. 4(a)) of the group ArcII ∪
ArcIV , and Fig. 4(c) shows the arc segments of ArcI ∪ ArcIII .
As the second stage of arc grouping, we divide each group
into two sets, eventually producing four sets. As shown in Fig. 5,
the vertices (e1(x), e1(y)), (e1(x), et(y)), (et(x), e1(y)), and
(et(x), et(y)) constitute the bounding box of an arc with the
length of t, where the starting and ending edge points of the arc
are e1 and et, respectively. Denoting the difference between the
numbers of pixels above and below (slashed and solid white blocks
in Fig. 5) as δ, we split each group into two by the sign of δ.
Taking an arc segment in the ArcI ∪ ArcIII group for example,
the arc falls in the ArcIII set if the pixel number above the arc is
greater than the below (δ > 0) otherwise (δ < 0) falls in the ArcI
set. The last plot in Fig. 5 illustrates this splitting processing. We
preform this stage of grouping after line pruning, and hence the
cases of δ = 0 are quite rare. Finally, every arc segment in each
of these four sets comes from one unique ellipse so that only arc
combinations from different sets are necessary for the arc picking
process. Therefore, this preprocessing is also designated for an
efﬁcient ellipse detector.

3.2 Line pruning

As a typical treatment to noise in literature, we simply set a
threshold T hlength (T hlength = 16 in all experiments of this
study) to remove short segments. Following the noise attenuation,
we employ CNL to prune line segments unlikely to come from
an ellipse. The determinant of three edge points, the starting,
midpoint, and ending of an arc segment (e1, ei and et) is taken
as the fast calculation of the CNL value for the segment given
in (12). The geometric interpretation of the determinant is the area
of (cid:52)e1eiet. We use the ratio of the area to the length of the
arc (CN L/t) to robustly estimate whether these three points are
collinear. The ratio close to zero indicates a line segment to be
removed. Figures 4(d) and 6 presents the segments after removing
noise and lines. The top row of Fig. 6 gives the arc segments

5

(a)

(b)

(c)

(d)

Fig. 4. Arcs detection and grouping. (a) shows edge points from Canny detector; (b) shows the arcs in sets ArcII and ArcIV ; (c) shows the arcs
in sets ArcI and ArcIII ; (d) shows the result after removing noise and lines, and the arcs in the same set are labeled in the same color. There are
four colors represent arcs in four sets.

Fig. 6. The segments after removing noise and lines. The top row gives
the arc segments with edge linking, and the bottom provides those after
noise and line pruning.

with edge linking, and the bottom provides those after noise
and line pruning. Many segments from noise and lines disappear,
signiﬁcantly reducing the number of arc candidates.

3.3 Arc selection

i

i

2

1

1

3

2

and b(j)

1 Q(2)

3 Q(2)

(cid:95)
arc2. We intersect Q(1)

1 Q(2)
1
at P2, and Q(1)

and Q(2)
3
at P1, Q(1)
3 Q(2)
3
and Q(1)

In this step, we pick candidate arcs, that are likely to assemble an
ellipse, across the four sets where noise and line segments have
been removed. Speciﬁcally, two arcs, each with three edge points,
are taken from two different sets (one arc per set) in order to
(cid:95)
arc1 and
construct CNC. As shown in Fig. 7, there are two arcs
(cid:95)
arc2, where Q(2)
and Q(1)
1 , Q(1)
are the mid and two endpoints of
2
(cid:95)
3 , Q(2)
arc1, respectively. Similarly, Q(1)
are the points
2
2 Q(2)
and Q(1)
in
2 Q(2)
and Q(1)
at P3. Given
these points in P and Q, we are able to have the representation
coefﬁcients a(j)
(i = 1, 2, 3 and j = 1, 2), and calculate
the CNC value for this arc combination by substituting these
coefﬁcients into (7). Equation 7 also tells that the CNC value
equals +1 if these two arc segments with six points come from
one identical ellipse. Therefore, picking two arc candidates from
one ellipse turns out to simply comparing the CNC value of the arc
combination with the value +1. Similar to line pruning, we can
also use a threshold (T hCN C ) that determines false negative for
this process. The arc pair belonging the same ellipse obtains the
value of CNC close to +1, and the absolute difference of CNC
value and +1, represented as DisCN C , is close to 0, as shown
in Fig. 8 where the triangle constructed by the six points from the
pair is labeled in light green. The red-brown triangle indicates the
arc pair having the CNC value greater than T hCN C , where the
two arc segments of this pair lie on different ellipses.

We only consider

the combinations with arc segments
from two adjacent quadrant sets, e.g., {ArcI , ArcII } and

Fig. 7. Construction of CNC based on two arcs. Q(2)
is the mid points
1
(cid:95)
arc1. Similarly, Q(1)
of
3 ,
Q(2)

2 are two endpoints of
(cid:95)
arc2.

1 and Q(1)
3 are three points on

(cid:95)
arc1, while Q(1)
2 and Q(2)

Fig. 8. Threshold (T hCN C ) is used to determine false negative for arc
selection. The arc pair (labeled in green and blue) belonging the same
ellipse obtains the value of CNC, DisCN C , close to +1, and the triangle
is labeled in light green. The red-brown triangle indicates the arc pair
(labeled in blue and pink) having the CNC value greater than T hCN C .
Points on arcs are labeled in purple, and vertices of triangles are labeled
in grey.

6

Algorithm 1 Picking algorithm for a three-arc combination
Input: ArcI ArcII ArcIII
Output: valid arc combinations set

for each ˆarci ∈ ArcII do
for each ˆarcj ∈ ArcI do

if ˆarci, ˆarcj do not meet coordinate constraints then

Continue.

end if
if DisCN C(ˆarci, ˆarcj) > T hCN C then

Continue.

end if
for each ˆarck ∈ ArcIII do

if ˆarci, ˆarck do not meet coordinate constraints then

Continue.

end if
Add {ˆarci ˆarcj ˆarck} to valid arc combinations set

end for

end for

end for
return valid arc combinations set

3.4 Parameter ﬁtting

There are ﬁve parameters to determine an ellipse, including its
center (two), orientation (one), and major and minor semi-axes
(two). We follow the procedure in [20] to estimate all these
parameters but the center whose calculation we provide below.

We estimate the center as the intersection of auxiliary lines
generated from any two-point pairs on the three arcs picked by the
previous procedure. As illustrated in the top ﬁgure of Fig. 10, S1
and E1 are two points on an arc segment, T1 is the intersection
of the two tangent lines from S1 and E1, and M1 is the middle
point of the line segment S1E1. It is proved that the line M1T1
passes through the ellipse center O. For practical images, it is
unnecessary that all such auxiliary line segments like M1T1 given
by any point pairs on the elliptical arcs, but we are able to locate
the center as the point closest to those lines by the least square
ﬁtting. In this study, we ﬁnd that the accuracy of this ﬁtting
(estimation) also depends on the tangents of the points along the
ellipse.

We use nd (nd = 16 for our experiments) parallel chords
instead of tangent lines in order to minimize the effects from
tangent deviations, as shown in the bottom ﬁgure of Fig. 10. The
points F1 and F2 are the mid points of the arcs ˘S1E1 and ˘S2E2,
respectively. We generate nd chords parallel to S1F2, and so we
do to the chord S2F1. The points M1s and M2s (s = 1, 2, ..., nd)
are the mid-points of the two series of parallel chords to S1F2
and S2F1, respectively. The points of M1s are collinear at m1,
M2s lying on the line m2, and the intersection of m1 and m2
determines the ellipse center O. We estimate m1 and m2 using a
fast variant of the robust Theil-Sen estimator [28] with two arcs in
adjacent quadrant sets. Consequently, we obtain four lines through
the ellipse center generated from a three-arc combination, yielding
at most six pairwise intersections. The algebraic average of the
coordinates of these six intersections is taken as the output ellipse
center (x0, y0).

3.5 Ellipses validation

Candidate ellipses are available after the parameter ﬁtting step.
There may exist false positives or duplicated ones in these candi-
dates so that a validate step is necessary.

Fig. 9. Two examples of invalid three-arc combinations that form one
ellipse.

{ArcII , ArcIII }, but leave out those two-arc combinations from
diagonal sets {ArcI , ArcIII } and {ArcII , ArcIV }. This choice
further lowers down possible combinations, and more importantly
improves the robustness to calculate CNC values. As shown
in Fig. 7, the lines Q(1)
and Q(1)
are likely to be parallel
for arcs from diagonal quadrant sets so that the intersection P1
does not exit, or lies quite far from the edge points. The calculation
of CNC value is so instable that the determination of ellipse is no
more effective. We exclude the combinations with arcs from two
diagonal quadrant sets, avoiding this instability.

1 Q(2)

3 Q(2)

3

1

The combinations with more arc segments are also able to
yield more accurate parameter estimation in the later step. Unfor-
tunately, noise and/or occlusions are likely to bring the absence
of arc segments from one quadrant set. Hence, we constitute the
combinations with three arcs from three different quadrant sets
upon the arc pairs picked by CNC for later parameter ﬁtting. There
are four kinds of valid arc combinations from three quadrant sets
for an ellipse, as shown in the ﬁrst row of Tab. I. We pick out
these combinations in each kind by using both coordinate and
CNC constraints together, where the coordinate constraint takes
relative locations of arcs to remove invalidate combinations. The
second and third rows of Tab. I list the picking rules for valid
combinations using CNC and coordinate constraints, respectively.
(cid:95)
The symbols e1
arc1.
Figure 9 illustrates two examples of invalid three-arc combinations
that form one ellipse, removed by the constraints in Tab. I.

t denote the starting and end points of

1 and e1

Speciﬁcally, the picking process for a three-arc combination
begins with an arc segment in the middle quadrant set, and then
proceed to those in the other two sets. We ﬁnd an arc pair ﬁrst,
and then the third arc to form the combination by alternatively
applying the coordinate and CNC constraints. We take the set
combination {ArcI , ArcII , ArcIII } in Tab. I as an example to
illustrate the picking process. We starts with one arc in ArcII ,
and test the pair of the arc of ArcII and every arc segments
in ArcI with the coordinate constraint. If one pair meet the
coordinate constraint, the CNC constraint is applied to this pair
further. Subsequently, we search the set ArcIII to ﬁnd the third
arc segments forming a pair with the arc in ArcII that follow the
coordinate constraint. Herein, the CNC constraint runs only once
in order to balance the speed and accuracy. We repeatedly run the
picking process for every arc segments in ArcII , and ﬁnd all valid
three-arc combinations for {ArcI , ArcII , ArcIII }. Algorithm 1
details the picking process for this set combination. The similar
process applies to the other three-set combinations in the ﬁrst row
of Tab. I, and ﬁnally we have all valid three-arc combinations
ready for parameter ﬁtting given in the next section.

TABLE I
The picking rules for valid combinations using CNC and coordinate constraints

7

Valid arc
combinations

Sets constraints

(cid:40) ˆarc1 ∈ ArcII
ˆarc2 ∈ ArcI
ˆarc3 ∈ ArcIII

(cid:40) ˆarc1 ∈ ArcIII
ˆarc2 ∈ ArcII
ˆarc3 ∈ ArcIV

(cid:40) ˆarc1 ∈ ArcIV
ˆarc2 ∈ ArcIII
ˆarc3 ∈ ArcI

(cid:40) ˆarc1 ∈ ArcI
ˆarc2 ∈ ArcIV
ˆarc3 ∈ ArcII

Coordinate
constraints

(cid:110) e1
t (x) < e2
1(y) < e3
e1

1(x)
1(y)

(cid:110) e1
t (x) < e3
1(y) > e2
e1

1(x)
1(y)

(cid:110) e1
1(x) > e2
t (y) > e3
e1

t (x)
t (y)

(cid:110) e1
1(x) > e3
t (y) < e2
e1

t (x)
t (y)

ellipses.

4 EXPERIMENTAL RESULTS AND ANALYSIS
We perform a series of experiments on data sets with both
synthetic and real images to evaluate the performance of our fast
detector by comparing with other state-of-the-art methods 1.

4.1 Evaluation metrics and data sets

All the experiments in this paper are executed on a desktop with
Intel(R) Core(TM) i7-6700 CPU whose clock frequency is 3.40
GHz. The performance of ellipse detectors is evaluated in terms
of running time and F-measure. The most time-consuming step in
many existing methods lie in parameter ﬁtting because too many
arc or point candidates are fed to the step. In addition to executing
time, we count candidate combinations of arcs (CC) for ellipse
ﬁtting, and use CC as a direct index to demonstrate the impacts of
CNC and CNL.

F-measure is deﬁned as:

F − measure =

2 × Precision × Recall
Precision + Recall

,

(14)

where

, Recall =

Precision =

Ψ
Ω
The symbol Ω denotes the number of detected ellipses, and Γ
indicates the number of ground-truth ellipses. Ψ is the number
of correctly detected ellipses. The overlapping ratio of a detected
ellipse Ed to the ground truth Eg is deﬁned as:

Ψ
Γ

(15)

.

M(Ed, Eg) =

area(Ed) ∩ area(Eg)
area(Ed) ∪ area(Eg)

,

(16)

where area(E) is the number of pixels inside the ellipse E.
The detected ellipse Ed is considered as a correct detection if
M(Ed, Eg) > T ho. The threshold T ho is set to 0.8 throughout
our experiments, as did in [29].

Experimental data contain both real world and synthetic im-
ages. We use data sets with real world images to validate efﬁciency

1. The source code and resultant images of our detector can be found at

https://github.com/dlut-dimt/ellipse-detector

Fig. 10. Computing the center of the ellipse. The top ﬁgure shows the
ellipse center calculated by two arcs. The bottom ﬁgure shows the
ellipse center calculated by a series of parallel chords.

We provide two indices to validate the candidates. The ﬁrst
one measures how many edge points ﬁtting the corresponding
ellipse. The more edge points ﬁt, the more likely the ellipse exists.
We substitute every edge points into the correspondence ellipse
equation to calculate how it ﬁts the equation. We count the number
of the ﬁtting edge points, and calculate the ratio to the total points
that generate the ellipse by ﬁtting arc combinations.

The second index accounts for arc lengths of three-arc com-
binations giving ellipse parameters. Ideally, the length of an arc
combination is larger than the sum of two semi-axes. We use
the ratio between the total length of one three-arc combination
and three times of the semi-axes summation as the index. Larger
values indicate more stable detection of the ellipse.

The validation in [19] is able to discover duplicated ellipses,
which allows to assess the similarity of two ellipses by comparing
the differences of ellipse parameters. A voting strategy is adopted
to pick up the center of a given cluster, removing duplicate

and accuracy, while synthetic ones are designated to demonstrate
robustness to noise and ellipse variations. Real world images are
those from Dataset #1 and Dataset Prasad, the same as [20],
for fair comparisons. Dataset #1 is composed of 400 images
having elliptic shapes, collected from MIRFlickr and LabelMe
repositories [30]. Those MIRFlickr images are of high quality, and
most of them contain only one object (ellipse), while those from
LabelM are noisy images of low resolution, containing multiple
objects. Dataset Prasad contains 198 real
images from [29],
where objects of oval shapes like human faces are regarded as
ellipses. Besides evaluations on the original Dataset Prasad, we
also construct Dataset #2 by selecting 50 images with rigorous
ellipses in order to show the accuracy of our method on detecting
ellipses. These rigorously elliptical shapes are quite common in
industrial inspection and diagnosis.

4.2 Performance analysis

The effectiveness of line pruning and arc selection steps are
illustrated by comparisons on detection results with and without
these steps. We also provide empirical studies on the hyper-
parameters involved in these steps. The parameters for ellipse
ﬁtting and validation are taken the same values as those in [20].

4.2.1 Performance analysis of line pruning
We remove short and straight line segments using CNL as dis-
cussed in Section 3.2. Our goal is to prune noise effects and lines
in input images as much as possible but preserve arcs of ellipses.
We perform line pruning on Dataset #1 by tuning T hCN L from
0 to 5.0. Intuitively, the threshold T hCN L limits the height of
the triangle formed by the three edge points for CNL calculation.
Therefore, the larger T hCN L is, the more arcs are to be removed.
The zero threshold, T hCN L = 0, indicates no line pruning step
included.

Table II lists the values of arc numbers, running time, and F-
measure with varying T hCN L values. There are averagely 181 arc
segments without line pruning (T hCN L = 0), and more segments
are removed when increasing T hCN L values. The computing time
is 28.86ms, and F-measure is 0.4313 without line pruning. When
noise and line segments are removed by CNL, the computing time
is becoming lower and F-measure increases. We obtain the best
performance, 8.52ms for computation and 0.4692 for F-measure
when T hCN L = 3.0. The computing time is still decreasing
when more arc segments are pruned by the thresholds larger than
3.0. The values of F-measure slightly decrease due to increased
false negative. These results show that the line pruning step using
CNL is effective to remove noise and lines, and also alleviate
the computational load for later steps. We set T hCN L = 3.0 to
balance the accuracy and computing time in all comparisons with
the others.

TABLE II
The performance of line pruning step.

T hCN L

arc num avg. time(ms)

F-measure

0
1
2
3
4
5

181
170
108
65
40
26

28.86
26.52
13.75
8.52
6.79
6.17

0.4313
0.4338
0.4576
0.4692
0.4499
0.4226

8

Fig. 11. Relationship between point coordinates and CNC values. Dif-
ferent colors indicate various CNC values given by the color bar on the
right most. Five distinct points P1, ..., P5 on the ellipse are ﬁxed, and the
sixth point around the ellipse are varied to show the distribution of CNC
values.

4.2.2 Performance analysis of arc selection

We use the geometric constraint of six points on arcs derived
from CNC to pick up arc segments belonging to one ellipse.
Theoretically, the CNC value of six points lying on an ellipse
equals +1, but various imaging conditions (e.g., thermal noise
and lens distortions) in practical applications may cause the value
deviating from +1. As discussed in Section 3.3, we relax this hard
constraint to a range in the vicinity of +1 determined by T hCN C .
Herein, we perform experimental analysis on the relationship
between point coordinates and CNC values. This analysis does
not only give arise to an appropriate threshold, but also validates
the effectiveness of the arc selection based on CNC.

Supposing an ellipse centering at the coordinate origin, we ﬁx
ﬁve distinct points P1, ..., P5 on the ellipse, and vary the sixth
point around the ellipse to show the distribution of CNC values
in Fig. 11. Different colors indicate various CNC values given by
the color bar on the right most of Fig. 11. All the CNC values
higher than 1.4 are colored in red-brown, while all those lower
than 0.6 in blue. Figure 11 illustrates that most of CNC values
with the sixth point close to the ellipse fall within the range from
0.6 to 1.4. There exist several regions where CNC values lie in
the range while the sixth point locates far from the ellipse. These
regions include the star-shaped area out of the ellipse between P2
and P3, and the bottom left and top right ends of the line stretching
out of P5. This observation can be explained by the fact that the
CNC value of +1 indicates the points lying on a conic curve not
only an ellipse. However, these ’outliers’ have few effects on our
detector, because other types of conic curves, e.g., hyperbola and
parabola, seldom appear in practical industrial images, and the
majority can be also removed by the coordinate constraint even if
a few of them appear.

We further apply our detector on dataset #1 by varying
T hCN C , the absolute deviation from +1, from 0 to 50, giving
seventeen values in total. Figure 12 illustrates the values of
computing time with varying thresholds. The blue line in Fig. 12
demonstrates the seventeen values of T hCN C in an ascending
order, also listed in the third row below the plot. The step values

vary with the value ranges of T hCN C , i.e., 0.1 for the range from
0 to 0.6, 1.0 for 1 to 5, and 10 for values larger than 10. The
orange and grey bars show the computing time with and without
the arc selection step, whose values are listed in the ﬁrst and
second rows below, respectively. The average computing time is
6.96 ms for each image, one half of the detection time without
CNC, 13.4ms, when we use the hard constraint T hCN C = 0
picking only a small fraction of arc segments. More arc segments
are included for parameter ﬁtting, demanding more computing
time, when increasing the threshold values. When T hCN C is
larger than 20, the detector spends more time than that without
the selection step since the calculation of CNC takes more time
than what the constraint can save. As a result, the orange bars are
higher than the grey ones for these T hCN C values in Fig. 12.

Figure 13 shows the values of F-measure (F-m) with varying
threshold values. The F-measure for the detector without the CNC
constraint is 0.4385 labeled in the gray bar, while ours in orange
bars. The hard constraint yields a very low F-m 0.0033 since
the choice excludes many arc segments slightly deviating from an
ellipse, resulting in signiﬁcant false negatives. The threshold 0.2
outputs the best F-m 0.4641, even higher than the detector without
this constraint. This improvement shows that the CNC constraint
is also able to exclude false positives in addition to decreasing the
computing time from 13.40ms to 8.58ms. As expected, the values
of F-m given by the thresholds larger than 20 are quite close to
that without the selection step. In these cases, the selection step
takes no effect on lowering down false positives. Therefore, the
arc selection step using CNC is quite crucial to both efﬁciency and
accuracy. We choose the threshold as T hCN C = 0.2 to generate
the best performance in the following experiments.

4.3 Comparisons with the state of the art

Firstly, we compare our detector with three recent arc-based
methods, i.e., Zhang [11], Libuda [13], and Fornaciari [20], on
Dataset #1. The set consists of images with different qualities and
various numbers of target ellipses. The latest works of [7] and [8]
are not so relevant as these three because both are point-based
and applicable to sceneries where only one ellipse appear. The
execution program of [20] is provided by the authors, and we take
the results of [11] and [13] reported in [20]. Table III lists the
comparisons on average running time and F-measure. The method
of Zhang [11] performs the worst: the ﬁtting on a large number of
pixel combinations takes much time over 4s for an image; its F-
measure is the lowest as 0.3421. Libuda [13] and Fornaciari [20]
output the similar efﬁciency with the average execution time for
each image 14.38 ms and 12.79 ms, respectively. The values of
their F-measure are also quite close. Our detector achieves the
best in terms of both efﬁciency(8.54ms) and accuracy (F-measure
about 0.47). Speciﬁcally, we buy 7% higher accuracy with 33%
less execution time than the fastest method [20].

TABLE III
F-measure and runtime compared with the state of the art on Dataset
#1

9

Several examples of the above methods on Dataset #1 are
shown in Fig. 14 where the ﬁrst column is the input images, and
the second one lists the ground truth (GT). False negatives occur in
all the results of Libuda [13] except for the ﬁfth row. The method
of Fornaciari [20] works quite close to ours that correctly detects
almost all the ellipses in these images. It is worth noting that
only our method successfully picks out the middle wheel partially
occluded by the lady in the third image, while the other three fail.
Compared with the ground truth, our detector outputs one extra
ellipse out of the bottom right tray. Actually, one can ﬁnd a dim
elliptical trail along the tray, but the ground truth neglects it.

Secondly, we compare the execution time on each processing
step with the-state-of-the-art on Dataset #1, as shown in Tab. IV.
The method of Zhang [11] spends about 4243 ms on estimating
the parameters due to huge numbers of possible point combina-
tions. The method of Prasad [29] reduces the time on parameter
estimation via grouping arcs with curvature and convexity, but the
grouping spends additional 278ms. The method of Libuda [13]
uses an iterative strategy, and the time spent on each of the ﬁrst
three steps equals about 4.5ms. Fornaciari’s detector [20], the
fastest one among the existing, spends the most time 4.9ms on
grouping arcs with their relative locations against the other steps.
In contrast, our method only uses about half of the execution time
of [20] on the grouping step, and the total execution time is less
than two third of [20]. Thus, our detector reduces the time for the
grouping step, the bottleneck for efﬁcient detectors.

Further, we peer into the proposed detector to analyze how line
pruning and arc selection accelerate detection. Table V illustrates
the effects of CNL and CNC by listing the averaged values of arc
numbers, arc combination numbers (CC) for parameter ﬁtting, ex-
ecution time and F-measure on Dataset #1. Without any processing
using CNL nor CNC, possible averaged arcs and arc combinations
(CC) are 181 and 2619, respectively. After line pruning, the arc
number reduces to 65, about one third of of the original, and
the CC value signiﬁcantly decreases to 196, 6% of the original.
Only 40 arc combinations remain for parameter ﬁtting, shearing
98.5% combinations from the original. Naturally, the execution
time drops down 93% from 129.33ms to 8.52ms. The value
of F-measure also increases from 0.3163 to 0.4692 since many
false positives are removed by these two steps using CNL and
CNC. Green curves in the ﬁrst and second rows of Fig. 15 present
possible ellipses to be ﬁtted without and with our pruning/selection
steps, respectively. It is evident that the green curves in the second
row are much less than those in the ﬁrst row, intuitively showing
the effectiveness of our CNL/CNC based processing to save time
and improve accuracy.

TABLE V
The effect of CNL and CNC

arc Num
CC
avg.time (ms)
F-measure

After arc
detection

After line
pruning

After arc
selection

181
2619
129.33
0.3163

65
196
12.73
0.4090

65
40
8.52
0.4692

Method

F-measure

avg.time(ms)

Libuda[13]
Prasad[29]
Zhang[11]
Fornaciari[20]
Our

0.4258
0.4512
0.3421
0.4385
0.4692

14.38
823.38
4243.86
12.79
8.54

Finally, we compare our detector with [20], giving the best
performance among the existing, in terms of CC, F-measure, and
execution time on three data sets including Datast #1, Dataset
#2, and Dataset Prasad. As shown in Tab. VI, our method out-
performs [20] on all the three data sets. The last column shows

10

Fig. 12. The values of computing time with varying thresholds. We vary the absolute deviation from +1, from 0 to 50, giving seventeen T hCN C
values in total, labeled in blue line and listed in the third row. The orange and grey bars show the computing time with and without the arc selection
step.

Fig. 13. The values of F-measure (F-m) with varying thresholds. We take the same deviation from +1 as did in Fig. 12, while the orange and grey
bars show the F-measure with and without the arc selection step.

TABLE IV
Execution times (ms) for each step compared with the-state-of-the-art on Dataset #1.

Libuda [13]

Prasad [29]

Zhang [11]

Fornaciari [20]

Our

Edage detection
Pre-processing
Grouping
Estimation
Validation and Clustering
Total

4.49
4.15
4.89
0.84
0.00
14.38

3.54
78.03
278.01
3.40
460.39
823.38

3.97
3.55
0.25
4236.06
0.03
4243.86

3.45
1.94
4.90
2.30
0.21
12.79

3.43
1.90
2.53
0.63
0.06
8.54

11

Fig. 14. Several examples of the compared methods on Dataset #1. The ﬁrst column is the input images, and the second one lists the ground truth
(GT).

The ﬁrst synthetic data set consists of 9100 ellipses with
various semi-axes ratios and orientations. One semi-axis is ﬁxed
as 100, and the other one varies so that the ratios range from 0.01
to 1 at the step of 0.01. Orientations vary from 1◦ to 90◦ at the
step of 1◦. The second data set contains 10000 images with a ﬁxed
center and orientation, showing changes on ratios and lengths of
semi-axes. One semi-axis varies from 1 to 100 at the step of 1,
and the other one changes accordingly so that axes ratios range
from 0.01 to 1 at the step of 0.01. Both data sets come from [20]
that generates synthetic 400 × 400 images, each containing one
single ellipse without noise.

Figure 16 illustrates comparisons with [20], where black points
indicate failures of detection. The results on the ﬁrst data set are
given in Fig. 16(a) and Fig. 16(b). The horizontal axis gives ratios
of two semi-axes, and the vertical one shows orientations. Both
methods are robust to orientation changes as long as axes ratios
are larger than 0.25, but they fail in the cases of small axes ratios
when ellipses degenerate into straight lines. The results on the
second data set are shown in Fig. 16(c) and Fig. 16(d), where the
vertical axis indicates lengths of major axes. The robustness of
both methods is quite similar, working well on ellipses whose
major axis is longer than 10 and axes ratio is larger than 0.25.
Small arcs are likely to be pruned as noise when the ellipse only
has a few pixels. Fortunately, one may tackle the problem of small
ellipses by upscaling the image as did in [20]. Therefore, the
proposed method is quite robust, and only fails in some extreme
cases, e.g., small and extremely oblate ellipses, which are quite

Fig. 15. Ellipses needed to be ﬁtted with or without line pruning and
arc selection. Green curves in the ﬁrst and second rows present pos-
sible ellipses to be ﬁtted without and with our pruning/selection steps,
respectively.

the improvement percentage both on efﬁciency and accuracy. The
accuracy of the proposed detector increases about 6.6% in average
over [20], and more signiﬁcantly our detector averagely runs about
31.0% faster than [20] on all the three data sets. These results show
that our detector is applicable to real time scenarios in practice.

4.4 Robustness to ellipse variations and noise

In order to investigate the robustness to ellipse variations and
noise, we use two synthetic data sets with different orientations
and ratios of two semi-axes of ellipses, and also apply salt-
and-pepper noise to real world images. The noise break arcs
into several small fragments, which may affect the accuracy and
efﬁciency.

12

(17)

(18)

(19)

TABLE VI
Testing results of the proposed methods compared with [20] on three datasets.

DataBase

avg. time(ms)
Ours
[20]

F-m

CC

[20]

Ours

[20]

Ours

improvement percentage
accuracy

speed

Dataset Prasad
Dataset #1
Dataset #2

4.34
13.58
5.26

3.35
8.55
4.09

0.2874
0.4385
0.5893

0.3059
0.4692
0.6271

82
267
117

19
40
34

22.70%
37.05%
22.27%

6.44%
7.00%
6.41%

(a) [20]

(b) Ours

(c) [20]

(d) Ours

Fig. 16. Robustness to ellipse variations compared with [20]. Figure (a)-(b) are results on the ﬁrst dataset. The horizontal axis gives ratios of two
semi-axes, and the vertical one shows orientations. Figure (c)-(d) are results on the second dataset. The vertical axis indicates lengths of major
axes, and the black points indicate failures of detection.

rare in reality.

Then three intersections

We add salt-and-pepper noise to images of Dataset #2 with
the ratios of noise to image set as 3%, 6%, 9%, 12%, 15% and
18% to validate the robustness of our method to noise. Again, we
compare with [20] on efﬁciency and accuracy, shown in Fig. 17.
The values of F-measure for these two methods on images without
noise are 6.2 and 5.8, respectively. The values decrease for both
methods when the noise increases. When the ratio of noise to
image is up to 18%, our value is about 0.35, higher than that
of [20]. When the noise level is getting higher, the execution time
of our detector stays around 4ms, and that of [20] ﬂuctuates a bit
around 5ms not so stable as ours. Generally, both methods runs
faster as noise increases because they are able to remove small arc
segments caused by noise. As a summary, noise has few effect on
the efﬁciency, but slightly lower down the accuracy.

5 CONCLUSIONS

In this paper, an ellipse detector for real-time application is
proposed. We trades off accuracy and efﬁciency and pay more
attention to the execution time. We introduce a new geometry
constraint to prune lines and select arcs belong to the same ellipse.
The detector removes the straight arcs based on characteristic on
line (CNL), and selects candidate elliptical arc combinations by
characteristic on conic (CNC). Our method outperforms the-state-
of-the-art by the experiments on real images, which can be used in
real-time for various applications. In the future, we will improve
our method to make it possible to detect quite small ellipses in
images, which is a challenge for most existing methods.

APPENDIX A
PROOF OF PASCAL’S HEXAGON THEOREM





R1 =< Q(2)
R2 =< Q(2)
R3 =< Q(2)

2 Q(1)
3 Q(1)
1 Q(1)

3 , Q(2)
1 , Q(2)
2 , Q(1)

1 Q(1)
2 Q(1)
3 Q(2)

1 >,
2 >,
3 >

are collinear.

Proof: The coordinate of R1, R2 and R3 can be represented

by {Qi

(j)|i = 1, 2, 3; j = 1, 2} as






R1 = (Q2
R2 = (Q3
R3 = (Q1

(2) × Q3
(2) × Q1
(2) × Q2

(1)) × (Q1
(1)) × (Q2
(1)) × (Q3

(2) × Q1
(2) × Q2
(1) × Q3

(1)),
(1)),
(2)),

where × denotes the cross product of two points. Then R1, R2
and R3 can be represented through simple calculations as
(2), Q3

R1 = |Q2

(1), Q1

(1)|Q1






−|Q2

(2), Q3

(1), Q1

R2 = |Q3

(2), Q1

(1), Q2

(1)|Q2

−|Q3

(2), Q1

(1), Q2

R3 = |Q1

(2), Q2

(1), Q3

(2)|Q3

(1),

(1),

(2)
(2)|Q1
(2)
(2)|Q2
(1)
(1)|Q3

(2), Q2
To prove that R1, R2 and R3 are collinear is equivalent to prove

(1), Q3

−|Q1

(2).

|R1, R2, R3| = 0.

(20)

Then we can substitute (19) into (20), and get the equivalent
equation as

|Q1
|Q2
= |Q1
|Q2

(1), Q2
(2), Q3

(1), Q3
(2), Q1

(1)||Q1
(1)||Q3

(2), Q2
(2), Q1

(2), Q3
(2), Q2

(2), Q2

(2), Q3

(2)||Q1

(1), Q2

(1)|

(1), Q3

(2), Q1

(1)||Q3

(1), Q1

(2), Q2

(1)|
(1)|
(2), Q3
(1)|.

(21)

(j)|i = 1, 2, 3; j = 1, 2} be
Pascal’s hexagon theorem: Let {Qi
different points on a non-degenerative conic C, as shown in Fig. 3.

In order to prove it, we can replace any point Qi
general point Q(x, y, z), taking Q1

(j) with the
(1) for example, then we can

13

(a) F-measure

(b) Execution time

Fig. 17. Robustness to salt-and-pepper noise. The ratios of noise to image are set as 3%, 6%, 9%, 12%, 15% and 18%. (a) shows the F-measure of
[20] and our method. (b) Running time are plotted against noise density. Each point of these curves is obtained from the detection results of Dataset
#2.

get the parametric equations of conic C by other ﬁve points. As
(1) is one point on conic C, it must meet (21). The proof is
Q1
completed.

ACKNOWLEDGMENTS
We thank Dr. M. Fornaciari, Dr. S. Mulleti and Dr. T. Lu for
providing their executables and insights. We also thank Dr. M.
Fornaciari for his experimental data.

REFERENCES
[1] T. Cooke, “A fast automatic ellipse detector,” in 2010 International
Conference on Digital Image Computing: Techniques and Applications.
IEEE, 2010, pp. 575–580.

[2] S. Zafari, T. Eerola, J. Sampo, H. Kalviainen, and H. Haario, “Seg-
mentation of overlapping elliptical objects in silhouette images,” IEEE
Transactions on Image Processing, vol. 24, no. 12, pp. 5942–5952, 2015.
[3] C. Teutsch, D. Berndt, E. Trostmann, and M. Weber, “Real-time detection
of elliptic shapes for automated object recognition and object tracking,”
in Electronic Imaging 2006.
International Society for Optics and
Photonics, 2006, pp. 60 700J–60 700J.
J. Illingworth and J. Kittler, “A survey of the hough transform,” Computer
vision, graphics, and image processing, vol. 44, no. 1, pp. 87–116, 1988.
[5] R. A. McLaughlin, “Randomized hough transform: improved ellipse
detection with comparison,” Pattern Recognition Letters, vol. 19, no. 3,
pp. 299–305, 1998.

[4]

[6] W. Lu and J. Tan, “Detection of incomplete ellipse in images with
strong noise by iterative randomized hough transform (irht),” Pattern
Recognition, vol. 41, no. 4, pp. 1268–1279, 2008.
J. Liang, Y. Wang, and X. Zeng, “Robust ellipse ﬁtting via half-quadratic
and semideﬁnite relaxation optimization,” IEEE Transactions on Image
Processing, vol. 24, no. 11, pp. 4276–4286, 2015.

[7]

[8] S. Mulleti and C. S. Seelamantula, “Ellipse ﬁtting using the ﬁnite rate of
innovation sampling principle,” IEEE Transactions on Image Processing,
vol. 25, no. 3, pp. 1451–1464, 2016.

[9] Y. Xie and Q. Ji, “A new efﬁcient ellipse detection method,” in 16th
IEEE, 2002,

International Conference on Pattern Recognition, vol. 2.
pp. 957–960.

[10] C. Basca, M. Talos, and R. Brad, “Randomized hough transform for
ellipse detection with result clustering,” in EUROCON 2005-The Inter-
national Conference on ”Computer as a Tool”, vol. 2.
IEEE, 2005, pp.
1397–1400.

[11] S.-C. Zhang and Z.-Q. Liu, “A robust, real-time ellipse detector,” Pattern

Recognition, vol. 38, no. 2, pp. 273–287, 2005.

[12] E. Kim, M. Haseyama, and H. Kitajima, “Fast and robust ellipse ex-
traction from complicated images,” in Proceedings of IEEE information
technology and applications. Citeseer, 2002.

[13] L. Libuda, I. Grothues, and K.-F. Kraiss, “Ellipse detection in digital
image data using geometric features,” in Advances in Computer Graphics
and Computer Vision. Springer, 2007, pp. 229–239.

[14] D. K. Prasad, M. K. Leung, and C. Quek, “Elliﬁt: An unconstrained, non-
iterative, least squares based geometric ellipse ﬁtting method,” Pattern
Recognition, vol. 46, no. 5, pp. 1449–1465, 2013.

[15] T. M. Nguyen, S. Ahuja, and Q. J. Wu, “A real-time ellipse detection
based on edge grouping,” in IEEE International Conference on Systems,
Man and Cybernetics.

IEEE, 2009, pp. 3280–3286.

[16] F. Mai, Y. Hung, H. Zhong, and W. Sze, “A hierarchical approach for
fast and robust ellipse extraction,” Pattern Recognition, vol. 41, no. 8,
pp. 2512–2524, 2008.

[17] A. Y.-S. Chia, S. Rahardja, D. Rajan, and M. K. Leung, “A split
and merge based ellipse detector with self-correcting capability,” IEEE
Transactions on Image Processing, vol. 20, no. 7, pp. 1991–2006, 2011.
[18] T. Lu, W. Hu, C. Liu, and D. Yang, “Effective ellipse detector with
polygonal curve and likelihood ratio test,” IET Computer Vision, vol. 9,
no. 6, pp. 914–925, 2015.

[19] D. K. Prasad and M. K. Leung, “Clustering of ellipses based on their
distinctiveness: An aid to ellipse detection algorithms,” in 3rd IEEE Inter-
national Conference on Computer Science and Information Technology
(ICCSIT), vol. 8.

IEEE, 2010, pp. 292–297.
[20] M. Fornaciari, A. Prati, and R. Cucchiara, “A fast and effective ellipse
detector for embedded vision applications,” Pattern Recognition, vol. 47,
no. 11, pp. 3693–3708, 2014.

[21] Y. Sugaya, “Ellipse detection by combining division and model selection
based integration of edge points,” in 2010 Fourth Paciﬁc-Rim Symposium
on Image and Video Technology (PSIVT).

IEEE, 2010, pp. 64–69.

[22] C. Liu and W. Hu, “Effective method for ellipse extraction and integration
for spacecraft images,” Optical Engineering, vol. 52, no. 5, pp. 057 002–
057 002, 2013.

[23] Z. Luo, X. Zhou, and D. X. Gu, “From a projective invariant to some
new properties of algebraic hypersurfaces,” Science China Mathematics,
vol. 57, no. 11, pp. 2273–2284, 2014.

[24] X. Fan, H. Wang, Z. Luo, Y. Li, W. Hu, and D. Luo, “Fiducial facial
point extraction using a novel projective invariant,” IEEE Transactions
on Image Processing, vol. 24, no. 3, pp. 1164–1177, 2015.

[25] Q. Jia, X. Fan, Y. Liu, H. Li, Z. Luo, and H. Guo, “Hierarchical projective
invariant contexts for shape recognition,” Pattern Recognition, vol. 52,
pp. 358–374, 2016.

[26] N. Stefanovi´c and M. Miloˇsevi´c, “A very simple proof of pascals hexagon
theorem and some applications,” Proceedings-Mathematical Sciences,
vol. 120, no. 5, pp. 619–629, 2010.

[27] J. Canny, “A computational approach to edge detection,” IEEE Transac-
tions on pattern analysis and machine intelligence, no. 6, pp. 679–698,
1986.

[28] J. Matouˇsek, “Randomized optimal algorithm for slope selection,” Infor-

mation processing letters, vol. 39, no. 4, pp. 183–187, 1991.

[29] D. K. Prasad, M. K. Leung, and S.-Y. Cho, “Edge curvature and convexity
based ellipse detection method,” Pattern Recognition, vol. 45, no. 9, pp.
3204–3221, 2012.

[30] R. Hartley and A. Zisserman, Multiple view geometry in computer vision.

Cambridge university press, 2003.

