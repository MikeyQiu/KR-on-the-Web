9
1
0
2
 
v
o
N
 
3
1
 
 
]
L
C
.
s
c
[
 
 
1
v
1
7
1
6
0
.
1
1
9
1
:
v
i
X
r
a

Unsupervised Pre-training for Natural Language
Generation: A Literature Review

Yuanxin Liu1,2, Zheng Lin1
1Institute of Information Engineering, Chinese Academy of Sciences
2School of Cyber Security, University of Chinese Academy of Sciences

Abstract

Recently, unsupervised pre-training is gaining increasing popularity in the realm
of computational linguistics, thanks to its surprising success in advancing natural
language understanding (NLU) and the potential to effectively exploit large-scale
unlabelled corpus. However, regardless of the success in NLU, the power of
unsupervised pre-training is only partially excavated when it comes to natural
language generation (NLG). The major obstacle stems from an idiosyncratic nature
of NLG: Texts are usually generated based on certain context, which may vary with
the target applications. As a result, it is intractable to design a universal architecture
for pre-training as in NLU scenarios. Moreover, retaining the knowledge learned
from pre-training when learning on the target task is also a non-trivial problem. This
review summarizes the recent efforts to enhance NLG systems with unsupervised
pre-training, with a special focus on the methods to catalyse the integration of pre-
trained models into downstream tasks. They are classiﬁed into architecture-based
methods and strategy-based methods, based on their way of handling the above
obstacle. Discussions are also provided to give further insights into the relationship
between these two lines of work, some informative empirical phenomenons, as
well as some possible directions where future work can be devoted to.

1

Introduction

Unsupervised pre-training has sparked a sensational research interest in the natural language process-
ing (NLP) community. This technology provides a promising way to exploit linguistic information
from large-scale unlabelled textual data, which can serve as an auxiliary prior knowledge to beneﬁt a
wide range of NLP applications. In the literature, language modeling (LM) is a prevalent task for
pre-training, where the target words are predicted conditioned on a given context. Therefore, it is
intuitive to employ the pre-trained LMs for natural language generation, as the pre-training objective
naturally accords with the goal of NLG. However, revolutionary improvements are only observed in
the ﬁeld of NLU.

The primary factor that impedes the progress of unsupervised pre-training in NLG is an idiosyncratic
nature of text generation: Basically, we do not write words from scratch, but instead based on
particular context, e.g., the source language sentences for translation, the dialog histories for response
generation, and the visual scenes for image captioning, among others. In unsupervised pre-training,
the task-speciﬁc context is not available, which leads to a discrepancy between pre-training and
training in the target task. More precisely, the challenges posed by the discrepancy can be reﬂected
in two aspects: First, the diverse context makes it intractable to design a universal representation
extractor as in the case of NLU, and the pre-trained language generators may have to modify their
inner structures to deal with the task-speciﬁc context. Second, the mismatch in data distribution and
objective between the two training stages might result in the performance on the pre-training tasks
being compromised during ﬁne-tuning, which is dubbed as the catastrophic forgetting problem [8].

Preprint.

In response to the above challenges, two lines of work are proposed by resorting to architecture-
based and strategy-based solutions, respectively. Architecture-based methods either try to induce
task-speciﬁc architecture during pre-training (task-speciﬁc methods), or aim at building a general
pre-training architecture to ﬁt all downstream tasks (task-agnostic methods). Strategy-based methods
depart from the pre-training stage, seeking to take advantage of the pre-trained models during the
process of target task learning. The approaches include ﬁne-tuning schedules that elaborately design
the control of learning rates for optimization, proxy tasks that leverage labeled data to help the
pre-trained model better ﬁt the target data distribution, and knowledge distillation approaches that
ditch the paradigm of initialization with pre-trained parameters by adopting the pre-trained model as
a teacher network.

The remainder of this review is organized as follows: In Section 2, we will introduce the background
knowledge about unsupervised pre-training for NLU, followed by a sketch of how the pre-trained
models are employed through parameter initialization for NLG in Section 3. In Section 4, we will
describe the architecture-based methods, and the strategy-based methods are presented in Section 5.
Section 6 provides some in-depth discussions, and Section 7 concludes this review.

2 Background: Unsupervised Pre-training for NLU

Learning ﬁne-grained language representations is a perennial topic in natural language understanding.
In restrospect, compelling evidences suggest that good representations can be learned through
unsupervised pre-training.

Early work focused on word-level representations [21, 22], which encodes each word independently.
For sentence-level representations, there are roughly two kinds of pre-training objectives, namely
discriminative pre-training and generative pre-training. Discriminative pre-training distinguishes
context sentence(s) for a given sentence from non-context sentence(s) [2, 19], with the aim to capture
inter-sentence relationships. Generative pre-training follows the language model paradigm:

max
θ

T
(cid:88)

t=1

log P (xt|C; θ)

(1)

where xt is the tth word in the textual sequence to generate, T indicates sequence length, θ stands for
learnable parameters, and C is the context information, which is deﬁned by the pre-training objective.
ELMo [23] and GPT (short for Generative Pre-training) [25] adopt uni-directional Transformer [33]
and bi-directional LSTM [10] language models, respectively. In this case, the context is deﬁned
as x1:t or xt+1:T . BERT [2] is trained with a novel masked language model (MLM), which is a
non-autoregressive way of generation. Speciﬁcally, MLM randomly replaces a ﬁxed proportion
of tokens in each sentence with a special [MASK] token or a random token, which results in a
corrupted sentence Xmask, and predicts each replaced token based on the same context Xmask. To
alleviate the inconsistency with target tasks caused by the introduction of [MASK] token, XLNet [36]
introduces permutation-based language model, which conducts autoregressive language modeling
over all possible permutations of the original word sequence. This gives rise to a context C = Xz1:t−1,
where z is a certain permutation of [1, 2, . . . , T ], according to the deﬁnitions in [36]. [1] and [13]
pre-trained an encoder-decoder framework to reconstruct the input sentence and the surrounding
sentence, respectively, and the encoded input sentence thereby is included in the context C.
The sentence representations learned by LMs 1 can be used to perform many NLU tasks by adding a
simple linear classiﬁer. Despite the objective of language modeling, the pre-trained representations
and have successfuly pushed the state-of-the-art on multiple benchmarks .

3 Unsupervised Pre-training and Parameter Initialization for NLG

NLG systems are usually built with an encoder-decoder framework, where the encoder reads the
context information and the decoder generates the target text from the encoded vectorial representa-
tions. A direct way to utilize the pre-trained models is to initialize part of the encoder (when dealing
with textual context) and/or the decoder with pre-trained parameters. For the encoder, pre-training is

1In the rest of this review, we refer to unsupervised pre-training as the generative LMs, unless otherwise

speciﬁed.

2

Figure 1: Overview of pre-training tasks for Seq2Seq learning. Left: Denoising autoencoder [34]
takes a corrupted sentence as input and reconstructs the original sentence. The positions of x1 and x2
are switched by shufﬂing, x3 is replaced with the token ˆx, and x4 is deleted. Middle: Conditional
masked language model [30] masks several consecutive tokens in a sentence before feeding it to the
encoder, and the input sentence to the decoder is constructed with the unmasked tokens in the encoder
side being masked. Right: Seq2Seq language model [3] is composed of a single Transformer model,
which takes the concatenation of a source sentence and a target sentence as input. The special tokens
inserted between sentences are omitted for conciseness. The tokens in the source sentence can attend
to each other, while each token in the target sentence can only attend to the source tokens and the
target tokens on its left. The MLM-like training objective is used.

expected to provide better sentence representations, as we discussed in Section 2. For the decoder,
the intuition is to endow the model with some rudimentary ability for text generation.

[18] employed BERT as the encoder for abstractive text summarization, with some additional
techniques to help integrate the BERT-initialized encoder with the randomly initialized decoder,
which we will explicate in Section 5.1. GPT-2 [26] inherited the left-to-right LM pre-training
objective from GPT and extended the application to NLG, where the pre-trained LM directly serves
as the language generator, with some special symbols to identify task-speciﬁc contexts. In the case
of zero-shot task transfer, preliminary experiments showed that straightforward adaption of GPT-2
compares unfavorably with other unsupervised baselines.

[27] is among the ﬁrst attempts to investigate unsupervised pre-training for sequence to sequence
(Seq2Seq) learning. They used pre-trained LSTM-based LMs to initialize the ﬁrst layer of the encoder
and the decoder, which act as representation extractors. An additional LSTM layer, which is randomly
initialized, is then added on top of the pre-trained LMs to build the Seq2Seq framework. To make use
of the text generation ability of LMs, the output softmax layer of the decoder LM is also retained.
Some recent endeavours [14, 28] explored multiple combinations of GPT- and BERT-based models
to initialize the encoder and the decoder, respectively. Although remarkable results are observed, the
separately pre-trained LMs are still inconsistent with the Seq2Seq framework.

4 Architecture-based Methods

4.1

Inducing Task-Speciﬁc Architecture in Pre-training

Separately initializing the encoder and the decoder with LMs neglects the interaction between the
two modules at the pre-training stage, which is sub-optimal. For NLG tasks that can be modeled as
Seq2Seq learning, it is feasible to jointly pre-train the encoder and the decoder. Existing approaches
for this sake can be categorized into three variants: Denoising autoencoders (DAEs), conditional
masked language models (CMLMs) and sequence to sequence language models (Seq2Seq LMs).

4.1.1 Denoising Autoencoder

An intuitive way to conduct unsupervised Seq2Seq learning is to train an autoencoder (AE) based
on encoder-decoder framework. Different from AEs, DAEs take a corrupted sentence as input and
reconstruct the original sentence. The advantage is that the corrupted input will force the decoder
to extract relevant information from the source side for text generation. To obtain the corrupted

3

sentence, [34] designed three noising functions: shufﬂe, delete and replace (the left plot of Figure 1
gives an illustration), each of which is controlled by a pre-deﬁned probability distribution. To be more
speciﬁc, each token in the raw sequence is assigned with a new index based on a gaussion distribution
N (0, σ); the delete and replace operations of a token are determined by a Bernoulli distribution B(p)
with Beta distribution as prior. The three functions are applied to the raw sequences in random order.

4.1.2 Conditional Masked Language Model

CMLM [30] extends the single model MLM proposed by [2] to the encoder-decoder setting, where
the masked text sequence is read by the encoder, and the decoder only reconstructs the masked tokens,
in construct to the entire sequence in DAEs. As the middle plot of Figure 1 shows, CMLM masks
consecutive tokens 2, and the unmasked tokens in the encoder side are masked when being feed
to the decoder. Following the notations in [30], let us assume that the tokens with index from u
to v are masked from the raw sentence X, which results in X \u:v, and X u:v denotes the decoder
<t and X \u:v.
input. Then, when predicting each masked token xt (u ≤ t ≤ v), the context is X u:v
The underlying motivation, as [30] argued, is to force the encoder to understand the meaning of the
unmasked tokens, which is achieved by encoder side masks, and encourage the decoder to refer to the
source information rather than the leftward target tokens, which is achieved by decoder side masks.

4.1.3 Sequence to Sequence Language Model

Seq2Seq LM [3] performs Seq2Seq modeling using a single Transformer model, with the con-
catenation of source sentence and target sentence as input. To simulate Seq2Seq learning with
encoder-decoder frameworks, the attention span of each target token is constrained to the source
tokens and the leftward target tokens, which is achieved by self-attention masks (see the right plot
of Figure 1). In this way, the ability to extract language representation and generate texts are in-
tegrated into a single model. It is worth mentioning that Seq2Seq LM does not auto-regressively
generate the target sentence, but instead predicting masked tokens based on the contexts controlled
by self-attention masks. In other words, Seq2Seq LM still belongs into the family of MLMs. Apart
from Seq2Seq LM, [3] also explored uni-directional LM and bi-directional LM structures to perform
the MLM-based cloze task, and incorporated the three kinds of LMs to build the ﬁnal pre-training
objective.

4.2 Encoder-Agnostic Architectures for Adaptation

Although the Seq2Seq-based pre-training methods exhibit strong performance, they are conﬁned
to text-to-text generation. In order to encompass more diverse contexts, some researches began
to investigate encoder-agnostic pre-training architectures [7, 37]. Context Attention and Pseudo
Self-Attention are two typical variants presented by [37], which differ in the way that the task-speciﬁc
context is injected (see Figure 2). Context Attention takes the form of a standard Transformer decoder,
with the layer that attends to the encoder outputs being randomly initialized. Pseudo Self-Attention
considers the context vectors and the previous layer decoder outputs as an integral input, and the
attended results are computed as follows:

PSA(C, Y ) = softmax

(Y Wq)

(cid:32)

(cid:20) CW c
k
Y W y
k

(cid:21)(cid:62)(cid:33) (cid:20) CW c
v
Y W y
v

(cid:21)

(2)

where C ∈ R|C|×dc and Y ∈ R|Y |×dy are the context vectors and representations of the target textual
v ∈ R|C|×dmodel with respect to C
sequence, respectively. The linear transformation matrices W c
are added to project the context to the self-attention space, and Wq, W y
v ∈ R|Y |×dmodel are part
of the pre-trained model.

k , W y

k , W c

Except for the performance on target tasks, an alternative metric to gauge the quality of encoder-
agnostic architectures is the degree to which the pre-trained parameters have to change, in order
to inject the task-speciﬁc context. [37] compared the parameter changes of Context Attention and
Pseudo Self-Attention in the feed forward layer, and discovered that Pseudo Self-Attention is more
robust under this evaluation.

2CMLM can also be implemented in other manners [31, 6], where discrete tokens in the textual sequence are

masked.

4

Figure 2: Overview of two encoder-agnostic architecture variants. The solid blocks with white
backgrounds are randomly initialized. Residual connection and layer normalization are omitted
for simplicity. Left: Context Attention follows the Transformer decoder side attention over the
encoder outputs. Right: The encoder outputs are incorporated as part of the decoder side Pseudo
Self-Attention.

5 Strategy-based Methods

5.1 Fine-tuning Schedules for Adaption

When the pre-trained model is only a part of the target task system, ﬁne-tuning requires joint learning
of the components initialized in different fashion, which can make the training process unstable.
The pre-trained model may also suffer from aggravated catastrophic forgetting problem as it has to
coordinate with other components during ﬁne-tuning [4, 35]. From the perspective of optimization, it
is unreasonable to schedule the pre-trained components and the newly-introduced components with
the same learning rate, considering that the former have already possessed some unique knowledge. A
common assumption is that the pre-trained parameters should be updated at a slower learning rate and
with smoother decay [18, 35]. The rationale behind such setting is that ﬁne-tuning with more accurate
gradient can prevent the pre-trained parameters from deviating too faraway from the original point,
and the newly-introduced components need to quickly converge to the target parameter space. To this
end, [18] adopted two Adam optimizers with different learning rates for the pre-trained encoder and
the randomly initialized decoder. The learning rates are scheduled as in [33] with different warming
up steps:

lrEnc = ˜lrEnc · min (cid:0)step−0.5, step · warmup−1.5
lrDec = ˜lrDec · min (cid:0)step−0.5, step · warmup−1.5
where warmupEnc/Dec and ˜lrEnc/Dec determine the speed of learning rate changes and the max
learning rates, respectively.

(3)

(cid:1)
(cid:1)

Enc

Dec

5.2 Proxy Tasks for Adaption

Large-scale unlabelled data provides generic linguistic knowledge, but the target tasks have unique
data distribution and objectives. An effective way to bridge this gap is to introduce proxy tasks
with moderate changes to the pre-training objectives, but at the same time take the labeled data
into account [14, 31]. Translation Language Modeling (TLM) [14] is a special generalization of
MLM in the cross-lingual situation. It leverages the paralleled machine translation corpus for further
training of the LMs that are pre-trained on monolingual corpora. Speciﬁcally, the source language
sentence and the corresponding target language sentence are fed to the model in parallel, with random
tokens from each language being masked to perform the cloze-style prediction as in MLM. Different
from monolingual MLM, TLM encourages word predictions to rely on the interdependence from
two languages, therefore the sentence representations learned from separate languages can be well
aligned.

5

For some particular NLG tasks, existing proxy tasks designed under the supervised setup can also work
with unsupervised pre-training models. For instance, in neural text summarization, the combination
of extractive and abstractive3 objectives can generate better summaries [16, 5]. Inspired by this,
[18] introduced extractive summarization as a proxy task to ﬁne-tune the pre-trained BERT, before
adopting it as the abstractive summarization encoder. Compared with the original BERT features,
the representations learned from extractive summarization contain more task-speciﬁc information,
therefore conveying the meaning of source texts better.

5.3 Knowledge Distillation for Adaption

The aforementioned methods are diverse in implementation, but share the common idea of employing
the pre-trained models through parameter initialization. An alternative way to exploit the pre-trained
models is using the knowledge distillation technique [9]. Knowledge distillation is a special form of
training, where a student network learns from the supervision signals produced by a teacher network.

Taking BERT as an example, the pre-trained MLM contains global information, which can teach the
autoregressive Seq2Seq models to “see from the future” [31]. In practice, the probability distribution
predicted by BERT is regarded as a soft label to compute the cross-entropy loss function :

Lcross
kd

(θ) = −

(cid:2)P (yt = w|Y masked, X; φ) · log P (yt = w|Y1:t−1, X; θ)(cid:3)

(4)

|Y |
(cid:88)

(cid:88)

t=1

w∈V

where X, Y and Y masked are the source sequence, the raw target sequence and the masked target
sequence, respectively. V denotes the output vocabulary. θ indicates the parameters of the student
network (Seq2Seq), which are learnable, and φ indicates the BERT parameters, which are ﬁxed. In
this way, the knowledge from unsupervised pre-training can be ﬂexibly transferred to the target tasks,
dispensing with the size and architecture limitations.

The supervision can also be derived from the hidden representations [35], with a mean-squared-error
(MSE) distillation loss:

(cid:13)hbert
(5)
where m and n are hyper-parameters denoting the layer subscripts. Compared with the probability
soft labels, the representation distillation method requires the Seq2Seq model to have the same hidden
size with BERT, which is a more strict constrain.

m − hseq2seq
n

kd = − (cid:13)
Lmse

(cid:13)
2
(cid:13)
2

Combining the knowledge distillation loss and the standard generative loss for Seq2Seq learning
gives rise to the ﬁnal objective to optimize:

where α is the weighting term that balances the contribution of the two kinds of loss functions.

L(θ) = αLkd(θ) + (1 − α)Lseq2seq(θ)

(6)

6 Discussions

6.1 The Relationship between Architecture- and Strategy-based Methods

We have analysed two major challenges faced by the application of unsupervised pre-training to
NLG (see Section 1). On this basis, we introduced existing methodologies from the architecture and
strategy considerations. The architecture-based methods are mainly proposed in response to the ﬁrst
challenge. Since the architecture of pre-trained model has a signiﬁcant effect on the downstream task
(when the pre-trained parameters are used for initialization), architecture designings have to plan in
advance to narrow the discrepancy between pre-training and training on target tasks. This motivation
has shown great effectiveness on the Seq2Seq framework [34, 30, 3]. The strategy-based methods
focus on the second challenge. They take a postprocessing point of view, with the aim to make the
best of the pre-trained model at the target task training stage. It is noteworthy that the challenges
are not independent inherently, and the two types of methods can actually work as complement to
each other. For example, the ﬁne-tuning schedules can alleviate the negative effects caused by the
modiﬁcation of pre-trained structures, and the catastrophic forgetting problem can also seek solution
by devising a general task-agnostic architecture.

3Extractive text summarization selects sub-sequences from the source texts, while abstractive text summa-

rization treats the task as a Seq2Seq learning problem.

6

6.2 Experimental Phenomenons

Existing researches on unsupervised pre-training for NLG are conducted on various tasks for dif-
ferent purposes. Probing into the assorted empirical results may help us discover some interesting
phenomenons:

• The advantage of pre-training gradually diminishes with the increase of labeled data [27, 34,

• Fixed representations yield better results than ﬁne-tuning in some cases [4].
• Overall, pre-training the Seq2Seq encoder outperforms pre-training the decoder [4, 34, 14,

30].

28].

The ﬁrst two phenomenons attest to the catastrophic forgetting theory. Thanks to the access to
large-scale unlabeled corpora, unsupervised pre-training is able to excel at zero/low-shot settings,
while the pre-trained models can only achieve few gains when abundant labeled data is available.
This can be explained by the high quality of the dataset and the capacity of the task-speciﬁc models,
which leave little space for improvement. Nonetheless, the increased supervision from labeled data
can also inﬂuence the performance on pre-training tasks. By ﬁxing the pre-trained parameters, the
learned representations will not be affected by the numerous iterations of training on the target task,
which makes them work better without ﬁne-tuning.

The third phenomenon is kind of counter-intuitive, as the generative pre-training objectives are more
similar to the decoder’s function. There is no unanimous theory to explain why the encoder is a more
important element to pre-train. But this discovery suggests that the pre-trained LMs are more robust
when acting as representation extractors, while they are more sensitive the the change of context
when acting as conditional language generators.

6.3 Future Directions

The diversity of NLG applications poses challenges on the employment of unsupervised pre-training,
yet it also raises more scientiﬁc questions for us to explore. In terms of the future development of
this technology, we emphasize the importance of answering four questions: 1) How to introduce
unsupervised pre-training into NLG tasks with cross-modal context? 2) How to design a generic
pre-training algorithm to ﬁt a wide range of NLG tasks? 3) How to reduce the computing resources
required for large-scale pre-training? 4) What aspect of knowledge do the pre-trained models provide
for better language generation?

NLG tasks can be deﬁned by the context features and mapping functions. The introduction of cross-
lingual textual features [14] and task-speciﬁc Seq2Seq architectures [30, 34, 3] in the pre-training
stage has successfully boosted the performance on text-to-text generation. For NLG tasks concerning
multiple modalities, it is conceivable that pre-training methods could also beneﬁt from the joint
consideration of cross-modal features. For example, in the vision-and-language ﬁeld, the learning of
cross-modal representations has proven to be highly effective [17, 20], but such representations can
not yet be extracted from unpaired images and texts for image-grounded text generation, to the best
of our knowledge.

In NLU, it is possible to pre-train one model to obtain language representations once and for all.
As for NLG, a task-agnostic pre-training algorithm should transcend the purpose of representation
learning, and consider the general ability for language generation. The notion of “encoder-agnostic
adaption” [37] makes a preliminary step towards this direction, but still remains far from approaching
the equivalent performance as its NLU counterparts [23, 2, 25, 36].

Due to the colossal scale of the pre-training corpora, including a large number of parameters is
essential to achieve favorable performance. As a result, the model size usually costs at least 8 GPU
cards [3, 30, 14] in the pre-training for NLG systems, and it also hinders real-world applications.
To reduce the memory consumption problem, existing work resorted to knowledge distillation to
transfer the knowledge from a large teacher network to a small student network [32, 12], or parameter
reduction techniques to prune the model size in a more direct way [15]. However, the research context
is limited to the NLU scenarios, and same endeavours are necessary to NLG applications.

Another important branch of researches on unsupervised pre-training in NLP try to explain what
kind of knowledge can be learned from pre-training. Related work has been done on the basis of

7

both language understanding [11, 24] and generation [29]. Specially, [29] analysed the characters of
texts generated from a pre-trained GPT-2 by evaluating them over a wide spectrum of metrics. We
argue that deeper understanding the way in which unsupervised pre-training contributes to better text
generation, and the intrinsic mechanisms of the pre-trained models are also crucial to future work.

7 Conclusion

Unsupervised pre-training has deﬁned the state-of-the-arts on a variety NLP tasks. However, in the
ﬁeld of NLG, the diversity of context information is still impeding the the application of unsupervised
pre-training. The major challenges exist in designing model architectures to cater for the assorted
context, and retaining the general knowledge learned from pre-training. In this review, we survey the
recent unsupervised methods to utilize large-scale corpora for NLG purposes, with a highlight on
those aiming at facilitating the integration of pre-trained models with downstream tasks. We propose
to classify them into architecture- and strategy-based methods, followed with detailed introductions
and discussions of their pros and cons. Based on the comparison of these methods and analyses of
some informative experimental results from previous publications, we summarize some scientiﬁc
questions that has not yet been well understood, and suggest attention being paid to these questions
by future work.

References

[1] A. M. Dai and Q. V. Le. Semi-supervised sequence learning. In NIPS, pages 3079–3087, 2015.

[2] J. Devlin, M. Chang, K. Lee, and K. Toutanova. BERT: pre-training of deep bidirectional
transformers for language understanding. In NAACL-HLT (1), pages 4171–4186. Association
for Computational Linguistics, 2019.

[3] L. Dong, N. Yang, W. Wang, F. Wei, X. Liu, Y. Wang, J. Gao, M. Zhou, and H. Hon. Uniﬁed
language model pre-training for natural language understanding and generation. In Advances in
Neural Information Processing Systems, 2019.

[4] S. Edunov, A. Baevski, and M. Auli. Pre-trained language model representations for language
generation. In NAACL-HLT (1), pages 4052–4059. Association for Computational Linguistics,
2019.

[5] S. Gehrmann, Y. Deng, and A. M. Rush. Bottom-up abstractive summarization. In EMNLP,

pages 4098–4109. Association for Computational Linguistics, 2018.

[6] M. Ghazvininejad, O. Levy, Y. Liu, and L. Zettlemoyer. Mask-predict: Parallel decoding of

conditional masked language models. In EMNLP, 2019.

[7] S. Golovanov, R. Kurbanov, S. I. Nikolenko, K. Truskovskyi, A. Tselousov, and T. Wolf.
Large-scale transfer learning for natural language generation. In ACL (1), pages 6053–6058.
Association for Computational Linguistics, 2019.

[8] I. J. Goodfellow, M. Mirza, D. Xiao, A. Courville, and Y. Bengio. An empirical investigation of
catastrophic forgetting in gradient-based neural networks. CoRR, abs/1312.6211, 2013.

[9] G. E. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge in a neural network, 2015.

[10] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, 9(8):

1735–1780, 1997.

[11] G. Jawahar, B. Sagot, and D. Seddah. What does BERT learn about the structure of language?

In ACL (1), pages 3651–3657. Association for Computational Linguistics, 2019.

[12] X. Jiao, Y. Yin, L. Shang, X. Jiang, X. Chen, L. Li, F. Wang, and Q. Liu. Tinybert: Distilling

BERT for natural language understanding. CoRR, abs/1909.10351, 2019.

[13] R. Kiros, Y. Zhu, R. Salakhutdinov, R. S. Zemel, R. Urtasun, A. Torralba, and S. Fidler.

Skip-thought vectors. In NIPS, pages 3294–3302, 2015.

8

[14] G. Lample and A. Conneau. Cross-lingual language model pretraining. CoRR, abs/1901.07291,

[15] Z. Lan, M. Chen, S. Goodman, K. Gimpel, P. Sharma, and R. Soricut. ALBERT: A lite BERT
for self-supervised learning of language representations. CoRR, abs/1909.11942, 2019.

[16] W. Li, X. Xiao, Y. Lyu, and Y. Wang. Improving neural abstractive document summarization
with explicit information selection modeling. In EMNLP, pages 1787–1796. Association for
Computational Linguistics, 2018.

[17] F. Liu, Y. Liu, X. Ren, X. He, K. Lei, and X. Sun. Aligning visual regions and textual concepts:

Learning ﬁne-grained image representations for image captioning. In NIPS, 2019.

[18] Y. Liu and M. Lapata. Text summarization with pretrained encoders. CoRR, abs/1908.08345,

2019.

2019.

[19] L. Logeswaran and H. Lee. An efﬁcient framework for learning sentence representations. In

ICLR (Poster). OpenReview.net, 2018.

[20] J. Lu, D. Batra, D. Parikh, and S. Lee. Vilbert: Pretraining task-agnostic visiolinguistic

representations for vision-and-language tasks. In NIPS, 2019.

[21] T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and J. Dean. Distributed representations of

words and phrases and their compositionality. In NIPS, pages 3111–3119, 2013.

[22] J. Pennington, R. Socher, and C. D. Manning. Glove: Global vectors for word representation.

In EMNLP, pages 1532–1543. ACL, 2014.

[23] M. E. Peters, M. Neumann, M. Iyyer, M. Gardner, C. Clark, K. Lee, and L. Zettlemoyer.
Deep contextualized word representations. In NAACL-HLT, pages 2227–2237. Association for
Computational Linguistics, 2018.

[24] F. Petroni, T. Rocktäschel, P. Lewis, A. Bakhtin, Y. Wu, A. H. Miller, and S. Riedel. Language

models as knowledge bases? CoRR, abs/1909.01066, 2019.

[25] A. Radford, K. Narasimhan, T. Salimans, and I. Sutskever. Improving language understanding

with unsupervised learning. In Technical report, OpenAI, 2018.

[26] A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever. Language models are

unsupervised multitask learners. 2019.

[27] P. Ramachandran, P. J. Liu, and Q. V. Le. Unsupervised pretraining for sequence to sequence
learning. In EMNLP, pages 383–391. Association for Computational Linguistics, 2017.

[28] S. Rothe, S. Narayan, and A. Severyn. Leveraging pre-trained checkpoints for sequence

generation tasks. CoRR, abs/1907.12461, 2019.

[29] A. See, A. Pappu, R. Saxena, A. Yerukola, and C. D. Manning. Do massively pretrained

language models make better storytellers? CoRR, abs/1909.10705, 2019.

[30] K. Song, X. Tan, T. Qin, J. Lu, and T. Liu. MASS: masked sequence to sequence pre-training
for language generation. In ICML, volume 97 of Proceedings of Machine Learning Research,
pages 5926–5936. PMLR, 2019.

[31] A. Submission. Distilling the knowledge of bert for text generation. In ICLR, 2020.

[32] S. Sun, Y. Cheng, Z. Gan, and J. Liu. Patient knowledge distillation for BERT model compres-

sion. CoRR, abs/1908.09355, 2019.

[33] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and

I. Polosukhin. Attention is all you need. In NIPS, pages 5998–6008, 2017.

[34] L. Wang, W. Zhao, R. Jia, S. Li, and J. Liu. Denoising based sequence-to-sequence pre-training

for text generation. In EMNLP, 2019.

9

[35] J. Yang, M. Wang, H. Zhou, C. Zhao, Y. Yu, W. Zhang, and L. Li. Towards making the most of

BERT in neural machine translation. CoRR, abs/1908.05672, 2019.

[36] Z. Yang, Z. Dai, Y. Yang, J. G. Carbonell, R. Salakhutdinov, and Q. V. Le. Xlnet: Generalized

autoregressive pretraining for language understanding. CoRR, abs/1906.08237, 2019.

[37] Z. M. Ziegler, L. Melas-Kyriazi, S. Gehrmann, and A. M. Rush. Encoder-agnostic adaptation

for conditional language generation. CoRR, abs/1908.06938, 2019.

10

