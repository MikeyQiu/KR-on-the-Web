(q,p)-Wasserstein GANs: Comparing Ground Metrics for Wasserstein GANs

9
1
0
2
 
b
e
F
 
0
1
 
 
]

G
L
.
s
c
[
 
 
1
v
2
4
6
3
0
.
2
0
9
1
:
v
i
X
r
a

Anton Mallasto 1 Jes Frellsen 2 Wouter Boomsma 1 Aasa Feragen 1

Abstract

Generative Adversial Networks (GANs) have
made a major impact in computer vision and
machine learning as generative models. Wasser-
stein GANs (WGANs) brought Optimal Trans-
port (OT) theory into GANs, by minimizing the 1-
Wasserstein distance between model and data dis-
tributions as their objective function. Since then,
WGANs have gained considerable interest due to
their stability and theoretical framework. We con-
tribute to the WGAN literature by introducing the
family of (q, p)-Wasserstein GANs, which allow
the use of more general p-Wasserstein metrics for
p ≥ 1 in the GAN learning procedure. While the
method is able to incorporate any cost function
as the ground metric, we focus on studying the lq
metrics for q ≥ 1. This is a notable generalization
as in the WGAN literature the OT distances are
commonly based on the l2 ground metric. We
demonstrate the effect of different p-Wasserstein
distances in two toy examples. Furthermore, we
show that the ground metric does make a dif-
ference, by comparing different (q, p) pairs on
the MNIST and CIFAR-10 datasets. Our experi-
ments demonstrate that changing the ground met-
ric and p can notably improve on the common
(q, p) = (2, 1) case.

1. Introduction

Generative modelling considers learning models to gener-
ate data, such as images, text or audio. Prominent genera-
tive models include the Variational Auto-Encoders (VAEs)
(Kingma & Welling, 2013) and Generative Adversial Net-
works (GANs) (Goodfellow et al., 2014), the latter of which
will be studied in this work. The generative models can
be trained on unlabelled data, which is a considerable ad-
vantage over supervised models, as data labelling is expen-

1Department of Computer Science, University of Copenhagen,
Copenhagen, Denmark 2Department of Computer Science, IT Uni-
versity of Copenhagen, Copenhagen, Denmark. Correspondence
to: Anton Mallasto <mallasto@di.ku.dk>.

Preprint. Work in progress.

sive. The usual approach employs the manifold assumption,
stating that all meaningful data lies on a low-dimensional
manifold of the sample space. Based on this assumption,
one is then able to learn a map from a low dimensional
distribution to the true data distribution. In this step, it is
essential to quantitatively measure the discrepancy between
the two distributions. To this end, one chooses a metric or
a divergence between probability distributions. The metric
should reﬂect modelling choices with respect to which prop-
erties of the distributions are deemed similar, or what kind
of invariances one wants the metric to respect.

Traditionally, probability measures have been compared us-
ing non-metric divergence measures from information geom-
etry, e.g. the Kullback-Leibler (KL) divergence and Bregman
divergences. The KL-divergence has deep connections with
Bayesian statistics, where likelihood maximization in model
selection can be cast as minimizing the KL-divergence.

Recently, a popular family of metrics has been provided by
the theory of Optimal Transport (OT), which studies proba-
bility distributions through a geometric framework. At its
heart lie the Wasserstein metrics, which extend the under-
lying metric between sample points to entire distributions.
Consequently, the metrics can be used to e.g. derive statistics
between populations of probability distributions, allowing
the inclusion of stochastic data objects in statistical pipelines
(Mallasto & Feragen, 2017). Recent algorithmic advances
(Peyr´e & Cuturi, 2017) have made OT widespread in the
ﬁelds of machine learning and computer vision, where it
has been used for e.g. domain adaption (Courty et al., 2017),
point embeddings (Muzellec & Cuturi, 2018) and VAEs
(Tolstikhin et al., 2017).

Quite notably, OT has impacted GANs. The original formu-
lation of Goodfellow et al. (2014) deﬁnes GANs through a
minimax game of two neural networks. One of the networks
acts as a generator, whereas the other network discriminates
samples based on whether they originate from the data popu-
lation or not. The minimax game results in the minimization
of the Jensen-Shannon divergence between the generated
distribution and the data distribution. Arjovsky et al. (2017)
then propose to minimize the 1-Wasserstein distance, in-
stead, demonstrating that the new loss function provides
stability to the training. This stability was mainly attributed
to the Wasserstein metric being well deﬁned even when

(q,p)-Wasserstein GANs

the two distributions do not share the same support. This
results in the Wasserstein GAN (WGAN). Other notable OT
inspired variations of the original GAN are discussed below.

norm penalty is included, that is considered over the support
of a ﬁxed test distribution.

1.1. Related Literature

The original WGAN architecture (Arjovsky et al., 2017)
enforces k-Lipschitz constraints through weight clipping.
An alternative to clipping the weights is provided in Spec-
tral Normalization GANs (SNGANS) (Miyato et al., 2018),
which impose Lipschitzness through l2-normalization of the
network weights. A body of work includes the constraints
through gradient penalties, ﬁrst introduced in (Gulrajani
et al., 2017), where a penalty term for non-unit-norm gradi-
ents of the discriminator is added, resulting in the WGAN-
GP. Consistency Term GANs (CTGANs), on the other hand,
penalize exceeding the Lipschitz constraint directly.

The aforementioned work focuses on training the GAN
when the 1-Wasserstein metric with the l2 ground metric
forms the objective function. On top of this, a body of work
exists exploring the use of other OT inspired metrics and
divergences. Below, we discuss some notable examples.

Deshpande et al. (2018) propose using the sliced Wasser-
stein distance (Bonneel et al., 2015), which computes the
expectation of the Wasserstein distance between one dimen-
sional projections of the measures. This approach allows
omitting learning a discriminator, but in practice a discrimi-
nator is trained for choosing meaningful projections, essen-
tial when working with high-dimensional data. The authors
report increased stability in training and show that the train-
ing objective is an upper bound for the true distance between
the generator and target distribution.

Genevay et al. (2017), on the other hand, rely on the fa-
vorable computational properties of relaxing the original
OT problem with entropic penalization. Instead of rely-
ing on the dual Rubinstein-Kantorovich formulation, they
compute the Sinkhorn divergence (Cuturi, 2013) between
minibatches in the primal formulation. This also allows
omitting learning a discriminator, however, the authors do
propose learning a cost function, as they argue the l2 ground
metric is not suitable in every application. The hyperpa-
rameters of the Sinkhorn divergence allows interpolating
between the 2-Wasserstein distance and Maximum Mean
Discrepancy (MMD), providing more freedom the in the
metric model choice. This method also allows for a general
cost function to be used, like our (q, p) − W GAN method,
but the experiments are limited to the p = 2 and learned
distance function cases without comparison.

Wu et al. (2018) introduce the Wasserstein divergence, moti-
vated by the gradient penalty approach on the 1-Wasserstein
metric. The divergence builds on the dual formulation, by
relaxing the Lipschitz constraint. Additionally, a gradient

1.2. Our Contribution

We wish to add more ﬂexibility to WGANs by using the
p-Wasserstein distance on top of more general lq ground
metrics for p, q ≥ 1. This is achieved through the
(q, p)-Wasserstein GAN ((q, p)-WGAN), which generalizes
Wasserstein GANs to allow arbitrary cost functions for the
OT problem, however, we limit the scope of this paper to
the lq metric case. This generalization broadens the existing
WGAN literature, as mostly the 1-Wasserstein distance with
l2 metric is considered. We demonstrate the importance
of the resulting ﬂexibility in our experiements. Moreover,
(2, 1)-WGAN provides a novel way of taking into account
the 1-Lipschitz constraints required in the original WGAN
minimizing the 1-Wasserstein distance.

Given our (q, p)-WGAN implementation, we study the ef-
fect of p when we ﬁx q = 2 in two toy examples. Addi-
tionally, we compare p-Wasserstein metrics based on the lq
ground metric between samples for p = 1, 2 and q = 1, 2
on the MNIST and CIFAR-10 datasets. The (q, p)-WGANs
are compared to WGAN and WGAN-GP on the CIFAR-10
dataset to assess the performance of our implementation.
The experiments show, that choosing q = 1 outperforms
q = 2 on colored image data, where as p = 2 slightly out-
performs p = 1. Based on the results, it is clear that the
metric used for GANs should be tailored to ﬁt the needs of
the application.

Finally, the OT theory suggests that the Kantorovich po-
tentials (or discriminators) can also function as generators
through their gradients. We try this on the MNIST dataset,
and conclude that the generator clearly improves the results.

2. Background

We brieﬂy summarize the prequisites for this work. The
methodology is founded on optimal transport, which we
will revise ﬁrst. We ﬁnish the section by reviewing the
mathematical details of GANs with a focus on WGANs.

2.1. Optimal Transport

The aim in Optimal Transport (OT) is to deﬁne a geometric
framework for the study of probability measures. This is
carried out by deﬁning a cost function between samples (e.g.
the l2 metric), and then studying transport plans that relate
two compared probability measures to each other while
minimizing the total cost. A common example states the
problem as moving a pile of dirt into another with minimal
effort, by ﬁnding an optimal allocation for each grain of dirt
so that the cumulative distance of dirt moved is minimized.

(q,p)-Wasserstein GANs

We start with basic deﬁnitions, and conclude by discussing
the Wasserstein metric. The interested reader may refer to
Villani (2008) for theoretical and Peyr´e & Cuturi (2017) for
computational aspects of OT.

Optimal Transport Problem. Let µ be a probability mea-
sure on a metric space X, denoted by µ ∈ M(X). Let
f : X → Y be a measurable map. Then f#µ(A) :=
µ(f −1(A)) denotes the push-forward of µ with respect to
f . Here A is any measurable set in another metric space
Y . The push-forwad can be also explained from a sampling
perspective; assume ξ is a random variable with distribution
µ. Then f (ξ) has distribution f#µ.

Given two probability measures µ ∈ M(X), and ν ∈
M (Y ), we deﬁne the set of admissable plans by

ADM(µ, ν)

={γ ∈ M(X × Y )| (π1)#γ = µ, (π2)#γ = ν},

where πi denotes the projection onto the ith coordinate. In
layman’s terms, a joint measure on X × Y is admissable, if
its marginals are µ and ν.

Now, given a lower semi-continuous cost function c : X ×
Y → R (such as the lq metric dq), the task in optimal
transport is to compute

OTc(µ, ν) :=

min
γ∈ADM(µ,ν)

Eγ[c],

where we use Eµ[f ] to denote the expectation of a function
f under the measure µ, that is,

(1)

(2)

(3)

Eµ[f ] =

f (x)dµ(x).

(cid:90)

X

Next, denote by L1(µ) = {f | Eµ[f ] < ∞} the set of
functions that have ﬁnite expectations with respect to µ. Let
ϕ ∈ L1(µ), ψ ∈ L1(ν). Then, assume ϕ, ψ satisfy

ϕ(x) + ψ(y) ≤ c(x, y), ∀(x, y) ∈ X × Y.

(4)

We denote the set of all such pairs by ADM(c). Then,
OTc(µ, ν) can be expressed in the dual formulation

OTc(µ, ν) =

max
(ϕ,ψ)∈ADM(c)

{Eµ[ϕ] + Eν[ψ]} .

(5)

The optimal functions ϕ, ψ are called Kantorovich poten-
tials, and they satisfy

ϕ(x) + ψ(y) = c(x, y), ∀(x, y) ∈ Supp(γ).

(6)

The Kantorovich potentials ϕ and ψ are intimately related.
Deﬁne the c-transform of ϕ as

then according to the fundamental theorem of optimal trans-
port, the Kantorovich potentials satisfy ψ = ϕc, and thus
(5) can be written as

OTc(µ, ν) =

max
(ϕ,ϕc)∈ADM(c)

{Eµ[ϕ] + Eν[ϕc]} ,

(8)

reducing the optimization to be carried out over a single
function.

Wasserstein Metric. It turns out that the OT framework
can be used to deﬁne a distance between probability distri-
butions. Deﬁne the set

P p

d (X) =

µ ∈ M(X)

dp(x0, x)dµ(x) < ∞

(9)

(cid:26)

(cid:90)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:27)

for any x0 ∈ X. Then, OTc(µ, ν) deﬁnes a metric between
µ, ν ∈ P p
d (X), if we choose the cost c to be related to a
metric d on X, called the ground metric, in the following
way.
The p-Wasserstein metric Wp between µ, ν ∈ P p
where (X, d) is a metric space, is given by

d (X),

Wp(µ, ν) := (cid:0)OTdp/p(µ, ν)(cid:1) 1
p .

(10)

When µ, ν are absolutely continuous measures on X =
Y = Rn with the Euclidean l2 metric and p > 1, the
optimal transport plan is induced by a unique transport map
T : X (cid:55)→ X, for which T#µ = ν, given by

T = (I − (cid:107)∇ϕ(cid:107)p(cid:48)−2∇ϕ),

(11)

where ϕ stands for the optimal Kantorovich potential in the
dual formulation (5), and p−1 + (p(cid:48))−1 = 1. Therefore,
computing the p-Wasserstein distance by the dual formula-
tion yields us a map between the distributions, which we
will later employ in the experimental section.
The Ground Metric. When X = Y = Rd, commonly
the l2 metric is chosen as the ground metric for the p-
Wasserstein distance. However, depending on the applica-
tion, any other distance can be also considered, for example
any lq distance dq for q ≥ 1, given by

dq(x, y) =

|xi − yi|q

.

(12)

(cid:33) 1

q

(cid:32) n
(cid:88)

i=1

In the experimental section, we study the effect of the
ground metric, when minimizing the p-Wasserstein distance
in the context of GANs. To emphasize the ground metric,
we introduce the (q, p)-Wasserstein distance notation

Wq,p(µ, ν) =

OTdp

q /p(µ, ν)

(13)

(cid:16)

(cid:17) 1

p

.

ϕc : Y → R, y (cid:55)→ inf
x∈X

{c(x, y) − ϕ(x)} ,

(7)

To not diverge too far from the standard notation, we assume
that q = 2 for the p-Wasserstein distance denoted by Wp.

(q,p)-Wasserstein GANs

2.2. Generative Adversial Networks

Generative Adversial Networks (GANs) are a popular tool
for learning data distributions (Goodfellow et al., 2014).
The GAN approach consists of a competitive game between
two networks, the generator gω and the discriminator ϕω(cid:48),
with parameters ω and ω(cid:48), respectively. Given the target
distribution µt of the data, and a low-dimensional source
distribution µs, the GAN minimax objective is given by

min
ω

max
ω(cid:48)

{Ex∼µt [log(ϕω(cid:48)(x))]
+ Ez∼µs [log(1 − ϕω(cid:48)(gω(z)))]} .

(14)

At optimality, this corresponds to minimizing the Jensen-
Shannon divergence between µt and (gω)#µs, the push-
forward of the source with respect to the generator. The
discriminator has range [0, 1], expressing the probability of
a sample being from the original data distribution.

The Wasserstein GAN introduced by Arjovsky et al. (2017)
minimizes the 1-Wasserstein metric instead. The authors
argue that divergences such as Jensen-Shannon, or Kullback-
Leibler do not behave well with respect to the generator’s
parameters. This is due to these divergences being singular
when the two distributions do not share the same support.
They then demonstrate, that the 1-Wasserstein distance be-
haves in a more continuous way, and provides a meaningful
loss, whose decrease corresponds to increased image quality
when generating images.

Writing the 1-Wasserstein metric in the dual form, and us-
ing that for the (q, p) = (2, 1) case ϕc
ω(cid:48) = −ϕω(cid:48), and
(ϕω(cid:48), ϕc
ω(cid:48)) ∈ ADM(c) implies that ϕω(cid:48) is 1-Lipschitz, the
minimax objective for WGANs is written as

min
ω

max
ω(cid:48)

{Ex∼µt [ϕω(cid:48)(x)] − Ez∼µs [ϕω(cid:48)(gω(z))]} .

(15)

This time ϕω(cid:48) is called the critic and not the discriminator,
as its range is not limited. However, in this paper, we use
either name interchangeably, or might also use the name
Kantorovich potential.

In the original paper (Arjovsky et al., 2017), the Lipschitz
constraints are enforced through weight-clipping. This, how-
ever, only quarantees k-Lipschitzness for some k, and thus
a scalar multiple of the 1-Wasserstein distance is computed.
Remarking that a function is 1-Lipschitz if and only if its
gradient has norm at most 1 everywhere, a gradient norm
penalty was introduced in the WGAN-GP method of Gulra-
jani et al. (2017). See Subsec. 1.1 for more discussion on
imposing the constraints.

3. (q, p)-Wasserstein GAN

We will now introduce the novel (q, p)-Wasserstein GAN
((q, p)-WGAN) architecture, which minimizes the (q, p)-

Algorithm 1 (q, p)-WGAN. Batch size m = 64, learning
rate α = 10−4, search space B, and the Adam parameters
β0 = 0.5 and β1 = 0.999.

for iter = 1, ..., NIterations do

Sample from target xi ∼ µt and source zi ∼ µs, i =
1, 2, ..., m, where m is the batch-size. Denote Bx =
{xi}m
yi ← gω(zi), denote By = {yi}m
for t = 1, ..., Ncritic do

i=1.

i=1.

(cid:111)

.

(cid:110) 1

q(y, x) − ϕω(cid:48)(x)

#Deﬁne ψω(cid:48):
p dp
ψω(cid:48)(y) ← min
x∈B
#Compute penalties:
(cid:80)m
P1 = 1
i,j=1 ξ(xi, yj)2
m2
(cid:80)
P2 = 1
x,y∈Bx∪By
4m2
#Compute objective:
(cid:80)m
L ← 1
m
#Update critic:
ω(cid:48) ← ω(cid:48) + Adam(∇ω(cid:48)L, α, β0, β1).

ξ(x, y)2

i=1 (ϕω(cid:48)(xi) + ψω(cid:48)(yi)) − P1 − P2.

end for
#Compute Wasserstein loss:
← 1
m
#Update generator:
ω ← ω − Adam(∇ωW, α, β0, β1).

i=1 (ϕω(cid:48)(xi) + ψω(cid:48)(yi))

(cid:80)m

end for

Wasserstein distance between the target distribution µt and
the approximation (gω)#µs. That is, the cost function is
given by c = dp

q/p. The objective reads

q,p((gω)#µs, µt)

W p

min
ω
= min
ω
(ϕω(cid:48) ,ϕc
+ Ez∼µs [ϕc

max
ω(cid:48) )∈ADM(c)
ω(cid:48)(gω(z))]} .

{Ex∼µt[ϕω(cid:48)(x)]

(16)

This formulation requires one to approximate the c-
transform deﬁned in (7) and to enforce the constraint
(ϕω(cid:48), ϕc

ω(cid:48)) ∈ ADM(c).

The c-transform. For computing the c-transform, we
choose a search space B for the minimization. For ex-
ample, the learning procedure of the GAN is carried out
through mini-batches. Hence, we can compute the discrete
c-transform over the mini-batches. That is, given sets of
samples Bx = {xi}m
i=1 and By = {yi}m
i=1, from the target
µt and generator (gω)#µs, respectively, we compute the
approximation ϕc

ω(cid:48) over B = Bx ∪ By

ϕc

ω(cid:48)(yj) ≈ min
x∈B

{c(x, yj) − ϕω(cid:48)(x)} .

(17)

In the experiments, we use both B = Bx and B = Bx ∪ By.

Enforcing the constraints. Deﬁne

ξ(x, y) = c(x, y) − ϕω(cid:48)(x) − ϕc

ω(cid:48)(y).

(18)

(q,p)-Wasserstein GANs

Figure 1. Comparing the p-Wasserstein metrics for p = 1, 2, 5 with the Euclidean metric. We minimize W p
p between a discrete target
distribution µ with 10 atoms (blue), by optimizing the support of a model distribution gθ with 7 atoms (in red). The trail of the changing
support is drawn in dashed red, starting from the origo (cross). The magenta lines express the optimal mass transport between the two
measures after optimization. Both measures have uniform weights. Plot on the right shows convergence for each case in distance W p
p
(dashed) and gradient norm (cid:107)∇θW p

p (gθ, µ)(cid:107)2 (solid).

Then, when training the discriminator, we add two penalty
terms given by

P1(ϕ) = λ1

ξ(xi, yj)2,

P2(ϕ) = λ2

min(ξ(x, y), 0)2.

(19)

m
(cid:88)

i,j=1

(cid:88)

x,y∈Bx∪By

Here P2 enforces (ϕ, ϕc) ∈ ADM(c) over all elements in
Bx ∪ By, and P1 encourages pairs (xi, yj) to belong in the
support of the optimal plan.

The (q, p)-WGAN method is summarized in Algorithm 1.

4. Comparison of p-Wasserstein Metrics

To give some intuition about the differences between differ-
ent p-Wasserstein metrics Wp, we compare the behavior of
Wp for p = 1, 2, 5 on two toy examples. The ﬁrst example
consists of approximating a discrete probability measure
with another discrete measure with smaller support. This
example is intended to give general intuition of the behav-
ior of the p-Wasserstein distance when compromises are
required, however, the intuition might not translate directly
into the GAN setting. The second example demonstrates
ﬁtting a (2, p)-WGAN to a 2-dimensional Gaussian mixture.
We abbreviate (2, p)-WGAN as p-WGAN.

In the ﬁrst example, the target distribution µ has 10 atoms
with uniform weights. We approximate the target with a
model distribution ν with 7 atoms and uniform weights.
This objective is closely related to k-means clustering (Pol-
lard, 1982; Canas & Rosasco, 2012). In fact, the objective
would be equivalent to k-means, if each model distribution
atom was assigned the mass of the corresponding cluster of
target distribution atoms.

In Fig. 1, it is clearly seen that in the p = 1 case, the model
distribution prefers to have a support that overlaps with the
target. When p = 2, the model prefers cluster means as its
support, and thus samples from the model are not exactly

Figure 2. Convergence of model distributions for the Gaussian
mixture model. Objective function (approximation of the p-
Wasserstein distance) after each epoch (for WGAN, this has been
renormalized with the estimated Lipschitz constant) in blue. The
true p-Wasserstein distance computed between the data set and the
same amount of generator samples in red.

the same as the real samples of the target. Looking at the
p = 5 case, it seems that the model starts shrinking to the
interior of the convex hull of the target’s support, reducing
the variance of the model distribution. Higher p-value seems
to imply faster and more stable optimization, however, we
do not witness this in the second example below (Fig. 2).

In the second example, we model a Gaussian mixture
model with three clusters (cluster sizes 60, 30 and 50) us-
ing a GAN that minimizes W p
p . The critic and generator
are Multi-Layer Perceptrons (MLPs) with ReLU activations
(the output is without activation) and two fully connected
hidden layers of size 128. In addition to comparing the
p-Wasserstein distances for p = 1, 2, 5, we also compare
the results to WGAN and WGAN-GP architectures.

(q,p)-Wasserstein GANs

Figure 3. Approximating a Gaussian mixture distribution (samples in blue) with different WGAN architectures. Presented are the results
after 100 and 500 epochs for (2, p)-WGAN, abbreviated p-WGAN, for p = 1, 2, 5. Furthermore, we present the results for the original
WGAN and WGAN-GP.

In Fig. 3, the learned distributions are visualized after 100
and 500 epochs under the original dataset. When comparing
to the true distribution, 1-WGAN, 2-WGAN and WGAN-
GP seem to converge the fastest and provide qualitatively the
best results. 5-WGAN seems to fail separating the clusters
from each other, whereas WGAN expresses mode collapse.

The convergence of each model is demonstrated in Fig. 2,
where the objective function value and p-Wasserstein dis-
tance between the original dataset and the same amount
of generator samples are visualized. For 1-WGAN and 2-
WGAN, the objective function approximates well the real
p-Wasserstein distance, whereas 5-WGAN is more unsta-
ble. Note that in the WGAN case, the Lipschitz constant is
estimated to normalize the objective function for an approx-
imation of the 1-Wasserstein distance. WGAN convergence
is clearly more unstable than the others.

Conclusion. From the toy examples it is obvious, that dif-
ferent p values result in differently behaving optimization
problems. If the model is given extreme freedom (but still
limited expressive power), as in the ﬁrst example on dis-
crete probability measures, higher p-values result in stabler
optimization, but also reduces the variance. On the other
hand, p = 1 overﬁts by trying to overlap with the target
distribution. However, this does not directly translate to the
GAN example, which might be because of the model being
expressive enough to match the data distribution well. Nev-
ertheless, this example demonstrates that the (q, p)-WGAN
models the objective Wasserstein distance well.

5. Experiments

We evaluate the performance of the (q, p)-WGAN method
on two different datasets; MNIST (LeCun et al., 1998) and
CIFAR-10 (Krizhevsky & Hinton, 2009). The effect of

ground metric is explored on the MNIST dataset by visually
assessing the image quality. We quantify the performance of
different (q, p)-WGANs by computing the Inception Score
(IS) (Salimans et al., 2016) and the Fr´echet Inception Dis-
tance (FID) (Heusel et al., 2017) on the CIFAR-10 dataset.
We use the DCGAN architecture from (Radford et al., 2015)
for CIFAR-10, and Multi-Layer Perceptrons (MLP) for
MNIST, which are trained for 50K generator iterations. We
use m = 64 as the batch-size for every experiment and
Ncritic = 1 for (q, p)-WGANs.

5.1. Effect of Ground Metric on MNIST.

The MNIST dataset consists of 28 × 28 greyscale images of
hand-written digits, grouped into training and validation sets
of sizes 60k and 10k, respectively. We train ﬁve different
(q, p)-WGAN models, listed in Fig. 4, on the training set.
We also show the distribution of distances of generated sam-
ples to closest training samples for each model, to quantify
whether we are creating new digits or just memorizing the
ones from the training set. Based on the ﬁrst toy-example in
Fig. 1, the hypothesis is that 1-Wasserstein GAN tends to
overﬁt to the data compared to a higher p value. However,
this is not evident in Fig. 4.

The neural networks used are simple MLPs with 3 hidden
layers (speciﬁcs in the supplementary material), that are
trained for 50K generator and discriminator iterations. For
the discrete c-transform, the search space for the minimizer
is restricted to Bx and λ1 = λ2 = 0, as otherwise the model
tended to collapse to single point, and α = 10−4 was used
as the learning rate.

The ground metric clearly affects the sharpness of produced
images. When q = 2, the generated digits have quite blurry
edges. On the other hand, when q = 1, the digits are sharp,

(q,p)-Wasserstein GANs

Model
(1,1)-WGAN
(1,2-WGAN)
(2,1)-WGAN
(2,2)-WGAN
WGAN, N = 1
WGAN, N = 5
WGAN-GP, N = 1
WGAN-GP, N = 5

IS
4.18 ± 0.08
4.11 ± 0.11
3.79 ± 0.09
4.09 ± 0.13
2.87 ± 0.07
2.33 ± 0.05
3.65 ± 0.09
2.85 ± 0.07

FID
80.7
78.7
100.0
82.5
152.9
164.7
117.6
162.6

Table 1. The Inception Score (IS) and Fr´echet Inception Distance
(FID) for the CIFAR-10 dataset reported for four different (q, p)-
WGANs, the original WGAN, and WGAN-GP. Here N implies
discriminator iterations per generator iteration. The models are
trained for 50K discriminator iterations.

.

hyperparameters proposed for WGAN and WGAN-GP by
the original papers, except for the different critic iteration
amounts. For (q, p)-WGANs, α = 10−4 is the learning
rate, λ1 = 0.1 and λ2 = 10, and we use Bx ∪ By as the
c-transform search space. Restricting the search space to
Bx produced very blurry images.

The scores are presented in Table 1, and example samples
in Fig. 5. Based on Table 1, the (q, p)-WGANs outperform
WGAN and WGAN-GP. The IS and FID scores are notably
higher when q = 1. In the q = 2 case, the (2, 2)-Wasserstein
metric scores better than the (2, 1)-Wasserstein metric, but
in the q = 1 case the difference is marginal.

5.3. Kantorovich Potentials as Generators

As pointed out earlier, the learned Kantorovich potentials
can also be used as generators by computing the optimal
transport map using (11). To see if this is applicable in
practice, we train the Kantorovich potentials for the (2, 2)-
WGAN for 100K iterations on MNIST. Although the sam-
ples clearly look like digits, we conclude that the quality of
the samples in Fig. 6 is much worse than with a generator.

Figure 4. Generated samples from different (q, p)-WGANS
trained on the MNIST training set. Furthermore, plotted is the dis-
tribution of l2 distances to closest training points of 5000 generated
samples from each model.

but also more degenerate samples are produced. The sharp-
ness can be adjusted, as shown by the samples generated by
the (1.2, 1.2)-WGAN.

6. Conclusion

5.2. Assessing the Quality on CIFAR-10.

The CIFAR-10 dataset consists of 50K 32 × 32 color images
for training. We train four different (q, p)-WGANs, the orig-
inal WGAN, and WGAN-GP. The methods are compared by
computing the IS and FID after 50K discriminator iterations.
As the original WGAN and WGAN-GP propose to use 5
critic iterations per generator iteration, for fair comparison
we carry out the training with Ncritic = 1, 5.

This time, we use the DCGAN architecture for the generator
and discriminator, see supplementary for details. We use the

We introduced the (q, p)-WGAN to allow the study of dif-
ferent p-Wasserstein metrics and lq ground metrics in the
GAN setting. We show that these parameters do have a
deﬁnite effect on GAN training; 1-Wasserstein metric en-
courages models to overﬁt, whereas too high p causes too
low variance in the model. The FID scores from the CIFAR-
10 dataset indicate that p = 2 performs better compared to
p = 1. We also demonstrate that the l1 metric outperforms
l2 when learning the distribution of colored images of the
CIFAR-10 dataset. Moreover, the experiments show that
our implementation is competitive with the literature, out-
performing the WGAN and WGAN-GP implementations.

(q,p)-Wasserstein GANs

Figure 5. Generated samples from different (q, p)-WGANS, the original WGAN and WGAN-GP trained on the CIFAR-10 training set.
Here N refers to the amount of critic iterations, for (q, p)-WGANS, this is 1. The IS and FID scores are reported in Table 1.

general cost functions.

Although the generative properties of the Kantorovich poten-
tials did not perform well in our experiment, this might be
implementation dependant. We learned the Kantorovich po-
tential ﬁeld, but in some applications, learning the gradient
ﬁeld directly can be more fruitful (Chmiela et al., 2017).

Finally, from the theoretical perspective, choosing p = 2
and a Riemannian ground metric d results in a Riemannian
structure over the manifold of probability measures, shown
by Otto (2001). Thus Riemannian geometry can be used to
study the probability distributions. When p (cid:54)= 2, a Finsle-
rian structure is induced instead (Agueh, 2012). In layman’s
terms, Riemannian structure allows the study of lengths
and comparison of directions through local inner-products,
whereas Finslerian structures provide only direction depen-
dant length-structures. Thus the Riemannian structure re-
sults in a more powerful framework for studying the geome-
try of probability distributions, and possibly GANs.

Acknowledgements

AM and AF were supported by Centre for Stochastic Geom-
etry and Advanced Bioimaging, funded by a grant from the
Villum Foundation.

Figure 6. Samples generated by only the discriminator on the
MNIST dataset.

The (q, p)-WGAN incorporates the ADM(c) constraints
directly on the neural network modelling the Kantorovich
potential ϕ. The other WGAN implementations, on the
other hand, seem to focus on enforcing Lipschitzness and
using the knowledge ψ = ϕc, which are implications of the
ADM(d2) constraints. Working with the general constraint
allows for more ﬂexibility in the modelling choices, result-
ing in improved performance, as we demonstrated. However,
our implementation of taking the constraints into account
leaves room for improvement, as we had to use consider-
ably different hyperparameters on MNIST and CIFAR-10
to achieve stable training. We hope that our results on the
importance of the ground metric and the p parameter inspire
research into more efﬁcient implementations to incorporate

(q,p)-Wasserstein GANs

References

Agueh, M. Finsler structure in the p-Wasserstein space and
gradient ﬂows. Comptes Rendus Mathematique, 350(1-2):
35–40, 2012.

Arjovsky, M., Chintala, S., and Bottou, L. Wasserstein

GAN. arXiv preprint arXiv:1701.07875, 2017.

Bonneel, N., Rabin, J., Peyr´e, G., and Pﬁster, H. Sliced and
Radon Wasserstein barycenters of measures. Journal of
Mathematical Imaging and Vision, 51(1):22–45, 2015.

Canas, G. and Rosasco, L. Learning probability measures
with respect to optimal transport metrics. In Advances in
Neural Information Processing Systems, pp. 2492–2500,
2012.

Chmiela, S., Tkatchenko, A., Sauceda, H. E., Poltavsky, I.,
Sch¨utt, K. T., and M¨uller, K.-R. Machine learning of ac-
curate energy-conserving molecular force ﬁelds. Science
advances, 3(5):e1603015, 2017.

Courty, N., Flamary, R., Tuia, D., and Rakotomamonjy, A.
Optimal transport for domain adaptation. IEEE transac-
tions on pattern analysis and machine intelligence, 39(9):
1853–1865, 2017.

Krizhevsky, A. and Hinton, G. Learning multiple layers
of features from tiny images. Technical report, Citeseer,
2009.

LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. Gradient-
based learning applied to document recognition. Proceed-
ings of the IEEE, 86(11):2278–2324, 1998.

Mallasto, A. and Feragen, A. Learning from uncertain
curves: The 2-Wasserstein metric for Gaussian processes.
In Advances in Neural Information Processing Systems,
pp. 5660–5670, 2017.

Miyato, T., Kataoka, T., Koyama, M., and Yoshida, Y. Spec-
tral normalization for generative adversarial networks.
arXiv preprint arXiv:1802.05957, 2018.

Muzellec, B. and Cuturi, M. Generalizing point embeddings
using the Wasserstein space of elliptical distributions.
arXiv preprint arXiv:1805.07594, 2018.

Otto, F. The geometry of dissipative evolution equations:
the porous medium equation. Journal Communications
in Partial Differential Equations, 26:101–174, 2001.

Peyr´e, G. and Cuturi, M. Computational optimal transport.

Technical report, 2017.

Cuturi, M. Sinkhorn distances: Lightspeed computation
of optimal transport. In Advances in neural information
processing systems, pp. 2292–2300, 2013.

Pollard, D. Quantization and the method of k-means.
IEEE Transactions on Information theory, 28(2):199–205,
1982.

Deshpande, I., Zhang, Z., and Schwing, A. Generative
modeling using the sliced Wasserstein distance. In Pro-
ceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pp. 3483–3491, 2018.

Radford, A., Metz, L., and Chintala, S. Unsupervised rep-
resentation learning with deep convolutional generative
adversarial networks. arXiv preprint arXiv:1511.06434,
2015.

Genevay, A., Peyr´e, G., and Cuturi, M. Learning genera-
tive models with Sinkhorn divergences. arXiv preprint
arXiv:1706.00292, 2017.

Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B.,
Warde-Farley, D., Ozair, S., Courville, A., and Bengio,
Y. Generative adversarial nets. In Advances in neural
information processing systems, pp. 2672–2680, 2014.

Gulrajani, I., Ahmed, F., Arjovsky, M., Dumoulin, V., and
Courville, A. C. Improved training of Wasserstein GANs.
In Advances in Neural Information Processing Systems,
pp. 5767–5777, 2017.

Heusel, M., Ramsauer, H., Unterthiner, T., Nessler, B., and
Hochreiter, S. GANs trained by a two time-scale update
rule converge to a local Nash equilibrium. In Advances in
Neural Information Processing Systems, pp. 6626–6637,
2017.

Kingma, D. P. and Welling, M. Auto-encoding variational

Bayes. arXiv preprint arXiv:1312.6114, 2013.

Salimans, T., Goodfellow, I., Zaremba, W., Cheung, V., Rad-
ford, A., and Chen, X. Improved techniques for training
GANs. In Advances in Neural Information Processing
Systems, pp. 2234–2242, 2016.

Tolstikhin, I., Bousquet, O., Gelly, S., and Schoelkopf,
arXiv preprint

B. Wasserstein auto-encoders.
arXiv:1711.01558, 2017.

Villani, C. Optimal transport: old and new, volume 338.

Springer Science & Business Media, 2008.

Wu, J., Huang, Z., Thoma, J., Acharya, D., and Van Gool,
L. Wasserstein divergence for gans. In Computer Vi-
sion – ECCV 2018, pp. 673–688, Cham, 2018. Springer
International Publishing. ISBN 978-3-030-01228-1.

(q,p)-Wasserstein GANs

Supplementary Material

We present below the two neural network architectures used
in the paper, one Multi-layer Perceptron, and one Convolu-
tional Neural Network based on the DCGAN architecture.

MNIST

Discriminator ϕ
Input: 28 × 28-vectors
Linear(28 × 28, 1024), LeakyReLU(0.2), Dropout(0.3)

Generator g
Input: 128-dimensional noise
Linear(128, 2 × 128), LeakyReLU(0.2)

Linear(8 × 128, 4 × 128), LeakyReLU(0.2), Dropout(0.3) Linear(2 × 128, 4 × 128), LeakyReLU(0.2)
Linear(4 × 128, 2 × 128), LeakyReLU(0.2), Dropout(0.3)
Linear(2 × 128, 1)

Linear(4 × 128, 8 × 128), Tanh
Linear(8 × 128, 28 × 28), LeakyReLU(0.2)

Table 2. Discriminator and Generator architectures for the MNIST
experiment

CIFAR-10

Discriminator ϕ
Input: 28 ∗ 28-vectors
Conv(3, 128), LeakyReLU(0.2)
Conv(128, 2 × 128), LeakyReLU(0.2)
Conv(2 × 128, 4 × 128), LeakyReLU(0.2)
Linear(4 × 4 × 4 × 128, 1)

Generator g
Input: 128-dimensional noise
Linear(128, 4 × 4 × 4 × 128), ReLU, Reshape(4 × 128, 4, 4)
Deconv(4 × 128, 2 × 128), BatchNorm(2 × 128), ReLU
Deconv(2 × 128, 128), BatchNorm(128), ReLU
Deconv(128, 3), Tanh

Table 3. Discriminator and Generator architectures for the CIFAR-
10 experiment. For Deconv, kernel size is 2 and stride 2 and
padding 0. For Conv, kernel size is 3, stride 2 and padding 1.

