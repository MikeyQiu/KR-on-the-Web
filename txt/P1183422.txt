Dynamic Feature Fusion for Semantic Edge Detection

Yuan Hu1,2 , Yunpeng Chen3 , Xiang Li1,2 and Jiashi Feng3
1Institute of Remote Sensing and Digital Earth, CAS, Beijing 100094, China
2University of Chinese Academy of Sciences, Beijing 100049, China
3National University of Singapore
{huyuan, lixiang01}@radi.ac.cn, chenyunpeng@u.nus.edu, elefjia@nus.edu.sg

9
1
0
2
 
b
e
F
 
5
2
 
 
]

V
C
.
s
c
[
 
 
1
v
4
0
1
9
0
.
2
0
9
1
:
v
i
X
r
a

Abstract

Features from multiple scales can greatly beneﬁt
the semantic edge detection task if they are well
fused. However, the prevalent semantic edge detec-
tion methods apply a ﬁxed weight fusion strategy
where images with different semantics are forced
to share the same weights, resulting in universal fu-
sion weights for all images and locations regard-
less of their different semantics or local context. In
this work, we propose a novel dynamic feature fu-
sion strategy that assigns different fusion weights
for different input images and locations adaptively.
This is achieved by a proposed weight learner to in-
fer proper fusion weights over multi-level features
for each location of the feature map, conditioned on
the speciﬁc input. In this way, the heterogeneity in
contributions made by different locations of feature
maps and input images can be better considered and
thus help produce more accurate and sharper edge
predictions. We show that our model with the novel
dynamic feature fusion is superior to ﬁxed weight
fusion and also the na¨ıve location-invariant weight
fusion methods, via comprehensive experiments on
benchmarks Cityscapes and SBD. In particular, our
method outperforms all existing well established
methods and achieves new state-of-the-art.

1 Introduction
The task of semantic edge detection (SED) is aimed at both
detecting visually salient edges and recognizing their cate-
gories, or more concretely, locating ﬁne edges utlizing low-
level features and meanwhile identifying semantic categories
with abstracted high-level features. An intuitive way for a
deep CNN model to achieve both targets is to integrate high-
level semantic features with low-level category-agnostic edge
features via a fusion model, which is conventionally designed
following a ﬁxed weight fusion strategy, independent of the
input, as illustrated in the top row in Figure 1.

In many existing deep SED models [Yu et al., 2017;
Liu et al., 2018; Yu et al., 2018], ﬁxed weight fusion of
multi-level features is implemented through 1 × 1 convo-
lution, where the learned convolution kernel serves as the
fusion weights. However, this fusion strategy cannot fully

Figure 1:
Illustration of ﬁxed weight fusion and proposed dy-
namic feature fusion (DFF). The proposed model actively learns
customized fusion weights for each location, to fuse low-level fea-
tures (Aside1 ∼ Aside3) and a high-level feature (Aside5). In this
way, sharper boundaries are produced through dynamic feature fu-
sion compared with CASENet (ﬁxed weight fusion model).

exploit multi-level information, especially the low-level fea-
tures. This is because, ﬁrst, it applies the same fusion weights
to all the input images and ignores their variations in con-
tents, illumination, etc. The distinct properties of a speciﬁc
input need be treated adaptively for revealing the subtle edge
details. Besides, for a same input image, different spatial lo-
cations on the corresponding feature map convey different
information, but the ﬁxed weight fusion manner applies the
same weights to all these locations, regardless of their dif-
ferent semantic classes or object parts. This would unfavor-
ably force the model to learn universal fusion weights for all
the categories and locations. Consequently, a bias would be
caused toward high-level features, and the power of multi-
level response fusion is signiﬁcantly weakened.

In this work, we propose a Dynamic Feature Fusion (DFF)
method that assigns adaptive fusion weights to each loca-
tion individually, aiming to generate a fused edge map adap-
tive to the speciﬁc content of each image, as illustrated in
the bottom row in Figure 1.
In particular, we design a
novel location-adaptive weight learner that actively learns
customized location-speciﬁc fusion weights conditional on
the feature map content for multi-level response maps. As
shown in Figure 1, low-level features (Aside1 ∼ Aside3) and
a high-level feature (Aside5) are merged to produce the ﬁnal
fused output. Low-level feature maps give high response on
ﬁne details, such as the edges inside objects, whereas high-
level ones are coarser and only exhibit strong response at

the object-level boundaries. This location-adaptive weight
learner tailors fusion weights for each individual location.
For example, for the boundaries of the horse, fusion weights
are biased toward low-level features to fully take advantage
of the accurate located edges. For the interior of the horse,
higher weights are assigned to high-level features to suppress
the fragmentary and trivial edge responses inside the object.
The proposed DFF model consists of two main compo-
nents: a feature extractor with a normalizer and an adaptive
weight fusion module. The feature extractor primarily scales
the multi-level responses to the same magnitude, prepar-
ing for the down-streaming fusion operation. The adap-
tive weight fusion module performs following two compu-
tations. First, it dynamically generates location-speciﬁc fu-
sion weights conditioned on the image content. Then, the
location-speciﬁc fusion weights are applied to actively fuse
the high-level and low-level response maps. The adaptive
weight fusion module is capable of fully excavating the po-
tentialities of multi-level responses, especially the low-level
ones, to produce better fusion output for every single loca-
tion.

In summary, our main contributions are:

• For the ﬁrst time, this work reveals limitations of the
popular ﬁxed weight fusion for SED, and explains why it
does not produce satisfactory fusion results as expected.
• We propose a dynamic feature fusion (DFF) model. To
our best knowledge, it is the ﬁrst work to learn adaptive
fusion weights conditioned on input contents to merge
multi-level features in the research ﬁeld of SED.

• The proposed DFF model achieves new state-of-the-art

on the SED task.

2 Related Work

The task of category-aware semantic edge detection was ﬁrst
introduced by [Hariharan et al., 2011]. It is tackled usually
as a multi-class problem [Hariharan et al., 2011; Bertasius
et al., 2015; Bertasius et al., 2016; Maninis et al., 2016] at
ﬁrst, in which only one semantic class is associated with each
located boundary pixel. From CASENet [Yu et al., 2017],
researchers begin to address this task as a multi-label problem
where each edge pixel can be associated with more than one
semantic class simultaneously. Recently, deep learning based
models, such as SEAL [Yu et al., 2018] and DDS [Liu et al.,
2018], further lift the performance of semantic edge detection
to new state-of-the-art.

The tradition of employing ﬁxed weight fusion can be pin-
pointed to HED [Xie and Tu, 2015], in which a weighted-
fusion layer (implemented by 1 × 1 convolution layer) is em-
ployed to merge the side-outputs. RCF [Liu et al., 2017] and
RDS [Liu and Lew, 2016] follow this simple strategy to per-
form category-agnostic edge detection. CASENet [Yu et al.,
2017], SEAL [Yu et al., 2018] and DDS [Liu et al., 2018] ex-
tend the approach with a K-grouped 1 × 1 convolution layer
to generate the K-channel fused activation map. In this paper,
we demonstrate the above ﬁxed fusion strategy cannot suf-
ﬁciently leverage multi-scale responses for producing better
fused output. Instead, our proposed adaptive weight fusion

module enables the network to actively learn the location-
aware fusion weights conditioned on the individual input con-
tent.

Multi-level representations within a convolutional neural
network have been shown effective in many vision tasks, such
as object detection [Liu et al., 2016; Lin et al., 2017], seman-
tic segmentation [Long et al., 2015; Yu and Koltun, 2015],
boundary detection [Xie and Tu, 2015; Liu et al., 2017]. Re-
sponses from different stages of a network tend to vary sig-
niﬁcantly in magnitude. Scaling the multi-scale activations
to a similar magnitude would beneﬁt the following prediction
or fusion consistently. For example, SSD [Liu et al., 2016]
performs L2 normalization on low-level feature maps before
making multi-scale predictions. [Li et al., 2018] adds a scal-
ing layer for learning a fusion scale to combine the channel
attention and spatial attention outputs. In this paper, we adopt
a feature extractor with a normalizer for all multi-level acti-
vations to deal with the bias.

Our proposed method is also related with the dynamic ﬁl-
ter networks [Jia et al., 2016] in which sample-speciﬁc ﬁlter
parameters are generated based on the input. The ﬁlters with
a speciﬁc kernel size are dynamically produced to enable lo-
cal spatial transformations on the input feature map, which
serve as dynamic convolution kernels. Comparatively, in our
method, the adaptive fusion weights are applied on the multi-
level response maps to obtain a desired fused output and a
feature extractor with a normalizer is proposed to alleviate
the bias during training.

3 Feature Fusion with Fixed Weights
Before expounding the proposed model, we ﬁrst introduce
the notations used in our model and revisit the ﬁxed weight
fusion in CASENet [Yu et al., 2017] as preliminaries.

CASENet adopts ResNet-101 with some minor modiﬁca-
tions to extract multi-level features. Based on the backbone, a
1 × 1 convolution layer and a following upsampling layer are
connected to the output of the ﬁrst three and the top stacks
of residual blocks, producing three single channel feature
maps {Aside1, Aside2, Aside3} and a K-channel class activa-
tion map Aside5 = {A1
side5, ..., AK
side5} respectively. Here
K is the number of categories. The shared concatenation
replicates the bottom features {Aside1, Aside2, Aside3} for K
times to separately concatenate with each of the K top acti-
vations in Aside5:
Acat = {A1
cat = {Ai
Ai

cat, ..., AK
side5, Aside1, Aside2, Aside3}, i ∈ [1, K].

cat},

(1)

(2)

The resulting concatenated activation map Acat is then fed
into the K-grounped 1 × 1 conv layer to produce the fused
activation map with K channels:

1Ai
f use = wi
Ai
Af use = {Ai

side5 +wi
f use}, i ∈ [1, K]

2Aside1 +wi

3Aside2 +wi

4Aside3

(3)

(4)

1, wi

3, wi

2, wi

where (wi
the K-
grounped 1 × 1 conv layer, serving as fusion weights for the
ith category. We omit the bias term in Eqn. (3) for simplicity.
One can refer to [Yu et al., 2017] for more details.

4) are the parameters of

Figure 2: Overall architecture of our model. (a) The input image is fed into the ResNet backbone to generate a set of features (response maps)
with different scales. Side feature normalization blocks are connected to the ﬁrst three and the ﬁfth stack of residual blocks to produce Side1-3
and Side5 response maps with the same response magnitude. Shared concatenation (Eqn. (1) and (2)) is then applied to concatenate Side1-3
and Side5. The Side5-w feature normalization block followed by a location-adaptive weight learner form another branch extended from res5
to predict dynamic location-aware fusion weights Ψ(x). Then element-wise multiplication and category-wise summation are applied to the
location-aware fusion weights Ψ(x) and the concatenated response map Acat to generate the ﬁnal fused output Af use. The semantic loss is
employed to supervise Aside5 and the ﬁnal fused output Af use. (b) Location-invariant weight learner and location-adaptive weight learner
take as input the feature map x and output location-invariant fusion weights and location-adaptive fusion weights Ψ(x) respectively.

3, wi

2, wi

CASENet imposes the same ﬁxed set of fusion weights
1, wi
(wi
4) of the ith category upon all the images
across all the locations of the feature maps. By reproducing
i) The weight
CASENet, we make following observations.
wi
1 always surpasses the other weights (wi
2, wi
3, wi
4) for each
class signiﬁcantly.
ii) By evaluating the performance of
Aside5 and the fused output Af use, we ﬁnd they give almost
the same performance. This implies that the low-level fea-
ture responses {Aside1, Aside2, Aside3} contribute very little
to the ﬁnal fused output although they contain ﬁne-grained
edge location and structure information. The ﬁnal decision
is mainly determined by high-level features. As such, the
CASENet cannot exploit low-level information sufﬁciently
and produce only coarse edges.

4 Proposed Model
To address the above limitations of existing Semantic Edge
Detection (SED) models in fusing features with ﬁxed
weights, we develop a new SED model with dynamic fea-
ture fusion. The proposed model fuses multi-level features
through two modules: 1) the feature extractor with a nor-
malizer is to normalize the magnitude scales of multi-level
features and 2) the adaptive weight fusion module is to learn
adaptive fusion weights for different locations of multi-level
feature maps (see Figure 2 (a)).

4.1 Dynamic Feature Fusion
The ﬁrst module is inspired by following observations.
In
CASENet [Yu et al., 2017], the edge responses from the top
layers are much stronger than the ones from other three bot-
tom outputs. Such variation in scales of activations biases the
multi-level feature fusion to the responses from the top layers.
Moreover, the top-layer output is much similar to the ground-
truth for the training examples, due to the direct supervision.
Applying the same weights to all the locations forces the net-

work to learn much higher fusion weights for the top-level
features, undesirably ignoring contributions from low-level
features. This further inhibits the low-level features from pro-
viding ﬁne edge information for detecting object boundaries
in the cases of heavily biased distributions of edge and non-
edge pixels.

Therefore, before feature fusion, we ﬁrst deal with the
scale variation of multi-level responses by normalizing their
magnitudes.
the following adaptive weight
learner can get rid of distractions from scale variation and
learn effective fusion weights more easily.

In this way,

A feature extractor with a normalizer (see Figure 2 (a))
is employed to normalize multi-level responses to the similar
magnitude. Concretely, side feature normalization blocks in
the module are responsible for normalizing feature maps of
the corresponding level.

To achieve our proposed dynamic feature fusion, we de-
vise two different schemes for predicting the adaptive fusion
weights, i.e., location-invariant and location-adaptive fusion
weights (see Figure 2 (b)). The former treats all locations
in the feature maps equally and universal fusion weights are
learned according to speciﬁc input adaptively. The later one
adjusts the fusion weights conditioned on location features of
the image and lifts the contributions of low-level features to
locating ﬁne edges along object boundaries.

Concretely, given the activation of the multi-level side out-
puts Aside of size H × W , we aim to obtain a fused output
Af use = f (Aside) by aggregating multi-level responses. The
fusion operation in CASENet in Eqn. (3) can be written as the
following generalized form:

Af use = f (Aside; W)

(5)

2, wi

where f encapsulates operations in Eqn. (3) and W =
(wi
4) denotes the fusion weights.

1, wi
Differently, we propose an adaptive weight learner to ac-
tively learn the fusion weights conditioned on the feature map

3, wi

itself, which is formulated as

Af use = f (Aside; Ψ(x)),

(6)

where x denotes the feature map. The above formulations
characterize the essential difference between our proposed
adaptive weight fusion method and the ﬁxed weight fusion
method. We enforce the fusion weights W to explicitly de-
pend on the feature map x, i.e. W = Ψ(x). Different in-
put feature maps x would induce different parameters Ψ(x)
and thus lead to modiﬁcations to the adaptive weight learner
f (.; .) dynamically. In this way, the semantic edge detection
model can fast adapt to the input image and favourably learn
proper multi-level response fusion weights in an end-to-end
manner.

Regarding Ψ(x),

there are two adaptive weight

corresponding to the two fusion
learn-
weight schemes,
ers, namely location-invariant weight learner and location-
adaptive weight learner. The location-invariant weight learner
learns 4K fusion weights in total as shown in the following
equation, which are shared by all locations of feature maps to
be fused:

Ψ(x) = (wi

1, wi

2, wi

3, wi

4), i ∈ [1, K].

(7)

However, the location-adaptive weight learner generates 4K
fusion weights for each spatial location, which results in
4KHW weighting parameters in total.

Ψ(x) = (ws,t), s ∈ [1, H], t ∈ [1, W ]
3)s,t, (wi
ws,t = ((wi

2)s,t, (wi

1)s,t, (wi

4)s,t), i ∈ [1, K]

(8)

(9)

The location-invariant weight learner generates universal fu-
sion weights for all locations, while the location-adaptive
weight learner tailors fusion weights for each location con-
sidering the spatial variety.

4.2 Network Architecture

Our proposed network architecture is based on ResNet [He et
al., 2016] and adopts the same modiﬁcations as CASENet [Yu
et al., 2017] to preserve low-level edge information, as shown
in Figure 2. Side feature normalization blocks are connected
to the ﬁrst three and the ﬁfth stack of residual blocks. This
block consists of a 1 × 1 convolution layer, a Batch Normal-
ization (BN) [Ioffe and Szegedy, 2015] layer and a deconvo-
lution layer. The 1 × 1 convolution layer produces single and
K channel response maps for Side1-3 and Side5 respectively.
The BN layer is applied on the output of the 1 × 1 convolu-
tion layer to normalize the multi-level responses to the same
magnitude. Deconvolution layers are then used to upsample
the response maps to the original image size.

Another side feature normalization block is connected to
the ﬁfth stack of the residual block, in which a 4K-channel
feature map is produced. The adaptive weight learner then
takes in the output of the Side5-w feature normalization block
to predict the dynamic fusion weights w(x). We design
two instantiations for location-invariant weight learner and
location-adaptive weight learner respectively, as detailed be-
low.

Location-invariant weight
learner Location-invariant
weight learner (see Figure 2 (b)) is a na¨ıve version of adaptive
weight learner. The output of the Side5-w feature normaliza-
tion block x with size H × W × 4K is taken as the input of a
global average pooling layer to produce a 4K-channel vector.
After that, a block of alternatively connected FC, BN and
ReLU layers is repeated twice and followed by FC and BN
layers to generate the 4K location-invariant fusion weights
for the fused response map Af use with size H × W × 4K.
These fusion weights are conditional on the input content but
all locations share the same fusion parameters.

Location-adaptive weight learner We further propose the
location-adaptive weight learner (see Figure 2 (b)) to solve
the shortcomings of ﬁxed weight fusion. The feature map
x is forwarded to a block of alternatively connected 1 × 1
conv, BN and ReLU layers, repeated twice and followed by
a 1 × 1 conv and BN layer, to generate location-aware fu-
sion weights w(x) with size H × W × 4K. Element-wise
multiplication and category-wise summation are then applied
to the location-aware fusion weights and the fused response
map Af use to generate the ﬁnal fused output. The location-
adaptive weight learner predicts 4K fusion weights for each
spatial location on Side1-3 and Side5 to allow low-level re-
sponses to provide ﬁne edge locations for object boundaries.
One may consider applying softmax activation function to the
output of the adaptive weight leaner to learn fusion weights
mutually-exclusive for the side feature maps to be fused re-
spectively. The ablation experiments in Section 5.2 demon-
strate that the activation function hampers the performance in
the case of generating adaptive fusion weights.

Method Normalizer

invariant

softmax

Learner
adaptive

mean ∆ mean

Baseline

Ours

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)
(cid:88)
(cid:88)

78.4

78.7
79.1
80.1
80.4
78.9

+ 0.3
+ 0.7
+ 1.7
+ 2.0
+ 0.5

Table 1: The effectiveness of each component in our proposed model
on Cityscapes dataset. The mean value of MF scores over all cate-
gories is measured by %.

5 Experiments

5.1 Experimental Setup

Datasets and augmentations We evaluate our proposed
method on two popular benchmarks for semantic edge de-
tection: Cityscapes [Cordts et al., 2016] and SBD [Hariha-
ran et al., 2011]. During training, we use random mirror-
ing and random cropping on both Cityscapes and SBD. For
Cityscapes, we also augment each training sample with ran-
dom scaling in [0.75, 2], and the base size for random scaling
is set as 640. For SBD, we augment the training data by resiz-
ing each image with scaling factors {0.5, 0.75, 1, 1.25, 1.5}
following [Yu et al., 2017]. During testing, the images with
original image size are used for Cityscapes and the images
are padded to 512 × 512 for SBD.

Method

backbone

crop size

road

side.

buil. wall

fence

pole

light

sign

vege.

terrain

sky

person

rider

car

truck

bus

train mot.

bike mean

DFF

ResNet50
ResNet50
ResNet101

512
640
512

93.1
93.3
93.2

86.5
86.5
86.3

89.0
89.5
89.7

58.8
58.2
60.0

63.5
64.3
64.3

84.8
85.2
86.0

83.7
85.5
85.2

83
84.3
83.7

91.8
92.2
92.0

71.9
72.0
71.3

92.2
92.6
92.3

90.7
91.2
91.1

81.3
82.6
83.4

94.7
94.9
94.8

58.5
60.0
64.5

72.7
77.2
77.4

50.8
56.9
59.9

71.7
74.5
72.1

86.6
86.3
86.9

79.2
80.4
80.7

Table 2: Results of the proposed DFF using different backbone networks and crop sizes. All MF scores are measured by %

Method

road

side.

buil. wall

fence

pole

light

sign

vege.

terrain

sky

person

rider

car

truck

bus

train mot.

bike mean

CASENet
DDS-R
DFF

SEAL (0.0035)
DFF (0.0035)

86.6
90.5
93.2

87.6
89.4

78.8
84.2
86.3

77.5
80.1

85.1
86.2
89.7

75.9
79.6

51.5
57.7
60.0

47.6
51.3

58.9
61.4
64.3

46.3
54.5

70.1
85.1
86.0

75.5
81.3

70.8
83.8
85.2

71.2
81.3

74.6
80.4
83.7

75.4
81.2

83.5
88.5
92.0

80.9
83.6

62.9
67.6
71.3

60.1
62.9

79.4
88.2
92.3

87.4
89.0

81.5
89.9
91.1

81.5
85.4

71.3
80.1
83.4

68.9
75.8

86.9
91.8
94.8

88.9
91.6

50.4
58.6
64.5

50.2
54.9

69.5
76.3
77.4

67.8
73.9

52.0
56.2
59.9

44.1
51.9

61.3
68.8
72.1

52.7
64.3

80.2
87.3
86.9

73.0
76.4

71.3
78.0
80.7

69.1
74.1

Table 3: Comparison with state-of-the-arts on Cityscapes dataset. All MF scores are measured by %

Training strategies The proposed network is built on
ResNet [He et al., 2016] pretrained on ImageNet [Deng et
al., 2009]. The network is trained with standard reweighted
cross-entropy loss [Yu et al., 2017] and optimized by SGD us-
ing PyTorch [Paszke et al., 2017]1. We set the base learning
rate to 0.08 and 0.05 for Cityscapes and SBD respectively;
the “poly” policy is used for learning rate decay. The crop
size, batch size, training epoch, momentum, weight decay are
set to 640 × 640 / 352 × 352, 8 / 16, 200 / 10, 0.9, 1e − 4 re-
spectively for Cityscapes and SBD. All experiments are per-
formed using 4 NVIDIA TITAN Xp(12GB) GPUs with syn-
chronized batch normalization [Zhang et al., 2018]. We use
the same data augmentation and hyper-parameters for repro-
ducing CASENet and training the proposed model for fair
comparison.
Evaluation protocol We follow [Yu et al., 2018] to evalu-
ate the performance with stricter rules than the benchmark
used in [Yu et al., 2017; Liu et al., 2018]. The ground
truth maps are downsampled into half size of original di-
mensions for Cityscapes, and are generated with instance-
sensitive edges for both datasets. Maximum F-measure (MF)
at optimal dataset scale (ODS) with matching distance tol-
erance set as 0.02 is used for Cityscapes and SBD evaluation
following our baseline methods. For fair comparison with [Yu
et al., 2018], we also set the distance tolerance to 0.0035 for
Cityscapes dataset.

5.2 Ablation Study
We ﬁrst conduct ablation experiments on Cityscapes to in-
vestigate the effectiveness of each newly proposed module.
We use CASENet as the baseline model and add our pro-
posed normalizer and learner on it. All the ablation ex-
periments use the same settings with 640 × 640 crop size
and ResNet50 backbone. We report the reproduced baseline
CASENet trained with the same training settings for fair com-
parison, which actually has higher accuracy than the original
paper. Results are summarized in Table 1.
Normalizer We ﬁrst evaluate the effect of the proposed
normalizer in the feature extractor. As shown in Table 1 (row
2), the normalizer provides 0.3% performance gain compared
with the baseline which does not normalize the multi-level
features to the same magnitude before fusion. It shows that
normalized features are more suitable for multi-level infor-
mation fusion than the unnormalized ones. This is probably

1Codes will be released soon.

because the unnormalized features have dramatically differ-
ent magnitudes, making the learning process biased to the
features with higher magnitude.

Location-invariant learner Row 3 in Table 1 shows the re-
sults of further adding the proposed location-invariant learner
which adaptively fuses multi-level features conditioned on
the input image. As shown in Table 1, the location-invariant
learner provides another 0.4% performance gain compared
with baseline+normalizer that assigns ﬁxed fusion weights
without considering the uniqueness of each input image. The
performance boost successfully shows that different input im-
ages with different illumination, semantics, etc., may require
different fusion weights and applying universal weights to all
training images will lead to less satisfactory results.

Location-adaptive learner The location-adaptive learner
provides location-aware fusion weights that are conditioned
on not only the input image but also the local context, which
further improves the location-invariant learner. As shown in
Table 1 row 4 to row 5, location-adaptive learner improves
the performance signiﬁcantly from 79.1% to 80.4%, indicat-
ing a fusion module should consider both the uniqueness of
each input image and the local context at each location. The
proposed fusion module in DFF successfully captures both
of them and thus delivers remarkable performance gain. Be-
sides, it can be seen that the location-adaptive learner heavily
relies on pre-normalized multi-level features, since the per-
formance degrades by 1.5% when the proposed normalizer
is removed from the framework, as shown in row 5 and row
6. This further justiﬁes the effectiveness of the proposed nor-
malizer for rescaling the activation values to the same magni-
tude before conducting fusion.

Activation function Row 4 and row 5 in Table 1 show the
cases of further constraining the generated fusion weights for
better performance. In particular, we append a softmax layer
to the end of location-adaptive weight learner (Figure 2 (b))
to force the learned fusion weights for each category to add
up to 1, and compare its results with the unconstrained ver-
sion. However, we observe performance drop of 0.3% with
softmax activation function adopted. Our intuitive explana-
tion is that applying softmax activation function to the fu-
sion weights normalizes their values to the range [0, 1], which
may actually be negative for some response maps or some
locations. Furthermore, adopting softmax activation func-
tion enforces the fusion weights of multi-level response maps
for each category to be mutually exclusive, which makes the

Method

aer.

bike

bird

boat

bottle

bus

car

cat

chair

cow table

dog

horse mot.

per.

pot.

sheep

sofa

train

tv

mean

CASENet
DDS-R
SEAL

DFF

83.6
85.4
84.5

86.5

75.3
78.3
76.5

79.5

82.3
83.3
83.7

85.5

63.1
65.6
64.9

69.0

70.5
71.4
71.7

73.9

83.5
83.0
83.8

86.1

76.5
75.5
78.1

80.3

82.6
81.3
85.0

85.3

56.8
59.1
58.8

58.5

76.3
75.7
76.6

80.1

47.5
50.7
50.9

47.3

80.8
80.2
82.4

82.5

80.9
82.7
82.2

85.7

75.6
77.0
77.1

78.5

80.7
81.6
83.0

83.4

54.1
58.2
55.1

57.9

77.7
79.5
78.4

81.2

52.3
50.2
54.4

53.0

77.9
76.5
79.3

81.4

68.0
71.2
69.6

71.6

72.3
73.3
73.8

75.4

Table 4: Comparison with state-of-the-arts on SBD dataset. All MF scores are measured by %

Figure 3: Qualitative comparison on Cityscapes among ground truth, CASENet, SEAL and DFF (ordering from left to right in the ﬁgure).
Best viewed in color.

response maps compete with each other to be more impor-
tant. However, it is desirable that each response map be given
enough freedom to be active and be useful to the ﬁnal fused
output. Therefore, we do not use any activation functions to
constrain the fusion weights in the proposed DFF model.

Deeper backbone network We also perform experiments
on deeper backbones to verify our model’s generalization.
As shown in Table 2, we evaluate our model performance on
ResNet101 with 512 × 512 crop size. Note that we do not use
640 × 640, simply because of the GPU memory limitation.
In order to make a fair comparison, we also train a DFF on
ResNet50 with 512 × 512 crop size. The result shows DFF
also generalizes well on deep ResNet101 and outperforms its
counterpart (ResNet50, 512 × 512) by 1.5%. Higher perfor-
mance might be achieved if we can train the ResNet101 with
640 × 640 crop size using GPUs with larger memory, e.g.
Nvidia V100 (32GB).

5.3 Comparison with State-of-the-arts

We compare the performance of the proposed DFF model
with state-of-the-art semantic edge detection methods [Yu et
al., 2017; Yu et al., 2018; Liu et al., 2018] on Cityscapes
dataset and SBD dataset.

Results on Cityscapes
We compare the proposed DFF model with CASENet and
DDS, and evaluate MF (ODS) with matching distance toler-
ance set as 0.02. In addition, the matching distance tolerance
is decreased to 0.0035 to make fair comparison with SEAL.
As can be seen in Table 3, our DFF model outperforms all
these well established baselines and achieves new state-of-
the-art 80.7% MF (ODS). The DFF model is superior to other
models for most classes. Speciﬁcally, the MF (ODS) of the
proposed DFF model is 9.4% higher than CASENet and 2.7%
higher than DDS on average. It is also worth noting that DFF

achieves 5% higher than SEAL under stricter matching dis-
tance tolerance (0.0035), which reﬂects the DFF model can
locate more accurate edges by taking full advantage of multi-
level response maps, especially the low-level ones, with dy-
namic feature fusion. We also visualize some prediction re-
sults for qualitative comparison shown in Figure 3. Through
comparing with CASENet and SEAL, we can observe DFF
can predict more accurate and clearer edges on object bound-
aries while suppressing the fragmentary and trivial edge re-
sponses inside the objects.

Results on SBD
Compared with Cityscapes, SBD dataset has fewer objects
and especially fewer overlapping ones in each image. In ad-
dition, it contains many misaligned annotations. We compare
the proposed DFF model with state-of-the-arts on SBD vali-
dation set in Table 4. The proposed DFF model outperforms
all the baselines and achieves new state-of-the-art 75.4% MF
(ODS), which well conﬁrms its superiority.

6 Conclusion

In this paper, we propose a novel dynamic feature fusion
(DFF) model to exploit multi-level responses for producing a
desired fused output. The newly introduced normalizer scales
multi-level side activations to the same magnitude preparing
for the down-streaming fusion operation. Location-adaptive
weight learner is proposed to actively learn customized fusion
weights conditioned on the individual sample content for each
spatial location. Comprehensive experiments on Cityscapes
and SBD demonstrate the proposed DFF model can improve
the performance by locating more accurate edges on object
boundaries as well as suppressing trivial edge responses in-
side the objects. In the future, we will continue to improve
the location-adaptive weight learner by considering both the
high-level and low-level feature maps from the backbone.

[Liu et al., 2017] Yun Liu, Ming-Ming Cheng, Xiaowei Hu,
Kai Wang, and Xiang Bai. Richer convolutional features
for edge detection. In Computer Vision and Pattern Recog-
nition (CVPR), 2017 IEEE Conference on, pages 5872–
5881. IEEE, 2017.

[Liu et al., 2018] Yun Liu, Ming-Ming Cheng, JiaWang
Bian, Le Zhang, Peng-Tao Jiang, and Yang Cao. Seman-
tic edge detection with diverse deep supervision. arXiv
preprint arXiv:1804.02864, 2018.

[Long et al., 2015] Jonathan Long, Evan Shelhamer, and
Trevor Darrell. Fully convolutional networks for seman-
tic segmentation. In Proceedings of the IEEE conference
on computer vision and pattern recognition, pages 3431–
3440, 2015.

[Maninis et al., 2016] Kevis-Kokitsi Maninis, Jordi Pont-
Tuset, Pablo Arbel´aez, and Luc Van Gool. Convolutional
In European Conference on Com-
oriented boundaries.
puter Vision, pages 580–596. Springer, 2016.

[Paszke et al., 2017] Adam Paszke, Sam Gross, Soumith
Chintala, Gregory Chanan, Edward Yang, Zachary De-
Vito, Zeming Lin, Alban Desmaison, Luca Antiga, and
Adam Lerer. Automatic differentiation in pytorch. 2017.

[Xie and Tu, 2015] Saining Xie

Zhuowen
Tu.
In Proceedings
Holistically-nested edge detection.
of the IEEE international conference on computer vision,
pages 1395–1403, 2015.

and

[Yu and Koltun, 2015] Fisher Yu and Vladlen Koltun. Multi-
scale context aggregation by dilated convolutions. arXiv
preprint arXiv:1511.07122, 2015.

[Yu et al., 2017] Zhiding Yu, Chen Feng, Ming-Yu Liu, and
Srikumar Ramalingam. Casenet: Deep category-aware se-
mantic edge detection. In Proceedings of the 2017 IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), Honolulu, HI, USA, pages 21–26, 2017.

[Yu et al., 2018] Zhiding Yu, Weiyang Liu, Yang Zou, Chen
Feng, Srikumar Ramalingam, BVK Vijaya Kumar, and Jan
Kautz. Simultaneous edge alignment and learning. arXiv
preprint arXiv:1808.01992, 2018.

[Zhang et al., 2018] Hang Zhang, Kristin Dana, Jianping
Shi, Zhongyue Zhang, Xiaogang Wang, Ambrish Tyagi,
and Amit Agrawal. Context encoding for semantic seg-
mentation. In The IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), June 2018.

References

[Bertasius et al., 2015] Gedas Bertasius, Jianbo Shi, and
Lorenzo Torresani. High-for-low and low-for-high: Ef-
ﬁcient boundary detection from deep object features and
its applications to high-level vision. In Proceedings of the
IEEE International Conference on Computer Vision, pages
504–512, 2015.

[Bertasius et al., 2016] Gedas Bertasius, Jianbo Shi, and
Lorenzo Torresani. Semantic segmentation with bound-
ary neural ﬁelds. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 3602–
3610, 2016.

[Cordts et al., 2016] Marius Cordts, Mohamed Omran, Se-
bastian Ramos, Timo Rehfeld, Markus Enzweiler, Rodrigo
Benenson, Uwe Franke, Stefan Roth, and Bernt Schiele.
The cityscapes dataset for semantic urban scene under-
standing. In Proceedings of the IEEE conference on com-
puter vision and pattern recognition, pages 3213–3223,
2016.

[Deng et al., 2009] J. Deng, W. Dong, R. Socher, L.-J. Li,
K. Li, and L. Fei-Fei. ImageNet: A Large-Scale Hierar-
chical Image Database. In CVPR09, 2009.

[Hariharan et al., 2011] Bharath Hariharan, Pablo Arbel´aez,
Lubomir Bourdev, Subhransu Maji, and Jitendra Malik.
Semantic contours from inverse detectors. 2011.

[He et al., 2016] Kaiming He, Xiangyu Zhang, Shaoqing
Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 770–778, 2016.

[Ioffe and Szegedy, 2015] Sergey

and Christian
Szegedy. Batch normalization: Accelerating deep net-
work training by reducing internal covariate shift. arXiv
preprint arXiv:1502.03167, 2015.

Ioffe

[Jia et al., 2016] Xu Jia, Bert De Brabandere, Tinne Tuyte-
laars, and Luc V Gool. Dynamic ﬁlter networks. In Ad-
vances in Neural Information Processing Systems, pages
667–675, 2016.

[Li et al., 2018] Wei Li, Xiatian Zhu, and Shaogang Gong.
Harmonious attention network for person re-identiﬁcation.
In CVPR, volume 1, page 2, 2018.

[Lin et al., 2017] Tsung-Yi Lin, Piotr Doll´ar, Ross B Gir-
shick, Kaiming He, Bharath Hariharan, and Serge J Be-
longie. Feature pyramid networks for object detection. In
CVPR, volume 1, page 4, 2017.

[Liu and Lew, 2016] Yu Liu and Michael S Lew. Learning
relaxed deep supervision for better edge detection. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 231–240, 2016.

[Liu et al., 2016] Wei Liu, Dragomir Anguelov, Dumitru Er-
han, Christian Szegedy, Scott Reed, Cheng-Yang Fu, and
Alexander C Berg. Ssd: Single shot multibox detector.
In European conference on computer vision, pages 21–37.
Springer, 2016.

