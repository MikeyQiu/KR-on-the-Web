9
1
0
2
 
r
a

M
 
7
2
 
 
]
L
M

.
t
a
t
s
[
 
 
3
v
0
3
7
0
1
.
2
0
9
1
:
v
i
X
r
a

Degenerate Feedback Loops in Recommender Systems

Ray Jiang, Silvia Chiappa, Tor Lattimore, Andr´as Gy¨orgy, Pushmeet Kohli
{rayjiang,csilvia,lattimore,agyorgy,pushmeet}@google.com
DeepMind London, UK

Abstract

Machine learning is used extensively in recommender
systems deployed in products. The decisions made by
these systems can inﬂuence user beliefs and preferences
which in turn affect the feedback the learning system re-
ceives - thus creating a feedback loop. This phenomenon
can give rise to the so-called “echo chambers” or “ﬁlter
bubbles” that have user and societal implications. In this
paper, we provide a novel theoretical analysis that exam-
ines both the role of user dynamics and the behavior of
recommender systems, disentangling the echo chamber
from the ﬁlter bubble effect. In addition, we offer practi-
cal solutions to slow down system degeneracy. Our study
contributes toward understanding and developing solu-
tions to commonly cited issues in the complex temporal
scenario, an area that is still largely unexplored.

Introduction
Recommender systems are increasingly used to provide
users with personalized product and information offer-
ings (Ben Schafer, Konstan, and Riedl, 2001; Lu et al.,
2015; Covington, Adams, and Sargin, 2016). These sys-
tems employ user’s personal characteristics and past be-
haviors to generate a list of items that are individually
tailored to the user’s preferences. Whilst extremely suc-
cessful commercially, there are growing concerns that
such systems might lead to a self-reinforcing pattern of
narrowing exposure and shift in user’s interest, prob-
lems that are often referred to in the literature as “echo
chamber” and “ﬁlter bubble”. A signiﬁcant amount of
research has therefore been devoted to deriving ways to
favor diversity in the set of items an individual may be
exposed to (see Kunaver and Porl (2017) for a review).
However, current understanding of the echo chamber
and ﬁlter bubble effects is limited and experimental
analysis reports conﬂicting results.

In this paper, we deﬁne as echo chamber the effect
of a user’s interest being positively or negatively rein-
forced by repeated exposure to a certain item or cat-
egory of items, thereby generalizing the deﬁnition in
Sunstein (2009), where the term is used to refer to over-

Copyright c(cid:13) 2019, Association for the Advancement of Arti-
ﬁcial Intelligence (www.aaai.org). All rights reserved.

and limited-exposure to similar political opinions rein-
forcing one’s existing beliefs. We focus the deﬁnition
of ﬁlter bubble introduced by Pariser (2011) to describe
just the fact that recommender systems select limited
content to serve users online. We provide a theoretical
treatment that allows us to consider the echo chamber
and ﬁlter bubble effects separately. We view user’s in-
terest as a dynamical system and treat interest extremes
as degeneracy points of the system. We consider dif-
ferent models of dynamics and identify sets of sufﬁ-
cient conditions that make them degenerate over time.
We then use this analysis to understand the role played
by the recommender system. Finally, we showcase the
interplay between the user’s dynamics and the recom-
mender system actions in a simulation study using syn-
thetic data and several classic bandit algorithms. The re-
sults reveal several pitfalls of recommender system de-
sign and point towards mitigation strategies.

Related Work
Through an analysis on the MovieLens dataset, Nguyen
et al. (2014) found that the diversity of items recom-
mended, and those users engage with, gets narrower
over time. The paper asks whether there is a “natu-
ral” tendency of degeneration in user interest. Our paper
takes steps toward answering this question by providing
theoretical conditions for user interest degeneracy.

In the social sciences literature, Flaxman, Goel, and
Rao (2016) found that online services are associated
with increased political polarization between users as
well as increased exposure to the less preferred side
of political opinions. Their seemingly counter-intuitive
ﬁndings are not contradictory according to our results:
systems with some level of random exploration can be
degenerative. Barber´a et al. (2015) also presented ev-
idence of echo chamber related to political issues on
Twitter. On the other hand, Borgesius et al. (2016);
Beam, Hutchens, and Hmielowski (2018); Nechush-
tai and Lewis (2018) found counter-evidence on online
news consumption. Another work by Bakshy, Messing,
and Adamic (2015) measured the effect of user choices
separately from that of the recommendation algorithm,
and found that individual choices play a larger role than

...

Recommender system

User

...

θt

at

ct

µt

θt+1

at+1

ct+1

µt+1

...

...

Figure 1: Model of interaction between a recommender
system and user over time. Continuous and dashed links
indicate existing or possible dependencies, respectively.

the algorithm in creating echo chamber on Facebook.
This supports our viewpoint that user interests degen-
erate or not depending on their internal dynamics, the
recommender system can only slow down or accelerate
the process of degeneration.

Model
We consider a recommender system that interacts with a
user over time1. At every time step t, the recommender
system serves l items (or categories of items, e.g. news
articles, videos, or consumer products) to a user from a
ﬁnite or countably inﬁnite item2 set M. In general, the
goal of the system is to present items to a user that she is
interested in: we assume that, at time step t, the user’s
interest in an item a ∈ M is described by a function
µt : M → R such that µt(a) is large (positive) if the
user is interested in the item, and small (negative) if she
is not3.

t , . . . , al

t ), . . . , µt(al

Given a recommendation at = (a1

t) ∈ Ml,
the user provides some feedback ct based on her current
interests µt(a1
t). This interaction has multi-
ple effects: in the traditional literature for recommender
systems, the feedback ct is used to update the internal
model θt of the recommender system that has been used
to obtain the recommendation at, and the new model
θt+1 may depend on θt, at, and ct. In practice θt usually
predicts the distribution of user feedback to determine
which items at should be presented to the user. In this
paper we focus on another effect and consider explicitly
that the user’s interaction with the recommender system
may change her interest in different items for the next
interaction, thus the interest µt+1 may depend on µt,
at, and ct. The full model of interaction is depicted in
Fig. 1.

We are interested in studying the evolution of the

1For simplicity, in this paper we restrict ourselves to the
case of a single user, and leave the case of multiple users pos-
sibly inﬂuencing each-other interests to future work.

2Throughout the paper, “items” also mean categories of

items.

3Whilst we focus on µt(a) ∈ R, we show in Remark 5,
Appendix B that our results can be extended to the case where
µt belongs to a bounded open interval.

user’s interest. An example of such an evolution is that
the interest is reinforced by user interactions with the
recommended items, that is, µt+1(a) > µt(a) if the
user clicks on an item a at time step t, while µt+1(a) <
µt(a) if a is shown but not clicked (here ct ∈ {0, 1}l
can be deﬁned as the indicator vector of clicks to the
corresponding items).

To analyze the echo chamber or ﬁlter bubble effect,
we are interested in understanding when the user’s in-
terest changes extremely, which, in our model, trans-
lates to µt(a) taking values arbitrarily different from the
initial interest µ0(a): large positive values indicate that
the user becomes extremely interested in item a, while
large negative values indicate that the user dislikes a.
Formally, for a ﬁnite item set M, we can ask if the L2
norm (cid:107)µt − µ0(cid:107)2 = (cid:0)(cid:80)
can
grow arbitrarily large: the user’s interest sequence µt is
called weakly degenerate if

a∈M(µt(a) − µ0(a))2(cid:1)1/2

lim sup
t→∞

(cid:107)µt − µ0(cid:107)2 = ∞ almost surely4.

(1)

A stronger notion of degeneracy, which also requires
that once µt drifted away from µ0 it remains so, is
strong degeneracy: the sequence µt is strongly degen-
erate if

lim
t→∞

(cid:107)µt − µ0(cid:107)2 = ∞

almost surely.

(2)

In the next section we show that weak or strong de-
generacy occurs under mild sufﬁcient conditions on the
evolutionary dynamics of µt.

There are multiple ways to extend the above deﬁni-
tions to the case of an inﬁnite item set M. For simplic-
ity, we only consider here replacing (cid:107)µt − µ0(cid:107)2 with
supa∈M |µt(a) − µ0(a)| in Eqs. (1) and (2), which is
equivalent to the original deﬁnitions when M is ﬁnite5.

User Interest Dynamics – Echo Chamber
As items often represent diverse categories of things, we
make the simplifying assumption that they are indepen-
dent from each other. By setting l = 1 and a1
t = a for
all t (i.e., M = {a}), we can remove the inﬂuence of
the recommender system and consider the dynamics of
the user’s interest separately. This allows us to analyze
the echo chamber effect: what happens to the interest
µt(a) if item a is served inﬁnitely often (i.o.).

Since a is ﬁxed, to simplify the notation, we write
µt instead of µt(a) in this section. Given at, according
to Fig. 1, µt+1 is a—possibly stochastic—function of
µt (as µt+1 depends on ct and µt, and ct depends on
µt). Below we discuss the general case when the drift
µt+1 − µt is a nonlinear stochastic function; determin-
istic models for the drift are considered in Appendix B.

4i.e. with probably 1.
5As such, we could have used supa∈M |µt(a) − µ0(a)| in
our original deﬁnitions, but we prefer (cid:107)µt − µ0(cid:107)2 as it also
provides some information about the “average” deviation of
the user’s interest over the different items at any ﬁnite time t.

2

Nonlinear Stochastic Model. We assume that µ0 ∈
R is ﬁxed and that µt+1 = µt +f (µt, ξt), where (ξt)∞
t=1
is an inﬁnite sequence of independent uniformly dis-
tributed random variables that introduce noise into the
system (i.e. µt+1 is a stochastic function of µt). The
function f : R × [0, 1] is assumed to be measurable, but
otherwise arbitrary. Denoting the uniform distribution
over [0, 1] by U ([0, 1]), let

¯f (µ) = Eξ∼U ([0,1])[f (µ, ξ)]
be the expected increment µt+1 − µt when µt = µ. We
also deﬁne

F (µ, x) = Pξ∼U ([0,1])(f (µ, ξ) ≤ x)
to be the cumulative distribution of the increment. The
asymptotic behavior of µt depends on f , but under
mild assumptions the system degenerates weakly (The-
orem 1) or strongly (Theorem 2)6.
Theorem 1 (weak degeneracy). Assume that F is con-
tinuous at (µ, 0) for all µ ∈ R and there exists a µ◦ ∈ R
such that 1) F (µ, 0) < 1 for all µ ≥ µ◦, 2) F (µ, 0) > 0
for all µ ≤ µ◦. Then the sequence µt is weakly degen-
erate, i.e. lim supt→∞ |µt| = ∞ almost surely.

The assumptions guarantee that within any closed
bounded interval there is a constant probability that the
random walk escapes to the left/right when starting to
the left/right of µ◦ respectively. Under stronger condi-
tions it is possible to guarantee the divergence of the
random walk. We state a simple version of the theorem,
but note that the result can be generalized in many ways.
Theorem 2 (strong degeneracy). Assume that the con-
ditions of Theorem 1 hold, and additionally that there
exists c ∈ R such that |µt+1 − µt| ≤ c almost surely
and there exists an (cid:15) > 0 such that for all sufﬁciently
large µ it holds that ¯f (µ) > (cid:15), and for all sufﬁciently
small µ it holds that ¯f (µ) < −(cid:15). Then limt→∞ µt = ∞
or limt→∞ µt = −∞ almost surely.

Intuitively, weak degeneracy occurs in a stochastic
environment if the user’s interest has some non-zero
probability of drifting up when above some threshold,
and of drifting down when below. Strong degeneracy
holds if additionally |µt+1 − µt| is bounded and for µt
sufﬁciently large/small the increment µt+1−µt has pos-
itive/negative drift that is larger than a constant.

Theorems 1 and 2 show that the user’s interest de-
generates under very mild conditions, in particular, in
the model we consider in our simulation studies. Thus,
in such cases degeneracy can only be avoided if an item
(or item category) is showed only ﬁnitely many times;
otherwise one can only hope to control how fast µt de-
generates (i.e. tends to ∞).

System Design Role – Filter Bubble
In the previous section we discussed conditions for de-
generacy for different user interest dynamics. In this

6The proofs of these theorems are given in Appendix A.

section we examine the other side of the story, the inﬂu-
ence of recommender system actions in creating ﬁlter
bubbles. We typically do not know the dynamics of the
user’s interest in the real world. However, we consider
the relevant scenario to the echo chamber/ﬁlter bubble
problem where user’s interest in some items has degen-
erative dynamics, and examine how to design a recom-
mender system that slows down the degeneracy process.
We consider three dimensions, namely model accuracy,
amount of exploration, and growing candidate pool.

Model Accuracy. One common goal of recommender
systems designers is to increase the prediction accuracy
of the internal model θt. How does model accuracy cou-
pled with greedy optimal at affect the speed of degener-
ation? We examine this question for the extreme case of
exact predictions, i.e. θt = µt, we call such a prediction
model the oracle model. We argue that under the surfac-
ing assumption explained below, the oracle model cou-
pled with greedily optimal action selection results in the
quickest degeneracy.

In order to analyze the problem concretely, we focus
on the degenerate linear dynamics model for µt(a) for
a ∈ M, i.e. µt+1(a) = (1 + k)µt(a) + b. Then we can
solve for µt(a), obtaining

µt(a) = (µ0(a) +

)(1 + k(a))t −

b(a)
k(a)

b(a)
k(a)

,

for |1 + k(a)| > 1 (see Appendix B).

Surfacing Assumption: Let [m] = {1, 2, . . . , m} be
the candidate set of size m. If a subset of items S ⊂
[m] leads to positive degenerate dynamics (i.e. µt(a) →
+∞ for all a ∈ S), then we assume that there exists a
time τ > 0 such that, for all t ≥ τ , S takes up the top
|S| items in terms of values of µt, sorted by the base
value of the exponential function, |1 + k(a)|.

The surfacing assumption makes sure that the quick-
est degenerating items surface out to the top list given
enough time of exposure. It can be generalized to non-
linear stochastic dynamics of µt provided that the items
from S have an almost surely stable ordering of degen-
eracy speed |µt(a) − µ0(a)|/t over time.

Under the general surfacing assumption, after time τ ,
the quickest way to degeneration is to serve the top l
items according to µt, or θt of the oracle model. Even
if the assumption is violated to some degree, the oracle
model still leads to degeneracy very efﬁciently by pick-
ing the top l items according to µt which are likely to
receive positive feedback due to high µt, and therefore
increasing µt+1 and reinforcing the past choices.

In practice the recommender system models are inac-
curate. We can think of inaccurate models as the oracle
model with different levels of noises added to θt. We
discuss inaccurate models in the next section.

Amount of Exploration. Consider a type of (cid:15)-
random exploration where at always picks the top l
items out of a ﬁnite candidate pool [m] with uniform
(cid:15) noise on θt, i.e. according to θ(cid:48)

t = θt + U ([−(cid:15), (cid:15)]).

3

Given the same model sequence θt, the bigger (cid:15) is,
usually the slower the system degenerates. However, in
practice θt is learned from observations, and the random
exploration added to an oracle model may in fact accel-
erate degeneration: random exploration can help reveal
the most positively degenerating items over time mak-
ing the surfacing assumption more likely to be true (we
show this phenomenon in the simulation experiments
below, Fig. 5). In addition, if user interests have degen-
erative dynamics, even recommending items uniformly
at random leads to degeneration, albeit quite slowly.

How do we then make sure that the recommender
system does not make user interests degenerate? One
way is to limit the number of times an item for which
the user’s interest dynamics is degenerative is served to
the user. In practice it is hard to detect which items cor-
respond to degenerative dynamics, however we can gen-
erally prevent degeneration if all items are served only
a ﬁnite number of times, which suggests having an ever
growing pool of candidate items.

Growing Candidate Pool M. With a growing candi-
date pool, at every time step an additional set of new
items becomes available to be served to the user. Hence
the domain of the function µt expands as t increases.
Adding new items at least linearly often is a necessary
condition to avoid possible degeneration, since in a ﬁ-
nite or any sublinearly growing candidate pool, by the
pigeon hole principle, there must exist at least one item
that is served i.o., which is degenerate in the worst case
scenario (also under general conditions described e.g. in
Theorem 2). However, with an at least linearly growing
candidate pool M the system can potentially impose the
maximum number of times any item is served to a user
and prevent degeneration.

Simulation Experiments
In this section, we consider a simple degenerative dy-
namics for µt and examine degeneration speed under
ﬁve different recommender system models. We further
demonstrate that adding new items to the candidate pool
can be an effective solution against system degeneracy.
We create a simulation for the model of interaction
between a recommender system and a user of Fig. 1.
Consider a possibly growing candidate pool of items of
initial size m0 and of size mt at time step t. At each
time step t, a recommender system picks the top l out
t , . . . , al
of the mt items at = (a1
t) according to the in-
ternal model θt to serve to a user. The user considers
each of the l items independently and chooses to click
on a (possibly empty) subset of them, thereby gener-
ating a binary vector ct of size l where ct(ai
t) gives
the user feedback on item ai
t) ∼
Bernoulli(φ(µt(ai
t))), where φ is the sigmoid func-
tion φ(x) = 1/(1 + e−x). The system then updates the
model θt+1 based on the past actions, feedbacks and the
current model parameter θt. We assume that the user’s
interest increases/decreases by δ(a(cid:48)) if the item a(cid:48) re-

t, according to ct(ai

(a) Optimal Oracle, µt

(b) Optimal Oracle, serving rate

(c) Oracle, µt

(d) Oracle, serving rate

(e) TS, µt

(f) TS, serving rate

(g) UCB, µt

(h) UCB, serving rate

(i) Random, µt

(j) Random, serving rate

Figure 2: Echo chamber and ﬁlter bubble effect for Op-
timal Oracle, Oracle, TS, UCB and Random models.
Sorted user interest µt and serving rates are plotted ev-
ery 500 steps. Under all models except for the Random
Model, very quickly both the top items served and the
top user interests narrow down to the (l =) 5 most pos-
itively reinforced items.

ceives/does not receive a click, i.e.

µt+1(ai

t) − µt(ai

t) =

(cid:26)δ(ai
t)
−δ(ai
t)

t) = 1,

if ct(ai
otherwise,

(3)

4

Figure 3: System evolves for 5,000 time steps with re-
port interval 500. The results are averaged over 30 runs
with the shaded area indicating the standard deviation.
In terms of the degeneracy speed, Optimal Oracle >
Oracle > TS > UCB > Random.

where the function δ maps from the candidate set to R.
From Theorem 2, we know that µt → ±∞ for ev-
ery item. In the experiment, we set l = 5 and sam-
ple the drift δ from a uniform random distribution
U ([−0.01, 0.01]). The user’s initial interest µ0 for all
items is independently sampled from a uniform random
distribution U ([−1, 1]).

The internal recommender system model is updated

according to following ﬁve algorithms:

• Random Model: Instead of picking top items, the set
of items at = (a1
t) is sampled from a uniform
random distribution over the candidate set U ([mt]).

t , . . . , al

• Oracle: θt+1(ai
• Optimal Oracle: θt+1(ai

t) = µt+1(ai

t), ∀i.
t) = δ(ai

t), ∀i. This model
does not pick the highest l items according to µt but
according to δ. Thus, it always picks the fastest de-
generating items, therefore maximizing both the long
term user engagement (cid:80)∞
t=0 (cid:107)ct(cid:107)1 and the degener-
acy speed. For a ﬁxed candidate pool M, this model
is equivalent to an Oracle that satisﬁes the Surfacing
Assumption.

• Upper Conﬁdence Bound Multi-armed Bandit Al-
gorithm (UCB) (Lai, 1987; Auer, Cesa-Bianchi, and
Fischer, 2002; Lattimore and Szepesv´ari, 2019): We
use the version of UCB algorithm in Chapter 8
of Lattimore and Szepesv´ari (2019), however most
UCB algorithms perform similarly to the purpose
of this experiment. The algorithm prioritizes serv-
ing any item from the candidate set that has never
been served before. This treatment includes the ini-
tial m0 items as well as later whenever new items
are added to the candidate pool. At time step t, UCB
serves l(cid:48)(0 ≤ l(cid:48) ≤ l) previously unserved items and
the top l − l(cid:48) items according to values of θt. Deﬁne
f (t) = 1 + t log2(t) and we use the following model
update θt+1(a) = ˆct(a) + (cid:112)2 log f (t)/Ta(t), where
ˆct is the empirical average of feedbacks on item a,

(a) Degeneracy rate vs candidate pool size vs time

(b) Degeneracy rate vs candidate pool size

Figure 4: (a) Degeneracy surfaces for Optimal Oracle
(grey), UCB (green) and TS (orange) up to time T =
5, 000 while varying candidate pool sizes log10 m =
1, 2, 3, 4. A larger candidate pool requires a longer time
for exploration for the bandit algorithms, but among
the three models UCB slows down system degeneracy
the most given a large candidate pool. (b) Degeneracy
speeds at T = 20, 000 of Optimal Oracle and the Or-
acle are higher given a larger size of the candidate set,
but those of the and Random Model, UCB, and TS are
lower.

i.e. ˆct(a) = (cid:80)t
ct(a)/Ta(t), and Ta(t) is
the number of times item a has been served up to
time t, i.e. Ta(t) = (cid:80)

0≤i≤t,a∈ai

1.

0≤i≤t,a∈ai

• Thompson Sampling Multi-armed Bandit Algo-
rithm (TS) (Thompson, 1933): We initialize α0(a) =
1, β0(a) = 1 for any new item a. If a is served at
time t, we perform the update αt+1(a) = αt(a) +
ct(a), βt+1(a) = βt(a)+1−ct(a). At any time t, the
internal model θt is sampled from the corresponding
beta distribution Beta(αt, βt).

Echo Chamber & Filter Bubble Effect
We examine the echo chamber and ﬁlter bubble effects
by running the simulation on a candidate pool of ﬁxed
size mt = m = 100 with time horizon T = 5, 000.

In Fig. 2, we show the degeneration of user interest
µt (left column) and the serving rate (right column) of
every item as each recommender model evolves in time.
The serving rate of an item shows how often it is served

5

Figure 5: Degeneracy speed for the Oracle model with
different noise levels (cid:15) ∈ [0, 10] up to T = 20, 000.
Adding noise to Oracle ((cid:15) = 0) accelerates degener-
ation but as the noise level grows, degeneracy slows
down.

within the report interval. In order to see the distribu-
tion clearly, we sort the items according to the z-values
at the report time. Although all models cause user inter-
est degeneration, the degeneration speeds are quite dif-
ferent (Optimal Oracle > Oracle, TS, UCB > Random
Model). The Oracle, TS and UCB optimize based on
µt and so we see a positive degenerative dynamics for
µt. The Optimal Oracle optimizes on the degeneration
speed directly and not on µt so we see both a positive
and negative degeneration in µt. The Random Model
also drifts µt in both directions, but at a much slower
rate. However, overall except for the Random Model,
very quickly both the top items served and the top user
interests narrow down to the (l =) 5 most positively re-
inforced items.

Speed of Degeneracy
Next, we compare the degeneracy speed for the ﬁve rec-
ommender system models on both ﬁxed and growing
candidate sets. As the L2 distance that measures system
degeneracy is asymptotically linear for all ﬁve models
(see Appendix C), we quantify degeneracy speeds by
compare empirically (cid:107)µt − µ0(cid:107)2/t in ﬁnite candidate
pools for different experiment setups.

Figure 3 shows the degeneracy speed of ﬁve models
averaged across 30 runs when we take m = 100 and
evolve the system for T = 5, 000 steps. We see that the
Optimal Oracle results in the fastest degeneration by
far, followed by the Oracle, TS and UCB. The Random
Model offers the slowest degeneracy speed.

The Effect of Candidate Pool Size.
In Fig. 4a we
compare the Optimal Oracle, UCB and TS’ degeneracy
speed (cid:107)µt − µ0(cid:107)2/t up to 5,000 time steps and candi-
date pool sizes m = 10, 102, 103, 104. Apart from the
Random model, we see that UCB slows down system
degeneracy the most given a large candidate pool since
it is forced to explore any unserved item ﬁrst. A larger
candidate pool requires a longer time for exploration

6

Figure 6: Comparison of the ﬁve models with growing
candidate pools at different rates η = 0, 0.5, 1.0, degen-
eracy up to T = 10, 000, averaged over 10 runs. Both
the Oracle and the Optimal Oracle for all growth rates
are degenerate. The Random Model and UCB stop de-
generation at sublinear growth while TS model requires
linear growth to stop degeneration.

for the bandit algorithms. As the candidate pool size
grows to 10,000 UCB’s degeneracy speed never peaks
up given the time horizon, but will eventually grow
given a longer time. TS has higher degeneracy speed due
to weaker exploration on new items. The Optimal Ora-
cle accelerates degeneration given a larger pool, as it
can pick potentially faster degenerative items than from
a smaller pool.

Additionally, in Fig. 4b we plot all ﬁve models degen-
eracy speed for T = 20, 000 against the same changing
candidate pool sizes. The degeneracy speed of the Opti-
mal Oracle and the Oracle increases with the size of the
candidate set, but that of the and Random Model, UCB,
and TS decreases. In practice, having a large candidate
pool can be a temporary solution to slow down system
degeneration.

The Effect of the Noise Level. Next we show the
inﬂuence of internal model inaccuracy on degeneracy
speed. We compare the Oracle model with different
amounts of uniformly random noises, i.e. the system
serves the top l items according to the noisy internal
model θ(cid:48)
t = θt + U ([−(cid:15), (cid:15)]). The candidate pool has
ﬁxed size m = 100. In Fig. 5, we vary (cid:15) from 0 to
10. Counter-intuitively adding noise to Oracle acceler-
ates degeneration since faster degenerative items may
be selected by chance than those ﬁxed set of top l items
ranked by µ0, and more likely satisﬁes the Surfacing
Assumption. Given (cid:15) > 0, as expected, we see a nice
monotonically increasing damping effect on degeneracy
speed as the noise level grows.

Growing Candidate Pool. We extend the deﬁnition
of degeneracy speed to an inﬁnite candidate pool by
computing supa∈M |µt(a) − µ0(a)|/t (see Appendix C
for an asymptotic analysis). Since the degeneracy speed
may not be asymptotically linear for all ﬁve models,
we examine directly the sup distance supa∈M |µt(a) −
µ0(a)| over 10,000 time steps. To construct growing
candidate pools at different growth speed, we deﬁne

a growth function mt = (cid:98)m0 + ltη(cid:99) by varying the
growth parameter7 η = 0, 0.5, 1, where m0 = 100. In
Fig. 6 we average the results over 10 independent runs.
Both the Oracle and the Optimal Oracle for all growth
rates are degenerate. The Random Model stops degener-
ation at sublinear growth, η = 0.5, so does UCB thanks
to forced exploration on previously unserved items, al-
though its trajectory has a small upward tilt. The TS
model degenerates at sublinear growth but stops de-
generation at linear growth η = 1. For all models, the
higher the growth rate η, the slower they degenerate, if
they do at all. Overall when applicable, an ideally lin-
early growing candidate set and continuous random ex-
ploration seem to be good remedies against an adversar-
ial dynamics of µt to best prevent degeneracy.

Conclusion
We provided a theoretical analysis of the echo cham-
ber and ﬁlter bubble effects for recommender systems.
We used the dynamical system framework to model
user’s interest and treated interest extremes as degener-
acy points of the system. We gave formal deﬁnitions of
system degeneracy and provided sufﬁcient conditions
which make the system degenerate with both deter-
ministic and stochastic dynamics. On the recommender
system side, we discussed the inﬂuence on degener-
acy speed of three independent factors in system de-
sign, i.e. model accuracy, amount of exploration, and
the growth rate of the candidate pool. An oracle model
often leads to quick degeneracy of the system, while
continuous exploration and a large candidate pool size
can help slow it down. The best remedies against sys-
tem degeneracy we found are continuous random explo-
ration and growing the candidate pool at least linearly.
Our work has two main limitations. First, since user
interests are hidden variables that are not directly ob-
served, a good measure or proxy for user interests is
necessary in practice to study degeneration reliably.
Second, we assumed that items and users are indepen-
dent from each other – we will extend the theoreti-
cal analysis to the case of possibly mutually dependent
items and users in a future work.

Acknowledgments
We would like to thank William Isaac, Michael Math-
ieu, Krishnamurthy Dvijotham, Timothy Mann and Di-
lan Gorur, for helpful discussions and advice.

References
Auer, P.; Cesa-Bianchi, N.; and Fischer, P. 2002. Finite-
time analysis of the multiarmed bandit problem. Ma-
chine Learning 47(2):235–256.

Bakshy, E.; Messing, S.; and Adamic, L. A. 2015. Ex-
posure to ideologically diverse news and opinion on
facebook. Science 348:1130–1132.

7η = 0 gives a ﬁxed candidate pool, 0 < η < 1 gives

sub-linear growth, η = 1 gives linear growth.

7

Barber´a, P.; Jost, J. T.; Nagler, J.; Tucker, J. A.; and
Bonneau, R. 2015. Tweeting from left to right: Is
online political communication more than an echo
chamber? Psychological Science 26(10):1531–1542.

Beam, M. A.; Hutchens, M. J.; and Hmielowski, J. D.
2018. Facebook news and (de)polarization: reinforc-
ing spirals in the 2016 us election. Information, Com-
munication & Society 21(7):940–958.

Ben Schafer, J.; Konstan, J.; and Riedl, J. 2001. E-
commerce recommendation applications. Data Min-
ing and Knowledge Discovery 115–153.

Borgesius, F. J. Z.; Trilling, D.; M¨oller, J.; Bod´o, B.;
de Vreese, C. H.; and Helberger, N. 2016. Should we
worry about ﬁlter bubbles? Internet Policy Review.

Covington, P.; Adams, J.; and Sargin, E. 2016. Deep
neural networks for youtube recommendations.
In
Proceedings of the 10th ACM Conference on Recom-
mender Systems (RecSys).

Flaxman, S.; Goel, S.; and Rao, J. 2016. Filter bub-
bles, echo chambers, and online news consumption.
Public Opinion Quarterly 80:298–320.

Galor, O. 2007. Discrete Dynamical Systems. Springer.

Kunaver, M., and Porl, T. 2017. Diversity in recom-
mender systems a survey. Knowledge-Based Systems
123(C):154–162.

Lai, T. L.

1987.

Adaptive treatment allocation
and the multi-armed bandit problem. Ann. Statist.
15(3):1091–1114.

Lattimore, T., and Szepesv´ari, C. 2019. Bandit Algo-

rithms. Cambridge (to appear).

Lu, J.; Wu, D.; Mao, M.; Wang, W.; and Zhang, G.
2015. Recommender system application develop-
ments: A survey. 74.

Nechushtai, E., and Lewis, S. C. 2018. What kind of
news gatekeepers do we want machines to be? ﬁl-
ter bubbles, fragmentation, and the normative dimen-
sions of algorithmic recommendations. Computers in
Human Behavior.

Nguyen, T.; Hui, P.; Harper, F.; Terveen, L.; and Kon-
stan, J. 2014. Exploring the ﬁlter bubble: The effect
of using recommender systems on content diversity.
In Proceedings of the 23rd international conference
on World wide web, 677–686.

Pariser, E. 2011. The Filter Bubble: What the Internet

is Hiding from You. Penguin UK.

Sunstein, C. R. 2009. Republich.com 2.0. Princeton

University Press.

Thompson, W. R. 1933. On the likelihood that one
unknown probability exceeds another in view of the
evidence of two samples. Biometrika 25(3/4):285–
294.

A Proofs
Proof of Theorem 1. Let Pµ denote the measure carry-
ing (µt)∞
t=1 when µ0 = µ. Assume without loss of gen-
erality that µ◦ = 0 and let B > 0 be arbitrary. The
result will follow by showing that for all µ ∈ [−B, B]
it holds that

Pµ(exists t : µt /∈ [−B, B]) = 1 .

(4)

To see this suppose that
Pµ(lim sup
t→∞

|µt| < ∞) > 0 .

Then there exists a B > 0 such that

Pµ(exists t : µt /∈ [−B, B]) < 1 ,
which is a contradiction. In order to prove (4) notice that
compactness of [0, B] and [−B, 0] and the continuity
of F at (µ, 0) for all µ ensures there exists an (cid:15) > 0
depending only on B such that 1 − F (µ, (cid:15)) ≥ (cid:15) for
all µ ∈ [0, B] and F (µ, −(cid:15)) ≥ (cid:15) for all µ ∈ [−B, 0].
Hence for n = 1 + B/(cid:15)

inf
µ∈[−B,B]

Pµ(exists t ≤ n : µt /∈ [−B, B]) ≥ (cid:15)n .

Let Ek be the event that µt ∈ [−B, B] for all t ∈ {nk +
1, . . . , n(k + 1) + 1}. Then

Pµ(µt ∈ [−B, B] for all t) = Pµ(Ek for all k ≥ 0)

Pµ(Ek | E1, . . . , Ek−1)

∞
(cid:89)

k=0
∞
(cid:89)

=

≤

(1 − (cid:15)n) = 0 ,

k=0
which completes the proof.

Proof of Theorem 2. We prove that if B is sufﬁciently
large and µ > B and τ = min{t : µt ∈ [−B, B]}, then

and

(cid:16)

Pµ

lim
t→∞

(cid:17)

µt = ∞

>

1
2

(cid:17)

(cid:16)

Pµ

lim
t→∞

µt = ∞ or τ < ∞

= 1 .

(5)

(6)

For µ < −B the same holds, but with µt tending to
−∞. To see why this implies the result, notice that
the previous theorem shows that µt eventually leaves
[−B, B] almost surely. Each time this happens there is
more than 0.5 probability of divergence and a certainty
of either divergence or returning to [−B, B]. The con-
ditional Borel-Cantelli theorem concludes the proof. To
see why (5) and (6) hold, let

Mn =

(µt+1 − µt − ¯f (µt)) ,

n
(cid:88)

t=1

tingales,

lim
n→∞

Mτ ∧n/n = 0 a.s. ,

which implies that either τ < ∞ or µn → ∞ almost
surely. To see the latter case, suppose µ is sufﬁciently
large, we compute

µn+1 = Mn + µ1 +

f (µt)

> Mn + µ1 + (cid:15)n → ∞

n
(cid:88)

t=1

since Mn/n → 0 a.s. A similar argument applies
when µ is sufﬁciently small. Finally, Eq. (5) holds by
Azuma’s inequality.

B More on User Interest Dynamics

Linear Deterministic Model
Recall that since a is ﬁxed, to simplify the notation,
we write µt, ct instead of µt(a), ct(a) in this section.
We assume ct = g(µt) for some deterministic function
g and analyze the one-dimensional, autonomous, ﬁrst-
order discrete dynamical system:

µt+1 = µt + h(ct) = µt + f (µt),
(7)
where f = h◦g. In the simple case in which f is a linear
function, i.e. f (µt) = kµt + b for a linear coefﬁcient k
and constant term b, Eq. 7 takes the form

µt+1 = (1 + k)µt + b.

By unrolling Eq. (8) over time we obtain

µt = (1 + k)tµ0 + b

(1 + k)i

t−1
(cid:88)

i=0

(cid:26)µ0 + bt, if k = 0

=

(µ0 + b

k , if k (cid:54)= 0.

k )(1 + k)t − b
For k = 0, the user’s interest is not inﬂuenced by the
recommender system but drifts with the constant b – this
case occurs in the real world with probability 0.
For k (cid:54)= 0, the steady state equilibrium, obtained from
solving the equation ¯µ = ¯µ + k ¯µ + b, is given by ¯µ =
− b
k with ¯µ in Eq. 10 and taking the
limit t → ∞ on both sides, we obtain

k . Substituting − b

lim
t→∞

µt = (µ0 − ¯µ) lim
t→∞

(1 + k)t + ¯µ,

(11)

namely,

lim
t→∞

µt =






¯µ, if |1 + k| < 1,
¯µ, if |1 + k| > 1 and µ0 = ¯µ,
alternating {µ0, 2¯µ − µ0}, if k = −2,
∞ if 1 + k > 1,

(8)

(9)

(10)

(12)
(13)

and, lim sup

µt = ∞ when 1 + k < −1.

t→∞

which is a martingale with bounded increments since
|µt+1 − µt| are bounded. Now Mτ ∧n is also a martin-
gale. Then by the strong law of large numbers for mar-

Therefore, no matter how the system selects items, in
the ﬁrst three cases of Eq. (12) the user interest model
over the item a in question is always bounded over time.

8

Of these, only the ﬁrst case |1 + k| < 1, or equivalently
−2 < k < 0, will occur with probability different from
0.

On the other hand, for k > 0 the recommender sys-
tem will degenerate strongly with µt growing at an ex-
ponential rate. For k < −2, the recommender system
will degenerate weakly with supi<t µi growing expo-
nentially.

In summary, we can draw the following conclusions
when an item a is served i.o.: 1) for k > 0 or k < −2,
the user interest µt degenerates by growing exponen-
tially, and therefore the recommender system needs to
exert control on how frequent such items are shown to
the user in order to control the speed of degeneracy of
µt; 2) in all other cases, the user interest µt does not
degenerate (−2 ≤ k < 0), or the system cannot control
linear degeneracy (k = 0, improbable case).

Non-linear Deterministic Model
If f is a non-linear deterministic function, the steady
state equilibrium is reached at zeros of f . Sufﬁcient (but
not necessary) conditions for global stability are given
by the following theorem (Galor, 2007):
Theorem 3 (sufﬁciency). If g : R → R is a contraction
mapping, i.e. if

|g(yt+1) − g(yt)|
|yt+1 − yt|

< 1, ∀t = 0, 1, 2, . . . , ∞,

then a stationary equilibrium of the difference equation
yt+1 = g(yt) exists and is unique and globally (asymp-
totically) stable.

Thus if g = I + f (where I is the identity func-
tion) is a contraction mapping, then there exists a steady
state equilibrium that is unique and globally stable, and
the system will not degenerate. Both requiring a glob-
ally stable steady state equilibrium and requiring g to
be a contraction mapping are strong sufﬁcient condi-
tions. Moreover it is almost always impossible to verify
it in practice since we don’t know the actual function
g. Thus we gave three examples of sufﬁcient conditions
that are used to describe the general dynamics of user
interests. In the ﬁrst example, users respond to an item if
their interests level exceed some action threshold. With
each feedback, their interest level changes and so does
the action threshold. If after a while the changes in ac-
tion thresholds will always be smaller than user inter-
est changes and the user interest’s total variation ranges
over R, then the system degenerates.
Theorem 4 (sufﬁciency). Let {d1, d2, . . .} be an inﬁ-
nite sequence, dt ∈ R. Then if the user interest for an
item has the following dynamics,

µt > dt ⇐⇒ µt+1 > µt,
(14)
∃t0 > 0 s.t. |dt+1 − dt| ≤ |µt+1 − µt|, ∀t ≥ t0, (15)
∞
(cid:88)

|µt+1 − µt| = ∞,

(16)

t=0

then it degenerates strongly as t → ∞.

Proof. We prove that µt → ±∞ as t → ∞. At time
t0, either µt0 > dt0 or µt0 ≤ dt0 . First we consider the
case where µt0 > dt0. At the next time step t0 +1, there
are again two different cases:

1. dt0+1 < dt0 : it implies that µt0+1 > µt0 > dt0 >

dt0+1 by Condition 14.

2. dt0+1 ≥ dt0: by Condition 15, dt0+1−dt0 ≤ µt0+1−

µt0 and thus

µt0+1 ≥ dt0+1 − dt0 + µt0 > dt0+1

using µt0 − dt0 > 0. Hence in both cases we have
µt0+1 > dt0+1. Applying the same argument to every
time step, we also have

µt0 > dt0 =⇒ µt0+1 > dt0+1
=⇒ µt0+2 > dt0+2
=⇒ . . .

which implies

µt0 < µt0+1 < µt0+2 < . . .
By Condition 16, we conclude that if µt0 > dt0 then
µt → ∞ as t → ∞.

In the other case, µt0 ≤ dt0 ⇐⇒ µt0+1 ≤ µt0 . Sim-
ilarly at time t0 + 1, we have either dt0+1 < dt0 or
dt0+1 ≥ dt0. Following the same argument as above
and reversing the inequality signs, we have
µt0 ≤ dt0 =⇒ µt0+1 ≤ dt0+1
=⇒ µt0+2 ≤ dt0+2
=⇒ . . .

which implies

µt0 ≤ µt0+1 ≤ µt0+2 ≤ . . .
By Condition 16, we conclude that if µt0 ≤ dt0 then
µt → −∞ as t → ∞.

Scale-invariance
Let M be the candidate pool of items, which is also the
domain of function µt.
Remark 5 (scale-invariance). Let µt : M → D for
any open interval D ⊂ R. All sufﬁciency theorems still
hold if we deﬁne the system degeneracy for µt as the
following. We call µt : M → D degenerate iff there
exists a monotonic, continuous function ψ : D → R
such that lim supt→∞ (cid:107)ψ ◦ µt − ψ ◦ µ0(cid:107)2 = ∞.

If we deﬁne νt = ψ◦µt, then all sufﬁciency theorems
readily apply to νt and the conclusions hold for µt since
(cid:107)νt − ν0(cid:107)2 = (cid:107)ψ ◦ µt − ψ ◦ µ0(cid:107)2.

C Degeneracy Speed Analysis
We analyze the system degeneracy (cid:107)µt − µ0(cid:107)2 (when
the candidate pool M is ﬁnite) and supa∈M |µt(a) −
µ0(a)| (when M is inﬁnite) asymptotically in the or-
der of t. As t → ∞, µt → ∞ for the selected

9

(cid:115)

(cid:88)

a

a

(cid:115)

(cid:88)

items. Thus the selected items are asymptotically al-
most surely clicked, and hence for any such item a,
|µt(a) − µ0(a)| ≈ δ(a) · Ta(t).

Finite Candidate Pool.

(cid:107)µt − µ0(cid:107)2 ≈

[δ(a) · Ta(t)]2.

(17)

In the Random recommender system, Ta(t) ≈ tl/m and
thus

(cid:107)µt − µ0(cid:107)2 ≈

δ(a)2(l/m) · t.

(18)

Both the Oracle and the Optimal Oracle have a ﬁxed set
of items S that they keep selecting. Thus Ta(t) ≈ t for
any item a ∈ S and

(cid:107)µt − µ0(cid:107)2 ≈

δ(a)2 · t.

(19)

(cid:115)(cid:88)

a∈S

For both the UCB and TS we have

(cid:115)

(cid:88)

√

(cid:107)µt − µ0(cid:107)2 ≈ (

δ(a)2/

m∗) · t,

(20)

a
where m∗ are the number of close to optimal arms.
Therefore all ﬁve models have the degeneracy quantity
(cid:107)µt − µ0(cid:107)2 converge to a linear function of t.

Inﬁnite Candidate Pool. Since we sample δ(a)
from a bounded interval
asymptotically
supa∈M δ(a) ≈ b

[−b, b],

|µt(a) − µ0(a)| ≈ sup
a∈M

sup
a∈M
where a∗ is an item with δ(a∗) ≈ b.

δ(a) · Ta(t) ≈ bTa∗ (t)

In the Random recommender system, Ta(t) ≈ const

and thus

sup
a∈M

|µt(a) − µ0(a)| ≈ const.

(21)

The Oracle has a ﬁxed set of items S that it keeps se-
lecting. Thus Ta(t) ≈ t for any item a ∈ S and
δ(a) · t.

|µt(a) − µ0(a)| ≈ max
a∈S

(22)

sup
a∈M

The Optimal Oracle model will pick all items with
δ(a) ≈ b and Ta(t) ≈ ct for some constant c.

sup
a∈M

|µt(a) − µ0(a)| ≈ bc · t.

(23)

For UCB and Thompson sampling the situation is less
clear. When growth of the candidate pool is linear, then
UCB will spend most of its time exploring new items
and consequently degeneration is very slow. Thompson
sampling will continue to play degenerate items with
reasonable probability and so degeneration speed will
be larger than for UCB. Precisely quantifying the rates
of degeneration depends in a complicated way on the
details of the model.

10

