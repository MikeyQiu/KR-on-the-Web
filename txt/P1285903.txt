VnCoreNLP: A Vietnamese Natural Language Processing Toolkit

Thanh Vu1, Dat Quoc Nguyen2, Dai Quoc Nguyen3, Mark Dras4 and Mark Johnson4
1Newcastle University, United Kingdom; 2The University of Melbourne, Australia;
3Deakin University, Australia; 4Macquarie University, Australia
thanh.vu@newcastle.ac.uk, dqnguyen@unimelb.edu.au,
dai.nguyen@deakin.edu.au, {mark.dras, mark.johnson}@mq.edu.au

8
1
0
2
 
r
p
A
 
1
 
 
]
L
C
.
s
c
[
 
 
2
v
1
3
3
1
0
.
1
0
8
1
:
v
i
X
r
a

Abstract

We present an easy-to-use and fast toolkit,
namely VnCoreNLP—a Java NLP annota-
tion pipeline for Vietnamese. Our VnCoreNLP
language processing
supports key natural
(NLP) tasks including word segmentation,
part-of-speech (POS) tagging, named entity
recognition (NER) and dependency parsing,
and obtains state-of-the-art (SOTA) results for
these tasks. We release VnCoreNLP to provide
rich linguistic annotations to facilitate research
work on Vietnamese NLP. Our VnCoreNLP
is open-source and available at: https://
github.com/vncorenlp/VnCoreNLP.

1

Introduction

Research on Vietnamese NLP has been actively
explored in the last decade, boosted by the suc-
cesses of the 4-year KC01.01/2006-2010 national
project on Vietnamese language and speech pro-
cessing (VLSP). Over the last 5 years, standard
benchmark datasets for key Vietnamese NLP tasks
are publicly available: datasets for word segmen-
tation and POS tagging were released for the first
VLSP evaluation campaign in 2013; a dependency
treebank was published in 2014 (Nguyen et al.,
2014); and an NER dataset was released for the
second VLSP campaign in 2016. So there is a need
for building an NLP pipeline, such as the Stanford
CoreNLP toolkit (Manning et al., 2014), for those
key tasks to assist users and to support researchers
and tool developers of downstream tasks.

Nguyen et al. (2010) and Le et al. (2013) built
Vietnamese NLP pipelines by wrapping exist-
ing word segmenters and POS taggers including:
JVnSegmenter (Nguyen et al., 2006), vnTokenizer
(Le et al., 2008), JVnTagger (Nguyen et al., 2010)
and vnTagger (Le-Hong et al., 2010). However,
these word segmenters and POS taggers are no
longer considered SOTA models for Vietnamese
(Nguyen and Le, 2016; Nguyen et al., 2016b).

Figure 1: In pipeline architecture of VnCoreNLP, an-
notations are performed on an Annotation object.

Pham et al. (2017) built the NNVLP toolkit for
Vietnamese sequence labeling tasks by applying a
BiLSTM-CNN-CRF model (Ma and Hovy, 2016).
However, Pham et al. (2017) did not make a com-
parison to SOTA traditional feature-based mod-
els. In addition, NNVLP is slow with a processing
speed at about 300 words per second, which is not
practical for real-world application such as dealing
with large-scale data.

In this paper, we present a Java NLP toolkit for
Vietnamese, namely VnCoreNLP, which aims to
facilitate Vietnamese NLP research by providing
rich linguistic annotations through key NLP com-
ponents of word segmentation, POS tagging, NER
and dependency parsing. Figure 1 describes the
overall system architecture. The following items
highlight typical characteristics of VnCoreNLP:

• Easy-to-use – All VnCoreNLP components
are wrapped into a single .jar file, so users
do not have to install external dependencies.
Users can run processing pipelines from ei-
ther the command-line or the Java API.

• Fast – VnCoreNLP is fast, so it can be used
for dealing with large-scale data. Also it ben-
efits users suffering from limited computa-
tion resources (e.g. users from Vietnam).

• Accurate – VnCoreNLP components obtain
higher results than all previous published re-
sults on the same benchmark datasets.

2 Basic usages

Our design goal is to make VnCoreNLP simple to
setup and run from either the command-line or the
Java API. Performing linguistic annotations for a
given file can be done by using a simple command
as in Figure 2.

$ java -Xmx2g -jar VnCoreNLP.jar -fin

input.txt -fout output.txt

Figure 2: Minimal command to run VnCoreNLP.

Suppose that the file input.txt in Figure
2 contains a sentence “Ông Nguyễn Khắc Chúc
đang làm việc tại Đại học Quốc gia Hà Nội.”
(MrÔng Nguyen Khac Chuc isđang workinglàm_việc
attại Vietnam Nationalquốc_gia Universityđại_học
HanoiHà_Nội). Table 1 shows the output for this
sentence in plain text form.

Nc O

1 Ông
4
2 Nguyễn_Khắc_Chúc Np B-PER 1
đang
4
3
O
0
làm_việc
4
O
O
5
4
tại
B-ORG 5
6 Đại_học
I-ORG 6
7 Quốc_gia
I-ORG 6
8 Hà_Nội
4
9

R
V
E
N
N
Np
CH O

.

sub
nmod
adv
root
loc
pob
nmod
nmod
punct

Table 1: The output in file output.txt for the sen-
tence ‘Ông Nguyễn Khắc Chúc đang làm việc tại Đại
học Quốc gia Hà Nội.” from file input.txt in Fig-
ure 2. The output is in a 6-column format representing
word index, word form, POS tag, NER label, head in-
dex of the current word, and dependency relation type.

Similarly, we can also get the same output by

using the API as easy as in Listing 1.
VnCoreNLP pipeline = new VnCoreNLP() ;
Annotation annotation = new Annotation("
Ông Nguyễn Khắc Chúc đang làm việc
tại Đại học Quốc gia Hà Nội.");

pipeline.annotate(annotation);
String annotatedStr = annotation.

toString();

Listing 1: Minimal code for an analysis pipeline.

In addition, Listing 2 provides a more realistic
and complete example code, presenting key com-
ponents of the toolkit. Here an annotation pipeline
can be used for any text rather than just a single
sentence, e.g. for a paragraph or entire news story.

3 Components

This section briefly describes each component of
VnCoreNLP. Note that our goal is not to develop

import vn.pipeline.*;
import java.io.*;
public class VnCoreNLPExample {

public static void main(String[] args)

throws IOException {

// "wseg", "pos", "ner", and "parse"

refer to as word segmentation, POS

tagging, NER and dependency

parsing, respectively.

String[] annotators = {"wseg", "pos",

"ner", "parse"};

VnCoreNLP pipeline = new VnCoreNLP(

annotators);

// Mr Nguyen Khac Chuc is working at

Vietnam National University, Hanoi
. Mrs Lan, Mr Chuc’s wife, is also

working at this university.

String str = "Ông Nguyễn Khắc Chúc

đang làm việc tại Đại học Quốc gia
Hà Nội. Bà Lan, vợ ông Chúc, cũng
làm việc tại đây.";

Annotation annotation = new Annotation

(str);

pipeline.annotate(annotation);
PrintStream outputPrinter = new

PrintStream("output.txt");
pipeline.printToFile(annotation,

outputPrinter);

// Users can get a single sentence to

analyze individually

Sentence firstSentence = annotation.

getSentences().get(0);

}

}

Listing 2: A simple and complete example code.

new approach or model for each component task.
Here we focus on incorporating existing mod-
els into a single pipeline. In particular, except a
new model we develop for the language-dependent
component of word segmentation, we apply tradi-
tional feature-based models which obtain SOTA
results for English POS tagging, NER and depen-
dency parsing to Vietnamese. The reason is based
on a well-established belief in the literature that
for a less-resourced language such as Vietnamese,
we should consider using feature-based models to
obtain fast and accurate performances, rather than
using neural network-based models (King, 2015).

• wseg – Unlike English where white space
is a strong indicator of word boundaries,
when written in Vietnamese white space is
also used to separate syllables that constitute
words. So word segmentation is referred to
as the key first step in Vietnamese NLP. We
have proposed a transformation rule-based
learning model for Vietnamese word segmen-
tation, which obtains better segmentation ac-
curacy and speed than all previous word seg-
menters. See details in Nguyen et al. (2018).

• pos – To label words with their POS tag,
we apply MarMoT which is a generic CRF
framework and a SOTA POS and morpholog-
ical tagger (Mueller et al., 2013).1

• ner – To recognize named entities, we apply
a dynamic feature induction model that au-
tomatically optimizes feature combinations
(Choi, 2016).2

• parse – To perform dependency parsing,
we apply the greedy version of a transition-
based parsing model with selectional branch-
ing (Choi et al., 2015).3

4 Evaluation

We detail experimental results of the word seg-
mentation (wseg) and POS tagging (pos) compo-
nents of VnCoreNLP in Nguyen et al. (2018) and
Nguyen et al. (2017b), respectively. In particular,
our word segmentation component gets the high-
est results in terms of both segmentation F1 score
at 97.90% and speed at 62K words per second.4
Our POS tagging component also obtains the high-
est accuracy to date at 95.88% with a fast tagging
speed at 25K words per second, and outperforms
BiLSTM-CRF-based models. Following subsec-
tions present evaluations for the NER (ner) and
dependency parsing (parse) components.

4.1 Named entity recognition

We make a comparison between SOTA feature-
based and neural network-based models, which, to
the best of our knowledge, has not been done in
any prior work on Vietnamese NER.

Dataset: The NER shared task at
the 2016
VLSP workshop provides a set of 16,861 manu-
ally annotated sentences for training and develop-
ment, and a set of 2,831 manually annotated sen-
tences for test, with four NER labels PER, LOC,
ORG and MISC. Note that in both datasets, words
are also supplied with gold POS tags. In addition,
each word representing a full personal name are
separated into syllables that constitute the word.
So this annotation scheme results in an unrealis-
tic scenario for a pipeline evaluation because: (i)

gold POS tags are not available in a real-world ap-
plication, and (ii) in the standard annotation (and
benchmark datasets) for Vietnamese word seg-
mentation and POS tagging (Nguyen et al., 2009),
each full name is referred to as a word token (i.e.,
all word segmenters have been trained to output a
full name as a word and all POS taggers have been
trained to assign a label to the entire full-name).

For a more realistic scenario, we merge those
contiguous syllables constituting a full name to
form a word.5 Then we replace the gold POS tags
by automatic tags predicted by our POS tagging
component. From the set of 16,861 sentences, we
sample 2,000 sentences for development and using
the remaining 14,861 sentences for training.

Models: We make an empirical comparison be-
tween the VnCoreNLP’s NER component and the
following neural network-based models:

• BiLSTM-CRF (Huang et al., 2015) is a se-
quence labeling model which extends the
BiLSTM model with a CRF layer.

• BiLSTM-CRF + CNN-char, i.e. BiLSTM-
CNN-CRF, is an extension of BiLSTM-CRF,
using CNN to derive character-based word
representations (Ma and Hovy, 2016).

• BiLSTM-CRF + LSTM-char is an exten-
sion of BiLSTM-CRF, using BiLSTM to de-
rive the character-based word representations
(Lample et al., 2016).

• BiLSTM-CRF+POS is another extension to
BiLSTM-CRF, incorporating embeddings of
automatically predicted POS tags (Reimers
and Gurevych, 2017).

We use a well-known implementation which
is optimized for performance of all BiLSTM-
CRF-based models from Reimers and Gurevych
(2017).6 We then follow Nguyen et al. (2017b,
Section 3.4) to perform hyper-parameter tuning.7

Main results: Table 2 presents F1 score and
speed of each model on the test set, where Vn-
CoreNLP obtains the highest score at 88.55% with
a fast speed at 18K words per second. In particu-
lar, VnCoreNLP obtains 10 times faster speed than

1http://cistern.cis.lmu.de/marmot/
2https://emorynlp.github.io/nlp4j/
components/named-entity-recognition.html
3https://emorynlp.github.io/nlp4j/

components/dependency-parsing.html

5Based on the gold label PER, contiguous syllables such
as “Nguyễn/B-PER”, “Khắc/I-PER” and “Chúc/I-PER” are
merged to form a word as “Nguyễn_Khắc_Chúc/B-PER.”

6https://github.com/UKPLab/

emnlp2017-bilstm-cnn-crf

4All speeds reported in this paper are computed on a per-

7We employ pre-trained Vietnamese word vectors from

sonal computer of Intel Core i7 2.2 GHz.

https://github.com/sonvx/word2vecVN.

Model
VnCoreNLP
BiLSTM-CRF
+ CNN-char
+ LSTM-char
BiLSTM-CRF+POS
+ CNN-char
+ LSTM-char

F1
88.55
86.48
88.28
87.71
86.12
88.06
87.43

Speed
18K
2.8K
1.8K
1.3K
_
_
_

Table 2: F1 scores (in %) on the test set w.r.t. gold word-
segmentation. “Speed” denotes the processing speed of
the number of words per second (for VnCoreNLP, we
include the time POS tagging takes in the speed).

the second most accurate model BiLSTM-CRF +
CNN-char.

It is initially surprising that for such an iso-
lated language as Vietnamese where all words
are not inflected, using character-based represen-
tations helps producing 1+% improvements to the
BiLSTM-CRF model. We find that the improve-
ments to BiLSTM-CRF are mostly accounted for
by the PER label. The reason turns out to be sim-
ple: about 50% of named entities are labeled with
tag PER, so character-based representations are
in fact able to capture common family, middle
or given name syllables in ‘unknown’ full-name
words. Furthermore, we also find that BiLSTM-
CRF-based models do not benefit from additional
predicted POS tags. It is probably because BiL-
STM can take word order into account, while with-
out word inflection, all grammatical information
in Vietnamese is conveyed through its fixed word
order, thus explicit predicted POS tags with noisy
grammatical information are not helpful.

Model
VnCoreNLP
VnCoreNLP–NER
BIST-bmstparser
BIST-barchybrid
MSTParser
MaltParser

S
O
P
d
l
o
G

S VnCoreNLP
O
P
o
t
u
A

VnCoreNLP–NER
jPTDP

LAS UAS
73.39
79.02
78.91
73.21
79.39
73.17
79.33
72.53
76.47
70.29
74.91
69.10
70.23
76.93
76.85
70.10
77.68
69.49

Speed
_
_
_
_
_
_
8K
9K
700

Table 3: LAS and UAS scores (in %) computed on all
tokens (i.e. including punctuation) on the test set w.r.t.
gold word-segmentation. “Speed” is defined as in Ta-
ble 2. The subscript “–NER” denotes the model without
using automatically predicted NER labels as features.
The results of the MSTParser (McDonald et al., 2005),
MaltParser (Nivre et al., 2007), and BiLSTM-based
parsing models BIST-bmstparser and BIST-barchybrid
(Kiperwasser and Goldberg, 2016) are reported in
Nguyen et al. (2016a). The result of the jPTDP model
for Vietnamese is mentioned in Nguyen et al. (2017b).

row presents scores of the joint POS tagging and
dependency parsing model jPTDP (Nguyen et al.,
2017a). Table 3 shows that compared to previously
published results, VnCoreNLP produces the high-
est LAS score. Note that previous results for other
systems are reported without using additional in-
formation of automatically predicted NER labels.
In this case, the LAS score for VnCoreNLP with-
out automatic NER features (i.e. VnCoreNLP–NER
in Table 3) is still higher than previous ones. No-
tably, we also obtain a fast parsing speed at 8K
words per second.

4.2 Dependency parsing

5 Conclusion

Experimental setup: We use the Vietnamese
dependency treebank VnDT (Nguyen et al., 2014)
consisting of 10,200 sentences in our experiments.
Following Nguyen et al. (2016a), we use the last
1020 sentences of VnDT for test while the remain-
ing sentences are used for training. Evaluation
metrics are the labeled attachment score (LAS)
and unlabeled attachment score (UAS).

Main results: Table 3 compares the dependency
parsing results of VnCoreNLP with results re-
ported in prior work, using the same experimen-
tal setup. The first six rows present the scores with
gold POS tags. The next two rows show scores of
VnCoreNLP with automatic POS tags which are
produced by our POS tagging component. The last

In this paper, we have presented the VnCoreNLP
toolkit—an easy-to-use, fast and accurate process-
ing pipeline for Vietnamese NLP. VnCoreNLP
provides core NLP steps including word segmen-
tation, POS tagging, NER and dependency pars-
ing. Current version of VnCoreNLP has been
trained without any linguistic optimization, i.e. we
only employ existing pre-defined features in the
traditional feature-based models for POS tagging,
NER and dependency parsing. So future work will
focus on incorporating Vietnamese linguistic fea-
tures into these feature-based models.

VnCoreNLP is released for research and edu-
cational purposes, and available at: https://
github.com/vncorenlp/VnCoreNLP.

References

Jinho D. Choi. 2016. Dynamic Feature Induction: The
Last Gist to the State-of-the-Art. In Proceedings of
NAACL-HLT. pages 271–281.

Jinho D. Choi, Joel Tetreault, and Amanda Stent. 2015.
It Depends: Dependency Parser Comparison Using
In Proceedings of
A Web-based Evaluation Tool.
ACL-IJCNLP. pages 387–396.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991.

Benjamin Philip King. 2015. Practical Natural Lan-
guage Processing for Low-Resource Languages.
Ph.D. thesis, The University of Michigan.

Eliyahu Kiperwasser and Yoav Goldberg. 2016. Sim-
ple and Accurate Dependency Parsing Using Bidi-
rectional LSTM Feature Representations. Transac-
tions of the Association for Computational Linguis-
tics 4:313–327.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural Architectures for Named Entity Recognition.
In Proceedings of NAACL-HLT. pages 260–270.

Hong Phuong Le, Thi Minh Huyen Nguyen, Azim
Roussanaly, and Tuong Vinh Ho. 2008. A hybrid
approach to word segmentation of Vietnamese texts.
In Proceedings of LATA. pages 240–249.

Ngoc Minh Le, Bich Ngoc Do, Vi Duong Nguyen, and
Thi Dam Nguyen. 2013. VNLP: An Open Source
Framework for Vietnamese Natural Language Pro-
cessing. In Proceedings of SoICT. pages 88–93.

Phuong Le-Hong, Azim Roussanaly, Thi Minh Huyen
Nguyen, and Mathias Rossignol. 2010. An empiri-
cal study of maximum entropy approach for part-of-
speech tagging of Vietnamese texts. In Proceedings
of TALN.

Xuezhe Ma and Eduard Hovy. 2016. End-to-end Se-
quence Labeling via Bi-directional LSTM-CNNs-
CRF. In Proceedings of ACL (Volume 1: Long Pa-
pers). pages 1064–1074.

Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
In Proceedings of ACL
guage processing toolkit.
2014 System Demonstrations. pages 55–60.

Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online Large-margin Training of De-
In Proceedings of ACL. pages
pendency Parsers.
91–98.

Thomas Mueller, Helmut Schmid,

and Hinrich
Sch¨utze. 2013. Efficient Higher-Order CRFs for
Morphological Tagging. In Proceedings of EMNLP.
pages 322–332.

Cam-Tu Nguyen, Trung-Kien Nguyen, et al. 2006.
Vietnamese Word Segmentation with CRFs and
In Proceedings of
SVMs: An Investigation.
PACLIC. pages 215–222.

Cam-Tu Nguyen, Xuan-Hieu Phan,

and Thu-
JVnTextPro: A Java-
Trang Nguyen. 2010.
based Vietnamese
Tool.
Text
http://jvntextpro.sourceforge.net/.

Processing

Dat Quoc Nguyen, Mark Dras, and Mark Johnson.
2016a. An empirical study for Vietnamese depen-
dency parsing. In Proceedings of ALTA. pages 143–
149.

Dat Quoc Nguyen, Mark Dras, and Mark Johnson.
2017a. A Novel Neural Network Model for Joint
POS Tagging and Graph-based Dependency Pars-
In Proceedings of the CoNLL 2017 Shared
ing.
Task. pages 134–142.

Dat Quoc Nguyen, Dai Quoc Nguyen, Son Bao Pham,
Phuong-Thai Nguyen, and Minh Le Nguyen. 2014.
From Treebank Conversion to Automatic Depen-
In Proceedings of
dency Parsing for Vietnamese.
NLDB. pages 196–207.

Dat Quoc Nguyen, Dai Quoc Nguyen, Thanh Vu, Mark
Dras, and Mark Johnson. 2018. A Fast and Accu-
In Proceedings
rate Vietnamese Word Segmenter.
of LREC. page to appear.

Dat Quoc Nguyen, Thanh Vu, Dai Quoc Nguyen, Mark
Dras, and Mark Johnson. 2017b. From Word Seg-
mentation to POS Tagging for Vietnamese. In Pro-
ceedings of ALTA. pages 108–113.

Phuong Thai Nguyen, Xuan Luong Vu, et al. 2009.
Building a Large Syntactically-Annotated Corpus of
In Proceedings of LAW. pages 182–
Vietnamese.
185.

Tuan-Phong Nguyen and Anh-Cuong Le. 2016. A Hy-
brid Approach to Vietnamese Word Segmentation.
In Proceedings of RIVF. pages 114–119.

Tuan Phong Nguyen, Quoc Tuan Truong, Xuan Nam
Nguyen, and Anh Cuong Le. 2016b. An Experimen-
tal Investigation of Part-Of-Speech Taggers for Viet-
namese. VNU Journal of Science: Computer Sci-
ence and Communication Engineering 32(3):11–25.

Joakim Nivre, Johan Hall, et al. 2007. MaltParser:
A language-independent system for data-driven de-
pendency parsing. Natural Language Engineering
13(2):95–135.

Thai-Hoang Pham, Xuan-Khoai Pham, Tuan-Anh
Nguyen, and Phuong Le-Hong. 2017. NNVLP: A
Neural Network-Based Vietnamese Language Pro-
cessing Toolkit. In Proceedings of the IJCNLP 2017
System Demonstrations. pages 37–40.

Nils Reimers and Iryna Gurevych. 2017. Report-
ing Score Distributions Makes a Difference: Perfor-
mance Study of LSTM-networks for Sequence Tag-
ging. In Proceedings of EMNLP. pages 338–348.

