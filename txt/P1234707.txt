Equivalence of restricted Boltzmann machines and tensor network states

Jing Chen,1, 2, 3 Song Cheng,1, 2 Haidong Xie,1, 2 Lei Wang,1, ∗ and Tao Xiang1, 4, †
1Institute of Physics, Chinese Academy of Sciences, P.O. Box 603, Beijing 100190, China
2School of Physical Sciences, University of Chinese Academy of Sciences, Beijing, 100049, China
3Center for Computational Quantum Physics, Flatiron Institute, New York, 10010, USA
4Collaborative Innovation Center of Quantum Matter, Beijing 100190, China

The restricted Boltzmann machine (RBM) is one of the fundamental building blocks of deep learn-
ing. RBM ﬁnds wide applications in dimensional reduction, feature extraction, and recommender
systems via modeling the probability distributions of a variety of input data including natural im-
ages, speech signals, and customer ratings, etc. We build a bridge between RBM and tensor network
states (TNS) widely used in quantum many-body physics research. We devise eﬃcient algorithms
to translate an RBM into the commonly used TNS. Conversely, we give suﬃcient and necessary
conditions to determine whether a TNS can be transformed into an RBM of given architectures.
Revealing these general and constructive connections can cross-fertilize both deep learning and
quantum-many body physics. Notably, by exploiting the entanglement entropy bound of TNS, we
can rigorously quantify the expressive power of RBM on complex datasets. Insights into TNS and
its entanglement capacity can guide the design of more powerful deep learning architectures. On
the other hand, RBM can represent quantum many-body states with fewer parameters compared
to TNS, which may allow more eﬃcient classical simulations.

I.

INTRODUCTION

Deep learning is transforming the world with its far-
reaching applications in computer vision, speech recogni-
tion, natural language processing, recommender systems,
etc [1, 2]. At the core of many of these applications are
the artiﬁcial neural networks which recognize or even dis-
cover interesting patterns in the input data [3–5]. In a
nutshell, the neural nets act as trainable functional map-
pings of multiple variables. To design even more powerful
and intelligent machines requires one to quantify and ex-
tend the expressive power of the neural nets. However,
there is a gap between the mathematical foundation and
the real-world applications which are largely driven by
the engineering practices [2], because it has long been
a diﬃcult endeavor to rigorously quantify the expressive
power of neural nets over complicated datasets.

Insights into the physical rules governing the neural
networks and typical datasets may oﬀer an answer to the
great success of deep learning and guide its more fruit-
ful development in the future. For example, statistical
physics has a long-standing impact on machine learn-
ing [4, 6], because both ﬁelds concern about collective
behavior emerged from a large amount of microscopic
degree of freedoms. Moreover, as suggested by Mehta
and Schwab [7], there is a connection between the deep
learning and the renormalization group. Lin et al. [8] also
argued that the “unreasonable success” of deep learning
can be traced back to the law of physics, which often
imposes symmetry, locality, compositionality, polynomial
log-probability, and other properties on the input data.
Restricted Boltzmann machine (RBM) is a vivid exam-
ple of the intrinsic connection between statistical physics

∗ wanglei@iphy.ac.cn
† txiang@iphy.ac.cn

and machine learning. An RBM is a special type of neural
networks which can be better understood as an energy-
based model. As illustrated in Fig. 1(a), it consists of a
set of interconnected visible and hidden binary variables.
These variables are assumed to satisfy the Boltzmann
distribution whose energy functional is deﬁned by

E (v, h) = −

aivi −

bjhj −

viWijhj,

(1)

(cid:88)

i

(cid:88)

j

(cid:88)

i,j

where v = {vi} and h = {hj} are the visible and hidden
binary variables. We denote their number as nv and nh
respectively. Parameters ai, bj are the biases applied to
the visible and hidden units, respectively. Wij is the
coupling matrix between these two units.

By integrating out the hidden units, the RBM repre-
sents the marginal distribution of the visible variables
(omitting an irrelevant normalization factor)

ΨRBM (v) =

e−E(v,h)

(cid:88)

h
(cid:89)

i

j

=

eaivi (cid:89)

(cid:16)

1 + ebj +(cid:80)

i viWij

(cid:17)

.

(2)

In the RBM there is no direct connection between the
visible units. However the hidden units generate eﬀective
connections or interactions among them. By increasing
the number of hidden units and connections, the RBM
can in principle parametrize more complex functions of
the visible units [9–11].

One can train an RBM by specifying its parameters
such that the probability distribution of the visible units
reproduces that of the input data [12, 13]. The hidden
units of a trained RBM may also reveal correlations in
the data with appealing physical meanings. For example,
in an RBM trained with a dataset of images containing
handwritten digits, the connection weight contains the
information about the pen stokes [14]. These learning

8
1
0
2
 
b
e
F
 
5
 
 
]
l
e
-
r
t
s
.
t
a
m
-
d
n
o
c
[
 
 
2
v
1
3
8
4
0
.
1
0
7
1
:
v
i
X
r
a

2

contexts.
Is RBM more expressive than the standard
variational wavefunctions of quantum states [17]? Can
RBM eﬃciently describe the probability distribution of
physical models at criticality [19, 20]? Unfortunately,
the existing universal approximation theorem [9–11] and
its further developments [22–24]are not particularly in-
structive for practical purpose because they involve ex-
ponentially large resources, and it cannot be used as a
guiding principle to solve practical physical or industrial
problems.

In fact, the quest for more expressive wavefunction
is central to quantum many-body physics. An ideal
parametrization of wavefunction should accurately de-
scribe a quantum state with exponentially large degree
of freedoms with polynomial resources. Tensor network
states (TNS) [25] are promising candidates to meet this
demand. Figure. 1(b) shows one of the simplest TNS, the
matrix product state (MPS) [26], as an example. The
MPS parametrizes a wavefunction of nv physical vari-
ables as,

ΨMPS(v) = Tr

A(i)[vi],

(3)

(cid:89)

i

where A(i) is a three-index tensor represented by a red
dot in Fig. 1(b). For a given value of vi, which is rep-
resented by a dangling vertical bond, A(i)[vi] is a ma-
trix. The dimension of this matrix is commonly called
the virtual bond dimension of the MPS, indicated by the
thickness of the horizontal bonds in Fig. 1(b). Connect-
ing these horizontal bonds is to take tensor contraction
over all the virtual degree of freedoms. By increasing
the bond dimension, MPS can represent with increasing
accuracy any complex multivariable functions [26].

MPS representation is equivalent to the tensor train
decompositions in the applied math community [27].
Similarly, one can connect higher order tensors to rep-
resent a physical state in a two dimensional network.
This kind of TNS is named projected entangled pair state
(PEPS) [28]. A generalization of PEPS to include the
entanglement of all particles in a larger unit cell is call
projected entangled simplex state (PESS) [29].
In the
past decades, solid theoretical understanding and eﬃ-
cient numerical techniques for TNS has been established.
See [25, 30] for pedagogical reviews on TNS. Moreover,
the application of TNS to classical systems also has a
long history, see [31–33] for example.

The physics community also has an answer to the “un-
reasonable eﬀectiveness” of TNS. It relies on the entan-
glement area law [34], which states that the entangle-
ment entropy scales just linearly with the boundary size
separating any two subsystems. The entanglement en-
tropy [35] is a measure of the information content be-
tween these two subsystems. Many physical states of
practical interests fulﬁll this area law [34]. It indicates
that the degrees of freedom needed to describe a quantum
state of physical interest is generally much less than the
total degrees of freedom of the whole system. TNS are de-
signed to eﬃciently represent these quantum states with

Figure 1. (a) Graphical representation of the RBM deﬁned
by Eq. (2). The blue dots represent visible units v and the
magenta dots represent the hidden units h. They are cou-
pled through the connections indicated by the solid lines. (b)
MPS deﬁned by Eq. (3). Each red dot denotes a three-index
tensor A(i). Throughout this paper, we use dots to represent
units of RBM, and ball to represent tensors. Lines in the
RBM denote connection weights while lines in the tensor net-
work denote tensor indices. (c) RBM and TNS are two ways
to parametrize multivariable functions. With unlimited re-
sources d(number of hidden units or bond dimensions) both of
them can represent any function to arbitrary accuracy. How-
ever, with limited resources they represent two independent
sets with overlapping region. Detailed discussions on their
relationship are given in Secs. II and III.

features can be used either for discriminative tasks, such
as pattern recognition, or for generative tasks, such as
generating more samples according to the learned distri-
bution. RBM has played an important role in the recent
renaissance of deep learning [15, 16], because of its ver-
satile abilities in feature extraction and dimensionality
reduction of complex data sets.

Recently, RBM has attracted great attention in the
Carleo and
ﬁeld of quantum many-body physics.
Troyer [17] proposed an RBM inspired variational wave-
function to study quantum many-body systems at or
away from equilibrium. Deng et al. [18] constructed exact
RBM representations for several interesting topological
states. Torlai and Melko [19] trained an RBM to repro-
duce the thermodynamics of a statistical physics model.
Huang and Wang [20] used RBM as a recommender sys-
tem to accelerate Monte Carlo simulation of quantum
many-body systems. Liu et al. [21] reported similar ideas
using classical spin models instead of the RBM.

These developments raise several critical questions
about the expressive power of neural nets in the physics

relatively low entanglement entropy and have achieved
remarkable successes in the past decades [36].

RBM and TNS share some similarities in their mathe-
matical structures, especially expressed using the graph-
ical language in Figs. 1(a,b). As for machine learning,
Refs. [2, 8] also suggest that only a tiny fraction of the
input data is of practical interests among inﬁnite num-
ber of possible inputs. This motivates us to search for a
guiding principle from the perspective of quantum infor-
mation to quantify the expressive power of neural nets
used for deep learning [1, 2] as well as for quantum and
statistical physics problems [17–20].

In this paper, we present a general and constructive
connection between RBM and TNS. With this correspon-
dence, many concepts and techniques from deep learning
and quantum physics can be exchanged. By transforming
an RBM to a TNS and exploiting its entanglement en-
tropy bound, we can quantify the expressibility of RBM
for quantum states, for statistical physics models, and for
industrial datasets. We also ﬁnd the necessary and suf-
ﬁcient conditions for transforming a TNS into an RBM
with a given structure, and show that RBM can serve as
an eﬃcient representation of quantum states.

This paper is arranged as follows. In Sec. II, we present
the algorithms to transform an RBM into an MPS or
other kind of TNS and discuss their consequences.
In
Sec. III, we present the suﬃcient and necessary condi-
tions for a TNS to have an RBM representation with a
given architecture. In Sec. IV, we illustrate the intimate
connection between RBM and TNS by constructing the
four-fold degenerate ground-state wave functions for the
toric code model in both the RBM and TNS represen-
In Sec. V, we discuss several applications of
tations.
the established connection between RBM and TNS for
physical and machine learning problems. In Sec. VI, we
discuss further implications of our results in a broader
contexts of interdisciplinary research.
In Appendix A,
we present a suﬃcient condition to ﬁnd the RBM repre-
sentations for some speciﬁc TNS and illustrate with sta-
tistical Ising model and simple quantum states. Finally,
in Appendix B, we discuss the equivalence between more
general Boltzmann machines [37, 38] and TNS.

II. TNS REPRESENTATION OF RBM

In this section we discuss the relationship between
RBM and TNS via a constructive approach. An impor-
tant application of the TNS representation for RBM is to
provide an upper bound of the entanglement entropy it
can capture. To estimate the bound one only needs struc-
tural information but not the detailed parametrization of
the RBMs. We ﬁrst present a simple and intuitive ap-
proach, then discuss more sophisticated approaches that
can provide tighter or optimal bounds on the tensor bond
dimensions. We provide code implementations of the
mapping in [39].

Before proceeding, we ﬁrst clarify a few notations

3

Figure 2. Steps to map an RBM to an MPS. (a) A TNS rep-
resentation of the RBM shown in Fig. 1(a). The blue dots
represent the diagonal tensors Λ(i)
at the visible units and
v
the magenta dots represent Λ(j)
h at the hidden units, deﬁned
by Eqs. (4) and (5), respectively. The green squares represent
matrix M (ij), deﬁned in Eq. (6). (b) The RBM is cut into nv
(here nv = 6) pieces. Associated with each long range con-
nection, an identity tensor (red oval) is introduced to break
M (ij) into two matrices, see Fig. 3. (c) An MPS representa-
tion of the RBM obtained by contracting all hidden units and
connection bonds in (b). The bond dimension of the MPS is
determined by the number of bonds cut by the corresponding
dashed vertical line.

in Refs.

about RBM. First, in the standard machine learning ap-
plications and in Refs. [19, 20], parameters {Wij, ai, bj}
are assumed to be real and the corresponding RBM rep-
resents the probability distributions of input data. How-
[17, 18], Eq. (2) is interpreted as the
ever,
amplitude of quantum mechanical wave function, and
{Wij, ai, bj} are generalized to the complex domain. In
this paper, we adopt the convention of Refs. [17, 18],
and assume these parameters to be complex. 1 Second,
conventionally one views the RBM as an energy based
model. While for our discussion about the expressibil-
ity of Eq. (2), it is suﬃcient to view it as a function
approximator such as a feed-forward neural net [20, 40].
Third, although the standard RBM may have dense all-
to-all connections between the visible and hidden units,

1 The references [17, 18] used RBM units with ±1 instead of binary
values. This amounts to a simple rescaling and oﬀset of the
weights and biases.

4

h1 is the only long-range connection. In order to map it
into the virtual bonds of MPS, we decouple the matrix
deﬁned on this connection, M (41), into a product of two
arbitrary 2×2 matrices, P and Q, subject to the constrain
M (41) = P ·Q (Fig. 3). This separates eﬀectively the long-
range connection into two short ones, whose matrices are
deﬁned by P and Q, respectively. These two matrices
are then absorbed into the local tensors at v2 and v3, i.e.,
A(2) and A(3), respectively. This long-range connection
crosses the vertical bond at v3, and consequently doubles
the bond dimension of A(3).
In general, a long range
connection will double the bond dimensions of all tensors
it passes by. The dimension of MPS at a particular bond,
D, is determined by the number of connections, n, one
has to cut in order to bipartite the system at that bond,
i.e. D = 2n.

It should also be noted that the MPS obtained from
the above mapping process is not unique, because the
geometrical structure of the hidden units with respect to
the visible units can be arbitrarily arranged. No mat-
ter how the hidden units are arranged, these diﬀerent
MPS are equivalent. The local tensors obtained with the
above approach generally also contain redundant degrees
of freedom. They can be gauged into a unique canonical
form [41, 42] by taking canonical transformations for all
local tensors. See Sec. V A for more discussions on the
redundancy of TNS and RBM representations.

Algorithm 1 Direct mapping an RBM into an MPS.
Input: The connection weight matrix Wij and biases ai, bj.

The matrix speciﬁes the structure of the RBM.
Output: An MPS with each tensor A(i), i = 1, 2, · · · , nv.
1: The RBM is cut into nv pieces Pi, i = 1, · · · , nv. Each Pi

includes a visible unit vi and several hidden units.

(cid:46) Contains the tensors in Pi

v according to Eq. (4).

2: for i = 1, · · · , nv do
Set Ti = ∅.
3:
Construct Λ(i)
4:
Add Λ(i)
to Ti.
v
for hj ∈ Pi do

5:
6:

h according to Eq. (5).

7:

Construct Λ(j)
Add Λ(j)
h to Ti.

end for

8:
9:
10: end for
11: for all {(vi, hj)|Wij (cid:54)= 0} do
12:
13:

Construct M (ij) according to Eq. (6).
Split M (ij) into products of matrices and add each

matrix into the corresponding piece, see Fig. 3.

(cid:46) All the connections

14: end for
15: for i = 1, · · · , nv do
16:

Ti, the result is A(i).

17: end for

Contract all the internal indices of the tensors within

B. Optimal mapping of an RBM to an MPS

The direct mapping method given in the last subsec-
tion although intuitive, is not optimal. Here we present
a method to give the MPS representation with optimal

Figure 3. Matrix M (41), represented by the green square, is
decoupled into a product of two matrices, P and Q, denoted
by the two cyan squares. The red oval represents direct prod-
uct of two identity matrix along two crossing directions.

for clarity we will illustrate the transformation using the
RBM with sparse connections. Our result nevertheless
holds generally and can be applied to RBMs with arbi-
trarily dense connections.

A. Direct Mapping of the RBM to MPS

To start with, let us consider a simple way to map
an RBM to an MPS. We summarize the procedure in
Algorithm (1). As a concrete example, we consider the
RBM deﬁned in Fig. 1(a). The ﬁrst step is to convert
this RBM into a TNS by representing the visible and
hidden units as the physical and virtual variables while
keeping the network structure unchanged. To do this, we
decouple the Boltzmann weights into the terms deﬁned
on the vertices and bonds separately by introducing a
diagonal tensor, Λ(i)
h , at each visible or hidden
site, and a 2 × 2 matrix M (ij) on each bond linking vi
and hj:

v or Λ(j)

Λ(i)
v = diag (1, eai) ,
h = diag (cid:0)1, ebj (cid:1) ,
Λ(j)
(cid:19)
(cid:18) 1

1

1 eWij

.

M (ij) =

(4)

(5)

(6)

This leads to the TNS representation of the RBM shown
in Fig. 2(a).

The next step is to map the TNS in Fig. 2(a) to an
MPS. We ﬁrst cut the graphics into nv pieces, each con-
taining a visible unit [Fig. 2(b)]. The assignment of the
hidden units into these pieces can be arbitrary. Contract-
ing all the internal variables within each piece is then
equivalent to summing over the hidden units. The MPS,
as shown in Fig. 2(c), is obtained by merging all the exter-
nal connections between diﬀerent pieces into the virtual
bonds. The bond dimension of the MPS is indicated by
the thickness of the virtual bonds, which is determined
by the number of connections merged.

Here we should pay more attention to the “long-range”
connections that cross two or more vertical cuts. For the
RBM shown in Fig. 2(a), the bond that connects v4 and

bond dimension. RBM is an undirected probabilistic
graphical model. For a graph model, we divide all vari-
ables into two sets X and Y which are conditionally in-
dependent if another set of variables Z are given. This
is written as

X ⊥ Y |Z.

(7)

For the bipartition , we can identify the smallest set Z
such that Eq. (7) are satisﬁed. The degrees of freedom
in Z can be treated as virtual bond of an MPS after the
translation. The size of Z, denoted by |Z|, determines
the bond dimension between the variables X and Y .

D = 2|Z|.

(8)

Algorithm (2) lists the steps to translate an RBM to an
MPS with optimal bond dimensions by employing such
conditional independence property. We start from left
and construct each tensor on the ﬂy all along to the right
side with the smallest virtual bond dimension. The vir-
tual bonds of the resulting MPS represent the degrees of
freedom of the visible or hidden units of the RBM.

Algorithm 2 Transforming an RBM into an MPS with
optimal bond dimensions„ see Fig. 4.
Input: The connection weight matrix Wij and biases ai, bj.

The matrix speciﬁes the structure of the RBM.
Output: An MPS with each tensor A(i), i = 1, 2, · · · , nv.
1: Gs = {(i, j)|Wij (cid:54)= 0} (cid:46) Graph formed by connected units
2: Hs = {j|(i, j) ∈ Gs}
(cid:46) All hidden units
3: Z (cid:48) = ∅ (cid:46) The degrees of freedom of the left virtual bond
4: for i = 1, · · · , nv do
5:
6:
7:
8:

Gt = ∅
Ht = ∅
X = Z (cid:48) ∪ {vi}
Y = {vi+1, vi+2, · · · , vnv }

(cid:46) Connections to be counted in tensor A(i)
(cid:46) Hidden units to be traced in tensor A(i)

(cid:46) The remaining physical

9:

Find a minimal set Z such that X ⊥ Y |Z on the graph

degrees of freedom

Gs.

for j ∈ Hs do

if hj is not connected to (Y \ Z) then

Move j from Hs to Ht.

(cid:46) Variable hj will be

traced out in tensor A(i).

end if

end for
for (k, j) ∈ Gs do

if vk and hj belongs to X ∪ Z ∪ Ht then

Move (k, j) from Gs to Gt.

(cid:46) The (vk, hj)

interaction will be included in tensor A(i).

10:
11:
12:

13:
14:
15:
16:
17:

18:
19:
20:

end if

end for
Z(cid:48),Z [vi] = (cid:80)
A(i)
Z (cid:48) ← Z

21:
22: end for

5

to satisfy the conditional independence X ⊥ Y |Z. Sup-
pose we take Z = {v1}, Gt = Ht = ∅, the ﬁrst ten-
sor A(1) can therefore be chosen as an identity tensor
which copies the visible variables {v(1)} to the right vir-
tual bond of the matrix A(1).

In Fig. 4(b), we select X = {v1, v2} and Y =
{v3, · · · , v6}. We can ﬁnd that the smallest Z can be
any of {v1, v2},{v2, h1},{v3, v4} or {h1, h2}. We choose
Z = {h1, h2} for example. Note that the set Z can
contain both visible and hidden units. The Gt in Al-
gorithm (2), denoted by the dashed lines in Fig. 4, con-
tains all the connections considered by the tensor A(2).
Ht = ∅. The left bond of A(2) is the same as the right
bond of A(1). And the right bond of A(2) consists of
Z = {h1, h2}.

And we go on to Fig. 4(c), where we denote all the
interactions which have been taken account as gray lines.
In this step, the set X = {h1, h2} ∪ {v3}, line 7 of Al-
gorithm (2). There are several choices of Z to reach the
minimum sizse |Z| = 2. Here, we choose Z = {v3, v4}.
Therefore, Gt consists of all the connections between
{h1, h2} and {v3, v4}. The corresponding interactions
are considered by A(3), whose right bond consists of
Z = {v3, v4}. Ht = ∅, no hidden units needs to be
traced out.

Finally, as we come to Fig. 4(d), Z includes v5 and h4.
We ﬁnd Gt = {h3} has no interaction with the variables
in the set Y when Z is given. So h3 is traced out when
constructing A(4).

Each connection line of the original RBM is considered
only once during the construction of the MPS. In this
way, we can obtain all the six tensors. We label the bond
degrees of freedom in Fig. 4(f). Note that even if one
is not running the algorithm numerically, one can still
obtain the optimal bond dimension of the corresponding
MPS. Moreover, this method can be used in for general
undirected graphical model.

C.

Implication of the RBM to MPS mapping

The connection between TNS and RBM suggests that
we can use the knowledge of TNS, especially entangle-
ment entropy, to quantify the expressibility of RBM. Let
us divide the visible units into two parts, denoted as X
and Y , respectively. The entanglement entropy of a func-
tion Ψ (which can either be an RBM or an MPS) between
these two subsystems is then given by [35]

S = −Tr(ρ ln ρ),

(9)

ρ =

Ψ∗ (v(cid:48)

X , vY ) Ψ (vX , vY ) .

(10)

(cid:88)

vY

} eaivi+(cid:80)

{hj∈Ht

(k,j)∈Gt

vkWkj hj +(cid:80)

j∈Ht

bj hj

where ρ is the reduced density matrix deﬁned by

To illustrate the mapping algorithm, we take the RBM
in Fig. 1(a) as an example. We start in Fig. 4(a) by
considering X = {v1} and Y = {v2, v3, · · · , v6}.
It is
straightforward to see that Z can either be {v1} or {h1}

The matrix is spanned by the visible degrees of freedom
in X, while vY contains all the visible units in Y . The
entanglement entropy characterizes the information con-
tent of Ψ, and can be viewed as a proxy of correlations

6

Figure 5. (a) RBM with all hidden units traced out. The Arcs
represent the connections between the visible units mediated
by the hidden units. The system is divided into two subsys-
tems, X and Y . Y is then further divided into two parts,
Y = Y1 ∪ Y2, where Y1 contains all the units that directly
connect to the units in X. (b) Alternatively, X is divided
into two parts X = X2 ∪ X1, where X1 contains units that
connect directly to the units in Y . (c) The resulting MPS
with smaller bond dimensions in comparison with that shown
in Fig. 2(c).

In case X and Y are completely
between X and Y .
disentangled, the entanglement entropy Eq. (9) is zero.
While if there are only short range correlations, the en-
tanglement entropy should depend only on the size of
the interface separating X and Y , which is small in com-
parison with the full volume of the system [43]. The
entanglement entropy of MPS can be readily calculated.
The maximal entanglement entropy is bounded by the
logarithm of the bond dimension, i.e. ln D [44].

To better assess the expressive power of an RBM one
needs to ﬁnd an equivalent MPS representation with the
smallest possible bond dimensions. However, the simple
and intuitive approach illustrated in Fig. 2 just provide
an upper bound of the bond dimension which is generally
higher than what is needed. For example, the bond di-
mension of the second bond, D = 8, in Fig. 2(c) is more
than enough to capture the entanglement since there are
only two visible units on its left, whose total degrees of
freedom just equals four. Below we present more sophis-
ticated approaches to obtain a tighter bound on the bond
dimensions. This improved approach is independent on
the assignment of the hidden units.

Figure 5(a) shows an RBM after tracing out all the
hidden units. The arcs indicate the interactions between
the visible units mediated by the hidden units.
If we
separate the visible units into two parts, X and Y (=

Figure 4. The optimal mapping from the RBM to the MPS.
(a)-(e) shows each step of the construction. The set X is de-
noted by pink ellipse and Y in purple ellipse. Z is the minimal
set satisfying X ⊥ Y |Z, denoted in light green ellipse. When
the variables in Z are given, the RBM function factorize into
product of functions of variables in X and Y . The degrees of
freedom in Z is represented by the virtual bond of the MPS.
The connection lines in gray represent interactions counted by
previous tensors. The doted line indicates those under consid-
eration at the current step, denoted by Gt in Algorithm (2).
The constructed tensor in (a)-(e) are given in (f).

Y1 ∪ Y2), where the interface region Y1 contains all the
visible units that directly link to X, and Y2 the rest units,
the RBM function, Eq. (2), can then be expressed as

ΨRBM (v) = ψ (vX , vY1) φ (vY1, vY2 ) .

(11)

Once the visible units in Y1 are ﬁxed, this RBM becomes
a direct product of the visible units in X and Y2. The
rank of this function [45, 46], or the entanglement entropy
between X and Y , is therefore determined by the total
number of visible units in the interface region Y1, denoted
by |Y1|. Hence, the bond dimension of the MPS on the
bond separating X and Y is simply given by D = 2|Y1|.
Alternatively, one can also divide X into two parts
X = X2 ∪ X1 by including all the units that have di-
rect connections with Y in X1 and the rest units in X2
[Fig. 5(b)]. Following the argument given above, it can
be shown that the entanglement entropy between X and
Y is also bounded by the number of units in X1. Thus,
the entanglement entropy between X and Y is bounded
by Smax = min(|X1|, |Y1|) ln 2. 2

Figure 5(c) shows the MPS obtained with this ap-
proach. The bond dimensions from left to right are
D = 2, 4, 4, 4, 2, respectively. They are tighter bounds
on the bond dimensions of MPS compared to Fig. 2(c).
More generally, an even tighter bound on bond dimen-
sion can be obtained by ﬁxing a minimal number of units,
no matter they are visible or hidden, such that the RBM
separates into a bipartite product state. To directly con-
struct the MPS with the optimal smallest bond dimen-
sions, we represent the degrees of freedom in the interface
region using the virtual bonds of the MPS. Programming
codes to implement these RBM to MPS mapping algo-
rithms are given in [39].

The bond dimensions of the resulting MPS control
the maximal entanglement entropies between the vis-
ible units. Therefore, the entanglement entropy pro-
vides a rigorous quantiﬁcation on the expressive power
of an RBM solely based on its architecture. Estimating
these bounds can be done eﬃciently with the provided
codes [39]. Moreover, canonizing the MPS may further
reduce the bond dimensions by removing all unnecessary
degrees of freedom and give precise value of the entan-
glement entropies.

Similarly, one can map an RBM into a PEPS [28] by
arranging the visible units on a two-dimensional array. A
similar procedure was used in [47] to map a multi-scale
entanglement renormalization ansatz [48] into a PEPS.
This is particularly useful if the original dataset repre-
sented by the RBM, for example the pixels of image, is
deﬁned on a two-dimensional grid.

In general, if the number of units along any direction
of the interface region is bounded by m, then the upper

2 Similarly, when modeling the probability using probabilistic
graphical models, the upper bound of classical mutual informa-
tion is given by the size of the interface [43].

7

(12)

bound of the entanglement entropy should scale as

Smax ∼ mV (d−1)/d,

where d is the spatial dimension on which the TNS is de-
ﬁned, and V is the volume of the system. Thus, the max-
imum entanglement of a sparsely connected RBM [18]
satisﬁes the area law. However, for a densely connected
RBM, the interface region extends to the whole system
and m ∼ V 1/d, therefore Smax ∼ V scales linearly with
the subsystem volume. This suggests that the dense
RBM can provide a compact representation for a highly
entangled quantum state that does not satisfy the en-
tanglement area law. The number of parameters in this
dense RBM just scales polynomially with the system
size. However, to describe this state using an MPS or
a PEPS, the number of parameters needed scales expo-
nentially with the system size [48, 49]. This provides an
entanglement entropy justiﬁcation for the variational cal-
culation of quantum systems using RBM functions [17].
Section V B presents a detailed analysis of the tensor rep-
resentation of the state used in Ref. [17].

The mapping from RBM to TNS is valid more gener-
ally and can be extended to Boltzmann machines with-
out the bipartite graph restriction. In Appendix B, we
discuss the general equivalence between Boltzmann ma-
chines [37] and TNS.

III. RBM REPRESENTATION OF TNS:
SUFFICIENT AND NECESSARY CONDITIONS

We now address the reverse question about how to
transform a TNS into an RBM with a given architecture.
Here only a given architecture of RBM is considered be-
cause otherwise one can reproduce any function using an
RBM with exponentially large resources [9–11]. Again we
present a constructive approach to determine the RBM
parameters for a TNS. In Appendix A, a suﬃcient con-
dition for mapping a TNS to an RBM is discussed and
demonstrated with the statistical Ising model and the
cluster state [50].

Let us take the 6-site MPS shown in Fig. 1(b) as an
example to show how to parameterize it into an RBM
with the architecture shown in Fig. 6(a). The hidden
layer contains nh = 4 units, which factorize the MPS
into a product of 4 tensors, one 2 × 2 × 2 × 2 tensor,
T (1), deﬁned at h1, and three 2 × 2 × 2 tensors, T (2,3,4),
deﬁned at the remaining three hidden units. Requiring
this product to equal the MPS, we have

(cid:89)

Tr

i

A(i) [vi] = T (1)

v1v2v3v4

T (2)
v2v3v4

T (3)
v3v4v5

T (4)
v4v5v6

.

(13)

Taking the logarithm of this equation, we obtain 2nv = 64
linear equations for the 24 + 23 + 23 + 23 = 40 tensor el-
ements. These equations are over determined since the
number of parameters is less than the number of equa-
tions. In order to map a TNS to an MPS, these equa-
tions must have an unique solution. If these equations

the visible units are all binary numbers. 3 For a 2 × 2 × 2
tensor, a rank-2 decomposition always exists in complex
ﬁeld and a rank-4 decomposition in real ﬁeld [51]. How-
ever, for an arbitrary tensor, it is diﬃcult to determine
its rank [45]. The high order singular value decomposi-
tion [52] gives the lower bound of the tensor rank as the
dimension of the core tensor. If it is larger than 2, the
binary condition of the hidden unit cannot be satisﬁed.
After the decomposition Eq. (15), we can further de-
couple each matrix into a product of three matrices ac-
cording to Eqs. (4-6). For example, we can express ma-
trix P as

P =

(cid:19)

(cid:18) p q
r s

(cid:18) 1

= p

(cid:19) (cid:18) 1 1
1 ps
qr

r
p

(cid:19) (cid:18) 1

(cid:19)

.

(16)

q
p

Comparing to Eqs. (4-6), we obtain

W22 = ln

,

a22 = ln

b22 = ln

ps
qr
r
p
q
p

,

.

8

(17)

(18)

(19)

Similar to aij, bij is a partial bias to the j’th hidden
unit imposed by the i’th visible unit. The bias of the
j’th hidden unit is given by bj = (cid:80)
In this way,
each tensor of Eq. (13) is written in the RBM form, for
example.

i bij.

Thus the necessary and suﬃcient condition for map-
ping an MPS to an RBM is that both Eq. (13) and
Eq. (14) have unique solutions. In the case of nh = 1,
Eq. (13) merely rephrases the MPS as the wavefunction
itself. The rank-2 decomposition of the tensor, similar
to Eq. (14), is generally more diﬃcult to satisfy. By in-
creasing the number of hidden units and connections, one
can increase the number of parameters of RBM to ensure
both Eq. (13) and Eq. (14) to have solutions. This agrees
with the mathematical results stating that RBM can rep-
resent any function by employing an exponentially large
number hidden units and connections [9–11].

In practice, a convenient way to quickly check whether
a state has a particular RBM representation is to consider
the factorization property deﬁned by Eq. (11), namely to
examine whether a TNS can be factorized into a product
state by ﬁxing a sequential of visible units.

Using this simple approach, we can actually show
that the spin-1 Aﬄeck-Kennedy-Lieb-Tasaki (AKLT)
state [53] cannot be represented as an RBM (with ternary
visible units) with only short-range connections because
of the existence of hidden string order. Expressed in the
(Sz)⊗nv basis, each component of the wave function looks
like “+ 0 0 − 0 + − 0 0 0 +”, where (+ , 0 , −) repre-
sent the eigenstates with Sz = (1, 0, −1). There is a

Figure 6. Graphical representation of (a) Eq. (13) and (b)
Eqs. (14,15).

have no solution, then one has to change the architec-
ture of RBM. One can, for example, increase the number
of parameters by increasing the number of hidden units
and/or the number of connections of the RBM. This set
of linear equations may become underdetermined if the
number of parameters in the RBM becomes larger than
the number of equations.

If Eq. (13) has an unique solution, we then need to
decompose each tensor into an RBM with just one hidden
unit. For example, for the tensor shown in Fig. 6(b), i.e.
T (2), we should decouple it as

T (2)
v2v3v4

=

(cid:88)

eh2b2+(cid:80)

i∈{2,3,4} vi(Wi2h2+ai2),

(14)

h2∈{0,1}

where aij is a partial bias of the i’th visible unit con-
tributed by the j’th hidden unit. The bias of the i’th
visible unit is given by the sum of all partial biases con-
tributed by the hidden units connecting this visible unit,
ai = (cid:80)
j aij. For this 3-index tensor, 7 parameters need
to be determined from 23 = 8 equations [Fig. 6(b)]. The
number of parameters grows linearly with the order of
T , but the number of equations grows exponentially in-
stead. In general, Eq. (14) is over-determined, and it has
solution only in special cases.

In practice, the Eq. (14) can be considered as the tensor
rank decomposition (CP decomposition) [45, 46] of T (2),

T (2)
v2v3v4

=

(cid:88)

h2∈{0,1}

Pv2h2Qv3h2Rv4h2 .

(15)

The rank of T (2) is 2 because the hidden unit (h2 here) is
a binary variable. P, Q, R are all 2 × 2 matrices because

3 If the rank of tensor is higher than two, then one has to enlarge
the basis dimension of hidden units from 2 to a larger number.

hidden antiferromagnetic order with arbitrary number of
“0”s inserted. Even if we ﬁx a sequence of visible units
in the middle to be “0”, the state is still combination of
“+ 0 0 0 · · · 0 −” and “− 0 0 0 · · · 0 +”, which cannot be
simply expressed as a product state, or an RBM with just
local connections. On the other hand, the AKLT state
can be written as a D = 2 MPS [25, 53]. This exam-
ple shows that the entanglement entropy is not the only
variable that quantiﬁes the expressive power of RBM.

IV. EXAMPLE: RBM REPRESENTATION OF
THE TORIC CODE GROUND STATES

As a concrete example of the TNS-RBM transforma-
tion introduced in the preceding section, we construct the
RBM representation of the toric code ground states from
the corresponding PEPS wavefunctions [54]. More exam-
ples, including the Ising model and the cluster state [50],
are given in the Appendix A.

The toric code [54] is one of the simplest models whose
ground states are topological ordered [55] and holds the
promise for quantum computation [56]. It is deﬁned by
the Hamiltonian

H = −

(cid:88)

A+ −

(cid:88)

B(cid:3),

(cid:3)

+
σz
i , B(cid:3) =

A+ =

(cid:89)

i∈+

σx
i ,

(cid:89)

i∈(cid:3)

(20)

(21)

i and σz

where σx
i are Pauli matrices deﬁned on the hori-
zontal and vertical links of the square lattice. A+ consists
of the product of four σz
i operators connecting to each
vertex denoted by +, and B(cid:3) consists of the product of
i operators on each minimal square plaquette (cid:3).
four σx
All the A+ and B(cid:3) operators commute with each other.
The toric code on a torus has four topologically degen-
erate ground states. Deng et al. [18] has already found
an RBM representation for one of them. We now present
the RBM representations for all the four ground states
using the approach introduced in the preceding section
based on their PEPS representations [25, 57].

We start from the PEPS representation for one of the
ground states of the toric code model
[25, 57] shown in
Fig. 7. The PEPS consists of three kinds of local tensors
of dimension 2: a 4-index identity tensor I4 deﬁned at
each vertex, a 3-index identity tensor I3 deﬁned at the
center of each link where physical operators reside, and
a U -matrix linking any two neighboring I3 and I4

U =

(cid:18) 1 1
1 −1

(cid:19)

.

1
√
2

(22)

To ﬁnd its RBM representation, we identify the bond-
centered I3 tensors as the visible units and the vertex-
centered tensors I4 as the hidden units, and decompose
U as

U =

(cid:18) 1

(cid:19) (cid:18) 1 1
1 eiπ

e0

1
√
2

(cid:19) (cid:18) 1

(cid:19)

.

e0

(23)

9

Figure 7. (a) TNS and (b) its corresponding RBM representa-
tions of the toric code ground state at the (+, +)-topological
sector on the square lattice. The dashed red and orange lines
are the paths of Wilson loops used in Eq. (28) and Eq. (29),
(c-e) RBM representations of the toric code
respectively.
ground states in the other three topological sectors. The cyan
dots denote the visible units with bias a = iπ .

Using Eq. (16), we then ﬁnd the connection weights and
biases of visible and hidden units to be

W = iπ,
a = 0,
b = 0.

(24)
(25)
(26)

The resulting wave function is depicted in Fig. 7(b). It
is a RBM with only nearest neighboring connections be-
tween visible and hidden units. Each hidden unit couples
to four visible units. Tracing out all the hidden units, the

RBM becomes

ΨTC (v) =

(cid:89)

(cid:16)

1 + eiπ (cid:80)

i∈+ vi

(cid:17)

.

(27)

+

It represents a quantum state with equal weight su-
perpositions of closed loops where the sum of the visible
variables is even on each vertex [54]. The RBM rep-
resentation Eq. (27) is simpler than that introduced in
Ref. [18] where the hidden units are deﬁned on both the
vertices and the plaquette centers.

The four ground states of the toric code model be-
long to four diﬀerent topological sectors. To diﬀerentiate
these degenerate states, we ﬁrst deﬁne two Wilson loop
operators

X1 =

σx
i , X2 =

(cid:89)

i∈C1

(cid:89)

i∈C2

σx
i ,

(28)

where C1 and C2 denote the paths along the horizontal
and vertical directions of the lattice, indicated by the red
lines in Fig. 7(a), respectively. X1 and X2 are mutually
commuting. They also commute with the Hamiltonian.
Thus we can use their eigenvalues to label the eigenstates.
Both X1 and X2 have two eigenvalues, +1 and −1. The
four-fold degenerate ground states correspond to the four
eigenstates of (X1, X2). They can be classiﬁed into four
topological sectors, labeled by the eigenvalues of (X1, X2)
as (±, ±). The wavefunction illustrated in Fig. 7(b) be-
longs to the (+, +) sector, namely (cid:10)v|Ψ(+,+)(cid:11) = ΨTC (v).
Now let us introduce the following two operators along
the paths D1 and D2 indicated by the dashed orange lines
in Fig. 7(a),

Z1 =

σz
i , Z2 =

(cid:89)

i∈D1

(cid:89)

σz
i ,

i∈D2

(29)

(cid:12)Ψ(−,+)(cid:11) = Z2
(cid:12)Ψ(−,−)(cid:11) = Z1Z2

These two operators do not commute with X1 and X2.
They transform the states between diﬀerent topologi-
(cid:12)
cal sectors [58]. For example, (cid:12)
(cid:12)Ψ(+,+)(cid:11),
(cid:12)
(cid:12)Ψ(+,+)(cid:11), and (cid:12)
(cid:12)
(cid:12)
(cid:12)Ψ(+,−)(cid:11) = Z1
(cid:12)Ψ(+,+)(cid:11).
In the PEPS representation, Z1,2 is to change all the iden-
tity tensors I3 shown in Fig. 7(a) along the D1,2 path into
diagonal tensors diag(1, −1). In the corresponding RBM
representation, this is to change the bias of the visible
variables in Eq. (25) from a = 0 to a = ln (−1) = iπ
along the D1 and D2 paths [Fig. 7(c,d,e)].

Note that the Wilson loops, D1 and D2, are not nec-
essary to be straight lines. But they must wind around
the torus (Fig. 8). The RBM that is obtained by con-
tinuously distorting D1 or D2 is gauge equivalent to the
original one. In other words, to apply the operator X1
deﬁned on a closed path without winding the torus to
any of the ground state will not alter its topological sec-
tor. For example, the RBM shown in Fig. 8(a) is gauge
equivalent to that shown in Fig. 7(b). They are related
by a loop of σz
i operators along the path E in Fig. 8(a),
which is equal to the product of all A+ operators en-
closed by E. This product of A+ operators changes the

10

Figure 8. Demonstration of the gauge invariance of RBM. (a)
The wavefunction obtained by applying four A+ operators
[Eq. (21)] within the region enclosed by the orange path E to
the RBM shown in Fig. 7(b). The visible biases are changed
from 0 to iπ on the path, but the two RBM wavefunctions
before and after the transformation are gauge equivalent. (b)
The RBM wavefunction is gauge equivalent to the that shown
in Fig. 7(d) by moving the Wilson path from D1 to D(cid:48)
1. Please
refer to Fig. 7 for the deﬁnition of symbols.

visible biases along the closed loop E from a = 0 to iπ.
But the wavefunction remains in the same topological
sector since A+ at each vertex is conserving. Similarly,
the state in Fig. 8(b) is identical to that in Fig. 7(c).
More detailed discussion on the redundancy of the RBM
parametrization is given in Sec. V A.

V.

IMPLICATIONS OF THE RBM-TNS

CORRESPONDENCE

A. Optimizing RBM using tensor-network methods

Similar to TNS, it is known that RBM or other neu-
ral network function contains redundant degrees of free-
dom [3]. Two RBMs with diﬀerent connection weights
and biases may represent equivalent functions. An RBM
can be simpliﬁed or optimized by removing redundant
degrees of freedom using the well established tensor-
network methods.

In one dimension, for example, one can use the canon-
icalization approach of MPS to optimize an RBM. To do
this, we ﬁrst transform an RBM into an MPS using the
algorithm introduced in Sec. II. The MPS is then canon-
icalized to minimize the bond dimensions for all the local
tensors by discarding zero singular vectors [41, 42]. This
can also partially ﬁx the gauge of the MPS. Finally, we
map this optimized MPS back to an RBM using the ap-
proach introduced in Sec. III. The RBM such obtained is
equivalent to the original one, but is optimized.

To understand this optimization scheme, let us con-
sider the RBM wavefunction of the 1D cluster state pre-
sented in Ref. [18]. This RBM contains equal number
of visible and hidden units with each hidden unit con-
necting to three visible units.
It can be mapped onto
a D = 4 MPS using the simple approach introduced in
Sec. II because each bipartition cuts two connections. By
taking the canonical transformation, the bond dimension
of this MPS is reduced to 2. Mapping this simpliﬁed MPS

11

simplify various RBM functions.

In practice, the TNS used in the simpliﬁcation of an
RBM may have a huge bond dimension which is diﬃ-
cult to handle. There are two approached that can be
used to resolve this problem. The ﬁrst is to dynamically
truncate the TNS bond dimensions during the transla-
tion from the RBM to TNS. This can avoid the storage
of huge TNS tensors. The other is to divide the system
into several overlapped pieces, and perform the simpliﬁ-
cation for each piece separately. In either case, one can
simplify the original RBM using the TNS canonicaliza-
tion technique.

B. TNS representation of the shift-invariant RBM
and its entanglement capacity

The variational Monte Carlo study presented in [17]
employed a shift-invariant RBM function [65] to enforce
the translational invariance of a physical system. The
variational ansatz is a product of nv RBM functions de-
ﬁned in Eq. (2)

Ψ(v) =

ΨRBM (T v) ,

(31)

(cid:89)

T

where T is the translational operator which shifts the vis-
ible variables around the periodic spatial direction. Fig-
ure 10(a) shows an example of a shift-invariant RBM.
Assuming each RBM wave function ΨRBM contains nh
hidden units, the shift-invariant RBM contains nvnh hid-
den variables.

This shift-invariant RBM can be also written as an
MPS. To do this, we ﬁrst express each individual fac-
tor ΨRBM as an MPS with bond dimension DRBM. For
example, one of the RBMs used in Ref. [17] is a fully
connected RBM with four hidden units before transla-
tional shift. When constructing the MPS, the minimum
set C satisfying Eq. (7) contains all the four hidden
units. It corresponds to an MPS with bond dimension
DRBM = 24 = 16. Next, we assemble these MPSs into a
tensor network as illustrated in Fig. 10(b). This tensor
network can be further written as a single MPS. The cor-
responding bond dimension is D = (DRBM)nv , which ap-
pears to have a much higher entanglement entropy bound
than each factor ΨRBM.

In order to better estimate the expressive power of the
shift-invariant RBM, we can directly map it into an MPS
using the algorithm introduced in Sec. II B [39]. Using
this approach, one ﬁrst identify the minimal interface re-
gion and determines the optimal bond dimension based
on the speciﬁc structure of the shift-invariant RBM with
enlarged hidden units. For example, the enlarged shift
invariant RBM corresponds to an MPS with bond di-
mension D = 2nv/2 in the center, see Fig. 10(a).

The shift-invariant operation plays an important role
in improving the accuracy of the variational wave func-
tion [17] because it drastically increases the entanglement
capability of the wave function without increasing the

Figure 9. Two equivalent TNS representations of the toric
code ground states obtained by applying the projection oper-
ator P to an initial wavefunction |ψ0(cid:105) deﬁned in the texts. (a)
θ = 0. The local identity tensor, I4, is deﬁned at the center
of each plaquette, and U is the matrix deﬁned by Eq. (23).
(b) θ is arbitrarily chosen. The local tensors are deﬁned on
both the original original and dual lattice sites. A and B are
two θ-dependent 5-index tensors.

back, we obtain an optimized RBM with each hidden unit
just connecting two neighboring visible units. See Ap-
pendix A for detailed parametrizations of the simpliﬁed
RBM.

An RBM deﬁned in higher dimensions can be also
simpliﬁed by mapping it onto a PEPS or other higher-
dimensional TNS. The bond degrees of freedom of the
PEPS can be reduced or at least partially reduced (if
there are redundancies), by taking higher-order singu-
lar value decompositions (or more generally Tucker de-
compositions) for all the local tensors [59], or just sin-
gular value decompositions for all neighboring pairs of
local tensors similar to that used in the determination
of the ground-state wavefunction by the simple update
method [60].

The redundancy of RBM can be exempliﬁed using the
toric code model Eq. (20). The ground state wavefunc-
tion can be obtained by applying the projection operator

P =

(cid:89)

+

1 + A+
2

(cid:89)

(cid:3)

1 + B(cid:3)
2

(30)

to an arbitrary product state over the spins |ψ0(cid:105) =
(cid:81)
i (cos θ |↑(cid:105) + sin θ |↓(cid:105))i. Apparently, the PEPS and its
corresponding RBM such obtained is not unique. The
state shown in Fig. 7(a) corresponds to the choice θ =
π/4. Figure 9(a) shows another choice with θ = 0 which
It is the
has 4 index tensors in the plaquette center.
eigenstate of Z1,2 in Eq. (29), which is the superposi-
tion of the states Fig. 7(b,c,d,e). While Fig. 9(b) shows
the state obtained with a general θ which has 4 index
tensors deﬁned both in the plaquette center and on the
vertices. The corresponding RBM corresponds to [18]
and contains more connections than the other two cases.
Although these are all ground states of the toric code
model, it is impossible to ﬁnd a local gauge transforma-
tion in the internal bonds to connect the local tensors
because the ground state is a non-injective Z2 spin liq-
uid state [61–63]. Exploiting the rich math structures of
non-injective PEPS [64], one may further transform or

12

of a TNS.

We ﬁrst clarify the deﬁnition of entanglement entropy
for real dataset. Assuming the instances of a dataset
follow a probability distribution P (v), we introduce a
probability amplitude Ψ(v) = (cid:112)P (v) in analog to the
quantum mechanical wave function. Using Ψ(v), one can
deﬁne the reduced density matrix and entanglement en-
tropy of the dataset following Eqs. (9, 10). The entangle-
ment entropy deﬁned in this way is meaningful because it
captures the complexity of real dataset similar to classical
information theoretical measures [4]. Transferring quan-
tum entanglement perspective to machine learning pro-
vides a practically useful way to quantify the diﬃculty of
unsupervised learning and guides future progresses with
insights in modeling quantum many-body states. These
considerations are relevant to those generative modelling
inspired by quantum physics, where one uses a wavefunc-
tion square to model the probability [67–70].

Consider a dataset of natural images, the correlations
between pixels are typically dominated by short range
ones which suggests that the entanglement entropy of
the dataset deﬁned in above is relative small. As a conse-
quence, dense connections in the RBM are not absolutely
necessary. In fact, the authors of Ref. [71] showed that a
dense RBM still performs well even when 80% of the con-
nections are randomly removed. Reference [66] also pro-
posed an RBM with sparse connections with small-world
network structure and found that it performs well com-
pared to a densely connected RBM. Moreover, the distri-
bution of the entanglement is inhomogeneous in various
locations of the space. With an entanglement quantiﬁ-
cation, these features of the dataset can be exploited in
the neural network structure design.

Another advantage of introducing quantum entangle-
ment for realistic dataset is that the RBM-TNS connec-
tion may allow one to adopt the techniques developed
in quantum physics directly to machine learning. For
example, it is straightforward to estimate the entangle-
ment entropy upper bound of an RBM via counting the
bond dimension of its TNS representation. Alternatively,
entanglement entropy is a useful characterization of the
diﬃculty of the learning task when directly using TNS to
model the dataset [69].

Interestingly, the entanglement structure of deep learn-
ing was also recently explored by authors in computer
science [72]. Their discussions were mainly on feedfor-
ward neural networks but the key tool for achieving their
conclusions is from the techniques developed in tensor
networks.

D. Entanglement advantage of deep Boltzmann
machines over the shallow ones

The mapping between RBM and TNS discussed in
Sec. II is applicable general Boltzmann Machines with-
out the bipartite graph restriction. In particular, apply-
ing the to deep Boltzmann machines (DBM) [38] explains

Figure 10. (a) A shift-invariant RBM of nv = 4 and nh = 2,
which is obtained by multiplying nv copies of RBM with
shifted connections. (b) The corresponding MPS, can be con-
structed by connecting nv copies of the MPS constructed from
the corresponding RBM, each tensor oﬀsets by one site. The
green dots are identity tensors.

number of variational parameters. This construction can
be generalized to other variational wave function [28].
Moreover, this trick can be also used to implement other
symmetries, such as rotation or inversion symmetries.

From the equivalence between RBM and TNS, we ﬁnd
that there are several guiding principles that can be used
to design even more powerful RBM variational ansatz
for quantum systems. First, the connection in RBM
should be global because otherwise the bond dimension
of the corresponding MPS will have ﬁnite bond dimen-
sions which do not scale with the system size. Note that
this requirement does not mean the RBM connections
have to be dense. A sparsely connected RBM with long-
range connections can also represent a TNS with large
bond dimensions. In fact, the results of Ref. [17] show
that many of the optimized RBM connection weights are
close to zero. Reference [66] also shows that sparse con-
nected RBM can have good performance in learning real
dataset. Second, sharing the same parameters for many
hidden and visible units can signiﬁcantly reduce the num-
ber of independent variational parameters without scar-
ifying the entanglement capacity of the ansatz. And ﬁ-
nally, one can connect multiple hidden units to the same
set of visible units of RBM to mediate large entanglement
between them.

C. An entanglement perspective to unsupervised
learning

A natural consequence of the connection between RBM
and TNS is a quantum entanglement perspective on un-
supervised learning of probabilistic models. The univer-
sal approximation theorem in machine learning [9–11]
states that there exists an RBM to describe a dataset to
any accuracy, if there is no limit on the number of hidden
units. By introducing the entanglement entropy of real
dataset one can better quantify the required resource in
terms of the number of hidden neurons and connections
of an RBM, or equivalently, the eﬀective bond dimensions

13

entanglement theory of TNS to quantify the expressive
power of RBM and obtain lower bound on the required
resources compared to previously know results [9–11]. It
puts the discovered similarity between the renormaliza-
tion group and deep learning [7] in a more rigorous man-
ner, and provides a practically useful approach to remove
the redundant degrees of freedom in the RBM functions
(Sec. V A). Moreover, connections to the TNS identify
the shift-invariant construction [65] as a key ingredient
in the successful variational calculation [17] and sets up
useful guiding principles to construct more powerful vari-
ational ansatz (Sec. V B). Akin to the success of TNS in
quantum physics, our ﬁnding suggests that the success
of deep learning is related to the relatively low entangle-
ment entropy in the datasets represented by the RBMs,
such as natural images and speech signals (Sec. V C).
The entanglement entropy also oﬀers a new perspective
for using deep Boltzmann Machines (Sec. V D).

The correspondence between RBM and TNS suggests
that the physical insights and technical methods devel-
oped in quantum many-body physics can be exploited in
the ﬁeld of machine learning, and vice versa. In fact, the
tensor-network methods have already been applied to the
pattern recognition [69]. As we discussed in Sec. II the
RBM can represent quantum state more compactly than
TNS, this may oﬀer computational advantages [17]. Deep
learning algorithms [2] and industrial software and hard-
ware [74–76] may also be beneﬁcial for quantum many-
body physics researches through this connection.

For further investigation, it is interesting to explore
the connection between the deep learning architectures,
such as the deep Boltzmann machines [38], and the multi-
layer TNS, such as the tree tensor networks [77–80] and
the multi-scale entanglement renormalization ansatz [48].
In passing we also note the eﬀorts of understanding the
expressive power of the deep feedforward neural net-
works [81, 82]. We believe the insights on quantum en-
tanglement and tensor network states can deepen our
understanding on deep learning and guide better neural
nets design.

Note added. Recently, there appeared related works
exploring representational and entanglement properties
of Boltzmann Machines [83–89].

VII. ACKNOWLEDGMENTS

We thank Giuseppe Carleo, Dong-Ling Deng, Xi-
aopeng Li, Chen Fang, Xun Gao, E. Miles Stoudenmire,
Hong-Hao Tu and Yi-feng Yang for helpful discussions.
This work is supported by the National Natural Sci-
ence Foundation of China (Grants No. 11474331, No.
11190024, and No. 11774398) and the Ministry of Science
and Technology of China (Grant No. 2016YFA0302400).

(a) An RBM and (b) a deep Boltzmann Ma-
Figure 11.
chine with the same number of nv visible units (blue dots),
nh = 3nv hidden units (magenta dots) and 9nv connections.
According to Sec. II the corresponding MPS representation
of the RBM and DBM had bond dimension DRBM = 22 and
DDBM = 24 respectively. The dashed lines enclose a minimal
number of units which split the network once their values are
observed. The comparison shows the that DBM has larger
entanglement capacity with the given number of parameters.

their advantage over the shallow RBMs.

The shallow and deep BM architectures shown in
Fig. 11. They both have nv visible units, nh = 3nv hid-
den units and 9nv connections. In contrast to the RBM,
the hidden units of the DBM shown in Fig. 11(b) is orga-
nized into multilayer structures. Following Sec. II B the
C set units are enclosed by dash lines, when they’re ﬁxed,
all the visible units set X is proportional to all the right
visible units set Y . The bond dimensions are DDBM = 16
and DRBM = 4 respectively. Therefore, using the same
amount of parameters, the DBM is able to express more
complex functions with larger entanglement entropy.

As a concrete example of the application of the con-
siderations in above, we consider the 4 × 4 Bars and
Stripes dataset [73] used in [70] as an example. The
wave function is the equal superposition of 30 valid
conﬁgurations. And the exact entanglement entropy is
ln 15 − 7
15 ln 7 ≈ 1.80, which is larger than ln 4. This
implies that dataset can not be captured by the RBM
in shown in Fig. 11(a). However, capturing the same
distribution using the DBM in Fig. 11(b) is possible.

In general, the visible units in a deep Boltzmann ma-
chine can have longer ranged eﬀective connections medi-
ated by the deep hidden units (c.f. Fig. 5), hence a larger
entanglement capacity compared to the RBM with the
same number of hidden units and connections. Apply-
ing the mapping to TNS thus oﬀers a valuable way to
analyze and compare the expressive power of Boltzmann
machines with various architectures.

VI. DISCUSSIONS AND OUTLOOKS

We have discussed the general and constructive con-
nection between the RBM and TNS. This equivalence
sets up a bridge between the ﬁeld of deep learning and
quantum physics, allowing us to use the well-established

14

One example of this type is the statistical Ising model

with the partition function,

Z =

exp

K

sisj + H

(A3)

(cid:88)

{si}



(cid:88)

(cid:104)i,j(cid:105)



si



(cid:88)

i

where K is the coupling constant and H is the external
ﬁeld. si = ±1 are the Ising spins. To rewrite the partition
function into a summation of the RBM function of the
form Eq. (2) we introduce binary variables vi = (si+1)/2.
In one dimension, the Ising partition function can be
represented as an MPS shown in Fig. 12. The matrix
product on each bond reads as

RL =

(cid:18) eK+H e−K
e−K eK−H

(cid:19)

.

(A4)

Combining Eq. (A2) and Eq. (A4), we obtain the RBM
parameters W, a, b summarized in the ﬁrst line of Table I.

This procedure can be readily generalized to 2D, where
the partition function is represented by a PEPS. The
PEPS tensor follows a condition similar to Eq. (A1), as
illustrated in Fig. 12(b). We introduce one hidden unit
for each bond which couples to the two visible units con-
nected by the lattice bond. The only diﬀerence com-
pared to the 1D case is that the one replaces H by H/2
in the RL matrix Eq. (A4) since the each site is shared
by 4 instead of 2 bonds. Correspondingly, the a/2 bias
in Eq. (A2) is replaced by a/4 because the visible bias
is also shared by 4 connections [Fig. 12(b)]. The RBM
parameters for 2D Ising model are summarized in the
second line of Table I.

The above results show that a very simple sparse RBM
with nh = nv (or nh = 2nv in 2D) hidden units deﬁned
on the bonds can exactly reproduce the thermal distri-
bution of the Ising model. It is remarkable that this is
independent of the coupling strength and holds even at
the criticality where the correlation between the visible
spins are long ranged [19]. Essentially, the eﬀect of the
hidden units of the RBM play the role of a Hubbard-
Stratonovich auxiliary ﬁeld which decouple the interac-
tion on the bond [90].

Another example of the TNS satisfying Eq. (A1) is the
cluster state [50]. The MPS representation [25, 57] has

RL = 1√
2

(cid:19)

(cid:18) 1 1
1 −1

on every bond. We can obtain the

RBM parameters W, a, b using Eq. (A2) summarized in
the Table I. Similar to the Ising model case, the RBM
has hidden units coupled to the physical degree of free-
doms on each lattice bond. These construction is simpler
than the one of Ref. [18] which requires each visible unit
to connect to 3 hidden units. The simpliﬁcation is due
to that we construct the RBM representation from the
canonical MPS of the cluster state.

Figure 12. (a) The tensor A in the dashed red box has the
special form Eq. (A1). The green squares denote the L and R
matrices, while the blue dots are the 3 index identity tensor.
We transform the matrix product in the dashed orange rect-
angular according to Eq. (A2) to obtain the RBM parameters.
The half blue dot denotes a/2 since the visible unit is shared
by two neighboring dashed orange boxes. (b) The PEPS of a
similar structure is mapped to an RBM. The meaning of the
symbols is the same as (a).

Appendix A: A suﬃcient condition for RBM
representation of MPS/PEPS and examples

We give a suﬃcient condition for the MPS or PEPS to
have an RBM representation. Many physically interest-
ing thermal states and quantum wavefunction belong to
this class. For example, the toric code model discussed
in Sec. IV, the statistical Ising model with external ﬁeld,
and the 1D/2D cluster states discussed in this appendix.
A suﬃcient condition for an MPS to have the RBM
representation is that each tensor has the following form

Aαβ [v] = LαvRvβ,

(A1)

where L and R are two 2 by 2 matrices. As shown in
Fig. 12(a), the product of R and L in orange dashed box
can be replaced by coupling to the hidden unit of the
RBM. The bias for the visible unit (blue dot) is a/2 be-
cause it is shared by two neighboring boxes. According
to Eqs. (6-5), we can write the RL into the RBM param-
eters

RL =

(cid:18) 1

(cid:19) (cid:18) 1

1
1 eW

ea/2

(cid:19) (cid:18) 1

(cid:19)

eb

(cid:18) 1

1
1 eW

(cid:19) (cid:18) 1

(cid:19)

.

ea/2

(A2)

The decomposition can be arbitrary. Here we choose a
symmetric form for simplicity.

15

Model

W

b

a

1D Ising

2D Ising

1D cluster

2D cluster

ln (cid:0)4e4K − 2(cid:1)

− ln (cid:0)e4K − 1(cid:1) − ln 4

−4K − 2H − 2 ln 2

ln (cid:0)4e4K − 2(cid:1)

− ln (cid:0)e4K − 1(cid:1) − ln 4

−8K − 2H − 4 ln 2

ln 3
2

ln 3
2

− ln 2 + iπ

− ln 2 + iπ

2 ln 2

4 ln 2

Table I. The RBM parameters for the statistical Ising model and the cluster state. Each hidden unit interacts with two visible
units connected by a bond. The parametrizations are not unique and we only list one possible solution. The meaning of the
Ising model parameters is given in Eq. (A3)

Appendix B: General equivalence between
Boltzmann machines and TNS

work state

The name “restricted” in the RBM means that there
are only connections between the visible and hidden
units, not within them. The RBM-TNS correspondence
can also be generalized to the cases without such restric-
tions. For example, the deep Boltzmann machines [38]
have multilayers of hidden units with interconnections,
and the Boltzmann machines (BM) [37] have direct con-
nections within the visible and hidden units.

In general, the BM parametrizes a function in the form

ΨBM (v) =

e−E(v,h),

(B1)

(cid:88)

h

with the energy function

E(x = v ∪ h) = −

Wijxixj +

θkxk

 ,

(B2)





(cid:88)

i,j



(cid:88)

k

where Wij is the connection weight between the units i
and j, and θk is the bias of the unit k. One can either
view Eq. (B1) as a probability distribution or a complex
wavefunction amplitude.

To write Eq. (B1) into a TNS, we introduce tensor

M (ij) =

(cid:18) 1

(cid:19)

1

1 eWij

on the edges and diagonal tensors

Λ(k) = diag(1, eθk ) on the vertices. For the visible units,
the diagonal tensors have an additional dimension corre-
sponding to the external degree of freedoms. Using these
tensors, the BM Eq. (B1) can be written as a tensor net-

ΨTNS (v) = Tr

(B3)







(cid:89)

M (ij) (cid:89)

Λ(k)

 .

i,j

k

Conversely, one can also attempt to map a TNS back
to a BM. First, we prove that any TNS constructed rank
2 tensors only can be directly mapped to a binary BM.
The CP decomposition or rank decomposition [45] of d1×
d2 × · · · × dn tensor T (i) reads

T (i)
α1α2···αn =

α1kQ(i)
P (i)

α2kR(i)

α3k · · · ,

(B4)

r
(cid:88)

k=1

where P (i), Q(i), R(i), · · · are matrices. The equation
holds for a minimal number r, which is the rank of the
tensor. For example, r = 1 if T is a vector and r equals
the smaller dimension if T is a matrix. While for n (cid:62) 3,
r is not necessarily smaller than any di.

A TNS can be mapped to a BM with binary units if
r = 2 and di = 2, ∀i. When contracting the ﬁrst index of
T (i) and the second index of T (j), we can perform rank
decomposition and obtain a two by two matrix on the
connection

M (ij) =

P (i)(cid:17)T
(cid:16)

Q(j) =

(cid:18) p q
r s

(cid:19)

,

(B5)

where P (i) (Q(j)) is the matrix obtained from the de-
composition Eq. (B4) of T (i)(T (j)) respectively. With the
same procedure in Eqs. (16,17), we ﬁnd that Wij = ln ps
qr .
The two diagonal matrix in Eq. (16) can be absorbed into
the diagonal tensor, which contributes to θi.

For more general TNS with larger ranks, we can al-
ways perform the CP decomposition following the same
procedure and resulting BM will have hidden units with
multistates.

[1] Yann LeCun, Yoshua Bengio,

and Geoﬀrey Hinton,

[2] Ian Goodfellow, Yoshua Bengio,

and Aaron

“Deep learning,” Nature 521, 436–444 (2015).

Courville, Deep
http://www.deeplearningbook.org.

Learning

(MIT Press,

2016)

[3] Christopher M. Bishop, Neural Networks for Pattern
Recognition, 1st ed. (Clarendon Press, Oxford : New
York, 1996).

[4] Simon S Haykin, Neural networks and learning machines,
Vol. 3 (Pearson Upper Saddle River, NJ, USA, 2009).
[5] Michael A. Nielsen, Neural Networks and Deep Learning

(Determination Press, 2015).

[6] Daniel J. Amit, Hanoch Gutfreund, and H. Sompolinsky,
“Spin-glass models of neural networks,” Phys. Rev. A 32,
1007–1018 (1985).

[7] P. Mehta and D. J. Schwab, “An exact mapping between
the Variational Renormalization Group and Deep Learn-
ing,” ArXiv e-prints (2014), arXiv:1410.3831 [stat.ML].
[8] Henry W. Lin, Max Tegmark, and David Rolnick, “Why
does deep and cheap learning work so well?” Journal of
Statistical Physics 168, 1223–1247 (2017).

[9] Yoav Freund and David Haussler, “Unsupervised learn-
ing of distributions of binary vectors using two layer net-
works,” in Proceeding NIPS’91 Proceedings of the 4th In-
ternational Conference on Neural Information Processing
Systems (Morgan Kaufmann Publishers, San Francisco,
CA, 1994) pp. 912–919.

[10] N Le Roux and Y Bengio, “Representational power of re-
stricted Boltzmann machines and deep belief networks,”
Neural computation 20, 1631–1649 (2008).

[11] G Montufar and N Ay, “Reﬁnements of universal approx-
imation results for deep belief networks and restricted
Boltzmann machines,” Neural computation 23, 1306–
1319 (2011).

[12] G E Hinton, “Training products of experts by minimizing
contrastive divergence,” Neural computation 14, 1771–
1800 (2002).

[13] Tijmen Tieleman, Training restricted Boltzmann ma-
chines using approximations to the likelihood gradient
(ACM, New York, New York, USA, 2008).

[14] http://www.deeplearning.net/tutorial/rbm.html.
[15] G. E. Hinton and R. R. Salakhutdinov, “Reducing the di-
mensionality of data with neural networks,” Science 313,
504–507 (2006).

[16] G E Hinton, S Osindero, and Y W Teh, “A fast learning
algorithm for deep belief nets,” Neural computation 18,
1527–1554 (2006).
[17] Giuseppe Carleo

and Matthias Troyer,

“Solving
quantum many-body problem with artiﬁcial
(2017),

the
neural
http://science.sciencemag.org/content/355/6325/602.full.pdf.

Science 355,

networks,”

602–606

[18] Dong-Ling Deng, Xiaopeng Li,

and S. Das Sarma,
“Machine learning topological states,” Phys. Rev. B 96,
195145 (2017).

[19] Giacomo Torlai and Roger G Melko, “Learning thermo-
dynamics with Boltzmann machines,” Physical Review B
94, 165134–7 (2016).

[20] Li Huang and Lei Wang, “Accelerated monte carlo simu-
lations with restricted boltzmann machines,” Phys. Rev.
B 95, 035105 (2017).

[21] Junwei Liu, Yang Qi, Zi Yang Meng, and Liang Fu, “Self-
learning monte carlo method,” Phys. Rev. B 95, 041101
(2017).

[22] Guido Montúfar and Johannes Rauh,

models as marginals of hierarchical models,”
national Journal of Approximate Reasoning
http://dx.doi.org/10.1016/j.ijar.2016.09.003.

“Hierarchical
Inter-
(2016),

16

[23] Guido F Montufar, Johannes Rauh, and Nihat Ay, “Ex-
pressive power and approximation errors of restricted
boltzmann machines,” in Advances in Neural Informa-
tion Processing Systems 24 , edited by J. Shawe-Taylor,
R. S. Zemel, P. L. Bartlett, F. Pereira, and K. Q. Wein-
berger (Curran Associates, Inc., 2011) pp. 415–423.
[24] Laurent Younes, “Synchronous Boltzmann machines can
be universal approximators,” Applied Mathematics Let-
ters 9, 109–113 (1996).

[25] R. Orús, “A practical introduction to tensor networks:
Matrix product states and projected entangled pair
states,” Annals of Physics 349, 117–158 (2014).

[26] D. Perez-Garcia, F. Verstraete, M. M. Wolf, and J. I.
Cirac, “Matrix Product State Representations,” eprint
arXiv:quant-ph/0608197 (2006), quant-ph/0608197.
[27] Ivan V Oseledets, “Tensor-train decomposition,” SIAM
Journal on Scientiﬁc Computing 33, 2295–2317 (2011).
“Renormalization al-
gorithms for Quantum-Many Body Systems in two
and higher dimensions,” eprint arXiv:cond-mat/0407066
(2004), cond-mat/0407066.

[28] F. Verstraete and J. I. Cirac,

[29] Z. Y. Xie, J. Chen, J. F. Yu, X. Kong, B. Normand, and
T. Xiang, “Tensor renormalization of quantum many-
body systems using projected entangled simplex states,”
Phys. Rev. X 4, 011025 (2014).

[30] F Verstraete, V Murg,

and J I Cirac, “Matrix prod-
uct states, projected entangled pair states, and varia-
tional renormalization group methods for quantum spin
systems,” Advances in Physics 57, 143–224 (2008).

[31] Tomotoshi Nishino,

“Density matrix renormalization
group method for 2d classical models,” Journal of
the Physical Society of Japan 64, 3598–3601 (1995),
http://dx.doi.org/10.1143/JPSJ.64.3598.

[32] V. Murg, F. Verstraete, and J. I. Cirac, “Eﬃcient Eval-
uation of Partition Functions of Inhomogeneous Many-
Body Spin Systems,” Physical Review Letters 95, 057206
(2005), cond-mat/0501493.

[33] Michael Levin and Cody P. Nave, “Tensor renormaliza-
tion group approach to two-dimensional classical lattice
models,” Phys. Rev. Lett. 99, 120601 (2007).

[34] J. Eisert, M. Cramer, and M. B. Plenio, “Colloquium
: Area laws for the entanglement entropy,” Rev. Mod.
Phys. 82, 277–306 (2010).

[35] Michael A Nielsen and Isaac L Chuang, Quantum compu-
tation and quantum information (Cambridge university
press, 2010).

[36] E.M. Stoudenmire and Steven R. White, “Studying two-
dimensional systems with the density matrix renormal-
ization group,” Annual Review of Condensed Matter
Physics 3, 111–128 (2012).

[37] Geoﬀrey E Hinton and Terrence J Sejnowski, “Learning
and relearning in boltzmann machines,” in Parallel dis-
tributed processing: Explorations in the microstructure of
cognition, Vol. 1 (1986) pp. 282–317.

[38] Ruslan Salakhutdinov and Geoﬀrey Hinton, “Semantic
hashing,” International Journal of Approximate Reason-
ing 50, 969 – 978 (2009), special Section on Graphical
Models and Information Retrieval.

[39] See https://github.com/yzcj105/rbm2mps for Matlab
implementations of the algorithms to translate an RBM
to an MPS. With increasingly sophisticated approaches
the resulting entanglement entropy bound are tighter un-
til optimal.

[40] Benjamin Marlin, Kevin Swersky, Bo Chen, and Nando

Freitas, “Inductive principles for restricted boltzmann
machine learning,” in Proceedings of the Thirteenth Inter-
national Conference on Artiﬁcial Intelligence and Statis-
tics, Proceedings of Machine Learning Research, Vol. 9,
edited by Yee Whye Teh and Mike Titterington (PMLR,
Chia Laguna Resort, Sardinia, Italy, 2010) pp. 509–516.
[41] Guifré Vidal, “Eﬃcient classical simulation of slightly en-
tangled quantum computations,” Phys. Rev. Lett. 91,
147902 (2003).

[42] Guifré Vidal, “Eﬃcient simulation of one-dimensional
quantum many-body systems,” Phys. Rev. Lett. 93,
040502 (2004).

[43] Michael M. Wolf, Frank Verstraete, Matthew B. Hast-
ings, and J I. Cirac, “Area laws in quantum systems:
Mutual information and correlations,” Phys. Rev. Lett.
100, 070502 (2008).

[44] Ulrich SchollwÃ¶ck, “The density-matrix renormaliza-
tion group in the age of matrix product states,” Annals
of Physics 326, 96 – 192 (2011), january 2011 Special
Issue.

[45] https://en.wikipedia.org/wiki/Tensor_rank_

decomposition.

[46] F. L. Hitchcock, “The expression of a tensor or a polyadic
as a sum of products,” J. Math. Phys 6, 164–189 (1927).
[47] Thomas Barthel, Martin Kliesch, and Jens Eisert, “Real-
space renormalization yields ﬁnite correlations,” Phys.
Rev. Lett. 105, 010502 (2010).

[48] G. Vidal, “Entanglement renormalization,” Phys. Rev.

Lett. 99, 220405 (2007).

[49] Glen Evenbly and Guifre Vidal, “Class of highly entan-
gled many-body states that can be eﬃciently simulated,”
Physical review letters 112, 240502 (2014).

[50] Hans J. Briegel and Robert Raussendorf, “Persistent en-
tanglement in arrays of interacting particles,” Phys. Rev.
Lett. 86, 910–913 (2001).

[51] Joseph M Landsberg, Tensors: geometry and applica-
tions, Vol. 128 (American Mathematical Society Provi-
dence, RI, USA, 2012).

[52] Tamara G Kolda and Brett W Bader, “Tensor decom-
positions and applications,” SIAM review 51, 455–500
(2009).

[53] Ian Aﬄeck, Tom Kennedy, Elliott H. Lieb,

and Hal
Tasaki, “Rigorous results on valence-bond ground states
in antiferromagnets,” Phys. Rev. Lett. 59, 799–802
(1987).

[54] A.Yu. Kitaev, “Fault-tolerant quantum computation by

anyons,” Annals of Physics 303, 2 – 30 (2003).

[55] X.G.Wen, Quantum Field Theory of Many-Body Systems

(Oxford University Press, 2007).

[56] S. B. Bravyi and A. Y. Kitaev, “Quantum codes on a
lattice with boundary,” eprint arXiv:quant-ph/9811052
(1998), quant-ph/9811052.

[57] F. Verstraete, M. M. Wolf, D. Perez-Garcia, and J. I.
Cirac, “Criticality, the area law, and the computational
power of projected entangled pair states,” Phys. Rev.
Lett. 96, 220601 (2006).

[58] A.Y. Kitaev, A. Shen, and M.N. Vyalyi, Classical and
Quantum Computation, Graduate studies in mathemat-
ics (American Mathematical Society, 2002).

[59] Z. Y. Xie, J. Chen, M. P. Qin, J. W. Zhu, L. P. Yang, and
T. Xiang, “Coarse-graining renormalization by higher-
order singular value decomposition,” Phys. Rev. B 86,
045139 (2012).

[60] H. C. Jiang, Z. Y. Weng, and T. Xiang, “Accurate de-

17

termination of tensor network state of quantum lattice
models in two dimensions,” Phys. Rev. Lett. 101, 090603
(2008).

[61] Norbert Schuch, Didier Poilblanc, J I Cirac, and David
Pérez-García, “Resonating valence bond states in the
peps formalism,” Phys. Rev. B 86, 115108 (2012).
[62] N. Read and Subir Sachdev, “Large- N expansion for
frustrated quantum antiferromagnets,” Phys. Rev. Lett.
66, 1773–1776 (1991).

[63] X. G. Wen, “Mean-ﬁeld theory of spin-liquid states with
ﬁnite energy gap and topological orders,” Phys. Rev. B
44, 2664–2672 (1991).

[64] Norbert Schuch, Ignacio Cirac, and David Pérez-García,
“PEPS as ground states: Degeneracy and topology,” An-
nals of Physics 325, 2153 – 2192 (2010).

[65] K. Sohn and H. Lee, “Learning Invariant Representations
with Local Transformations,” Appears in Proceedings of
the 29th International Conference on Machine Learning
(ICML 2012) (2012), arXiv:1206.6418 [cs.LG].

[66] Decebal Constantin Mocanu, Elena Mocanu, Phuong H.
Nguyen, Madeleine Gibescu,
and Antonio Liotta, “A
topological insight into restricted boltzmann machines,”
Machine Learning 104, 243–270 (2016).

[67] Raphael Bailly, “Quadratic weighted automata:spectral
algorithm and likelihood maximization,” in Proceedings
of the Asian Conference on Machine Learning, Proceed-
ings of Machine Learning Research, Vol. 20, edited by
Chun-Nan Hsu and Wee Sun Lee (PMLR, South Garden
Hotels and Resorts, Taoyuan, Taiwain, 2011) pp. 147–
163.
[68] Ming-Jie

“Norm-
operator models,” Neural Computa-
20141473,
1927–1959

observable
tion
22,
https://doi.org/10.1162/neco.2010.03-09-983.

and Herbert

Jaeger,

(2010),

pMID:

Zhao

[69] Edwin Stoudenmire and David J Schwab, “Supervised
learning with tensor networks,” in Advances in Neural
Information Processing Systems 29 , edited by D. D. Lee,
M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett
(Curran Associates, Inc., 2016) pp. 4799–4807.

[70] Z.-Y. Han, J. Wang, H. Fan, L. Wang, and P. Zhang,
“Unsupervised Generative Modeling Using Matrix Prod-
uct States,” ArXiv e-prints
(2017), arXiv:1709.01662
[cond-mat.stat-mech].

[71] V. Dumoulin, I. J. Goodfellow, A. Courville, and Y. Ben-
gio, “On the Challenges of Physical Implementations
(2013),
of RBMs,” Proc. AAAI 2014, pp. 1199-1205
arXiv:1312.5258 [stat.ML].

[72] Yoav Levine, David Yakira, Nadav Cohen,

and Am-
non Shashua, “Deep learning and quantum entanglement:
Fundamental connections with implications to network
design,” (2017), arXiv:1704.01552 [cs.LG].

[73] David JC MacKay, Information theory, inference and
learning algorithms (Cambridge university press, 2003).

[74] https://www.nvidia.com/en-us/deep-learning-ai/

developer.

[75] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis,
J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard,
M. Kudlur, J. Levenberg, R. Monga, S. Moore, D. G.
Murray, B. Steiner, P. Tucker, V. Vasudevan, P. War-
den, M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: A
system for large-scale machine learning,” ArXiv e-prints
(2016), arXiv:1605.08695 [cs.DC].

[76] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin,

S. Ghemawat, I. Goodfellow, A. Harp, G. Irving, M. Is-
ard, Y. Jia, R. Jozefowicz, L. Kaiser, M. Kudlur, J. Lev-
enberg, D. Mane, R. Monga, S. Moore, D. Murray,
C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever,
K. Talwar, P. Tucker, V. Vanhoucke, V. Vasudevan,
F. Viegas, O. Vinyals, P. Warden, M. Wattenberg,
M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: Large-
Scale Machine Learning on Heterogeneous Distributed
Systems,” ArXiv e-prints
(2016), arXiv:1603.04467
[cs.DC].

[77] V. Murg, F. Verstraete, Ö. Legeza, and R. M. Noack,
“Simulating strongly correlated quantum systems with
tree tensor networks,” Phys. Rev. B 82, 205105 (2010).
[78] P. Silvi, V. Giovannetti, S. Montangero, M. Rizzi, J. I.
Cirac,
and R. Fazio, “Homogeneous binary trees as
ground states of quantum critical hamiltonians,” Phys.
Rev. A 81, 062335 (2010).

[79] Y.-Y. Shi, L.-M. Duan, and G. Vidal, “Classical simula-
tion of quantum many-body systems with a tree tensor
network,” Phys. Rev. A 74, 022320 (2006).

[80] L. Tagliacozzo, G. Evenbly, and G. Vidal, “Simulation
of two-dimensional quantum systems using a tree tensor
network that exploits the entropic area law,” Phys. Rev.
B 80, 235127 (2009).

[81] Nadav Cohen, Or Sharir, and Amnon Shashua, “On the
expressive power of deep learning: A tensor analysis,” in
29th Annual Conference on Learning Theory, Proceed-
ings of Machine Learning Research, Vol. 49, edited by
Vitaly Feldman, Alexander Rakhlin, and Ohad Shamir
(PMLR, Columbia University, New York, New York,
USA, 2016) pp. 698–728.

[82] T. Poggio, H. Mhaskar, L. Rosasco, B. Miranda, and

18

Q. Liao, “Why and When Can Deep – but Not Shallow –
Networks Avoid the Curse of Dimensionality: a Review,”
ArXiv e-prints (2016), arXiv:1611.00740 [cs.LG].

[83] Dong-Ling Deng, Xiaopeng Li,

and S. Das Sarma,
“Quantum entanglement in neural network states,” Phys.
Rev. X 7, 021021 (2017).

[84] Xun Gao and Lu-Ming Duan, “Eﬃcient representation of
quantum many-body states with deep neural networks,”
Nature Communications 8, 662 (2017).

[85] Y. Huang and J. E. Moore, “Neural network representa-
tion of tensor network and chiral states,” ArXiv e-prints
(2017), arXiv:1701.06246 [cond-mat.dis-nn].

[86] Raphael Kaubruegger, Lorenzo Pastori, and Jan Carl
Budich, “Chiral Topological Phases from Artiﬁcial Neural
Networks,” arXiv:1710.04713 [cond-mat, physics:quant-
ph] (2017), arXiv: 1710.04713.

[87] Stephen R. Clark, “Unifying Neural-network Quantum
States and Correlator Product States via Tensor Net-
works,” arXiv:1710.03545 [cond-mat, physics:quant-ph]
(2017), arXiv: 1710.03545.

[88] Ivan Glasser, Nicola Pancotti, Moritz August, Ivan D.
Rodriguez, and J. Ignacio Cirac, “Neural-network quan-
tum states, string-bond states, and chiral topological
states,” Phys. Rev. X 8, 011006 (2018).

[89] Yusuke Nomura, Andrew S. Darmawan, Youhei Yamaji,
and Masatoshi Imada, “Restricted boltzmann machine
learning for solving strongly correlated quantum sys-
tems,” Phys. Rev. B 96, 205152 (2017).

[90] J. Hubbard, “Calculation of Partition Functions,” Phys-

ical Review Letters 3, 77–78 (1959).

Equivalence of restricted Boltzmann machines and tensor network states

Jing Chen,1, 2, 3 Song Cheng,1, 2 Haidong Xie,1, 2 Lei Wang,1, ∗ and Tao Xiang1, 4, †
1Institute of Physics, Chinese Academy of Sciences, P.O. Box 603, Beijing 100190, China
2School of Physical Sciences, University of Chinese Academy of Sciences, Beijing, 100049, China
3Center for Computational Quantum Physics, Flatiron Institute, New York, 10010, USA
4Collaborative Innovation Center of Quantum Matter, Beijing 100190, China

The restricted Boltzmann machine (RBM) is one of the fundamental building blocks of deep learn-
ing. RBM ﬁnds wide applications in dimensional reduction, feature extraction, and recommender
systems via modeling the probability distributions of a variety of input data including natural im-
ages, speech signals, and customer ratings, etc. We build a bridge between RBM and tensor network
states (TNS) widely used in quantum many-body physics research. We devise eﬃcient algorithms
to translate an RBM into the commonly used TNS. Conversely, we give suﬃcient and necessary
conditions to determine whether a TNS can be transformed into an RBM of given architectures.
Revealing these general and constructive connections can cross-fertilize both deep learning and
quantum-many body physics. Notably, by exploiting the entanglement entropy bound of TNS, we
can rigorously quantify the expressive power of RBM on complex datasets. Insights into TNS and
its entanglement capacity can guide the design of more powerful deep learning architectures. On
the other hand, RBM can represent quantum many-body states with fewer parameters compared
to TNS, which may allow more eﬃcient classical simulations.

I.

INTRODUCTION

Deep learning is transforming the world with its far-
reaching applications in computer vision, speech recogni-
tion, natural language processing, recommender systems,
etc [1, 2]. At the core of many of these applications are
the artiﬁcial neural networks which recognize or even dis-
cover interesting patterns in the input data [3–5]. In a
nutshell, the neural nets act as trainable functional map-
pings of multiple variables. To design even more powerful
and intelligent machines requires one to quantify and ex-
tend the expressive power of the neural nets. However,
there is a gap between the mathematical foundation and
the real-world applications which are largely driven by
the engineering practices [2], because it has long been
a diﬃcult endeavor to rigorously quantify the expressive
power of neural nets over complicated datasets.

Insights into the physical rules governing the neural
networks and typical datasets may oﬀer an answer to the
great success of deep learning and guide its more fruit-
ful development in the future. For example, statistical
physics has a long-standing impact on machine learn-
ing [4, 6], because both ﬁelds concern about collective
behavior emerged from a large amount of microscopic
degree of freedoms. Moreover, as suggested by Mehta
and Schwab [7], there is a connection between the deep
learning and the renormalization group. Lin et al. [8] also
argued that the “unreasonable success” of deep learning
can be traced back to the law of physics, which often
imposes symmetry, locality, compositionality, polynomial
log-probability, and other properties on the input data.
Restricted Boltzmann machine (RBM) is a vivid exam-
ple of the intrinsic connection between statistical physics

∗ wanglei@iphy.ac.cn
† txiang@iphy.ac.cn

and machine learning. An RBM is a special type of neural
networks which can be better understood as an energy-
based model. As illustrated in Fig. 1(a), it consists of a
set of interconnected visible and hidden binary variables.
These variables are assumed to satisfy the Boltzmann
distribution whose energy functional is deﬁned by

E (v, h) = −

aivi −

bjhj −

viWijhj,

(1)

(cid:88)

i

(cid:88)

j

(cid:88)

i,j

where v = {vi} and h = {hj} are the visible and hidden
binary variables. We denote their number as nv and nh
respectively. Parameters ai, bj are the biases applied to
the visible and hidden units, respectively. Wij is the
coupling matrix between these two units.

By integrating out the hidden units, the RBM repre-
sents the marginal distribution of the visible variables
(omitting an irrelevant normalization factor)

ΨRBM (v) =

e−E(v,h)

(cid:88)

h
(cid:89)

i

j

=

eaivi (cid:89)

(cid:16)

1 + ebj +(cid:80)

i viWij

(cid:17)

.

(2)

In the RBM there is no direct connection between the
visible units. However the hidden units generate eﬀective
connections or interactions among them. By increasing
the number of hidden units and connections, the RBM
can in principle parametrize more complex functions of
the visible units [9–11].

One can train an RBM by specifying its parameters
such that the probability distribution of the visible units
reproduces that of the input data [12, 13]. The hidden
units of a trained RBM may also reveal correlations in
the data with appealing physical meanings. For example,
in an RBM trained with a dataset of images containing
handwritten digits, the connection weight contains the
information about the pen stokes [14]. These learning

8
1
0
2
 
b
e
F
 
5
 
 
]
l
e
-
r
t
s
.
t
a
m
-
d
n
o
c
[
 
 
2
v
1
3
8
4
0
.
1
0
7
1
:
v
i
X
r
a

2

contexts.
Is RBM more expressive than the standard
variational wavefunctions of quantum states [17]? Can
RBM eﬃciently describe the probability distribution of
physical models at criticality [19, 20]? Unfortunately,
the existing universal approximation theorem [9–11] and
its further developments [22–24]are not particularly in-
structive for practical purpose because they involve ex-
ponentially large resources, and it cannot be used as a
guiding principle to solve practical physical or industrial
problems.

In fact, the quest for more expressive wavefunction
is central to quantum many-body physics. An ideal
parametrization of wavefunction should accurately de-
scribe a quantum state with exponentially large degree
of freedoms with polynomial resources. Tensor network
states (TNS) [25] are promising candidates to meet this
demand. Figure. 1(b) shows one of the simplest TNS, the
matrix product state (MPS) [26], as an example. The
MPS parametrizes a wavefunction of nv physical vari-
ables as,

ΨMPS(v) = Tr

A(i)[vi],

(3)

(cid:89)

i

where A(i) is a three-index tensor represented by a red
dot in Fig. 1(b). For a given value of vi, which is rep-
resented by a dangling vertical bond, A(i)[vi] is a ma-
trix. The dimension of this matrix is commonly called
the virtual bond dimension of the MPS, indicated by the
thickness of the horizontal bonds in Fig. 1(b). Connect-
ing these horizontal bonds is to take tensor contraction
over all the virtual degree of freedoms. By increasing
the bond dimension, MPS can represent with increasing
accuracy any complex multivariable functions [26].

MPS representation is equivalent to the tensor train
decompositions in the applied math community [27].
Similarly, one can connect higher order tensors to rep-
resent a physical state in a two dimensional network.
This kind of TNS is named projected entangled pair state
(PEPS) [28]. A generalization of PEPS to include the
entanglement of all particles in a larger unit cell is call
projected entangled simplex state (PESS) [29].
In the
past decades, solid theoretical understanding and eﬃ-
cient numerical techniques for TNS has been established.
See [25, 30] for pedagogical reviews on TNS. Moreover,
the application of TNS to classical systems also has a
long history, see [31–33] for example.

The physics community also has an answer to the “un-
reasonable eﬀectiveness” of TNS. It relies on the entan-
glement area law [34], which states that the entangle-
ment entropy scales just linearly with the boundary size
separating any two subsystems. The entanglement en-
tropy [35] is a measure of the information content be-
tween these two subsystems. Many physical states of
practical interests fulﬁll this area law [34]. It indicates
that the degrees of freedom needed to describe a quantum
state of physical interest is generally much less than the
total degrees of freedom of the whole system. TNS are de-
signed to eﬃciently represent these quantum states with

Figure 1. (a) Graphical representation of the RBM deﬁned
by Eq. (2). The blue dots represent visible units v and the
magenta dots represent the hidden units h. They are cou-
pled through the connections indicated by the solid lines. (b)
MPS deﬁned by Eq. (3). Each red dot denotes a three-index
tensor A(i). Throughout this paper, we use dots to represent
units of RBM, and ball to represent tensors. Lines in the
RBM denote connection weights while lines in the tensor net-
work denote tensor indices. (c) RBM and TNS are two ways
to parametrize multivariable functions. With unlimited re-
sources d(number of hidden units or bond dimensions) both of
them can represent any function to arbitrary accuracy. How-
ever, with limited resources they represent two independent
sets with overlapping region. Detailed discussions on their
relationship are given in Secs. II and III.

features can be used either for discriminative tasks, such
as pattern recognition, or for generative tasks, such as
generating more samples according to the learned distri-
bution. RBM has played an important role in the recent
renaissance of deep learning [15, 16], because of its ver-
satile abilities in feature extraction and dimensionality
reduction of complex data sets.

Recently, RBM has attracted great attention in the
Carleo and
ﬁeld of quantum many-body physics.
Troyer [17] proposed an RBM inspired variational wave-
function to study quantum many-body systems at or
away from equilibrium. Deng et al. [18] constructed exact
RBM representations for several interesting topological
states. Torlai and Melko [19] trained an RBM to repro-
duce the thermodynamics of a statistical physics model.
Huang and Wang [20] used RBM as a recommender sys-
tem to accelerate Monte Carlo simulation of quantum
many-body systems. Liu et al. [21] reported similar ideas
using classical spin models instead of the RBM.

These developments raise several critical questions
about the expressive power of neural nets in the physics

relatively low entanglement entropy and have achieved
remarkable successes in the past decades [36].

RBM and TNS share some similarities in their mathe-
matical structures, especially expressed using the graph-
ical language in Figs. 1(a,b). As for machine learning,
Refs. [2, 8] also suggest that only a tiny fraction of the
input data is of practical interests among inﬁnite num-
ber of possible inputs. This motivates us to search for a
guiding principle from the perspective of quantum infor-
mation to quantify the expressive power of neural nets
used for deep learning [1, 2] as well as for quantum and
statistical physics problems [17–20].

In this paper, we present a general and constructive
connection between RBM and TNS. With this correspon-
dence, many concepts and techniques from deep learning
and quantum physics can be exchanged. By transforming
an RBM to a TNS and exploiting its entanglement en-
tropy bound, we can quantify the expressibility of RBM
for quantum states, for statistical physics models, and for
industrial datasets. We also ﬁnd the necessary and suf-
ﬁcient conditions for transforming a TNS into an RBM
with a given structure, and show that RBM can serve as
an eﬃcient representation of quantum states.

This paper is arranged as follows. In Sec. II, we present
the algorithms to transform an RBM into an MPS or
other kind of TNS and discuss their consequences.
In
Sec. III, we present the suﬃcient and necessary condi-
tions for a TNS to have an RBM representation with a
given architecture. In Sec. IV, we illustrate the intimate
connection between RBM and TNS by constructing the
four-fold degenerate ground-state wave functions for the
toric code model in both the RBM and TNS represen-
In Sec. V, we discuss several applications of
tations.
the established connection between RBM and TNS for
physical and machine learning problems. In Sec. VI, we
discuss further implications of our results in a broader
contexts of interdisciplinary research.
In Appendix A,
we present a suﬃcient condition to ﬁnd the RBM repre-
sentations for some speciﬁc TNS and illustrate with sta-
tistical Ising model and simple quantum states. Finally,
in Appendix B, we discuss the equivalence between more
general Boltzmann machines [37, 38] and TNS.

II. TNS REPRESENTATION OF RBM

In this section we discuss the relationship between
RBM and TNS via a constructive approach. An impor-
tant application of the TNS representation for RBM is to
provide an upper bound of the entanglement entropy it
can capture. To estimate the bound one only needs struc-
tural information but not the detailed parametrization of
the RBMs. We ﬁrst present a simple and intuitive ap-
proach, then discuss more sophisticated approaches that
can provide tighter or optimal bounds on the tensor bond
dimensions. We provide code implementations of the
mapping in [39].

Before proceeding, we ﬁrst clarify a few notations

3

Figure 2. Steps to map an RBM to an MPS. (a) A TNS rep-
resentation of the RBM shown in Fig. 1(a). The blue dots
represent the diagonal tensors Λ(i)
at the visible units and
v
the magenta dots represent Λ(j)
h at the hidden units, deﬁned
by Eqs. (4) and (5), respectively. The green squares represent
matrix M (ij), deﬁned in Eq. (6). (b) The RBM is cut into nv
(here nv = 6) pieces. Associated with each long range con-
nection, an identity tensor (red oval) is introduced to break
M (ij) into two matrices, see Fig. 3. (c) An MPS representa-
tion of the RBM obtained by contracting all hidden units and
connection bonds in (b). The bond dimension of the MPS is
determined by the number of bonds cut by the corresponding
dashed vertical line.

in Refs.

about RBM. First, in the standard machine learning ap-
plications and in Refs. [19, 20], parameters {Wij, ai, bj}
are assumed to be real and the corresponding RBM rep-
resents the probability distributions of input data. How-
[17, 18], Eq. (2) is interpreted as the
ever,
amplitude of quantum mechanical wave function, and
{Wij, ai, bj} are generalized to the complex domain. In
this paper, we adopt the convention of Refs. [17, 18],
and assume these parameters to be complex. 1 Second,
conventionally one views the RBM as an energy based
model. While for our discussion about the expressibil-
ity of Eq. (2), it is suﬃcient to view it as a function
approximator such as a feed-forward neural net [20, 40].
Third, although the standard RBM may have dense all-
to-all connections between the visible and hidden units,

1 The references [17, 18] used RBM units with ±1 instead of binary
values. This amounts to a simple rescaling and oﬀset of the
weights and biases.

4

h1 is the only long-range connection. In order to map it
into the virtual bonds of MPS, we decouple the matrix
deﬁned on this connection, M (41), into a product of two
arbitrary 2×2 matrices, P and Q, subject to the constrain
M (41) = P ·Q (Fig. 3). This separates eﬀectively the long-
range connection into two short ones, whose matrices are
deﬁned by P and Q, respectively. These two matrices
are then absorbed into the local tensors at v2 and v3, i.e.,
A(2) and A(3), respectively. This long-range connection
crosses the vertical bond at v3, and consequently doubles
the bond dimension of A(3).
In general, a long range
connection will double the bond dimensions of all tensors
it passes by. The dimension of MPS at a particular bond,
D, is determined by the number of connections, n, one
has to cut in order to bipartite the system at that bond,
i.e. D = 2n.

It should also be noted that the MPS obtained from
the above mapping process is not unique, because the
geometrical structure of the hidden units with respect to
the visible units can be arbitrarily arranged. No mat-
ter how the hidden units are arranged, these diﬀerent
MPS are equivalent. The local tensors obtained with the
above approach generally also contain redundant degrees
of freedom. They can be gauged into a unique canonical
form [41, 42] by taking canonical transformations for all
local tensors. See Sec. V A for more discussions on the
redundancy of TNS and RBM representations.

Algorithm 1 Direct mapping an RBM into an MPS.
Input: The connection weight matrix Wij and biases ai, bj.

The matrix speciﬁes the structure of the RBM.
Output: An MPS with each tensor A(i), i = 1, 2, · · · , nv.
1: The RBM is cut into nv pieces Pi, i = 1, · · · , nv. Each Pi

includes a visible unit vi and several hidden units.

(cid:46) Contains the tensors in Pi

v according to Eq. (4).

2: for i = 1, · · · , nv do
Set Ti = ∅.
3:
Construct Λ(i)
4:
Add Λ(i)
to Ti.
v
for hj ∈ Pi do

5:
6:

h according to Eq. (5).

7:

Construct Λ(j)
Add Λ(j)
h to Ti.

end for

8:
9:
10: end for
11: for all {(vi, hj)|Wij (cid:54)= 0} do
12:
13:

Construct M (ij) according to Eq. (6).
Split M (ij) into products of matrices and add each

matrix into the corresponding piece, see Fig. 3.

(cid:46) All the connections

14: end for
15: for i = 1, · · · , nv do
16:

Ti, the result is A(i).

17: end for

Contract all the internal indices of the tensors within

B. Optimal mapping of an RBM to an MPS

The direct mapping method given in the last subsec-
tion although intuitive, is not optimal. Here we present
a method to give the MPS representation with optimal

Figure 3. Matrix M (41), represented by the green square, is
decoupled into a product of two matrices, P and Q, denoted
by the two cyan squares. The red oval represents direct prod-
uct of two identity matrix along two crossing directions.

for clarity we will illustrate the transformation using the
RBM with sparse connections. Our result nevertheless
holds generally and can be applied to RBMs with arbi-
trarily dense connections.

A. Direct Mapping of the RBM to MPS

To start with, let us consider a simple way to map
an RBM to an MPS. We summarize the procedure in
Algorithm (1). As a concrete example, we consider the
RBM deﬁned in Fig. 1(a). The ﬁrst step is to convert
this RBM into a TNS by representing the visible and
hidden units as the physical and virtual variables while
keeping the network structure unchanged. To do this, we
decouple the Boltzmann weights into the terms deﬁned
on the vertices and bonds separately by introducing a
diagonal tensor, Λ(i)
h , at each visible or hidden
site, and a 2 × 2 matrix M (ij) on each bond linking vi
and hj:

v or Λ(j)

Λ(i)
v = diag (1, eai) ,
h = diag (cid:0)1, ebj (cid:1) ,
Λ(j)
(cid:19)
(cid:18) 1

1

1 eWij

.

M (ij) =

(4)

(5)

(6)

This leads to the TNS representation of the RBM shown
in Fig. 2(a).

The next step is to map the TNS in Fig. 2(a) to an
MPS. We ﬁrst cut the graphics into nv pieces, each con-
taining a visible unit [Fig. 2(b)]. The assignment of the
hidden units into these pieces can be arbitrary. Contract-
ing all the internal variables within each piece is then
equivalent to summing over the hidden units. The MPS,
as shown in Fig. 2(c), is obtained by merging all the exter-
nal connections between diﬀerent pieces into the virtual
bonds. The bond dimension of the MPS is indicated by
the thickness of the virtual bonds, which is determined
by the number of connections merged.

Here we should pay more attention to the “long-range”
connections that cross two or more vertical cuts. For the
RBM shown in Fig. 2(a), the bond that connects v4 and

bond dimension. RBM is an undirected probabilistic
graphical model. For a graph model, we divide all vari-
ables into two sets X and Y which are conditionally in-
dependent if another set of variables Z are given. This
is written as

X ⊥ Y |Z.

(7)

For the bipartition , we can identify the smallest set Z
such that Eq. (7) are satisﬁed. The degrees of freedom
in Z can be treated as virtual bond of an MPS after the
translation. The size of Z, denoted by |Z|, determines
the bond dimension between the variables X and Y .

D = 2|Z|.

(8)

Algorithm (2) lists the steps to translate an RBM to an
MPS with optimal bond dimensions by employing such
conditional independence property. We start from left
and construct each tensor on the ﬂy all along to the right
side with the smallest virtual bond dimension. The vir-
tual bonds of the resulting MPS represent the degrees of
freedom of the visible or hidden units of the RBM.

Algorithm 2 Transforming an RBM into an MPS with
optimal bond dimensions„ see Fig. 4.
Input: The connection weight matrix Wij and biases ai, bj.

The matrix speciﬁes the structure of the RBM.
Output: An MPS with each tensor A(i), i = 1, 2, · · · , nv.
1: Gs = {(i, j)|Wij (cid:54)= 0} (cid:46) Graph formed by connected units
2: Hs = {j|(i, j) ∈ Gs}
(cid:46) All hidden units
3: Z (cid:48) = ∅ (cid:46) The degrees of freedom of the left virtual bond
4: for i = 1, · · · , nv do
5:
6:
7:
8:

Gt = ∅
Ht = ∅
X = Z (cid:48) ∪ {vi}
Y = {vi+1, vi+2, · · · , vnv }

(cid:46) Connections to be counted in tensor A(i)
(cid:46) Hidden units to be traced in tensor A(i)

(cid:46) The remaining physical

9:

Find a minimal set Z such that X ⊥ Y |Z on the graph

degrees of freedom

Gs.

for j ∈ Hs do

if hj is not connected to (Y \ Z) then

Move j from Hs to Ht.

(cid:46) Variable hj will be

traced out in tensor A(i).

end if

end for
for (k, j) ∈ Gs do

if vk and hj belongs to X ∪ Z ∪ Ht then

Move (k, j) from Gs to Gt.

(cid:46) The (vk, hj)

interaction will be included in tensor A(i).

10:
11:
12:

13:
14:
15:
16:
17:

18:
19:
20:

end if

end for
Z(cid:48),Z [vi] = (cid:80)
A(i)
Z (cid:48) ← Z

21:
22: end for

5

to satisfy the conditional independence X ⊥ Y |Z. Sup-
pose we take Z = {v1}, Gt = Ht = ∅, the ﬁrst ten-
sor A(1) can therefore be chosen as an identity tensor
which copies the visible variables {v(1)} to the right vir-
tual bond of the matrix A(1).

In Fig. 4(b), we select X = {v1, v2} and Y =
{v3, · · · , v6}. We can ﬁnd that the smallest Z can be
any of {v1, v2},{v2, h1},{v3, v4} or {h1, h2}. We choose
Z = {h1, h2} for example. Note that the set Z can
contain both visible and hidden units. The Gt in Al-
gorithm (2), denoted by the dashed lines in Fig. 4, con-
tains all the connections considered by the tensor A(2).
Ht = ∅. The left bond of A(2) is the same as the right
bond of A(1). And the right bond of A(2) consists of
Z = {h1, h2}.

And we go on to Fig. 4(c), where we denote all the
interactions which have been taken account as gray lines.
In this step, the set X = {h1, h2} ∪ {v3}, line 7 of Al-
gorithm (2). There are several choices of Z to reach the
minimum sizse |Z| = 2. Here, we choose Z = {v3, v4}.
Therefore, Gt consists of all the connections between
{h1, h2} and {v3, v4}. The corresponding interactions
are considered by A(3), whose right bond consists of
Z = {v3, v4}. Ht = ∅, no hidden units needs to be
traced out.

Finally, as we come to Fig. 4(d), Z includes v5 and h4.
We ﬁnd Gt = {h3} has no interaction with the variables
in the set Y when Z is given. So h3 is traced out when
constructing A(4).

Each connection line of the original RBM is considered
only once during the construction of the MPS. In this
way, we can obtain all the six tensors. We label the bond
degrees of freedom in Fig. 4(f). Note that even if one
is not running the algorithm numerically, one can still
obtain the optimal bond dimension of the corresponding
MPS. Moreover, this method can be used in for general
undirected graphical model.

C.

Implication of the RBM to MPS mapping

The connection between TNS and RBM suggests that
we can use the knowledge of TNS, especially entangle-
ment entropy, to quantify the expressibility of RBM. Let
us divide the visible units into two parts, denoted as X
and Y , respectively. The entanglement entropy of a func-
tion Ψ (which can either be an RBM or an MPS) between
these two subsystems is then given by [35]

S = −Tr(ρ ln ρ),

(9)

ρ =

Ψ∗ (v(cid:48)

X , vY ) Ψ (vX , vY ) .

(10)

(cid:88)

vY

} eaivi+(cid:80)

{hj∈Ht

(k,j)∈Gt

vkWkj hj +(cid:80)

j∈Ht

bj hj

where ρ is the reduced density matrix deﬁned by

To illustrate the mapping algorithm, we take the RBM
in Fig. 1(a) as an example. We start in Fig. 4(a) by
considering X = {v1} and Y = {v2, v3, · · · , v6}.
It is
straightforward to see that Z can either be {v1} or {h1}

The matrix is spanned by the visible degrees of freedom
in X, while vY contains all the visible units in Y . The
entanglement entropy characterizes the information con-
tent of Ψ, and can be viewed as a proxy of correlations

6

Figure 5. (a) RBM with all hidden units traced out. The Arcs
represent the connections between the visible units mediated
by the hidden units. The system is divided into two subsys-
tems, X and Y . Y is then further divided into two parts,
Y = Y1 ∪ Y2, where Y1 contains all the units that directly
connect to the units in X. (b) Alternatively, X is divided
into two parts X = X2 ∪ X1, where X1 contains units that
connect directly to the units in Y . (c) The resulting MPS
with smaller bond dimensions in comparison with that shown
in Fig. 2(c).

In case X and Y are completely
between X and Y .
disentangled, the entanglement entropy Eq. (9) is zero.
While if there are only short range correlations, the en-
tanglement entropy should depend only on the size of
the interface separating X and Y , which is small in com-
parison with the full volume of the system [43]. The
entanglement entropy of MPS can be readily calculated.
The maximal entanglement entropy is bounded by the
logarithm of the bond dimension, i.e. ln D [44].

To better assess the expressive power of an RBM one
needs to ﬁnd an equivalent MPS representation with the
smallest possible bond dimensions. However, the simple
and intuitive approach illustrated in Fig. 2 just provide
an upper bound of the bond dimension which is generally
higher than what is needed. For example, the bond di-
mension of the second bond, D = 8, in Fig. 2(c) is more
than enough to capture the entanglement since there are
only two visible units on its left, whose total degrees of
freedom just equals four. Below we present more sophis-
ticated approaches to obtain a tighter bound on the bond
dimensions. This improved approach is independent on
the assignment of the hidden units.

Figure 5(a) shows an RBM after tracing out all the
hidden units. The arcs indicate the interactions between
the visible units mediated by the hidden units.
If we
separate the visible units into two parts, X and Y (=

Figure 4. The optimal mapping from the RBM to the MPS.
(a)-(e) shows each step of the construction. The set X is de-
noted by pink ellipse and Y in purple ellipse. Z is the minimal
set satisfying X ⊥ Y |Z, denoted in light green ellipse. When
the variables in Z are given, the RBM function factorize into
product of functions of variables in X and Y . The degrees of
freedom in Z is represented by the virtual bond of the MPS.
The connection lines in gray represent interactions counted by
previous tensors. The doted line indicates those under consid-
eration at the current step, denoted by Gt in Algorithm (2).
The constructed tensor in (a)-(e) are given in (f).

Y1 ∪ Y2), where the interface region Y1 contains all the
visible units that directly link to X, and Y2 the rest units,
the RBM function, Eq. (2), can then be expressed as

ΨRBM (v) = ψ (vX , vY1) φ (vY1, vY2 ) .

(11)

Once the visible units in Y1 are ﬁxed, this RBM becomes
a direct product of the visible units in X and Y2. The
rank of this function [45, 46], or the entanglement entropy
between X and Y , is therefore determined by the total
number of visible units in the interface region Y1, denoted
by |Y1|. Hence, the bond dimension of the MPS on the
bond separating X and Y is simply given by D = 2|Y1|.
Alternatively, one can also divide X into two parts
X = X2 ∪ X1 by including all the units that have di-
rect connections with Y in X1 and the rest units in X2
[Fig. 5(b)]. Following the argument given above, it can
be shown that the entanglement entropy between X and
Y is also bounded by the number of units in X1. Thus,
the entanglement entropy between X and Y is bounded
by Smax = min(|X1|, |Y1|) ln 2. 2

Figure 5(c) shows the MPS obtained with this ap-
proach. The bond dimensions from left to right are
D = 2, 4, 4, 4, 2, respectively. They are tighter bounds
on the bond dimensions of MPS compared to Fig. 2(c).
More generally, an even tighter bound on bond dimen-
sion can be obtained by ﬁxing a minimal number of units,
no matter they are visible or hidden, such that the RBM
separates into a bipartite product state. To directly con-
struct the MPS with the optimal smallest bond dimen-
sions, we represent the degrees of freedom in the interface
region using the virtual bonds of the MPS. Programming
codes to implement these RBM to MPS mapping algo-
rithms are given in [39].

The bond dimensions of the resulting MPS control
the maximal entanglement entropies between the vis-
ible units. Therefore, the entanglement entropy pro-
vides a rigorous quantiﬁcation on the expressive power
of an RBM solely based on its architecture. Estimating
these bounds can be done eﬃciently with the provided
codes [39]. Moreover, canonizing the MPS may further
reduce the bond dimensions by removing all unnecessary
degrees of freedom and give precise value of the entan-
glement entropies.

Similarly, one can map an RBM into a PEPS [28] by
arranging the visible units on a two-dimensional array. A
similar procedure was used in [47] to map a multi-scale
entanglement renormalization ansatz [48] into a PEPS.
This is particularly useful if the original dataset repre-
sented by the RBM, for example the pixels of image, is
deﬁned on a two-dimensional grid.

In general, if the number of units along any direction
of the interface region is bounded by m, then the upper

2 Similarly, when modeling the probability using probabilistic
graphical models, the upper bound of classical mutual informa-
tion is given by the size of the interface [43].

7

(12)

bound of the entanglement entropy should scale as

Smax ∼ mV (d−1)/d,

where d is the spatial dimension on which the TNS is de-
ﬁned, and V is the volume of the system. Thus, the max-
imum entanglement of a sparsely connected RBM [18]
satisﬁes the area law. However, for a densely connected
RBM, the interface region extends to the whole system
and m ∼ V 1/d, therefore Smax ∼ V scales linearly with
the subsystem volume. This suggests that the dense
RBM can provide a compact representation for a highly
entangled quantum state that does not satisfy the en-
tanglement area law. The number of parameters in this
dense RBM just scales polynomially with the system
size. However, to describe this state using an MPS or
a PEPS, the number of parameters needed scales expo-
nentially with the system size [48, 49]. This provides an
entanglement entropy justiﬁcation for the variational cal-
culation of quantum systems using RBM functions [17].
Section V B presents a detailed analysis of the tensor rep-
resentation of the state used in Ref. [17].

The mapping from RBM to TNS is valid more gener-
ally and can be extended to Boltzmann machines with-
out the bipartite graph restriction. In Appendix B, we
discuss the general equivalence between Boltzmann ma-
chines [37] and TNS.

III. RBM REPRESENTATION OF TNS:
SUFFICIENT AND NECESSARY CONDITIONS

We now address the reverse question about how to
transform a TNS into an RBM with a given architecture.
Here only a given architecture of RBM is considered be-
cause otherwise one can reproduce any function using an
RBM with exponentially large resources [9–11]. Again we
present a constructive approach to determine the RBM
parameters for a TNS. In Appendix A, a suﬃcient con-
dition for mapping a TNS to an RBM is discussed and
demonstrated with the statistical Ising model and the
cluster state [50].

Let us take the 6-site MPS shown in Fig. 1(b) as an
example to show how to parameterize it into an RBM
with the architecture shown in Fig. 6(a). The hidden
layer contains nh = 4 units, which factorize the MPS
into a product of 4 tensors, one 2 × 2 × 2 × 2 tensor,
T (1), deﬁned at h1, and three 2 × 2 × 2 tensors, T (2,3,4),
deﬁned at the remaining three hidden units. Requiring
this product to equal the MPS, we have

(cid:89)

Tr

i

A(i) [vi] = T (1)

v1v2v3v4

T (2)
v2v3v4

T (3)
v3v4v5

T (4)
v4v5v6

.

(13)

Taking the logarithm of this equation, we obtain 2nv = 64
linear equations for the 24 + 23 + 23 + 23 = 40 tensor el-
ements. These equations are over determined since the
number of parameters is less than the number of equa-
tions. In order to map a TNS to an MPS, these equa-
tions must have an unique solution. If these equations

the visible units are all binary numbers. 3 For a 2 × 2 × 2
tensor, a rank-2 decomposition always exists in complex
ﬁeld and a rank-4 decomposition in real ﬁeld [51]. How-
ever, for an arbitrary tensor, it is diﬃcult to determine
its rank [45]. The high order singular value decomposi-
tion [52] gives the lower bound of the tensor rank as the
dimension of the core tensor. If it is larger than 2, the
binary condition of the hidden unit cannot be satisﬁed.
After the decomposition Eq. (15), we can further de-
couple each matrix into a product of three matrices ac-
cording to Eqs. (4-6). For example, we can express ma-
trix P as

P =

(cid:19)

(cid:18) p q
r s

(cid:18) 1

= p

(cid:19) (cid:18) 1 1
1 ps
qr

r
p

(cid:19) (cid:18) 1

(cid:19)

.

(16)

q
p

Comparing to Eqs. (4-6), we obtain

W22 = ln

,

a22 = ln

b22 = ln

ps
qr
r
p
q
p

,

.

8

(17)

(18)

(19)

Similar to aij, bij is a partial bias to the j’th hidden
unit imposed by the i’th visible unit. The bias of the
j’th hidden unit is given by bj = (cid:80)
In this way,
each tensor of Eq. (13) is written in the RBM form, for
example.

i bij.

Thus the necessary and suﬃcient condition for map-
ping an MPS to an RBM is that both Eq. (13) and
Eq. (14) have unique solutions. In the case of nh = 1,
Eq. (13) merely rephrases the MPS as the wavefunction
itself. The rank-2 decomposition of the tensor, similar
to Eq. (14), is generally more diﬃcult to satisfy. By in-
creasing the number of hidden units and connections, one
can increase the number of parameters of RBM to ensure
both Eq. (13) and Eq. (14) to have solutions. This agrees
with the mathematical results stating that RBM can rep-
resent any function by employing an exponentially large
number hidden units and connections [9–11].

In practice, a convenient way to quickly check whether
a state has a particular RBM representation is to consider
the factorization property deﬁned by Eq. (11), namely to
examine whether a TNS can be factorized into a product
state by ﬁxing a sequential of visible units.

Using this simple approach, we can actually show
that the spin-1 Aﬄeck-Kennedy-Lieb-Tasaki (AKLT)
state [53] cannot be represented as an RBM (with ternary
visible units) with only short-range connections because
of the existence of hidden string order. Expressed in the
(Sz)⊗nv basis, each component of the wave function looks
like “+ 0 0 − 0 + − 0 0 0 +”, where (+ , 0 , −) repre-
sent the eigenstates with Sz = (1, 0, −1). There is a

Figure 6. Graphical representation of (a) Eq. (13) and (b)
Eqs. (14,15).

have no solution, then one has to change the architec-
ture of RBM. One can, for example, increase the number
of parameters by increasing the number of hidden units
and/or the number of connections of the RBM. This set
of linear equations may become underdetermined if the
number of parameters in the RBM becomes larger than
the number of equations.

If Eq. (13) has an unique solution, we then need to
decompose each tensor into an RBM with just one hidden
unit. For example, for the tensor shown in Fig. 6(b), i.e.
T (2), we should decouple it as

T (2)
v2v3v4

=

(cid:88)

eh2b2+(cid:80)

i∈{2,3,4} vi(Wi2h2+ai2),

(14)

h2∈{0,1}

where aij is a partial bias of the i’th visible unit con-
tributed by the j’th hidden unit. The bias of the i’th
visible unit is given by the sum of all partial biases con-
tributed by the hidden units connecting this visible unit,
ai = (cid:80)
j aij. For this 3-index tensor, 7 parameters need
to be determined from 23 = 8 equations [Fig. 6(b)]. The
number of parameters grows linearly with the order of
T , but the number of equations grows exponentially in-
stead. In general, Eq. (14) is over-determined, and it has
solution only in special cases.

In practice, the Eq. (14) can be considered as the tensor
rank decomposition (CP decomposition) [45, 46] of T (2),

T (2)
v2v3v4

=

(cid:88)

h2∈{0,1}

Pv2h2Qv3h2Rv4h2 .

(15)

The rank of T (2) is 2 because the hidden unit (h2 here) is
a binary variable. P, Q, R are all 2 × 2 matrices because

3 If the rank of tensor is higher than two, then one has to enlarge
the basis dimension of hidden units from 2 to a larger number.

hidden antiferromagnetic order with arbitrary number of
“0”s inserted. Even if we ﬁx a sequence of visible units
in the middle to be “0”, the state is still combination of
“+ 0 0 0 · · · 0 −” and “− 0 0 0 · · · 0 +”, which cannot be
simply expressed as a product state, or an RBM with just
local connections. On the other hand, the AKLT state
can be written as a D = 2 MPS [25, 53]. This exam-
ple shows that the entanglement entropy is not the only
variable that quantiﬁes the expressive power of RBM.

IV. EXAMPLE: RBM REPRESENTATION OF
THE TORIC CODE GROUND STATES

As a concrete example of the TNS-RBM transforma-
tion introduced in the preceding section, we construct the
RBM representation of the toric code ground states from
the corresponding PEPS wavefunctions [54]. More exam-
ples, including the Ising model and the cluster state [50],
are given in the Appendix A.

The toric code [54] is one of the simplest models whose
ground states are topological ordered [55] and holds the
promise for quantum computation [56]. It is deﬁned by
the Hamiltonian

H = −

(cid:88)

A+ −

(cid:88)

B(cid:3),

(cid:3)

+
σz
i , B(cid:3) =

A+ =

(cid:89)

i∈+

σx
i ,

(cid:89)

i∈(cid:3)

(20)

(21)

i and σz

where σx
i are Pauli matrices deﬁned on the hori-
zontal and vertical links of the square lattice. A+ consists
of the product of four σz
i operators connecting to each
vertex denoted by +, and B(cid:3) consists of the product of
i operators on each minimal square plaquette (cid:3).
four σx
All the A+ and B(cid:3) operators commute with each other.
The toric code on a torus has four topologically degen-
erate ground states. Deng et al. [18] has already found
an RBM representation for one of them. We now present
the RBM representations for all the four ground states
using the approach introduced in the preceding section
based on their PEPS representations [25, 57].

We start from the PEPS representation for one of the
ground states of the toric code model
[25, 57] shown in
Fig. 7. The PEPS consists of three kinds of local tensors
of dimension 2: a 4-index identity tensor I4 deﬁned at
each vertex, a 3-index identity tensor I3 deﬁned at the
center of each link where physical operators reside, and
a U -matrix linking any two neighboring I3 and I4

U =

(cid:18) 1 1
1 −1

(cid:19)

.

1
√
2

(22)

To ﬁnd its RBM representation, we identify the bond-
centered I3 tensors as the visible units and the vertex-
centered tensors I4 as the hidden units, and decompose
U as

U =

(cid:18) 1

(cid:19) (cid:18) 1 1
1 eiπ

e0

1
√
2

(cid:19) (cid:18) 1

(cid:19)

.

e0

(23)

9

Figure 7. (a) TNS and (b) its corresponding RBM representa-
tions of the toric code ground state at the (+, +)-topological
sector on the square lattice. The dashed red and orange lines
are the paths of Wilson loops used in Eq. (28) and Eq. (29),
(c-e) RBM representations of the toric code
respectively.
ground states in the other three topological sectors. The cyan
dots denote the visible units with bias a = iπ .

Using Eq. (16), we then ﬁnd the connection weights and
biases of visible and hidden units to be

W = iπ,
a = 0,
b = 0.

(24)
(25)
(26)

The resulting wave function is depicted in Fig. 7(b). It
is a RBM with only nearest neighboring connections be-
tween visible and hidden units. Each hidden unit couples
to four visible units. Tracing out all the hidden units, the

RBM becomes

ΨTC (v) =

(cid:89)

(cid:16)

1 + eiπ (cid:80)

i∈+ vi

(cid:17)

.

(27)

+

It represents a quantum state with equal weight su-
perpositions of closed loops where the sum of the visible
variables is even on each vertex [54]. The RBM rep-
resentation Eq. (27) is simpler than that introduced in
Ref. [18] where the hidden units are deﬁned on both the
vertices and the plaquette centers.

The four ground states of the toric code model be-
long to four diﬀerent topological sectors. To diﬀerentiate
these degenerate states, we ﬁrst deﬁne two Wilson loop
operators

X1 =

σx
i , X2 =

(cid:89)

i∈C1

(cid:89)

i∈C2

σx
i ,

(28)

where C1 and C2 denote the paths along the horizontal
and vertical directions of the lattice, indicated by the red
lines in Fig. 7(a), respectively. X1 and X2 are mutually
commuting. They also commute with the Hamiltonian.
Thus we can use their eigenvalues to label the eigenstates.
Both X1 and X2 have two eigenvalues, +1 and −1. The
four-fold degenerate ground states correspond to the four
eigenstates of (X1, X2). They can be classiﬁed into four
topological sectors, labeled by the eigenvalues of (X1, X2)
as (±, ±). The wavefunction illustrated in Fig. 7(b) be-
longs to the (+, +) sector, namely (cid:10)v|Ψ(+,+)(cid:11) = ΨTC (v).
Now let us introduce the following two operators along
the paths D1 and D2 indicated by the dashed orange lines
in Fig. 7(a),

Z1 =

σz
i , Z2 =

(cid:89)

i∈D1

(cid:89)

σz
i ,

i∈D2

(29)

(cid:12)Ψ(−,+)(cid:11) = Z2
(cid:12)Ψ(−,−)(cid:11) = Z1Z2

These two operators do not commute with X1 and X2.
They transform the states between diﬀerent topologi-
(cid:12)
cal sectors [58]. For example, (cid:12)
(cid:12)Ψ(+,+)(cid:11),
(cid:12)
(cid:12)Ψ(+,+)(cid:11), and (cid:12)
(cid:12)
(cid:12)
(cid:12)Ψ(+,−)(cid:11) = Z1
(cid:12)Ψ(+,+)(cid:11).
In the PEPS representation, Z1,2 is to change all the iden-
tity tensors I3 shown in Fig. 7(a) along the D1,2 path into
diagonal tensors diag(1, −1). In the corresponding RBM
representation, this is to change the bias of the visible
variables in Eq. (25) from a = 0 to a = ln (−1) = iπ
along the D1 and D2 paths [Fig. 7(c,d,e)].

Note that the Wilson loops, D1 and D2, are not nec-
essary to be straight lines. But they must wind around
the torus (Fig. 8). The RBM that is obtained by con-
tinuously distorting D1 or D2 is gauge equivalent to the
original one. In other words, to apply the operator X1
deﬁned on a closed path without winding the torus to
any of the ground state will not alter its topological sec-
tor. For example, the RBM shown in Fig. 8(a) is gauge
equivalent to that shown in Fig. 7(b). They are related
by a loop of σz
i operators along the path E in Fig. 8(a),
which is equal to the product of all A+ operators en-
closed by E. This product of A+ operators changes the

10

Figure 8. Demonstration of the gauge invariance of RBM. (a)
The wavefunction obtained by applying four A+ operators
[Eq. (21)] within the region enclosed by the orange path E to
the RBM shown in Fig. 7(b). The visible biases are changed
from 0 to iπ on the path, but the two RBM wavefunctions
before and after the transformation are gauge equivalent. (b)
The RBM wavefunction is gauge equivalent to the that shown
in Fig. 7(d) by moving the Wilson path from D1 to D(cid:48)
1. Please
refer to Fig. 7 for the deﬁnition of symbols.

visible biases along the closed loop E from a = 0 to iπ.
But the wavefunction remains in the same topological
sector since A+ at each vertex is conserving. Similarly,
the state in Fig. 8(b) is identical to that in Fig. 7(c).
More detailed discussion on the redundancy of the RBM
parametrization is given in Sec. V A.

V.

IMPLICATIONS OF THE RBM-TNS

CORRESPONDENCE

A. Optimizing RBM using tensor-network methods

Similar to TNS, it is known that RBM or other neu-
ral network function contains redundant degrees of free-
dom [3]. Two RBMs with diﬀerent connection weights
and biases may represent equivalent functions. An RBM
can be simpliﬁed or optimized by removing redundant
degrees of freedom using the well established tensor-
network methods.

In one dimension, for example, one can use the canon-
icalization approach of MPS to optimize an RBM. To do
this, we ﬁrst transform an RBM into an MPS using the
algorithm introduced in Sec. II. The MPS is then canon-
icalized to minimize the bond dimensions for all the local
tensors by discarding zero singular vectors [41, 42]. This
can also partially ﬁx the gauge of the MPS. Finally, we
map this optimized MPS back to an RBM using the ap-
proach introduced in Sec. III. The RBM such obtained is
equivalent to the original one, but is optimized.

To understand this optimization scheme, let us con-
sider the RBM wavefunction of the 1D cluster state pre-
sented in Ref. [18]. This RBM contains equal number
of visible and hidden units with each hidden unit con-
necting to three visible units.
It can be mapped onto
a D = 4 MPS using the simple approach introduced in
Sec. II because each bipartition cuts two connections. By
taking the canonical transformation, the bond dimension
of this MPS is reduced to 2. Mapping this simpliﬁed MPS

11

simplify various RBM functions.

In practice, the TNS used in the simpliﬁcation of an
RBM may have a huge bond dimension which is diﬃ-
cult to handle. There are two approached that can be
used to resolve this problem. The ﬁrst is to dynamically
truncate the TNS bond dimensions during the transla-
tion from the RBM to TNS. This can avoid the storage
of huge TNS tensors. The other is to divide the system
into several overlapped pieces, and perform the simpliﬁ-
cation for each piece separately. In either case, one can
simplify the original RBM using the TNS canonicaliza-
tion technique.

B. TNS representation of the shift-invariant RBM
and its entanglement capacity

The variational Monte Carlo study presented in [17]
employed a shift-invariant RBM function [65] to enforce
the translational invariance of a physical system. The
variational ansatz is a product of nv RBM functions de-
ﬁned in Eq. (2)

Ψ(v) =

ΨRBM (T v) ,

(31)

(cid:89)

T

where T is the translational operator which shifts the vis-
ible variables around the periodic spatial direction. Fig-
ure 10(a) shows an example of a shift-invariant RBM.
Assuming each RBM wave function ΨRBM contains nh
hidden units, the shift-invariant RBM contains nvnh hid-
den variables.

This shift-invariant RBM can be also written as an
MPS. To do this, we ﬁrst express each individual fac-
tor ΨRBM as an MPS with bond dimension DRBM. For
example, one of the RBMs used in Ref. [17] is a fully
connected RBM with four hidden units before transla-
tional shift. When constructing the MPS, the minimum
set C satisfying Eq. (7) contains all the four hidden
units. It corresponds to an MPS with bond dimension
DRBM = 24 = 16. Next, we assemble these MPSs into a
tensor network as illustrated in Fig. 10(b). This tensor
network can be further written as a single MPS. The cor-
responding bond dimension is D = (DRBM)nv , which ap-
pears to have a much higher entanglement entropy bound
than each factor ΨRBM.

In order to better estimate the expressive power of the
shift-invariant RBM, we can directly map it into an MPS
using the algorithm introduced in Sec. II B [39]. Using
this approach, one ﬁrst identify the minimal interface re-
gion and determines the optimal bond dimension based
on the speciﬁc structure of the shift-invariant RBM with
enlarged hidden units. For example, the enlarged shift
invariant RBM corresponds to an MPS with bond di-
mension D = 2nv/2 in the center, see Fig. 10(a).

The shift-invariant operation plays an important role
in improving the accuracy of the variational wave func-
tion [17] because it drastically increases the entanglement
capability of the wave function without increasing the

Figure 9. Two equivalent TNS representations of the toric
code ground states obtained by applying the projection oper-
ator P to an initial wavefunction |ψ0(cid:105) deﬁned in the texts. (a)
θ = 0. The local identity tensor, I4, is deﬁned at the center
of each plaquette, and U is the matrix deﬁned by Eq. (23).
(b) θ is arbitrarily chosen. The local tensors are deﬁned on
both the original original and dual lattice sites. A and B are
two θ-dependent 5-index tensors.

back, we obtain an optimized RBM with each hidden unit
just connecting two neighboring visible units. See Ap-
pendix A for detailed parametrizations of the simpliﬁed
RBM.

An RBM deﬁned in higher dimensions can be also
simpliﬁed by mapping it onto a PEPS or other higher-
dimensional TNS. The bond degrees of freedom of the
PEPS can be reduced or at least partially reduced (if
there are redundancies), by taking higher-order singu-
lar value decompositions (or more generally Tucker de-
compositions) for all the local tensors [59], or just sin-
gular value decompositions for all neighboring pairs of
local tensors similar to that used in the determination
of the ground-state wavefunction by the simple update
method [60].

The redundancy of RBM can be exempliﬁed using the
toric code model Eq. (20). The ground state wavefunc-
tion can be obtained by applying the projection operator

P =

(cid:89)

+

1 + A+
2

(cid:89)

(cid:3)

1 + B(cid:3)
2

(30)

to an arbitrary product state over the spins |ψ0(cid:105) =
(cid:81)
i (cos θ |↑(cid:105) + sin θ |↓(cid:105))i. Apparently, the PEPS and its
corresponding RBM such obtained is not unique. The
state shown in Fig. 7(a) corresponds to the choice θ =
π/4. Figure 9(a) shows another choice with θ = 0 which
It is the
has 4 index tensors in the plaquette center.
eigenstate of Z1,2 in Eq. (29), which is the superposi-
tion of the states Fig. 7(b,c,d,e). While Fig. 9(b) shows
the state obtained with a general θ which has 4 index
tensors deﬁned both in the plaquette center and on the
vertices. The corresponding RBM corresponds to [18]
and contains more connections than the other two cases.
Although these are all ground states of the toric code
model, it is impossible to ﬁnd a local gauge transforma-
tion in the internal bonds to connect the local tensors
because the ground state is a non-injective Z2 spin liq-
uid state [61–63]. Exploiting the rich math structures of
non-injective PEPS [64], one may further transform or

12

of a TNS.

We ﬁrst clarify the deﬁnition of entanglement entropy
for real dataset. Assuming the instances of a dataset
follow a probability distribution P (v), we introduce a
probability amplitude Ψ(v) = (cid:112)P (v) in analog to the
quantum mechanical wave function. Using Ψ(v), one can
deﬁne the reduced density matrix and entanglement en-
tropy of the dataset following Eqs. (9, 10). The entangle-
ment entropy deﬁned in this way is meaningful because it
captures the complexity of real dataset similar to classical
information theoretical measures [4]. Transferring quan-
tum entanglement perspective to machine learning pro-
vides a practically useful way to quantify the diﬃculty of
unsupervised learning and guides future progresses with
insights in modeling quantum many-body states. These
considerations are relevant to those generative modelling
inspired by quantum physics, where one uses a wavefunc-
tion square to model the probability [67–70].

Consider a dataset of natural images, the correlations
between pixels are typically dominated by short range
ones which suggests that the entanglement entropy of
the dataset deﬁned in above is relative small. As a conse-
quence, dense connections in the RBM are not absolutely
necessary. In fact, the authors of Ref. [71] showed that a
dense RBM still performs well even when 80% of the con-
nections are randomly removed. Reference [66] also pro-
posed an RBM with sparse connections with small-world
network structure and found that it performs well com-
pared to a densely connected RBM. Moreover, the distri-
bution of the entanglement is inhomogeneous in various
locations of the space. With an entanglement quantiﬁ-
cation, these features of the dataset can be exploited in
the neural network structure design.

Another advantage of introducing quantum entangle-
ment for realistic dataset is that the RBM-TNS connec-
tion may allow one to adopt the techniques developed
in quantum physics directly to machine learning. For
example, it is straightforward to estimate the entangle-
ment entropy upper bound of an RBM via counting the
bond dimension of its TNS representation. Alternatively,
entanglement entropy is a useful characterization of the
diﬃculty of the learning task when directly using TNS to
model the dataset [69].

Interestingly, the entanglement structure of deep learn-
ing was also recently explored by authors in computer
science [72]. Their discussions were mainly on feedfor-
ward neural networks but the key tool for achieving their
conclusions is from the techniques developed in tensor
networks.

D. Entanglement advantage of deep Boltzmann
machines over the shallow ones

The mapping between RBM and TNS discussed in
Sec. II is applicable general Boltzmann Machines with-
out the bipartite graph restriction. In particular, apply-
ing the to deep Boltzmann machines (DBM) [38] explains

Figure 10. (a) A shift-invariant RBM of nv = 4 and nh = 2,
which is obtained by multiplying nv copies of RBM with
shifted connections. (b) The corresponding MPS, can be con-
structed by connecting nv copies of the MPS constructed from
the corresponding RBM, each tensor oﬀsets by one site. The
green dots are identity tensors.

number of variational parameters. This construction can
be generalized to other variational wave function [28].
Moreover, this trick can be also used to implement other
symmetries, such as rotation or inversion symmetries.

From the equivalence between RBM and TNS, we ﬁnd
that there are several guiding principles that can be used
to design even more powerful RBM variational ansatz
for quantum systems. First, the connection in RBM
should be global because otherwise the bond dimension
of the corresponding MPS will have ﬁnite bond dimen-
sions which do not scale with the system size. Note that
this requirement does not mean the RBM connections
have to be dense. A sparsely connected RBM with long-
range connections can also represent a TNS with large
bond dimensions. In fact, the results of Ref. [17] show
that many of the optimized RBM connection weights are
close to zero. Reference [66] also shows that sparse con-
nected RBM can have good performance in learning real
dataset. Second, sharing the same parameters for many
hidden and visible units can signiﬁcantly reduce the num-
ber of independent variational parameters without scar-
ifying the entanglement capacity of the ansatz. And ﬁ-
nally, one can connect multiple hidden units to the same
set of visible units of RBM to mediate large entanglement
between them.

C. An entanglement perspective to unsupervised
learning

A natural consequence of the connection between RBM
and TNS is a quantum entanglement perspective on un-
supervised learning of probabilistic models. The univer-
sal approximation theorem in machine learning [9–11]
states that there exists an RBM to describe a dataset to
any accuracy, if there is no limit on the number of hidden
units. By introducing the entanglement entropy of real
dataset one can better quantify the required resource in
terms of the number of hidden neurons and connections
of an RBM, or equivalently, the eﬀective bond dimensions

13

entanglement theory of TNS to quantify the expressive
power of RBM and obtain lower bound on the required
resources compared to previously know results [9–11]. It
puts the discovered similarity between the renormaliza-
tion group and deep learning [7] in a more rigorous man-
ner, and provides a practically useful approach to remove
the redundant degrees of freedom in the RBM functions
(Sec. V A). Moreover, connections to the TNS identify
the shift-invariant construction [65] as a key ingredient
in the successful variational calculation [17] and sets up
useful guiding principles to construct more powerful vari-
ational ansatz (Sec. V B). Akin to the success of TNS in
quantum physics, our ﬁnding suggests that the success
of deep learning is related to the relatively low entangle-
ment entropy in the datasets represented by the RBMs,
such as natural images and speech signals (Sec. V C).
The entanglement entropy also oﬀers a new perspective
for using deep Boltzmann Machines (Sec. V D).

The correspondence between RBM and TNS suggests
that the physical insights and technical methods devel-
oped in quantum many-body physics can be exploited in
the ﬁeld of machine learning, and vice versa. In fact, the
tensor-network methods have already been applied to the
pattern recognition [69]. As we discussed in Sec. II the
RBM can represent quantum state more compactly than
TNS, this may oﬀer computational advantages [17]. Deep
learning algorithms [2] and industrial software and hard-
ware [74–76] may also be beneﬁcial for quantum many-
body physics researches through this connection.

For further investigation, it is interesting to explore
the connection between the deep learning architectures,
such as the deep Boltzmann machines [38], and the multi-
layer TNS, such as the tree tensor networks [77–80] and
the multi-scale entanglement renormalization ansatz [48].
In passing we also note the eﬀorts of understanding the
expressive power of the deep feedforward neural net-
works [81, 82]. We believe the insights on quantum en-
tanglement and tensor network states can deepen our
understanding on deep learning and guide better neural
nets design.

Note added. Recently, there appeared related works
exploring representational and entanglement properties
of Boltzmann Machines [83–89].

VII. ACKNOWLEDGMENTS

We thank Giuseppe Carleo, Dong-Ling Deng, Xi-
aopeng Li, Chen Fang, Xun Gao, E. Miles Stoudenmire,
Hong-Hao Tu and Yi-feng Yang for helpful discussions.
This work is supported by the National Natural Sci-
ence Foundation of China (Grants No. 11474331, No.
11190024, and No. 11774398) and the Ministry of Science
and Technology of China (Grant No. 2016YFA0302400).

(a) An RBM and (b) a deep Boltzmann Ma-
Figure 11.
chine with the same number of nv visible units (blue dots),
nh = 3nv hidden units (magenta dots) and 9nv connections.
According to Sec. II the corresponding MPS representation
of the RBM and DBM had bond dimension DRBM = 22 and
DDBM = 24 respectively. The dashed lines enclose a minimal
number of units which split the network once their values are
observed. The comparison shows the that DBM has larger
entanglement capacity with the given number of parameters.

their advantage over the shallow RBMs.

The shallow and deep BM architectures shown in
Fig. 11. They both have nv visible units, nh = 3nv hid-
den units and 9nv connections. In contrast to the RBM,
the hidden units of the DBM shown in Fig. 11(b) is orga-
nized into multilayer structures. Following Sec. II B the
C set units are enclosed by dash lines, when they’re ﬁxed,
all the visible units set X is proportional to all the right
visible units set Y . The bond dimensions are DDBM = 16
and DRBM = 4 respectively. Therefore, using the same
amount of parameters, the DBM is able to express more
complex functions with larger entanglement entropy.

As a concrete example of the application of the con-
siderations in above, we consider the 4 × 4 Bars and
Stripes dataset [73] used in [70] as an example. The
wave function is the equal superposition of 30 valid
conﬁgurations. And the exact entanglement entropy is
ln 15 − 7
15 ln 7 ≈ 1.80, which is larger than ln 4. This
implies that dataset can not be captured by the RBM
in shown in Fig. 11(a). However, capturing the same
distribution using the DBM in Fig. 11(b) is possible.

In general, the visible units in a deep Boltzmann ma-
chine can have longer ranged eﬀective connections medi-
ated by the deep hidden units (c.f. Fig. 5), hence a larger
entanglement capacity compared to the RBM with the
same number of hidden units and connections. Apply-
ing the mapping to TNS thus oﬀers a valuable way to
analyze and compare the expressive power of Boltzmann
machines with various architectures.

VI. DISCUSSIONS AND OUTLOOKS

We have discussed the general and constructive con-
nection between the RBM and TNS. This equivalence
sets up a bridge between the ﬁeld of deep learning and
quantum physics, allowing us to use the well-established

14

One example of this type is the statistical Ising model

with the partition function,

Z =

exp

K

sisj + H

(A3)

(cid:88)

{si}



(cid:88)

(cid:104)i,j(cid:105)



si



(cid:88)

i

where K is the coupling constant and H is the external
ﬁeld. si = ±1 are the Ising spins. To rewrite the partition
function into a summation of the RBM function of the
form Eq. (2) we introduce binary variables vi = (si+1)/2.
In one dimension, the Ising partition function can be
represented as an MPS shown in Fig. 12. The matrix
product on each bond reads as

RL =

(cid:18) eK+H e−K
e−K eK−H

(cid:19)

.

(A4)

Combining Eq. (A2) and Eq. (A4), we obtain the RBM
parameters W, a, b summarized in the ﬁrst line of Table I.

This procedure can be readily generalized to 2D, where
the partition function is represented by a PEPS. The
PEPS tensor follows a condition similar to Eq. (A1), as
illustrated in Fig. 12(b). We introduce one hidden unit
for each bond which couples to the two visible units con-
nected by the lattice bond. The only diﬀerence com-
pared to the 1D case is that the one replaces H by H/2
in the RL matrix Eq. (A4) since the each site is shared
by 4 instead of 2 bonds. Correspondingly, the a/2 bias
in Eq. (A2) is replaced by a/4 because the visible bias
is also shared by 4 connections [Fig. 12(b)]. The RBM
parameters for 2D Ising model are summarized in the
second line of Table I.

The above results show that a very simple sparse RBM
with nh = nv (or nh = 2nv in 2D) hidden units deﬁned
on the bonds can exactly reproduce the thermal distri-
bution of the Ising model. It is remarkable that this is
independent of the coupling strength and holds even at
the criticality where the correlation between the visible
spins are long ranged [19]. Essentially, the eﬀect of the
hidden units of the RBM play the role of a Hubbard-
Stratonovich auxiliary ﬁeld which decouple the interac-
tion on the bond [90].

Another example of the TNS satisfying Eq. (A1) is the
cluster state [50]. The MPS representation [25, 57] has

RL = 1√
2

(cid:19)

(cid:18) 1 1
1 −1

on every bond. We can obtain the

RBM parameters W, a, b using Eq. (A2) summarized in
the Table I. Similar to the Ising model case, the RBM
has hidden units coupled to the physical degree of free-
doms on each lattice bond. These construction is simpler
than the one of Ref. [18] which requires each visible unit
to connect to 3 hidden units. The simpliﬁcation is due
to that we construct the RBM representation from the
canonical MPS of the cluster state.

Figure 12. (a) The tensor A in the dashed red box has the
special form Eq. (A1). The green squares denote the L and R
matrices, while the blue dots are the 3 index identity tensor.
We transform the matrix product in the dashed orange rect-
angular according to Eq. (A2) to obtain the RBM parameters.
The half blue dot denotes a/2 since the visible unit is shared
by two neighboring dashed orange boxes. (b) The PEPS of a
similar structure is mapped to an RBM. The meaning of the
symbols is the same as (a).

Appendix A: A suﬃcient condition for RBM
representation of MPS/PEPS and examples

We give a suﬃcient condition for the MPS or PEPS to
have an RBM representation. Many physically interest-
ing thermal states and quantum wavefunction belong to
this class. For example, the toric code model discussed
in Sec. IV, the statistical Ising model with external ﬁeld,
and the 1D/2D cluster states discussed in this appendix.
A suﬃcient condition for an MPS to have the RBM
representation is that each tensor has the following form

Aαβ [v] = LαvRvβ,

(A1)

where L and R are two 2 by 2 matrices. As shown in
Fig. 12(a), the product of R and L in orange dashed box
can be replaced by coupling to the hidden unit of the
RBM. The bias for the visible unit (blue dot) is a/2 be-
cause it is shared by two neighboring boxes. According
to Eqs. (6-5), we can write the RL into the RBM param-
eters

RL =

(cid:18) 1

(cid:19) (cid:18) 1

1
1 eW

ea/2

(cid:19) (cid:18) 1

(cid:19)

eb

(cid:18) 1

1
1 eW

(cid:19) (cid:18) 1

(cid:19)

.

ea/2

(A2)

The decomposition can be arbitrary. Here we choose a
symmetric form for simplicity.

15

Model

W

b

a

1D Ising

2D Ising

1D cluster

2D cluster

ln (cid:0)4e4K − 2(cid:1)

− ln (cid:0)e4K − 1(cid:1) − ln 4

−4K − 2H − 2 ln 2

ln (cid:0)4e4K − 2(cid:1)

− ln (cid:0)e4K − 1(cid:1) − ln 4

−8K − 2H − 4 ln 2

ln 3
2

ln 3
2

− ln 2 + iπ

− ln 2 + iπ

2 ln 2

4 ln 2

Table I. The RBM parameters for the statistical Ising model and the cluster state. Each hidden unit interacts with two visible
units connected by a bond. The parametrizations are not unique and we only list one possible solution. The meaning of the
Ising model parameters is given in Eq. (A3)

Appendix B: General equivalence between
Boltzmann machines and TNS

work state

The name “restricted” in the RBM means that there
are only connections between the visible and hidden
units, not within them. The RBM-TNS correspondence
can also be generalized to the cases without such restric-
tions. For example, the deep Boltzmann machines [38]
have multilayers of hidden units with interconnections,
and the Boltzmann machines (BM) [37] have direct con-
nections within the visible and hidden units.

In general, the BM parametrizes a function in the form

ΨBM (v) =

e−E(v,h),

(B1)

(cid:88)

h

with the energy function

E(x = v ∪ h) = −

Wijxixj +

θkxk

 ,

(B2)





(cid:88)

i,j



(cid:88)

k

where Wij is the connection weight between the units i
and j, and θk is the bias of the unit k. One can either
view Eq. (B1) as a probability distribution or a complex
wavefunction amplitude.

To write Eq. (B1) into a TNS, we introduce tensor

M (ij) =

(cid:18) 1

(cid:19)

1

1 eWij

on the edges and diagonal tensors

Λ(k) = diag(1, eθk ) on the vertices. For the visible units,
the diagonal tensors have an additional dimension corre-
sponding to the external degree of freedoms. Using these
tensors, the BM Eq. (B1) can be written as a tensor net-

ΨTNS (v) = Tr

(B3)







(cid:89)

M (ij) (cid:89)

Λ(k)

 .

i,j

k

Conversely, one can also attempt to map a TNS back
to a BM. First, we prove that any TNS constructed rank
2 tensors only can be directly mapped to a binary BM.
The CP decomposition or rank decomposition [45] of d1×
d2 × · · · × dn tensor T (i) reads

T (i)
α1α2···αn =

α1kQ(i)
P (i)

α2kR(i)

α3k · · · ,

(B4)

r
(cid:88)

k=1

where P (i), Q(i), R(i), · · · are matrices. The equation
holds for a minimal number r, which is the rank of the
tensor. For example, r = 1 if T is a vector and r equals
the smaller dimension if T is a matrix. While for n (cid:62) 3,
r is not necessarily smaller than any di.

A TNS can be mapped to a BM with binary units if
r = 2 and di = 2, ∀i. When contracting the ﬁrst index of
T (i) and the second index of T (j), we can perform rank
decomposition and obtain a two by two matrix on the
connection

M (ij) =

P (i)(cid:17)T
(cid:16)

Q(j) =

(cid:18) p q
r s

(cid:19)

,

(B5)

where P (i) (Q(j)) is the matrix obtained from the de-
composition Eq. (B4) of T (i)(T (j)) respectively. With the
same procedure in Eqs. (16,17), we ﬁnd that Wij = ln ps
qr .
The two diagonal matrix in Eq. (16) can be absorbed into
the diagonal tensor, which contributes to θi.

For more general TNS with larger ranks, we can al-
ways perform the CP decomposition following the same
procedure and resulting BM will have hidden units with
multistates.

[1] Yann LeCun, Yoshua Bengio,

and Geoﬀrey Hinton,

[2] Ian Goodfellow, Yoshua Bengio,

and Aaron

“Deep learning,” Nature 521, 436–444 (2015).

Courville, Deep
http://www.deeplearningbook.org.

Learning

(MIT Press,

2016)

[3] Christopher M. Bishop, Neural Networks for Pattern
Recognition, 1st ed. (Clarendon Press, Oxford : New
York, 1996).

[4] Simon S Haykin, Neural networks and learning machines,
Vol. 3 (Pearson Upper Saddle River, NJ, USA, 2009).
[5] Michael A. Nielsen, Neural Networks and Deep Learning

(Determination Press, 2015).

[6] Daniel J. Amit, Hanoch Gutfreund, and H. Sompolinsky,
“Spin-glass models of neural networks,” Phys. Rev. A 32,
1007–1018 (1985).

[7] P. Mehta and D. J. Schwab, “An exact mapping between
the Variational Renormalization Group and Deep Learn-
ing,” ArXiv e-prints (2014), arXiv:1410.3831 [stat.ML].
[8] Henry W. Lin, Max Tegmark, and David Rolnick, “Why
does deep and cheap learning work so well?” Journal of
Statistical Physics 168, 1223–1247 (2017).

[9] Yoav Freund and David Haussler, “Unsupervised learn-
ing of distributions of binary vectors using two layer net-
works,” in Proceeding NIPS’91 Proceedings of the 4th In-
ternational Conference on Neural Information Processing
Systems (Morgan Kaufmann Publishers, San Francisco,
CA, 1994) pp. 912–919.

[10] N Le Roux and Y Bengio, “Representational power of re-
stricted Boltzmann machines and deep belief networks,”
Neural computation 20, 1631–1649 (2008).

[11] G Montufar and N Ay, “Reﬁnements of universal approx-
imation results for deep belief networks and restricted
Boltzmann machines,” Neural computation 23, 1306–
1319 (2011).

[12] G E Hinton, “Training products of experts by minimizing
contrastive divergence,” Neural computation 14, 1771–
1800 (2002).

[13] Tijmen Tieleman, Training restricted Boltzmann ma-
chines using approximations to the likelihood gradient
(ACM, New York, New York, USA, 2008).

[14] http://www.deeplearning.net/tutorial/rbm.html.
[15] G. E. Hinton and R. R. Salakhutdinov, “Reducing the di-
mensionality of data with neural networks,” Science 313,
504–507 (2006).

[16] G E Hinton, S Osindero, and Y W Teh, “A fast learning
algorithm for deep belief nets,” Neural computation 18,
1527–1554 (2006).
[17] Giuseppe Carleo

and Matthias Troyer,

“Solving
quantum many-body problem with artiﬁcial
(2017),

the
neural
http://science.sciencemag.org/content/355/6325/602.full.pdf.

Science 355,

networks,”

602–606

[18] Dong-Ling Deng, Xiaopeng Li,

and S. Das Sarma,
“Machine learning topological states,” Phys. Rev. B 96,
195145 (2017).

[19] Giacomo Torlai and Roger G Melko, “Learning thermo-
dynamics with Boltzmann machines,” Physical Review B
94, 165134–7 (2016).

[20] Li Huang and Lei Wang, “Accelerated monte carlo simu-
lations with restricted boltzmann machines,” Phys. Rev.
B 95, 035105 (2017).

[21] Junwei Liu, Yang Qi, Zi Yang Meng, and Liang Fu, “Self-
learning monte carlo method,” Phys. Rev. B 95, 041101
(2017).

[22] Guido Montúfar and Johannes Rauh,

models as marginals of hierarchical models,”
national Journal of Approximate Reasoning
http://dx.doi.org/10.1016/j.ijar.2016.09.003.

“Hierarchical
Inter-
(2016),

16

[23] Guido F Montufar, Johannes Rauh, and Nihat Ay, “Ex-
pressive power and approximation errors of restricted
boltzmann machines,” in Advances in Neural Informa-
tion Processing Systems 24 , edited by J. Shawe-Taylor,
R. S. Zemel, P. L. Bartlett, F. Pereira, and K. Q. Wein-
berger (Curran Associates, Inc., 2011) pp. 415–423.
[24] Laurent Younes, “Synchronous Boltzmann machines can
be universal approximators,” Applied Mathematics Let-
ters 9, 109–113 (1996).

[25] R. Orús, “A practical introduction to tensor networks:
Matrix product states and projected entangled pair
states,” Annals of Physics 349, 117–158 (2014).

[26] D. Perez-Garcia, F. Verstraete, M. M. Wolf, and J. I.
Cirac, “Matrix Product State Representations,” eprint
arXiv:quant-ph/0608197 (2006), quant-ph/0608197.
[27] Ivan V Oseledets, “Tensor-train decomposition,” SIAM
Journal on Scientiﬁc Computing 33, 2295–2317 (2011).
“Renormalization al-
gorithms for Quantum-Many Body Systems in two
and higher dimensions,” eprint arXiv:cond-mat/0407066
(2004), cond-mat/0407066.

[28] F. Verstraete and J. I. Cirac,

[29] Z. Y. Xie, J. Chen, J. F. Yu, X. Kong, B. Normand, and
T. Xiang, “Tensor renormalization of quantum many-
body systems using projected entangled simplex states,”
Phys. Rev. X 4, 011025 (2014).

[30] F Verstraete, V Murg,

and J I Cirac, “Matrix prod-
uct states, projected entangled pair states, and varia-
tional renormalization group methods for quantum spin
systems,” Advances in Physics 57, 143–224 (2008).

[31] Tomotoshi Nishino,

“Density matrix renormalization
group method for 2d classical models,” Journal of
the Physical Society of Japan 64, 3598–3601 (1995),
http://dx.doi.org/10.1143/JPSJ.64.3598.

[32] V. Murg, F. Verstraete, and J. I. Cirac, “Eﬃcient Eval-
uation of Partition Functions of Inhomogeneous Many-
Body Spin Systems,” Physical Review Letters 95, 057206
(2005), cond-mat/0501493.

[33] Michael Levin and Cody P. Nave, “Tensor renormaliza-
tion group approach to two-dimensional classical lattice
models,” Phys. Rev. Lett. 99, 120601 (2007).

[34] J. Eisert, M. Cramer, and M. B. Plenio, “Colloquium
: Area laws for the entanglement entropy,” Rev. Mod.
Phys. 82, 277–306 (2010).

[35] Michael A Nielsen and Isaac L Chuang, Quantum compu-
tation and quantum information (Cambridge university
press, 2010).

[36] E.M. Stoudenmire and Steven R. White, “Studying two-
dimensional systems with the density matrix renormal-
ization group,” Annual Review of Condensed Matter
Physics 3, 111–128 (2012).

[37] Geoﬀrey E Hinton and Terrence J Sejnowski, “Learning
and relearning in boltzmann machines,” in Parallel dis-
tributed processing: Explorations in the microstructure of
cognition, Vol. 1 (1986) pp. 282–317.

[38] Ruslan Salakhutdinov and Geoﬀrey Hinton, “Semantic
hashing,” International Journal of Approximate Reason-
ing 50, 969 – 978 (2009), special Section on Graphical
Models and Information Retrieval.

[39] See https://github.com/yzcj105/rbm2mps for Matlab
implementations of the algorithms to translate an RBM
to an MPS. With increasingly sophisticated approaches
the resulting entanglement entropy bound are tighter un-
til optimal.

[40] Benjamin Marlin, Kevin Swersky, Bo Chen, and Nando

Freitas, “Inductive principles for restricted boltzmann
machine learning,” in Proceedings of the Thirteenth Inter-
national Conference on Artiﬁcial Intelligence and Statis-
tics, Proceedings of Machine Learning Research, Vol. 9,
edited by Yee Whye Teh and Mike Titterington (PMLR,
Chia Laguna Resort, Sardinia, Italy, 2010) pp. 509–516.
[41] Guifré Vidal, “Eﬃcient classical simulation of slightly en-
tangled quantum computations,” Phys. Rev. Lett. 91,
147902 (2003).

[42] Guifré Vidal, “Eﬃcient simulation of one-dimensional
quantum many-body systems,” Phys. Rev. Lett. 93,
040502 (2004).

[43] Michael M. Wolf, Frank Verstraete, Matthew B. Hast-
ings, and J I. Cirac, “Area laws in quantum systems:
Mutual information and correlations,” Phys. Rev. Lett.
100, 070502 (2008).

[44] Ulrich SchollwÃ¶ck, “The density-matrix renormaliza-
tion group in the age of matrix product states,” Annals
of Physics 326, 96 – 192 (2011), january 2011 Special
Issue.

[45] https://en.wikipedia.org/wiki/Tensor_rank_

decomposition.

[46] F. L. Hitchcock, “The expression of a tensor or a polyadic
as a sum of products,” J. Math. Phys 6, 164–189 (1927).
[47] Thomas Barthel, Martin Kliesch, and Jens Eisert, “Real-
space renormalization yields ﬁnite correlations,” Phys.
Rev. Lett. 105, 010502 (2010).

[48] G. Vidal, “Entanglement renormalization,” Phys. Rev.

Lett. 99, 220405 (2007).

[49] Glen Evenbly and Guifre Vidal, “Class of highly entan-
gled many-body states that can be eﬃciently simulated,”
Physical review letters 112, 240502 (2014).

[50] Hans J. Briegel and Robert Raussendorf, “Persistent en-
tanglement in arrays of interacting particles,” Phys. Rev.
Lett. 86, 910–913 (2001).

[51] Joseph M Landsberg, Tensors: geometry and applica-
tions, Vol. 128 (American Mathematical Society Provi-
dence, RI, USA, 2012).

[52] Tamara G Kolda and Brett W Bader, “Tensor decom-
positions and applications,” SIAM review 51, 455–500
(2009).

[53] Ian Aﬄeck, Tom Kennedy, Elliott H. Lieb,

and Hal
Tasaki, “Rigorous results on valence-bond ground states
in antiferromagnets,” Phys. Rev. Lett. 59, 799–802
(1987).

[54] A.Yu. Kitaev, “Fault-tolerant quantum computation by

anyons,” Annals of Physics 303, 2 – 30 (2003).

[55] X.G.Wen, Quantum Field Theory of Many-Body Systems

(Oxford University Press, 2007).

[56] S. B. Bravyi and A. Y. Kitaev, “Quantum codes on a
lattice with boundary,” eprint arXiv:quant-ph/9811052
(1998), quant-ph/9811052.

[57] F. Verstraete, M. M. Wolf, D. Perez-Garcia, and J. I.
Cirac, “Criticality, the area law, and the computational
power of projected entangled pair states,” Phys. Rev.
Lett. 96, 220601 (2006).

[58] A.Y. Kitaev, A. Shen, and M.N. Vyalyi, Classical and
Quantum Computation, Graduate studies in mathemat-
ics (American Mathematical Society, 2002).

[59] Z. Y. Xie, J. Chen, M. P. Qin, J. W. Zhu, L. P. Yang, and
T. Xiang, “Coarse-graining renormalization by higher-
order singular value decomposition,” Phys. Rev. B 86,
045139 (2012).

[60] H. C. Jiang, Z. Y. Weng, and T. Xiang, “Accurate de-

17

termination of tensor network state of quantum lattice
models in two dimensions,” Phys. Rev. Lett. 101, 090603
(2008).

[61] Norbert Schuch, Didier Poilblanc, J I Cirac, and David
Pérez-García, “Resonating valence bond states in the
peps formalism,” Phys. Rev. B 86, 115108 (2012).
[62] N. Read and Subir Sachdev, “Large- N expansion for
frustrated quantum antiferromagnets,” Phys. Rev. Lett.
66, 1773–1776 (1991).

[63] X. G. Wen, “Mean-ﬁeld theory of spin-liquid states with
ﬁnite energy gap and topological orders,” Phys. Rev. B
44, 2664–2672 (1991).

[64] Norbert Schuch, Ignacio Cirac, and David Pérez-García,
“PEPS as ground states: Degeneracy and topology,” An-
nals of Physics 325, 2153 – 2192 (2010).

[65] K. Sohn and H. Lee, “Learning Invariant Representations
with Local Transformations,” Appears in Proceedings of
the 29th International Conference on Machine Learning
(ICML 2012) (2012), arXiv:1206.6418 [cs.LG].

[66] Decebal Constantin Mocanu, Elena Mocanu, Phuong H.
Nguyen, Madeleine Gibescu,
and Antonio Liotta, “A
topological insight into restricted boltzmann machines,”
Machine Learning 104, 243–270 (2016).

[67] Raphael Bailly, “Quadratic weighted automata:spectral
algorithm and likelihood maximization,” in Proceedings
of the Asian Conference on Machine Learning, Proceed-
ings of Machine Learning Research, Vol. 20, edited by
Chun-Nan Hsu and Wee Sun Lee (PMLR, South Garden
Hotels and Resorts, Taoyuan, Taiwain, 2011) pp. 147–
163.
[68] Ming-Jie

“Norm-
operator models,” Neural Computa-
20141473,
1927–1959

observable
tion
22,
https://doi.org/10.1162/neco.2010.03-09-983.

and Herbert

Jaeger,

(2010),

pMID:

Zhao

[69] Edwin Stoudenmire and David J Schwab, “Supervised
learning with tensor networks,” in Advances in Neural
Information Processing Systems 29 , edited by D. D. Lee,
M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett
(Curran Associates, Inc., 2016) pp. 4799–4807.

[70] Z.-Y. Han, J. Wang, H. Fan, L. Wang, and P. Zhang,
“Unsupervised Generative Modeling Using Matrix Prod-
uct States,” ArXiv e-prints
(2017), arXiv:1709.01662
[cond-mat.stat-mech].

[71] V. Dumoulin, I. J. Goodfellow, A. Courville, and Y. Ben-
gio, “On the Challenges of Physical Implementations
(2013),
of RBMs,” Proc. AAAI 2014, pp. 1199-1205
arXiv:1312.5258 [stat.ML].

[72] Yoav Levine, David Yakira, Nadav Cohen,

and Am-
non Shashua, “Deep learning and quantum entanglement:
Fundamental connections with implications to network
design,” (2017), arXiv:1704.01552 [cs.LG].

[73] David JC MacKay, Information theory, inference and
learning algorithms (Cambridge university press, 2003).

[74] https://www.nvidia.com/en-us/deep-learning-ai/

developer.

[75] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis,
J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard,
M. Kudlur, J. Levenberg, R. Monga, S. Moore, D. G.
Murray, B. Steiner, P. Tucker, V. Vasudevan, P. War-
den, M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: A
system for large-scale machine learning,” ArXiv e-prints
(2016), arXiv:1605.08695 [cs.DC].

[76] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin,

S. Ghemawat, I. Goodfellow, A. Harp, G. Irving, M. Is-
ard, Y. Jia, R. Jozefowicz, L. Kaiser, M. Kudlur, J. Lev-
enberg, D. Mane, R. Monga, S. Moore, D. Murray,
C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever,
K. Talwar, P. Tucker, V. Vanhoucke, V. Vasudevan,
F. Viegas, O. Vinyals, P. Warden, M. Wattenberg,
M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: Large-
Scale Machine Learning on Heterogeneous Distributed
Systems,” ArXiv e-prints
(2016), arXiv:1603.04467
[cs.DC].

[77] V. Murg, F. Verstraete, Ö. Legeza, and R. M. Noack,
“Simulating strongly correlated quantum systems with
tree tensor networks,” Phys. Rev. B 82, 205105 (2010).
[78] P. Silvi, V. Giovannetti, S. Montangero, M. Rizzi, J. I.
Cirac,
and R. Fazio, “Homogeneous binary trees as
ground states of quantum critical hamiltonians,” Phys.
Rev. A 81, 062335 (2010).

[79] Y.-Y. Shi, L.-M. Duan, and G. Vidal, “Classical simula-
tion of quantum many-body systems with a tree tensor
network,” Phys. Rev. A 74, 022320 (2006).

[80] L. Tagliacozzo, G. Evenbly, and G. Vidal, “Simulation
of two-dimensional quantum systems using a tree tensor
network that exploits the entropic area law,” Phys. Rev.
B 80, 235127 (2009).

[81] Nadav Cohen, Or Sharir, and Amnon Shashua, “On the
expressive power of deep learning: A tensor analysis,” in
29th Annual Conference on Learning Theory, Proceed-
ings of Machine Learning Research, Vol. 49, edited by
Vitaly Feldman, Alexander Rakhlin, and Ohad Shamir
(PMLR, Columbia University, New York, New York,
USA, 2016) pp. 698–728.

[82] T. Poggio, H. Mhaskar, L. Rosasco, B. Miranda, and

18

Q. Liao, “Why and When Can Deep – but Not Shallow –
Networks Avoid the Curse of Dimensionality: a Review,”
ArXiv e-prints (2016), arXiv:1611.00740 [cs.LG].

[83] Dong-Ling Deng, Xiaopeng Li,

and S. Das Sarma,
“Quantum entanglement in neural network states,” Phys.
Rev. X 7, 021021 (2017).

[84] Xun Gao and Lu-Ming Duan, “Eﬃcient representation of
quantum many-body states with deep neural networks,”
Nature Communications 8, 662 (2017).

[85] Y. Huang and J. E. Moore, “Neural network representa-
tion of tensor network and chiral states,” ArXiv e-prints
(2017), arXiv:1701.06246 [cond-mat.dis-nn].

[86] Raphael Kaubruegger, Lorenzo Pastori, and Jan Carl
Budich, “Chiral Topological Phases from Artiﬁcial Neural
Networks,” arXiv:1710.04713 [cond-mat, physics:quant-
ph] (2017), arXiv: 1710.04713.

[87] Stephen R. Clark, “Unifying Neural-network Quantum
States and Correlator Product States via Tensor Net-
works,” arXiv:1710.03545 [cond-mat, physics:quant-ph]
(2017), arXiv: 1710.03545.

[88] Ivan Glasser, Nicola Pancotti, Moritz August, Ivan D.
Rodriguez, and J. Ignacio Cirac, “Neural-network quan-
tum states, string-bond states, and chiral topological
states,” Phys. Rev. X 8, 011006 (2018).

[89] Yusuke Nomura, Andrew S. Darmawan, Youhei Yamaji,
and Masatoshi Imada, “Restricted boltzmann machine
learning for solving strongly correlated quantum sys-
tems,” Phys. Rev. B 96, 205152 (2017).

[90] J. Hubbard, “Calculation of Partition Functions,” Phys-

ical Review Letters 3, 77–78 (1959).

