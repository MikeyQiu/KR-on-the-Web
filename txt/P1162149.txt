Content Selection in Deep Learning Models of Summarization

Chris Kedzie and Kathleen McKeown
Department of Computer Science
Columbia University

kedzie,kathy
}
{

@cs.columbia.edu

Hal Daum´e III
University of Maryland, College Park
Microsoft Research, New York City
hal@cs.umd.edu

9
1
0
2
 
b
e
F
 
8
1
 
 
]
L
C
.
s
c
[
 
 
2
v
3
4
3
2
1
.
0
1
8
1
:
v
i
X
r
a

Abstract

We carry out experiments with deep learning
models of summarization across the domains
of news, personal stories, meetings, and medi-
cal articles in order to understand how content
selection is performed. We ﬁnd that many so-
phisticated features of state of the art extractive
summarizers do not improve performance over
simpler models. These results suggest that it
is easier to create a summarizer for a new do-
main than previous work suggests and bring
into question the beneﬁt of deep learning mod-
els for summarization for those domains that
do have massive datasets (i.e., news). At the
same time, they suggest important questions
for new research in summarization; namely,
new forms of sentence representations or ex-
ternal knowledge sources are needed that are
better suited to the summarization task.

1

Introduction

Content selection is a central component in many
natural language generation tasks, where, given a
generation goal, the system must determine which
information should be expressed in the output text
(Gatt and Krahmer, 2018).
In summarization,
content selection is usually accomplished through
sentence (and, occasionally, phrase) extraction.
Despite being a key component of both extrac-
tive and abstractive summarization systems, it is
is not well understood how deep learning models
perform content selection with only word and sen-
tence embedding based features as input. Non-
neural network approaches often use frequency
and information theoretic measures as proxies for
content salience (Hong and Nenkova, 2014), but
these are not explicitly used in most neural net-
work summarization systems.

In this paper, we seek to better understand how
deep learning models of summarization perform
4):
content selection across multiple domains (
§

news, personal stories, meetings, and medical
articles (for which we collect a new corpus).1 We
analyze several recent sentence extractive neural
network architectures, speciﬁcally considering the
3.1) and
design choices for sentence encoders (
§
sentence extractors (
3.2). We compare Recurrent
§
Neural Network (RNN) and Convolutional Neural
Network (CNN) based sentence representations
to the simpler approach of word embedding aver-
aging to understand the gains derived from more
sophisticated architectures. We also question the
necessity of auto-regressive sentence extraction
(i.e. using previous predictions to inform future
predictions), which previous approaches have
used (
2), and propose two alternative models
that extract sentences independently.

§

Our main results (
§

5) reveal:

1. Sentence position bias dominates the learn-
ing signal for news summarization, though
not for other domains.2 Summary quality
for news is only slightly degraded when con-
tent words are omitted from sentence embed-
dings.

2. Word embedding averaging is as good or bet-
ter than either RNNs or CNNs for sentence
embedding across all domains.

3. Pre-trained word embeddings are as good, or
better than, learned embeddings in ﬁve of six
datasets.

4. Non auto-regressive sentence extraction per-
forms as good or better than auto-regressive
extraction in all domains.

Taken together, these and other results in the pa-
per suggest that we are over-estimating the abil-

1Data preprocessing and implementation code can be
https://github.com/kedz/nnsum/

found here:
tree/emnlp18-release

2This is a known bias in news summarization (Nenkova,

2005).

ity of deep learning models to learn robust and
meaningful content features for summarization. In
one sense, this might lessen the burden of apply-
ing neural network models of content to other do-
mains; one really just needs in-domain word em-
beddings. However, if we want to learn something
other than where the start of the article is, we will
need to design other means of sentence represen-
tation, and possibly external knowledge represen-
tations, better suited to the summarization task.

2 Related Work

The introduction of the CNN-DailyMail corpus by
Hermann et al. (2015) allowed for the applica-
tion of large-scale training of deep learning mod-
els for summarization. Cheng and Lapata (2016)
developed a sentence extractive model that uses a
word level CNN to encode sentences and a sen-
tence level sequence-to-sequence model to predict
which sentences to include in the summary. Sub-
sequently, Nallapati et al. (2017) proposed a dif-
ferent model using word-level bidirectional RNNs
along with a sentence level bidirectional RNN for
predicting which sentences should be extracted.
Their sentence extractor creates representations of
the whole document and computes separate scores
for salience, novelty, and location. These works
represent the state-of-the-art for deep learning-
based extractive summarization and we analyze
them further in this paper.

Other recent neural network approaches in-
clude, Yasunaga et al. (2017), who learn a graph-
convolutional network (GCN) for multi-document
summarization. They do not closely examine the
choice of sentence encoder, which is one of the
focuses of the present paper; rather, they study the
best choice of graph structure for the GCN, which
is orthogonal to this work.

Non-neural network learning-based approaches
have also been applied to summarization. Typi-
cally they involve learning n-gram feature weights
in linear models along with other non-lexical word
or structural features (Berg-Kirkpatrick et al.,
2011; Sipos et al., 2012; Durrett et al., 2016).
In this paper, we study representation learning in
neural networks that can capture more complex
word level feature interactions and whose dense
representations are more compatible with current
practices in NLP.

The previously mentioned works have focused
on news summarization. To further understand the

content selection process, we also explore other
domains of summarization. In particular, we ex-
plore personal narrative summarization based on
stories shared on Reddit (Ouyang et al., 2017),
workplace meeting summarization (Carletta et al.,
2005), and medical journal article summarization
(Mishra et al., 2014).

While most work on these summarization
tasks often exploit domain-speciﬁc features (e.g.
speaker identiﬁcation in meeting summarization
(Galley, 2006; Gillick et al., 2009)), we purpose-
fully avoid such features in this work in order to
understand the extent to which deep learning mod-
els can perform content selection using only sur-
face lexical features. Summarization of academic
literature (including medical journals), has long
been a research topic in NLP (Kupiec et al., 1995;
Elhadad et al., 2005), but most approaches have
explored facet-based summarization (Jaidka et al.,
2017), which is not the focus of our work.

3 Methods

The goal of extractive text summarization is to se-
lect a subset of a document’s text to use as a sum-
mary, i.e. a short gist or excerpt of the central con-
tent. Typically, we impose a budget on the length
of the summary in either words or bytes. In this
work, we focus on sentence extractive summariza-
tion, where the basic unit of extraction is a sen-
tence and impose a word limit as the budget.

We model the sentence extraction task as a se-
quence tagging problem, following (Conroy and
O’Leary, 2001). Speciﬁcally, given a document
containing n sentences s1, . . . , sn we generate a
summary by predicting a corresponding label se-
n, where yi = 1 in-
quence y1, . . . , yn
0, 1
}
dicates the i-th sentence is to be included in the
summary. Each sentence is itself a sequence of
word embeddings si = w
si
|
|
is the length of the sentence in words. The word
N enforces a constraint that the total
budget c
summary word length (cid:80)n

(i)
|si| where

(i)
1 , . . . , w

∈ {

∈

c.

si

i=1 yi

For a typical deep learning model of extractive
summarization there are two main design deci-
sions: a) the choice of sentence encoder which
maps each sentence si to an embedding hi, and b)
the choice of sentence extractor which maps a se-
quence of sentence embeddings h = h1, . . . , hn to
a sequence of extraction decisions y = y1, . . . , yn.

· |

| ≤

Figure 1: Sentence extractor architectures: a) RNN, b) Seq2Seq, c) Cheng & Lapata, and d) SummaRunner. The
(cid:76) indicates attention. Green blocks repesent sentence encoder output and red blocks indicates learned “begin
decoding” embeddings. Vertically stacked yellow and orange boxes indicate extractor encoder and decoder hidden
states respectively. Horizontal orange and yellow blocks indicate multi-layer perceptrons. The purple blocks
represent the document and summary state in the SummaRunner extractor.

3.1 Sentence Encoders

We experiment with three architectures for map-
ping sequences of word embeddings to a ﬁxed
length vector: averaging, RNNs, and CNNs. Hy-
perparameter settings and implementation details
can be found in Appendix A.

Averaging Encoder Under the averaging en-
coder, a sentence embedding h is simply the aver-
age of its word embeddings, i.e. h = 1
i=1 wi.
|s|

(cid:80)|s|

RNN Encoder When using the RNN sentence
encoder, a sentence embedding is the concatena-
tion of the ﬁnal output states of a forward and
backward RNN over the sentence’s word embed-
dings. We use a Gated Recurrent Unit (GRU) for
the RNN cell (Chung et al., 2014).

CNN Encoder The CNN sentence encoder uses
a series of convolutional feature maps to encode
each sentence. This encoder is similar to the con-
volutional architecture of Kim (2014) used for
text classiﬁcation tasks and performs a series of
“one-dimensional” convolutions over word em-
beddings. The ﬁnal sentence embedding h is a
concatenation of all the convolutional ﬁlter out-
puts after max pooling over time.

3.2 Sentence Extractors

Sentence extractors take sentence embeddings
h1:n and produce an extract y1:n. The sentence
extractor is essentially a discriminative classi-
ﬁer p(y1:n
h1:n). Previous neural network ap-
|
proaches to sentence extraction have assumed

an auto-regressive model,
leading to a semi-
Markovian factorization of the extractor probabil-
h) = (cid:81)n
y<i, h), where each
ities p(y1:n
i=1 p(yi
|
|
is dependent on all previous yj for
prediction yi
all j < i. We compare two such models pro-
posed by Cheng and Lapata (2016) and Nallap-
ati et al. (2017). A simpler approach that does
not allow interaction among the y1:n is to model
h), which we explore in
p(y1:n
|
two proposed extractor models that we refer to as
the RNN and Seq2Seq extractors. Implementation
details for all extractors are in Appendix B.

h) = (cid:81)n
|

i=1 p(yi

Previously Proposed Sentence Extractors We
consider two recent state-of-the-art extractors.

The ﬁrst, proposed by Cheng and Lapata
is built around a sequence-to-sequence
(2016),
model. First, each sentence embedding3 is fed into
an encoder side RNN, with the ﬁnal encoder state
passed to the ﬁrst step of the decoder RNN. On
the decoder side, the same sentence embeddings
are fed as input to the decoder and decoder out-
puts are used to predict each yi. The decoder input
is weighted by the previous extraction probability,
inducing the dependence of yi on y<i. See Fig-
ure 1.c for a graphical layout of the extractor.

Nallapati et al. (2017) proposed a sentence ex-
tractor, which we refer to as the SummaRunner
Extractor, that factorizes the extraction probabil-
ity into contributions from different sources. First,
a bidirectional RNN is run over the sentence em-

3Cheng and Lapata (2016) used an CNN sentence en-
coder with this extractor architecture; in this work we pair the
Cheng & Lapata extractor with several different encoders.

beddings4 and the output is concatenated. A repre-
sentation of the whole document is made by aver-
aging the RNN output. A summary representation
is also constructed by taking the sum of the pre-
vious RNN outputs weighted by their extraction
probabilities. Extraction predictions are made us-
ing the RNN output at the i-th step, the document
representation, and i-th version of the summary
representation, along with factors for sentence lo-
cation in the document. The use of the iteratively
constructed summary representation creates a de-
pendence of yi on all y<i. See Figure 1.d for a
graphical layout.

Proposed Sentence Extractors We propose
two sentence extractor models that make a
stronger conditional
independence assumption
h) = (cid:81)n
h), essentially making inde-
i=1 p(yi
p(y
|
|
pendent predictions conditioned on h.

RNN Extractor Our ﬁrst proposed model is
a very simple bidirectional RNN based tagging
model. As in the RNN sentence encoder we use
a GRU cell. The forward and backward outputs
of each sentence are passed through a multi-layer
perceptron with a logsitic sigmoid output to pre-
dict the probability of extracting each sentence.
See Figure 1.a for a graphical layout.

Seq2Seq Extractor One shortcoming of the
RNN extractor is that long range information from
one end of the document may not easily be able
to affect extraction probabilities of sentences at
the other end. Our second proposed model, the
Seq2Seq extractor mitigates this problem with an
attention mechanism commonly used for neural
machine translation (Bahdanau et al., 2014) and
abstractive summarization (See et al., 2017). The
sentence embeddings are ﬁrst encoded by a bidi-
rectional GRU. A separate decoder GRU trans-
forms each sentence into a query vector which
attends to the encoder output.
The attention
weighted encoder output and the decoder GRU
output are concatenated and fed into a multi-layer
perceptron to compute the extraction probability.
See Figure 1.b for a graphical layout.

4 Datasets

Dataset

Train

Valid

Test Refs

CNN/DM 287,113
44,382
516
404
98
21,250

NYT
DUC
Reddit
AMI
PubMed

13,368
5,523
91
24
19
1,250

11,490
6,495
657
48
20
2,500

1
1.93
2
2
1
1

Table 1: Sizes of the training, validation, test splits for
each dataset and the average number of test set human
reference summaries per document.

ent biases within each domain can affect content
selection. The corpora come from the news do-
main (CNN-DailyMail, New York Times, DUC),
personal narratives domain (Reddit), workplace
meetings (AMI), and medical
journal articles
(PubMed). See Table 1 for dataset statistics.

CNN-DailyMail We use the preprocessing and
training, validation, and test splits of See et al.
(2017). This corpus is a mix of news on differ-
ent topics including politics, sports, and entertain-
ment.

New York Times The New York Times (NYT)
corpus (Sandhaus, 2008) contains two types of ab-
stracts for a subset of its articles. The ﬁrst sum-
mary is an archival abstract and the second is a
shorter online teaser meant to entice a viewer of
the webpage to click to read more. From this col-
lection, we take all articles that have a concate-
nated summary length of at least 100 words. We
create training, validation, and test splits by parti-
tioning on dates; we use the year 2005 as the val-
idation data, with training and test partitions in-
cluding documents before and after 2005 respec-
tively.

DUC We use the single document summariza-
tion data from the 2001 and 2002 Document
Understanding Conferences (DUC) (Over and
Liggett, 2002). We split the 2001 data into train-
ing and validation splits and reserve the 2002 data
for testing.

We perform our experiments across six corpora
from varying domains to understand how differ-

4Nallapati et al. (2017) use an RNN sentence encoder with
this extractor architecture; in this work we pair the Sum-
maRunner extractor with different encoders.

AMI The AMI corpus (Carletta et al., 2005) is a
collection of real and staged ofﬁce meetings anno-
tated with text transcriptions, along with abstrac-
tive summaries. We use the prescribed splits.

Extractor Enc.

PubMed
CNN/DM
M R-2 M R-2 M R-2 M R-2 M R-2 M R-2

DUC 2002

Reddit

NYT

AMI

Lead

RNN

Seq2Seq

Cheng
&
Lapata

Summa
Runner

Oracle

24.1
–
25.2
Avg.
RNN 25.1
CNN 25.0
25.2
Avg.
RNN 25.1
CNN 25.0
Avg.
25.0
RNN 25.0
CNN 25.2
Avg.
25.1
RNN 25.1
CNN 24.9
31.1

–

24.4
25.4
25.4
25.1
25.6
25.3
25.1
25.3
25.0
25.1
25.4
25.2
25.0
36.2

30.0
29.8
29.6
29.0
30.5
30.2
29.9
30.4
30.3
29.9
30.2
30.0
29.3
35.3

32.3
34.7
34.9
33.7
35.7
35.9
35.1
35.6
35.8
35.0
35.4
35.5
34.4
48.9

25.1
26.8
26.8
26.7
27.0
26.7
26.7
27.1
27.0
26.9
26.7
26.5
26.4
31.3

21.5
22.7
22.6
22.7
22.8
22.5
22.7
23.1
23.0
23.0
22.3
22.1
22.2
31.8

20.1
20.4
20.2
20.9
20.9
20.5
20.7
20.9
20.3
20.5
21.0
20.9
20.4
24.3

10.9
11.4
11.4
12.8
13.6
12.0
13.2
13.6
12.6
13.4
13.4
12.5
12.3
16.2

12.3
17.0
16.2
14.4
17.0
16.1
14.2
16.7
16.3
14.3
17.0
16.5
14.5
17.8

2.0
5.5
5.2
3.2
5.5
5.3
2.9
6.1
5.0
2.8
5.6
5.4
3.2
8.7

15.9
19.8
19.7
19.9
20.1
19.7
19.8
20.1
19.7
19.9
19.9
19.7
19.8
24.1

9.3
17.0
16.6
16.8
17.7
16.7
16.9
17.7
16.7
16.9
17.2
16.5
16.8
25.0

Table 2: METEOR (M) and ROUGE-2 recall (R-2) results across all extractor/encoder pairs. Results that are
statistically indistinguishable from the best system are shown in bold face.

Reddit Ouyang et al. (2017) collected a corpus
of personal stories shared on Reddit5 along with
multiple extractive and abstractive summaries. We
randomly split this data using roughly three and
ﬁve percent of the data validation and test respec-
tively.

PubMed We created a corpus of 25,000 ran-
domly sampled medical journal articles from the
PubMed Open Access Subset6. We only included
articles if they were at least 1000 words long and
had an abstract of at least 50 words in length. We
used the article abstracts as the ground truth hu-
man summaries.

4.1 Ground Truth Extract Summaries

Since we do not typically have ground truth ex-
tract summaries from which to create the labels
yi, we construct gold label sequences by greedily
optimizing ROUGE-1, using the algorithm in Ap-
pendix C. We choose to optimize for ROUGE-1
rather than ROUGE-2 similarly to other optimiza-
tion based approaches to summarization (Sipos
et al., 2012; Durrett et al., 2016) which found this
to be the easier target to learn.

5 Experiments

We evaluate summary quality using ROUGE-2
recall (Lin, 2004); ROUGE-1 and ROUGE-LCS
trend similarity in our experiments. We use tar-
get word lengths of 100 words for news, and
75, 290, and 200 for Reddit, AMI, and PubMed
respectively. We also evaluate using METEOR
(Denkowski and Lavie, 2014).7 Summaries are
generated by extracting the top ranked sentences
y<i, h), stopping
by model probability p(yi = 1
|
when the word budget is met or exceeded. We
estimate statistical signiﬁcance by averaging each
document level score over the ﬁve random initial-
izations. We then test the difference between the
best system on each dataset and all other systems
using the approximate randomization test (Riezler
and Maxwell, 2005) with the Bonferroni correc-
tion for multiple comparisons, testing for signiﬁ-
cance at the 0.05 level.

5.1 Training

We train all models to minimize the weighted neg-
ative log-likelihood

=

L

−

(cid:88)

n
(cid:88)

s,y∈D
h=enc(s)

i=1

ω(yi) log p (yi

y<i, h)
|

5www.reddit.com
6https://www.ncbi.nlm.nih.gov/pmc/

tools/openftlist/

7We use the default settings for METEOR and use remove
stopwords and no stemming options for ROUGE, keeping de-
faults for all other parameters.

Ext.

Emb. CNN/DM

NYT

DUC

Reddit

AMI

PubMed

Seq2Seq

C&L

Summa
Runner

Fixed
Learn
Fixed
Learn
Fixed
Learn

25.6
25.3
25.3
24.9
25.4
25.1

35.7
(0.3) 35.7
35.6
(0.4) 35.4
35.4
(0.3) 35.2

22.8
(0.0) 22.9
23.1
(0.2) 23.0
22.3
(0.2) 22.2

(0.1)

(0.1)

13.6
13.8
13.6
13.4
13.4
12.6

5.5
5.8
6.1
6.2
5.6
5.8

(0.2)

(0.8)

(-0.1)

(-0.2)

(-0.1)

(-0.2)

(-0.3)

17.7
16.9
17.7
16.4
17.2
16.8

(0.8)

(1.3)

(0.4)

Table 3: ROUGE-2 recall across sentence extractors when using ﬁxed pretrained embeddings or when embeddings
are updated during training. In both cases embeddings are initialized with pretrained GloVe embeddings. All ex-
tractors use the averaging sentence encoder. When both learned and ﬁxed settings are bolded, there is no signifcant
performance difference. RNN extractor is omitted for space but is similar to Seq2Seq. Difference in scores shown
in parenthesis.

Ablation CNN/DM
all words
-nouns
-verbs
-adj/adv
-function

25.4
25.3† (0.1)
25.3† (0.1)
25.3† (0.1)
25.2† (0.2)

NYT

34.7
34.3† (0.4)
34.4† (0.3)
34.4† (0.3)
34.5† (0.2)

DUC

22.7
22.3† (0.4)
22.4† (0.3)
22.5 (0.2)
22.9† (-0.2)

Reddit

11.4
10.3† (1.1)
10.8 (0.6)
9.5† (1.9)
10.3† (1.1)

AMI

5.5
3.8† (1.7)
5.8 (-0.3)
5.4 (0.1)
6.3† (-0.8)

PubMed
17.0
15.7† (1.3)
16.6† (0.4)
16.8† (0.2)
16.6† (0.4)

Table 4: ROUGE-2 recall after removing nouns, verbs, adjectives/adverbs, and function words. Ablations are
performed using the averaging sentence encoder and the RNN extractor. Bold indicates best performing system.
†
indicates signiﬁcant difference with the non-ablated system. Difference in score from all words shown in paren-
thesis.

D

over the training data
using stochastic gradient
descent with the ADAM optimizer (Kingma and
Ba, 2014). ω(0) = 1 and ω(1) = N0/N1 where
Ny is the number of training examples with label
y. We trained for a maximum of 50 epochs and the
best model was selected with early stopping on the
validation set according to ROUGE-2. Each epoch
constitutes a full pass through the dataset. The av-
erage stopping epoch was: CNN-DailyMail, 16.2;
NYT, 21.36; DUC, 37.11; Reddit, 36.59; AMI,
19.58; PubMed, 19.84. All experiments were re-
peated with ﬁve random initializations. Unless
speciﬁed, word embeddings were initialized using
pretrained GloVe embeddings (Pennington et al.,
2014) and we did not update them during training.
Unknown words were mapped to a zero embed-
ding. See Appendix D for more optimization and
training details.

5.2 Baselines

Lead As a baseline we include the lead sum-
mary, i.e.
taking the ﬁrst x words of the docu-
ment as summary, where x is the target summary
length for each dataset (see the ﬁrst paragraph of
5). While incredibly simple, this method is still a
§
competitive baseline for single document summa-

rization, especially on newswire.

Oracle To measure the performance ceiling, we
show the ROUGE/METEOR scores using the ex-
tractive summary which results from greedily op-
I.e., if we had clairvoyant
timizing ROUGE-1.
knowledge of the human reference summary, the
oracle system achieves the (approximate) maxi-
mum possible ROUGE scores. See Appendix C
for a detailed description of the oracle algorithm.

5.3 Results

The results of our main experiment comparing the
different extractors/encoders are shown in Table 2.
Overall, we ﬁnd no major advantage when us-
ing the CNN and RNN sentence encoders over
the averaging encoder. The best performing en-
coder/extractor pair either uses the averaging en-
coder (ﬁve out of six datasets) or the differences
are not statistically signiﬁcant.

When looking at extractors, the Seq2Seq extrac-
tor is either part of the best performing system
(three out of six datasets) or is not statistically dis-
tinguishable from the best extractor.

Overall, on the news and medical journal do-
mains, the differences are quite small with the dif-

Ext.

Order

CNN/DM

NYT

DUC

Reddit

AMI

PubMed

Seq2Seq

In-Order
Shufﬂed

25.6
21.7

35.7
(3.9) 25.6

22.8
(10.1) 21.2

13.6
(1.6) 13.5

5.5
6.0

17.7
14.9

(0.1)

(-0.5)

(2.8)

Table 5: ROUGE-2 recall using models trained on in-order and shufﬂed documents. Extractor uses the averag-
ing sentence encoder. When both in-order and shufﬂed settings are bolded, there is no signifcant performance
difference. Difference in scores shown in parenthesis.

Hurricane Gilbert swept toward the Dominican Republic
Sunday, and the Civil Defense alerted its heavily populated
south coast to prepare for high winds, heavy rains and high
seas. The storm was approaching from the southeast with
sustained winds of 75 mph gusting to 92 mph. An estimated
100,000 people live in the province, including 70,000 in the
city of Barahona, about 125 miles west of Santo Domingo.
On Saturday, Hurricane Florence was downgraded to a
tropical storm and its remnants pushed inland from the
U.S. Gulf Coast. Tropical Storm Gilbert formed in the east-
ern Caribbean and strengthened into a hurricane Saturday
night.

Hurricane Gilbert swept toward the Dominican Republic
Sunday, and the Civil Defense alerted its heavily populated
south coast to prepare for high winds, heavy rains and high
seas. The storm was approaching from the southeast with
sustained winds of 75 mph gusting to 92 mph. An esti-
mated 100,000 people live in the province, including 70,000
in the city of Barahona, about 125 miles west of Santo
Domingo. Tropical Storm Gilbert formed in the eastern
Caribbean and strengthened into a hurricane Saturday night.
Strong winds associated with the Gilbert brought coastal
ﬂooding, strong southeast winds and up to 12 feet feet to
Puerto Rico’s south coast.

Table 6: Example output of Seq2Seq extractor (left) and Cheng & Lapata Extractor (right). This is a typical
example, where only one sentence is different between the two (shown in bold).

ferences between worst and best systems on the
CNN/DM dataset spanning only .56 of a ROUGE
point. While there is more performance variability
in the Reddit and AMI data, there is less distinc-
tion among systems: no differences are signiﬁcant
on Reddit and every extractor has at least one con-
ﬁguration that is indistinguishable from the best
system on the AMI corpus. This is probably due
to the small test size of these datasets.

Word Embedding Learning Given that learn-
ing a sentence encoder (averaging has no learned
parameters) does not yield signiﬁcant improve-
ment, it is natural to consider whether learning
word embeddings is also necessary.
In Table 3
we compare the performance of different extrac-
tors using the averaging encoder, when the word
embeddings are held ﬁxed or learned during train-
ing. In both cases, word embeddings are initial-
ized with GloVe embeddings trained on a combi-
nation of Gigaword and Wikipedia. When learn-
ing embeddings, words occurring fewer than three
times in the training data are mapped to an un-
known token (with learned embedding).

In all but one case, ﬁxed embeddings are as
good or better than the learned embeddings. This
is a somewhat surprising ﬁnding on the CNN/DM
data since it is reasonably large, and learning em-
beddings should give the models more ﬂexibility
to identify important word features.8 This sug-

gests that we cannot extract much generalizable
learning signal from the content other than what
is already present from initialization. Even on
PubMed, where the language is quite different
from the news/Wikipedia articles the GloVe em-
beddings were trained on, learning leads to signif-
icantly worse results.

POS Tag Ablation It is also not well explored
what word features are being used by the encoders.
To understand which classes of words were most
important we ran an ablation study, selectively
removing nouns, verbs (including participles and
auxiliaries), adjectives & adverbs, and function
words (adpositions, determiners, conjunctions).
All datasets were automatically tagged using the
spaCy part-of-speech (POS) tagger9. The em-
beddings of removed words were replaced with
a zero vector, preserving the order and position
of the non-ablated words in the sentence. Abla-
tions were performed on training, validation, and
test partitions, using the RNN extractor with av-
eraging encoder. Table 4 shows the results of the
POS tag ablation experiments. While removing
any word class from the representation generally
hurts performance (with statistical signiﬁcance),
on the news domains, the absolute values of the

does lead to small performance boosts, however, only in the
Seq2Seq extractor is this diference signiﬁcant; it is quite pos-
sible that this is an artifact of the very small test set size.

8The AMI corpus is an exception here where learning

9https://github.com/explosion/spaCy

differences are quite small (.18 on CNN/DM, .41
on NYT, .3 on DUC) suggesting that the model’s
predictions are not overly dependent on any par-
ticular word types. On the non-news datasets, the
ablations have a larger effect (max differences are
1.89 on Reddit, 2.56 on AMI, and 1.3 on PubMed).
Removing nouns leads to the largest drop on AMI
and PubMed. Removing adjectives and adverbs
leads to the largest drop on Reddit, suggesting the
intensiﬁers and descriptive words are useful for
identifying important content in personal narra-
tives. Curiously, removing the function word POS
class yields a signiﬁcant improvement on DUC
2002 and AMI.

Document Shufﬂing Sentence position is a
well known and powerful feature for news sum-
marization (Hong and Nenkova, 2014), owing to
the intentional lead bias in the news article writ-
ing10; it also explains the difﬁculty in beating the
lead baseline for single-document summarization
(Nenkova, 2005; Brandow et al., 1999). In exam-
ining the generated summaries, we found most of
the selected sentences in the news domain came
from the lead paragraph of the document. This
is despite the fact that there is a long tail of sen-
tence extractions from later in the document in the
ground truth extract summaries (31%, 28.3%, and
11.4% of DUC, CNN/DM, and NYT training ex-
tract labels come from the second half of the doc-
ument). Because this lead bias is so strong, it is
questionable whether the models are learning to
identify important content or just ﬁnd the start of
the document. We conduct a sentence order exper-
iment where each document’s sentences are ran-
domly shufﬂed during training. We then evalu-
ate each model performance on the unshufﬂed test
data, comparing to the model trained on unshuf-
ﬂed data; if the models trained on shufﬂed data
drop in performance, then this indicates the lead
bias is the relevant factor.

Table 5 shows the results of the shufﬂing ex-
periments. The news domains and PubMed suffer
a signiﬁcant drop in performance when the docu-
ment order is shufﬂed. By comparison, there is no
signiﬁcant difference between the shufﬂed and in-
order models on the Reddit domain, and shufﬂing
actually improves performance on AMI. This sug-
gest that position is being learned by the models
in the news/journal article domain even when the

10https://en.wikipedia.org/wiki/

Inverted_pyramid_(journalism)

model has no explicit position features, and that
this feature is more important than either content
or function words.

6 Discussion

Learning content selection for summarization in
the news domain is severely inhibited by the lead
bias. The summaries generated by all systems de-
scribed here–the prior work and our proposed sim-
pliﬁed models–are highly similar to each other and
to the lead baseline. The Cheng & Lapata and
Seq2Seq extractors (using the averaging encoder)
share 87.8% of output sentences on average on the
CNN/DM data, with similar numbers for the other
news domains (see Table 6 for a typical example).
Also on CNN/DM, 58% of the Seq2Seq selected
sentences also occur in the lead summary, with
similar numbers for DUC, NYT, and Reddit. Shuf-
ﬂing reduces lead overlap to 35.2% but the overall
system performance drops signiﬁcantly; the mod-
els are not able to identify important information
without position.

The relative robustness of the news domain to
part of speech ablation also suggests that models
are mostly learning to recognize the stylistic fea-
tures unique to the beginning of the article, and not
the content. Additionally, the drop in performance
when learning word embeddings on the news do-
main suggests that word embeddings alone do not
provide very generalizable content features com-
pared to recognizing the lead.

The picture is rosier for non-news summariza-
tion where part of speech ablation leads to larger
performance differences and shufﬂing either does
not inhibit content selection signiﬁcantly or leads
to modest gains. Learning better word-level rep-
resentations on these domains will likely require
much larger corpora, something which might re-
main unlikely for personal stories and meetings.

The lack of distinction among sentence en-
coders is interesting because it echoes ﬁndings in
the generic sentence embedding literature where
word embedding averaging is frustratingly difﬁ-
cult to outperform (Iyyer et al., 2015; Wieting
et al., 2015; Arora et al., 2016; Wieting and Gim-
pel, 2017). The inability to learn useful sen-
tence representations is also borne out in the Sum-
maRunner model, where there are explicit similar-
ity computations between document or summary
representations and sentence embeddings; these
computations do not seem to add much to the per-

formance as the Cheng & Lapata and Seq2Seq
models which lack these features generally per-
form as well or better. Furthermore, the Cheng
& Lapata and SummaRunner extractors both con-
struct a history of previous selection decisions to
inform future choices but this does not seem to sig-
niﬁcantly improve performance over the Seq2Seq
extractor (which does not). This suggests that we
need to rethink or ﬁnd novel forms of sentence
representation for the summarization task.

A manual examination of the outputs revealed
some interesting failure modes, although in gen-
eral it was hard to discern clear patterns of be-
haviour other than lead bias. On the news domain,
the models consistently learned to ignore quoted
material in the lead, as often the quotes provide
color to the story but are unlikely to be included in
the summary (e.g. “It was like somebody slugging
a punching bag.”). This behavior was most likely
triggered by the presence of quotes, as the quote
attributions, which were often tokenized as sep-
arate sentences, would subsequently be included
in the summary despite also not containing much
information (e.g. Gil Clark of the National Hurri-
cane Center said Thursday).

7 Conclusion

We have presented an empirical study of deep
learning based content selection algorithms for
summarization. Our ﬁndings suggest such mod-
els face stark limitations on their ability to learn
robust features for this task and that more work is
needed on sentence representation for summariza-
tion.

8 Acknowledgements

The authors would like to thank the anonymous re-
viewers for their valuable feedback. Thanks goes
out as well to Chris Hidey for his helpful com-
ments. We would also like to thank Wen Xiao
for identifying an error in the oracle results for the
AMI corpus, which as since been corrected.

This research is based upon work supported in
part by the Ofﬁce of the Director of National Intel-
ligence (ODNI), Intelligence Advanced Research
Projects Activity (IARPA), via contract # FA8650-
17-C-9117. The views and conclusions contained
herein are those of the authors and should not be
interpreted as necessarily representing the ofﬁcial
policies, either expressed or implied, of ODNI,
IARPA, or the U.S. Government. The U.S. Gov-

ernment is authorized to reproduce and distribute
reprints for governmental purposes notwithstand-
ing any copyright annotation therein.

References

Sanjeev Arora, Yingyu Liang, and Tengyu Ma. 2016.
A simple but tough-to-beat baseline for sentence em-
beddings.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Taylor Berg-Kirkpatrick, Dan Gillick, and Dan Klein.
2011. Jointly learning to extract and compress. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies-Volume 1, pages 481–490. As-
sociation for Computational Linguistics.

Ronald Brandow, Karl Mitze, and Lisa Rau. 1999.
Automatic condensation of electronic publications
by sentence selection.
In Jan Fagerberg, David C.
Mowery, and Richard R. Nelson, editors, Advances
in Automatic Text Summarization, chapter 19, pages
293–303. MIT Press, Oxford.

Jean Carletta, Simone Ashby, Sebastien Bourban, Mike
Flynn, Mael Guillemot, Thomas Hain, Jaroslav
Kadlec, Vasilis Karaiskos, Wessel Kraaij, Melissa
Kronenthal, et al. 2005. The ami meeting corpus:
In International Workshop
A pre-announcement.
on Machine Learning for Multimodal Interaction,
pages 28–39. Springer.

Jianpeng Cheng and Mirella Lapata. 2016. Neural
summarization by extracting sentences and words.
arXiv preprint arXiv:1603.07252.

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555.

John M Conroy and Dianne P O’Leary. 2001. Text
summarization via hidden markov models. In Pro-
ceedings of the 24th annual international ACM SI-
GIR conference on Research and development in in-
formation retrieval, pages 406–407. ACM.

Michael Denkowski and Alon Lavie. 2014. Meteor
universal: Language speciﬁc translation evaluation
for any target language. In Proceedings of the EACL
2014 Workshop on Statistical Machine Translation.

Greg Durrett, Taylor Berg-Kirkpatrick, and Dan Klein.
2016. Learning-based single-document summariza-
tion with compression and anaphoricity constraints.
arXiv preprint arXiv:1603.08887.

Noemie Elhadad, M-Y Kan, Judith L Klavans, and
KR McKeown. 2005. Customization in a uniﬁed

framework for summarizing medical literature. Ar-
tiﬁcial intelligence in medicine, 33(2):179–198.

Michel Galley. 2006. A skip-chain conditional ran-
dom ﬁeld for ranking meeting utterances by impor-
In Proceedings of the 2006 Conference on
tance.
Empirical Methods in Natural Language Process-
ing, pages 364–372. Association for Computational
Linguistics.

Albert Gatt and Emiel Krahmer. 2018. Survey of the
state of the art in natural language generation: Core
tasks, applications and evaluation. Journal of Artiﬁ-
cial Intelligence Research, 61:65–170.

Dan Gillick, Korbinian Riedhammer, Benoit Favre, and
Dilek Hakkani-Tur. 2009. A global optimization
In Acous-
framework for meeting summarization.
tics, Speech and Signal Processing, 2009. ICASSP
2009. IEEE International Conference on, pages
4769–4772. IEEE.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neu-
In Proceedings of the thirteenth in-
ral networks.
ternational conference on artiﬁcial intelligence and
statistics, pages 249–256.

Karl Moritz Hermann, Tom´aˇs Koˇcisk´y, Edward
Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su-
leyman, and Phil Blunsom. 2015. Teaching ma-
chines to read and comprehend. In Advances in Neu-
ral Information Processing Systems (NIPS).

Kai Hong and Ani Nenkova. 2014.

Improving the
estimation of word importance for news multi-
In Proceedings of the
document summarization.
14th Conference of the European Chapter of the As-
sociation for Computational Linguistics, pages 712–
721.

Mohit Iyyer, Varun Manjunatha, Jordan Boyd-Graber,
and Hal Daum´e III. 2015. Deep unordered com-
position rivals syntactic methods for text classiﬁca-
tion. In Proceedings of the 53rd Annual Meeting of
the Association for Computational Linguistics and
the 7th International Joint Conference on Natural
Language Processing (Volume 1: Long Papers), vol-
ume 1, pages 1681–1691.

Kokil Jaidka, Muthu Kumar Chandrasekaran, Sajal
Insights from
the faceted scientiﬁc document
International Journal

Rustagi, and Min-Yen Kan. 2017.
cl-scisumm 2016:
summarization shared task.
on Digital Libraries, pages 1–9.

Yoon Kim. 2014.

works for sentence classiﬁcation.
arXiv:1408.5882.

Convolutional neural net-
arXiv preprint

Julian Kupiec, Jan Pedersen, and Francine Chen. 1995.
A trainable document summarizer. In Proceedings
of the 18th annual international ACM SIGIR confer-
ence on Research and development in information
retrieval, pages 68–73. ACM.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. Text Summarization
Branches Out.

Rashmi Mishra,

Jiantao Bian, Marcelo Fiszman,
Charlene R Weir, Siddhartha Jonnalagadda, Javed
Mostafa, and Guilherme Del Fiol. 2014. Text sum-
marization in the biomedical domain: a systematic
review of recent research. Journal of biomedical in-
formatics, 52:457–467.

Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017.
Summarunner: A recurrent neural network based se-
quence model for extractive summarization of docu-
ments. In AAAI, pages 3075–3081.

Ani Nenkova. 2005. Automatic text summarization of
newswire: Lessons learned from the document un-
derstanding conference. In AAAI, volume 5, pages
1436–1441.

Jessica Ouyang, Serina Chang, and Kathy McKeown.
2017. Crowd-sourced iterative annotation for narra-
tive summarization corpora. In Proceedings of the
15th Conference of the European Chapter of the As-
sociation for Computational Linguistics: Volume 2,
Short Papers, volume 2, pages 46–51.

Paul Over and Walter Liggett. 2002.

duc:
news

to
generic

An
duction
text
of
Proc. DUC.
tems.
gov/projects/duc/guidelines/2002. html.

intrinsic
summarization
http://wwwnlpir.

Intro-
evaluation
sys-
nist.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
representation. In Proceedings of the 2014 confer-
ence on empirical methods in natural language pro-
cessing (EMNLP), pages 1532–1543.

Stefan Riezler and John T Maxwell. 2005. On some
pitfalls in automatic evaluation and signiﬁcance test-
ing for mt. In Proceedings of the ACL workshop on
intrinsic and extrinsic evaluation measures for ma-
chine translation and/or summarization, pages 57–
64.

Evan Sandhaus. 2008. The new york times annotated
corpus. Linguistic Data Consortium, Philadelphia,
6(12):e26752.

Abigail See, Peter J Liu, and Christopher D Man-
to the point: Summarization
arXiv preprint

ning. 2017. Get
with pointer-generator networks.
arXiv:1704.04368.

Diederik P Kingma and Jimmy Ba. 2014. Adam: A
method for stochastic optimization. arXiv preprint
arXiv:1412.6980.

Ruben Sipos, Pannaga Shivaswamy, and Thorsten
Joachims. 2012. Large-margin learning of submod-
ular summarization models. In Proceedings of the

13th Conference of the European Chapter of the As-
sociation for Computational Linguistics, pages 224–
233. Association for Computational Linguistics.

John Wieting, Mohit Bansal, Kevin Gimpel, and
Towards universal para-
arXiv preprint

Karen Livescu. 2015.
phrastic sentence embeddings.
arXiv:1511.08198.

John Wieting and Kevin Gimpel. 2017. Revisiting re-
current networks for paraphrastic sentence embed-
dings. arXiv preprint arXiv:1705.00364.

Michihiro Yasunaga, Rui Zhang, Kshitijh Meelu,
Ayush Pareek, Krishnan Srinivasan, and Dragomir
Radev. 2017. Graph-based neural multi-document
summarization. arXiv preprint arXiv:1706.06681.

Supplementary Material For:
Content Selection in Deep Learning Models of Summarization

A Details on Sentence Encoders

We use 200 dimenional word embeddings wi in all models. Dropout is applied to the embeddings during
training. Wherever dropout is applied, the drop probability is .25.

A.1 Details on RNN Encoder

Under the RNN encoder, a sentence embedding is deﬁned as h = [−→h |s|; ←−h 1] where

−→h 0 = 0; −→h i = −−−→GRU(wi, −→h i−1)

←−h |s|+1 = 0; ←−h i = ←−−−GRU(wi, ←−h i+1),

and −−−→GRU amd ←−−−GRU indicate the forward and backward GRUs respectively, each with separate parame-
ters. We use 300 dimensional hidden layers for each GRU. Dropout is applied to GRU during training.

A.2 Details on CNN Encoder

N of the convolutional
the number of words associated with each convolution) and the number of feature maps
N associated with each ﬁlter (i.e. the output dimension of each convolution). The CNN sentence

The CNN encoder has hyperparameters associated with the window sizes K
ﬁlters (i.e.
Mk
embedding h is computed as follows:

⊂

∈

(m,k)
a
i

= b(m,k) +

W

(m,k)
j

wi+j−1

k
(cid:88)

j=1

·
(cid:16)

ReLU

(cid:17)

(m,k)
a
i

h(m,k) =

max
i∈1,...,|s|−k+1
(cid:104)

h(m,k)

m

h =

|

∈ {

1, . . . , Mk

, k
}

∈

K

(cid:105)

∈ R

and W (m,k)

where b(m,k)
ReLU(x) = max(0, x) is the rectiﬁed linear unit activation. We use window sizes K =
1, 2, 3, 4, 5, 6
}
{
with corresponding feature maps sizes M1 = 25, M2 = 25, M3 = 50, M4 = 50, M5 = 50, M6 = 50,
giving h a dimensionality of 250. Dropout is applied to the CNN output during training.

are learned bias and ﬁlter weight parameters respectively, and

∈ R

k×n(cid:48)

B Details on Sentence Extractors

B.1 Details on RNN Extractor

−→z 0 = 0; −→z i = −−−→GRU(hi, −→z i−1)
←−z n+1 = 0; ←−z i = ←−−−GRU(hi, ←−z i+1)
ai = ReLU (U
h) = σ (V
p(yi = 1
|

·
ai + v)

·

[−→z i; ←−z i] + u)

where −−−→GRU and ←−−−GRU indicate the forward and backward GRUs respectively, and each have separate
learned parameters; U, V and u, v are learned weight and bias parameters. The hidden layer size of the
GRU is 300 for each direction and the MLP hidden layer size is 100. Dropout is applied to the GRUs
and to ai.

(1)

(2)

(3)

(4)

(5)

(6)

(7)

(8)

(9)

B.2 Details on Seq2Seq Extrator

−→z 0 = 0; −→z i = −−−→GRUenc(hi, −→z i−1)
←−z n+1 = 0; ←−z i = ←−−−GRUenc(hi, ←−z i+1)
−→q i = −−−→GRUdec(hi, −→q i−1)
←−q i = ←−−−GRUdec(hi, ←−q i+1)

qi = [−→q i; ←−q i], zi = [−→z i; ←−z i]

αi,j =

zj)

exp (qi
j=1 exp (qi

·

(cid:80)n

zj)

·

, ¯zi =

αi,jzj

n
(cid:88)

j=1

ai = ReLU (U

h) = σ (V
p(yi = 1
|

·

·

[¯zi; qi] + u)
ai + v) .

z0 = 0;

zi = GRUenc(hi, zi−1)

q1 = GRUdec(h∗, zn)
qi = GRUdec(pi−1
ai = ReLU (U

·

pi = p(yi = 1
|

[zi; qi] + u)

·

y<i, h) = σ (V

ai + v)

·

hi−1, qi−1)

The ﬁnal outputs of each encoder direction are passed to the ﬁrst decoder steps; additionally, the ﬁrst step
of the decoder GRUs are learned “begin decoding” vectors −→q 0 and ←−q 0 (see Figure 1.b). Each GRU has
separate learned parameters; U, V and u, v are learned weight and bias parameters. The hidden layer size
of the GRU is 300 for each direction and MLP hidden layer size is 100. Dropout with drop probability
.25 is applied to the GRU outputs and to ai.

B.3 Details on Cheng & Lapata Extractor.

The basic architecture is a unidirectional sequence-to-sequence model deﬁned as follows:

where h∗ is a learned “begin decoding” sentence embedding (see Figure 1.c). Each GRU has separate
learned parameters; U, V and u, v are learned weight and bias parameters. Note in Equation 20 that
the decoder side GRU input is the sentence embedding from the previous time step weighted by its
probabilitiy of extraction (pi−1) from the previous step, inducing dependence of each output yi on all
previous outputs y<i. The hidden layer size of the GRU is 300 and the MLP hidden layer size is 100.
Dropout with drop probability .25 is applied to the GRU outputs and to ai.

Note that in the original paper, the Cheng & Lapata extractor was paired with a CNN sentence encoder,

but in this work we experiment with a variety of sentence encoders.

B.4 Details on SummaRunner Extractor.

Like the RNN extractor it starts with a bidrectional GRU over the sentence embeddings

−→z 0 = 0; −→z i = −−−→GRU(hi, −→z i−1)
←−z n+1 = 0; ←−z i = ←−−−GRU(hi, ←−z i+1),
It then creates a representation of the whole document q by passing the averaged GRU output states

(23)

(24)

through a fully connected layer:

(cid:32)

(cid:33)

q = tanh

bq + Wq

[−→z i; ←−z i]

1
n

n
(cid:88)

i=1

(10)

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

(20)

(21)

(22)

(25)

A concatentation of the GRU outputs at each step are passed through a separate fully connected layer to
create a sentence representation zi, where

zi = ReLU (bz + Wz[−→z i; ←−z i]) .

The extraction probability is then determined by contributions from ﬁve sources:

(con)
content a
i
(sal)
salience a
i
(nov)
novelty a
i
(pos)
position a
i
(qrt)
quartile a
i

= W (con)zi,
i W (sal)q,
= zT
i W (nov) tanh(gi),
zT
=
= W (pos)li,
= W (qrt)ri,

−

i−1
(cid:88)

j=1

gi =

p(yj = 1
|

y<j, h)

zj.

·

where li and ri are embeddings associated with the i-th sentence position and the quarter of the document
containing sentence i respectively. In Equation 29, gi is an iterative summary representation computed
as the sum of the previous z<i weighted by their extraction probabilities,

Note that the presence of this term induces dependence of each yi to all y<i similarly to the Cheng &
Lapata extractor.

The ﬁnal extraction probability is the logistic sigmoid of the sum of these terms plus a bias,

y<i, h) = σ
p(yi = 1
|

(cid:32)

(con)
a
i
(pos)
+a
i

+ a

(sal)
i
(qrt)
+ a
i

(nov)
+ a
i
+ b

(cid:33)

.

The weight matrices Wq, Wz, W (con), W (sal), W (nov), W (pos), W (qrt) and bias terms bq, bz, and b are
learned parameters; The GRUs have separate learned parameters. The hidden layer size of the GRU is
300 for each direction zi, q, and gi have 100 dimensions. The position and quartile embeddings are 16
dimensional each. Dropout with drop probability .25 is applied to the GRU outputs and to zi.

Note that in the original paper, the SummaRunner extractor was paired with an RNN sentence encoder,

but in this work we experiment with a variety of sentence encoders.

(26)

(27)

(28)

(29)

(30)

(31)

(32)

(33)

C Ground Truth Extract Summary Algorithm

Algorithm 1: ORACLEEXTRACTSUMMARYLABELS
Data: input document sentences s1, s2, . . . , sn,

human reference summary R,
summary word budget c.
1, . . . , n

s∈S WORDCOUNT(s)

c do

≤

i
∀

∈

1 yi := 0
2 S := [ ]
3 while (cid:80)

4

5

6

7

8

9

10

11

12

ˆi = arg maxi∈{1,...,n},

ROUGE(S + [si], R)

yi(cid:54)=1

if ROUGE(S + [sˆi], R) > ROUGE(S, R) then

S := S + [sˆi]
yˆi := 1

else

break

Result: extract summary labels y1, . . . , yn

D Optimizer and initialization settings.

// Initialize extract labels to be 0.

// Initialize summary as empty list.
// While summary word count ≤ word budget.

/* Add the next best sentence to the summary if it will improve the ROUGE
score otherwise no improvement can be made so break.

*/

// Add sˆi to the summary sentence list.
// Set the ˆi-th extract label to indicate extraction.

−

∇

5 <

We use a learning rate of .0001 and a dropout rate of .25 for all dropout layers. We also employ gradient
clipping (
θ < 5). Weight matrix parameters are initialized using Xavier initialization with the
normal distribution (Glorot and Bengio, 2010) and bias terms are set to 0. We use a batch size of 32 for
all datasets except AMI and PubMed, which are often longer and consume more memory, for which we
use sizes two and four respectively. For the Cheng & Lapata model, we train for half of the maximum
epochs with teacher forcing, i.e. we set pi = 1 if yi = 1 in the gold data and 0 otherwise when computing
the decoder input pi

hi; we revert to the predicted model probability during the second half training.

·

