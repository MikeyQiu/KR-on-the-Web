Reducing Complexity of HEVC: A Deep Learning
Approach

Mai Xu, Senior Member, IEEE, Tianyi Li, Zulin Wang, Xin Deng, Ren Yang and Zhenyu Guan

1

8
1
0
2
 
r
a

M
 
2
2
 
 
]

V
C
.
s
c
[
 
 
3
v
8
1
2
1
0
.
0
1
7
1
:
v
i
X
r
a

Abstract—High Efﬁciency Video Coding (HEVC) signiﬁcantly
reduces bit-rates over the preceding H.264 standard but at
the expense of extremely high encoding complexity. In HEVC,
the quad-tree partition of coding unit (CU) consumes a large
proportion of the HEVC encoding complexity, due to the brute-
force search for rate-distortion optimization (RDO). Therefore,
this paper proposes a deep learning approach to predict the
CU partition for reducing the HEVC complexity at both intra-
and inter-modes, which is based on convolutional neural network
(CNN) and long- and short-term memory (LSTM) network. First,
we establish a large-scale database including substantial CU
partition data for HEVC intra- and inter-modes. This enables
deep learning on the CU partition. Second, we represent the CU
partition of an entire coding tree unit (CTU) in the form of a
hierarchical CU partition map (HCPM). Then, we propose an
early-terminated hierarchical CNN (ETH-CNN) for learning to
predict the HCPM. Consequently, the encoding complexity of
intra-mode HEVC can be drastically reduced by replacing the
brute-force search with ETH-CNN to decide the CU partition.
Third, an early-terminated hierarchical LSTM (ETH-LSTM) is
proposed to learn the temporal correlation of the CU partition.
Then, we combine ETH-LSTM and ETH-CNN to predict the
CU partition for reducing the HEVC complexity at inter-mode.
Finally, experimental results show that our approach outper-
forms other state-of-the-art approaches in reducing the HEVC
complexity at both intra- and inter-modes.

Index Terms—High efﬁciency video coding, complexity reduc-
long- and

tion, deep learning, convolutional neural network,
short-term memory network.

I. INTRODUCTION

The High Efﬁciency Video Coding (HEVC) standard [1]
saves approximately 50% of the bit-rate at similar video
quality compared to its predecessor, H.264/Advanced Video
Coding (AVC). This is achieved by adopting some advanced
video coding techniques, e.g., the quad-tree structure of the
coding unit (CU) partition. However, these techniques lead
to extremely high complexity of HEVC. As investigated by
[2], the encoding time of HEVC is higher than H.264/AVC
by 253% on average, making it impractical for implementa-
tion in multimedia applications. Therefore, it is necessary to
signiﬁcantly reduce the encoding complexity of HEVC with
ignorable loss in rate-distortion (RD) performance.

The past half decade has witnessed a great number of
approaches on encoding complexity reduction for HEVC. It is
found that the recursive process of the quad-tree CU partition
contributes to the largest proportion of the encoding time (at

M. Xu, T. Li, Z. Wang, R. Yang and Z. Guan are with the School of
Electronic and Information Engineering, Beihang University, Beijing, 100191
China. X. Deng is with Department of Department of Electrical and Electronic
Engineering, Imperial College London, SW7 2AZ, UK. This work was
supported by NSFC under grant number 61573037.

least 80% in the reference software HM [3]). Thus, most
HEVC complexity reduction approaches attempt to simplify
the process of the CU partition. The basic idea of these
approaches is to predict the CU partition in advance, instead
of the brute-force recursive RD optimization (RDO) search.
The early works for predicting the CU partition are heuristic
approaches such as in [4]–[6]. These heuristic approaches
explore some intermediate features to early determine the CU
partition before checking all possible quad-tree patterns. Since
2015, several machine learning approaches [7]–[11] have been
proposed to predict the CU partition toward HEVC complexity
reduction. For example, to reduce the complexity of inter-
mode HEVC, Zhang etal. [8] proposed a CU depth decision
approach with a three-level joint classiﬁer based on support
vector machine (SVM), which predicts the splitting of three-
sized CUs in the CU partition. To reduce the complexity of
intra-mode HEVC, Liu et al. [9] developed a convolutional
neural network (CNN) based approach that predicts the CU
partition. However, the structure of the CNN in [9] is shallow,
with limited learning capacity, and thus, it is insufﬁcient to
accurately model the complicated CU partition process. In this
paper, we propose a deep CNN structure for learning to predict
the intra-mode CU partition, thus reducing the complexity
of HEVC at intra-mode. In addition, all existing approaches,
including [8] and [9], do not explore the correlation of the
CU partition across neighboring frames. This paper develops
a long- and short-term memory (LSTM) structure to learn the
temporal dependency of the inter-mode CU partition. Then, a
deep learning approach is proposed to predict the CU partition
at inter-mode, which combines the CNN and LSTM structures.
Consequently, the encoding complexity of inter-mode HEVC
can be signiﬁcantly reduced.

Speciﬁcally, in this paper, we ﬁrst establish a large-scale
database for the CU partition, boosting studies on deep learn-
ing based complexity reduction in HEVC. Our database is
available online: https://github.com/HEVC-Projects/CPH. Our
database contains the data of the CU partition at both intra-
mode (2000 raw images compressed at four QPs) and inter-
mode (111 raw sequences compressed at four QPs). Next, we
propose a deep learning based complexity reduction approach
for both intra- and inter-mode encoding of HEVC, which
learns from our database to split an entire coding tree unit
(CTU). More speciﬁcally, we propose to efﬁciently represent
the CU partition of a CTU through the hierarchical CU
partition map (HCPM). Given sufﬁcient training data and
efﬁcient HCPM representation, the deep learning structures
of our approach are able to “go deeper”, such that extensive
parameters can be learned for exploring diverse patterns of

2

the CU partition. Accordingly, our deep learning approach
introduces an early-terminated hierarchical CNN (ETH-CNN)
structure, which hierarchically generates the structured HCPM
with an early-termination mechanism. The early-termination
mechanism introduced in ETH-CNN can save computational
time when running the CNN. ETH-CNN can be used to
reduce the encoding complexity of intra-mode HEVC. Our
approach further introduces an early-terminated hierarchical
LSTM (ETH-LSTM) structure for inter-mode HEVC. In ETH-
LSTM, the temporal correlation of the CU partition is learned
in LSTM cells. With the features of the ETH-CNN as the
input, ETH-LSTM hierarchically outputs HCPM by incor-
porating the learnt LSTM cells with the early-termination
mechanism. As such, our approach can also be used to reduce
the encoding complexity of inter-mode HEVC.

This paper was previously presented at the conference [12],
with the following extensions. Rather than the three-level CU
splitting labels of [12], HCPM is proposed in this paper
to hierarchically represent the structured output of the CU
partition. Based on the proposed HCPM representation, we
advance the deep CNN structure of [12] by introducing the
early-termination mechanism, for intra-mode HEVC complex-
ity reduction. More importantly, this paper further proposes
ETH-LSTM to reduce the HEVC complexity at inter-mode.
In contrast, our previous work [12] only addresses complexity
reduction in intra-mode HEVC. For learning ETH-LSTM, a
large-scale database of inter-mode CU partition is established
in this paper, whereas [12] only contains the database of intra-
mode CU partition. In brief, the main contributions of this
paper are summarized as follows.

• We establish a large-scale database for the CU partition
of HEVC at both intra- and inter-modes, which may
facilitate the applications of deep learning in reducing
HEVC complexity.

• We propose a deep CNN structure called ETH-CNN to
predict the structured output of the CU partition in the
form of HCPM, for reducing the complexity of intra-
mode HEVC.

• We develop a deep LSTM structure named ETH-LSTM
learns the spatio-temporal correlation of the CU
that
partition, for reducing the complexity of HEVC at inter-
mode.

This paper is organized as follows. Section II reviews the
related works on HEVC complexity reduction. Section III
presents the established CU partition database. In Sections IV
and V, we propose ETH-CNN and ETH-LSTM to reduce the
HEVC complexity at intra-mode and inter-mode, respectively.
Section VI reports the experimental results, and Section VII
concludes this paper.

II. RELATED WORKS

The existing HEVC complexity reduction works can be
generally classiﬁed into two categories: heuristic and learning-
based approaches. This section reviews the complexity reduc-
tion approaches in these two categories.

In heuristic approaches, the brute-force RDO search of the
CU partition can be simpliﬁed according to some intermediate

features. The representative approaches include [4]–[6], [13],
[14]. To be more speciﬁc, Leng etal. [4] proposed a CU depth
decision approach at the frame level, which skips certain CU
depths rarely found in the previous frames. At the CU level,
Xiong etal. [5] and Kim etal. [14] proposed deciding whether
to split CUs based on the pyramid motion divergence and
the number of high-frequency key-points, respectively. Shen
etal. [6] proposed selecting some crucial and computational-
friendly features, e.g., RD cost and inter-mode prediction error,
to early determine the splitting of each CU. Then, the CU
splitting is determined based on the rule of minimizing the
Bayesian risk. Also based on the Bayesian rule, Cho etal. [13]
developed a CU splitting and pruning approach according to
the features of full and low-complexity RD costs. In addition to
simpliﬁed the CU partition, various heuristic approaches [15]–
[18] were proposed to reduce the complexity of prediction unit
(PU) or transform unit (TU) partition. For example, Khan et
al. [15] proposed a fast PU size decision approach, which
adaptively integrates smaller PUs into larger PUs with regard
to video content. Yoo et al. [16] proposed estimating the PU
partition with the maximum probability, on account of the
coding block ﬂag (CBF) and RD costs of encoded PUs. In the
latest work of [18], the RDO quantization (RDOQ) process is
accelerated based on the transform coefﬁcients with a hybrid
Laplace distribution. In addition, other components of HEVC,
such as intra- and inter-mode prediction and in-loop ﬁltering,
are simpliﬁed to reduce the encoding complexity in [19]–[23].
Most recently, learning-based approaches [7]–[11], [24]–
[33] have ﬂourished for complexity reduction in HEVC. These
approaches utilize machine learning from extensive data to
generalize the rules of HEVC encoding components, instead of
a brute-force RDO search on these components. For example,
for intra-mode HEVC, [24] modeled the CU partition process
as a binary classiﬁcation problem with logistic regression, and
[25] proposed using SVM to perform classiﬁcation in the CU
partition process. As a result, the computational time of the
CU partition can be decreased using well-trained classiﬁcation
models instead of brute-force search. For inter-mode HEVC,
Corrˆea etal. [7] proposed three early termination schemes with
data mining techniques to simplify the decision on the optimal
CTU structures. In [8], several HEVC domain features that are
correlated with the CU partition were explored. Then, a joint
classiﬁer of SVM was proposed to utilize these features in
determining CU depths, such that the encoding complexity of
HEVC can be reduced because the brute-force RDO search is
skipped. Later, a binary and multi-class SVM algorithm [11]
was proposed to predict both the CU partition and PU mode
with an off-on-line machine learning mechanism. As such, the
encoding time of HEVC can be further saved. However, the
above learning-based approaches rely heavily on hand-crafted
features that are related to the CU partition.

For complexity reduction in HEVC, the CU partition-related
features can be automatically extracted by deep learning,
rather than manual extraction. The advantage of applying deep
learning for HEVC complexity reduction is that it can take
advantage of large-scale data to automatically mine extensive
features related to the CU partition, rather than the limited
hand-crafted features. Unfortunately, there are few deep learn-

ing works on the prediction of the CU partition. To the best of
our knowledge, the only approaches in this direction are [9],
[26], in which the CNN architectures have been developed
to predict intra-mode CU partition. The CNN architectures of
[9], [26] are not sufﬁciently deep due to a lack of training
data. For example, [9] only contains two convolutional layers
with 6 and 16 kernels sized 3 × 3. In contrast, we propose the
deep architectures of ETH-CNN and ETH-LSTM for HEVC
complexity reduction at both intra- and inter-modes.

Our approach differs from the above learning-based CU
partition prediction approaches in four aspects. (1) Compared
with the conventional three-level CU splitting labels as in [8],
[9], [11], [26], the HCPM is proposed to efﬁciently represent
the structured output of the CU partition. This can dramatically
reduce the computational time of the CU partition, since the
complete CU partition in a whole CTU can be obtained in
terms of one HCPM by running the trained ETH-CNN/ETH-
LSTM model only once. (2) A deep ETH-CNN structure is
designed to automatically extract features for predicting the
CU partition, instead of the handcrafted feature extraction in
[8], [11]. Besides, the deep ETH-CNN structure has much
more trainable parameters than the CNN structures of [9] and
[26], thus remarkably improving the prediction accuracy of the
CU partition. Additionally, the early-termination mechanism
proposed in our approach can further save computational time.
(3) A deep ETH-LSTM model is further developed for learning
long- and short-term dependencies of the CU partition across
frames for inter-mode HEVC. To our best knowledge, this is
a ﬁrst attempt to leverage LSTM for predicting CU partition
in HEVC complexity reduction. (4) To train the large amount
of parameters in ETH-CNN and ETH-LSTM, we establish a
large-scale database for the CU partition of HEVC at both
intra- and inter-modes. In contrast, other works only rely on
the existing JCT-VC database, much smaller than our database.
Our database may facilitate the future works of applying deep
learning in the CU partition prediction for reducing HEVC
complexity.

III. CU PARTITION DATABASE

A. Overview of CU Partition

The CTU partition structure

[1] is one of the major
contributions to the HEVC standard, with the CU partition
as the core process. The size of a CTU is 64×64 pixels by
default, and a CTU can either contain a single CU or be
recursively split into multiple smaller CUs, based on the quad-
tree structure. The minimum size of a CU is conﬁgured before
encoding, with the default being 8×8. Thus, the sizes of the
CUs in the CTU are diverse, ranging from 64×64 to 8×8. Note
that the maximal CTU sizes can be extended to be larger than
64×64, e.g., 128×128.

As we know,

the sizes of the CUs in each CTU are
determined using a brute-force RDO search, which includes a
top-down checking process and a bottom-up comparison pro-
cess. Fig. 1 illustrates the RD cost checking and comparison
between a parent CU and its sub-CUs. In the checking process,
the encoder checks the RD cost of the whole CTU, followed by
checking its sub-CUs, until reaching the minimum CU size.

3

Check RD cost of a parent CU

Do not split, if 

paR

(cid:116)(cid:166)
sub
R
m

pa

R

4

m

1
(cid:32)

paR

sub

1R

sub

2R

sub

3R

sub

4R

Split, if 

(cid:31)(cid:166)
sub
R
m

pa

R

4

m

1
(cid:32)

sub

1R

sub

2R

sub

3R

sub

4R

Check RD cost of each sub-CU
(a) checking process

(b) comparison process

paR

sub

mR

Parent CU

Sub-CU 
with index m

RD cost
checking

RD cost
comparison

Fig. 1. Illustration of checking and comparing RD cost between a parent CU
and its sub-CUs. Note that this illustration can be applied to the splitting of
64 × 64 → 32 × 32, 32 × 32 → 16 × 16 or 16 × 16 → 8 × 8.

In Fig. 1, the RD cost of a parent CU is denoted as Rpa,
and the RD costs of its sub-CUs are denoted as Rsub
m , where
m ∈ {1, 2, 3, 4} is the index of each sub-CU. Afterwards,
based on the RD costs of CUs and sub-CUs, the comparison
process is conducted to determine whether a parent CU should
m < Rpa, the
be split. As shown in Fig. 1 (b), if
parent CU needs to be split; otherwise, it is not split. Note
that the RD cost of the split ﬂag is also considered when
deciding whether to split the CU. After the full RDO search,
the CU partition with the minimum RD cost is selected.

4
m=1 Rsub

P

It is worth noting that the RDO search is extremely time-
consuming, mainly attributed to the recursive checking pro-
cess. In a 64×64 CTU, 85 possible CUs are checked, including
1, 4, 42 and 43 CUs with sizes of 64×64, 32×32, 16×16
and 8×8. To check the RD cost of each CU, the encoder
needs to execute pre-coding for the CU, in which the possible
prediction and transformation modes have to be encoded. More
importantly, the pre-coding has to be conducted for all 85
possible CUs in the standard HEVC, consuming the largest
proportion of the encoding time. However, in the ﬁnal CU
partition, only certain CUs are selected, from 1 (if the 64×64
CU is not split) to 64 (if the whole CTU is split into 8×8
CUs). Therefore, the pre-coding of 84 CUs (i.e., 85-1) at most
and 21 CUs (i.e., 85-64) at least can be avoided through the
accurate prediction of the CU partition.

B. Database Establishment for Intra-mode

In this section, we present our large-scale database for
the CU Partition of HEVC at Intra-mode: the CPH-Intra
database. To the best of our knowledge, our database is the
ﬁrst database on the CU partition patterns. To establish the
CPH-Intra database, 2000 images at resolution 4928×3264
were selected from the Raw Images Dataset (RAISE) [34].
These 2000 images were randomly divided into training (1700
images), validation (100 images) and test (200 images) sets.
Furthermore, each set was equally divided into four subsets:
one subset was with original resolution, and the other three
sets were down-sampled to 2880×1920, 1536×1024 and
768×512. As such, our CPH-Intra database contains images
at different resolutions. This ensures sufﬁcient and diverse
training data for learning to predict the CU partition.

Next, all images were encoded by the HEVC reference
software HM 16.5 [3]. Here, four QPs {22, 27, 32, 37} were
applied to encode at the All-Intra (AI) conﬁguration with the
ﬁle encoder intra main.cfg [35]. After encoding, the binary
labels indicating splitting (=1) and non-splitting (=0) can be
obtained for all CUs, and each CU with its corresponding
binary label is a sample in our database. Finally, there are
110,405,784 samples collected in the CPH-Intra database.
These samples are split into 12 sub-databases according to
their QP value and CU size, as reported in Table I-(a) of
the Supporting Document. As shown in this table, the total
percentage of split CUs (49.2%) is close to that of non-split
CUs (50.8%) over the whole database.

C. Database Establishment for Inter-mode

We further establish a database for the CU Partition of
HEVC at Inter-mode:
the CPH-Inter database. For estab-
lishing the CPH-Inter database, 111 raw video sequences
were selected, therein consisting of 6 sequences at 1080p
(1920×1080) from [36], 18 sequences of Classes A ∼ E
from the Joint Collaborative Team on Video Coding (JCT-VC)
standard test set [37], and 87 sequences from Xiph.org [38] at
different resolutions. As a result, our CPH-Inter database con-
tains video sequences at various resolutions: SIF (352×240),
CIF (352×288), NTSC (720×486), 4CIF (704×576), 240p
(416× 240), 480p (832×480), 720p (1280×720), 1080p,
WQXGA (2560×1600) and 4K (4096×2160). Note that the
NTSC sequences were cropped to 720×480 by removing the
bottom edges of the frames, considering that only resolutions
in multiples of 8×8 are supported. Moreover, if the durations
of the sequences are longer than 10 seconds, they were clipped
to be 10 seconds.

In our CPH-Inter database, all the above sequences were
divided into non-overlapping training (83 sequences), valida-
tion (10 sequences) and test (18 sequences) sets. For the test
set, all 18 sequences from the JCT-VC set [37] were selected.
Similar to the CPH-Intra database, all sequences in our CPH-
Inter database were encoded by HM 16.5 [3] at four QPs
{22, 27, 32, 37}. They were compressed with the Low Delay P
(LDP) (using encoder lowdelay P main.cfg), the Low Delay
B (LDB) (using encoder lowdelay main.cfg) and the Random
Access (RA) (using encoder randomaccess main.cfg) conﬁg-
urations, respectively. Consequently, 12 sub-databases were
obtained for each conﬁguration, corresponding to different
QPs and CU sizes. As reported in Table I-(b), -(c) and -(d) of
the Supporting Document, totally 307,831,288 samples were
collected for the LDP conﬁguration in our CPH-Inter database.
Besides, 275,163,224 and 232,095,164 samples were collected
in total in our database for the LDB and RA conﬁgurations,
respectively.

IV. COMPLEXITY REDUCTION FOR INTRA-MODE HEVC

A. Hierarchical CU Partition Map

According to the CU partition structure in HEVC, four
different CU sizes are supported by default, i.e., 64 × 64,
32×32, 16×16 and 8×8, corresponding to four CU depths, 0,
1, 2 and 3. Note that a CU of size ≥ 16×16 can be either split

Level  1

Level  2

UU

y
1(

(cid:32)U

) 1

y
1(

(cid:32)U

) 0

U1U1

U2U2
...

UU

U3U3
...
(cid:32)U
) 1

(

1

y
2

U4U4
...
(cid:32)U
1(

) 0

y
2

U1,1U1,1

U1,2U1,2

U1,3U1,3

...

U1,4U1,4

U1U1

Level  3

...
(cid:32)U
(
) 1

1,1

y
3

...

y
3

(cid:32)U
(

) 0

1,1

U1,1,1U1,1,1

U1,1,2U1,1,2

U1,1,3U1,1,3

U1,1,4U1,1,4

U1,1U1,1

Fig. 2.

Illustration of three-level CU classiﬁer.

4

UU
UUU

CU 64×64
CU 64×64
Depth 0
Depth 0

UiUi
UiUiUi
CU 32×32
CU 32×32
Depth 1
Depth 1

Ui,jUi,j
Ui,jUi,jUi,j

CU 16×16
CU 16×16
Depth 2
Depth 2

Ui,j,kUi,j,k
Ui,j,kUi,j,kUi,j,k

CU 8×8
CU 8×8
Depth 3
Depth 3

or not split. As illustrated in Fig. 2, the overall CU partition
can be regarded as a combination of binary labels {yl}3
l=1 at
three levels, where l ∈ {1, 2, 3} represents the level on which
the split decision is made. In particular, l = 1 indicates the
ﬁrst level, which determines whether to split a 64 × 64 CU
into 32×32 CUs. Similarly, l = 2 is the second level to decide
whether a 32 × 32 CU is split into 16 × 16 CUs, and l = 3 is
for 16 × 16 into 8 × 8.

i=1 denote whether {Ui}4

j=1. Similarly, the labels {y3(Ui,j)}4

Given a CTU, we assume that the CU of depth 0 is denoted
as U. For U, the ﬁrst-level label y1(U) indicates whether
U is split (= 1) or not (= 0). If U is split, its sub-CUs of
depth 1 are denoted as {Ui}4
i=1. Then, the second-level labels
{y2(Ui)}4
i=1 are split (= 1) or not (=
0). For each split Ui, its sub-CUs of depth 2 are represented
by {Ui,j}4
i,j=1 denote the
split labels of {Ui,j}4
i,j=1 at the third level, and for each split
Ui,j, its sub-CUs of depth 3 are {Ui,j,k}4
k=1. The subscripts
i, j, k ∈ {1, 2, 3, 4} are the indices of the sub-CUs split from
U, Ui and Ui,j , respectively. The above hierarchical labels for
the CU split are represented by the downward arrows in Fig.
2. The overall CU partition in a CTU is extremely complex,
due to the large number of possible pattern combinations. For
example, for a 64 × 64 U, if y1(U) = 1, it will be split into
four 32 × 32 CUs, i.e., {Ui}4
i=1. Since for each Ui there exist
1 + 24 = 17 splitting patterns in {Ui,j}4
j=1, the total number
of splitting patterns for U is 1 + 174 = 83522.

it

In HEVC, the labels {yl}3

l=1 are obtained with the time-
consuming RDO process, as mentioned in Section III-A.
They can be predicted at a much faster speed by machine
learning. However, due to the enormous patterns of the
CU partition (83,522 patterns, as discussed above),
is
intractable to predict the CU partition patterns by a simple
multi-class classiﬁcation in one step. Instead, the prediction
should be made step by step in a hierarchy to yield ˆy1(U),
{ˆy2(Ui)}4
i,j=1, which denote the predicted
y1(U), {y2(Ui)}4
i=1 and {y3(Ui,j )}4
i,j=1, respectively.
In typical machine learning based methods [8],

[9],
i=1 and
[24],
[25],
{ˆy3(Ui,j )}4
i,j=1 are predicted separately for CUs of size
64 × 64, 32 × 32 and 16 × 16. To determine the CU partition
for an entire CTU, the trained model needs to be invoked
multiple times, leading to repetitive computation overhead.

the binary labels ˆy1(U), {ˆy2(Ui)}4

i=1 and {ˆy3(Ui,j )}4

Level 1

Level 2

Level 3

Ground-truth
of HCPM 

y
1(

(cid:32)U

) 1

y

2

(cid:32)U

) 1

(

1

y

2

(cid:32)U

) 0

(

2

y

2

(cid:32)U

) 1

(

3

y

2

(cid:32)U

) 1

(

4

)

1,1

)

1,3

)

3,1

3

3

y U
(
= 1
y U
(
= 1
y U
(
= 1
y U
(
= 0

3

3

)

3,3

3

3

y U
(
= 1
y U
(
= 1
y U
(
= 0
y U
(
= 1

3

3

)

1,2

)

1,4

)

3,2

)

3,4

-

-

-

-

)

4,1

)

4,2

3

y U
(
= 1
y U
(
= 0

3

3

y U
(
= 0
y U
(
= 1

3

)

4,3

)

4,4

(a)

Feature

CU partition
for a CTU

 Prediction
from HCPM

y U
1(cid:214) (

)

y U
(cid:214) (
2

1

)

y U
(cid:214) (
2

2

)

y U
(cid:214) (
2

3

)

y U
(cid:214) (
2

4

)

y U
(cid:214) (
3

1,1

)

y U
(cid:214) (
3

1,2

)

y U
(cid:214) (
3

2,1

)

y U
(cid:214) (
3

)

2,2

y U
(cid:214) (
3

1,3

)

y U
(cid:214) (
3

1,4

)

y U
(cid:214) (
3

2,3

)

y U
(cid:214) (
3

)

2,4

y U
(cid:214) (
3

3,1

)

y U
(cid:214) (
3

3,2

)

y U
(cid:214) (
3

4,1

)

y U
(cid:214) (
3

)

4,2

y U
(cid:214) (
3

3,3

)

y U
(cid:214) (
3

3,4

)

y U
(cid:214) (
3

4,3

)

y U
(cid:214) (
3

)

4,4

(b)

Fig. 3. An example of HCPM. (a) The ground-truth of HCPM for CU
splitting. (b) Modeling HCPM for prediction the CU splitting.

To overcome such a drawback, we develop an HCPM to
efﬁciently represent CU splitting as the structured output of
machine learning, such that the training model is run only
once for predicting the partition of the whole CTU. This way,
the computational time of determining the CU partition can
be dramatically reduced. In addition, the encoding complexity
can be decreased remarkably by bypassing the redundant RD
cost checking in the conventional HEVC standard.

Fig. 3 shows an example of HCPM, which arranges the
in a
labels of the CU splitting as the structured output
hierarchy. Speciﬁcally, HCPM hierarchically contains 1 × 1,
2 × 2 and 4 × 4 binary labels at levels 1, 2 and 3, respectively,
corresponding to y1(U), {y2(Ui)}4
i,j=1 for
ground-truth and ˆy1(U), {ˆy2(Ui)}4
i,j=1 for
prediction, respectively. Note that when U or Ui is not split,
the corresponding sub-CUs {Ui}4
j=1 do not ex-
ist. Accordingly, the labels of {y2(Ui)}4
j=1
are set to be null, denoted as “-” in the HCPM.

i=1 and {y3(Ui,j )}4
i=1 and {ˆy3(Ui,j )}4

i=1 or {y3(Ui,j )}4

i=1 or {Ui,j}4

B. ETH-CNN Structure for Learning HCPM

Next, a deep ETH-CNN structure is developed to learn
HCPM for predicting the CU partition of intra-mode HEVC.
According to the mechanism of the CU partition, the ETH-
CNN structure is designed in Fig. 4. We can see from this ﬁg-
ure that ETH-CNN is fed with an entire CTU, denoted by U,
and is able to hierarchically generate three branches of struc-
tured output, representing all predictions ˆy1(U), {ˆy2(Ui)}4
i=1
and {ˆy3(Ui,j )}4
i,j=1 of HCPM at three levels. Note that the
input CTU is extracted from raw images or sequences in
YUV format, and only the Y channel is used in ETH-CNN
as this channel contains most visual information. In contrast
to the conventional CNN structure, the mechanism of early
termination is introduced in ETH-CNN, which may early
terminate the three fully connected layers at the second and
third branches. In addition to the three fully connected layers,
the ETH-CNN structure is composed of two preprocessing
layers, three convolutional layers, and one concatenating layer.
In the following, we brieﬂy present the details of these layers.
• Preprocessing layers. The raw CTU is preprocessed
by mean removal and down-sampling in three paral-
lel branches {Bl}3
l=1, corresponding to three levels of
HCPM. Fig. 4 denotes mean removal and down-sampling
by {Nl}3
l=1, respectively. For mean removal,
at each branch, the input CTUs are subtracted by the

l=1 and {Sl}3

5

TABLE I
CONFIGURATION OF PROPOSED ETH-CNN

C1−1
C1−2
C1−3
C2−1
C2−2
C2−3
C3−1
C3−2
C3−3
f1−1
f1−2
f1−3
f2−1
f2−2
f2−3
ˆy1(U)
4
{ˆy2(Ui)}
i=1
4
{ˆy3(Ui,j )}
i,j=1
Total

Size

16×16
32×32
64×64
4×4
8×8
16×16
2×2
4×4
8×8
2688
2688
2688
65
129
257
49
97
193
-

Number of
Parameters
256
256
256
1,536
1,536
1,536
3,072
3,072
3,072
172,032
344,064
688,128
3,120
12,384
49,344
49
388
3,088
1,287,189

Number of
Additions
3,840
15,360
61,440
4,608
18,432
73,728
2,304
9,216
36,864
171,968
343,936
687,872
3,072
12,288
49,152
48
384
3,072
1,497,584

Number of
Multiplications
4,096
16,384
65,536
6,144
24,576
98,304
3,072
12,288
49,152
172,032
344,064
688,128
3,120
12,384
49,344
49
388
3,088
1,552,149

• Convolutional

mean intensity values to reduce the variation of the input
CTU samples. Speciﬁcally, at branch B1, the mean value
of U is removed in accordance with the single output
of ˆy1(U) at the ﬁrst level of HCPM. At branch B2,
four CUs {Ui}4
i=1 are subtracted by their corresponding
mean values, matching the 2 × 2 output of {ˆy2(Ui)}4
i=1
at the second level of HCPM. Similarly, {Ui,j}4
i,j=1 at
B3 also remove the mean values in each CU for the
4 × 4 output {ˆy3(Ui,j )}4
i,j=1 at the third level of HCPM.
Next, because CTUs of smaller depths generally possess
a smooth texture, U and {Ui}4
i=1 at branches B1 and B2
are down-sampled to 16 × 16 and 32 × 32, respectively.
This way, the outputs of the three-layer convolutions at
branches B1 and B2 are with the same sizes of HCPM at
levels 1 and 2, i.e., 1 × 1 at level 1 and 2 × 2 at level 2.
layers. In each branch Bl, all prepro-
cessed data ﬂow through three convolutional layers. At
each convolutional layer, the kernel sizes are the same
across different branches. Speciﬁcally, the data are con-
voluted with 4 × 4 kernels (16 ﬁlters in total) at the
ﬁrst convolutional layer to extract the low-level features
{C1−l}3
l=1 for the CU partition. Recall that l denotes
the level of the CU partition. At the second and third
layers, feature maps are sequentially convoluted twice
with 2 × 2 kernels (24 ﬁlters for the second layer and 32
ﬁlters for the third layer) to generate features at a higher
level, denoted by {C2−l}3
l=1, respectively.
We set the strides of all the above convolutions equal
to the widths of the corresponding kernels for non-
overlap convolutions, in accordance with non-overlap CU
splitting.

l=1 and {C3−l}3

• Concatenating layer. All feature maps at three branches,
yielded from the second and third convolutional layers,
are concatenated together and then ﬂattened into a vector
a. As shown in Fig. 4, the vectorized features of the
concatenating layer are gathered from 6 sources of feature
maps in total, i.e., {C2−l}3
l=1, to obtain a
variety of both global and local features. With the whole

l=1 and {C3−l}3

6

Layer 1

Layer 2 Layer 3 Layer 4 Layer 5 Layer 6 Layer 7 Layer 8 Layer 9

N1  64×64

S1 16×16

C1-1 
4×4×16

C2-1 
2×2×24

C3-1 
1×1×32

4×4

2×2

2×2

a  (2688)

f1-1 (64)

f2-1 (48)

y U
1(cid:214) (

)

QP

QP

HCPM

Level 1

Original
CTU 64×64

Luminance
CTU 64×64

U

N2  64×64

S2  32×32

C1-2 
8×8×16

C2-2 
4×4×24

C3-2
2×2×32

4×4

2×2

2×2

N3  64×64

S3  64×64

C1-3
16×16×16

C2-3
8×8×24

C3-3
4×4×32

4×4

2×2

2×2

Normalize
globally

1(cid:506)

Normalize
in 32×32 

2(cid:506)

Normalize
in 16×16

3(cid:506)

f1-2 (128)

f2-2 (96)

y
(cid:214){ (
2

U

4
)}i
i
1
(cid:32)

QP

QP

(     )
(     )

Level 1
Level 1
Level 1
split
split
split

Level 2

f1-3 (256)

f2-3 (192)

y
(cid:214){ (
3

U

4
)}i j
i j
,
,

1
(cid:32)

QP

QP

(     )
(     )

Level 2
Level 2
Level 2
split
split
split

Level 3

1(cid:506)

2(cid:506)

3(cid:506)

Mean-removal Down-sampling

Convolution Convolution Convolution

Concatenation

Full
Connection

Full
Connection

Full
Connection

Preprocessing

Fig. 4. Structure of ETH-CNN. For preprocessing and convolution, the size of the output at each layer is shown in black font, and the blue font indicates
the kernel size for convolution. At concatenation and fully connected layers, the number inside each bracket represents the vector length.

concatenating vector, features generated from the whole
CTU are all considered in the following fully connected
layers, rather than those only from the CUs in one branch,
to predict the CU partition of HCPM at each single level.
• Fully connected layers. Next, all features in the concate-
nated vector are processed in three branches {Bl}3
l=1,
also corresponding to three levels of HCPM. In each
branch, the vectorized features of the concatenating layer
pass through three fully connected layers, including two
hidden layers and one output layer. The two hidden fully
connected layers successively generate feature vectors
{f1−l}3
l=1, and the output layer produces HCPM as the
output of ETH-CNN. The numbers of features at these
layers vary with respect to l, so that the outputs have
1, 4 and 16 elements in B1, B2 and B3, serving as
the predicted binary labels of HCPM at the three levels
shown in Fig. 3 (b), i.e., ˆy1(U) in 1 × 1, {ˆy2(Ui)}4
i=1 in
2 × 2 and {ˆy3(Ui,j )}4
i,j=1 in 4 × 4. Moreover, QP also
has a signiﬁcant inﬂuence on the CU partition. As QP
decreases, more CUs tend to be split, and vice versa.
Therefore, QP is supplemented as an external feature
in the feature vectors {f1−l}3
l=1 for the full connection,
enabling ETH-CNN to be adaptive to various QPs in
predicting HCPM. In ETH-CNN, the early termination
may result in the calculation of the fully connected layers
at levels 2 and 3 being skipped, thus saving computation
time. Speciﬁcally, if U is decided not to be split at
i=1 of HCPM is
level 1,
terminated early at level 2. If {Ui}4
i=1 are all not split, the
{ˆy3(Ui,j , t)}4
i,j=1 at level 3 do not need to be calculated
for the early termination.

the calculation of {ˆy2(Ui)}4

• Other layers. During the training phase, after the ﬁrst
and second fully connected layers, features are randomly
dropped out [39] with probabilities of 50% and 20%,
respectively. It is worth mentioning that all convolutional
layers and hidden fully connected layers are activated
with rectiﬁed linear units (ReLU) [40]. Moreover, all the
output layers in {Bl}3
l=1 are activated with the sigmoid
function, since all the labels in HCPM are binary.
The speciﬁc conﬁguration of the ETH-CNN structure is pre-

sented in Table I, which lists the numbers of trainable param-
eters for obtaining different feature maps and vectors. We can
see from this table that there are in total 1,287,189 trainable
parameters for ETH-CNN. Thus,
the ETH-CNN structure
provides a much higher learning capacity, in comparison to
the only 1,224 trainable parameters in [9], which may cause
under-ﬁtting issues. Such abundant trainable parameters also
beneﬁt from the extensive training samples of our CPH-Intra
database (see Table I-(a) of the Supporting Document for the
number of training samples). Another major merit is that all
structured labels of HCPM are learned in the ETH-CNN model
with shared parameters, to predict y1(U), {y2(Ui)}4
i=1 and
{y3(Ui,j )}4
i,j=1. This design efﬁciently reduces the overall
computational complexity for predicting the CU partition,
compared with conventional learning-based approaches [8],
[9], [24], [25] that sequentially predict splitting labels from
64 × 64 CU partition to 16 × 16 CU partition.

C. Loss function for training ETH-CNN model

Given the above ETH-CNN structure, we concentrate on
the loss function for training the ETH-CNN model, which
is used to predict HCPM. Assume that there are R training
samples, the HCPM labels of which are {yr
i=1
and {yr
r=1. For each sample, the loss function
Lr sums the cross-entropy over all valid elements of HCPM
as follows:

1(U), {yr

3(Ui,j )}4

2(Ui)}4

i,j=1}R

Lr = H(yr

1(U), ˆyr

1(U)) +

H(yr

2(Ui), ˆyr

2(Ui))

Xi∈{1,2,3,4}
yr
2 (Ui)6=null
3(Ui,j ), ˆyr

3(Ui,j )),

H(yr

(1)

+

Xi,j∈{1,2,3,4}
yr
3 (Ui,j )6=null

i,j=1}R

2(Ui)}4

3(Ui,j )}4

1(U), {ˆyr

where {ˆyr
i=1 and {ˆyr
r=1 are the
labels of HCPM predicted by ETH-CNN. In (1), H(·, ·) de-
notes the cross-entropy between the ground-truth and predicted
labels. Considering that some ground-truth labels in HCPM do
not exist (such as {y3(U2,j)}4
j=1 in Fig. 3), only valid labels
with yr
3(Ui,j ) 6= null are counted in the
loss of (1).

2(Ui) 6= null and yr

7

109 frame

110 frame

113 frame

117 frame

121 frame

128 frame

129 frame

132 frame

136 frame

140 frame

(cid:857)

(cid:857)

(cid:857)

(cid:857)

(cid:857)

(cid:857)

Fig. 5. Two examples illustrating temporal CU partition correlation. Red patches represent CUs of the same depths as in the reference frame.

173 frame

177 frame

181 frame

169 frame

170 frame

Then, the ETH-CNN model can be trained by optimizing

(cid:857)

the loss function over all training samples:

L =

Lr.

1
R

R

Xr=1

(2)

Because the loss function of (1) and (2) is the sum of the
cross-entropies, the stochastic gradient descent algorithm with
momentum is applied to train the ETH-CNN model. Finally,
the trained ETH-CNN model can be used to predict the CU
partition of HEVC in the form of HCPM.

D. Bi-threshold Decision Scheme

Given an input CTU, ETH-CNN yields the probabilities for
the binary labels of ˆy1(U), ˆy2(Ui) and ˆy3(Ui,j ), to predict
the CU partition. Let P1(U), P2(Ui) and P3(Ui,j ) denote the
probabilities of ˆy1(U) = 1, ˆy2(Ui) = 1 and ˆy3(Ui,j ) = 1.
Typically, one decision threshold αl (= 0.5 in this paper) is set
for each level l of HCPM. Speciﬁcally, a CU with P1(U) > α1
is decided as being split into four CUs {Ui}4
i=1; otherwise,
it is not split. Similarly, P2(Ui) > α2 and P3(Ui,j ) > α3
make a positive decision on the splitting of Ui and Ui,j . This
remarkably reduces the encoding complexity by avoiding all
redundant RD cost comparison.

On the other hand, a false prediction of y1(U), y2(Ui)
or y3(Ui,j ) leads to RD degradation, as the optimal RD
performance is not achieved. To ameliorate this issue, we adopt
a bi-threshold CU decision scheme [11]. For each level of
HCPM, a splitting threshold αl and a non-splitting threshold
¯αl are set ( ¯αl ≤ αl). Then, the false prediction rate of the
ground-truth labels is reduced by introducing an uncertain
zone [¯αl, αl], where a parent CU (e.g., U, Ui or Ui,j) and
its four sub-CUs are all checked with the RD cost. Generally
speaking, if the uncertain zone becomes wider, more CUs tend
to be checked, such that the encoding complexity is increased
with decreased misclassiﬁcation of the CU splitting. Therefore,
a trade-off between RD performance and encoding complexity
can be achieved through the bi-threshold of [¯αl, αl].

The optimal thresholds of the uncertain zone [¯αl, αl] can

be obtained by traversing the combinations of {[¯αl, αl]}3
l=1
to reduce the encoding complexity as much as possible at
the constraint of the RD degradation. However, in practice,
both complexity reduction and RD degradation vary in a

(cid:857)

(cid:857)

large extent because of different encoding requirements and
diverse video contents. Thus, it is hard to ﬁnd one speciﬁc
threshold combination of {[¯αl, αl]}3
l=1 ﬁtting all encoding
requirements and video sequences. Instead, for the better
complexity-RD (CRD) performance, our bi-threshold scheme
follows [8] on account of the setting that the uncertain zones
of the CU partition at lower levels should be narrower. Similar
to [8], when the RD degradation is constrained in complexity
lower levels of the CU
reduction, the uncertain zones at
partition in our approach are supposed to be narrower, i.e.,
[¯α1, α1] ⊂ [¯α2, α2] ⊂ [¯α3, α3]. In addition,the upper and lower
thresholds of our bi-threshold scheme are set based on an
assumption that the upper and lower thresholds are symmetric
with regard to 0.5, i.e., ¯αl = 1 − αl for each level l. Note
that 0.5 is a widely used threshold for the conventional binary
classiﬁcation problems. Given this assumption, the settings
of thresholds can be simpliﬁed from six variables to three
variables for achieving the CRD trade-off. Moreover, this
assumption is reasonable, because the symmetry of the upper
and lower thresholds at 0.5 balances the prediction accuracy
for both split and non-split CUs.

E. Computational Complexity of ETH-CNN

In this section, we analyze the time complexity of ETH-
CNN via counting the number of ﬂoating-point operations,
including additions and multiplications. Note that all ﬂoating-
point operations in ETH-CNN are in single precision (32-bit).
The last two columns of Table I report the numbers of ﬂoating-
point operations for each layer of ETH-CNN and the total
number of ﬂoating-point operations required in ETH-CNN.
We can see that ETH-CNN performs a total of 3.05 × 106
ﬂoating-point operations, including 1,497,584 additions and
1,552,149 multiplications. ETH-CNN performs fewer ﬂoating-
point operations than Alex-Net (∼ 3 × 109 ﬂoating-point
operations) or VGG-Net (∼ 4×1010 ﬂoating-point operations)
by at least three orders of magnitude.

In Table I, early termination is not considered for counting
the total number of ﬂoating-point operations of ETH-CNN.
In practical compression, the early termination of ETH-CNN
can further reduce the time complexity. Here, we record the
average number of ﬂoating-point operations of ETH-CNN,
when compressing 18 standard JCT-VC sequences [37] at

i

t
n
e
c
i
f
f
e
o
C
 
n
o
i
t
a
e
r
r
o
C

l

i

t
n
e
c
i
f
f
e
o
C
 
n
o
i
t
a
e
r
r
o
C

l

t

i

n
e
c
i
f
f

e
o
C
n
o

 

i
t

l

a
e
r
r
o
C

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

QP=22, in 16*16
QP=27, in 16*16
QP=32, in 16*16
QP=37, in 16*16

QP=22, in 16*16
QP=27, in 16*16
QP=32, in 16*16
QP=37, in 16*16

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

QP=22, in 32*32
QP=27, in 32*32
QP=32, in 32*32
QP=37, in 32*32

QP=22, in 32*32
QP=27, in 32*32
QP=32, in 32*32
QP=37, in 32*32

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

QP=22, in 64*64
QP=27, in 64*64
QP=32, in 64*64
QP=37, in 64*64

QP=22, in 64*64
QP=27, in 64*64
QP=32, in 64*64
QP=37, in 64*64

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

1.6

1.4

1.2

1

0.8

0.6

0.4

1.8

1.6

1.4

1.2

1

0.8

0.6

0.4

2

1.8

1.6

1.4

1.2

1

0.8

0.6

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

Fig. 6. Temporal CU depth correlation versus distances of two frames for
inter-mode HEVC at four QP values. Left: Correlation coefﬁcient. Right:
Mean squared error.

intra-mode and QP = 32. We ﬁnd that 12.6% ﬂoating-point
operations can be saved due to the early termination mecha-
nism in ETH-CNN. Consequently, for compressing 1080p@30
Hz sequences, our approach requires ∼ 40.8 G single-precision
ﬂoating-point operations per second (FLOPS) for intra-mode
HEVC complexity reduction. The FLOPS of our approach
is far less than the computational capacity of an Intel(R)
Core(TM) i7-7700K CPU @4.2 GHz, which supports ∼
287.9 G double-precision FLOPS, as reported in [41]. In the
Supporting Document, time complexity of our approach on
ﬁeld programmable gate array (FPGA) implementation is also
analyzed. As analyzed, ETH-CNN only consumes less than 3
ms for one frame of 1080p sequences in the FPGA of Virtex
UltraScale+ VU13P.

V. COMPLEXITY REDUCTION FOR INTER-MODE HEVC

In this section, we ﬁrst analyze the temporal correlation of
the CU depth in inter-mode HEVC. Based on our analysis,
we then propose to predict the CU partition of inter-mode
HEVC, via designing the ETH-LSTM network. Finally, the
computational complexity of ETH-LSTM is analyzed.

A. Analysis on Temporal Correlation of CU Depth

Typically, the adjacent video frames exhibit similarity in
video content, and such similarity decays as the temporal dis-
tance of two adjacent frames increases. The same phenomenon
may also hold for the CU partition of inter-mode HEVC. Fig.

8

5 shows examples of the CU partition across adjacent frames
with different temporal distances. In this ﬁgure, we consider
the ﬁrst column as the reference. Then, the CU partition of
subsequent frames with different distances is compared to the
reference. In each CU, we highlight the same CU depth in
red. We can see from Fig. 5 that there exists high similarity in
the CU partition across neighboring frames, and the similarity
drops along with increasing temporal distance.

We further measure the similarity of the CU partition
in inter-mode HEVC over all 93 sequences in the training
and validation sets of our CPH-Inter database. Speciﬁcally,
we calculate the correlation of the CU depth between two
frames at various distances, ranging from 1 group of pictures
(GOP) to 25 GOPs. Such correlation is measured between
co-located units1 from two frames in terms of the linear
correlation coefﬁcient (CC) and mean squared error (MSE).
In our analysis, the results for the CC and MSE are averaged
over all frames of 93 sequences, which are shown in Fig. 6
for four QPs (QP = 22, 27, 32 and 37).

We can see from Fig. 6 that CC is always much larger
than 0, indicating the existence of a positive correlation on
the temporal CU depth. Moreover, the CC decreases alongside
increasing distance between two frames. Similar results hold
for MSE, as can be found in Fig. 6. Therefore, Fig. 6 implies
that there exist long- and short-term dependencies of the CU
partition across adjacent frames for inter-mode HEVC.

B. Deep LSTM Structure

As analyzed in Section V-A, the CU partition of neighboring
frames is correlated with each other. Thus, this section pro-
poses the ETH-LSTM approach, which learns the long- and
short-term dependencies of the CU partition across frames.
Fig. 7 illustrates the overall framework of ETH-LSTM. As
observed in Fig. 7, the input to ETH-LSTM is the residue
of each CTU. Here, the residue is obtained by precoding
the currently processed frame, in which both the CU and
PU sizes are forced to be 64×64. It is worth mentioning
that the computational time for precoding consumes less than
3% of the total encoding time, which is considered in our
approach as time overhead. Then, the residual CTU is fed
into ETH-CNN. For inter-frames, the parameters of ETH-CNN
are re-trained over the residue and ground-truth splitting of the
training CTUs from the CPH-Inter database. Next, the features
{f1−l}3
l=1 of ETH-CNN are extracted for frame t, and these
features are then fed into ETH-LSTM. Recall that {f1−l}3
l=1
are the features at Layer 7 of ETH-CNN.

Fig. 7 shows that three LSTMs in ETH-LSTM are arranged
in a hierarchy for determining the CU depths in the form
of HCPM. Speciﬁcally, the LSTM cells are at levels 1, 2
and 3, corresponding to three levels of HCPM: ˆy1(U, t),
{ˆy2(Ui, t)}4
i,j=1. Here, ˆy1(U, t) indi-
cates whether the CU U (size: 64×64, depth = 0 ) at frame t is
split. Similarly, {ˆy2(Ui, t)}4
i,j=1 denote
the splitting labels of CUs Ui (size: 32 × 32, depth = 1)

i=1 and {ˆy3(Ui,j , t)}4

i=1 and {ˆy3(Ui,j, t)}4

1Non-overlapping units with sizes of 64 × 64, 32 × 32 and 16 × 16 are
considered, corresponding to splitting depths of 0, 1 and 2. Note that 8 × 8
units are not measured, as an 8 × 8 CU is deﬁnitely split from a larger CU.

Input: residual CTU

Output: HCPM

TABLE II
CONFIGURATION OF ETH-LSTM

ETH-LSTM

ETH-
CNN

Level 1

LSTM
cell

y
1(cid:214) (

tU
, )
f'2-1 (t) (48)
f'1-1 (t) (64)

f1-1 (t) (64)

U
4
t
y
, )}
(cid:214){ (
i
i
2
1
(cid:32)
f'2-2 (t) ( 96 )
f'1-2 (t) (128)

Early 
termination

f1-2 (t) (128)

Level 2

Y

Level 1 split?

N

LSTM
cell

y
(cid:214){ (
3

U

4
t
, )}
i j
,

1
(cid:32)

i j
,

f'2-3 (t) (192)
f'1-3 (t) (256)

Early 
termination  

f1-3 (t) (256)

Y

Level 2 split?

N

LSTM
cell

t

Time steps

t+1

Level 3

t-1

QPQP

Picture 
Picture 
order
order
in GOP 
in GOP 
(one-hot)
(one-hot)

Feature 
Feature 
vectors
vectors

Fig. 7.
dimension of the vector.

Framework of ETH-LSTM. The number in each bracket is the

1−l(t) and f ′

and Ui,j (size: 16 × 16, depth = 2). At each level, two fully
connected layers follow the LSTM cells, which also include
the QP value and the order of frame t at GOP. Note that
the frame order is represented by a one-hot vector. For level
l at frame t, we denote f ′
2−l(t) as the output
features of the LSTM cell and the ﬁrst fully connected layer.
Additionally, the output of the second fully connected layer
is the probabilities of CU splitting, which are binarized to
predict HCPM2. However, if the LSTM cell at level 1 decides
not to split, the calculation of {ˆy2(Ui, t)}4
i=1 of HCPM is
terminated early at level 2, via skipping its two fully connected
layers. Instead, all indices of {ˆy2(Ui, t)}4
i=1 are set to be 0,
meaning that the CU depths at level 2 are 0. The calculation
of {ˆy3(Ui,j , t)}4
i,j=1 at level 3 is also terminated early in
a similar manner. Consequently, early termination is able to
reduce the computational time of ETH-LSTM. Finally, the
results of HCPM are output by ETH-LSTM, therein predicting
the partition patterns of a CTU at frame t.

When determining the HCPM of each CTU, the partition
patterns of the CTUs co-located at the previous frames can
be considered in ETH-LSTM. ETH-LSTM learns the long-
and short-term correlations of CU depths across frames, via
incorporating the LSTM cells at different levels. For learning
ETH-LSTM, each LSTM cell is trained separately using its
corresponding CUs. Next, we introduce the learning mecha-
nism of ETH-LSTM by taking the LSTM cell of frame t at
level l as an example. Such an LSTM cell works with three

2The binarization process is the same as that of ETH-CNN in Section IV-B.
The bi-threshold decision scheme of Section IV-D can also be applied for the
binarization process to achieve a trade-off between prediction accuracy and
complexity reduction.

9

Feature

Size

i1/o1/g1(t)
i2/o2/g2(t)
i3/o3/g3(t)
c1(t)
c2(t)
c3(t)
f ′
1−1(t)
f ′
1−2(t)
f ′
1−3(t)
f ′
2−1(t)
f ′
2−2(t)
f ′
2−3(t)
ˆy1(U, t)
4
{ˆy2(Ui, t)}
i=1
4
{ˆy3(Ui,j , t)}
i,j=1

Total

64
128
256
64
128
256
64
128
256
48
96
192
1
4
16
-

Number of
Parameters
8,192
32,768
131,072
8,192
32,768
131,072
0
0
0
3,312
12,768
50,112
53
404
3,152
757,929

Number of
Additions
8,128
32,640
130,816
8,255
32,895
131,327
63
127
255
3,264
12,672
49,920
52
400
3,136
757,118

Number of
Multiplications
8,192
32,768
131,072
8,320
33,024
131,584
64
128
256
3,312
12,768
50,112
53
404
3,152
759,273






gates: the input gate il(t), the output gate ol(t) and the forget
gate gl(t). Given the input ETH-CNN feature f1−l(t) and the
output feature f ′
1−l(t − 1) of the LSTM cell at the last frame,
these three gates can be obtained by

il(t) = σ(Wi · [f1−l(t), f ′
ol(t) = σ(Wo · [f1−l(t), f ′
gl(t) = σ(Wf · [f1−l(t), f ′

1−l(t − 1)] + bi)
1−l(t − 1)] + bo)
1−l(t − 1)] + bf )

(3)

where σ(·) stands for the sigmoid function. In the above
equations, Wi, Wo, Wf are trainable parameters for three
gates, and bi, bo and bf are their biases. With these three
gates, the LSTM cell updates its state at frame t as

cl(t) = il(t) ⊙ tanh(Wc ⊙ [f1−l(t), f ′
+ gl(t) ⊙ cl(t − 1),

1−l(t − 1)] + bc)

(4)
where ⊙ represents element-wise multiplication. In (4), Wc
and bc are parameters and biases for cl(t), which need to be
trained. Finally, the output of the LSTM cell f ′
1−l(t) can be
calculated as follows:

f ′

1−l(t) = ol(t) ⊙ cl(t).

(5)

Note that both cl(t) and f ′
length as f1−l(t).

1−l(t) are vectors with the same

The conﬁguration of ETH-LSTM with all trainable param-
eters is listed in Table II. For training the parameters of
the LSTM cells in the above equations, the cross-entropy is
applied as the loss function, the same as that for ETH-CNN
deﬁned in (1). Let Lr(t) be the loss for the r-th training CU
sample at frame t. Then, each LSTM cell among the three
levels of ETH-LSTM can be trained by optimizing the loss
over all R training samples alongside T frames,

L =

1
RT

R

T

Xr=1

Xt=1

Lr(t),

(6)

which is solved by the stochastic gradient descent algorithm
with momentum. Finally, given the trained LSTM cells, ETH-
LSTM can be used to generate HCPM for predicting the CU
partition at the inter-frames.

C. Computational Complexity of ETH-LSTM

As shown in the last two columns of Table II, there are in
total 757,118 additions and 759,273 multiplications for ETH-
LSTM, almost half of those for ETH-CNN. With the early
termination, the total number of ﬂoating-point operations in
Table II can be further reduced by 4.3% when running ETH-
LSTM for compressing 18 standard JCT-VC sequences at
QP = 32 (the inter-mode conﬁguration is the same as that
in the section of experimental results ). Because ETH-LSTM
requires the extracted features of ETH-CNN as the input, our
complexity reduction approach consumes in total 4.37 × 106
single-precision ﬂoating-point operations for a CTU. In other
words, our approach consumes 66.9 G single-precision FLOPS
for 1080p@30 Hz sequences, much less than the 287.9 G
double-precision FLOPS for an Intel(R) Core(TM) i7-7700K
CPU @4.2 GHz. As analyzed in the Supporting Document,
our approach requires less than 3 ms/frame running time in
the FPGA device of Virtex UltraScale+ VU13P.

VI. EXPERIMENTAL RESULTS

In this section, we present experimental results to validate
the effectiveness of our approach in reducing HEVC complex-
ity at both intra- and inter-modes. For evaluating performance
at intra-mode, we compare our approach with two state-of-
the-art approaches: the SVM based approach [8] and the CNN
based approach [9]. For evaluating performance at inter-mode,
we compare our approach to the latest approaches of [8],
[7] and [10]. In Section VI-A, we discuss the conﬁguration
of the experiments and the settings of our approach. In
Sections VI-B and VI-C, we compare the performance of
our and other approaches for intra- and inter-mode HEVC,
respectively. Finally, Section VI-D analyzes the running time
of our complexity reduction approach.

A. Conﬁguration and Settings

Conﬁguration of experiments. In our experiments, all
complexity reduction approaches were implemented in the
HEVC reference software HM 16.5 [3]. In HM 16.5, the AI
conﬁguration was applied with the default conﬁguration ﬁle
encoder intra main.cfg [35] for the performance evaluation
at intra-mode, and the LDP conﬁguration was used with the
default conﬁguration ﬁle encoder low delay P main.cfg [35]
for the performance evaluation at inter-mode. Here, four QP
values, {22, 27, 32, 37}, were chosen to compress the images
and video sequences. At both intra- and inter-modes, our
experiments were tested on 18 video sequences of the JCT-
VC standard test set [37]. Moreover, all 200 test images from
the CPH-Intra database were evaluated for intra-mode HEVC
complexity reduction. In our experiments, the Bjøntegaard
delta bit-rate (BD-BR) and Bjøntegaard delta PSNR (BD-
PSNR) [42] were measured to assess the RD performance.
Additionally, ∆T , which denotes the encoding time-saving
rate over the original HM, was used to measure the complexity
reduction. All experiments were conducted on a computer with
an Intel(R) Core (TM) i7-7700K CPU @4.2 GHz, 16 GB
RAM and the Windows 10 Enterprise 64-bit operating system.
Note that a GeForce GTX 1080 GPU was used to accelerate

10

the training speed, but it was disabled when testing the HEVC
complexity reduction.

Training Settings. In our complexity reduction approach,
two ETH-CNN models were trained from the training sets
of the CPH-Intra and CPH-Inter databases, corresponding
to intra- and inter-mode HEVC, respectively. In addition,
one ETH-LSTM model was trained from the training set
of the CPH-Inter database. In training these models,
the
hyper-parameters were tuned on the validation sets of the
CPH-Intra and CPH-Inter databases. Speciﬁcally, all trainable
parameters in ETH-CNN and ETH-LSTM were randomly
initialized, obeying the truncated normal distribution with zero
mean and standard deviation of 0.1. The batch size R for
training was 64, and the momentum of the stochastic gradient
descent algorithm was set to 0.9. To train the ETH-CNN
models, the initial learning rate was 0.01 and decreased by
1% exponentially every 2,000 iterations, and there were in
total 1,000,000 iterations. To train ETH-LSTM, the initial
learning rate was 0.1 and decreased by 1% exponentially
every 200 iterations, and the total number of iterations was
200,000. The length of the trained ETH-LSTM model was
T = 20. Moreover, at the LDP conﬁguration, the overlapping
of 10 frames was applied to generate the training samples of
the ETH-LSTM model. Such overlapping was introduced to
enhance the diversity of the training samples and meanwhile
augment the training data.

i.e.,

Test Settings. For the test, T was set equal to the number
of P frames in the sequence, where the internal information
of ETH-LSTM can propagate throughout the whole sequence
to leverage the long- and short-term dependencies. Note that
ETH-LSTM is invoked step-wise during the test,
the
hidden state and the output of frame t are calculated after the
processing of frame t − 1 is accomplished, instead of yielding
the output of all T frames at one time. For the bi-threshold
decision scheme, at intra-mode the values of the thresholds
were ¯αl = αl = 0.5 where l ∈ {1, 2, 3} is the CU depth. It is
because our approach is able to achieve sufﬁciently small loss
of RD performance at intra-mode and the bi-threshold decision
is not necessary. At inter-mode, we set [¯α1, α1] = [0.4, 0.6],
[¯α2, α2] = [0.3, 0.7] and [¯α3, α3] = [0.2, 0.8], corresponding
to the different CU depth of l ∈ {1, 2, 3}. Here, we followed
[8] to apply this bi-threshold setting, which can efﬁciently
enhance RD performance with desirable rate of complexity
reduction. The width of uncertain zone increases along with
increased level l of CU depth, since the smaller CU depth tends
to early bypass redundant checking of CUs in RD optimization
(RDO), which is achieved by a narrower uncertain zone
[¯αl, αl].

B. Performance Evaluation at Intra-mode

Evaluation on training performance. When predicting the
CU partition of intra-mode HEVC, our approach relies on
the training model of ETH-CNN, which is optimized by (2)
over the training set. Therefore, it is necessary to evaluate the
training performance of our approach at intra-mode. Fig. 8-(a)
shows the training loss along with iterations during the model
training of ETH-CNN. Note that the training loss is obtained

TABLE III
RESULTS FOR IMAGES FROM OUR CPH-INTRA TEST SET (AI)

Image
Source

Resolution

Appr.

∆T (%)

CPH-Intra
Test Set

768×512

1536×1024

2880×1920

4928×3264

Std. dev.

Best

Average

BD-BR
(%)
5.113
2.885
0.935
6.002
3.134
1.220
4.035
2.130
1.661
4.630
1.863
1.728
0.720
0.604
0.376
4.035
1.863
0.935
4.945
2.353
1.386

BD-PSNR
(dB)
-0.343
-0.210
-0.067
-0.374
-0.208
-0.081
-0.207
-0.115
-0.094
-0.209
-0.086
-0.082
0.076
0.064
0.011
-0.207
-0.086
-0.067
-0.284
-0.155
-0.081

[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our

TABLE IV
RESULTS FOR SEQUENCES OF THE JCT-VC TEST SET (AI)

Class

Sequence

Appr.

∆T (%)

A

PeopleOnStreet

Trafﬁc

B

Cactus

BasketballDrive

BQTerrace

Kimono

ParkScene

BasketballDrill

BQMall

PartyScene

RaceHorses

BasketballPass

BlowingBubbles

BQSquare

RaceHorses

FourPeople

C

D

E

Johnny

KristenAndSara

Std. dev.

Best

Average

BD-BR
(%)
9.627
3.969
2.366
6.411
4.945
2.549
8.923
6.018
4.265
6.627
4.815
1.842
7.533
6.021
2.265
5.212
2.382
2.592
3.630
3.417
1.956
9.818
12.205
2.863
9.646
8.077
2.089
7.383
9.448
0.664
7.220
4.422
1.973
10.054
8.401
1.842
6.178
8.328
0.622
12.342
2.563
0.913
8.839
4.953
1.320
9.077
8.002
3.110
12.182
7.956
3.822
13.351
5.478
3.460
2.553
2.603
1.020
3.630
2.382
0.622
8.559
6.189
2.247

BD-PSNR
(dB)
-0.492
-0.209
-0.126
-0.304
-0.240
-0.125
-0.244
-0.141
-0.121
-0.295
-0.267
-0.086
-0.248
-0.208
-0.077
-0.170
-0.082
-0.087
-0.149
-0.135
-0.081
-0.439
-0.538
-0.133
-0.486
-0.468
-0.111
-0.468
-0.672
-0.044
-0.379
-0.264
-0.108
-0.546
-0.457
-0.106
-0.373
-0.463
-0.039
-0.876
-0.211
-0.067
-0.487
-0.317
-0.075
-0.480
-0.439
-0.171
-0.474
-0.307
-0.153
-0.627
-0.265
-0.169
0.175
0.158
0.039
-0.149
-0.082
-0.039
-0.419
-0.316
-0.104

[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our

11

s
s
o
L

4.5

3.5

4

3

2.5

2

0

AI Configuration
LDP Configuration

s
s
o
L

4.5

3.5

4

3

2.5

2

0

0.5

1
Iterations

1.5

2
×10 6

0.5

1
Iterations

1.5

2
×10 5

(a) ETH-CNN

(b) ETH-LSTM

Fig. 8. Training loss alongside iterations when learning the models of ETH-
CNN at intra-mode, ETH-CNN at inter-mode and ETH-LSTM. Note that the
training loss of intra-mode ETH-CNN is over the training set of CPH-Intra
database, while the training loss of inter-mode ETH-CNN and ETH-LSTM is
over the training set of CPH-Inter database.

through calculating (2) at each training iteration. We can see
from this ﬁgure that the loss converges after 5×105 iterations,
when training the ETH-CNN model at the AI conﬁguration.
Evaluation on prediction accuracy. First, we evaluate the
accuracy of the CU partition predicted by our ETH-CNN
approach, when compressing images/sequences with intra-
mode HEVC. In our experiments, the accuracy is averaged
over the CU partition results of 200 test images and 18 test
sequences, which are compressed by HM 16.5 at
the AI
conﬁguration and four QP values {22, 27, 32, 37}. We ﬁnd
from the experimental results that the average accuracy rates
for predicting the intra-mode CU partition at levels 1, 2 and 3
are 90.98%, 86.42% and 80.42%, respectively. These accuracy
rates are rather high, thus leading to a slight loss of RD
performance, as discussed below.

Comparison of complexity reduction. Next, we compare
our approach with [25] and [9] in complexity reduction,
when compressing images/sequences by HEVC at intra-mode.
Tables III and IV tabulate the complexity reduction results
in ∆T for 200 test images and 18 test sequences, respec-
tively. As observed in Table III, at QP = 22, 27, 32 and 37,
our approach reduces the encoding complexity by 64.01%,
66.09%, 68.11% and 70.52% on average, outperforming the
58.36%, 56.27%, 54.23% and 55.69% complexity reductions
in [25] and the 58.05%, 61.66%, 65.25% and 67.26% com-
plexity reductions in [9]. In addition, for most scenarios with
different QPs and sequences, our approach achieves a better
complexity reduction than the other two approaches. Note
that our ETH-CNN based approach requires less time than
the shallow CNN approach [9], because [9] requires an RDO
search for the decision on splitting from 64 × 64 to 32 × 32.
Our approach outperforms [25] and [9] in terms of maximal
∆T , for compressing the test images and video sequences
with intra-mode HEVC. More importantly, when applying our
approach and [9] in intra-mode compression of the test images
and video sequences, the standard deviations of ∆T are less
than 1
5 · |∆T |, indicating the stability of both approaches in
complexity reduction. For video sequences, similar results can
be found in Table IV. From Tables III and IV, we can further
observe that the gap in the time reduction between our and
other approaches increases along with increasing QP. This is
most likely because the increased QP leads to more large CUs,

QP=22
-59.43
-54.97
-51.10
-58.94
-55.84
-59.50
-57.03
-59.95
-70.91
-58.02
-61.43
-75.51
0.92
3.13
11.05
-59.43
-61.43
-75.51
-58.36
-58.05
-64.01

QP=22
-52.12
-50.79
-59.16
-37.11
-53.86
-66.48
-48.53
-68.50
-74.26
-67.32
-53.35
-52.02
-38.37
-58.18
-48.95
-34.51
-70.66
-80.40
-41.69
-60.27
-60.42
-46.65
-60.29
-42.47
-52.62
-47.08
-52.74
-63.84
-52.72
-37.27
-46.46
-50.52
-54.08
-43.69
-60.24
-54.87
-57.15
-54.62
-38.08
-61.45
-42.55
-44.13
-43.12
-52.86
-50.91
-53.52
-54.79
-65.30
-58.29
-62.92
-70.32
-54.44
-61.24
-72.76
9.42
7.10
12.67
-67.32
-70.66
-80.40
-50.05
-56.41
-56.92

QP=27
-54.70
-58.78
-55.16
-54.85
-59.46
-60.78
-52.79
-63.14
-74.48
-62.74
-65.27
-76.96
3.82
3.07
10.55
-62.74
-65.27
-76.96
-56.27
-61.66
-66.09

QP=27
-50.63
-53.87
-59.42
-25.36
-59.08
-70.98
-37.13
-68.55
-76.18
-63.09
-56.81
-65.57
-40.83
-61.01
-53.87
-43.21
-72.75
-84.32
-44.79
-65.10
-66.15
-58.86
-62.35
-45.16
-42.97
-51.15
-57.05
-49.82
-57.51
-41.94
-40.13
-59.30
-54.47
-41.03
-62.89
-56.64
-42.45
-60.45
-38.66
-62.40
-46.05
-45.08
-40.18
-57.32
-54.17
-40.88
-59.79
-72.08
-60.21
-65.51
-70.57
-56.94
-64.61
-74.53
10.16
6.24
12.96
-63.09
-72.75
-84.32
-46.72
-60.23
-60.38

QP=32
-48.74
-61.78
-57.31
-50.57
-62.43
-64.71
-52.31
-68.07
-76.06
-65.30
-68.70
-78.34
6.51
3.64
9.87
-65.30
-68.70
-78.34
-54.23
-65.25
-68.11

QP=32
-37.79
-56.58
-61.63
-19.63
-63.54
-71.85
-41.05
-70.30
-76.93
-59.57
-60.26
-68.25
-43.61
-64.94
-66.92
-49.88
-73.62
-84.45
-59.98
-68.57
-70.08
-47.66
-64.48
-62.11
-35.52
-53.26
-59.39
-31.50
-59.77
-43.78
-41.49
-59.81
-58.59
-37.46
-64.31
-56.93
-25.73
-62.55
-39.52
-58.99
-48.37
-46.57
-39.54
-58.80
-58.23
-26.12
-64.39
-72.99
-63.98
-67.71
-70.73
-56.05
-65.82
-75.98
13.04
6.09
11.96
-63.98
-73.62
-84.45
-43.09
-62.62
-63.61

QP=37
-44.83
-64.41
-62.18
-50.95
-64.17
-66.76
-59.51
-69.46
-78.47
-67.46
-71.00
-78.68
8.57
3.48
8.36
-67.46
-71.00
-78.68
-55.69
-67.26
-70.52

QP=37
-34.81
-61.15
-63.82
-33.38
-66.88
-73.85
-46.89
-70.70
-77.90
-36.48
-61.13
-73.05
-51.23
-67.78
-74.09
-63.58
-73.86
-84.97
-64.92
-70.16
-73.47
-62.53
-67.20
-62.17
-37.12
-57.05
-64.48
-26.88
-64.98
-55.00
-50.28
-63.15
-61.32
-36.69
-66.67
-57.23
-22.81
-65.48
-45.91
-46.86
-49.89
-47.48
-38.07
-60.20
-59.72
-24.34
-67.17
-74.86
-70.70
-70.05
-71.10
-62.61
-67.21
-76.17
15.01
5.63
10.75
-70.70
-73.86
-84.97
-45.01
-65.04
-66.47

12

0

)

B
d
(
 

R
N
S
P
D
B

-

-0.05

-0.1

-0.15

-0.2

-0.25

[9] CNN Based Approach
Proposed Approach

-60

-20

0

-40
∆T (%)

0

-20

-40

-60

)

%

(
 
T
∆

0

)

B
d
(
 

R
N
S
P
D
B

-

-0.05

-0.1

.50
.50
.50

.53
.58
.70

.62
.69
.81

.73
.80
.89

.83
.88
.94

.90
.93
.96
{αl}3

l=1

.94
.96
.98

.96
.97
.98

.97
.98
.99

.99
.99
.99

1.00
1.00
1.00

(l = 1)
(l = 2)
(l = 3)

.50
.50
.50

.53
.58
.70

.62
.69
.81

.73
.80
.89

.83
.88
.94

.90
.93
.96
{αl}3

l=1

.94
.96
.98

.96
.97
.98

.97
.98
.99

.99
.99
.99

1.00
1.00
1.00

(l = 1)
(l = 2)
(l = 3)

Fig. 9. CRD performance for intra-mode HEVC complexity reduction. Left and middle: Complexity reduction and RD performance at different uncertain
zones. No that the labels on horizontal axes are upper thresholds {αl}3
l=1, and the corresponding lower thresholds are ¯αl = 1 − αl for l ∈ {1, 2, 3}. Right:
Comparison of CRD performance between both approaches.

such that early termination in our ETH-CNN model works for
more CTUs, resulting in decreased running time. In summary,
our approach is capable of improving the time efﬁciency of
intra-mode HEVC.

Comparison of RD performance. The reduced complexity
of intra-mode HEVC is at the expense of an RD performance
loss. Here, we compare the RD performance of our and the
other two approaches in terms of BD-BR and BD-PSNR.
Tables III and IV report the BD-BR and BD-PSNR under
the three approaches, with the original HM as the anchor.
We can see from these tables that the BD-BR increase in
our ETH-CNN approach is on average 1.386% for images
and 2.247% for sequences, which signiﬁcantly outperforms
[25] (4.945% for images and 8.559% for sequences) and [9]
(2.353% for images and 6.189% for sequences). In addition,
our approach incurs −0.081 dB and −0.104 dB BD-PSNR for
images and sequences, respectively, which are far better than
the −0.284 dB and −0.419 dB of [25], and the −0.155 dB
and −0.316 dB of [9]. Our approach is also superior to [25]
and [9], in terms of both standard deviations and best values
of BD-BR and BD-PSNR. Thus, our approach performs best
among the three approaches in terms of RD performance. The
RD improvement of our approach is mainly due to the high
prediction accuracy of the CU partition, beneﬁting from the
deep ETH-CNN structure with sufﬁcient parameters learned
from our large-scale CPH-Intra database.

Comparison of complexity-RD performance. As men-
tioned in Section IV-D, the bi-threshold scheme can control
the RD performance and encoding complexity. Therefore,
we changed the uncertain zone [¯αl, αl] of the bi-threshold
scheme to assess the complexity-RD (CRD) performance of
our approach. As mentioned in Section IV-D,
[¯α1, α1] ⊂
[¯α2, α2] ⊂ [¯α3, α3] and ¯αl = 1 − αl exist for our bi-threshold
scheme. Therefore, the speciﬁc values of {[¯αl, αl]}3
l=1 at each
level l are determined by power functions for simplicity:

αl = 0.5 + 0.5d2−0.5l
¯αl = 0.5 − 0.5d2−0.5l

(cid:26)

l ∈ {1, 2, 3},

(7)

where d ∈ [0, 1] is the width of the uncertain zone at level
l = 2. Speciﬁcally, Fig. 9-left and -middle show the results
of the encoding complexity reduction and RD performance
degradation at different uncertain zones by adjusting d, for
intra-mode HEVC. The results are averaged over the JCT-
VC test sequences at QP = 22, 27, 32, and 37. In this ﬁgure,
the encoding complexity reduction is measured by ∆T (i.e.,
encoding time saving) and the RD performance degradation

is assessed by BD-PSNR. We can see from Fig. 9-left and
-middle that the absolute values of both ∆T and BD-PSNR
are increased when the uncertain zone of [ ¯αl, αl] becomes
narrower. This indicates that the trade-off between the RD
performance and encoding complexity can be controlled by
changing the uncertain zone [ ¯αl, αl]. In Fig. 9-right, we also
plot the CRD curves of our approach and the state-of-the-art
CNN based approach [9] by plotting the values of ∆T and
BD-PSNR, which are obtained at different uncertain zones
of [¯αl, αl]. This ﬁgure shows that the RD performance is
improved at less reduction of encoding complexity. This ﬁgure
further shows that our approach achieves a better RD perfor-
mance than [9] at the same encoding complexity reduction.

C. Performance Evaluation at Inter-mode

Evaluation on training performance. First, we evaluate
the training loss at different iterations when training the ETH-
CNN and ETH-LSTM models for inter-mode HEVC complex-
ity reduction. Fig. 8-(a) and -(b) illustrate the training loss
curves for ETH-CNN and ETH-LSTM, respectively. Here, the
loss values are obtained from (2) for training the ETH-CNN
model and from (6) for training the ETH-LSTM model. We
can see that both the ETH-CNN and LSTM models converge
at a fast speed. Additionally, at the LDP conﬁguration, the
training loss of the ETH-LSTM model converges to a smaller
value in predicting the CU partition of HEVC, compared with
the ETH-CNN model.

Evaluation on prediction accuracy. First, we evaluate
the accuracy of the CU partition predicted by ETH-LSTM
when compressing 18 test sequences using HEVC at the LDP
conﬁguration. The experimental results show that the average
accuracy rates of the inter-mode CU partition at three levels are
93.89%, 88.01% and 80.91%. These values are much higher
than the 90.21%, 82.62% and 79.42% of the three-level joint
SVM classiﬁer reported in [8]. Moreover, the accuracy rates of
the inter-mode CU partition are higher than those of the intra-
mode CU partition in our deep learning approach (reported in
Section VI-B) because of the temporal correlation of the CU
partition learned in ETH-LSTM.

Evaluation on complexity reduction. Next, we compare
our approach with the latest work of [8], [7] and [10] for
encoding complexity reduction in inter-mode HEVC. In Table
V, ∆T illustrates the complexity reduction rates of 18 test
sequences. As seen in this table, at QP = 22, 27, 32 and 37,
our approach can reduce the encoding complexity by 43.84%,

TABLE V
RESULTS FOR SEQUENCES OF THE JCT-VT TEST SET (LDP)

Class

Sequence

Appr.

∆T (%)

PeopleOnStreet

A

Trafﬁc

B

Cactus

BasketballDrive

BQTerrace

Kimono

ParkScene

BasketballDrill

BQMall

PartyScene

RaceHorses

BasketballPass

BlowingBubbles

BQSquare

RaceHorses

FourPeople

C

D

E

Johnny

KristenAndSara

Std. dev.

Best

Average

BD-BR
(%)
1.456
9.813
4.292
1.052
2.077
4.639
6.983
1.990
2.246
6.372
3.991
2.268
1.733
1.934
2.892
1.090
2.005
5.125
5.516
2.071
2.219
4.382
3.239
1.497
1.559
3.493
4.493
1.474
1.599
7.485
4.055
1.953
1.604
6.801
4.092
1.914
1.301
2.988
2.469
1.011
2.085
6.204
3.016
0.872
1.321
6.995
1.949
1.453
0.974
2.180
2.479
1.292
1.175
2.090
1.998
0.770
1.306
6.867
2.240
1.112
2.593
5.492
3.974
1.837
3.024
3.769
3.452
1.691
2.098
4.293
3.964
1.558
0.534
2.146
1.282
0.448
0.974
1.934
1.949
0.770
1.799
5.051
3.616
1.495

BD-PSNR
(dB)
-0.062
-0.400
-0.180
-0.045
-0.056
-0.119
-0.178
-0.052
-0.055
-0.145
-0.092
-0.052
-0.029
-0.028
-0.042
-0.017
-0.044
-0.105
-0.111
-0.043
-0.066
-0.128
-0.097
-0.048
-0.044
-0.098
-0.126
-0.042
-0.058
-0.266
-0.147
-0.072
-0.058
-0.239
-0.147
-0.071
-0.047
-0.107
-0.094
-0.039
-0.072
-0.215
-0.105
-0.032
-0.059
-0.310
-0.086
-0.066
-0.034
-0.078
-0.086
-0.044
-0.036
-0.062
-0.067
-0.028
-0.054
-0.281
-0.095
-0.047
-0.082
-0.165
-0.122
-0.052
-0.058
-0.079
-0.065
-0.038
-0.055
-0.113
-0.104
-0.045
0.013
0.100
0.037
0.014
-0.029
-0.028
-0.042
-0.017
-0.054
-0.163
-0.108
-0.046

QP=22
-35.26
-29.05
-39.32
-40.19
-43.66
-38.30
-48.71
-47.43
-33.61
-33.90
-40.77
-41.16
-32.15
-15.32
-45.49
-44.39
-33.24
-25.09
-43.92
-41.51
-41.68
-43.06
-46.21
-45.58
-38.88
-29.65
-43.93
-46.48
-36.96
-29.66
-44.00
-49.75
-39.48
-34.13
-40.73
-42.02
-31.34
-12.64
-42.75
-38.31
-36.39
-20.17
-36.14
-39.65
-31.74
-31.66
-36.80
-43.69
-23.81
-14.18
-35.52
-33.63
-24.80
-13.96
-45.19
-40.24
-29.48
-19.58
-34.81
-37.07
-58.11
-59.74
-53.81
-53.36
-59.16
-65.45
-55.45
-51.99
-59.90
-63.34
-52.68
-52.69
10.84
16.62
6.17
5.60
-59.90
-65.45
-55.45
-53.36
-38.31
-32.16
-43.67
-43.84

[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our

QP=27
-42.53
-26.39
-40.46
-45.73
-57.25
-50.70
-52.22
-59.39
-48.72
-45.16
-44.36
-55.34
-41.84
-35.77
-47.80
-55.72
-47.21
-42.48
-49.32
-55.93
-52.39
-51.24
-47.70
-54.99
-47.36
-39.63
-45.53
-56.08
-43.63
-34.97
-41.93
-52.75
-43.32
-36.04
-39.05
-48.58
-34.49
-18.14
-38.35
-41.77
-39.58
-25.83
-33.56
-43.25
-33.89
-29.44
-31.04
-46.85
-27.92
-19.91
-31.21
-41.40
-31.02
-20.62
-34.69
-40.61
-29.34
-20.26
-27.72
-39.26
-67.79
-69.08
-56.60
-64.29
-72.00
-75.72
-58.49
-67.68
-69.46
-71.53
-55.75
-68.77
13.44
18.13
9.34
9.27
-72.00
-75.72
-58.49
-68.77
-46.10
-39.59
-43.10
-52.13

QP=32
-45.40
-31.28
-41.85
-50.02
-62.91
-61.39
-56.96
-65.00
-50.70
-52.16
-46.67
-60.18
-51.59
-58.41
-53.76
-67.97
-52.77
-53.95
-52.44
-61.56
-53.98
-57.77
-49.76
-59.53
-54.17
-53.37
-49.39
-63.25
-45.48
-43.46
-41.56
-57.63
-47.54
-46.16
-39.04
-54.50
-36.71
-28.75
-37.40
-49.00
-39.18
-33.28
-31.90
-48.65
-34.58
-33.39
-29.01
-50.66
-26.40
-31.71
-29.04
-50.21
-31.84
-43.86
-26.46
-49.33
-28.37
-25.37
-22.92
-43.14
-71.85
-74.29
-57.11
-67.89
-74.29
-81.45
-59.50
-71.34
-73.25
-77.57
-58.98
-72.19
14.82
17.18
12.04
8.84
-74.29
-81.45
-59.50
-72.19
-48.95
-49.31
-43.54
-57.89

QP=37
-46.32
-39.18
-43.99
-52.07
-58.04
-68.60
-60.03
-70.59
-47.62
-58.47
-48.67
-66.69
-49.80
-71.95
-56.01
-71.97
-50.00
-62.03
-53.60
-68.51
-53.27
-66.33
-50.01
-64.02
-49.50
-64.09
-51.86
-69.10
-42.93
-53.26
-41.99
-60.66
-43.84
-55.83
-39.92
-57.86
-33.40
-43.19
-37.89
-58.24
-37.80
-40.32
-32.97
-53.34
-33.59
-41.93
-25.80
-54.97
-18.11
-40.22
-26.03
-57.26
-27.88
-45.72
-26.09
-57.47
-32.78
-33.07
-20.09
-47.99
-67.62
-79.19
-58.12
-71.97
-73.91
-84.83
-59.82
-74.97
-70.55
-81.40
-58.77
-75.27
14.88
16.08
13.30
8.45
-73.91
-84.83
-60.03
-75.27
-46.50
-57.20
-43.98
-62.94

55

50

45

40

35

30

25

20

15

0.5

1

0

)

%

(
 

M
H

 
l

a
n
g
i
r

i

O

 
r
e
v
o

 

e
m
T

i

 
f

o

 

e
g
a

t

n
e
c
r
e
P

13

Running ETH-CNN
Encoding with ETH-CNN
1% Reference Line

Running ETH-CNN + ETH-LSTM
Encoding with ETH-CNN + ETH-LSTM
1% Reference Line

)

%

(
 

M
H

 
l

a
n
g
i
r

i

O

 
r
e
v
o

 

e
m
T

i

 
f

o

 

e
g
a

t

n
e
c
r
e
P

55

50

45

40

35

30

25

20

15

0.5

1

0

6

.

6

9

.

1
2

2

.

9
4

4

.

3
0
1

9

.

7
0
2

1

.

1
2

1

.

8
7

3

.

3
8
2

2

.

7
1
8

  4

s

6
1
V i d

o

e

V i d

4

s

2

o

*
e

3

0
  8
V i d

*
o

2

e

4
s

0

8
2
  1
V i d

*
s

0
o

8
e

2

7
  1

0

2
9
V i d

0

5

8

0
  2

1

s

*
o

0
e

1

g

*
0
6
I m a

6

0

0
  7
s
e
I m a

*

s

8

e

6

g

2

1

5
3
5
  1
I m a

1

s

*
e

6
g

4

2

0
8
8
  2
I m a

0

9

2

2

9
  4

1

s

*
e

0
g

4

6

2

3

*

8

(a) AI conﬁguration.

8

.

9

4

.

0
3

1

.

2
6

  4

s

o

e

V i d

0
s

4
o

2
e

*
6
1
V i d

4
o

2

*

e

3
  8
V i d

8

s

8

0
2
  1
V i d

*

o

0

e

0

2
  1

7
s

1
o

*
e

0
2
9
V i d

0

8
  2

0
s

6

5

2

.

9
2
1

3

.

3
4
2

0

0

6

1

*

0

(b) LDP conﬁguration.

Fig. 10. Time percentages for running our deep learning models and encoding
videos/images by HM with our complexity reduction approach, with the
original HM 16.5 as an anchor. Note the number in blue font next to each bar
indicates the real running time of ETH-CNN and ETH-CNN + ETH-LSTM
(in millisecond) for one frame.

52.13%, 57.89% and 62.94% on average. Such complexity
reduction rates are superior to the 38.31%, 46.10%, 48.95%
and 46.50% of [8], the 32.16%, 39.59%, 49.31% and 57.20%
of [7], and the 43.67%, 43.10%, 43.54% and 43.98% of [10].
In addition, our approach is able to reduce more complexity
than the other three approaches on most sequences under
different QPs and resolutions. This is mainly because our
approach is able to predict all the CU partition of an entire
CTU at a time in the form of HCPM, whereas the other
approaches need to run the classiﬁer several
times or to
check the RDO of some CU partition in splitting a CTU.
We can further see from Table V that our approach at the
LDP conﬁguration has the smallest standard deviations of ∆T
among all four approaches. This implies that our approach is
robust in reducing complexity of inter-mode HEVC. However,
the maximal complexity reduction of our approach is less
than that of [7] for inter-mode HEVC. Again, this implies the
robustness of our approach in complexity reduction of inter-
mode HEVC, since our approach has more average complexity
reduction than [7].

Evaluation on RD performance. In addition to complexity
reduction, RD performance is also a critical metric for eval-
uation. In our experiments, we compare RD performance of
all four approaches, in terms of BD-BR and BD-PSNR. Table
V tabulates BD-BR and BD-PSNR results of four approaches,
with the original HM as anchor. The BD-BR of our ETH-
LSTM approach is averagely 1.495%, better than 1.799% of
[8], 5.051% of [7] and 3.616% of [10]. On the other hand, the
BD-PSNR of our approach is −0.046 dB, which is superior
to −0.054dB of [8], −0.163dB of [7] and −0.108dB of [10].
Also, Table V shows that our approach is generally superior to
[8], [7] and [10] for both standard deviations and best values of
the RD loss (evaluated by BD-BR and BD-PSNR). Therefore,
our approach performs best in terms of RD, among all four
approaches. It is mainly attributed to the high accuracy of the
CU partition predicted by ETH-LSTM as discussed above.

D. Analysis on Running Time

We analyze the running time of our deep learning approach
by comparing with that of the original HM 16.5 [3]. Fig. 10
shows the time percentages of running ETH-CNN and ETH-

TABLE VI
RESULTS FOR ABLATION STUDY

Conﬁg.

Settings

AI

LDP

1. Shallow CNN [9]
2. Deep CNN [12]
3. ETH-CNN
1. ETH-CNN fed with
original CTUs
2. ETH-CNN fed with
residual CTUs
3. ETH-CNN fed with
residual CTUs + ETH-LSTM

BD-BR
(%)
6.189
2.249
2.247

BD-PSNR
(dB)
-0.316
-0.105
-0.104

QP=22
-56.41
-55.44
-56.92

∆T (%)

QP=27
-60.23
-58.23
-60.38

QP=32
-62.62
-60.12
-63.61

QP=37
-65.04
-63.79
-66.47

8.911

-0.248

-47.00

-55.10

-60.68

-65.53

3.450

-0.106

-44.76

-52.87

-58.54

-63.79

1.495

-0.046

-43.84

-52.13

-57.89

-62.94

CNN + ETH-LSTM relative to the original HM. It also plots
the time percentages of encoding with ETH-CNN and ETH-
CNN + ETH-LSTM, with the original HM as an anchor. The
number in blue font next to each bar in Fig.10 indicates the
absolute time3 of running ETH-CNN and ETH-CNN + ETH-
LSTM (in millisecond) for one frame. The results of Fig.
10 are obtained by averaging over all test images/sequences
with the same resolution at four QP values {22, 27, 32, 37}.
We can see from Fig. 10-(a) that ETH-CNN consumes less
than 1% of the time required by the original HM. Moreover,
ETH-CNN takes up a small portion of time when compress-
ing images/sequences by HM with our complexity reduction
approach. Hence, ETH-CNN4 introduces little time overhead
in reducing the complexity of intra-mode HEVC.

the LDP conﬁguration. Note that

As seen in Fig. 10-(b), ETH-CNN and ETH-LSTM achieve
shorter running time compared with the encoding time of
the
the original HM at
time proportion of ETH-CNN and ETH-LSTM in inter-mode
HEVC is far less than that of ETH-CNN in intra-mode HEVC,
since inter-mode HEVC has a signiﬁcantly longer encoding
time than intra-mode HEVC. Besides, Fig. 10-(b) shows that
the CU partition by our approach consumes relatively little
encoding time, when applying our deep learning approach for
complexity reduction in inter-mode HEVC.

E. Ablation Study

In this section, we conducted a series of ablation exper-
iments to analyze the impact of major components in the
proposed approach. In our ablation experiments, we started
from a simple CNN model and then added the components
stepwise, ﬁnally reaching the proposed approach. Table VI
reports the results of ablation experiments. Note that
the
ablation results are averaged over all 18 test sequences. In
the following, we discuss these ablation results in details.

Deep CNN structure vs. shallow CNN structure. In
our approach, a deep structure of CNN is developed, which
is signiﬁcantly deeper than the shallow CNN structure in
the state-of-the-art HEVC complexity reduction approach [9].
Such a deep CNN structure has been presented in the con-
ference version [12] of this paper, and it has similar structure

3Note that only one thread of CPU is used for the above running time,
in accord with the HM platform that is also implemented in one thread.
If enabling the multi-thread parallelism of CPU, the running time can be
drastically reduced.

4Although running ETH-CNN requires little time for each video frame,
a huge amount of time is taken for training the ETH-CNN model, as it is
trained from large-scale data. This can be done off-line, making our ETH-
CNN practical for complexity reduction in HEVC.

14

and comparable amount of trainable parameters to our ETH-
CNN model. Therefore, we analyze the impact of the deep
structure in our approach by comparing the results between
[12] and [9]. As can be seen in Table VI, the deep CNN
structure improves the RD performance for intra-mode HEVC
complexity reduction, which has 3.940% BD-BR saving and
0.211dB BD-PSNR increase over the shallow structure of [9].
The ETH-CNN model vs. the general classiﬁcation-
oriented CNN model. In the ETH-CNN model, the early-
terminated hierarchical (ETH) decision is proposed to predict
the CU partition, which replaces the conventional three-level
classiﬁcation of [12]. In fact, [12] is the conference version
of this paper, in which three deep networks of the CNN
model are invoked to predict the three-level classiﬁcation of
64 × 64, 32 × 32 and 16 × 16 CU partition, respectively.
Note that the CNN model of [12] has similar structure and
comparable amount of trainable parameters to our ETH-CNN
model. In our ablation experiments, we therefore compare the
results of the ETH-CNN model with those of the classiﬁcation-
oriented CNN model [12], to investigate the impact of the
ETH decision. We can see from Table VI that the ETH-CNN
model can save 1.48% − 3.49% encoding time over [12] for
intra-mode HEVC. This indicates the effectiveness of the ETH
decision proposed in this paper, which replaces the general
CNN model based classiﬁcation in [12].

Residual CTUs vs. original CTUs. For inter-mode HEVC
complexity reduction, we propose to feed the ETH-CNN
model with residual CTUs, rather than the original CTUs. In
our ablation experiments, we thus validate the effectiveness of
residual CTUs in our approach. To this end, we compare the
performance of the ETH-CNN model fed with residual CTUs
and original CTUs. Note that original CTUs are replaced by
residual CTUs in both training and test procedures. Table VI
shows that the residual CTUs can improve the RD performance
with 5.461% BD-BR saving and 0.142dB BD-PSNR increase.
The cost is 1.12% − 2.24% increase in the encoding time.

ETH-CNN + LSTM vs. only ETH-CNN. In our ap-
proach, ETH-LSTM is a major contribution for inter-mode
HEVC complexity reduction. We thus show the performance
improvement of embedding the ETH-LSTM model in our
approach, i.e., the combination of the ETH-CNN and ETH-
LSTM models. Note that the residual CTUs are as the input
to the ETH-CNN model followed by the ETH-LSTM model.
As shown in Table VI, the ETH-LSTM model prominently
improves the RD performance with less than one half BD-
BR and BD-PSNR, and meanwhile has insigniﬁcant change
of the encoding time. This indicates the effectiveness of the
ETH-LSTM model in our approach. Besides, the ETH-LSTM
model introduces little computational time in our approach,
since Sections IV-E and V-C have investigated that the ETH-
LSTM model consumes much less ﬂoating-point operations
than the ETH-CNN model.

F. Performance Evaluation with Various Settings

Evaluation with different amount of training data. Since
the proposed approach is data-driven, it is necessary to evalu-
ate its performance when changing the amount of training data.

15

AI Config. : Images
AI Config. : Videos
LDP Config. : Videos

%

 
/
 

R
B
D
B

-

3.5

2.5

1.5

0.5

3

2

1

0

)

B
d
(
 
/
 

R
N
S
P
D
B

-

-0.05

-0.1

-0.15

-0.2

u ll

S e t - F

1 / 2

S e t -

1 / 4

S e t -

1 / 8

S e t -

0

AI Config.
LDP Config.

AI Config.
LDP Config.

AI Config.
LDP Config.

%

 
/
 
e
t
a
r
t
i
b
 
∆

4

2

0

-2

B
d
 
/
 

R
N
S
P
∆

 

0.05

0

-0.05

-0.1

-0.15

%

 
/
 

 

T
∆

-30

-40

-50

-60

-70

AI Config. : Images
AI Config. : Videos
LDP Config. : Videos

22

27

32

37

22

27

32

37

22

27

32

37

QP

QP

QP

Fig. 12. Curves for ∆bitrate, ∆PSNR and ∆T of our approach at different
QPs. The square marks are the results at four anchored QPs, and the cross
marks represent the results at other QPs.

u ll

S e t - F

1 / 2

S e t -

1 / 4

S e t -

1 / 8

S e t -

Fig. 11. RD performance with different training sets. At the AI conﬁguration,
Set-1/2, Set-1/4 and Set-1/8 contain 850, 425 and 213 images, respectively.
At the LDP conﬁguration, those are 42, 21 and 11 video sequences.

For intra- and inter-modes, the 1700 training images and 83
training sequences in our CPH-Intra and CPH-Inter databases
are regarded as the full training sets, namely Set-Full. For
either intra- or inter-mode, three smaller training sets are
generated via randomly selecting 1/2, 1/4 and 1/8 of images
or videos from the corresponding Set-Full, namely Set-1/2,
Set-1/4 and Set-1/8, respectively. Afterwards, the ETH-CNN
and ETH-LSTM models are retrained on Set-1/2, Set-1/4 and
Set-1/8, respectively. Fig. 11 shows the RD performance of
our approach, when changing the amount of training data (i.e.,
Set-full, Set-1/2, Set-1/4 and Set-1/8). Note that the results
are averaged over all test images or all test sequences at QPs
22, 27, 32 and 37. We can observe in Fig. 11 that BD-BR
decreases and BD-PSNR increases along with the increased
amount of training data, for both AI (i.e., intra-mode) and
LDP (i.e., inter-mode) conﬁgurations. Therefore, the large-
scale CPH databases are essential to achieve the desirable RD
performance.

Generalization capability at different QPs. In addi-
tion to four QPs evaluated above (QP = 22, 27, 32, 37),
we further test our approach for reducing complexity of
intra- and inter-mode HEVC at other eight QPs, i.e., QP =
20, 24, 26, 28, 30, 34, 36, 38. To test the generalization capa-
bility of our approach, we directly use the ETH-CNN and
ETH-LSTM models trained at four original QPs (i.e., QP = 22,
27, 32, 37) without re-training on the sequences compressed at
other QPs. Fig. 12 illustrates the bit-rate difference (∆bitrate),
PSNR loss (∆PSNR) and time reduction (∆T ) of our approach
at different QPs, for complexity reduction of HEVC at both
AI and LDP conﬁgurations. Note that the results are averaged
over all test video sequences. In this ﬁgure, the square marks
denote the test results at four original QPs, whereas the cross
marks mean the test results at eight other QPs (the sequences
compressed at these QPs are not used for training). As shown
in Fig. 12-left and -middle, ∆bitrate and ∆PSNR at each of
other QPs (i.e., cross marks) are close to those of the adjacent
original QPs (i.e., square marks), with only slight ﬂuctuation.
This indicates the generalization capability of our approach at
different QPs. Besides, we can see from Fig. 12-right that the
higher QPs result in larger reduction rate of encoding time.

Evaluation at LDB and RA conﬁgurations. We further
evaluate the performance of our approach for HEVC com-
plexity reduction at the LDB and RA conﬁgurations. In our
experiments, the ETH-CNN and ETH-LSTM models for both
conﬁgurations were retrained from the training sequences at

TABLE VII
RESULTS FOR SEQUENCES OF THE JCT-VT TEST SET (LDB & RA)

Conﬁg.

Approach

BD-BR
(%)
1.840
4.312
3.458
1.722
2.319
6.246
6.101
1.483

BD-PSNR
(dB)
-0.057
-0.144
-0.109
-0.053
-0.074
-0.210
-0.204
-0.048

∆T (%)

QP=22
-29.57
-32.07
-45.76
-39.76
-42.50
-40.96
-40.17
-43.14

QP=27
-45.69
-38.68
-46.98
-47.43
-48.17
-49.17
-41.98
-51.64

QP=32
-44.91
-48.03
-47.67
-54.72
-51.89
-55.41
-43.20
-59.55

QP=37
-44.12
-57.11
-48.99
-59.84
-51.13
-61.10
-43.02
-64.07

[8]
[7]
[10]
Our
[8]
[7]
[10]
Our

LDB

RA

the corresponding conﬁgurations in our CPH-Inter database.
For the LDB conﬁguration, the experimental settings followed
those for the LDP conﬁguration. For the RA conﬁguration, we
slightly modiﬁed our approach to reduce HEVC complexity.
Speciﬁcally, the length of ETH-LSTM was 32 for both training
and test at the RA conﬁguration, in accord with the period
between two adjacent I frames. Here, the training samples
were non-overlapping instead of the 10-frame overlapping
used in the LDP conﬁguration, ensuring all frames of the
training samples locate in the same period within two adjacent
random access points. Besides, the order of frames fed into
ETH-LSTM followed the order of encoding rather than that of
displaying. Table VII shows the performance of our and other
state-of-the-art approaches for HEVC complexity reduction at
the LDB and RA conﬁgurations. Similar to the above evalua-
tion, the results in this table are averaged over all 18 standard
video sequences from the JCT-VC test set [2]. As shown in Ta-
ble VII, our approach at the RA conﬁguration is able to reduce
43.14% ∼ 64.07% encoding time while incurring 1.483% of
BD-BR increment and 0.048dB of BD-PSNR loss, similar to
those at the LDP conﬁguration (−43.84% ∼ −62.94% of
∆T , 1.495% of BD-BR and −0.046dB of BD-PSNR). More
importantly, our approach outperforms other state-of-the-art
approaches [8], [7] and [10] in terms of both encoding time
and RD performance. At the LDB conﬁguration, similar results
can be found. Therefore, the effectiveness of our approach at
the LDB and RA conﬁgurations is veriﬁed.

Evaluation on sequences with drastic scene change. In
practice, drastic scene change may occur in videos. Thus,
we further evaluate the performance of our approach on the
sequences that have scene change, under the LDP and RA
conﬁgurations. Among the 18 JCT-VC test sequences [2],
only sequence Kimono (1920×1080) has drastic scene change.
Hence, in addition to Kimono, two sequences with drastic
scene change, Tennis (1920×1080) and Mobisode (832×480),
were tested in our experiments. Table IV of the Supporting
Document shows the overall performance of our and other

approaches, averaged over all frames of each sequence at QP
= 22, 27, 32, and 37. We can see from this table that our
approach outperforms other approaches for sequences with
scene change. Moreover, in the Supporting Document we
further compare the results of our and other approaches in
the scene changed frames of the above three sequences, and
the results show that our approach is robust to scene change.

VII. CONCLUSIONS

In this paper, we have proposed a deep learning approach
to reduce the encoding complexity of intra- and inter-mode
HEVC, which learns to predict
the optimal CU partition
instead of using conventional brute-force RDO search. To
deepen the networks of our deep learning approach, the CPH-
Intra and CPH-Inter database was established, consisting of
large-scale data of HEVC CU partition at intra- and inter
modes, respectively. Then, two deep learning architectures,
i.e., ETH-CNN and ETH-LSTM, were proposed to predict
the CU partition for reducing the HEVC complexity at the
intra- and inter-modes. The output of these architectures is
HCPM, which hierarchically represents the CU partition in a
CTU. Upon the representation of HCPM, an early termination
mechanism was introduced in ETH-CNN and ETH-LSTM to
save the computational time. The experimental results show
that our deep learning approach performs much better than
other state-of-the-art approaches in terms of both complexity
reduction and RD performance.

There are three promising directions for future works. Our
work, at the current stage, mainly focuses on predicting the
CU partition to reduce the HEVC encoding complexity. Other
components, such as PU and TU prediction, can also be re-
placed by deep learning models to further reduce the encoding
complexity of HEVC. This is an interesting future work. In
the deep learning area, various techniques have been proposed
to accelerate the running speed of deep neural networks. Our
deep learning approach may be sped up by applying these
acceleration techniques, which is seen as another promising
future work. Beyond the CPU implementation of the current
work, our approach may be further implemented in the FPGA
device in future, for practical applications.

REFERENCES

[1] G. J. Sullivan, J. R. Ohm, W. J. Han and T. Wiegand, “Overview of the
high efﬁciency video coding (HEVC) standard,” IEEE Transactions on
Circuits and Systems for Video Technology, vol. 22, no. 12, pp. 1649–
1668, Dec. 2012.

[2] G. Corrˆea, P. Assuncao, L. Agostini, and L. A. da Silva Cruz, “Per-
formance and computational complexity assessment of high-efﬁciency
video encoders,” IEEE Transactions on Circuits and Systems for Video
Technology, vol. 22, no. 12, pp. 1899–1909, Dec. 2012.

[3] JCT-VC,

“HM

Software,”

[Online].

Available:

https://hevc.hhi.fraunhofer.de/svn/svn HEVCSoftware/tags/HM-16.5/,
2014, [Accessed 5-Nov.-2016].

[4] J. Leng, L. Sun, T. Ikenaga and S. Sakaida, “Content based hierarchical
fast coding unit decision algorithm for HEVC,” in 2011 International
Conference on Multimedia and Signal Processing, 2011.

[5] J. Xiong, H. Li, Q. Wu, and F. Meng, “A fast HEVC inter CU selection
method based on pyramid motion divergence,” IEEE Transactions on
Multimedia, vol. 16, no. 2, pp. 559–564, Feb. 2014.

[6] X. Shen, L. Yu and J. Chen, “Fast coding unit size selection for HEVC
based on Bayesian decision rule,” in 2012 Picture Coding Symposium,
2012.

16

[7] G. Corrˆea, P. A. Assuncao, L. V. Agostini and L. A. da Silva Cruz,
“Fast HEVC encoding decisions using data mining,” IEEE Transactions
on Circuits and Systems for Video Technology, vol. 25, no. 4, pp. 660–
673, Apr. 2015.

[8] Y. Zhang, S. Kwong, X. Wang, H. Yuan, Z. Pan and L. Xu, “Machine
learning-based coding unit depth decisions for ﬂexible complexity
allocation in high efﬁciency video coding,” IEEE Transactions on Image
Processing, vol. 24, no. 7, pp. 2225–2238, Jul. 2015.

[9] Z. Liu, X. Yu, Y. Gao, S. Chen, X. Ji, and D. Wang, “CU partition mode
decision for HEVC hardwired intra encoder using convolution neural
network,” IEEE Transactions on Image Processing, vol. 25, no. 11, pp.
5088–5103, Nov. 2016.

[10] T. Mallikarachchi, D. S. Talagala, H. K. Arachchi and A. Fernando,
“Content-adaptive feature-based CU size prediction for fast low-delay
video encoding in HEVC,” IEEE Transactions on Circuits and Systems
for Video Technology, pp. 1–13, Oct. 2017.

[11] L. Zhu, Y. Zhang, Z. Pan, R. Wang, S. Kwong and Z. Peng, “Binary
and multi-class learning based low complexity optimization for HEVC
encoding,” IEEE Transactions on Broadcasting, pp. 1–15, Jun. 2017.

[12] T. Li, M. Xu and X. Deng, “A deep convolutional neural network
approach for complexity reduction on intra-mode HEVC,” in 2017 IEEE
International Conference on Multimedia and Expo (ICME), Jul. 2017.
[13] S. Cho and M. Kim, “Fast CU splitting and pruning for suboptimal CU
partitioning in HEVC intra coding,” IEEE Transactions on Circuits and
Systems for Video Technology, vol. 23, no. 9, pp. 1555–1564, Sept. 2013.
[14] N. Kim, S. Jeon, H. J. Shim, B. Jeon, S. C. Lim and H. Ko, “Adaptive
keypoint-based CU depth decision for HEVC intra coding,” in 2016
IEEE International Symposium on Broadband Multimedia Systems and
Broadcasting (BMSB), 2016.

[15] M. U. K. Khan, M. Shaﬁque and J. Henkel, “An adaptive complexity
reduction scheme with fast prediction unit decision for HEVC intra
encoding,” in 2013 IEEE International Conference on Image Processing,
2013.

[16] H. M. Yoo and J. W. Suh, “Fast coding unit decision algorithm based
on inter and intra prediction unit termination for HEVC,” in 2013 IEEE
International Conference on Consumer Electronics (ICCE), 2013.
[17] C. Kiho and E. S. Jang, “Early TU decision method for fast video
encoding in high efﬁciency video coding,” Electronics Letters, vol. 48,
no. 12, pp. 689–691, Jun. 2012.

[18] J. Cui, S. Wang, S. Wang, X. Zhang, S. Ma and W. Gao, “Hybrid
Laplace distribution-based low complexity rate-distortion optimized
quantization,” IEEE Transactions on Image Processing, vol. 26, no. 8,
pp. 3802–3816, Aug 2017.

[19] K. Miyazawa, T. Murakami, A. Minezawa and H. Sakate, “Complex-
ity reduction of in-loop ﬁltering for compressed image restoration in
HEVC,” in 2012 Picture Coding Symposium, 2012.

[20] H. Zhang and Z. Ma, “Fast intra mode decision for high-efﬁciency video
coding (HEVC),” IEEE Transactions on Circuits and Systems for Video
Technology, vol. 24, no. 4, pp. 660–668, Apr. 2014.

[21] J. Vanne, M. Viitanen, and T. Hamalainen, “Efﬁcient mode decision
schemes for HEVC inter prediction,” IEEE Transactions on Circuits
and Systems for Video Technology, vol. 24, no. 9, pp. 1579–1593, Sept.
2014.

[22] L. Shen, Z. Zhang and Z. Liu, “Effective CU size decision for HEVC
intracoding,” IEEE Transactions on Image Processing, vol. 23, no. 10,
pp. 4232–4241, Oct. 2014.

[23] C. S. Park, “Edge-based intramode selection for depth-map coding in
3D-HEVC,” IEEE Transactions on Image Processing, vol. 24, no. 1, pp.
155–162, Jan 2015.

[24] Q. Hu, Z. Shi, X. Zhang and Z. Gao, “Fast HEVC intra mode decision
based on logistic regression classiﬁcation,” in 2016 IEEE Interna-
tional Symposium on Broadband Multimedia Systems and Broadcasting
(BMSB), 2016.

[25] D. Liu, X. Liu and Y. Li, “Fast CU size decisions for HEVC intra frame
coding based on support vector machines,” in 2016 IEEE 14th Intl Conf
on Dependable, Autonomic and Secure Computing (DASC), 2016.
[26] T. Laude and J. Ostermann, “Deep learning-based intra prediction mode
decision for HEVC,” in 2016 Picture Coding Symposium (PCS), Dec.
2016, pp. 1–5.

[27] H. S. Kim and R. H. Park, “Fast CU partitioning algorithm for
HEVC using an online-learning-based Bayesian decision rule,” IEEE
Transactions on Circuits and Systems for Video Technology, vol. 26,
no. 1, pp. 130–138, Jan. 2016.

[28] H. R. Tohidypour, H. Bashashati, M. T. Pourazad and P. Nasiopoulos,
“Online-learning based mode prediction method for quality scalable
extension of the high efﬁciency video coding (HEVC) standard,” IEEE

17

Transactions on Circuits and Systems for Video Technology, pp. 1–13,
Jun. 2016.

[29] J. F. de Oliveira and M. S. Alencar, “Online learning early skip decision
method for the HEVC inter process using the SVM-based Pegasos
algorithm,” Electronics Letters, vol. 52, no. 14, pp. 1227–1229, Jun.
2016.

[30] F. Duanmu, Z. Ma and Y. Wang, “Fast mode and partition decision using
machine learning for intra-frame coding in HEVC screen content coding
extension,” IEEE Journal on Emerging and Selected Topics in Circuits
and Systems, vol. 6, no. 4, pp. 517–531, Dec. 2016.

[31] S. Momcilovic, N. Roma, L. Sousa and I. Milentijevic, “Run-time
machine learning for HEVC/H.265 fast partitioning decision,” in 2015
IEEE International Symposium on Multimedia (ISM), Dec. 2015, pp.
347–350.

[32] B. Du, W. C. Siu and X. Yang, “Fast CU partition strategy for HEVC
intra-frame coding using learning approach via random forests,” in
2015 Asia-Paciﬁc Signal and Information Processing Association Annual
Summit and Conference (APSIPA), Dec. 2015, pp. 1085–1090.

[33] Y. Shan and E. h. Yang, “Fast HEVC intra coding algorithm based
on machine learning and Laplacian transparent composite model,” in
2017 IEEE International Conference on Acoustics, Speech and Signal
Processing (ICASSP), Mar. 2017, pp. 2642–2646.

[34] D.-T. Dang-Nguyen, C. Pasquini, V. Conotter, and G. Boato, “RAISE:
A raw images dataset for digital image forensics,” in Proceedings of the
6th ACM Multimedia Systems Conference, 2015, pp. 219–224.

[35] F. Bossen, “Common test conditions and software reference conﬁgu-
rations,” Joint Collaborative Team on Video Coding, document Rec.
JCTVC-L1100, Jan. 2013.

[36] M. Xu, X. Deng, S. Li and Z. Wang, “Region-of-interest based con-
versational HEVC coding with hierarchical perception model of face,”
IEEE Journal of Selected Topics in Signal Processing, vol. 8, no. 3, pp.
475–489, Jun. 2014.

[37] J.-R. Ohm, G. J. Sullivan, H. Schwarz, T. K. Tan, and T. Wiegand, “Com-
parison of the coding efﬁciency of video coding standards including high
efﬁciency video coding (HEVC),” IEEE Transactions on Circuits and
Systems for Video Technology, vol. 22, no. 12, pp. 1669–1684, Dec.
2012.
[38] Xiph.org,

“Xiph.org

media,”

video

test

https://media.xiph.org/video/derf/, 2017.

[39] G.E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and R.R.
Salakhutdinov, “Improving neural networks by preventing co-adaptation
of feature detectors,” Computer Science, vol. 3, no. 4, pp. 212–223,
2012.

[40] X. Glorot, A. Bordes and Y. Bengio, “Deep sparse rectiﬁer neural
networks,” in 2016 IEEE International Workshop on Acoustic Signal
Enhancement (IWAENC), vol. 15, 2011.

Corporation,

X
[41] LanOC
[Online].
7900X
https://lanoc.org/review/cpus/7566-intel-core-x-series-i9-7900x-and-i7-7740x?showall=&start=2,
2017, [Accessed 8-Aug.-2017].

i9-
Available:

i7-7740X,”

Series

“Intel

Core

and

[42] G. Bjøntegaard, “Calculation of avarage PSNR difference between RD-

curves,” in ITU-T, VCEG-M33, Austin, TX, USA, Apr. 2001.

Reducing Complexity of HEVC: A Deep Learning
Approach

Mai Xu, Senior Member, IEEE, Tianyi Li, Zulin Wang, Xin Deng, Ren Yang and Zhenyu Guan

1

8
1
0
2
 
r
a

M
 
2
2
 
 
]

V
C
.
s
c
[
 
 
3
v
8
1
2
1
0
.
0
1
7
1
:
v
i
X
r
a

Abstract—High Efﬁciency Video Coding (HEVC) signiﬁcantly
reduces bit-rates over the preceding H.264 standard but at
the expense of extremely high encoding complexity. In HEVC,
the quad-tree partition of coding unit (CU) consumes a large
proportion of the HEVC encoding complexity, due to the brute-
force search for rate-distortion optimization (RDO). Therefore,
this paper proposes a deep learning approach to predict the
CU partition for reducing the HEVC complexity at both intra-
and inter-modes, which is based on convolutional neural network
(CNN) and long- and short-term memory (LSTM) network. First,
we establish a large-scale database including substantial CU
partition data for HEVC intra- and inter-modes. This enables
deep learning on the CU partition. Second, we represent the CU
partition of an entire coding tree unit (CTU) in the form of a
hierarchical CU partition map (HCPM). Then, we propose an
early-terminated hierarchical CNN (ETH-CNN) for learning to
predict the HCPM. Consequently, the encoding complexity of
intra-mode HEVC can be drastically reduced by replacing the
brute-force search with ETH-CNN to decide the CU partition.
Third, an early-terminated hierarchical LSTM (ETH-LSTM) is
proposed to learn the temporal correlation of the CU partition.
Then, we combine ETH-LSTM and ETH-CNN to predict the
CU partition for reducing the HEVC complexity at inter-mode.
Finally, experimental results show that our approach outper-
forms other state-of-the-art approaches in reducing the HEVC
complexity at both intra- and inter-modes.

Index Terms—High efﬁciency video coding, complexity reduc-
long- and

tion, deep learning, convolutional neural network,
short-term memory network.

I. INTRODUCTION

The High Efﬁciency Video Coding (HEVC) standard [1]
saves approximately 50% of the bit-rate at similar video
quality compared to its predecessor, H.264/Advanced Video
Coding (AVC). This is achieved by adopting some advanced
video coding techniques, e.g., the quad-tree structure of the
coding unit (CU) partition. However, these techniques lead
to extremely high complexity of HEVC. As investigated by
[2], the encoding time of HEVC is higher than H.264/AVC
by 253% on average, making it impractical for implementa-
tion in multimedia applications. Therefore, it is necessary to
signiﬁcantly reduce the encoding complexity of HEVC with
ignorable loss in rate-distortion (RD) performance.

The past half decade has witnessed a great number of
approaches on encoding complexity reduction for HEVC. It is
found that the recursive process of the quad-tree CU partition
contributes to the largest proportion of the encoding time (at

M. Xu, T. Li, Z. Wang, R. Yang and Z. Guan are with the School of
Electronic and Information Engineering, Beihang University, Beijing, 100191
China. X. Deng is with Department of Department of Electrical and Electronic
Engineering, Imperial College London, SW7 2AZ, UK. This work was
supported by NSFC under grant number 61573037.

least 80% in the reference software HM [3]). Thus, most
HEVC complexity reduction approaches attempt to simplify
the process of the CU partition. The basic idea of these
approaches is to predict the CU partition in advance, instead
of the brute-force recursive RD optimization (RDO) search.
The early works for predicting the CU partition are heuristic
approaches such as in [4]–[6]. These heuristic approaches
explore some intermediate features to early determine the CU
partition before checking all possible quad-tree patterns. Since
2015, several machine learning approaches [7]–[11] have been
proposed to predict the CU partition toward HEVC complexity
reduction. For example, to reduce the complexity of inter-
mode HEVC, Zhang etal. [8] proposed a CU depth decision
approach with a three-level joint classiﬁer based on support
vector machine (SVM), which predicts the splitting of three-
sized CUs in the CU partition. To reduce the complexity of
intra-mode HEVC, Liu et al. [9] developed a convolutional
neural network (CNN) based approach that predicts the CU
partition. However, the structure of the CNN in [9] is shallow,
with limited learning capacity, and thus, it is insufﬁcient to
accurately model the complicated CU partition process. In this
paper, we propose a deep CNN structure for learning to predict
the intra-mode CU partition, thus reducing the complexity
of HEVC at intra-mode. In addition, all existing approaches,
including [8] and [9], do not explore the correlation of the
CU partition across neighboring frames. This paper develops
a long- and short-term memory (LSTM) structure to learn the
temporal dependency of the inter-mode CU partition. Then, a
deep learning approach is proposed to predict the CU partition
at inter-mode, which combines the CNN and LSTM structures.
Consequently, the encoding complexity of inter-mode HEVC
can be signiﬁcantly reduced.

Speciﬁcally, in this paper, we ﬁrst establish a large-scale
database for the CU partition, boosting studies on deep learn-
ing based complexity reduction in HEVC. Our database is
available online: https://github.com/HEVC-Projects/CPH. Our
database contains the data of the CU partition at both intra-
mode (2000 raw images compressed at four QPs) and inter-
mode (111 raw sequences compressed at four QPs). Next, we
propose a deep learning based complexity reduction approach
for both intra- and inter-mode encoding of HEVC, which
learns from our database to split an entire coding tree unit
(CTU). More speciﬁcally, we propose to efﬁciently represent
the CU partition of a CTU through the hierarchical CU
partition map (HCPM). Given sufﬁcient training data and
efﬁcient HCPM representation, the deep learning structures
of our approach are able to “go deeper”, such that extensive
parameters can be learned for exploring diverse patterns of

2

the CU partition. Accordingly, our deep learning approach
introduces an early-terminated hierarchical CNN (ETH-CNN)
structure, which hierarchically generates the structured HCPM
with an early-termination mechanism. The early-termination
mechanism introduced in ETH-CNN can save computational
time when running the CNN. ETH-CNN can be used to
reduce the encoding complexity of intra-mode HEVC. Our
approach further introduces an early-terminated hierarchical
LSTM (ETH-LSTM) structure for inter-mode HEVC. In ETH-
LSTM, the temporal correlation of the CU partition is learned
in LSTM cells. With the features of the ETH-CNN as the
input, ETH-LSTM hierarchically outputs HCPM by incor-
porating the learnt LSTM cells with the early-termination
mechanism. As such, our approach can also be used to reduce
the encoding complexity of inter-mode HEVC.

This paper was previously presented at the conference [12],
with the following extensions. Rather than the three-level CU
splitting labels of [12], HCPM is proposed in this paper
to hierarchically represent the structured output of the CU
partition. Based on the proposed HCPM representation, we
advance the deep CNN structure of [12] by introducing the
early-termination mechanism, for intra-mode HEVC complex-
ity reduction. More importantly, this paper further proposes
ETH-LSTM to reduce the HEVC complexity at inter-mode.
In contrast, our previous work [12] only addresses complexity
reduction in intra-mode HEVC. For learning ETH-LSTM, a
large-scale database of inter-mode CU partition is established
in this paper, whereas [12] only contains the database of intra-
mode CU partition. In brief, the main contributions of this
paper are summarized as follows.

• We establish a large-scale database for the CU partition
of HEVC at both intra- and inter-modes, which may
facilitate the applications of deep learning in reducing
HEVC complexity.

• We propose a deep CNN structure called ETH-CNN to
predict the structured output of the CU partition in the
form of HCPM, for reducing the complexity of intra-
mode HEVC.

• We develop a deep LSTM structure named ETH-LSTM
learns the spatio-temporal correlation of the CU
that
partition, for reducing the complexity of HEVC at inter-
mode.

This paper is organized as follows. Section II reviews the
related works on HEVC complexity reduction. Section III
presents the established CU partition database. In Sections IV
and V, we propose ETH-CNN and ETH-LSTM to reduce the
HEVC complexity at intra-mode and inter-mode, respectively.
Section VI reports the experimental results, and Section VII
concludes this paper.

II. RELATED WORKS

The existing HEVC complexity reduction works can be
generally classiﬁed into two categories: heuristic and learning-
based approaches. This section reviews the complexity reduc-
tion approaches in these two categories.

In heuristic approaches, the brute-force RDO search of the
CU partition can be simpliﬁed according to some intermediate

features. The representative approaches include [4]–[6], [13],
[14]. To be more speciﬁc, Leng etal. [4] proposed a CU depth
decision approach at the frame level, which skips certain CU
depths rarely found in the previous frames. At the CU level,
Xiong etal. [5] and Kim etal. [14] proposed deciding whether
to split CUs based on the pyramid motion divergence and
the number of high-frequency key-points, respectively. Shen
etal. [6] proposed selecting some crucial and computational-
friendly features, e.g., RD cost and inter-mode prediction error,
to early determine the splitting of each CU. Then, the CU
splitting is determined based on the rule of minimizing the
Bayesian risk. Also based on the Bayesian rule, Cho etal. [13]
developed a CU splitting and pruning approach according to
the features of full and low-complexity RD costs. In addition to
simpliﬁed the CU partition, various heuristic approaches [15]–
[18] were proposed to reduce the complexity of prediction unit
(PU) or transform unit (TU) partition. For example, Khan et
al. [15] proposed a fast PU size decision approach, which
adaptively integrates smaller PUs into larger PUs with regard
to video content. Yoo et al. [16] proposed estimating the PU
partition with the maximum probability, on account of the
coding block ﬂag (CBF) and RD costs of encoded PUs. In the
latest work of [18], the RDO quantization (RDOQ) process is
accelerated based on the transform coefﬁcients with a hybrid
Laplace distribution. In addition, other components of HEVC,
such as intra- and inter-mode prediction and in-loop ﬁltering,
are simpliﬁed to reduce the encoding complexity in [19]–[23].
Most recently, learning-based approaches [7]–[11], [24]–
[33] have ﬂourished for complexity reduction in HEVC. These
approaches utilize machine learning from extensive data to
generalize the rules of HEVC encoding components, instead of
a brute-force RDO search on these components. For example,
for intra-mode HEVC, [24] modeled the CU partition process
as a binary classiﬁcation problem with logistic regression, and
[25] proposed using SVM to perform classiﬁcation in the CU
partition process. As a result, the computational time of the
CU partition can be decreased using well-trained classiﬁcation
models instead of brute-force search. For inter-mode HEVC,
Corrˆea etal. [7] proposed three early termination schemes with
data mining techniques to simplify the decision on the optimal
CTU structures. In [8], several HEVC domain features that are
correlated with the CU partition were explored. Then, a joint
classiﬁer of SVM was proposed to utilize these features in
determining CU depths, such that the encoding complexity of
HEVC can be reduced because the brute-force RDO search is
skipped. Later, a binary and multi-class SVM algorithm [11]
was proposed to predict both the CU partition and PU mode
with an off-on-line machine learning mechanism. As such, the
encoding time of HEVC can be further saved. However, the
above learning-based approaches rely heavily on hand-crafted
features that are related to the CU partition.

For complexity reduction in HEVC, the CU partition-related
features can be automatically extracted by deep learning,
rather than manual extraction. The advantage of applying deep
learning for HEVC complexity reduction is that it can take
advantage of large-scale data to automatically mine extensive
features related to the CU partition, rather than the limited
hand-crafted features. Unfortunately, there are few deep learn-

ing works on the prediction of the CU partition. To the best of
our knowledge, the only approaches in this direction are [9],
[26], in which the CNN architectures have been developed
to predict intra-mode CU partition. The CNN architectures of
[9], [26] are not sufﬁciently deep due to a lack of training
data. For example, [9] only contains two convolutional layers
with 6 and 16 kernels sized 3 × 3. In contrast, we propose the
deep architectures of ETH-CNN and ETH-LSTM for HEVC
complexity reduction at both intra- and inter-modes.

Our approach differs from the above learning-based CU
partition prediction approaches in four aspects. (1) Compared
with the conventional three-level CU splitting labels as in [8],
[9], [11], [26], the HCPM is proposed to efﬁciently represent
the structured output of the CU partition. This can dramatically
reduce the computational time of the CU partition, since the
complete CU partition in a whole CTU can be obtained in
terms of one HCPM by running the trained ETH-CNN/ETH-
LSTM model only once. (2) A deep ETH-CNN structure is
designed to automatically extract features for predicting the
CU partition, instead of the handcrafted feature extraction in
[8], [11]. Besides, the deep ETH-CNN structure has much
more trainable parameters than the CNN structures of [9] and
[26], thus remarkably improving the prediction accuracy of the
CU partition. Additionally, the early-termination mechanism
proposed in our approach can further save computational time.
(3) A deep ETH-LSTM model is further developed for learning
long- and short-term dependencies of the CU partition across
frames for inter-mode HEVC. To our best knowledge, this is
a ﬁrst attempt to leverage LSTM for predicting CU partition
in HEVC complexity reduction. (4) To train the large amount
of parameters in ETH-CNN and ETH-LSTM, we establish a
large-scale database for the CU partition of HEVC at both
intra- and inter-modes. In contrast, other works only rely on
the existing JCT-VC database, much smaller than our database.
Our database may facilitate the future works of applying deep
learning in the CU partition prediction for reducing HEVC
complexity.

III. CU PARTITION DATABASE

A. Overview of CU Partition

The CTU partition structure

[1] is one of the major
contributions to the HEVC standard, with the CU partition
as the core process. The size of a CTU is 64×64 pixels by
default, and a CTU can either contain a single CU or be
recursively split into multiple smaller CUs, based on the quad-
tree structure. The minimum size of a CU is conﬁgured before
encoding, with the default being 8×8. Thus, the sizes of the
CUs in the CTU are diverse, ranging from 64×64 to 8×8. Note
that the maximal CTU sizes can be extended to be larger than
64×64, e.g., 128×128.

As we know,

the sizes of the CUs in each CTU are
determined using a brute-force RDO search, which includes a
top-down checking process and a bottom-up comparison pro-
cess. Fig. 1 illustrates the RD cost checking and comparison
between a parent CU and its sub-CUs. In the checking process,
the encoder checks the RD cost of the whole CTU, followed by
checking its sub-CUs, until reaching the minimum CU size.

3

Check RD cost of a parent CU

Do not split, if 

paR

(cid:116)(cid:166)
sub
R
m

pa

R

4

m

1
(cid:32)

paR

sub

1R

sub

2R

sub

3R

sub

4R

Split, if 

(cid:31)(cid:166)
sub
R
m

pa

R

4

m

1
(cid:32)

sub

1R

sub

2R

sub

3R

sub

4R

Check RD cost of each sub-CU
(a) checking process

(b) comparison process

paR

sub

mR

Parent CU

Sub-CU 
with index m

RD cost
checking

RD cost
comparison

Fig. 1. Illustration of checking and comparing RD cost between a parent CU
and its sub-CUs. Note that this illustration can be applied to the splitting of
64 × 64 → 32 × 32, 32 × 32 → 16 × 16 or 16 × 16 → 8 × 8.

In Fig. 1, the RD cost of a parent CU is denoted as Rpa,
and the RD costs of its sub-CUs are denoted as Rsub
m , where
m ∈ {1, 2, 3, 4} is the index of each sub-CU. Afterwards,
based on the RD costs of CUs and sub-CUs, the comparison
process is conducted to determine whether a parent CU should
m < Rpa, the
be split. As shown in Fig. 1 (b), if
parent CU needs to be split; otherwise, it is not split. Note
that the RD cost of the split ﬂag is also considered when
deciding whether to split the CU. After the full RDO search,
the CU partition with the minimum RD cost is selected.

4
m=1 Rsub

P

It is worth noting that the RDO search is extremely time-
consuming, mainly attributed to the recursive checking pro-
cess. In a 64×64 CTU, 85 possible CUs are checked, including
1, 4, 42 and 43 CUs with sizes of 64×64, 32×32, 16×16
and 8×8. To check the RD cost of each CU, the encoder
needs to execute pre-coding for the CU, in which the possible
prediction and transformation modes have to be encoded. More
importantly, the pre-coding has to be conducted for all 85
possible CUs in the standard HEVC, consuming the largest
proportion of the encoding time. However, in the ﬁnal CU
partition, only certain CUs are selected, from 1 (if the 64×64
CU is not split) to 64 (if the whole CTU is split into 8×8
CUs). Therefore, the pre-coding of 84 CUs (i.e., 85-1) at most
and 21 CUs (i.e., 85-64) at least can be avoided through the
accurate prediction of the CU partition.

B. Database Establishment for Intra-mode

In this section, we present our large-scale database for
the CU Partition of HEVC at Intra-mode: the CPH-Intra
database. To the best of our knowledge, our database is the
ﬁrst database on the CU partition patterns. To establish the
CPH-Intra database, 2000 images at resolution 4928×3264
were selected from the Raw Images Dataset (RAISE) [34].
These 2000 images were randomly divided into training (1700
images), validation (100 images) and test (200 images) sets.
Furthermore, each set was equally divided into four subsets:
one subset was with original resolution, and the other three
sets were down-sampled to 2880×1920, 1536×1024 and
768×512. As such, our CPH-Intra database contains images
at different resolutions. This ensures sufﬁcient and diverse
training data for learning to predict the CU partition.

Next, all images were encoded by the HEVC reference
software HM 16.5 [3]. Here, four QPs {22, 27, 32, 37} were
applied to encode at the All-Intra (AI) conﬁguration with the
ﬁle encoder intra main.cfg [35]. After encoding, the binary
labels indicating splitting (=1) and non-splitting (=0) can be
obtained for all CUs, and each CU with its corresponding
binary label is a sample in our database. Finally, there are
110,405,784 samples collected in the CPH-Intra database.
These samples are split into 12 sub-databases according to
their QP value and CU size, as reported in Table I-(a) of
the Supporting Document. As shown in this table, the total
percentage of split CUs (49.2%) is close to that of non-split
CUs (50.8%) over the whole database.

C. Database Establishment for Inter-mode

We further establish a database for the CU Partition of
HEVC at Inter-mode:
the CPH-Inter database. For estab-
lishing the CPH-Inter database, 111 raw video sequences
were selected, therein consisting of 6 sequences at 1080p
(1920×1080) from [36], 18 sequences of Classes A ∼ E
from the Joint Collaborative Team on Video Coding (JCT-VC)
standard test set [37], and 87 sequences from Xiph.org [38] at
different resolutions. As a result, our CPH-Inter database con-
tains video sequences at various resolutions: SIF (352×240),
CIF (352×288), NTSC (720×486), 4CIF (704×576), 240p
(416× 240), 480p (832×480), 720p (1280×720), 1080p,
WQXGA (2560×1600) and 4K (4096×2160). Note that the
NTSC sequences were cropped to 720×480 by removing the
bottom edges of the frames, considering that only resolutions
in multiples of 8×8 are supported. Moreover, if the durations
of the sequences are longer than 10 seconds, they were clipped
to be 10 seconds.

In our CPH-Inter database, all the above sequences were
divided into non-overlapping training (83 sequences), valida-
tion (10 sequences) and test (18 sequences) sets. For the test
set, all 18 sequences from the JCT-VC set [37] were selected.
Similar to the CPH-Intra database, all sequences in our CPH-
Inter database were encoded by HM 16.5 [3] at four QPs
{22, 27, 32, 37}. They were compressed with the Low Delay P
(LDP) (using encoder lowdelay P main.cfg), the Low Delay
B (LDB) (using encoder lowdelay main.cfg) and the Random
Access (RA) (using encoder randomaccess main.cfg) conﬁg-
urations, respectively. Consequently, 12 sub-databases were
obtained for each conﬁguration, corresponding to different
QPs and CU sizes. As reported in Table I-(b), -(c) and -(d) of
the Supporting Document, totally 307,831,288 samples were
collected for the LDP conﬁguration in our CPH-Inter database.
Besides, 275,163,224 and 232,095,164 samples were collected
in total in our database for the LDB and RA conﬁgurations,
respectively.

IV. COMPLEXITY REDUCTION FOR INTRA-MODE HEVC

A. Hierarchical CU Partition Map

According to the CU partition structure in HEVC, four
different CU sizes are supported by default, i.e., 64 × 64,
32×32, 16×16 and 8×8, corresponding to four CU depths, 0,
1, 2 and 3. Note that a CU of size ≥ 16×16 can be either split

Level  1

Level  2

UU

y
1(

(cid:32)U

) 1

y
1(

(cid:32)U

) 0

U1U1

U2U2
...

UU

U3U3
...
(cid:32)U
) 1

(

1

y
2

U4U4
...
(cid:32)U
1(

) 0

y
2

U1,1U1,1

U1,2U1,2

U1,3U1,3

...

U1,4U1,4

U1U1

Level  3

...
(cid:32)U
(
) 1

1,1

y
3

...

y
3

(cid:32)U
(

) 0

1,1

U1,1,1U1,1,1

U1,1,2U1,1,2

U1,1,3U1,1,3

U1,1,4U1,1,4

U1,1U1,1

Fig. 2.

Illustration of three-level CU classiﬁer.

4

UU
UUU

CU 64×64
CU 64×64
Depth 0
Depth 0

UiUi
UiUiUi
CU 32×32
CU 32×32
Depth 1
Depth 1

Ui,jUi,j
Ui,jUi,jUi,j

CU 16×16
CU 16×16
Depth 2
Depth 2

Ui,j,kUi,j,k
Ui,j,kUi,j,kUi,j,k

CU 8×8
CU 8×8
Depth 3
Depth 3

or not split. As illustrated in Fig. 2, the overall CU partition
can be regarded as a combination of binary labels {yl}3
l=1 at
three levels, where l ∈ {1, 2, 3} represents the level on which
the split decision is made. In particular, l = 1 indicates the
ﬁrst level, which determines whether to split a 64 × 64 CU
into 32×32 CUs. Similarly, l = 2 is the second level to decide
whether a 32 × 32 CU is split into 16 × 16 CUs, and l = 3 is
for 16 × 16 into 8 × 8.

i=1 denote whether {Ui}4

j=1. Similarly, the labels {y3(Ui,j)}4

Given a CTU, we assume that the CU of depth 0 is denoted
as U. For U, the ﬁrst-level label y1(U) indicates whether
U is split (= 1) or not (= 0). If U is split, its sub-CUs of
depth 1 are denoted as {Ui}4
i=1. Then, the second-level labels
{y2(Ui)}4
i=1 are split (= 1) or not (=
0). For each split Ui, its sub-CUs of depth 2 are represented
by {Ui,j}4
i,j=1 denote the
split labels of {Ui,j}4
i,j=1 at the third level, and for each split
Ui,j, its sub-CUs of depth 3 are {Ui,j,k}4
k=1. The subscripts
i, j, k ∈ {1, 2, 3, 4} are the indices of the sub-CUs split from
U, Ui and Ui,j , respectively. The above hierarchical labels for
the CU split are represented by the downward arrows in Fig.
2. The overall CU partition in a CTU is extremely complex,
due to the large number of possible pattern combinations. For
example, for a 64 × 64 U, if y1(U) = 1, it will be split into
four 32 × 32 CUs, i.e., {Ui}4
i=1. Since for each Ui there exist
1 + 24 = 17 splitting patterns in {Ui,j}4
j=1, the total number
of splitting patterns for U is 1 + 174 = 83522.

it

In HEVC, the labels {yl}3

l=1 are obtained with the time-
consuming RDO process, as mentioned in Section III-A.
They can be predicted at a much faster speed by machine
learning. However, due to the enormous patterns of the
CU partition (83,522 patterns, as discussed above),
is
intractable to predict the CU partition patterns by a simple
multi-class classiﬁcation in one step. Instead, the prediction
should be made step by step in a hierarchy to yield ˆy1(U),
{ˆy2(Ui)}4
i,j=1, which denote the predicted
y1(U), {y2(Ui)}4
i=1 and {y3(Ui,j )}4
i,j=1, respectively.
In typical machine learning based methods [8],

[9],
i=1 and
[24],
[25],
{ˆy3(Ui,j )}4
i,j=1 are predicted separately for CUs of size
64 × 64, 32 × 32 and 16 × 16. To determine the CU partition
for an entire CTU, the trained model needs to be invoked
multiple times, leading to repetitive computation overhead.

the binary labels ˆy1(U), {ˆy2(Ui)}4

i=1 and {ˆy3(Ui,j )}4

Level 1

Level 2

Level 3

Ground-truth
of HCPM 

y
1(

(cid:32)U

) 1

y

2

(cid:32)U

) 1

(

1

y

2

(cid:32)U

) 0

(

2

y

2

(cid:32)U

) 1

(

3

y

2

(cid:32)U

) 1

(

4

)

1,1

)

1,3

)

3,1

3

3

y U
(
= 1
y U
(
= 1
y U
(
= 1
y U
(
= 0

3

3

)

3,3

3

3

y U
(
= 1
y U
(
= 1
y U
(
= 0
y U
(
= 1

3

3

)

1,2

)

1,4

)

3,2

)

3,4

-

-

-

-

)

4,1

)

4,2

3

y U
(
= 1
y U
(
= 0

3

3

y U
(
= 0
y U
(
= 1

3

)

4,3

)

4,4

(a)

Feature

CU partition
for a CTU

 Prediction
from HCPM

y U
1(cid:214) (

)

y U
(cid:214) (
2

1

)

y U
(cid:214) (
2

2

)

y U
(cid:214) (
2

3

)

y U
(cid:214) (
2

4

)

y U
(cid:214) (
3

1,1

)

y U
(cid:214) (
3

1,2

)

y U
(cid:214) (
3

2,1

)

y U
(cid:214) (
3

)

2,2

y U
(cid:214) (
3

1,3

)

y U
(cid:214) (
3

1,4

)

y U
(cid:214) (
3

2,3

)

y U
(cid:214) (
3

)

2,4

y U
(cid:214) (
3

3,1

)

y U
(cid:214) (
3

3,2

)

y U
(cid:214) (
3

4,1

)

y U
(cid:214) (
3

)

4,2

y U
(cid:214) (
3

3,3

)

y U
(cid:214) (
3

3,4

)

y U
(cid:214) (
3

4,3

)

y U
(cid:214) (
3

)

4,4

(b)

Fig. 3. An example of HCPM. (a) The ground-truth of HCPM for CU
splitting. (b) Modeling HCPM for prediction the CU splitting.

To overcome such a drawback, we develop an HCPM to
efﬁciently represent CU splitting as the structured output of
machine learning, such that the training model is run only
once for predicting the partition of the whole CTU. This way,
the computational time of determining the CU partition can
be dramatically reduced. In addition, the encoding complexity
can be decreased remarkably by bypassing the redundant RD
cost checking in the conventional HEVC standard.

Fig. 3 shows an example of HCPM, which arranges the
in a
labels of the CU splitting as the structured output
hierarchy. Speciﬁcally, HCPM hierarchically contains 1 × 1,
2 × 2 and 4 × 4 binary labels at levels 1, 2 and 3, respectively,
corresponding to y1(U), {y2(Ui)}4
i,j=1 for
ground-truth and ˆy1(U), {ˆy2(Ui)}4
i,j=1 for
prediction, respectively. Note that when U or Ui is not split,
the corresponding sub-CUs {Ui}4
j=1 do not ex-
ist. Accordingly, the labels of {y2(Ui)}4
j=1
are set to be null, denoted as “-” in the HCPM.

i=1 and {y3(Ui,j )}4
i=1 and {ˆy3(Ui,j )}4

i=1 or {y3(Ui,j )}4

i=1 or {Ui,j}4

B. ETH-CNN Structure for Learning HCPM

Next, a deep ETH-CNN structure is developed to learn
HCPM for predicting the CU partition of intra-mode HEVC.
According to the mechanism of the CU partition, the ETH-
CNN structure is designed in Fig. 4. We can see from this ﬁg-
ure that ETH-CNN is fed with an entire CTU, denoted by U,
and is able to hierarchically generate three branches of struc-
tured output, representing all predictions ˆy1(U), {ˆy2(Ui)}4
i=1
and {ˆy3(Ui,j )}4
i,j=1 of HCPM at three levels. Note that the
input CTU is extracted from raw images or sequences in
YUV format, and only the Y channel is used in ETH-CNN
as this channel contains most visual information. In contrast
to the conventional CNN structure, the mechanism of early
termination is introduced in ETH-CNN, which may early
terminate the three fully connected layers at the second and
third branches. In addition to the three fully connected layers,
the ETH-CNN structure is composed of two preprocessing
layers, three convolutional layers, and one concatenating layer.
In the following, we brieﬂy present the details of these layers.
• Preprocessing layers. The raw CTU is preprocessed
by mean removal and down-sampling in three paral-
lel branches {Bl}3
l=1, corresponding to three levels of
HCPM. Fig. 4 denotes mean removal and down-sampling
by {Nl}3
l=1, respectively. For mean removal,
at each branch, the input CTUs are subtracted by the

l=1 and {Sl}3

5

TABLE I
CONFIGURATION OF PROPOSED ETH-CNN

C1−1
C1−2
C1−3
C2−1
C2−2
C2−3
C3−1
C3−2
C3−3
f1−1
f1−2
f1−3
f2−1
f2−2
f2−3
ˆy1(U)
4
{ˆy2(Ui)}
i=1
4
{ˆy3(Ui,j )}
i,j=1
Total

Size

16×16
32×32
64×64
4×4
8×8
16×16
2×2
4×4
8×8
2688
2688
2688
65
129
257
49
97
193
-

Number of
Parameters
256
256
256
1,536
1,536
1,536
3,072
3,072
3,072
172,032
344,064
688,128
3,120
12,384
49,344
49
388
3,088
1,287,189

Number of
Additions
3,840
15,360
61,440
4,608
18,432
73,728
2,304
9,216
36,864
171,968
343,936
687,872
3,072
12,288
49,152
48
384
3,072
1,497,584

Number of
Multiplications
4,096
16,384
65,536
6,144
24,576
98,304
3,072
12,288
49,152
172,032
344,064
688,128
3,120
12,384
49,344
49
388
3,088
1,552,149

• Convolutional

mean intensity values to reduce the variation of the input
CTU samples. Speciﬁcally, at branch B1, the mean value
of U is removed in accordance with the single output
of ˆy1(U) at the ﬁrst level of HCPM. At branch B2,
four CUs {Ui}4
i=1 are subtracted by their corresponding
mean values, matching the 2 × 2 output of {ˆy2(Ui)}4
i=1
at the second level of HCPM. Similarly, {Ui,j}4
i,j=1 at
B3 also remove the mean values in each CU for the
4 × 4 output {ˆy3(Ui,j )}4
i,j=1 at the third level of HCPM.
Next, because CTUs of smaller depths generally possess
a smooth texture, U and {Ui}4
i=1 at branches B1 and B2
are down-sampled to 16 × 16 and 32 × 32, respectively.
This way, the outputs of the three-layer convolutions at
branches B1 and B2 are with the same sizes of HCPM at
levels 1 and 2, i.e., 1 × 1 at level 1 and 2 × 2 at level 2.
layers. In each branch Bl, all prepro-
cessed data ﬂow through three convolutional layers. At
each convolutional layer, the kernel sizes are the same
across different branches. Speciﬁcally, the data are con-
voluted with 4 × 4 kernels (16 ﬁlters in total) at the
ﬁrst convolutional layer to extract the low-level features
{C1−l}3
l=1 for the CU partition. Recall that l denotes
the level of the CU partition. At the second and third
layers, feature maps are sequentially convoluted twice
with 2 × 2 kernels (24 ﬁlters for the second layer and 32
ﬁlters for the third layer) to generate features at a higher
level, denoted by {C2−l}3
l=1, respectively.
We set the strides of all the above convolutions equal
to the widths of the corresponding kernels for non-
overlap convolutions, in accordance with non-overlap CU
splitting.

l=1 and {C3−l}3

• Concatenating layer. All feature maps at three branches,
yielded from the second and third convolutional layers,
are concatenated together and then ﬂattened into a vector
a. As shown in Fig. 4, the vectorized features of the
concatenating layer are gathered from 6 sources of feature
maps in total, i.e., {C2−l}3
l=1, to obtain a
variety of both global and local features. With the whole

l=1 and {C3−l}3

6

Layer 1

Layer 2 Layer 3 Layer 4 Layer 5 Layer 6 Layer 7 Layer 8 Layer 9

N1  64×64

S1 16×16

C1-1 
4×4×16

C2-1 
2×2×24

C3-1 
1×1×32

4×4

2×2

2×2

a  (2688)

f1-1 (64)

f2-1 (48)

y U
1(cid:214) (

)

QP

QP

HCPM

Level 1

Original
CTU 64×64

Luminance
CTU 64×64

U

N2  64×64

S2  32×32

C1-2 
8×8×16

C2-2 
4×4×24

C3-2
2×2×32

4×4

2×2

2×2

N3  64×64

S3  64×64

C1-3
16×16×16

C2-3
8×8×24

C3-3
4×4×32

4×4

2×2

2×2

Normalize
globally

1(cid:506)

Normalize
in 32×32 

2(cid:506)

Normalize
in 16×16

3(cid:506)

f1-2 (128)

f2-2 (96)

y
(cid:214){ (
2

U

4
)}i
i
1
(cid:32)

QP

QP

(     )
(     )

Level 1
Level 1
Level 1
split
split
split

Level 2

f1-3 (256)

f2-3 (192)

y
(cid:214){ (
3

U

4
)}i j
i j
,
,

1
(cid:32)

QP

QP

(     )
(     )

Level 2
Level 2
Level 2
split
split
split

Level 3

1(cid:506)

2(cid:506)

3(cid:506)

Mean-removal Down-sampling

Convolution Convolution Convolution

Concatenation

Full
Connection

Full
Connection

Full
Connection

Preprocessing

Fig. 4. Structure of ETH-CNN. For preprocessing and convolution, the size of the output at each layer is shown in black font, and the blue font indicates
the kernel size for convolution. At concatenation and fully connected layers, the number inside each bracket represents the vector length.

concatenating vector, features generated from the whole
CTU are all considered in the following fully connected
layers, rather than those only from the CUs in one branch,
to predict the CU partition of HCPM at each single level.
• Fully connected layers. Next, all features in the concate-
nated vector are processed in three branches {Bl}3
l=1,
also corresponding to three levels of HCPM. In each
branch, the vectorized features of the concatenating layer
pass through three fully connected layers, including two
hidden layers and one output layer. The two hidden fully
connected layers successively generate feature vectors
{f1−l}3
l=1, and the output layer produces HCPM as the
output of ETH-CNN. The numbers of features at these
layers vary with respect to l, so that the outputs have
1, 4 and 16 elements in B1, B2 and B3, serving as
the predicted binary labels of HCPM at the three levels
shown in Fig. 3 (b), i.e., ˆy1(U) in 1 × 1, {ˆy2(Ui)}4
i=1 in
2 × 2 and {ˆy3(Ui,j )}4
i,j=1 in 4 × 4. Moreover, QP also
has a signiﬁcant inﬂuence on the CU partition. As QP
decreases, more CUs tend to be split, and vice versa.
Therefore, QP is supplemented as an external feature
in the feature vectors {f1−l}3
l=1 for the full connection,
enabling ETH-CNN to be adaptive to various QPs in
predicting HCPM. In ETH-CNN, the early termination
may result in the calculation of the fully connected layers
at levels 2 and 3 being skipped, thus saving computation
time. Speciﬁcally, if U is decided not to be split at
i=1 of HCPM is
level 1,
terminated early at level 2. If {Ui}4
i=1 are all not split, the
{ˆy3(Ui,j , t)}4
i,j=1 at level 3 do not need to be calculated
for the early termination.

the calculation of {ˆy2(Ui)}4

• Other layers. During the training phase, after the ﬁrst
and second fully connected layers, features are randomly
dropped out [39] with probabilities of 50% and 20%,
respectively. It is worth mentioning that all convolutional
layers and hidden fully connected layers are activated
with rectiﬁed linear units (ReLU) [40]. Moreover, all the
output layers in {Bl}3
l=1 are activated with the sigmoid
function, since all the labels in HCPM are binary.
The speciﬁc conﬁguration of the ETH-CNN structure is pre-

sented in Table I, which lists the numbers of trainable param-
eters for obtaining different feature maps and vectors. We can
see from this table that there are in total 1,287,189 trainable
parameters for ETH-CNN. Thus,
the ETH-CNN structure
provides a much higher learning capacity, in comparison to
the only 1,224 trainable parameters in [9], which may cause
under-ﬁtting issues. Such abundant trainable parameters also
beneﬁt from the extensive training samples of our CPH-Intra
database (see Table I-(a) of the Supporting Document for the
number of training samples). Another major merit is that all
structured labels of HCPM are learned in the ETH-CNN model
with shared parameters, to predict y1(U), {y2(Ui)}4
i=1 and
{y3(Ui,j )}4
i,j=1. This design efﬁciently reduces the overall
computational complexity for predicting the CU partition,
compared with conventional learning-based approaches [8],
[9], [24], [25] that sequentially predict splitting labels from
64 × 64 CU partition to 16 × 16 CU partition.

C. Loss function for training ETH-CNN model

Given the above ETH-CNN structure, we concentrate on
the loss function for training the ETH-CNN model, which
is used to predict HCPM. Assume that there are R training
samples, the HCPM labels of which are {yr
i=1
and {yr
r=1. For each sample, the loss function
Lr sums the cross-entropy over all valid elements of HCPM
as follows:

1(U), {yr

3(Ui,j )}4

2(Ui)}4

i,j=1}R

Lr = H(yr

1(U), ˆyr

1(U)) +

H(yr

2(Ui), ˆyr

2(Ui))

Xi∈{1,2,3,4}
yr
2 (Ui)6=null
3(Ui,j ), ˆyr

3(Ui,j )),

H(yr

(1)

+

Xi,j∈{1,2,3,4}
yr
3 (Ui,j )6=null

i,j=1}R

2(Ui)}4

3(Ui,j )}4

1(U), {ˆyr

where {ˆyr
i=1 and {ˆyr
r=1 are the
labels of HCPM predicted by ETH-CNN. In (1), H(·, ·) de-
notes the cross-entropy between the ground-truth and predicted
labels. Considering that some ground-truth labels in HCPM do
not exist (such as {y3(U2,j)}4
j=1 in Fig. 3), only valid labels
with yr
3(Ui,j ) 6= null are counted in the
loss of (1).

2(Ui) 6= null and yr

7

109 frame

110 frame

113 frame

117 frame

121 frame

128 frame

129 frame

132 frame

136 frame

140 frame

(cid:857)

(cid:857)

(cid:857)

(cid:857)

(cid:857)

(cid:857)

Fig. 5. Two examples illustrating temporal CU partition correlation. Red patches represent CUs of the same depths as in the reference frame.

173 frame

177 frame

181 frame

169 frame

170 frame

Then, the ETH-CNN model can be trained by optimizing

(cid:857)

the loss function over all training samples:

L =

Lr.

1
R

R

Xr=1

(2)

Because the loss function of (1) and (2) is the sum of the
cross-entropies, the stochastic gradient descent algorithm with
momentum is applied to train the ETH-CNN model. Finally,
the trained ETH-CNN model can be used to predict the CU
partition of HEVC in the form of HCPM.

D. Bi-threshold Decision Scheme

Given an input CTU, ETH-CNN yields the probabilities for
the binary labels of ˆy1(U), ˆy2(Ui) and ˆy3(Ui,j ), to predict
the CU partition. Let P1(U), P2(Ui) and P3(Ui,j ) denote the
probabilities of ˆy1(U) = 1, ˆy2(Ui) = 1 and ˆy3(Ui,j ) = 1.
Typically, one decision threshold αl (= 0.5 in this paper) is set
for each level l of HCPM. Speciﬁcally, a CU with P1(U) > α1
is decided as being split into four CUs {Ui}4
i=1; otherwise,
it is not split. Similarly, P2(Ui) > α2 and P3(Ui,j ) > α3
make a positive decision on the splitting of Ui and Ui,j . This
remarkably reduces the encoding complexity by avoiding all
redundant RD cost comparison.

On the other hand, a false prediction of y1(U), y2(Ui)
or y3(Ui,j ) leads to RD degradation, as the optimal RD
performance is not achieved. To ameliorate this issue, we adopt
a bi-threshold CU decision scheme [11]. For each level of
HCPM, a splitting threshold αl and a non-splitting threshold
¯αl are set ( ¯αl ≤ αl). Then, the false prediction rate of the
ground-truth labels is reduced by introducing an uncertain
zone [¯αl, αl], where a parent CU (e.g., U, Ui or Ui,j) and
its four sub-CUs are all checked with the RD cost. Generally
speaking, if the uncertain zone becomes wider, more CUs tend
to be checked, such that the encoding complexity is increased
with decreased misclassiﬁcation of the CU splitting. Therefore,
a trade-off between RD performance and encoding complexity
can be achieved through the bi-threshold of [¯αl, αl].

The optimal thresholds of the uncertain zone [¯αl, αl] can

be obtained by traversing the combinations of {[¯αl, αl]}3
l=1
to reduce the encoding complexity as much as possible at
the constraint of the RD degradation. However, in practice,
both complexity reduction and RD degradation vary in a

(cid:857)

(cid:857)

large extent because of different encoding requirements and
diverse video contents. Thus, it is hard to ﬁnd one speciﬁc
threshold combination of {[¯αl, αl]}3
l=1 ﬁtting all encoding
requirements and video sequences. Instead, for the better
complexity-RD (CRD) performance, our bi-threshold scheme
follows [8] on account of the setting that the uncertain zones
of the CU partition at lower levels should be narrower. Similar
to [8], when the RD degradation is constrained in complexity
lower levels of the CU
reduction, the uncertain zones at
partition in our approach are supposed to be narrower, i.e.,
[¯α1, α1] ⊂ [¯α2, α2] ⊂ [¯α3, α3]. In addition,the upper and lower
thresholds of our bi-threshold scheme are set based on an
assumption that the upper and lower thresholds are symmetric
with regard to 0.5, i.e., ¯αl = 1 − αl for each level l. Note
that 0.5 is a widely used threshold for the conventional binary
classiﬁcation problems. Given this assumption, the settings
of thresholds can be simpliﬁed from six variables to three
variables for achieving the CRD trade-off. Moreover, this
assumption is reasonable, because the symmetry of the upper
and lower thresholds at 0.5 balances the prediction accuracy
for both split and non-split CUs.

E. Computational Complexity of ETH-CNN

In this section, we analyze the time complexity of ETH-
CNN via counting the number of ﬂoating-point operations,
including additions and multiplications. Note that all ﬂoating-
point operations in ETH-CNN are in single precision (32-bit).
The last two columns of Table I report the numbers of ﬂoating-
point operations for each layer of ETH-CNN and the total
number of ﬂoating-point operations required in ETH-CNN.
We can see that ETH-CNN performs a total of 3.05 × 106
ﬂoating-point operations, including 1,497,584 additions and
1,552,149 multiplications. ETH-CNN performs fewer ﬂoating-
point operations than Alex-Net (∼ 3 × 109 ﬂoating-point
operations) or VGG-Net (∼ 4×1010 ﬂoating-point operations)
by at least three orders of magnitude.

In Table I, early termination is not considered for counting
the total number of ﬂoating-point operations of ETH-CNN.
In practical compression, the early termination of ETH-CNN
can further reduce the time complexity. Here, we record the
average number of ﬂoating-point operations of ETH-CNN,
when compressing 18 standard JCT-VC sequences [37] at

i

t
n
e
c
i
f
f
e
o
C
 
n
o
i
t
a
e
r
r
o
C

l

i

t
n
e
c
i
f
f
e
o
C
 
n
o
i
t
a
e
r
r
o
C

l

t

i

n
e
c
i
f
f

e
o
C
n
o

 

i
t

l

a
e
r
r
o
C

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.6

0.55

0.5

0.45

0.4

0.35

0.3

0.25

0.2

QP=22, in 16*16
QP=27, in 16*16
QP=32, in 16*16
QP=37, in 16*16

QP=22, in 16*16
QP=27, in 16*16
QP=32, in 16*16
QP=37, in 16*16

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

QP=22, in 32*32
QP=27, in 32*32
QP=32, in 32*32
QP=37, in 32*32

QP=22, in 32*32
QP=27, in 32*32
QP=32, in 32*32
QP=37, in 32*32

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

QP=22, in 64*64
QP=27, in 64*64
QP=32, in 64*64
QP=37, in 64*64

QP=22, in 64*64
QP=27, in 64*64
QP=32, in 64*64
QP=37, in 64*64

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

r
o
r
r

E
 
d
e
r
a
u
q
S
 
n
a
e
M

1.6

1.4

1.2

1

0.8

0.6

0.4

1.8

1.6

1.4

1.2

1

0.8

0.6

0.4

2

1.8

1.6

1.4

1.2

1

0.8

0.6

5

0
25
Number of GOPs Between 2 Frames

10

15

20

5

0
25
Number of GOPs Between 2 Frames

10

15

20

Fig. 6. Temporal CU depth correlation versus distances of two frames for
inter-mode HEVC at four QP values. Left: Correlation coefﬁcient. Right:
Mean squared error.

intra-mode and QP = 32. We ﬁnd that 12.6% ﬂoating-point
operations can be saved due to the early termination mecha-
nism in ETH-CNN. Consequently, for compressing 1080p@30
Hz sequences, our approach requires ∼ 40.8 G single-precision
ﬂoating-point operations per second (FLOPS) for intra-mode
HEVC complexity reduction. The FLOPS of our approach
is far less than the computational capacity of an Intel(R)
Core(TM) i7-7700K CPU @4.2 GHz, which supports ∼
287.9 G double-precision FLOPS, as reported in [41]. In the
Supporting Document, time complexity of our approach on
ﬁeld programmable gate array (FPGA) implementation is also
analyzed. As analyzed, ETH-CNN only consumes less than 3
ms for one frame of 1080p sequences in the FPGA of Virtex
UltraScale+ VU13P.

V. COMPLEXITY REDUCTION FOR INTER-MODE HEVC

In this section, we ﬁrst analyze the temporal correlation of
the CU depth in inter-mode HEVC. Based on our analysis,
we then propose to predict the CU partition of inter-mode
HEVC, via designing the ETH-LSTM network. Finally, the
computational complexity of ETH-LSTM is analyzed.

A. Analysis on Temporal Correlation of CU Depth

Typically, the adjacent video frames exhibit similarity in
video content, and such similarity decays as the temporal dis-
tance of two adjacent frames increases. The same phenomenon
may also hold for the CU partition of inter-mode HEVC. Fig.

8

5 shows examples of the CU partition across adjacent frames
with different temporal distances. In this ﬁgure, we consider
the ﬁrst column as the reference. Then, the CU partition of
subsequent frames with different distances is compared to the
reference. In each CU, we highlight the same CU depth in
red. We can see from Fig. 5 that there exists high similarity in
the CU partition across neighboring frames, and the similarity
drops along with increasing temporal distance.

We further measure the similarity of the CU partition
in inter-mode HEVC over all 93 sequences in the training
and validation sets of our CPH-Inter database. Speciﬁcally,
we calculate the correlation of the CU depth between two
frames at various distances, ranging from 1 group of pictures
(GOP) to 25 GOPs. Such correlation is measured between
co-located units1 from two frames in terms of the linear
correlation coefﬁcient (CC) and mean squared error (MSE).
In our analysis, the results for the CC and MSE are averaged
over all frames of 93 sequences, which are shown in Fig. 6
for four QPs (QP = 22, 27, 32 and 37).

We can see from Fig. 6 that CC is always much larger
than 0, indicating the existence of a positive correlation on
the temporal CU depth. Moreover, the CC decreases alongside
increasing distance between two frames. Similar results hold
for MSE, as can be found in Fig. 6. Therefore, Fig. 6 implies
that there exist long- and short-term dependencies of the CU
partition across adjacent frames for inter-mode HEVC.

B. Deep LSTM Structure

As analyzed in Section V-A, the CU partition of neighboring
frames is correlated with each other. Thus, this section pro-
poses the ETH-LSTM approach, which learns the long- and
short-term dependencies of the CU partition across frames.
Fig. 7 illustrates the overall framework of ETH-LSTM. As
observed in Fig. 7, the input to ETH-LSTM is the residue
of each CTU. Here, the residue is obtained by precoding
the currently processed frame, in which both the CU and
PU sizes are forced to be 64×64. It is worth mentioning
that the computational time for precoding consumes less than
3% of the total encoding time, which is considered in our
approach as time overhead. Then, the residual CTU is fed
into ETH-CNN. For inter-frames, the parameters of ETH-CNN
are re-trained over the residue and ground-truth splitting of the
training CTUs from the CPH-Inter database. Next, the features
{f1−l}3
l=1 of ETH-CNN are extracted for frame t, and these
features are then fed into ETH-LSTM. Recall that {f1−l}3
l=1
are the features at Layer 7 of ETH-CNN.

Fig. 7 shows that three LSTMs in ETH-LSTM are arranged
in a hierarchy for determining the CU depths in the form
of HCPM. Speciﬁcally, the LSTM cells are at levels 1, 2
and 3, corresponding to three levels of HCPM: ˆy1(U, t),
{ˆy2(Ui, t)}4
i,j=1. Here, ˆy1(U, t) indi-
cates whether the CU U (size: 64×64, depth = 0 ) at frame t is
split. Similarly, {ˆy2(Ui, t)}4
i,j=1 denote
the splitting labels of CUs Ui (size: 32 × 32, depth = 1)

i=1 and {ˆy3(Ui,j , t)}4

i=1 and {ˆy3(Ui,j, t)}4

1Non-overlapping units with sizes of 64 × 64, 32 × 32 and 16 × 16 are
considered, corresponding to splitting depths of 0, 1 and 2. Note that 8 × 8
units are not measured, as an 8 × 8 CU is deﬁnitely split from a larger CU.

Input: residual CTU

Output: HCPM

TABLE II
CONFIGURATION OF ETH-LSTM

ETH-LSTM

ETH-
CNN

Level 1

LSTM
cell

y
1(cid:214) (

tU
, )
f'2-1 (t) (48)
f'1-1 (t) (64)

f1-1 (t) (64)

U
4
t
y
, )}
(cid:214){ (
i
i
2
1
(cid:32)
f'2-2 (t) ( 96 )
f'1-2 (t) (128)

Early 
termination

f1-2 (t) (128)

Level 2

Y

Level 1 split?

N

LSTM
cell

y
(cid:214){ (
3

U

4
t
, )}
i j
,

1
(cid:32)

i j
,

f'2-3 (t) (192)
f'1-3 (t) (256)

Early 
termination  

f1-3 (t) (256)

Y

Level 2 split?

N

LSTM
cell

t

Time steps

t+1

Level 3

t-1

QPQP

Picture 
Picture 
order
order
in GOP 
in GOP 
(one-hot)
(one-hot)

Feature 
Feature 
vectors
vectors

Fig. 7.
dimension of the vector.

Framework of ETH-LSTM. The number in each bracket is the

1−l(t) and f ′

and Ui,j (size: 16 × 16, depth = 2). At each level, two fully
connected layers follow the LSTM cells, which also include
the QP value and the order of frame t at GOP. Note that
the frame order is represented by a one-hot vector. For level
l at frame t, we denote f ′
2−l(t) as the output
features of the LSTM cell and the ﬁrst fully connected layer.
Additionally, the output of the second fully connected layer
is the probabilities of CU splitting, which are binarized to
predict HCPM2. However, if the LSTM cell at level 1 decides
not to split, the calculation of {ˆy2(Ui, t)}4
i=1 of HCPM is
terminated early at level 2, via skipping its two fully connected
layers. Instead, all indices of {ˆy2(Ui, t)}4
i=1 are set to be 0,
meaning that the CU depths at level 2 are 0. The calculation
of {ˆy3(Ui,j , t)}4
i,j=1 at level 3 is also terminated early in
a similar manner. Consequently, early termination is able to
reduce the computational time of ETH-LSTM. Finally, the
results of HCPM are output by ETH-LSTM, therein predicting
the partition patterns of a CTU at frame t.

When determining the HCPM of each CTU, the partition
patterns of the CTUs co-located at the previous frames can
be considered in ETH-LSTM. ETH-LSTM learns the long-
and short-term correlations of CU depths across frames, via
incorporating the LSTM cells at different levels. For learning
ETH-LSTM, each LSTM cell is trained separately using its
corresponding CUs. Next, we introduce the learning mecha-
nism of ETH-LSTM by taking the LSTM cell of frame t at
level l as an example. Such an LSTM cell works with three

2The binarization process is the same as that of ETH-CNN in Section IV-B.
The bi-threshold decision scheme of Section IV-D can also be applied for the
binarization process to achieve a trade-off between prediction accuracy and
complexity reduction.

9

Feature

Size

i1/o1/g1(t)
i2/o2/g2(t)
i3/o3/g3(t)
c1(t)
c2(t)
c3(t)
f ′
1−1(t)
f ′
1−2(t)
f ′
1−3(t)
f ′
2−1(t)
f ′
2−2(t)
f ′
2−3(t)
ˆy1(U, t)
4
{ˆy2(Ui, t)}
i=1
4
{ˆy3(Ui,j , t)}
i,j=1

Total

64
128
256
64
128
256
64
128
256
48
96
192
1
4
16
-

Number of
Parameters
8,192
32,768
131,072
8,192
32,768
131,072
0
0
0
3,312
12,768
50,112
53
404
3,152
757,929

Number of
Additions
8,128
32,640
130,816
8,255
32,895
131,327
63
127
255
3,264
12,672
49,920
52
400
3,136
757,118

Number of
Multiplications
8,192
32,768
131,072
8,320
33,024
131,584
64
128
256
3,312
12,768
50,112
53
404
3,152
759,273






gates: the input gate il(t), the output gate ol(t) and the forget
gate gl(t). Given the input ETH-CNN feature f1−l(t) and the
output feature f ′
1−l(t − 1) of the LSTM cell at the last frame,
these three gates can be obtained by

il(t) = σ(Wi · [f1−l(t), f ′
ol(t) = σ(Wo · [f1−l(t), f ′
gl(t) = σ(Wf · [f1−l(t), f ′

1−l(t − 1)] + bi)
1−l(t − 1)] + bo)
1−l(t − 1)] + bf )

(3)

where σ(·) stands for the sigmoid function. In the above
equations, Wi, Wo, Wf are trainable parameters for three
gates, and bi, bo and bf are their biases. With these three
gates, the LSTM cell updates its state at frame t as

cl(t) = il(t) ⊙ tanh(Wc ⊙ [f1−l(t), f ′
+ gl(t) ⊙ cl(t − 1),

1−l(t − 1)] + bc)

(4)
where ⊙ represents element-wise multiplication. In (4), Wc
and bc are parameters and biases for cl(t), which need to be
trained. Finally, the output of the LSTM cell f ′
1−l(t) can be
calculated as follows:

f ′

1−l(t) = ol(t) ⊙ cl(t).

(5)

Note that both cl(t) and f ′
length as f1−l(t).

1−l(t) are vectors with the same

The conﬁguration of ETH-LSTM with all trainable param-
eters is listed in Table II. For training the parameters of
the LSTM cells in the above equations, the cross-entropy is
applied as the loss function, the same as that for ETH-CNN
deﬁned in (1). Let Lr(t) be the loss for the r-th training CU
sample at frame t. Then, each LSTM cell among the three
levels of ETH-LSTM can be trained by optimizing the loss
over all R training samples alongside T frames,

L =

1
RT

R

T

Xr=1

Xt=1

Lr(t),

(6)

which is solved by the stochastic gradient descent algorithm
with momentum. Finally, given the trained LSTM cells, ETH-
LSTM can be used to generate HCPM for predicting the CU
partition at the inter-frames.

C. Computational Complexity of ETH-LSTM

As shown in the last two columns of Table II, there are in
total 757,118 additions and 759,273 multiplications for ETH-
LSTM, almost half of those for ETH-CNN. With the early
termination, the total number of ﬂoating-point operations in
Table II can be further reduced by 4.3% when running ETH-
LSTM for compressing 18 standard JCT-VC sequences at
QP = 32 (the inter-mode conﬁguration is the same as that
in the section of experimental results ). Because ETH-LSTM
requires the extracted features of ETH-CNN as the input, our
complexity reduction approach consumes in total 4.37 × 106
single-precision ﬂoating-point operations for a CTU. In other
words, our approach consumes 66.9 G single-precision FLOPS
for 1080p@30 Hz sequences, much less than the 287.9 G
double-precision FLOPS for an Intel(R) Core(TM) i7-7700K
CPU @4.2 GHz. As analyzed in the Supporting Document,
our approach requires less than 3 ms/frame running time in
the FPGA device of Virtex UltraScale+ VU13P.

VI. EXPERIMENTAL RESULTS

In this section, we present experimental results to validate
the effectiveness of our approach in reducing HEVC complex-
ity at both intra- and inter-modes. For evaluating performance
at intra-mode, we compare our approach with two state-of-
the-art approaches: the SVM based approach [8] and the CNN
based approach [9]. For evaluating performance at inter-mode,
we compare our approach to the latest approaches of [8],
[7] and [10]. In Section VI-A, we discuss the conﬁguration
of the experiments and the settings of our approach. In
Sections VI-B and VI-C, we compare the performance of
our and other approaches for intra- and inter-mode HEVC,
respectively. Finally, Section VI-D analyzes the running time
of our complexity reduction approach.

A. Conﬁguration and Settings

Conﬁguration of experiments. In our experiments, all
complexity reduction approaches were implemented in the
HEVC reference software HM 16.5 [3]. In HM 16.5, the AI
conﬁguration was applied with the default conﬁguration ﬁle
encoder intra main.cfg [35] for the performance evaluation
at intra-mode, and the LDP conﬁguration was used with the
default conﬁguration ﬁle encoder low delay P main.cfg [35]
for the performance evaluation at inter-mode. Here, four QP
values, {22, 27, 32, 37}, were chosen to compress the images
and video sequences. At both intra- and inter-modes, our
experiments were tested on 18 video sequences of the JCT-
VC standard test set [37]. Moreover, all 200 test images from
the CPH-Intra database were evaluated for intra-mode HEVC
complexity reduction. In our experiments, the Bjøntegaard
delta bit-rate (BD-BR) and Bjøntegaard delta PSNR (BD-
PSNR) [42] were measured to assess the RD performance.
Additionally, ∆T , which denotes the encoding time-saving
rate over the original HM, was used to measure the complexity
reduction. All experiments were conducted on a computer with
an Intel(R) Core (TM) i7-7700K CPU @4.2 GHz, 16 GB
RAM and the Windows 10 Enterprise 64-bit operating system.
Note that a GeForce GTX 1080 GPU was used to accelerate

10

the training speed, but it was disabled when testing the HEVC
complexity reduction.

Training Settings. In our complexity reduction approach,
two ETH-CNN models were trained from the training sets
of the CPH-Intra and CPH-Inter databases, corresponding
to intra- and inter-mode HEVC, respectively. In addition,
one ETH-LSTM model was trained from the training set
of the CPH-Inter database. In training these models,
the
hyper-parameters were tuned on the validation sets of the
CPH-Intra and CPH-Inter databases. Speciﬁcally, all trainable
parameters in ETH-CNN and ETH-LSTM were randomly
initialized, obeying the truncated normal distribution with zero
mean and standard deviation of 0.1. The batch size R for
training was 64, and the momentum of the stochastic gradient
descent algorithm was set to 0.9. To train the ETH-CNN
models, the initial learning rate was 0.01 and decreased by
1% exponentially every 2,000 iterations, and there were in
total 1,000,000 iterations. To train ETH-LSTM, the initial
learning rate was 0.1 and decreased by 1% exponentially
every 200 iterations, and the total number of iterations was
200,000. The length of the trained ETH-LSTM model was
T = 20. Moreover, at the LDP conﬁguration, the overlapping
of 10 frames was applied to generate the training samples of
the ETH-LSTM model. Such overlapping was introduced to
enhance the diversity of the training samples and meanwhile
augment the training data.

i.e.,

Test Settings. For the test, T was set equal to the number
of P frames in the sequence, where the internal information
of ETH-LSTM can propagate throughout the whole sequence
to leverage the long- and short-term dependencies. Note that
ETH-LSTM is invoked step-wise during the test,
the
hidden state and the output of frame t are calculated after the
processing of frame t − 1 is accomplished, instead of yielding
the output of all T frames at one time. For the bi-threshold
decision scheme, at intra-mode the values of the thresholds
were ¯αl = αl = 0.5 where l ∈ {1, 2, 3} is the CU depth. It is
because our approach is able to achieve sufﬁciently small loss
of RD performance at intra-mode and the bi-threshold decision
is not necessary. At inter-mode, we set [¯α1, α1] = [0.4, 0.6],
[¯α2, α2] = [0.3, 0.7] and [¯α3, α3] = [0.2, 0.8], corresponding
to the different CU depth of l ∈ {1, 2, 3}. Here, we followed
[8] to apply this bi-threshold setting, which can efﬁciently
enhance RD performance with desirable rate of complexity
reduction. The width of uncertain zone increases along with
increased level l of CU depth, since the smaller CU depth tends
to early bypass redundant checking of CUs in RD optimization
(RDO), which is achieved by a narrower uncertain zone
[¯αl, αl].

B. Performance Evaluation at Intra-mode

Evaluation on training performance. When predicting the
CU partition of intra-mode HEVC, our approach relies on
the training model of ETH-CNN, which is optimized by (2)
over the training set. Therefore, it is necessary to evaluate the
training performance of our approach at intra-mode. Fig. 8-(a)
shows the training loss along with iterations during the model
training of ETH-CNN. Note that the training loss is obtained

TABLE III
RESULTS FOR IMAGES FROM OUR CPH-INTRA TEST SET (AI)

Image
Source

Resolution

Appr.

∆T (%)

CPH-Intra
Test Set

768×512

1536×1024

2880×1920

4928×3264

Std. dev.

Best

Average

BD-BR
(%)
5.113
2.885
0.935
6.002
3.134
1.220
4.035
2.130
1.661
4.630
1.863
1.728
0.720
0.604
0.376
4.035
1.863
0.935
4.945
2.353
1.386

BD-PSNR
(dB)
-0.343
-0.210
-0.067
-0.374
-0.208
-0.081
-0.207
-0.115
-0.094
-0.209
-0.086
-0.082
0.076
0.064
0.011
-0.207
-0.086
-0.067
-0.284
-0.155
-0.081

[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our

TABLE IV
RESULTS FOR SEQUENCES OF THE JCT-VC TEST SET (AI)

Class

Sequence

Appr.

∆T (%)

A

PeopleOnStreet

Trafﬁc

B

Cactus

BasketballDrive

BQTerrace

Kimono

ParkScene

BasketballDrill

BQMall

PartyScene

RaceHorses

BasketballPass

BlowingBubbles

BQSquare

RaceHorses

FourPeople

C

D

E

Johnny

KristenAndSara

Std. dev.

Best

Average

BD-BR
(%)
9.627
3.969
2.366
6.411
4.945
2.549
8.923
6.018
4.265
6.627
4.815
1.842
7.533
6.021
2.265
5.212
2.382
2.592
3.630
3.417
1.956
9.818
12.205
2.863
9.646
8.077
2.089
7.383
9.448
0.664
7.220
4.422
1.973
10.054
8.401
1.842
6.178
8.328
0.622
12.342
2.563
0.913
8.839
4.953
1.320
9.077
8.002
3.110
12.182
7.956
3.822
13.351
5.478
3.460
2.553
2.603
1.020
3.630
2.382
0.622
8.559
6.189
2.247

BD-PSNR
(dB)
-0.492
-0.209
-0.126
-0.304
-0.240
-0.125
-0.244
-0.141
-0.121
-0.295
-0.267
-0.086
-0.248
-0.208
-0.077
-0.170
-0.082
-0.087
-0.149
-0.135
-0.081
-0.439
-0.538
-0.133
-0.486
-0.468
-0.111
-0.468
-0.672
-0.044
-0.379
-0.264
-0.108
-0.546
-0.457
-0.106
-0.373
-0.463
-0.039
-0.876
-0.211
-0.067
-0.487
-0.317
-0.075
-0.480
-0.439
-0.171
-0.474
-0.307
-0.153
-0.627
-0.265
-0.169
0.175
0.158
0.039
-0.149
-0.082
-0.039
-0.419
-0.316
-0.104

[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our
[25]
[9]
Our

11

s
s
o
L

4.5

3.5

4

3

2.5

2

0

AI Configuration
LDP Configuration

s
s
o
L

4.5

3.5

4

3

2.5

2

0

0.5

1
Iterations

1.5

2
×10 6

0.5

1
Iterations

1.5

2
×10 5

(a) ETH-CNN

(b) ETH-LSTM

Fig. 8. Training loss alongside iterations when learning the models of ETH-
CNN at intra-mode, ETH-CNN at inter-mode and ETH-LSTM. Note that the
training loss of intra-mode ETH-CNN is over the training set of CPH-Intra
database, while the training loss of inter-mode ETH-CNN and ETH-LSTM is
over the training set of CPH-Inter database.

through calculating (2) at each training iteration. We can see
from this ﬁgure that the loss converges after 5×105 iterations,
when training the ETH-CNN model at the AI conﬁguration.
Evaluation on prediction accuracy. First, we evaluate the
accuracy of the CU partition predicted by our ETH-CNN
approach, when compressing images/sequences with intra-
mode HEVC. In our experiments, the accuracy is averaged
over the CU partition results of 200 test images and 18 test
sequences, which are compressed by HM 16.5 at
the AI
conﬁguration and four QP values {22, 27, 32, 37}. We ﬁnd
from the experimental results that the average accuracy rates
for predicting the intra-mode CU partition at levels 1, 2 and 3
are 90.98%, 86.42% and 80.42%, respectively. These accuracy
rates are rather high, thus leading to a slight loss of RD
performance, as discussed below.

Comparison of complexity reduction. Next, we compare
our approach with [25] and [9] in complexity reduction,
when compressing images/sequences by HEVC at intra-mode.
Tables III and IV tabulate the complexity reduction results
in ∆T for 200 test images and 18 test sequences, respec-
tively. As observed in Table III, at QP = 22, 27, 32 and 37,
our approach reduces the encoding complexity by 64.01%,
66.09%, 68.11% and 70.52% on average, outperforming the
58.36%, 56.27%, 54.23% and 55.69% complexity reductions
in [25] and the 58.05%, 61.66%, 65.25% and 67.26% com-
plexity reductions in [9]. In addition, for most scenarios with
different QPs and sequences, our approach achieves a better
complexity reduction than the other two approaches. Note
that our ETH-CNN based approach requires less time than
the shallow CNN approach [9], because [9] requires an RDO
search for the decision on splitting from 64 × 64 to 32 × 32.
Our approach outperforms [25] and [9] in terms of maximal
∆T , for compressing the test images and video sequences
with intra-mode HEVC. More importantly, when applying our
approach and [9] in intra-mode compression of the test images
and video sequences, the standard deviations of ∆T are less
than 1
5 · |∆T |, indicating the stability of both approaches in
complexity reduction. For video sequences, similar results can
be found in Table IV. From Tables III and IV, we can further
observe that the gap in the time reduction between our and
other approaches increases along with increasing QP. This is
most likely because the increased QP leads to more large CUs,

QP=22
-59.43
-54.97
-51.10
-58.94
-55.84
-59.50
-57.03
-59.95
-70.91
-58.02
-61.43
-75.51
0.92
3.13
11.05
-59.43
-61.43
-75.51
-58.36
-58.05
-64.01

QP=22
-52.12
-50.79
-59.16
-37.11
-53.86
-66.48
-48.53
-68.50
-74.26
-67.32
-53.35
-52.02
-38.37
-58.18
-48.95
-34.51
-70.66
-80.40
-41.69
-60.27
-60.42
-46.65
-60.29
-42.47
-52.62
-47.08
-52.74
-63.84
-52.72
-37.27
-46.46
-50.52
-54.08
-43.69
-60.24
-54.87
-57.15
-54.62
-38.08
-61.45
-42.55
-44.13
-43.12
-52.86
-50.91
-53.52
-54.79
-65.30
-58.29
-62.92
-70.32
-54.44
-61.24
-72.76
9.42
7.10
12.67
-67.32
-70.66
-80.40
-50.05
-56.41
-56.92

QP=27
-54.70
-58.78
-55.16
-54.85
-59.46
-60.78
-52.79
-63.14
-74.48
-62.74
-65.27
-76.96
3.82
3.07
10.55
-62.74
-65.27
-76.96
-56.27
-61.66
-66.09

QP=27
-50.63
-53.87
-59.42
-25.36
-59.08
-70.98
-37.13
-68.55
-76.18
-63.09
-56.81
-65.57
-40.83
-61.01
-53.87
-43.21
-72.75
-84.32
-44.79
-65.10
-66.15
-58.86
-62.35
-45.16
-42.97
-51.15
-57.05
-49.82
-57.51
-41.94
-40.13
-59.30
-54.47
-41.03
-62.89
-56.64
-42.45
-60.45
-38.66
-62.40
-46.05
-45.08
-40.18
-57.32
-54.17
-40.88
-59.79
-72.08
-60.21
-65.51
-70.57
-56.94
-64.61
-74.53
10.16
6.24
12.96
-63.09
-72.75
-84.32
-46.72
-60.23
-60.38

QP=32
-48.74
-61.78
-57.31
-50.57
-62.43
-64.71
-52.31
-68.07
-76.06
-65.30
-68.70
-78.34
6.51
3.64
9.87
-65.30
-68.70
-78.34
-54.23
-65.25
-68.11

QP=32
-37.79
-56.58
-61.63
-19.63
-63.54
-71.85
-41.05
-70.30
-76.93
-59.57
-60.26
-68.25
-43.61
-64.94
-66.92
-49.88
-73.62
-84.45
-59.98
-68.57
-70.08
-47.66
-64.48
-62.11
-35.52
-53.26
-59.39
-31.50
-59.77
-43.78
-41.49
-59.81
-58.59
-37.46
-64.31
-56.93
-25.73
-62.55
-39.52
-58.99
-48.37
-46.57
-39.54
-58.80
-58.23
-26.12
-64.39
-72.99
-63.98
-67.71
-70.73
-56.05
-65.82
-75.98
13.04
6.09
11.96
-63.98
-73.62
-84.45
-43.09
-62.62
-63.61

QP=37
-44.83
-64.41
-62.18
-50.95
-64.17
-66.76
-59.51
-69.46
-78.47
-67.46
-71.00
-78.68
8.57
3.48
8.36
-67.46
-71.00
-78.68
-55.69
-67.26
-70.52

QP=37
-34.81
-61.15
-63.82
-33.38
-66.88
-73.85
-46.89
-70.70
-77.90
-36.48
-61.13
-73.05
-51.23
-67.78
-74.09
-63.58
-73.86
-84.97
-64.92
-70.16
-73.47
-62.53
-67.20
-62.17
-37.12
-57.05
-64.48
-26.88
-64.98
-55.00
-50.28
-63.15
-61.32
-36.69
-66.67
-57.23
-22.81
-65.48
-45.91
-46.86
-49.89
-47.48
-38.07
-60.20
-59.72
-24.34
-67.17
-74.86
-70.70
-70.05
-71.10
-62.61
-67.21
-76.17
15.01
5.63
10.75
-70.70
-73.86
-84.97
-45.01
-65.04
-66.47

12

0

)

B
d
(
 

R
N
S
P
D
B

-

-0.05

-0.1

-0.15

-0.2

-0.25

[9] CNN Based Approach
Proposed Approach

-60

-20

0

-40
∆T (%)

0

-20

-40

-60

)

%

(
 
T
∆

0

)

B
d
(
 

R
N
S
P
D
B

-

-0.05

-0.1

.50
.50
.50

.53
.58
.70

.62
.69
.81

.73
.80
.89

.83
.88
.94

.90
.93
.96
{αl}3

l=1

.94
.96
.98

.96
.97
.98

.97
.98
.99

.99
.99
.99

1.00
1.00
1.00

(l = 1)
(l = 2)
(l = 3)

.50
.50
.50

.53
.58
.70

.62
.69
.81

.73
.80
.89

.83
.88
.94

.90
.93
.96
{αl}3

l=1

.94
.96
.98

.96
.97
.98

.97
.98
.99

.99
.99
.99

1.00
1.00
1.00

(l = 1)
(l = 2)
(l = 3)

Fig. 9. CRD performance for intra-mode HEVC complexity reduction. Left and middle: Complexity reduction and RD performance at different uncertain
zones. No that the labels on horizontal axes are upper thresholds {αl}3
l=1, and the corresponding lower thresholds are ¯αl = 1 − αl for l ∈ {1, 2, 3}. Right:
Comparison of CRD performance between both approaches.

such that early termination in our ETH-CNN model works for
more CTUs, resulting in decreased running time. In summary,
our approach is capable of improving the time efﬁciency of
intra-mode HEVC.

Comparison of RD performance. The reduced complexity
of intra-mode HEVC is at the expense of an RD performance
loss. Here, we compare the RD performance of our and the
other two approaches in terms of BD-BR and BD-PSNR.
Tables III and IV report the BD-BR and BD-PSNR under
the three approaches, with the original HM as the anchor.
We can see from these tables that the BD-BR increase in
our ETH-CNN approach is on average 1.386% for images
and 2.247% for sequences, which signiﬁcantly outperforms
[25] (4.945% for images and 8.559% for sequences) and [9]
(2.353% for images and 6.189% for sequences). In addition,
our approach incurs −0.081 dB and −0.104 dB BD-PSNR for
images and sequences, respectively, which are far better than
the −0.284 dB and −0.419 dB of [25], and the −0.155 dB
and −0.316 dB of [9]. Our approach is also superior to [25]
and [9], in terms of both standard deviations and best values
of BD-BR and BD-PSNR. Thus, our approach performs best
among the three approaches in terms of RD performance. The
RD improvement of our approach is mainly due to the high
prediction accuracy of the CU partition, beneﬁting from the
deep ETH-CNN structure with sufﬁcient parameters learned
from our large-scale CPH-Intra database.

Comparison of complexity-RD performance. As men-
tioned in Section IV-D, the bi-threshold scheme can control
the RD performance and encoding complexity. Therefore,
we changed the uncertain zone [¯αl, αl] of the bi-threshold
scheme to assess the complexity-RD (CRD) performance of
our approach. As mentioned in Section IV-D,
[¯α1, α1] ⊂
[¯α2, α2] ⊂ [¯α3, α3] and ¯αl = 1 − αl exist for our bi-threshold
scheme. Therefore, the speciﬁc values of {[¯αl, αl]}3
l=1 at each
level l are determined by power functions for simplicity:

αl = 0.5 + 0.5d2−0.5l
¯αl = 0.5 − 0.5d2−0.5l

(cid:26)

l ∈ {1, 2, 3},

(7)

where d ∈ [0, 1] is the width of the uncertain zone at level
l = 2. Speciﬁcally, Fig. 9-left and -middle show the results
of the encoding complexity reduction and RD performance
degradation at different uncertain zones by adjusting d, for
intra-mode HEVC. The results are averaged over the JCT-
VC test sequences at QP = 22, 27, 32, and 37. In this ﬁgure,
the encoding complexity reduction is measured by ∆T (i.e.,
encoding time saving) and the RD performance degradation

is assessed by BD-PSNR. We can see from Fig. 9-left and
-middle that the absolute values of both ∆T and BD-PSNR
are increased when the uncertain zone of [ ¯αl, αl] becomes
narrower. This indicates that the trade-off between the RD
performance and encoding complexity can be controlled by
changing the uncertain zone [ ¯αl, αl]. In Fig. 9-right, we also
plot the CRD curves of our approach and the state-of-the-art
CNN based approach [9] by plotting the values of ∆T and
BD-PSNR, which are obtained at different uncertain zones
of [¯αl, αl]. This ﬁgure shows that the RD performance is
improved at less reduction of encoding complexity. This ﬁgure
further shows that our approach achieves a better RD perfor-
mance than [9] at the same encoding complexity reduction.

C. Performance Evaluation at Inter-mode

Evaluation on training performance. First, we evaluate
the training loss at different iterations when training the ETH-
CNN and ETH-LSTM models for inter-mode HEVC complex-
ity reduction. Fig. 8-(a) and -(b) illustrate the training loss
curves for ETH-CNN and ETH-LSTM, respectively. Here, the
loss values are obtained from (2) for training the ETH-CNN
model and from (6) for training the ETH-LSTM model. We
can see that both the ETH-CNN and LSTM models converge
at a fast speed. Additionally, at the LDP conﬁguration, the
training loss of the ETH-LSTM model converges to a smaller
value in predicting the CU partition of HEVC, compared with
the ETH-CNN model.

Evaluation on prediction accuracy. First, we evaluate
the accuracy of the CU partition predicted by ETH-LSTM
when compressing 18 test sequences using HEVC at the LDP
conﬁguration. The experimental results show that the average
accuracy rates of the inter-mode CU partition at three levels are
93.89%, 88.01% and 80.91%. These values are much higher
than the 90.21%, 82.62% and 79.42% of the three-level joint
SVM classiﬁer reported in [8]. Moreover, the accuracy rates of
the inter-mode CU partition are higher than those of the intra-
mode CU partition in our deep learning approach (reported in
Section VI-B) because of the temporal correlation of the CU
partition learned in ETH-LSTM.

Evaluation on complexity reduction. Next, we compare
our approach with the latest work of [8], [7] and [10] for
encoding complexity reduction in inter-mode HEVC. In Table
V, ∆T illustrates the complexity reduction rates of 18 test
sequences. As seen in this table, at QP = 22, 27, 32 and 37,
our approach can reduce the encoding complexity by 43.84%,

TABLE V
RESULTS FOR SEQUENCES OF THE JCT-VT TEST SET (LDP)

Class

Sequence

Appr.

∆T (%)

PeopleOnStreet

A

Trafﬁc

B

Cactus

BasketballDrive

BQTerrace

Kimono

ParkScene

BasketballDrill

BQMall

PartyScene

RaceHorses

BasketballPass

BlowingBubbles

BQSquare

RaceHorses

FourPeople

C

D

E

Johnny

KristenAndSara

Std. dev.

Best

Average

BD-BR
(%)
1.456
9.813
4.292
1.052
2.077
4.639
6.983
1.990
2.246
6.372
3.991
2.268
1.733
1.934
2.892
1.090
2.005
5.125
5.516
2.071
2.219
4.382
3.239
1.497
1.559
3.493
4.493
1.474
1.599
7.485
4.055
1.953
1.604
6.801
4.092
1.914
1.301
2.988
2.469
1.011
2.085
6.204
3.016
0.872
1.321
6.995
1.949
1.453
0.974
2.180
2.479
1.292
1.175
2.090
1.998
0.770
1.306
6.867
2.240
1.112
2.593
5.492
3.974
1.837
3.024
3.769
3.452
1.691
2.098
4.293
3.964
1.558
0.534
2.146
1.282
0.448
0.974
1.934
1.949
0.770
1.799
5.051
3.616
1.495

BD-PSNR
(dB)
-0.062
-0.400
-0.180
-0.045
-0.056
-0.119
-0.178
-0.052
-0.055
-0.145
-0.092
-0.052
-0.029
-0.028
-0.042
-0.017
-0.044
-0.105
-0.111
-0.043
-0.066
-0.128
-0.097
-0.048
-0.044
-0.098
-0.126
-0.042
-0.058
-0.266
-0.147
-0.072
-0.058
-0.239
-0.147
-0.071
-0.047
-0.107
-0.094
-0.039
-0.072
-0.215
-0.105
-0.032
-0.059
-0.310
-0.086
-0.066
-0.034
-0.078
-0.086
-0.044
-0.036
-0.062
-0.067
-0.028
-0.054
-0.281
-0.095
-0.047
-0.082
-0.165
-0.122
-0.052
-0.058
-0.079
-0.065
-0.038
-0.055
-0.113
-0.104
-0.045
0.013
0.100
0.037
0.014
-0.029
-0.028
-0.042
-0.017
-0.054
-0.163
-0.108
-0.046

QP=22
-35.26
-29.05
-39.32
-40.19
-43.66
-38.30
-48.71
-47.43
-33.61
-33.90
-40.77
-41.16
-32.15
-15.32
-45.49
-44.39
-33.24
-25.09
-43.92
-41.51
-41.68
-43.06
-46.21
-45.58
-38.88
-29.65
-43.93
-46.48
-36.96
-29.66
-44.00
-49.75
-39.48
-34.13
-40.73
-42.02
-31.34
-12.64
-42.75
-38.31
-36.39
-20.17
-36.14
-39.65
-31.74
-31.66
-36.80
-43.69
-23.81
-14.18
-35.52
-33.63
-24.80
-13.96
-45.19
-40.24
-29.48
-19.58
-34.81
-37.07
-58.11
-59.74
-53.81
-53.36
-59.16
-65.45
-55.45
-51.99
-59.90
-63.34
-52.68
-52.69
10.84
16.62
6.17
5.60
-59.90
-65.45
-55.45
-53.36
-38.31
-32.16
-43.67
-43.84

[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our
[8]
[7]
[10]
Our

QP=27
-42.53
-26.39
-40.46
-45.73
-57.25
-50.70
-52.22
-59.39
-48.72
-45.16
-44.36
-55.34
-41.84
-35.77
-47.80
-55.72
-47.21
-42.48
-49.32
-55.93
-52.39
-51.24
-47.70
-54.99
-47.36
-39.63
-45.53
-56.08
-43.63
-34.97
-41.93
-52.75
-43.32
-36.04
-39.05
-48.58
-34.49
-18.14
-38.35
-41.77
-39.58
-25.83
-33.56
-43.25
-33.89
-29.44
-31.04
-46.85
-27.92
-19.91
-31.21
-41.40
-31.02
-20.62
-34.69
-40.61
-29.34
-20.26
-27.72
-39.26
-67.79
-69.08
-56.60
-64.29
-72.00
-75.72
-58.49
-67.68
-69.46
-71.53
-55.75
-68.77
13.44
18.13
9.34
9.27
-72.00
-75.72
-58.49
-68.77
-46.10
-39.59
-43.10
-52.13

QP=32
-45.40
-31.28
-41.85
-50.02
-62.91
-61.39
-56.96
-65.00
-50.70
-52.16
-46.67
-60.18
-51.59
-58.41
-53.76
-67.97
-52.77
-53.95
-52.44
-61.56
-53.98
-57.77
-49.76
-59.53
-54.17
-53.37
-49.39
-63.25
-45.48
-43.46
-41.56
-57.63
-47.54
-46.16
-39.04
-54.50
-36.71
-28.75
-37.40
-49.00
-39.18
-33.28
-31.90
-48.65
-34.58
-33.39
-29.01
-50.66
-26.40
-31.71
-29.04
-50.21
-31.84
-43.86
-26.46
-49.33
-28.37
-25.37
-22.92
-43.14
-71.85
-74.29
-57.11
-67.89
-74.29
-81.45
-59.50
-71.34
-73.25
-77.57
-58.98
-72.19
14.82
17.18
12.04
8.84
-74.29
-81.45
-59.50
-72.19
-48.95
-49.31
-43.54
-57.89

QP=37
-46.32
-39.18
-43.99
-52.07
-58.04
-68.60
-60.03
-70.59
-47.62
-58.47
-48.67
-66.69
-49.80
-71.95
-56.01
-71.97
-50.00
-62.03
-53.60
-68.51
-53.27
-66.33
-50.01
-64.02
-49.50
-64.09
-51.86
-69.10
-42.93
-53.26
-41.99
-60.66
-43.84
-55.83
-39.92
-57.86
-33.40
-43.19
-37.89
-58.24
-37.80
-40.32
-32.97
-53.34
-33.59
-41.93
-25.80
-54.97
-18.11
-40.22
-26.03
-57.26
-27.88
-45.72
-26.09
-57.47
-32.78
-33.07
-20.09
-47.99
-67.62
-79.19
-58.12
-71.97
-73.91
-84.83
-59.82
-74.97
-70.55
-81.40
-58.77
-75.27
14.88
16.08
13.30
8.45
-73.91
-84.83
-60.03
-75.27
-46.50
-57.20
-43.98
-62.94

55

50

45

40

35

30

25

20

15

0.5

1

0

)

%

(
 

M
H

 
l

a
n
g
i
r

i

O

 
r
e
v
o

 

e
m
T

i

 
f

o

 

e
g
a

t

n
e
c
r
e
P

13

Running ETH-CNN
Encoding with ETH-CNN
1% Reference Line

Running ETH-CNN + ETH-LSTM
Encoding with ETH-CNN + ETH-LSTM
1% Reference Line

)

%

(
 

M
H

 
l

a
n
g
i
r

i

O

 
r
e
v
o

 

e
m
T

i

 
f

o

 

e
g
a

t

n
e
c
r
e
P

55

50

45

40

35

30

25

20

15

0.5

1

0

6

.

6

9

.

1
2

2

.

9
4

4

.

3
0
1

9

.

7
0
2

1

.

1
2

1

.

8
7

3

.

3
8
2

2

.

7
1
8

  4

s

6
1
V i d

o

e

V i d

4

s

2

o

*
e

3

0
  8
V i d

*
o

2

e

4
s

0

8
2
  1
V i d

*
s

0
o

8
e

2

7
  1

0

2
9
V i d

0

5

8

0
  2

1

s

*
o

0
e

1

g

*
0
6
I m a

6

0

0
  7
s
e
I m a

*

s

8

e

6

g

2

1

5
3
5
  1
I m a

1

s

*
e

6
g

4

2

0
8
8
  2
I m a

0

9

2

2

9
  4

1

s

*
e

0
g

4

6

2

3

*

8

(a) AI conﬁguration.

8

.

9

4

.

0
3

1

.

2
6

  4

s

o

e

V i d

0
s

4
o

2
e

*
6
1
V i d

4
o

2

*

e

3
  8
V i d

8

s

8

0
2
  1
V i d

*

o

0

e

0

2
  1

7
s

1
o

*
e

0
2
9
V i d

0

8
  2

0
s

6

5

2

.

9
2
1

3

.

3
4
2

0

0

6

1

*

0

(b) LDP conﬁguration.

Fig. 10. Time percentages for running our deep learning models and encoding
videos/images by HM with our complexity reduction approach, with the
original HM 16.5 as an anchor. Note the number in blue font next to each bar
indicates the real running time of ETH-CNN and ETH-CNN + ETH-LSTM
(in millisecond) for one frame.

52.13%, 57.89% and 62.94% on average. Such complexity
reduction rates are superior to the 38.31%, 46.10%, 48.95%
and 46.50% of [8], the 32.16%, 39.59%, 49.31% and 57.20%
of [7], and the 43.67%, 43.10%, 43.54% and 43.98% of [10].
In addition, our approach is able to reduce more complexity
than the other three approaches on most sequences under
different QPs and resolutions. This is mainly because our
approach is able to predict all the CU partition of an entire
CTU at a time in the form of HCPM, whereas the other
approaches need to run the classiﬁer several
times or to
check the RDO of some CU partition in splitting a CTU.
We can further see from Table V that our approach at the
LDP conﬁguration has the smallest standard deviations of ∆T
among all four approaches. This implies that our approach is
robust in reducing complexity of inter-mode HEVC. However,
the maximal complexity reduction of our approach is less
than that of [7] for inter-mode HEVC. Again, this implies the
robustness of our approach in complexity reduction of inter-
mode HEVC, since our approach has more average complexity
reduction than [7].

Evaluation on RD performance. In addition to complexity
reduction, RD performance is also a critical metric for eval-
uation. In our experiments, we compare RD performance of
all four approaches, in terms of BD-BR and BD-PSNR. Table
V tabulates BD-BR and BD-PSNR results of four approaches,
with the original HM as anchor. The BD-BR of our ETH-
LSTM approach is averagely 1.495%, better than 1.799% of
[8], 5.051% of [7] and 3.616% of [10]. On the other hand, the
BD-PSNR of our approach is −0.046 dB, which is superior
to −0.054dB of [8], −0.163dB of [7] and −0.108dB of [10].
Also, Table V shows that our approach is generally superior to
[8], [7] and [10] for both standard deviations and best values of
the RD loss (evaluated by BD-BR and BD-PSNR). Therefore,
our approach performs best in terms of RD, among all four
approaches. It is mainly attributed to the high accuracy of the
CU partition predicted by ETH-LSTM as discussed above.

D. Analysis on Running Time

We analyze the running time of our deep learning approach
by comparing with that of the original HM 16.5 [3]. Fig. 10
shows the time percentages of running ETH-CNN and ETH-

TABLE VI
RESULTS FOR ABLATION STUDY

Conﬁg.

Settings

AI

LDP

1. Shallow CNN [9]
2. Deep CNN [12]
3. ETH-CNN
1. ETH-CNN fed with
original CTUs
2. ETH-CNN fed with
residual CTUs
3. ETH-CNN fed with
residual CTUs + ETH-LSTM

BD-BR
(%)
6.189
2.249
2.247

BD-PSNR
(dB)
-0.316
-0.105
-0.104

QP=22
-56.41
-55.44
-56.92

∆T (%)

QP=27
-60.23
-58.23
-60.38

QP=32
-62.62
-60.12
-63.61

QP=37
-65.04
-63.79
-66.47

8.911

-0.248

-47.00

-55.10

-60.68

-65.53

3.450

-0.106

-44.76

-52.87

-58.54

-63.79

1.495

-0.046

-43.84

-52.13

-57.89

-62.94

CNN + ETH-LSTM relative to the original HM. It also plots
the time percentages of encoding with ETH-CNN and ETH-
CNN + ETH-LSTM, with the original HM as an anchor. The
number in blue font next to each bar in Fig.10 indicates the
absolute time3 of running ETH-CNN and ETH-CNN + ETH-
LSTM (in millisecond) for one frame. The results of Fig.
10 are obtained by averaging over all test images/sequences
with the same resolution at four QP values {22, 27, 32, 37}.
We can see from Fig. 10-(a) that ETH-CNN consumes less
than 1% of the time required by the original HM. Moreover,
ETH-CNN takes up a small portion of time when compress-
ing images/sequences by HM with our complexity reduction
approach. Hence, ETH-CNN4 introduces little time overhead
in reducing the complexity of intra-mode HEVC.

the LDP conﬁguration. Note that

As seen in Fig. 10-(b), ETH-CNN and ETH-LSTM achieve
shorter running time compared with the encoding time of
the
the original HM at
time proportion of ETH-CNN and ETH-LSTM in inter-mode
HEVC is far less than that of ETH-CNN in intra-mode HEVC,
since inter-mode HEVC has a signiﬁcantly longer encoding
time than intra-mode HEVC. Besides, Fig. 10-(b) shows that
the CU partition by our approach consumes relatively little
encoding time, when applying our deep learning approach for
complexity reduction in inter-mode HEVC.

E. Ablation Study

In this section, we conducted a series of ablation exper-
iments to analyze the impact of major components in the
proposed approach. In our ablation experiments, we started
from a simple CNN model and then added the components
stepwise, ﬁnally reaching the proposed approach. Table VI
reports the results of ablation experiments. Note that
the
ablation results are averaged over all 18 test sequences. In
the following, we discuss these ablation results in details.

Deep CNN structure vs. shallow CNN structure. In
our approach, a deep structure of CNN is developed, which
is signiﬁcantly deeper than the shallow CNN structure in
the state-of-the-art HEVC complexity reduction approach [9].
Such a deep CNN structure has been presented in the con-
ference version [12] of this paper, and it has similar structure

3Note that only one thread of CPU is used for the above running time,
in accord with the HM platform that is also implemented in one thread.
If enabling the multi-thread parallelism of CPU, the running time can be
drastically reduced.

4Although running ETH-CNN requires little time for each video frame,
a huge amount of time is taken for training the ETH-CNN model, as it is
trained from large-scale data. This can be done off-line, making our ETH-
CNN practical for complexity reduction in HEVC.

14

and comparable amount of trainable parameters to our ETH-
CNN model. Therefore, we analyze the impact of the deep
structure in our approach by comparing the results between
[12] and [9]. As can be seen in Table VI, the deep CNN
structure improves the RD performance for intra-mode HEVC
complexity reduction, which has 3.940% BD-BR saving and
0.211dB BD-PSNR increase over the shallow structure of [9].
The ETH-CNN model vs. the general classiﬁcation-
oriented CNN model. In the ETH-CNN model, the early-
terminated hierarchical (ETH) decision is proposed to predict
the CU partition, which replaces the conventional three-level
classiﬁcation of [12]. In fact, [12] is the conference version
of this paper, in which three deep networks of the CNN
model are invoked to predict the three-level classiﬁcation of
64 × 64, 32 × 32 and 16 × 16 CU partition, respectively.
Note that the CNN model of [12] has similar structure and
comparable amount of trainable parameters to our ETH-CNN
model. In our ablation experiments, we therefore compare the
results of the ETH-CNN model with those of the classiﬁcation-
oriented CNN model [12], to investigate the impact of the
ETH decision. We can see from Table VI that the ETH-CNN
model can save 1.48% − 3.49% encoding time over [12] for
intra-mode HEVC. This indicates the effectiveness of the ETH
decision proposed in this paper, which replaces the general
CNN model based classiﬁcation in [12].

Residual CTUs vs. original CTUs. For inter-mode HEVC
complexity reduction, we propose to feed the ETH-CNN
model with residual CTUs, rather than the original CTUs. In
our ablation experiments, we thus validate the effectiveness of
residual CTUs in our approach. To this end, we compare the
performance of the ETH-CNN model fed with residual CTUs
and original CTUs. Note that original CTUs are replaced by
residual CTUs in both training and test procedures. Table VI
shows that the residual CTUs can improve the RD performance
with 5.461% BD-BR saving and 0.142dB BD-PSNR increase.
The cost is 1.12% − 2.24% increase in the encoding time.

ETH-CNN + LSTM vs. only ETH-CNN. In our ap-
proach, ETH-LSTM is a major contribution for inter-mode
HEVC complexity reduction. We thus show the performance
improvement of embedding the ETH-LSTM model in our
approach, i.e., the combination of the ETH-CNN and ETH-
LSTM models. Note that the residual CTUs are as the input
to the ETH-CNN model followed by the ETH-LSTM model.
As shown in Table VI, the ETH-LSTM model prominently
improves the RD performance with less than one half BD-
BR and BD-PSNR, and meanwhile has insigniﬁcant change
of the encoding time. This indicates the effectiveness of the
ETH-LSTM model in our approach. Besides, the ETH-LSTM
model introduces little computational time in our approach,
since Sections IV-E and V-C have investigated that the ETH-
LSTM model consumes much less ﬂoating-point operations
than the ETH-CNN model.

F. Performance Evaluation with Various Settings

Evaluation with different amount of training data. Since
the proposed approach is data-driven, it is necessary to evalu-
ate its performance when changing the amount of training data.

15

AI Config. : Images
AI Config. : Videos
LDP Config. : Videos

%

 
/
 

R
B
D
B

-

3.5

2.5

1.5

3

2

1

0

0.5

)

B
d
(
 
/
 

R
N
S
P
D
B

-

-0.05

-0.1

-0.15

-0.2

u ll

S e t - F

1 / 2

S e t -

1 / 4

S e t -

1 / 8

S e t -

0

AI Config.
LDP Config.

AI Config.
LDP Config.

AI Config.
LDP Config.

%

 
/
 
e
t
a
r
t
i
b
 
∆

4

2

0

-2

B
d
 
/
 

R
N
S
P
∆

 

0.05

0

-0.05

-0.1

-0.15

%

 
/
 

 

T
∆

-30

-40

-50

-60

-70

AI Config. : Images
AI Config. : Videos
LDP Config. : Videos

22

27

32

37

22

27

32

37

22

27

32

37

QP

QP

QP

Fig. 12. Curves for ∆bitrate, ∆PSNR and ∆T of our approach at different
QPs. The square marks are the results at four anchored QPs, and the cross
marks represent the results at other QPs.

u ll

S e t - F

1 / 2

S e t -

1 / 4

S e t -

1 / 8

S e t -

Fig. 11. RD performance with different training sets. At the AI conﬁguration,
Set-1/2, Set-1/4 and Set-1/8 contain 850, 425 and 213 images, respectively.
At the LDP conﬁguration, those are 42, 21 and 11 video sequences.

For intra- and inter-modes, the 1700 training images and 83
training sequences in our CPH-Intra and CPH-Inter databases
are regarded as the full training sets, namely Set-Full. For
either intra- or inter-mode, three smaller training sets are
generated via randomly selecting 1/2, 1/4 and 1/8 of images
or videos from the corresponding Set-Full, namely Set-1/2,
Set-1/4 and Set-1/8, respectively. Afterwards, the ETH-CNN
and ETH-LSTM models are retrained on Set-1/2, Set-1/4 and
Set-1/8, respectively. Fig. 11 shows the RD performance of
our approach, when changing the amount of training data (i.e.,
Set-full, Set-1/2, Set-1/4 and Set-1/8). Note that the results
are averaged over all test images or all test sequences at QPs
22, 27, 32 and 37. We can observe in Fig. 11 that BD-BR
decreases and BD-PSNR increases along with the increased
amount of training data, for both AI (i.e., intra-mode) and
LDP (i.e., inter-mode) conﬁgurations. Therefore, the large-
scale CPH databases are essential to achieve the desirable RD
performance.

Generalization capability at different QPs. In addi-
tion to four QPs evaluated above (QP = 22, 27, 32, 37),
we further test our approach for reducing complexity of
intra- and inter-mode HEVC at other eight QPs, i.e., QP =
20, 24, 26, 28, 30, 34, 36, 38. To test the generalization capa-
bility of our approach, we directly use the ETH-CNN and
ETH-LSTM models trained at four original QPs (i.e., QP = 22,
27, 32, 37) without re-training on the sequences compressed at
other QPs. Fig. 12 illustrates the bit-rate difference (∆bitrate),
PSNR loss (∆PSNR) and time reduction (∆T ) of our approach
at different QPs, for complexity reduction of HEVC at both
AI and LDP conﬁgurations. Note that the results are averaged
over all test video sequences. In this ﬁgure, the square marks
denote the test results at four original QPs, whereas the cross
marks mean the test results at eight other QPs (the sequences
compressed at these QPs are not used for training). As shown
in Fig. 12-left and -middle, ∆bitrate and ∆PSNR at each of
other QPs (i.e., cross marks) are close to those of the adjacent
original QPs (i.e., square marks), with only slight ﬂuctuation.
This indicates the generalization capability of our approach at
different QPs. Besides, we can see from Fig. 12-right that the
higher QPs result in larger reduction rate of encoding time.

Evaluation at LDB and RA conﬁgurations. We further
evaluate the performance of our approach for HEVC com-
plexity reduction at the LDB and RA conﬁgurations. In our
experiments, the ETH-CNN and ETH-LSTM models for both
conﬁgurations were retrained from the training sequences at

TABLE VII
RESULTS FOR SEQUENCES OF THE JCT-VT TEST SET (LDB & RA)

Conﬁg.

Approach

BD-BR
(%)
1.840
4.312
3.458
1.722
2.319
6.246
6.101
1.483

BD-PSNR
(dB)
-0.057
-0.144
-0.109
-0.053
-0.074
-0.210
-0.204
-0.048

∆T (%)

QP=22
-29.57
-32.07
-45.76
-39.76
-42.50
-40.96
-40.17
-43.14

QP=27
-45.69
-38.68
-46.98
-47.43
-48.17
-49.17
-41.98
-51.64

QP=32
-44.91
-48.03
-47.67
-54.72
-51.89
-55.41
-43.20
-59.55

QP=37
-44.12
-57.11
-48.99
-59.84
-51.13
-61.10
-43.02
-64.07

[8]
[7]
[10]
Our
[8]
[7]
[10]
Our

LDB

RA

the corresponding conﬁgurations in our CPH-Inter database.
For the LDB conﬁguration, the experimental settings followed
those for the LDP conﬁguration. For the RA conﬁguration, we
slightly modiﬁed our approach to reduce HEVC complexity.
Speciﬁcally, the length of ETH-LSTM was 32 for both training
and test at the RA conﬁguration, in accord with the period
between two adjacent I frames. Here, the training samples
were non-overlapping instead of the 10-frame overlapping
used in the LDP conﬁguration, ensuring all frames of the
training samples locate in the same period within two adjacent
random access points. Besides, the order of frames fed into
ETH-LSTM followed the order of encoding rather than that of
displaying. Table VII shows the performance of our and other
state-of-the-art approaches for HEVC complexity reduction at
the LDB and RA conﬁgurations. Similar to the above evalua-
tion, the results in this table are averaged over all 18 standard
video sequences from the JCT-VC test set [2]. As shown in Ta-
ble VII, our approach at the RA conﬁguration is able to reduce
43.14% ∼ 64.07% encoding time while incurring 1.483% of
BD-BR increment and 0.048dB of BD-PSNR loss, similar to
those at the LDP conﬁguration (−43.84% ∼ −62.94% of
∆T , 1.495% of BD-BR and −0.046dB of BD-PSNR). More
importantly, our approach outperforms other state-of-the-art
approaches [8], [7] and [10] in terms of both encoding time
and RD performance. At the LDB conﬁguration, similar results
can be found. Therefore, the effectiveness of our approach at
the LDB and RA conﬁgurations is veriﬁed.

Evaluation on sequences with drastic scene change. In
practice, drastic scene change may occur in videos. Thus,
we further evaluate the performance of our approach on the
sequences that have scene change, under the LDP and RA
conﬁgurations. Among the 18 JCT-VC test sequences [2],
only sequence Kimono (1920×1080) has drastic scene change.
Hence, in addition to Kimono, two sequences with drastic
scene change, Tennis (1920×1080) and Mobisode (832×480),
were tested in our experiments. Table IV of the Supporting
Document shows the overall performance of our and other

approaches, averaged over all frames of each sequence at QP
= 22, 27, 32, and 37. We can see from this table that our
approach outperforms other approaches for sequences with
scene change. Moreover, in the Supporting Document we
further compare the results of our and other approaches in
the scene changed frames of the above three sequences, and
the results show that our approach is robust to scene change.

VII. CONCLUSIONS

In this paper, we have proposed a deep learning approach
to reduce the encoding complexity of intra- and inter-mode
HEVC, which learns to predict
the optimal CU partition
instead of using conventional brute-force RDO search. To
deepen the networks of our deep learning approach, the CPH-
Intra and CPH-Inter database was established, consisting of
large-scale data of HEVC CU partition at intra- and inter
modes, respectively. Then, two deep learning architectures,
i.e., ETH-CNN and ETH-LSTM, were proposed to predict
the CU partition for reducing the HEVC complexity at the
intra- and inter-modes. The output of these architectures is
HCPM, which hierarchically represents the CU partition in a
CTU. Upon the representation of HCPM, an early termination
mechanism was introduced in ETH-CNN and ETH-LSTM to
save the computational time. The experimental results show
that our deep learning approach performs much better than
other state-of-the-art approaches in terms of both complexity
reduction and RD performance.

There are three promising directions for future works. Our
work, at the current stage, mainly focuses on predicting the
CU partition to reduce the HEVC encoding complexity. Other
components, such as PU and TU prediction, can also be re-
placed by deep learning models to further reduce the encoding
complexity of HEVC. This is an interesting future work. In
the deep learning area, various techniques have been proposed
to accelerate the running speed of deep neural networks. Our
deep learning approach may be sped up by applying these
acceleration techniques, which is seen as another promising
future work. Beyond the CPU implementation of the current
work, our approach may be further implemented in the FPGA
device in future, for practical applications.

REFERENCES

[1] G. J. Sullivan, J. R. Ohm, W. J. Han and T. Wiegand, “Overview of the
high efﬁciency video coding (HEVC) standard,” IEEE Transactions on
Circuits and Systems for Video Technology, vol. 22, no. 12, pp. 1649–
1668, Dec. 2012.

[2] G. Corrˆea, P. Assuncao, L. Agostini, and L. A. da Silva Cruz, “Per-
formance and computational complexity assessment of high-efﬁciency
video encoders,” IEEE Transactions on Circuits and Systems for Video
Technology, vol. 22, no. 12, pp. 1899–1909, Dec. 2012.

[3] JCT-VC,

“HM

Software,”

[Online].

Available:

https://hevc.hhi.fraunhofer.de/svn/svn HEVCSoftware/tags/HM-16.5/,
2014, [Accessed 5-Nov.-2016].

[4] J. Leng, L. Sun, T. Ikenaga and S. Sakaida, “Content based hierarchical
fast coding unit decision algorithm for HEVC,” in 2011 International
Conference on Multimedia and Signal Processing, 2011.

[5] J. Xiong, H. Li, Q. Wu, and F. Meng, “A fast HEVC inter CU selection
method based on pyramid motion divergence,” IEEE Transactions on
Multimedia, vol. 16, no. 2, pp. 559–564, Feb. 2014.

[6] X. Shen, L. Yu and J. Chen, “Fast coding unit size selection for HEVC
based on Bayesian decision rule,” in 2012 Picture Coding Symposium,
2012.

16

[7] G. Corrˆea, P. A. Assuncao, L. V. Agostini and L. A. da Silva Cruz,
“Fast HEVC encoding decisions using data mining,” IEEE Transactions
on Circuits and Systems for Video Technology, vol. 25, no. 4, pp. 660–
673, Apr. 2015.

[8] Y. Zhang, S. Kwong, X. Wang, H. Yuan, Z. Pan and L. Xu, “Machine
learning-based coding unit depth decisions for ﬂexible complexity
allocation in high efﬁciency video coding,” IEEE Transactions on Image
Processing, vol. 24, no. 7, pp. 2225–2238, Jul. 2015.

[9] Z. Liu, X. Yu, Y. Gao, S. Chen, X. Ji, and D. Wang, “CU partition mode
decision for HEVC hardwired intra encoder using convolution neural
network,” IEEE Transactions on Image Processing, vol. 25, no. 11, pp.
5088–5103, Nov. 2016.

[10] T. Mallikarachchi, D. S. Talagala, H. K. Arachchi and A. Fernando,
“Content-adaptive feature-based CU size prediction for fast low-delay
video encoding in HEVC,” IEEE Transactions on Circuits and Systems
for Video Technology, pp. 1–13, Oct. 2017.

[11] L. Zhu, Y. Zhang, Z. Pan, R. Wang, S. Kwong and Z. Peng, “Binary
and multi-class learning based low complexity optimization for HEVC
encoding,” IEEE Transactions on Broadcasting, pp. 1–15, Jun. 2017.

[12] T. Li, M. Xu and X. Deng, “A deep convolutional neural network
approach for complexity reduction on intra-mode HEVC,” in 2017 IEEE
International Conference on Multimedia and Expo (ICME), Jul. 2017.
[13] S. Cho and M. Kim, “Fast CU splitting and pruning for suboptimal CU
partitioning in HEVC intra coding,” IEEE Transactions on Circuits and
Systems for Video Technology, vol. 23, no. 9, pp. 1555–1564, Sept. 2013.
[14] N. Kim, S. Jeon, H. J. Shim, B. Jeon, S. C. Lim and H. Ko, “Adaptive
keypoint-based CU depth decision for HEVC intra coding,” in 2016
IEEE International Symposium on Broadband Multimedia Systems and
Broadcasting (BMSB), 2016.

[15] M. U. K. Khan, M. Shaﬁque and J. Henkel, “An adaptive complexity
reduction scheme with fast prediction unit decision for HEVC intra
encoding,” in 2013 IEEE International Conference on Image Processing,
2013.

[16] H. M. Yoo and J. W. Suh, “Fast coding unit decision algorithm based
on inter and intra prediction unit termination for HEVC,” in 2013 IEEE
International Conference on Consumer Electronics (ICCE), 2013.
[17] C. Kiho and E. S. Jang, “Early TU decision method for fast video
encoding in high efﬁciency video coding,” Electronics Letters, vol. 48,
no. 12, pp. 689–691, Jun. 2012.

[18] J. Cui, S. Wang, S. Wang, X. Zhang, S. Ma and W. Gao, “Hybrid
Laplace distribution-based low complexity rate-distortion optimized
quantization,” IEEE Transactions on Image Processing, vol. 26, no. 8,
pp. 3802–3816, Aug 2017.

[19] K. Miyazawa, T. Murakami, A. Minezawa and H. Sakate, “Complex-
ity reduction of in-loop ﬁltering for compressed image restoration in
HEVC,” in 2012 Picture Coding Symposium, 2012.

[20] H. Zhang and Z. Ma, “Fast intra mode decision for high-efﬁciency video
coding (HEVC),” IEEE Transactions on Circuits and Systems for Video
Technology, vol. 24, no. 4, pp. 660–668, Apr. 2014.

[21] J. Vanne, M. Viitanen, and T. Hamalainen, “Efﬁcient mode decision
schemes for HEVC inter prediction,” IEEE Transactions on Circuits
and Systems for Video Technology, vol. 24, no. 9, pp. 1579–1593, Sept.
2014.

[22] L. Shen, Z. Zhang and Z. Liu, “Effective CU size decision for HEVC
intracoding,” IEEE Transactions on Image Processing, vol. 23, no. 10,
pp. 4232–4241, Oct. 2014.

[23] C. S. Park, “Edge-based intramode selection for depth-map coding in
3D-HEVC,” IEEE Transactions on Image Processing, vol. 24, no. 1, pp.
155–162, Jan 2015.

[24] Q. Hu, Z. Shi, X. Zhang and Z. Gao, “Fast HEVC intra mode decision
based on logistic regression classiﬁcation,” in 2016 IEEE Interna-
tional Symposium on Broadband Multimedia Systems and Broadcasting
(BMSB), 2016.

[25] D. Liu, X. Liu and Y. Li, “Fast CU size decisions for HEVC intra frame
coding based on support vector machines,” in 2016 IEEE 14th Intl Conf
on Dependable, Autonomic and Secure Computing (DASC), 2016.
[26] T. Laude and J. Ostermann, “Deep learning-based intra prediction mode
decision for HEVC,” in 2016 Picture Coding Symposium (PCS), Dec.
2016, pp. 1–5.

[27] H. S. Kim and R. H. Park, “Fast CU partitioning algorithm for
HEVC using an online-learning-based Bayesian decision rule,” IEEE
Transactions on Circuits and Systems for Video Technology, vol. 26,
no. 1, pp. 130–138, Jan. 2016.

[28] H. R. Tohidypour, H. Bashashati, M. T. Pourazad and P. Nasiopoulos,
“Online-learning based mode prediction method for quality scalable
extension of the high efﬁciency video coding (HEVC) standard,” IEEE

17

Transactions on Circuits and Systems for Video Technology, pp. 1–13,
Jun. 2016.

[29] J. F. de Oliveira and M. S. Alencar, “Online learning early skip decision
method for the HEVC inter process using the SVM-based Pegasos
algorithm,” Electronics Letters, vol. 52, no. 14, pp. 1227–1229, Jun.
2016.

[30] F. Duanmu, Z. Ma and Y. Wang, “Fast mode and partition decision using
machine learning for intra-frame coding in HEVC screen content coding
extension,” IEEE Journal on Emerging and Selected Topics in Circuits
and Systems, vol. 6, no. 4, pp. 517–531, Dec. 2016.

[31] S. Momcilovic, N. Roma, L. Sousa and I. Milentijevic, “Run-time
machine learning for HEVC/H.265 fast partitioning decision,” in 2015
IEEE International Symposium on Multimedia (ISM), Dec. 2015, pp.
347–350.

[32] B. Du, W. C. Siu and X. Yang, “Fast CU partition strategy for HEVC
intra-frame coding using learning approach via random forests,” in
2015 Asia-Paciﬁc Signal and Information Processing Association Annual
Summit and Conference (APSIPA), Dec. 2015, pp. 1085–1090.

[33] Y. Shan and E. h. Yang, “Fast HEVC intra coding algorithm based
on machine learning and Laplacian transparent composite model,” in
2017 IEEE International Conference on Acoustics, Speech and Signal
Processing (ICASSP), Mar. 2017, pp. 2642–2646.

[34] D.-T. Dang-Nguyen, C. Pasquini, V. Conotter, and G. Boato, “RAISE:
A raw images dataset for digital image forensics,” in Proceedings of the
6th ACM Multimedia Systems Conference, 2015, pp. 219–224.

[35] F. Bossen, “Common test conditions and software reference conﬁgu-
rations,” Joint Collaborative Team on Video Coding, document Rec.
JCTVC-L1100, Jan. 2013.

[36] M. Xu, X. Deng, S. Li and Z. Wang, “Region-of-interest based con-
versational HEVC coding with hierarchical perception model of face,”
IEEE Journal of Selected Topics in Signal Processing, vol. 8, no. 3, pp.
475–489, Jun. 2014.

[37] J.-R. Ohm, G. J. Sullivan, H. Schwarz, T. K. Tan, and T. Wiegand, “Com-
parison of the coding efﬁciency of video coding standards including high
efﬁciency video coding (HEVC),” IEEE Transactions on Circuits and
Systems for Video Technology, vol. 22, no. 12, pp. 1669–1684, Dec.
2012.
[38] Xiph.org,

“Xiph.org

media,”

video

test

https://media.xiph.org/video/derf/, 2017.

[39] G.E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and R.R.
Salakhutdinov, “Improving neural networks by preventing co-adaptation
of feature detectors,” Computer Science, vol. 3, no. 4, pp. 212–223,
2012.

[40] X. Glorot, A. Bordes and Y. Bengio, “Deep sparse rectiﬁer neural
networks,” in 2016 IEEE International Workshop on Acoustic Signal
Enhancement (IWAENC), vol. 15, 2011.

Corporation,

X
[41] LanOC
[Online].
7900X
https://lanoc.org/review/cpus/7566-intel-core-x-series-i9-7900x-and-i7-7740x?showall=&start=2,
2017, [Accessed 8-Aug.-2017].

i9-
Available:

i7-7740X,”

Series

“Intel

Core

and

[42] G. Bjøntegaard, “Calculation of avarage PSNR difference between RD-

curves,” in ITU-T, VCEG-M33, Austin, TX, USA, Apr. 2001.

