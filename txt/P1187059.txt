Tweet2Vec: Character-Based Distributed
Representations for Social Media

Bhuwan Dhingra1, Zhong Zhou2, Dylan Fitzpatrick1,2
Michael Muehl1 and William W. Cohen1
1School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA
2Heinz College, Carnegie Mellon University, Pittsburgh, PA, USA
{bdhingra,djfitzpa,mmuehl}@andrew.cmu.edu

zhongzhou@cmu.edu

wcohen@cs.cmu.edu

Abstract

Text from social media provides a set of
challenges that can cause traditional NLP
Informal language,
approaches to fail.
spelling errors, abbreviations, and special
characters are all commonplace in these
posts, leading to a prohibitively large vo-
cabulary size for word-level approaches.
We propose a character composition
model, tweet2vec, which ﬁnds vector-
space representations of whole tweets by
learning complex, non-local dependencies
in character sequences.
The proposed
model outperforms a word-level baseline
at predicting user-annotated hashtags as-
sociated with the posts, doing signiﬁcantly
better when the input contains many out-
of-vocabulary words or unusual character
sequences. Our tweet2vec encoder is pub-
licly available1.

1

Introduction

We understand from Zipf’s Law that in any nat-
ural language corpus a majority of the vocabu-
lary word types will either be absent or occur in
low frequency. Estimating the statistical proper-
ties of these rare word types is naturally a difﬁ-
cult task. This is analogous to the curse of di-
mensionality when we deal with sequences of to-
kens - most sequences will occur only once in the
training data. Neural network architectures over-
come this problem by deﬁning non-linear compo-
sitional models over vector space representations
of tokens and hence assign non-zero probability
even to sequences not seen during training (Ben-
gio et al., 2003; Kiros et al., 2015). In this work,
we explore a similar approach to learning dis-
tributed representations of social media posts by

1https://github.com/bdhingra/tweet2vec

composing them from their constituent characters,
with the goal of generalizing to out-of-vocabulary
words as well as sequences at test time.

Traditional Neural Network Language Models
(NNLMs) treat words as the basic units of lan-
guage and assign independent vectors to each
word type. To constrain memory requirements,
the vocabulary size is ﬁxed before-hand; therefore,
rare and out-of-vocabulary words are all grouped
together under a common type ‘UNKNOWN’.
This choice is motivated by the assumption of ar-
bitrariness in language, which means that surface
forms of words have little to do with their semantic
roles. Recently, (Ling et al., 2015) challenge this
assumption and present a bidirectional Long Short
Term Memory (LSTM) (Hochreiter and Schmid-
huber, 1997) for composing word vectors from
their constituent characters which can memorize
the arbitrary aspects of word orthography as well
as generalize to rare and out-of-vocabulary words.
Encouraged by their ﬁndings, we extend their
approach to a much larger unicode character set,
and model long sequences of text as functions
of their constituent characters (including white-
space). We focus on social media posts from
the website Twitter, which are an excellent test-
ing ground for character based models due to the
noisy nature of text. Heavy use of slang and
abundant misspellings means that there are many
orthographically and semantically similar tokens,
and special characters such as emojis are also im-
mensely popular and carry useful semantic infor-
mation. In our moderately sized training dataset
of 2 million tweets, there were about 0.92 mil-
lion unique word types.
It would be expensive
to capture all these phenomena in a word based
model in terms of both the memory requirement
(for the increased vocabulary) and the amount of
training data required for effective learning. Ad-
ditional beneﬁts of the character based approach

6
1
0
2
 
y
a
M
 
7
1
 
 
]

G
L
.
s
c
[
 
 
2
v
1
8
4
3
0
.
5
0
6
1
:
v
i
X
r
a

include language independence of the methods,
and no requirement of NLP preprocessing such as
word-segmentation.

A crucial step in learning good text representa-
tions is to choose an appropriate objective function
to optimize. Unsupervised approaches attempt to
reconstruct the original text from its latent rep-
resentation (Mikolov et al., 2013; Bengio et al.,
2003). Social media posts however, come with
their own form of supervision annotated by mil-
lions of users, in the form of hashtags which link
posts about the same topic together. A natural as-
sumption is that the posts with the same hashtags
should have embeddings which are close to each
other. Hence, we formulate our training objective
to maximize cross-entropy loss at the task of pre-
dicting hashtags for a post from its latent represen-
tation.

We propose a Bi-directional Gated Recurrent
Unit (Bi-GRU) (Chung et al., 2014) neural net-
work for learning tweet representations. Treat-
ing white-space as a special character itself, the
model does a forward and backward pass over the
entire sequence, and the ﬁnal GRU states are lin-
early combined to get the tweet embedding. Pos-
terior probabilities over hashtags are computed
by projecting this embedding to a softmax out-
put layer. Compared to a word-level baseline this
model shows improved performance at predicting
hashtags for a held-out set of posts. Inspired by
recent work in learning vector space text represen-
tations, we name our model tweet2vec.

2 Related Work

Using neural networks to learn distributed repre-
sentations of words dates back to (Bengio et al.,
2003). More recently, (Mikolov et al., 2013) re-
leased word2vec - a collection of word vectors
trained using a recurrent neural network. These
word vectors are in widespread use in the NLP
community, and the original work has since been
extended to sentences (Kiros et al., 2015), doc-
uments and paragraphs (Le and Mikolov, 2014),
topics (Niu and Dai, 2015) and queries (Grbovic
et al., 2015). All these methods require storing an
extremely large table of vectors for all word types
and cannot be easily generalized to unseen words
at test time (Ling et al., 2015). They also require
preprocessing to ﬁnd word boundaries which is
non-trivial for a social network domain like Twit-
ter.

In (Ling et al., 2015), the authors present a
compositional character model based on bidirec-
tional LSTMs as a potential solution to these prob-
lems. A major beneﬁt of this approach is that large
word lookup tables can be compacted into char-
acter lookup tables and the compositional model
scales to large data sets better than other state-
of-the-art approaches. While (Ling et al., 2015)
generate word embeddings from character repre-
sentations, we propose to generate vector repre-
sentations of entire tweets from characters in our
tweet2vec model.

Our work adds to the growing body of work
showing the applicability of character models for a
variety of NLP tasks such as Named Entity Recog-
nition (Santos and Guimarães, 2015), POS tag-
ging (Santos and Zadrozny, 2014), text classiﬁca-
tion (Zhang et al., 2015) and language modeling
(Karpathy et al., 2015; Kim et al., 2015).

Previously, (Luong et al., 2013) dealt with
the problem of estimating rare word representa-
tions by building them from their constituent mor-
phemes. While they show improved performance
over word-based models, their approach requires
a morpheme parser for preprocessing which may
not perform well on noisy text like Twitter. Also
the space of all morphemes, though smaller than
the space of all words, is still large enough that
modelling all morphemes is impractical.

Hashtag prediction for social media has been
addressed earlier, for example in (Weston et al.,
2014; Godin et al., 2013). (Weston et al., 2014)
also use a neural architecture, but compose text
embeddings from a lookup table of words. They
also show that the learned embeddings can gener-
alize to an unrelated task of document recommen-
dation, justifying the use of hashtags as supervi-
sion for learning text representations.

3 Tweet2Vec

Bi-GRU Encoder:
Figure 1 shows our model
for encoding tweets. It uses a similar structure to
the C2W model in (Ling et al., 2015), with LSTM
units replaced with GRU units.

The input to the network is deﬁned by an al-
phabet of characters C (this may include the en-
tire unicode character set). The input tweet is bro-
ken into a stream of characters c1, c2, ...cm each
of which is represented by a 1-by-|C| encoding.
These one-hot vectors are then projected to a char-
acter space by multiplying with the matrix PC ∈

Objective Function: We optimize the cate-
gorical cross-entropy loss between predicted and
true hashtags:

J =

1
B

B
(cid:88)

L
(cid:88)

i=1

j=1

−ti,jlog(pi,j) + λ(cid:107)Θ(cid:107)2.

(3)

Here B is the batch size, L is the number of
classes, pi,j is the predicted probability that the i-
th tweet has hashtag j, and ti,j ∈ {0, 1} denotes
the ground truth of whether the j-th hashtag is in
the i-th tweet. We use L2-regularization weighted
by λ.

4 Experiments and Results

4.1 Word Level Baseline

Since our objective is to compare character-based
and word-based approaches, we have also imple-
mented a simple word-level encoder for tweets.
The input tweet is ﬁrst split into tokens along
white-spaces. A more sophisticated tokenizer may
be used, but for a fair comparison we wanted to
keep language speciﬁc preprocessing to a min-
imum. The encoder is essentially the same as
tweet2vec, with the input as words instead of char-
acters. A lookup table stores word vectors for the
V (20K here) most common words, and the rest
are grouped together under the ‘UNK’ token.

4.2 Data

Our dataset consists of a large collection of global
posts from Twitter2 between the dates of June 1,
2013 to June 5, 2013. Only English language posts
(as detected by the lang ﬁeld in Twitter API) and
posts with at least one hashtag are retained. We
removed infrequent hashtags (< 500 posts) since
they do not have enough data for good general-
ization. We also removed very frequent tags (>
19K posts) which were almost always from auto-
matically generated posts (ex: #androidgame)
which are trivial to predict. The ﬁnal dataset con-
tains 2 million tweets for training, 10K for valida-
tion and 50K for testing, with a total of 2039 dis-
tinct hashtags. We use simple regex to preprocess
the post text and remove hashtags (since these are
to be predicted) and HTML tags, and replace user-
names and URLs with special tokens. We also re-
moved retweets and convert the text to lower-case.

2https://twitter.com/

Figure 1: Tweet2Vec encoder for social media text

R|C|×dc, where dc is the dimension of the char-
acter vector space. Let x1, x2, ...xm be the se-
quence of character vectors for the input tweet af-
ter the lookup. The encoder consists of a forward-
GRU and a backward-GRU. Both have the same
architecture, except the backward-GRU processes
the sequence in reverse order. Each of the GRU
units process these vectors sequentially, and start-
ing with the initial state h0 compute the sequence
h1, h2, ...hm as follows:

rt = σ(Wrxt + Urht−1 + br),
zt = σ(Wzxt + Uzht−1 + bz),
˜ht = tanh(Whxt + Uh(rt (cid:12) ht−1) + bh),
ht = (1 − zt) (cid:12) ht−1 + zt (cid:12) ˜ht.

Here rt, zt are called the reset and update gates
respectively, and ˜ht is the candidate output state
which is converted to the actual output state ht.
Wr, Wz, Wh are dh × dc matrices and Ur, Uz, Uh
are dh × dh matrices, where dh is the hidden state
dimension of the GRU. The ﬁnal states hf
m from
the forward-GRU, and hb
0 from the backward GRU
are combined using a fully-connected layer to the
give the ﬁnal tweet embedding et:
m + W bhb
0

et = W f hf

(1)

Here W f , W b are dt × dh and b is dt × 1 bias
term, where dt is the dimension of the ﬁnal tweet
embedding. In our experiments we set dt = dh.
All parameters are learned using gradient descent.
Finally, the tweet embedding is
passed through a linear layer whose output is the
same size as the number of hashtags L in the data
set. We use a softmax layer to compute the poste-
rior hashtag probabilities:

Softmax:

P (y = j|e) =

j e + bj)

exp(wT
i=1 exp(wT

i e + bj)

.

(cid:80)L

(2)

Tweets

ninety-one degrees.

can’t sleeeeeeep

self-cooked scramble egg.

yum!!

!url

oklahoma!!!!!!!!!!!

champions!!!!!

7 % of battery .

iphones die too quick .

i have the cutest nephew in the world !url

Word model baseline
#initialsofsomeone..
#nw #gameofthrones
#music #cheap
#cute
#gameofthrones
#heartbreaker
#initialsofsomeone..
#nw #lrt
#help #power
#money #s
#nephew #cute
#family

tweet2vec
#summer #loveit
#sun
#yummy #food
#foodporn

#tired #insomnia

#wcws #sooners
#ou
#fml #apple #bbl
#thestruggle
#socute #cute
#puppy

Table 1: Examples of top predictions from the models. The correct hashtag(s) if detected are in bold.

dt, dh
Total Parameters
Training Time / Epoch

tweet2vec
500

word
200
3.91M 3.90M
1528s
9649s

Table 2: Model sizes and training time/epoch

4.3

Implementation Details

Word vectors and character vectors are both set to
size dL = 150 for their respective models. There
were 2829 unique characters in the training set and
we model each of these independently in a charac-
ter look-up table. Embedding sizes were chosen
such that each model had roughly the same num-
ber of parameters (Table 2). Training is performed
using mini-batch gradient descent with Nesterov’s
momentum. We use a batch size B = 64, initial
learning rate η0 = 0.01 and momentum parame-
ter µ0 = 0.9. L2-regularization with λ = 0.001
was applied to all models.
Initial weights were
drawn from 0-mean gaussians with σ = 0.1 and
initial biases were set to 0. The hyperparame-
ters were tuned one at a time keeping others ﬁxed,
and values with the lowest validation cost were
chosen. The resultant combination was used to
train the models until performance on validation
set stopped increasing. During training, the learn-
ing rate is halved everytime the validation set pre-
cision increases by less than 0.01 % from one
epoch to the next. The models converge in about
20 epochs. Code for training both the models is
publicly available on github.

4.4 Results

We test the character and word-level variants by
predicting hashtags for a held-out test set of posts.
Since there may be more than one correct hashtag
per post, we generate a ranked list of tags for each

Model

word
tweet2vec

Precision
@1

Recall
@10
Full test set (50K)
42.8%
24.1%
48.5%
28.4%

Rare words test set (2K)

word
tweet2vec

20.4%
32.9%

word
tweet2vec

20.9%
23.9%

37.2%
51.3%

41.3%
44.2%

Frequent words test set (2K)

Mean
Rank

133
104

167
104

133
112

Table 3: Hashtag prediction results. Best numbers
for each test set are in bold.

post from the output posteriors, and report aver-
age precision@1, recall@10 and mean rank of the
correct hashtags. These are listed in Table 3.

To see the performance of each model on posts
containing rare words (RW) and frequent words
(FW) we selected two test sets each containing
2,000 posts. We populated these sets with posts
which had the maximum and minimum number
of out-of-vocabulary words respectively, where
vocabulary is deﬁned by the 20K most frequent
words. Overall, tweet2vec outperforms the word
model, doing signiﬁcantly better on RW test set
and comparably on FW set. This improved perfor-
mance comes at the cost of increased training time
(see Table 2), since moving from words to charac-
ters results in longer input sequences to the GRU.
We also study the effect of model size on the
performance of these models. For the word model
we set vocabulary size V to 8K, 15K and 20K re-
spectively. For tweet2vec we set the GRU hidden
state size to 300, 400 and 500 respectively. Fig-
ure 2 shows precision 1 of the two models as the
number of parameters is increased, for each test

(a) Full Test Set

(b) Rare Words Test Set

(c) Frequent Words Test Set

Figure 2: Precision @1 v Number of model parameters for word model and tweet2vec.

Dataset
small
medium
large

# Hashtags word
28.0%
24.1%
20.1%

933
2039
5114

tweet2vec

33.1%
28.4%
24.6%

Table 4: Precision @1 as training data size and
number of output labels is increased. Note that the
test set is different for each setting.

set described above. There is not much variation in
the performance, and moreover tweet2vec always
outperforms the word based model for the same
number of parameters.

Table 4 compares the models as complexity of
the task is increased. We created 3 datasets (small,
medium and large) with an increasing number of
hashtags to be predicted. This was done by vary-
ing the lower threshold of the minimum number
of tags per post for it to be included in the dataset.
Once again we observe that tweet2vec outperforms
its word-based counterpart for each of the three
settings.

Finally, table 1 shows some predictions from
the word level model and tweet2vec. We selected
these to highlight some strengths of the character
based approach - it is robust to word segmenta-
tion errors and spelling mistakes, effectively inter-
prets emojis and other special characters to make
predictions, and also performs comparably to the
word-based approach for in-vocabulary tokens.

5 Conclusion

We have presented tweet2vec - a character level
encoder for social media posts trained using super-
vision from associated hashtags. Our result shows
that tweet2vec outperforms the word based ap-
proach, doing signiﬁcantly better when the input
post contains many rare words. We have focused
only on English language posts, but the character

model requires no language speciﬁc preprocessing
and can be extended to other languages. For fu-
ture work, one natural extension would be to use
a character-level decoder for predicting the hash-
tags. This will allow generation of hashtags not
seen in the training dataset. Also, it will be in-
teresting to see how our tweet2vec embeddings
can be used in domains where there is a need
for semantic understanding of social media, such
as tracking infectious diseases (Signorini et al.,
2011). Hence, we provide an off-the-shelf en-
coder trained on medium dataset described above
to compute vector-space representations of tweets
along with our code on github.

Acknowledgments

We would like to thank Alex Smola, Yun Fu,
Hsiao-Yu Fish Tung, Ruslan Salakhutdinov, and
Barnabas Poczos for useful discussions. We would
also like to thank Juergen Pfeffer for providing ac-
cess to the Twitter data, and the reviewers for their
comments.

References

[Bengio et al.2003] Yoshua Bengio, Réjean Ducharme,
Pascal Vincent, and Christian Janvin. 2003. A neu-
ral probabilistic language model. The Journal of
Machine Learning Research, 3:1137–1155.

[Chung et al.2014] Junyoung Chung, Caglar Gulcehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural net-
arXiv preprint
works on sequence modeling.
arXiv:1412.3555.

[Godin et al.2013] Fréderic Godin, Viktor Slavkovikj,
Wesley De Neve, Benjamin Schrauwen, and Rik
Van de Walle. 2013. Using topic models for twit-
ter hashtag recommendation. In Proceedings of the
22nd international conference on World Wide Web
companion, pages 593–596. International World
Wide Web Conferences Steering Committee.

[Signorini et al.2011] Alessio Signorini, Alberto Maria
Segre, and Philip M Polgreen. 2011. The use of
twitter to track levels of disease activity and public
concern in the us during the inﬂuenza a h1n1 pan-
demic. PloS one, 6(5):e19467.

[Weston et al.2014] Jason Weston, Sumit Chopra, and
tagspace: Semantic embed-
Keith Adams. 2014.
In Proceedings of the 2014
dings from hashtags.
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1822–1827.

[Zhang et al.2015] Xiang Zhang, Junbo Zhao, and Yann
LeCun. 2015. Character-level convolutional net-
works for text classiﬁcation. In Advances in Neural
Information Processing Systems, pages 649–657.

[Grbovic et al.2015] Mihajlo Grbovic, Nemanja Djuric,
and
Vladan Radosavljevic, Fabrizio Silvestri,
Narayan Bhamidipati. 2015. Context-and content-
aware embeddings for query rewriting in sponsored
In Proceedings of the 38th International
search.
ACM SIGIR Conference on Research and Devel-
opment in Information Retrieval, pages 383–392.
ACM.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and Jürgen Schmidhuber. 1997. Long short-term
memory. Neural computation, 9(8):1735–1780.

[Karpathy et al.2015] Andrej Karpathy, Justin Johnson,
Visualizing and un-
2015.
arXiv preprint

and Fei-Fei Li.
derstanding recurrent networks.
arXiv:1506.02078.

[Kim et al.2015] Yoon Kim, Yacine Jernite, David Son-
2015. Character-
arXiv preprint

tag, and Alexander M Rush.
aware neural
arXiv:1508.06615.

language models.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. arXiv preprint arXiv:1506.06726.

[Le and Mikolov2014] Quoc V Le and Tomas Mikolov.
2014. Distributed representations of sentences and
documents. arXiv preprint arXiv:1405.4053.

[Ling et al.2015] Wang Ling, Tiago Luís, Luís Marujo,
Ramón Fernandez Astudillo, Silvio Amir, Chris
Dyer, Alan W Black, and Isabel Trancoso. 2015.
Finding function in form: Compositional charac-
ter models for open vocabulary word representation.
arXiv preprint arXiv:1508.02096.

[Luong et al.2013] Thang Luong, Richard Socher, and
Christopher D Manning. 2013. Better word repre-
sentations with recursive neural networks for mor-
phology. In CoNLL, pages 104–113. Citeseer.

[Mikolov et al.2013] Tomas Mikolov, Kai Chen, Greg
Corrado, and Jeffrey Dean. 2013. Efﬁcient estima-
tion of word representations in vector space. arXiv
preprint arXiv:1301.3781.

[Niu and Dai2015] Li-Qiang Niu and Xin-Yu Dai.
2015. Topic2vec: Learning distributed representa-
tions of topics. arXiv preprint arXiv:1506.08422.

[Santos and Guimarães2015] Cicero Nogueira dos San-
tos and Victor Guimarães. 2015. Boosting named
entity recognition with neural character embeddings.
arXiv preprint arXiv:1505.05008.

[Santos and Zadrozny2014] Cicero D Santos

and
Bianca Zadrozny. 2014. Learning character-level
representations for part-of-speech tagging.
In
Proceedings of the 31st International Conference on
Machine Learning (ICML-14), pages 1818–1826.

Tweet2Vec: Character-Based Distributed
Representations for Social Media

Bhuwan Dhingra1, Zhong Zhou2, Dylan Fitzpatrick1,2
Michael Muehl1 and William W. Cohen1
1School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA
2Heinz College, Carnegie Mellon University, Pittsburgh, PA, USA
{bdhingra,djfitzpa,mmuehl}@andrew.cmu.edu

zhongzhou@cmu.edu

wcohen@cs.cmu.edu

Abstract

Text from social media provides a set of
challenges that can cause traditional NLP
Informal language,
approaches to fail.
spelling errors, abbreviations, and special
characters are all commonplace in these
posts, leading to a prohibitively large vo-
cabulary size for word-level approaches.
We propose a character composition
model, tweet2vec, which ﬁnds vector-
space representations of whole tweets by
learning complex, non-local dependencies
in character sequences.
The proposed
model outperforms a word-level baseline
at predicting user-annotated hashtags as-
sociated with the posts, doing signiﬁcantly
better when the input contains many out-
of-vocabulary words or unusual character
sequences. Our tweet2vec encoder is pub-
licly available1.

1

Introduction

We understand from Zipf’s Law that in any nat-
ural language corpus a majority of the vocabu-
lary word types will either be absent or occur in
low frequency. Estimating the statistical proper-
ties of these rare word types is naturally a difﬁ-
cult task. This is analogous to the curse of di-
mensionality when we deal with sequences of to-
kens - most sequences will occur only once in the
training data. Neural network architectures over-
come this problem by deﬁning non-linear compo-
sitional models over vector space representations
of tokens and hence assign non-zero probability
even to sequences not seen during training (Ben-
gio et al., 2003; Kiros et al., 2015). In this work,
we explore a similar approach to learning dis-
tributed representations of social media posts by

1https://github.com/bdhingra/tweet2vec

composing them from their constituent characters,
with the goal of generalizing to out-of-vocabulary
words as well as sequences at test time.

Traditional Neural Network Language Models
(NNLMs) treat words as the basic units of lan-
guage and assign independent vectors to each
word type. To constrain memory requirements,
the vocabulary size is ﬁxed before-hand; therefore,
rare and out-of-vocabulary words are all grouped
together under a common type ‘UNKNOWN’.
This choice is motivated by the assumption of ar-
bitrariness in language, which means that surface
forms of words have little to do with their semantic
roles. Recently, (Ling et al., 2015) challenge this
assumption and present a bidirectional Long Short
Term Memory (LSTM) (Hochreiter and Schmid-
huber, 1997) for composing word vectors from
their constituent characters which can memorize
the arbitrary aspects of word orthography as well
as generalize to rare and out-of-vocabulary words.
Encouraged by their ﬁndings, we extend their
approach to a much larger unicode character set,
and model long sequences of text as functions
of their constituent characters (including white-
space). We focus on social media posts from
the website Twitter, which are an excellent test-
ing ground for character based models due to the
noisy nature of text. Heavy use of slang and
abundant misspellings means that there are many
orthographically and semantically similar tokens,
and special characters such as emojis are also im-
mensely popular and carry useful semantic infor-
mation. In our moderately sized training dataset
of 2 million tweets, there were about 0.92 mil-
lion unique word types.
It would be expensive
to capture all these phenomena in a word based
model in terms of both the memory requirement
(for the increased vocabulary) and the amount of
training data required for effective learning. Ad-
ditional beneﬁts of the character based approach

6
1
0
2
 
y
a
M
 
7
1
 
 
]

G
L
.
s
c
[
 
 
2
v
1
8
4
3
0
.
5
0
6
1
:
v
i
X
r
a

include language independence of the methods,
and no requirement of NLP preprocessing such as
word-segmentation.

A crucial step in learning good text representa-
tions is to choose an appropriate objective function
to optimize. Unsupervised approaches attempt to
reconstruct the original text from its latent rep-
resentation (Mikolov et al., 2013; Bengio et al.,
2003). Social media posts however, come with
their own form of supervision annotated by mil-
lions of users, in the form of hashtags which link
posts about the same topic together. A natural as-
sumption is that the posts with the same hashtags
should have embeddings which are close to each
other. Hence, we formulate our training objective
to maximize cross-entropy loss at the task of pre-
dicting hashtags for a post from its latent represen-
tation.

We propose a Bi-directional Gated Recurrent
Unit (Bi-GRU) (Chung et al., 2014) neural net-
work for learning tweet representations. Treat-
ing white-space as a special character itself, the
model does a forward and backward pass over the
entire sequence, and the ﬁnal GRU states are lin-
early combined to get the tweet embedding. Pos-
terior probabilities over hashtags are computed
by projecting this embedding to a softmax out-
put layer. Compared to a word-level baseline this
model shows improved performance at predicting
hashtags for a held-out set of posts. Inspired by
recent work in learning vector space text represen-
tations, we name our model tweet2vec.

2 Related Work

Using neural networks to learn distributed repre-
sentations of words dates back to (Bengio et al.,
2003). More recently, (Mikolov et al., 2013) re-
leased word2vec - a collection of word vectors
trained using a recurrent neural network. These
word vectors are in widespread use in the NLP
community, and the original work has since been
extended to sentences (Kiros et al., 2015), doc-
uments and paragraphs (Le and Mikolov, 2014),
topics (Niu and Dai, 2015) and queries (Grbovic
et al., 2015). All these methods require storing an
extremely large table of vectors for all word types
and cannot be easily generalized to unseen words
at test time (Ling et al., 2015). They also require
preprocessing to ﬁnd word boundaries which is
non-trivial for a social network domain like Twit-
ter.

In (Ling et al., 2015), the authors present a
compositional character model based on bidirec-
tional LSTMs as a potential solution to these prob-
lems. A major beneﬁt of this approach is that large
word lookup tables can be compacted into char-
acter lookup tables and the compositional model
scales to large data sets better than other state-
of-the-art approaches. While (Ling et al., 2015)
generate word embeddings from character repre-
sentations, we propose to generate vector repre-
sentations of entire tweets from characters in our
tweet2vec model.

Our work adds to the growing body of work
showing the applicability of character models for a
variety of NLP tasks such as Named Entity Recog-
nition (Santos and Guimarães, 2015), POS tag-
ging (Santos and Zadrozny, 2014), text classiﬁca-
tion (Zhang et al., 2015) and language modeling
(Karpathy et al., 2015; Kim et al., 2015).

Previously, (Luong et al., 2013) dealt with
the problem of estimating rare word representa-
tions by building them from their constituent mor-
phemes. While they show improved performance
over word-based models, their approach requires
a morpheme parser for preprocessing which may
not perform well on noisy text like Twitter. Also
the space of all morphemes, though smaller than
the space of all words, is still large enough that
modelling all morphemes is impractical.

Hashtag prediction for social media has been
addressed earlier, for example in (Weston et al.,
2014; Godin et al., 2013). (Weston et al., 2014)
also use a neural architecture, but compose text
embeddings from a lookup table of words. They
also show that the learned embeddings can gener-
alize to an unrelated task of document recommen-
dation, justifying the use of hashtags as supervi-
sion for learning text representations.

3 Tweet2Vec

Bi-GRU Encoder:
Figure 1 shows our model
for encoding tweets. It uses a similar structure to
the C2W model in (Ling et al., 2015), with LSTM
units replaced with GRU units.

The input to the network is deﬁned by an al-
phabet of characters C (this may include the en-
tire unicode character set). The input tweet is bro-
ken into a stream of characters c1, c2, ...cm each
of which is represented by a 1-by-|C| encoding.
These one-hot vectors are then projected to a char-
acter space by multiplying with the matrix PC ∈

Objective Function: We optimize the cate-
gorical cross-entropy loss between predicted and
true hashtags:

J =

1
B

B
(cid:88)

L
(cid:88)

i=1

j=1

−ti,jlog(pi,j) + λ(cid:107)Θ(cid:107)2.

(3)

Here B is the batch size, L is the number of
classes, pi,j is the predicted probability that the i-
th tweet has hashtag j, and ti,j ∈ {0, 1} denotes
the ground truth of whether the j-th hashtag is in
the i-th tweet. We use L2-regularization weighted
by λ.

4 Experiments and Results

4.1 Word Level Baseline

Since our objective is to compare character-based
and word-based approaches, we have also imple-
mented a simple word-level encoder for tweets.
The input tweet is ﬁrst split into tokens along
white-spaces. A more sophisticated tokenizer may
be used, but for a fair comparison we wanted to
keep language speciﬁc preprocessing to a min-
imum. The encoder is essentially the same as
tweet2vec, with the input as words instead of char-
acters. A lookup table stores word vectors for the
V (20K here) most common words, and the rest
are grouped together under the ‘UNK’ token.

4.2 Data

Our dataset consists of a large collection of global
posts from Twitter2 between the dates of June 1,
2013 to June 5, 2013. Only English language posts
(as detected by the lang ﬁeld in Twitter API) and
posts with at least one hashtag are retained. We
removed infrequent hashtags (< 500 posts) since
they do not have enough data for good general-
ization. We also removed very frequent tags (>
19K posts) which were almost always from auto-
matically generated posts (ex: #androidgame)
which are trivial to predict. The ﬁnal dataset con-
tains 2 million tweets for training, 10K for valida-
tion and 50K for testing, with a total of 2039 dis-
tinct hashtags. We use simple regex to preprocess
the post text and remove hashtags (since these are
to be predicted) and HTML tags, and replace user-
names and URLs with special tokens. We also re-
moved retweets and convert the text to lower-case.

2https://twitter.com/

Figure 1: Tweet2Vec encoder for social media text

R|C|×dc, where dc is the dimension of the char-
acter vector space. Let x1, x2, ...xm be the se-
quence of character vectors for the input tweet af-
ter the lookup. The encoder consists of a forward-
GRU and a backward-GRU. Both have the same
architecture, except the backward-GRU processes
the sequence in reverse order. Each of the GRU
units process these vectors sequentially, and start-
ing with the initial state h0 compute the sequence
h1, h2, ...hm as follows:

rt = σ(Wrxt + Urht−1 + br),
zt = σ(Wzxt + Uzht−1 + bz),
˜ht = tanh(Whxt + Uh(rt (cid:12) ht−1) + bh),
ht = (1 − zt) (cid:12) ht−1 + zt (cid:12) ˜ht.

Here rt, zt are called the reset and update gates
respectively, and ˜ht is the candidate output state
which is converted to the actual output state ht.
Wr, Wz, Wh are dh × dc matrices and Ur, Uz, Uh
are dh × dh matrices, where dh is the hidden state
dimension of the GRU. The ﬁnal states hf
m from
the forward-GRU, and hb
0 from the backward GRU
are combined using a fully-connected layer to the
give the ﬁnal tweet embedding et:
m + W bhb
0

et = W f hf

(1)

Here W f , W b are dt × dh and b is dt × 1 bias
term, where dt is the dimension of the ﬁnal tweet
embedding. In our experiments we set dt = dh.
All parameters are learned using gradient descent.
Finally, the tweet embedding is
passed through a linear layer whose output is the
same size as the number of hashtags L in the data
set. We use a softmax layer to compute the poste-
rior hashtag probabilities:

Softmax:

P (y = j|e) =

j e + bj)

exp(wT
i=1 exp(wT

i e + bj)

.

(cid:80)L

(2)

Tweets

ninety-one degrees.

can’t sleeeeeeep

self-cooked scramble egg.

yum!!

!url

oklahoma!!!!!!!!!!!

champions!!!!!

7 % of battery .

iphones die too quick .

i have the cutest nephew in the world !url

Word model baseline
#initialsofsomeone..
#nw #gameofthrones
#music #cheap
#cute
#gameofthrones
#heartbreaker
#initialsofsomeone..
#nw #lrt
#help #power
#money #s
#nephew #cute
#family

tweet2vec
#summer #loveit
#sun
#yummy #food
#foodporn

#tired #insomnia

#wcws #sooners
#ou
#fml #apple #bbl
#thestruggle
#socute #cute
#puppy

Table 1: Examples of top predictions from the models. The correct hashtag(s) if detected are in bold.

dt, dh
Total Parameters
Training Time / Epoch

tweet2vec
500

word
200
3.91M 3.90M
1528s
9649s

Table 2: Model sizes and training time/epoch

4.3

Implementation Details

Word vectors and character vectors are both set to
size dL = 150 for their respective models. There
were 2829 unique characters in the training set and
we model each of these independently in a charac-
ter look-up table. Embedding sizes were chosen
such that each model had roughly the same num-
ber of parameters (Table 2). Training is performed
using mini-batch gradient descent with Nesterov’s
momentum. We use a batch size B = 64, initial
learning rate η0 = 0.01 and momentum parame-
ter µ0 = 0.9. L2-regularization with λ = 0.001
was applied to all models.
Initial weights were
drawn from 0-mean gaussians with σ = 0.1 and
initial biases were set to 0. The hyperparame-
ters were tuned one at a time keeping others ﬁxed,
and values with the lowest validation cost were
chosen. The resultant combination was used to
train the models until performance on validation
set stopped increasing. During training, the learn-
ing rate is halved everytime the validation set pre-
cision increases by less than 0.01 % from one
epoch to the next. The models converge in about
20 epochs. Code for training both the models is
publicly available on github.

4.4 Results

We test the character and word-level variants by
predicting hashtags for a held-out test set of posts.
Since there may be more than one correct hashtag
per post, we generate a ranked list of tags for each

Model

word
tweet2vec

Precision
@1

Recall
@10
Full test set (50K)
42.8%
24.1%
48.5%
28.4%

Rare words test set (2K)

word
tweet2vec

20.4%
32.9%

word
tweet2vec

20.9%
23.9%

37.2%
51.3%

41.3%
44.2%

Frequent words test set (2K)

Mean
Rank

133
104

167
104

133
112

Table 3: Hashtag prediction results. Best numbers
for each test set are in bold.

post from the output posteriors, and report aver-
age precision@1, recall@10 and mean rank of the
correct hashtags. These are listed in Table 3.

To see the performance of each model on posts
containing rare words (RW) and frequent words
(FW) we selected two test sets each containing
2,000 posts. We populated these sets with posts
which had the maximum and minimum number
of out-of-vocabulary words respectively, where
vocabulary is deﬁned by the 20K most frequent
words. Overall, tweet2vec outperforms the word
model, doing signiﬁcantly better on RW test set
and comparably on FW set. This improved perfor-
mance comes at the cost of increased training time
(see Table 2), since moving from words to charac-
ters results in longer input sequences to the GRU.
We also study the effect of model size on the
performance of these models. For the word model
we set vocabulary size V to 8K, 15K and 20K re-
spectively. For tweet2vec we set the GRU hidden
state size to 300, 400 and 500 respectively. Fig-
ure 2 shows precision 1 of the two models as the
number of parameters is increased, for each test

(a) Full Test Set

(b) Rare Words Test Set

(c) Frequent Words Test Set

Figure 2: Precision @1 v Number of model parameters for word model and tweet2vec.

Dataset
small
medium
large

# Hashtags word
28.0%
24.1%
20.1%

933
2039
5114

tweet2vec

33.1%
28.4%
24.6%

Table 4: Precision @1 as training data size and
number of output labels is increased. Note that the
test set is different for each setting.

set described above. There is not much variation in
the performance, and moreover tweet2vec always
outperforms the word based model for the same
number of parameters.

Table 4 compares the models as complexity of
the task is increased. We created 3 datasets (small,
medium and large) with an increasing number of
hashtags to be predicted. This was done by vary-
ing the lower threshold of the minimum number
of tags per post for it to be included in the dataset.
Once again we observe that tweet2vec outperforms
its word-based counterpart for each of the three
settings.

Finally, table 1 shows some predictions from
the word level model and tweet2vec. We selected
these to highlight some strengths of the character
based approach - it is robust to word segmenta-
tion errors and spelling mistakes, effectively inter-
prets emojis and other special characters to make
predictions, and also performs comparably to the
word-based approach for in-vocabulary tokens.

5 Conclusion

We have presented tweet2vec - a character level
encoder for social media posts trained using super-
vision from associated hashtags. Our result shows
that tweet2vec outperforms the word based ap-
proach, doing signiﬁcantly better when the input
post contains many rare words. We have focused
only on English language posts, but the character

model requires no language speciﬁc preprocessing
and can be extended to other languages. For fu-
ture work, one natural extension would be to use
a character-level decoder for predicting the hash-
tags. This will allow generation of hashtags not
seen in the training dataset. Also, it will be in-
teresting to see how our tweet2vec embeddings
can be used in domains where there is a need
for semantic understanding of social media, such
as tracking infectious diseases (Signorini et al.,
2011). Hence, we provide an off-the-shelf en-
coder trained on medium dataset described above
to compute vector-space representations of tweets
along with our code on github.

Acknowledgments

We would like to thank Alex Smola, Yun Fu,
Hsiao-Yu Fish Tung, Ruslan Salakhutdinov, and
Barnabas Poczos for useful discussions. We would
also like to thank Juergen Pfeffer for providing ac-
cess to the Twitter data, and the reviewers for their
comments.

References

[Bengio et al.2003] Yoshua Bengio, Réjean Ducharme,
Pascal Vincent, and Christian Janvin. 2003. A neu-
ral probabilistic language model. The Journal of
Machine Learning Research, 3:1137–1155.

[Chung et al.2014] Junyoung Chung, Caglar Gulcehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural net-
arXiv preprint
works on sequence modeling.
arXiv:1412.3555.

[Godin et al.2013] Fréderic Godin, Viktor Slavkovikj,
Wesley De Neve, Benjamin Schrauwen, and Rik
Van de Walle. 2013. Using topic models for twit-
ter hashtag recommendation. In Proceedings of the
22nd international conference on World Wide Web
companion, pages 593–596. International World
Wide Web Conferences Steering Committee.

[Signorini et al.2011] Alessio Signorini, Alberto Maria
Segre, and Philip M Polgreen. 2011. The use of
twitter to track levels of disease activity and public
concern in the us during the inﬂuenza a h1n1 pan-
demic. PloS one, 6(5):e19467.

[Weston et al.2014] Jason Weston, Sumit Chopra, and
tagspace: Semantic embed-
Keith Adams. 2014.
In Proceedings of the 2014
dings from hashtags.
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1822–1827.

[Zhang et al.2015] Xiang Zhang, Junbo Zhao, and Yann
LeCun. 2015. Character-level convolutional net-
works for text classiﬁcation. In Advances in Neural
Information Processing Systems, pages 649–657.

[Grbovic et al.2015] Mihajlo Grbovic, Nemanja Djuric,
and
Vladan Radosavljevic, Fabrizio Silvestri,
Narayan Bhamidipati. 2015. Context-and content-
aware embeddings for query rewriting in sponsored
In Proceedings of the 38th International
search.
ACM SIGIR Conference on Research and Devel-
opment in Information Retrieval, pages 383–392.
ACM.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and Jürgen Schmidhuber. 1997. Long short-term
memory. Neural computation, 9(8):1735–1780.

[Karpathy et al.2015] Andrej Karpathy, Justin Johnson,
Visualizing and un-
2015.
arXiv preprint

and Fei-Fei Li.
derstanding recurrent networks.
arXiv:1506.02078.

[Kim et al.2015] Yoon Kim, Yacine Jernite, David Son-
2015. Character-
arXiv preprint

tag, and Alexander M Rush.
aware neural
arXiv:1508.06615.

language models.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. arXiv preprint arXiv:1506.06726.

[Le and Mikolov2014] Quoc V Le and Tomas Mikolov.
2014. Distributed representations of sentences and
documents. arXiv preprint arXiv:1405.4053.

[Ling et al.2015] Wang Ling, Tiago Luís, Luís Marujo,
Ramón Fernandez Astudillo, Silvio Amir, Chris
Dyer, Alan W Black, and Isabel Trancoso. 2015.
Finding function in form: Compositional charac-
ter models for open vocabulary word representation.
arXiv preprint arXiv:1508.02096.

[Luong et al.2013] Thang Luong, Richard Socher, and
Christopher D Manning. 2013. Better word repre-
sentations with recursive neural networks for mor-
phology. In CoNLL, pages 104–113. Citeseer.

[Mikolov et al.2013] Tomas Mikolov, Kai Chen, Greg
Corrado, and Jeffrey Dean. 2013. Efﬁcient estima-
tion of word representations in vector space. arXiv
preprint arXiv:1301.3781.

[Niu and Dai2015] Li-Qiang Niu and Xin-Yu Dai.
2015. Topic2vec: Learning distributed representa-
tions of topics. arXiv preprint arXiv:1506.08422.

[Santos and Guimarães2015] Cicero Nogueira dos San-
tos and Victor Guimarães. 2015. Boosting named
entity recognition with neural character embeddings.
arXiv preprint arXiv:1505.05008.

[Santos and Zadrozny2014] Cicero D Santos

and
Bianca Zadrozny. 2014. Learning character-level
representations for part-of-speech tagging.
In
Proceedings of the 31st International Conference on
Machine Learning (ICML-14), pages 1818–1826.

Tweet2Vec: Character-Based Distributed
Representations for Social Media

Bhuwan Dhingra1, Zhong Zhou2, Dylan Fitzpatrick1,2
Michael Muehl1 and William W. Cohen1
1School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA
2Heinz College, Carnegie Mellon University, Pittsburgh, PA, USA
{bdhingra,djfitzpa,mmuehl}@andrew.cmu.edu

zhongzhou@cmu.edu

wcohen@cs.cmu.edu

Abstract

Text from social media provides a set of
challenges that can cause traditional NLP
Informal language,
approaches to fail.
spelling errors, abbreviations, and special
characters are all commonplace in these
posts, leading to a prohibitively large vo-
cabulary size for word-level approaches.
We propose a character composition
model, tweet2vec, which ﬁnds vector-
space representations of whole tweets by
learning complex, non-local dependencies
in character sequences.
The proposed
model outperforms a word-level baseline
at predicting user-annotated hashtags as-
sociated with the posts, doing signiﬁcantly
better when the input contains many out-
of-vocabulary words or unusual character
sequences. Our tweet2vec encoder is pub-
licly available1.

1

Introduction

We understand from Zipf’s Law that in any nat-
ural language corpus a majority of the vocabu-
lary word types will either be absent or occur in
low frequency. Estimating the statistical proper-
ties of these rare word types is naturally a difﬁ-
cult task. This is analogous to the curse of di-
mensionality when we deal with sequences of to-
kens - most sequences will occur only once in the
training data. Neural network architectures over-
come this problem by deﬁning non-linear compo-
sitional models over vector space representations
of tokens and hence assign non-zero probability
even to sequences not seen during training (Ben-
gio et al., 2003; Kiros et al., 2015). In this work,
we explore a similar approach to learning dis-
tributed representations of social media posts by

1https://github.com/bdhingra/tweet2vec

composing them from their constituent characters,
with the goal of generalizing to out-of-vocabulary
words as well as sequences at test time.

Traditional Neural Network Language Models
(NNLMs) treat words as the basic units of lan-
guage and assign independent vectors to each
word type. To constrain memory requirements,
the vocabulary size is ﬁxed before-hand; therefore,
rare and out-of-vocabulary words are all grouped
together under a common type ‘UNKNOWN’.
This choice is motivated by the assumption of ar-
bitrariness in language, which means that surface
forms of words have little to do with their semantic
roles. Recently, (Ling et al., 2015) challenge this
assumption and present a bidirectional Long Short
Term Memory (LSTM) (Hochreiter and Schmid-
huber, 1997) for composing word vectors from
their constituent characters which can memorize
the arbitrary aspects of word orthography as well
as generalize to rare and out-of-vocabulary words.
Encouraged by their ﬁndings, we extend their
approach to a much larger unicode character set,
and model long sequences of text as functions
of their constituent characters (including white-
space). We focus on social media posts from
the website Twitter, which are an excellent test-
ing ground for character based models due to the
noisy nature of text. Heavy use of slang and
abundant misspellings means that there are many
orthographically and semantically similar tokens,
and special characters such as emojis are also im-
mensely popular and carry useful semantic infor-
mation. In our moderately sized training dataset
of 2 million tweets, there were about 0.92 mil-
lion unique word types.
It would be expensive
to capture all these phenomena in a word based
model in terms of both the memory requirement
(for the increased vocabulary) and the amount of
training data required for effective learning. Ad-
ditional beneﬁts of the character based approach

6
1
0
2
 
y
a
M
 
7
1
 
 
]

G
L
.
s
c
[
 
 
2
v
1
8
4
3
0
.
5
0
6
1
:
v
i
X
r
a

include language independence of the methods,
and no requirement of NLP preprocessing such as
word-segmentation.

A crucial step in learning good text representa-
tions is to choose an appropriate objective function
to optimize. Unsupervised approaches attempt to
reconstruct the original text from its latent rep-
resentation (Mikolov et al., 2013; Bengio et al.,
2003). Social media posts however, come with
their own form of supervision annotated by mil-
lions of users, in the form of hashtags which link
posts about the same topic together. A natural as-
sumption is that the posts with the same hashtags
should have embeddings which are close to each
other. Hence, we formulate our training objective
to maximize cross-entropy loss at the task of pre-
dicting hashtags for a post from its latent represen-
tation.

We propose a Bi-directional Gated Recurrent
Unit (Bi-GRU) (Chung et al., 2014) neural net-
work for learning tweet representations. Treat-
ing white-space as a special character itself, the
model does a forward and backward pass over the
entire sequence, and the ﬁnal GRU states are lin-
early combined to get the tweet embedding. Pos-
terior probabilities over hashtags are computed
by projecting this embedding to a softmax out-
put layer. Compared to a word-level baseline this
model shows improved performance at predicting
hashtags for a held-out set of posts. Inspired by
recent work in learning vector space text represen-
tations, we name our model tweet2vec.

2 Related Work

Using neural networks to learn distributed repre-
sentations of words dates back to (Bengio et al.,
2003). More recently, (Mikolov et al., 2013) re-
leased word2vec - a collection of word vectors
trained using a recurrent neural network. These
word vectors are in widespread use in the NLP
community, and the original work has since been
extended to sentences (Kiros et al., 2015), doc-
uments and paragraphs (Le and Mikolov, 2014),
topics (Niu and Dai, 2015) and queries (Grbovic
et al., 2015). All these methods require storing an
extremely large table of vectors for all word types
and cannot be easily generalized to unseen words
at test time (Ling et al., 2015). They also require
preprocessing to ﬁnd word boundaries which is
non-trivial for a social network domain like Twit-
ter.

In (Ling et al., 2015), the authors present a
compositional character model based on bidirec-
tional LSTMs as a potential solution to these prob-
lems. A major beneﬁt of this approach is that large
word lookup tables can be compacted into char-
acter lookup tables and the compositional model
scales to large data sets better than other state-
of-the-art approaches. While (Ling et al., 2015)
generate word embeddings from character repre-
sentations, we propose to generate vector repre-
sentations of entire tweets from characters in our
tweet2vec model.

Our work adds to the growing body of work
showing the applicability of character models for a
variety of NLP tasks such as Named Entity Recog-
nition (Santos and Guimarães, 2015), POS tag-
ging (Santos and Zadrozny, 2014), text classiﬁca-
tion (Zhang et al., 2015) and language modeling
(Karpathy et al., 2015; Kim et al., 2015).

Previously, (Luong et al., 2013) dealt with
the problem of estimating rare word representa-
tions by building them from their constituent mor-
phemes. While they show improved performance
over word-based models, their approach requires
a morpheme parser for preprocessing which may
not perform well on noisy text like Twitter. Also
the space of all morphemes, though smaller than
the space of all words, is still large enough that
modelling all morphemes is impractical.

Hashtag prediction for social media has been
addressed earlier, for example in (Weston et al.,
2014; Godin et al., 2013). (Weston et al., 2014)
also use a neural architecture, but compose text
embeddings from a lookup table of words. They
also show that the learned embeddings can gener-
alize to an unrelated task of document recommen-
dation, justifying the use of hashtags as supervi-
sion for learning text representations.

3 Tweet2Vec

Bi-GRU Encoder:
Figure 1 shows our model
for encoding tweets. It uses a similar structure to
the C2W model in (Ling et al., 2015), with LSTM
units replaced with GRU units.

The input to the network is deﬁned by an al-
phabet of characters C (this may include the en-
tire unicode character set). The input tweet is bro-
ken into a stream of characters c1, c2, ...cm each
of which is represented by a 1-by-|C| encoding.
These one-hot vectors are then projected to a char-
acter space by multiplying with the matrix PC ∈

Objective Function: We optimize the cate-
gorical cross-entropy loss between predicted and
true hashtags:

J =

1
B

B
(cid:88)

L
(cid:88)

i=1

j=1

−ti,jlog(pi,j) + λ(cid:107)Θ(cid:107)2.

(3)

Here B is the batch size, L is the number of
classes, pi,j is the predicted probability that the i-
th tweet has hashtag j, and ti,j ∈ {0, 1} denotes
the ground truth of whether the j-th hashtag is in
the i-th tweet. We use L2-regularization weighted
by λ.

4 Experiments and Results

4.1 Word Level Baseline

Since our objective is to compare character-based
and word-based approaches, we have also imple-
mented a simple word-level encoder for tweets.
The input tweet is ﬁrst split into tokens along
white-spaces. A more sophisticated tokenizer may
be used, but for a fair comparison we wanted to
keep language speciﬁc preprocessing to a min-
imum. The encoder is essentially the same as
tweet2vec, with the input as words instead of char-
acters. A lookup table stores word vectors for the
V (20K here) most common words, and the rest
are grouped together under the ‘UNK’ token.

4.2 Data

Our dataset consists of a large collection of global
posts from Twitter2 between the dates of June 1,
2013 to June 5, 2013. Only English language posts
(as detected by the lang ﬁeld in Twitter API) and
posts with at least one hashtag are retained. We
removed infrequent hashtags (< 500 posts) since
they do not have enough data for good general-
ization. We also removed very frequent tags (>
19K posts) which were almost always from auto-
matically generated posts (ex: #androidgame)
which are trivial to predict. The ﬁnal dataset con-
tains 2 million tweets for training, 10K for valida-
tion and 50K for testing, with a total of 2039 dis-
tinct hashtags. We use simple regex to preprocess
the post text and remove hashtags (since these are
to be predicted) and HTML tags, and replace user-
names and URLs with special tokens. We also re-
moved retweets and convert the text to lower-case.

2https://twitter.com/

Figure 1: Tweet2Vec encoder for social media text

R|C|×dc, where dc is the dimension of the char-
acter vector space. Let x1, x2, ...xm be the se-
quence of character vectors for the input tweet af-
ter the lookup. The encoder consists of a forward-
GRU and a backward-GRU. Both have the same
architecture, except the backward-GRU processes
the sequence in reverse order. Each of the GRU
units process these vectors sequentially, and start-
ing with the initial state h0 compute the sequence
h1, h2, ...hm as follows:

rt = σ(Wrxt + Urht−1 + br),
zt = σ(Wzxt + Uzht−1 + bz),
˜ht = tanh(Whxt + Uh(rt (cid:12) ht−1) + bh),
ht = (1 − zt) (cid:12) ht−1 + zt (cid:12) ˜ht.

Here rt, zt are called the reset and update gates
respectively, and ˜ht is the candidate output state
which is converted to the actual output state ht.
Wr, Wz, Wh are dh × dc matrices and Ur, Uz, Uh
are dh × dh matrices, where dh is the hidden state
dimension of the GRU. The ﬁnal states hf
m from
the forward-GRU, and hb
0 from the backward GRU
are combined using a fully-connected layer to the
give the ﬁnal tweet embedding et:
m + W bhb
0

et = W f hf

(1)

Here W f , W b are dt × dh and b is dt × 1 bias
term, where dt is the dimension of the ﬁnal tweet
embedding. In our experiments we set dt = dh.
All parameters are learned using gradient descent.
Finally, the tweet embedding is
passed through a linear layer whose output is the
same size as the number of hashtags L in the data
set. We use a softmax layer to compute the poste-
rior hashtag probabilities:

Softmax:

P (y = j|e) =

j e + bj)

exp(wT
i=1 exp(wT

i e + bj)

.

(cid:80)L

(2)

Tweets

ninety-one degrees.

can’t sleeeeeeep

self-cooked scramble egg.

yum!!

!url

oklahoma!!!!!!!!!!!

champions!!!!!

7 % of battery .

iphones die too quick .

i have the cutest nephew in the world !url

Word model baseline
#initialsofsomeone..
#nw #gameofthrones
#music #cheap
#cute
#gameofthrones
#heartbreaker
#initialsofsomeone..
#nw #lrt
#help #power
#money #s
#nephew #cute
#family

tweet2vec
#summer #loveit
#sun
#yummy #food
#foodporn

#tired #insomnia

#wcws #sooners
#ou
#fml #apple #bbl
#thestruggle
#socute #cute
#puppy

Table 1: Examples of top predictions from the models. The correct hashtag(s) if detected are in bold.

dt, dh
Total Parameters
Training Time / Epoch

tweet2vec
500

word
200
3.91M 3.90M
1528s
9649s

Table 2: Model sizes and training time/epoch

4.3

Implementation Details

Word vectors and character vectors are both set to
size dL = 150 for their respective models. There
were 2829 unique characters in the training set and
we model each of these independently in a charac-
ter look-up table. Embedding sizes were chosen
such that each model had roughly the same num-
ber of parameters (Table 2). Training is performed
using mini-batch gradient descent with Nesterov’s
momentum. We use a batch size B = 64, initial
learning rate η0 = 0.01 and momentum parame-
ter µ0 = 0.9. L2-regularization with λ = 0.001
was applied to all models.
Initial weights were
drawn from 0-mean gaussians with σ = 0.1 and
initial biases were set to 0. The hyperparame-
ters were tuned one at a time keeping others ﬁxed,
and values with the lowest validation cost were
chosen. The resultant combination was used to
train the models until performance on validation
set stopped increasing. During training, the learn-
ing rate is halved everytime the validation set pre-
cision increases by less than 0.01 % from one
epoch to the next. The models converge in about
20 epochs. Code for training both the models is
publicly available on github.

4.4 Results

We test the character and word-level variants by
predicting hashtags for a held-out test set of posts.
Since there may be more than one correct hashtag
per post, we generate a ranked list of tags for each

Model

word
tweet2vec

Precision
@1

Recall
@10
Full test set (50K)
42.8%
24.1%
48.5%
28.4%

Rare words test set (2K)

word
tweet2vec

20.4%
32.9%

word
tweet2vec

20.9%
23.9%

37.2%
51.3%

41.3%
44.2%

Frequent words test set (2K)

Mean
Rank

133
104

167
104

133
112

Table 3: Hashtag prediction results. Best numbers
for each test set are in bold.

post from the output posteriors, and report aver-
age precision@1, recall@10 and mean rank of the
correct hashtags. These are listed in Table 3.

To see the performance of each model on posts
containing rare words (RW) and frequent words
(FW) we selected two test sets each containing
2,000 posts. We populated these sets with posts
which had the maximum and minimum number
of out-of-vocabulary words respectively, where
vocabulary is deﬁned by the 20K most frequent
words. Overall, tweet2vec outperforms the word
model, doing signiﬁcantly better on RW test set
and comparably on FW set. This improved perfor-
mance comes at the cost of increased training time
(see Table 2), since moving from words to charac-
ters results in longer input sequences to the GRU.
We also study the effect of model size on the
performance of these models. For the word model
we set vocabulary size V to 8K, 15K and 20K re-
spectively. For tweet2vec we set the GRU hidden
state size to 300, 400 and 500 respectively. Fig-
ure 2 shows precision 1 of the two models as the
number of parameters is increased, for each test

(a) Full Test Set

(b) Rare Words Test Set

(c) Frequent Words Test Set

Figure 2: Precision @1 v Number of model parameters for word model and tweet2vec.

Dataset
small
medium
large

# Hashtags word
28.0%
24.1%
20.1%

933
2039
5114

tweet2vec

33.1%
28.4%
24.6%

Table 4: Precision @1 as training data size and
number of output labels is increased. Note that the
test set is different for each setting.

set described above. There is not much variation in
the performance, and moreover tweet2vec always
outperforms the word based model for the same
number of parameters.

Table 4 compares the models as complexity of
the task is increased. We created 3 datasets (small,
medium and large) with an increasing number of
hashtags to be predicted. This was done by vary-
ing the lower threshold of the minimum number
of tags per post for it to be included in the dataset.
Once again we observe that tweet2vec outperforms
its word-based counterpart for each of the three
settings.

Finally, table 1 shows some predictions from
the word level model and tweet2vec. We selected
these to highlight some strengths of the character
based approach - it is robust to word segmenta-
tion errors and spelling mistakes, effectively inter-
prets emojis and other special characters to make
predictions, and also performs comparably to the
word-based approach for in-vocabulary tokens.

5 Conclusion

We have presented tweet2vec - a character level
encoder for social media posts trained using super-
vision from associated hashtags. Our result shows
that tweet2vec outperforms the word based ap-
proach, doing signiﬁcantly better when the input
post contains many rare words. We have focused
only on English language posts, but the character

model requires no language speciﬁc preprocessing
and can be extended to other languages. For fu-
ture work, one natural extension would be to use
a character-level decoder for predicting the hash-
tags. This will allow generation of hashtags not
seen in the training dataset. Also, it will be in-
teresting to see how our tweet2vec embeddings
can be used in domains where there is a need
for semantic understanding of social media, such
as tracking infectious diseases (Signorini et al.,
2011). Hence, we provide an off-the-shelf en-
coder trained on medium dataset described above
to compute vector-space representations of tweets
along with our code on github.

Acknowledgments

We would like to thank Alex Smola, Yun Fu,
Hsiao-Yu Fish Tung, Ruslan Salakhutdinov, and
Barnabas Poczos for useful discussions. We would
also like to thank Juergen Pfeffer for providing ac-
cess to the Twitter data, and the reviewers for their
comments.

References

[Bengio et al.2003] Yoshua Bengio, Réjean Ducharme,
Pascal Vincent, and Christian Janvin. 2003. A neu-
ral probabilistic language model. The Journal of
Machine Learning Research, 3:1137–1155.

[Chung et al.2014] Junyoung Chung, Caglar Gulcehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural net-
arXiv preprint
works on sequence modeling.
arXiv:1412.3555.

[Godin et al.2013] Fréderic Godin, Viktor Slavkovikj,
Wesley De Neve, Benjamin Schrauwen, and Rik
Van de Walle. 2013. Using topic models for twit-
ter hashtag recommendation. In Proceedings of the
22nd international conference on World Wide Web
companion, pages 593–596. International World
Wide Web Conferences Steering Committee.

[Signorini et al.2011] Alessio Signorini, Alberto Maria
Segre, and Philip M Polgreen. 2011. The use of
twitter to track levels of disease activity and public
concern in the us during the inﬂuenza a h1n1 pan-
demic. PloS one, 6(5):e19467.

[Weston et al.2014] Jason Weston, Sumit Chopra, and
tagspace: Semantic embed-
Keith Adams. 2014.
In Proceedings of the 2014
dings from hashtags.
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 1822–1827.

[Zhang et al.2015] Xiang Zhang, Junbo Zhao, and Yann
LeCun. 2015. Character-level convolutional net-
works for text classiﬁcation. In Advances in Neural
Information Processing Systems, pages 649–657.

[Grbovic et al.2015] Mihajlo Grbovic, Nemanja Djuric,
and
Vladan Radosavljevic, Fabrizio Silvestri,
Narayan Bhamidipati. 2015. Context-and content-
aware embeddings for query rewriting in sponsored
In Proceedings of the 38th International
search.
ACM SIGIR Conference on Research and Devel-
opment in Information Retrieval, pages 383–392.
ACM.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and Jürgen Schmidhuber. 1997. Long short-term
memory. Neural computation, 9(8):1735–1780.

[Karpathy et al.2015] Andrej Karpathy, Justin Johnson,
Visualizing and un-
2015.
arXiv preprint

and Fei-Fei Li.
derstanding recurrent networks.
arXiv:1506.02078.

[Kim et al.2015] Yoon Kim, Yacine Jernite, David Son-
2015. Character-
arXiv preprint

tag, and Alexander M Rush.
aware neural
arXiv:1508.06615.

language models.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. arXiv preprint arXiv:1506.06726.

[Le and Mikolov2014] Quoc V Le and Tomas Mikolov.
2014. Distributed representations of sentences and
documents. arXiv preprint arXiv:1405.4053.

[Ling et al.2015] Wang Ling, Tiago Luís, Luís Marujo,
Ramón Fernandez Astudillo, Silvio Amir, Chris
Dyer, Alan W Black, and Isabel Trancoso. 2015.
Finding function in form: Compositional charac-
ter models for open vocabulary word representation.
arXiv preprint arXiv:1508.02096.

[Luong et al.2013] Thang Luong, Richard Socher, and
Christopher D Manning. 2013. Better word repre-
sentations with recursive neural networks for mor-
phology. In CoNLL, pages 104–113. Citeseer.

[Mikolov et al.2013] Tomas Mikolov, Kai Chen, Greg
Corrado, and Jeffrey Dean. 2013. Efﬁcient estima-
tion of word representations in vector space. arXiv
preprint arXiv:1301.3781.

[Niu and Dai2015] Li-Qiang Niu and Xin-Yu Dai.
2015. Topic2vec: Learning distributed representa-
tions of topics. arXiv preprint arXiv:1506.08422.

[Santos and Guimarães2015] Cicero Nogueira dos San-
tos and Victor Guimarães. 2015. Boosting named
entity recognition with neural character embeddings.
arXiv preprint arXiv:1505.05008.

[Santos and Zadrozny2014] Cicero D Santos

and
Bianca Zadrozny. 2014. Learning character-level
representations for part-of-speech tagging.
In
Proceedings of the 31st International Conference on
Machine Learning (ICML-14), pages 1818–1826.

