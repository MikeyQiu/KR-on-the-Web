9
1
0
2
 
y
a
M
 
1
1
 
 
]
L
M

.
t
a
t
s
[
 
 
7
v
6
3
2
5
0
.
6
0
8
1
:
v
i
X
r
a

Manifold Mixup: Better Representations by
Interpolating Hidden States

Vikas Verma* †
Aalto Univeristy, Finland
vikas.verma@aalto.fi

Alex Lamb*
Montréal Institute for Learning Algorithms
lambalex@iro.umontreal.ca

Christopher Beckham
Montréal Institute for Learning Algorithms
christopher.j.beckham@gmail.com

Amir Najaﬁ
Sharif University of Technology
najafy@ce.sharif.edu

Ioannis Mitliagkas
Montréal Institute for Learning Algorithms
imitliagkas@gmail.com

Aaron Courville

Montréal Institute for Learning Algorithms
courvila@iro.umontreal.ca

David Lopez-Paz
Facebook AI Research
dlp@fb.com

Yoshua Bengio
Montréal Institute for Learning Algorithms
CIFAR Senior Fellow
yoshua.umontreal@gmail.com

Abstract

Deep neural networks excel at learning the training data, but often provide incorrect
and conﬁdent predictions when evaluated on slightly different test examples. This
includes distribution shifts, outliers, and adversarial examples. To address these
issues, we propose Manifold Mixup, a simple regularizer that encourages neural
networks to predict less conﬁdently on interpolations of hidden representations.
Manifold Mixup leverages semantic interpolations as additional training signal,
obtaining neural networks with smoother decision boundaries at multiple levels
of representation. As a result, neural networks trained with Manifold Mixup learn
class-representations with fewer directions of variance. We prove theory on why
this ﬂattening happens under ideal conditions, validate it on practical situations,
and connect it to previous works on information theory and generalization. In spite
of incurring no signiﬁcant computation and being implemented in a few lines of
code, Manifold Mixup improves strong baselines in supervised learning, robustness
to single-step adversarial attacks, and test log-likelihood.

1

Introduction

Deep neural networks are the backbone of state-of-the-art systems for computer vision, speech
recognition, and language translation (LeCun et al., 2015). However, these systems perform well
only when evaluated on instances very similar to those from the training set. When evaluated on
slightly different distributions, neural networks often provide incorrect predictions with strikingly
high conﬁdence. This is a worrying prospect, since deep learning systems are being deployed in
settings where data may be subject to distributional shifts. Adversarial examples (Szegedy et al., 2014)
are one such failure case: deep neural networks with nearly perfect performance provide incorrect

* Equal contribution. † Work done while author was visiting Montreal Institute for Learning Algorithms. Code
available at https://github.com/vikasverma1077/manifold_mixup

(a)

(b)

(c)

(d)

(e)

(f)

Figure 1: An experiment on a network trained on the 2D spiral dataset with a 2D bottleneck hidden
representation in the middle of the network. Manifold mixup has three effects on learning when
compared to vanilla training. First, it smoothens decision boundaries (from a. to b.). Second, it
improves the arrangement of hidden representations and encourages broader regions of low-conﬁdence
predictions (from d. to e.). Black dots are the hidden representation of the inputs sampled uniformly
from the range of the input space. Third, it ﬂattens the representations (c. at layer 1, f. at layer
3). Figure 2 shows that these effects are not accomplished by other well-studied regularizers (input
mixup, weight decay, dropout, batch normalization, and adding noise to the hidden representations).

predictions with very high conﬁdence when evaluated on perturbations imperceptible to the human
eye. Adversarial examples are a serious hazard when deploying machine learning systems in security-
sensitive applications. More generally, deep learning systems quickly degrade in performance as the
distributions of training and testing data differ slightly from each other (Ben-David et al., 2010).

In this paper, we realize several troubling properties concerning the hidden representations and
decision boundaries of state-of-the-art neural networks. First, we observe that the decision boundary
is often sharp and close to the data. Second, we observe that the vast majority of the hidden
representation space corresponds to high conﬁdence predictions, both on and off of the data manifold.

Motivated by these intuitions we propose Manifold Mixup (Section 2), a simple regularizer that
addresses several of these ﬂaws by training neural networks on linear combinations of hidden
representations of training examples. Previous work, including the study of analogies through
word embeddings (e.g. king − man + woman ≈ queen), has shown that interpolations are an
effective way of combining factors (Mikolov et al., 2013). Since high-level representations are
often low-dimensional and useful to linear classiﬁers, linear interpolations of hidden representations
should explore meaningful regions of the feature space effectively. To use combinations of hidden
representations of data as novel training signal, we also perform the same linear interpolation in the
associated pair of one-hot labels, leading to mixed examples with soft targets.

To start off with the right intuitions, Figure 1 illustrates the impact of Manifold Mixup on a simple
two-dimensional classiﬁcation task with small data. In this example, vanilla training of a deep
neural network leads to an irregular decision boundary (Figure 1a), and a complex arrangement of

2

e
c
a
p
S
t
u
p
n
I

e
c
a
p
s
n
e
d
d
i
H

Weight Decay

Noise

Dropout

Batch-Norm

Input Mixup

Figure 2: The same experimental setup as Figure 1, but using a variety of competitive regularizers.
This shows that the effect of concentrating the hidden representation for each class and providing a
broad region of low conﬁdence between the regions is not accomplished by the other regularizers
(although input space mixup does produce regions of low conﬁdence, it does not ﬂatten the class-
speciﬁc state distribution). Noise refers to gaussian noise in the input layer, dropout refers to
dropout of 50% in all layers except the bottleneck itself (due to its low dimensionality), and batch
normalization refers to batch normalization in all layers.

hidden representations (Figure 1d). Moreover, every point in both the raw (Figure 1a) and hidden
(Figure 1d) data representations is assigned a prediction with very high conﬁdence. This includes
points (depicted in black) that correspond to inputs off the data manifold! In contrast, training the
same deep neural network with Manifold Mixup leads to a smoother decision boundary (Figure 1b)
and a simpler (linear) arrangement of hidden representations (Figure 1e). In sum, the representations
obtained by Manifold Mixup have two desirable properties: the class-representations are ﬂattened
into a minimal amount of directions of variation, and all points in-between these ﬂat representations,
most unobserved during training and off the data manifold, are assigned low-conﬁdence predictions.

This example conveys the central message of this paper:

Manifold Mixup improves the hidden representations and decision boundaries of neural networks at
multiple layers.

More speciﬁcally, Manifold Mixup improves generalization in deep neural networks because it:

• Leads to smoother decision boundaries that are further away from the training data, at
multiple levels of representation. Smoothness and margin are well-established factors of
generalization (Bartlett & Shawe-taylor, 1998; Lee et al., 1995).

• Leverages interpolations in deeper hidden layers, which capture higher level information

(Zeiler & Fergus, 2013) to provide additional training signal.

• Flattens the class-representations, reducing their number of directions with signiﬁcant
variance (Section 3). This can be seen as a form of compression, which is linked to
generalization by a well-established theory (Tishby & Zaslavsky, 2015; Shwartz-Ziv &
Tishby, 2017) and extensive experimentation (Alemi et al., 2017; Belghazi et al., 2018;
Goyal et al., 2018; Achille & Soatto, 2018).

Throughout a variety of experiments, we demonstrate four beneﬁts of Manifold Mixup:

• Better generalization than other competitive regularizers (such as Cutout, Mixup, AdaMix,

and Dropout) (Section 5.1).

• Improved log-likelihood on test samples (Section 5.1).

• Increased performance at predicting data subject to novel deformations (Section 5.2).

3

A1

A2

A1

A2

A1

A2

B1

B2

B1

B2

B1

B2

Figure 3: Illustration on why Manifold Mixup learns ﬂatter representations. The interpolation
between A1 and B2 in the left panel soft-labels the black dot as 50% red and 50% blue, regardless
of being very close to a blue point. In the middle panel a different interpolation between A2 and
B1 soft-labels the same point as 95% blue and 5% red. However, since Manifold Mixup learns the
hidden representations, the pressure to predict consistent soft-labels at interpolated points causes the
states to become ﬂattened (right panel).

• Improved robustness to single-step adversarial attacks. This is the evidence that Manifold
Mixup pushes the decision boundary away from the data in some directions (Section 5.3).
This is not to be confused with full adversarial robustness, which is deﬁned in terms of
moving the decision boundary away from the data in all directions.

2 Manifold Mixup

Consider training a deep neural network f (x) = fk(gk(x)), where gk denotes the part of the
neural network mapping the input data to the hidden representation at layer k, and fk denotes the
part mapping such hidden representation to the output f (x). Training f using Manifold Mixup is
performed in ﬁve steps. First, we select a random layer k from a set of eligible layers S in the
neural network. This set may include the input layer g0(x). Second, we process two random data
minibatches (x, y) and (x(cid:48), y(cid:48)) as usual, until reaching layer k. This provides us with two intermediate
minibatches (gk(x), y) and (gk(x(cid:48)), y(cid:48)). Third, we perform Input Mixup (Zhang et al., 2018) on
these intermediate minibatches. This produces the mixed minibatch:

(˜gk, ˜y) := (Mixλ(gk(x), gk(x(cid:48))), Mixλ(y, y(cid:48))),
where Mixλ(a, b) = λ · a + (1 − λ) · b. Here, (y, y(cid:48)) are one-hot labels, and the mixing coefﬁcient
λ ∼ Beta(α, α) as proposed in mixup (Zhang et al., 2018). For instance, α = 1.0 is equivalent to
sampling λ ∼ U (0, 1). Fourth, we continue the forward pass in the network from layer k until the
output using the mixed minibatch (˜gk, ˜y). Fifth, this output is used to compute the loss value and
gradients that update all the parameters of the neural network.

Mathematically, Manifold Mixup minimizes:

L(f ) = E

(x,y)∼P

E
(x(cid:48),y(cid:48))∼P

E
λ∼Beta(α,α)

E
k∼S

(cid:96)(fk(Mixλ(gk(x), gk(x(cid:48)))), Mixλ(y, y(cid:48))).

(1)

Some implementation considerations. We backpropagate gradients through the entire computational
graph, including those layers before the mixup layer k (Section 5.1 and appendix Section B explore
this issue in more detail). In the case where S = {0}, Manifold Mixup reduces to the original mixup
algorithm of Zhang et al. (2018).

While one could try to reduce the variance of the gradient updates by sampling a random (k, λ) per
example, we opted for the simpler alternative of sampling a single (k, λ) per minibatch, which in
practice gives the same performance. As in Input Mixup, we use a single minibatch to compute the
mixed minibatch. We do so by mixing the minibatch with copy of itself with shufﬂed rows.

3 Manifold Mixup Flattens Representations

We turn to the study of how Manifold Mixup impacts the hidden representations of a deep neural
network. At a high level, Manifold Mixup ﬂattens the class-speciﬁc representations. More speciﬁcally,
this ﬂattening reduces the number of directions with signiﬁcant variance (akin to reducing their
number of principal components).

4

In the sequel, we ﬁrst prove a theory (Section 3.1) that characterizes this behavior precisely under
idealized conditions. Second, we show that this ﬂattening also happens in practice, by performing the
SVD of class-speciﬁc representations of neural networks trained on real datasets (Section 3.2). Finally,
we discuss why the ﬂattening of class-speciﬁc representations is a desirable property (Section 3.3).

3.1 Theory

We start by characterizing how the representations of a neural network are changed by Manifold
Mixup, under a simplifying set of assumptions. More concretely, we will show that if one performs
mixup in a sufﬁciently deep hidden layer in a neural network, then the loss can be driven to zero
if the dimensionality of that hidden layer dim (H) is greater than the number of classes d. As a
consequence of this, the resulting representations for that class will have dim (H) − d + 1 dimensions.

A more intuitive and less formal version of this argument is given in Figure 3 and Appendix F.

To this end, assume that X and H denote the input and representation spaces, respectively. We denote
the label-set by Y and let Z = X × Y. Let G ⊆ HX denote the set of functions realizable by the
neural network, from the input to the representation. Similarly, let F ⊆ Y H be the set of all functions
realizable by the neural network, from the representation to the output.

We are interested in the solution of the following problem in some asymptotic regimes:

J(P ) = inf

g∈G,f ∈F

E
(x,y),(x(cid:48),y(cid:48)),λ

(cid:96)(f (Mixλ(g(x), g(x(cid:48)))), Mixλ(y, y(cid:48))).

(2)

More speciﬁcally, let PD be the empirical distribution deﬁned by a dataset D = {(xi, yi)}n
i=1. Then,
let f (cid:63) ∈ F and g(cid:63) ∈ G be the minimizers of (2) for P = PD. Also, let G = HX , F = Y H, and
H be a vector space. These conditions (Cybenko, 1989) state that the mappings realizable by large
neural networks are dense in the set of all continuous bounded functions. In this case, we show that
the minimizer f (cid:63) is a linear function from H to Y. In this case, the objective (2) can be rewritten as:

J(PD) =

inf
h1,...,hn∈H

1
n (n − 1)

n
(cid:88)

(cid:26)

i(cid:54)=j

inf
f ∈F

(cid:90) 1

0

(cid:96)(f (Mixλ(hi, hj)), Mixλ(yi, yj)) p(λ)dλ

,

(cid:27)

where hi = g(xi).
Theorem 1. Let H be a vector space of dimension dim (H), and let d ∈ N to represent the number
classes contained in some dataset D. If dim (H) ≥ d − 1, then J(PD) = 0 and the corresponding
minimizer f (cid:63) is a linear function from H to Rd.

Proof. First, we observe that the following statement is true if dim (H) ≥ d − 1:

∃ A, H ∈ Rdim(H)×d, b ∈ Rd : A(cid:62)H + b1(cid:62)

d = Id×d,

where Id×d and 1d denote the d-dimensional identity matrix and all-one vector, respectively. In fact,
d is a rank-one matrix, while the rank of identity matrix is d. So, A(cid:62)H only needs rank d − 1.
b1(cid:62)
Let f (cid:63)(h) = A(cid:62)h + b for all h ∈ H. Let g(cid:63)(xi) = Hζi,: be the ζi-th column of H, where
ζi ∈ {1, . . . , d} stands for the class-index of the example xi. These choices minimize (2), since:

(cid:96)(f (cid:63)(Mixλ(g(cid:63)(xi), g(cid:63)(xj))), Mixλ(yi, yj)) =

(cid:96)(A(cid:62)Mixλ(Hζi,:, Hζj ,:) + b, Mixλ(yi,ζi, yj,ζj )) = (cid:96)(u, u) = 0.

The result follows from A(cid:62)Hζi,: + b = yi,ζi for all i.

Furthermore, if dim (H) > d − 1, then data points in the representation space H have some degrees
of freedom to move independently.

Corollary 1. Consider the setting in Theorem 1 with dim (H) > d − 1. Let g(cid:63) ∈ G minimize (2)
under P = PD. Then, the representations of the training points g(cid:63)(xi) fall on a (dim (H) − d + 1)-
dimensional subspace.

5

Proof. From the proof of Theorem 1, A(cid:62)H = Id×d − b1(cid:62)
d . The r.h.s. of this expression is a rank-
(d − 1) matrix for a properly chosen b. Thus, A can have a null-space of dimension dim (H) − d + 1.
This way, one can assign g(cid:63)(xi) = Hζi,: + ei, where Hζi,: is deﬁned as in the proof of Theorem 1,
and ei are arbitrary vectors in the null-space of A, for all i = 1, . . . , n.

This result implies that if the Manifold Mixup loss is minimized, then the representation of each class
lies on a subspace of dimension dim (H) − d + 1. In the extreme case where dim (H) = d − 1, each
class representation will collapse to a single point, meaning that hidden representations would not
change in any direction, for each class-conditional manifold. In the more general case with larger
dim (H), the majority of directions in H-space will be empty in the class-conditional manifold.

3.2 Empirical Investigation of Flattening

We now show that the “ﬂattening” theory that we have just developed also holds for real neural
networks networks trained on real data. To this end, we trained a collection of fully-connected
neural networks on the MNIST dataset using multiple regularizers, including Manifold Mixup. When
using Manifold Mixup, we mixed representations at a single, ﬁxed hidden layer per network. After
training, we performed the Singular Value Decomposition (SVD) of the hidden representations of
each network, and analyzed their spectrum decay.

More speciﬁcally, we computed the largest singular value per class, as well as the sum of the all other
singular values. We computed these statistics at the ﬁrst hidden layer for all networks and regularizers.
For the largest singular value, we obtained: 51.73 (baseline), 33.76 (weight decay), 28.83 (dropout),
33.46 (input mixup), and 31.65 (manifold mixup). For the sum of all the other singular values, we
obtained: 78.67 (baseline), 73.36 (weight decay), 77.47 (dropout), 66.89 (input mixup), and 40.98
(manifold mixup). Therefore, weight decay, dropout, and input mixup all reduce the largest singular
value, but only Manifold Mixup achieves a reduction of the sum of the all other singular values (e.g.
ﬂattening). For more details regarding this experiment, consult Appendix G.

3.3 Why is Flattening Representations Desirable?

We have presented evidence to conclude that Manifold Mixup leads to ﬂatter class-speciﬁc representa-
tions, and that such ﬂattening is not accomplished by other regularizers.

But why is this ﬂattening desirable? First, it means that the hidden representations computed from
our data occupy a much smaller volume. Thus, a randomly sampled hidden representation within
the convex hull spanned by the data in this space is more likely to have a classiﬁcation score with
lower conﬁdence (higher entropy). Second, compression has been linked to generalization in the
information theory literature (Tishby & Zaslavsky, 2015; Shwartz-Ziv & Tishby, 2017). Third
compression has been been linked to generalization empirically in the past by work which minimizes
mutual information between the features and the inputs as a regularizer (Belghazi et al., 2018; Alemi
et al., 2017; Achille & Soatto, 2018).

4 Related Work

Regularization is a major area of research in machine learning. Manifold Mixup is a generalization of
Input Mixup, the idea of building random interpolations between training examples and perform the
same interpolation for their labels (Zhang et al., 2018; Tokozume et al., 2018).

Intriguingly, our experiments show that Manifold Mixup changes the representations associated to the
layers before and after the mixing operation, and that this effect is crucial to achieve good results
(Section 5.1, Appendix G). This suggests that Manifold Mixup works differently than Input Mixup.

Another line of research closely related to Manifold Mixup involves regularizing deep networks by
perturbing their hidden representations. These methods include dropout (Hinton et al., 2012), batch
normalization (Ioffe & Szegedy, 2015), and the information bottleneck (Alemi et al., 2017). Notably,
Hinton et al. (2012) and Ioffe & Szegedy (2015) demonstrated that regularizers that work well in
the input space can also be applied to the hidden layers of a deep network, often to further improve
results. We believe that Manifold Mixup is a complimentary form of regularization.

6

Table 1: Classiﬁcation errors on (a) CIFAR-10 and (b) CIFAR-100. We include results from (Zhang
et al., 2018)† and (Guo et al., 2016)‡. Standard deviations over ﬁve repetitions.

PreActResNet18

Test Error (%)

Test NLL

PreActResNet18

Test Error (%)

Test NLL

No Mixup

AdaMix‡
Input Mixup†

3.52

4.20

No Mixup
AdaMix‡

Input Mixup†

NA

NA

4.83 ± 0.066

0.190 ± 0.003

24.01 ± 0.376

1.189 ± 0.002

20.97

21.10

n/a

n/a

Input Mixup (α = 1)
Manifold Mixup (α = 2)

3.82 ± 0.048

0.186 ± 0.004

2.95 ± 0.046

0.137 ± 0.003

Input Mixup (α = 1)
Manifold Mixup (α = 2)

22.11 ± 0.424

1.055 ± 0.006

20.34 ± 0.525

0.912 ± 0.002

PreActResNet34

PreActResNet34

No Mixup

4.64 ± 0.072

0.200 ± 0.002

No Mixup

23.55 ± 0.399

1.189 ± 0.002

Input Mixup (α = 1)
Manifold Mixup (α = 2)

2.88 ± 0.043

0.176 ± 0.002

2.54 ± 0.047

0.118 ± 0.002

Input Mixup (α = 1)
Manifold Mixup (α = 2)

20.53 ± 0.330

1.039 ± 0.045

18.35 ± 0.360

0.877 ± 0.053

Wide-Resnet-28-10

Wide-Resnet-28-10

No Mixup

3.99 ± 0.118

0.162 ± 0.004

No Mixup

21.72 ± 0.117

1.023 ± 0.004

Input Mixup (α = 1)
Manifold Mixup (α = 2)

2.92 ± 0.088

0.173 ± 0.001

2.55 ± 0.024

0.111 ± 0.001

Input Mixup (α = 1)
Manifold Mixup (α = 2)

18.89 ± 0.111

0.927 ± 0.031

18.04 ± 0.171

0.809 ± 0.005

(a) CIFAR-10

(b) CIFAR-100

Zhao & Cho (2018) explored improving adversarial robustness by classifying points using a function
of the nearest neighbors in a ﬁxed feature space. This involves applying mixup between each set
of nearest neighbor examples in that feature space. The similarity between (Zhao & Cho, 2018)
and Manifold Mixup is that both consider linear interpolations of hidden representations with the
same interpolation applied to their labels. However, an important difference is that Manifold Mixup
backpropagates gradients through the earlier parts of the network (the layers before the point where
mixup is applied), unlike (Zhao & Cho, 2018). In Section 3 we explain how this discrepancy
signiﬁcantly affects the learning process.

AdaMix (Guo et al., 2018a) is another related method which attempts to learn better mixing distri-
butions to avoid overlap. AdaMix performs interpolations only on the input space, reporting that
their method degrades signiﬁcantly when applied to hidden layers. Thus, AdaMix may likely work
for different reasons than Manifold Mixup, and perhaps the two are complementary. AgrLearn (Guo
et al., 2018b) adds an information bottleneck layer to the output of deep neural networks. AgrLearn
leads to substantial improvements, achieving 2.45% test error on CIFAR-10 when combined with
Input Mixup (Zhang et al., 2018). As AgrLearn is complimentary to Input Mixup, it may be also
complimentary to Manifold Mixup. Wang et al. (2018) proposed an interpolation exclusively in the
output space, does not backpropagate through the interpolation procedure, and has a very different
framing in terms of the Euler-Lagrange equation (Equation 2) where the cost is based on unlabeled
data (and the pseudolabels at those points) and the labeled data provide constraints.

5 Experiments

We now turn to the empirical evaluation of Manifold Mixup. We will study its regularization properties
in supervised learning (Section 5.1), as well as how it affects the robustness of neural networks to
novel input deformations (Section 5.2), and adversarial examples (Section 5.3).

5.1 Generalization on Supervised Learning

We train a variety of residual networks (He et al., 2016) using different regularizers: no regularization,
AdaMix, Input Mixup, and Manifold Mixup. We follow the training procedure of (Zhang et al.,
2018), which is to use SGD with momentum, a weight decay of 10−4, and a step-wise learning rate
decay. Please refer to Appendix C for further details (including the values of the hyperparameter
α). We show results for the CIFAR-10 (Table 1a), CIFAR-100 (Table 1b), SVHN (Table 2), and
TinyImageNET (Table 3) datasets. Manifold Mixup outperforms vanilla training, AdaMix, and

7

Table 2: Classiﬁcation errors and neg-log-likelihoods
on SVHN. We run each experiment ﬁve times.

PreActResNet18

Test Error (%)

Test NLL

No Mixup
Input Mixup (α = 1)
Manifold Mixup (α = 2)

2.89 ± 0.224
2.76 ± 0.014
2.27 ± 0.011

0.136 ± 0.001
0.212 ± 0.011
0.122 ± 0.006

PreActResNet34

No Mixup
Input Mixup (α = 1)
Manifold Mixup (α = 2)

2.97 ± 0.004
2.67 ± 0.020
2.18 ± 0.004

0.165 ± 0.003
0.199 ± 0.009
0.137 ± 0.008

Wide-Resnet-28-10

No Mixup
Input Mixup (α = 1)
Manifold Mixup (α = 2)

2.80 ± 0.044
2.68 ± 0.103
2.06 ± 0.068

0.143 ± 0.002
0.184 ± 0.022
0.126 ± 0.008

Table 3: Accuracy on TinyImagenet.
top-5
PreActResNet18

top-1

No Mixup
Input Mixup (α = 0.2)
Input Mixup (α = 0.5)
Input Mixup (α = 1.0)
Input Mixup (α = 2.0)
Manifold Mixup (α = 0.2)
Manifold Mixup (α = 0.5)
Manifold Mixup (α = 1.0)
Manifold Mixup (α = 2.0)

55.52
56.47
55.49
52.65
44.18
58.70
57.24
56.83
48.14

71.04
71.74
71.62
70.70
68.26
73.59
73.48
73.75
71.69

Input Mixup across datasets and model architectures. Furthermore, Manifold Mixup leads to models
with signiﬁcantly better Negative Log-Likelihood (NLL) on the test data. In the case of CIFAR-10,
Manifold Mixup models achieve as high as 50% relative improvement of test NLL.

As a complimentary experiment to better understand why Manifold Mixup works, we zeroed gradient
updates immediately after the layer where mixup is applied. On the dataset CIFAR-10 and using a
PreActResNet18, this led to a 4.33% test error, which is worse than our results for Input Mixup and
Manifold Mixup, yet better than the baseline. Because Manifold Mixup selects the mixing layer at
random, each layer is still being trained even when zeroing gradients, although it will receive less
updates. This demonstrates that Manifold Mixup improves performance by updating the layers both
before and after the mixing operation.

We also compared Manifold Mixup against other strong regularizers. For each regularizer, we
selected the best hyper-parameters using a validation set. The training of PreActResNet50 on CIFAR-
10 for 600 epochs led to the following test errors (%): no regularization (4.96 ± 0.19), Dropout
(5.09 ± 0.09), Cutout (Devries & Taylor, 2017) (4.77 ± 0.38), Mixup (4.25 ± 0.11), and Manifold
Mixup (3.77 ± 0.18). (Note that the results in Table 1 for PreActResNet were run for 1200 epochs,
and therefore are not directly comparable to the numbers in this paragraph.)

To provide further evidence about the quality of representations learned with Manifold Mixup, we
applied a k-nearest neighbour classiﬁer on top of the features extracted from a PreActResNet18
trained on CIFAR-10. We achieved test errors of 6.09% (vanilla training), 5.54% (Input Mixup), and
5.16% (Manifold Mixup).

Finally, we considered a synthetic dataset where the data generating process is a known function
of disentangled factors of variation, and mixed in this space factors. As shown in Appendix A, this
led to signiﬁcant improvements in performance. This suggests that mixing in the correct level of
representation has a positive impact on the decision boundary. However, our purpose here is not to
make any claim about when do deep networks learn representations corresponding to disentangled
factors of variation.

Finally, Table 6 and Table 5 show the sensitivity of Manifold Mixup to the hyper-parameter α and the
set of eligible layers S. (These results are based on training a PreActResNet18 for 2000 epochs, so
these numbers are not exactly comparable to the ones in Table 1.) This shows that Manifold Mixup is
robust with respect to choice of hyper-parameters, with improvements for many choices.

5.2 Generalization to Novel Deformations

To further evaluate the quality of representations learned with Manifold Mixup, we train PreAc-
tResNet34 models on the normal CIFAR-100 training split, but test them on novel (not seen during
training) deformations of the test split. These deformations include random rotations, random
shearings, and different rescalings. Better representations should generalize to a larger variety of
deformations. Table 4 shows that networks trained using Manifold Mixup are the most able to classify
test instances subject to novel deformations, which suggests the learning of better representations.
For more results see Appendix C, Table 9.

8

Table 4: Test accuracy on novel deformations. All models trained on normal CIFAR-100.

No Mixup

Input Mixup
(α = 1)

Input Mixup
(α = 2)

Manifold Mixup
(α = 2)

Deformation
Rotation U(−20◦,20◦)
Rotation U(−40◦,40◦)
Shearing U(−28.6◦, 28.6◦)
Shearing U(−57.3◦, 57.3◦)
Zoom In (60% rescale)
Zoom In (80% rescale)
Zoom Out (120% rescale)
Zoom Out (140% rescale)

{0, 1, 2}
{0, 1}
{0, 1, 2, 3}
{1, 2}
{0}
{1, 2, 3}
{1}
{2, 3}
{2}
{}

97.23
96.94
96.92
96.35
96.73
96.51
96.10
95.32
95.19
95.27

52.96
33.82
55.92
35.66
12.68
47.95
43.18
19.34

79.60
78.93
80.18
78.69
78.15
79.31
78.72
76.46
76.50
76.40

Table 5: Test accuracy Manifold Mixup for dif-
ferent sets of eligible layers S on CIFAR.
CIFAR-10 CIFAR-100

S

55.55
37.73
58.16
39.34
13.75
52.18
60.02
41.81

56.48
36.78
60.01
39.7
13.12
50.47
61.62
42.02

Table 6: Test accuracy (%) of Input Mixup and
Manifold Mixup for different α on CIFAR-10.

α Input Mixup Manifold Mixup

0.5
1.0
1.2
1.5
1.8
2.0

96.68
96.75
96.72
96.84
96.80
96.73

60.08
42.13
62.85
44.27
11.49
52.70
63.59
45.29

96.76
97.00
97.03
97.10
97.15
97.23

5.3 Robustness to Adversarial Examples

Adversarial robustness is related to the position of the decision boundary relative to the data. Because
Manifold Mixup only considers some directions around data points (those corresponding to interpola-
tions), we would not expect the model to be robust to adversarial attacks that consider any direction
around each example. However, since Manifold Mixup expands the set of examples seen during
training, an intriguing hypothesis is that these expansions overlap with the set of possible adversarial
examples, providing some degree of defense. If this hypothesis is true, Manifold Mixup would force

Table 7: Test accuracy on white-box FGSM adversarial examples on CIFAR-10 and CIFAR-100
(using a PreActResNet18 model) and SVHN (using a WideResNet20-10 model). We include the
results of (Madry et al., 2018)†.

CIFAR-10

No Mixup
Input Mixup (α = 1)
Manifold Mixup (α = 2)
PGD training (7-steps)†

CIFAR-100

Input Mixup (α = 1)
Manifold Mixup (α = 2)
SVHN

No Mixup
Input Mixup (α = 1)
Manifold Mixup (α = 2)
PGD training (7-steps)†

FGSM

36.32
71.51
77.50
56.10

FGSM

40.7
44.96
FGSM

21.49
56.98
65.91
72.80

9

adversarial attacks to consider a wider set of directions, leading to a larger computational expense for
the attacker. To explore this, we consider the Fast Gradient Sign Method (FGSM, Goodfellow et al.,
2015), which constructs adversarial examples in one single step, thus considering a relatively small
subset of directions around examples. The performance of networks trained using Manifold Mixup
against FGSM attacks is given in Table 7. One challenge in evaluating robustness against adversarial
examples is the “gradient masking problem”, in which a defense succeeds only by reducing the
quality of the gradient signal. Athalye et al. (2018) explored this issue in depth, and proposed running
an unbounded search for a large number of iterations to conﬁrm the quality of the gradient signal.
Manifold Mixup passes this sanity check (consult Appendix D for further details). While we found
that using Manifold Mixup improves the robustness to single-step FGSM attack (especially over Input
Mixup), we found that Manifold Mixup did not signiﬁcantly improve robustness against stronger,
multi-step attacks such as PGD (Madry et al., 2018).

6 Connections to Neuroscience and Credit Assignment

We present an intriguing connection between Manifold Mixup and a challenging problem in neuro-
science. At a high level, we can imagine systems in the brain which compute predictions from a
stream of changing inputs, and pass these predictions onto other modules which return some kind of
feedback signal (Lee et al., 2015; Scellier & Bengio, 2017; Whittington & Bogacz, 2017; Bartunov
et al., 2018). For instance, these feedback signals can be gradients or targets for prediction. There is a
delay between the output of the prediction and the point in time in which the feedback can return
to the system after having travelled across the brain. Moreover, this delay could be noisy and could
differ based on the type of the prediction or other conditions in the brain, as well as depending on
which paths are considered (there are many skip connections between areas). This means that it could
be very difﬁcult for a system in the brain to establish a clear correspondence between its outputs and
the feedback signals that it receives over time.

While it is preliminary, an intriguing hypothesis is that part of how systems in the brain could be
working around this limitation is by averaging their states and feedback signals across multiple points
in time. The empirical results from mixup suggest that such a technique may not just allow successful
computation, but also act as a potent regularizer. Manifold Mixup strenghthens this result by showing
that the same regularization effect can be achieved from mixing in higher level hidden representations.

7 Conclusion

Deep neural networks often give incorrect, yet extremely conﬁdent predictions on examples that
differ from those seen during training. This problem is one of the most central challenges in deep
learning. We have investigated this issue from the perspective of the representations learned by deep
neural networks. We observed that vanilla neural networks spread the training data widely throughout
the representation space, and assign high conﬁdence predictions to almost the entire volume of
representations. This leads to major drawbacks since the network will provide high-conﬁdence
predictions to examples off the data manifold, thus lacking enough incentives to learn discriminative
representations about the training data. To address these issues, we introduced Manifold Mixup, a
new algorithm to train neural networks on interpolations of hidden representations. Manifold Mixup
encourages the neural network to be uncertain across the volume of the representation space unseen
during training. This leads to concentrating the representations of the real training examples in a low
dimensional subspace, resulting in more discriminative features. Throughout a variety of experiments,
we have shown that neural networks trained using Manifold Mixup have better generalization in
terms of error and log-likelihood, as well as better robustness to novel deformations of the data and
adversarial examples. Being easy to implement and incurring little additional computational cost, we
hope that Manifold Mixup will become a useful regularization tool for deep learning practitioners.

Acknowledgements

The authors thank Christopher Pal, Sherjil Ozair and Dzmitry Bahdanau for useful discussions and
feedback. Vikas Verma was supported by Academy of Finland project 13312683 / Raiko Tapani AT
kulut. We would also like to acknowledge Compute Canada for providing computing resources used
in this work.

10

References

Achille, A. and Soatto, S. Information dropout: Learning optimal representations through noisy

computation. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2018.

Alemi, A. A., Fischer, I., Dillon, J. V., and Murphy, K. Deep variational information bottleneck. In

International Conference on Learning Representations, 2017.

Arjovsky, M., Chintala, S., and Bottou, L. Wasserstein generative adversarial networks. In Interna-

tional Conference on Machine Learning, pp. 214–223, 2017.

Athalye, A., Carlini, N., and Wagner, D. Obfuscated gradients give a false sense of security:
Circumventing defenses to adversarial examples. In Dy, J. and Krause, A. (eds.), Proceedings of
the 35th International Conference on Machine Learning, volume 80 of Proceedings of Machine
Learning Research, pp. 274–283, Stockholmsmässan, Stockholm Sweden, 10–15 Jul 2018. PMLR.
URL http://proceedings.mlr.press/v80/athalye18a.html.

Bartlett, P. and Shawe-taylor, J. Generalization performance of support vector machines and other

pattern classiﬁers, 1998.

Bartunov, S., Santoro, A., Richards, B. A., Hinton, G. E., and Lillicrap, T. Assessing the scalability of
biologically-motivated deep learning algorithms and architectures. submitted to ICLR’2018, 2018.

Belghazi, I., Rajeswar, S., Baratin, A., Hjelm, R. D., and Courville, A. C. MINE: mutual information
neural estimation. CoRR, abs/1801.04062, 2018. URL http://arxiv.org/abs/1801.
04062.

Ben-David, S., Blitzer, J., Crammer, K., Kulesza, A., Pereira, F., and Vaughan, J. W. A theory of

learning from different domains. Machine learning, 79(1-2):151–175, 2010.

Cybenko, G. Approximation by superpositions of a sigmoidal function. Mathematics of control,

signals and systems, 2(4):303–314, 1989.

Devries, T. and Taylor, G. W. Improved regularization of convolutional neural networks with cutout.

CoRR, abs/1708.04552, 2017. URL http://arxiv.org/abs/1708.04552.

Goodfellow, I. J., Shlens, J., and Szegedy, C. Explaining and Harnessing Adversarial Examples. In

International Conference on Learning Representations, 2015.

Goyal, A., Islam, R., Strouse, D., Ahmed, Z., Larochelle, H., Botvinick, M., Levine, S., and Bengio,

Y. Transfer and exploration via the information bottleneck. 2018.

Gulrajani, I., Ahmed, F., Arjovsky, M., Dumoulin, V., and Courville, A. C. Improved training of
wasserstein gans. In Advances in Neural Information Processing Systems, pp. 5769–5779, 2017.

Guo, H., Mao, Y., and Zhang, R. MixUp as Locally Linear Out-Of-Manifold Regularization. ArXiv

e-prints, 2016. URL https://arxiv.org/abs/1809.02499.

Guo, H., Mao, Y., and Zhang, R. MixUp as Locally Linear Out-Of-Manifold Regularization. ArXiv

e-prints, September 2018a.

Guo, H., Mao, Y., and Zhang, R. Aggregated Learning: A Vector Quantization Approach to Learning

with Neural Networks. ArXiv e-prints, July 2018b.

He, K., Zhang, X., Ren, S., and Sun, J. Identity mappings in deep residual networks. In ECCV, 2016.

Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. Improving neural
networks by preventing co-adaptation of feature detectors. CoRR, abs/1207.0580, 2012. URL
http://arxiv.org/abs/1207.0580.

Ioffe, S. and Szegedy, C. Batch normalization: Accelerating deep network training by reducing

internal covariate shift. In ICML, 2015.

LeCun, Y., Bengio, Y., and Hinton, G. Deep learning. nature, 521(7553):436, 2015.

11

Lee, D.-H., Zhang, S., Fischer, A., and Bengio, Y. Difference target propagation. In Machine

Learning and Knowledge Discovery in Databases (ECML/PKDD). 2015.

Lee, W. S., Bartlett, P. L., and Williamson, R. C. Lower bounds on the vc dimension of smoothly
parameterized function classes. Neural Computation, 7(5):1040–1053, Sep. 1995. ISSN 0899-7667.
doi: 10.1162/neco.1995.7.5.1040.

Madry, A., Makelov, A., Schmidt, L., Tsipras, D., and Vladu, A. Towards deep learning models
resistant to adversarial attacks. In International Conference on Learning Representations, 2018.
URL https://openreview.net/forum?id=rJzIBfZAb.

Mikolov, T., Chen, K., Corrado, G., and Dean, J. Efﬁcient estimation of word representations in

vector space. In International Conference on Learning Representations, 2013.

Miyato, T., Kataoka, T., Koyama, M., and Yoshida, Y. Spectral normalization for generative
adversarial networks. In International Conference on Learning Representations, 2018. URL
https://openreview.net/forum?id=B1QRgziT-.

Salimans, T., Goodfellow, I., Zaremba, W., Cheung, V., Radford, A., and Chen, X.

Improved
techniques for training gans. In Advances in Neural Information Processing Systems, pp. 2234–
2242, 2016.

Scellier, B. and Bengio, Y. Equilibrium propagation: Bridging the gap between energy-based models

and backpropagation. Frontiers in computational neuroscience, 11, 2017.

Shwartz-Ziv, R. and Tishby, N. Opening the black box of deep neural networks via information.

CoRR, abs/1703.00810, 2017. URL http://arxiv.org/abs/1703.00810.

Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I., and Fergus, R. Intriguing
properties of neural networks. In International Conference on Learning Representations, 2014.

Tishby, N. and Zaslavsky, N. Deep learning and the information bottleneck principle. CoRR,

abs/1503.02406, 2015. URL http://arxiv.org/abs/1503.02406.

Tokozume, Y., Ushiku, Y., and Harada, T. Between-class learning for image classiﬁcation. In The

IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June 2018.

Wang, B., Luo, X., Li, Z., Zhu, W., Shi, Z., and Osher, S. J. Deep learning with data dependent
implicit activation function. CoRR, abs/1802.00168, 2018. URL http://arxiv.org/abs/
1802.00168.

Whittington, J. C. and Bogacz, R. An approximation of the error backpropagation algorithm in a
predictive coding network with local hebbian synaptic plasticity. Neural computation, 2017.

Zeiler, M. D. and Fergus, R. Visualizing and understanding convolutional networks. CoRR,

abs/1311.2901, 2013. URL http://arxiv.org/abs/1311.2901.

Zhang, H., Cisse, M., Dauphin, Y. N., and Lopez-Paz, D. mixup: Beyond empirical risk minimization.
In International Conference on Learning Representations, 2018. URL https://openreview.
net/forum?id=r1Ddp1-Rb.

Zhao, J. and Cho, K. Retrieval-augmented convolutional neural networks for improved robustness
against adversarial examples. CoRR, abs/1802.09502, 2018. URL http://arxiv.org/abs/
1802.09502.

12

Figure 4: Synthetic task where the underlying factors are known exactly. Training images (left),
images from input mixup (center), and images from mixing in the ground truth factor space (right).

A Synthetic Experiments Analysis

We conducted experiments using a generated synthetic dataset where each image is deterministically
rendered from a set of independent factors. The goal of this experiment is to study the impact of
input mixup and an idealized version of Manifold Mixup where we know the true factors of variation
in the data and we can do mixup in exactly the space of those factors. This is not meant to be a fair
evaluation or representation of how Manifold Mixup actually performs - rather it’s meant to illustrate
how generating relevant and semantically meaningful augmented data points can be much better than
generating points by mixing in the input space.

We considered three tasks. In Task A, we train on images with angles uniformly sampled between
(-70◦, -50◦) (label 0) with 50% probability and uniformly between (50◦, 80◦) (label 1) with 50%
probability. At test time we sampled uniformly between (-30◦, -10◦) (label 0) with 50% probability
and uniformly between (10◦, 30◦) (label 1) with 50% probability. Task B used the same setup as
Task A for training, but the test instead used (-30◦, -20◦) as label 0 and (-10◦, 30◦) as label 1. In Task
C we made the label whether the digit was a “1” or a “7”, and our training images were uniformly
sampled between (-70◦, -50◦) with 50% probability and uniformly between (50◦, 80◦) with 50%
probability. The test data for Task C were uniformly sampled with angles from (-30◦, 30◦).

The examples of the data are in Figure 4 and results are in Table 8. In all cases we found that Input
Mixup gave some improvements in likelihood but limited improvements in accuracy - suggesting
that the even generating nonsensical points can help a classiﬁer trained with Input Mixup to be better
calibrated. Nonetheless the improvements were much smaller than those achieved with mixing in the
ground truth attribute space.

B Analysis of how Manifold Mixup changes learned representations

We have found signiﬁcant improvements from using Manifold Mixup, but a key question is whether
the improvements come from changing the behavior of the layers before the mixup operation is
applied or the layers after the mixup operation is applied. This is a place where Manifold Mixup and
Input Mixup are clearly differentiated, as Input Mixup has no “layers before the mixup operation”
to change. We conducted analytical experimented where the representations are low-dimensional
enough to visualize. More concretely, we trained a fully connected network on MNIST with two fully-
connected leaky relu layers of 1024 units, followed by a 2-dimensional bottleneck layer, followed by
two more fully-connected leaky-relu layers with 1024 units.

We then considered training with no mixup, training with mixup in the input space, and training only
with mixup directly following the 2D bottleneck. We consistently found that Manifold Mixup has the
effect of making the representations much tighter, with the real data occupying smaller region in the
hidden space, and with a more well separated margin between the classes, as shown in Figure 5

13

Table 8: Results on synthetic data generalization task with an idealized Manifold Mixup (mixing in
the true latent generative factors space). Note that in all cases visible mixup signiﬁcantly improved
likelihood, but not to the same degree as factor mixup.

Task

Model

Test Accuracy Test NLL

No Mixup

Task A Input Mixup (1.0)

Ground Truth Factor Mixup (1.0)

No Mixup

Task B Input Mixup (1.0)

Ground Truth Factor Mixup (1.0)

No Mixup

Task C Input Mixup

Ground Truth Factor Mixup

1.6
0.0
94.77

21.25
18.40
84.02

63.05
66.09
99.06

8.8310
6.0601
0.4940

7.0026
4.3149
0.4572

4.2871
1.4181
0.1279

Figure 5: Representations from a classiﬁer on MNIST (top is trained on digits 0-4, bottom is trained
on all digits) with a 2D bottleneck representation in the middle layer. No Mixup Baseline (left), Input
Mixup (center), Manifold Mixup (right).

C Supervised Regularization Experimental Details

For supervised regularization we considered following architectures: PreActResNet18, PreActRes-
Net34, and Wide-Resnet-28-10. When using Manifold Mixup, we selected the layer to perform mixing
uniformly at random from a set of eligible layers. In all our experiments, for the PreActResNets
architectures, the eligible layers for mixing in Manifold Mixup were : the input layer, the output from
the ﬁrst resblock, and the output from the second resblock. For Wide-ResNet-20-10 architecture,
the eligible layers for mixing in Manifold Mixup were: the input layer and the output from the ﬁrst
resblock. For PreActResNet18, the ﬁrst resblock has four layers and the second resblock has four
layers. For PreActResNet34, the ﬁrst resblock has six layers and the second resblock has eight layers.
For Wide-Resnet-28-10, the ﬁrst resblock has four layers. Thus the mixing is often done fairly deep
layers in the network.

Throughout our experiments, we use SGD+Momentum optimizer with learning rate 0.1, momentum
0.9 and weight-decay 10−4, with step-wise learning rate decay.

For Table 1a, Table 1b and Table 2, we train the PreActResNet18, and PreActResNet34 for 1200
epochs with learning rate annealed by a factor of 10 at epoch 400 and 800. For above Tables, we train

14

Table 9: Models trained on the normal CIFAR-100 and evaluated on a test set with novel deformations.
Manifold Mixup (ours) consistently allows the model to be more robust to random shearing, rescaling,
and rotation even though these deformations were not observed during training. For the rotation
experiment, each image is rotated with an angle uniformly sampled from the given range. Likewise
the shearing is performed with uniformly sampled angles. Zooming-in refers to take a bounding box
at the center of the image with k% of the length and k% of the width of the original image, and then
expanding this image to ﬁt the original size. Likewise zooming-out refers to drawing a bounding box
with k% of the height and k% of the width, and then taking this larger area and scaling it down to the
original size of the image (the padding outside of the image is black).

No Mixup
Baseline

Input Mixup
α=1.0

Input Mixup
α=2.0

Manifold Mixup
α=2.0

Test Set Deformation

Rotation U(−20◦,20◦)
Rotation U(−40◦,40◦)
Rotation U(−60◦,60◦)
Rotation U(−80◦,80◦)
Shearing U(−28.6◦, 28.6◦)
Shearing U(−57.3◦, 57.3◦)
Shearing U(−114.6◦, 114.6◦)
Shearing U(−143.2◦, 143.2◦)
Shearing U(−171.9◦, 171.9◦)
Zoom In (20% rescale)
Zoom In (40% rescale)
Zoom In (60% rescale)
Zoom In (80% rescale)
Zoom Out (120% rescale)
Zoom Out (140% rescale)
Zoom Out (160% rescale)
Zoom Out (180% rescale)

52.96
33.82
26.77
24.19
55.92
35.66
19.57
17.55
22.38
2.43
4.97
12.68
47.95
43.18
19.34
11.12
7.98

55.55
37.73
28.47
26.72
58.16
39.34
22.94
21.66
25.53
1.9
4.47
13.75
52.18
60.02
41.81
25.48
18.11

56.48
36.78
27.53
25.34
60.01
39.7
22.8
21.22
25.27
2.45
5.23
13.12
50.47
61.62
42.02
25.85
18.02

60.08
42.13
33.78
29.95
62.85
44.27
24.69
23.56
28.02
2.03
4.17
11.49
52.7
63.59
45.29
27.02
15.68

Wide-ResNet-28-10 for 400 epochs with learning rate annealed by a factor of 10 at epoch 200 and
300. In Table 3, we train PreActResNet18 for 2000 epochs with learning rate annealed by a factor of
10 at epoch 1000 and 1500.

For Table 6 and Table 5, we train the PreActResNet18 network for 2000 epochs with learning rate
annealed by a factor of 10 at epoch 1000 and 1500.

For Table 7, Table 4 and Table 9, we train the networks for 1200 epochs with learning rate annealed
by a factor of 10 at epoch 400 and 800.

In Figure 6 and Figure 7, we present the training loss (Binary cross entropy) for CIFAR10 and
CIFAR100 datasets respectively. We observe that performing Manifold Mixup in higher layers allows
the train loss to go down faster as compared to the Input Mixup, which suggests that while Input
Mixup may suffer from underﬁtting, Manifold Mixup alleviates this problem to some extend.

In Table 9, we present full set of experiments of Section 5.2.

C.1 Hyperparameter α

For Input Mixup on CIFAR10 and CIFAR100 datasets, we used the value α = 1.0 as recommended
in (Zhang et al., 2018). For Input Mixup on SVHN and Tiny-imagenet datasets, we experimented
with the α values in the set {0.1, 0.2, 0.4, 0.8.1.0, 2.0, 4.0}. We obtained best results using α = 1.0
and α = 0.2 for SVHN and Tiny-imagenet, respectively.

For Manifold Mixup,
for all datasets, we experimented with the α values in the set
{0.1, 0.2, 0.4, 0.8.1.0, 2.0, 4.0}. We obtained best results with α = 2.0 for CIFAR10, CIFAR100 and
SVHN and with α = 0.2 for Tiny-imagenet.

15

Figure 6: CIFAR-10 train set Binary Cross Entropy Loss (BCE) on Y-axis using PreActResNet18,
with respect to training epochs (X-axis). The numbers in {} refer to the resblock after which Manifold
Mixup is performed. The ordering of the losses is consistent over the course of training: Manifold
Mixup with gradient blocked before the mixing layer has the highest training loss, followed by Input
Mixup. The lowest training loss is achieved by mixing in the deepest layer, which suggests that
having more hidden units can help to prevent underﬁtting.

Figure 7: CIFAR-100 train set Binary Cross Entropy Loss (BCE) on Y-axis using PreActResNet50,
with respect to training epochs (X-axis). The numbers in {} refer to the resblock after which Manifold
Mixup is performed. The lowest training loss is achieved by mixing in the deepest layer.

16

D Adversarial Examples

We ran the unbounded projected gradient descent (PGD) (Madry et al., 2018) sanity check suggested
in (Athalye et al., 2018). We took our trained models for the input mixup baseline and manifold
mixup and we ran PGD for 200 iterations with a step size of 0.01 which reduced the mixup model’s
accuracy to 1% and reduced the Manifold Mixup model’s accuracy to 0%. This is a evidence that our
defense did not improve results primarily as a result of gradient masking.

E Generative Adversarial Networks

The recent literature has suggested that regularizing the discriminator is beneﬁcial for training GANs
(Salimans et al., 2016; Arjovsky et al., 2017; Gulrajani et al., 2017; Miyato et al., 2018). In a
similar vein, one could add mixup to the original GAN training objective such that the extra data
augmentation acts as a beneﬁcial regularization to the discriminator, which is what was proposed in
Zhang et al. (2018). Mixup proposes the following objective1:

max
g

min
d

Ex1,x2,λ,z (cid:96)(d(Mixλ(x1, x2)), y(λ; x1, x2)),

where x1, x2 can be either real or fake samples, and λ is sampled from a U nif orm(0, α). Note that
we have used a function y(λ; x1, x2) to denote the label since there are four possibilities depending
on x1 and x2:

y(λ; x1, x2) =


λ,

1 − λ,
0,

1,

if x1 is real and x2 is fake
if x1 is fake and x2 is real
if both are fake
if both are real

In practice however, we ﬁnd that it did not make sense to create mixes between real and real where
the label is set to 1, (as shown in equation 4), since the mixup of two real examples in input space
is not a real example. So we only create mixes that are either real-fake, fake-real, or fake-fake.
Secondly, instead of using just the equation in 3, we optimize it in addition to the regular minimax
GAN equations:

max
g

min
d

Ex (cid:96)(d(x), 1) + Eg(z) (cid:96)(d(g(z)), 0) + GAN mixup term (Equation 3)

Using similar notation to earlier in the paper, we present the manifold mixup version of our GAN
objective in which we mix in the hidden space of the discriminator:

Ex1,x2,λ,z,k (cid:96)(d(x), 1) + (cid:96)(d(g(z), 0) + (cid:96)(fk(Mixλ(gk(x1), gk(x2))), y(λ; x1, x2)),

min
d

where gk(·) is a function denoting the intermediate output of the discriminator at layer k, and fk(·)
the output of the discriminator given input from layer k.

The layer k we choose the sample can be arbitrary combinations of the input layer (i.e., input mixup),
or the ﬁrst or second resblocks of the discriminator, all with equal probability of selection.

We run some experiments evaluating the quality of generated images on CIFAR10, using as a baseline
JSGAN with spectral normalization (Miyato et al., 2018) (our conﬁguration is almost identical to
theirs). Results are averaged over at least three runs2. From these results, the best-performing
mixup experiments (both input and Manifold Mixup) is with α = 0.5, with mixing in all layers
(both resblocks and input) achieving an average Inception / FID of 8.04 ± 0.08 / 21.2 ± 0.47, input
mixup achieving 8.03 ± 0.08 / 21.4 ± 0.56, for the baseline experiment 7.97 ± 0.07 / 21.9 ± 0.62.
This suggests that mixup acts as a useful regularization on the discriminator, which is even further
improved by Manifold Mixup. (See Figure 8 for the full set of experimental results.)

1The formulation written is based on the ofﬁcial code provided with the paper, rather than the description in
the paper. The discrepancy between the two is that the formulation in the paper only considers mixes between
real and fake.

2Inception scores are typically reported with a mean and variance, though this is across multiple splits of
samples across a single model. Since we run multiple experiments, we average their respective means and
variances.

(3)

(4)

(5)

(6)

17

Figure 8: We test out various values of α in conjunction with either: input mixup ( pixel) (Zhang
et al., 2018), mixing in the output of the ﬁrst resblock (h1), mixing in either the output of the ﬁrst
resblock or the output of the second resblock (h1,2), and mixing in the input or the output of the ﬁrst
resblock or the output of the second resblock (1,2,pixel). The dotted line indicates the baseline
Inception / FID score. Higher scores are better for Inception, while lower is better for FID.

F Intuitive Explanation of how Manifold Mixup avoids Inconsistent

Interpolations

An essential motivation behind manifold mixup is that as the network learns the hidden states, it
does so in a way that encourages them to be a ﬂatter (per-class). Section 3.1 characterized this for
hidden states with any number of dimensions and Figure 1 showed how this can occur on the 2D
spiral dataset.

Our goal here is to discuss concrete examples to illustrate why this ﬂattening happens, as shown in
Figure 3. If we consider any two points, the interpolated point between them is based on a sampled λ
and the soft-target for that interpolated point is the targets interpolated with the same λ. So if we
consider two points A,B which have the same label, it is apparent that every point on the line between
A and B should have that same label with 100% conﬁdence. If we consider two points A,B with
different labels, then the point which is halfway between them will be given the soft-label of 50% the
label of A and 50% the label of B (and so on for other λ values).

It is clear that for many arrangements of data points, it is possible for a point in the space to be reached
through distinct interpolations between different pairs of examples, and reached with different λ
values. Because the learned model tries to capture the distribution p(y|h), it can only assign a single
distribution over the label values to a single particular point (for example it could say that a point
is 100% label A, or it could say that a point is 50% label A and 50% label B). Intuitively, these
inconsistent soft-labels at interpolated points can be avoided if the states for each class are more
concentrated and the representations do not have variability in directions pointing towards other
classes. This leads to ﬂattening: a reduction in the number of directions with variability. The theory
in Section 3.1 characterizes exactly what this concentration needs to be: that the representations for
each class need to lie on a subspace of dimension equal to “number of hidden dimensions” - “number
of classes” + 1.

G Spectral Analysis of Learned Representations

When we refer to ﬂattening, we mean that the class-speciﬁc representations have reduced variability
in some directions. Our analysis in this section makes this more concrete.

18

Figure 9: SVD on the class-speciﬁc representations in a bottleneck layer with 12 units following
3 hidden layers. For the ﬁrst singular value, the value (averaged across the plots) is 50.08 for the
baseline, 37.17 for Input Mixup, and 43.44 for Manifold Mixup (these are the values at x=0 which are
cutoff). We can see that the class-speciﬁc SVD leads to singular values which are dramatically more
concentrated when using Manifold Mixup with Input Mixup not having a consistent effect.

We trained an MNIST classiﬁer with a hidden state bottleneck in the middle with 12 units (intentionally
selected to be just slightly greater than the number of classes). We then took the representation for each
class and computed a singular value decomposition (Figure 9 and Figure 10) and we also computed
an SVD over all of the representations together (Figure 12). Our architecture contained three hidden
layers with 1024 units and LeakyReLU activation, followed by a bottleneck representation layer (with
either 12 or 30 hidden units), followed by an additional four hidden layers each with 1024 units and
LeakyReLU activation. When we performed Manifold Mixup for our analysis, we only performed
mixing in the bottleneck layer, and used a beta distribution with an alpha of 2.0. Additionally we
performed another experiment (Figure 11 where we placed the bottleneck representation layer with
30 units immediately following the ﬁrst hidden layer with 1024 units and LeakyReLU activation.

We found that Manifold Mixup had a striking effect on the singular values, with most of the singular
values becoming much smaller. Effectively, this means that the representations for each class have
variance in fewer directions. While our theory in Section 3.1 showed that this ﬂattening must force
each classes representations onto a lower-dimensional subspace (and hence an upper bound on the
number of singular values) but this explores how this occurs empirically and does not require the
number of hidden dimensions to be so small that it can be manually visualized. In our experiments
we tried using 12 hidden units in the bottleneck Figure 9 as well as 30 hidden units Figure 10 in the
bottleneck.

Our results from this experiment are unequivocal: Manifold Mixup dramatically reduces the size
of the smaller singular values for each classes representations. This indicates a ﬂattening of the
class-speciﬁc representations. At the same time, the singular values over all the representations are
not changed in a clear way (Figure 12), which suggests that this ﬂattening occurs in directions which
are distinct from the directions occupied by representations from other classes, which is the same
intuition behind our theory. Moreover, Figure 11 shows that when the mixing is performed earlier in
the network, there is still a ﬂattening effect, though it is weaker than in the later layers, and again
Input Mixup has an inconsistent effect.

19

Figure 10: SVD on the class-speciﬁc representations in a bottleneck layer with 30 units following
3 hidden layers. For the ﬁrst singular value, the value (averaged across the plots) is 14.68 for the
baseline, 12.49 for Input Mixup, and 14.43 for Manifold Mixup (these are the values at x=0 which are
cutoff).

Figure 11: SVD on the class-speciﬁc representations in a bottleneck layer with 30 units following a
single hidden layer. For the ﬁrst singular value, the value (averaged across the plots) is 33.64 for the
baseline, 27.60 for Input Mixup, and 24.60 for Manifold Mixup (these are the values at x=0 which
are cutoff). We see that with the bottleneck layer placed earlier, the reduction in the singular values
from Manifold Mixup is smaller but still clearly visible. This makes sense, as it is not possible for
this early layer to be perfectly discriminative.

20

Figure 12: When we run SVD on all of the classes together (in the setup with 12 units in the bottleneck
layer following 3 hidden layers), we see no clear difference in the singular values for the Baseline,
Input Mixup, and Manifold Mixup models. Thus we can see that the ﬂattening effect of manifold
mixup is entirely class-speciﬁc, and does not appear overall, which is consistent with what our theory
has predicted. More intuitively, this means that the directions which are being ﬂattened are those
directions which point towards the representations of different classes.

21

