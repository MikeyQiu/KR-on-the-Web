Coordinated Reasoning for Cross-Lingual Knowledge Graph Alignment

Kun Xu1, Linfeng Song1, Yansong Feng2, Yan Song3, Dong Yu1
1Tencent AI Lab, Seattle, US
2Peking University, Beijing, China
3Sinovation Ventures

0
2
0
2
 
n
a
J
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
8
2
7
8
0
.
1
0
0
2
:
v
i
X
r
a

Abstract

Existing entity alignment methods mainly vary on the
choices of encoding the knowledge graph, but they typ-
ically use the same decoding method, which indepen-
dently chooses the local optimal match for each source
entity. This decoding method may not only cause the
“many-to-one” problem but also neglect the coordinated
nature of this task, that is, each alignment decision
may highly correlate to the other decisions. In this pa-
per, we introduce two coordinated reasoning methods,
i.e., the Easy-to-Hard decoding strategy and joint en-
tity alignment algorithm. Speciﬁcally, the Easy-to-Hard
strategy ﬁrst retrieves the model-conﬁdent alignments
from the predicted results and then incorporates them as
additional knowledge to resolve the remaining model-
uncertain alignments. To achieve this, we further pro-
pose an enhanced alignment model that is built on the
current state-of-the-art baseline. In addition, to address
the many-to-one problem, we propose to jointly predict
entity alignments so that the one-to-one constraint can
be naturally incorporated into the alignment prediction.
Experimental results show that our model achieves the
state-of-the-art performance and our reasoning methods
can also signiﬁcantly improve existing baselines.

Introduction
Knowledge graphs (KGs), such as Freebase (Bollacker et
al., 2008) and DBpedia (Auer et al., 2007), represent world-
level factoid information of entities and their relations in
a graph-based format. They have been successfully used
in many natural language processing applications, such as
question answering (Berant et al., 2013; Bao et al., 2014;
Yih et al., 2015; Xu et al., 2016; Das et al., 2017) and rela-
tion extraction (Mintz et al., 2009; Hoffmann et al., 2011;
Min et al., 2013; Zeng et al., 2015). To date, there have
been many KGs in different languages, with each being cre-
ated in one language (Franco-Salvador, Rosso, and Montes-
y G´omez, 2016). They share lots of the same facts, and each
also provides rich additional information that the others do
not cover. Thus, it is very beneﬁcial to establish the cross-
lingual alignments between KGs, so that the combined KG
can provide richer knowledge for downstream tasks. There-

Copyright c(cid:13) 2020, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Figure 1: A challenging entity matching example.

fore, the cross-lingual KG alignment task, which automat-
ically matches entities between multilingual KGs, is pro-
posed to address this problem.

Most recently, several approaches based on cross-lingual
entity embeddings (Hao et al., 2016; Chen et al., 2017; Sun,
Hu, and Li, 2017) or graph neural networks (Wang et al.,
2018; Xu et al., 2019; Wu et al., 2019) have been proposed
for this task. In particular, Xu et al. (2019) introduces the
topic entity graph to capture the local context information
of an entity within the KG, and further tackles this task as
a graph matching problem by proposing a graph matching
network. This work signiﬁcantly advanced the state-of-the-
art accuracies across several datasets.

Despite the excitingly progressive results that have been
shown, all previous works fail to consider the coordinated
nature of this task, that is, each alignment decision may
highly correlate to the other decisions. For example, all ex-
isting models independently align each source entity, which
may result in the many-to-one mapping, i.e., more than one
source entities are aligned to the same target entity. In partic-
ular, we analyze the results of Xu et al. (2019) and ﬁnd that
nearly 8% of the alignments are many-to-one mappings. One
intuitive solution is to align these entities in a greedy fashion,
that is, assign one alignment at each time with a constraint
that all alignments are one-to-one mappings. However, this
may introduce the error propagation, since each decision er-
ror may propagate to the future decisions. On the other hand,
given the fact that the KGs are large, it is also impractical
to jointly assign all alignments, due to the massive search
space.

We analyze the results of existing alignment baselines and
ﬁnd the second type of errors are caused by the existence of
adversarial entities that have similar surface strings and KG
neighbors with the ground truth. It is challenging for exist-

ing approaches to disambiguate these entities since previ-
ous methods mainly rely on the embeddings that are derived
by encoding the surface strings and KG neighbors. Figure 1
gives such an example, where it is ambivalent for a model
to align 乔治·布什 (George Bush) to “George W. Bush” or
“George H. W. Bush”, because both candidates have similar
surface strings and share several common neighbors (such
as “Republic Party” and “U.S. president”).

In this paper, we propose to alleviate these two types of
errors using two coordinated reasoning methods, i.e., the
Easy-to-Hard strategy and joint entity alignment algorithm.
Speciﬁcally, the Easy-to-Hard strategy leverages an itera-
tive approach, where the most model-conﬁdent (easy) align-
ments predicted in the previous iteration are provided as
additional inputs to the current iteration for resolving the
remaining model-uncertain (hard) alignments. This idea is
motivated by our observation that the model-conﬁdent align-
ments are mostly correct, and thus they can provide reliable
clues for other decisions with less model conﬁdence.

To address the many-to-one problem, we propose a joint
entity alignment algorithm that ﬁnds the global optimal en-
tity alignments that satisfy the one-to-one constraint. This
problem is essentially a fundamental combinatorial opti-
mization problem whose exact solution can be found by the
Hungarian algorithm (Kuhn, 1955). However, since this al-
gorithm takes a high time complexity of O(N 4) for KGs
of N nodes, it is impractical to apply this algorithm in our
framework directly. To address this, we propose a simple yet
effective solution that breaks down the whole search space
into small isolated pieces, so that each piece could be efﬁ-
ciently solved with the Hungarian algorithm. Experiments
on the benchmark datasets show that our proposed coordi-
nated reasoning methods can not only improve the current
state-of-the-art performance but also signiﬁcantly boost the
performance of previous approaches.

Related Work
Our work is mainly related to two lines of research: network
embedding and knowledge graph alignment.

Graph Convolutional Networks
Recently, there has been an increasing interest in extend-
ing neural networks to deal with graphs. Defferrard, Bres-
son, and Vandergheynst (2016) proposed a spectral graph
theoretical formulation of CNNs on graphs and a convo-
lutional network extending the conventional CNNs to non-
Euclidean space. Kipf and Welling (2017) further extended
this idea and proposed graph convolutional neural networks
(GCNs) to integrate the connectivity patterns and feature at-
tributes of graph-structured data, and achieved decent re-
sults in semi-supervised classiﬁcation. Thereafter, a series
of improvements and extensions were proposed based on
GCN. GAT (Veliˇckovi´c et al., 2017) employs the attention
mechanism to GCNs, in which each node gets an impor-
tance score based on its neighborhood, thus providing more
expressive representations for nodes. Furthermore, the R-
GCNs (Schlichtkrull et al., 2018) are proposed to model re-
lational data and have been successfully exploited in link

prediction and entity classiﬁcation. Inspired by the capabil-
ity of GCNs on learning node representations, we employ
the GCN to build our entity alignment framework.

Entity Alignment

Earliest approaches of entity alignment usually require ex-
pensive expert efforts to design model features (Mahdis-
oltani, Biega, and Suchanek, 2013). Recently, embedding
based methods have been proposed to address this issue.
MTransE (Chen et al., 2017) employs TransE (Bordes et
al., 2013) to embed entities and relations of each knowl-
edge graph in a separate space, and then provides ﬁve differ-
ent variants of transformation functions to project the em-
bedded vectors from one subspace to another. The candi-
date set of one entity’s correspondence in the other knowl-
edge graph can be obtained by ranking the distance be-
tween them in the transformed space. ITransE (Zhu et al.,
2017) utilizes TransE to learn one common low-dimensional
subspace for all knowledge graphs, with the constraint that
the observed anchor seeds from different knowledge graphs
share the same vector representation in the subspace. AlignE
(Sun, Hu, and Li, 2017) also adopts TransE to learn network
embeddings, and applies parameter swapping to encode net-
work into a uniﬁed space. NTAM (Li et al., 2018) utilizes
a probabilistic model for the alignment task. Instead of us-
ing TransE to derive entity embeddings from the knowledge
graph, various GCN based methods (Wang et al., 2018; Ye
et al., 2019; Wu et al., 2019) that use the conventional GCN
to encode the entities and relations have been proposed to
perform the alignment. Different with those methods that
still follow previous works that rely on learned entity em-
beddings to rank alignments, Xu et al. (2019) views this
task as a graph matching problem and further proposes a
graph matching neural network that additionally considers
the matching information of an entity’s neighborhood to per-
form the prediction.

Despite these approaches achieve progressive results, all
current works focus on encoding the entities and relations,
while neglecting the fact that the decoding strategy may have
a considerable impact over the ﬁnal performance. In this pa-
per, we explore the coordinated nature of this task and pro-
pose two types of reasoning methods to improve the perfor-
mance of these baselines.

Problem Formulation

Formally, a KG is represented as G = (E, R, T ), where E,
R, T are the sets of entities, relations, and triples, respec-
tively. Let G1 = (E1, R1, T1) and G2 = (E2, R2, T2) be
two heterogeneous KGs to be aligned. That is, an entity in
G1 (source entity) may have its counterpart in G2 (target
entity) in a different language or different surface names. As
a starting point, we can collect a small number of equiva-
lent entity pairs between G1 and G2 as the alignment seeds.
We deﬁne the entity alignment task as automatically ﬁnding
more equivalent entities using the alignment seeds as train-
ing data.

Coordinated Reasoning
All existing works follow the conventional framework that
ﬁrst encodes the context information of the source entity
within the KG into a distributional representation and then
ranks the candidate target entities according to the represen-
tation similarities. These works may differ in the choice of
the encoder, such as TransE or GCN, but all of them uti-
lize the same decoding method, which simply picks the local
optimal candidate for each source entity without considering
the global alignment coherence. For example, more than one
source entities may be aligned to the same target entity, caus-
ing the many-to-one problem. This simple decoding strategy
also neglects the coordinated nature of this task, that is, pre-
viously predicted alignments are also helpful to future pre-
dictions.

Motivated by these observations, we propose two types of
coordinated reasoning methods. First, to address the many-
to-one problem, we jointly predict alignments by explicitly
incorporating the one-to-one constraint into the decoding.
Second, we propose a new Easy-to-Hard decoding strategy
that ﬁrst resolves the most model-conﬁdent alignments and
then uses them as additional evidence to better handle the
model-uncertain alignments.

Easy-to-Hard Decoding

All existing models independently predict alignments for
source entities while neglecting the fact that the decoding
strategy may have a signiﬁcant impact over the performance.
Figure 1 illustrates such an example where the goal is to
align 乔治·布什 (George Bush) from the Chinese KG into
the English KG. Given its two candidates, i.e., George W.
Bush and George H. W. Bush, it is challenging for previ-
ous methods to ﬁnd the correct alignment (George W. Bush)
since these candidates have almost the same neighbors, ex-
cept that George W. Bush graduated from Harvard Univer-
sity while George H. W. Bush not. On the other hand, we
can see that the Chinese KG includes a fact, <乔治·布什
graduated from 哈佛大学 (Harvard University)>, which is
strong evidence for aligning 乔治·布什 to George W. Bush.
Intuitively, if a model could ﬁrst align 哈佛大学 to the Har-
vard University and introduce this as additional knowledge,
it could be more easy for the model to ﬁnd the correct align-
ment for 乔治·布什. Compared to the alignment for 乔治·布
什, which is Hard to resolve, the alignment for 哈佛大学 is
relatively Easier.

Inspired by the above observation, in this paper, we pro-
pose a new decoding method, namely Easy-to-Hard strategy,
which ﬁrst attempts to resolve “easy” alignments in the test
set and then incorporates them as additional knowledge into
the model to better tackle the remaining “hard” alignments.
There are two main challenges here. First of all, it is difﬁ-
cult to determine whether an alignment is easy or hard to
resolve. Second, existing dominant models are mainly built
on the graph neural networks, and it is unclear how to inte-
grate such additional knowledge into their models.

We analyze the alignment results of three baseline meth-
ods, i.e., Wang et al. (2018), Xu et al. (2019) and Wu et al.
(2019). Interestingly, we ﬁnd that all these baselines could

achieve at least 99.5% accuracy for those alignments with
normalized probabilities over 0.9. This result is coherent
with our expectation since a higher probability typically sug-
gests that the model is more conﬁdent about the prediction
and also indicates that this alignment is easier for the model
to resolve. Therefore, we apply the following steps to decode
the test set iteratively.

Step Description

1

2

3

Employ an alignment model to predict align-
ments for all source entities in the test set.
Use a predeﬁned probability threshold α to
reﬁne those alignments. In particular, assign-
ments with probabilities higher than α are re-
garded as easy alignments while the others are
viewed as hard alignments.
If more than K easy alignments are found in
Step 2, take these easy alignments as addi-
tional knowledge and incorporate them into the
alignment model to establish alignments for
the remaining entities (go to Step 1); other-
wise, return all alignments.

After establishing easy assignments in each decoding step,
we need to incorporate them as additional knowledge into
the alignment model for the next round decoding. This de-
sign heavily depends on alignment model architecture. In
this paper, we use the state-of-the-art alignment model (Xu
et al., 2019) as our baseline method and propose two ways
to enhance this model by incorporating easy assignment in-
formation.

Alignment Model Baseline. Xu et al. (2019) utilized a
graph (namely topic graph) to capture the context informa-
tion of an entity (namely topic entity) within the KG. For
instance, Figure 2 gives the topic graphs of George Bush in
both the Chinese and English KG. The entity alignment task
is then viewed as a graph matching problem, whose goal is
to calculate the similarity of these two topic graphs, say G1
and G2. To achieve this, they further propose a neural graph
matching model that includes the following four layers:
• Input Representation Layer. The goal of this layer is to
learn embeddings for entities that occurred in topic en-
tity graphs by using a graph convolution neural network
(GCN) (Kipf and Welling, 2017).

• Node-Level Matching Layer. This layer is designed to
capture local matching information by comparing each
entity embedding of one topic entity graph against all en-
tity embeddings of the other graph in both ways (from G1
to G2 and G2 to G1).

• Graph-Level Matching Layer. In this layer, the model
applies another GCN to propagate the local matching in-
formation throughout the graph. The motivation behind
it is that this GCN layer can encode the global matching
state between the pairs of whole graphs. The model then
feeds these matching representations to a fully-connected
neural network and applies the element-wise max and
mean pooling method to generate a ﬁxed-length graph
matching representation.

Figure 2: A running example of our Easy-to-Hard decoding strategy for aligning George Bush in the English and Chinese
knowledge graph. After the ﬁrst round decoding, the baseline model aligns 哈佛大学 to Harvard and 耶鲁大学 to Yale, because
their probabilities predicted by M0 is higher than α. After introducing these information, our enhanced model M1 increased the
probability of aligning 乔治·布什 to George W. Bush while decreasing the probability of its alignment to George H. W. Bush.

• Prediction Layer. The model ﬁnally uses a two-layer
feed-forward neural network to consume the ﬁxed-length
graph matching representation and applies the softmax
function in the output layer.

Our Model.
In contrast to Xu et al. (2019) that only takes
two topic graphs as input, we can utilize additional informa-
tion such as easy assignments found in previous decoding
steps to resolve hard assignments. In particular, we intro-
duce two ways to enhance this baseline model by explicitly
integrating the easy assignment information into two layers
of Xu et al. (2019):
• Enhanced Input Representation Layer. In this layer,
Xu et al. (2019) utilizes a GCN to learn entity embed-
dings from the topic graph, where the entity surface form
has been proved to be a key feature in deriving their em-
beddings. Therefore, we require that the aligned entities

found in the easy alignments should have the same surface
forms so that they could share the common embeddings.
For example, in Figure 2, after the ﬁrst round of decoding,
哈佛大学 (Harvard University) is aligned to Harvard, we
then change the surface form of “哈佛大学” to “Harvard”
in the second decoding step.

• Enhanced Node-Level Matching Layer. As concluded
in Xu et al. (2019), the node-level matching layer has
a signiﬁcant impact on the matching performance, since
it captures the local entity matching information. In the
baseline model, the entity similarities are calculated based
on the entity embeddings derived from the ﬁrst GCN
layer. Although in the enhanced input representation layer
the aligned entities have the same surface forms, it can
still not guarantee that their embeddings are close. It is be-
cause the ﬁrst GCN layer is supposed to encode not only

the surface form but also the structural information into
their representations. Therefore, we explicitly incorporate
the easy alignment information into this layer by enforc-
ing that the normalized similarities between the aligned
entities to be 1.0. Then, we feed the revised entity simi-
larities to the graph-level matching layer and the ﬁnal pre-
diction layer.

Notice that, in practice, there are two possible options to
build the enhanced alignment model in our framework. First,
we can directly use the pre-trained baseline but replace its
ﬁrst two layers with our proposed enhanced layers. Because
we do not modify the model architecture, no more param-
eters are needed to be learned. The second way is to train
a new enhanced alignment model with randomly sampled
alignments as simulated easy alignments. The motivation
behind is that given more easy alignments, the model could
more focus on learning to disambiguate hard alignments.
Experimental results show that the latter achieves much bet-
ter performance. We will discuss these two options in the
experiment section.

Joint Entity Alignment
As shown in Figure 3(a), our model typically outputs a 2-
dimensional matrix of probabilities after decoding, where
each cell item (such as p(et|es)) represents the likelihood of
aligning source entity es to target entity et. The goal of the
entity alignment task is then equal to ﬁnd the best solution (a
set of one-to-one alignments) with the highest probability:
(cid:89)

p(et|es)

(1)

arg max
A

(es,et)∈A

where A represents one solution. Since knowledge graphs
are usually huge, this problem cannot be solved by naive
enumeration, which takes O(N !) time for KGs with N enti-
ties. Existing works choose the optimal local match for each
source entity while neglecting the one-to-one nature, and as
a result, multiple source entities may be mapped to one tar-
get entity.

Here, for the ﬁrst time, we propose to explicitly incorpo-
rate this one-to-one constraint into the alignment prediction.
To achieve this, we ﬁrst reformat the goal from maximizing
the product of probabilities (Equation 1) to minimizing the
sum of negative log-likelihoods.

arg min
A

(cid:88)

(es,et)∈A

− log p(et|es)

(2)

As a result, the entity alignment problem is equivalently
converted to the well-studied “task assignment” problem1,
where each agent/task is assigned to exactly one task/agent,
and each agent-task assignment has a ﬁxed cost that does not
depend on the other assignments.

The Hungarian algorithm (Kuhn, 1955) has been proven
to be efﬁcient for ﬁnding the best solution for this problem.
It takes a cost matrix as input, which can be easily achieved
by padding rows or columns of a constant value for the non-
square matrix. For a brief introduction, the algorithm takes

Figure 3: (a) The original alignment results between entities
{A, B, C} ∈ G1 and {1, 2, 3} ∈ G2, where the thickness
of a line represents its alignment probability and very weak
alignments are shown as dotted lines; (b) The sub-spaces
after separation.

the following four main steps for the cost matrix with N ×N
elements, where the last two steps repeat until a solution is
found.2 It is guaranteed that a solution could be found within
O(N 4) time.

Step Description

1

2

3

4

Find the lowest item for each row and subtract
it from the others in that row.
Similarly, ﬁnd the lowest item for each column
and subtract it from the others in that column.
Cover all zeros in the resulting matrix using
a minimum number of horizontal and vertical
lines. If less than N lines are required, go to
Step 4; otherwise, a solution is found.
Find the smallest item v not covered by any
line in Step 3. Subtract v from all uncovered
items, and add v to all items covered by two
lines. Go to Step 3.

One can see that naively applying Hungarian is impractical,
as it still takes O(N 4) computation time for matching two
KGs of N nodes. To further decrease the time consump-
tion, we break the whole search space into many isolated
sub-spaces, where each sub-space contains only a subset of
source and target entities for making alignments. Speciﬁ-
cally, we discard the candidate alignments with a probabil-
ity lower than a predeﬁned threshold τ from the original
search space. Based on this, we deﬁne two source entities
being connected only if they share common candidates in
the target. Doing in this way ﬁts the intuition where a large
KG usually contains many domains, such as politics, sports
and science, and only the entities within each domain have
densely interacted. Our experiments show that τ has little ef-
fect on performance, while it dramatically reduces the search
time.

Figure 3 illustrates the search space separation process,
where thin and dotted lines correspond to low-conﬁdent
alignments. After dropping out these alignments with low
model scores, the whole search space is split into two inde-
pendent sub-spaces, as shown in Figure 3(b). Here A(cid:13) and B(cid:13)
are in the same sub-space, as they share the same target can-

2http://www.hungarianalgorithm.com/ provides a detailed ex-

1https://en.wikipedia.org/wiki/Assignment problem

planation and an online demo.

Datasets

DBP15KZH−EN

DBP15KJA−EN

DBP15KFR−EN

Chinese
English
Japanese
English
French
English

Entities Relations
66,469
98,125
65,744
95,680
66,858
105,889

2,830
2,317
2,043
2,096
1,379
2,209

Triples
153,929
237,674
164,373
233,319
192,191
278,590

Table 1: Dataset summary.

didate 1(cid:13). Removed connections (such as A(cid:13) to 2(cid:13)) are con-
sidered as inﬁnite cost. As the next step, each sub-space is
solved with the Hungarian algorithm, before their results are
combined to form our ﬁnal outputs.

Experimental Setup
Datasets. We evaluate our approach on three large-scale
cross-lingual datasets from DBP15K (Sun, Hu, and Li,
2017). These datasets are built upon Chinese, English,
Japanese and French versions of DBpedia (Auer et al.,
2007). Each dataset contains 15,000 inter-language links
connecting equivalent entities in two KGs of different lan-
guages. We use the same training/testing split as previous
works, 30% for training, and 70% for testing. Table 1 lists
their statistical summaries.

Evaluation Metrics. Like previous works, we use Hits@1
to evaluate our model, where a Hits@1 score (higher is
better) is computed by measuring the proportion of correctly
aligned entities ranked in the top one.

Comparison Models. We compare our approach against
existing alignment methods: JE (Hao et al., 2016), MTransE
(Chen et al., 2017), JAPE (Sun, Hu, and Li, 2017), IPTransE
(Zhu et al., 2017), BootEA (Sun, Hu, and Li, 2017), GCN
(Wang et al., 2018), GM (Xu et al., 2019) and RDGCN (Wu
et al., 2019).

Model Variants. To evaluate different reasoning methods,
we provide three implementation variants of our model for
ablation studies, including (1) X-EHD: the baseline model
X that only uses our proposed Easy-to-Hard Decoding
strategy; (2) X-JEA: the baseline model X that only uses our
proposed Joint Entity Alignment method; (3) X-EHD-JEA:
the baseline model X that uses both of these two reasoning
methods.

Implementation details. For the conﬁgurations of the
alignment model, we use the same settings as Xu et al.
(2019). Speciﬁcally, we use the Adam optimizer (Kingma
and Ba, 2014) to update parameters with mini-batch size
32. The learning rate is set to 0.001. The hop size of two
GCN layers is set to 2 and 3, respectively. Following Wu
et al. (2019), we use Google Translate to translate Chinese,
Japanese, and French entity names into English, and then
use Glove embeddings (Pennington, Socher, and Manning,
2014) to construct the initial entity representations in the
model. For all datasets, we ﬁrst use the baseline model to

Method
JE
MTransE
JAPE
IPTransE
GCN
BootEA
GM
RDGCN
GCN -JEA
BootEA-JEA
RDGCN-JEA
GCN-EHD
BootEA-EHD
RDGCN-EHD
GM-EHD
GM-JEA
GM-EHD-JEA

ZH-EN
21.27
30.83
41.18
40.59
41.25
62.94
67.93
70.75
43.43
64.56
72.03
44.37
65.27
71.15
70.31
72.05
73.58

JA-EN
18.92
27.86
36.25
36.69
39.9
62.23
73.97
76.74
45.00
64.17
77.56
41.72
65.36
77.07
77.92
78.73
79.15

FR-EN
15.38
24.41
32.39
33.30
37.29
65.30
89.38
88.64
39.78
69.31
90.49
39.09
68.92
91.01
90.49
91.08
92.43

Table 2: Evaluation results on the datasets.

retrieve the top 10 alignments, normalize their scores as
probabilities and then perform the proposed coordinated
reasoning methods over them. For the Easy-to-Hard decod-
ing method, α is set to 0.75, and K is set to 20. For the joint
entity alignment, τ is set to 0.10. For training the enhanced
alignment model, for each topic graph pair, we randomly
choose at most two gold alignments from the ground truth
as the simulated easy alignments.

Results and Discussion

Main Results
Table 2 shows the performance of all compared approaches
on the evaluation datasets. We can see that both of the Easy-
to-Hard decoding strategy (referred as EHD in Table 2) and
the joint entity alignment method (referred as JEA in Ta-
ble 2) could signiﬁcantly improve the performance of GM.
When these two methods are combined, the overall perfor-
mance is further improved, outperforming previous works.
We also investigate whether our proposed reasoning meth-
ods could also boost existing baselines. From Table 2, we
can see also that the joint entity alignment method could also
improve the performance of GCN, BootEA and RDGCN,
indicating that our method is able to avoid the many-to-one
problem effectively. Recall that, the Easy-to-Hard decoding
method requires an enhanced alignment model that could in-
tegrate the easy alignment information. Since designing en-
hanced versions for these baselines is beyond our goal, here
we only enforce that that the aligned entities found in the
easy alignments have the same surface form. We ﬁnd that
this simpliﬁed strategy could still improve these baselines,
which also suggests that our proposed decoding strategy is
generally helpful to the alignment models.

Discussion
Let us ﬁrst look at the impacts of alignment-dropping thresh-
old τ to both the performance and running time for our joint
entity alignment algorithm. From Table 3, we can see that

τ
0.05
0.10
0.15
0.20

Max sub-space
5238
1562
116
<100

Time
–
24m34s
39s
38s

FR-EN(hit@1)
–
91.02
90.90
90.78

Table 3: Performance and computation time for different τ
values, where Max sub-space shows the number of source
nodes in the largest sub-space. Baseline accuracy is 89.38.

α
–
0.95
0.85
0.75
0.65

Decoding Rounds
–
2
5
10
20

ZH-EN JA-EN FR-EN
88.07
72.31
66.29
88.25
74.33
69.05
90.31
75.10
71.71
91.18
76.62
72.09
88.60
72.15
67.12

Table 4: Hit@1 accuracies and decoding rounds on the de-
velopment set for different α values. The ﬁrst row lists the
accuracies of the GM baseline.

decreasing τ can slightly improve the performance but with
a huge cost of computation time. For example, when τ is
changed from 0.15 to 0.10, the accuracy could increase by
0.12% but the computation time dramatically increases from
39s to almost 25 minutes. Moreover, if τ is set to 0.05, we
cannot even get the results. As shown in Table 3, in order
to better understand why the running time changes, we ad-
ditionally analyze the size of the largest sub-space. We ﬁnd
that the size of the maximal sub-space under τ = 0.05 is 3
times more than the size under τ = 0.10, thus the running
time under τ = 0.05 is expected to be roughly 32 hours,
which is 81 (34) times than the time under τ = 0.10. The
running time does not signiﬁcantly change when increasing
τ from 0.15 to 0.20, because the Hungarian algorithm does
not take much time for this situation, and the most time con-
sumption is data processing.

We also investigated the impact of the probability thresh-
old α on the performance for our Easy-to-Hard decoding
method. We experimented with different α values and eval-
uated our model on the development set of the DBP15K.
Table 4 reports hit@1 accuracies on these datasets. We can
see that our model could beneﬁt from decreasing α until it
reaches 0.75. It is expected to ﬁnd that lower α may hurt
the performance since it incorporates some incorrect predic-
tions as easy (gold) alignments into the model. Recall that
in our decoding algorithm, we continuously perform the in-
ference until less than K new easy alignments are found
in the previous round. As shown in Table 4, we observed
that decreasing α not only achieves worse performance but
also requires more converge rounds. To better understand
why more converge rounds are required, we analyzed the in-
termediate established alignments during the inference. We
ﬁnd this is due to those incorrect alignments introduced by
reducing α produce a chain reaction, which offers the model
more conﬁdence about some uncertain but incorrect align-
ments, resulting in more decoding rounds.

Recall that there are two options to build the enhanced

alignment model, where the ﬁrst one directly replaces two
layers of a pre-trained GM model with our proposed en-
hanced layers while keeping the parameters the same;
the second one trains a new GM model with simulated
easy alignments. We evaluate these two options on several
datasets and observe that both of these two ways could im-
prove the performance but the model could gain more per-
formance improvement from the second way. We further
manually analyze the predicted alignments of these two op-
tions and ﬁnd that the new trained GM model could resolve
more ambiguous (hard) alignments. We think this is due to
that introducing the simulated easy alignments into the train-
ing phase could allow the model to learn how to properly
utilize these additional evidence to disambiguate the hard
alignments.

Here one natural question is how many simulated easy
alignments are needed for training the new GM model. In
experiments, we ﬁnd that using two simulated easy align-
ments to train the model could achieve the best performance;
introducing more easy alignments to train the model could
not further improve the results. However, this observation is
in conﬂict with our intuition, that is, more easy alignment in-
formation could better help the model to disambiguate those
uncertain predictions. By analyzing the entities in the test
set, we ﬁnd this is due to that among these entities, at most
three entities co-occur in the same topic graphs, and conse-
quently, during the decoding, the model could only intro-
duce at most two easy alignments. Motivated by this ob-
servation, we conducted an additional experiment that pre-
dicts alignments for all entities in the KGs except the train-
ing seeds. We ﬁnd that our reasoning methods could achieve
more performance improvement, and considering more than
two easy alignments into the training also further improves
the overall performance as we expected. Note that, although
this experiment may consume almost 5 times more than the
original decoding time, we believe that some optimization
could be adopted to reduce the time complexity, which we
leave for the future work.

Conclusion

Previous entity alignment methods mainly use the same de-
coding strategy that independently chooses the optimal lo-
cal match for each source entity without considering the
global alignment coherence, thereby may cause the many-
to-one problem. To address this, we propose two reasoning
method, including a new Easy-to-Hard decoding strategy
and joint entity alignment method. Speciﬁcally, the Easy-
to-Hard decoding method iteratively decodes the test set by
taking the most model-conﬁdent alignments predicted in the
previous iteration as additional inputs to the current iteration
for resolving the model-uncertain alignments. The joint en-
tity alignment method views the entity alignment as the task
assignment problem and employs the Hungarian algorithm
to guarantee the predicted alignments are one-to-one map-
pings. Experimental results on the DBP15K dataset show
that our reasoning methods are general to these baselines
and can signiﬁcantly improve their performance.

References
Auer, S.; Bizer, C.; Kobilarov, G.; Lehmann, J.; Cyganiak, R.;
and Ives, Z. 2007. Dbpedia: A nucleus for a web of open
data. In The semantic web. Springer. 722–735.

Bao, J.; Duan, N.; Zhou, M.; and Zhao, T. 2014. Knowledge-
based question answering as machine translation. In Pro-
ceedings of the 52nd Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Papers),
967–976.

Berant, J.; Chou, A.; Frostig, R.; and Liang, P. 2013. Se-
mantic parsing on freebase from question-answer pairs. In
Proceedings of the 2013 Conference on Empirical Meth-
ods in Natural Language Processing, 1533–1544.

Bollacker, K.; Evans, C.; Paritosh, P.; Sturge, T.; and Tay-
lor, J. 2008. Freebase: a collaboratively created graph
In Proceed-
database for structuring human knowledge.
ings of the 2008 ACM SIGMOD international conference
on Management of data, 1247–1250. AcM.

Bordes, A.; Usunier, N.; Garcia-Duran, A.; Weston, J.; and
Yakhnenko, O. 2013. Translating embeddings for model-
ing multi-relational data. In Advances in neural informa-
tion processing systems, 2787–2795.

Chen, M.; Tian, Y.; Yang, M.; and Zaniolo, C. 2017. Mul-
tilingual knowledge graph embeddings for cross-lingual
In Proceedings of the 26th Inter-
knowledge alignment.
national Joint Conference on Artiﬁcial Intelligence, 1511–
1517.

Das, R.; Zaheer, M.; Reddy, S.; and McCallum, A. 2017.
Question answering on knowledge bases and text us-
CoRR
ing universal schema and memory networks.
abs/1704.08384.

Defferrard, M.; Bresson, X.; and Vandergheynst, P. 2016.
Convolutional neural networks on graphs with fast local-
ized spectral ﬁltering. In Advances in neural information
processing systems, 3844–3852.

Franco-Salvador, M.; Rosso, P.; and Montes-y G´omez, M.
2016. A systematic study of knowledge graph analysis
for cross-language plagiarism detection. Information Pro-
cessing & Management 52(4):550–570.

Hao, Y.; Zhang, Y.; He, S.; Liu, K.; and Zhao, J. 2016. A
joint embedding method for entity alignment of knowledge
bases. In China Conference on Knowledge Graph and Se-
mantic Computing, 3–14.

Hoffmann, R.; Zhang, C.; Ling, X.; Zettlemoyer, L.; and
Weld, D. S. 2011. Knowledge-based weak supervision
for information extraction of overlapping relations.
In
Proceedings of the 49th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Language
Technologies-Volume 1, 541–550. Association for Com-
putational Linguistics.

Kingma, D. P., and Ba, J. 2014. Adam: A method for stochas-

tic optimization. CoRR abs/1412.6980.

Kipf, T. N., and Welling, M. 2017. Semi-supervised classiﬁ-

cation with graph convolutional networks. In ICLR.

Kuhn, H. W. 1955. The hungarian method for the assignment
problem. Naval research logistics quarterly 2(1-2):83–97.

Li, S.; Li, X.; Ye, R.; Wang, M.; Su, H.; and Ou, Y. 2018.
Non-translational alignment for multi-relational networks.
In IJCAI, 4180–4186.

Mahdisoltani, F.; Biega, J.; and Suchanek, F. M. 2013. Yago3:

A knowledge base from multilingual wikipedias.

Min, B.; Grishman, R.; Wan, L.; Wang, C.; and Gondek, D.
2013. Distant supervision for relation extraction with an
incomplete knowledge base. In Proceedings of the 2013
Conference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Language
Technologies, 777–782.

Mintz, M.; Bills, S.; Snow, R.; and Jurafsky, D. 2009. Distant
supervision for relation extraction without labeled data. In
Proceedings of the Joint Conference of the 47th Annual
Meeting of the ACL and the 4th International Joint Con-
ference on Natural Language Processing of the AFNLP:
Volume 2-Volume 2, 1003–1011. Association for Compu-
tational Linguistics.

Pennington, J.; Socher, R.; and Manning, C. 2014. Glove:
In Proceedings
Global vectors for word representation.
of the 2014 conference on empirical methods in natural
language processing (EMNLP), 1532–1543.

Schlichtkrull, M.; Kipf, T. N.; Bloem, P.; Van Den Berg, R.;
Titov, I.; and Welling, M. 2018. Modeling relational data
with graph convolutional networks. In European Semantic
Web Conference, 593–607. Springer.

Sun, Z.; Hu, W.; and Li, C. 2017. Cross-lingual entity align-
ment via joint attribute-preserving embedding. In Proceed-
ings of the 16th International Semantic Web Conference.

Veliˇckovi´c, P.; Cucurull, G.; Casanova, A.; Romero, A.; Lio,
P.; and Bengio, Y. 2017. Graph attention networks. arXiv
preprint arXiv:1710.10903.

Wang, Z.; Lv, Q.; Lan, X.; and Zhang, Y. 2018. Cross-lingual
knowledge graph alignment via graph convolutional net-
works. In Proceedings of the 2018 Conference on Empiri-
cal Methods in Natural Language Processing, 349–357.

Wu, Y.; Liu, X.; Feng, Y.; Wang, Z.; Yan, R.; and Zhao, D.
2019. Relation-aware entity alignment for heterogeneous
knowledge graphs.

Xu, K.; Reddy, S.; Feng, Y.; Huang, S.; and Zhao, D. 2016.
Question answering on freebase via relation extraction and
textual evidence. In ACL 2016.

Xu, K.; Wang, L.; Yu, M.; Feng, Y.; Song, Y.; Wang, Z.; and
Yu, D. 2019. Cross-lingual knowledge graph alignment
via graph matching neural network. In ACL 2019, 3156–
3161.

Ye, R.; Li, X.; Fang, Y.; Zang, H.; and Wang, M. 2019. A vec-
torized relational graph convolutional network for multi-
relational network alignment. 4135–4141.

Yih, W.-t.; Chang, M.-W.; He, X.; and Gao, J. 2015. Seman-
tic parsing via staged query graph generation: Question an-
swering with knowledge base. In ACL, 1321–1331.

Zeng, D.; Liu, K.; Chen, Y.; and Zhao, J. 2015. Distant super-
vision for relation extraction via piecewise convolutional
neural networks. In EMNLP, 1753–1762.

Zhu, H.; Xie, R.; Liu, Z.; and Sun, M. 2017. Iterative en-
tity alignment via joint knowledge embeddings. In IJCAI,
4258–4264.

