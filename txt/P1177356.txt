Visual Data Augmentation through Learning

Grigorios G. Chrysos1, Yannis Panagakis1,2,

Stefanos Zafeiriou1

1 Department of Computing, Imperial College London, UK
2 Department of Computer Science, Middlesex University London, UK
{g.chrysos, i.panagakis, s.zafeiriou}@imperial.ac.uk

8
1
0
2
 
n
a
J
 
0
2
 
 
]

V
C
.
s
c
[
 
 
1
v
5
6
6
6
0
.
1
0
8
1
:
v
i
X
r
a

Abstract

The rapid progress in machine learning methods has
been empowered by i) huge datasets that have been col-
lected and annotated, ii) improved engineering (e.g. data
pre-processing/normalization). The existing datasets typ-
ically include several million samples, which constitutes
their extension a colossal task.
In addition, the state-of-
the-art data-driven methods demand a vast amount of data,
hence a standard engineering trick employed is artiﬁcial
data augmentation for instance by adding into the data
cropped and (afﬁnely) transformed images. However, this
approach does not correspond to any change in the natural
3D scene. We propose instead to perform data augmen-
tation through learning realistic local transformations. We
learn a forward and an inverse transformation that maps an
image from the high-dimensional space of pixel intensities
to a latent space which varies (approximately) linearly with
the latent space of a realistically transformed version of the
image. Such transformed images can be considered two
successive frames in a video. Next, we utilize these trans-
formations to learn a linear model that modiﬁes the latent
spaces and then use the inverse transformation to synthesize
a new image. We argue that the this procedure produces
powerful invariant representations. We perform both qual-
itative and quantitative experiments that demonstrate our
proposed method creates new realistic images.

1. Introduction

The lack of training data has till recently been an im-
pediment for training machine learning methods. The lat-
est breakthroughs of Neural Networks (NNs) can be partly
attributed to the increased amount of (public) databases
with massive number of labels/meta-data. Nevertheless, the
state-of-the-art networks include tens or hundreds of mil-
lions of parameters [8, 37], i.e. they require more labelled
examples than we have available. To ameliorate the lack
of sufﬁcient labelled examples, different data augmentation
methods have become commonplace during training. In this

Figure 1: (Preferably viewed in color) We want to aug-
ment arbitrary images (left column) by learning local trans-
formations. We ﬁnd a low-dimensional space and learn
the forward and inverse transformations from the image
to the representation space. Then, we can perform a sim-
ple linear transformation in the (approximately) linear low-
dimensional space and acquire a new synthesized image
(the middle column). The same procedure can be repeated
with the latest synthesized image (e.g. from the middle to
the right columns).

work, we propose a new data augmentation technique that
ﬁnds a low-dimensional space in which performing a sim-
ple linear change results in a nonlinear change in the image
space.

Data augmentation methods are used as label-preserving
transformations with twofold goals: a) avoid over-ﬁtting,
b) ensure that enough samples have been provided to the
network for learning. A plethora of label-preserving trans-
formations have been proposed, however the majority is
classiﬁed into a) either model-based methods, b) or generic
augmentations. The model-based demand an elaborate
model to augment the data, e.g. the 3DMM-based [2] face
proﬁling of [29], the novel-view synthesis from 3D mod-
els [26]. Such models are available for only a small num-
ber of classes and the realistic generation from 3D mod-
els/synthetic data is still an open problem [3]. The second
augmentation category is comprised of methods deﬁned ar-
tiﬁcially; these methods do not correspond to any natural

1

movement in the scene/object. For instance, a 2D image ro-
tation does not correspond to any actual change in the 3D
scene space; it is purely a computational method for encour-
aging rotation invariance.

We argue that a third category of augmentations consists
of local transformations. We learn a nonlinear transforma-
tion that maps the image to a low-dimensional space that
is assumed to be (approximately) linear. This linear prop-
erty allows us to perform a linear transformation and map
the original latent representation to the representation of a
slightly transformed image (e.g. a pair of successive frames
in a video). If we can learn the inverse transform, i.e. map-
ping from the low-dimensional space to the transformed im-
age, then we can modify the latent representation of the im-
age linearly and this results in a nonlinear change in the
image domain.

We propose a three-stage approach that learns a forward
transformation (from image to low-dimensional representa-
tion) and an inverse transformation (from latent to image
representation) so that a linear change in the latent space re-
sults in a nonlinear change in the image space. The forward
and the inverse learned transformations are approximated
by an Adversarial Autoencoder and a GAN respectively.

In our work, we learn object-speciﬁc transformations
while we do not introduce any temporal smoothness. Even
though learning a generic model for all classes is theoreti-
cally plausible, we advocate that with the existing methods,
there is not sufﬁcient capacity to learn such generic trans-
formations for all the objects. Instead we introduce object-
speciﬁc transformations. Even though we have not explic-
itly constrained our low-dimensional space to be temporally
smooth, e.g. by using the cosine distance, we have observed
that the transformations learned are powerful enough to lin-
earize the space. As a visual illustration, we have run T-
SNE [17] with the latent representations of the ﬁrst video
of 300VW [28] against the rest 49 videos of the published
training set; Fig. 2 validates our hypothesis that the latent
representations of that video reside in a discrete cluster over
the rest of the representations. In a similar experiment with
the collected videos of cats, the same conclusion is reached,
i.e.
the representations of the ﬁrst video form a discrete
cluster.

We have opted to report the results in the facial space that
is highly nonlinear, while the representations are quite rich.
To assess further our approach, we have used two ad-hoc
objects, i.e. cat faces, dog faces, that have far less data la-
belled available online. Additionally, in both ad-hoc objects
the shape/appearance presents greater variation than that of
human faces, hence more elaborate transformations should
be learned.

In the following Sections we review the neural networks
based on which we have developed our method (Sec. 2.1),
introduce our method in Sec. 3. Sequentially, we demon-

strate our experimental results in Sec. 4. Due to the re-
stricted space, additional visualizations are deferred to the
supplementary material, including indicative ﬁgures of the
cats’, dogs’ videos, additional (animated) visual results of
our method, an experiment illustrating that few images
sufﬁce to learn object-speciﬁc deformable models. We
strongly encourage the reviewers to check the supplemen-
tary material.

Notation: A small (capital) bold letter represents a vec-
tor (matrix); a plain letter designates a scalar number. A
vectorized image of a dynamic scene at time t is denoted as
i(t), while i(tk)

refers to the kth training sample.

k

2. Background

posed method:

The following lines of research are related with our pro-

Model-based augmentation for faces: The methods
in this category utilize 2D/3D geometric information.
In
T-CNN [32] the authors introduce an alignment-sensitive
method tailored to their task. Namely, they warp a face from
its original shape (2D landmarks) to a similar shape (based
on their devised clustering). Recently, Zhu et al. [36] use a
3D morphable model (3DMM) [2] to simulate the effect of
proﬁling for synthesizing images in large poses. Tran et al.
in [29] ﬁt a 3DMM to estimate the facial pose and learn a
GAN conditioned on the pose. During inference, new facial
images are synthesized by sampling different poses. The
major limitation of the model-based methods is that they
require elaborate 2D/3D models. Such models have been
studied only for the human face1 or the human body, while
the rest objects, e.g. animals faces, have not attracted such
attention yet. On the contrary, our method is not limited
to any object (we have learned models with cats’ faces and

118 years since the original 3DMM model and the problem is not solved

for all cases.

Figure 2: (Preferably viewed in color) T-SNE [17] in the
latent representations of a) 300VW [28] (left Fig.), b) cats’
videos. In both cases the representations of the ﬁrst video
(red dots) are compared against the rest videos (blue dots)).
To avoid cluttering the graphs every second frame is skipped
(their representation is similar to the previous/next frame).
For further emphasis, a green circle is drawn around the red
points.

dogs’ faces) and does not require elaborate 3D/2D shape
models.

stage approach has not been used in the past for a related
task.

Unconditional image synthesis: The successful appli-
cation of GANs [5] in a variety of tasks including photo-
realistic image synthesis[14], style transfer [34], inpaint-
ing [25], image-to-image mapping tasks [11] has led to
a proliferation of works on unconditional image synthe-
sis [1, 35]. Even though unconditional image generation
has signiﬁcant applications, it cannot be used for condi-
tional generation when labels are available. Another line
of research is directly approximating the conditional distri-
bution over pixels [23]. The generation of a single pixel
is conditioned on all the previously generated pixels. Even
though realistic samples are produced, it is costly to sample
from them; additionally such models do not provide access
to the latent representation.

Video frames’ prediction: The recent (experimental)
breakthroughs of generative models have accelerated the
progress in video frames prediction.
In [30] the authors
learn a model that captures the scene dynamics and syn-
thesizes new frames. To generalize the deterministic pre-
diction of [30], the authors of [33] propose a probabilis-
tic model, however they show only a single frame predic-
tion in low-resolution objects. In addition, the uniﬁed la-
tent code z (learned for all objects) does not allow par-
ticular motion patterns, e.g. of an object of interest in
the video, to be distinguished. Lotter et al. [15] approach
the task as a conditional generation. They employ a Re-
current Neural Network (RNN) to condition future frames
on previously seen ones, which implicitly imposes tempo-
ral smoothness. A core differentiating factor of these ap-
proaches from our work is that they i) impose temporal
smoothness, ii) make simplifying assumptions (e.g.
sta-
tionary camera [30]); these restrictions constrain their so-
lution space and allow for realistic video frames’ predic-
tion. In addition, the techniques for future prediction often
result in blurry frames, which can be attributed to the mul-
timodal distributions of unconstrained natural images, how-
ever our end-goal consists in creating realistic images for
highly-complex images, e.g. animals’ faces.

The work of [6] is the most similar to our work. The
authors construct a customized architecture and loss to lin-
earize the feature space and then perform frame prediction
to demonstrate that they have successfully achieved the lin-
earization. Their highly customized architecture (in com-
parison to our off-the-shelves networks) have not been ap-
plied to any highly nonlinear space, in [6] mostly synthetic,
simple examples are demonstrated. Apart from the highly
nonlinear objects we experiment with, we provide several
experimental indicators that our proposed method achieves
this linearization in challenging cases.

An additional differentiating factor from the aforemen-
tioned works is that, to the best of our knowledge, this three-

2.1. cGAN and Adversarial Autoencoder

Let us brieﬂy describe the two methods that consist our
workhorse for learning the transformations. These are the
conditional GAN and the Adversarial Autoencoder.

A Generative Adversarial Network (GAN) [5] is a gen-
erative network that has been very successfully employed
for learning probability distributions [14]. A GAN is com-
prised of a generator G and a discriminator D network,
where the generator samples from a pre-deﬁned distribu-
tion in order to approximate the probability distribution of
the training data, while the discriminator tries to distinguish
between the samples originating from the model distribu-
tion to those from the data distribution. Conditional GAN
(cGAN) [20] extends the formulation by conditioning the
distributions with additional labels. More formally, if we
denote with pd the true distribution of the data, with pz the
distribution of the noise, with s the conditioning label and
y the data, then the objective function is:

LcGAN (G, D) = Es,y∼pd(s,y)[log D(s, y)]+
Es∼pd(s),z∼pz(z)[log(1 − D(s, G(s, z)))]

(1)

This objective function is optimized in an iterative man-

ner, as

min
wG

max
wD

LcGAN (G, D) = Es,y∼pd(s,y)[log D(s, y; wD)]+
Es∼pd(s),z∼pz(z)[log(1 − D(s, G(s, z; wG); wD))]

where wG, wD denote the generator’s, discriminator’s

parameters respectively.

An Autoencoder (AE) [9, 19] is a neural network with
two parts (an encoder and a decoder) and aims to learn a
latent representation z of their input y. Autoencoders are
mostly used in an unsupervised learning context [12] with
the loss being the reconstruction error. On the other hand,
an Adversarial Autoencoder (AAE) [18] consists of two
sub-networks: i) a generator (an AE network), ii) a discrim-
inator. The discriminator, which is motivated by GAN’s
discriminator, accepts the latent vector (generated by the
encoder) and tries to match the latent space representation
with a pre-deﬁned distribution.

3. Method

The core idea of our approach consists in ﬁnding a low-
dimensional space that is (approximately) linear with re-
spect to the projected representations. We aim to learn the
(forward and inverse) transformations from the image space
to the low-dimensional space. We know that an image i(t)
is an instance of a dynamic scene at time t, hence the dif-
ference between the representations of two temporally close

Figure 3: The architectures used in (a) separate training per step (the network for Stage I is on the top, for Stage III on the
bottom), (b) ﬁne-tuning of the uniﬁed model, (c) prediction. The ‘[]’ symbol denotes concatenation.

moments should be small and linear. We can learn the linear
transitions of the representations and transform our image
to i(t+x). We perform this linearization in 2-steps; an addi-
tional step is used to synthesize images of the same object
with slightly different representations. The synthesized im-
age can be thought of as a locally transformed image, e.g.
the scene at t + x moment with x sufﬁciently small.

3.1. Stage I: Latent image representation

Our goal consists in learning the transformations to the
linearized space, however for the majority of the objects
there are not enough videos annotated that can express a
sufﬁcient percent of the variation. For instance, it is not
straightforward to ﬁnd long videos of all breeds of dogs
where the full body is visible. However, there are far more
static images available online, which are faster to collect
and can be used to learn the transformation from the image
space to the latent space.

In an unsupervised setting a single image i(t) (per step)
sufﬁces for learning latent representations, no additional la-
bels are required, which is precisely the task that Autoen-
coders were designed for. The latent vector of the Autoen-
coder lies in the latent space we want to ﬁnd.

We experimentally noticed that the optimization con-
verged faster if we used an adversarial learning procedure.
We chose an Adversarial Autoencoder (AAE) [18] with a
customized loss function. The encoder f I
e accepts an image
d reconstructs i(t). We
i(t), encodes it to d(t); the decoder f I
modify the discriminator to accept both the latent represen-
tation and the reconstructed image as input (fake example)
and try to distinguish those from the distribution sample and
the input image respectively. Moreover, we add a loss term
that captures the reconstruction loss, which in our case con-
sists of i) an (cid:96)1 norm and ii) (cid:96)1 in the image gradients. Con-

sequently, the ﬁnal loss function is comprised of the follow-
ing two terms: i) the adversarial loss, ii) the reconstruction
loss or:

LI = Ladver + λI LI

rec

(2)

with

LI

rec = ||f I

d (f I

e (y)) − y||(cid:96)1 + ||∇f I

d (f I

e (y)) − ∇y||(cid:96)1 (3)

The vector y in this case is a training sample i(tk)

, while

k

λI is a hyper-parameter.

3.2. Stage II: Linear Model Learning

In this stage the latent

representation d(t) of an
image i(t) (as learned from stage I) is used to learn
a mapping to the latent representation d(t+x) of the
image i(t+x);
the simple method of linear regression
is chosen as a very simple transformation we can per-
Given N pairs of images2
form in a linear space.
{(i(t1)
)},
1
the set of the respective latent representations D =
N , d(tN +xN )
, d(t2+x2)
), (d(t2)
{(d(t1)
2
1
the set D is used to learn the linear mapping:

N , i(tN +xN )

), . . . , (d(tN )

), . . . , (i(tN )

, d(t1+x1)

, i(t2+x2)

, i(t1+x1)

), (i(t2)
2

N

N

1

1

2

2

)};

d(tj +xj ) = A · [d(tj ); 1] + (cid:15)

where (cid:15) is the noise; the Frobenius norm of the residual

consists the error term:

L = ||d(tj +xj ) − A · [d(tj ); 1]||2
F

To ensure the stability of the linear transformation we
add a Tikhonov regularization term (i.e, Frobenius norm)

2Each pair includes two highly correlated images, i.e.

two nearby

frames from a video sequence.

(4)

(5)

on Eq. 5. That is,

3.4. End-to-end ﬁne-tuning

LII = ||d(tj +xj ) − A · [d(tj ); 1]||2

F + λII ||A||2
f ,

(6)

with λII a regularization hyper-parameter. The closed-form
solution to Eq. 6 is

A = Y · X T · (X · X T + λII · I)−1,
where I denotes an identity matrix, X, Y two matrices that
contain column-wise the initial and target representations
respectively, i.e. for the kth sample X(:, k) = [d(tk)
; 1],
Y (:, k) = d(tk+xk)

(7)

k

.

k

3.3. Stage III: Latent representation to image

In this step, we want to learn a transformation from the
latent space to the image space, i.e. the inverse transforma-
tion of Stage I. In particular, we aim to map the regressed
representation ˆd(t+x) to the image i(t+x). Our prior distri-
bution consists of a low-dimensional space, which we want
to map to a high-dimensional space; GANs have experimen-
tally proven very effective in such mappings [14, 25].

A conditional GAN is employed for this step; we con-
dition GAN in both the (regressed) latent representation
ˆd(t+x) and the original image i(t). Conditioning on the
original image has experimentally resulted in faster conver-
gence and it might be a signiﬁcant feature in case of limited
amount of training samples. Inspired by the work of [11],
we form the generator as an autoencoder denoting the en-
coder as f III
. Skip connections are
added from the second and fourth layers of the encoder to
the respective layers in the decoder with the purpose of al-
lowing the low-level features of the original images to be
propagated to the result.

, the decoder as f III

d

e

In conjunction with [11] and Sec. 3.1, we add a recon-

struction loss term as
(f III
LIII
e

rec = ||f III

d

d

k

(f III
e

(y))−s||(cid:96)1+||∇f III

(y))−∇s||(cid:96)1
(8)
where y is a training sample i(tk)
and s is the conditioning
label (original image) i(tk−x)
k−x . In addition, we add a loss
term that encourages the features of the real/fake samples
to be similar. Those features are extracted from the penul-
timate layer of the AAE’s discriminator. Effectively, this
leads the fake (i.e. synthesized) images to have representa-
tions that are close to the original image. The ﬁnal objective
function for this step includes three terms, i.e. the adversar-
ial, the reconstruction and the feature loss:

LIII = LcGAN + λIII LIII

rec + λIII,f eatLf eat

(9)

where LcGAN is deﬁned in Eq.1, Lf eat represents the
similarity cost imposed on the features from the discrimina-
tor’s penultimate layer and λIII , λIII,f eat are scalar hyper-
parameters. To reduce the amount of hyper-parameters in
our work, we have set λIII = λI .

Even though the training in each of the aforementioned
three stages is performed separately, all the components
are differentiable with respect to their parameters. Hence,
Stochastic Gradient Descent (SGD) can be used to ﬁne-tune
the pipeline.

Not all of the components are required for the ﬁne-
tuning, for instance the discriminator of the Adversarial
Autoencoder is redundant. From the network in Stage I,
only the encoder is utilized for extracting the latent repre-
sentations, then linear regression (learned matrix A) can be
thought of as a linear fully-connected layer. From network
in Stage III, all the components are kept. The overall archi-
tecture for ﬁne-tuning is depicted in Fig. 3.

3.5. Prediction

The structure of our three-stage pipeline is simpliﬁed for
performing predictions. The image i(t) is encoded (only the
encoder of the network in Stage I is required); the result-
ing representation d(t) is multiplied by A to obtain ˆd(t+x),
which is fed into the conditional GAN to synthesize a new
image ˆi(t+x). This procedure is visually illustrated in Fig. 3,
while more formally:

ˆi(t+x) = f III

d

(f III
e

(A · [f I

e (i(t); 1)], i(t))))

(10)

3.6. Network architectures

Our method includes two networks, i.e. an Adversarial
Autoencoder for Stage I and a conditional GAN for Stage
III. The encoder/decoder of both networks share the same
architecture, i.e. 8 convolutional layers followed by batch
normalization [10] and LeakyRELU [16]. The discrimina-
tor consists of 5 layers in both cases, while the dimension-
ality of the latent space is 1024 for all cases. Please refer
to the table in the supplementary material for further details
about the layers.

4. Experiments

In this Section we provide the details of the training pro-
cedure along with the dedicated qualitative and quantitative
results for all three objects, i.e. human faces, cats’ faces and
dogs’ faces. Our objective is to demonstrate that this aug-
mentation leads to learning invariances, e.g. deformations,
not covered by commonly used techniques.

4.1. Implementation details

The pairs of images required by the second and third
stages, were obtained by sequential frames of that object.
Different sampling of x was allowed per frame to increase
the variation. To avoid the abrupt changes between pairs

(a) Human faces

(b) Cats’ faces

(c) Dogs’ faces

Figure 4: Average variance in the dynamics representation per video for (a) the case of human faces, (b) cats’ faces, (c) dogs’
faces.

Figure 5: (Preferably viewed in color) Conditional, iterative prediction from our proposed method. The images on the left are
the original ones; then from the left to the right the ith column depicts the (i − 1)th synthesized image (iteration (i − 1)). In
both rows, the image on the left is animated, hence if opened with Adobe Acrobat reader the transitions will be auto-played.

of frames, the structural similarity (SSIM) of a pair was re-
quired to lie in an interval, i.e. the frames with i) zero, ii)
excessive movement were omitted.

4.2. Datasets

is provided below:

Each of the aforementioned stages was trained sepa-
rately; after training all of them, we have performed ﬁne-
tuning in the combined model (all stages consist of con-
volutions). However, as is visually illustrated in ﬁgures in
the supplementary material there are minor differences in
the two models. The results of the ﬁne-tuned model are
marginally more photo-realistic, which consists ﬁne-tuning
optional.

A brief description of the databases utilized for training

Human faces: The recent dataset of MS Celeb [7] was
employed for Stage I (Sec. 3.1). MS Celeb includes 8,5 mil-
lion facial images of 100 thousand celebrities consisting it
one of the largest public datasets for static facial images.
In our case, the grayscale images were excluded, while
from the remaining images a subset of 2 million random
images was sampled. For the following two stages that re-
quire pairs of images the dataset of 300 Videos in-the-wild
(300VW) [28] was employed. This dataset includes 114
videos with approximately 1 minute duration each. The to-

Figure 6: (Preferably viewed in color) Visual results of the synthesized images. There are four columns from the left to the
right (split into left and right parts) which depict: (a) the original image, (b) the linear model (PCA + regression), (c) our
proposed method, (d) the difference in intensities between the proposed method and the original image. The difference does
not depict accurately the pose variation; the gif images in the supplementary material demonstrate the animated movement.
Nevertheless, some noticeable changes are the following: a) in the left part in the second, and ﬁfth images there is a consid-
erable 3D rotation (pose variation), b) in the ﬁrst, third and sixth in the left split there are several deformations (eyes closing,
mouth opening etc.), c) in the second image on the right part, the person has moved towards the camera.

tal amount of frames sampled for Stage II (Sec. 3.2) is 13
thousand frames; 10 thousand frames are sampled for val-
idation, while the rest are used for training the network in
Stage III (Sec. 3.3).

Cat faces: The pet dataset of [24] was employed for
learning representations of cats’ faces. The dataset includes
37 different breeds of cats and dogs (12 for cats) with ap-
proximately 200 images each3.
In addition to those, we
collected 1000 additional images, for a total of 2000 im-
ages. For the subsequent stages of our pipeline, pairs of im-
ages were required, hence we have collected 20 videos with
an average duration of 200 frames. The head was detected
with the DPM detector of [4] in the ﬁrst frame and the rest

3Each image is annotated with a head bounding box.

tracked with the robust MDNET tracker of [22]. Since the
images of cats are limited, the prior weights learned for the
(human) facial experiment were employed (effectively the
pre-trained model includes a prior which we adapt for cats).

Dog faces: The Stanford dog dataset [13] includes 20
thousand images of dogs from 120 breeds. The annotations
are in the body-level, hence the DPM detector was utilized
to detect a bounding box of the head. The detected im-
ages, i.e. 8 thousand, consisted the input for Stage I of our
pipeline. Similarly to the procedure for cats, 30 videos (with
average duration of 200 frames) were collected and tracked
for Stages II and III.

4.3. Variance in the latent space

A quantitative self-evaluation experiment was to mea-
sure the variance of latent representations per video. The
latent representations of sequential frames should be highly
correlated; hence the variance in a video containing the
same object should be low.

A PCA was learned per video and the cumulative eigen-
value ratio was computed. We repeated the same procedure
for all the videos (per object) and then averaged the results.
The resulting plots with the average cumulative ratio are vi-
sualized in Fig. 4. In the videos of the cats and the dogs,
we observe that the ﬁrst 30 components express 90% of the
In the facial videos that are longer (over 1500
variance.
frames) the variance is greater, however the ﬁrst 50 compo-
nents explain over 90% of the variance.

4.4. Qualitative assessment

Considering the sub-space deﬁned by PCA as the latent
space and learning a linear regression there is the linear
counterpart of our proposed method. To demonstrate the
complexity of the task, we have learned a PCA per object4;
the representations of each pair were extracted, linear re-
gression was performed and then the regressed representa-
tions were used to create the new sample.

In Fig. 6, we have visualized some results for all three
cases (human, cats’ and dogs’ faces). In all cases the images
were not seen during the training with the cats’ and dogs’
images being downloaded from the web (all were recently
uploaded), while the faces are from WIKI-DB dataset [27].
The visualizations verify our claims that a linear transfor-
mation in the latent space, can produce a realistic non-linear
transformation in the image domain. In all of the facial im-
ages there is a deformation of the mouth, while in the ma-
jority of them there is a 3D movement. On the contrary,
on the dogs’ and the cats’ faces, the major source of defor-
mation seems to be the 3D rotation. An additional remark
is that the linear model, i.e. regressing the components of
PCA, does not result in realistic new images, which can be
attributed to the linear assumptions of PCA.

Aside of the visual assessment of the synthesized im-
ages, we have considered whether the new synthesized im-
age is realistic enough to be considered as input itself to
the pipelne. Hence, we have run an iterative procedure of
the outcome of iteration k be-
applying our method, i.e.
comes the input to iteration k + 1. Such an iterative pro-
cedure essentially creates a collection of different images
(constrained to include the same object of interest but with
slightly different latent representations). Two such collec-
tions are depicted in Fig. 5, where the person in the ﬁrst
row performs a 3D movement, while in the second different

4To provide a fair comparison PCA received the same input as our
method (i.e. there was no effort to provide further (geometric) details about
the image, the pixel values are the only input).

deformations of the mouth are observed. The image on the
left is animated, hence if opened with Adobe Acrobat reader
the transitions will be auto-played. We strongly encourage
the reviewers to view the animated images and check the
supplementary animations.

4.5. Age estimation with augmented data

To ensure that a) our method did not reproduce the input
to the output, b) the images are close enough (small change
in the representations) we have validated our method by per-
forming age estimation with the augmented data.

We utilized as a testbed the AgeDB dataset of [21],
which includes 16 thousand manually selected images. As
the authors of [21] report, the annotations of AgeDB are ac-
curate to the year, unlike the semi-automatic IMDB-WIKI
dataset of [27]. For the aforementioned reasons, we selected
AgeDB to perform age estimation with i) the original data,
ii) the original plus the new synthesized samples. The ﬁrst
80% of the images was used as training set and the rest as
test-set. We augmented only the training set images with
our method by generating one new image for every origi-
nal one. We discarded the examples that have a structural
similarity (SSIM) [31] of less than 0.4 with the original im-
age; this resulted in synthesizing 6 thousand new frames
(approximately 50% augmentation).

We trained a Resnet-50 [8] with i) the original training
images, ii) the augmented images and report here the Mean
Absolute Error (MAE). The pre-trained DEX [27] resulted
in a MAE of 12.8 years in our test subset [21], the Resnet
with the original data in MAE of 11.4 years, while with
the augmented data resulted in a MAE of 10.3 years, which
is a 9.5% relative decrease in the MAE. That dictates that
our proposed method can generate new samples that are not
trivially replicated by afﬁne transformations.

5. Conclusion

In this work, we have introduced a method that ﬁnds a
low-dimensional (approximately) linear space. We have in-
troduced a three-stage approach that learns the transforma-
tions from the hihgly non-linear image space to the latent
space along with the inverse transformation. This approach
enables us to make linear changes in the space of repre-
sentations and these result in non-linear changes in the im-
age space. The ﬁrst transformation was approximated by an
Advervarsial Autoencoder, while a conditional GAN was
employed for learning the inverse transformation and ac-
quiring the synthesized image. The middle step consists of
a simple linear regression to transform the representations.
We have visually illustrated that i) the representations of a
video form a discrete cluster (T-SNE in Fig. 2) ii) the rep-
resentations of a single video are highly correlated (average
cumulative eigenvalue ratio for all videos).

References

[1] M. Arjovsky, S. Chintala, and L. Bottou. Wasserstein gan.

arXiv preprint arXiv:1701.07875, 2017. 3

[2] V. Blanz and T. Vetter. A morphable model for the synthesis
of 3d faces. In Proceedings of the 26th annual conference on
Computer graphics and interactive techniques, 1999. 1, 2
[3] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised pixel-level domain adaptation with
generative adversarial networks. CVPR, 2017. 1

[4] P. F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra-
manan. Object detection with discriminatively trained part-
based models. T-PAMI, 32(9):1627–1645, 2010. 7

[5] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In NIPS, 2014. 3

[6] R. Goroshin, M. F. Mathieu, and Y. LeCun. Learning to lin-
earize under uncertainty. In NIPS, pages 1234–1242, 2015.
3

[7] Y. Guo, L. Zhang, Y. Hu, X. He, and J. Gao. Ms-celeb-1m:
A dataset and benchmark for large-scale face recognition. In
ECCV, pages 87–102, 2016. 6

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR. IEEE, 2016. 1, 8

[9] G. E. Hinton and R. S. Zemel. Autoencoders, minimum de-
scription length and helmholtz free energy. In NIPS, 1994.
3

[10] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015. 5

[11] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
translation with conditional adversarial networks. CVPR,
2017. 3, 5

[12] M. Kan, S. Shan, H. Chang, and X. Chen. Stacked progres-
sive auto-encoders (spae) for face recognition across poses.
In CVPR, 2014. 3

[13] A. Khosla, N. Jayadevaprakash, B. Yao, and F.-F. Li. Novel
dataset for ﬁne-grained image categorization: Stanford dogs.
In CVPR Workshops, volume 2, page 1, 2011. 7

[14] C. Ledig, L. Theis, F. Husz´ar, J. Caballero, A. Cunningham,
A. Acosta, A. Aitken, A. Tejani, J. Totz, Z. Wang, et al.
Photo-realistic single image super-resolution using a genera-
tive adversarial network. CVPR, 2017. 3, 5

[15] W. Lotter, G. Kreiman, and D. Cox. Deep predictive cod-
ing networks for video prediction and unsupervised learning.
ICLR, 2017. 3

[16] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectiﬁer nonlin-
earities improve neural network acoustic models. In ICML,
2013. 5

[17] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.

JMLR, 9(Nov):2579–2605, 2008. 2

[18] A. Makhzani, J. Shlens, N. Jaitly, I. Goodfellow, and B. Frey.
Adversarial autoencoders. arXiv preprint arXiv:1511.05644,
2015. 3, 4

[19] J. Masci, U. Meier, D. Cires¸an, and J. Schmidhuber. Stacked
convolutional auto-encoders for hierarchical feature extrac-
tion. ICANN, 2011. 3

[20] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. arXiv preprint arXiv:1411.1784, 2014. 3

[21] S. Moschoglou, A. Papaioannou, C. Sagonas, J. Deng, I. Kot-
sia, and S. Zafeiriou. Agedb: the ﬁrst manually collected,
in-the-wild age database. In CVPR Workshops, 2017. 8
[22] H. Nam and B. Han. Learning multi-domain convolutional
neural networks for visual tracking. In CVPR, 2016. 7
[23] A. v. d. Oord, N. Kalchbrenner, and K. Kavukcuoglu. Pixel
recurrent neural networks. arXiv preprint arXiv:1601.06759,
2016. 3

[24] O. M. Parkhi, A. Vedaldi, A. Zisserman, and C. Jawahar.

Cats and dogs. In CVPR, 2012. 7

[25] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, pages 2536–2544, 2016. 3, 5

[26] K. Rematas, T. Ritschel, M. Fritz, and T. Tuytelaars. Image-
based synthesis and re-synthesis of viewpoints guided by 3d
models. In CVPR, 2014. 1

[27] R. Rothe, R. Timofte, and L. Van Gool. Deep expectation
of real and apparent age from a single image without facial
landmarks. International Journal of Computer Vision, pages
1–14, 2016. 8

[28] J. Shen, S. Zafeiriou, G. Chrysos, J. Kossaiﬁ, G. Tzimiropou-
los, and M. Pantic. The ﬁrst facial landmark tracking in-
the-wild challenge: Benchmark and results. In 300-VW in
ICCV-W, December 2015. 2, 7

[29] L. Tran, X. Yin, and X. Liu. Disentangled representation
learning gan for pose-invariant face recognition. In CVPR,
volume 4, page 7, 2017. 1, 2

[30] C. Vondrick, H. Pirsiavash, and A. Torralba. Generating
videos with scene dynamics. In NIPS, pages 613–621, 2016.
3

[31] Z. Wang, A. C. Bovik, H. R. Sheikh, and E. P. Simoncelli.
Image quality assessment: from error visibility to structural
similarity. TIP, 13(4):600–612, 2004. 8

[32] Y. Wu, T. Hassner, K. Kim, G. Medioni, and P. Natarajan.
Facial landmark detection with tweaked convolutional neural
networks. arXiv preprint arXiv:1511.04031, 2015. 2
[33] T. Xue, J. Wu, K. Bouman, and B. Freeman. Visual dynam-
ics: Probabilistic future frame synthesis via cross convolu-
tional networks. In NIPS, pages 91–99, 2016. 3

[34] D. Yoo, N. Kim, S. Park, A. S. Paek, and I. S. Kweon. Pixel-
level domain transfer. In European Conference on Computer
Vision, pages 517–532. Springer, 2016. 3

[35] J. Zhao, M. Mathieu, and Y. LeCun. Energy-based genera-
tive adversarial network. arXiv preprint arXiv:1609.03126,
2016. 3

[36] X. Zhu, Z. Lei, X. Liu, H. Shi, and S. Z. Li. Face alignment
across large poses: A 3d solution. In CVPR, pages 146–155,
2016. 2

[37] B. Zoph, V. Vasudevan, J. Shlens, and Q. V. Le. Learn-
ing transferable architectures for scalable image recognition.
arXiv preprint arXiv:1707.07012, 2017. 1

