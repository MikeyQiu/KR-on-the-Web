7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
2
v
4
8
3
9
0
.
1
1
6
1
:
v
i
X
r
a

The Emergence of Organizing Structure in Conceptual

Representation

Brenden M. Lake,1,2 Neil D. Lawrence,3 Joshua B. Tenenbaum,4,5

1Center for Data Science, New York University

2Department of Psychology, New York University

3Department of Computer Science, University of Sheﬃeld∗

4Department of Brain and Cognitive Sciences, Massachusetts Institute of Technology

5Center for Brains Minds and Machines

Abstract

Both scientists and children make important structural discoveries, yet their computational

underpinnings are not well understood. Structure discovery has previously been formalized as

probabilistic inference about the right structural form — where form could be a tree, ring, chain,

grid, etc. [Kemp & Tenenbaum (2008). The discovery of structural form. PNAS, 105(3), 10687-

10692]. Although this approach can learn intuitive organizations, including a tree for animals

and a ring for the color circle, it assumes a strong inductive bias that considers only these

particular forms, and each form is explicitly provided as initial knowledge. Here we introduce

a new computational model of how organizing structure can be discovered, utilizing a broad

hypothesis space with a preference for sparse connectivity. Given that the inductive bias is

more general, the model’s initial knowledge shows little qualitative resemblance to some of the

discoveries it supports. As a consequence, the model can also learn complex structures for

domains that lack intuitive description, as well as predict human property induction judgments

without explicit structural forms. By allowing form to emerge from sparsity, our approach

clariﬁes how both the richness and ﬂexibility of human conceptual organization can coexist.

∗This work was completed before N. Lawrence joined Amazon Research Cambridge.

1

1

Introduction

Structural discoveries play an important role in science and cognitive development (Carey, 2009;

Kuhn, 1962). In biology, Linnaeus realized that living things were best organized as a tree, displac-

ing the “great chain of being” used for centuries before. Modern chemistry began with Mendeleev’s

discovery of the periodic structure of elements. In cognitive development, children realize that the

days of the week form a cycle and that social networks form cliques. Children do not initially treat

comparative relations such as “longer than” as transitive, but they realize the unidimensional struc-

ture around age 7 or 8 (Inhelder & Piaget, 1964). While learning the names for objects, children

tend to learn just one name per object, but they must later discover that names can be organized

in a taxonomy (Markman, 1989). Yet, other forms of learning are not marked by clear structural

insights and transitions. Everyday forms of learning, such as a child acquiring facts about animals

and artifacts, have been characterized as accumulating correlations and gradually diﬀerentiating

concepts (Rogers & McClelland, 2004). What distinguishes more ordinary forms of learning from

genuine structural discoveries?

This distinction is not well understood computationally. In machine learning, many standard

algorithms learn only a single form of structure that is decided on in advance – whether it is learn-

ing clusters (e.g., k-means), trees (hierarchical clustering), or multidimensional spaces (principal

component analysis). It is usually up to the human practitioner, rather than the algorithms them-

selves, to decide which type of structure is most appropriate for the data. Other approaches such

as neural networks (deep learning; LeCun, Bengio, & Hinton, 2015) make very general represen-

tational assumptions and can model data with many diﬀerent structural characteristics. However,

the learned structure is only implicit in the connection weights, with no obvious mechanism for

diﬀerentiating between genuine structural discoveries from other forms of learning.

Previous work from our group investigated how the form of structure can be learned from data

and represented explicitly (Kemp & Tenenbaum, 2008). Structure selection can be formalized as

probabilistic inference over a set of discrete and mutually exclusive hypotheses such as rings (i),

grids (ii), trees (iii), chains (iv), etc. called structural forms (Fig. 1A). The forms are deﬁned by

grammatical constraints on the connections between entities; for example the ring form constrains

each node to have exactly two neighbors. This approach can learn intuitive structures for a variety

2

of domains, such as a tree for animals and a ring for the color circle. Once learned, these structures

can be used to explain human inductive reasoning about novel properties of objects (Kemp &

Tenenbaum, 2009).

Although powerful, the structural forms approach is not appropriate when the data strays

from the predeﬁned forms. Exceptions are common in real world domains. The genetic similarity

of animals is captured by an evolutionary tree1, but everyday reasoning about animals draws on

factors that span divergent branches, including shared habitat, role as predator versus prey, and size.

These factors cannot be perfectly explained by a single tree, and other domains are interestingly

structured yet even further removed from a pristine form, such as artifacts and social networks.

Since people can learn and reason in all of these domains, they must either entertain structural

hypotheses without strict grammatical constraints, or engage in other types of learning.

An alternative approach is to learn implicit rather than explicit structural organization. Rogers

and McClelland (2004) studied a neural network that learns to map animals (like canary) and

relations (can) to output attributes that a canary can do (grow, move, ﬂy, and sing). Like the

structural forms approach, the neural network learns aggregate statistical structure from the ob-

servations. Rogers and McClelland (2004) analyzed their network’s learned representation through

dimensionality reduction, projecting each living thing into a low-dimensional representational space.

In this space, the most salient split is between animals versus plants, with sub-divisions for mam-

mals versus birds, trees versus ﬂowers, etc. Although the network is not constrained or biased

to learn a tree, it nonetheless learns a distributed representation for living things that exhibits

hierarchical structure.

Although neural networks are powerful implicit learners, people also seem to learn and reason

with explicit structural representations. Kemp and Tenenbaum (2009) point out that language often

carries direct structural information such as “Indiana is next to Illinois” or “A dolphin is a mammal

not a ﬁsh,” observations that can be elegantly incorporated in more explicit representations. These

representations can also provide scaﬀolding for learning higher-level concepts with direct structural

interpretations, such as using a tree structure to help learn the world “primate” (Xu & Tenenbaum,

2007). Finally, it remains mysterious how implicit structure in a neural network might, in rare yet

1Even this structure has exceptions; for example, Rivera and Lake (2004) provide evidence that at the deepest

levels “the tree of life is actually a ring of life” where genomes fused.

3

pivotal moments in science and childhood, crystallize to create explicit structural discoveries.

Here, we present a new computational approach to structure learning and discovery that incor-

porates some of the best features of previous probabilistic and connectionist models. Rather than

selecting between discrete and mutually exclusive structural hypotheses deﬁned by grammars, the

model learns explicit structure in an unrestricted hypothesis space of all possible graphs. A key

insight is that many cognitively natural structural forms are very sparse, meaning that the graphs

have relatively few edges (connecting lines between the nodes). This observation is central to our

new approach, called structural sparsity, which is capable of rich structural inferences guided by a

preference for sparsity. Sparsity suggests an alternative means for learning pristine structural form

(Fig. 1A), albeit without explicitly identifying which form the structure belongs to (ring, tree, etc.

as in Kemp and Tenenbaum (2008)). This property of our approach has both appealing features

and drawbacks, depending on how we would like to interpret it as a cognitive model. We take up

these issues in detail in the discussion, at the end of the paper. Whether viewed as a strength

or weakness, the lack of an explicit representation of abstract structural forms does go hand in

hand with our models ability to explain how structure learning could proceed in domains, such as

artifacts, that may not conform to any simple, cognitively natural form (Fig. 1B).

We also use the comparison between structural sparsity and structural forms as an opportunity

to explore two diﬀerent types of inductive bias and their roles in supporting learning. For any

learning algorithm, it is instructive to compare the initial knowledge (before data) with the ﬁnal

knowledge (after data), as means of distinguishing what the model learns from what the model

starts with. For the structural forms model (Fig. 2 left), samples from the prior are already

highly structured graphs (rings, grids, trees, etc.), suggesting that the primary role of learning is

to select one of the provided forms, while simultaneously organizing the entities subject to the

corresponding grammatical constraints.

In contrast, for the structural sparsity model (Fig. 2

right), the model’s initial knowledge shows little qualitative resemblance to many of the structures

it discovers, resembling some of the representational leaps in science and cognitive development

(Carey, 2009). By comparing structural forms and structural sparsity on the same data sets – two

closely related models with diﬀerent inductive biases – we can distinguish between the cases where

a strong prior over forms is needed, from other cases where a more general bias towards sparsity

can lead to rich structural insight.

4

Figure 1: Structures that can be represented (A; i: ring, ii: grid, iii: tree, iv: chain), or cannot be
represented (B), by the structural forms of Kemp and Tenenbaum (Kemp & Tenenbaum, 2008).
All of the structures (A & B) are sparse, meaning they have relatively few edges (lines) between
the nodes. Sparsity is the foundation of the computational model introduced in this work.

2 Model

2.1 Structural sparsity

Bayesian learning underlies both the structural forms and structural sparsity models, which use

Bayes’ rule to reason about the distribution of structural hypotheses S in light of data D,

P (S

D)
|

∝

P (D

S)P (S).
|

Both models use a similar likelihood P (D

S) with diﬀerent priors P (S). The prior for the structural
|

forms model is a mixture of discrete forms F (such as rings, trees, grids, etc.), where P (S) =

(cid:80)

F P (S

|

F )P (F ). The initial knowledge P (S) reﬂects the fact that the forms are provided explicitly

and no other possibilities are entertained (Fig. 2 left). The prior for structural sparsity covers

a broader hypothesis space that includes all possible connectivity conﬁgurations (Fig. 2 right).

Sparsity is operationalized with an improper prior that decreases the score with each additional

edge in a structure

(1)

(2)

P (S)

exp(

β(#S)),

∝

−

5

Figure 2: Two models of structure discovery: (left) structural forms (Kemp & Tenenbaum, 2008)
and (right) structural sparsity (this work). Bayesian learning of structure from data D involves an
update from prior P (S) to posterior P (S
D). Given a matrix of animals and their features, the
|
two models learned similar structures despite the substantial diﬀerence in initial knowledge (prior).
In the visualizations, stronger edges are shorter, except for the dotted lines that are edges that lie
outside the strongest spanning tree.

6

where #S is the number of edges in a structure. In both models, objects are assigned to latent

clusters, known as cluster nodes (Kemp & Tenenbaum, 2008) (gray nodes in Fig. 2). Cluster nodes

can connect to other cluster nodes in arbitrary patterns, but each object must connect to exactly

one cluster node. By using cluster nodes, groups of similar objects can be elegantly represented

without dense object to object connections, leading to sparser graphs that highlight the underlying

topology. Besides the cluster assignments, objects do not form any other direct connections, unlike

an earlier version of our model without cluster nodes (Lake & Tenenbaum, 2010). Given that the

number of edges typically grows with the number of clusters (and clusters must be non-empty), the

structural sparsity prior tends to favor both fewer edges and fewer clusters.

The term P (D

S) speciﬁes the link between the graph structure and the features of objects.
|

The data D =

f (1), ..., f (m)

is a matrix where rows are objects and columns are features f (i).

{

}

For instance, we used a data set of 33 animals and 102 features, where the ﬁrst ﬁve features were

“has lungs,” “has a large brain,” “has a spinal cord,” “is warm-blooded,” and “has teeth” (Fig.

2 top). The distribution P (D

S) treats features as independent draws from a
|
distribution that prefers smoothness, meaning objects tend to share similar feature values with

|

S) = (cid:81)m

i=1 P (f (i)

their neighbors in the graph. For example, all the features shown in Fig. 2 are relatively smooth

(except for a hypothetical f (102∗) which is highly non-smooth) over the graphs that represent

animals (Fig. 2 bottom). An edge between node i and j is parameterized by a continuous value

sij > 0 that determines its strength, and absent edges have sij = 0. The graph as a whole

speciﬁes the covariance matrix of a multivariate Gaussian distribution with one dimension per

node (Appendix 8.1). Although P (D

S) is best suited for continuous features, binary data can be
|

treated as continuous (Kemp & Tenenbaum, 2008). Data in the form of a similarity matrix can

also be accommodated by treating the matrix as the covariance matrix of a multivariate Gaussian,

and then sampling an input data matrix D from that Gaussian (we used m = 2000 features).

As in the structural forms model, we are interested in the single best structure given the data.

For structural sparsity, taking the log of the posterior probability (Eq. 1) leads to the optimization

problem

argmax
S

log P (f (i)

S)
|

−

β(#S),

m
(cid:88)

i=1

(3)

which emphasizes the dual objectives of capturing regularities in the features (left term) while

7

promoting the sparsity of the structure (right term). The parameter β, which is the only free

parameter in the model, controls the trade-oﬀ between the two objectives. The value β = 6 was

used for most of the simulations in this paper. For large data sets with many objects, a larger value

leads to more interpretable structural discoveries (β = 18 was used in two cases). Beyond these

guidelines, we do not know if there is a completely general procedure for setting β to facilitate

interpretable structural discoveries, and this is a limitation of our work currently.

2.2 Search algorithm

Searching for the maximum of this score (Eq. 3) is a special case of learning the structure of an

undirected graphical model, a generally intractable problem that requires heuristic algorithms not

guaranteed to reach the global optimum (Koller & Friedman, 2009). Here we describe the heuristic

search algorithm developed for solving this problem. At its core, structural sparsity is a proposal

for the computational level problem (Marr, 1982) of structure discovery, and thus the particular

search algorithm we used was not intended to be cognitively plausible.

Our search algorithm consists of an outer-routine that looks for the best partition of objects

into cluster nodes, as well as a sub-routine that evaluates a candidate partition by optimizing for

the best set of edges. The outer-routine tries local proposals for splitting and merging clusters

and greedily picks the best move at each step (Kemp & Tenenbaum, 2008). Although searching

over partitions can be challenging, it can be sped up greatly by a preprocessing stage that clusters

objects several times, with diﬀerent numbers of clusters, and picks the best scoring option for

initialization.

The sub-routine has the challenging task of estimating the sparse connectivity between clus-

ters, necessary for evaluating partition quality during both initialization and local search. Directly

searching the combinatorial space of sparsity patterns is intractable, but there are well-known

heuristics such as (cid:96)1 that push parameters to zero (sij = 0) and consequently propose a sparsity

pattern (Tibshirani, 1996). The (cid:96)1 relaxation penalizes the sum rather than the number of param-

eters #S

sij

for some constant λ. Learning a Gaussian graph with (cid:96)1 penalization from a

λ (cid:80)

≈

ij |

|

complete data matrix is a convex optimization problem that can be solved eﬃciently (Banerjee, El

Ghaoui, & D’Aspremont, 2008; Lake & Tenenbaum, 2010). Although our connectivity estimation

problem is not convex due to the latent nodes and missing data, eﬃcient solvers for the complete

8

data case are utilized in a Structural Expectation-Maximization algorithm guaranteed to improve

the primary objective in Eq. 3 with each iteration (Friedman, 1997).

The Appendix (Section 8) contains a more detailed description of the entire search algorithm.

Although search can be slow, it considers the full range structures, unlike the implementation of

structural forms that runs a separate search for each form (Kemp & Tenenbaum, 2008). Code for

running the model is available online.2

3 Discovering structure in synthetic data

The algorithm was evaluated on its ability to recover the true topology of synthetic data. Given

that objects can cluster in a variety of patterns atop these forms, the challenge of jointly ﬁnding

the right cluster partition and the right sparsity pattern results in a very diﬃcult combinatorial

search problem. Structural sparsity was tested on both its ability to recover structural forms (Fig.

1A) as well as novel structures that share interesting features with the forms, but not the pristine

qualities necessary for identiﬁcation with the Kemp and Tenenbaum (2008) approach (Fig. 1B).

These new structures include a tree embedded in a ring (i), a non-grid planar graph (ii), a ring of

trees (iii), and multiple disconnected forms including disjoint chains (iv; Fig. 1B).

The synthetic experiments were structured as follows. For each candidate synthetic structure,

1000 features were generated from the ground truth graph and provided to the model. The sparsity

free parameter was set to β = 6. Given that the algorithm is non-deterministic, the search process

was repeated 10 times for each synthetic data set. Each run of the search algorithm is compared

to the ground truth.

The structures in the ﬁrst set of experiments had exactly one object per cluster node (Fig.

3A). This clustering pattern is easier for the search algorithm to ﬁnd compared to an arbitrary

clustering, in part because it is automatically examined as a candidate pattern for initialization.

Thus, this helps to isolate the challenge of ﬁnding the right sparsity pattern from the problem

of ﬁnding the right clustering. The results of search are shown Table 1. In each case, algorithm

recovers a structure that scores (Eq. 3) at least as well as the original structure (Table 1 Column

1, score match).3 For all cases except the chain, the highest scoring structure recovered the right

2https://github.com/brendenlake/structural-sparsity
3Structures are counted as correct if they are within 4 log points of the ground truth, so that an extra edge will

9

Figure 3: Synthetic data sets were generated from structures with one object per cluster node (A)
and arbitrary clusters of objects on the underlying structure (B).

10

partition of objects into cluster nodes (Table 1 Column 2, partition match), and furthermore the

structure matched the adjacency matrix up to a permutation of the cluster node indices (Table 1

Column 3, exact match). There is straightforward reason why the chain structure was not recovered

exactly. To increase sparsity, the model tended to combine the last two objects on each end of the

chain into a single cluster, using a weaker connection to the object at the end of the chain. This

conﬁguration retains the correct relations while increasing sparsity, and thus the learned structure

scores higher than the original graph.4

The structures in the second set of experiments had richer clustering patterns on the same

graphs, as well as others like clusters, a tree, a peace sign, disjoint chains, a ring of trees, and a

plane (Fig. 3B). The results are shown in Table 2. The clusters, ring, tree, and ring of trees were

perfectly recovered for each run. Like in the singleton case, the algorithm always conserved edges

on the ends of the chain structure and disjoint chains structure. Mistakes occurred on 1 run of

the grid, 2 runs of the peace graph, 1 run of the plane, and all of these were unnecessary cluster

node splits that did not alter the underlying topology. For several runs of the plane structure, the

model recovered an alternative graph that diﬀered in the location of one edge, and it also scored

roughly as well as the ground truth. On the whole, our search algorithm was highly successful at

recovering ground truth structure from synthetic data.

Score match Partition match Exact match
10
0
10
10

10
10
10
10

10
0
10
10

Ring
Chain
Grid
Peace

Table 1: Synthetic experiments with singleton cluster nodes (Fig. 3A). Entries show the number
of successes out of 10 runs of the search algorithm.

4 Discovering structure in empirical data

Structural sparsity was applied to six empirical data sets. To facilitate comparison with the struc-

tural forms approach, four data sets from Kemp and Tenenbaum (2008) were included. The search

algorithm was run ten times for each data set and the highest scoring structure is displayed. The

be counted as an error (-6 log points).

4This reduction also occurred in the original structural forms model, in order to use fewer cluster nodes.

11

Clusters
Ring
Chain
Tree
Grid
Peace
Disjoint
chains
Ring
of trees
Plane

Score match Partition match Exact match
10
10
0
10
9
8
0

10
10
0
10
9
8
0

10
10
10
10
9
8
10

10

9

10

9

10

3

Table 2: Synthetic experiments with multi-object cluster nodes (Fig. 3B). Entries show the number
of successes out of 10 runs of the search algorithm.

sparsity prior was ﬁxed at β = 6. In each case, the output of the structural forms model is displayed

for comparison. The data sets were rescaled following the procedure of Kemp and Tenenbaum

(2008).5

4.1 Animals

The ﬁrst data contains a set of 33 animals with 102 features related to biology, anatomy, and habitat

(collected by Kemp & Tenenbaum, 2008). Biological features included those like “has lungs” and

“is warm-blooded,” anatomical features included “has ﬁns” and “has a long neck,” and perceptual

features included “is black.” Habitat features often highlight non-biological similarity, like the fact

that ﬁsh and the aquatic mammals “live in the ocean.”

The learned structures are shown in Fig. 2. Although structural forms learned a tree, structural

sparsity learned a graph with a tree-based backbone that primarily reﬂects biology, with branches

for the insects, ﬁsh, birds, and mammals. Structural sparsity can also capture relationships that

reach across the tree. The aquatic mammals are situated with the ﬁsh, penguin, and other mam-

mals, representing both biology, shared habitat, and visual similarity. The tree-based structural

form better reﬂects evolutionary branching, where objects must lie at the leaf nodes. Trees such

as this are not considered by structural sparsity, since allowing empty cluster nodes would make

search much more diﬃcult. But these form-based latent trees are not necessarily highly sparse, and

5Each data matrix D (nx objects by m features) was linearly transformed so the mean across the entire matrix is
m DDT is 1. If there are missing values, the features with the most common pattern of

0 and the largest element in 1
missing objects are grouped, and the transform is computed for this sub-matrix and applied to the full matrix.

12

Figure 4: Structures learned by structural forms (left) and sparsity (right) for a vote matrix from
13 Supreme Court justices (A), similarity judgments between spectral colors (B), and Euclidean
distance between images of faces (C). To visualize the spatial structure, node locations were chosen
to be the principal eigenvectors of the implied covariance matrices (see Lawrence, 2011, 2012). Only
one dimension is shown in (A), and dotted lines are edges that do not follow a rigid linear order.

13

here structural sparsity found about half as many non-attachment edges.

4.2 Judges

The second data set included 13 Supreme Court justices and their votes on 1,596 cases, collected and

preprocessed by Kemp and Tenenbaum (2008) to include 1596 cases under Chief Justice Rehnquist.

Due to non-participation and the fact that at most 9 justices serve at a time, there were many

missing values. We integrated over the missing values while computing the model score.

The learned structures are shown in Fig. 4A. Both models organized the justices along a

spectrum from liberal (Marshall and Brennan) to conservative (Scalia and Thomas). Although

structural forms is constrained to learn exactly a chain, structural sparsity learned a similar chain

with a few additional relationships between the conservatives (two additional dotted edges and one

gap).

4.3 Colors

The next data set includes perceived similarity ratings between 14 spectral colors. Originally

collected by Ekman (1954), the similarity matrix was published in Shepard (1980) and used in

Kemp and Tenenbaum (2008), while assuming a value of 1 along the diagonal. Provided with this

data, the structural sparsity model discovered the color circle ﬁrst described by Newton (Fig. 4B).

Although the ring topology was pre-speciﬁed in the forms model, it is an emergent consequence of

the data combined with structural sparsity.

4.4 Faces

Another data set is based on pixel similarity between images of faces that vary along a masculinity

and a race dimension. This similarity data set was created by Kemp and Tenenbaum (2008).

The faces vary in two dimensions, race and gender, with four values along each. The similarity

matrix between faces is based on the Euclidean distance in pixel space, with 1 along the diagonal.

Structural sparsity recovered these two dimensions, although it deviates from a strict grid (Fig.

4C).

14

Figure 5: Sparse structures learned from two data sets: US Senators and their votes in the 111th
congress (A), and 200 objects and their features with broad semantic coverage (B). In (A), shorter
edges are stronger, but in (B) all edges are shown at approximately the same length for visual
clarity. Some coherent sub-regions are shaded and labeled for easier interpretation; these are not
labels provided to the unsupervised learning algorithm.

15

4.5 Senate

Structural sparsity can also be applied to domains that have a rich organization but do not ﬁt a

cognitively natural structural form. We used a data set of Senators and their voting records was

for the 111th United States Congress, from January 2009 to January 2011.6 Voting present or not

voting was treated as missing data. Only senators that were present for at least half the votes

were included, resulting in 98 Senators and 696 votes. Due to the size of this data set (and the

following), the sparsity parameter was increased to β = 18 to aid interpretability. To maintain

tractability, search was also modiﬁed to be less thorough, as described in Appendix 8.3.

Given the voting records, the model recovered the central divide between Democrats and Re-

publicans, bridged only by a connection between moderate Democrat Ben Nelson and Republicans

Olympia Snowe and Susan Collins (Fig. 5A). Although structural forms might capture the party

distinction along a line or with clusters, structural sparsity suggests that the complex within-party

dynamics are not naturally represented by any one of the pristine forms.

4.6 Common objects

Structural sparsity was also applied to 200 common objects with broad semantic coverage across

artifacts and living things (Palatucci, Pomerleau, Hinton, & Mitchell, 2009). Each object was

rated according to 218 properties, including questions like “Is it manmade?”, “Can you hold it?”,

and “Does it have feet?” Answers were on a 5 point scale from “deﬁnitely no” to “deﬁnitely yes”

conducted on Amazon Turk. Using a conservative threshold for indicating the presence of a feature,

the data set was converted to binary form by coding only the most conﬁdent response as 1 and the

rest as 0. The original data set contained 1000 objects, and a subset of 200 objects was randomly

selected for tractability.

Given the object and feature data, structural sparsity learns a complex structure with sub-

regions for artifacts, animals, food and drinks, natural objects and events, and places (Fig. 5B).

Edges instantiate a notion of aggregate semantic relatedness, resembling classical proposals for

semantic networks (Collins & Loftus, 1975). Although the data set is prohibitively large for com-

parison with the structural forms algorithm, it would likely miss much of the ﬁne-grained structure

6The votes were retrieved from http://www.voteview.com/house111.htm. The various yes votes (1,2,3) and no

votes (4,5,6) were collapsed to yes (1) or no (0).

16

in an attempt to ﬁt the objects into one of the pre-conceived forms.

5 Property induction

Structural sparsity, in addition to revealing organizing form, can be used to predict how people

reason about novel properties. First, structures were learned to represent two data sets, one for

mammals and one for cities. Second, the learned structures were used to make predictions about

how people reason in a property induction task.

Inductive questions looked like the following: given that a new biological property is true of

dolphins, squirrels, and chimpanzees, how likely is it true of all mammals? (Heit, 1998, 2000; Kemp

& Tenenbaum, 2009; Osherson, Smith, Wilkie, Lopez, & Shaﬁr, 1990; Rips, 1975). Earlier work

using the structural forms approach found an interesting double dissociation (Kemp & Tenenbaum,

2009): people’s ratings of argument strength for mammals were better predicted by a tree than a

continuous 2D space, while analogous ratings regarding geographical properties of cities were better

predicted by a 2D space than a tree. Here, we investigated whether structural sparsity can capture

both patterns of reasoning without requiring special purpose structural forms.

5.1 Data sets for structure learning

The mammals data set consists of 50 mammals and 85 features (properties), primarily collected by

Osherson, Stern, Wilkie, Stob, and Smith (1991) and extended in Kemp and Tenenbaum (2009).

The features contain biological, anatomical, behavioral, and habitat properties (“is gray”, “has

tough skin”, “big”, “swims”, “lives in water”). Features were collected by asking participants to

rate the strength of association between each animal and feature, starting at zero and imposing no

upper bound. Ratings were scaled between 0 and 100 and then averaged across participants.

The cities data set is a similarity matrix of 9 US cities collected by Kemp and Tenenbaum

(2009). Participants were asked to draw the locations of the 9 cities on a piece of paper, ensuring

that the relative distances were as accurate as possible. The distances for each participant were

scaled so that the largest distance was 1, and then each value was subtracted from 1 to create a

measure of spatial similarity. The matrix was averaged across participants and then provided as

input to the models.

17

5.2 Models for structure learning

Four alternative models were trained on the two base data sets: structural sparsity, a tree structural

form, a 2D spatial model, and the raw covariance matrix. For each of the models, the product of

learning is a multivariate Gaussian distribution with one dimension per object. Each multivariate

Gaussian parameterizes a joint distribution on new object properties, which can be used to make

Bayesian predictions regarding the strength of inductive arguments. All inductive arguments use

new (generic) properties that were not features in the data set used for structure learning.

•

•

•

Structural sparsity. Structural sparsity represents a Gaussian by a sparse graph (Section

8.1). The structural sparsity model has one free parameter β, which controls the degree of

sparsity in the learned structure. The model was run using a range of diﬀerent sparsity values,

and the ﬁt to the human property induction judgments were reported for each value. For

each value of β, the search algorithm was run twice for mammals and cities, and the highest

scoring structure (based on the score in Equation 3, not correlation with human participants)

was chosen to represent that value of sparsity. Examples of learned structures for mammals

are shown in Fig. 7A & D and for cities in Fig. 6B-i.

Tree-based structural form. For both data sets, we assumed a tree-based form and

searched for the best tree using the algorithm from Kemp and Tenenbaum (2009). The

learned structures are shown in Fig. 7B and Fig. 6B-ii. Given that the transformation from

a graph to a Gaussian diﬀers in some minor ways between structural forms and structural

sparsity, we relearned the edge strengths for the tree using maximum likelihood and the graph

formalism from structural sparsity. However, re-learning the edge weights did little to change

the predictive performance on the property induction tasks.

2D spatial form. For both data sets, we assumed a 2D spatial form and searched for the

best spatial representation using the algorithm from Kemp and Tenenbaum (2009) to compare

with the graph-based methods. The learned representational spaces shown in Fig. 7C and

Fig. 6B-iii. This model represents a covariance matrix Σ using distances in a 2D space

Σij =

exp(

1
2π

1
σ ||

−

xi

xj

),

||

−

(4)

18

where xi is the 2D location of object i and

xi

is the Euclidean distance between two

||

−

xj

||

objects.

•

Raw covariance. The raw covariance model was either identical to the similarity matrix or

Σ = 1

m DDT where D is the rescaled feature matrix.

5.3 Data sets for property induction

The property induction data concerning mammals, including the Osherson horse and Osherson

mammals tasks, was reported in Osherson et al. (1990). Judgments concerned 10 species: horse,

cow, chimp, gorilla, mouse, squirrel, dolphin, seal, and rhino. Participants were shown arguments of

the form “Cows and chimps require biotin for hemoglobin synthesis. Therefore, horses require biotin

for hemoglobin synthesis.” The Osherson horse set contains 36 two-premise arguments with the

conclusion “horse,” and the mammals set contains 45 three-premise arguments with the conclusion

“all mammals.” Participants ranked each set of arguments in increasing strength by sorting cards.

The induction task concerning cities was conducted by Kemp and Tenenbaum (2009). Partic-

ipants were presented a scenario where Native American artifacts can be found under most large

cities, and some kinds of artifacts are found under just one city while others are under a handful of

cities. An example inductive argument is: “Artifacts of type X are found under Seattle and Boston.

Therefore, artifacts of type X are found under Minneapolis.” There were 28 two-premise arguments

with Minneapolis as the conclusion, 28 with Houston as the conclusion, and 30 three-premise argu-

ments with “all large American cities” as the conclusion. These arguments were ranked for strength

by sorting cards, in a method intended to mimic the Osherson tasks.

5.4 Bayesian property induction

We used a Bayesian model of property induction that takes a structured representation (sparse

graph, tree, space, or raw covariance) and uses it to make predictions in the property induction tasks

(Kemp & Tenenbaum, 2009) (see also Heit, 1998). We refer the reader to Kemp and Tenenbaum

(2009) for a fuller treatment, but the basics are described here.

Inductive arguments involve questions of the form: Objects X have property f , therefore, how

likely is it that objects Y have property f ? The ﬁrst set of objects X are the premise categories,

19

and the second set Y is the conclusion category. The argument concerns a new feature f which is

observed on the set fX to be equal to the label lX (here lX = [1, 1, 1] since all the premise objects

have this property). With this notation, the strength of an inductive argument can be modeled as

the probability the property is true for the conclusion fY = 1 given the premise labels fX = lX , or

(5)

(6)

(7)

where the posterior P (f

fX = lX ) is the distribution on full instantiations of the binary feature
|

vector f , given the labeled premises. This distribution can be computed by Bayes’ rule

fX = lX ) =
P (fY = 1
|

P (f

fX = lX ),
|

(cid:88)

f :fY =1

P (f

fX = lX ) =
|

(cid:80)

f )P (f )
P (fX = lX
|
f P (fX = lX

f )P (f )
|

.

The likelihood P (fX = lX

1 if the label is consistent with the feature, and otherwise it is

f )
|

∝

0. The prior distribution P (f ) is instantiated by each of the diﬀerent models. It follows that the

strength of the inductive argument can be computed as

P (fY = 1
|

fX = lX ) =

(cid:80)

f :fY =1,fX =lX
(cid:80)

f :fX =lX

P (f )

P (f )

.

Intuitively, this is the weighted fraction of features consistent with the premises and conclusion,

compared to those consistent with just the premises. Each feature is weighted by its prior prob-

ability P (f ). Given that each model speciﬁes a Gaussian distribution on features rather than

a distribution on binary features, this prior P (f ) was approximated by a large number (106) of

continuous Gaussian samples, thresholded at the mean (0) to create binary features.

5.5 Results

The models were evaluated on their ability to predict argument strength as evaluated by partici-

pants. Predictive performance was evaluated as the Pearson correlation between people’s rankings

and the models’ evaluation of argument strength. The structural sparsity predictions using β = 8

for mammals and β = 4 for cities are highlighted in Fig. 6 and compared with the other models.

For mammals, structural sparsity predicted human ratings about as well as the tree form (Fig.

6A-iv). For cities, structural sparsity ﬁt much better than a tree and somewhat worse than a 2D

20

Figure 6: Comparing models and human responses regarding property induction for mammals (A)
and cities (B). A dot in (iv) is an inductive argument; for instance, the bottom-left dot for the
“Osherson horse” data set is the argument “dolphins and seals have this property, therefore horses
do.” Each dot represents a diﬀerent set of premises, followed by the conclusion category labeled
on the x-axis (horse, all mammals, Minneapolis, Houston, or all cities). Argument strength for
the models (x-axis) is plotted against mean rank of strength across participants (y-axis), with the
correlation coeﬃcient r shown above. Predictions were compared for diﬀerent types of structures,
including those learned with structural sparsity (i), trees (ii), and 2D spaces (iii). The arguments
about mammals mention only the 10 mammals shown in (A), although predictions were made by
using the full structures learned for 50 mammals. Here only the subtrees (or space) that contains
the pairwise paths between these 10 mammals are shown.

space (Fig. 6B-iv). The raw covariance model ﬁt particularly well for cities, since the similarity

data was already based on 2D drawings, but did not ﬁt as well for the mammals data sets.

It is noteworthy that while structural forms assumes diﬀerent forms for the two domains, struc-

tural sparsity provides comparable ﬁts with a more general inductive bias, suggesting that domain-

tailored forms may not be necessaryto explain these judgments. Structural sparsity ﬁt well across

the range of values of its sparsity parameter (Table 3), and that these diﬀerent sparsity settings

result in qualitatively diﬀerent structures for the mammals. For low sparsity (β = 1, Fig. 7D), the

model groups similar mammals together, but it is otherwise diﬃcult to interpret. For higher sparsity

(β = 8, Fig. 7A), the structure closely mimics the tree-based structural form (Fig. 7B). Structural

sparsity can predict the human judgments using either structure, indicating that a pristine tree is

suﬃcient, but not necessary, to explain the human judgments.7

7Similar results were obtained by learning sparse graphs without latent cluster variables in Lake and Tenenbaum

(2010).

21

Figure 7: Learned structures to represent the mammals data set. Structural sparsity with β = 8
(A), tree-based structural form (B), 2D spatial structural form (C), and structural sparsity with
β = 1 (D). Stronger edges are displayed as shorter.

β Osherson Osherson Minneapolis Houston All
cities
0.71
0.71
0.71
0.68
0.68

mammals
0.87
0.86
0.84
0.89
0.91

horse
0.94
0.95
0.93
0.91
0.89

0.59
0.58
0.61
0.51
0.51

0.70
0.70
0.70
0.69
0.69

1
2
4
6
8

Table 3: Correlations between how people and the structural sparsity model judge inductive
strength, for several tasks concerning mammals and cities. Rows of the table indicate diﬀerent
values of the sparsity parameter β.

22

6 General Discussion

As illustrated across a range of data sets, structural sparsity can discover qualitatively diﬀerent

organizing structures. Rather than predeﬁning a set of forms from which it selects, the model

considers a continuum of hypotheses with a simplicity bias towards sparsity. Despite this weaker

inductive bias, the model can nevertheless recover distinct structures such as trees, rings, and

chains for tightly organized domains. Unlike the structural forms model (Kemp & Tenenbaum,

2008), structural sparsity can learn exceptions to forms which often carry important semantic

meaning. If a given domain is more loosely organized, such as artifacts, the model learns a complex

organization that does not ﬁt an easily recognizable form. Once a domain structure is learned, it

can also be used to predict the extension of novel properties. Where previous work showed a double

dissociation between a tree and a 2D form for matching people’s inferences about animals and cities

(Kemp & Tenenbaum, 2009), structural sparsity can learn diﬀerent types of representations that

support diﬀerent patterns of prediction.

Structural sparsity is related to machine learning approaches for dimensionality reduction and

feature prediction that typically operate in more restricted settings. Some algorithms for non-

linear dimensionality reduction can be interpreted as using the same graphs and likelihood model

as structural sparsity (Lawrence, 2011, 2012). But these algorithms do not have latent clusters

and commonly use a ﬁxed graph created by adjoining nearby objects. There are also eﬃcient

algorithms for learning sparse networks or sparse Gaussian graphical models, either without latent

variables (Banerjee et al., 2008; Hutchinson, 1989; Lake & Tenenbaum, 2010; Schvaneveldt, Durso, &

Dearholt, 1989) or without fully recovering a latent topology (Chandrasekaran, Sanghavi, Parrilo,

& Willsky, 2011). Other algorithms learn trees with latent variables (Choi, Chandrasekaran, &

Willsky, 2010; Choi, Tan, Anandkumar, & Willsky, 2011) or jointly learn two graphs – one for

objects and one for features – although without latent variables (Kalaitzis, Laﬀerty, & Lawrence,

2013). Although these algorithms are computationally eﬃcient and successful in the settings they

consider, they do not attempt to explain how people can learn diﬀerent types of organizing structure

for diﬀerent domains. Structural forms showed how the type of structure can be learned by discrete

selection, and here we showed that diﬀerent forms can arise through a general bias towards sparsity.

Structural sparsity also brings a new perspective to an old debate in cognitive science between

23

symbolic (Griﬃths, Chater, Kemp, Perfors, & Tenenbaum, 2010) versus emergent (McClelland et

al., 2010) approaches to knowledge representation. The symbolic tradition uses classic knowledge

structures including graphs, grammars, and logic, viewing these representations as the most nat-

ural route towards the richness of thought (Griﬃths et al., 2010; Tenenbaum, Kemp, Griﬃths, &

Goodman, 2011). The competing emergent tradition views these structures as epiphenomena: they

are approximate characterizations that do not play an active cognitive role.

Instead, cognition

emerges as the cooperant consequence of simpler processes, often operating over vector spaces and

distributed representations (McClelland, 2010; McClelland et al., 2010). This debate has been par-

ticularly lively with regards to conceptual organization, the domain studied here. The structural

forms model (Kemp & Tenenbaum, 2008) has been criticized by the emergent camp for lacking

the necessary ﬂexibility for many real domains, which often stray from pristine forms (McClelland

et al., 2010). The importance of ﬂexibility has motivated emergent alternatives, such as a con-

nectionist network that maps animals and relations on the input side to attributes on the output

side (Rogers & McClelland, 2004). As this model learns, an implicit tree structure emerges in its

distributed representations. But those favoring explicit structure have pointed to diﬃculties:

it

becomes hard to incorporate data with direct structural implications like “A dolphin is not a ﬁsh

although it looks like one” (Kemp & Tenenbaum, 2009), and latent objects in the structure support

the acquisition of superordinate classes such as “primate” or “mammal” (Xu & Tenenbaum, 2007).

Structural sparsity shows how these seemingly incompatible desiderata could be satisﬁed within a

single approach, and how rich and ﬂexible structure can emerge from a preference for sparsity.

Although the structural sparsity model was formulated at Marr’s computational level (Marr,

1982), any complete understanding must also extend to the algorithmic and implementation levels.

Explaining how this model, and other models at the computational level, could be approximated

by neural circuits is an important challenge that we do not address in this work. Nevertheless, we

ﬁnd it intriguing that sparsity is a general principle with broad application in both neuroscience

and cognitive science, whether used to describe synaptic connectivity (Fares & Stepanyants, 2009;

Kalisman, Silberberg, & Markram, 2005), neural activation (Olshausen & Field, 1996), or envi-

ronmental structure (Navarro & Perfors, 2011; Oaksford & Chater, 1994). We think it is worth

exploring these connections with the aim of building bridges across Marr’s levels.

A ﬁnal puzzle is to understand how a more explicit notion of structural form might arise. For

24

some domains, there may be no suitable form to characterize the learned outcome of structural

sparsity (e.g., Fig. 5B), but for other domains, the learned structure can approximate the pristine

output of a graph grammar. As the model currently stands, form is not explicitly identiﬁed with

a label (“ring,” “tree,” etc.), although such a label might be necessary for genuine “conceptual

change” (Carey, 2009). An explicit structural form may also serve as a basis for analogy between

domains, as a hypothesis about causal structure within a domain, or as a vehicle for easier communi-

cation of larger domain structure (“left” or “right” in a chain and “clockwise” or “counterclockwise”

in a ring). Somehow the mind can grasp structure at this level of intuitive description, without

placing the bounds of learning around a small set of forms.

How can both explicit form and ﬂexibility be captured in a single computational approach, and

can we extend the work developed here in this direction? One possibility is to extend the approach of

Kemp and Tenenbaum (2008) to achieve greater ﬂexibility by allowing exceptions to the grammar-

based forms. As an alternative to top-down search, in the spirit of the work presented here, form

recognition could proceed from the bottom-up by ﬁrst learning a sparse representation, and then

by analyzing it to see if one or more forms ﬁt suﬃciently well. For cases such as the color circle

where the sparse graph exactly instantiates a form (Fig. 4B), form could be identiﬁed by simply

checking the grammatical deﬁnition of that form (see sketch of such a mechanism in Fig. 8). For

example, a ring could be identiﬁed as any connected graph with two edges per node. In fact, there

is behavioral support for a related mechanism: people seem to be capable of identifying the abstract

form of sparse relational graphs, when the edges are presented sequentially as social interactions

(Kemp, 2007; Kemp, Goodman, & Tenenbaum, 2008). Recognizing forms with exceptions (a tree

with cross-branch relations) or forms with more complex structures (“a ring of trees” or “a tree

in a ring”, Fig. 1B) may require probabilistic inference over a more sophisticated description

language, such as probabilistic predicate logic (Richardson & Domingos, 2006) or probabilistic

programs (Goodman, Mansinghka, Roy, Bonawitz, & Tenenbaum, 2008). In any case, if sparsity

is as powerful as our results suggest, this additional mechanism may provide a relatively modest

step in facilitating the rare yet pivotal conceptual leaps in science and development. A criterion for

judging any model of learning is how much richness is gained from initial knowledge to acquired

knowledge. By this measure, sparsity could play the primary theoretical role in a larger explanation

of qualitative structural change.

25

4.

Logical law
1.
2.
3.

x
x
x

¬

∀
∃
∀

∀

∀
∀

∧

y
R(x, y)
∀
!y R(x, y)
∃
y R(x, y)
∀
= y
!z[z
→ ∃
y R(x, y)
x
∀
!z[z
(
→
∃
z[z
∨ ¬∃
x
y T (x, y)
∀
y
z [R(x, y)
x
∀
∀
= z]
y
∧

= y
= y

→ ¬

5.
6.

R(x, z)]

R(x, z)]
R(x, z)])

∧
∧

∧
T\x(y, z)

Interpretation
No edges between cluster nodes.
At least one cluster node has just one edge.
Exactly 2 edges per cluster node.

Exactly 1 or 2 edges per cluster node.

At least one path between cluster nodes.

R(x, z) There are no cycles.

Figure 8: Sketch of an additional mechanism for identifying structural form by analyzing the output
of the structural sparsity model (inspired by Kemp et al., 2008). Forms are deﬁned as conjunctions
of laws that operate on the graph output: “Clusters” : Law 1; “Chain” : 2, 4 and 5; “Ring” : 3 and
5; “Tree” : 5 and 6. By applying these rules, the process can identify structural sparsity’s output
on the color circle as a ring (Fig. 4B) and on mammals as a tree (Fig. 7A). The relation R(
)
·
indicates that two cluster nodes share an edge. Since edges are undirected, there is an implicit
law of symmetry. The quantiﬁers are “for all” (
), and the non-standard “there
) on the set of all
exists exactly one” (
·
objects excluding x.

∀
,
) is the transitive closure of R(
·
·

!). The predicate T\x(

), “there exists” (

,
·

,
·

∃

∃

7 Acknowledgments

We thank Intel Labs for providing the data set of 200 objects and Venkat Chandrasekaran for

helpful discussions. This work was supported by a NSF Graduate Research Fellowship to B.M.L;

the Center for Brains, Minds, and Machines funded by NSF Science and Technology Center award

CCF-1231216; and the Moore-Sloan Data Science Environment at NYU.

8 Appendix

8.1 Generating data from structure

A data set is a matrix D =

f (1), ..., f (m)

(D

Rnx×m), where the rows correspond to objects and

{

}

∈

the columns are features f (i). A data set is generated by a structure, parameterized by a symmetric

matrix S

Rnt×nt. Each row/column in S corresponds to a node in the graph. The set of object

∈

nodes is called X and cluster nodes is called Z, where nx and nz are their cardinalities, combining

for a total of nt = nx + nz nodes in the graph.

A key property of the structural sparsity model is that S is sparse, meaning that most of its

26

entries are equal to zero (sij = 0). For the remainder, their values are positive (sij = sji > 0). The

sparsity pattern deﬁnes the adjacency matrix of the undirected graph, where a non-zero value for

sij means that nodes i and j share an edge. Given that each object node x

X connects to only

∈

one cluster node, then sxz > 0 for exactly one z

Z. There are no self-edges, so the diagonal of S

is also zero.

Following Zhu, Laﬀerty, and Ghahramani (2003) and the setup for the structural forms model

(Kemp & Tenenbaum, 2008), we introduce the graph Laplacian ∆. Its oﬀ-diagonal elements are

given by

S and its diagonal elements are

−

(cid:88)

∆ii =

sij.

A generative model for features can then be written as

P (f (k)

S)
|

∝

exp

)2(cid:17)

(k)
f
j

(cid:16)

(cid:16)

−

−

(cid:88)

i,j

sij(f

(k)
i −
f (k)(cid:62)∆f (k)(cid:17)

.

= exp

This equation highlights why the model favors features that are smooth across the graph. Features

are probable when connected objects i and j (sij > 0) have a similar value. The stronger the

connection sij (meaning the larger its value), the more important it is for the feature values to

match. As pointed out in Zhu et al. (2003), this distribution is not proper, since adding a constant

value to the feature vector does not change its probability. Therefore following Zhu et al. (2003),

we deﬁne the matrix J = ∆ + 1

σ2 I and use

P (f (k)

S, σ2)

exp

|

∝

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

,

(8)

which results in a proper density. This distribution is an nt dimensional Gaussian with zero mean

P (f (k)

S, σ2) = N
|

(cid:16)

0, J −1(cid:17)
f (k)
|
1
(2π)nt/2

J
|

|

=

−1/2 exp

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

.

∈

j

1
4

1
2

27

This generative model for features can also be derived from a maximum entropy formulation, as

shown in Lawrence (2011, 2012). This distribution over features is nearly the same as in the

structural forms model, except the forms model adds the diagonal term 1

σ2 only to the observed

nodes.

This distribution is also known as a Gaussian Markov Random Field (Koller & Friedman, 2009).

The undirected graph S (and equivalently the precision matrix J) instantiates a set of conditional

independence relationships between the variables in the graph

sij = 0 if and only if

(cid:16)

(k)
f
i ⊥

(k)
f
j

(k)
f
\{i,j}
|

(cid:17)

.

If nodes i and j do not share an edge, their feature values are conditionally independent when the

rest of the feature vector is observed (or equivalently, their partial correlation is 0 when controlling

for all other nodes). Intuitively, a shared edge is a path of direct dependence.

Given that each object connects to exactly one cluster node (and no other nodes), there are no

paths of direct dependence between objects. Instead, covariation between objects is represented

through the connections between their cluster nodes. Moreover, two objects assigned to the same

cluster node are conditionally independent, if the feature values of their shared cluster node could

be observed.

8.2 Prior distribution on structure

The prior on structures S has a very simple form

P (S, σ2)

(cid:16)

exp

(cid:17)

β(#S)

,

∝

−

where #S is the number of edges in a structure. Equivalently, #S = 1

S

0, where

S

0 known as

2 ||

||

||

||

the (cid:96)0-norm, counts the number of non-zero entires in a matrix. The prior has support on the set of

all possible graphs in which the following conditions are met: each object has only one connection

(which is to a cluster node), there are no empty cluster nodes, each matrix entry is non-negative

(sij

0), and σ2 > 0.

≥
This prior is improper because the values in S have no upper bound. Given that this paper

aims to just ﬁnd a single good structure, this issue can be ignored and the prior becomes a penalty

28

β(#S) in the model’s log-score (Eq. 3). If it was desirable (and tractable) to compute a posterior

D), then this improper prior could be extended to form a proper prior. Following

−
distribution P (S

|

the structural forms model, S could be decomposed into its sparsity pattern Spat (which values are

non-zeros) and the edge values Sval. The forms model places a prior on each entry in Sval, and uses

Laplace’s method (MacKay, 2003) to approximate the integral over the parameter values

(cid:90)

P (D

Spat) =
|

P (D

Spat, Sval, σ2)P (Sval
|

|

Spat)P (σ2)dSvaldσ2.

This strategy is entirely consistent with the structural sparsity model.

In fact, approximating

the integral would create an additional force for sparsity, known as the Bayesian Occam’s razor

(MacKay, 2003). But our current approach was chosen for simplicity, since we found it unnecessary

to have two simultaneous forces driving for sparsity. There are some more formal reasons to

support this point. As the number of features grows, the Laplace approximation for the integral

above asymptotes to a model score known as the Bayesian Information Criterion (BIC) (Koller

& Friedman, 2009; Schwarz, 1978). The BIC score maximizes the likelihood while penalizing the

number of parameters, just like the penalization arising from our prior on S, although it diﬀers

in a scaling factor. Thus the more complex model, which combines these two sources of sparsity,

asymptotes to the simpler model with just a larger value of the sparsity parameter β, soaking up

both forces that promote sparsity.

8.3 Model implementation

Computing a posterior distribution over structures P (S

D) is very diﬃcult, and thus we aim to
|

ﬁnd a single good structure S that maximizes the posterior score (Eq. 3). Our approach to

this optimization problem consists of two main routines. The outer-routine searches for the best

clustering pattern (partition) of objects into cluster nodes, called cluster search. The inner-routine

searches for the best graph S without changing the clustering pattern, called connection search.

8.3.1 Cluster search

The strategy for cluster search is related to standard methods for structure learning in graphical

models (Koller & Friedman, 2009), which evaluate small changes to a graph and often greedily select

the best change. Given a hypothesis structure and its cluster pattern, cluster search considers a

29

set of local proposals to split or merge cluster nodes. The best scoring move, whether it is a split

or a merge, is chosen greedily at each step. In order to assess the quality of each move, the edges

must be re-optimized with the connection search routine which is computationally expensive. But

multiple possible moves can be evaluated in parallel. To help mitigate the problem of local optima,

search does not terminate immediately when the best local move decreases the score. Instead, the

algorithm terminates after the score decreases several times (we used 5). Search also keeps a tabu

list of previously visited cluster partitions that it does not revisit. The best evaluated structure S

is returned as the solution.

Initialization. Choosing a good initialization can save a lot of computation, and in some

cases, lead to better results. Given that cluster search operates over cluster partitions, we use

standard clustering methods to propose a set of reasonable candidates for initialization. We use

k-means clustering to choose a set of k clusters. Multiple values of k are tried, where the values

of k are evenly spaced on a logarithmic scale from 1 to the number of objects nx. Each candidate

is evaluated and scored with connection search. After determining the best value for k in this

initial coarse sampling, the algorithm attempts to narrow in on a better value. Picking the closest,

previously-tried values of k above and below the current k, k is further optimized in this range by

Fibonacci search. Assuming the score is a unimodal function of k within these bounds, Fibonacci

search will ﬁnd the optimum in this range.

Splitting clusters. To split a cluster node, the objects currently assigned to that node must be

divided between the two new clusters. Following the general splitting strategy used in the structural

forms algorithm (Kemp & Tenenbaum, 2008), the sparsity algorithm chooses two seed objects at

random, assigns one to each cluster, and stochastically distributes the remaining objects by picking

whichever seed object is closer in feature space. There is also a low probability of choosing the

opposite seed object. Rather than evaluating just one split per node, the algorithm tries several

(3) randomly chosen seed objects. Each split must then be optimized with connection search and

scored by the objective function (Equation 3). For each step during search, the algorithm is limited

in the total number of splits it will consider across all of the cluster nodes (30 for most data sets,

but 8 for large data sets like the Senate and 200 Objects).

Merging clusters. To merge two cluster nodes, they must combine their attached objects

to form a single cluster node. Rather than trying every combination of merges, each cluster node

30

stochastically, but intelligently, picks another to combine with. To help select the merges, the

algorithm ﬁrst calculates the expected value of the latent features for all cluster nodes, and the

probability of merging two nodes decreases with the distances in this feature space. The algorithm

also limits the number of merges it evaluates (30 for most data sets, but 8 for the Senate and 200

objects).

Swapping assignments. In addition to splits and merges, the algorithm also tries to swap

the cluster assignments of objects (Kemp & Tenenbaum, 2008). These moves do not compete

with splitting and merging during each greedy step of the algorithm. Instead, at regular intervals

throughout search (we used every 3 moves), each object tries to change its cluster assignment while

leaving all others ﬁxed. It tries all possibilities, but it does not re-learn the sparsity pattern for each

possible assignment, which is an expensive computation. Instead, it just re-optimizes the existing

edge strengths of each candidate proposal S. If a new parent leads to a better score, then S is

re-optimized with the full connection search.

8.3.2 Connection search

Connection search is the sub-routine that searches for the best sparse connectivity pattern, given a

assignment of objects to cluster nodes. Deﬁning a function c(S) that extracts the cluster assignment,

connection search must solve

argmax
σ2,{S:c(S)=w}

log P (f

S, σ2)

(i)
X |

−

β(#S),

m
(cid:88)

i=1

(9)

where the current cluster assignment is denoted as w. Given that features are only observed

for object nodes, and even those features can be missing, we use the Structural Expectation-

Maximization algorithm (Structural EM or SEM) for learning in the presence of missing data

(Friedman, 1997).

Structural Expectation-Maximization. SEM reduces the missing data problem to a se-

quence of simpler structure learning problems with complete data. Rather than maximizing Eq. 9

directly, the structure at iteration r + 1 of SEM maximizes

S[r+1], σ2[r+1]

argmax
σ2,{S:c(S)=w}

←

EQi(f (i)

Z ,S[r],σ2[r])

log P (f

(cid:104)

(cid:105)
S, σ2)

(i)
X , f

(i)
Z |

−

β(#S),

(10)

m
(cid:88)

i=1

31

where the expectation is over the conditional distribution of the missing or latent features (f

(i)
Z )

given the observed features (f

(i)
X ) and the current structure at iteration r,

Qi(f

(i)
Z , S[r], σ2[r]) = P (f

(i)
(i)
X , S[r], σ2[r]).
f
Z |

Each iteration of the Structural EM algorithm is guaranteed to improve the original objective, or the

marginal probability of the observed features Eq. 9. For the structural sparsity model, each iteration

can be decomposed into an E-step (Step 3 below) which computes expected suﬃcient statistics. This

is followed by a Structural M-step that re-optimizes the structure to ﬁt the new suﬃcient statistics

(Step 4). The algorithm is shown below.

1: Initialize S[0] and σ2[0]

2: for r = 0, 1, 2, ... until convergence do

(cid:80)m

←

3: H

1
m
S[r+1], σ2[r+1]
{
5: end for

4:

i=1 EQi(f (i)

Z ,S[r],σ2[r])[f (i)f (i)T ]
argmax
σ2,{S:c(S)=w}

log

J

|

| −

} ←

tr(HJ)

β
m ||

S

0
||

−

The precision matrix J is implicitly a function of S and σ2. Step 4 is intractable, as is the case

with most structure learning problems, and we describe how we approximately solve it in the next

section. Also, we run traditional EM to convergence at the end of each iteration r of Structural

EM (see Alternating SEM-EM Friedman, 1997). Traditional EM is the same algorithm as SEM

but with β = 0 and a ﬁxed sparsity pattern for S across iterations.

Optimization with (cid:96)1 heuristic. Exactly solving Step 4 is intractable, since all possible

sparsity patterns need to be considered and the number of diﬀerent sparsity patterns for k clusters

is 2(k2−k)/2. Instead we use a convex relaxation of the optimization which replaces the (cid:96)0 norm with

the (cid:96)1 norm. This heuristic leads to a sparse solution (Banerjee et al., 2008). The (cid:96)1 relaxation

penalizes a sum of the parameters instead of their cardinality, such that

S

||

0
||

≈

λ (cid:80)

ij sij for some

constant λ. This leads to a convex optimization problem which can be solved exactly (Lake &

32

Tenenbaum, 2010):

argmax
J,S,σ2

log

J

|

| −

tr(HJ)

βλ
m

−

(cid:88)

sij

ij

subject to

J = diag

(cid:16) (cid:88)

(cid:17)

sij

S +

−

1
σ2 I

j

sij = 0,

i, j

/
∈ E

}

0,

i, j

} ∈ E

sij

≥
σ2 > 0.

{

{

E

The set of allowable edges is denoted as

. Given that J can be deﬁned as an aﬃne mapping

from the variables S and σ2, we can make the ﬁrst equality constraint implicit in the objective

function and remove J as a variable (Boyd & Vandenberghem, 2004). By setting the missing edges

to be zero and removing them as variables, we have a convex optimization problem with just a

positivity constraint on the parameters. Eﬃcient methods for solving a related sparse Gaussian

problem with (cid:96)1 have been developed (Banerjee et al., 2008; Schmidt, Van Den Berg, Friedlander, &

Murphy, 2009), although this problem does not have a positivity constraint or the graph Laplacian

interpretation. Algorithms for this related problem typically solve the dual optimization problem,

although we found that solving the primal problem was more eﬃcient for the variant deﬁned here.

To solve it, we used a projected quasi-Newton algorithm and code developed by Schmidt et al.

(2009). For a given solution, many values are zero but others are just small. The ﬁnal sparsity

pattern is chosen by thresholding to approximately maximize the complete-data objective in Step

4 of the Structural EM algorithm. The algorithm repeats the optimization and thresholding a total

, and the best is picked according to the same objective. For the

of three times, at λ =

.5, 1, 2
}
{
largest data sets, λ = 1.

Derivation of Structural EM. More details of the Structural EM derivation are now de-

scribed. We unpack the SEM objective function in Eq. 10 and derive the algorithm in the section

above. Here, the distribution Qi implicitly depends on the current hypothesis S, although we drop

the dependence in the notation.

33

argmax
σ2,{S:c(S)=w}

log P (S, σ2) + (cid:80)m

i=1 EQi(f (i)

(i)
X , f

(i)
Z ; S, σ2)]

Z )[log p(f
(cid:80)m

1
2

| −

(cid:80)n

j=1

i=1 EQi(f (i)

Z )[f (i)T Jf (i)]

k=1 EQi(f (i)
Z )[f
Z )[f (i)f (i)T ]J)

i=1 tr(EQi(f (i)

(i)
j f

(i)
k ]Jjk)

= argmax

log P (S, σ2)

σ2,{S:c(S)=w}
= log P (S, σ2) + m

2 log

= log P (S, σ2) + m

2 log

m
2 log

J −1

(cid:80)m

|
i=1((cid:80)n
(cid:80)m

= log P (S, σ2) + m

2 log

m
2 tr(HJ)

−

J

J

|

|

| −

| −

1
2

1
2

J

|
β
m ||

| −
S

0
||

log

J
|

| −

∝

tr(HJ)

−

H

←

1
m

m
(cid:88)

i=1

EQi(f (i)

Z )[f (i)f (i)(cid:62)].

Above, J is the precision matrix (Eq. 8) and H is the expectation of the empirical covariance,

The E-step (Step 3 in the SEM algorithm) uses this formula for computing H. Afterwards, we can

approximately solve the optimization problem shown in the last line of the derivation, which forms

the M-step (Step 4 in the SEM algorithm).

References

Banerjee, O., El Ghaoui, L., & D’Aspremont, A. (2008). Model Selection Through Sparse Maxi-

mum Likelihood Estimation for Multivariate Gaussian or Binary Data. Journal of Machine

Learning Research, 9 , 485–516.

Boyd, S., & Vandenberghem, L. (2004). Convex Optimization. Cambridge University Press.

Carey, S. (2009). The Origin of Concepts. New York, New York, USA: Oxford University Press.

Chandrasekaran, V., Sanghavi, S., Parrilo, P. A., & Willsky, A. S. (2011). Rank-sparsiy incoherence

for matrix decomposition. SIAM Journal on Optimization, 21 (2), 572–596.

Choi, M. J., Chandrasekaran, V., & Willsky, A. S. (2010). Gaussian Multiresolution Models : Ex-

ploiting Sparse Markov and Covariance Structure. IEEE Transactions on Signal Processing,

58 (3), 1012–1024.

Choi, M. J., Tan, V., Anandkumar, A., & Willsky, A. S. (2011). Learning Latent Tree Graphical

Models. Journal of Machine Learning Research, 12 , 1771–1812.

Collins, A. M., & Loftus, E. F.

(1975). A spreading-activation theory of semantic processing.

Psychological Review , 82 (6), 407–428.

34

Ekman, G.

(1954). Dimensions of color vision. Journal of Psychology: Interdisciplinary and

Applied , 38 , 467–474.

Fares, T., & Stepanyants, A. (2009). Cooperative synapse formation in the neocortex. Proceedings

of the National Academy of Sciences of the United States of America, 106 (38), 16463–8.

Friedman, N. (1997). Learning Belief Networks in the Presence of Missing Values and Hidden

Variables. Fourteenth International Conference on Machine Learning (ICML).

Goodman, N. D., Mansinghka, V. K., Roy, D. M., Bonawitz, K., & Tenenbaum, J. B. (2008).

Church: A language for generative models. Uncertainty in Artiﬁcial Intelligence.

Griﬃths, T. L., Chater, N., Kemp, C., Perfors, A., & Tenenbaum, J. B. (2010). Probabilistic models

of cognition: exploring representations and inductive biases. Trends in Cognitive Sciences,

14 (8), 357–64.

Heit, E. (1998). A Bayesian analysis of some forms of inductive reasoning. In M. Oaksford &

N. Chater (Eds.), Rational models of cognition (pp. 248–274). Oxford University Press.

Heit, E. (2000). Properties of inductive reasoning. Psychonomic Bulletin and Review , 7 (4), 569–92.

Hutchinson, J. W. (1989). Netscal: A network scaling algortihm for nonsymmetric proximity data.

Inhelder, B., & Piaget, J. (1964). The Early Growth of Logic in the Child. London: Routledge &

Psychometrika, 54 (1), 25–51.

Kegan Paul.

Kalaitzis, A., Laﬀerty, J., & Lawrence, N. D. (2013). The Bigraphical Lasso. In Proceedings of the

30th International Conference on Machine Learning.

Kalisman, N., Silberberg, G., & Markram, H. (2005). The neocortical microcircuit as a tabula rasa.

Proceedings of the National Academy of Sciences of the United States of America, 102 (3),

Kemp, C. (2007). The acquisition of inductive constraints (Unpublished doctoral dissertation).

880–5.

MIT.

Kemp, C., Goodman, N. D., & Tenenbaum, J. B. (2008). Theory Acquisition and the Language of

Thought. Proceedings of the 30th Annual Cognitive Science Society (CogSci).

Kemp, C., & Tenenbaum, J. B.

(2008). The discovery of structural form. Proceedings of the

National Academy of Sciences, 105 (31), 10687–92.

Kemp, C., & Tenenbaum, J. B.

(2009). Structured statistical models of inductive reasoning.

35

Psychological Review , 116 (1), 20–58.

Koller, D., & Friedman, N. (2009). Probabilistic Graphical Models. MIT Press.

Kuhn, T. S. (1962). The Structure of Scientiﬁc Revolutions. Chicago, IL: University of Chicago

Lake, B. M., & Tenenbaum, J. B.

(2010). Discovering Structure by Learning Sparse Graphs.

Proceedings of the 32nd Annual Conference of the Cognitive Science Society.

Lawrence, N. D. (2011). Spectral Dimensionality Reduction via Maximum Entropy. Proceedings of

the Fourteenth International Conference on Artiﬁcial Intelligence and Statistics (AISTATS),

Lawrence, N. D. (2012). A Unifying Probabilistic Perspective for Spectral Dimensionality Reduc-

tion: Insights and New Models. Journal of Machine Learning Research, 13 , 1609–1638.

LeCun, Y., Bengio, Y., & Hinton, G. (2015). Deep learning. Nature, 521 , 436–444.

MacKay, D. J. (2003). Information Theory, Inference, and Learning Algorithms. Cambridge, UK:

Cambridge University Press.

Markman, E. M. (1989). Categorization and Naming in Children. Cambridge, MA: MIT Press.

Marr, D. C. (1982). Vision. San Francisco, CA: W.H. Freeman and Company.

McClelland, J. L. (2010). Emergence in Cognitive Science. Topics in Cognitive Science, 2 (4),

Press.

51–59.

751–770.

McClelland, J. L., Botvinick, M. M., Noelle, D. C., Plaut, D. C., Rogers, T. T., Seidenberg, M. S.,

& Smith, L. B.

(2010). Letting structure emerge: connectionist and dynamical systems

approaches to cognition. Trends in Cognitive Sciences, 14 (8), 348–56.

Navarro, D. J., & Perfors, A. F. (2011). Hypothesis generation, sparse categories, and the positive

test strategy. Psychological Review , 118 (1), 120–134.

Oaksford, M., & Chater, N.

(1994). A rational analysis of the selection task as optimal data

selection. Psychological Review , 101 (4), 608–631.

Olshausen, B. A., & Field, D. J. (1996). Emergence of simple-cell receptive ﬁeld properties by

learning a sparse code for natural images. Nature, 381 (6583), 607–9.

Osherson, D. N., Smith, E. E., Wilkie, O., Lopez, A., & Shaﬁr, E. (1990). Category-based induction.

Psychological Review , 97 (2), 185–200.

Osherson, D. N., Stern, J., Wilkie, O., Stob, M., & Smith, E. E. (1991). Default probability.

36

Cognitive Science, 15 , 251–269.

Palatucci, M., Pomerleau, D., Hinton, G., & Mitchell, T. (2009). Zero-Shot Learning with Semantic

Output Codes.

In Y. Bengio, D. Schuurmans, & J. Laﬀerty (Eds.), Advances in Neural

Information Processing Systems (NIPS).

Richardson, M., & Domingos, P.

(2006). Markov logic networks. Machine Learning, 62 (1-2),

Rips, L. J. (1975). Inductive judgments about natural categories. Journal of Verbal Learning and

107–136.

Verbal Behavior , 14 (6), 665–681.

eukaryotes. Nature, 431 , 152–155.

Rivera, M., & Lake, J. (2004). The ring of life provides evidence for a genome fusion origin of

Rogers, T. T., & McClelland, J. L. (2004). Semantic Cognition: A Parallel Distributed Processing

Approach. Cambridge, MA: MIT Press.

Schmidt, M., Van Den Berg, E., Friedlander, M. P., & Murphy, K. (2009). Optimizing Costly

Functions with Simple Constraints: A Limited-Memory Projected Quasi-Newton Algorithm.

Proceedings of the 12th International Conference on Artiﬁcial Intelligence and Statistics (AIS-

TATS).

398.

Schvaneveldt, R. W., Durso, F. T., & Dearholt, D. W. (1989). Network structures in proximity

data. In G. Bower (Ed.), The psychology of learning and motivation: Advances in research

and theory (Vol. 24). Academic Press.

Schwarz, G. (1978). Estimating the Dimension of a Model. The Annals of Statistics, 6 (2), 461–464.

Shepard, R. N. (1980). Multidimensional scaling, tree-ﬁtting, and clustering. Science, 210 , 390–

Tenenbaum, J. B., Kemp, C., Griﬃths, T. L., & Goodman, N. D. (2011). How to Grow a Mind:

Statistics, Structure, and Abstraction. Science, 331 (6022), 1279–85.

Tibshirani, R.

(1996). Regression shrinkage and selection via the lasso. Journal of the Royal

Statistical Society Series B , 58 (1), 267–288.

Xu, F., & Tenenbaum, J. B. (2007). Word learning as Bayesian inference. Psychological Review ,

114 (2), 245–272.

Zhu, X., Laﬀerty, J., & Ghahramani, Z. (2003). Semi-supervised learning: From Gaussian ﬁelds to

Gaussian processes (Tech. Rep. No. CMU-CS-03-175).

37

7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
2
v
4
8
3
9
0
.
1
1
6
1
:
v
i
X
r
a

The Emergence of Organizing Structure in Conceptual

Representation

Brenden M. Lake,1,2 Neil D. Lawrence,3 Joshua B. Tenenbaum,4,5

1Center for Data Science, New York University

2Department of Psychology, New York University

3Department of Computer Science, University of Sheﬃeld∗

4Department of Brain and Cognitive Sciences, Massachusetts Institute of Technology

5Center for Brains Minds and Machines

Abstract

Both scientists and children make important structural discoveries, yet their computational

underpinnings are not well understood. Structure discovery has previously been formalized as

probabilistic inference about the right structural form — where form could be a tree, ring, chain,

grid, etc. [Kemp & Tenenbaum (2008). The discovery of structural form. PNAS, 105(3), 10687-

10692]. Although this approach can learn intuitive organizations, including a tree for animals

and a ring for the color circle, it assumes a strong inductive bias that considers only these

particular forms, and each form is explicitly provided as initial knowledge. Here we introduce

a new computational model of how organizing structure can be discovered, utilizing a broad

hypothesis space with a preference for sparse connectivity. Given that the inductive bias is

more general, the model’s initial knowledge shows little qualitative resemblance to some of the

discoveries it supports. As a consequence, the model can also learn complex structures for

domains that lack intuitive description, as well as predict human property induction judgments

without explicit structural forms. By allowing form to emerge from sparsity, our approach

clariﬁes how both the richness and ﬂexibility of human conceptual organization can coexist.

∗This work was completed before N. Lawrence joined Amazon Research Cambridge.

1

1

Introduction

Structural discoveries play an important role in science and cognitive development (Carey, 2009;

Kuhn, 1962). In biology, Linnaeus realized that living things were best organized as a tree, displac-

ing the “great chain of being” used for centuries before. Modern chemistry began with Mendeleev’s

discovery of the periodic structure of elements. In cognitive development, children realize that the

days of the week form a cycle and that social networks form cliques. Children do not initially treat

comparative relations such as “longer than” as transitive, but they realize the unidimensional struc-

ture around age 7 or 8 (Inhelder & Piaget, 1964). While learning the names for objects, children

tend to learn just one name per object, but they must later discover that names can be organized

in a taxonomy (Markman, 1989). Yet, other forms of learning are not marked by clear structural

insights and transitions. Everyday forms of learning, such as a child acquiring facts about animals

and artifacts, have been characterized as accumulating correlations and gradually diﬀerentiating

concepts (Rogers & McClelland, 2004). What distinguishes more ordinary forms of learning from

genuine structural discoveries?

This distinction is not well understood computationally. In machine learning, many standard

algorithms learn only a single form of structure that is decided on in advance – whether it is learn-

ing clusters (e.g., k-means), trees (hierarchical clustering), or multidimensional spaces (principal

component analysis). It is usually up to the human practitioner, rather than the algorithms them-

selves, to decide which type of structure is most appropriate for the data. Other approaches such

as neural networks (deep learning; LeCun, Bengio, & Hinton, 2015) make very general represen-

tational assumptions and can model data with many diﬀerent structural characteristics. However,

the learned structure is only implicit in the connection weights, with no obvious mechanism for

diﬀerentiating between genuine structural discoveries from other forms of learning.

Previous work from our group investigated how the form of structure can be learned from data

and represented explicitly (Kemp & Tenenbaum, 2008). Structure selection can be formalized as

probabilistic inference over a set of discrete and mutually exclusive hypotheses such as rings (i),

grids (ii), trees (iii), chains (iv), etc. called structural forms (Fig. 1A). The forms are deﬁned by

grammatical constraints on the connections between entities; for example the ring form constrains

each node to have exactly two neighbors. This approach can learn intuitive structures for a variety

2

of domains, such as a tree for animals and a ring for the color circle. Once learned, these structures

can be used to explain human inductive reasoning about novel properties of objects (Kemp &

Tenenbaum, 2009).

Although powerful, the structural forms approach is not appropriate when the data strays

from the predeﬁned forms. Exceptions are common in real world domains. The genetic similarity

of animals is captured by an evolutionary tree1, but everyday reasoning about animals draws on

factors that span divergent branches, including shared habitat, role as predator versus prey, and size.

These factors cannot be perfectly explained by a single tree, and other domains are interestingly

structured yet even further removed from a pristine form, such as artifacts and social networks.

Since people can learn and reason in all of these domains, they must either entertain structural

hypotheses without strict grammatical constraints, or engage in other types of learning.

An alternative approach is to learn implicit rather than explicit structural organization. Rogers

and McClelland (2004) studied a neural network that learns to map animals (like canary) and

relations (can) to output attributes that a canary can do (grow, move, ﬂy, and sing). Like the

structural forms approach, the neural network learns aggregate statistical structure from the ob-

servations. Rogers and McClelland (2004) analyzed their network’s learned representation through

dimensionality reduction, projecting each living thing into a low-dimensional representational space.

In this space, the most salient split is between animals versus plants, with sub-divisions for mam-

mals versus birds, trees versus ﬂowers, etc. Although the network is not constrained or biased

to learn a tree, it nonetheless learns a distributed representation for living things that exhibits

hierarchical structure.

Although neural networks are powerful implicit learners, people also seem to learn and reason

with explicit structural representations. Kemp and Tenenbaum (2009) point out that language often

carries direct structural information such as “Indiana is next to Illinois” or “A dolphin is a mammal

not a ﬁsh,” observations that can be elegantly incorporated in more explicit representations. These

representations can also provide scaﬀolding for learning higher-level concepts with direct structural

interpretations, such as using a tree structure to help learn the world “primate” (Xu & Tenenbaum,

2007). Finally, it remains mysterious how implicit structure in a neural network might, in rare yet

1Even this structure has exceptions; for example, Rivera and Lake (2004) provide evidence that at the deepest

levels “the tree of life is actually a ring of life” where genomes fused.

3

pivotal moments in science and childhood, crystallize to create explicit structural discoveries.

Here, we present a new computational approach to structure learning and discovery that incor-

porates some of the best features of previous probabilistic and connectionist models. Rather than

selecting between discrete and mutually exclusive structural hypotheses deﬁned by grammars, the

model learns explicit structure in an unrestricted hypothesis space of all possible graphs. A key

insight is that many cognitively natural structural forms are very sparse, meaning that the graphs

have relatively few edges (connecting lines between the nodes). This observation is central to our

new approach, called structural sparsity, which is capable of rich structural inferences guided by a

preference for sparsity. Sparsity suggests an alternative means for learning pristine structural form

(Fig. 1A), albeit without explicitly identifying which form the structure belongs to (ring, tree, etc.

as in Kemp and Tenenbaum (2008)). This property of our approach has both appealing features

and drawbacks, depending on how we would like to interpret it as a cognitive model. We take up

these issues in detail in the discussion, at the end of the paper. Whether viewed as a strength

or weakness, the lack of an explicit representation of abstract structural forms does go hand in

hand with our models ability to explain how structure learning could proceed in domains, such as

artifacts, that may not conform to any simple, cognitively natural form (Fig. 1B).

We also use the comparison between structural sparsity and structural forms as an opportunity

to explore two diﬀerent types of inductive bias and their roles in supporting learning. For any

learning algorithm, it is instructive to compare the initial knowledge (before data) with the ﬁnal

knowledge (after data), as means of distinguishing what the model learns from what the model

starts with. For the structural forms model (Fig. 2 left), samples from the prior are already

highly structured graphs (rings, grids, trees, etc.), suggesting that the primary role of learning is

to select one of the provided forms, while simultaneously organizing the entities subject to the

corresponding grammatical constraints.

In contrast, for the structural sparsity model (Fig. 2

right), the model’s initial knowledge shows little qualitative resemblance to many of the structures

it discovers, resembling some of the representational leaps in science and cognitive development

(Carey, 2009). By comparing structural forms and structural sparsity on the same data sets – two

closely related models with diﬀerent inductive biases – we can distinguish between the cases where

a strong prior over forms is needed, from other cases where a more general bias towards sparsity

can lead to rich structural insight.

4

Figure 1: Structures that can be represented (A; i: ring, ii: grid, iii: tree, iv: chain), or cannot be
represented (B), by the structural forms of Kemp and Tenenbaum (Kemp & Tenenbaum, 2008).
All of the structures (A & B) are sparse, meaning they have relatively few edges (lines) between
the nodes. Sparsity is the foundation of the computational model introduced in this work.

2 Model

2.1 Structural sparsity

Bayesian learning underlies both the structural forms and structural sparsity models, which use

Bayes’ rule to reason about the distribution of structural hypotheses S in light of data D,

P (S

D)
|

∝

P (D

S)P (S).
|

Both models use a similar likelihood P (D

S) with diﬀerent priors P (S). The prior for the structural
|

forms model is a mixture of discrete forms F (such as rings, trees, grids, etc.), where P (S) =

(cid:80)

F P (S

|

F )P (F ). The initial knowledge P (S) reﬂects the fact that the forms are provided explicitly

and no other possibilities are entertained (Fig. 2 left). The prior for structural sparsity covers

a broader hypothesis space that includes all possible connectivity conﬁgurations (Fig. 2 right).

Sparsity is operationalized with an improper prior that decreases the score with each additional

edge in a structure

(1)

(2)

P (S)

exp(

β(#S)),

∝

−

5

Figure 2: Two models of structure discovery: (left) structural forms (Kemp & Tenenbaum, 2008)
and (right) structural sparsity (this work). Bayesian learning of structure from data D involves an
update from prior P (S) to posterior P (S
D). Given a matrix of animals and their features, the
|
two models learned similar structures despite the substantial diﬀerence in initial knowledge (prior).
In the visualizations, stronger edges are shorter, except for the dotted lines that are edges that lie
outside the strongest spanning tree.

6

where #S is the number of edges in a structure. In both models, objects are assigned to latent

clusters, known as cluster nodes (Kemp & Tenenbaum, 2008) (gray nodes in Fig. 2). Cluster nodes

can connect to other cluster nodes in arbitrary patterns, but each object must connect to exactly

one cluster node. By using cluster nodes, groups of similar objects can be elegantly represented

without dense object to object connections, leading to sparser graphs that highlight the underlying

topology. Besides the cluster assignments, objects do not form any other direct connections, unlike

an earlier version of our model without cluster nodes (Lake & Tenenbaum, 2010). Given that the

number of edges typically grows with the number of clusters (and clusters must be non-empty), the

structural sparsity prior tends to favor both fewer edges and fewer clusters.

The term P (D

S) speciﬁes the link between the graph structure and the features of objects.
|

The data D =

f (1), ..., f (m)

is a matrix where rows are objects and columns are features f (i).

{

}

For instance, we used a data set of 33 animals and 102 features, where the ﬁrst ﬁve features were

“has lungs,” “has a large brain,” “has a spinal cord,” “is warm-blooded,” and “has teeth” (Fig.

2 top). The distribution P (D

S) treats features as independent draws from a
|
distribution that prefers smoothness, meaning objects tend to share similar feature values with

|

S) = (cid:81)m

i=1 P (f (i)

their neighbors in the graph. For example, all the features shown in Fig. 2 are relatively smooth

(except for a hypothetical f (102∗) which is highly non-smooth) over the graphs that represent

animals (Fig. 2 bottom). An edge between node i and j is parameterized by a continuous value

sij > 0 that determines its strength, and absent edges have sij = 0. The graph as a whole

speciﬁes the covariance matrix of a multivariate Gaussian distribution with one dimension per

node (Appendix 8.1). Although P (D

S) is best suited for continuous features, binary data can be
|

treated as continuous (Kemp & Tenenbaum, 2008). Data in the form of a similarity matrix can

also be accommodated by treating the matrix as the covariance matrix of a multivariate Gaussian,

and then sampling an input data matrix D from that Gaussian (we used m = 2000 features).

As in the structural forms model, we are interested in the single best structure given the data.

For structural sparsity, taking the log of the posterior probability (Eq. 1) leads to the optimization

problem

argmax
S

log P (f (i)

S)
|

−

β(#S),

m
(cid:88)

i=1

(3)

which emphasizes the dual objectives of capturing regularities in the features (left term) while

7

promoting the sparsity of the structure (right term). The parameter β, which is the only free

parameter in the model, controls the trade-oﬀ between the two objectives. The value β = 6 was

used for most of the simulations in this paper. For large data sets with many objects, a larger value

leads to more interpretable structural discoveries (β = 18 was used in two cases). Beyond these

guidelines, we do not know if there is a completely general procedure for setting β to facilitate

interpretable structural discoveries, and this is a limitation of our work currently.

2.2 Search algorithm

Searching for the maximum of this score (Eq. 3) is a special case of learning the structure of an

undirected graphical model, a generally intractable problem that requires heuristic algorithms not

guaranteed to reach the global optimum (Koller & Friedman, 2009). Here we describe the heuristic

search algorithm developed for solving this problem. At its core, structural sparsity is a proposal

for the computational level problem (Marr, 1982) of structure discovery, and thus the particular

search algorithm we used was not intended to be cognitively plausible.

Our search algorithm consists of an outer-routine that looks for the best partition of objects

into cluster nodes, as well as a sub-routine that evaluates a candidate partition by optimizing for

the best set of edges. The outer-routine tries local proposals for splitting and merging clusters

and greedily picks the best move at each step (Kemp & Tenenbaum, 2008). Although searching

over partitions can be challenging, it can be sped up greatly by a preprocessing stage that clusters

objects several times, with diﬀerent numbers of clusters, and picks the best scoring option for

initialization.

The sub-routine has the challenging task of estimating the sparse connectivity between clus-

ters, necessary for evaluating partition quality during both initialization and local search. Directly

searching the combinatorial space of sparsity patterns is intractable, but there are well-known

heuristics such as (cid:96)1 that push parameters to zero (sij = 0) and consequently propose a sparsity

pattern (Tibshirani, 1996). The (cid:96)1 relaxation penalizes the sum rather than the number of param-

eters #S

sij

for some constant λ. Learning a Gaussian graph with (cid:96)1 penalization from a

λ (cid:80)

≈

ij |

|

complete data matrix is a convex optimization problem that can be solved eﬃciently (Banerjee, El

Ghaoui, & D’Aspremont, 2008; Lake & Tenenbaum, 2010). Although our connectivity estimation

problem is not convex due to the latent nodes and missing data, eﬃcient solvers for the complete

8

data case are utilized in a Structural Expectation-Maximization algorithm guaranteed to improve

the primary objective in Eq. 3 with each iteration (Friedman, 1997).

The Appendix (Section 8) contains a more detailed description of the entire search algorithm.

Although search can be slow, it considers the full range structures, unlike the implementation of

structural forms that runs a separate search for each form (Kemp & Tenenbaum, 2008). Code for

running the model is available online.2

3 Discovering structure in synthetic data

The algorithm was evaluated on its ability to recover the true topology of synthetic data. Given

that objects can cluster in a variety of patterns atop these forms, the challenge of jointly ﬁnding

the right cluster partition and the right sparsity pattern results in a very diﬃcult combinatorial

search problem. Structural sparsity was tested on both its ability to recover structural forms (Fig.

1A) as well as novel structures that share interesting features with the forms, but not the pristine

qualities necessary for identiﬁcation with the Kemp and Tenenbaum (2008) approach (Fig. 1B).

These new structures include a tree embedded in a ring (i), a non-grid planar graph (ii), a ring of

trees (iii), and multiple disconnected forms including disjoint chains (iv; Fig. 1B).

The synthetic experiments were structured as follows. For each candidate synthetic structure,

1000 features were generated from the ground truth graph and provided to the model. The sparsity

free parameter was set to β = 6. Given that the algorithm is non-deterministic, the search process

was repeated 10 times for each synthetic data set. Each run of the search algorithm is compared

to the ground truth.

The structures in the ﬁrst set of experiments had exactly one object per cluster node (Fig.

3A). This clustering pattern is easier for the search algorithm to ﬁnd compared to an arbitrary

clustering, in part because it is automatically examined as a candidate pattern for initialization.

Thus, this helps to isolate the challenge of ﬁnding the right sparsity pattern from the problem

of ﬁnding the right clustering. The results of search are shown Table 1. In each case, algorithm

recovers a structure that scores (Eq. 3) at least as well as the original structure (Table 1 Column

1, score match).3 For all cases except the chain, the highest scoring structure recovered the right

2https://github.com/brendenlake/structural-sparsity
3Structures are counted as correct if they are within 4 log points of the ground truth, so that an extra edge will

9

Figure 3: Synthetic data sets were generated from structures with one object per cluster node (A)
and arbitrary clusters of objects on the underlying structure (B).

10

partition of objects into cluster nodes (Table 1 Column 2, partition match), and furthermore the

structure matched the adjacency matrix up to a permutation of the cluster node indices (Table 1

Column 3, exact match). There is straightforward reason why the chain structure was not recovered

exactly. To increase sparsity, the model tended to combine the last two objects on each end of the

chain into a single cluster, using a weaker connection to the object at the end of the chain. This

conﬁguration retains the correct relations while increasing sparsity, and thus the learned structure

scores higher than the original graph.4

The structures in the second set of experiments had richer clustering patterns on the same

graphs, as well as others like clusters, a tree, a peace sign, disjoint chains, a ring of trees, and a

plane (Fig. 3B). The results are shown in Table 2. The clusters, ring, tree, and ring of trees were

perfectly recovered for each run. Like in the singleton case, the algorithm always conserved edges

on the ends of the chain structure and disjoint chains structure. Mistakes occurred on 1 run of

the grid, 2 runs of the peace graph, 1 run of the plane, and all of these were unnecessary cluster

node splits that did not alter the underlying topology. For several runs of the plane structure, the

model recovered an alternative graph that diﬀered in the location of one edge, and it also scored

roughly as well as the ground truth. On the whole, our search algorithm was highly successful at

recovering ground truth structure from synthetic data.

Score match Partition match Exact match
10
0
10
10

10
10
10
10

10
0
10
10

Ring
Chain
Grid
Peace

Table 1: Synthetic experiments with singleton cluster nodes (Fig. 3A). Entries show the number
of successes out of 10 runs of the search algorithm.

4 Discovering structure in empirical data

Structural sparsity was applied to six empirical data sets. To facilitate comparison with the struc-

tural forms approach, four data sets from Kemp and Tenenbaum (2008) were included. The search

algorithm was run ten times for each data set and the highest scoring structure is displayed. The

be counted as an error (-6 log points).

4This reduction also occurred in the original structural forms model, in order to use fewer cluster nodes.

11

Clusters
Ring
Chain
Tree
Grid
Peace
Disjoint
chains
Ring
of trees
Plane

Score match Partition match Exact match
10
10
0
10
9
8
0

10
10
0
10
9
8
0

10
10
10
10
9
8
10

10

9

10

9

10

3

Table 2: Synthetic experiments with multi-object cluster nodes (Fig. 3B). Entries show the number
of successes out of 10 runs of the search algorithm.

sparsity prior was ﬁxed at β = 6. In each case, the output of the structural forms model is displayed

for comparison. The data sets were rescaled following the procedure of Kemp and Tenenbaum

(2008).5

4.1 Animals

The ﬁrst data contains a set of 33 animals with 102 features related to biology, anatomy, and habitat

(collected by Kemp & Tenenbaum, 2008). Biological features included those like “has lungs” and

“is warm-blooded,” anatomical features included “has ﬁns” and “has a long neck,” and perceptual

features included “is black.” Habitat features often highlight non-biological similarity, like the fact

that ﬁsh and the aquatic mammals “live in the ocean.”

The learned structures are shown in Fig. 2. Although structural forms learned a tree, structural

sparsity learned a graph with a tree-based backbone that primarily reﬂects biology, with branches

for the insects, ﬁsh, birds, and mammals. Structural sparsity can also capture relationships that

reach across the tree. The aquatic mammals are situated with the ﬁsh, penguin, and other mam-

mals, representing both biology, shared habitat, and visual similarity. The tree-based structural

form better reﬂects evolutionary branching, where objects must lie at the leaf nodes. Trees such

as this are not considered by structural sparsity, since allowing empty cluster nodes would make

search much more diﬃcult. But these form-based latent trees are not necessarily highly sparse, and

5Each data matrix D (nx objects by m features) was linearly transformed so the mean across the entire matrix is
m DDT is 1. If there are missing values, the features with the most common pattern of

0 and the largest element in 1
missing objects are grouped, and the transform is computed for this sub-matrix and applied to the full matrix.

12

Figure 4: Structures learned by structural forms (left) and sparsity (right) for a vote matrix from
13 Supreme Court justices (A), similarity judgments between spectral colors (B), and Euclidean
distance between images of faces (C). To visualize the spatial structure, node locations were chosen
to be the principal eigenvectors of the implied covariance matrices (see Lawrence, 2011, 2012). Only
one dimension is shown in (A), and dotted lines are edges that do not follow a rigid linear order.

13

here structural sparsity found about half as many non-attachment edges.

4.2 Judges

The second data set included 13 Supreme Court justices and their votes on 1,596 cases, collected and

preprocessed by Kemp and Tenenbaum (2008) to include 1596 cases under Chief Justice Rehnquist.

Due to non-participation and the fact that at most 9 justices serve at a time, there were many

missing values. We integrated over the missing values while computing the model score.

The learned structures are shown in Fig. 4A. Both models organized the justices along a

spectrum from liberal (Marshall and Brennan) to conservative (Scalia and Thomas). Although

structural forms is constrained to learn exactly a chain, structural sparsity learned a similar chain

with a few additional relationships between the conservatives (two additional dotted edges and one

gap).

4.3 Colors

The next data set includes perceived similarity ratings between 14 spectral colors. Originally

collected by Ekman (1954), the similarity matrix was published in Shepard (1980) and used in

Kemp and Tenenbaum (2008), while assuming a value of 1 along the diagonal. Provided with this

data, the structural sparsity model discovered the color circle ﬁrst described by Newton (Fig. 4B).

Although the ring topology was pre-speciﬁed in the forms model, it is an emergent consequence of

the data combined with structural sparsity.

4.4 Faces

Another data set is based on pixel similarity between images of faces that vary along a masculinity

and a race dimension. This similarity data set was created by Kemp and Tenenbaum (2008).

The faces vary in two dimensions, race and gender, with four values along each. The similarity

matrix between faces is based on the Euclidean distance in pixel space, with 1 along the diagonal.

Structural sparsity recovered these two dimensions, although it deviates from a strict grid (Fig.

4C).

14

Figure 5: Sparse structures learned from two data sets: US Senators and their votes in the 111th
congress (A), and 200 objects and their features with broad semantic coverage (B). In (A), shorter
edges are stronger, but in (B) all edges are shown at approximately the same length for visual
clarity. Some coherent sub-regions are shaded and labeled for easier interpretation; these are not
labels provided to the unsupervised learning algorithm.

15

4.5 Senate

Structural sparsity can also be applied to domains that have a rich organization but do not ﬁt a

cognitively natural structural form. We used a data set of Senators and their voting records was

for the 111th United States Congress, from January 2009 to January 2011.6 Voting present or not

voting was treated as missing data. Only senators that were present for at least half the votes

were included, resulting in 98 Senators and 696 votes. Due to the size of this data set (and the

following), the sparsity parameter was increased to β = 18 to aid interpretability. To maintain

tractability, search was also modiﬁed to be less thorough, as described in Appendix 8.3.

Given the voting records, the model recovered the central divide between Democrats and Re-

publicans, bridged only by a connection between moderate Democrat Ben Nelson and Republicans

Olympia Snowe and Susan Collins (Fig. 5A). Although structural forms might capture the party

distinction along a line or with clusters, structural sparsity suggests that the complex within-party

dynamics are not naturally represented by any one of the pristine forms.

4.6 Common objects

Structural sparsity was also applied to 200 common objects with broad semantic coverage across

artifacts and living things (Palatucci, Pomerleau, Hinton, & Mitchell, 2009). Each object was

rated according to 218 properties, including questions like “Is it manmade?”, “Can you hold it?”,

and “Does it have feet?” Answers were on a 5 point scale from “deﬁnitely no” to “deﬁnitely yes”

conducted on Amazon Turk. Using a conservative threshold for indicating the presence of a feature,

the data set was converted to binary form by coding only the most conﬁdent response as 1 and the

rest as 0. The original data set contained 1000 objects, and a subset of 200 objects was randomly

selected for tractability.

Given the object and feature data, structural sparsity learns a complex structure with sub-

regions for artifacts, animals, food and drinks, natural objects and events, and places (Fig. 5B).

Edges instantiate a notion of aggregate semantic relatedness, resembling classical proposals for

semantic networks (Collins & Loftus, 1975). Although the data set is prohibitively large for com-

parison with the structural forms algorithm, it would likely miss much of the ﬁne-grained structure

6The votes were retrieved from http://www.voteview.com/house111.htm. The various yes votes (1,2,3) and no

votes (4,5,6) were collapsed to yes (1) or no (0).

16

in an attempt to ﬁt the objects into one of the pre-conceived forms.

5 Property induction

Structural sparsity, in addition to revealing organizing form, can be used to predict how people

reason about novel properties. First, structures were learned to represent two data sets, one for

mammals and one for cities. Second, the learned structures were used to make predictions about

how people reason in a property induction task.

Inductive questions looked like the following: given that a new biological property is true of

dolphins, squirrels, and chimpanzees, how likely is it true of all mammals? (Heit, 1998, 2000; Kemp

& Tenenbaum, 2009; Osherson, Smith, Wilkie, Lopez, & Shaﬁr, 1990; Rips, 1975). Earlier work

using the structural forms approach found an interesting double dissociation (Kemp & Tenenbaum,

2009): people’s ratings of argument strength for mammals were better predicted by a tree than a

continuous 2D space, while analogous ratings regarding geographical properties of cities were better

predicted by a 2D space than a tree. Here, we investigated whether structural sparsity can capture

both patterns of reasoning without requiring special purpose structural forms.

5.1 Data sets for structure learning

The mammals data set consists of 50 mammals and 85 features (properties), primarily collected by

Osherson, Stern, Wilkie, Stob, and Smith (1991) and extended in Kemp and Tenenbaum (2009).

The features contain biological, anatomical, behavioral, and habitat properties (“is gray”, “has

tough skin”, “big”, “swims”, “lives in water”). Features were collected by asking participants to

rate the strength of association between each animal and feature, starting at zero and imposing no

upper bound. Ratings were scaled between 0 and 100 and then averaged across participants.

The cities data set is a similarity matrix of 9 US cities collected by Kemp and Tenenbaum

(2009). Participants were asked to draw the locations of the 9 cities on a piece of paper, ensuring

that the relative distances were as accurate as possible. The distances for each participant were

scaled so that the largest distance was 1, and then each value was subtracted from 1 to create a

measure of spatial similarity. The matrix was averaged across participants and then provided as

input to the models.

17

5.2 Models for structure learning

Four alternative models were trained on the two base data sets: structural sparsity, a tree structural

form, a 2D spatial model, and the raw covariance matrix. For each of the models, the product of

learning is a multivariate Gaussian distribution with one dimension per object. Each multivariate

Gaussian parameterizes a joint distribution on new object properties, which can be used to make

Bayesian predictions regarding the strength of inductive arguments. All inductive arguments use

new (generic) properties that were not features in the data set used for structure learning.

•

•

•

Structural sparsity. Structural sparsity represents a Gaussian by a sparse graph (Section

8.1). The structural sparsity model has one free parameter β, which controls the degree of

sparsity in the learned structure. The model was run using a range of diﬀerent sparsity values,

and the ﬁt to the human property induction judgments were reported for each value. For

each value of β, the search algorithm was run twice for mammals and cities, and the highest

scoring structure (based on the score in Equation 3, not correlation with human participants)

was chosen to represent that value of sparsity. Examples of learned structures for mammals

are shown in Fig. 7A & D and for cities in Fig. 6B-i.

Tree-based structural form. For both data sets, we assumed a tree-based form and

searched for the best tree using the algorithm from Kemp and Tenenbaum (2009). The

learned structures are shown in Fig. 7B and Fig. 6B-ii. Given that the transformation from

a graph to a Gaussian diﬀers in some minor ways between structural forms and structural

sparsity, we relearned the edge strengths for the tree using maximum likelihood and the graph

formalism from structural sparsity. However, re-learning the edge weights did little to change

the predictive performance on the property induction tasks.

2D spatial form. For both data sets, we assumed a 2D spatial form and searched for the

best spatial representation using the algorithm from Kemp and Tenenbaum (2009) to compare

with the graph-based methods. The learned representational spaces shown in Fig. 7C and

Fig. 6B-iii. This model represents a covariance matrix Σ using distances in a 2D space

Σij =

exp(

1
2π

1
σ ||

−

xi

xj

),

||

−

(4)

18

where xi is the 2D location of object i and

xi

is the Euclidean distance between two

||

−

xj

||

objects.

•

Raw covariance. The raw covariance model was either identical to the similarity matrix or

Σ = 1

m DDT where D is the rescaled feature matrix.

5.3 Data sets for property induction

The property induction data concerning mammals, including the Osherson horse and Osherson

mammals tasks, was reported in Osherson et al. (1990). Judgments concerned 10 species: horse,

cow, chimp, gorilla, mouse, squirrel, dolphin, seal, and rhino. Participants were shown arguments of

the form “Cows and chimps require biotin for hemoglobin synthesis. Therefore, horses require biotin

for hemoglobin synthesis.” The Osherson horse set contains 36 two-premise arguments with the

conclusion “horse,” and the mammals set contains 45 three-premise arguments with the conclusion

“all mammals.” Participants ranked each set of arguments in increasing strength by sorting cards.

The induction task concerning cities was conducted by Kemp and Tenenbaum (2009). Partic-

ipants were presented a scenario where Native American artifacts can be found under most large

cities, and some kinds of artifacts are found under just one city while others are under a handful of

cities. An example inductive argument is: “Artifacts of type X are found under Seattle and Boston.

Therefore, artifacts of type X are found under Minneapolis.” There were 28 two-premise arguments

with Minneapolis as the conclusion, 28 with Houston as the conclusion, and 30 three-premise argu-

ments with “all large American cities” as the conclusion. These arguments were ranked for strength

by sorting cards, in a method intended to mimic the Osherson tasks.

5.4 Bayesian property induction

We used a Bayesian model of property induction that takes a structured representation (sparse

graph, tree, space, or raw covariance) and uses it to make predictions in the property induction tasks

(Kemp & Tenenbaum, 2009) (see also Heit, 1998). We refer the reader to Kemp and Tenenbaum

(2009) for a fuller treatment, but the basics are described here.

Inductive arguments involve questions of the form: Objects X have property f , therefore, how

likely is it that objects Y have property f ? The ﬁrst set of objects X are the premise categories,

19

and the second set Y is the conclusion category. The argument concerns a new feature f which is

observed on the set fX to be equal to the label lX (here lX = [1, 1, 1] since all the premise objects

have this property). With this notation, the strength of an inductive argument can be modeled as

the probability the property is true for the conclusion fY = 1 given the premise labels fX = lX , or

(5)

(6)

(7)

where the posterior P (f

fX = lX ) is the distribution on full instantiations of the binary feature
|

vector f , given the labeled premises. This distribution can be computed by Bayes’ rule

fX = lX ) =
P (fY = 1
|

P (f

fX = lX ),
|

(cid:88)

f :fY =1

P (f

fX = lX ) =
|

(cid:80)

f )P (f )
P (fX = lX
|
f P (fX = lX

f )P (f )
|

.

The likelihood P (fX = lX

1 if the label is consistent with the feature, and otherwise it is

f )
|

∝

0. The prior distribution P (f ) is instantiated by each of the diﬀerent models. It follows that the

strength of the inductive argument can be computed as

P (fY = 1
|

fX = lX ) =

(cid:80)

f :fY =1,fX =lX
(cid:80)

f :fX =lX

P (f )

P (f )

.

Intuitively, this is the weighted fraction of features consistent with the premises and conclusion,

compared to those consistent with just the premises. Each feature is weighted by its prior prob-

ability P (f ). Given that each model speciﬁes a Gaussian distribution on features rather than

a distribution on binary features, this prior P (f ) was approximated by a large number (106) of

continuous Gaussian samples, thresholded at the mean (0) to create binary features.

5.5 Results

The models were evaluated on their ability to predict argument strength as evaluated by partici-

pants. Predictive performance was evaluated as the Pearson correlation between people’s rankings

and the models’ evaluation of argument strength. The structural sparsity predictions using β = 8

for mammals and β = 4 for cities are highlighted in Fig. 6 and compared with the other models.

For mammals, structural sparsity predicted human ratings about as well as the tree form (Fig.

6A-iv). For cities, structural sparsity ﬁt much better than a tree and somewhat worse than a 2D

20

Figure 6: Comparing models and human responses regarding property induction for mammals (A)
and cities (B). A dot in (iv) is an inductive argument; for instance, the bottom-left dot for the
“Osherson horse” data set is the argument “dolphins and seals have this property, therefore horses
do.” Each dot represents a diﬀerent set of premises, followed by the conclusion category labeled
on the x-axis (horse, all mammals, Minneapolis, Houston, or all cities). Argument strength for
the models (x-axis) is plotted against mean rank of strength across participants (y-axis), with the
correlation coeﬃcient r shown above. Predictions were compared for diﬀerent types of structures,
including those learned with structural sparsity (i), trees (ii), and 2D spaces (iii). The arguments
about mammals mention only the 10 mammals shown in (A), although predictions were made by
using the full structures learned for 50 mammals. Here only the subtrees (or space) that contains
the pairwise paths between these 10 mammals are shown.

space (Fig. 6B-iv). The raw covariance model ﬁt particularly well for cities, since the similarity

data was already based on 2D drawings, but did not ﬁt as well for the mammals data sets.

It is noteworthy that while structural forms assumes diﬀerent forms for the two domains, struc-

tural sparsity provides comparable ﬁts with a more general inductive bias, suggesting that domain-

tailored forms may not be necessaryto explain these judgments. Structural sparsity ﬁt well across

the range of values of its sparsity parameter (Table 3), and that these diﬀerent sparsity settings

result in qualitatively diﬀerent structures for the mammals. For low sparsity (β = 1, Fig. 7D), the

model groups similar mammals together, but it is otherwise diﬃcult to interpret. For higher sparsity

(β = 8, Fig. 7A), the structure closely mimics the tree-based structural form (Fig. 7B). Structural

sparsity can predict the human judgments using either structure, indicating that a pristine tree is

suﬃcient, but not necessary, to explain the human judgments.7

7Similar results were obtained by learning sparse graphs without latent cluster variables in Lake and Tenenbaum

(2010).

21

Figure 7: Learned structures to represent the mammals data set. Structural sparsity with β = 8
(A), tree-based structural form (B), 2D spatial structural form (C), and structural sparsity with
β = 1 (D). Stronger edges are displayed as shorter.

β Osherson Osherson Minneapolis Houston All
cities
0.71
0.71
0.71
0.68
0.68

mammals
0.87
0.86
0.84
0.89
0.91

horse
0.94
0.95
0.93
0.91
0.89

0.59
0.58
0.61
0.51
0.51

0.70
0.70
0.70
0.69
0.69

1
2
4
6
8

Table 3: Correlations between how people and the structural sparsity model judge inductive
strength, for several tasks concerning mammals and cities. Rows of the table indicate diﬀerent
values of the sparsity parameter β.

22

6 General Discussion

As illustrated across a range of data sets, structural sparsity can discover qualitatively diﬀerent

organizing structures. Rather than predeﬁning a set of forms from which it selects, the model

considers a continuum of hypotheses with a simplicity bias towards sparsity. Despite this weaker

inductive bias, the model can nevertheless recover distinct structures such as trees, rings, and

chains for tightly organized domains. Unlike the structural forms model (Kemp & Tenenbaum,

2008), structural sparsity can learn exceptions to forms which often carry important semantic

meaning. If a given domain is more loosely organized, such as artifacts, the model learns a complex

organization that does not ﬁt an easily recognizable form. Once a domain structure is learned, it

can also be used to predict the extension of novel properties. Where previous work showed a double

dissociation between a tree and a 2D form for matching people’s inferences about animals and cities

(Kemp & Tenenbaum, 2009), structural sparsity can learn diﬀerent types of representations that

support diﬀerent patterns of prediction.

Structural sparsity is related to machine learning approaches for dimensionality reduction and

feature prediction that typically operate in more restricted settings. Some algorithms for non-

linear dimensionality reduction can be interpreted as using the same graphs and likelihood model

as structural sparsity (Lawrence, 2011, 2012). But these algorithms do not have latent clusters

and commonly use a ﬁxed graph created by adjoining nearby objects. There are also eﬃcient

algorithms for learning sparse networks or sparse Gaussian graphical models, either without latent

variables (Banerjee et al., 2008; Hutchinson, 1989; Lake & Tenenbaum, 2010; Schvaneveldt, Durso, &

Dearholt, 1989) or without fully recovering a latent topology (Chandrasekaran, Sanghavi, Parrilo,

& Willsky, 2011). Other algorithms learn trees with latent variables (Choi, Chandrasekaran, &

Willsky, 2010; Choi, Tan, Anandkumar, & Willsky, 2011) or jointly learn two graphs – one for

objects and one for features – although without latent variables (Kalaitzis, Laﬀerty, & Lawrence,

2013). Although these algorithms are computationally eﬃcient and successful in the settings they

consider, they do not attempt to explain how people can learn diﬀerent types of organizing structure

for diﬀerent domains. Structural forms showed how the type of structure can be learned by discrete

selection, and here we showed that diﬀerent forms can arise through a general bias towards sparsity.

Structural sparsity also brings a new perspective to an old debate in cognitive science between

23

symbolic (Griﬃths, Chater, Kemp, Perfors, & Tenenbaum, 2010) versus emergent (McClelland et

al., 2010) approaches to knowledge representation. The symbolic tradition uses classic knowledge

structures including graphs, grammars, and logic, viewing these representations as the most nat-

ural route towards the richness of thought (Griﬃths et al., 2010; Tenenbaum, Kemp, Griﬃths, &

Goodman, 2011). The competing emergent tradition views these structures as epiphenomena: they

are approximate characterizations that do not play an active cognitive role.

Instead, cognition

emerges as the cooperant consequence of simpler processes, often operating over vector spaces and

distributed representations (McClelland, 2010; McClelland et al., 2010). This debate has been par-

ticularly lively with regards to conceptual organization, the domain studied here. The structural

forms model (Kemp & Tenenbaum, 2008) has been criticized by the emergent camp for lacking

the necessary ﬂexibility for many real domains, which often stray from pristine forms (McClelland

et al., 2010). The importance of ﬂexibility has motivated emergent alternatives, such as a con-

nectionist network that maps animals and relations on the input side to attributes on the output

side (Rogers & McClelland, 2004). As this model learns, an implicit tree structure emerges in its

distributed representations. But those favoring explicit structure have pointed to diﬃculties:

it

becomes hard to incorporate data with direct structural implications like “A dolphin is not a ﬁsh

although it looks like one” (Kemp & Tenenbaum, 2009), and latent objects in the structure support

the acquisition of superordinate classes such as “primate” or “mammal” (Xu & Tenenbaum, 2007).

Structural sparsity shows how these seemingly incompatible desiderata could be satisﬁed within a

single approach, and how rich and ﬂexible structure can emerge from a preference for sparsity.

Although the structural sparsity model was formulated at Marr’s computational level (Marr,

1982), any complete understanding must also extend to the algorithmic and implementation levels.

Explaining how this model, and other models at the computational level, could be approximated

by neural circuits is an important challenge that we do not address in this work. Nevertheless, we

ﬁnd it intriguing that sparsity is a general principle with broad application in both neuroscience

and cognitive science, whether used to describe synaptic connectivity (Fares & Stepanyants, 2009;

Kalisman, Silberberg, & Markram, 2005), neural activation (Olshausen & Field, 1996), or envi-

ronmental structure (Navarro & Perfors, 2011; Oaksford & Chater, 1994). We think it is worth

exploring these connections with the aim of building bridges across Marr’s levels.

A ﬁnal puzzle is to understand how a more explicit notion of structural form might arise. For

24

some domains, there may be no suitable form to characterize the learned outcome of structural

sparsity (e.g., Fig. 5B), but for other domains, the learned structure can approximate the pristine

output of a graph grammar. As the model currently stands, form is not explicitly identiﬁed with

a label (“ring,” “tree,” etc.), although such a label might be necessary for genuine “conceptual

change” (Carey, 2009). An explicit structural form may also serve as a basis for analogy between

domains, as a hypothesis about causal structure within a domain, or as a vehicle for easier communi-

cation of larger domain structure (“left” or “right” in a chain and “clockwise” or “counterclockwise”

in a ring). Somehow the mind can grasp structure at this level of intuitive description, without

placing the bounds of learning around a small set of forms.

How can both explicit form and ﬂexibility be captured in a single computational approach, and

can we extend the work developed here in this direction? One possibility is to extend the approach of

Kemp and Tenenbaum (2008) to achieve greater ﬂexibility by allowing exceptions to the grammar-

based forms. As an alternative to top-down search, in the spirit of the work presented here, form

recognition could proceed from the bottom-up by ﬁrst learning a sparse representation, and then

by analyzing it to see if one or more forms ﬁt suﬃciently well. For cases such as the color circle

where the sparse graph exactly instantiates a form (Fig. 4B), form could be identiﬁed by simply

checking the grammatical deﬁnition of that form (see sketch of such a mechanism in Fig. 8). For

example, a ring could be identiﬁed as any connected graph with two edges per node. In fact, there

is behavioral support for a related mechanism: people seem to be capable of identifying the abstract

form of sparse relational graphs, when the edges are presented sequentially as social interactions

(Kemp, 2007; Kemp, Goodman, & Tenenbaum, 2008). Recognizing forms with exceptions (a tree

with cross-branch relations) or forms with more complex structures (“a ring of trees” or “a tree

in a ring”, Fig. 1B) may require probabilistic inference over a more sophisticated description

language, such as probabilistic predicate logic (Richardson & Domingos, 2006) or probabilistic

programs (Goodman, Mansinghka, Roy, Bonawitz, & Tenenbaum, 2008). In any case, if sparsity

is as powerful as our results suggest, this additional mechanism may provide a relatively modest

step in facilitating the rare yet pivotal conceptual leaps in science and development. A criterion for

judging any model of learning is how much richness is gained from initial knowledge to acquired

knowledge. By this measure, sparsity could play the primary theoretical role in a larger explanation

of qualitative structural change.

25

4.

Logical law
1.
2.
3.

x
x
x

∀
∃
∀

∀

∀
∀

∧

¬

y
R(x, y)
∀
!y R(x, y)
∃
y R(x, y)
∀
= y
!z[z
→ ∃
y R(x, y)
x
∀
!z[z
(
→
∃
z[z
∨ ¬∃
x
y T (x, y)
∀
y
z [R(x, y)
x
∀
∀
= z]
y
∧

= y
= y

→ ¬

5.
6.

R(x, z)]

R(x, z)]
R(x, z)])

∧
∧

∧
T\x(y, z)

Interpretation
No edges between cluster nodes.
At least one cluster node has just one edge.
Exactly 2 edges per cluster node.

Exactly 1 or 2 edges per cluster node.

At least one path between cluster nodes.

R(x, z) There are no cycles.

Figure 8: Sketch of an additional mechanism for identifying structural form by analyzing the output
of the structural sparsity model (inspired by Kemp et al., 2008). Forms are deﬁned as conjunctions
of laws that operate on the graph output: “Clusters” : Law 1; “Chain” : 2, 4 and 5; “Ring” : 3 and
5; “Tree” : 5 and 6. By applying these rules, the process can identify structural sparsity’s output
on the color circle as a ring (Fig. 4B) and on mammals as a tree (Fig. 7A). The relation R(
)
·
indicates that two cluster nodes share an edge. Since edges are undirected, there is an implicit
law of symmetry. The quantiﬁers are “for all” (
), and the non-standard “there
) on the set of all
exists exactly one” (
·
objects excluding x.

∀
,
) is the transitive closure of R(
·
·

!). The predicate T\x(

), “there exists” (

,
·

,
·

∃

∃

7 Acknowledgments

We thank Intel Labs for providing the data set of 200 objects and Venkat Chandrasekaran for

helpful discussions. This work was supported by a NSF Graduate Research Fellowship to B.M.L;

the Center for Brains, Minds, and Machines funded by NSF Science and Technology Center award

CCF-1231216; and the Moore-Sloan Data Science Environment at NYU.

8 Appendix

8.1 Generating data from structure

A data set is a matrix D =

f (1), ..., f (m)

(D

Rnx×m), where the rows correspond to objects and

{

}

∈

the columns are features f (i). A data set is generated by a structure, parameterized by a symmetric

matrix S

Rnt×nt. Each row/column in S corresponds to a node in the graph. The set of object

∈

nodes is called X and cluster nodes is called Z, where nx and nz are their cardinalities, combining

for a total of nt = nx + nz nodes in the graph.

A key property of the structural sparsity model is that S is sparse, meaning that most of its

26

entries are equal to zero (sij = 0). For the remainder, their values are positive (sij = sji > 0). The

sparsity pattern deﬁnes the adjacency matrix of the undirected graph, where a non-zero value for

sij means that nodes i and j share an edge. Given that each object node x

X connects to only

∈

one cluster node, then sxz > 0 for exactly one z

Z. There are no self-edges, so the diagonal of S

is also zero.

Following Zhu, Laﬀerty, and Ghahramani (2003) and the setup for the structural forms model

(Kemp & Tenenbaum, 2008), we introduce the graph Laplacian ∆. Its oﬀ-diagonal elements are

given by

S and its diagonal elements are

−

(cid:88)

∆ii =

sij.

A generative model for features can then be written as

P (f (k)

S)
|

∝

exp

)2(cid:17)

(k)
f
j

(cid:16)

(cid:16)

−

−

(cid:88)

i,j

sij(f

(k)
i −
f (k)(cid:62)∆f (k)(cid:17)

.

= exp

This equation highlights why the model favors features that are smooth across the graph. Features

are probable when connected objects i and j (sij > 0) have a similar value. The stronger the

connection sij (meaning the larger its value), the more important it is for the feature values to

match. As pointed out in Zhu et al. (2003), this distribution is not proper, since adding a constant

value to the feature vector does not change its probability. Therefore following Zhu et al. (2003),

we deﬁne the matrix J = ∆ + 1

σ2 I and use

P (f (k)

S, σ2)

exp

|

∝

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

,

(8)

which results in a proper density. This distribution is an nt dimensional Gaussian with zero mean

P (f (k)

S, σ2) = N
|

(cid:16)

0, J −1(cid:17)
f (k)
|
1
(2π)nt/2

J
|

|

=

−1/2 exp

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

.

∈

j

1
4

1
2

27

This generative model for features can also be derived from a maximum entropy formulation, as

shown in Lawrence (2011, 2012). This distribution over features is nearly the same as in the

structural forms model, except the forms model adds the diagonal term 1

σ2 only to the observed

nodes.

This distribution is also known as a Gaussian Markov Random Field (Koller & Friedman, 2009).

The undirected graph S (and equivalently the precision matrix J) instantiates a set of conditional

independence relationships between the variables in the graph

sij = 0 if and only if

(cid:16)

(k)
f
i ⊥

(k)
f
j

(k)
f
\{i,j}
|

(cid:17)

.

If nodes i and j do not share an edge, their feature values are conditionally independent when the

rest of the feature vector is observed (or equivalently, their partial correlation is 0 when controlling

for all other nodes). Intuitively, a shared edge is a path of direct dependence.

Given that each object connects to exactly one cluster node (and no other nodes), there are no

paths of direct dependence between objects. Instead, covariation between objects is represented

through the connections between their cluster nodes. Moreover, two objects assigned to the same

cluster node are conditionally independent, if the feature values of their shared cluster node could

be observed.

8.2 Prior distribution on structure

The prior on structures S has a very simple form

P (S, σ2)

(cid:16)

exp

(cid:17)

β(#S)

,

∝

−

where #S is the number of edges in a structure. Equivalently, #S = 1

S

0, where

S

0 known as

2 ||

||

||

||

the (cid:96)0-norm, counts the number of non-zero entires in a matrix. The prior has support on the set of

all possible graphs in which the following conditions are met: each object has only one connection

(which is to a cluster node), there are no empty cluster nodes, each matrix entry is non-negative

(sij

0), and σ2 > 0.

≥
This prior is improper because the values in S have no upper bound. Given that this paper

aims to just ﬁnd a single good structure, this issue can be ignored and the prior becomes a penalty

28

β(#S) in the model’s log-score (Eq. 3). If it was desirable (and tractable) to compute a posterior

D), then this improper prior could be extended to form a proper prior. Following

−
distribution P (S

|

the structural forms model, S could be decomposed into its sparsity pattern Spat (which values are

non-zeros) and the edge values Sval. The forms model places a prior on each entry in Sval, and uses

Laplace’s method (MacKay, 2003) to approximate the integral over the parameter values

(cid:90)

P (D

Spat) =
|

P (D

Spat, Sval, σ2)P (Sval
|

|

Spat)P (σ2)dSvaldσ2.

This strategy is entirely consistent with the structural sparsity model.

In fact, approximating

the integral would create an additional force for sparsity, known as the Bayesian Occam’s razor

(MacKay, 2003). But our current approach was chosen for simplicity, since we found it unnecessary

to have two simultaneous forces driving for sparsity. There are some more formal reasons to

support this point. As the number of features grows, the Laplace approximation for the integral

above asymptotes to a model score known as the Bayesian Information Criterion (BIC) (Koller

& Friedman, 2009; Schwarz, 1978). The BIC score maximizes the likelihood while penalizing the

number of parameters, just like the penalization arising from our prior on S, although it diﬀers

in a scaling factor. Thus the more complex model, which combines these two sources of sparsity,

asymptotes to the simpler model with just a larger value of the sparsity parameter β, soaking up

both forces that promote sparsity.

8.3 Model implementation

Computing a posterior distribution over structures P (S

D) is very diﬃcult, and thus we aim to
|

ﬁnd a single good structure S that maximizes the posterior score (Eq. 3). Our approach to

this optimization problem consists of two main routines. The outer-routine searches for the best

clustering pattern (partition) of objects into cluster nodes, called cluster search. The inner-routine

searches for the best graph S without changing the clustering pattern, called connection search.

8.3.1 Cluster search

The strategy for cluster search is related to standard methods for structure learning in graphical

models (Koller & Friedman, 2009), which evaluate small changes to a graph and often greedily select

the best change. Given a hypothesis structure and its cluster pattern, cluster search considers a

29

set of local proposals to split or merge cluster nodes. The best scoring move, whether it is a split

or a merge, is chosen greedily at each step. In order to assess the quality of each move, the edges

must be re-optimized with the connection search routine which is computationally expensive. But

multiple possible moves can be evaluated in parallel. To help mitigate the problem of local optima,

search does not terminate immediately when the best local move decreases the score. Instead, the

algorithm terminates after the score decreases several times (we used 5). Search also keeps a tabu

list of previously visited cluster partitions that it does not revisit. The best evaluated structure S

is returned as the solution.

Initialization. Choosing a good initialization can save a lot of computation, and in some

cases, lead to better results. Given that cluster search operates over cluster partitions, we use

standard clustering methods to propose a set of reasonable candidates for initialization. We use

k-means clustering to choose a set of k clusters. Multiple values of k are tried, where the values

of k are evenly spaced on a logarithmic scale from 1 to the number of objects nx. Each candidate

is evaluated and scored with connection search. After determining the best value for k in this

initial coarse sampling, the algorithm attempts to narrow in on a better value. Picking the closest,

previously-tried values of k above and below the current k, k is further optimized in this range by

Fibonacci search. Assuming the score is a unimodal function of k within these bounds, Fibonacci

search will ﬁnd the optimum in this range.

Splitting clusters. To split a cluster node, the objects currently assigned to that node must be

divided between the two new clusters. Following the general splitting strategy used in the structural

forms algorithm (Kemp & Tenenbaum, 2008), the sparsity algorithm chooses two seed objects at

random, assigns one to each cluster, and stochastically distributes the remaining objects by picking

whichever seed object is closer in feature space. There is also a low probability of choosing the

opposite seed object. Rather than evaluating just one split per node, the algorithm tries several

(3) randomly chosen seed objects. Each split must then be optimized with connection search and

scored by the objective function (Equation 3). For each step during search, the algorithm is limited

in the total number of splits it will consider across all of the cluster nodes (30 for most data sets,

but 8 for large data sets like the Senate and 200 Objects).

Merging clusters. To merge two cluster nodes, they must combine their attached objects

to form a single cluster node. Rather than trying every combination of merges, each cluster node

30

stochastically, but intelligently, picks another to combine with. To help select the merges, the

algorithm ﬁrst calculates the expected value of the latent features for all cluster nodes, and the

probability of merging two nodes decreases with the distances in this feature space. The algorithm

also limits the number of merges it evaluates (30 for most data sets, but 8 for the Senate and 200

objects).

Swapping assignments. In addition to splits and merges, the algorithm also tries to swap

the cluster assignments of objects (Kemp & Tenenbaum, 2008). These moves do not compete

with splitting and merging during each greedy step of the algorithm. Instead, at regular intervals

throughout search (we used every 3 moves), each object tries to change its cluster assignment while

leaving all others ﬁxed. It tries all possibilities, but it does not re-learn the sparsity pattern for each

possible assignment, which is an expensive computation. Instead, it just re-optimizes the existing

edge strengths of each candidate proposal S. If a new parent leads to a better score, then S is

re-optimized with the full connection search.

8.3.2 Connection search

Connection search is the sub-routine that searches for the best sparse connectivity pattern, given a

assignment of objects to cluster nodes. Deﬁning a function c(S) that extracts the cluster assignment,

connection search must solve

argmax
σ2,{S:c(S)=w}

log P (f

S, σ2)

(i)
X |

−

β(#S),

m
(cid:88)

i=1

(9)

where the current cluster assignment is denoted as w. Given that features are only observed

for object nodes, and even those features can be missing, we use the Structural Expectation-

Maximization algorithm (Structural EM or SEM) for learning in the presence of missing data

(Friedman, 1997).

Structural Expectation-Maximization. SEM reduces the missing data problem to a se-

quence of simpler structure learning problems with complete data. Rather than maximizing Eq. 9

directly, the structure at iteration r + 1 of SEM maximizes

S[r+1], σ2[r+1]

argmax
σ2,{S:c(S)=w}

←

EQi(f (i)

Z ,S[r],σ2[r])

log P (f

(cid:104)

(cid:105)
S, σ2)

(i)
X , f

(i)
Z |

−

β(#S),

(10)

m
(cid:88)

i=1

31

where the expectation is over the conditional distribution of the missing or latent features (f

(i)
Z )

given the observed features (f

(i)
X ) and the current structure at iteration r,

Qi(f

(i)
Z , S[r], σ2[r]) = P (f

(i)
(i)
X , S[r], σ2[r]).
f
Z |

Each iteration of the Structural EM algorithm is guaranteed to improve the original objective, or the

marginal probability of the observed features Eq. 9. For the structural sparsity model, each iteration

can be decomposed into an E-step (Step 3 below) which computes expected suﬃcient statistics. This

is followed by a Structural M-step that re-optimizes the structure to ﬁt the new suﬃcient statistics

(Step 4). The algorithm is shown below.

1: Initialize S[0] and σ2[0]

2: for r = 0, 1, 2, ... until convergence do

(cid:80)m

←

3: H

1
m
S[r+1], σ2[r+1]
{
5: end for

4:

i=1 EQi(f (i)

Z ,S[r],σ2[r])[f (i)f (i)T ]
argmax
σ2,{S:c(S)=w}

log

J

|

| −

} ←

tr(HJ)

β
m ||

S

0
||

−

The precision matrix J is implicitly a function of S and σ2. Step 4 is intractable, as is the case

with most structure learning problems, and we describe how we approximately solve it in the next

section. Also, we run traditional EM to convergence at the end of each iteration r of Structural

EM (see Alternating SEM-EM Friedman, 1997). Traditional EM is the same algorithm as SEM

but with β = 0 and a ﬁxed sparsity pattern for S across iterations.

Optimization with (cid:96)1 heuristic. Exactly solving Step 4 is intractable, since all possible

sparsity patterns need to be considered and the number of diﬀerent sparsity patterns for k clusters

is 2(k2−k)/2. Instead we use a convex relaxation of the optimization which replaces the (cid:96)0 norm with

the (cid:96)1 norm. This heuristic leads to a sparse solution (Banerjee et al., 2008). The (cid:96)1 relaxation

penalizes a sum of the parameters instead of their cardinality, such that

S

||

0
||

≈

λ (cid:80)

ij sij for some

constant λ. This leads to a convex optimization problem which can be solved exactly (Lake &

32

Tenenbaum, 2010):

argmax
J,S,σ2

log

J

|

| −

tr(HJ)

βλ
m

−

(cid:88)

sij

ij

subject to

J = diag

(cid:16) (cid:88)

(cid:17)

sij

S +

−

1
σ2 I

j

sij = 0,

i, j

/
∈ E

}

0,

i, j

} ∈ E

sij

≥
σ2 > 0.

{

{

E

The set of allowable edges is denoted as

. Given that J can be deﬁned as an aﬃne mapping

from the variables S and σ2, we can make the ﬁrst equality constraint implicit in the objective

function and remove J as a variable (Boyd & Vandenberghem, 2004). By setting the missing edges

to be zero and removing them as variables, we have a convex optimization problem with just a

positivity constraint on the parameters. Eﬃcient methods for solving a related sparse Gaussian

problem with (cid:96)1 have been developed (Banerjee et al., 2008; Schmidt, Van Den Berg, Friedlander, &

Murphy, 2009), although this problem does not have a positivity constraint or the graph Laplacian

interpretation. Algorithms for this related problem typically solve the dual optimization problem,

although we found that solving the primal problem was more eﬃcient for the variant deﬁned here.

To solve it, we used a projected quasi-Newton algorithm and code developed by Schmidt et al.

(2009). For a given solution, many values are zero but others are just small. The ﬁnal sparsity

pattern is chosen by thresholding to approximately maximize the complete-data objective in Step

4 of the Structural EM algorithm. The algorithm repeats the optimization and thresholding a total

, and the best is picked according to the same objective. For the

of three times, at λ =

.5, 1, 2
}
{
largest data sets, λ = 1.

Derivation of Structural EM. More details of the Structural EM derivation are now de-

scribed. We unpack the SEM objective function in Eq. 10 and derive the algorithm in the section

above. Here, the distribution Qi implicitly depends on the current hypothesis S, although we drop

the dependence in the notation.

33

argmax
σ2,{S:c(S)=w}

log P (S, σ2) + (cid:80)m

i=1 EQi(f (i)

(i)
X , f

(i)
Z ; S, σ2)]

Z )[log p(f
(cid:80)m

1
2

| −

(cid:80)n

j=1

i=1 EQi(f (i)

Z )[f (i)T Jf (i)]

k=1 EQi(f (i)
Z )[f
Z )[f (i)f (i)T ]J)

i=1 tr(EQi(f (i)

(i)
j f

(i)
k ]Jjk)

= argmax

log P (S, σ2)

σ2,{S:c(S)=w}
= log P (S, σ2) + m

2 log

= log P (S, σ2) + m

2 log

m
2 log

J −1

(cid:80)m

|
i=1((cid:80)n
(cid:80)m

= log P (S, σ2) + m

2 log

m
2 tr(HJ)

−

J

J

|

|

| −

| −

1
2

1
2

J

|
β
m ||

| −
S

0
||

log

J
|

| −

∝

tr(HJ)

−

H

←

1
m

m
(cid:88)

i=1

EQi(f (i)

Z )[f (i)f (i)(cid:62)].

Above, J is the precision matrix (Eq. 8) and H is the expectation of the empirical covariance,

The E-step (Step 3 in the SEM algorithm) uses this formula for computing H. Afterwards, we can

approximately solve the optimization problem shown in the last line of the derivation, which forms

the M-step (Step 4 in the SEM algorithm).

References

Banerjee, O., El Ghaoui, L., & D’Aspremont, A. (2008). Model Selection Through Sparse Maxi-

mum Likelihood Estimation for Multivariate Gaussian or Binary Data. Journal of Machine

Learning Research, 9 , 485–516.

Boyd, S., & Vandenberghem, L. (2004). Convex Optimization. Cambridge University Press.

Carey, S. (2009). The Origin of Concepts. New York, New York, USA: Oxford University Press.

Chandrasekaran, V., Sanghavi, S., Parrilo, P. A., & Willsky, A. S. (2011). Rank-sparsiy incoherence

for matrix decomposition. SIAM Journal on Optimization, 21 (2), 572–596.

Choi, M. J., Chandrasekaran, V., & Willsky, A. S. (2010). Gaussian Multiresolution Models : Ex-

ploiting Sparse Markov and Covariance Structure. IEEE Transactions on Signal Processing,

58 (3), 1012–1024.

Choi, M. J., Tan, V., Anandkumar, A., & Willsky, A. S. (2011). Learning Latent Tree Graphical

Models. Journal of Machine Learning Research, 12 , 1771–1812.

Collins, A. M., & Loftus, E. F.

(1975). A spreading-activation theory of semantic processing.

Psychological Review , 82 (6), 407–428.

34

Ekman, G.

(1954). Dimensions of color vision. Journal of Psychology: Interdisciplinary and

Applied , 38 , 467–474.

Fares, T., & Stepanyants, A. (2009). Cooperative synapse formation in the neocortex. Proceedings

of the National Academy of Sciences of the United States of America, 106 (38), 16463–8.

Friedman, N. (1997). Learning Belief Networks in the Presence of Missing Values and Hidden

Variables. Fourteenth International Conference on Machine Learning (ICML).

Goodman, N. D., Mansinghka, V. K., Roy, D. M., Bonawitz, K., & Tenenbaum, J. B. (2008).

Church: A language for generative models. Uncertainty in Artiﬁcial Intelligence.

Griﬃths, T. L., Chater, N., Kemp, C., Perfors, A., & Tenenbaum, J. B. (2010). Probabilistic models

of cognition: exploring representations and inductive biases. Trends in Cognitive Sciences,

14 (8), 357–64.

Heit, E. (1998). A Bayesian analysis of some forms of inductive reasoning. In M. Oaksford &

N. Chater (Eds.), Rational models of cognition (pp. 248–274). Oxford University Press.

Heit, E. (2000). Properties of inductive reasoning. Psychonomic Bulletin and Review , 7 (4), 569–92.

Hutchinson, J. W. (1989). Netscal: A network scaling algortihm for nonsymmetric proximity data.

Inhelder, B., & Piaget, J. (1964). The Early Growth of Logic in the Child. London: Routledge &

Psychometrika, 54 (1), 25–51.

Kegan Paul.

Kalaitzis, A., Laﬀerty, J., & Lawrence, N. D. (2013). The Bigraphical Lasso. In Proceedings of the

30th International Conference on Machine Learning.

Kalisman, N., Silberberg, G., & Markram, H. (2005). The neocortical microcircuit as a tabula rasa.

Proceedings of the National Academy of Sciences of the United States of America, 102 (3),

Kemp, C. (2007). The acquisition of inductive constraints (Unpublished doctoral dissertation).

880–5.

MIT.

Kemp, C., Goodman, N. D., & Tenenbaum, J. B. (2008). Theory Acquisition and the Language of

Thought. Proceedings of the 30th Annual Cognitive Science Society (CogSci).

Kemp, C., & Tenenbaum, J. B.

(2008). The discovery of structural form. Proceedings of the

National Academy of Sciences, 105 (31), 10687–92.

Kemp, C., & Tenenbaum, J. B.

(2009). Structured statistical models of inductive reasoning.

35

Psychological Review , 116 (1), 20–58.

Koller, D., & Friedman, N. (2009). Probabilistic Graphical Models. MIT Press.

Kuhn, T. S. (1962). The Structure of Scientiﬁc Revolutions. Chicago, IL: University of Chicago

Lake, B. M., & Tenenbaum, J. B.

(2010). Discovering Structure by Learning Sparse Graphs.

Proceedings of the 32nd Annual Conference of the Cognitive Science Society.

Lawrence, N. D. (2011). Spectral Dimensionality Reduction via Maximum Entropy. Proceedings of

the Fourteenth International Conference on Artiﬁcial Intelligence and Statistics (AISTATS),

Lawrence, N. D. (2012). A Unifying Probabilistic Perspective for Spectral Dimensionality Reduc-

tion: Insights and New Models. Journal of Machine Learning Research, 13 , 1609–1638.

LeCun, Y., Bengio, Y., & Hinton, G. (2015). Deep learning. Nature, 521 , 436–444.

MacKay, D. J. (2003). Information Theory, Inference, and Learning Algorithms. Cambridge, UK:

Cambridge University Press.

Markman, E. M. (1989). Categorization and Naming in Children. Cambridge, MA: MIT Press.

Marr, D. C. (1982). Vision. San Francisco, CA: W.H. Freeman and Company.

McClelland, J. L. (2010). Emergence in Cognitive Science. Topics in Cognitive Science, 2 (4),

Press.

51–59.

751–770.

McClelland, J. L., Botvinick, M. M., Noelle, D. C., Plaut, D. C., Rogers, T. T., Seidenberg, M. S.,

& Smith, L. B.

(2010). Letting structure emerge: connectionist and dynamical systems

approaches to cognition. Trends in Cognitive Sciences, 14 (8), 348–56.

Navarro, D. J., & Perfors, A. F. (2011). Hypothesis generation, sparse categories, and the positive

test strategy. Psychological Review , 118 (1), 120–134.

Oaksford, M., & Chater, N.

(1994). A rational analysis of the selection task as optimal data

selection. Psychological Review , 101 (4), 608–631.

Olshausen, B. A., & Field, D. J. (1996). Emergence of simple-cell receptive ﬁeld properties by

learning a sparse code for natural images. Nature, 381 (6583), 607–9.

Osherson, D. N., Smith, E. E., Wilkie, O., Lopez, A., & Shaﬁr, E. (1990). Category-based induction.

Psychological Review , 97 (2), 185–200.

Osherson, D. N., Stern, J., Wilkie, O., Stob, M., & Smith, E. E. (1991). Default probability.

36

Cognitive Science, 15 , 251–269.

Palatucci, M., Pomerleau, D., Hinton, G., & Mitchell, T. (2009). Zero-Shot Learning with Semantic

Output Codes.

In Y. Bengio, D. Schuurmans, & J. Laﬀerty (Eds.), Advances in Neural

Information Processing Systems (NIPS).

Richardson, M., & Domingos, P.

(2006). Markov logic networks. Machine Learning, 62 (1-2),

Rips, L. J. (1975). Inductive judgments about natural categories. Journal of Verbal Learning and

107–136.

Verbal Behavior , 14 (6), 665–681.

eukaryotes. Nature, 431 , 152–155.

Rivera, M., & Lake, J. (2004). The ring of life provides evidence for a genome fusion origin of

Rogers, T. T., & McClelland, J. L. (2004). Semantic Cognition: A Parallel Distributed Processing

Approach. Cambridge, MA: MIT Press.

Schmidt, M., Van Den Berg, E., Friedlander, M. P., & Murphy, K. (2009). Optimizing Costly

Functions with Simple Constraints: A Limited-Memory Projected Quasi-Newton Algorithm.

Proceedings of the 12th International Conference on Artiﬁcial Intelligence and Statistics (AIS-

TATS).

398.

Schvaneveldt, R. W., Durso, F. T., & Dearholt, D. W. (1989). Network structures in proximity

data. In G. Bower (Ed.), The psychology of learning and motivation: Advances in research

and theory (Vol. 24). Academic Press.

Schwarz, G. (1978). Estimating the Dimension of a Model. The Annals of Statistics, 6 (2), 461–464.

Shepard, R. N. (1980). Multidimensional scaling, tree-ﬁtting, and clustering. Science, 210 , 390–

Tenenbaum, J. B., Kemp, C., Griﬃths, T. L., & Goodman, N. D. (2011). How to Grow a Mind:

Statistics, Structure, and Abstraction. Science, 331 (6022), 1279–85.

Tibshirani, R.

(1996). Regression shrinkage and selection via the lasso. Journal of the Royal

Statistical Society Series B , 58 (1), 267–288.

Xu, F., & Tenenbaum, J. B. (2007). Word learning as Bayesian inference. Psychological Review ,

114 (2), 245–272.

Zhu, X., Laﬀerty, J., & Ghahramani, Z. (2003). Semi-supervised learning: From Gaussian ﬁelds to

Gaussian processes (Tech. Rep. No. CMU-CS-03-175).

37

7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
2
v
4
8
3
9
0
.
1
1
6
1
:
v
i
X
r
a

The Emergence of Organizing Structure in Conceptual

Representation

Brenden M. Lake,1,2 Neil D. Lawrence,3 Joshua B. Tenenbaum,4,5

1Center for Data Science, New York University

2Department of Psychology, New York University

3Department of Computer Science, University of Sheﬃeld∗

4Department of Brain and Cognitive Sciences, Massachusetts Institute of Technology

5Center for Brains Minds and Machines

Abstract

Both scientists and children make important structural discoveries, yet their computational

underpinnings are not well understood. Structure discovery has previously been formalized as

probabilistic inference about the right structural form — where form could be a tree, ring, chain,

grid, etc. [Kemp & Tenenbaum (2008). The discovery of structural form. PNAS, 105(3), 10687-

10692]. Although this approach can learn intuitive organizations, including a tree for animals

and a ring for the color circle, it assumes a strong inductive bias that considers only these

particular forms, and each form is explicitly provided as initial knowledge. Here we introduce

a new computational model of how organizing structure can be discovered, utilizing a broad

hypothesis space with a preference for sparse connectivity. Given that the inductive bias is

more general, the model’s initial knowledge shows little qualitative resemblance to some of the

discoveries it supports. As a consequence, the model can also learn complex structures for

domains that lack intuitive description, as well as predict human property induction judgments

without explicit structural forms. By allowing form to emerge from sparsity, our approach

clariﬁes how both the richness and ﬂexibility of human conceptual organization can coexist.

∗This work was completed before N. Lawrence joined Amazon Research Cambridge.

1

1

Introduction

Structural discoveries play an important role in science and cognitive development (Carey, 2009;

Kuhn, 1962). In biology, Linnaeus realized that living things were best organized as a tree, displac-

ing the “great chain of being” used for centuries before. Modern chemistry began with Mendeleev’s

discovery of the periodic structure of elements. In cognitive development, children realize that the

days of the week form a cycle and that social networks form cliques. Children do not initially treat

comparative relations such as “longer than” as transitive, but they realize the unidimensional struc-

ture around age 7 or 8 (Inhelder & Piaget, 1964). While learning the names for objects, children

tend to learn just one name per object, but they must later discover that names can be organized

in a taxonomy (Markman, 1989). Yet, other forms of learning are not marked by clear structural

insights and transitions. Everyday forms of learning, such as a child acquiring facts about animals

and artifacts, have been characterized as accumulating correlations and gradually diﬀerentiating

concepts (Rogers & McClelland, 2004). What distinguishes more ordinary forms of learning from

genuine structural discoveries?

This distinction is not well understood computationally. In machine learning, many standard

algorithms learn only a single form of structure that is decided on in advance – whether it is learn-

ing clusters (e.g., k-means), trees (hierarchical clustering), or multidimensional spaces (principal

component analysis). It is usually up to the human practitioner, rather than the algorithms them-

selves, to decide which type of structure is most appropriate for the data. Other approaches such

as neural networks (deep learning; LeCun, Bengio, & Hinton, 2015) make very general represen-

tational assumptions and can model data with many diﬀerent structural characteristics. However,

the learned structure is only implicit in the connection weights, with no obvious mechanism for

diﬀerentiating between genuine structural discoveries from other forms of learning.

Previous work from our group investigated how the form of structure can be learned from data

and represented explicitly (Kemp & Tenenbaum, 2008). Structure selection can be formalized as

probabilistic inference over a set of discrete and mutually exclusive hypotheses such as rings (i),

grids (ii), trees (iii), chains (iv), etc. called structural forms (Fig. 1A). The forms are deﬁned by

grammatical constraints on the connections between entities; for example the ring form constrains

each node to have exactly two neighbors. This approach can learn intuitive structures for a variety

2

of domains, such as a tree for animals and a ring for the color circle. Once learned, these structures

can be used to explain human inductive reasoning about novel properties of objects (Kemp &

Tenenbaum, 2009).

Although powerful, the structural forms approach is not appropriate when the data strays

from the predeﬁned forms. Exceptions are common in real world domains. The genetic similarity

of animals is captured by an evolutionary tree1, but everyday reasoning about animals draws on

factors that span divergent branches, including shared habitat, role as predator versus prey, and size.

These factors cannot be perfectly explained by a single tree, and other domains are interestingly

structured yet even further removed from a pristine form, such as artifacts and social networks.

Since people can learn and reason in all of these domains, they must either entertain structural

hypotheses without strict grammatical constraints, or engage in other types of learning.

An alternative approach is to learn implicit rather than explicit structural organization. Rogers

and McClelland (2004) studied a neural network that learns to map animals (like canary) and

relations (can) to output attributes that a canary can do (grow, move, ﬂy, and sing). Like the

structural forms approach, the neural network learns aggregate statistical structure from the ob-

servations. Rogers and McClelland (2004) analyzed their network’s learned representation through

dimensionality reduction, projecting each living thing into a low-dimensional representational space.

In this space, the most salient split is between animals versus plants, with sub-divisions for mam-

mals versus birds, trees versus ﬂowers, etc. Although the network is not constrained or biased

to learn a tree, it nonetheless learns a distributed representation for living things that exhibits

hierarchical structure.

Although neural networks are powerful implicit learners, people also seem to learn and reason

with explicit structural representations. Kemp and Tenenbaum (2009) point out that language often

carries direct structural information such as “Indiana is next to Illinois” or “A dolphin is a mammal

not a ﬁsh,” observations that can be elegantly incorporated in more explicit representations. These

representations can also provide scaﬀolding for learning higher-level concepts with direct structural

interpretations, such as using a tree structure to help learn the world “primate” (Xu & Tenenbaum,

2007). Finally, it remains mysterious how implicit structure in a neural network might, in rare yet

1Even this structure has exceptions; for example, Rivera and Lake (2004) provide evidence that at the deepest

levels “the tree of life is actually a ring of life” where genomes fused.

3

pivotal moments in science and childhood, crystallize to create explicit structural discoveries.

Here, we present a new computational approach to structure learning and discovery that incor-

porates some of the best features of previous probabilistic and connectionist models. Rather than

selecting between discrete and mutually exclusive structural hypotheses deﬁned by grammars, the

model learns explicit structure in an unrestricted hypothesis space of all possible graphs. A key

insight is that many cognitively natural structural forms are very sparse, meaning that the graphs

have relatively few edges (connecting lines between the nodes). This observation is central to our

new approach, called structural sparsity, which is capable of rich structural inferences guided by a

preference for sparsity. Sparsity suggests an alternative means for learning pristine structural form

(Fig. 1A), albeit without explicitly identifying which form the structure belongs to (ring, tree, etc.

as in Kemp and Tenenbaum (2008)). This property of our approach has both appealing features

and drawbacks, depending on how we would like to interpret it as a cognitive model. We take up

these issues in detail in the discussion, at the end of the paper. Whether viewed as a strength

or weakness, the lack of an explicit representation of abstract structural forms does go hand in

hand with our models ability to explain how structure learning could proceed in domains, such as

artifacts, that may not conform to any simple, cognitively natural form (Fig. 1B).

We also use the comparison between structural sparsity and structural forms as an opportunity

to explore two diﬀerent types of inductive bias and their roles in supporting learning. For any

learning algorithm, it is instructive to compare the initial knowledge (before data) with the ﬁnal

knowledge (after data), as means of distinguishing what the model learns from what the model

starts with. For the structural forms model (Fig. 2 left), samples from the prior are already

highly structured graphs (rings, grids, trees, etc.), suggesting that the primary role of learning is

to select one of the provided forms, while simultaneously organizing the entities subject to the

corresponding grammatical constraints.

In contrast, for the structural sparsity model (Fig. 2

right), the model’s initial knowledge shows little qualitative resemblance to many of the structures

it discovers, resembling some of the representational leaps in science and cognitive development

(Carey, 2009). By comparing structural forms and structural sparsity on the same data sets – two

closely related models with diﬀerent inductive biases – we can distinguish between the cases where

a strong prior over forms is needed, from other cases where a more general bias towards sparsity

can lead to rich structural insight.

4

Figure 1: Structures that can be represented (A; i: ring, ii: grid, iii: tree, iv: chain), or cannot be
represented (B), by the structural forms of Kemp and Tenenbaum (Kemp & Tenenbaum, 2008).
All of the structures (A & B) are sparse, meaning they have relatively few edges (lines) between
the nodes. Sparsity is the foundation of the computational model introduced in this work.

2 Model

2.1 Structural sparsity

Bayesian learning underlies both the structural forms and structural sparsity models, which use

Bayes’ rule to reason about the distribution of structural hypotheses S in light of data D,

P (S

D)
|

∝

P (D

S)P (S).
|

Both models use a similar likelihood P (D

S) with diﬀerent priors P (S). The prior for the structural
|

forms model is a mixture of discrete forms F (such as rings, trees, grids, etc.), where P (S) =

(cid:80)

F P (S

|

F )P (F ). The initial knowledge P (S) reﬂects the fact that the forms are provided explicitly

and no other possibilities are entertained (Fig. 2 left). The prior for structural sparsity covers

a broader hypothesis space that includes all possible connectivity conﬁgurations (Fig. 2 right).

Sparsity is operationalized with an improper prior that decreases the score with each additional

edge in a structure

(1)

(2)

P (S)

exp(

β(#S)),

∝

−

5

Figure 2: Two models of structure discovery: (left) structural forms (Kemp & Tenenbaum, 2008)
and (right) structural sparsity (this work). Bayesian learning of structure from data D involves an
update from prior P (S) to posterior P (S
D). Given a matrix of animals and their features, the
|
two models learned similar structures despite the substantial diﬀerence in initial knowledge (prior).
In the visualizations, stronger edges are shorter, except for the dotted lines that are edges that lie
outside the strongest spanning tree.

6

where #S is the number of edges in a structure. In both models, objects are assigned to latent

clusters, known as cluster nodes (Kemp & Tenenbaum, 2008) (gray nodes in Fig. 2). Cluster nodes

can connect to other cluster nodes in arbitrary patterns, but each object must connect to exactly

one cluster node. By using cluster nodes, groups of similar objects can be elegantly represented

without dense object to object connections, leading to sparser graphs that highlight the underlying

topology. Besides the cluster assignments, objects do not form any other direct connections, unlike

an earlier version of our model without cluster nodes (Lake & Tenenbaum, 2010). Given that the

number of edges typically grows with the number of clusters (and clusters must be non-empty), the

structural sparsity prior tends to favor both fewer edges and fewer clusters.

The term P (D

S) speciﬁes the link between the graph structure and the features of objects.
|

The data D =

f (1), ..., f (m)

is a matrix where rows are objects and columns are features f (i).

{

}

For instance, we used a data set of 33 animals and 102 features, where the ﬁrst ﬁve features were

“has lungs,” “has a large brain,” “has a spinal cord,” “is warm-blooded,” and “has teeth” (Fig.

2 top). The distribution P (D

S) treats features as independent draws from a
|
distribution that prefers smoothness, meaning objects tend to share similar feature values with

|

S) = (cid:81)m

i=1 P (f (i)

their neighbors in the graph. For example, all the features shown in Fig. 2 are relatively smooth

(except for a hypothetical f (102∗) which is highly non-smooth) over the graphs that represent

animals (Fig. 2 bottom). An edge between node i and j is parameterized by a continuous value

sij > 0 that determines its strength, and absent edges have sij = 0. The graph as a whole

speciﬁes the covariance matrix of a multivariate Gaussian distribution with one dimension per

node (Appendix 8.1). Although P (D

S) is best suited for continuous features, binary data can be
|

treated as continuous (Kemp & Tenenbaum, 2008). Data in the form of a similarity matrix can

also be accommodated by treating the matrix as the covariance matrix of a multivariate Gaussian,

and then sampling an input data matrix D from that Gaussian (we used m = 2000 features).

As in the structural forms model, we are interested in the single best structure given the data.

For structural sparsity, taking the log of the posterior probability (Eq. 1) leads to the optimization

problem

argmax
S

log P (f (i)

S)
|

−

β(#S),

m
(cid:88)

i=1

(3)

which emphasizes the dual objectives of capturing regularities in the features (left term) while

7

promoting the sparsity of the structure (right term). The parameter β, which is the only free

parameter in the model, controls the trade-oﬀ between the two objectives. The value β = 6 was

used for most of the simulations in this paper. For large data sets with many objects, a larger value

leads to more interpretable structural discoveries (β = 18 was used in two cases). Beyond these

guidelines, we do not know if there is a completely general procedure for setting β to facilitate

interpretable structural discoveries, and this is a limitation of our work currently.

2.2 Search algorithm

Searching for the maximum of this score (Eq. 3) is a special case of learning the structure of an

undirected graphical model, a generally intractable problem that requires heuristic algorithms not

guaranteed to reach the global optimum (Koller & Friedman, 2009). Here we describe the heuristic

search algorithm developed for solving this problem. At its core, structural sparsity is a proposal

for the computational level problem (Marr, 1982) of structure discovery, and thus the particular

search algorithm we used was not intended to be cognitively plausible.

Our search algorithm consists of an outer-routine that looks for the best partition of objects

into cluster nodes, as well as a sub-routine that evaluates a candidate partition by optimizing for

the best set of edges. The outer-routine tries local proposals for splitting and merging clusters

and greedily picks the best move at each step (Kemp & Tenenbaum, 2008). Although searching

over partitions can be challenging, it can be sped up greatly by a preprocessing stage that clusters

objects several times, with diﬀerent numbers of clusters, and picks the best scoring option for

initialization.

The sub-routine has the challenging task of estimating the sparse connectivity between clus-

ters, necessary for evaluating partition quality during both initialization and local search. Directly

searching the combinatorial space of sparsity patterns is intractable, but there are well-known

heuristics such as (cid:96)1 that push parameters to zero (sij = 0) and consequently propose a sparsity

pattern (Tibshirani, 1996). The (cid:96)1 relaxation penalizes the sum rather than the number of param-

eters #S

sij

for some constant λ. Learning a Gaussian graph with (cid:96)1 penalization from a

λ (cid:80)

≈

ij |

|

complete data matrix is a convex optimization problem that can be solved eﬃciently (Banerjee, El

Ghaoui, & D’Aspremont, 2008; Lake & Tenenbaum, 2010). Although our connectivity estimation

problem is not convex due to the latent nodes and missing data, eﬃcient solvers for the complete

8

data case are utilized in a Structural Expectation-Maximization algorithm guaranteed to improve

the primary objective in Eq. 3 with each iteration (Friedman, 1997).

The Appendix (Section 8) contains a more detailed description of the entire search algorithm.

Although search can be slow, it considers the full range structures, unlike the implementation of

structural forms that runs a separate search for each form (Kemp & Tenenbaum, 2008). Code for

running the model is available online.2

3 Discovering structure in synthetic data

The algorithm was evaluated on its ability to recover the true topology of synthetic data. Given

that objects can cluster in a variety of patterns atop these forms, the challenge of jointly ﬁnding

the right cluster partition and the right sparsity pattern results in a very diﬃcult combinatorial

search problem. Structural sparsity was tested on both its ability to recover structural forms (Fig.

1A) as well as novel structures that share interesting features with the forms, but not the pristine

qualities necessary for identiﬁcation with the Kemp and Tenenbaum (2008) approach (Fig. 1B).

These new structures include a tree embedded in a ring (i), a non-grid planar graph (ii), a ring of

trees (iii), and multiple disconnected forms including disjoint chains (iv; Fig. 1B).

The synthetic experiments were structured as follows. For each candidate synthetic structure,

1000 features were generated from the ground truth graph and provided to the model. The sparsity

free parameter was set to β = 6. Given that the algorithm is non-deterministic, the search process

was repeated 10 times for each synthetic data set. Each run of the search algorithm is compared

to the ground truth.

The structures in the ﬁrst set of experiments had exactly one object per cluster node (Fig.

3A). This clustering pattern is easier for the search algorithm to ﬁnd compared to an arbitrary

clustering, in part because it is automatically examined as a candidate pattern for initialization.

Thus, this helps to isolate the challenge of ﬁnding the right sparsity pattern from the problem

of ﬁnding the right clustering. The results of search are shown Table 1. In each case, algorithm

recovers a structure that scores (Eq. 3) at least as well as the original structure (Table 1 Column

1, score match).3 For all cases except the chain, the highest scoring structure recovered the right

2https://github.com/brendenlake/structural-sparsity
3Structures are counted as correct if they are within 4 log points of the ground truth, so that an extra edge will

9

Figure 3: Synthetic data sets were generated from structures with one object per cluster node (A)
and arbitrary clusters of objects on the underlying structure (B).

10

partition of objects into cluster nodes (Table 1 Column 2, partition match), and furthermore the

structure matched the adjacency matrix up to a permutation of the cluster node indices (Table 1

Column 3, exact match). There is straightforward reason why the chain structure was not recovered

exactly. To increase sparsity, the model tended to combine the last two objects on each end of the

chain into a single cluster, using a weaker connection to the object at the end of the chain. This

conﬁguration retains the correct relations while increasing sparsity, and thus the learned structure

scores higher than the original graph.4

The structures in the second set of experiments had richer clustering patterns on the same

graphs, as well as others like clusters, a tree, a peace sign, disjoint chains, a ring of trees, and a

plane (Fig. 3B). The results are shown in Table 2. The clusters, ring, tree, and ring of trees were

perfectly recovered for each run. Like in the singleton case, the algorithm always conserved edges

on the ends of the chain structure and disjoint chains structure. Mistakes occurred on 1 run of

the grid, 2 runs of the peace graph, 1 run of the plane, and all of these were unnecessary cluster

node splits that did not alter the underlying topology. For several runs of the plane structure, the

model recovered an alternative graph that diﬀered in the location of one edge, and it also scored

roughly as well as the ground truth. On the whole, our search algorithm was highly successful at

recovering ground truth structure from synthetic data.

Score match Partition match Exact match
10
0
10
10

10
10
10
10

10
0
10
10

Ring
Chain
Grid
Peace

Table 1: Synthetic experiments with singleton cluster nodes (Fig. 3A). Entries show the number
of successes out of 10 runs of the search algorithm.

4 Discovering structure in empirical data

Structural sparsity was applied to six empirical data sets. To facilitate comparison with the struc-

tural forms approach, four data sets from Kemp and Tenenbaum (2008) were included. The search

algorithm was run ten times for each data set and the highest scoring structure is displayed. The

be counted as an error (-6 log points).

4This reduction also occurred in the original structural forms model, in order to use fewer cluster nodes.

11

Clusters
Ring
Chain
Tree
Grid
Peace
Disjoint
chains
Ring
of trees
Plane

Score match Partition match Exact match
10
10
0
10
9
8
0

10
10
0
10
9
8
0

10
10
10
10
9
8
10

10

9

10

9

10

3

Table 2: Synthetic experiments with multi-object cluster nodes (Fig. 3B). Entries show the number
of successes out of 10 runs of the search algorithm.

sparsity prior was ﬁxed at β = 6. In each case, the output of the structural forms model is displayed

for comparison. The data sets were rescaled following the procedure of Kemp and Tenenbaum

(2008).5

4.1 Animals

The ﬁrst data contains a set of 33 animals with 102 features related to biology, anatomy, and habitat

(collected by Kemp & Tenenbaum, 2008). Biological features included those like “has lungs” and

“is warm-blooded,” anatomical features included “has ﬁns” and “has a long neck,” and perceptual

features included “is black.” Habitat features often highlight non-biological similarity, like the fact

that ﬁsh and the aquatic mammals “live in the ocean.”

The learned structures are shown in Fig. 2. Although structural forms learned a tree, structural

sparsity learned a graph with a tree-based backbone that primarily reﬂects biology, with branches

for the insects, ﬁsh, birds, and mammals. Structural sparsity can also capture relationships that

reach across the tree. The aquatic mammals are situated with the ﬁsh, penguin, and other mam-

mals, representing both biology, shared habitat, and visual similarity. The tree-based structural

form better reﬂects evolutionary branching, where objects must lie at the leaf nodes. Trees such

as this are not considered by structural sparsity, since allowing empty cluster nodes would make

search much more diﬃcult. But these form-based latent trees are not necessarily highly sparse, and

5Each data matrix D (nx objects by m features) was linearly transformed so the mean across the entire matrix is
m DDT is 1. If there are missing values, the features with the most common pattern of

0 and the largest element in 1
missing objects are grouped, and the transform is computed for this sub-matrix and applied to the full matrix.

12

Figure 4: Structures learned by structural forms (left) and sparsity (right) for a vote matrix from
13 Supreme Court justices (A), similarity judgments between spectral colors (B), and Euclidean
distance between images of faces (C). To visualize the spatial structure, node locations were chosen
to be the principal eigenvectors of the implied covariance matrices (see Lawrence, 2011, 2012). Only
one dimension is shown in (A), and dotted lines are edges that do not follow a rigid linear order.

13

here structural sparsity found about half as many non-attachment edges.

4.2 Judges

The second data set included 13 Supreme Court justices and their votes on 1,596 cases, collected and

preprocessed by Kemp and Tenenbaum (2008) to include 1596 cases under Chief Justice Rehnquist.

Due to non-participation and the fact that at most 9 justices serve at a time, there were many

missing values. We integrated over the missing values while computing the model score.

The learned structures are shown in Fig. 4A. Both models organized the justices along a

spectrum from liberal (Marshall and Brennan) to conservative (Scalia and Thomas). Although

structural forms is constrained to learn exactly a chain, structural sparsity learned a similar chain

with a few additional relationships between the conservatives (two additional dotted edges and one

gap).

4.3 Colors

The next data set includes perceived similarity ratings between 14 spectral colors. Originally

collected by Ekman (1954), the similarity matrix was published in Shepard (1980) and used in

Kemp and Tenenbaum (2008), while assuming a value of 1 along the diagonal. Provided with this

data, the structural sparsity model discovered the color circle ﬁrst described by Newton (Fig. 4B).

Although the ring topology was pre-speciﬁed in the forms model, it is an emergent consequence of

the data combined with structural sparsity.

4.4 Faces

Another data set is based on pixel similarity between images of faces that vary along a masculinity

and a race dimension. This similarity data set was created by Kemp and Tenenbaum (2008).

The faces vary in two dimensions, race and gender, with four values along each. The similarity

matrix between faces is based on the Euclidean distance in pixel space, with 1 along the diagonal.

Structural sparsity recovered these two dimensions, although it deviates from a strict grid (Fig.

4C).

14

Figure 5: Sparse structures learned from two data sets: US Senators and their votes in the 111th
congress (A), and 200 objects and their features with broad semantic coverage (B). In (A), shorter
edges are stronger, but in (B) all edges are shown at approximately the same length for visual
clarity. Some coherent sub-regions are shaded and labeled for easier interpretation; these are not
labels provided to the unsupervised learning algorithm.

15

4.5 Senate

Structural sparsity can also be applied to domains that have a rich organization but do not ﬁt a

cognitively natural structural form. We used a data set of Senators and their voting records was

for the 111th United States Congress, from January 2009 to January 2011.6 Voting present or not

voting was treated as missing data. Only senators that were present for at least half the votes

were included, resulting in 98 Senators and 696 votes. Due to the size of this data set (and the

following), the sparsity parameter was increased to β = 18 to aid interpretability. To maintain

tractability, search was also modiﬁed to be less thorough, as described in Appendix 8.3.

Given the voting records, the model recovered the central divide between Democrats and Re-

publicans, bridged only by a connection between moderate Democrat Ben Nelson and Republicans

Olympia Snowe and Susan Collins (Fig. 5A). Although structural forms might capture the party

distinction along a line or with clusters, structural sparsity suggests that the complex within-party

dynamics are not naturally represented by any one of the pristine forms.

4.6 Common objects

Structural sparsity was also applied to 200 common objects with broad semantic coverage across

artifacts and living things (Palatucci, Pomerleau, Hinton, & Mitchell, 2009). Each object was

rated according to 218 properties, including questions like “Is it manmade?”, “Can you hold it?”,

and “Does it have feet?” Answers were on a 5 point scale from “deﬁnitely no” to “deﬁnitely yes”

conducted on Amazon Turk. Using a conservative threshold for indicating the presence of a feature,

the data set was converted to binary form by coding only the most conﬁdent response as 1 and the

rest as 0. The original data set contained 1000 objects, and a subset of 200 objects was randomly

selected for tractability.

Given the object and feature data, structural sparsity learns a complex structure with sub-

regions for artifacts, animals, food and drinks, natural objects and events, and places (Fig. 5B).

Edges instantiate a notion of aggregate semantic relatedness, resembling classical proposals for

semantic networks (Collins & Loftus, 1975). Although the data set is prohibitively large for com-

parison with the structural forms algorithm, it would likely miss much of the ﬁne-grained structure

6The votes were retrieved from http://www.voteview.com/house111.htm. The various yes votes (1,2,3) and no

votes (4,5,6) were collapsed to yes (1) or no (0).

16

in an attempt to ﬁt the objects into one of the pre-conceived forms.

5 Property induction

Structural sparsity, in addition to revealing organizing form, can be used to predict how people

reason about novel properties. First, structures were learned to represent two data sets, one for

mammals and one for cities. Second, the learned structures were used to make predictions about

how people reason in a property induction task.

Inductive questions looked like the following: given that a new biological property is true of

dolphins, squirrels, and chimpanzees, how likely is it true of all mammals? (Heit, 1998, 2000; Kemp

& Tenenbaum, 2009; Osherson, Smith, Wilkie, Lopez, & Shaﬁr, 1990; Rips, 1975). Earlier work

using the structural forms approach found an interesting double dissociation (Kemp & Tenenbaum,

2009): people’s ratings of argument strength for mammals were better predicted by a tree than a

continuous 2D space, while analogous ratings regarding geographical properties of cities were better

predicted by a 2D space than a tree. Here, we investigated whether structural sparsity can capture

both patterns of reasoning without requiring special purpose structural forms.

5.1 Data sets for structure learning

The mammals data set consists of 50 mammals and 85 features (properties), primarily collected by

Osherson, Stern, Wilkie, Stob, and Smith (1991) and extended in Kemp and Tenenbaum (2009).

The features contain biological, anatomical, behavioral, and habitat properties (“is gray”, “has

tough skin”, “big”, “swims”, “lives in water”). Features were collected by asking participants to

rate the strength of association between each animal and feature, starting at zero and imposing no

upper bound. Ratings were scaled between 0 and 100 and then averaged across participants.

The cities data set is a similarity matrix of 9 US cities collected by Kemp and Tenenbaum

(2009). Participants were asked to draw the locations of the 9 cities on a piece of paper, ensuring

that the relative distances were as accurate as possible. The distances for each participant were

scaled so that the largest distance was 1, and then each value was subtracted from 1 to create a

measure of spatial similarity. The matrix was averaged across participants and then provided as

input to the models.

17

5.2 Models for structure learning

Four alternative models were trained on the two base data sets: structural sparsity, a tree structural

form, a 2D spatial model, and the raw covariance matrix. For each of the models, the product of

learning is a multivariate Gaussian distribution with one dimension per object. Each multivariate

Gaussian parameterizes a joint distribution on new object properties, which can be used to make

Bayesian predictions regarding the strength of inductive arguments. All inductive arguments use

new (generic) properties that were not features in the data set used for structure learning.

•

•

•

Structural sparsity. Structural sparsity represents a Gaussian by a sparse graph (Section

8.1). The structural sparsity model has one free parameter β, which controls the degree of

sparsity in the learned structure. The model was run using a range of diﬀerent sparsity values,

and the ﬁt to the human property induction judgments were reported for each value. For

each value of β, the search algorithm was run twice for mammals and cities, and the highest

scoring structure (based on the score in Equation 3, not correlation with human participants)

was chosen to represent that value of sparsity. Examples of learned structures for mammals

are shown in Fig. 7A & D and for cities in Fig. 6B-i.

Tree-based structural form. For both data sets, we assumed a tree-based form and

searched for the best tree using the algorithm from Kemp and Tenenbaum (2009). The

learned structures are shown in Fig. 7B and Fig. 6B-ii. Given that the transformation from

a graph to a Gaussian diﬀers in some minor ways between structural forms and structural

sparsity, we relearned the edge strengths for the tree using maximum likelihood and the graph

formalism from structural sparsity. However, re-learning the edge weights did little to change

the predictive performance on the property induction tasks.

2D spatial form. For both data sets, we assumed a 2D spatial form and searched for the

best spatial representation using the algorithm from Kemp and Tenenbaum (2009) to compare

with the graph-based methods. The learned representational spaces shown in Fig. 7C and

Fig. 6B-iii. This model represents a covariance matrix Σ using distances in a 2D space

Σij =

exp(

1
2π

1
σ ||

−

xi

xj

),

||

−

(4)

18

where xi is the 2D location of object i and

xi

is the Euclidean distance between two

||

−

xj

||

objects.

•

Raw covariance. The raw covariance model was either identical to the similarity matrix or

Σ = 1

m DDT where D is the rescaled feature matrix.

5.3 Data sets for property induction

The property induction data concerning mammals, including the Osherson horse and Osherson

mammals tasks, was reported in Osherson et al. (1990). Judgments concerned 10 species: horse,

cow, chimp, gorilla, mouse, squirrel, dolphin, seal, and rhino. Participants were shown arguments of

the form “Cows and chimps require biotin for hemoglobin synthesis. Therefore, horses require biotin

for hemoglobin synthesis.” The Osherson horse set contains 36 two-premise arguments with the

conclusion “horse,” and the mammals set contains 45 three-premise arguments with the conclusion

“all mammals.” Participants ranked each set of arguments in increasing strength by sorting cards.

The induction task concerning cities was conducted by Kemp and Tenenbaum (2009). Partic-

ipants were presented a scenario where Native American artifacts can be found under most large

cities, and some kinds of artifacts are found under just one city while others are under a handful of

cities. An example inductive argument is: “Artifacts of type X are found under Seattle and Boston.

Therefore, artifacts of type X are found under Minneapolis.” There were 28 two-premise arguments

with Minneapolis as the conclusion, 28 with Houston as the conclusion, and 30 three-premise argu-

ments with “all large American cities” as the conclusion. These arguments were ranked for strength

by sorting cards, in a method intended to mimic the Osherson tasks.

5.4 Bayesian property induction

We used a Bayesian model of property induction that takes a structured representation (sparse

graph, tree, space, or raw covariance) and uses it to make predictions in the property induction tasks

(Kemp & Tenenbaum, 2009) (see also Heit, 1998). We refer the reader to Kemp and Tenenbaum

(2009) for a fuller treatment, but the basics are described here.

Inductive arguments involve questions of the form: Objects X have property f , therefore, how

likely is it that objects Y have property f ? The ﬁrst set of objects X are the premise categories,

19

and the second set Y is the conclusion category. The argument concerns a new feature f which is

observed on the set fX to be equal to the label lX (here lX = [1, 1, 1] since all the premise objects

have this property). With this notation, the strength of an inductive argument can be modeled as

the probability the property is true for the conclusion fY = 1 given the premise labels fX = lX , or

(5)

(6)

(7)

where the posterior P (f

fX = lX ) is the distribution on full instantiations of the binary feature
|

vector f , given the labeled premises. This distribution can be computed by Bayes’ rule

fX = lX ) =
P (fY = 1
|

P (f

fX = lX ),
|

(cid:88)

f :fY =1

P (f

fX = lX ) =
|

(cid:80)

f )P (f )
P (fX = lX
|
f P (fX = lX

f )P (f )
|

.

The likelihood P (fX = lX

1 if the label is consistent with the feature, and otherwise it is

f )
|

∝

0. The prior distribution P (f ) is instantiated by each of the diﬀerent models. It follows that the

strength of the inductive argument can be computed as

P (fY = 1
|

fX = lX ) =

(cid:80)

f :fY =1,fX =lX
(cid:80)

f :fX =lX

P (f )

P (f )

.

Intuitively, this is the weighted fraction of features consistent with the premises and conclusion,

compared to those consistent with just the premises. Each feature is weighted by its prior prob-

ability P (f ). Given that each model speciﬁes a Gaussian distribution on features rather than

a distribution on binary features, this prior P (f ) was approximated by a large number (106) of

continuous Gaussian samples, thresholded at the mean (0) to create binary features.

5.5 Results

The models were evaluated on their ability to predict argument strength as evaluated by partici-

pants. Predictive performance was evaluated as the Pearson correlation between people’s rankings

and the models’ evaluation of argument strength. The structural sparsity predictions using β = 8

for mammals and β = 4 for cities are highlighted in Fig. 6 and compared with the other models.

For mammals, structural sparsity predicted human ratings about as well as the tree form (Fig.

6A-iv). For cities, structural sparsity ﬁt much better than a tree and somewhat worse than a 2D

20

Figure 6: Comparing models and human responses regarding property induction for mammals (A)
and cities (B). A dot in (iv) is an inductive argument; for instance, the bottom-left dot for the
“Osherson horse” data set is the argument “dolphins and seals have this property, therefore horses
do.” Each dot represents a diﬀerent set of premises, followed by the conclusion category labeled
on the x-axis (horse, all mammals, Minneapolis, Houston, or all cities). Argument strength for
the models (x-axis) is plotted against mean rank of strength across participants (y-axis), with the
correlation coeﬃcient r shown above. Predictions were compared for diﬀerent types of structures,
including those learned with structural sparsity (i), trees (ii), and 2D spaces (iii). The arguments
about mammals mention only the 10 mammals shown in (A), although predictions were made by
using the full structures learned for 50 mammals. Here only the subtrees (or space) that contains
the pairwise paths between these 10 mammals are shown.

space (Fig. 6B-iv). The raw covariance model ﬁt particularly well for cities, since the similarity

data was already based on 2D drawings, but did not ﬁt as well for the mammals data sets.

It is noteworthy that while structural forms assumes diﬀerent forms for the two domains, struc-

tural sparsity provides comparable ﬁts with a more general inductive bias, suggesting that domain-

tailored forms may not be necessaryto explain these judgments. Structural sparsity ﬁt well across

the range of values of its sparsity parameter (Table 3), and that these diﬀerent sparsity settings

result in qualitatively diﬀerent structures for the mammals. For low sparsity (β = 1, Fig. 7D), the

model groups similar mammals together, but it is otherwise diﬃcult to interpret. For higher sparsity

(β = 8, Fig. 7A), the structure closely mimics the tree-based structural form (Fig. 7B). Structural

sparsity can predict the human judgments using either structure, indicating that a pristine tree is

suﬃcient, but not necessary, to explain the human judgments.7

7Similar results were obtained by learning sparse graphs without latent cluster variables in Lake and Tenenbaum

(2010).

21

Figure 7: Learned structures to represent the mammals data set. Structural sparsity with β = 8
(A), tree-based structural form (B), 2D spatial structural form (C), and structural sparsity with
β = 1 (D). Stronger edges are displayed as shorter.

β Osherson Osherson Minneapolis Houston All
cities
0.71
0.71
0.71
0.68
0.68

mammals
0.87
0.86
0.84
0.89
0.91

horse
0.94
0.95
0.93
0.91
0.89

0.59
0.58
0.61
0.51
0.51

0.70
0.70
0.70
0.69
0.69

1
2
4
6
8

Table 3: Correlations between how people and the structural sparsity model judge inductive
strength, for several tasks concerning mammals and cities. Rows of the table indicate diﬀerent
values of the sparsity parameter β.

22

6 General Discussion

As illustrated across a range of data sets, structural sparsity can discover qualitatively diﬀerent

organizing structures. Rather than predeﬁning a set of forms from which it selects, the model

considers a continuum of hypotheses with a simplicity bias towards sparsity. Despite this weaker

inductive bias, the model can nevertheless recover distinct structures such as trees, rings, and

chains for tightly organized domains. Unlike the structural forms model (Kemp & Tenenbaum,

2008), structural sparsity can learn exceptions to forms which often carry important semantic

meaning. If a given domain is more loosely organized, such as artifacts, the model learns a complex

organization that does not ﬁt an easily recognizable form. Once a domain structure is learned, it

can also be used to predict the extension of novel properties. Where previous work showed a double

dissociation between a tree and a 2D form for matching people’s inferences about animals and cities

(Kemp & Tenenbaum, 2009), structural sparsity can learn diﬀerent types of representations that

support diﬀerent patterns of prediction.

Structural sparsity is related to machine learning approaches for dimensionality reduction and

feature prediction that typically operate in more restricted settings. Some algorithms for non-

linear dimensionality reduction can be interpreted as using the same graphs and likelihood model

as structural sparsity (Lawrence, 2011, 2012). But these algorithms do not have latent clusters

and commonly use a ﬁxed graph created by adjoining nearby objects. There are also eﬃcient

algorithms for learning sparse networks or sparse Gaussian graphical models, either without latent

variables (Banerjee et al., 2008; Hutchinson, 1989; Lake & Tenenbaum, 2010; Schvaneveldt, Durso, &

Dearholt, 1989) or without fully recovering a latent topology (Chandrasekaran, Sanghavi, Parrilo,

& Willsky, 2011). Other algorithms learn trees with latent variables (Choi, Chandrasekaran, &

Willsky, 2010; Choi, Tan, Anandkumar, & Willsky, 2011) or jointly learn two graphs – one for

objects and one for features – although without latent variables (Kalaitzis, Laﬀerty, & Lawrence,

2013). Although these algorithms are computationally eﬃcient and successful in the settings they

consider, they do not attempt to explain how people can learn diﬀerent types of organizing structure

for diﬀerent domains. Structural forms showed how the type of structure can be learned by discrete

selection, and here we showed that diﬀerent forms can arise through a general bias towards sparsity.

Structural sparsity also brings a new perspective to an old debate in cognitive science between

23

symbolic (Griﬃths, Chater, Kemp, Perfors, & Tenenbaum, 2010) versus emergent (McClelland et

al., 2010) approaches to knowledge representation. The symbolic tradition uses classic knowledge

structures including graphs, grammars, and logic, viewing these representations as the most nat-

ural route towards the richness of thought (Griﬃths et al., 2010; Tenenbaum, Kemp, Griﬃths, &

Goodman, 2011). The competing emergent tradition views these structures as epiphenomena: they

are approximate characterizations that do not play an active cognitive role.

Instead, cognition

emerges as the cooperant consequence of simpler processes, often operating over vector spaces and

distributed representations (McClelland, 2010; McClelland et al., 2010). This debate has been par-

ticularly lively with regards to conceptual organization, the domain studied here. The structural

forms model (Kemp & Tenenbaum, 2008) has been criticized by the emergent camp for lacking

the necessary ﬂexibility for many real domains, which often stray from pristine forms (McClelland

et al., 2010). The importance of ﬂexibility has motivated emergent alternatives, such as a con-

nectionist network that maps animals and relations on the input side to attributes on the output

side (Rogers & McClelland, 2004). As this model learns, an implicit tree structure emerges in its

distributed representations. But those favoring explicit structure have pointed to diﬃculties:

it

becomes hard to incorporate data with direct structural implications like “A dolphin is not a ﬁsh

although it looks like one” (Kemp & Tenenbaum, 2009), and latent objects in the structure support

the acquisition of superordinate classes such as “primate” or “mammal” (Xu & Tenenbaum, 2007).

Structural sparsity shows how these seemingly incompatible desiderata could be satisﬁed within a

single approach, and how rich and ﬂexible structure can emerge from a preference for sparsity.

Although the structural sparsity model was formulated at Marr’s computational level (Marr,

1982), any complete understanding must also extend to the algorithmic and implementation levels.

Explaining how this model, and other models at the computational level, could be approximated

by neural circuits is an important challenge that we do not address in this work. Nevertheless, we

ﬁnd it intriguing that sparsity is a general principle with broad application in both neuroscience

and cognitive science, whether used to describe synaptic connectivity (Fares & Stepanyants, 2009;

Kalisman, Silberberg, & Markram, 2005), neural activation (Olshausen & Field, 1996), or envi-

ronmental structure (Navarro & Perfors, 2011; Oaksford & Chater, 1994). We think it is worth

exploring these connections with the aim of building bridges across Marr’s levels.

A ﬁnal puzzle is to understand how a more explicit notion of structural form might arise. For

24

some domains, there may be no suitable form to characterize the learned outcome of structural

sparsity (e.g., Fig. 5B), but for other domains, the learned structure can approximate the pristine

output of a graph grammar. As the model currently stands, form is not explicitly identiﬁed with

a label (“ring,” “tree,” etc.), although such a label might be necessary for genuine “conceptual

change” (Carey, 2009). An explicit structural form may also serve as a basis for analogy between

domains, as a hypothesis about causal structure within a domain, or as a vehicle for easier communi-

cation of larger domain structure (“left” or “right” in a chain and “clockwise” or “counterclockwise”

in a ring). Somehow the mind can grasp structure at this level of intuitive description, without

placing the bounds of learning around a small set of forms.

How can both explicit form and ﬂexibility be captured in a single computational approach, and

can we extend the work developed here in this direction? One possibility is to extend the approach of

Kemp and Tenenbaum (2008) to achieve greater ﬂexibility by allowing exceptions to the grammar-

based forms. As an alternative to top-down search, in the spirit of the work presented here, form

recognition could proceed from the bottom-up by ﬁrst learning a sparse representation, and then

by analyzing it to see if one or more forms ﬁt suﬃciently well. For cases such as the color circle

where the sparse graph exactly instantiates a form (Fig. 4B), form could be identiﬁed by simply

checking the grammatical deﬁnition of that form (see sketch of such a mechanism in Fig. 8). For

example, a ring could be identiﬁed as any connected graph with two edges per node. In fact, there

is behavioral support for a related mechanism: people seem to be capable of identifying the abstract

form of sparse relational graphs, when the edges are presented sequentially as social interactions

(Kemp, 2007; Kemp, Goodman, & Tenenbaum, 2008). Recognizing forms with exceptions (a tree

with cross-branch relations) or forms with more complex structures (“a ring of trees” or “a tree

in a ring”, Fig. 1B) may require probabilistic inference over a more sophisticated description

language, such as probabilistic predicate logic (Richardson & Domingos, 2006) or probabilistic

programs (Goodman, Mansinghka, Roy, Bonawitz, & Tenenbaum, 2008). In any case, if sparsity

is as powerful as our results suggest, this additional mechanism may provide a relatively modest

step in facilitating the rare yet pivotal conceptual leaps in science and development. A criterion for

judging any model of learning is how much richness is gained from initial knowledge to acquired

knowledge. By this measure, sparsity could play the primary theoretical role in a larger explanation

of qualitative structural change.

25

4.

Logical law
1.
2.
3.

x
x
x

¬

∀
∃
∀

∀

∀
∀

∧

y
R(x, y)
∀
!y R(x, y)
∃
y R(x, y)
∀
= y
!z[z
→ ∃
y R(x, y)
x
∀
!z[z
(
→
∃
z[z
∨ ¬∃
x
y T (x, y)
∀
y
z [R(x, y)
x
∀
∀
= z]
y
∧

= y
= y

→ ¬

5.
6.

R(x, z)]

R(x, z)]
R(x, z)])

∧
∧

∧
T\x(y, z)

Interpretation
No edges between cluster nodes.
At least one cluster node has just one edge.
Exactly 2 edges per cluster node.

Exactly 1 or 2 edges per cluster node.

At least one path between cluster nodes.

R(x, z) There are no cycles.

Figure 8: Sketch of an additional mechanism for identifying structural form by analyzing the output
of the structural sparsity model (inspired by Kemp et al., 2008). Forms are deﬁned as conjunctions
of laws that operate on the graph output: “Clusters” : Law 1; “Chain” : 2, 4 and 5; “Ring” : 3 and
5; “Tree” : 5 and 6. By applying these rules, the process can identify structural sparsity’s output
on the color circle as a ring (Fig. 4B) and on mammals as a tree (Fig. 7A). The relation R(
)
·
indicates that two cluster nodes share an edge. Since edges are undirected, there is an implicit
law of symmetry. The quantiﬁers are “for all” (
), and the non-standard “there
) on the set of all
exists exactly one” (
·
objects excluding x.

∀
,
) is the transitive closure of R(
·
·

!). The predicate T\x(

), “there exists” (

,
·

,
·

∃

∃

7 Acknowledgments

We thank Intel Labs for providing the data set of 200 objects and Venkat Chandrasekaran for

helpful discussions. This work was supported by a NSF Graduate Research Fellowship to B.M.L;

the Center for Brains, Minds, and Machines funded by NSF Science and Technology Center award

CCF-1231216; and the Moore-Sloan Data Science Environment at NYU.

8 Appendix

8.1 Generating data from structure

A data set is a matrix D =

f (1), ..., f (m)

(D

Rnx×m), where the rows correspond to objects and

{

}

∈

the columns are features f (i). A data set is generated by a structure, parameterized by a symmetric

matrix S

Rnt×nt. Each row/column in S corresponds to a node in the graph. The set of object

∈

nodes is called X and cluster nodes is called Z, where nx and nz are their cardinalities, combining

for a total of nt = nx + nz nodes in the graph.

A key property of the structural sparsity model is that S is sparse, meaning that most of its

26

entries are equal to zero (sij = 0). For the remainder, their values are positive (sij = sji > 0). The

sparsity pattern deﬁnes the adjacency matrix of the undirected graph, where a non-zero value for

sij means that nodes i and j share an edge. Given that each object node x

X connects to only

∈

one cluster node, then sxz > 0 for exactly one z

Z. There are no self-edges, so the diagonal of S

is also zero.

Following Zhu, Laﬀerty, and Ghahramani (2003) and the setup for the structural forms model

(Kemp & Tenenbaum, 2008), we introduce the graph Laplacian ∆. Its oﬀ-diagonal elements are

given by

S and its diagonal elements are

−

(cid:88)

∆ii =

sij.

A generative model for features can then be written as

P (f (k)

S)
|

∝

exp

)2(cid:17)

(k)
f
j

(cid:16)

(cid:16)

−

−

(cid:88)

i,j

sij(f

(k)
i −
f (k)(cid:62)∆f (k)(cid:17)

.

= exp

This equation highlights why the model favors features that are smooth across the graph. Features

are probable when connected objects i and j (sij > 0) have a similar value. The stronger the

connection sij (meaning the larger its value), the more important it is for the feature values to

match. As pointed out in Zhu et al. (2003), this distribution is not proper, since adding a constant

value to the feature vector does not change its probability. Therefore following Zhu et al. (2003),

we deﬁne the matrix J = ∆ + 1

σ2 I and use

P (f (k)

S, σ2)

exp

|

∝

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

,

(8)

which results in a proper density. This distribution is an nt dimensional Gaussian with zero mean

P (f (k)

S, σ2) = N
|

(cid:16)

0, J −1(cid:17)
f (k)
|
1
(2π)nt/2

J
|

|

=

−1/2 exp

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

.

∈

j

1
4

1
2

27

This generative model for features can also be derived from a maximum entropy formulation, as

shown in Lawrence (2011, 2012). This distribution over features is nearly the same as in the

structural forms model, except the forms model adds the diagonal term 1

σ2 only to the observed

nodes.

This distribution is also known as a Gaussian Markov Random Field (Koller & Friedman, 2009).

The undirected graph S (and equivalently the precision matrix J) instantiates a set of conditional

independence relationships between the variables in the graph

sij = 0 if and only if

(cid:16)

(k)
f
i ⊥

(k)
f
j

(k)
f
\{i,j}
|

(cid:17)

.

If nodes i and j do not share an edge, their feature values are conditionally independent when the

rest of the feature vector is observed (or equivalently, their partial correlation is 0 when controlling

for all other nodes). Intuitively, a shared edge is a path of direct dependence.

Given that each object connects to exactly one cluster node (and no other nodes), there are no

paths of direct dependence between objects. Instead, covariation between objects is represented

through the connections between their cluster nodes. Moreover, two objects assigned to the same

cluster node are conditionally independent, if the feature values of their shared cluster node could

be observed.

8.2 Prior distribution on structure

The prior on structures S has a very simple form

P (S, σ2)

(cid:16)

exp

(cid:17)

β(#S)

,

∝

−

where #S is the number of edges in a structure. Equivalently, #S = 1

S

0, where

S

0 known as

2 ||

||

||

||

the (cid:96)0-norm, counts the number of non-zero entires in a matrix. The prior has support on the set of

all possible graphs in which the following conditions are met: each object has only one connection

(which is to a cluster node), there are no empty cluster nodes, each matrix entry is non-negative

(sij

0), and σ2 > 0.

≥
This prior is improper because the values in S have no upper bound. Given that this paper

aims to just ﬁnd a single good structure, this issue can be ignored and the prior becomes a penalty

28

β(#S) in the model’s log-score (Eq. 3). If it was desirable (and tractable) to compute a posterior

D), then this improper prior could be extended to form a proper prior. Following

−
distribution P (S

|

the structural forms model, S could be decomposed into its sparsity pattern Spat (which values are

non-zeros) and the edge values Sval. The forms model places a prior on each entry in Sval, and uses

Laplace’s method (MacKay, 2003) to approximate the integral over the parameter values

(cid:90)

P (D

Spat) =
|

P (D

Spat, Sval, σ2)P (Sval
|

|

Spat)P (σ2)dSvaldσ2.

This strategy is entirely consistent with the structural sparsity model.

In fact, approximating

the integral would create an additional force for sparsity, known as the Bayesian Occam’s razor

(MacKay, 2003). But our current approach was chosen for simplicity, since we found it unnecessary

to have two simultaneous forces driving for sparsity. There are some more formal reasons to

support this point. As the number of features grows, the Laplace approximation for the integral

above asymptotes to a model score known as the Bayesian Information Criterion (BIC) (Koller

& Friedman, 2009; Schwarz, 1978). The BIC score maximizes the likelihood while penalizing the

number of parameters, just like the penalization arising from our prior on S, although it diﬀers

in a scaling factor. Thus the more complex model, which combines these two sources of sparsity,

asymptotes to the simpler model with just a larger value of the sparsity parameter β, soaking up

both forces that promote sparsity.

8.3 Model implementation

Computing a posterior distribution over structures P (S

D) is very diﬃcult, and thus we aim to
|

ﬁnd a single good structure S that maximizes the posterior score (Eq. 3). Our approach to

this optimization problem consists of two main routines. The outer-routine searches for the best

clustering pattern (partition) of objects into cluster nodes, called cluster search. The inner-routine

searches for the best graph S without changing the clustering pattern, called connection search.

8.3.1 Cluster search

The strategy for cluster search is related to standard methods for structure learning in graphical

models (Koller & Friedman, 2009), which evaluate small changes to a graph and often greedily select

the best change. Given a hypothesis structure and its cluster pattern, cluster search considers a

29

set of local proposals to split or merge cluster nodes. The best scoring move, whether it is a split

or a merge, is chosen greedily at each step. In order to assess the quality of each move, the edges

must be re-optimized with the connection search routine which is computationally expensive. But

multiple possible moves can be evaluated in parallel. To help mitigate the problem of local optima,

search does not terminate immediately when the best local move decreases the score. Instead, the

algorithm terminates after the score decreases several times (we used 5). Search also keeps a tabu

list of previously visited cluster partitions that it does not revisit. The best evaluated structure S

is returned as the solution.

Initialization. Choosing a good initialization can save a lot of computation, and in some

cases, lead to better results. Given that cluster search operates over cluster partitions, we use

standard clustering methods to propose a set of reasonable candidates for initialization. We use

k-means clustering to choose a set of k clusters. Multiple values of k are tried, where the values

of k are evenly spaced on a logarithmic scale from 1 to the number of objects nx. Each candidate

is evaluated and scored with connection search. After determining the best value for k in this

initial coarse sampling, the algorithm attempts to narrow in on a better value. Picking the closest,

previously-tried values of k above and below the current k, k is further optimized in this range by

Fibonacci search. Assuming the score is a unimodal function of k within these bounds, Fibonacci

search will ﬁnd the optimum in this range.

Splitting clusters. To split a cluster node, the objects currently assigned to that node must be

divided between the two new clusters. Following the general splitting strategy used in the structural

forms algorithm (Kemp & Tenenbaum, 2008), the sparsity algorithm chooses two seed objects at

random, assigns one to each cluster, and stochastically distributes the remaining objects by picking

whichever seed object is closer in feature space. There is also a low probability of choosing the

opposite seed object. Rather than evaluating just one split per node, the algorithm tries several

(3) randomly chosen seed objects. Each split must then be optimized with connection search and

scored by the objective function (Equation 3). For each step during search, the algorithm is limited

in the total number of splits it will consider across all of the cluster nodes (30 for most data sets,

but 8 for large data sets like the Senate and 200 Objects).

Merging clusters. To merge two cluster nodes, they must combine their attached objects

to form a single cluster node. Rather than trying every combination of merges, each cluster node

30

stochastically, but intelligently, picks another to combine with. To help select the merges, the

algorithm ﬁrst calculates the expected value of the latent features for all cluster nodes, and the

probability of merging two nodes decreases with the distances in this feature space. The algorithm

also limits the number of merges it evaluates (30 for most data sets, but 8 for the Senate and 200

objects).

Swapping assignments. In addition to splits and merges, the algorithm also tries to swap

the cluster assignments of objects (Kemp & Tenenbaum, 2008). These moves do not compete

with splitting and merging during each greedy step of the algorithm. Instead, at regular intervals

throughout search (we used every 3 moves), each object tries to change its cluster assignment while

leaving all others ﬁxed. It tries all possibilities, but it does not re-learn the sparsity pattern for each

possible assignment, which is an expensive computation. Instead, it just re-optimizes the existing

edge strengths of each candidate proposal S. If a new parent leads to a better score, then S is

re-optimized with the full connection search.

8.3.2 Connection search

Connection search is the sub-routine that searches for the best sparse connectivity pattern, given a

assignment of objects to cluster nodes. Deﬁning a function c(S) that extracts the cluster assignment,

connection search must solve

argmax
σ2,{S:c(S)=w}

log P (f

S, σ2)

(i)
X |

−

β(#S),

m
(cid:88)

i=1

(9)

where the current cluster assignment is denoted as w. Given that features are only observed

for object nodes, and even those features can be missing, we use the Structural Expectation-

Maximization algorithm (Structural EM or SEM) for learning in the presence of missing data

(Friedman, 1997).

Structural Expectation-Maximization. SEM reduces the missing data problem to a se-

quence of simpler structure learning problems with complete data. Rather than maximizing Eq. 9

directly, the structure at iteration r + 1 of SEM maximizes

S[r+1], σ2[r+1]

argmax
σ2,{S:c(S)=w}

←

EQi(f (i)

Z ,S[r],σ2[r])

log P (f

(cid:104)

(cid:105)
S, σ2)

(i)
X , f

(i)
Z |

−

β(#S),

(10)

m
(cid:88)

i=1

31

where the expectation is over the conditional distribution of the missing or latent features (f

(i)
Z )

given the observed features (f

(i)
X ) and the current structure at iteration r,

Qi(f

(i)
Z , S[r], σ2[r]) = P (f

(i)
(i)
X , S[r], σ2[r]).
f
Z |

Each iteration of the Structural EM algorithm is guaranteed to improve the original objective, or the

marginal probability of the observed features Eq. 9. For the structural sparsity model, each iteration

can be decomposed into an E-step (Step 3 below) which computes expected suﬃcient statistics. This

is followed by a Structural M-step that re-optimizes the structure to ﬁt the new suﬃcient statistics

(Step 4). The algorithm is shown below.

1: Initialize S[0] and σ2[0]

2: for r = 0, 1, 2, ... until convergence do

(cid:80)m

←

3: H

1
m
S[r+1], σ2[r+1]
{
5: end for

4:

i=1 EQi(f (i)

Z ,S[r],σ2[r])[f (i)f (i)T ]
argmax
σ2,{S:c(S)=w}

log

J

|

| −

} ←

tr(HJ)

β
m ||

S

0
||

−

The precision matrix J is implicitly a function of S and σ2. Step 4 is intractable, as is the case

with most structure learning problems, and we describe how we approximately solve it in the next

section. Also, we run traditional EM to convergence at the end of each iteration r of Structural

EM (see Alternating SEM-EM Friedman, 1997). Traditional EM is the same algorithm as SEM

but with β = 0 and a ﬁxed sparsity pattern for S across iterations.

Optimization with (cid:96)1 heuristic. Exactly solving Step 4 is intractable, since all possible

sparsity patterns need to be considered and the number of diﬀerent sparsity patterns for k clusters

is 2(k2−k)/2. Instead we use a convex relaxation of the optimization which replaces the (cid:96)0 norm with

the (cid:96)1 norm. This heuristic leads to a sparse solution (Banerjee et al., 2008). The (cid:96)1 relaxation

penalizes a sum of the parameters instead of their cardinality, such that

S

||

0
||

≈

λ (cid:80)

ij sij for some

constant λ. This leads to a convex optimization problem which can be solved exactly (Lake &

32

Tenenbaum, 2010):

argmax
J,S,σ2

log

J

|

| −

tr(HJ)

βλ
m

−

(cid:88)

sij

ij

subject to

J = diag

(cid:16) (cid:88)

(cid:17)

sij

S +

−

1
σ2 I

j

sij = 0,

i, j

/
∈ E

}

0,

i, j

} ∈ E

sij

≥
σ2 > 0.

{

{

E

The set of allowable edges is denoted as

. Given that J can be deﬁned as an aﬃne mapping

from the variables S and σ2, we can make the ﬁrst equality constraint implicit in the objective

function and remove J as a variable (Boyd & Vandenberghem, 2004). By setting the missing edges

to be zero and removing them as variables, we have a convex optimization problem with just a

positivity constraint on the parameters. Eﬃcient methods for solving a related sparse Gaussian

problem with (cid:96)1 have been developed (Banerjee et al., 2008; Schmidt, Van Den Berg, Friedlander, &

Murphy, 2009), although this problem does not have a positivity constraint or the graph Laplacian

interpretation. Algorithms for this related problem typically solve the dual optimization problem,

although we found that solving the primal problem was more eﬃcient for the variant deﬁned here.

To solve it, we used a projected quasi-Newton algorithm and code developed by Schmidt et al.

(2009). For a given solution, many values are zero but others are just small. The ﬁnal sparsity

pattern is chosen by thresholding to approximately maximize the complete-data objective in Step

4 of the Structural EM algorithm. The algorithm repeats the optimization and thresholding a total

, and the best is picked according to the same objective. For the

of three times, at λ =

.5, 1, 2
}
{
largest data sets, λ = 1.

Derivation of Structural EM. More details of the Structural EM derivation are now de-

scribed. We unpack the SEM objective function in Eq. 10 and derive the algorithm in the section

above. Here, the distribution Qi implicitly depends on the current hypothesis S, although we drop

the dependence in the notation.

33

argmax
σ2,{S:c(S)=w}

log P (S, σ2) + (cid:80)m

i=1 EQi(f (i)

(i)
X , f

(i)
Z ; S, σ2)]

Z )[log p(f
(cid:80)m

1
2

| −

(cid:80)n

j=1

i=1 EQi(f (i)

Z )[f (i)T Jf (i)]

k=1 EQi(f (i)
Z )[f
Z )[f (i)f (i)T ]J)

i=1 tr(EQi(f (i)

(i)
j f

(i)
k ]Jjk)

= argmax

log P (S, σ2)

σ2,{S:c(S)=w}
= log P (S, σ2) + m

2 log

= log P (S, σ2) + m

2 log

m
2 log

J −1

(cid:80)m

|
i=1((cid:80)n
(cid:80)m

= log P (S, σ2) + m

2 log

m
2 tr(HJ)

−

J

J

|

|

| −

| −

1
2

1
2

J

|
β
m ||

| −
S

0
||

log

J
|

| −

∝

tr(HJ)

−

H

←

1
m

m
(cid:88)

i=1

EQi(f (i)

Z )[f (i)f (i)(cid:62)].

Above, J is the precision matrix (Eq. 8) and H is the expectation of the empirical covariance,

The E-step (Step 3 in the SEM algorithm) uses this formula for computing H. Afterwards, we can

approximately solve the optimization problem shown in the last line of the derivation, which forms

the M-step (Step 4 in the SEM algorithm).

References

Banerjee, O., El Ghaoui, L., & D’Aspremont, A. (2008). Model Selection Through Sparse Maxi-

mum Likelihood Estimation for Multivariate Gaussian or Binary Data. Journal of Machine

Learning Research, 9 , 485–516.

Boyd, S., & Vandenberghem, L. (2004). Convex Optimization. Cambridge University Press.

Carey, S. (2009). The Origin of Concepts. New York, New York, USA: Oxford University Press.

Chandrasekaran, V., Sanghavi, S., Parrilo, P. A., & Willsky, A. S. (2011). Rank-sparsiy incoherence

for matrix decomposition. SIAM Journal on Optimization, 21 (2), 572–596.

Choi, M. J., Chandrasekaran, V., & Willsky, A. S. (2010). Gaussian Multiresolution Models : Ex-

ploiting Sparse Markov and Covariance Structure. IEEE Transactions on Signal Processing,

58 (3), 1012–1024.

Choi, M. J., Tan, V., Anandkumar, A., & Willsky, A. S. (2011). Learning Latent Tree Graphical

Models. Journal of Machine Learning Research, 12 , 1771–1812.

Collins, A. M., & Loftus, E. F.

(1975). A spreading-activation theory of semantic processing.

Psychological Review , 82 (6), 407–428.

34

Ekman, G.

(1954). Dimensions of color vision. Journal of Psychology: Interdisciplinary and

Applied , 38 , 467–474.

Fares, T., & Stepanyants, A. (2009). Cooperative synapse formation in the neocortex. Proceedings

of the National Academy of Sciences of the United States of America, 106 (38), 16463–8.

Friedman, N. (1997). Learning Belief Networks in the Presence of Missing Values and Hidden

Variables. Fourteenth International Conference on Machine Learning (ICML).

Goodman, N. D., Mansinghka, V. K., Roy, D. M., Bonawitz, K., & Tenenbaum, J. B. (2008).

Church: A language for generative models. Uncertainty in Artiﬁcial Intelligence.

Griﬃths, T. L., Chater, N., Kemp, C., Perfors, A., & Tenenbaum, J. B. (2010). Probabilistic models

of cognition: exploring representations and inductive biases. Trends in Cognitive Sciences,

14 (8), 357–64.

Heit, E. (1998). A Bayesian analysis of some forms of inductive reasoning. In M. Oaksford &

N. Chater (Eds.), Rational models of cognition (pp. 248–274). Oxford University Press.

Heit, E. (2000). Properties of inductive reasoning. Psychonomic Bulletin and Review , 7 (4), 569–92.

Hutchinson, J. W. (1989). Netscal: A network scaling algortihm for nonsymmetric proximity data.

Inhelder, B., & Piaget, J. (1964). The Early Growth of Logic in the Child. London: Routledge &

Psychometrika, 54 (1), 25–51.

Kegan Paul.

Kalaitzis, A., Laﬀerty, J., & Lawrence, N. D. (2013). The Bigraphical Lasso. In Proceedings of the

30th International Conference on Machine Learning.

Kalisman, N., Silberberg, G., & Markram, H. (2005). The neocortical microcircuit as a tabula rasa.

Proceedings of the National Academy of Sciences of the United States of America, 102 (3),

Kemp, C. (2007). The acquisition of inductive constraints (Unpublished doctoral dissertation).

880–5.

MIT.

Kemp, C., Goodman, N. D., & Tenenbaum, J. B. (2008). Theory Acquisition and the Language of

Thought. Proceedings of the 30th Annual Cognitive Science Society (CogSci).

Kemp, C., & Tenenbaum, J. B.

(2008). The discovery of structural form. Proceedings of the

National Academy of Sciences, 105 (31), 10687–92.

Kemp, C., & Tenenbaum, J. B.

(2009). Structured statistical models of inductive reasoning.

35

Psychological Review , 116 (1), 20–58.

Koller, D., & Friedman, N. (2009). Probabilistic Graphical Models. MIT Press.

Kuhn, T. S. (1962). The Structure of Scientiﬁc Revolutions. Chicago, IL: University of Chicago

Lake, B. M., & Tenenbaum, J. B.

(2010). Discovering Structure by Learning Sparse Graphs.

Proceedings of the 32nd Annual Conference of the Cognitive Science Society.

Lawrence, N. D. (2011). Spectral Dimensionality Reduction via Maximum Entropy. Proceedings of

the Fourteenth International Conference on Artiﬁcial Intelligence and Statistics (AISTATS),

Lawrence, N. D. (2012). A Unifying Probabilistic Perspective for Spectral Dimensionality Reduc-

tion: Insights and New Models. Journal of Machine Learning Research, 13 , 1609–1638.

LeCun, Y., Bengio, Y., & Hinton, G. (2015). Deep learning. Nature, 521 , 436–444.

MacKay, D. J. (2003). Information Theory, Inference, and Learning Algorithms. Cambridge, UK:

Cambridge University Press.

Markman, E. M. (1989). Categorization and Naming in Children. Cambridge, MA: MIT Press.

Marr, D. C. (1982). Vision. San Francisco, CA: W.H. Freeman and Company.

McClelland, J. L. (2010). Emergence in Cognitive Science. Topics in Cognitive Science, 2 (4),

Press.

51–59.

751–770.

McClelland, J. L., Botvinick, M. M., Noelle, D. C., Plaut, D. C., Rogers, T. T., Seidenberg, M. S.,

& Smith, L. B.

(2010). Letting structure emerge: connectionist and dynamical systems

approaches to cognition. Trends in Cognitive Sciences, 14 (8), 348–56.

Navarro, D. J., & Perfors, A. F. (2011). Hypothesis generation, sparse categories, and the positive

test strategy. Psychological Review , 118 (1), 120–134.

Oaksford, M., & Chater, N.

(1994). A rational analysis of the selection task as optimal data

selection. Psychological Review , 101 (4), 608–631.

Olshausen, B. A., & Field, D. J. (1996). Emergence of simple-cell receptive ﬁeld properties by

learning a sparse code for natural images. Nature, 381 (6583), 607–9.

Osherson, D. N., Smith, E. E., Wilkie, O., Lopez, A., & Shaﬁr, E. (1990). Category-based induction.

Psychological Review , 97 (2), 185–200.

Osherson, D. N., Stern, J., Wilkie, O., Stob, M., & Smith, E. E. (1991). Default probability.

36

Cognitive Science, 15 , 251–269.

Palatucci, M., Pomerleau, D., Hinton, G., & Mitchell, T. (2009). Zero-Shot Learning with Semantic

Output Codes.

In Y. Bengio, D. Schuurmans, & J. Laﬀerty (Eds.), Advances in Neural

Information Processing Systems (NIPS).

Richardson, M., & Domingos, P.

(2006). Markov logic networks. Machine Learning, 62 (1-2),

Rips, L. J. (1975). Inductive judgments about natural categories. Journal of Verbal Learning and

107–136.

Verbal Behavior , 14 (6), 665–681.

eukaryotes. Nature, 431 , 152–155.

Rivera, M., & Lake, J. (2004). The ring of life provides evidence for a genome fusion origin of

Rogers, T. T., & McClelland, J. L. (2004). Semantic Cognition: A Parallel Distributed Processing

Approach. Cambridge, MA: MIT Press.

Schmidt, M., Van Den Berg, E., Friedlander, M. P., & Murphy, K. (2009). Optimizing Costly

Functions with Simple Constraints: A Limited-Memory Projected Quasi-Newton Algorithm.

Proceedings of the 12th International Conference on Artiﬁcial Intelligence and Statistics (AIS-

TATS).

398.

Schvaneveldt, R. W., Durso, F. T., & Dearholt, D. W. (1989). Network structures in proximity

data. In G. Bower (Ed.), The psychology of learning and motivation: Advances in research

and theory (Vol. 24). Academic Press.

Schwarz, G. (1978). Estimating the Dimension of a Model. The Annals of Statistics, 6 (2), 461–464.

Shepard, R. N. (1980). Multidimensional scaling, tree-ﬁtting, and clustering. Science, 210 , 390–

Tenenbaum, J. B., Kemp, C., Griﬃths, T. L., & Goodman, N. D. (2011). How to Grow a Mind:

Statistics, Structure, and Abstraction. Science, 331 (6022), 1279–85.

Tibshirani, R.

(1996). Regression shrinkage and selection via the lasso. Journal of the Royal

Statistical Society Series B , 58 (1), 267–288.

Xu, F., & Tenenbaum, J. B. (2007). Word learning as Bayesian inference. Psychological Review ,

114 (2), 245–272.

Zhu, X., Laﬀerty, J., & Ghahramani, Z. (2003). Semi-supervised learning: From Gaussian ﬁelds to

Gaussian processes (Tech. Rep. No. CMU-CS-03-175).

37

7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
2
v
4
8
3
9
0
.
1
1
6
1
:
v
i
X
r
a

The Emergence of Organizing Structure in Conceptual

Representation

Brenden M. Lake,1,2 Neil D. Lawrence,3 Joshua B. Tenenbaum,4,5

1Center for Data Science, New York University

2Department of Psychology, New York University

3Department of Computer Science, University of Sheﬃeld∗

4Department of Brain and Cognitive Sciences, Massachusetts Institute of Technology

5Center for Brains Minds and Machines

Abstract

Both scientists and children make important structural discoveries, yet their computational

underpinnings are not well understood. Structure discovery has previously been formalized as

probabilistic inference about the right structural form — where form could be a tree, ring, chain,

grid, etc. [Kemp & Tenenbaum (2008). The discovery of structural form. PNAS, 105(3), 10687-

10692]. Although this approach can learn intuitive organizations, including a tree for animals

and a ring for the color circle, it assumes a strong inductive bias that considers only these

particular forms, and each form is explicitly provided as initial knowledge. Here we introduce

a new computational model of how organizing structure can be discovered, utilizing a broad

hypothesis space with a preference for sparse connectivity. Given that the inductive bias is

more general, the model’s initial knowledge shows little qualitative resemblance to some of the

discoveries it supports. As a consequence, the model can also learn complex structures for

domains that lack intuitive description, as well as predict human property induction judgments

without explicit structural forms. By allowing form to emerge from sparsity, our approach

clariﬁes how both the richness and ﬂexibility of human conceptual organization can coexist.

∗This work was completed before N. Lawrence joined Amazon Research Cambridge.

1

1

Introduction

Structural discoveries play an important role in science and cognitive development (Carey, 2009;

Kuhn, 1962). In biology, Linnaeus realized that living things were best organized as a tree, displac-

ing the “great chain of being” used for centuries before. Modern chemistry began with Mendeleev’s

discovery of the periodic structure of elements. In cognitive development, children realize that the

days of the week form a cycle and that social networks form cliques. Children do not initially treat

comparative relations such as “longer than” as transitive, but they realize the unidimensional struc-

ture around age 7 or 8 (Inhelder & Piaget, 1964). While learning the names for objects, children

tend to learn just one name per object, but they must later discover that names can be organized

in a taxonomy (Markman, 1989). Yet, other forms of learning are not marked by clear structural

insights and transitions. Everyday forms of learning, such as a child acquiring facts about animals

and artifacts, have been characterized as accumulating correlations and gradually diﬀerentiating

concepts (Rogers & McClelland, 2004). What distinguishes more ordinary forms of learning from

genuine structural discoveries?

This distinction is not well understood computationally. In machine learning, many standard

algorithms learn only a single form of structure that is decided on in advance – whether it is learn-

ing clusters (e.g., k-means), trees (hierarchical clustering), or multidimensional spaces (principal

component analysis). It is usually up to the human practitioner, rather than the algorithms them-

selves, to decide which type of structure is most appropriate for the data. Other approaches such

as neural networks (deep learning; LeCun, Bengio, & Hinton, 2015) make very general represen-

tational assumptions and can model data with many diﬀerent structural characteristics. However,

the learned structure is only implicit in the connection weights, with no obvious mechanism for

diﬀerentiating between genuine structural discoveries from other forms of learning.

Previous work from our group investigated how the form of structure can be learned from data

and represented explicitly (Kemp & Tenenbaum, 2008). Structure selection can be formalized as

probabilistic inference over a set of discrete and mutually exclusive hypotheses such as rings (i),

grids (ii), trees (iii), chains (iv), etc. called structural forms (Fig. 1A). The forms are deﬁned by

grammatical constraints on the connections between entities; for example the ring form constrains

each node to have exactly two neighbors. This approach can learn intuitive structures for a variety

2

of domains, such as a tree for animals and a ring for the color circle. Once learned, these structures

can be used to explain human inductive reasoning about novel properties of objects (Kemp &

Tenenbaum, 2009).

Although powerful, the structural forms approach is not appropriate when the data strays

from the predeﬁned forms. Exceptions are common in real world domains. The genetic similarity

of animals is captured by an evolutionary tree1, but everyday reasoning about animals draws on

factors that span divergent branches, including shared habitat, role as predator versus prey, and size.

These factors cannot be perfectly explained by a single tree, and other domains are interestingly

structured yet even further removed from a pristine form, such as artifacts and social networks.

Since people can learn and reason in all of these domains, they must either entertain structural

hypotheses without strict grammatical constraints, or engage in other types of learning.

An alternative approach is to learn implicit rather than explicit structural organization. Rogers

and McClelland (2004) studied a neural network that learns to map animals (like canary) and

relations (can) to output attributes that a canary can do (grow, move, ﬂy, and sing). Like the

structural forms approach, the neural network learns aggregate statistical structure from the ob-

servations. Rogers and McClelland (2004) analyzed their network’s learned representation through

dimensionality reduction, projecting each living thing into a low-dimensional representational space.

In this space, the most salient split is between animals versus plants, with sub-divisions for mam-

mals versus birds, trees versus ﬂowers, etc. Although the network is not constrained or biased

to learn a tree, it nonetheless learns a distributed representation for living things that exhibits

hierarchical structure.

Although neural networks are powerful implicit learners, people also seem to learn and reason

with explicit structural representations. Kemp and Tenenbaum (2009) point out that language often

carries direct structural information such as “Indiana is next to Illinois” or “A dolphin is a mammal

not a ﬁsh,” observations that can be elegantly incorporated in more explicit representations. These

representations can also provide scaﬀolding for learning higher-level concepts with direct structural

interpretations, such as using a tree structure to help learn the world “primate” (Xu & Tenenbaum,

2007). Finally, it remains mysterious how implicit structure in a neural network might, in rare yet

1Even this structure has exceptions; for example, Rivera and Lake (2004) provide evidence that at the deepest

levels “the tree of life is actually a ring of life” where genomes fused.

3

pivotal moments in science and childhood, crystallize to create explicit structural discoveries.

Here, we present a new computational approach to structure learning and discovery that incor-

porates some of the best features of previous probabilistic and connectionist models. Rather than

selecting between discrete and mutually exclusive structural hypotheses deﬁned by grammars, the

model learns explicit structure in an unrestricted hypothesis space of all possible graphs. A key

insight is that many cognitively natural structural forms are very sparse, meaning that the graphs

have relatively few edges (connecting lines between the nodes). This observation is central to our

new approach, called structural sparsity, which is capable of rich structural inferences guided by a

preference for sparsity. Sparsity suggests an alternative means for learning pristine structural form

(Fig. 1A), albeit without explicitly identifying which form the structure belongs to (ring, tree, etc.

as in Kemp and Tenenbaum (2008)). This property of our approach has both appealing features

and drawbacks, depending on how we would like to interpret it as a cognitive model. We take up

these issues in detail in the discussion, at the end of the paper. Whether viewed as a strength

or weakness, the lack of an explicit representation of abstract structural forms does go hand in

hand with our models ability to explain how structure learning could proceed in domains, such as

artifacts, that may not conform to any simple, cognitively natural form (Fig. 1B).

We also use the comparison between structural sparsity and structural forms as an opportunity

to explore two diﬀerent types of inductive bias and their roles in supporting learning. For any

learning algorithm, it is instructive to compare the initial knowledge (before data) with the ﬁnal

knowledge (after data), as means of distinguishing what the model learns from what the model

starts with. For the structural forms model (Fig. 2 left), samples from the prior are already

highly structured graphs (rings, grids, trees, etc.), suggesting that the primary role of learning is

to select one of the provided forms, while simultaneously organizing the entities subject to the

corresponding grammatical constraints.

In contrast, for the structural sparsity model (Fig. 2

right), the model’s initial knowledge shows little qualitative resemblance to many of the structures

it discovers, resembling some of the representational leaps in science and cognitive development

(Carey, 2009). By comparing structural forms and structural sparsity on the same data sets – two

closely related models with diﬀerent inductive biases – we can distinguish between the cases where

a strong prior over forms is needed, from other cases where a more general bias towards sparsity

can lead to rich structural insight.

4

Figure 1: Structures that can be represented (A; i: ring, ii: grid, iii: tree, iv: chain), or cannot be
represented (B), by the structural forms of Kemp and Tenenbaum (Kemp & Tenenbaum, 2008).
All of the structures (A & B) are sparse, meaning they have relatively few edges (lines) between
the nodes. Sparsity is the foundation of the computational model introduced in this work.

2 Model

2.1 Structural sparsity

Bayesian learning underlies both the structural forms and structural sparsity models, which use

Bayes’ rule to reason about the distribution of structural hypotheses S in light of data D,

P (S

D)
|

∝

P (D

S)P (S).
|

Both models use a similar likelihood P (D

S) with diﬀerent priors P (S). The prior for the structural
|

forms model is a mixture of discrete forms F (such as rings, trees, grids, etc.), where P (S) =

(cid:80)

F P (S

|

F )P (F ). The initial knowledge P (S) reﬂects the fact that the forms are provided explicitly

and no other possibilities are entertained (Fig. 2 left). The prior for structural sparsity covers

a broader hypothesis space that includes all possible connectivity conﬁgurations (Fig. 2 right).

Sparsity is operationalized with an improper prior that decreases the score with each additional

edge in a structure

(1)

(2)

P (S)

exp(

β(#S)),

∝

−

5

Figure 2: Two models of structure discovery: (left) structural forms (Kemp & Tenenbaum, 2008)
and (right) structural sparsity (this work). Bayesian learning of structure from data D involves an
update from prior P (S) to posterior P (S
D). Given a matrix of animals and their features, the
|
two models learned similar structures despite the substantial diﬀerence in initial knowledge (prior).
In the visualizations, stronger edges are shorter, except for the dotted lines that are edges that lie
outside the strongest spanning tree.

6

where #S is the number of edges in a structure. In both models, objects are assigned to latent

clusters, known as cluster nodes (Kemp & Tenenbaum, 2008) (gray nodes in Fig. 2). Cluster nodes

can connect to other cluster nodes in arbitrary patterns, but each object must connect to exactly

one cluster node. By using cluster nodes, groups of similar objects can be elegantly represented

without dense object to object connections, leading to sparser graphs that highlight the underlying

topology. Besides the cluster assignments, objects do not form any other direct connections, unlike

an earlier version of our model without cluster nodes (Lake & Tenenbaum, 2010). Given that the

number of edges typically grows with the number of clusters (and clusters must be non-empty), the

structural sparsity prior tends to favor both fewer edges and fewer clusters.

The term P (D

S) speciﬁes the link between the graph structure and the features of objects.
|

The data D =

f (1), ..., f (m)

is a matrix where rows are objects and columns are features f (i).

{

}

For instance, we used a data set of 33 animals and 102 features, where the ﬁrst ﬁve features were

“has lungs,” “has a large brain,” “has a spinal cord,” “is warm-blooded,” and “has teeth” (Fig.

2 top). The distribution P (D

S) treats features as independent draws from a
|
distribution that prefers smoothness, meaning objects tend to share similar feature values with

|

S) = (cid:81)m

i=1 P (f (i)

their neighbors in the graph. For example, all the features shown in Fig. 2 are relatively smooth

(except for a hypothetical f (102∗) which is highly non-smooth) over the graphs that represent

animals (Fig. 2 bottom). An edge between node i and j is parameterized by a continuous value

sij > 0 that determines its strength, and absent edges have sij = 0. The graph as a whole

speciﬁes the covariance matrix of a multivariate Gaussian distribution with one dimension per

node (Appendix 8.1). Although P (D

S) is best suited for continuous features, binary data can be
|

treated as continuous (Kemp & Tenenbaum, 2008). Data in the form of a similarity matrix can

also be accommodated by treating the matrix as the covariance matrix of a multivariate Gaussian,

and then sampling an input data matrix D from that Gaussian (we used m = 2000 features).

As in the structural forms model, we are interested in the single best structure given the data.

For structural sparsity, taking the log of the posterior probability (Eq. 1) leads to the optimization

problem

argmax
S

log P (f (i)

S)
|

−

β(#S),

m
(cid:88)

i=1

(3)

which emphasizes the dual objectives of capturing regularities in the features (left term) while

7

promoting the sparsity of the structure (right term). The parameter β, which is the only free

parameter in the model, controls the trade-oﬀ between the two objectives. The value β = 6 was

used for most of the simulations in this paper. For large data sets with many objects, a larger value

leads to more interpretable structural discoveries (β = 18 was used in two cases). Beyond these

guidelines, we do not know if there is a completely general procedure for setting β to facilitate

interpretable structural discoveries, and this is a limitation of our work currently.

2.2 Search algorithm

Searching for the maximum of this score (Eq. 3) is a special case of learning the structure of an

undirected graphical model, a generally intractable problem that requires heuristic algorithms not

guaranteed to reach the global optimum (Koller & Friedman, 2009). Here we describe the heuristic

search algorithm developed for solving this problem. At its core, structural sparsity is a proposal

for the computational level problem (Marr, 1982) of structure discovery, and thus the particular

search algorithm we used was not intended to be cognitively plausible.

Our search algorithm consists of an outer-routine that looks for the best partition of objects

into cluster nodes, as well as a sub-routine that evaluates a candidate partition by optimizing for

the best set of edges. The outer-routine tries local proposals for splitting and merging clusters

and greedily picks the best move at each step (Kemp & Tenenbaum, 2008). Although searching

over partitions can be challenging, it can be sped up greatly by a preprocessing stage that clusters

objects several times, with diﬀerent numbers of clusters, and picks the best scoring option for

initialization.

The sub-routine has the challenging task of estimating the sparse connectivity between clus-

ters, necessary for evaluating partition quality during both initialization and local search. Directly

searching the combinatorial space of sparsity patterns is intractable, but there are well-known

heuristics such as (cid:96)1 that push parameters to zero (sij = 0) and consequently propose a sparsity

pattern (Tibshirani, 1996). The (cid:96)1 relaxation penalizes the sum rather than the number of param-

eters #S

sij

for some constant λ. Learning a Gaussian graph with (cid:96)1 penalization from a

λ (cid:80)

≈

ij |

|

complete data matrix is a convex optimization problem that can be solved eﬃciently (Banerjee, El

Ghaoui, & D’Aspremont, 2008; Lake & Tenenbaum, 2010). Although our connectivity estimation

problem is not convex due to the latent nodes and missing data, eﬃcient solvers for the complete

8

data case are utilized in a Structural Expectation-Maximization algorithm guaranteed to improve

the primary objective in Eq. 3 with each iteration (Friedman, 1997).

The Appendix (Section 8) contains a more detailed description of the entire search algorithm.

Although search can be slow, it considers the full range structures, unlike the implementation of

structural forms that runs a separate search for each form (Kemp & Tenenbaum, 2008). Code for

running the model is available online.2

3 Discovering structure in synthetic data

The algorithm was evaluated on its ability to recover the true topology of synthetic data. Given

that objects can cluster in a variety of patterns atop these forms, the challenge of jointly ﬁnding

the right cluster partition and the right sparsity pattern results in a very diﬃcult combinatorial

search problem. Structural sparsity was tested on both its ability to recover structural forms (Fig.

1A) as well as novel structures that share interesting features with the forms, but not the pristine

qualities necessary for identiﬁcation with the Kemp and Tenenbaum (2008) approach (Fig. 1B).

These new structures include a tree embedded in a ring (i), a non-grid planar graph (ii), a ring of

trees (iii), and multiple disconnected forms including disjoint chains (iv; Fig. 1B).

The synthetic experiments were structured as follows. For each candidate synthetic structure,

1000 features were generated from the ground truth graph and provided to the model. The sparsity

free parameter was set to β = 6. Given that the algorithm is non-deterministic, the search process

was repeated 10 times for each synthetic data set. Each run of the search algorithm is compared

to the ground truth.

The structures in the ﬁrst set of experiments had exactly one object per cluster node (Fig.

3A). This clustering pattern is easier for the search algorithm to ﬁnd compared to an arbitrary

clustering, in part because it is automatically examined as a candidate pattern for initialization.

Thus, this helps to isolate the challenge of ﬁnding the right sparsity pattern from the problem

of ﬁnding the right clustering. The results of search are shown Table 1. In each case, algorithm

recovers a structure that scores (Eq. 3) at least as well as the original structure (Table 1 Column

1, score match).3 For all cases except the chain, the highest scoring structure recovered the right

2https://github.com/brendenlake/structural-sparsity
3Structures are counted as correct if they are within 4 log points of the ground truth, so that an extra edge will

9

Figure 3: Synthetic data sets were generated from structures with one object per cluster node (A)
and arbitrary clusters of objects on the underlying structure (B).

10

partition of objects into cluster nodes (Table 1 Column 2, partition match), and furthermore the

structure matched the adjacency matrix up to a permutation of the cluster node indices (Table 1

Column 3, exact match). There is straightforward reason why the chain structure was not recovered

exactly. To increase sparsity, the model tended to combine the last two objects on each end of the

chain into a single cluster, using a weaker connection to the object at the end of the chain. This

conﬁguration retains the correct relations while increasing sparsity, and thus the learned structure

scores higher than the original graph.4

The structures in the second set of experiments had richer clustering patterns on the same

graphs, as well as others like clusters, a tree, a peace sign, disjoint chains, a ring of trees, and a

plane (Fig. 3B). The results are shown in Table 2. The clusters, ring, tree, and ring of trees were

perfectly recovered for each run. Like in the singleton case, the algorithm always conserved edges

on the ends of the chain structure and disjoint chains structure. Mistakes occurred on 1 run of

the grid, 2 runs of the peace graph, 1 run of the plane, and all of these were unnecessary cluster

node splits that did not alter the underlying topology. For several runs of the plane structure, the

model recovered an alternative graph that diﬀered in the location of one edge, and it also scored

roughly as well as the ground truth. On the whole, our search algorithm was highly successful at

recovering ground truth structure from synthetic data.

Score match Partition match Exact match
10
0
10
10

10
10
10
10

10
0
10
10

Ring
Chain
Grid
Peace

Table 1: Synthetic experiments with singleton cluster nodes (Fig. 3A). Entries show the number
of successes out of 10 runs of the search algorithm.

4 Discovering structure in empirical data

Structural sparsity was applied to six empirical data sets. To facilitate comparison with the struc-

tural forms approach, four data sets from Kemp and Tenenbaum (2008) were included. The search

algorithm was run ten times for each data set and the highest scoring structure is displayed. The

be counted as an error (-6 log points).

4This reduction also occurred in the original structural forms model, in order to use fewer cluster nodes.

11

Clusters
Ring
Chain
Tree
Grid
Peace
Disjoint
chains
Ring
of trees
Plane

Score match Partition match Exact match
10
10
0
10
9
8
0

10
10
0
10
9
8
0

10
10
10
10
9
8
10

10

9

10

9

10

3

Table 2: Synthetic experiments with multi-object cluster nodes (Fig. 3B). Entries show the number
of successes out of 10 runs of the search algorithm.

sparsity prior was ﬁxed at β = 6. In each case, the output of the structural forms model is displayed

for comparison. The data sets were rescaled following the procedure of Kemp and Tenenbaum

(2008).5

4.1 Animals

The ﬁrst data contains a set of 33 animals with 102 features related to biology, anatomy, and habitat

(collected by Kemp & Tenenbaum, 2008). Biological features included those like “has lungs” and

“is warm-blooded,” anatomical features included “has ﬁns” and “has a long neck,” and perceptual

features included “is black.” Habitat features often highlight non-biological similarity, like the fact

that ﬁsh and the aquatic mammals “live in the ocean.”

The learned structures are shown in Fig. 2. Although structural forms learned a tree, structural

sparsity learned a graph with a tree-based backbone that primarily reﬂects biology, with branches

for the insects, ﬁsh, birds, and mammals. Structural sparsity can also capture relationships that

reach across the tree. The aquatic mammals are situated with the ﬁsh, penguin, and other mam-

mals, representing both biology, shared habitat, and visual similarity. The tree-based structural

form better reﬂects evolutionary branching, where objects must lie at the leaf nodes. Trees such

as this are not considered by structural sparsity, since allowing empty cluster nodes would make

search much more diﬃcult. But these form-based latent trees are not necessarily highly sparse, and

5Each data matrix D (nx objects by m features) was linearly transformed so the mean across the entire matrix is
m DDT is 1. If there are missing values, the features with the most common pattern of

0 and the largest element in 1
missing objects are grouped, and the transform is computed for this sub-matrix and applied to the full matrix.

12

Figure 4: Structures learned by structural forms (left) and sparsity (right) for a vote matrix from
13 Supreme Court justices (A), similarity judgments between spectral colors (B), and Euclidean
distance between images of faces (C). To visualize the spatial structure, node locations were chosen
to be the principal eigenvectors of the implied covariance matrices (see Lawrence, 2011, 2012). Only
one dimension is shown in (A), and dotted lines are edges that do not follow a rigid linear order.

13

here structural sparsity found about half as many non-attachment edges.

4.2 Judges

The second data set included 13 Supreme Court justices and their votes on 1,596 cases, collected and

preprocessed by Kemp and Tenenbaum (2008) to include 1596 cases under Chief Justice Rehnquist.

Due to non-participation and the fact that at most 9 justices serve at a time, there were many

missing values. We integrated over the missing values while computing the model score.

The learned structures are shown in Fig. 4A. Both models organized the justices along a

spectrum from liberal (Marshall and Brennan) to conservative (Scalia and Thomas). Although

structural forms is constrained to learn exactly a chain, structural sparsity learned a similar chain

with a few additional relationships between the conservatives (two additional dotted edges and one

gap).

4.3 Colors

The next data set includes perceived similarity ratings between 14 spectral colors. Originally

collected by Ekman (1954), the similarity matrix was published in Shepard (1980) and used in

Kemp and Tenenbaum (2008), while assuming a value of 1 along the diagonal. Provided with this

data, the structural sparsity model discovered the color circle ﬁrst described by Newton (Fig. 4B).

Although the ring topology was pre-speciﬁed in the forms model, it is an emergent consequence of

the data combined with structural sparsity.

4.4 Faces

Another data set is based on pixel similarity between images of faces that vary along a masculinity

and a race dimension. This similarity data set was created by Kemp and Tenenbaum (2008).

The faces vary in two dimensions, race and gender, with four values along each. The similarity

matrix between faces is based on the Euclidean distance in pixel space, with 1 along the diagonal.

Structural sparsity recovered these two dimensions, although it deviates from a strict grid (Fig.

4C).

14

Figure 5: Sparse structures learned from two data sets: US Senators and their votes in the 111th
congress (A), and 200 objects and their features with broad semantic coverage (B). In (A), shorter
edges are stronger, but in (B) all edges are shown at approximately the same length for visual
clarity. Some coherent sub-regions are shaded and labeled for easier interpretation; these are not
labels provided to the unsupervised learning algorithm.

15

4.5 Senate

Structural sparsity can also be applied to domains that have a rich organization but do not ﬁt a

cognitively natural structural form. We used a data set of Senators and their voting records was

for the 111th United States Congress, from January 2009 to January 2011.6 Voting present or not

voting was treated as missing data. Only senators that were present for at least half the votes

were included, resulting in 98 Senators and 696 votes. Due to the size of this data set (and the

following), the sparsity parameter was increased to β = 18 to aid interpretability. To maintain

tractability, search was also modiﬁed to be less thorough, as described in Appendix 8.3.

Given the voting records, the model recovered the central divide between Democrats and Re-

publicans, bridged only by a connection between moderate Democrat Ben Nelson and Republicans

Olympia Snowe and Susan Collins (Fig. 5A). Although structural forms might capture the party

distinction along a line or with clusters, structural sparsity suggests that the complex within-party

dynamics are not naturally represented by any one of the pristine forms.

4.6 Common objects

Structural sparsity was also applied to 200 common objects with broad semantic coverage across

artifacts and living things (Palatucci, Pomerleau, Hinton, & Mitchell, 2009). Each object was

rated according to 218 properties, including questions like “Is it manmade?”, “Can you hold it?”,

and “Does it have feet?” Answers were on a 5 point scale from “deﬁnitely no” to “deﬁnitely yes”

conducted on Amazon Turk. Using a conservative threshold for indicating the presence of a feature,

the data set was converted to binary form by coding only the most conﬁdent response as 1 and the

rest as 0. The original data set contained 1000 objects, and a subset of 200 objects was randomly

selected for tractability.

Given the object and feature data, structural sparsity learns a complex structure with sub-

regions for artifacts, animals, food and drinks, natural objects and events, and places (Fig. 5B).

Edges instantiate a notion of aggregate semantic relatedness, resembling classical proposals for

semantic networks (Collins & Loftus, 1975). Although the data set is prohibitively large for com-

parison with the structural forms algorithm, it would likely miss much of the ﬁne-grained structure

6The votes were retrieved from http://www.voteview.com/house111.htm. The various yes votes (1,2,3) and no

votes (4,5,6) were collapsed to yes (1) or no (0).

16

in an attempt to ﬁt the objects into one of the pre-conceived forms.

5 Property induction

Structural sparsity, in addition to revealing organizing form, can be used to predict how people

reason about novel properties. First, structures were learned to represent two data sets, one for

mammals and one for cities. Second, the learned structures were used to make predictions about

how people reason in a property induction task.

Inductive questions looked like the following: given that a new biological property is true of

dolphins, squirrels, and chimpanzees, how likely is it true of all mammals? (Heit, 1998, 2000; Kemp

& Tenenbaum, 2009; Osherson, Smith, Wilkie, Lopez, & Shaﬁr, 1990; Rips, 1975). Earlier work

using the structural forms approach found an interesting double dissociation (Kemp & Tenenbaum,

2009): people’s ratings of argument strength for mammals were better predicted by a tree than a

continuous 2D space, while analogous ratings regarding geographical properties of cities were better

predicted by a 2D space than a tree. Here, we investigated whether structural sparsity can capture

both patterns of reasoning without requiring special purpose structural forms.

5.1 Data sets for structure learning

The mammals data set consists of 50 mammals and 85 features (properties), primarily collected by

Osherson, Stern, Wilkie, Stob, and Smith (1991) and extended in Kemp and Tenenbaum (2009).

The features contain biological, anatomical, behavioral, and habitat properties (“is gray”, “has

tough skin”, “big”, “swims”, “lives in water”). Features were collected by asking participants to

rate the strength of association between each animal and feature, starting at zero and imposing no

upper bound. Ratings were scaled between 0 and 100 and then averaged across participants.

The cities data set is a similarity matrix of 9 US cities collected by Kemp and Tenenbaum

(2009). Participants were asked to draw the locations of the 9 cities on a piece of paper, ensuring

that the relative distances were as accurate as possible. The distances for each participant were

scaled so that the largest distance was 1, and then each value was subtracted from 1 to create a

measure of spatial similarity. The matrix was averaged across participants and then provided as

input to the models.

17

5.2 Models for structure learning

Four alternative models were trained on the two base data sets: structural sparsity, a tree structural

form, a 2D spatial model, and the raw covariance matrix. For each of the models, the product of

learning is a multivariate Gaussian distribution with one dimension per object. Each multivariate

Gaussian parameterizes a joint distribution on new object properties, which can be used to make

Bayesian predictions regarding the strength of inductive arguments. All inductive arguments use

new (generic) properties that were not features in the data set used for structure learning.

•

•

•

Structural sparsity. Structural sparsity represents a Gaussian by a sparse graph (Section

8.1). The structural sparsity model has one free parameter β, which controls the degree of

sparsity in the learned structure. The model was run using a range of diﬀerent sparsity values,

and the ﬁt to the human property induction judgments were reported for each value. For

each value of β, the search algorithm was run twice for mammals and cities, and the highest

scoring structure (based on the score in Equation 3, not correlation with human participants)

was chosen to represent that value of sparsity. Examples of learned structures for mammals

are shown in Fig. 7A & D and for cities in Fig. 6B-i.

Tree-based structural form. For both data sets, we assumed a tree-based form and

searched for the best tree using the algorithm from Kemp and Tenenbaum (2009). The

learned structures are shown in Fig. 7B and Fig. 6B-ii. Given that the transformation from

a graph to a Gaussian diﬀers in some minor ways between structural forms and structural

sparsity, we relearned the edge strengths for the tree using maximum likelihood and the graph

formalism from structural sparsity. However, re-learning the edge weights did little to change

the predictive performance on the property induction tasks.

2D spatial form. For both data sets, we assumed a 2D spatial form and searched for the

best spatial representation using the algorithm from Kemp and Tenenbaum (2009) to compare

with the graph-based methods. The learned representational spaces shown in Fig. 7C and

Fig. 6B-iii. This model represents a covariance matrix Σ using distances in a 2D space

Σij =

exp(

1
2π

1
σ ||

−

xi

xj

),

||

−

(4)

18

where xi is the 2D location of object i and

xi

is the Euclidean distance between two

||

−

xj

||

objects.

•

Raw covariance. The raw covariance model was either identical to the similarity matrix or

Σ = 1

m DDT where D is the rescaled feature matrix.

5.3 Data sets for property induction

The property induction data concerning mammals, including the Osherson horse and Osherson

mammals tasks, was reported in Osherson et al. (1990). Judgments concerned 10 species: horse,

cow, chimp, gorilla, mouse, squirrel, dolphin, seal, and rhino. Participants were shown arguments of

the form “Cows and chimps require biotin for hemoglobin synthesis. Therefore, horses require biotin

for hemoglobin synthesis.” The Osherson horse set contains 36 two-premise arguments with the

conclusion “horse,” and the mammals set contains 45 three-premise arguments with the conclusion

“all mammals.” Participants ranked each set of arguments in increasing strength by sorting cards.

The induction task concerning cities was conducted by Kemp and Tenenbaum (2009). Partic-

ipants were presented a scenario where Native American artifacts can be found under most large

cities, and some kinds of artifacts are found under just one city while others are under a handful of

cities. An example inductive argument is: “Artifacts of type X are found under Seattle and Boston.

Therefore, artifacts of type X are found under Minneapolis.” There were 28 two-premise arguments

with Minneapolis as the conclusion, 28 with Houston as the conclusion, and 30 three-premise argu-

ments with “all large American cities” as the conclusion. These arguments were ranked for strength

by sorting cards, in a method intended to mimic the Osherson tasks.

5.4 Bayesian property induction

We used a Bayesian model of property induction that takes a structured representation (sparse

graph, tree, space, or raw covariance) and uses it to make predictions in the property induction tasks

(Kemp & Tenenbaum, 2009) (see also Heit, 1998). We refer the reader to Kemp and Tenenbaum

(2009) for a fuller treatment, but the basics are described here.

Inductive arguments involve questions of the form: Objects X have property f , therefore, how

likely is it that objects Y have property f ? The ﬁrst set of objects X are the premise categories,

19

and the second set Y is the conclusion category. The argument concerns a new feature f which is

observed on the set fX to be equal to the label lX (here lX = [1, 1, 1] since all the premise objects

have this property). With this notation, the strength of an inductive argument can be modeled as

the probability the property is true for the conclusion fY = 1 given the premise labels fX = lX , or

(5)

(6)

(7)

where the posterior P (f

fX = lX ) is the distribution on full instantiations of the binary feature
|

vector f , given the labeled premises. This distribution can be computed by Bayes’ rule

fX = lX ) =
P (fY = 1
|

P (f

fX = lX ),
|

(cid:88)

f :fY =1

P (f

fX = lX ) =
|

(cid:80)

f )P (f )
P (fX = lX
|
f P (fX = lX

f )P (f )
|

.

The likelihood P (fX = lX

1 if the label is consistent with the feature, and otherwise it is

f )
|

∝

0. The prior distribution P (f ) is instantiated by each of the diﬀerent models. It follows that the

strength of the inductive argument can be computed as

P (fY = 1
|

fX = lX ) =

(cid:80)

f :fY =1,fX =lX
(cid:80)

f :fX =lX

P (f )

P (f )

.

Intuitively, this is the weighted fraction of features consistent with the premises and conclusion,

compared to those consistent with just the premises. Each feature is weighted by its prior prob-

ability P (f ). Given that each model speciﬁes a Gaussian distribution on features rather than

a distribution on binary features, this prior P (f ) was approximated by a large number (106) of

continuous Gaussian samples, thresholded at the mean (0) to create binary features.

5.5 Results

The models were evaluated on their ability to predict argument strength as evaluated by partici-

pants. Predictive performance was evaluated as the Pearson correlation between people’s rankings

and the models’ evaluation of argument strength. The structural sparsity predictions using β = 8

for mammals and β = 4 for cities are highlighted in Fig. 6 and compared with the other models.

For mammals, structural sparsity predicted human ratings about as well as the tree form (Fig.

6A-iv). For cities, structural sparsity ﬁt much better than a tree and somewhat worse than a 2D

20

Figure 6: Comparing models and human responses regarding property induction for mammals (A)
and cities (B). A dot in (iv) is an inductive argument; for instance, the bottom-left dot for the
“Osherson horse” data set is the argument “dolphins and seals have this property, therefore horses
do.” Each dot represents a diﬀerent set of premises, followed by the conclusion category labeled
on the x-axis (horse, all mammals, Minneapolis, Houston, or all cities). Argument strength for
the models (x-axis) is plotted against mean rank of strength across participants (y-axis), with the
correlation coeﬃcient r shown above. Predictions were compared for diﬀerent types of structures,
including those learned with structural sparsity (i), trees (ii), and 2D spaces (iii). The arguments
about mammals mention only the 10 mammals shown in (A), although predictions were made by
using the full structures learned for 50 mammals. Here only the subtrees (or space) that contains
the pairwise paths between these 10 mammals are shown.

space (Fig. 6B-iv). The raw covariance model ﬁt particularly well for cities, since the similarity

data was already based on 2D drawings, but did not ﬁt as well for the mammals data sets.

It is noteworthy that while structural forms assumes diﬀerent forms for the two domains, struc-

tural sparsity provides comparable ﬁts with a more general inductive bias, suggesting that domain-

tailored forms may not be necessaryto explain these judgments. Structural sparsity ﬁt well across

the range of values of its sparsity parameter (Table 3), and that these diﬀerent sparsity settings

result in qualitatively diﬀerent structures for the mammals. For low sparsity (β = 1, Fig. 7D), the

model groups similar mammals together, but it is otherwise diﬃcult to interpret. For higher sparsity

(β = 8, Fig. 7A), the structure closely mimics the tree-based structural form (Fig. 7B). Structural

sparsity can predict the human judgments using either structure, indicating that a pristine tree is

suﬃcient, but not necessary, to explain the human judgments.7

7Similar results were obtained by learning sparse graphs without latent cluster variables in Lake and Tenenbaum

(2010).

21

Figure 7: Learned structures to represent the mammals data set. Structural sparsity with β = 8
(A), tree-based structural form (B), 2D spatial structural form (C), and structural sparsity with
β = 1 (D). Stronger edges are displayed as shorter.

β Osherson Osherson Minneapolis Houston All
cities
0.71
0.71
0.71
0.68
0.68

mammals
0.87
0.86
0.84
0.89
0.91

horse
0.94
0.95
0.93
0.91
0.89

0.59
0.58
0.61
0.51
0.51

0.70
0.70
0.70
0.69
0.69

1
2
4
6
8

Table 3: Correlations between how people and the structural sparsity model judge inductive
strength, for several tasks concerning mammals and cities. Rows of the table indicate diﬀerent
values of the sparsity parameter β.

22

6 General Discussion

As illustrated across a range of data sets, structural sparsity can discover qualitatively diﬀerent

organizing structures. Rather than predeﬁning a set of forms from which it selects, the model

considers a continuum of hypotheses with a simplicity bias towards sparsity. Despite this weaker

inductive bias, the model can nevertheless recover distinct structures such as trees, rings, and

chains for tightly organized domains. Unlike the structural forms model (Kemp & Tenenbaum,

2008), structural sparsity can learn exceptions to forms which often carry important semantic

meaning. If a given domain is more loosely organized, such as artifacts, the model learns a complex

organization that does not ﬁt an easily recognizable form. Once a domain structure is learned, it

can also be used to predict the extension of novel properties. Where previous work showed a double

dissociation between a tree and a 2D form for matching people’s inferences about animals and cities

(Kemp & Tenenbaum, 2009), structural sparsity can learn diﬀerent types of representations that

support diﬀerent patterns of prediction.

Structural sparsity is related to machine learning approaches for dimensionality reduction and

feature prediction that typically operate in more restricted settings. Some algorithms for non-

linear dimensionality reduction can be interpreted as using the same graphs and likelihood model

as structural sparsity (Lawrence, 2011, 2012). But these algorithms do not have latent clusters

and commonly use a ﬁxed graph created by adjoining nearby objects. There are also eﬃcient

algorithms for learning sparse networks or sparse Gaussian graphical models, either without latent

variables (Banerjee et al., 2008; Hutchinson, 1989; Lake & Tenenbaum, 2010; Schvaneveldt, Durso, &

Dearholt, 1989) or without fully recovering a latent topology (Chandrasekaran, Sanghavi, Parrilo,

& Willsky, 2011). Other algorithms learn trees with latent variables (Choi, Chandrasekaran, &

Willsky, 2010; Choi, Tan, Anandkumar, & Willsky, 2011) or jointly learn two graphs – one for

objects and one for features – although without latent variables (Kalaitzis, Laﬀerty, & Lawrence,

2013). Although these algorithms are computationally eﬃcient and successful in the settings they

consider, they do not attempt to explain how people can learn diﬀerent types of organizing structure

for diﬀerent domains. Structural forms showed how the type of structure can be learned by discrete

selection, and here we showed that diﬀerent forms can arise through a general bias towards sparsity.

Structural sparsity also brings a new perspective to an old debate in cognitive science between

23

symbolic (Griﬃths, Chater, Kemp, Perfors, & Tenenbaum, 2010) versus emergent (McClelland et

al., 2010) approaches to knowledge representation. The symbolic tradition uses classic knowledge

structures including graphs, grammars, and logic, viewing these representations as the most nat-

ural route towards the richness of thought (Griﬃths et al., 2010; Tenenbaum, Kemp, Griﬃths, &

Goodman, 2011). The competing emergent tradition views these structures as epiphenomena: they

are approximate characterizations that do not play an active cognitive role.

Instead, cognition

emerges as the cooperant consequence of simpler processes, often operating over vector spaces and

distributed representations (McClelland, 2010; McClelland et al., 2010). This debate has been par-

ticularly lively with regards to conceptual organization, the domain studied here. The structural

forms model (Kemp & Tenenbaum, 2008) has been criticized by the emergent camp for lacking

the necessary ﬂexibility for many real domains, which often stray from pristine forms (McClelland

et al., 2010). The importance of ﬂexibility has motivated emergent alternatives, such as a con-

nectionist network that maps animals and relations on the input side to attributes on the output

side (Rogers & McClelland, 2004). As this model learns, an implicit tree structure emerges in its

distributed representations. But those favoring explicit structure have pointed to diﬃculties:

it

becomes hard to incorporate data with direct structural implications like “A dolphin is not a ﬁsh

although it looks like one” (Kemp & Tenenbaum, 2009), and latent objects in the structure support

the acquisition of superordinate classes such as “primate” or “mammal” (Xu & Tenenbaum, 2007).

Structural sparsity shows how these seemingly incompatible desiderata could be satisﬁed within a

single approach, and how rich and ﬂexible structure can emerge from a preference for sparsity.

Although the structural sparsity model was formulated at Marr’s computational level (Marr,

1982), any complete understanding must also extend to the algorithmic and implementation levels.

Explaining how this model, and other models at the computational level, could be approximated

by neural circuits is an important challenge that we do not address in this work. Nevertheless, we

ﬁnd it intriguing that sparsity is a general principle with broad application in both neuroscience

and cognitive science, whether used to describe synaptic connectivity (Fares & Stepanyants, 2009;

Kalisman, Silberberg, & Markram, 2005), neural activation (Olshausen & Field, 1996), or envi-

ronmental structure (Navarro & Perfors, 2011; Oaksford & Chater, 1994). We think it is worth

exploring these connections with the aim of building bridges across Marr’s levels.

A ﬁnal puzzle is to understand how a more explicit notion of structural form might arise. For

24

some domains, there may be no suitable form to characterize the learned outcome of structural

sparsity (e.g., Fig. 5B), but for other domains, the learned structure can approximate the pristine

output of a graph grammar. As the model currently stands, form is not explicitly identiﬁed with

a label (“ring,” “tree,” etc.), although such a label might be necessary for genuine “conceptual

change” (Carey, 2009). An explicit structural form may also serve as a basis for analogy between

domains, as a hypothesis about causal structure within a domain, or as a vehicle for easier communi-

cation of larger domain structure (“left” or “right” in a chain and “clockwise” or “counterclockwise”

in a ring). Somehow the mind can grasp structure at this level of intuitive description, without

placing the bounds of learning around a small set of forms.

How can both explicit form and ﬂexibility be captured in a single computational approach, and

can we extend the work developed here in this direction? One possibility is to extend the approach of

Kemp and Tenenbaum (2008) to achieve greater ﬂexibility by allowing exceptions to the grammar-

based forms. As an alternative to top-down search, in the spirit of the work presented here, form

recognition could proceed from the bottom-up by ﬁrst learning a sparse representation, and then

by analyzing it to see if one or more forms ﬁt suﬃciently well. For cases such as the color circle

where the sparse graph exactly instantiates a form (Fig. 4B), form could be identiﬁed by simply

checking the grammatical deﬁnition of that form (see sketch of such a mechanism in Fig. 8). For

example, a ring could be identiﬁed as any connected graph with two edges per node. In fact, there

is behavioral support for a related mechanism: people seem to be capable of identifying the abstract

form of sparse relational graphs, when the edges are presented sequentially as social interactions

(Kemp, 2007; Kemp, Goodman, & Tenenbaum, 2008). Recognizing forms with exceptions (a tree

with cross-branch relations) or forms with more complex structures (“a ring of trees” or “a tree

in a ring”, Fig. 1B) may require probabilistic inference over a more sophisticated description

language, such as probabilistic predicate logic (Richardson & Domingos, 2006) or probabilistic

programs (Goodman, Mansinghka, Roy, Bonawitz, & Tenenbaum, 2008). In any case, if sparsity

is as powerful as our results suggest, this additional mechanism may provide a relatively modest

step in facilitating the rare yet pivotal conceptual leaps in science and development. A criterion for

judging any model of learning is how much richness is gained from initial knowledge to acquired

knowledge. By this measure, sparsity could play the primary theoretical role in a larger explanation

of qualitative structural change.

25

4.

Logical law
1.
2.
3.

x
x
x

∀
∃
∀

∀

∀
∀

∧

¬

y
R(x, y)
∀
!y R(x, y)
∃
y R(x, y)
∀
= y
!z[z
→ ∃
y R(x, y)
x
∀
!z[z
(
→
∃
z[z
∨ ¬∃
x
y T (x, y)
∀
y
z [R(x, y)
x
∀
∀
= z]
y
∧

= y
= y

→ ¬

5.
6.

R(x, z)]

R(x, z)]
R(x, z)])

∧
∧

∧
T\x(y, z)

Interpretation
No edges between cluster nodes.
At least one cluster node has just one edge.
Exactly 2 edges per cluster node.

Exactly 1 or 2 edges per cluster node.

At least one path between cluster nodes.

R(x, z) There are no cycles.

Figure 8: Sketch of an additional mechanism for identifying structural form by analyzing the output
of the structural sparsity model (inspired by Kemp et al., 2008). Forms are deﬁned as conjunctions
of laws that operate on the graph output: “Clusters” : Law 1; “Chain” : 2, 4 and 5; “Ring” : 3 and
5; “Tree” : 5 and 6. By applying these rules, the process can identify structural sparsity’s output
on the color circle as a ring (Fig. 4B) and on mammals as a tree (Fig. 7A). The relation R(
)
·
indicates that two cluster nodes share an edge. Since edges are undirected, there is an implicit
law of symmetry. The quantiﬁers are “for all” (
), and the non-standard “there
) on the set of all
exists exactly one” (
·
objects excluding x.

∀
,
) is the transitive closure of R(
·
·

!). The predicate T\x(

), “there exists” (

,
·

,
·

∃

∃

7 Acknowledgments

We thank Intel Labs for providing the data set of 200 objects and Venkat Chandrasekaran for

helpful discussions. This work was supported by a NSF Graduate Research Fellowship to B.M.L;

the Center for Brains, Minds, and Machines funded by NSF Science and Technology Center award

CCF-1231216; and the Moore-Sloan Data Science Environment at NYU.

8 Appendix

8.1 Generating data from structure

A data set is a matrix D =

f (1), ..., f (m)

(D

Rnx×m), where the rows correspond to objects and

{

}

∈

the columns are features f (i). A data set is generated by a structure, parameterized by a symmetric

matrix S

Rnt×nt. Each row/column in S corresponds to a node in the graph. The set of object

∈

nodes is called X and cluster nodes is called Z, where nx and nz are their cardinalities, combining

for a total of nt = nx + nz nodes in the graph.

A key property of the structural sparsity model is that S is sparse, meaning that most of its

26

entries are equal to zero (sij = 0). For the remainder, their values are positive (sij = sji > 0). The

sparsity pattern deﬁnes the adjacency matrix of the undirected graph, where a non-zero value for

sij means that nodes i and j share an edge. Given that each object node x

X connects to only

∈

one cluster node, then sxz > 0 for exactly one z

Z. There are no self-edges, so the diagonal of S

is also zero.

Following Zhu, Laﬀerty, and Ghahramani (2003) and the setup for the structural forms model

(Kemp & Tenenbaum, 2008), we introduce the graph Laplacian ∆. Its oﬀ-diagonal elements are

given by

S and its diagonal elements are

−

(cid:88)

∆ii =

sij.

A generative model for features can then be written as

P (f (k)

S)
|

∝

exp

)2(cid:17)

(k)
f
j

(cid:16)

(cid:16)

−

−

(cid:88)

i,j

sij(f

(k)
i −
f (k)(cid:62)∆f (k)(cid:17)

.

= exp

This equation highlights why the model favors features that are smooth across the graph. Features

are probable when connected objects i and j (sij > 0) have a similar value. The stronger the

connection sij (meaning the larger its value), the more important it is for the feature values to

match. As pointed out in Zhu et al. (2003), this distribution is not proper, since adding a constant

value to the feature vector does not change its probability. Therefore following Zhu et al. (2003),

we deﬁne the matrix J = ∆ + 1

σ2 I and use

P (f (k)

S, σ2)

exp

|

∝

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

,

(8)

which results in a proper density. This distribution is an nt dimensional Gaussian with zero mean

P (f (k)

S, σ2) = N
|

(cid:16)

0, J −1(cid:17)
f (k)
|
1
(2π)nt/2

J
|

|

=

−1/2 exp

(cid:16)

1
2

−

f (k)(cid:62)Jf (k)(cid:17)

.

∈

j

1
4

1
2

27

This generative model for features can also be derived from a maximum entropy formulation, as

shown in Lawrence (2011, 2012). This distribution over features is nearly the same as in the

structural forms model, except the forms model adds the diagonal term 1

σ2 only to the observed

nodes.

This distribution is also known as a Gaussian Markov Random Field (Koller & Friedman, 2009).

The undirected graph S (and equivalently the precision matrix J) instantiates a set of conditional

independence relationships between the variables in the graph

sij = 0 if and only if

(cid:16)

(k)
f
i ⊥

(k)
f
j

(k)
f
\{i,j}
|

(cid:17)

.

If nodes i and j do not share an edge, their feature values are conditionally independent when the

rest of the feature vector is observed (or equivalently, their partial correlation is 0 when controlling

for all other nodes). Intuitively, a shared edge is a path of direct dependence.

Given that each object connects to exactly one cluster node (and no other nodes), there are no

paths of direct dependence between objects. Instead, covariation between objects is represented

through the connections between their cluster nodes. Moreover, two objects assigned to the same

cluster node are conditionally independent, if the feature values of their shared cluster node could

be observed.

8.2 Prior distribution on structure

The prior on structures S has a very simple form

P (S, σ2)

(cid:16)

exp

(cid:17)

β(#S)

,

∝

−

where #S is the number of edges in a structure. Equivalently, #S = 1

S

0, where

S

0 known as

2 ||

||

||

||

the (cid:96)0-norm, counts the number of non-zero entires in a matrix. The prior has support on the set of

all possible graphs in which the following conditions are met: each object has only one connection

(which is to a cluster node), there are no empty cluster nodes, each matrix entry is non-negative

(sij

0), and σ2 > 0.

≥
This prior is improper because the values in S have no upper bound. Given that this paper

aims to just ﬁnd a single good structure, this issue can be ignored and the prior becomes a penalty

28

β(#S) in the model’s log-score (Eq. 3). If it was desirable (and tractable) to compute a posterior

D), then this improper prior could be extended to form a proper prior. Following

−
distribution P (S

|

the structural forms model, S could be decomposed into its sparsity pattern Spat (which values are

non-zeros) and the edge values Sval. The forms model places a prior on each entry in Sval, and uses

Laplace’s method (MacKay, 2003) to approximate the integral over the parameter values

(cid:90)

P (D

Spat) =
|

P (D

Spat, Sval, σ2)P (Sval
|

|

Spat)P (σ2)dSvaldσ2.

This strategy is entirely consistent with the structural sparsity model.

In fact, approximating

the integral would create an additional force for sparsity, known as the Bayesian Occam’s razor

(MacKay, 2003). But our current approach was chosen for simplicity, since we found it unnecessary

to have two simultaneous forces driving for sparsity. There are some more formal reasons to

support this point. As the number of features grows, the Laplace approximation for the integral

above asymptotes to a model score known as the Bayesian Information Criterion (BIC) (Koller

& Friedman, 2009; Schwarz, 1978). The BIC score maximizes the likelihood while penalizing the

number of parameters, just like the penalization arising from our prior on S, although it diﬀers

in a scaling factor. Thus the more complex model, which combines these two sources of sparsity,

asymptotes to the simpler model with just a larger value of the sparsity parameter β, soaking up

both forces that promote sparsity.

8.3 Model implementation

Computing a posterior distribution over structures P (S

D) is very diﬃcult, and thus we aim to
|

ﬁnd a single good structure S that maximizes the posterior score (Eq. 3). Our approach to

this optimization problem consists of two main routines. The outer-routine searches for the best

clustering pattern (partition) of objects into cluster nodes, called cluster search. The inner-routine

searches for the best graph S without changing the clustering pattern, called connection search.

8.3.1 Cluster search

The strategy for cluster search is related to standard methods for structure learning in graphical

models (Koller & Friedman, 2009), which evaluate small changes to a graph and often greedily select

the best change. Given a hypothesis structure and its cluster pattern, cluster search considers a

29

set of local proposals to split or merge cluster nodes. The best scoring move, whether it is a split

or a merge, is chosen greedily at each step. In order to assess the quality of each move, the edges

must be re-optimized with the connection search routine which is computationally expensive. But

multiple possible moves can be evaluated in parallel. To help mitigate the problem of local optima,

search does not terminate immediately when the best local move decreases the score. Instead, the

algorithm terminates after the score decreases several times (we used 5). Search also keeps a tabu

list of previously visited cluster partitions that it does not revisit. The best evaluated structure S

is returned as the solution.

Initialization. Choosing a good initialization can save a lot of computation, and in some

cases, lead to better results. Given that cluster search operates over cluster partitions, we use

standard clustering methods to propose a set of reasonable candidates for initialization. We use

k-means clustering to choose a set of k clusters. Multiple values of k are tried, where the values

of k are evenly spaced on a logarithmic scale from 1 to the number of objects nx. Each candidate

is evaluated and scored with connection search. After determining the best value for k in this

initial coarse sampling, the algorithm attempts to narrow in on a better value. Picking the closest,

previously-tried values of k above and below the current k, k is further optimized in this range by

Fibonacci search. Assuming the score is a unimodal function of k within these bounds, Fibonacci

search will ﬁnd the optimum in this range.

Splitting clusters. To split a cluster node, the objects currently assigned to that node must be

divided between the two new clusters. Following the general splitting strategy used in the structural

forms algorithm (Kemp & Tenenbaum, 2008), the sparsity algorithm chooses two seed objects at

random, assigns one to each cluster, and stochastically distributes the remaining objects by picking

whichever seed object is closer in feature space. There is also a low probability of choosing the

opposite seed object. Rather than evaluating just one split per node, the algorithm tries several

(3) randomly chosen seed objects. Each split must then be optimized with connection search and

scored by the objective function (Equation 3). For each step during search, the algorithm is limited

in the total number of splits it will consider across all of the cluster nodes (30 for most data sets,

but 8 for large data sets like the Senate and 200 Objects).

Merging clusters. To merge two cluster nodes, they must combine their attached objects

to form a single cluster node. Rather than trying every combination of merges, each cluster node

30

stochastically, but intelligently, picks another to combine with. To help select the merges, the

algorithm ﬁrst calculates the expected value of the latent features for all cluster nodes, and the

probability of merging two nodes decreases with the distances in this feature space. The algorithm

also limits the number of merges it evaluates (30 for most data sets, but 8 for the Senate and 200

objects).

Swapping assignments. In addition to splits and merges, the algorithm also tries to swap

the cluster assignments of objects (Kemp & Tenenbaum, 2008). These moves do not compete

with splitting and merging during each greedy step of the algorithm. Instead, at regular intervals

throughout search (we used every 3 moves), each object tries to change its cluster assignment while

leaving all others ﬁxed. It tries all possibilities, but it does not re-learn the sparsity pattern for each

possible assignment, which is an expensive computation. Instead, it just re-optimizes the existing

edge strengths of each candidate proposal S. If a new parent leads to a better score, then S is

re-optimized with the full connection search.

8.3.2 Connection search

Connection search is the sub-routine that searches for the best sparse connectivity pattern, given a

assignment of objects to cluster nodes. Deﬁning a function c(S) that extracts the cluster assignment,

connection search must solve

argmax
σ2,{S:c(S)=w}

log P (f

S, σ2)

(i)
X |

−

β(#S),

m
(cid:88)

i=1

(9)

where the current cluster assignment is denoted as w. Given that features are only observed

for object nodes, and even those features can be missing, we use the Structural Expectation-

Maximization algorithm (Structural EM or SEM) for learning in the presence of missing data

(Friedman, 1997).

Structural Expectation-Maximization. SEM reduces the missing data problem to a se-

quence of simpler structure learning problems with complete data. Rather than maximizing Eq. 9

directly, the structure at iteration r + 1 of SEM maximizes

S[r+1], σ2[r+1]

argmax
σ2,{S:c(S)=w}

←

EQi(f (i)

Z ,S[r],σ2[r])

log P (f

(cid:104)

(cid:105)
S, σ2)

(i)
X , f

(i)
Z |

−

β(#S),

(10)

m
(cid:88)

i=1

31

where the expectation is over the conditional distribution of the missing or latent features (f

(i)
Z )

given the observed features (f

(i)
X ) and the current structure at iteration r,

Qi(f

(i)
Z , S[r], σ2[r]) = P (f

(i)
(i)
X , S[r], σ2[r]).
f
Z |

Each iteration of the Structural EM algorithm is guaranteed to improve the original objective, or the

marginal probability of the observed features Eq. 9. For the structural sparsity model, each iteration

can be decomposed into an E-step (Step 3 below) which computes expected suﬃcient statistics. This

is followed by a Structural M-step that re-optimizes the structure to ﬁt the new suﬃcient statistics

(Step 4). The algorithm is shown below.

1: Initialize S[0] and σ2[0]

2: for r = 0, 1, 2, ... until convergence do

(cid:80)m

←

3: H

1
m
S[r+1], σ2[r+1]
{
5: end for

4:

i=1 EQi(f (i)

Z ,S[r],σ2[r])[f (i)f (i)T ]
argmax
σ2,{S:c(S)=w}

log

J

|

| −

} ←

tr(HJ)

β
m ||

S

0
||

−

The precision matrix J is implicitly a function of S and σ2. Step 4 is intractable, as is the case

with most structure learning problems, and we describe how we approximately solve it in the next

section. Also, we run traditional EM to convergence at the end of each iteration r of Structural

EM (see Alternating SEM-EM Friedman, 1997). Traditional EM is the same algorithm as SEM

but with β = 0 and a ﬁxed sparsity pattern for S across iterations.

Optimization with (cid:96)1 heuristic. Exactly solving Step 4 is intractable, since all possible

sparsity patterns need to be considered and the number of diﬀerent sparsity patterns for k clusters

is 2(k2−k)/2. Instead we use a convex relaxation of the optimization which replaces the (cid:96)0 norm with

the (cid:96)1 norm. This heuristic leads to a sparse solution (Banerjee et al., 2008). The (cid:96)1 relaxation

penalizes a sum of the parameters instead of their cardinality, such that

S

||

0
||

≈

λ (cid:80)

ij sij for some

constant λ. This leads to a convex optimization problem which can be solved exactly (Lake &

32

Tenenbaum, 2010):

argmax
J,S,σ2

log

J

|

| −

tr(HJ)

βλ
m

−

(cid:88)

sij

ij

subject to

J = diag

(cid:16) (cid:88)

(cid:17)

sij

S +

−

1
σ2 I

j

sij = 0,

i, j

/
∈ E

}

0,

i, j

} ∈ E

sij

≥
σ2 > 0.

{

{

E

The set of allowable edges is denoted as

. Given that J can be deﬁned as an aﬃne mapping

from the variables S and σ2, we can make the ﬁrst equality constraint implicit in the objective

function and remove J as a variable (Boyd & Vandenberghem, 2004). By setting the missing edges

to be zero and removing them as variables, we have a convex optimization problem with just a

positivity constraint on the parameters. Eﬃcient methods for solving a related sparse Gaussian

problem with (cid:96)1 have been developed (Banerjee et al., 2008; Schmidt, Van Den Berg, Friedlander, &

Murphy, 2009), although this problem does not have a positivity constraint or the graph Laplacian

interpretation. Algorithms for this related problem typically solve the dual optimization problem,

although we found that solving the primal problem was more eﬃcient for the variant deﬁned here.

To solve it, we used a projected quasi-Newton algorithm and code developed by Schmidt et al.

(2009). For a given solution, many values are zero but others are just small. The ﬁnal sparsity

pattern is chosen by thresholding to approximately maximize the complete-data objective in Step

4 of the Structural EM algorithm. The algorithm repeats the optimization and thresholding a total

, and the best is picked according to the same objective. For the

of three times, at λ =

.5, 1, 2
}
{
largest data sets, λ = 1.

Derivation of Structural EM. More details of the Structural EM derivation are now de-

scribed. We unpack the SEM objective function in Eq. 10 and derive the algorithm in the section

above. Here, the distribution Qi implicitly depends on the current hypothesis S, although we drop

the dependence in the notation.

33

argmax
σ2,{S:c(S)=w}

log P (S, σ2) + (cid:80)m

i=1 EQi(f (i)

(i)
X , f

(i)
Z ; S, σ2)]

Z )[log p(f
(cid:80)m

1
2

| −

(cid:80)n

j=1

i=1 EQi(f (i)

Z )[f (i)T Jf (i)]

k=1 EQi(f (i)
Z )[f
Z )[f (i)f (i)T ]J)

i=1 tr(EQi(f (i)

(i)
j f

(i)
k ]Jjk)

= argmax

log P (S, σ2)

σ2,{S:c(S)=w}
= log P (S, σ2) + m

2 log

= log P (S, σ2) + m

2 log

m
2 log

J −1

(cid:80)m

|
i=1((cid:80)n
(cid:80)m

= log P (S, σ2) + m

2 log

m
2 tr(HJ)

−

J

J

|

|

| −

| −

1
2

1
2

J

|
β
m ||

| −
S

0
||

log

J
|

| −

∝

tr(HJ)

−

H

←

1
m

m
(cid:88)

i=1

EQi(f (i)

Z )[f (i)f (i)(cid:62)].

Above, J is the precision matrix (Eq. 8) and H is the expectation of the empirical covariance,

The E-step (Step 3 in the SEM algorithm) uses this formula for computing H. Afterwards, we can

approximately solve the optimization problem shown in the last line of the derivation, which forms

the M-step (Step 4 in the SEM algorithm).

References

Banerjee, O., El Ghaoui, L., & D’Aspremont, A. (2008). Model Selection Through Sparse Maxi-

mum Likelihood Estimation for Multivariate Gaussian or Binary Data. Journal of Machine

Learning Research, 9 , 485–516.

Boyd, S., & Vandenberghem, L. (2004). Convex Optimization. Cambridge University Press.

Carey, S. (2009). The Origin of Concepts. New York, New York, USA: Oxford University Press.

Chandrasekaran, V., Sanghavi, S., Parrilo, P. A., & Willsky, A. S. (2011). Rank-sparsiy incoherence

for matrix decomposition. SIAM Journal on Optimization, 21 (2), 572–596.

Choi, M. J., Chandrasekaran, V., & Willsky, A. S. (2010). Gaussian Multiresolution Models : Ex-

ploiting Sparse Markov and Covariance Structure. IEEE Transactions on Signal Processing,

58 (3), 1012–1024.

Choi, M. J., Tan, V., Anandkumar, A., & Willsky, A. S. (2011). Learning Latent Tree Graphical

Models. Journal of Machine Learning Research, 12 , 1771–1812.

Collins, A. M., & Loftus, E. F.

(1975). A spreading-activation theory of semantic processing.

Psychological Review , 82 (6), 407–428.

34

Ekman, G.

(1954). Dimensions of color vision. Journal of Psychology: Interdisciplinary and

Applied , 38 , 467–474.

Fares, T., & Stepanyants, A. (2009). Cooperative synapse formation in the neocortex. Proceedings

of the National Academy of Sciences of the United States of America, 106 (38), 16463–8.

Friedman, N. (1997). Learning Belief Networks in the Presence of Missing Values and Hidden

Variables. Fourteenth International Conference on Machine Learning (ICML).

Goodman, N. D., Mansinghka, V. K., Roy, D. M., Bonawitz, K., & Tenenbaum, J. B. (2008).

Church: A language for generative models. Uncertainty in Artiﬁcial Intelligence.

Griﬃths, T. L., Chater, N., Kemp, C., Perfors, A., & Tenenbaum, J. B. (2010). Probabilistic models

of cognition: exploring representations and inductive biases. Trends in Cognitive Sciences,

14 (8), 357–64.

Heit, E. (1998). A Bayesian analysis of some forms of inductive reasoning. In M. Oaksford &

N. Chater (Eds.), Rational models of cognition (pp. 248–274). Oxford University Press.

Heit, E. (2000). Properties of inductive reasoning. Psychonomic Bulletin and Review , 7 (4), 569–92.

Hutchinson, J. W. (1989). Netscal: A network scaling algortihm for nonsymmetric proximity data.

Inhelder, B., & Piaget, J. (1964). The Early Growth of Logic in the Child. London: Routledge &

Psychometrika, 54 (1), 25–51.

Kegan Paul.

Kalaitzis, A., Laﬀerty, J., & Lawrence, N. D. (2013). The Bigraphical Lasso. In Proceedings of the

30th International Conference on Machine Learning.

Kalisman, N., Silberberg, G., & Markram, H. (2005). The neocortical microcircuit as a tabula rasa.

Proceedings of the National Academy of Sciences of the United States of America, 102 (3),

Kemp, C. (2007). The acquisition of inductive constraints (Unpublished doctoral dissertation).

880–5.

MIT.

Kemp, C., Goodman, N. D., & Tenenbaum, J. B. (2008). Theory Acquisition and the Language of

Thought. Proceedings of the 30th Annual Cognitive Science Society (CogSci).

Kemp, C., & Tenenbaum, J. B.

(2008). The discovery of structural form. Proceedings of the

National Academy of Sciences, 105 (31), 10687–92.

Kemp, C., & Tenenbaum, J. B.

(2009). Structured statistical models of inductive reasoning.

35

Psychological Review , 116 (1), 20–58.

Koller, D., & Friedman, N. (2009). Probabilistic Graphical Models. MIT Press.

Kuhn, T. S. (1962). The Structure of Scientiﬁc Revolutions. Chicago, IL: University of Chicago

Lake, B. M., & Tenenbaum, J. B.

(2010). Discovering Structure by Learning Sparse Graphs.

Proceedings of the 32nd Annual Conference of the Cognitive Science Society.

Lawrence, N. D. (2011). Spectral Dimensionality Reduction via Maximum Entropy. Proceedings of

the Fourteenth International Conference on Artiﬁcial Intelligence and Statistics (AISTATS),

Lawrence, N. D. (2012). A Unifying Probabilistic Perspective for Spectral Dimensionality Reduc-

tion: Insights and New Models. Journal of Machine Learning Research, 13 , 1609–1638.

LeCun, Y., Bengio, Y., & Hinton, G. (2015). Deep learning. Nature, 521 , 436–444.

MacKay, D. J. (2003). Information Theory, Inference, and Learning Algorithms. Cambridge, UK:

Cambridge University Press.

Markman, E. M. (1989). Categorization and Naming in Children. Cambridge, MA: MIT Press.

Marr, D. C. (1982). Vision. San Francisco, CA: W.H. Freeman and Company.

McClelland, J. L. (2010). Emergence in Cognitive Science. Topics in Cognitive Science, 2 (4),

Press.

51–59.

751–770.

McClelland, J. L., Botvinick, M. M., Noelle, D. C., Plaut, D. C., Rogers, T. T., Seidenberg, M. S.,

& Smith, L. B.

(2010). Letting structure emerge: connectionist and dynamical systems

approaches to cognition. Trends in Cognitive Sciences, 14 (8), 348–56.

Navarro, D. J., & Perfors, A. F. (2011). Hypothesis generation, sparse categories, and the positive

test strategy. Psychological Review , 118 (1), 120–134.

Oaksford, M., & Chater, N.

(1994). A rational analysis of the selection task as optimal data

selection. Psychological Review , 101 (4), 608–631.

Olshausen, B. A., & Field, D. J. (1996). Emergence of simple-cell receptive ﬁeld properties by

learning a sparse code for natural images. Nature, 381 (6583), 607–9.

Osherson, D. N., Smith, E. E., Wilkie, O., Lopez, A., & Shaﬁr, E. (1990). Category-based induction.

Psychological Review , 97 (2), 185–200.

Osherson, D. N., Stern, J., Wilkie, O., Stob, M., & Smith, E. E. (1991). Default probability.

36

Cognitive Science, 15 , 251–269.

Palatucci, M., Pomerleau, D., Hinton, G., & Mitchell, T. (2009). Zero-Shot Learning with Semantic

Output Codes.

In Y. Bengio, D. Schuurmans, & J. Laﬀerty (Eds.), Advances in Neural

Information Processing Systems (NIPS).

Richardson, M., & Domingos, P.

(2006). Markov logic networks. Machine Learning, 62 (1-2),

Rips, L. J. (1975). Inductive judgments about natural categories. Journal of Verbal Learning and

107–136.

Verbal Behavior , 14 (6), 665–681.

eukaryotes. Nature, 431 , 152–155.

Rivera, M., & Lake, J. (2004). The ring of life provides evidence for a genome fusion origin of

Rogers, T. T., & McClelland, J. L. (2004). Semantic Cognition: A Parallel Distributed Processing

Approach. Cambridge, MA: MIT Press.

Schmidt, M., Van Den Berg, E., Friedlander, M. P., & Murphy, K. (2009). Optimizing Costly

Functions with Simple Constraints: A Limited-Memory Projected Quasi-Newton Algorithm.

Proceedings of the 12th International Conference on Artiﬁcial Intelligence and Statistics (AIS-

TATS).

398.

Schvaneveldt, R. W., Durso, F. T., & Dearholt, D. W. (1989). Network structures in proximity

data. In G. Bower (Ed.), The psychology of learning and motivation: Advances in research

and theory (Vol. 24). Academic Press.

Schwarz, G. (1978). Estimating the Dimension of a Model. The Annals of Statistics, 6 (2), 461–464.

Shepard, R. N. (1980). Multidimensional scaling, tree-ﬁtting, and clustering. Science, 210 , 390–

Tenenbaum, J. B., Kemp, C., Griﬃths, T. L., & Goodman, N. D. (2011). How to Grow a Mind:

Statistics, Structure, and Abstraction. Science, 331 (6022), 1279–85.

Tibshirani, R.

(1996). Regression shrinkage and selection via the lasso. Journal of the Royal

Statistical Society Series B , 58 (1), 267–288.

Xu, F., & Tenenbaum, J. B. (2007). Word learning as Bayesian inference. Psychological Review ,

114 (2), 245–272.

Zhu, X., Laﬀerty, J., & Ghahramani, Z. (2003). Semi-supervised learning: From Gaussian ﬁelds to

Gaussian processes (Tech. Rep. No. CMU-CS-03-175).

37

