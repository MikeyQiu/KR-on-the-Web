SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

1

Dual Deep Network for Visual Tracking

Zhizhen Chi, Hongyang Li, Student Member, IEEE, Huchuan Lu, Senior Member, IEEE,
and Ming-Hsuan Yang, Senior Member, IEEE

6
1
0
2
 
c
e
D
 
9
1
 
 
]

V
C
.
s
c
[
 
 
1
v
3
5
0
6
0
.
2
1
6
1
:
v
i
X
r
a

Abstract—Visual tracking addresses the problem of identifying
and localizing an unknown target in a video given the target
speciﬁed by a bounding box in the ﬁrst frame. In this paper, we
propose a dual network to better utilize features among layers
for visual tracking. It is observed that features in higher layers
encode semantic context while its counterparts in lower layers
are sensitive to discriminative appearance. Thus we exploit the
hierarchical features in different layers of a deep model and
design a dual structure to obtain better feature representation
from various streams, which is rarely investigated in previous
work. To highlight geometric contours of the target, we integrate
the hierarchical feature maps with an edge detector as the coarse
prior maps to further embed local details around the target.
To leverage the robustness of our dual network, we train it
with random patches measuring the similarities between the
network activation and target appearance, which serves as a
regularization to enforce the dual network to focus on target
object. The proposed dual network is updated online in a
unique manner based on the observation that the target being
tracked in consecutive frames should share more similar feature
representations than those in the surrounding background. It
is also found that for a target object, the prior maps can help
further enhance performance by passing message into the output
maps of the dual network. Therefore, an independent component
analysis with reference algorithm (ICA-R) is employed to extract
target context using prior maps as guidance. Online tracking is
conducted by maximizing the posterior estimate on the ﬁnal maps
with stochastic and periodic update. Quantitative and qualitative
evaluations on two large-scale benchmark data sets show that
the proposed algorithm performs favourably against the state-
of-the-arts.

Index Terms—Visual Tracking, Deep Neural Network, Inde-

pendent Component Analysis with Reference.

I. INTRODUCTION

Visual tracking has long been a fundamental research prob-
lem in computer vision [1]–[8]. In a typical scenario, an
unknown target speciﬁed by a bounding box in the ﬁrst frame
is to be tracked in the subsequent frames. Although numerous
algorithms have been proposed for visual tracking, it remains
a challenging problem for a tracker to handle large appearance
variations, abrupt motion, severe occlusions, and background
clutters. To address these challenges, recent approaches resort
to robust representations such as Haar-like features [5], his-
tograms [6], and sparse features [7]. However, these low-level
hand-crafted features are not effective in capturing semantic
information of targets due to limited discriminative strength
of representation schemes.

Z. Chi and H. Lu are with School of Information and Communication
Engineering, Dalian University of Technology, Dalian 116024, China. Email:
zhizhenchi@gmail.com, lhuchuan@dlut.edu.cn.

H. Li is with Department of Electronic Engineering, The Chinese University

of Hong Kong, Hong Kong. Email: yangli@ee.cuhk.edu.hk.

M. Yang is with University of California at Merced, Merced, CA 95344,

USA. Email: mhyang@ucmerced.edu.

Fig. 1.
Feature map breakdown of different stages. (a) Boundary maps
produced by LoG ﬁlters. The insets show the tracking frames. (b)-(c) Coarse
prior maps from the feature maps in VGG conv4-3 and conv5-3 layers and
the boundary maps. (d)-(e) Integrated maps of the outputs of the dual network
multiplied by the boundary maps. (f)-(g) ICA-R results which combine the
mixed signals (d)(e) with reference (b)(c). Note that maps from (d) to (g) are
visualizations of the tracked targets and resized only for better illustration.

Recent years have witnessed the resurgence of visual repre-
sentation learning from raw pixels using deep convolutional
neural networks (ConvNet) [9], [10]. Driven by the large-
scale visual data sets and fast development of computation
resources, methods based on deep models have achieved state-
of-the-art results in a wide range of vision tasks, such as
image classiﬁcation [9], [11], [12], object detection [13], [14],
saliency detection [15], [16], etc. For visual tracking, one
bottleneck of applying ConvNet is the lack of training data
for a sequence as typically only one labelled bounding box
in the ﬁrst frame is given. Although this problem may be
alleviated by using more data during online update to learn
and reﬁne a generic object model,
it entails a signiﬁcant
increase in computational complexity. An alternative is to
transfer the ConvNet features learned ofﬂine to online tracking
[17]–[19]. However, simply regarding the deep model as
a black box feature extractor may not complement ofﬂine

2

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

training with online tracking, and previous work [20]–[22] do
not distinguish or utilize various information carried among
different levels of layers.

We argue that features at different levels of a ConvNet cap-
ture image properties and should be fully utilized in a proper
manner for visual tracking. It is observed that, on one hand,
features at lower layers encode more ﬁne-grained details to
locate target objects precisely before being pooled or stridden
into deeper layers (see Figure 1(b)); on the other hand, features
at higher layers capture more high-level semantics useful for
discriminating objects from the cluttered background [23] and
are robust to deformation and occlusion (see Figure 1(c)).
These observations motivate us to consider multiple layers of
a ConvNet into tracking to better obtain task-speciﬁc target
features. One may resort to a hypercolumn [24] framework
to combine feature maps of all layers. In fact, two layers
are complementary enough for different hierarchical features.
Stacking more or making net deeper may boost performance1,
but how to combine features from more cascaded layers are
beyond the work of this paper and need more time to tune
(more parameters and overﬁtting problem). As seen in Figure
1(d)-(e), features in the patch after two streams of a dual
network focus on the target being tracked and they can be
further reﬁned with prior feature maps from VGG model in an
ICA with reference manner [25] (see Figure 1(f)-(g)). The ﬁnal
estimation of a target location takes advantages of both high-
level semantics and low-level details from the two streams.

In this paper, we propose a dual network based tracker
(DNT) in a self-supervised learning framework, which in-
corporates both high-level semantic context and low-level
spatial structure from different layers (see Figure 2). First,
we extract the deep features, combine them with the low-
level boundary maps derived from the Laplacian of Gaussian
(LoG) edge detector, and incorporate these features to obtain
a more concise feature map via the independent component
analysis with reference (ICA-R) method [25] (Section III-A).
Second, the dual network training is detailed where center-
shifted random patches are generated to augment the number
of positive training samples (Section III-B). Third, the tracking
framework with deep features is embedded into the motion
and observation model with a module to detect drift and
occlusion (Section III-C). The dual network is updated online
with both stochastic and periodic schemes to address the
drift and occlusion problems (Section III-D). The imple-
mentation of our proposed DNT algorithm is available at
https://github.com/chizhizhen/DNT.

The contributions of this work are summarized as follows:
• Boundary and shape information are embedded within
the deep model framework. Low level texture features
generated by an edge detector are incorporated into the
hierarchical deep features to obtain a coarse prior map.
The salient target contour is improved via the ICA-R
method for a better observation likelihood model.

• A dual network, which extracts representative features

1In fact, we verify in preliminary experiments that simplying stacking the
feature maps of three layers does not perform well than that of using two
layers alone. See Table VII Section IV-D for details.

Fig. 2.
Pipeline of our algorithm. For each frame, a base patch as well
as a bunch of random patches are generated and fed into the dual network
for training. For brevity, we only show the workﬂow of a base patch (random
patches, marked as green, also follow the same procedure). The output feature
maps of the VGG and the dual network are combined with boundary maps to
generate a set of robust feature representations, which are known as reference
and mixed signal, respectively. ICA-R outputs from two streams are combined
to estimate the target location and further used for online tracking where drifts
and occlusion issues can be handled.

from two distinct layers, is proposed. Location translation
is exploited as data augmentation to enable the dual
network for robustly discriminating foreground target
from background clutters.

• Both stochastic and periodic update mechanisms are pre-
sented to handle occlusion or drift during online tracking
and to alleviate issues with noisy updates caused by
inaccurate training samples.

The rest of the paper is organised as follows. In Section II,
we ﬁrst review related work and discuss our improvements.
The feature extraction, online tracking and dual network train-
ing and updating are analysed in Section III. We evaluate the
proposed tracker on two large-scale benchmark data sets [26]–
[28] in Section IV and substantial performance improvement
is achieved over the state-of-the-art methods. Furthermore,
we conduct a series of ablation studies to demonstrate the
effectiveness of each component.

II. RELATED WORK

Most tracking methods can be categorized into either gen-
erative or discriminative model based trackers. In generative
models, candidate regions are searched to select the most prob-
able one as the tracking result. Some representative methods
are based on principal component analysis [2] to model target
appearance. Sparse coding [4], [7] is also introduced using
different dictionaries or regulation terms. A target object is
then reconstructed by a sparse linear combination of target
and trivial templates. In discriminative models, tracking is
considered as a binary classiﬁcation problem to separate the

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

3

target from background. Avidan [29] introduces an optical
ﬂow approach with a SVM classiﬁer for visual
tracking.
The multiple instance learning [30] and structured output
SVM [5] are also applied to visual tracking. Recently, correla-
tion ﬁlters [31]–[34] have been used for efﬁcient and effective
visual tracking. In addition, subsequent algorithms based on
correlation ﬁlters with hand-crafted features (such as HOG
features [34] or color-attributes [35]) considerably improve
tracking accuracy.

Hierarchical feature representations from deep learning have
tracking [18]–[22],
been shown to be effective for visual
[36]–[39]. Wang and Yeung [18] propose a deep learning
approach using a stacked denoising autoencoder where the
model
is trained in an unsupervised fashion on an auxil-
iary data set and directly used for online tracking. On one
hand, image samples used for pretraining are cropped from
frames in a downsampling scanning approach, which leads
to signiﬁcant amount of redundant computation. On the other
hand, features learned ofﬂine from an auxiliary data set may
not adapt well to speciﬁc sequences containing targets for
visual tracking. The DeepTrack [20] method treats tracking
as foreground-background classiﬁcation task with a ConvNet
trained online. Similarly, an online SVM with a pretrained
CNN is presented for visual tracking in [19], and exploits
multiple levels of representations of CNN by back-propagating
target information through the whole network until the image
domain. Such schemes to directly learn two-layer or SVM
classiﬁers require a large number of positive and negative
samples, which is impractical for online tracking. Ma and
Wang et al. [36], [37] analyze different characteristics of
each convolutional layer from which features are combined
to represent target objects. In [37], feature maps derived from
the ofﬂine model are directly used to learn the Kernelized
Correlation Filter without online updating network. In [36],
two online networks with shallow architectures are trained
and updated for feature selection and representation, where
the models can remove unreliable and noisy feature maps to
alleviate the overﬁtting problem. A multi-directional recurrent
neural network is employed in the RTT tracker [39] to capture
long-range contextual cues by traversing a candidate spatial
region from multiple directions.

In this paper, we have tackled three main issues with the
existing deep model based trackers. First, the features used
for tracking are learned from a pretrained CNN on other data
sets. It is obvious that they may not be adaptive to target
appearance in visual tracking. Thus, we train an adaptation
module online for each speciﬁc sequence. Second, texture
details of the target objects are not explicitly considered. In the
papers [36], [37], after feature maps of ConvNets are pooled
or convoluted with consecutive strides, fewer texture details
are preserved and only salient object responses are used for
tracking. Hand-crafted boundary and shape information can
contribute greatly to accurate object localization and can be
integrated with the deep representations to generate better can-
didates during visual tracking. Third, surrounding background
and similar objects around the target objects are not fully
exploited for learning more effective representations. Different
patch translation schemes can be used as the data augmentation

for online training and model update. We address these issues
in the proposed algorithm.

III. DUAL NETWORK TRACKER

A. Deep Feature Extraction with ICA-R

We use the 16-layer VGG model [11] pretrained on the
ImageNet data set as the feature representation, where the net-
work contains 13 convolutional layers and 3 fully-connected
layers. Speciﬁcally, the 10-th and 13-th convolutional layer are
used to extract hierarchical features, denoted as conv4-3 and
conv5-3, respectively. These ConvNet features are integrated
with boundary and shape information during tracking, as well
as fed into the dual network for deeper representations.

V (x, y), gk

Given an input frame I, we convolve it with the Laplacian
of Gaussian ﬁlter [40] and output
the boundary map as
fE. Figure 1(a) shows the boundary maps of four sample
frames. Let gk
D(x, y) denote the output ConvNet
feature maps generated by the VGG network and the dual
network respectively, where k = {1, 2} indicates the layer
index conv4-3 or conv5-3 and x, y denote the spatial
coordinates. The integrated feature maps hk
D, which take
both semantic and boundary information into consideration,
are deﬁned as follows:

V , hk

gk
D = dual_net(gk
hk
V (x, y) = fE(x, y) (cid:12) gk
hk
D(x, y) = fE(x, y) (cid:12) gk

V ),
V (x, y),
D(x, y),

(1)

(2)

(3)

where (cid:12) denotes
the element-wise multiplication, and
dual_net(·) represents the forward passing from the VGG
output as the input to the dual network. These integrated
feature maps provide the boundary information as a guidance
for target localization and serve as the coarse prior maps used
for online tracking. Figure 1(b)-(c) depicts the integrated prior
maps hk
V which combine the deep semantic features and low-
level texture information. Figure 1(d)-(e) shows the integrated
maps hk
D after the dual network multiplied by the boundary
information to have more accurate target locations.

The independent component analysis with reference (ICA-
R) method [25] is developed to extract the desired signal
among source components guided by references. Given the
prior maps hk
D as mixed components
(signals), we seek a projection space s = wT
D to separate
the desired signal. For the tracking task, we derive the ICA-R
results vk(x, y) with a fast one-unit ICA-R algorithm. Its core
idea is to maximize the negentropy J(s) given by

V as reference and hk

I hk

J(s) ≈ ρ(cid:13)
s.t.

(cid:13)E[Q(s)] − E[Q((cid:15))](cid:13)
2
(cid:13)
ε(s, hV ) ≤ ξ

(4)

where Q(x) = log cosh(x) is the non-quadratic function, ρ is
a positive constant, (cid:15) is a Gaussian variable with zero mean
and unit variance, ε(·) is a norm function and E[x] is the
expectation of x. For brevity, we drop the superscript of k in
the notations above. The closeness measure ε(s, hV ) is deﬁned
to achieve its minimum when w = wopt and ξ is a threshold.
To ﬁnd the optical wopt, a Newton-like learning method is
adopted to iteratively update the vector w and details can be

4

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

obtained through the Lagrangian duality theory by introducing
a slack variable and regularization term in [25].

The motivation for using ICA-R is to describe the shape
information of a target object more clearly and robustly after
extracting the deep features. Given Gaussian maps as labels,
we ﬁnd in some cases, the output cannot describe accurate
contour of target. Thus we associate ICA with net outputs to
compensate for shape info. Given hV as a reference to hD,
Gaussian shape is transformed to accurate target shape. With
boundary information considered in fE, the low-level texture
information (shape and boundary) and high-level semantic
context are fully exploited in the feature space. Figure 1(f)-
(g) shows the ICA-R maps vk(x, y), which will be fed into
the observation model in the Bayesian framework for visual
tracking.

B. Dual Deep Network

We formulate a dual (two different functionalities) deep
network, which contains two networks with the same structure
but different weights learned during training, as an adaptation
module to transfer features learned ofﬂine to speciﬁc target
objects. The dual network consists of three convolutional
layers followed by a nonlinear activation. These three con-
volutional layers have 128, 64, 64 convolutional kernels of
size 7 × 7, 5 × 5, 3 × 3, respectively. Note that the output
feature map of the last layer is able to highlight salient objects
from the input patch. We train the dual network with fully
supervised ground truth in the ﬁrst frame of each sequence,
and update the model according to the similarity of the target
appearance in the current and last best tracked frames based
on the fact that the target in these frames should correspond
to the same instance of the moving object. Speciﬁcally, given
an input frame I, we form a patch set SI = {p, ˜p(i)} that
consists of both base and random patches, where i indicates
the index of random patches. A base patch p is centered at
the ground truth in the ﬁrst frame of an image sequence. A
random patch ˜p(i) is a center-shifted version of the base one
via location translation and contains more background clutters
or similar surrounding objects. Random patches are useful for
training in two aspects. First, they cover more background and
distracting objects around the target object. The salient target
object will be well distinguished from background, and the
distracting objects with similar appearance to the target will be
suppressed. Second, considering the scarcity of training data
in visual tracking, these samples serve as data augmentation
to facilitate learning the dual network more effectively.

Figure 3 illustrates different random patches and their output
maps gD accordingly. When random patches are sampled out
of the image boundary, we add zero padding accordingly.
From the examples we observe that the dual network is more
robust to discriminate target from background or distractors at
different locations.

Let m be the input patch and gk

V (m) denotes the output of
the VGG network, we obtain the output of the dual network:

D(m) = dual_net(gk
gk

V (m)),

(5)

where k is the layer index conv4-3 or conv5-3 deﬁned
earlier. In the following, we omit the notation k for presenta-

Examples of center-shifted random patches. (a) Both vertical and
Fig. 3.
horizontal patches are randomly shifted from the base one. Here we use 30
pixels as an illustrative coordinate offset. (b) Heat maps generated by the dual
network based on the corresponding input patches. Here the base patch is the
initial search region cropped from the current frame that contains the object
of interest.

tion clarity. Equipped with the notations aforementioned, we
compute the similarity ranking loss between a base patch and
random patch as:

(cid:96)(p, ˜p(i)) = D(cid:0)gD(p), t(p)(cid:1) + D(cid:0)gD(˜p(i)), t(˜p(i))(cid:1),
where t(·) denotes a 2-dimensional Gaussian target map gen-
erated according to the target location and D(x1, x2) is the
Euclidean distance between two maps.

(6)

The loss function enforces that the target object is dis-
tinguished from the surrounding background, and that
the
distracting objects are suppressed to reduce the risk of drifting
towards similar objects around the target. Note that (6) resem-
bles in some way the approach in [41] where three types of
patches are used: original query patch x in the initial frame of
tracking, tracked patch x+ in the last frame and random patch
x− from other videos, and which are fed into the network for
training. In [41], the model is trained based on a hypothesis
that the distance between the query patch and the tracked
one should be smaller than that between the query patch and
the random one. It is trained in an unsupervised manner for
image classiﬁcation, which differs from our framework in both
conﬁguration and task. The objective function to initially train
the dual network is thereby constructed as follows:

arg min
W

1
N

N
(cid:88)

i=1

(cid:96)(p, ˜p(i)) + β(cid:107)W(cid:107)2
2,

(7)

where W is the weights of the dual network, β indicates the
weight decay and N represents the number of random patches
during one iteration.

C. Target location estimation with occlusion and drifts

Our tracking algorithm is formulated within the Bayesian
framework in which the maximum a posterior estimate is
computed based on the likelihood of the candidate belonging
to the target. Given a new frame, target location is denoted
as Zt = (x, y, σ), where x, y and σ represent the center
coordinates and scale of the bounding box, respectively. The
motion model is assumed to be Gaussian distributed, i.e.,
prob(Zt|Zt−1) = N (Zt; Zt−1, Ψ), where Ψ is the diagonal
covariance matrix that indicates the variance of location and
scale parameters.

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

5

t }R

The sampled candidate regions are normalized to the canon-
ical size maps {M (r)
r=1 with v(r)
(i, j) being the value
derived from (4) at location (i, j) of the r-th candidate at time
t. We omit the notation t in the following context for brevity
and use it when necessary. The value in pixel (r, i, j) is then
normalized as follows:

t

(cid:101)v(r)(i, j) =

(cid:40)

v(r)(i, j),
0,

if pixel (r, i, j) ∈ target,
if pixel (r, i, j) ∈ background.

Hence the conﬁdence of the r-th candidate is computed as the
sum of all the heat map values within the canonical size maps:
C (r ) = (cid:80)

(i,j)∈M (r) (cid:101)v(r)(i, j).

For the tracker to handle large scale variation, we weight

C (r) with respect to the size of each candidate:

(cid:98)C (r) =

s(Z (r)
)
t
s(Z ∗
t−1)

C (r),

(8)

where s(·) represents the area of the candidate region, Z (r)
is
the r-th target location at time t and Z ∗
t−1 being the tracking
result at the last frame. If the target candidates have higher
conﬁdence, the ones with larger area size should be weighted
more. If the target candidates are composed of more zeros
inside, the ones with larger area size should be weighted less.
This weight scheme facilitates the proposed observation model
adaptive to scale variation.

t

We extend the notation from (cid:98)C (r) to (cid:98)C (r,k) where k =
{1, 2} indicates the conﬁdence of the r-th candidate is gener-
ated from the ICA-R maps vk. The ﬁnal target localization is
regarded as a weighted sum from the two hierarchical layers
and computed as:

(cid:98)C ∗

t = arg max

λ (cid:98)C (r,1)

t

+ (1 − λ) (cid:98)C (r,2)

t

,

(9)

r

where λ is a regularization term and ∗ corresponds to the best
candidate state Z ∗
t in the current frame. The target location is
estimated by taking the maximum of (9) considering both two
streams.

Occlusion and Drifts. With the proposed observation model
based on deep features and ICA-R maps, we present an
efﬁcient method to handle occlusion and drift during tracking.
For a given region candidate Z (r)
at time t, the corresponding
conﬁdence score (cid:98)C (r)
is roughly bounded within the range
(cid:2)0, s(Z (r)
)(cid:3). The upper bound indicates that all pixels in the
sample region are assigned with the highest conﬁdence to be
target object, while the lower bound indicates all pixels belong
to the background. We set a threshold θ to detect object drift
or heavy occlusion if the following inequality holds:

t

t

t

µC −

(cid:98)C ∗
t
s(Z ∗
t−1)

< θ,

(10)

where µC is the average conﬁdence score of target estimates.
The numerator of the fraction reﬂects the difference between
the conﬁdence of the current frame and the average conﬁdence
of the target object. The denominator is a normalization term
to conﬁne the fractional results. There are two cases where
the inequality holds:

• The numerator is large, which means the conﬁdence (cid:98)C ∗
t
of the current frame is much larger than the average

Fig. 4. Stochastic online update. (a) 1-st and 10-th, 200-th and 209-th frames
in Lemming. (b) Thresholded target feature maps gD(pK ) that are used in
(11) for subsequent update.

conﬁdence. That means distracting objects similar to the
target object appear in proximity, which may lead to the
tracker drifting to similar objects. With a proper update
mechanism, the proposed tracker is able to recover from
drifts.

• The denominator is small, which means the target object
is occluded by unknown objects and only a few pixels
are assigned with high values. The occluded parts are
weighted less since they are mistaken as background.
Hence we take into consideration the surrounding back-
ground while updating the dual network to adapt the
appearance model to this occlusion case.

D. Online Update

We update the model features to account for appearance
variation, and at the same time maintain the best tracked
target features in the last few frames. One key observation
in visual tracking is that the feature representations for two
best tracked frames should be similar. Our dual network is
updated stochastically and periodically where the former is to
distinguish the target from the background or similar objects,
and the latter is to adapt the dual network to target appearance
and shape variation.

Stochastic Update. Figure 4 shows some intermediate results
during the online update of the stochastic stage. When the
target object is occluded by unknown objects or drifts to
similar distracting objects, i.e., (cid:98)C ∗
t satisﬁes (10), we update
the dual network using the best tracked patch pK in the last
K frames at time t, the current base patch pt as well as the
random patches (cid:101)p(i)
. Note that by using the Gaussian target
map t(·) as labels from different source patches, we train the
dual network in a unique way.

t

Let gD(·) denote the object appearance model by threshold-
ing the object of interest out of gD(·). Clearly the appearance
target gD(pt) is similar to that of
model of the current
the last best tracked target gD(pK). We refer this as "self-
supervised learning" because except updating the dual net with
Gaussian maps, we also update the last best tracked target. The
appearance model, or dual network, is reﬁned by minimizing

6

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

the following objective function:
(cid:96)(pK, pt, ˜p(i)

t ) = D(cid:0)gD(pt), gD(pK)(cid:1)
+(1 − φt)D(cid:0)gD(pt), t(pt)(cid:1) + D(cid:0)gD(˜p(i)
N
(cid:88)

arg min
W

1
N

i=1

(cid:96)(pK, pt, ˜p(i)

t ) + β(cid:107)W(cid:107)2
2,

t ), t(˜p(i)

t )(cid:1),

(11)

(12)

where D is the Euclidean distance function (6), φt is a target
mask indicating whether the r-th candidate Z (r)
belongs to the
target location: φt = 1 if s(Z (r)
) ∈ target, φt = 0 otherwise.
In addition, and β and W are deﬁned in (7).

t

t

The ﬁrst term in (11) implies that we only choose the
best tracked target from the last K frames. The second term
indicates that the appearance model of background region
is only updated in the current frame. When the network is
updated according to (12), there must be occlusions or drifts
near the target object. As such, the estimated location is not
updated since it is not reliable. The third term corresponds
to the loss of random patches which are center-shifted. Over-
all, the combination of different loss functions helps better
separate targets from the background and suppress clutters or
distractors near the objects of interest.

Periodic Update. In addition to the stochastic update, we
reﬁne the dual network at a ﬁxed interval (e.g., 10 frames
in this work) during the whole tracking process. Note that we
take the ﬁrst frame into account because rich information in the
ﬁrst frame should be reserved in the learned model. Therefore,
the loss function is designed to constrain the network to
approximate target appearance in a fully supervised manner
using the Gaussian target map t(·) as labels. The objective
function is deﬁned by

(cid:96)(pK, p1) = D(cid:0)gD(pK), t(pK)(cid:1) + D(cid:0)gD(p1), t(p1)(cid:1),

arg min
W

(cid:96)(pK, p1) + β(cid:107)W(cid:107)2
2.

(13)

(14)

The dual network is updated periodically based on (14)
by taking the ﬁrst frame and last best tracked frame into
consideration in order to make the deep model more adept
to target appearance.

IV. EXPERIMENTS

In this section, we discuss the implementation details and
experimental settings of the proposed DNT tracker. Quantita-
tive and qualitative results on two large-scale tracking bench-
mark data sets (OTB50 [26], OTB100 [28] and VOT2015 [27])
are presented.

A. Implementation Details

Our DNT tracker is implemented based on Caffe [42]
and runs at 5 frames per second on a PC with a 3.4GHz
CPU and a TITAN GPU. The dual network is trained online
with SGD for target localization using the ﬁrst frame for 50
iterations. The initial learning rate is 10−6 with a momentum
of 0.6. To alleviate overﬁtting, the weight decay β in the
objective functions is set uniformly to be 0.005. At each frame,
600 target candidates are randomly sampled. The variance

Fig. 5. Precision (left) and overlap (right) plots for the 11 trackers over the
50 benchmark sequences in OTB50 using one-pass evaluation (OPE), spatial
robustness evaluation (SRE) and temporal robustness evaluation (TRE). The
performance score of precision plot is at error threshold of 20 pixels while
the performance score of success plot is the AUC value. Our DNT tracker
performs favorably against state-of-the-arts.

of candidate location parameters are set to {10, 10, 0.01}
for translation and scale, respectively. We observe that the
ﬁnal target localization is not sensitive to λ in (9). In early
experiments, λ is set from 0.2 to 0.8 and the performance
alters within 2% in OTB50 [26]. Thus we set it 0.4 to pay a
little more attention to semantic information in higher layer. θ
in (10) is set 0.45 empirically through experiments to handle
occlusion and drifts. In each stochastic update, K = 10 is
chosen as the best tracked patch pK in the last K frames. We
ﬁx all the parameters ﬁxed throughout the experiments and
data sets.

B. Evaluation on OTB Data Set

Data Set and Evaluation Settings. The OTB50 data set [26]
includes 50 sequences with 11 various challenging factors
such as illumination variation, deformation, motion blur, scale
variation, etc. We compare with the state-of-the-art trackers,
including Struck [5], SCM [7], TLD [43], MDNet [22],
EBT [44], CNT [45], DSST [33], KCF [34], TPGR [46],
MEEM [8], RTT [39], FCNT [36], SMT [19] and HCF [37],
based on the precision and success scores. One-pass evalua-
tion (OPE), spatial robustness evaluation (SRE) and temporal
robustness evaluation (TRE) are all conducted to thoroughly
evaluate our tracker. Among them, SRE randomizes the initial

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

7

TABLE I
AVERAGE P R E C I S I O N SCORES ON DIFFERENT ATTRIBUTES IN THE OPE EXPERIMENT FOR OTB50. THE BEST AND SECOND RESULTS ARE IN RED AND
GREEN, RESPECTIVELY. THE NUMBER IN THE PARENTHESIS INDICATES THE NUMBER OF SEQUENCES INVOLVED IN THE CORRESPONDING ATTRIBUTE.

RTT

CNT

SMT

DSST

KCF

TGPR MEEM

EBT

SCM

HCF

FCNT

DNT

Illumination variation (25)

Out-of-plane rotation (39)

Scale variation (28)

Occlusion (29)

Deformation (19)

Motion blur (12)

Fast motion (17)

In-plane rotation (31)

Out-of-view (6)

Background cluttered(21)

Low resolution (4)

0.698

0.767

0.721

0.791

0.814

0.687

0.719

0.713

0.854

0.770

0.660

0.566

0.672

0.662

0.662

0.687

0.507

0.500

0.661

0.502

0.646

0.557

0.780

0.830

0.827

0.662

0.858

0.745

0.723

0.836

0.687

0.789

0.705

0.741

0.732

0.740

0.725

0.657

0.603

0.562

0.780

0.533

0.691

0.534

0.728

0.729

0.679

0.749

0.740

0.650

0.602

0.725

0.650

0.753

0.381

0.671

0.678

0.620

0.675

0.691

0.537

0.493

0.675

0.505

0.717

0.538

0.766

0.840

0.785

0.799

0.846

0.715

0.742

0.800

0.727

0.797

0.490

0.814

0.828

0.799

0.574

0.897

0.718

0.746

0.782

0.0.729

0.825

0.713

0.594

0.618

0.672

0.640

0.586

0.339

0.333

0.597

0.429

0.578

0.305

0.844

0.869

0.880

0.877

0.881

0.844

0.790

0.868

0.695

0.885

0.897

0.830

0.831

0.830

0.797

0.917

0.789

0.767

0.811

0.741

0.799

0.765

0.876

0.907

0.893

0.850

0.940

0.824

0.830

0.893

0.810

0.884

0.719

Average

0.660

0.723

0.852

0.739

0.740

0.705

0.830

0.846

0.649

0.891

0.856

0.907

TABLE II
AVERAGE S U C C E S S SCORES ON DIFFERENT ATTRIBUTES IN THE OPE EXPERIMENT FOR OTB50. THE BEST AND SECOND RESULTS ARE IN RED AND
GREEN, RESPECTIVELY. THE NUMBER IN THE PARENTHESIS INDICATES THE NUMBER OF SEQUENCES INVOLVED IN THE CORRESPONDING ATTRIBUTE.

RTT

CNT

SMT

DSST

KCF

TGPR MEEM

EBT

SCM

HCF

FCNT

DNT

Illumination variation (25)

Out-of-plane rotation (39)

Scale variation (28)

Occlusion (29)

Deformation (19)

Motion blur (12)

Fast motion (17)

In-plane rotation (31)

Out-of-view (6)

Background cluttered (21)

Low resolution (4)

0.539

0.566

0.527

0.585

0.628

0.541

0.549

0.529

0.672

0.598

0.508

0.456

0.501

0.508

0.503

0.524

0.417

0.404

0.495

0.439

0.488

0.437

0.556

0.582

0.513

0.563

0.640

0.565

0.545

0.571

0.571

0.593

0.461

0.506

0.491

0.451

0.480

0.474

0.458

0.433

0.532

0.490

0.492

0.352

0.493

0.495

0.427

0.514

0.534

0.497

0.459

0.497

0.550

0.535

0.312

0.484

0.485

0.418

0.484

0.510

0.434

0.396

0.479

0.442

0.522

0.370

0.533

0.558

0.498

0.552

0.560

0.541

0.553

0.535

0.606

0.569

0.360

0.563

0.572

0.533

0.568

0.609

0.544

0.561

0.539

0.562

0.574

0.472

0.473

0.470

0.518

0.487

0.448

0.298

0.296

0.458

0.361

0.450

0.279

0.560

0.587

0.531

0.606

0.626

0.616

0.578

0.582

0.575

0.623

0.557

0.598

0.581

0.558

0.571

0.644

0.580

0.565

0.555

0.592

0.564

0.514

0.650

0.661

0.642

0.641

0.690

0.634

0.635

0.645

0.636

0.652

0.536

Average

0.588

0.545

0.597

0.505

0.514

0.503

0.566

0.586

0.499

0.605

0.599

0.664

TABLE III
TIME COMPLEXITY(FRAMES PER SECOND) OF DIFFERENT DCNN BASED
TRACKERS. NOTE THAT HCFT IS FAST DUE TO A FILTER-BASED TRACKER
SCHEME UNDER FFT DOMAIN.

bounding box by perturbation and TRE randomizes the the
starting frame of the sequence. As additional evaluations to
OPE, SRE and TRE can better demonstrate trackers’ robust-
ness.

All the trackers are ranked according to the center location
error threshold of 20 pixels and the area under curve (AUC)
of success rate plot. The precision plot demonstrates the
percentage of frames where the distance between the estimated
target location and ground truth location is within a given
threshold. Whereas the success plot illustrates the percentage
of frames where the overlap ratio between the estimated
bounding box and ground truth bounding box is higher than
a threshold τ ∈ [0, 1].

Quantitative Evaluation. Figure 5 demonstrates the average
precision plots and success plots on all the 50 sequences of the
top eleven trackers. Our tracker performs favorably among the

state-of-the-arts, which achieves 1.8% and 9.75% gain over the
state-of-the-art trackers on precision and overlap scores in the
OPE. Among the three experiments, SRE is the most difﬁcult
since target object
is initialized with inaccurate locations.
Though all the trackers achieve worse performance, our tracker
can still estimate location and scale accurately with salient
semantics. In the TRE experiment, dual net is initially trained
in different frames, our tracker performs worse than HCF [37]
because target object is missing or partly occluded in some
intermediate frames. The dual net cannot capture the semantic
information of target object. From the ﬁgures, we observe that
the success plots of our method in all the three experiments
are the highest, which demonstrates the effectiveness of the
scale estimation in the DNT tracker. As is known to all, the
success rate plot is much more convincing than the precision
plot in the OTB data set because both location and scale are
evaluated.

Table III shows the time complexity of different Deep
ConvNet based trackers. In our method, most time are spent in
random patch update when occlusion or drift occurs. There can
be a signiﬁcant increase in speed without random patch update,
but the precision will be decreased accordingly. HCFT [37]

8

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

Fig. 6. Precision (left) and overlap (right) plots for the 7 trackers over the
100 sequences in OTB100 using one-pass evaluation (OPE), spatial robustness
evaluation (SRE) and temporal robustness evaluation (TRE). The performance
score of precision plot is at error threshold of 20 pixels while the performance
score of success plot is the AUC value.

and some other correlation ﬁlter based trackers are fast because
they are calculated in the Fourier domain with Fast Fourier
Transform (FFT). They can be regarded as an extension of
KCF [34] tracker.

We also evaluate the tracker performance in terms of indi-
vidual attributes in Table I and II. In terms of precision score,
Table I shows that the proposed DNT algorithm performs
favorably against the state-of-the-art methods in most cases,
such as scale variation, rotation, fast motion, etc. However, the
DNT method performs slightly worse than other trackers in oc-
clusion (Subway, Walking2, Freeman4), motion blur (Jumping,
Woman) and background cluttered (Soccer, Matrix, Ironman).
The main reason is that activation values of target object are
equal to or even lower than the surrounding background.

In terms of success score, Table II shows the DNT algorithm
performs well against the state-of-the-art methods except when
the image resolution is low (Ironman, CarDark, Walking2). In
these sequences, boundary information creates a weak prior
map as reference for ICA-R, which leads to an inaccurate
localization in tracking.

To gain more insights on the effectiveness of the proposed
algorithm, we further report the performance of the top seven
trackers (precision score > 0.7 and success score > 0.5 for
the OPE experiment in OTB50) in the OTB100 data set [28]
with 100 sequences (a supplementary of OTB50), including

Fig. 7.
Average precision and success scores of the 7 trackers under
different attributes of the sequences in OTB100 using one-pass evaluation
(OPE), including illumination variation (IV), out-of-plane rotation (OPR),
scale variation (SV), occlusion (OCC), deformation (DEF), motion blur (MB),
fast motion (FM), in-plane rotation (IPR), out-of-view (OV), background
cluttered (BC) and low resolution (LR).

DSST [33], KCF [34], TPGR [46], MEEM [8], FCNT [36],
and HCF [37] and the proposed DNT tracker. Figure 6
demonstrates the average precision plots and success plots
on the 100 sequences of the top seven trackers. The OPE,
SRE and TRE plots share the same spirit with the evaluations
in OTB50. Our method can estimate both location and scale
accurately compared with other trackers.

To facilitate more detailed analysis, we analyse the perfor-
mance of these trackers on different attributes in ﬁgure 7. The
DNT tracker can well handle various challenging factors and
consistently outperform the other six trackers in almost all the
attributes.

Qualitative Evaluation. Figure 9 shows some visual results
compared with other state-of-the-art trackers. The even rows
are the combined ICA-R maps vk, k = {1, 2} with a weighted
coefﬁcient λ as (9) for target localization. The semantic infor-
mation and clear outline of the tracking targets are highlighted
with the help of ConvNet features and boundary guidance. It
is worth mentioning that in the most challenging sequences
such as MotorRolling and Skating (row 1), most methods fail
to track targets well whereas our DNT algorithm performs
accurately in terms of either precision or overlap; For the most
representative sequences for scaling (row 3), other trackers

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

9

TABLE IV
THE AVERAGE RANKS OF ACCURACY AND ROBUSTNESS UNDER BASELINE AND OVERALL EXPERIMENTS IN VOT2015 [27]. WE RANK ALL THE
TRACKERS ACCORDING TO THE VOT ARTICLE REPORT FROM TOP TO DOWN. THE FIRST, SECOND AND THIRD BEST METHODS ARE HIGHLIGHTED IN
RED, BLUE, GREEN COLORS, RESPECTIVELY.

baseline

Overall

Acc. Rank

Rob. Rank

Acc. Rank

Rob. Rank

Trackers

DeepSRDCF

EBT

DNT

LDP

sPST

struck

s3tracker

sumshift

DAT

MEEM

RobStruck

MCT

2.73

7.35

3.42

5.68

4.52

6.07

4.25

5.08

7.12

5.00

5.78

6.33

Expected
overlap

0.3057

0.3003

0.2748

0.2693

0.2570

0.2387

0.2335

0.2280

0.2128

0.2106

0.2079

0.2076

4.23

3.80

6.03

6.50

6.55

7.07

8.08

8.12

10.18

8.72

7.22

9.90

2.73

7.35

3.42

5.68

4.52

6.07

4.25

5.08

7.12

5.00

5.78

6.33

4.23

3.80

6.03

6.50

6.55

7.07

8.08

8.12

10.18

8.72

7.22

9.90

set [27] contains 60 video sequences showing various objects
in challenging background. The sequences are chosen from a
large pool of real-life data sets. According to the evaluation
criterion, the proposed tracker is re-initialized with the ground
truth location whenever tracking fails (the overlap between
the estimated location and ground truth location equals to
zero). Following [27], we conduct two experiments: baseline
and Overall evaluation, the trackers are initialized with the
ground truth location. Two metrics are used to rank all the
trackers: accuracy and robustness. Accuracy measures the
overlap ratio between the estimated and ground truth bounding
box, while robustness measures the probability of tracking
failures. We evaluate the proposed DNT tracker with all the
trackers submitted to VOT2015 challenge [27]. More details
about the evaluation protocol and compared trackers can be
found in [27].

Evaluation Results. Considering the limited space, we only
present the average accuracy and robustness rank of the top
twelve trackers in Table IV. In general, the proposed DNT
tracker ranks the 3rd in the VOT2015 challenge [27]. In both
the baseline and Overall experiments, DNT performs well
compared with other state-of-the-art trackers. We mainly fail in
some sequences such as ﬁsh1-4, leaves, octopus et al. Because
the target is quite small and similar to surrounding distractors,
the dual net can hardly achieve the semantic information,
which leads to drifting easily. In such cases, the features on the
lower layers of CNN model are able to track target better since
ﬁne-grained spatial information weighs more. For the soldier
and sheep sequences, when long-term occlusions happen, the
proposed method fails to learn the appearance model well
since there is no additional detection mechanism.

Figure 8 shows the accuracy and robustness plots for the top
24 trackers in the VOT2015 data set [27]. The best tracker is
located at the upper-right corner. From the ﬁgures we conclude
that the DNT method performs favorably against the other
methods.

Fig. 8.
The robustness-accuracy ranking plots of the 24 leading trackers
under the baseline evaluation in the VOT2015 data set. The better trackers
are located at the upper-right corner.

are capable to follow a part of target object, but drift away
when the target objects undergo large scale variation. Despite
these challenges, the DNT algorithm accurately estimates both
scales and positions of target objects;

For the sequences (row 5) to deal with weak network
activations, the target objects are similar to background in
appearance. Even though semantics cannot be highlighted in
the higher layers, the ﬁne-grained spatial details are kept for
accurate localization;

Among these sequences, despite fast motion and signiﬁcant
distractors, the proposed algorithm can still track the target
object with the help of high-level features of targets from the
dual network.

C. Evaluation on VOT2015

Data Set and Evaluation Settings. The VOT2015 data

10

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

Fig. 9. Qualitative evaluation of our algorithm DNT, FCNT [36], MEEM [8], KCF [34], HCF [37], DLT [18]. Six challenging sequences (from left to
right and top to down are MotorRolling, Skating, CarScale, Doll, Singer2, Shaking, respectively) are compared among the state-of-the-art trackers. Odd row:
Comparisons with state-of-the-art trackers. Even row: Combined ICA-R maps with a weighted coefﬁcient.

TABLE V
ABLATION STUDY OF DIFFERENT COMPONENTS OF THE DNT TRACKER.
THE PRECISION AND OVERLAP ARE REPORTED ON THE BENCHMARK DATA
SET [26].

TABLE VI
ABLATION STUDY OF DIFFERENT STRATEGIES UNDER DIFFERENT
ATTRIBUTES OF THE DNT TRACKER. DNTB DENOTES WITHOUT
BOUNDARY GUIDANCE AND DNTR INDICATES WITHOUT RANDOM
UPDATE. THE PRECISION AND OVERLAP ARE REPORTED ON THE
BENCHMARK DATA SET [26].

D. Ablation Study

First, we demonstrate the effectiveness of boundary infor-
mation, ICA-R, random samples and the stochastic update
mechanism in training and updating the network. We use the
DNT tracker as the baseline comparison where the feature
representation descends from conv4-3 and conv5-3 of the
VGG network in the OTB50 date set [26]. We compare the
proposed DNT algorithm with variants without boundary in-
formation, without ICA-R, without updating random samples
and without stochastic update. Table V shows that the full
functionality DNT algorithm with all the components performs
much better than other variants. We have also analysed the
importance of boundary information and random update mech-
anism on different tracking challenges. Table VI shows the
average precision and success scores on different attributes in
the OPE experiment for OTB50 [26]. DNTB and DNTR denote
two variations of the DNT tracker without boundary reference
and without random sample update.

Second, we analyze the feature selection from different

TABLE VII
ABLATION STUDY OF FEATURE COMBINATION AMONG LAYERS. THE
PRECISION AND OVERLAP ARE REPORTED ON THE BENCHMARK DATA
SET [26].

layers to represent target objects (Table VII). The reason as for
using conv4-3 and conv5-3 as the feature extraction layers
is based on the empirical analysis that clear outlines of target
objects can be obtained. Table VII shows that the tracker using
a dual layer outperforms that with one single layer because
both semantic and ﬁne-grained cues are considered. We have
also conducted the experiment with conv3-3, conv4-3 and
conv5-3 features, λ in (9) is set [0.2, 0.3, 0.5] for each

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

11

layer. The performance is not so good as our base tracker
because the outline of target object can hardly be reserved
in conv3-3. In addition, the trackers using features from
higher layers perform better than those using features from
lower layers, which shows that semantic appearance plays an
important role for visual tracking.

V. CONCLUSION

In this paper, we propose an effective hierarchical feature
learning algorithm for visual tracking. We ofﬂine learn pow-
erful ConvNet features from the VGG network on a large-
scale data set. Both higher layer features with semantics and
lower layers with spatial structure are used for visual tracking.
the two streams of
Integrated with boundary information,
features are able to delineate a coarse prior map of the target
object. These features serve as reference to extract better
target appearance model by the ICA-R method. The dual
network is trained and updated as an adaptation module to
ﬁne-tune the ConvNet features for speciﬁc target object. We
put forward a course-to-ﬁne strategy to locate target and a
self-supervised scheme to update the dual network. Massive
quantitative and qualitative experiments against the state-of-
the-art algorithms based on OTB and VOT2015 data sets
demonstrate the accuracy and robustness of the proposed
method.

REFERENCES

[1] X. Ren and J. Malik, “Tracking as repeated ﬁgure/ground segmentation,”

in CVPR, 2007, pp. 1–8.

[2] D. A. Ross, J. Lim, R.-S. Lin, and M.-H. Yang, “Incremental learning
for robust visual tracking,” IJCV, vol. 77, no. 1-3, pp. 125–141, 2008.
[3] H. Grabner, C. Leistner, and H. Bischof, “Semi-supervised on-line

boosting for robust tracking,” in ECCV, 2008, pp. 234–247.

[4] X. Mei and H. Ling, “Robust visual tracking using l1 minimization,” in

CVPR, 2009, pp. 1436–1443.

[5] S. Hare, A. Saffari, and P. H. Torr, “Struck: Structured output tracking

with kernels,” in ICCV, 2011, pp. 263–270.

[6] X. Jia, H. Lu, and M.-H. Yang, “Visual tracking via adaptive structural
local sparse appearance model,” in CVPR, 2012, pp. 1822–1829.
[7] W. Zhong, H. Lu, and M. Yang, “Robust object tracking via sparse
collaborative appearance model,” TIP, vol. 23, no. 5, pp. 2356–2368,
2014.

[8] J. Zhang, S. Ma, and S. Sclaroff, “Meem: Robust tracking via multiple
experts using entropy minimization,” in ECCV, 2014, pp. 188–203.
[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Imagenet classiﬁcation
with deep convolutional neural networks,” in NIPS, 2012, pp. 1106–
1114.

[10] H. Li, W. Ouyang, and X. Wang, “Multi-bias non-linear activation
in deep neural networks,” in International Conference on Machine
Learning, 2016.

[11] K. Simonyan and A. Zisserman, “Very deep convolutional networks for
large-scale image recognition,” arXiv preprint: 1409.1556, 2014.
[12] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image

recognition,” CVPR, 2016.

[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik, “Rich feature
hierarchies for accurate object detection and semantic segmentation,”
in CVPR, 2014, pp. 580–587.

[14] R. Girshick, “Fast r-cnn,” in ICCV, 2015.
[15] H. Li, H. Lu, Z. Lin, X. Shen, and B. Price, “Inner and inter label
propagation: Salient object detection in the wild,” IEEE Transactions
on Image Processing, vol. 24, no. 10, pp. 3176–3186, 2015.

[16] H. Li, J. Chen, H. Lu, and Z. Chi, “CNN for saliency detection with

low-level feature integration,” Elsevier Neurocomputing, 2016.

[17] Q. Wang, F. Chen, J. Yang, W. Xu, and M.-H. Yang, “Transferring visual
prior for online object tracking,” TIP, vol. 21, no. 7, pp. 3296–3305,
2012.

[18] N. Wang and D. Yeung, “Learning a deep compact image representation

for visual tracking,” in NIPS, 2013, pp. 809–817.

[19] S. Hong, T. You, S. Kwak, and B. Han, “Online tracking by learning
discriminative saliency map with convolutional neural network,” in
ICML, 2015.

[20] H. Li, Y. Li, and F. Porikli, “Deeptrack: Learning discriminative feature
representations by convolutional neural networks for visual tracking,” in
BMVC, 2014.

[21] L. Wang, T. Liu, G. Wang, K. L. Chan, and Q. Yang, “Video tracking
using learned hierarchical features,” TIP, vol. 24, no. 4, pp. 1424–1435,
2015.

[22] H. Nam and B. Han, “Learning multi-domain convolutional neural

networks for visual tracking,” CVPR, 2016.

[23] J. H. Bappy and A. K. Roy-Chowdhury, “Cnn based region proposals

for efﬁcient object detection,” in ICIP, 2016, pp. 3658–3662.

[24] B. Hariharan, P. Arbeláez, R. Girshick, and J. Malik, “Hypercolumns
for object segmentation and ﬁne-grained localization,” in CVPR, 2014.
[25] W. Lu and J. C. Rajapakse, “ICA with reference,” Neurocomputing,

vol. 69, no. 16-18, pp. 2244–2257, 2006.

[26] Y. Wu, J. Lim, and M.-H. Yang, “Onine object tracking: A benchmark,”

in CVPR.

IEEE, 2013, pp. 2411–2418.

[27] M. Kristan, J. Matas, A. Leonardis, M. Felsberg, L. Cehovin, G. Fer-
nandez, T. Vojir, G. Hager, G. Nebehay, and R. Pﬂugfelder, “The visual
object tracking vot2015 challenge results,” in ECCV Workshops, 2015.
[28] Y. Wu, J. Lim, and M.-H. Yang, “Object tracking benchmark,” TPAMI,

vol. 37, no. 9, pp. 1834–1848, 2015.

[29] S. Avidan, “Support vector tracking,” TPAMI, vol. 26, no. 8, pp. 1064–

1072, 2004.

[30] B. Babenko, M.-H. Yang, and S. Belongie, “Robust object tracking with
online multiple instance learning,” TPAMI, vol. 33, no. 8, pp. 1619–1632,
2011.

[31] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista, “Exploiting
the circulant structure of tracking-by-detection with kernels,” in ECCV,
2012, pp. 702–715.

[32] D. S. Bolme, J. R. Beveridge, B. Draper, Y. M. Lui et al., “Visual
object tracking using adaptive correlation ﬁlters,” in CVPR, 2010, pp.
2544–2550.

[33] M. Danelljan, G. Häger, F. Khan, and M. Felsberg, “Accurate scale

estimation for robust visual tracking,” in BMVC, 2014.

[34] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista, “High-speed
tracking with kernelized correlation ﬁlters,” TPAMI, vol. 37, no. 3, pp.
583–596, 2015.

[35] M. Danelljan, F. S. Khan, M. Felsberg, and J. van de Weijer, “Adaptive
color attributes for real-time visual tracking,” in CVPR, 2014, pp. 1090–
1097.

[36] L. Wang, W. Ouyang, X. Wang, and H. Lu, “Visual tracking with fully

convolutional networks,” in ICCV, 2015, pp. 3119–3127.

[37] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang, “Hierarchical convolu-
tional features for visual tracking,” in ICCV, 2015, pp. 3074–3082.
[38] P. Ondruska and I. Posner, “Deep tracking: Seeing beyond seeing using

recurrent neural networks,” arXiv preprint:1602.00991, 2016.

[39] Z. Cui, S. Xiao, J. Feng, and S. Yan, “Recurrently target-attending

tracking,” in CVPR, 2016, pp. 1449–1458.

[40] D. Marr and E. Hildreth, “Theory of edge detection,” Proceedings of
the Royal Society of London B: Biological Sciences, vol. 207, no. 1167,
pp. 187–217, 1980.

[41] X. Wang and A. Gupta, “Unsupervised learning of visual representations

using videos,” in ICCV, 2015, pp. 2794–2802.

[42] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,
S. Guadarrama, and T. Darrell, “Caffe: Convolutional architecture for
fast feature embedding,” in ACM Multimedia, 2014, pp. 675–678.
[43] Z. Kalal, K. Mikolajczyk, and J. Matas, “Tracking-learning-detection,”

TPAMI, vol. 34, no. 7, pp. 1409–1422, 2012.
[44] G. Zhu, F. Porikli, and H. Li, “Robust visual

tracking with deep
convolutional neural network based object proposals on pets,” in CVPR
Workshops, 2016, pp. 26–33.

[45] K. Zhang, Q. Liu, Y. Wu, and M.-H. Yang, “Robust visual tracking
via convolutional networks without training,” TIP, vol. 25, no. 4, pp.
1779–1792, 2016.

[46] J. Gao, H. Ling, W. Hu, and J. Xing, “Transfer learning based visual
tracking with gaussian processes regression,” in ECCV, 2014, pp. 188–
203.

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

1

Dual Deep Network for Visual Tracking

Zhizhen Chi, Hongyang Li, Student Member, IEEE, Huchuan Lu, Senior Member, IEEE,
and Ming-Hsuan Yang, Senior Member, IEEE

6
1
0
2
 
c
e
D
 
9
1
 
 
]

V
C
.
s
c
[
 
 
1
v
3
5
0
6
0
.
2
1
6
1
:
v
i
X
r
a

Abstract—Visual tracking addresses the problem of identifying
and localizing an unknown target in a video given the target
speciﬁed by a bounding box in the ﬁrst frame. In this paper, we
propose a dual network to better utilize features among layers
for visual tracking. It is observed that features in higher layers
encode semantic context while its counterparts in lower layers
are sensitive to discriminative appearance. Thus we exploit the
hierarchical features in different layers of a deep model and
design a dual structure to obtain better feature representation
from various streams, which is rarely investigated in previous
work. To highlight geometric contours of the target, we integrate
the hierarchical feature maps with an edge detector as the coarse
prior maps to further embed local details around the target.
To leverage the robustness of our dual network, we train it
with random patches measuring the similarities between the
network activation and target appearance, which serves as a
regularization to enforce the dual network to focus on target
object. The proposed dual network is updated online in a
unique manner based on the observation that the target being
tracked in consecutive frames should share more similar feature
representations than those in the surrounding background. It
is also found that for a target object, the prior maps can help
further enhance performance by passing message into the output
maps of the dual network. Therefore, an independent component
analysis with reference algorithm (ICA-R) is employed to extract
target context using prior maps as guidance. Online tracking is
conducted by maximizing the posterior estimate on the ﬁnal maps
with stochastic and periodic update. Quantitative and qualitative
evaluations on two large-scale benchmark data sets show that
the proposed algorithm performs favourably against the state-
of-the-arts.

Index Terms—Visual Tracking, Deep Neural Network, Inde-

pendent Component Analysis with Reference.

I. INTRODUCTION

Visual tracking has long been a fundamental research prob-
lem in computer vision [1]–[8]. In a typical scenario, an
unknown target speciﬁed by a bounding box in the ﬁrst frame
is to be tracked in the subsequent frames. Although numerous
algorithms have been proposed for visual tracking, it remains
a challenging problem for a tracker to handle large appearance
variations, abrupt motion, severe occlusions, and background
clutters. To address these challenges, recent approaches resort
to robust representations such as Haar-like features [5], his-
tograms [6], and sparse features [7]. However, these low-level
hand-crafted features are not effective in capturing semantic
information of targets due to limited discriminative strength
of representation schemes.

Z. Chi and H. Lu are with School of Information and Communication
Engineering, Dalian University of Technology, Dalian 116024, China. Email:
zhizhenchi@gmail.com, lhuchuan@dlut.edu.cn.

H. Li is with Department of Electronic Engineering, The Chinese University

of Hong Kong, Hong Kong. Email: yangli@ee.cuhk.edu.hk.

M. Yang is with University of California at Merced, Merced, CA 95344,

USA. Email: mhyang@ucmerced.edu.

Fig. 1.
Feature map breakdown of different stages. (a) Boundary maps
produced by LoG ﬁlters. The insets show the tracking frames. (b)-(c) Coarse
prior maps from the feature maps in VGG conv4-3 and conv5-3 layers and
the boundary maps. (d)-(e) Integrated maps of the outputs of the dual network
multiplied by the boundary maps. (f)-(g) ICA-R results which combine the
mixed signals (d)(e) with reference (b)(c). Note that maps from (d) to (g) are
visualizations of the tracked targets and resized only for better illustration.

Recent years have witnessed the resurgence of visual repre-
sentation learning from raw pixels using deep convolutional
neural networks (ConvNet) [9], [10]. Driven by the large-
scale visual data sets and fast development of computation
resources, methods based on deep models have achieved state-
of-the-art results in a wide range of vision tasks, such as
image classiﬁcation [9], [11], [12], object detection [13], [14],
saliency detection [15], [16], etc. For visual tracking, one
bottleneck of applying ConvNet is the lack of training data
for a sequence as typically only one labelled bounding box
in the ﬁrst frame is given. Although this problem may be
alleviated by using more data during online update to learn
and reﬁne a generic object model,
it entails a signiﬁcant
increase in computational complexity. An alternative is to
transfer the ConvNet features learned ofﬂine to online tracking
[17]–[19]. However, simply regarding the deep model as
a black box feature extractor may not complement ofﬂine

2

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

training with online tracking, and previous work [20]–[22] do
not distinguish or utilize various information carried among
different levels of layers.

We argue that features at different levels of a ConvNet cap-
ture image properties and should be fully utilized in a proper
manner for visual tracking. It is observed that, on one hand,
features at lower layers encode more ﬁne-grained details to
locate target objects precisely before being pooled or stridden
into deeper layers (see Figure 1(b)); on the other hand, features
at higher layers capture more high-level semantics useful for
discriminating objects from the cluttered background [23] and
are robust to deformation and occlusion (see Figure 1(c)).
These observations motivate us to consider multiple layers of
a ConvNet into tracking to better obtain task-speciﬁc target
features. One may resort to a hypercolumn [24] framework
to combine feature maps of all layers. In fact, two layers
are complementary enough for different hierarchical features.
Stacking more or making net deeper may boost performance1,
but how to combine features from more cascaded layers are
beyond the work of this paper and need more time to tune
(more parameters and overﬁtting problem). As seen in Figure
1(d)-(e), features in the patch after two streams of a dual
network focus on the target being tracked and they can be
further reﬁned with prior feature maps from VGG model in an
ICA with reference manner [25] (see Figure 1(f)-(g)). The ﬁnal
estimation of a target location takes advantages of both high-
level semantics and low-level details from the two streams.

In this paper, we propose a dual network based tracker
(DNT) in a self-supervised learning framework, which in-
corporates both high-level semantic context and low-level
spatial structure from different layers (see Figure 2). First,
we extract the deep features, combine them with the low-
level boundary maps derived from the Laplacian of Gaussian
(LoG) edge detector, and incorporate these features to obtain
a more concise feature map via the independent component
analysis with reference (ICA-R) method [25] (Section III-A).
Second, the dual network training is detailed where center-
shifted random patches are generated to augment the number
of positive training samples (Section III-B). Third, the tracking
framework with deep features is embedded into the motion
and observation model with a module to detect drift and
occlusion (Section III-C). The dual network is updated online
with both stochastic and periodic schemes to address the
drift and occlusion problems (Section III-D). The imple-
mentation of our proposed DNT algorithm is available at
https://github.com/chizhizhen/DNT.

The contributions of this work are summarized as follows:
• Boundary and shape information are embedded within
the deep model framework. Low level texture features
generated by an edge detector are incorporated into the
hierarchical deep features to obtain a coarse prior map.
The salient target contour is improved via the ICA-R
method for a better observation likelihood model.

• A dual network, which extracts representative features

1In fact, we verify in preliminary experiments that simplying stacking the
feature maps of three layers does not perform well than that of using two
layers alone. See Table VII Section IV-D for details.

Fig. 2.
Pipeline of our algorithm. For each frame, a base patch as well
as a bunch of random patches are generated and fed into the dual network
for training. For brevity, we only show the workﬂow of a base patch (random
patches, marked as green, also follow the same procedure). The output feature
maps of the VGG and the dual network are combined with boundary maps to
generate a set of robust feature representations, which are known as reference
and mixed signal, respectively. ICA-R outputs from two streams are combined
to estimate the target location and further used for online tracking where drifts
and occlusion issues can be handled.

from two distinct layers, is proposed. Location translation
is exploited as data augmentation to enable the dual
network for robustly discriminating foreground target
from background clutters.

• Both stochastic and periodic update mechanisms are pre-
sented to handle occlusion or drift during online tracking
and to alleviate issues with noisy updates caused by
inaccurate training samples.

The rest of the paper is organised as follows. In Section II,
we ﬁrst review related work and discuss our improvements.
The feature extraction, online tracking and dual network train-
ing and updating are analysed in Section III. We evaluate the
proposed tracker on two large-scale benchmark data sets [26]–
[28] in Section IV and substantial performance improvement
is achieved over the state-of-the-art methods. Furthermore,
we conduct a series of ablation studies to demonstrate the
effectiveness of each component.

II. RELATED WORK

Most tracking methods can be categorized into either gen-
erative or discriminative model based trackers. In generative
models, candidate regions are searched to select the most prob-
able one as the tracking result. Some representative methods
are based on principal component analysis [2] to model target
appearance. Sparse coding [4], [7] is also introduced using
different dictionaries or regulation terms. A target object is
then reconstructed by a sparse linear combination of target
and trivial templates. In discriminative models, tracking is
considered as a binary classiﬁcation problem to separate the

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

3

target from background. Avidan [29] introduces an optical
ﬂow approach with a SVM classiﬁer for visual
tracking.
The multiple instance learning [30] and structured output
SVM [5] are also applied to visual tracking. Recently, correla-
tion ﬁlters [31]–[34] have been used for efﬁcient and effective
visual tracking. In addition, subsequent algorithms based on
correlation ﬁlters with hand-crafted features (such as HOG
features [34] or color-attributes [35]) considerably improve
tracking accuracy.

Hierarchical feature representations from deep learning have
tracking [18]–[22],
been shown to be effective for visual
[36]–[39]. Wang and Yeung [18] propose a deep learning
approach using a stacked denoising autoencoder where the
model
is trained in an unsupervised fashion on an auxil-
iary data set and directly used for online tracking. On one
hand, image samples used for pretraining are cropped from
frames in a downsampling scanning approach, which leads
to signiﬁcant amount of redundant computation. On the other
hand, features learned ofﬂine from an auxiliary data set may
not adapt well to speciﬁc sequences containing targets for
visual tracking. The DeepTrack [20] method treats tracking
as foreground-background classiﬁcation task with a ConvNet
trained online. Similarly, an online SVM with a pretrained
CNN is presented for visual tracking in [19], and exploits
multiple levels of representations of CNN by back-propagating
target information through the whole network until the image
domain. Such schemes to directly learn two-layer or SVM
classiﬁers require a large number of positive and negative
samples, which is impractical for online tracking. Ma and
Wang et al. [36], [37] analyze different characteristics of
each convolutional layer from which features are combined
to represent target objects. In [37], feature maps derived from
the ofﬂine model are directly used to learn the Kernelized
Correlation Filter without online updating network. In [36],
two online networks with shallow architectures are trained
and updated for feature selection and representation, where
the models can remove unreliable and noisy feature maps to
alleviate the overﬁtting problem. A multi-directional recurrent
neural network is employed in the RTT tracker [39] to capture
long-range contextual cues by traversing a candidate spatial
region from multiple directions.

In this paper, we have tackled three main issues with the
existing deep model based trackers. First, the features used
for tracking are learned from a pretrained CNN on other data
sets. It is obvious that they may not be adaptive to target
appearance in visual tracking. Thus, we train an adaptation
module online for each speciﬁc sequence. Second, texture
details of the target objects are not explicitly considered. In the
papers [36], [37], after feature maps of ConvNets are pooled
or convoluted with consecutive strides, fewer texture details
are preserved and only salient object responses are used for
tracking. Hand-crafted boundary and shape information can
contribute greatly to accurate object localization and can be
integrated with the deep representations to generate better can-
didates during visual tracking. Third, surrounding background
and similar objects around the target objects are not fully
exploited for learning more effective representations. Different
patch translation schemes can be used as the data augmentation

for online training and model update. We address these issues
in the proposed algorithm.

III. DUAL NETWORK TRACKER

A. Deep Feature Extraction with ICA-R

We use the 16-layer VGG model [11] pretrained on the
ImageNet data set as the feature representation, where the net-
work contains 13 convolutional layers and 3 fully-connected
layers. Speciﬁcally, the 10-th and 13-th convolutional layer are
used to extract hierarchical features, denoted as conv4-3 and
conv5-3, respectively. These ConvNet features are integrated
with boundary and shape information during tracking, as well
as fed into the dual network for deeper representations.

V (x, y), gk

Given an input frame I, we convolve it with the Laplacian
of Gaussian ﬁlter [40] and output
the boundary map as
fE. Figure 1(a) shows the boundary maps of four sample
frames. Let gk
D(x, y) denote the output ConvNet
feature maps generated by the VGG network and the dual
network respectively, where k = {1, 2} indicates the layer
index conv4-3 or conv5-3 and x, y denote the spatial
coordinates. The integrated feature maps hk
D, which take
both semantic and boundary information into consideration,
are deﬁned as follows:

V , hk

gk
D = dual_net(gk
hk
V (x, y) = fE(x, y) (cid:12) gk
hk
D(x, y) = fE(x, y) (cid:12) gk

V ),
V (x, y),
D(x, y),

(1)

(2)

(3)

where (cid:12) denotes
the element-wise multiplication, and
dual_net(·) represents the forward passing from the VGG
output as the input to the dual network. These integrated
feature maps provide the boundary information as a guidance
for target localization and serve as the coarse prior maps used
for online tracking. Figure 1(b)-(c) depicts the integrated prior
maps hk
V which combine the deep semantic features and low-
level texture information. Figure 1(d)-(e) shows the integrated
maps hk
D after the dual network multiplied by the boundary
information to have more accurate target locations.

The independent component analysis with reference (ICA-
R) method [25] is developed to extract the desired signal
among source components guided by references. Given the
prior maps hk
D as mixed components
(signals), we seek a projection space s = wT
D to separate
the desired signal. For the tracking task, we derive the ICA-R
results vk(x, y) with a fast one-unit ICA-R algorithm. Its core
idea is to maximize the negentropy J(s) given by

V as reference and hk

I hk

J(s) ≈ ρ(cid:13)
s.t.

(cid:13)E[Q(s)] − E[Q((cid:15))](cid:13)
2
(cid:13)
ε(s, hV ) ≤ ξ

(4)

where Q(x) = log cosh(x) is the non-quadratic function, ρ is
a positive constant, (cid:15) is a Gaussian variable with zero mean
and unit variance, ε(·) is a norm function and E[x] is the
expectation of x. For brevity, we drop the superscript of k in
the notations above. The closeness measure ε(s, hV ) is deﬁned
to achieve its minimum when w = wopt and ξ is a threshold.
To ﬁnd the optical wopt, a Newton-like learning method is
adopted to iteratively update the vector w and details can be

4

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

obtained through the Lagrangian duality theory by introducing
a slack variable and regularization term in [25].

The motivation for using ICA-R is to describe the shape
information of a target object more clearly and robustly after
extracting the deep features. Given Gaussian maps as labels,
we ﬁnd in some cases, the output cannot describe accurate
contour of target. Thus we associate ICA with net outputs to
compensate for shape info. Given hV as a reference to hD,
Gaussian shape is transformed to accurate target shape. With
boundary information considered in fE, the low-level texture
information (shape and boundary) and high-level semantic
context are fully exploited in the feature space. Figure 1(f)-
(g) shows the ICA-R maps vk(x, y), which will be fed into
the observation model in the Bayesian framework for visual
tracking.

B. Dual Deep Network

We formulate a dual (two different functionalities) deep
network, which contains two networks with the same structure
but different weights learned during training, as an adaptation
module to transfer features learned ofﬂine to speciﬁc target
objects. The dual network consists of three convolutional
layers followed by a nonlinear activation. These three con-
volutional layers have 128, 64, 64 convolutional kernels of
size 7 × 7, 5 × 5, 3 × 3, respectively. Note that the output
feature map of the last layer is able to highlight salient objects
from the input patch. We train the dual network with fully
supervised ground truth in the ﬁrst frame of each sequence,
and update the model according to the similarity of the target
appearance in the current and last best tracked frames based
on the fact that the target in these frames should correspond
to the same instance of the moving object. Speciﬁcally, given
an input frame I, we form a patch set SI = {p, ˜p(i)} that
consists of both base and random patches, where i indicates
the index of random patches. A base patch p is centered at
the ground truth in the ﬁrst frame of an image sequence. A
random patch ˜p(i) is a center-shifted version of the base one
via location translation and contains more background clutters
or similar surrounding objects. Random patches are useful for
training in two aspects. First, they cover more background and
distracting objects around the target object. The salient target
object will be well distinguished from background, and the
distracting objects with similar appearance to the target will be
suppressed. Second, considering the scarcity of training data
in visual tracking, these samples serve as data augmentation
to facilitate learning the dual network more effectively.

Figure 3 illustrates different random patches and their output
maps gD accordingly. When random patches are sampled out
of the image boundary, we add zero padding accordingly.
From the examples we observe that the dual network is more
robust to discriminate target from background or distractors at
different locations.

Let m be the input patch and gk

V (m) denotes the output of
the VGG network, we obtain the output of the dual network:

D(m) = dual_net(gk
gk

V (m)),

(5)

where k is the layer index conv4-3 or conv5-3 deﬁned
earlier. In the following, we omit the notation k for presenta-

Examples of center-shifted random patches. (a) Both vertical and
Fig. 3.
horizontal patches are randomly shifted from the base one. Here we use 30
pixels as an illustrative coordinate offset. (b) Heat maps generated by the dual
network based on the corresponding input patches. Here the base patch is the
initial search region cropped from the current frame that contains the object
of interest.

tion clarity. Equipped with the notations aforementioned, we
compute the similarity ranking loss between a base patch and
random patch as:

(cid:96)(p, ˜p(i)) = D(cid:0)gD(p), t(p)(cid:1) + D(cid:0)gD(˜p(i)), t(˜p(i))(cid:1),
where t(·) denotes a 2-dimensional Gaussian target map gen-
erated according to the target location and D(x1, x2) is the
Euclidean distance between two maps.

(6)

The loss function enforces that the target object is dis-
tinguished from the surrounding background, and that
the
distracting objects are suppressed to reduce the risk of drifting
towards similar objects around the target. Note that (6) resem-
bles in some way the approach in [41] where three types of
patches are used: original query patch x in the initial frame of
tracking, tracked patch x+ in the last frame and random patch
x− from other videos, and which are fed into the network for
training. In [41], the model is trained based on a hypothesis
that the distance between the query patch and the tracked
one should be smaller than that between the query patch and
the random one. It is trained in an unsupervised manner for
image classiﬁcation, which differs from our framework in both
conﬁguration and task. The objective function to initially train
the dual network is thereby constructed as follows:

arg min
W

1
N

N
(cid:88)

i=1

(cid:96)(p, ˜p(i)) + β(cid:107)W(cid:107)2
2,

(7)

where W is the weights of the dual network, β indicates the
weight decay and N represents the number of random patches
during one iteration.

C. Target location estimation with occlusion and drifts

Our tracking algorithm is formulated within the Bayesian
framework in which the maximum a posterior estimate is
computed based on the likelihood of the candidate belonging
to the target. Given a new frame, target location is denoted
as Zt = (x, y, σ), where x, y and σ represent the center
coordinates and scale of the bounding box, respectively. The
motion model is assumed to be Gaussian distributed, i.e.,
prob(Zt|Zt−1) = N (Zt; Zt−1, Ψ), where Ψ is the diagonal
covariance matrix that indicates the variance of location and
scale parameters.

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

5

t }R

The sampled candidate regions are normalized to the canon-
ical size maps {M (r)
r=1 with v(r)
(i, j) being the value
derived from (4) at location (i, j) of the r-th candidate at time
t. We omit the notation t in the following context for brevity
and use it when necessary. The value in pixel (r, i, j) is then
normalized as follows:

t

(cid:101)v(r)(i, j) =

(cid:40)

v(r)(i, j),
0,

if pixel (r, i, j) ∈ target,
if pixel (r, i, j) ∈ background.

Hence the conﬁdence of the r-th candidate is computed as the
sum of all the heat map values within the canonical size maps:
C (r ) = (cid:80)

(i,j)∈M (r) (cid:101)v(r)(i, j).

For the tracker to handle large scale variation, we weight

C (r) with respect to the size of each candidate:

(cid:98)C (r) =

s(Z (r)
)
t
s(Z ∗
t−1)

C (r),

(8)

where s(·) represents the area of the candidate region, Z (r)
is
the r-th target location at time t and Z ∗
t−1 being the tracking
result at the last frame. If the target candidates have higher
conﬁdence, the ones with larger area size should be weighted
more. If the target candidates are composed of more zeros
inside, the ones with larger area size should be weighted less.
This weight scheme facilitates the proposed observation model
adaptive to scale variation.

t

We extend the notation from (cid:98)C (r) to (cid:98)C (r,k) where k =
{1, 2} indicates the conﬁdence of the r-th candidate is gener-
ated from the ICA-R maps vk. The ﬁnal target localization is
regarded as a weighted sum from the two hierarchical layers
and computed as:

(cid:98)C ∗

t = arg max

λ (cid:98)C (r,1)

t

+ (1 − λ) (cid:98)C (r,2)

t

,

(9)

r

where λ is a regularization term and ∗ corresponds to the best
candidate state Z ∗
t in the current frame. The target location is
estimated by taking the maximum of (9) considering both two
streams.

Occlusion and Drifts. With the proposed observation model
based on deep features and ICA-R maps, we present an
efﬁcient method to handle occlusion and drift during tracking.
For a given region candidate Z (r)
at time t, the corresponding
conﬁdence score (cid:98)C (r)
is roughly bounded within the range
(cid:2)0, s(Z (r)
)(cid:3). The upper bound indicates that all pixels in the
sample region are assigned with the highest conﬁdence to be
target object, while the lower bound indicates all pixels belong
to the background. We set a threshold θ to detect object drift
or heavy occlusion if the following inequality holds:

t

t

t

µC −

(cid:98)C ∗
t
s(Z ∗
t−1)

< θ,

(10)

where µC is the average conﬁdence score of target estimates.
The numerator of the fraction reﬂects the difference between
the conﬁdence of the current frame and the average conﬁdence
of the target object. The denominator is a normalization term
to conﬁne the fractional results. There are two cases where
the inequality holds:

• The numerator is large, which means the conﬁdence (cid:98)C ∗
t
of the current frame is much larger than the average

Fig. 4. Stochastic online update. (a) 1-st and 10-th, 200-th and 209-th frames
in Lemming. (b) Thresholded target feature maps gD(pK ) that are used in
(11) for subsequent update.

conﬁdence. That means distracting objects similar to the
target object appear in proximity, which may lead to the
tracker drifting to similar objects. With a proper update
mechanism, the proposed tracker is able to recover from
drifts.

• The denominator is small, which means the target object
is occluded by unknown objects and only a few pixels
are assigned with high values. The occluded parts are
weighted less since they are mistaken as background.
Hence we take into consideration the surrounding back-
ground while updating the dual network to adapt the
appearance model to this occlusion case.

D. Online Update

We update the model features to account for appearance
variation, and at the same time maintain the best tracked
target features in the last few frames. One key observation
in visual tracking is that the feature representations for two
best tracked frames should be similar. Our dual network is
updated stochastically and periodically where the former is to
distinguish the target from the background or similar objects,
and the latter is to adapt the dual network to target appearance
and shape variation.

Stochastic Update. Figure 4 shows some intermediate results
during the online update of the stochastic stage. When the
target object is occluded by unknown objects or drifts to
similar distracting objects, i.e., (cid:98)C ∗
t satisﬁes (10), we update
the dual network using the best tracked patch pK in the last
K frames at time t, the current base patch pt as well as the
random patches (cid:101)p(i)
. Note that by using the Gaussian target
map t(·) as labels from different source patches, we train the
dual network in a unique way.

t

Let gD(·) denote the object appearance model by threshold-
ing the object of interest out of gD(·). Clearly the appearance
target gD(pt) is similar to that of
model of the current
the last best tracked target gD(pK). We refer this as "self-
supervised learning" because except updating the dual net with
Gaussian maps, we also update the last best tracked target. The
appearance model, or dual network, is reﬁned by minimizing

6

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

the following objective function:
(cid:96)(pK, pt, ˜p(i)

t ) = D(cid:0)gD(pt), gD(pK)(cid:1)
+(1 − φt)D(cid:0)gD(pt), t(pt)(cid:1) + D(cid:0)gD(˜p(i)
N
(cid:88)

arg min
W

1
N

i=1

(cid:96)(pK, pt, ˜p(i)

t ) + β(cid:107)W(cid:107)2
2,

t ), t(˜p(i)

t )(cid:1),

(11)

(12)

where D is the Euclidean distance function (6), φt is a target
mask indicating whether the r-th candidate Z (r)
belongs to the
target location: φt = 1 if s(Z (r)
) ∈ target, φt = 0 otherwise.
In addition, and β and W are deﬁned in (7).

t

t

The ﬁrst term in (11) implies that we only choose the
best tracked target from the last K frames. The second term
indicates that the appearance model of background region
is only updated in the current frame. When the network is
updated according to (12), there must be occlusions or drifts
near the target object. As such, the estimated location is not
updated since it is not reliable. The third term corresponds
to the loss of random patches which are center-shifted. Over-
all, the combination of different loss functions helps better
separate targets from the background and suppress clutters or
distractors near the objects of interest.

Periodic Update. In addition to the stochastic update, we
reﬁne the dual network at a ﬁxed interval (e.g., 10 frames
in this work) during the whole tracking process. Note that we
take the ﬁrst frame into account because rich information in the
ﬁrst frame should be reserved in the learned model. Therefore,
the loss function is designed to constrain the network to
approximate target appearance in a fully supervised manner
using the Gaussian target map t(·) as labels. The objective
function is deﬁned by

(cid:96)(pK, p1) = D(cid:0)gD(pK), t(pK)(cid:1) + D(cid:0)gD(p1), t(p1)(cid:1),

arg min
W

(cid:96)(pK, p1) + β(cid:107)W(cid:107)2
2.

(13)

(14)

The dual network is updated periodically based on (14)
by taking the ﬁrst frame and last best tracked frame into
consideration in order to make the deep model more adept
to target appearance.

IV. EXPERIMENTS

In this section, we discuss the implementation details and
experimental settings of the proposed DNT tracker. Quantita-
tive and qualitative results on two large-scale tracking bench-
mark data sets (OTB50 [26], OTB100 [28] and VOT2015 [27])
are presented.

A. Implementation Details

Our DNT tracker is implemented based on Caffe [42]
and runs at 5 frames per second on a PC with a 3.4GHz
CPU and a TITAN GPU. The dual network is trained online
with SGD for target localization using the ﬁrst frame for 50
iterations. The initial learning rate is 10−6 with a momentum
of 0.6. To alleviate overﬁtting, the weight decay β in the
objective functions is set uniformly to be 0.005. At each frame,
600 target candidates are randomly sampled. The variance

Fig. 5. Precision (left) and overlap (right) plots for the 11 trackers over the
50 benchmark sequences in OTB50 using one-pass evaluation (OPE), spatial
robustness evaluation (SRE) and temporal robustness evaluation (TRE). The
performance score of precision plot is at error threshold of 20 pixels while
the performance score of success plot is the AUC value. Our DNT tracker
performs favorably against state-of-the-arts.

of candidate location parameters are set to {10, 10, 0.01}
for translation and scale, respectively. We observe that the
ﬁnal target localization is not sensitive to λ in (9). In early
experiments, λ is set from 0.2 to 0.8 and the performance
alters within 2% in OTB50 [26]. Thus we set it 0.4 to pay a
little more attention to semantic information in higher layer. θ
in (10) is set 0.45 empirically through experiments to handle
occlusion and drifts. In each stochastic update, K = 10 is
chosen as the best tracked patch pK in the last K frames. We
ﬁx all the parameters ﬁxed throughout the experiments and
data sets.

B. Evaluation on OTB Data Set

Data Set and Evaluation Settings. The OTB50 data set [26]
includes 50 sequences with 11 various challenging factors
such as illumination variation, deformation, motion blur, scale
variation, etc. We compare with the state-of-the-art trackers,
including Struck [5], SCM [7], TLD [43], MDNet [22],
EBT [44], CNT [45], DSST [33], KCF [34], TPGR [46],
MEEM [8], RTT [39], FCNT [36], SMT [19] and HCF [37],
based on the precision and success scores. One-pass evalua-
tion (OPE), spatial robustness evaluation (SRE) and temporal
robustness evaluation (TRE) are all conducted to thoroughly
evaluate our tracker. Among them, SRE randomizes the initial

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

7

TABLE I
AVERAGE P R E C I S I O N SCORES ON DIFFERENT ATTRIBUTES IN THE OPE EXPERIMENT FOR OTB50. THE BEST AND SECOND RESULTS ARE IN RED AND
GREEN, RESPECTIVELY. THE NUMBER IN THE PARENTHESIS INDICATES THE NUMBER OF SEQUENCES INVOLVED IN THE CORRESPONDING ATTRIBUTE.

RTT

CNT

SMT

DSST

KCF

TGPR MEEM

EBT

SCM

HCF

FCNT

DNT

Illumination variation (25)

Out-of-plane rotation (39)

Scale variation (28)

Occlusion (29)

Deformation (19)

Motion blur (12)

Fast motion (17)

In-plane rotation (31)

Out-of-view (6)

Background cluttered(21)

Low resolution (4)

0.698

0.767

0.721

0.791

0.814

0.687

0.719

0.713

0.854

0.770

0.660

0.566

0.672

0.662

0.662

0.687

0.507

0.500

0.661

0.502

0.646

0.557

0.780

0.830

0.827

0.662

0.858

0.745

0.723

0.836

0.687

0.789

0.705

0.741

0.732

0.740

0.725

0.657

0.603

0.562

0.780

0.533

0.691

0.534

0.728

0.729

0.679

0.749

0.740

0.650

0.602

0.725

0.650

0.753

0.381

0.671

0.678

0.620

0.675

0.691

0.537

0.493

0.675

0.505

0.717

0.538

0.766

0.840

0.785

0.799

0.846

0.715

0.742

0.800

0.727

0.797

0.490

0.814

0.828

0.799

0.574

0.897

0.718

0.746

0.782

0.0.729

0.825

0.713

0.594

0.618

0.672

0.640

0.586

0.339

0.333

0.597

0.429

0.578

0.305

0.844

0.869

0.880

0.877

0.881

0.844

0.790

0.868

0.695

0.885

0.897

0.830

0.831

0.830

0.797

0.917

0.789

0.767

0.811

0.741

0.799

0.765

0.876

0.907

0.893

0.850

0.940

0.824

0.830

0.893

0.810

0.884

0.719

Average

0.660

0.723

0.852

0.739

0.740

0.705

0.830

0.846

0.649

0.891

0.856

0.907

TABLE II
AVERAGE S U C C E S S SCORES ON DIFFERENT ATTRIBUTES IN THE OPE EXPERIMENT FOR OTB50. THE BEST AND SECOND RESULTS ARE IN RED AND
GREEN, RESPECTIVELY. THE NUMBER IN THE PARENTHESIS INDICATES THE NUMBER OF SEQUENCES INVOLVED IN THE CORRESPONDING ATTRIBUTE.

RTT

CNT

SMT

DSST

KCF

TGPR MEEM

EBT

SCM

HCF

FCNT

DNT

Illumination variation (25)

Out-of-plane rotation (39)

Scale variation (28)

Occlusion (29)

Deformation (19)

Motion blur (12)

Fast motion (17)

In-plane rotation (31)

Out-of-view (6)

Background cluttered (21)

Low resolution (4)

0.539

0.566

0.527

0.585

0.628

0.541

0.549

0.529

0.672

0.598

0.508

0.456

0.501

0.508

0.503

0.524

0.417

0.404

0.495

0.439

0.488

0.437

0.556

0.582

0.513

0.563

0.640

0.565

0.545

0.571

0.571

0.593

0.461

0.506

0.491

0.451

0.480

0.474

0.458

0.433

0.532

0.490

0.492

0.352

0.493

0.495

0.427

0.514

0.534

0.497

0.459

0.497

0.550

0.535

0.312

0.484

0.485

0.418

0.484

0.510

0.434

0.396

0.479

0.442

0.522

0.370

0.533

0.558

0.498

0.552

0.560

0.541

0.553

0.535

0.606

0.569

0.360

0.563

0.572

0.533

0.568

0.609

0.544

0.561

0.539

0.562

0.574

0.472

0.473

0.470

0.518

0.487

0.448

0.298

0.296

0.458

0.361

0.450

0.279

0.560

0.587

0.531

0.606

0.626

0.616

0.578

0.582

0.575

0.623

0.557

0.598

0.581

0.558

0.571

0.644

0.580

0.565

0.555

0.592

0.564

0.514

0.650

0.661

0.642

0.641

0.690

0.634

0.635

0.645

0.636

0.652

0.536

Average

0.588

0.545

0.597

0.505

0.514

0.503

0.566

0.586

0.499

0.605

0.599

0.664

TABLE III
TIME COMPLEXITY(FRAMES PER SECOND) OF DIFFERENT DCNN BASED
TRACKERS. NOTE THAT HCFT IS FAST DUE TO A FILTER-BASED TRACKER
SCHEME UNDER FFT DOMAIN.

bounding box by perturbation and TRE randomizes the the
starting frame of the sequence. As additional evaluations to
OPE, SRE and TRE can better demonstrate trackers’ robust-
ness.

All the trackers are ranked according to the center location
error threshold of 20 pixels and the area under curve (AUC)
of success rate plot. The precision plot demonstrates the
percentage of frames where the distance between the estimated
target location and ground truth location is within a given
threshold. Whereas the success plot illustrates the percentage
of frames where the overlap ratio between the estimated
bounding box and ground truth bounding box is higher than
a threshold τ ∈ [0, 1].

Quantitative Evaluation. Figure 5 demonstrates the average
precision plots and success plots on all the 50 sequences of the
top eleven trackers. Our tracker performs favorably among the

state-of-the-arts, which achieves 1.8% and 9.75% gain over the
state-of-the-art trackers on precision and overlap scores in the
OPE. Among the three experiments, SRE is the most difﬁcult
since target object
is initialized with inaccurate locations.
Though all the trackers achieve worse performance, our tracker
can still estimate location and scale accurately with salient
semantics. In the TRE experiment, dual net is initially trained
in different frames, our tracker performs worse than HCF [37]
because target object is missing or partly occluded in some
intermediate frames. The dual net cannot capture the semantic
information of target object. From the ﬁgures, we observe that
the success plots of our method in all the three experiments
are the highest, which demonstrates the effectiveness of the
scale estimation in the DNT tracker. As is known to all, the
success rate plot is much more convincing than the precision
plot in the OTB data set because both location and scale are
evaluated.

Table III shows the time complexity of different Deep
ConvNet based trackers. In our method, most time are spent in
random patch update when occlusion or drift occurs. There can
be a signiﬁcant increase in speed without random patch update,
but the precision will be decreased accordingly. HCFT [37]

8

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

Fig. 6. Precision (left) and overlap (right) plots for the 7 trackers over the
100 sequences in OTB100 using one-pass evaluation (OPE), spatial robustness
evaluation (SRE) and temporal robustness evaluation (TRE). The performance
score of precision plot is at error threshold of 20 pixels while the performance
score of success plot is the AUC value.

and some other correlation ﬁlter based trackers are fast because
they are calculated in the Fourier domain with Fast Fourier
Transform (FFT). They can be regarded as an extension of
KCF [34] tracker.

We also evaluate the tracker performance in terms of indi-
vidual attributes in Table I and II. In terms of precision score,
Table I shows that the proposed DNT algorithm performs
favorably against the state-of-the-art methods in most cases,
such as scale variation, rotation, fast motion, etc. However, the
DNT method performs slightly worse than other trackers in oc-
clusion (Subway, Walking2, Freeman4), motion blur (Jumping,
Woman) and background cluttered (Soccer, Matrix, Ironman).
The main reason is that activation values of target object are
equal to or even lower than the surrounding background.

In terms of success score, Table II shows the DNT algorithm
performs well against the state-of-the-art methods except when
the image resolution is low (Ironman, CarDark, Walking2). In
these sequences, boundary information creates a weak prior
map as reference for ICA-R, which leads to an inaccurate
localization in tracking.

To gain more insights on the effectiveness of the proposed
algorithm, we further report the performance of the top seven
trackers (precision score > 0.7 and success score > 0.5 for
the OPE experiment in OTB50) in the OTB100 data set [28]
with 100 sequences (a supplementary of OTB50), including

Fig. 7.
Average precision and success scores of the 7 trackers under
different attributes of the sequences in OTB100 using one-pass evaluation
(OPE), including illumination variation (IV), out-of-plane rotation (OPR),
scale variation (SV), occlusion (OCC), deformation (DEF), motion blur (MB),
fast motion (FM), in-plane rotation (IPR), out-of-view (OV), background
cluttered (BC) and low resolution (LR).

DSST [33], KCF [34], TPGR [46], MEEM [8], FCNT [36],
and HCF [37] and the proposed DNT tracker. Figure 6
demonstrates the average precision plots and success plots
on the 100 sequences of the top seven trackers. The OPE,
SRE and TRE plots share the same spirit with the evaluations
in OTB50. Our method can estimate both location and scale
accurately compared with other trackers.

To facilitate more detailed analysis, we analyse the perfor-
mance of these trackers on different attributes in ﬁgure 7. The
DNT tracker can well handle various challenging factors and
consistently outperform the other six trackers in almost all the
attributes.

Qualitative Evaluation. Figure 9 shows some visual results
compared with other state-of-the-art trackers. The even rows
are the combined ICA-R maps vk, k = {1, 2} with a weighted
coefﬁcient λ as (9) for target localization. The semantic infor-
mation and clear outline of the tracking targets are highlighted
with the help of ConvNet features and boundary guidance. It
is worth mentioning that in the most challenging sequences
such as MotorRolling and Skating (row 1), most methods fail
to track targets well whereas our DNT algorithm performs
accurately in terms of either precision or overlap; For the most
representative sequences for scaling (row 3), other trackers

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

9

TABLE IV
THE AVERAGE RANKS OF ACCURACY AND ROBUSTNESS UNDER BASELINE AND OVERALL EXPERIMENTS IN VOT2015 [27]. WE RANK ALL THE
TRACKERS ACCORDING TO THE VOT ARTICLE REPORT FROM TOP TO DOWN. THE FIRST, SECOND AND THIRD BEST METHODS ARE HIGHLIGHTED IN
RED, BLUE, GREEN COLORS, RESPECTIVELY.

baseline

Overall

Acc. Rank

Rob. Rank

Acc. Rank

Rob. Rank

Trackers

DeepSRDCF

EBT

DNT

LDP

sPST

struck

s3tracker

sumshift

DAT

MEEM

RobStruck

MCT

2.73

7.35

3.42

5.68

4.52

6.07

4.25

5.08

7.12

5.00

5.78

6.33

Expected
overlap

0.3057

0.3003

0.2748

0.2693

0.2570

0.2387

0.2335

0.2280

0.2128

0.2106

0.2079

0.2076

4.23

3.80

6.03

6.50

6.55

7.07

8.08

8.12

10.18

8.72

7.22

9.90

2.73

7.35

3.42

5.68

4.52

6.07

4.25

5.08

7.12

5.00

5.78

6.33

4.23

3.80

6.03

6.50

6.55

7.07

8.08

8.12

10.18

8.72

7.22

9.90

set [27] contains 60 video sequences showing various objects
in challenging background. The sequences are chosen from a
large pool of real-life data sets. According to the evaluation
criterion, the proposed tracker is re-initialized with the ground
truth location whenever tracking fails (the overlap between
the estimated location and ground truth location equals to
zero). Following [27], we conduct two experiments: baseline
and Overall evaluation, the trackers are initialized with the
ground truth location. Two metrics are used to rank all the
trackers: accuracy and robustness. Accuracy measures the
overlap ratio between the estimated and ground truth bounding
box, while robustness measures the probability of tracking
failures. We evaluate the proposed DNT tracker with all the
trackers submitted to VOT2015 challenge [27]. More details
about the evaluation protocol and compared trackers can be
found in [27].

Evaluation Results. Considering the limited space, we only
present the average accuracy and robustness rank of the top
twelve trackers in Table IV. In general, the proposed DNT
tracker ranks the 3rd in the VOT2015 challenge [27]. In both
the baseline and Overall experiments, DNT performs well
compared with other state-of-the-art trackers. We mainly fail in
some sequences such as ﬁsh1-4, leaves, octopus et al. Because
the target is quite small and similar to surrounding distractors,
the dual net can hardly achieve the semantic information,
which leads to drifting easily. In such cases, the features on the
lower layers of CNN model are able to track target better since
ﬁne-grained spatial information weighs more. For the soldier
and sheep sequences, when long-term occlusions happen, the
proposed method fails to learn the appearance model well
since there is no additional detection mechanism.

Figure 8 shows the accuracy and robustness plots for the top
24 trackers in the VOT2015 data set [27]. The best tracker is
located at the upper-right corner. From the ﬁgures we conclude
that the DNT method performs favorably against the other
methods.

Fig. 8.
The robustness-accuracy ranking plots of the 24 leading trackers
under the baseline evaluation in the VOT2015 data set. The better trackers
are located at the upper-right corner.

are capable to follow a part of target object, but drift away
when the target objects undergo large scale variation. Despite
these challenges, the DNT algorithm accurately estimates both
scales and positions of target objects;

For the sequences (row 5) to deal with weak network
activations, the target objects are similar to background in
appearance. Even though semantics cannot be highlighted in
the higher layers, the ﬁne-grained spatial details are kept for
accurate localization;

Among these sequences, despite fast motion and signiﬁcant
distractors, the proposed algorithm can still track the target
object with the help of high-level features of targets from the
dual network.

C. Evaluation on VOT2015

Data Set and Evaluation Settings. The VOT2015 data

10

SUBMITTED TO IEEE TRANSACTIONS ON IMAGE PROCESSING.

Fig. 9. Qualitative evaluation of our algorithm DNT, FCNT [36], MEEM [8], KCF [34], HCF [37], DLT [18]. Six challenging sequences (from left to
right and top to down are MotorRolling, Skating, CarScale, Doll, Singer2, Shaking, respectively) are compared among the state-of-the-art trackers. Odd row:
Comparisons with state-of-the-art trackers. Even row: Combined ICA-R maps with a weighted coefﬁcient.

TABLE V
ABLATION STUDY OF DIFFERENT COMPONENTS OF THE DNT TRACKER.
THE PRECISION AND OVERLAP ARE REPORTED ON THE BENCHMARK DATA
SET [26].

TABLE VI
ABLATION STUDY OF DIFFERENT STRATEGIES UNDER DIFFERENT
ATTRIBUTES OF THE DNT TRACKER. DNTB DENOTES WITHOUT
BOUNDARY GUIDANCE AND DNTR INDICATES WITHOUT RANDOM
UPDATE. THE PRECISION AND OVERLAP ARE REPORTED ON THE
BENCHMARK DATA SET [26].

D. Ablation Study

First, we demonstrate the effectiveness of boundary infor-
mation, ICA-R, random samples and the stochastic update
mechanism in training and updating the network. We use the
DNT tracker as the baseline comparison where the feature
representation descends from conv4-3 and conv5-3 of the
VGG network in the OTB50 date set [26]. We compare the
proposed DNT algorithm with variants without boundary in-
formation, without ICA-R, without updating random samples
and without stochastic update. Table V shows that the full
functionality DNT algorithm with all the components performs
much better than other variants. We have also analysed the
importance of boundary information and random update mech-
anism on different tracking challenges. Table VI shows the
average precision and success scores on different attributes in
the OPE experiment for OTB50 [26]. DNTB and DNTR denote
two variations of the DNT tracker without boundary reference
and without random sample update.

Second, we analyze the feature selection from different

TABLE VII
ABLATION STUDY OF FEATURE COMBINATION AMONG LAYERS. THE
PRECISION AND OVERLAP ARE REPORTED ON THE BENCHMARK DATA
SET [26].

layers to represent target objects (Table VII). The reason as for
using conv4-3 and conv5-3 as the feature extraction layers
is based on the empirical analysis that clear outlines of target
objects can be obtained. Table VII shows that the tracker using
a dual layer outperforms that with one single layer because
both semantic and ﬁne-grained cues are considered. We have
also conducted the experiment with conv3-3, conv4-3 and
conv5-3 features, λ in (9) is set [0.2, 0.3, 0.5] for each

CHI, et al.: DUAL DEEP NETWORK FOR VISUAL TRACKING.

11

layer. The performance is not so good as our base tracker
because the outline of target object can hardly be reserved
in conv3-3. In addition, the trackers using features from
higher layers perform better than those using features from
lower layers, which shows that semantic appearance plays an
important role for visual tracking.

V. CONCLUSION

In this paper, we propose an effective hierarchical feature
learning algorithm for visual tracking. We ofﬂine learn pow-
erful ConvNet features from the VGG network on a large-
scale data set. Both higher layer features with semantics and
lower layers with spatial structure are used for visual tracking.
the two streams of
Integrated with boundary information,
features are able to delineate a coarse prior map of the target
object. These features serve as reference to extract better
target appearance model by the ICA-R method. The dual
network is trained and updated as an adaptation module to
ﬁne-tune the ConvNet features for speciﬁc target object. We
put forward a course-to-ﬁne strategy to locate target and a
self-supervised scheme to update the dual network. Massive
quantitative and qualitative experiments against the state-of-
the-art algorithms based on OTB and VOT2015 data sets
demonstrate the accuracy and robustness of the proposed
method.

REFERENCES

[1] X. Ren and J. Malik, “Tracking as repeated ﬁgure/ground segmentation,”

in CVPR, 2007, pp. 1–8.

[2] D. A. Ross, J. Lim, R.-S. Lin, and M.-H. Yang, “Incremental learning
for robust visual tracking,” IJCV, vol. 77, no. 1-3, pp. 125–141, 2008.
[3] H. Grabner, C. Leistner, and H. Bischof, “Semi-supervised on-line

boosting for robust tracking,” in ECCV, 2008, pp. 234–247.

[4] X. Mei and H. Ling, “Robust visual tracking using l1 minimization,” in

CVPR, 2009, pp. 1436–1443.

[5] S. Hare, A. Saffari, and P. H. Torr, “Struck: Structured output tracking

with kernels,” in ICCV, 2011, pp. 263–270.

[6] X. Jia, H. Lu, and M.-H. Yang, “Visual tracking via adaptive structural
local sparse appearance model,” in CVPR, 2012, pp. 1822–1829.
[7] W. Zhong, H. Lu, and M. Yang, “Robust object tracking via sparse
collaborative appearance model,” TIP, vol. 23, no. 5, pp. 2356–2368,
2014.

[8] J. Zhang, S. Ma, and S. Sclaroff, “Meem: Robust tracking via multiple
experts using entropy minimization,” in ECCV, 2014, pp. 188–203.
[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Imagenet classiﬁcation
with deep convolutional neural networks,” in NIPS, 2012, pp. 1106–
1114.

[10] H. Li, W. Ouyang, and X. Wang, “Multi-bias non-linear activation
in deep neural networks,” in International Conference on Machine
Learning, 2016.

[11] K. Simonyan and A. Zisserman, “Very deep convolutional networks for
large-scale image recognition,” arXiv preprint: 1409.1556, 2014.
[12] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image

recognition,” CVPR, 2016.

[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik, “Rich feature
hierarchies for accurate object detection and semantic segmentation,”
in CVPR, 2014, pp. 580–587.

[14] R. Girshick, “Fast r-cnn,” in ICCV, 2015.
[15] H. Li, H. Lu, Z. Lin, X. Shen, and B. Price, “Inner and inter label
propagation: Salient object detection in the wild,” IEEE Transactions
on Image Processing, vol. 24, no. 10, pp. 3176–3186, 2015.

[16] H. Li, J. Chen, H. Lu, and Z. Chi, “CNN for saliency detection with

low-level feature integration,” Elsevier Neurocomputing, 2016.

[17] Q. Wang, F. Chen, J. Yang, W. Xu, and M.-H. Yang, “Transferring visual
prior for online object tracking,” TIP, vol. 21, no. 7, pp. 3296–3305,
2012.

[18] N. Wang and D. Yeung, “Learning a deep compact image representation

for visual tracking,” in NIPS, 2013, pp. 809–817.

[19] S. Hong, T. You, S. Kwak, and B. Han, “Online tracking by learning
discriminative saliency map with convolutional neural network,” in
ICML, 2015.

[20] H. Li, Y. Li, and F. Porikli, “Deeptrack: Learning discriminative feature
representations by convolutional neural networks for visual tracking,” in
BMVC, 2014.

[21] L. Wang, T. Liu, G. Wang, K. L. Chan, and Q. Yang, “Video tracking
using learned hierarchical features,” TIP, vol. 24, no. 4, pp. 1424–1435,
2015.

[22] H. Nam and B. Han, “Learning multi-domain convolutional neural

networks for visual tracking,” CVPR, 2016.

[23] J. H. Bappy and A. K. Roy-Chowdhury, “Cnn based region proposals

for efﬁcient object detection,” in ICIP, 2016, pp. 3658–3662.

[24] B. Hariharan, P. Arbeláez, R. Girshick, and J. Malik, “Hypercolumns
for object segmentation and ﬁne-grained localization,” in CVPR, 2014.
[25] W. Lu and J. C. Rajapakse, “ICA with reference,” Neurocomputing,

vol. 69, no. 16-18, pp. 2244–2257, 2006.

[26] Y. Wu, J. Lim, and M.-H. Yang, “Onine object tracking: A benchmark,”

in CVPR.

IEEE, 2013, pp. 2411–2418.

[27] M. Kristan, J. Matas, A. Leonardis, M. Felsberg, L. Cehovin, G. Fer-
nandez, T. Vojir, G. Hager, G. Nebehay, and R. Pﬂugfelder, “The visual
object tracking vot2015 challenge results,” in ECCV Workshops, 2015.
[28] Y. Wu, J. Lim, and M.-H. Yang, “Object tracking benchmark,” TPAMI,

vol. 37, no. 9, pp. 1834–1848, 2015.

[29] S. Avidan, “Support vector tracking,” TPAMI, vol. 26, no. 8, pp. 1064–

1072, 2004.

[30] B. Babenko, M.-H. Yang, and S. Belongie, “Robust object tracking with
online multiple instance learning,” TPAMI, vol. 33, no. 8, pp. 1619–1632,
2011.

[31] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista, “Exploiting
the circulant structure of tracking-by-detection with kernels,” in ECCV,
2012, pp. 702–715.

[32] D. S. Bolme, J. R. Beveridge, B. Draper, Y. M. Lui et al., “Visual
object tracking using adaptive correlation ﬁlters,” in CVPR, 2010, pp.
2544–2550.

[33] M. Danelljan, G. Häger, F. Khan, and M. Felsberg, “Accurate scale

estimation for robust visual tracking,” in BMVC, 2014.

[34] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista, “High-speed
tracking with kernelized correlation ﬁlters,” TPAMI, vol. 37, no. 3, pp.
583–596, 2015.

[35] M. Danelljan, F. S. Khan, M. Felsberg, and J. van de Weijer, “Adaptive
color attributes for real-time visual tracking,” in CVPR, 2014, pp. 1090–
1097.

[36] L. Wang, W. Ouyang, X. Wang, and H. Lu, “Visual tracking with fully

convolutional networks,” in ICCV, 2015, pp. 3119–3127.

[37] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang, “Hierarchical convolu-
tional features for visual tracking,” in ICCV, 2015, pp. 3074–3082.
[38] P. Ondruska and I. Posner, “Deep tracking: Seeing beyond seeing using

recurrent neural networks,” arXiv preprint:1602.00991, 2016.

[39] Z. Cui, S. Xiao, J. Feng, and S. Yan, “Recurrently target-attending

tracking,” in CVPR, 2016, pp. 1449–1458.

[40] D. Marr and E. Hildreth, “Theory of edge detection,” Proceedings of
the Royal Society of London B: Biological Sciences, vol. 207, no. 1167,
pp. 187–217, 1980.

[41] X. Wang and A. Gupta, “Unsupervised learning of visual representations

using videos,” in ICCV, 2015, pp. 2794–2802.

[42] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,
S. Guadarrama, and T. Darrell, “Caffe: Convolutional architecture for
fast feature embedding,” in ACM Multimedia, 2014, pp. 675–678.
[43] Z. Kalal, K. Mikolajczyk, and J. Matas, “Tracking-learning-detection,”

TPAMI, vol. 34, no. 7, pp. 1409–1422, 2012.
[44] G. Zhu, F. Porikli, and H. Li, “Robust visual

tracking with deep
convolutional neural network based object proposals on pets,” in CVPR
Workshops, 2016, pp. 26–33.

[45] K. Zhang, Q. Liu, Y. Wu, and M.-H. Yang, “Robust visual tracking
via convolutional networks without training,” TIP, vol. 25, no. 4, pp.
1779–1792, 2016.

[46] J. Gao, H. Ling, W. Hu, and J. Xing, “Transfer learning based visual
tracking with gaussian processes regression,” in ECCV, 2014, pp. 188–
203.

