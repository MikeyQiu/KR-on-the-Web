Unsupervised Learning of Depth and Ego-Motion from Video

Tinghui Zhou∗
UC Berkeley

Matthew Brown
Google

Noah Snavely
Google

David G. Lowe
Google

7
1
0
2
 
g
u
A
 
1
 
 
]

V
C
.
s
c
[
 
 
2
v
3
1
8
7
0
.
4
0
7
1
:
v
i
X
r
a

Abstract

We present an unsupervised learning framework for the
task of monocular depth and camera motion estimation
from unstructured video sequences.
In common with re-
cent work [10, 14, 16], we use an end-to-end learning ap-
In
proach with view synthesis as the supervisory signal.
contrast to the previous work, our method is completely un-
supervised, requiring only monocular video sequences for
training. Our method uses single-view depth and multi-
view pose networks, with a loss based on warping nearby
views to the target using the computed depth and pose. The
networks are thus coupled by the loss during training, but
can be applied independently at test time. Empirical eval-
uation on the KITTI dataset demonstrates the effectiveness
of our approach: 1) monocular depth performs comparably
with supervised methods that use either ground-truth pose
or depth for training, and 2) pose estimation performs fa-
vorably compared to established SLAM systems under com-
parable input settings.

1. Introduction

Humans are remarkably capable of inferring ego-motion
and the 3D structure of a scene even over short timescales.
For instance, in navigating along a street, we can easily
locate obstacles and react quickly to avoid them. Years
of research in geometric computer vision has failed to
recreate similar modeling capabilities for real-world scenes
(e.g., where non-rigidity, occlusion and lack of texture are
present). So why do humans excel at this task? One hypoth-
esis is that we develop a rich, structural understanding of the
world through our past visual experience that has largely
consisted of moving around and observing vast numbers of
scenes and developing consistent modeling of our observa-
tions. From millions of such observations, we have learned
about the regularities of the world—roads are ﬂat, buildings
are straight, cars are supported by roads etc., and we can
apply this knowledge when perceiving a new scene, even
from a single monocular image.

∗The majority of the work was done while interning at Google.

Figure 1. The training data to our system consists solely of un-
labeled image sequences capturing scene appearance from differ-
ent viewpoints, where the poses of the images are not provided.
Our training procedure produces two models that operate inde-
pendently, one for single-view depth prediction, and one for multi-
view camera pose estimation.

In this work, we mimic this approach by training a model
that observes sequences of images and aims to explain its
observations by predicting likely camera motion and the
scene structure (as shown in Fig. 1). We take an end-to-
end approach in allowing the model to map directly from
input pixels to an estimate of ego-motion (parameterized as
6-DoF transformation matrices) and the underlying scene
structure (parameterized as per-pixel depth maps under a
reference view). We are particularly inspired by prior work
that has suggested view synthesis as a metric [44] and recent
work that tackles the calibrated, multi-view 3D case in an
end-to-end framework [10]. Our method is unsupervised,
and can be trained simply using sequences of images with
no manual labeling or even camera motion information.

Our approach builds upon the insight that a geomet-
ric view synthesis system only performs consistently well
when its intermediate predictions of the scene geometry
and the camera poses correspond to the physical ground-

1

truth. While imperfect geometry and/or pose estimation
can cheat with reasonable synthesized views for certain
types of scenes (e.g., textureless), the same model would
fail miserably when presented with another set of scenes
with more diverse layout and appearance structures. Thus,
our goal is to formulate the entire view synthesis pipeline
as the inference procedure of a convolutional neural net-
work, so that by training the network on large-scale video
data for the ‘meta’-task of view synthesis the network is
forced to learn about intermediate tasks of depth and cam-
era pose estimation in order to come up with a consistent
explanation of the visual world. Empirical evaluation on
the KITTI [15] benchmark demonstrates the effectiveness
of our approach on both single-view depth and camera pose
estimation. Our code will be made available at https:
//github.com/tinghuiz/SfMLearner.

2. Related work

Structure from motion The simultaneous estimation of
structure and motion is a well studied problem with an estab-
lished toolchain of techniques [12, 50, 38]. Whilst the traditional
toolchain is effective and efﬁcient in many cases, its reliance on ac-
curate image correspondence can cause problems in areas of low
texture, complex geometry/photometry, thin structures, and occlu-
sions. To address these issues, several of the pipeline stages have
been recently tackled using deep learning, e.g., feature match-
ing [18], pose estimation [26], and stereo [10, 27, 53]. These
learning-based techniques are attractive in that they are able to
leverage external supervision during training, and potentially over-
come the above issues when applied to test data.

Warping-based view synthesis One important application
of geometric scene understanding is the task of novel view syn-
thesis, where the goal is to synthesize the appearance of the scene
seen from novel camera viewpoints. A classic paradigm for view
synthesis is to ﬁrst either estimate the underlying 3D geometry
explicitly or establish pixel correspondence among input views,
and then synthesize the novel views by compositing image patches
from the input views (e.g., [4, 55, 43, 6, 9]). Recently, end-to-
end learning has been applied to reconstruct novel views by trans-
forming the input based on depth or ﬂow, e.g., DeepStereo [10],
Deep3D [51] and Appearance Flows [54]. In these methods, the
underlying geometry is represented by quantized depth planes
(DeepStereo), probabilistic disparity maps (Deep3D) and view-
dependent ﬂow ﬁelds (Appearance Flows), respectively. Unlike
methods that directly map from input views to the target view
(e.g., [45]), warping-based methods are forced to learn intermedi-
ate predictions of geometry and/or correspondence. In this work,
we aim to distill such geometric reasoning capability from CNNs
trained to perform warping-based view synthesis.

Learning single-view 3D from registered 2D views Our
work is closely related to a line of recent research on learning
single-view 3D inference from registered 2D observations. Garg et
al. [14] propose to learn a single-view depth estimation CNN us-
ing projection errors to a calibrated stereo twin for supervision.
Concurrently, Deep3D [51] predicts a second stereo viewpoint

from an input image using stereoscopic ﬁlm footage as training
data. A similar approach was taken by Godard et al. [16], with
the addition of a left-right consistency constraint, and a better ar-
chitecture design that led to impressive performance. Like our
approach, these techniques only learn from image observations of
the world, unlike methods that require explicit depth for training,
e.g., [20, 42, 7, 27, 30].

These techniques bear some resemblance to direct methods for
structure and motion estimation [22], where the camera parame-
ters and scene depth are adjusted to minimize a pixel-based error
function. However, rather than directly minimizing the error to
obtain the estimation, the CNN-based methods only take a gradi-
ent step for each batch of input instances, which allows the net-
work to learn an implicit prior from a large corpus of related im-
agery. Several authors have explored building differentiable ren-
dering operations into their models that are trained in this way,
e.g., [19, 29, 34].

While most of the above techniques (including ours) are mainly
focused on inferring depth maps as the scene geometry output, re-
cent work (e.g., [13, 41, 46, 52]) has also shown success in learn-
ing 3D volumetric representations from 2D observations based on
similar principles of projective geometry. Fouhey et al. [11] fur-
ther show that it is even possible to learn 3D inference without 3D
labels (or registered 2D views) by utilizing scene regularity.

Unsupervised/Self-supervised learning from video An-
other line of related work to ours is visual representation learning
from video, where the general goal is to design pretext tasks for
learning generic visual features from video data that can later be
re-purposed for other vision tasks such as object detection and se-
mantic segmentation. Such pretext tasks include ego-motion esti-
mation [2, 24], tracking [49], temporal coherence [17], temporal
order veriﬁcation [36], and object motion mask prediction [39].
While we focus on inferring the explicit scene geometry and
ego-motion in this work, intuitively, the internal representation
learned by the deep network (especially the single-view depth
CNN) should capture some level of semantics that could gener-
alize to other tasks as well.

Concurrent to our work, Vijayanarasimhan et al. [48] indepen-
dently propose a framework for joint training of depth, camera
motion and scene motion from videos. While both methods are
conceptually similar, ours is focused on the unsupervised aspect,
whereas their framework adds the capability to incorporate super-
vision (e.g., depth, camera motion or scene motion). There are
signiﬁcant differences in how scene dynamics are modeled during
training, in which they explicitly solve for object motion whereas
our explainability mask discounts regions undergoing motion, oc-
clusion and other factors.

3. Approach

Here we propose a framework for jointly training a single-view
depth CNN and a camera pose estimation CNN from unlabeled
video sequences. Despite being jointly trained, the depth model
and the pose estimation model can be used independently during
test-time inference. Training examples to our model consist of
short image sequences of scenes captured by a moving camera.
While our training procedure is robust to some degree of scene

Figure 2. Overview of the supervision pipeline based on view syn-
thesis. The depth network takes only the target view as input, and
outputs a per-pixel depth map ˆDt. The pose network takes both the
target view (It) and the nearby/source views (e.g., It−1 and It+1)
as input, and outputs the relative camera poses ( ˆTt→t−1, ˆTt→t+1).
The outputs of both networks are then used to inverse warp the
source views (see Sec. 3.2) to reconstruct the target view, and the
photometric reconstruction loss is used for training the CNNs. By
utilizing view synthesis as supervision, we are able to train the
entire framework in an unsupervised manner from videos.

motion, we assume that the scenes we are interested in are mostly
rigid, i.e., the scene appearance change across different frames is
dominated by the camera motion.

3.1. View synthesis as supervision

The key supervision signal for our depth and pose prediction
CNNs comes from the task of novel view synthesis: given one
input view of a scene, synthesize a new image of the scene seen
from a different camera pose. We can synthesize a target view
given a per-pixel depth in that image, plus the pose and visibility
in a nearby view. As we will show next, this synthesis process can
be implemented in a fully differentiable manner with CNNs as the
geometry and pose estimation modules. Visibility can be handled,
along with non-rigidity and other non-modeled factors, using an
“explanability” mask, which we discuss later (Sec. 3.3).

Let us denote < I1, . . . , IN > as a training image sequence
with one of the frames It being the target view and the rest being
the source views Is(1 ≤ s ≤ N, s (cid:54)= t). The view synthesis
objective can be formulated as

Figure 3. Illustration of the differentiable image warping process.
For each point pt in the target view, we ﬁrst project it onto the
source view based on the predicted depth and camera pose, and
then use bilinear interpolation to obtain the value of the warped
image ˆIs at location pt.

framework can be applied to standard videos without pose infor-
mation. Furthermore, it predicts the poses as part of the learning
framework. See Figure 2 for an illustration of our learning pipeline
for depth and pose estimation.

3.2. Differentiable depth image-based rendering

As indicated in Eq. 1, a key component of our learning frame-
work is a differentiable depth image-based renderer that recon-
structs the target view It by sampling pixels from a source view Is
based on the predicted depth map ˆDt and the relative pose ˆTt→s.
Let pt denote the homogeneous coordinates of a pixel in the
target view, and K denote the camera intrinsics matrix. We can
obtain pt’s projected coordinates onto the source view ps by2

ps ∼ K ˆTt→s ˆDt(pt)K −1pt

(2)

Notice that the projected coordinates ps are continuous values. To
obtain Is(ps) for populating the value of ˆIs(pt) (see Figure 3),
we then use the differentiable bilinear sampling mechanism pro-
posed in the spatial transformer networks [23] that linearly in-
terpolates the values of the 4-pixel neighbors (top-left, top-right,
bottom-left, and bottom-right) of ps to approximate Is(ps), i.e.
ˆIs(pt) = Is(ps) = (cid:80)
s ), where wij is
linearly proportional to the spatial proximity between ps and pij
s ,
and (cid:80)
i,j wij = 1. A similar strategy is used in [54] for learning
to directly warp between different views, while here the coordi-
nates for pixel warping are obtained through projective geometry
that enables the factorization of depth and camera pose.

i∈{t,b},j∈{l,r} wijIs(pij

Lvs =

(cid:88)

(cid:88)

s

p

|It(p) − ˆIs(p)| ,

(1)

3.3. Modeling the model limitation

where p indexes over pixel coordinates, and ˆIs is the source view
Is warped to the target coordinate frame based on a depth image-
based rendering module [8] (described in Sec. 3.2), taking the pre-
dicted depth ˆDt, the predicted 4×4 camera transformation matrix1
ˆTt→s and the source view Is as input.

Note that the idea of view synthesis as supervision has also
been recently explored for learning single-view depth estima-
tion [14, 16] and multi-view stereo [10]. However, to the best of
our knowledge, all previous work requires posed image sets dur-
ing training (and testing too in the case of DeepStereo), while our

Note that when applied to monocular videos the above view
synthesis formulation implicitly assumes 1) the scene is static
without moving objects; 2) there is no occlusion/disocclusion be-
tween the target view and the source views; 3) the surface is Lam-
bertian so that the photo-consistency error is meaningful. If any
of these assumptions are violated in a training sequence, the gra-
dients could be corrupted and potentially inhibit training. To im-
prove the robustness of our learning pipeline to these factors, we
additionally train a explainability prediction network (jointly and
simultaneously with the depth and pose networks) that outputs a
per-pixel soft mask ˆEs for each target-source pair, indicating the

1In practice, the CNN estimates the Euler angles and the 3D translation

2For notation simplicity, we omit showing the necessary conversion to

vector, which are then converted to the transformation matrix.

homogeneous coordinates along the steps of matrix multiplication.

Figure 4. Network architecture for our depth/pose/explainability prediction modules. The width and height of each rectangular block indi-
cates the output channels and the spatial dimension of the feature map at the corresponding layer respectively, and each reduction/increase
in size indicates a change by the factor of 2. (a) For single-view depth, we adopt the DispNet [35] architecture with multi-scale side pre-
dictions. The kernel size is 3 for all the layers except for the ﬁrst 4 conv layers with 7, 7, 5, 5, respectively. The number of output channels
for the ﬁrst conv layer is 32. (b) The pose and explainabilty networks share the ﬁrst few conv layers, and then branch out to predict 6-DoF
relative pose and multi-scale explainability masks, respectively. The number of output channels for the ﬁrst conv layer is 16, and the kernel
size is 3 for all the layers except for the ﬁrst two conv and the last two deconv/prediction layers where we use 7, 5, 5, 7, respectively. See
Section 3.5 for more details.

network’s belief in where direct view synthesis will be success-
fully modeled for each target pixel. Based on the predicted ˆEs,
the view synthesis objective is weighted correspondingly by

Lvs =

(cid:88)

(cid:88)

ˆEs(p)|It(p) − ˆIs(p)| .

(3)

<I1,...,IN >∈S

p

Since we do not have direct supervision for ˆEs, training with the
above loss would result in a trivial solution of the network always
predicting ˆEs to be zero, which perfectly minimizes the loss. To
resolve this, we add a regularization term Lreg( ˆEs) that encour-
ages nonzero predictions by minimizing the cross-entropy loss
with constant label 1 at each pixel location. In other words, the
network is encouraged to minimize the view synthesis objective,
but allowed a certain amount of slack for discounting the factors
not considered by the model.

3.4. Overcoming the gradient locality

One remaining issue with the above learning pipeline is that the
gradients are mainly derived from the pixel intensity difference be-
tween I(pt) and the four neighbors of I(ps), which would inhibit
training if the correct ps (projected using the ground-truth depth
and pose) is located in a low-texture region or far from the current
estimation. This is a well known issue in motion estimation [3].
Empirically, we found two strategies to be effective for overcom-
ing this issue: 1) using a convolutional encoder-decoder architec-
ture with a small bottleneck for the depth network that implicitly
constrains the output to be globally smooth and facilitates gradi-
ents to propagate from meaningful regions to nearby regions; 2)

explicit multi-scale and smoothness loss (e.g., as in [14, 16]) that
allows gradients to be derived from larger spatial regions directly.
We adopt the second strategy in this work as it is less sensitive to
architectural choices. For smoothness, we minimize the L1 norm
of the second-order gradients for the predicted depth maps (similar
to [48]).

Our ﬁnal objective becomes

Lf inal =

Ll

vs + λsLl

smooth + λe

Lreg( ˆEl

s) ,

(4)

(cid:88)

l

(cid:88)

s

where l indexes over different image scales, s indexes over source
images, and λs and λe are the weighting for the depth smoothness
loss and the explainability regularization, respectively.

3.5. Network architecture

Single-view depth For single-view depth prediction, we adopt
the DispNet architecture proposed in [35] that is mainly based on
an encoder-decoder design with skip connections and multi-scale
side predictions (see Figure 4). All conv layers are followed by
ReLU activation except for the prediction layers, where we use
1/(α ∗ sigmoid(x) + β) with α = 10 and β = 0.01 to con-
strain the predicted depth to be always positive within a reason-
able range. We also experimented with using multiple views as
input to the depth network, but did not ﬁnd this to improve the
results. This is in line with the observations in [47], where opti-
cal ﬂow constraints need to be enforced to utilize multiple views
effectively.

Pose The input to the pose estimation network is the target view
concatenated with all the source views (along the color channels),
and the outputs are the relative poses between the target view and
each of the source views. The network consists of 7 stride-2 con-
volutions followed by a 1 × 1 convolution with 6 ∗ (N − 1) output
channels (corresponding to 3 Euler angles and 3-D translation for
each source view). Finally, global average pooling is applied to
aggregate predictions at all spatial locations. All conv layers are
followed by ReLU except for the last layer where no nonlinear
activation is applied.

Explainability mask The explainability prediction network
shares the ﬁrst ﬁve feature encoding layers with the pose network,
followed by 5 deconvolution layers with multi-scale side predic-
tions. All conv/deconv layers are followed by ReLU except for
the prediction layers with no nonlinear activation. The number of
output channels for each prediction layer is 2 ∗ (N − 1), with ev-
ery two channels normalized by softmax to obtain the explainabil-
ity prediction for the corresponding source-target pair (the second
channel after normalization is ˆEs and used in computing the loss
in Eq. 3).

4. Experiments

Here we evaluate the performance of our system, and compare
with prior approaches on single-view depth as well as ego-motion
estimation. We mainly use the KITTI dataset [15] for benchmark-
ing, but also use the Make3D dataset [42] for evaluating cross-
dataset generalization ability.

Training Details We implemented the system using the pub-
licly available TensorFlow [1] framework. For all the experiments,
we set λs = 0.5/l (l is the downscaling factor for the correspond-
ing scale) and λe = 0.2. During training, we used batch normal-
ization [21] for all the layers except for the output layers, and the
Adam [28] optimizer with β1 = 0.9, β2 = 0.999, learning rate of
0.0002 and mini-batch size of 4. The training typically converges
after about 150K iterations. All the experiments are performed
with image sequences captured with a monocular camera. We re-
size the images to 128 × 416 during training, but both the depth
and pose networks can be run fully-convolutionally for images of
arbitrary size at test time.

4.1. Single-view depth estimation

We train our system on the split provided by [7], and exclude
all the frames from the testing scenes as well as static sequences
with mean optical ﬂow magnitude less than 1 pixel for training.
We ﬁx the length of image sequences to be 3 frames, and treat the
central frame as the target view and the ±1 frames as the source
views. We use images captured by both color cameras, but treated
them independently when forming training sequences. This results
in a total of 44, 540 sequences, out of which we use 40, 109 for
training and 4, 431 for validation.

To the best of our knowledge, no previous systems exist that
learn single-view depth estimation in an unsupervised manner
from monocular videos. Nonetheless, here we provide comparison
with prior methods with depth supervision [7] and recent methods
that use calibrated stereo images (i.e. with pose supervision) for

Figure 5. Our sample predictions on the Cityscapes dataset using
the model trained on Cityscapes only.

training [14, 16]. Since the depth predicted by our method is de-
ﬁned up to a scale factor, for evaluation we multiply the predicted
depth maps by a scalar ˆs that matches the median with the ground-
truth, i.e. ˆs = median(Dgt)/median(Dpred).

Similar to [16], we also experimented with ﬁrst pre-training the
system on the larger Cityscapes dataset [5] (sample predictions are
shown in Figure 5), and then ﬁne-tune on KITTI, which results in
slight performance improvement.

KITTI Here we evaluate the single-view depth performance on
the 697 images from the test split of [7]. As shown in Table 1,
our unsupervised method performs comparably with several su-
pervised methods (e.g. Eigen et al. [7] and Garg et al. [14]), but
falls short of concurrent work by Godard et al. [16] that uses cal-
ibrated stereo images (i.e. with pose supervision) with left-right
cycle consistency loss for training. For future work, it would be in-
teresting to see if incorporating the similar cycle consistency loss
into our framework could further improve the results. Figure 6
provides examples of visual comparison between our results and
some supervised baselines over a variety of examples. One can
see that although trained in an unsupervised manner, our results
are comparable to that of the supervised baselines, and sometimes
preserve the depth boundaries and thin structures such as trees and
street lights better.

We show sample predictions made by our initial Cityscapes
model and the ﬁnal model (pre-trained on Cityscapes and then
ﬁne-tuned on KITTI) in Figure 7. Due to the domain gap between
the two datasets, our Cityscapes model sometimes has difﬁculty
in recovering the complete shape of the car/bushes, and mistakes
them with distant objects.

We also performed an ablation study of the explainability mod-
eling (see Table 1), which turns out only offering a modest per-
formance boost. This is likely because 1) most of the KITTI
scenes are static without signiﬁcant scene motions, and 2) the oc-
clusion/visibility effects only occur in small regions in sequences

Figure 6. Comparison of single-view depth estimation between Eigen et al. [7] (with ground-truth depth supervision), Garg et al. [14]
(with ground-truth pose supervision), and ours (unsupervised). The ground-truth depth map is interpolated from sparse measurements for
visualization purpose. The last two rows show typical failure cases of our model, which sometimes struggles in vast open scenes and
objects close to the front of the camera.

across a short time span (3-frames), which make the explainabil-
ity modeling less essential to the success of training. Nonetheless,
our explainability prediction network does seem to capture the fac-
tors like scene motion and visibility well (see Sec. 4.3), and could
potentially be more important for other more challenging datasets.

Make3D To evaluate the generalization ability of our single-
view depth model, we directly apply our model
trained on
Cityscapes + KITTI to the Make3D dataset unseen during train-
ing. While there still remains a signiﬁcant performance gap be-
tween our method and others supervised using Make3D ground-
truth depth (see Table 2), our predictions are able to capture the
global scene layout reasonably well without any training on the
Make3D images (see Figure 8).

4.2. Pose estimation

To evaluate the performance of our pose estimation network,
we applied our system to the ofﬁcial KITTI odometry split (con-
taining 11 driving sequences with ground truth odometry obtained
through the IMU/GPS readings, which we use for evaluation pur-
pose only), and used sequences 00-08 for training and 09-10 for
testing. In this experiment, we ﬁx the length of input image se-
quences to our system to 5 frames. We compare our ego-motion
estimation with two variants of monocular ORB-SLAM [37] (a
well-established SLAM system): 1) ORB-SLAM (full), which
recovers odometry using all frames of the driving sequence (i.e.
allowing loop closure and re-localization), and 2) ORB-SLAM
(short), which runs on 5-frame snippets (same as our input
setting). Another baseline we compare with is the dataset mean

Method

Dataset

Supervision

Error metric

Accuracy metric

Train set mean
Eigen et al. [7] Coarse
Eigen et al. [7] Fine
Liu et al. [32]
Godard et al. [16]
Godard et al. [16]
Ours (w/o explainability)
Ours
Ours
Ours

Garg et al. [14] cap 50m
Ours (w/o explainability) cap 50m
Ours cap 50m
Ours cap 50m
Ours cap 50m

K
K
K
K
K
CS + K
K
K
CS
CS + K

K
K
K
CS
CS + K

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Pose Abs Rel

Sq Rel RMSE RMSE log

δ < 1.25

δ < 1.252

δ < 1.253

(cid:88)
(cid:88)

(cid:88)

0.403
0.214
0.203
0.202
0.148
0.124
0.221
0.208
0.267
0.198

0.169
0.208
0.201
0.260
0.190

5.530
1.605
1.548
1.614
1.344
1.076
2.226
1.768
2.686
1.836

1.080
1.551
1.391
2.232
1.436

8.709
6.563
6.307
6.523
5.927
5.311
7.527
6.856
7.580
6.565

5.104
5.452
5.181
6.148
4.975

0.403
0.292
0.282
0.275
0.247
0.219
0.294
0.283
0.334
0.275

0.273
0.273
0.264
0.321
0.258

0.593
0.673
0.702
0.678
0.803
0.847
0.676
0.678
0.577
0.718

0.740
0.695
0.696
0.590
0.735

0.776
0.884
0.890
0.895
0.922
0.942
0.885
0.885
0.840
0.901

0.904
0.900
0.900
0.852
0.915

0.878
0.957
0.958
0.965
0.964
0.973
0.954
0.957
0.937
0.960

0.962
0.964
0.966
0.945
0.968

Table 1. Single-view depth results on the KITTI dataset [15] using the split of Eigen et al. [7] (Baseline numbers taken from [16]). For
training, K = KITTI, and CS = Cityscapes [5]. All methods we compare with use some form of supervision (either ground-truth depth or
calibrated camera pose) during training. Note: results from Garg et al. [14] are capped at 50m depth, so we break these out separately in
the lower part of the table.

Figure 7. Comparison of single-view depth predictions on the
KITTI dataset by our initial Cityscapes model and the ﬁnal model
(pre-trained on Cityscapes and then ﬁne-tuned on KITTI). The
Cityscapes model sometimes makes structural mistakes (e.g. holes
on car body) likely due to the domain gap between the two
datasets.

Method

Supervision

Error metric

Pose Abs Rel

Sq Rel RMSE RMSE log

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

Train set mean
Karsch et al. [25]
Liu et al. [33]
Laina et al. [31]
Godard et al. [16]

Ours

0.876
0.428
0.475
0.204
0.544

0.383

13.98
5.079
6.562
1.840
10.94

5.321

12.27
8.389
10.05
5.683
11.76

10.47

0.307
0.149
0.165
0.084
0.193

0.478

Table 2. Results on the Make3D dataset [42]. Similar to ours, Go-
dard et al. [16] do not utilize any of the Make3D data during train-
ing, and directly apply the model trained on KITTI+Cityscapes to
the test set. Following the evaluation protocol of [16], the errors
are only computed where depth is less than 70 meters in a central
image crop.

Figure 8. Our sample predictions on the Make3D dataset. Note
that our model is trained on KITTI + Cityscapes only, and directly
tested on Make3D.

the scaling factor for the predictions made by each method to best
align with the ground truth, and then measure the Absolute Trajec-
tory Error (ATE) [37] as the metric. ATE is computed on 5-frame
snippets and averaged over the full sequence.3 As shown in Table 3
and Fig. 9, our method outperforms both baselines (mean odome-
try and ORB-SLAM (short)) that share the same input setting
as ours, but falls short of ORB-SLAM (full), which leverages
whole sequences (1591 for seq. 09 and 1201 for seq. 10) for loop
closure and re-localization.

For better understanding of our pose estimation results, we
show in Figure 9 the ATE curve with varying amount of side-

of car motion (using ground-truth odometry) for 5-frame snippets.
To resolve scale ambiguity during evaluation, we ﬁrst optimize

3For evaluating ORB-SLAM (full) we break down the trajectory of
the full sequence into 5-frame snippets with the reference coordinate frame
adjusted to the central frame of each snippet.

Method

Seq. 09

Seq. 10

ORB-SLAM (full)

0.014 ± 0.008

0.012 ± 0.011

ORB-SLAM (short)
Mean Odom.
Ours

0.064 ± 0.141
0.032 ± 0.026
0.021 ± 0.017

0.064 ± 0.130
0.028 ± 0.023
0.020 ± 0.015

Table 3. Absolute Trajectory Error (ATE) on the KITTI odome-
try split averaged over all 5-frame snippets (lower is better). Our
method outperforms baselines with the same input setting, but falls
short of ORB-SLAM (full) that uses strictly more data.

Figure 9. Absolute Trajectory Error (ATE) at different left/right
turning magnitude (coordinate difference in the side-direction be-
tween the start and ending frame of a testing sequence). Our
method performs signiﬁcantly better than ORB-SLAM (short)
when side rotation is small, and is comparable with ORB-SLAM
(full) across the entire spectrum.

rotation by the car between the beginning and the end of a se-
quence. Figure 9 suggests that our method is signiﬁcantly bet-
ter than ORB-SLAM (short) when the side-rotation is small
(i.e. car mostly driving forward), and comparable to ORB-SLAM
(full) across the entire spectrum. The large performance
gap between ours and ORB-SLAM (short) suggests that our
learned ego-motion could potentially be used as an alternative to
the local estimation modules in monocular SLAM systems.

4.3. Visualizing the explainability prediction

We visualize example explainability masks predicted by our
network in Figure 10. The ﬁrst three rows suggest that the network
has learned to identify dynamic objects in the scene as unexplain-
able by our model, and similarly, rows 4–5 are examples of ob-
jects that disappear from the frame in subsequent views. The last
two rows demonstrate the potential downside of explainability-
weighted loss: the depth CNN has low conﬁdence in predicting
thin structures well, and tends to mask them as unexplainable.

5. Discussion

We have presented an end-to-end learning pipeline that utilizes
the task of view synthesis for supervision of single-view depth
and camera pose estimation. The system is trained on unlabeled
videos, and yet performs comparably with approaches that require
ground-truth depth or pose for training. Despite good performance
on the benchmark evaluation, our method is by no means close to
solving the general problem of unsupervised learning of 3D scene
structure inference. A number of major challenges are yet to be

Figure 10. Sample visualizations of the explainability masks.
Highlighted pixels are predicted to be unexplainable by the net-
work due to motion (rows 1–3), occlusion/visibility (rows 4–5), or
other factors (rows 7–8).

addressed: 1) our current framework does not explicitly estimate
scene dynamics and occlusions (although they are implicitly taken
into account by the explainability masks), both of which are crit-
ical factors in 3D scene understanding. Direct modeling of scene
dynamics through motion segmentation (e.g. [48, 40]) could be a
potential solution; 2) our framework assumes the camera intrinsics
are given, which forbids the use of random Internet videos with un-
known camera types/calibration – we plan to address this in future
work; 3) depth maps are a simpliﬁed representation of the under-
lying 3D scene. It would be interesting to extend our framework
to learn full 3D volumetric representations (e.g. [46]).

Another interesting area for future work would be to investi-
gate in more detail the representation learned by our system. In
particular, the pose network likely uses some form of image cor-
respondence in estimating the camera motion, whereas the depth
estimation network likely recognizes common structural features
of scenes and objects. It would be interesting to probe these, and
investigate the extent to which our network already performs, or
could be re-purposed to perform, tasks such as object detection
and semantic segmentation.

Acknowledgments: We thank our colleagues, Sudheendra Vijaya-
narasimhan, Susanna Ricco, Cordelia Schmid, Rahul Sukthankar, and Ka-
terina Fragkiadaki for their help. We also thank the anonymous reviewers
for their valuable comments. TZ would like to thank Shubham Tulsiani for
helpful discussions, and Clement Godard for sharing the evaluation code.
This work is also partially funded by Intel/NSF VEC award IIS-1539099.

References

[1] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, et al.
TensorFlow: Large-scale machine learning on heteroge-
neous distributed systems. arXiv preprint arXiv:1603.04467,
2016. 5

[2] P. Agrawal, J. Carreira, and J. Malik. Learning to see by

moving. In Int. Conf. Computer Vision, 2015. 2

[3] J. Bergen, P. Anandan, K. Hanna, and R. Hingorani. Hier-
In Computer Vi-

archical model-based motion estimation.
sionECCV’92, pages 237–252. Springer, 1992. 4

[4] S. E. Chen and L. Williams. View interpolation for image
synthesis. In Proceedings of the 20th annual conference on
Computer graphics and interactive techniques, pages 279–
288. ACM, 1993. 2

[5] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
Cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3213–3223, 2016. 5, 7
[6] P. E. Debevec, C. J. Taylor, and J. Malik. Modeling and ren-
dering architecture from photographs: A hybrid geometry-
and image-based approach. In Proceedings of the 23rd an-
nual conference on Computer graphics and interactive tech-
niques, pages 11–20. ACM, 1996. 2

[7] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
In
from a single image using a multi-scale deep network.
Advances in Neural Information Processing Systems, 2014.
2, 5, 6, 7

[8] C. Fehn. Depth-image-based rendering (dibr), compression,
and transmission for a new approach on 3d-tv. In Electronic
Imaging 2004, pages 93–104. International Society for Op-
tics and Photonics, 2004. 3

[9] A. Fitzgibbon, Y. Wexler, and A. Zisserman. Image-based
Int. Journal of Com-

rendering using image-based priors.
puter Vision, 63(2):141–151, 2005. 2

[10] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
Stereo: Learning to predict new views from the world’s im-
agery. In Computer Vision and Pattern Recognition, 2016. 1,
2, 3

[11] D. F. Fouhey, W. Hussain, A. Gupta, and M. Hebert. Single
image 3D without a single 3D image. In Proceedings of the
IEEE International Conference on Computer Vision, pages
1053–1061, 2015. 2

[12] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski. To-
wards internet-scale multi-view stereo. In Computer Vision
and Pattern Recognition, pages 1434–1441. IEEE, 2010. 2

[13] M. Gadelha, S. Maji, and R. Wang.

tion from 2d views of multiple objects.
arXiv:1612.05872, 2016. 2

3d shape induc-
arXiv preprint

[14] R. Garg, V. K. BG, G. Carneiro, and I. Reid. Unsupervised
CNN for single view depth estimation: Geometry to the res-
cue. In European Conf. Computer Vision, 2016. 1, 2, 3, 4, 5,
6, 7

[15] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for
autonomous driving? The KITTI vision benchmark suite.

In Computer Vision and Pattern Recognition (CVPR), 2012
IEEE Conference on, pages 3354–3361. IEEE, 2012. 2, 5, 7
[16] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsupervised
monocular depth estimation with left-right consistency.
In
Computer Vision and Pattern Recognition, 2017. 1, 2, 3, 4,
5, 7

[17] R. Goroshin, J. Bruna, J. Tompson, D. Eigen, and Y. Le-
Cun. Unsupervised learning of spatiotemporally coherent
metrics. In Proceedings of the IEEE International Confer-
ence on Computer Vision, pages 4086–4093, 2015. 2
[18] X. Han, T. Leung, Y. Jia, R. Sukthankar, and A. C. Berg.
MatchNet: Unifying feature and metric learning for patch-
based matching. In Computer Vision and Pattern Recogni-
tion, pages 3279–3286, 2015. 2

[19] A. Handa, M. Bloesch, V. Patraucean, S. Stent, J. McCor-
mac, and A. Davison. gvnn: Neural network library for ge-
ometric computer vision. arXiv preprint arXiv:1607.07405,
2016. 2

[20] D. Hoiem, A. A. Efros, and M. Hebert . Automatic photo

pop-up. In Proc. SIGGRAPH, 2005. 2

[21] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015. 5

[22] M. Irani and P. Anandan. About direct methods.

In In-
ternational Workshop on Vision Algorithms, pages 267–277.
Springer, 1999. 2

[23] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in Neural Information

transformer networks.
Processing Systems, pages 2017–2025, 2015. 3

[24] D. Jayaraman and K. Grauman. Learning image representa-
tions tied to egomotion. In Int. Conf. Computer Vision, 2015.
2

[25] K. Karsch, C. Liu, and S. B. Kang. Depth transfer: Depth
extraction from video using non-parametric sampling. IEEE
transactions on pattern analysis and machine intelligence,
36(11):2144–2158, 2014. 7

[26] A. Kendall, M. Grimes, and R. Cipolla. PoseNet: A convo-
lutional network for real-time 6-DOF camera relocalization.
In Int. Conf. Computer Vision, pages 2938–2946, 2015. 2

[27] A. Kendall, H. Martirosyan, S. Dasgupta, P. Henry,
R. Kennedy, A. Bachrach, and A. Bry. End-to-end learning
of geometry and context for deep stereo regression. arXiv
preprint arXiv:1703.04309, 2017. 2

[28] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[29] T. D. Kulkarni, W. F. Whitney, P. Kohli, and J. Tenenbaum.
Deep convolutional inverse graphics network. In C. Cortes,
N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing Systems,
pages 2539–2547. Curran Associates, Inc., 2015. 2

[30] Y. Kuznietsov, J. St¨uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. arXiv
preprint arXiv:1702.02706, 2017. 2

[31] I. Laina, C. Rupprecht, V. Belagiannis, F. Tombari, and
N. Navab. Deeper depth prediction with fully convolutional
residual networks. In 3D Vision (3DV), 2016 Fourth Interna-
tional Conference on, pages 239–248. IEEE, 2016. 7

tion network for learning monocular stereo. arXiv preprint
arXiv:1612.02401, 2016. 4

[48] S. Vijayanarasimhan, S. Ricco, C. Schmid, R. Sukthankar,
and K. Fragkiadaki. SfM-Net: Learning of structure and mo-
tion from video. arXiv preprint, 2017. 2, 4, 8

[49] X. Wang and A. Gupta. Unsupervised learning of visual rep-
resentations using videos. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 2794–2802,
2015. 2

[50] C. Wu. VisualSFM: A visual structure from motion system.

http://ccwu.me/vsfm, 2011. 2

[51] J. Xie, R. B. Girshick, and A. Farhadi. Deep3D: Fully au-
tomatic 2D-to-3D video conversion with deep convolutional
neural networks. In European Conf. Computer Vision, 2016.
2

[52] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 2

[53] J. Zbontar and Y. LeCun. Stereo matching by training a con-
volutional neural network to compare image patches. Jour-
nal of Machine Learning Research, 17(1-32):2, 2016. 2
[54] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
synthesis by appearance ﬂow. In European Conference on
Computer Vision, pages 286–301. Springer, 2016. 2, 3
[55] C. L. Zitnick, S. B. Kang, M. Uyttendaele, S. Winder, and
R. Szeliski. High-quality video view interpolation using a
In ACM Transactions on Graphics
layered representation.
(TOG), volume 23, pages 600–608. ACM, 2004. 2

[32] F. Liu, C. Shen, G. Lin, and I. Reid. Learning depth from sin-
gle monocular images using deep convolutional neural ﬁelds.
IEEE transactions on pattern analysis and machine intelli-
gence, 38(10):2024–2039, 2016. 7

[33] M. Liu, M. Salzmann, and X. He. Discrete-continuous depth
estimation from a single image. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 716–723, 2014. 7

[34] M. M. Loper and M. J. Black. OpenDR: An approximate
differentiable renderer. In European Conf. Computer Vision,
pages 154–169. Springer, 2014. 2

[35] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train con-
volutional networks for disparity, optical ﬂow, and scene
In Proceedings of the IEEE Conference
ﬂow estimation.
on Computer Vision and Pattern Recognition, pages 4040–
4048, 2016. 4

[36] I. Misra, C. L. Zitnick, and M. Hebert. Shufﬂe and learn:
unsupervised learning using temporal order veriﬁcation. In
European Conference on Computer Vision, pages 527–544.
Springer, 2016. 2

[37] R. Mur-Artal, J. M. M. Montiel, and J. D. Tardos. ORB-
SLAM: a versatile and accurate monocular SLAM system.
IEEE Transactions on Robotics, 31(5), 2015. 6, 7

[38] R. A. Newcombe, S. J. Lovegrove, and A. J. Davison.
In Int.

DTAM: Dense tracking and mapping in real-time.
Conf. Computer Vision, pages 2320–2327. IEEE, 2011. 2

[39] D. Pathak, R. Girshick, P. Doll´ar, T. Darrell, and B. Hariha-
ran. Learning features by watching objects move. In CVPR,
2017. 2

[40] R. Ranftl, V. Vineet, Q. Chen, and V. Koltun. Dense monoc-
ular depth estimation in complex dynamic scenes. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4058–4066, 2016. 8

[41] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances In Neural Information
Processing Systems, pages 4997–5005, 2016. 2

[42] A. Saxena, M. Sun, and A. Y. Ng. Make3D: Learning 3D
scene structure from a single still image. Pattern Analysis
and Machine Intelligence, 31(5):824–840, May 2009. 2, 5, 7
[43] S. M. Seitz and C. R. Dyer. View morphing. In Proceedings
of the 23rd annual conference on Computer graphics and
interactive techniques, pages 21–30. ACM, 1996. 2

[44] R. Szeliski. Prediction error as a quality metric for motion
and stereo. In Int. Conf. Computer Vision, volume 2, pages
781–788. IEEE, 1999. 1

[45] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Multi-view 3d
models from single images with a convolutional network. In
European Conference on Computer Vision, pages 322–337.
Springer, 2016. 2

[46] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In Computer Vision and Pattern Recogni-
tion, 2017. 2, 8

[47] B. Ummenhofer, H. Zhou, J. Uhrig, N. Mayer, E. Ilg,
A. Dosovitskiy, and T. Brox. DeMoN: Depth and mo-

Unsupervised Learning of Depth and Ego-Motion from Video

Tinghui Zhou∗
UC Berkeley

Matthew Brown
Google

Noah Snavely
Google

David G. Lowe
Google

7
1
0
2
 
g
u
A
 
1
 
 
]

V
C
.
s
c
[
 
 
2
v
3
1
8
7
0
.
4
0
7
1
:
v
i
X
r
a

Abstract

We present an unsupervised learning framework for the
task of monocular depth and camera motion estimation
from unstructured video sequences.
In common with re-
cent work [10, 14, 16], we use an end-to-end learning ap-
In
proach with view synthesis as the supervisory signal.
contrast to the previous work, our method is completely un-
supervised, requiring only monocular video sequences for
training. Our method uses single-view depth and multi-
view pose networks, with a loss based on warping nearby
views to the target using the computed depth and pose. The
networks are thus coupled by the loss during training, but
can be applied independently at test time. Empirical eval-
uation on the KITTI dataset demonstrates the effectiveness
of our approach: 1) monocular depth performs comparably
with supervised methods that use either ground-truth pose
or depth for training, and 2) pose estimation performs fa-
vorably compared to established SLAM systems under com-
parable input settings.

1. Introduction

Humans are remarkably capable of inferring ego-motion
and the 3D structure of a scene even over short timescales.
For instance, in navigating along a street, we can easily
locate obstacles and react quickly to avoid them. Years
of research in geometric computer vision has failed to
recreate similar modeling capabilities for real-world scenes
(e.g., where non-rigidity, occlusion and lack of texture are
present). So why do humans excel at this task? One hypoth-
esis is that we develop a rich, structural understanding of the
world through our past visual experience that has largely
consisted of moving around and observing vast numbers of
scenes and developing consistent modeling of our observa-
tions. From millions of such observations, we have learned
about the regularities of the world—roads are ﬂat, buildings
are straight, cars are supported by roads etc., and we can
apply this knowledge when perceiving a new scene, even
from a single monocular image.

∗The majority of the work was done while interning at Google.

Figure 1. The training data to our system consists solely of un-
labeled image sequences capturing scene appearance from differ-
ent viewpoints, where the poses of the images are not provided.
Our training procedure produces two models that operate inde-
pendently, one for single-view depth prediction, and one for multi-
view camera pose estimation.

In this work, we mimic this approach by training a model
that observes sequences of images and aims to explain its
observations by predicting likely camera motion and the
scene structure (as shown in Fig. 1). We take an end-to-
end approach in allowing the model to map directly from
input pixels to an estimate of ego-motion (parameterized as
6-DoF transformation matrices) and the underlying scene
structure (parameterized as per-pixel depth maps under a
reference view). We are particularly inspired by prior work
that has suggested view synthesis as a metric [44] and recent
work that tackles the calibrated, multi-view 3D case in an
end-to-end framework [10]. Our method is unsupervised,
and can be trained simply using sequences of images with
no manual labeling or even camera motion information.

Our approach builds upon the insight that a geomet-
ric view synthesis system only performs consistently well
when its intermediate predictions of the scene geometry
and the camera poses correspond to the physical ground-

1

truth. While imperfect geometry and/or pose estimation
can cheat with reasonable synthesized views for certain
types of scenes (e.g., textureless), the same model would
fail miserably when presented with another set of scenes
with more diverse layout and appearance structures. Thus,
our goal is to formulate the entire view synthesis pipeline
as the inference procedure of a convolutional neural net-
work, so that by training the network on large-scale video
data for the ‘meta’-task of view synthesis the network is
forced to learn about intermediate tasks of depth and cam-
era pose estimation in order to come up with a consistent
explanation of the visual world. Empirical evaluation on
the KITTI [15] benchmark demonstrates the effectiveness
of our approach on both single-view depth and camera pose
estimation. Our code will be made available at https:
//github.com/tinghuiz/SfMLearner.

2. Related work

Structure from motion The simultaneous estimation of
structure and motion is a well studied problem with an estab-
lished toolchain of techniques [12, 50, 38]. Whilst the traditional
toolchain is effective and efﬁcient in many cases, its reliance on ac-
curate image correspondence can cause problems in areas of low
texture, complex geometry/photometry, thin structures, and occlu-
sions. To address these issues, several of the pipeline stages have
been recently tackled using deep learning, e.g., feature match-
ing [18], pose estimation [26], and stereo [10, 27, 53]. These
learning-based techniques are attractive in that they are able to
leverage external supervision during training, and potentially over-
come the above issues when applied to test data.

Warping-based view synthesis One important application
of geometric scene understanding is the task of novel view syn-
thesis, where the goal is to synthesize the appearance of the scene
seen from novel camera viewpoints. A classic paradigm for view
synthesis is to ﬁrst either estimate the underlying 3D geometry
explicitly or establish pixel correspondence among input views,
and then synthesize the novel views by compositing image patches
from the input views (e.g., [4, 55, 43, 6, 9]). Recently, end-to-
end learning has been applied to reconstruct novel views by trans-
forming the input based on depth or ﬂow, e.g., DeepStereo [10],
Deep3D [51] and Appearance Flows [54]. In these methods, the
underlying geometry is represented by quantized depth planes
(DeepStereo), probabilistic disparity maps (Deep3D) and view-
dependent ﬂow ﬁelds (Appearance Flows), respectively. Unlike
methods that directly map from input views to the target view
(e.g., [45]), warping-based methods are forced to learn intermedi-
ate predictions of geometry and/or correspondence. In this work,
we aim to distill such geometric reasoning capability from CNNs
trained to perform warping-based view synthesis.

Learning single-view 3D from registered 2D views Our
work is closely related to a line of recent research on learning
single-view 3D inference from registered 2D observations. Garg et
al. [14] propose to learn a single-view depth estimation CNN us-
ing projection errors to a calibrated stereo twin for supervision.
Concurrently, Deep3D [51] predicts a second stereo viewpoint

from an input image using stereoscopic ﬁlm footage as training
data. A similar approach was taken by Godard et al. [16], with
the addition of a left-right consistency constraint, and a better ar-
chitecture design that led to impressive performance. Like our
approach, these techniques only learn from image observations of
the world, unlike methods that require explicit depth for training,
e.g., [20, 42, 7, 27, 30].

These techniques bear some resemblance to direct methods for
structure and motion estimation [22], where the camera parame-
ters and scene depth are adjusted to minimize a pixel-based error
function. However, rather than directly minimizing the error to
obtain the estimation, the CNN-based methods only take a gradi-
ent step for each batch of input instances, which allows the net-
work to learn an implicit prior from a large corpus of related im-
agery. Several authors have explored building differentiable ren-
dering operations into their models that are trained in this way,
e.g., [19, 29, 34].

While most of the above techniques (including ours) are mainly
focused on inferring depth maps as the scene geometry output, re-
cent work (e.g., [13, 41, 46, 52]) has also shown success in learn-
ing 3D volumetric representations from 2D observations based on
similar principles of projective geometry. Fouhey et al. [11] fur-
ther show that it is even possible to learn 3D inference without 3D
labels (or registered 2D views) by utilizing scene regularity.

Unsupervised/Self-supervised learning from video An-
other line of related work to ours is visual representation learning
from video, where the general goal is to design pretext tasks for
learning generic visual features from video data that can later be
re-purposed for other vision tasks such as object detection and se-
mantic segmentation. Such pretext tasks include ego-motion esti-
mation [2, 24], tracking [49], temporal coherence [17], temporal
order veriﬁcation [36], and object motion mask prediction [39].
While we focus on inferring the explicit scene geometry and
ego-motion in this work, intuitively, the internal representation
learned by the deep network (especially the single-view depth
CNN) should capture some level of semantics that could gener-
alize to other tasks as well.

Concurrent to our work, Vijayanarasimhan et al. [48] indepen-
dently propose a framework for joint training of depth, camera
motion and scene motion from videos. While both methods are
conceptually similar, ours is focused on the unsupervised aspect,
whereas their framework adds the capability to incorporate super-
vision (e.g., depth, camera motion or scene motion). There are
signiﬁcant differences in how scene dynamics are modeled during
training, in which they explicitly solve for object motion whereas
our explainability mask discounts regions undergoing motion, oc-
clusion and other factors.

3. Approach

Here we propose a framework for jointly training a single-view
depth CNN and a camera pose estimation CNN from unlabeled
video sequences. Despite being jointly trained, the depth model
and the pose estimation model can be used independently during
test-time inference. Training examples to our model consist of
short image sequences of scenes captured by a moving camera.
While our training procedure is robust to some degree of scene

Figure 2. Overview of the supervision pipeline based on view syn-
thesis. The depth network takes only the target view as input, and
outputs a per-pixel depth map ˆDt. The pose network takes both the
target view (It) and the nearby/source views (e.g., It−1 and It+1)
as input, and outputs the relative camera poses ( ˆTt→t−1, ˆTt→t+1).
The outputs of both networks are then used to inverse warp the
source views (see Sec. 3.2) to reconstruct the target view, and the
photometric reconstruction loss is used for training the CNNs. By
utilizing view synthesis as supervision, we are able to train the
entire framework in an unsupervised manner from videos.

motion, we assume that the scenes we are interested in are mostly
rigid, i.e., the scene appearance change across different frames is
dominated by the camera motion.

3.1. View synthesis as supervision

The key supervision signal for our depth and pose prediction
CNNs comes from the task of novel view synthesis: given one
input view of a scene, synthesize a new image of the scene seen
from a different camera pose. We can synthesize a target view
given a per-pixel depth in that image, plus the pose and visibility
in a nearby view. As we will show next, this synthesis process can
be implemented in a fully differentiable manner with CNNs as the
geometry and pose estimation modules. Visibility can be handled,
along with non-rigidity and other non-modeled factors, using an
“explanability” mask, which we discuss later (Sec. 3.3).

Let us denote < I1, . . . , IN > as a training image sequence
with one of the frames It being the target view and the rest being
the source views Is(1 ≤ s ≤ N, s (cid:54)= t). The view synthesis
objective can be formulated as

Figure 3. Illustration of the differentiable image warping process.
For each point pt in the target view, we ﬁrst project it onto the
source view based on the predicted depth and camera pose, and
then use bilinear interpolation to obtain the value of the warped
image ˆIs at location pt.

framework can be applied to standard videos without pose infor-
mation. Furthermore, it predicts the poses as part of the learning
framework. See Figure 2 for an illustration of our learning pipeline
for depth and pose estimation.

3.2. Differentiable depth image-based rendering

As indicated in Eq. 1, a key component of our learning frame-
work is a differentiable depth image-based renderer that recon-
structs the target view It by sampling pixels from a source view Is
based on the predicted depth map ˆDt and the relative pose ˆTt→s.
Let pt denote the homogeneous coordinates of a pixel in the
target view, and K denote the camera intrinsics matrix. We can
obtain pt’s projected coordinates onto the source view ps by2

ps ∼ K ˆTt→s ˆDt(pt)K −1pt

(2)

Notice that the projected coordinates ps are continuous values. To
obtain Is(ps) for populating the value of ˆIs(pt) (see Figure 3),
we then use the differentiable bilinear sampling mechanism pro-
posed in the spatial transformer networks [23] that linearly in-
terpolates the values of the 4-pixel neighbors (top-left, top-right,
bottom-left, and bottom-right) of ps to approximate Is(ps), i.e.
ˆIs(pt) = Is(ps) = (cid:80)
s ), where wij is
linearly proportional to the spatial proximity between ps and pij
s ,
and (cid:80)
i,j wij = 1. A similar strategy is used in [54] for learning
to directly warp between different views, while here the coordi-
nates for pixel warping are obtained through projective geometry
that enables the factorization of depth and camera pose.

i∈{t,b},j∈{l,r} wijIs(pij

Lvs =

(cid:88)

(cid:88)

s

p

|It(p) − ˆIs(p)| ,

(1)

3.3. Modeling the model limitation

where p indexes over pixel coordinates, and ˆIs is the source view
Is warped to the target coordinate frame based on a depth image-
based rendering module [8] (described in Sec. 3.2), taking the pre-
dicted depth ˆDt, the predicted 4×4 camera transformation matrix1
ˆTt→s and the source view Is as input.

Note that the idea of view synthesis as supervision has also
been recently explored for learning single-view depth estima-
tion [14, 16] and multi-view stereo [10]. However, to the best of
our knowledge, all previous work requires posed image sets dur-
ing training (and testing too in the case of DeepStereo), while our

Note that when applied to monocular videos the above view
synthesis formulation implicitly assumes 1) the scene is static
without moving objects; 2) there is no occlusion/disocclusion be-
tween the target view and the source views; 3) the surface is Lam-
bertian so that the photo-consistency error is meaningful. If any
of these assumptions are violated in a training sequence, the gra-
dients could be corrupted and potentially inhibit training. To im-
prove the robustness of our learning pipeline to these factors, we
additionally train a explainability prediction network (jointly and
simultaneously with the depth and pose networks) that outputs a
per-pixel soft mask ˆEs for each target-source pair, indicating the

1In practice, the CNN estimates the Euler angles and the 3D translation

2For notation simplicity, we omit showing the necessary conversion to

vector, which are then converted to the transformation matrix.

homogeneous coordinates along the steps of matrix multiplication.

Figure 4. Network architecture for our depth/pose/explainability prediction modules. The width and height of each rectangular block indi-
cates the output channels and the spatial dimension of the feature map at the corresponding layer respectively, and each reduction/increase
in size indicates a change by the factor of 2. (a) For single-view depth, we adopt the DispNet [35] architecture with multi-scale side pre-
dictions. The kernel size is 3 for all the layers except for the ﬁrst 4 conv layers with 7, 7, 5, 5, respectively. The number of output channels
for the ﬁrst conv layer is 32. (b) The pose and explainabilty networks share the ﬁrst few conv layers, and then branch out to predict 6-DoF
relative pose and multi-scale explainability masks, respectively. The number of output channels for the ﬁrst conv layer is 16, and the kernel
size is 3 for all the layers except for the ﬁrst two conv and the last two deconv/prediction layers where we use 7, 5, 5, 7, respectively. See
Section 3.5 for more details.

network’s belief in where direct view synthesis will be success-
fully modeled for each target pixel. Based on the predicted ˆEs,
the view synthesis objective is weighted correspondingly by

Lvs =

(cid:88)

(cid:88)

ˆEs(p)|It(p) − ˆIs(p)| .

(3)

<I1,...,IN >∈S

p

Since we do not have direct supervision for ˆEs, training with the
above loss would result in a trivial solution of the network always
predicting ˆEs to be zero, which perfectly minimizes the loss. To
resolve this, we add a regularization term Lreg( ˆEs) that encour-
ages nonzero predictions by minimizing the cross-entropy loss
with constant label 1 at each pixel location. In other words, the
network is encouraged to minimize the view synthesis objective,
but allowed a certain amount of slack for discounting the factors
not considered by the model.

3.4. Overcoming the gradient locality

One remaining issue with the above learning pipeline is that the
gradients are mainly derived from the pixel intensity difference be-
tween I(pt) and the four neighbors of I(ps), which would inhibit
training if the correct ps (projected using the ground-truth depth
and pose) is located in a low-texture region or far from the current
estimation. This is a well known issue in motion estimation [3].
Empirically, we found two strategies to be effective for overcom-
ing this issue: 1) using a convolutional encoder-decoder architec-
ture with a small bottleneck for the depth network that implicitly
constrains the output to be globally smooth and facilitates gradi-
ents to propagate from meaningful regions to nearby regions; 2)

explicit multi-scale and smoothness loss (e.g., as in [14, 16]) that
allows gradients to be derived from larger spatial regions directly.
We adopt the second strategy in this work as it is less sensitive to
architectural choices. For smoothness, we minimize the L1 norm
of the second-order gradients for the predicted depth maps (similar
to [48]).

Our ﬁnal objective becomes

Lf inal =

Ll

vs + λsLl

smooth + λe

Lreg( ˆEl

s) ,

(4)

(cid:88)

l

(cid:88)

s

where l indexes over different image scales, s indexes over source
images, and λs and λe are the weighting for the depth smoothness
loss and the explainability regularization, respectively.

3.5. Network architecture

Single-view depth For single-view depth prediction, we adopt
the DispNet architecture proposed in [35] that is mainly based on
an encoder-decoder design with skip connections and multi-scale
side predictions (see Figure 4). All conv layers are followed by
ReLU activation except for the prediction layers, where we use
1/(α ∗ sigmoid(x) + β) with α = 10 and β = 0.01 to con-
strain the predicted depth to be always positive within a reason-
able range. We also experimented with using multiple views as
input to the depth network, but did not ﬁnd this to improve the
results. This is in line with the observations in [47], where opti-
cal ﬂow constraints need to be enforced to utilize multiple views
effectively.

Pose The input to the pose estimation network is the target view
concatenated with all the source views (along the color channels),
and the outputs are the relative poses between the target view and
each of the source views. The network consists of 7 stride-2 con-
volutions followed by a 1 × 1 convolution with 6 ∗ (N − 1) output
channels (corresponding to 3 Euler angles and 3-D translation for
each source view). Finally, global average pooling is applied to
aggregate predictions at all spatial locations. All conv layers are
followed by ReLU except for the last layer where no nonlinear
activation is applied.

Explainability mask The explainability prediction network
shares the ﬁrst ﬁve feature encoding layers with the pose network,
followed by 5 deconvolution layers with multi-scale side predic-
tions. All conv/deconv layers are followed by ReLU except for
the prediction layers with no nonlinear activation. The number of
output channels for each prediction layer is 2 ∗ (N − 1), with ev-
ery two channels normalized by softmax to obtain the explainabil-
ity prediction for the corresponding source-target pair (the second
channel after normalization is ˆEs and used in computing the loss
in Eq. 3).

4. Experiments

Here we evaluate the performance of our system, and compare
with prior approaches on single-view depth as well as ego-motion
estimation. We mainly use the KITTI dataset [15] for benchmark-
ing, but also use the Make3D dataset [42] for evaluating cross-
dataset generalization ability.

Training Details We implemented the system using the pub-
licly available TensorFlow [1] framework. For all the experiments,
we set λs = 0.5/l (l is the downscaling factor for the correspond-
ing scale) and λe = 0.2. During training, we used batch normal-
ization [21] for all the layers except for the output layers, and the
Adam [28] optimizer with β1 = 0.9, β2 = 0.999, learning rate of
0.0002 and mini-batch size of 4. The training typically converges
after about 150K iterations. All the experiments are performed
with image sequences captured with a monocular camera. We re-
size the images to 128 × 416 during training, but both the depth
and pose networks can be run fully-convolutionally for images of
arbitrary size at test time.

4.1. Single-view depth estimation

We train our system on the split provided by [7], and exclude
all the frames from the testing scenes as well as static sequences
with mean optical ﬂow magnitude less than 1 pixel for training.
We ﬁx the length of image sequences to be 3 frames, and treat the
central frame as the target view and the ±1 frames as the source
views. We use images captured by both color cameras, but treated
them independently when forming training sequences. This results
in a total of 44, 540 sequences, out of which we use 40, 109 for
training and 4, 431 for validation.

To the best of our knowledge, no previous systems exist that
learn single-view depth estimation in an unsupervised manner
from monocular videos. Nonetheless, here we provide comparison
with prior methods with depth supervision [7] and recent methods
that use calibrated stereo images (i.e. with pose supervision) for

Figure 5. Our sample predictions on the Cityscapes dataset using
the model trained on Cityscapes only.

training [14, 16]. Since the depth predicted by our method is de-
ﬁned up to a scale factor, for evaluation we multiply the predicted
depth maps by a scalar ˆs that matches the median with the ground-
truth, i.e. ˆs = median(Dgt)/median(Dpred).

Similar to [16], we also experimented with ﬁrst pre-training the
system on the larger Cityscapes dataset [5] (sample predictions are
shown in Figure 5), and then ﬁne-tune on KITTI, which results in
slight performance improvement.

KITTI Here we evaluate the single-view depth performance on
the 697 images from the test split of [7]. As shown in Table 1,
our unsupervised method performs comparably with several su-
pervised methods (e.g. Eigen et al. [7] and Garg et al. [14]), but
falls short of concurrent work by Godard et al. [16] that uses cal-
ibrated stereo images (i.e. with pose supervision) with left-right
cycle consistency loss for training. For future work, it would be in-
teresting to see if incorporating the similar cycle consistency loss
into our framework could further improve the results. Figure 6
provides examples of visual comparison between our results and
some supervised baselines over a variety of examples. One can
see that although trained in an unsupervised manner, our results
are comparable to that of the supervised baselines, and sometimes
preserve the depth boundaries and thin structures such as trees and
street lights better.

We show sample predictions made by our initial Cityscapes
model and the ﬁnal model (pre-trained on Cityscapes and then
ﬁne-tuned on KITTI) in Figure 7. Due to the domain gap between
the two datasets, our Cityscapes model sometimes has difﬁculty
in recovering the complete shape of the car/bushes, and mistakes
them with distant objects.

We also performed an ablation study of the explainability mod-
eling (see Table 1), which turns out only offering a modest per-
formance boost. This is likely because 1) most of the KITTI
scenes are static without signiﬁcant scene motions, and 2) the oc-
clusion/visibility effects only occur in small regions in sequences

Figure 6. Comparison of single-view depth estimation between Eigen et al. [7] (with ground-truth depth supervision), Garg et al. [14]
(with ground-truth pose supervision), and ours (unsupervised). The ground-truth depth map is interpolated from sparse measurements for
visualization purpose. The last two rows show typical failure cases of our model, which sometimes struggles in vast open scenes and
objects close to the front of the camera.

across a short time span (3-frames), which make the explainabil-
ity modeling less essential to the success of training. Nonetheless,
our explainability prediction network does seem to capture the fac-
tors like scene motion and visibility well (see Sec. 4.3), and could
potentially be more important for other more challenging datasets.

Make3D To evaluate the generalization ability of our single-
view depth model, we directly apply our model
trained on
Cityscapes + KITTI to the Make3D dataset unseen during train-
ing. While there still remains a signiﬁcant performance gap be-
tween our method and others supervised using Make3D ground-
truth depth (see Table 2), our predictions are able to capture the
global scene layout reasonably well without any training on the
Make3D images (see Figure 8).

4.2. Pose estimation

To evaluate the performance of our pose estimation network,
we applied our system to the ofﬁcial KITTI odometry split (con-
taining 11 driving sequences with ground truth odometry obtained
through the IMU/GPS readings, which we use for evaluation pur-
pose only), and used sequences 00-08 for training and 09-10 for
testing. In this experiment, we ﬁx the length of input image se-
quences to our system to 5 frames. We compare our ego-motion
estimation with two variants of monocular ORB-SLAM [37] (a
well-established SLAM system): 1) ORB-SLAM (full), which
recovers odometry using all frames of the driving sequence (i.e.
allowing loop closure and re-localization), and 2) ORB-SLAM
(short), which runs on 5-frame snippets (same as our input
setting). Another baseline we compare with is the dataset mean

Method

Dataset

Supervision

Error metric

Accuracy metric

Train set mean
Eigen et al. [7] Coarse
Eigen et al. [7] Fine
Liu et al. [32]
Godard et al. [16]
Godard et al. [16]
Ours (w/o explainability)
Ours
Ours
Ours

Garg et al. [14] cap 50m
Ours (w/o explainability) cap 50m
Ours cap 50m
Ours cap 50m
Ours cap 50m

K
K
K
K
K
CS + K
K
K
CS
CS + K

K
K
K
CS
CS + K

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Pose Abs Rel

Sq Rel RMSE RMSE log

δ < 1.25

δ < 1.252

δ < 1.253

(cid:88)
(cid:88)

(cid:88)

0.403
0.214
0.203
0.202
0.148
0.124
0.221
0.208
0.267
0.198

0.169
0.208
0.201
0.260
0.190

5.530
1.605
1.548
1.614
1.344
1.076
2.226
1.768
2.686
1.836

1.080
1.551
1.391
2.232
1.436

8.709
6.563
6.307
6.523
5.927
5.311
7.527
6.856
7.580
6.565

5.104
5.452
5.181
6.148
4.975

0.403
0.292
0.282
0.275
0.247
0.219
0.294
0.283
0.334
0.275

0.273
0.273
0.264
0.321
0.258

0.593
0.673
0.702
0.678
0.803
0.847
0.676
0.678
0.577
0.718

0.740
0.695
0.696
0.590
0.735

0.776
0.884
0.890
0.895
0.922
0.942
0.885
0.885
0.840
0.901

0.904
0.900
0.900
0.852
0.915

0.878
0.957
0.958
0.965
0.964
0.973
0.954
0.957
0.937
0.960

0.962
0.964
0.966
0.945
0.968

Table 1. Single-view depth results on the KITTI dataset [15] using the split of Eigen et al. [7] (Baseline numbers taken from [16]). For
training, K = KITTI, and CS = Cityscapes [5]. All methods we compare with use some form of supervision (either ground-truth depth or
calibrated camera pose) during training. Note: results from Garg et al. [14] are capped at 50m depth, so we break these out separately in
the lower part of the table.

Figure 7. Comparison of single-view depth predictions on the
KITTI dataset by our initial Cityscapes model and the ﬁnal model
(pre-trained on Cityscapes and then ﬁne-tuned on KITTI). The
Cityscapes model sometimes makes structural mistakes (e.g. holes
on car body) likely due to the domain gap between the two
datasets.

Method

Supervision

Error metric

Pose Abs Rel

Sq Rel RMSE RMSE log

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

Train set mean
Karsch et al. [25]
Liu et al. [33]
Laina et al. [31]
Godard et al. [16]

Ours

0.876
0.428
0.475
0.204
0.544

0.383

13.98
5.079
6.562
1.840
10.94

5.321

12.27
8.389
10.05
5.683
11.76

10.47

0.307
0.149
0.165
0.084
0.193

0.478

Table 2. Results on the Make3D dataset [42]. Similar to ours, Go-
dard et al. [16] do not utilize any of the Make3D data during train-
ing, and directly apply the model trained on KITTI+Cityscapes to
the test set. Following the evaluation protocol of [16], the errors
are only computed where depth is less than 70 meters in a central
image crop.

Figure 8. Our sample predictions on the Make3D dataset. Note
that our model is trained on KITTI + Cityscapes only, and directly
tested on Make3D.

the scaling factor for the predictions made by each method to best
align with the ground truth, and then measure the Absolute Trajec-
tory Error (ATE) [37] as the metric. ATE is computed on 5-frame
snippets and averaged over the full sequence.3 As shown in Table 3
and Fig. 9, our method outperforms both baselines (mean odome-
try and ORB-SLAM (short)) that share the same input setting
as ours, but falls short of ORB-SLAM (full), which leverages
whole sequences (1591 for seq. 09 and 1201 for seq. 10) for loop
closure and re-localization.

For better understanding of our pose estimation results, we
show in Figure 9 the ATE curve with varying amount of side-

of car motion (using ground-truth odometry) for 5-frame snippets.
To resolve scale ambiguity during evaluation, we ﬁrst optimize

3For evaluating ORB-SLAM (full) we break down the trajectory of
the full sequence into 5-frame snippets with the reference coordinate frame
adjusted to the central frame of each snippet.

Method

Seq. 09

Seq. 10

ORB-SLAM (full)

0.014 ± 0.008

0.012 ± 0.011

ORB-SLAM (short)
Mean Odom.
Ours

0.064 ± 0.141
0.032 ± 0.026
0.021 ± 0.017

0.064 ± 0.130
0.028 ± 0.023
0.020 ± 0.015

Table 3. Absolute Trajectory Error (ATE) on the KITTI odome-
try split averaged over all 5-frame snippets (lower is better). Our
method outperforms baselines with the same input setting, but falls
short of ORB-SLAM (full) that uses strictly more data.

Figure 9. Absolute Trajectory Error (ATE) at different left/right
turning magnitude (coordinate difference in the side-direction be-
tween the start and ending frame of a testing sequence). Our
method performs signiﬁcantly better than ORB-SLAM (short)
when side rotation is small, and is comparable with ORB-SLAM
(full) across the entire spectrum.

rotation by the car between the beginning and the end of a se-
quence. Figure 9 suggests that our method is signiﬁcantly bet-
ter than ORB-SLAM (short) when the side-rotation is small
(i.e. car mostly driving forward), and comparable to ORB-SLAM
(full) across the entire spectrum. The large performance
gap between ours and ORB-SLAM (short) suggests that our
learned ego-motion could potentially be used as an alternative to
the local estimation modules in monocular SLAM systems.

4.3. Visualizing the explainability prediction

We visualize example explainability masks predicted by our
network in Figure 10. The ﬁrst three rows suggest that the network
has learned to identify dynamic objects in the scene as unexplain-
able by our model, and similarly, rows 4–5 are examples of ob-
jects that disappear from the frame in subsequent views. The last
two rows demonstrate the potential downside of explainability-
weighted loss: the depth CNN has low conﬁdence in predicting
thin structures well, and tends to mask them as unexplainable.

5. Discussion

We have presented an end-to-end learning pipeline that utilizes
the task of view synthesis for supervision of single-view depth
and camera pose estimation. The system is trained on unlabeled
videos, and yet performs comparably with approaches that require
ground-truth depth or pose for training. Despite good performance
on the benchmark evaluation, our method is by no means close to
solving the general problem of unsupervised learning of 3D scene
structure inference. A number of major challenges are yet to be

Figure 10. Sample visualizations of the explainability masks.
Highlighted pixels are predicted to be unexplainable by the net-
work due to motion (rows 1–3), occlusion/visibility (rows 4–5), or
other factors (rows 7–8).

addressed: 1) our current framework does not explicitly estimate
scene dynamics and occlusions (although they are implicitly taken
into account by the explainability masks), both of which are crit-
ical factors in 3D scene understanding. Direct modeling of scene
dynamics through motion segmentation (e.g. [48, 40]) could be a
potential solution; 2) our framework assumes the camera intrinsics
are given, which forbids the use of random Internet videos with un-
known camera types/calibration – we plan to address this in future
work; 3) depth maps are a simpliﬁed representation of the under-
lying 3D scene. It would be interesting to extend our framework
to learn full 3D volumetric representations (e.g. [46]).

Another interesting area for future work would be to investi-
gate in more detail the representation learned by our system. In
particular, the pose network likely uses some form of image cor-
respondence in estimating the camera motion, whereas the depth
estimation network likely recognizes common structural features
of scenes and objects. It would be interesting to probe these, and
investigate the extent to which our network already performs, or
could be re-purposed to perform, tasks such as object detection
and semantic segmentation.

Acknowledgments: We thank our colleagues, Sudheendra Vijaya-
narasimhan, Susanna Ricco, Cordelia Schmid, Rahul Sukthankar, and Ka-
terina Fragkiadaki for their help. We also thank the anonymous reviewers
for their valuable comments. TZ would like to thank Shubham Tulsiani for
helpful discussions, and Clement Godard for sharing the evaluation code.
This work is also partially funded by Intel/NSF VEC award IIS-1539099.

References

[1] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, et al.
TensorFlow: Large-scale machine learning on heteroge-
neous distributed systems. arXiv preprint arXiv:1603.04467,
2016. 5

[2] P. Agrawal, J. Carreira, and J. Malik. Learning to see by

moving. In Int. Conf. Computer Vision, 2015. 2

[3] J. Bergen, P. Anandan, K. Hanna, and R. Hingorani. Hier-
In Computer Vi-

archical model-based motion estimation.
sionECCV’92, pages 237–252. Springer, 1992. 4

[4] S. E. Chen and L. Williams. View interpolation for image
synthesis. In Proceedings of the 20th annual conference on
Computer graphics and interactive techniques, pages 279–
288. ACM, 1993. 2

[5] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
Cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3213–3223, 2016. 5, 7
[6] P. E. Debevec, C. J. Taylor, and J. Malik. Modeling and ren-
dering architecture from photographs: A hybrid geometry-
and image-based approach. In Proceedings of the 23rd an-
nual conference on Computer graphics and interactive tech-
niques, pages 11–20. ACM, 1996. 2

[7] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
In
from a single image using a multi-scale deep network.
Advances in Neural Information Processing Systems, 2014.
2, 5, 6, 7

[8] C. Fehn. Depth-image-based rendering (dibr), compression,
and transmission for a new approach on 3d-tv. In Electronic
Imaging 2004, pages 93–104. International Society for Op-
tics and Photonics, 2004. 3

[9] A. Fitzgibbon, Y. Wexler, and A. Zisserman. Image-based
Int. Journal of Com-

rendering using image-based priors.
puter Vision, 63(2):141–151, 2005. 2

[10] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
Stereo: Learning to predict new views from the world’s im-
agery. In Computer Vision and Pattern Recognition, 2016. 1,
2, 3

[11] D. F. Fouhey, W. Hussain, A. Gupta, and M. Hebert. Single
image 3D without a single 3D image. In Proceedings of the
IEEE International Conference on Computer Vision, pages
1053–1061, 2015. 2

[12] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski. To-
wards internet-scale multi-view stereo. In Computer Vision
and Pattern Recognition, pages 1434–1441. IEEE, 2010. 2

[13] M. Gadelha, S. Maji, and R. Wang.

tion from 2d views of multiple objects.
arXiv:1612.05872, 2016. 2

3d shape induc-
arXiv preprint

[14] R. Garg, V. K. BG, G. Carneiro, and I. Reid. Unsupervised
CNN for single view depth estimation: Geometry to the res-
cue. In European Conf. Computer Vision, 2016. 1, 2, 3, 4, 5,
6, 7

[15] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for
autonomous driving? The KITTI vision benchmark suite.

In Computer Vision and Pattern Recognition (CVPR), 2012
IEEE Conference on, pages 3354–3361. IEEE, 2012. 2, 5, 7
[16] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsupervised
monocular depth estimation with left-right consistency.
In
Computer Vision and Pattern Recognition, 2017. 1, 2, 3, 4,
5, 7

[17] R. Goroshin, J. Bruna, J. Tompson, D. Eigen, and Y. Le-
Cun. Unsupervised learning of spatiotemporally coherent
metrics. In Proceedings of the IEEE International Confer-
ence on Computer Vision, pages 4086–4093, 2015. 2
[18] X. Han, T. Leung, Y. Jia, R. Sukthankar, and A. C. Berg.
MatchNet: Unifying feature and metric learning for patch-
based matching. In Computer Vision and Pattern Recogni-
tion, pages 3279–3286, 2015. 2

[19] A. Handa, M. Bloesch, V. Patraucean, S. Stent, J. McCor-
mac, and A. Davison. gvnn: Neural network library for ge-
ometric computer vision. arXiv preprint arXiv:1607.07405,
2016. 2

[20] D. Hoiem, A. A. Efros, and M. Hebert . Automatic photo

pop-up. In Proc. SIGGRAPH, 2005. 2

[21] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015. 5

[22] M. Irani and P. Anandan. About direct methods.

In In-
ternational Workshop on Vision Algorithms, pages 267–277.
Springer, 1999. 2

[23] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in Neural Information

transformer networks.
Processing Systems, pages 2017–2025, 2015. 3

[24] D. Jayaraman and K. Grauman. Learning image representa-
tions tied to egomotion. In Int. Conf. Computer Vision, 2015.
2

[25] K. Karsch, C. Liu, and S. B. Kang. Depth transfer: Depth
extraction from video using non-parametric sampling. IEEE
transactions on pattern analysis and machine intelligence,
36(11):2144–2158, 2014. 7

[26] A. Kendall, M. Grimes, and R. Cipolla. PoseNet: A convo-
lutional network for real-time 6-DOF camera relocalization.
In Int. Conf. Computer Vision, pages 2938–2946, 2015. 2

[27] A. Kendall, H. Martirosyan, S. Dasgupta, P. Henry,
R. Kennedy, A. Bachrach, and A. Bry. End-to-end learning
of geometry and context for deep stereo regression. arXiv
preprint arXiv:1703.04309, 2017. 2

[28] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[29] T. D. Kulkarni, W. F. Whitney, P. Kohli, and J. Tenenbaum.
Deep convolutional inverse graphics network. In C. Cortes,
N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing Systems,
pages 2539–2547. Curran Associates, Inc., 2015. 2

[30] Y. Kuznietsov, J. St¨uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. arXiv
preprint arXiv:1702.02706, 2017. 2

[31] I. Laina, C. Rupprecht, V. Belagiannis, F. Tombari, and
N. Navab. Deeper depth prediction with fully convolutional
residual networks. In 3D Vision (3DV), 2016 Fourth Interna-
tional Conference on, pages 239–248. IEEE, 2016. 7

tion network for learning monocular stereo. arXiv preprint
arXiv:1612.02401, 2016. 4

[48] S. Vijayanarasimhan, S. Ricco, C. Schmid, R. Sukthankar,
and K. Fragkiadaki. SfM-Net: Learning of structure and mo-
tion from video. arXiv preprint, 2017. 2, 4, 8

[49] X. Wang and A. Gupta. Unsupervised learning of visual rep-
resentations using videos. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 2794–2802,
2015. 2

[50] C. Wu. VisualSFM: A visual structure from motion system.

http://ccwu.me/vsfm, 2011. 2

[51] J. Xie, R. B. Girshick, and A. Farhadi. Deep3D: Fully au-
tomatic 2D-to-3D video conversion with deep convolutional
neural networks. In European Conf. Computer Vision, 2016.
2

[52] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 2

[53] J. Zbontar and Y. LeCun. Stereo matching by training a con-
volutional neural network to compare image patches. Jour-
nal of Machine Learning Research, 17(1-32):2, 2016. 2
[54] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
synthesis by appearance ﬂow. In European Conference on
Computer Vision, pages 286–301. Springer, 2016. 2, 3
[55] C. L. Zitnick, S. B. Kang, M. Uyttendaele, S. Winder, and
R. Szeliski. High-quality video view interpolation using a
In ACM Transactions on Graphics
layered representation.
(TOG), volume 23, pages 600–608. ACM, 2004. 2

[32] F. Liu, C. Shen, G. Lin, and I. Reid. Learning depth from sin-
gle monocular images using deep convolutional neural ﬁelds.
IEEE transactions on pattern analysis and machine intelli-
gence, 38(10):2024–2039, 2016. 7

[33] M. Liu, M. Salzmann, and X. He. Discrete-continuous depth
estimation from a single image. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 716–723, 2014. 7

[34] M. M. Loper and M. J. Black. OpenDR: An approximate
differentiable renderer. In European Conf. Computer Vision,
pages 154–169. Springer, 2014. 2

[35] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train con-
volutional networks for disparity, optical ﬂow, and scene
In Proceedings of the IEEE Conference
ﬂow estimation.
on Computer Vision and Pattern Recognition, pages 4040–
4048, 2016. 4

[36] I. Misra, C. L. Zitnick, and M. Hebert. Shufﬂe and learn:
unsupervised learning using temporal order veriﬁcation. In
European Conference on Computer Vision, pages 527–544.
Springer, 2016. 2

[37] R. Mur-Artal, J. M. M. Montiel, and J. D. Tardos. ORB-
SLAM: a versatile and accurate monocular SLAM system.
IEEE Transactions on Robotics, 31(5), 2015. 6, 7

[38] R. A. Newcombe, S. J. Lovegrove, and A. J. Davison.
In Int.

DTAM: Dense tracking and mapping in real-time.
Conf. Computer Vision, pages 2320–2327. IEEE, 2011. 2

[39] D. Pathak, R. Girshick, P. Doll´ar, T. Darrell, and B. Hariha-
ran. Learning features by watching objects move. In CVPR,
2017. 2

[40] R. Ranftl, V. Vineet, Q. Chen, and V. Koltun. Dense monoc-
ular depth estimation in complex dynamic scenes. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4058–4066, 2016. 8

[41] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances In Neural Information
Processing Systems, pages 4997–5005, 2016. 2

[42] A. Saxena, M. Sun, and A. Y. Ng. Make3D: Learning 3D
scene structure from a single still image. Pattern Analysis
and Machine Intelligence, 31(5):824–840, May 2009. 2, 5, 7
[43] S. M. Seitz and C. R. Dyer. View morphing. In Proceedings
of the 23rd annual conference on Computer graphics and
interactive techniques, pages 21–30. ACM, 1996. 2

[44] R. Szeliski. Prediction error as a quality metric for motion
and stereo. In Int. Conf. Computer Vision, volume 2, pages
781–788. IEEE, 1999. 1

[45] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Multi-view 3d
models from single images with a convolutional network. In
European Conference on Computer Vision, pages 322–337.
Springer, 2016. 2

[46] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In Computer Vision and Pattern Recogni-
tion, 2017. 2, 8

[47] B. Ummenhofer, H. Zhou, J. Uhrig, N. Mayer, E. Ilg,
A. Dosovitskiy, and T. Brox. DeMoN: Depth and mo-

Unsupervised Learning of Depth and Ego-Motion from Video

Tinghui Zhou∗
UC Berkeley

Matthew Brown
Google

Noah Snavely
Google

David G. Lowe
Google

7
1
0
2
 
g
u
A
 
1
 
 
]

V
C
.
s
c
[
 
 
2
v
3
1
8
7
0
.
4
0
7
1
:
v
i
X
r
a

Abstract

We present an unsupervised learning framework for the
task of monocular depth and camera motion estimation
from unstructured video sequences.
In common with re-
cent work [10, 14, 16], we use an end-to-end learning ap-
In
proach with view synthesis as the supervisory signal.
contrast to the previous work, our method is completely un-
supervised, requiring only monocular video sequences for
training. Our method uses single-view depth and multi-
view pose networks, with a loss based on warping nearby
views to the target using the computed depth and pose. The
networks are thus coupled by the loss during training, but
can be applied independently at test time. Empirical eval-
uation on the KITTI dataset demonstrates the effectiveness
of our approach: 1) monocular depth performs comparably
with supervised methods that use either ground-truth pose
or depth for training, and 2) pose estimation performs fa-
vorably compared to established SLAM systems under com-
parable input settings.

1. Introduction

Humans are remarkably capable of inferring ego-motion
and the 3D structure of a scene even over short timescales.
For instance, in navigating along a street, we can easily
locate obstacles and react quickly to avoid them. Years
of research in geometric computer vision has failed to
recreate similar modeling capabilities for real-world scenes
(e.g., where non-rigidity, occlusion and lack of texture are
present). So why do humans excel at this task? One hypoth-
esis is that we develop a rich, structural understanding of the
world through our past visual experience that has largely
consisted of moving around and observing vast numbers of
scenes and developing consistent modeling of our observa-
tions. From millions of such observations, we have learned
about the regularities of the world—roads are ﬂat, buildings
are straight, cars are supported by roads etc., and we can
apply this knowledge when perceiving a new scene, even
from a single monocular image.

∗The majority of the work was done while interning at Google.

Figure 1. The training data to our system consists solely of un-
labeled image sequences capturing scene appearance from differ-
ent viewpoints, where the poses of the images are not provided.
Our training procedure produces two models that operate inde-
pendently, one for single-view depth prediction, and one for multi-
view camera pose estimation.

In this work, we mimic this approach by training a model
that observes sequences of images and aims to explain its
observations by predicting likely camera motion and the
scene structure (as shown in Fig. 1). We take an end-to-
end approach in allowing the model to map directly from
input pixels to an estimate of ego-motion (parameterized as
6-DoF transformation matrices) and the underlying scene
structure (parameterized as per-pixel depth maps under a
reference view). We are particularly inspired by prior work
that has suggested view synthesis as a metric [44] and recent
work that tackles the calibrated, multi-view 3D case in an
end-to-end framework [10]. Our method is unsupervised,
and can be trained simply using sequences of images with
no manual labeling or even camera motion information.

Our approach builds upon the insight that a geomet-
ric view synthesis system only performs consistently well
when its intermediate predictions of the scene geometry
and the camera poses correspond to the physical ground-

1

truth. While imperfect geometry and/or pose estimation
can cheat with reasonable synthesized views for certain
types of scenes (e.g., textureless), the same model would
fail miserably when presented with another set of scenes
with more diverse layout and appearance structures. Thus,
our goal is to formulate the entire view synthesis pipeline
as the inference procedure of a convolutional neural net-
work, so that by training the network on large-scale video
data for the ‘meta’-task of view synthesis the network is
forced to learn about intermediate tasks of depth and cam-
era pose estimation in order to come up with a consistent
explanation of the visual world. Empirical evaluation on
the KITTI [15] benchmark demonstrates the effectiveness
of our approach on both single-view depth and camera pose
estimation. Our code will be made available at https:
//github.com/tinghuiz/SfMLearner.

2. Related work

Structure from motion The simultaneous estimation of
structure and motion is a well studied problem with an estab-
lished toolchain of techniques [12, 50, 38]. Whilst the traditional
toolchain is effective and efﬁcient in many cases, its reliance on ac-
curate image correspondence can cause problems in areas of low
texture, complex geometry/photometry, thin structures, and occlu-
sions. To address these issues, several of the pipeline stages have
been recently tackled using deep learning, e.g., feature match-
ing [18], pose estimation [26], and stereo [10, 27, 53]. These
learning-based techniques are attractive in that they are able to
leverage external supervision during training, and potentially over-
come the above issues when applied to test data.

Warping-based view synthesis One important application
of geometric scene understanding is the task of novel view syn-
thesis, where the goal is to synthesize the appearance of the scene
seen from novel camera viewpoints. A classic paradigm for view
synthesis is to ﬁrst either estimate the underlying 3D geometry
explicitly or establish pixel correspondence among input views,
and then synthesize the novel views by compositing image patches
from the input views (e.g., [4, 55, 43, 6, 9]). Recently, end-to-
end learning has been applied to reconstruct novel views by trans-
forming the input based on depth or ﬂow, e.g., DeepStereo [10],
Deep3D [51] and Appearance Flows [54]. In these methods, the
underlying geometry is represented by quantized depth planes
(DeepStereo), probabilistic disparity maps (Deep3D) and view-
dependent ﬂow ﬁelds (Appearance Flows), respectively. Unlike
methods that directly map from input views to the target view
(e.g., [45]), warping-based methods are forced to learn intermedi-
ate predictions of geometry and/or correspondence. In this work,
we aim to distill such geometric reasoning capability from CNNs
trained to perform warping-based view synthesis.

Learning single-view 3D from registered 2D views Our
work is closely related to a line of recent research on learning
single-view 3D inference from registered 2D observations. Garg et
al. [14] propose to learn a single-view depth estimation CNN us-
ing projection errors to a calibrated stereo twin for supervision.
Concurrently, Deep3D [51] predicts a second stereo viewpoint

from an input image using stereoscopic ﬁlm footage as training
data. A similar approach was taken by Godard et al. [16], with
the addition of a left-right consistency constraint, and a better ar-
chitecture design that led to impressive performance. Like our
approach, these techniques only learn from image observations of
the world, unlike methods that require explicit depth for training,
e.g., [20, 42, 7, 27, 30].

These techniques bear some resemblance to direct methods for
structure and motion estimation [22], where the camera parame-
ters and scene depth are adjusted to minimize a pixel-based error
function. However, rather than directly minimizing the error to
obtain the estimation, the CNN-based methods only take a gradi-
ent step for each batch of input instances, which allows the net-
work to learn an implicit prior from a large corpus of related im-
agery. Several authors have explored building differentiable ren-
dering operations into their models that are trained in this way,
e.g., [19, 29, 34].

While most of the above techniques (including ours) are mainly
focused on inferring depth maps as the scene geometry output, re-
cent work (e.g., [13, 41, 46, 52]) has also shown success in learn-
ing 3D volumetric representations from 2D observations based on
similar principles of projective geometry. Fouhey et al. [11] fur-
ther show that it is even possible to learn 3D inference without 3D
labels (or registered 2D views) by utilizing scene regularity.

Unsupervised/Self-supervised learning from video An-
other line of related work to ours is visual representation learning
from video, where the general goal is to design pretext tasks for
learning generic visual features from video data that can later be
re-purposed for other vision tasks such as object detection and se-
mantic segmentation. Such pretext tasks include ego-motion esti-
mation [2, 24], tracking [49], temporal coherence [17], temporal
order veriﬁcation [36], and object motion mask prediction [39].
While we focus on inferring the explicit scene geometry and
ego-motion in this work, intuitively, the internal representation
learned by the deep network (especially the single-view depth
CNN) should capture some level of semantics that could gener-
alize to other tasks as well.

Concurrent to our work, Vijayanarasimhan et al. [48] indepen-
dently propose a framework for joint training of depth, camera
motion and scene motion from videos. While both methods are
conceptually similar, ours is focused on the unsupervised aspect,
whereas their framework adds the capability to incorporate super-
vision (e.g., depth, camera motion or scene motion). There are
signiﬁcant differences in how scene dynamics are modeled during
training, in which they explicitly solve for object motion whereas
our explainability mask discounts regions undergoing motion, oc-
clusion and other factors.

3. Approach

Here we propose a framework for jointly training a single-view
depth CNN and a camera pose estimation CNN from unlabeled
video sequences. Despite being jointly trained, the depth model
and the pose estimation model can be used independently during
test-time inference. Training examples to our model consist of
short image sequences of scenes captured by a moving camera.
While our training procedure is robust to some degree of scene

Figure 2. Overview of the supervision pipeline based on view syn-
thesis. The depth network takes only the target view as input, and
outputs a per-pixel depth map ˆDt. The pose network takes both the
target view (It) and the nearby/source views (e.g., It−1 and It+1)
as input, and outputs the relative camera poses ( ˆTt→t−1, ˆTt→t+1).
The outputs of both networks are then used to inverse warp the
source views (see Sec. 3.2) to reconstruct the target view, and the
photometric reconstruction loss is used for training the CNNs. By
utilizing view synthesis as supervision, we are able to train the
entire framework in an unsupervised manner from videos.

motion, we assume that the scenes we are interested in are mostly
rigid, i.e., the scene appearance change across different frames is
dominated by the camera motion.

3.1. View synthesis as supervision

The key supervision signal for our depth and pose prediction
CNNs comes from the task of novel view synthesis: given one
input view of a scene, synthesize a new image of the scene seen
from a different camera pose. We can synthesize a target view
given a per-pixel depth in that image, plus the pose and visibility
in a nearby view. As we will show next, this synthesis process can
be implemented in a fully differentiable manner with CNNs as the
geometry and pose estimation modules. Visibility can be handled,
along with non-rigidity and other non-modeled factors, using an
“explanability” mask, which we discuss later (Sec. 3.3).

Let us denote < I1, . . . , IN > as a training image sequence
with one of the frames It being the target view and the rest being
the source views Is(1 ≤ s ≤ N, s (cid:54)= t). The view synthesis
objective can be formulated as

Figure 3. Illustration of the differentiable image warping process.
For each point pt in the target view, we ﬁrst project it onto the
source view based on the predicted depth and camera pose, and
then use bilinear interpolation to obtain the value of the warped
image ˆIs at location pt.

framework can be applied to standard videos without pose infor-
mation. Furthermore, it predicts the poses as part of the learning
framework. See Figure 2 for an illustration of our learning pipeline
for depth and pose estimation.

3.2. Differentiable depth image-based rendering

As indicated in Eq. 1, a key component of our learning frame-
work is a differentiable depth image-based renderer that recon-
structs the target view It by sampling pixels from a source view Is
based on the predicted depth map ˆDt and the relative pose ˆTt→s.
Let pt denote the homogeneous coordinates of a pixel in the
target view, and K denote the camera intrinsics matrix. We can
obtain pt’s projected coordinates onto the source view ps by2

ps ∼ K ˆTt→s ˆDt(pt)K −1pt

(2)

Notice that the projected coordinates ps are continuous values. To
obtain Is(ps) for populating the value of ˆIs(pt) (see Figure 3),
we then use the differentiable bilinear sampling mechanism pro-
posed in the spatial transformer networks [23] that linearly in-
terpolates the values of the 4-pixel neighbors (top-left, top-right,
bottom-left, and bottom-right) of ps to approximate Is(ps), i.e.
ˆIs(pt) = Is(ps) = (cid:80)
s ), where wij is
linearly proportional to the spatial proximity between ps and pij
s ,
and (cid:80)
i,j wij = 1. A similar strategy is used in [54] for learning
to directly warp between different views, while here the coordi-
nates for pixel warping are obtained through projective geometry
that enables the factorization of depth and camera pose.

i∈{t,b},j∈{l,r} wijIs(pij

Lvs =

(cid:88)

(cid:88)

s

p

|It(p) − ˆIs(p)| ,

(1)

3.3. Modeling the model limitation

where p indexes over pixel coordinates, and ˆIs is the source view
Is warped to the target coordinate frame based on a depth image-
based rendering module [8] (described in Sec. 3.2), taking the pre-
dicted depth ˆDt, the predicted 4×4 camera transformation matrix1
ˆTt→s and the source view Is as input.

Note that the idea of view synthesis as supervision has also
been recently explored for learning single-view depth estima-
tion [14, 16] and multi-view stereo [10]. However, to the best of
our knowledge, all previous work requires posed image sets dur-
ing training (and testing too in the case of DeepStereo), while our

Note that when applied to monocular videos the above view
synthesis formulation implicitly assumes 1) the scene is static
without moving objects; 2) there is no occlusion/disocclusion be-
tween the target view and the source views; 3) the surface is Lam-
bertian so that the photo-consistency error is meaningful. If any
of these assumptions are violated in a training sequence, the gra-
dients could be corrupted and potentially inhibit training. To im-
prove the robustness of our learning pipeline to these factors, we
additionally train a explainability prediction network (jointly and
simultaneously with the depth and pose networks) that outputs a
per-pixel soft mask ˆEs for each target-source pair, indicating the

1In practice, the CNN estimates the Euler angles and the 3D translation

2For notation simplicity, we omit showing the necessary conversion to

vector, which are then converted to the transformation matrix.

homogeneous coordinates along the steps of matrix multiplication.

Figure 4. Network architecture for our depth/pose/explainability prediction modules. The width and height of each rectangular block indi-
cates the output channels and the spatial dimension of the feature map at the corresponding layer respectively, and each reduction/increase
in size indicates a change by the factor of 2. (a) For single-view depth, we adopt the DispNet [35] architecture with multi-scale side pre-
dictions. The kernel size is 3 for all the layers except for the ﬁrst 4 conv layers with 7, 7, 5, 5, respectively. The number of output channels
for the ﬁrst conv layer is 32. (b) The pose and explainabilty networks share the ﬁrst few conv layers, and then branch out to predict 6-DoF
relative pose and multi-scale explainability masks, respectively. The number of output channels for the ﬁrst conv layer is 16, and the kernel
size is 3 for all the layers except for the ﬁrst two conv and the last two deconv/prediction layers where we use 7, 5, 5, 7, respectively. See
Section 3.5 for more details.

network’s belief in where direct view synthesis will be success-
fully modeled for each target pixel. Based on the predicted ˆEs,
the view synthesis objective is weighted correspondingly by

Lvs =

(cid:88)

(cid:88)

ˆEs(p)|It(p) − ˆIs(p)| .

(3)

<I1,...,IN >∈S

p

Since we do not have direct supervision for ˆEs, training with the
above loss would result in a trivial solution of the network always
predicting ˆEs to be zero, which perfectly minimizes the loss. To
resolve this, we add a regularization term Lreg( ˆEs) that encour-
ages nonzero predictions by minimizing the cross-entropy loss
with constant label 1 at each pixel location. In other words, the
network is encouraged to minimize the view synthesis objective,
but allowed a certain amount of slack for discounting the factors
not considered by the model.

3.4. Overcoming the gradient locality

One remaining issue with the above learning pipeline is that the
gradients are mainly derived from the pixel intensity difference be-
tween I(pt) and the four neighbors of I(ps), which would inhibit
training if the correct ps (projected using the ground-truth depth
and pose) is located in a low-texture region or far from the current
estimation. This is a well known issue in motion estimation [3].
Empirically, we found two strategies to be effective for overcom-
ing this issue: 1) using a convolutional encoder-decoder architec-
ture with a small bottleneck for the depth network that implicitly
constrains the output to be globally smooth and facilitates gradi-
ents to propagate from meaningful regions to nearby regions; 2)

explicit multi-scale and smoothness loss (e.g., as in [14, 16]) that
allows gradients to be derived from larger spatial regions directly.
We adopt the second strategy in this work as it is less sensitive to
architectural choices. For smoothness, we minimize the L1 norm
of the second-order gradients for the predicted depth maps (similar
to [48]).

Our ﬁnal objective becomes

Lf inal =

Ll

vs + λsLl

smooth + λe

Lreg( ˆEl

s) ,

(4)

(cid:88)

l

(cid:88)

s

where l indexes over different image scales, s indexes over source
images, and λs and λe are the weighting for the depth smoothness
loss and the explainability regularization, respectively.

3.5. Network architecture

Single-view depth For single-view depth prediction, we adopt
the DispNet architecture proposed in [35] that is mainly based on
an encoder-decoder design with skip connections and multi-scale
side predictions (see Figure 4). All conv layers are followed by
ReLU activation except for the prediction layers, where we use
1/(α ∗ sigmoid(x) + β) with α = 10 and β = 0.01 to con-
strain the predicted depth to be always positive within a reason-
able range. We also experimented with using multiple views as
input to the depth network, but did not ﬁnd this to improve the
results. This is in line with the observations in [47], where opti-
cal ﬂow constraints need to be enforced to utilize multiple views
effectively.

Pose The input to the pose estimation network is the target view
concatenated with all the source views (along the color channels),
and the outputs are the relative poses between the target view and
each of the source views. The network consists of 7 stride-2 con-
volutions followed by a 1 × 1 convolution with 6 ∗ (N − 1) output
channels (corresponding to 3 Euler angles and 3-D translation for
each source view). Finally, global average pooling is applied to
aggregate predictions at all spatial locations. All conv layers are
followed by ReLU except for the last layer where no nonlinear
activation is applied.

Explainability mask The explainability prediction network
shares the ﬁrst ﬁve feature encoding layers with the pose network,
followed by 5 deconvolution layers with multi-scale side predic-
tions. All conv/deconv layers are followed by ReLU except for
the prediction layers with no nonlinear activation. The number of
output channels for each prediction layer is 2 ∗ (N − 1), with ev-
ery two channels normalized by softmax to obtain the explainabil-
ity prediction for the corresponding source-target pair (the second
channel after normalization is ˆEs and used in computing the loss
in Eq. 3).

4. Experiments

Here we evaluate the performance of our system, and compare
with prior approaches on single-view depth as well as ego-motion
estimation. We mainly use the KITTI dataset [15] for benchmark-
ing, but also use the Make3D dataset [42] for evaluating cross-
dataset generalization ability.

Training Details We implemented the system using the pub-
licly available TensorFlow [1] framework. For all the experiments,
we set λs = 0.5/l (l is the downscaling factor for the correspond-
ing scale) and λe = 0.2. During training, we used batch normal-
ization [21] for all the layers except for the output layers, and the
Adam [28] optimizer with β1 = 0.9, β2 = 0.999, learning rate of
0.0002 and mini-batch size of 4. The training typically converges
after about 150K iterations. All the experiments are performed
with image sequences captured with a monocular camera. We re-
size the images to 128 × 416 during training, but both the depth
and pose networks can be run fully-convolutionally for images of
arbitrary size at test time.

4.1. Single-view depth estimation

We train our system on the split provided by [7], and exclude
all the frames from the testing scenes as well as static sequences
with mean optical ﬂow magnitude less than 1 pixel for training.
We ﬁx the length of image sequences to be 3 frames, and treat the
central frame as the target view and the ±1 frames as the source
views. We use images captured by both color cameras, but treated
them independently when forming training sequences. This results
in a total of 44, 540 sequences, out of which we use 40, 109 for
training and 4, 431 for validation.

To the best of our knowledge, no previous systems exist that
learn single-view depth estimation in an unsupervised manner
from monocular videos. Nonetheless, here we provide comparison
with prior methods with depth supervision [7] and recent methods
that use calibrated stereo images (i.e. with pose supervision) for

Figure 5. Our sample predictions on the Cityscapes dataset using
the model trained on Cityscapes only.

training [14, 16]. Since the depth predicted by our method is de-
ﬁned up to a scale factor, for evaluation we multiply the predicted
depth maps by a scalar ˆs that matches the median with the ground-
truth, i.e. ˆs = median(Dgt)/median(Dpred).

Similar to [16], we also experimented with ﬁrst pre-training the
system on the larger Cityscapes dataset [5] (sample predictions are
shown in Figure 5), and then ﬁne-tune on KITTI, which results in
slight performance improvement.

KITTI Here we evaluate the single-view depth performance on
the 697 images from the test split of [7]. As shown in Table 1,
our unsupervised method performs comparably with several su-
pervised methods (e.g. Eigen et al. [7] and Garg et al. [14]), but
falls short of concurrent work by Godard et al. [16] that uses cal-
ibrated stereo images (i.e. with pose supervision) with left-right
cycle consistency loss for training. For future work, it would be in-
teresting to see if incorporating the similar cycle consistency loss
into our framework could further improve the results. Figure 6
provides examples of visual comparison between our results and
some supervised baselines over a variety of examples. One can
see that although trained in an unsupervised manner, our results
are comparable to that of the supervised baselines, and sometimes
preserve the depth boundaries and thin structures such as trees and
street lights better.

We show sample predictions made by our initial Cityscapes
model and the ﬁnal model (pre-trained on Cityscapes and then
ﬁne-tuned on KITTI) in Figure 7. Due to the domain gap between
the two datasets, our Cityscapes model sometimes has difﬁculty
in recovering the complete shape of the car/bushes, and mistakes
them with distant objects.

We also performed an ablation study of the explainability mod-
eling (see Table 1), which turns out only offering a modest per-
formance boost. This is likely because 1) most of the KITTI
scenes are static without signiﬁcant scene motions, and 2) the oc-
clusion/visibility effects only occur in small regions in sequences

Figure 6. Comparison of single-view depth estimation between Eigen et al. [7] (with ground-truth depth supervision), Garg et al. [14]
(with ground-truth pose supervision), and ours (unsupervised). The ground-truth depth map is interpolated from sparse measurements for
visualization purpose. The last two rows show typical failure cases of our model, which sometimes struggles in vast open scenes and
objects close to the front of the camera.

across a short time span (3-frames), which make the explainabil-
ity modeling less essential to the success of training. Nonetheless,
our explainability prediction network does seem to capture the fac-
tors like scene motion and visibility well (see Sec. 4.3), and could
potentially be more important for other more challenging datasets.

Make3D To evaluate the generalization ability of our single-
view depth model, we directly apply our model
trained on
Cityscapes + KITTI to the Make3D dataset unseen during train-
ing. While there still remains a signiﬁcant performance gap be-
tween our method and others supervised using Make3D ground-
truth depth (see Table 2), our predictions are able to capture the
global scene layout reasonably well without any training on the
Make3D images (see Figure 8).

4.2. Pose estimation

To evaluate the performance of our pose estimation network,
we applied our system to the ofﬁcial KITTI odometry split (con-
taining 11 driving sequences with ground truth odometry obtained
through the IMU/GPS readings, which we use for evaluation pur-
pose only), and used sequences 00-08 for training and 09-10 for
testing. In this experiment, we ﬁx the length of input image se-
quences to our system to 5 frames. We compare our ego-motion
estimation with two variants of monocular ORB-SLAM [37] (a
well-established SLAM system): 1) ORB-SLAM (full), which
recovers odometry using all frames of the driving sequence (i.e.
allowing loop closure and re-localization), and 2) ORB-SLAM
(short), which runs on 5-frame snippets (same as our input
setting). Another baseline we compare with is the dataset mean

Method

Dataset

Supervision

Error metric

Accuracy metric

Train set mean
Eigen et al. [7] Coarse
Eigen et al. [7] Fine
Liu et al. [32]
Godard et al. [16]
Godard et al. [16]
Ours (w/o explainability)
Ours
Ours
Ours

Garg et al. [14] cap 50m
Ours (w/o explainability) cap 50m
Ours cap 50m
Ours cap 50m
Ours cap 50m

K
K
K
K
K
CS + K
K
K
CS
CS + K

K
K
K
CS
CS + K

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Pose Abs Rel

Sq Rel RMSE RMSE log

δ < 1.25

δ < 1.252

δ < 1.253

(cid:88)
(cid:88)

(cid:88)

0.403
0.214
0.203
0.202
0.148
0.124
0.221
0.208
0.267
0.198

0.169
0.208
0.201
0.260
0.190

5.530
1.605
1.548
1.614
1.344
1.076
2.226
1.768
2.686
1.836

1.080
1.551
1.391
2.232
1.436

8.709
6.563
6.307
6.523
5.927
5.311
7.527
6.856
7.580
6.565

5.104
5.452
5.181
6.148
4.975

0.403
0.292
0.282
0.275
0.247
0.219
0.294
0.283
0.334
0.275

0.273
0.273
0.264
0.321
0.258

0.593
0.673
0.702
0.678
0.803
0.847
0.676
0.678
0.577
0.718

0.740
0.695
0.696
0.590
0.735

0.776
0.884
0.890
0.895
0.922
0.942
0.885
0.885
0.840
0.901

0.904
0.900
0.900
0.852
0.915

0.878
0.957
0.958
0.965
0.964
0.973
0.954
0.957
0.937
0.960

0.962
0.964
0.966
0.945
0.968

Table 1. Single-view depth results on the KITTI dataset [15] using the split of Eigen et al. [7] (Baseline numbers taken from [16]). For
training, K = KITTI, and CS = Cityscapes [5]. All methods we compare with use some form of supervision (either ground-truth depth or
calibrated camera pose) during training. Note: results from Garg et al. [14] are capped at 50m depth, so we break these out separately in
the lower part of the table.

Figure 7. Comparison of single-view depth predictions on the
KITTI dataset by our initial Cityscapes model and the ﬁnal model
(pre-trained on Cityscapes and then ﬁne-tuned on KITTI). The
Cityscapes model sometimes makes structural mistakes (e.g. holes
on car body) likely due to the domain gap between the two
datasets.

Method

Supervision

Error metric

Pose Abs Rel

Sq Rel RMSE RMSE log

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

Train set mean
Karsch et al. [25]
Liu et al. [33]
Laina et al. [31]
Godard et al. [16]

Ours

0.876
0.428
0.475
0.204
0.544

0.383

13.98
5.079
6.562
1.840
10.94

5.321

12.27
8.389
10.05
5.683
11.76

10.47

0.307
0.149
0.165
0.084
0.193

0.478

Table 2. Results on the Make3D dataset [42]. Similar to ours, Go-
dard et al. [16] do not utilize any of the Make3D data during train-
ing, and directly apply the model trained on KITTI+Cityscapes to
the test set. Following the evaluation protocol of [16], the errors
are only computed where depth is less than 70 meters in a central
image crop.

Figure 8. Our sample predictions on the Make3D dataset. Note
that our model is trained on KITTI + Cityscapes only, and directly
tested on Make3D.

the scaling factor for the predictions made by each method to best
align with the ground truth, and then measure the Absolute Trajec-
tory Error (ATE) [37] as the metric. ATE is computed on 5-frame
snippets and averaged over the full sequence.3 As shown in Table 3
and Fig. 9, our method outperforms both baselines (mean odome-
try and ORB-SLAM (short)) that share the same input setting
as ours, but falls short of ORB-SLAM (full), which leverages
whole sequences (1591 for seq. 09 and 1201 for seq. 10) for loop
closure and re-localization.

For better understanding of our pose estimation results, we
show in Figure 9 the ATE curve with varying amount of side-

of car motion (using ground-truth odometry) for 5-frame snippets.
To resolve scale ambiguity during evaluation, we ﬁrst optimize

3For evaluating ORB-SLAM (full) we break down the trajectory of
the full sequence into 5-frame snippets with the reference coordinate frame
adjusted to the central frame of each snippet.

Method

Seq. 09

Seq. 10

ORB-SLAM (full)

0.014 ± 0.008

0.012 ± 0.011

ORB-SLAM (short)
Mean Odom.
Ours

0.064 ± 0.141
0.032 ± 0.026
0.021 ± 0.017

0.064 ± 0.130
0.028 ± 0.023
0.020 ± 0.015

Table 3. Absolute Trajectory Error (ATE) on the KITTI odome-
try split averaged over all 5-frame snippets (lower is better). Our
method outperforms baselines with the same input setting, but falls
short of ORB-SLAM (full) that uses strictly more data.

Figure 9. Absolute Trajectory Error (ATE) at different left/right
turning magnitude (coordinate difference in the side-direction be-
tween the start and ending frame of a testing sequence). Our
method performs signiﬁcantly better than ORB-SLAM (short)
when side rotation is small, and is comparable with ORB-SLAM
(full) across the entire spectrum.

rotation by the car between the beginning and the end of a se-
quence. Figure 9 suggests that our method is signiﬁcantly bet-
ter than ORB-SLAM (short) when the side-rotation is small
(i.e. car mostly driving forward), and comparable to ORB-SLAM
(full) across the entire spectrum. The large performance
gap between ours and ORB-SLAM (short) suggests that our
learned ego-motion could potentially be used as an alternative to
the local estimation modules in monocular SLAM systems.

4.3. Visualizing the explainability prediction

We visualize example explainability masks predicted by our
network in Figure 10. The ﬁrst three rows suggest that the network
has learned to identify dynamic objects in the scene as unexplain-
able by our model, and similarly, rows 4–5 are examples of ob-
jects that disappear from the frame in subsequent views. The last
two rows demonstrate the potential downside of explainability-
weighted loss: the depth CNN has low conﬁdence in predicting
thin structures well, and tends to mask them as unexplainable.

5. Discussion

We have presented an end-to-end learning pipeline that utilizes
the task of view synthesis for supervision of single-view depth
and camera pose estimation. The system is trained on unlabeled
videos, and yet performs comparably with approaches that require
ground-truth depth or pose for training. Despite good performance
on the benchmark evaluation, our method is by no means close to
solving the general problem of unsupervised learning of 3D scene
structure inference. A number of major challenges are yet to be

Figure 10. Sample visualizations of the explainability masks.
Highlighted pixels are predicted to be unexplainable by the net-
work due to motion (rows 1–3), occlusion/visibility (rows 4–5), or
other factors (rows 7–8).

addressed: 1) our current framework does not explicitly estimate
scene dynamics and occlusions (although they are implicitly taken
into account by the explainability masks), both of which are crit-
ical factors in 3D scene understanding. Direct modeling of scene
dynamics through motion segmentation (e.g. [48, 40]) could be a
potential solution; 2) our framework assumes the camera intrinsics
are given, which forbids the use of random Internet videos with un-
known camera types/calibration – we plan to address this in future
work; 3) depth maps are a simpliﬁed representation of the under-
lying 3D scene. It would be interesting to extend our framework
to learn full 3D volumetric representations (e.g. [46]).

Another interesting area for future work would be to investi-
gate in more detail the representation learned by our system. In
particular, the pose network likely uses some form of image cor-
respondence in estimating the camera motion, whereas the depth
estimation network likely recognizes common structural features
of scenes and objects. It would be interesting to probe these, and
investigate the extent to which our network already performs, or
could be re-purposed to perform, tasks such as object detection
and semantic segmentation.

Acknowledgments: We thank our colleagues, Sudheendra Vijaya-
narasimhan, Susanna Ricco, Cordelia Schmid, Rahul Sukthankar, and Ka-
terina Fragkiadaki for their help. We also thank the anonymous reviewers
for their valuable comments. TZ would like to thank Shubham Tulsiani for
helpful discussions, and Clement Godard for sharing the evaluation code.
This work is also partially funded by Intel/NSF VEC award IIS-1539099.

References

[1] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, et al.
TensorFlow: Large-scale machine learning on heteroge-
neous distributed systems. arXiv preprint arXiv:1603.04467,
2016. 5

[2] P. Agrawal, J. Carreira, and J. Malik. Learning to see by

moving. In Int. Conf. Computer Vision, 2015. 2

[3] J. Bergen, P. Anandan, K. Hanna, and R. Hingorani. Hier-
In Computer Vi-

archical model-based motion estimation.
sionECCV’92, pages 237–252. Springer, 1992. 4

[4] S. E. Chen and L. Williams. View interpolation for image
synthesis. In Proceedings of the 20th annual conference on
Computer graphics and interactive techniques, pages 279–
288. ACM, 1993. 2

[5] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
Cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3213–3223, 2016. 5, 7
[6] P. E. Debevec, C. J. Taylor, and J. Malik. Modeling and ren-
dering architecture from photographs: A hybrid geometry-
and image-based approach. In Proceedings of the 23rd an-
nual conference on Computer graphics and interactive tech-
niques, pages 11–20. ACM, 1996. 2

[7] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
In
from a single image using a multi-scale deep network.
Advances in Neural Information Processing Systems, 2014.
2, 5, 6, 7

[8] C. Fehn. Depth-image-based rendering (dibr), compression,
and transmission for a new approach on 3d-tv. In Electronic
Imaging 2004, pages 93–104. International Society for Op-
tics and Photonics, 2004. 3

[9] A. Fitzgibbon, Y. Wexler, and A. Zisserman. Image-based
Int. Journal of Com-

rendering using image-based priors.
puter Vision, 63(2):141–151, 2005. 2

[10] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
Stereo: Learning to predict new views from the world’s im-
agery. In Computer Vision and Pattern Recognition, 2016. 1,
2, 3

[11] D. F. Fouhey, W. Hussain, A. Gupta, and M. Hebert. Single
image 3D without a single 3D image. In Proceedings of the
IEEE International Conference on Computer Vision, pages
1053–1061, 2015. 2

[12] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski. To-
wards internet-scale multi-view stereo. In Computer Vision
and Pattern Recognition, pages 1434–1441. IEEE, 2010. 2

[13] M. Gadelha, S. Maji, and R. Wang.

tion from 2d views of multiple objects.
arXiv:1612.05872, 2016. 2

3d shape induc-
arXiv preprint

[14] R. Garg, V. K. BG, G. Carneiro, and I. Reid. Unsupervised
CNN for single view depth estimation: Geometry to the res-
cue. In European Conf. Computer Vision, 2016. 1, 2, 3, 4, 5,
6, 7

[15] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for
autonomous driving? The KITTI vision benchmark suite.

In Computer Vision and Pattern Recognition (CVPR), 2012
IEEE Conference on, pages 3354–3361. IEEE, 2012. 2, 5, 7
[16] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsupervised
monocular depth estimation with left-right consistency.
In
Computer Vision and Pattern Recognition, 2017. 1, 2, 3, 4,
5, 7

[17] R. Goroshin, J. Bruna, J. Tompson, D. Eigen, and Y. Le-
Cun. Unsupervised learning of spatiotemporally coherent
metrics. In Proceedings of the IEEE International Confer-
ence on Computer Vision, pages 4086–4093, 2015. 2
[18] X. Han, T. Leung, Y. Jia, R. Sukthankar, and A. C. Berg.
MatchNet: Unifying feature and metric learning for patch-
based matching. In Computer Vision and Pattern Recogni-
tion, pages 3279–3286, 2015. 2

[19] A. Handa, M. Bloesch, V. Patraucean, S. Stent, J. McCor-
mac, and A. Davison. gvnn: Neural network library for ge-
ometric computer vision. arXiv preprint arXiv:1607.07405,
2016. 2

[20] D. Hoiem, A. A. Efros, and M. Hebert . Automatic photo

pop-up. In Proc. SIGGRAPH, 2005. 2

[21] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015. 5

[22] M. Irani and P. Anandan. About direct methods.

In In-
ternational Workshop on Vision Algorithms, pages 267–277.
Springer, 1999. 2

[23] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in Neural Information

transformer networks.
Processing Systems, pages 2017–2025, 2015. 3

[24] D. Jayaraman and K. Grauman. Learning image representa-
tions tied to egomotion. In Int. Conf. Computer Vision, 2015.
2

[25] K. Karsch, C. Liu, and S. B. Kang. Depth transfer: Depth
extraction from video using non-parametric sampling. IEEE
transactions on pattern analysis and machine intelligence,
36(11):2144–2158, 2014. 7

[26] A. Kendall, M. Grimes, and R. Cipolla. PoseNet: A convo-
lutional network for real-time 6-DOF camera relocalization.
In Int. Conf. Computer Vision, pages 2938–2946, 2015. 2

[27] A. Kendall, H. Martirosyan, S. Dasgupta, P. Henry,
R. Kennedy, A. Bachrach, and A. Bry. End-to-end learning
of geometry and context for deep stereo regression. arXiv
preprint arXiv:1703.04309, 2017. 2

[28] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[29] T. D. Kulkarni, W. F. Whitney, P. Kohli, and J. Tenenbaum.
Deep convolutional inverse graphics network. In C. Cortes,
N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing Systems,
pages 2539–2547. Curran Associates, Inc., 2015. 2

[30] Y. Kuznietsov, J. St¨uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. arXiv
preprint arXiv:1702.02706, 2017. 2

[31] I. Laina, C. Rupprecht, V. Belagiannis, F. Tombari, and
N. Navab. Deeper depth prediction with fully convolutional
residual networks. In 3D Vision (3DV), 2016 Fourth Interna-
tional Conference on, pages 239–248. IEEE, 2016. 7

tion network for learning monocular stereo. arXiv preprint
arXiv:1612.02401, 2016. 4

[48] S. Vijayanarasimhan, S. Ricco, C. Schmid, R. Sukthankar,
and K. Fragkiadaki. SfM-Net: Learning of structure and mo-
tion from video. arXiv preprint, 2017. 2, 4, 8

[49] X. Wang and A. Gupta. Unsupervised learning of visual rep-
resentations using videos. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 2794–2802,
2015. 2

[50] C. Wu. VisualSFM: A visual structure from motion system.

http://ccwu.me/vsfm, 2011. 2

[51] J. Xie, R. B. Girshick, and A. Farhadi. Deep3D: Fully au-
tomatic 2D-to-3D video conversion with deep convolutional
neural networks. In European Conf. Computer Vision, 2016.
2

[52] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 2

[53] J. Zbontar and Y. LeCun. Stereo matching by training a con-
volutional neural network to compare image patches. Jour-
nal of Machine Learning Research, 17(1-32):2, 2016. 2
[54] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
synthesis by appearance ﬂow. In European Conference on
Computer Vision, pages 286–301. Springer, 2016. 2, 3
[55] C. L. Zitnick, S. B. Kang, M. Uyttendaele, S. Winder, and
R. Szeliski. High-quality video view interpolation using a
In ACM Transactions on Graphics
layered representation.
(TOG), volume 23, pages 600–608. ACM, 2004. 2

[32] F. Liu, C. Shen, G. Lin, and I. Reid. Learning depth from sin-
gle monocular images using deep convolutional neural ﬁelds.
IEEE transactions on pattern analysis and machine intelli-
gence, 38(10):2024–2039, 2016. 7

[33] M. Liu, M. Salzmann, and X. He. Discrete-continuous depth
estimation from a single image. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 716–723, 2014. 7

[34] M. M. Loper and M. J. Black. OpenDR: An approximate
differentiable renderer. In European Conf. Computer Vision,
pages 154–169. Springer, 2014. 2

[35] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train con-
volutional networks for disparity, optical ﬂow, and scene
In Proceedings of the IEEE Conference
ﬂow estimation.
on Computer Vision and Pattern Recognition, pages 4040–
4048, 2016. 4

[36] I. Misra, C. L. Zitnick, and M. Hebert. Shufﬂe and learn:
unsupervised learning using temporal order veriﬁcation. In
European Conference on Computer Vision, pages 527–544.
Springer, 2016. 2

[37] R. Mur-Artal, J. M. M. Montiel, and J. D. Tardos. ORB-
SLAM: a versatile and accurate monocular SLAM system.
IEEE Transactions on Robotics, 31(5), 2015. 6, 7

[38] R. A. Newcombe, S. J. Lovegrove, and A. J. Davison.
In Int.

DTAM: Dense tracking and mapping in real-time.
Conf. Computer Vision, pages 2320–2327. IEEE, 2011. 2

[39] D. Pathak, R. Girshick, P. Doll´ar, T. Darrell, and B. Hariha-
ran. Learning features by watching objects move. In CVPR,
2017. 2

[40] R. Ranftl, V. Vineet, Q. Chen, and V. Koltun. Dense monoc-
ular depth estimation in complex dynamic scenes. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4058–4066, 2016. 8

[41] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances In Neural Information
Processing Systems, pages 4997–5005, 2016. 2

[42] A. Saxena, M. Sun, and A. Y. Ng. Make3D: Learning 3D
scene structure from a single still image. Pattern Analysis
and Machine Intelligence, 31(5):824–840, May 2009. 2, 5, 7
[43] S. M. Seitz and C. R. Dyer. View morphing. In Proceedings
of the 23rd annual conference on Computer graphics and
interactive techniques, pages 21–30. ACM, 1996. 2

[44] R. Szeliski. Prediction error as a quality metric for motion
and stereo. In Int. Conf. Computer Vision, volume 2, pages
781–788. IEEE, 1999. 1

[45] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Multi-view 3d
models from single images with a convolutional network. In
European Conference on Computer Vision, pages 322–337.
Springer, 2016. 2

[46] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In Computer Vision and Pattern Recogni-
tion, 2017. 2, 8

[47] B. Ummenhofer, H. Zhou, J. Uhrig, N. Mayer, E. Ilg,
A. Dosovitskiy, and T. Brox. DeMoN: Depth and mo-

Unsupervised Learning of Depth and Ego-Motion from Video

Tinghui Zhou∗
UC Berkeley

Matthew Brown
Google

Noah Snavely
Google

David G. Lowe
Google

7
1
0
2
 
g
u
A
 
1
 
 
]

V
C
.
s
c
[
 
 
2
v
3
1
8
7
0
.
4
0
7
1
:
v
i
X
r
a

Abstract

We present an unsupervised learning framework for the
task of monocular depth and camera motion estimation
from unstructured video sequences.
In common with re-
cent work [10, 14, 16], we use an end-to-end learning ap-
In
proach with view synthesis as the supervisory signal.
contrast to the previous work, our method is completely un-
supervised, requiring only monocular video sequences for
training. Our method uses single-view depth and multi-
view pose networks, with a loss based on warping nearby
views to the target using the computed depth and pose. The
networks are thus coupled by the loss during training, but
can be applied independently at test time. Empirical eval-
uation on the KITTI dataset demonstrates the effectiveness
of our approach: 1) monocular depth performs comparably
with supervised methods that use either ground-truth pose
or depth for training, and 2) pose estimation performs fa-
vorably compared to established SLAM systems under com-
parable input settings.

1. Introduction

Humans are remarkably capable of inferring ego-motion
and the 3D structure of a scene even over short timescales.
For instance, in navigating along a street, we can easily
locate obstacles and react quickly to avoid them. Years
of research in geometric computer vision has failed to
recreate similar modeling capabilities for real-world scenes
(e.g., where non-rigidity, occlusion and lack of texture are
present). So why do humans excel at this task? One hypoth-
esis is that we develop a rich, structural understanding of the
world through our past visual experience that has largely
consisted of moving around and observing vast numbers of
scenes and developing consistent modeling of our observa-
tions. From millions of such observations, we have learned
about the regularities of the world—roads are ﬂat, buildings
are straight, cars are supported by roads etc., and we can
apply this knowledge when perceiving a new scene, even
from a single monocular image.

∗The majority of the work was done while interning at Google.

Figure 1. The training data to our system consists solely of un-
labeled image sequences capturing scene appearance from differ-
ent viewpoints, where the poses of the images are not provided.
Our training procedure produces two models that operate inde-
pendently, one for single-view depth prediction, and one for multi-
view camera pose estimation.

In this work, we mimic this approach by training a model
that observes sequences of images and aims to explain its
observations by predicting likely camera motion and the
scene structure (as shown in Fig. 1). We take an end-to-
end approach in allowing the model to map directly from
input pixels to an estimate of ego-motion (parameterized as
6-DoF transformation matrices) and the underlying scene
structure (parameterized as per-pixel depth maps under a
reference view). We are particularly inspired by prior work
that has suggested view synthesis as a metric [44] and recent
work that tackles the calibrated, multi-view 3D case in an
end-to-end framework [10]. Our method is unsupervised,
and can be trained simply using sequences of images with
no manual labeling or even camera motion information.

Our approach builds upon the insight that a geomet-
ric view synthesis system only performs consistently well
when its intermediate predictions of the scene geometry
and the camera poses correspond to the physical ground-

1

truth. While imperfect geometry and/or pose estimation
can cheat with reasonable synthesized views for certain
types of scenes (e.g., textureless), the same model would
fail miserably when presented with another set of scenes
with more diverse layout and appearance structures. Thus,
our goal is to formulate the entire view synthesis pipeline
as the inference procedure of a convolutional neural net-
work, so that by training the network on large-scale video
data for the ‘meta’-task of view synthesis the network is
forced to learn about intermediate tasks of depth and cam-
era pose estimation in order to come up with a consistent
explanation of the visual world. Empirical evaluation on
the KITTI [15] benchmark demonstrates the effectiveness
of our approach on both single-view depth and camera pose
estimation. Our code will be made available at https:
//github.com/tinghuiz/SfMLearner.

2. Related work

Structure from motion The simultaneous estimation of
structure and motion is a well studied problem with an estab-
lished toolchain of techniques [12, 50, 38]. Whilst the traditional
toolchain is effective and efﬁcient in many cases, its reliance on ac-
curate image correspondence can cause problems in areas of low
texture, complex geometry/photometry, thin structures, and occlu-
sions. To address these issues, several of the pipeline stages have
been recently tackled using deep learning, e.g., feature match-
ing [18], pose estimation [26], and stereo [10, 27, 53]. These
learning-based techniques are attractive in that they are able to
leverage external supervision during training, and potentially over-
come the above issues when applied to test data.

Warping-based view synthesis One important application
of geometric scene understanding is the task of novel view syn-
thesis, where the goal is to synthesize the appearance of the scene
seen from novel camera viewpoints. A classic paradigm for view
synthesis is to ﬁrst either estimate the underlying 3D geometry
explicitly or establish pixel correspondence among input views,
and then synthesize the novel views by compositing image patches
from the input views (e.g., [4, 55, 43, 6, 9]). Recently, end-to-
end learning has been applied to reconstruct novel views by trans-
forming the input based on depth or ﬂow, e.g., DeepStereo [10],
Deep3D [51] and Appearance Flows [54]. In these methods, the
underlying geometry is represented by quantized depth planes
(DeepStereo), probabilistic disparity maps (Deep3D) and view-
dependent ﬂow ﬁelds (Appearance Flows), respectively. Unlike
methods that directly map from input views to the target view
(e.g., [45]), warping-based methods are forced to learn intermedi-
ate predictions of geometry and/or correspondence. In this work,
we aim to distill such geometric reasoning capability from CNNs
trained to perform warping-based view synthesis.

Learning single-view 3D from registered 2D views Our
work is closely related to a line of recent research on learning
single-view 3D inference from registered 2D observations. Garg et
al. [14] propose to learn a single-view depth estimation CNN us-
ing projection errors to a calibrated stereo twin for supervision.
Concurrently, Deep3D [51] predicts a second stereo viewpoint

from an input image using stereoscopic ﬁlm footage as training
data. A similar approach was taken by Godard et al. [16], with
the addition of a left-right consistency constraint, and a better ar-
chitecture design that led to impressive performance. Like our
approach, these techniques only learn from image observations of
the world, unlike methods that require explicit depth for training,
e.g., [20, 42, 7, 27, 30].

These techniques bear some resemblance to direct methods for
structure and motion estimation [22], where the camera parame-
ters and scene depth are adjusted to minimize a pixel-based error
function. However, rather than directly minimizing the error to
obtain the estimation, the CNN-based methods only take a gradi-
ent step for each batch of input instances, which allows the net-
work to learn an implicit prior from a large corpus of related im-
agery. Several authors have explored building differentiable ren-
dering operations into their models that are trained in this way,
e.g., [19, 29, 34].

While most of the above techniques (including ours) are mainly
focused on inferring depth maps as the scene geometry output, re-
cent work (e.g., [13, 41, 46, 52]) has also shown success in learn-
ing 3D volumetric representations from 2D observations based on
similar principles of projective geometry. Fouhey et al. [11] fur-
ther show that it is even possible to learn 3D inference without 3D
labels (or registered 2D views) by utilizing scene regularity.

Unsupervised/Self-supervised learning from video An-
other line of related work to ours is visual representation learning
from video, where the general goal is to design pretext tasks for
learning generic visual features from video data that can later be
re-purposed for other vision tasks such as object detection and se-
mantic segmentation. Such pretext tasks include ego-motion esti-
mation [2, 24], tracking [49], temporal coherence [17], temporal
order veriﬁcation [36], and object motion mask prediction [39].
While we focus on inferring the explicit scene geometry and
ego-motion in this work, intuitively, the internal representation
learned by the deep network (especially the single-view depth
CNN) should capture some level of semantics that could gener-
alize to other tasks as well.

Concurrent to our work, Vijayanarasimhan et al. [48] indepen-
dently propose a framework for joint training of depth, camera
motion and scene motion from videos. While both methods are
conceptually similar, ours is focused on the unsupervised aspect,
whereas their framework adds the capability to incorporate super-
vision (e.g., depth, camera motion or scene motion). There are
signiﬁcant differences in how scene dynamics are modeled during
training, in which they explicitly solve for object motion whereas
our explainability mask discounts regions undergoing motion, oc-
clusion and other factors.

3. Approach

Here we propose a framework for jointly training a single-view
depth CNN and a camera pose estimation CNN from unlabeled
video sequences. Despite being jointly trained, the depth model
and the pose estimation model can be used independently during
test-time inference. Training examples to our model consist of
short image sequences of scenes captured by a moving camera.
While our training procedure is robust to some degree of scene

Figure 2. Overview of the supervision pipeline based on view syn-
thesis. The depth network takes only the target view as input, and
outputs a per-pixel depth map ˆDt. The pose network takes both the
target view (It) and the nearby/source views (e.g., It−1 and It+1)
as input, and outputs the relative camera poses ( ˆTt→t−1, ˆTt→t+1).
The outputs of both networks are then used to inverse warp the
source views (see Sec. 3.2) to reconstruct the target view, and the
photometric reconstruction loss is used for training the CNNs. By
utilizing view synthesis as supervision, we are able to train the
entire framework in an unsupervised manner from videos.

motion, we assume that the scenes we are interested in are mostly
rigid, i.e., the scene appearance change across different frames is
dominated by the camera motion.

3.1. View synthesis as supervision

The key supervision signal for our depth and pose prediction
CNNs comes from the task of novel view synthesis: given one
input view of a scene, synthesize a new image of the scene seen
from a different camera pose. We can synthesize a target view
given a per-pixel depth in that image, plus the pose and visibility
in a nearby view. As we will show next, this synthesis process can
be implemented in a fully differentiable manner with CNNs as the
geometry and pose estimation modules. Visibility can be handled,
along with non-rigidity and other non-modeled factors, using an
“explanability” mask, which we discuss later (Sec. 3.3).

Let us denote < I1, . . . , IN > as a training image sequence
with one of the frames It being the target view and the rest being
the source views Is(1 ≤ s ≤ N, s (cid:54)= t). The view synthesis
objective can be formulated as

Figure 3. Illustration of the differentiable image warping process.
For each point pt in the target view, we ﬁrst project it onto the
source view based on the predicted depth and camera pose, and
then use bilinear interpolation to obtain the value of the warped
image ˆIs at location pt.

framework can be applied to standard videos without pose infor-
mation. Furthermore, it predicts the poses as part of the learning
framework. See Figure 2 for an illustration of our learning pipeline
for depth and pose estimation.

3.2. Differentiable depth image-based rendering

As indicated in Eq. 1, a key component of our learning frame-
work is a differentiable depth image-based renderer that recon-
structs the target view It by sampling pixels from a source view Is
based on the predicted depth map ˆDt and the relative pose ˆTt→s.
Let pt denote the homogeneous coordinates of a pixel in the
target view, and K denote the camera intrinsics matrix. We can
obtain pt’s projected coordinates onto the source view ps by2

ps ∼ K ˆTt→s ˆDt(pt)K −1pt

(2)

Notice that the projected coordinates ps are continuous values. To
obtain Is(ps) for populating the value of ˆIs(pt) (see Figure 3),
we then use the differentiable bilinear sampling mechanism pro-
posed in the spatial transformer networks [23] that linearly in-
terpolates the values of the 4-pixel neighbors (top-left, top-right,
bottom-left, and bottom-right) of ps to approximate Is(ps), i.e.
ˆIs(pt) = Is(ps) = (cid:80)
s ), where wij is
linearly proportional to the spatial proximity between ps and pij
s ,
and (cid:80)
i,j wij = 1. A similar strategy is used in [54] for learning
to directly warp between different views, while here the coordi-
nates for pixel warping are obtained through projective geometry
that enables the factorization of depth and camera pose.

i∈{t,b},j∈{l,r} wijIs(pij

Lvs =

(cid:88)

(cid:88)

s

p

|It(p) − ˆIs(p)| ,

(1)

3.3. Modeling the model limitation

where p indexes over pixel coordinates, and ˆIs is the source view
Is warped to the target coordinate frame based on a depth image-
based rendering module [8] (described in Sec. 3.2), taking the pre-
dicted depth ˆDt, the predicted 4×4 camera transformation matrix1
ˆTt→s and the source view Is as input.

Note that the idea of view synthesis as supervision has also
been recently explored for learning single-view depth estima-
tion [14, 16] and multi-view stereo [10]. However, to the best of
our knowledge, all previous work requires posed image sets dur-
ing training (and testing too in the case of DeepStereo), while our

Note that when applied to monocular videos the above view
synthesis formulation implicitly assumes 1) the scene is static
without moving objects; 2) there is no occlusion/disocclusion be-
tween the target view and the source views; 3) the surface is Lam-
bertian so that the photo-consistency error is meaningful. If any
of these assumptions are violated in a training sequence, the gra-
dients could be corrupted and potentially inhibit training. To im-
prove the robustness of our learning pipeline to these factors, we
additionally train a explainability prediction network (jointly and
simultaneously with the depth and pose networks) that outputs a
per-pixel soft mask ˆEs for each target-source pair, indicating the

1In practice, the CNN estimates the Euler angles and the 3D translation

2For notation simplicity, we omit showing the necessary conversion to

vector, which are then converted to the transformation matrix.

homogeneous coordinates along the steps of matrix multiplication.

Figure 4. Network architecture for our depth/pose/explainability prediction modules. The width and height of each rectangular block indi-
cates the output channels and the spatial dimension of the feature map at the corresponding layer respectively, and each reduction/increase
in size indicates a change by the factor of 2. (a) For single-view depth, we adopt the DispNet [35] architecture with multi-scale side pre-
dictions. The kernel size is 3 for all the layers except for the ﬁrst 4 conv layers with 7, 7, 5, 5, respectively. The number of output channels
for the ﬁrst conv layer is 32. (b) The pose and explainabilty networks share the ﬁrst few conv layers, and then branch out to predict 6-DoF
relative pose and multi-scale explainability masks, respectively. The number of output channels for the ﬁrst conv layer is 16, and the kernel
size is 3 for all the layers except for the ﬁrst two conv and the last two deconv/prediction layers where we use 7, 5, 5, 7, respectively. See
Section 3.5 for more details.

network’s belief in where direct view synthesis will be success-
fully modeled for each target pixel. Based on the predicted ˆEs,
the view synthesis objective is weighted correspondingly by

Lvs =

(cid:88)

(cid:88)

ˆEs(p)|It(p) − ˆIs(p)| .

(3)

<I1,...,IN >∈S

p

Since we do not have direct supervision for ˆEs, training with the
above loss would result in a trivial solution of the network always
predicting ˆEs to be zero, which perfectly minimizes the loss. To
resolve this, we add a regularization term Lreg( ˆEs) that encour-
ages nonzero predictions by minimizing the cross-entropy loss
with constant label 1 at each pixel location. In other words, the
network is encouraged to minimize the view synthesis objective,
but allowed a certain amount of slack for discounting the factors
not considered by the model.

3.4. Overcoming the gradient locality

One remaining issue with the above learning pipeline is that the
gradients are mainly derived from the pixel intensity difference be-
tween I(pt) and the four neighbors of I(ps), which would inhibit
training if the correct ps (projected using the ground-truth depth
and pose) is located in a low-texture region or far from the current
estimation. This is a well known issue in motion estimation [3].
Empirically, we found two strategies to be effective for overcom-
ing this issue: 1) using a convolutional encoder-decoder architec-
ture with a small bottleneck for the depth network that implicitly
constrains the output to be globally smooth and facilitates gradi-
ents to propagate from meaningful regions to nearby regions; 2)

explicit multi-scale and smoothness loss (e.g., as in [14, 16]) that
allows gradients to be derived from larger spatial regions directly.
We adopt the second strategy in this work as it is less sensitive to
architectural choices. For smoothness, we minimize the L1 norm
of the second-order gradients for the predicted depth maps (similar
to [48]).

Our ﬁnal objective becomes

Lf inal =

Ll

vs + λsLl

smooth + λe

Lreg( ˆEl

s) ,

(4)

(cid:88)

l

(cid:88)

s

where l indexes over different image scales, s indexes over source
images, and λs and λe are the weighting for the depth smoothness
loss and the explainability regularization, respectively.

3.5. Network architecture

Single-view depth For single-view depth prediction, we adopt
the DispNet architecture proposed in [35] that is mainly based on
an encoder-decoder design with skip connections and multi-scale
side predictions (see Figure 4). All conv layers are followed by
ReLU activation except for the prediction layers, where we use
1/(α ∗ sigmoid(x) + β) with α = 10 and β = 0.01 to con-
strain the predicted depth to be always positive within a reason-
able range. We also experimented with using multiple views as
input to the depth network, but did not ﬁnd this to improve the
results. This is in line with the observations in [47], where opti-
cal ﬂow constraints need to be enforced to utilize multiple views
effectively.

Pose The input to the pose estimation network is the target view
concatenated with all the source views (along the color channels),
and the outputs are the relative poses between the target view and
each of the source views. The network consists of 7 stride-2 con-
volutions followed by a 1 × 1 convolution with 6 ∗ (N − 1) output
channels (corresponding to 3 Euler angles and 3-D translation for
each source view). Finally, global average pooling is applied to
aggregate predictions at all spatial locations. All conv layers are
followed by ReLU except for the last layer where no nonlinear
activation is applied.

Explainability mask The explainability prediction network
shares the ﬁrst ﬁve feature encoding layers with the pose network,
followed by 5 deconvolution layers with multi-scale side predic-
tions. All conv/deconv layers are followed by ReLU except for
the prediction layers with no nonlinear activation. The number of
output channels for each prediction layer is 2 ∗ (N − 1), with ev-
ery two channels normalized by softmax to obtain the explainabil-
ity prediction for the corresponding source-target pair (the second
channel after normalization is ˆEs and used in computing the loss
in Eq. 3).

4. Experiments

Here we evaluate the performance of our system, and compare
with prior approaches on single-view depth as well as ego-motion
estimation. We mainly use the KITTI dataset [15] for benchmark-
ing, but also use the Make3D dataset [42] for evaluating cross-
dataset generalization ability.

Training Details We implemented the system using the pub-
licly available TensorFlow [1] framework. For all the experiments,
we set λs = 0.5/l (l is the downscaling factor for the correspond-
ing scale) and λe = 0.2. During training, we used batch normal-
ization [21] for all the layers except for the output layers, and the
Adam [28] optimizer with β1 = 0.9, β2 = 0.999, learning rate of
0.0002 and mini-batch size of 4. The training typically converges
after about 150K iterations. All the experiments are performed
with image sequences captured with a monocular camera. We re-
size the images to 128 × 416 during training, but both the depth
and pose networks can be run fully-convolutionally for images of
arbitrary size at test time.

4.1. Single-view depth estimation

We train our system on the split provided by [7], and exclude
all the frames from the testing scenes as well as static sequences
with mean optical ﬂow magnitude less than 1 pixel for training.
We ﬁx the length of image sequences to be 3 frames, and treat the
central frame as the target view and the ±1 frames as the source
views. We use images captured by both color cameras, but treated
them independently when forming training sequences. This results
in a total of 44, 540 sequences, out of which we use 40, 109 for
training and 4, 431 for validation.

To the best of our knowledge, no previous systems exist that
learn single-view depth estimation in an unsupervised manner
from monocular videos. Nonetheless, here we provide comparison
with prior methods with depth supervision [7] and recent methods
that use calibrated stereo images (i.e. with pose supervision) for

Figure 5. Our sample predictions on the Cityscapes dataset using
the model trained on Cityscapes only.

training [14, 16]. Since the depth predicted by our method is de-
ﬁned up to a scale factor, for evaluation we multiply the predicted
depth maps by a scalar ˆs that matches the median with the ground-
truth, i.e. ˆs = median(Dgt)/median(Dpred).

Similar to [16], we also experimented with ﬁrst pre-training the
system on the larger Cityscapes dataset [5] (sample predictions are
shown in Figure 5), and then ﬁne-tune on KITTI, which results in
slight performance improvement.

KITTI Here we evaluate the single-view depth performance on
the 697 images from the test split of [7]. As shown in Table 1,
our unsupervised method performs comparably with several su-
pervised methods (e.g. Eigen et al. [7] and Garg et al. [14]), but
falls short of concurrent work by Godard et al. [16] that uses cal-
ibrated stereo images (i.e. with pose supervision) with left-right
cycle consistency loss for training. For future work, it would be in-
teresting to see if incorporating the similar cycle consistency loss
into our framework could further improve the results. Figure 6
provides examples of visual comparison between our results and
some supervised baselines over a variety of examples. One can
see that although trained in an unsupervised manner, our results
are comparable to that of the supervised baselines, and sometimes
preserve the depth boundaries and thin structures such as trees and
street lights better.

We show sample predictions made by our initial Cityscapes
model and the ﬁnal model (pre-trained on Cityscapes and then
ﬁne-tuned on KITTI) in Figure 7. Due to the domain gap between
the two datasets, our Cityscapes model sometimes has difﬁculty
in recovering the complete shape of the car/bushes, and mistakes
them with distant objects.

We also performed an ablation study of the explainability mod-
eling (see Table 1), which turns out only offering a modest per-
formance boost. This is likely because 1) most of the KITTI
scenes are static without signiﬁcant scene motions, and 2) the oc-
clusion/visibility effects only occur in small regions in sequences

Figure 6. Comparison of single-view depth estimation between Eigen et al. [7] (with ground-truth depth supervision), Garg et al. [14]
(with ground-truth pose supervision), and ours (unsupervised). The ground-truth depth map is interpolated from sparse measurements for
visualization purpose. The last two rows show typical failure cases of our model, which sometimes struggles in vast open scenes and
objects close to the front of the camera.

across a short time span (3-frames), which make the explainabil-
ity modeling less essential to the success of training. Nonetheless,
our explainability prediction network does seem to capture the fac-
tors like scene motion and visibility well (see Sec. 4.3), and could
potentially be more important for other more challenging datasets.

Make3D To evaluate the generalization ability of our single-
view depth model, we directly apply our model
trained on
Cityscapes + KITTI to the Make3D dataset unseen during train-
ing. While there still remains a signiﬁcant performance gap be-
tween our method and others supervised using Make3D ground-
truth depth (see Table 2), our predictions are able to capture the
global scene layout reasonably well without any training on the
Make3D images (see Figure 8).

4.2. Pose estimation

To evaluate the performance of our pose estimation network,
we applied our system to the ofﬁcial KITTI odometry split (con-
taining 11 driving sequences with ground truth odometry obtained
through the IMU/GPS readings, which we use for evaluation pur-
pose only), and used sequences 00-08 for training and 09-10 for
testing. In this experiment, we ﬁx the length of input image se-
quences to our system to 5 frames. We compare our ego-motion
estimation with two variants of monocular ORB-SLAM [37] (a
well-established SLAM system): 1) ORB-SLAM (full), which
recovers odometry using all frames of the driving sequence (i.e.
allowing loop closure and re-localization), and 2) ORB-SLAM
(short), which runs on 5-frame snippets (same as our input
setting). Another baseline we compare with is the dataset mean

Method

Dataset

Supervision

Error metric

Accuracy metric

Train set mean
Eigen et al. [7] Coarse
Eigen et al. [7] Fine
Liu et al. [32]
Godard et al. [16]
Godard et al. [16]
Ours (w/o explainability)
Ours
Ours
Ours

Garg et al. [14] cap 50m
Ours (w/o explainability) cap 50m
Ours cap 50m
Ours cap 50m
Ours cap 50m

K
K
K
K
K
CS + K
K
K
CS
CS + K

K
K
K
CS
CS + K

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

Pose Abs Rel

Sq Rel RMSE RMSE log

δ < 1.25

δ < 1.252

δ < 1.253

(cid:88)
(cid:88)

(cid:88)

0.403
0.214
0.203
0.202
0.148
0.124
0.221
0.208
0.267
0.198

0.169
0.208
0.201
0.260
0.190

5.530
1.605
1.548
1.614
1.344
1.076
2.226
1.768
2.686
1.836

1.080
1.551
1.391
2.232
1.436

8.709
6.563
6.307
6.523
5.927
5.311
7.527
6.856
7.580
6.565

5.104
5.452
5.181
6.148
4.975

0.403
0.292
0.282
0.275
0.247
0.219
0.294
0.283
0.334
0.275

0.273
0.273
0.264
0.321
0.258

0.593
0.673
0.702
0.678
0.803
0.847
0.676
0.678
0.577
0.718

0.740
0.695
0.696
0.590
0.735

0.776
0.884
0.890
0.895
0.922
0.942
0.885
0.885
0.840
0.901

0.904
0.900
0.900
0.852
0.915

0.878
0.957
0.958
0.965
0.964
0.973
0.954
0.957
0.937
0.960

0.962
0.964
0.966
0.945
0.968

Table 1. Single-view depth results on the KITTI dataset [15] using the split of Eigen et al. [7] (Baseline numbers taken from [16]). For
training, K = KITTI, and CS = Cityscapes [5]. All methods we compare with use some form of supervision (either ground-truth depth or
calibrated camera pose) during training. Note: results from Garg et al. [14] are capped at 50m depth, so we break these out separately in
the lower part of the table.

Figure 7. Comparison of single-view depth predictions on the
KITTI dataset by our initial Cityscapes model and the ﬁnal model
(pre-trained on Cityscapes and then ﬁne-tuned on KITTI). The
Cityscapes model sometimes makes structural mistakes (e.g. holes
on car body) likely due to the domain gap between the two
datasets.

Method

Supervision

Error metric

Pose Abs Rel

Sq Rel RMSE RMSE log

Depth
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

Train set mean
Karsch et al. [25]
Liu et al. [33]
Laina et al. [31]
Godard et al. [16]

Ours

0.876
0.428
0.475
0.204
0.544

0.383

13.98
5.079
6.562
1.840
10.94

5.321

12.27
8.389
10.05
5.683
11.76

10.47

0.307
0.149
0.165
0.084
0.193

0.478

Table 2. Results on the Make3D dataset [42]. Similar to ours, Go-
dard et al. [16] do not utilize any of the Make3D data during train-
ing, and directly apply the model trained on KITTI+Cityscapes to
the test set. Following the evaluation protocol of [16], the errors
are only computed where depth is less than 70 meters in a central
image crop.

Figure 8. Our sample predictions on the Make3D dataset. Note
that our model is trained on KITTI + Cityscapes only, and directly
tested on Make3D.

the scaling factor for the predictions made by each method to best
align with the ground truth, and then measure the Absolute Trajec-
tory Error (ATE) [37] as the metric. ATE is computed on 5-frame
snippets and averaged over the full sequence.3 As shown in Table 3
and Fig. 9, our method outperforms both baselines (mean odome-
try and ORB-SLAM (short)) that share the same input setting
as ours, but falls short of ORB-SLAM (full), which leverages
whole sequences (1591 for seq. 09 and 1201 for seq. 10) for loop
closure and re-localization.

For better understanding of our pose estimation results, we
show in Figure 9 the ATE curve with varying amount of side-

of car motion (using ground-truth odometry) for 5-frame snippets.
To resolve scale ambiguity during evaluation, we ﬁrst optimize

3For evaluating ORB-SLAM (full) we break down the trajectory of
the full sequence into 5-frame snippets with the reference coordinate frame
adjusted to the central frame of each snippet.

Method

Seq. 09

Seq. 10

ORB-SLAM (full)

0.014 ± 0.008

0.012 ± 0.011

ORB-SLAM (short)
Mean Odom.
Ours

0.064 ± 0.141
0.032 ± 0.026
0.021 ± 0.017

0.064 ± 0.130
0.028 ± 0.023
0.020 ± 0.015

Table 3. Absolute Trajectory Error (ATE) on the KITTI odome-
try split averaged over all 5-frame snippets (lower is better). Our
method outperforms baselines with the same input setting, but falls
short of ORB-SLAM (full) that uses strictly more data.

Figure 9. Absolute Trajectory Error (ATE) at different left/right
turning magnitude (coordinate difference in the side-direction be-
tween the start and ending frame of a testing sequence). Our
method performs signiﬁcantly better than ORB-SLAM (short)
when side rotation is small, and is comparable with ORB-SLAM
(full) across the entire spectrum.

rotation by the car between the beginning and the end of a se-
quence. Figure 9 suggests that our method is signiﬁcantly bet-
ter than ORB-SLAM (short) when the side-rotation is small
(i.e. car mostly driving forward), and comparable to ORB-SLAM
(full) across the entire spectrum. The large performance
gap between ours and ORB-SLAM (short) suggests that our
learned ego-motion could potentially be used as an alternative to
the local estimation modules in monocular SLAM systems.

4.3. Visualizing the explainability prediction

We visualize example explainability masks predicted by our
network in Figure 10. The ﬁrst three rows suggest that the network
has learned to identify dynamic objects in the scene as unexplain-
able by our model, and similarly, rows 4–5 are examples of ob-
jects that disappear from the frame in subsequent views. The last
two rows demonstrate the potential downside of explainability-
weighted loss: the depth CNN has low conﬁdence in predicting
thin structures well, and tends to mask them as unexplainable.

5. Discussion

We have presented an end-to-end learning pipeline that utilizes
the task of view synthesis for supervision of single-view depth
and camera pose estimation. The system is trained on unlabeled
videos, and yet performs comparably with approaches that require
ground-truth depth or pose for training. Despite good performance
on the benchmark evaluation, our method is by no means close to
solving the general problem of unsupervised learning of 3D scene
structure inference. A number of major challenges are yet to be

Figure 10. Sample visualizations of the explainability masks.
Highlighted pixels are predicted to be unexplainable by the net-
work due to motion (rows 1–3), occlusion/visibility (rows 4–5), or
other factors (rows 7–8).

addressed: 1) our current framework does not explicitly estimate
scene dynamics and occlusions (although they are implicitly taken
into account by the explainability masks), both of which are crit-
ical factors in 3D scene understanding. Direct modeling of scene
dynamics through motion segmentation (e.g. [48, 40]) could be a
potential solution; 2) our framework assumes the camera intrinsics
are given, which forbids the use of random Internet videos with un-
known camera types/calibration – we plan to address this in future
work; 3) depth maps are a simpliﬁed representation of the under-
lying 3D scene. It would be interesting to extend our framework
to learn full 3D volumetric representations (e.g. [46]).

Another interesting area for future work would be to investi-
gate in more detail the representation learned by our system. In
particular, the pose network likely uses some form of image cor-
respondence in estimating the camera motion, whereas the depth
estimation network likely recognizes common structural features
of scenes and objects. It would be interesting to probe these, and
investigate the extent to which our network already performs, or
could be re-purposed to perform, tasks such as object detection
and semantic segmentation.

Acknowledgments: We thank our colleagues, Sudheendra Vijaya-
narasimhan, Susanna Ricco, Cordelia Schmid, Rahul Sukthankar, and Ka-
terina Fragkiadaki for their help. We also thank the anonymous reviewers
for their valuable comments. TZ would like to thank Shubham Tulsiani for
helpful discussions, and Clement Godard for sharing the evaluation code.
This work is also partially funded by Intel/NSF VEC award IIS-1539099.

References

[1] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, et al.
TensorFlow: Large-scale machine learning on heteroge-
neous distributed systems. arXiv preprint arXiv:1603.04467,
2016. 5

[2] P. Agrawal, J. Carreira, and J. Malik. Learning to see by

moving. In Int. Conf. Computer Vision, 2015. 2

[3] J. Bergen, P. Anandan, K. Hanna, and R. Hingorani. Hier-
In Computer Vi-

archical model-based motion estimation.
sionECCV’92, pages 237–252. Springer, 1992. 4

[4] S. E. Chen and L. Williams. View interpolation for image
synthesis. In Proceedings of the 20th annual conference on
Computer graphics and interactive techniques, pages 279–
288. ACM, 1993. 2

[5] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
Cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3213–3223, 2016. 5, 7
[6] P. E. Debevec, C. J. Taylor, and J. Malik. Modeling and ren-
dering architecture from photographs: A hybrid geometry-
and image-based approach. In Proceedings of the 23rd an-
nual conference on Computer graphics and interactive tech-
niques, pages 11–20. ACM, 1996. 2

[7] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
In
from a single image using a multi-scale deep network.
Advances in Neural Information Processing Systems, 2014.
2, 5, 6, 7

[8] C. Fehn. Depth-image-based rendering (dibr), compression,
and transmission for a new approach on 3d-tv. In Electronic
Imaging 2004, pages 93–104. International Society for Op-
tics and Photonics, 2004. 3

[9] A. Fitzgibbon, Y. Wexler, and A. Zisserman. Image-based
Int. Journal of Com-

rendering using image-based priors.
puter Vision, 63(2):141–151, 2005. 2

[10] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
Stereo: Learning to predict new views from the world’s im-
agery. In Computer Vision and Pattern Recognition, 2016. 1,
2, 3

[11] D. F. Fouhey, W. Hussain, A. Gupta, and M. Hebert. Single
image 3D without a single 3D image. In Proceedings of the
IEEE International Conference on Computer Vision, pages
1053–1061, 2015. 2

[12] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski. To-
wards internet-scale multi-view stereo. In Computer Vision
and Pattern Recognition, pages 1434–1441. IEEE, 2010. 2

[13] M. Gadelha, S. Maji, and R. Wang.

tion from 2d views of multiple objects.
arXiv:1612.05872, 2016. 2

3d shape induc-
arXiv preprint

[14] R. Garg, V. K. BG, G. Carneiro, and I. Reid. Unsupervised
CNN for single view depth estimation: Geometry to the res-
cue. In European Conf. Computer Vision, 2016. 1, 2, 3, 4, 5,
6, 7

[15] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for
autonomous driving? The KITTI vision benchmark suite.

In Computer Vision and Pattern Recognition (CVPR), 2012
IEEE Conference on, pages 3354–3361. IEEE, 2012. 2, 5, 7
[16] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsupervised
monocular depth estimation with left-right consistency.
In
Computer Vision and Pattern Recognition, 2017. 1, 2, 3, 4,
5, 7

[17] R. Goroshin, J. Bruna, J. Tompson, D. Eigen, and Y. Le-
Cun. Unsupervised learning of spatiotemporally coherent
metrics. In Proceedings of the IEEE International Confer-
ence on Computer Vision, pages 4086–4093, 2015. 2
[18] X. Han, T. Leung, Y. Jia, R. Sukthankar, and A. C. Berg.
MatchNet: Unifying feature and metric learning for patch-
based matching. In Computer Vision and Pattern Recogni-
tion, pages 3279–3286, 2015. 2

[19] A. Handa, M. Bloesch, V. Patraucean, S. Stent, J. McCor-
mac, and A. Davison. gvnn: Neural network library for ge-
ometric computer vision. arXiv preprint arXiv:1607.07405,
2016. 2

[20] D. Hoiem, A. A. Efros, and M. Hebert . Automatic photo

pop-up. In Proc. SIGGRAPH, 2005. 2

[21] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015. 5

[22] M. Irani and P. Anandan. About direct methods.

In In-
ternational Workshop on Vision Algorithms, pages 267–277.
Springer, 1999. 2

[23] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in Neural Information

transformer networks.
Processing Systems, pages 2017–2025, 2015. 3

[24] D. Jayaraman and K. Grauman. Learning image representa-
tions tied to egomotion. In Int. Conf. Computer Vision, 2015.
2

[25] K. Karsch, C. Liu, and S. B. Kang. Depth transfer: Depth
extraction from video using non-parametric sampling. IEEE
transactions on pattern analysis and machine intelligence,
36(11):2144–2158, 2014. 7

[26] A. Kendall, M. Grimes, and R. Cipolla. PoseNet: A convo-
lutional network for real-time 6-DOF camera relocalization.
In Int. Conf. Computer Vision, pages 2938–2946, 2015. 2

[27] A. Kendall, H. Martirosyan, S. Dasgupta, P. Henry,
R. Kennedy, A. Bachrach, and A. Bry. End-to-end learning
of geometry and context for deep stereo regression. arXiv
preprint arXiv:1703.04309, 2017. 2

[28] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[29] T. D. Kulkarni, W. F. Whitney, P. Kohli, and J. Tenenbaum.
Deep convolutional inverse graphics network. In C. Cortes,
N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett,
editors, Advances in Neural Information Processing Systems,
pages 2539–2547. Curran Associates, Inc., 2015. 2

[30] Y. Kuznietsov, J. St¨uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. arXiv
preprint arXiv:1702.02706, 2017. 2

[31] I. Laina, C. Rupprecht, V. Belagiannis, F. Tombari, and
N. Navab. Deeper depth prediction with fully convolutional
residual networks. In 3D Vision (3DV), 2016 Fourth Interna-
tional Conference on, pages 239–248. IEEE, 2016. 7

tion network for learning monocular stereo. arXiv preprint
arXiv:1612.02401, 2016. 4

[48] S. Vijayanarasimhan, S. Ricco, C. Schmid, R. Sukthankar,
and K. Fragkiadaki. SfM-Net: Learning of structure and mo-
tion from video. arXiv preprint, 2017. 2, 4, 8

[49] X. Wang and A. Gupta. Unsupervised learning of visual rep-
resentations using videos. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 2794–2802,
2015. 2

[50] C. Wu. VisualSFM: A visual structure from motion system.

http://ccwu.me/vsfm, 2011. 2

[51] J. Xie, R. B. Girshick, and A. Farhadi. Deep3D: Fully au-
tomatic 2D-to-3D video conversion with deep convolutional
neural networks. In European Conf. Computer Vision, 2016.
2

[52] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 2

[53] J. Zbontar and Y. LeCun. Stereo matching by training a con-
volutional neural network to compare image patches. Jour-
nal of Machine Learning Research, 17(1-32):2, 2016. 2
[54] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
synthesis by appearance ﬂow. In European Conference on
Computer Vision, pages 286–301. Springer, 2016. 2, 3
[55] C. L. Zitnick, S. B. Kang, M. Uyttendaele, S. Winder, and
R. Szeliski. High-quality video view interpolation using a
In ACM Transactions on Graphics
layered representation.
(TOG), volume 23, pages 600–608. ACM, 2004. 2

[32] F. Liu, C. Shen, G. Lin, and I. Reid. Learning depth from sin-
gle monocular images using deep convolutional neural ﬁelds.
IEEE transactions on pattern analysis and machine intelli-
gence, 38(10):2024–2039, 2016. 7

[33] M. Liu, M. Salzmann, and X. He. Discrete-continuous depth
estimation from a single image. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 716–723, 2014. 7

[34] M. M. Loper and M. J. Black. OpenDR: An approximate
differentiable renderer. In European Conf. Computer Vision,
pages 154–169. Springer, 2014. 2

[35] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train con-
volutional networks for disparity, optical ﬂow, and scene
In Proceedings of the IEEE Conference
ﬂow estimation.
on Computer Vision and Pattern Recognition, pages 4040–
4048, 2016. 4

[36] I. Misra, C. L. Zitnick, and M. Hebert. Shufﬂe and learn:
unsupervised learning using temporal order veriﬁcation. In
European Conference on Computer Vision, pages 527–544.
Springer, 2016. 2

[37] R. Mur-Artal, J. M. M. Montiel, and J. D. Tardos. ORB-
SLAM: a versatile and accurate monocular SLAM system.
IEEE Transactions on Robotics, 31(5), 2015. 6, 7

[38] R. A. Newcombe, S. J. Lovegrove, and A. J. Davison.
In Int.

DTAM: Dense tracking and mapping in real-time.
Conf. Computer Vision, pages 2320–2327. IEEE, 2011. 2

[39] D. Pathak, R. Girshick, P. Doll´ar, T. Darrell, and B. Hariha-
ran. Learning features by watching objects move. In CVPR,
2017. 2

[40] R. Ranftl, V. Vineet, Q. Chen, and V. Koltun. Dense monoc-
ular depth estimation in complex dynamic scenes. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4058–4066, 2016. 8

[41] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances In Neural Information
Processing Systems, pages 4997–5005, 2016. 2

[42] A. Saxena, M. Sun, and A. Y. Ng. Make3D: Learning 3D
scene structure from a single still image. Pattern Analysis
and Machine Intelligence, 31(5):824–840, May 2009. 2, 5, 7
[43] S. M. Seitz and C. R. Dyer. View morphing. In Proceedings
of the 23rd annual conference on Computer graphics and
interactive techniques, pages 21–30. ACM, 1996. 2

[44] R. Szeliski. Prediction error as a quality metric for motion
and stereo. In Int. Conf. Computer Vision, volume 2, pages
781–788. IEEE, 1999. 1

[45] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Multi-view 3d
models from single images with a convolutional network. In
European Conference on Computer Vision, pages 322–337.
Springer, 2016. 2

[46] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In Computer Vision and Pattern Recogni-
tion, 2017. 2, 8

[47] B. Ummenhofer, H. Zhou, J. Uhrig, N. Mayer, E. Ilg,
A. Dosovitskiy, and T. Brox. DeMoN: Depth and mo-

