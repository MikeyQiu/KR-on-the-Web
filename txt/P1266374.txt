9
1
0
2
 
y
a
M
 
4
2
 
 
]

G
L
.
s
c
[
 
 
4
v
5
1
5
2
0
.
1
1
7
1
:
v
i
X
r
a

Continuous DR-submodular Maximization:
Structure and Algorithms

An Bian∗
ETH Zurich
ybian@inf.ethz.ch

Andreas Krause
ETH Zurich
krausea@ethz.ch

Kﬁr Y. Levy
ETH Zurich
yehuda.levy@inf.ethz.ch

Joachim M. Buhmann
ETH Zurich
jbuhmann@inf.ethz.ch

Abstract

DR-submodular continuous functions are important objectives with wide real-world
applications spanning MAP inference in determinantal point processes (DPPs),
and mean-ﬁeld inference for probabilistic submodular models, amongst others.
DR-submodularity captures a subclass of non-convex functions that enables both
exact minimization and approximate maximization in polynomial time.
In this work we study the problem of maximizing non-monotone continuous DR-
submodular functions under general down-closed convex constraints. We start
by investigating geometric properties that underlie such objectives, e.g., a strong
relation between (approximately) stationary points and global optimum is proved.
These properties are then used to devise two optimization algorithms with provable
guarantees. Concretely, we ﬁrst devise a “two-phase” algorithm with 1/4 approxi-
mation guarantee. This algorithm allows the use of existing methods for ﬁnding
(approximately) stationary points as a subroutine, thus, harnessing recent progress
in non-convex optimization. Then we present a non-monotone FRANK-WOLFE
variant with 1/e approximation guarantee and sublinear convergence rate. Finally,
we extend our approach to a broader class of generalized DR-submodular continu-
ous functions, which captures a wider spectrum of applications. Our theoretical
ﬁndings are validated on synthetic and real-world problem instances.

1

Introduction

Submodularity is classically most well known for set function optimization, where it enables efﬁcient
minimization [23] and approximate maximization [31; 25] in polynomial time. Submodularity has
recently been studied on the integer lattice [34; 33] and on continuous domains [3; 4; 36; 21], with
signiﬁcant theoretical results and practical applications. For set functions, it is well known that
submodularity is equivalent to the diminishing returns (DR) property. However, this does not hold
for integer-lattice functions or continuous functions, where the DR property deﬁnes a subclass of
submodular functions, called DR-submodular functions.

In continuous domains, applying convex optimization techniques enables efﬁcient minimization of
submodular continuous functions [3; 36] (despite the non-convex nature of such objectives). In [4]
it is further shown that continuous submodularity enables constant-factor approximation schemes
for constrained monotone DR-submodular maximization and “box” constrained non-monotone
submodular maximization problems.

∗Now known as Yatao A. Bian. ORCID: orcid.org/0000-0002-2368-4084

31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.

Many real-world non-convex problems, such as maximizing the softmax extension of DPPs, require
maximizing a non-monotone DR-submodular function over a general down-closed convex constraint.
Yet, current theory [3; 4; 36] does not apply to this general problem setting, which motivates us to
develop guaranteed and efﬁcient algorithms for such problems.

Exploring the structure that underlies DR-submodularity is crucial to deriving guaranteed algorithms.
Combined with a notion of non-stationarity for constrained optimization problems and a new notion
of “strong DR-submodularity”, we ﬁnd a rich structure in the problem of continuous DR-submodular
maximization. This in turn gives rise to two approximation algorithms with provable guarantees.
Speciﬁcally, we make the following contributions:

- We bound the difference between objective values of stationary points and the global optimum.
Our analysis shows that the bound is even tighter if the objective is strongly DR-submodular
(see Deﬁnition 3).

- Based on the geometric properties, we present two algorithms: (i) A two-phase FRANK-
WOLFE-style algorithm with 1/4 approximation guarantee converges with a 1/
k rate; (ii) a
non-monotone FRANK-WOLFE variant exhibits a 1/e approximation guarantee and converges
sublinearly. Even though the worst-case guarantee of the ﬁrst one is worse than the second, it
yields several practical advantages, which we discuss in Section 4.2.

√

- We investigate a generalized class of submodular functions on “conic” lattices. This allows
us to model a larger class of non-trivial applications. These include logistic regression with
a non-convex separable regularizer, non-negative PCA, etc. To optimize them, we provide a
reduction that enables to invoke algorithms for continuous submodular optimization problems.
- We experimentally demonstrate the applicability of our methods on both synthetic and real-

world problem instances.

1.1 Problem Statement

Notation. We use boldface letters, e.g., x to represent a vector, boldface capital letters, e.g., A
to denote a matrix. xi is the ith entry of x, Aij is the (ij)th entry of A. We use ei to denote the
standard ith basis vector. f (·) is used to denote a continuous function, and F (·) to represent a set
function. [n] := {1, ..., n} for an integer n ≥ 1. (cid:107) · (cid:107) means the Euclidean norm by default. Given
two vectors x, y, x ≤ y means xi ≤ yi, ∀i. x ∨ y and x ∧ y denote coordinate-wise maximum and
coordinate-wise minimum, respectively.

The general setup of constrained non-monotone DR-submodular (see Deﬁnition 1 below) maximiza-
tion is,

max
x∈P

f (x),

(P)

where f : X → R is continuous DR-submodular, X = (cid:81)n
i=1 Xi, each Xi is an interval [3; 4]. Wlog2,
we assume that the lower bound u of X is 0, i.e., X = [0, ¯u]. The set P ⊆ [0, ¯u] is assumed to be a
down-closed convex set, where down-closedness means: x ∈ P and 0 ≤ y ≤ x implies that y ∈ P.
The diameter of P is D := maxx,y∈P (cid:107)x − y(cid:107), and it holds that D ≤ (cid:107) ¯u(cid:107). We use x∗ to denote the
global maximum of (P). One can assume f is non-negative over X , since otherwise one just needs to
ﬁnd a lower bound for the minimum function value of f over [0, ¯u] (and box-constrained submodular
minimization can be solved to arbitrary precision in polynomial time [3]). Over continuous domains,
a DR-submodular function [4] is a submodular function with the diminishing returns (DR) property,
Deﬁnition 1 (DR-submodular & DR property). A function f : X (cid:55)→ R is DR-submodular (has the
DR property) if ∀a ≤ b ∈ X , ∀i ∈ [n], ∀k ∈ R+ s.t. (kei + a) and (kei + b) are still in X , it holds,
f (kei + a) − f (a) ≥ f (kei + b) − f (b).
(1)

If f is differentiable, one can show that Deﬁnition 1 is equivalent to ∇f being an antitone mapping
from Rn to Rn. Furthermore, if f is twice-differentiable, the DR property is equivalent to all of
the entries of its Hessian being non-positive, i.e., ∇2
ijf (x) ≤ 0, ∀x ∈ X , i, j ∈ [n]. A function
f : X (cid:55)→ R is DR-supermodular iff −f is DR-submodular. We also assume that f has Lipschitz
gradients,

2Since otherwise one can work on a new function g(x) := f (x + u) that has 0 as the lower bound of its

domain, and all properties of the function are still preserved.

2

Deﬁnition 2. A function f has L-Lipschitz gradients if for all x, y ∈ X it holds that,

(cid:107)∇f (x) − ∇f (y)(cid:107) ≤ L(cid:107)x − y(cid:107).

(2)

A brief summary of related work appears in Section 6.

2 Motivating Real-world Examples

Many continuous objectives in practice turn out to be DR-submodular. Here we list several of them.
More can be found in Appendix B.

Softmax extension. Determinantal point processes (DPPs) are probabilistic models of repulsion,
that have been used to model diversity in machine learning [26]. The constrained MAP (maximum a
posteriori) inference problem of a DPP is an NP-hard combinatorial problem in general. Currently,
the methods with the best approximation guarantees are based on either maximizing the multilinear
extension [6] or the softmax extension [20], both of which are DR-submodular functions (details in
Appendix F.1). The multilinear extension is given as an expectation over the original set function
values, thus evaluating the objective of this extension requires expensive sampling. In constast, the
softmax extension has a closed form expression, which is much more appealing from a computational
perspective. Let L be the positive semideﬁnite kernel matrix of a DPP, its softmax extension is:

f (x) = log det (diag(x)(L − I) + I) , x ∈ [0, 1]n,

(3)

where I is the identity matrix, diag(x) is the diagonal matrix with diagonal elements set as x.
The problem of MAP inference in DPPs corresponds to the problem maxx∈P f (x), where P is a
down-closed convex constraint, e.g., a matroid polytope or a matching polytope.

Mean-ﬁeld inference for log-submodular models. Log-submodular models [9] are a class of
probabilistic models over subsets of a ground set V = [n], where the log-densities are submodular
Z exp(F (S)). The partition function Z = (cid:80)
set functions F (S): p(S) = 1
S⊆V exp(F (S)) is
typically hard to evaluate. One can use mean-ﬁeld inference to approximate p(S) by some factorized
distribution qx(S) := (cid:81)
(cid:81)
j /∈S(1 − xj), x ∈ [0, 1]n, by minimizing the distance measured
w.r.t. the Kullback-Leibler divergence between qx and p, i.e., (cid:80)

S⊆V qx(S) log qx(S)

p(S) . It is,

i∈S xi

KL(x) = −

xi

(1 − xj)F (S) +

[xi log xi + (1 − xi) log(1 − xi)] + log Z.

(cid:88)

(cid:89)

(cid:89)

S⊆V

i∈S

j /∈S

(cid:88)n

i=1

KL(x) is DR-supermodular w.r.t. x (details in Appendix F.1). Minimizing the Kullback-Leibler
divergence KL(x) amounts to maximizing a DR-submodular function.

2.1 Motivating Example Captured by Generalized Submodularity on Conic Lattices

Submodular continuous functions can already model many scenarios. Yet, there are several inter-
esting cases which are in general not (DR-)Submodular, but can still be captured by a generalized
notion. This generalization enables to develop polynomial algorithms with guarantees by using ideas
from continuous submodular optimization. We present one representative objective here (more in
Appendix B). In Appendix A we show the technical details on how they are covered by a class of
submodular continuous functions over conic lattices.

Consider the logistic regression model with a non-convex separable regularizer. This ﬂexibility may
result in better statistical performance (e.g., in recovering discontinuities, [2]) compared to classical
models with convex regularizers. Let z1, ..., zm in Rn be m training points with corresponding
binary labels y ∈ {±1}m. Assume that the following mild assumption is satisﬁed: For any ﬁxed
dimension i, all the data points have the same sign, i.e., sign(zj
i ) is the same for all j ∈ [m] (which
can be achieved by easily scaling if not). The task is to solve the following non-convex optimization
problem,

f (x) := m−1 (cid:88)m

min
x∈Rn

fj(x) + λr(x),

j=1

(4)

where fj(x) = log(1 + exp(−yjx(cid:62)zj)) is the logistic loss; λ > 0 is the regularization parameter,
and r(x) is some non-convex separable regularizer. Such separable regularizers are popular in

3

statistics, and two notable choices are r(x) = (cid:80)n
i , 1} (see
[2]). Let us deﬁne a vector α ∈ {±1}n as αi = sign(zj
j=1 fj(x). One
can show that l(x) is not DR-submodular or DR-supermodular. Yet, in Appendix A we will show
that l(x) is Kα-DR-supermodular, where the latter generalizes DR-supermodularity. Usually, one
can assume the optimal solution x∗ lies in some box [u, ¯u]. Then the problem is an instance of
constrained non-monotone Kα-DR-submodular maximization.

γx2
, and r(x) = (cid:80)n
i
1+γx2
i
i ), i ∈ [n] and l(x) := 1
m

i=1 min{γx2
(cid:80)m

i=1

3 Underlying Properties of Constrained DR-submodular Maximization

In this section we present several properties arising in DR-submodular function maximization. First
we show properties related to concavity of the objective along certain directions, then we establish the
relation between locally stationary points and the global optimum (thus called “local-global relation”).
These properties will be used to derive guarantees for the algorithms in Section 4. All omitted proofs
are in Appendix D.

3.1 Properties Along Non-negative/Non-positive Directions

A DR-submodular function f is concave along any non-negative/non-positive direction [4]. Notice
that DR-submodularity is a stronger condition than concavity along directions v ∈ ±Rn
+: for instance,
a concave function is concave along any direction, but it may not be a DR-submodular function.

For a DR-submodular function with L-Lipschitz gradients, one can get the following quadratic lower
bound using standard techniques by combing the concavity and Lipschitz gradients in (2).
Quadratic lower bound. If f is DR-submodular with a L-Lipschitz gradient, then for all x ∈ X
and v ∈ ±Rn

+, it holds,

(5)

(6)

f (x + v) ≥ f (x) + (cid:104)∇f (x), v(cid:105) −

L
2

(cid:107)v(cid:107)2.

It will be used in Section 4.2 for analyzing the non-monotone FRANK-WOLFE variant (Algorithm 2).

Strong DR-submodularity. DR-submodular objectives may be strongly concave along directions
v ∈ ±Rn
+, e.g., for DR-submodular quadratic functions. We will show that such additional structure
may be exploited to obtain stronger guarantees for the local-global relation.
Deﬁnition 3 (Strongly DR-submodular). A function f is µ-strongly DR-submodular (µ ≥ 0) if for
all x ∈ X and v ∈ ±Rn

+, it holds that,

f (x + v) ≤ f (x) + (cid:104)∇f (x), v(cid:105) −

µ
2

(cid:107)v(cid:107)2.

3.2 Relation Between Approximately Stationary Points and Global Optimum

First of all, we present the following Lemma, which will motivate us to consider a non-stationarity
measure for general constrained optimization problems.
Lemma 1. If f is µ-strongly DR-submodular, then for any two points x, y in X , it holds:

(y − x)(cid:62)∇f (x) ≥ f (x ∨ y) + f (x ∧ y) − 2f (x) +

(cid:107)x − y(cid:107)2.

(7)

µ
2

Lemma 1 implies that if x is stationary (i.e., ∇f (x) = 0), then 2f (x) ≥ f (x ∨ y) + f (x ∧ y) +
µ
2 (cid:107)x − y(cid:107)2, which gives an implicit relation between x and y. While in practice ﬁnding an exact
stationary point is not easy, usually non-convex solvers will arrive at an approximately stationary
point, thus requiring a proper measure of non-stationarity for the constrained optimization problem.

Non-stationarity measure. Looking at the LHS of (7), it naturally suggests to use maxy∈P (y −
x)(cid:62)∇f (x) as the non-stationarity measure, which happens to coincide with the measure proposed
by recent work of [27], and it can be calculated for free for Frank-Wolfe-style algorithms (e.g.,
Algorithm 3). In order to adapt it to the local-global relation, we give a slightly more general
deﬁnition here: For any constraint set Q ⊆ X , the non-stationarity of a point x ∈ Q is,

gQ(x) := max
v∈Q

(cid:104)v − x, ∇f (x)(cid:105)

(non-stationarity).

(8)

4

It always holds that gQ(x) ≥ 0, and x is a stationary point in Q iff gQ(x) = 0, so (8) is a natural
generalization of the non-stationarity measure (cid:107)∇f (x)(cid:107) for unconstrained optimization. As the next
statement shows, gQ(x) plays an important role in characterizing the local-global relation.
Proposition 1 (Local-Global Relation). Let x be a point in P with non-stationarity gP (x), and
Q := {y ∈ P | y ≤ ¯u − x}. Let z be a point in Q with non-stationarity gQ(z). It holds that,

max{f (x), f (z)} ≥

[f (x∗) − gP (x) − gQ(z)] +

(cid:0)(cid:107)x − x∗(cid:107)2 + (cid:107)z − z∗(cid:107)2(cid:1) ,

(9)

1
4

µ
8

where z∗ := x ∨ x∗ − x.

Proof sketch of Proposition 1: The proof uses Lemma 1, the non-stationarity in (8) and a key
observation in the following Claim. The detailed proof is in Appendix D.2.
Claim 1. It holds that f (x ∨ x∗) + f (x ∧ x∗) + f (z ∨ z∗) + f (z ∧ z∗) ≥ f (x∗).

Note that [7; 20] propose a similar relation for the special cases of multilinear/softmax extensions by
mainly proving the same conclusion as in Claim 1. Their relation does not incorporate the properties
of non-stationarity or strong DR-submodularity. They both use the proof idea of constructing a
complicated auxiliary set function tailored to speciﬁc DR-submodular functions. We present a
different proof method by directly utilizing the DR property on carefully constructed auxiliary points
(e.g., (x + z) ∨ x∗ in the proof of Claim 1), this is arguably more succint and straightforward than
that of [7; 20].

4 Algorithms for Constrained DR-submodular Maximization

Based on the properties, we present two algorithms for solving (P). The ﬁrst is based on the local-
global relation, and the second is a FRANK-WOLFE variant adapted for the non-monotone setting.
All the omitted proofs are deferred to Appendix E.

4.1 An Algorithm Based on the Local-Global Relation

Algorithm 1: TWO-PHASE FRANK-WOLFE for non-monotone DR-submodular maximization

Input: maxx∈P f (x), stopping tolerance (cid:15)1, (cid:15)2, #iterations K1, K2

1 x ← NON-CONVEX FRANK-WOLFE(f, P, K1, (cid:15)1, x(0)) ;
2 Q ← P ∩ {y ∈ Rn
+ | y ≤ ¯u − x};
3 z ← NON-CONVEX FRANK-WOLFE(f, Q, K2, (cid:15)2, z(0)) ;

Output: arg max{f (x), f (z)} ;

// x(0) ∈ P

// z(0) ∈ Q

We summarize the TWO-PHASE algorithm in Algorithm 1. It is generalized from the “two-phase”
method in [7; 20]. It invokes some non-convex solver (we use the NON-CONVEX FRANK-WOLFE
by [27]; pseudocode is included in Algorithm 3 of Appendix C) to ﬁnd approximately stationary
points in P and Q, respectively, then returns the solution with the larger function value. Though
we use NON-CONVEX FRANK-WOLFE as the subroutine here, it is worth noting that any algorithm
that is guaranteed to ﬁnd an approximately stationary point can be plugged into Algorithm 1 as
the subroutine. We give an improved approximation bound by considering more properties of
DR-submodular functions. Borrowing the results from [27] for the NON-CONVEX FRANK-WOLFE
subroutine, we get the following,
Theorem 1. The output of Algorithm 1 satisﬁes,

max{f (x), f (z)} ≥

µ
8

(cid:0)(cid:107)x − x∗(cid:107)2 + (cid:107)z − z∗(cid:107)2(cid:1)
(cid:26) max{2h1, Cf (P)}

(cid:20)
f (x∗) − min

+

1
4

√

K1 + 1

(cid:27)

, (cid:15)1

− min

(cid:26) max{2h2, Cf (Q)}

√

K2 + 1

(cid:27)(cid:21)

, (cid:15)2

,

(10)

where h1 := maxx∈P f (x) − f (x(0)), h2 := maxz∈Q f (z) − f (z(0)) are the initial suboptimalities,
γ2 (f (y) − f (x) − (y − x)(cid:62)∇f (x)) is the curvature of f
Cf (P) := supx,v∈P,γ∈[0,1],y=x+γ(v−x)
w.r.t. P, and z∗ = x ∨ x∗ − x.

2

5

k rate. However,
Theorem 1 indicates that Algorithm 1 has a 1/4 approximation guarantee and 1/
it has good empirical performance as demonstrated by the experiments in Section 5. Informally, this
(cid:0)(cid:107)x − x∗(cid:107)2 + (cid:107)z − z∗(cid:107)2(cid:1) in (10): if x is away from x∗,
can be partially explained by the term µ
8
this term will augment the bound; if x is close to x∗, by the smoothness of f , it should be close to
optimal.

√

4.2 The Non-monotone FRANK-WOLFE Variant

Algorithm 2: Non-monotone FRANK-WOLFE variant for DR-submodular maximization

Input: maxx∈P f (x), prespeciﬁed step size γ ∈ (0, 1]

1 x(0) ← 0, t(0) ← 0, k ← 0;
2 while t(k) < 1 do
3

v(k) ← arg maxv∈P,v≤ ¯u−x(k)(cid:104)v, ∇f (x(k))(cid:105);
use uniform step size γk = γ; set γk ← min{γk, 1 − t(k)};
x(k+1) ← x(k) + γkv(k), t(k+1) ← t(k) + γk, k ← k + 1;

4

5

// k : iteration index, t(k) : cumulative step size

// shrunken LMO

Output: x(K) ;

// assuming there are K iterations in total

Algorithm 2 summarizes the non-monotone FRANK-WOLFE variant, which is inspired by the uniﬁed
continuous greedy algorithm in [13] for maximizing the multilinear extension of a submodular set
function. It initializes the solution x(0) to be 0, and maintains t(k) as the cumulative step size. At
iteration k, it maximizes the linearization of f over a “shrunken” constraint set: {v|v ∈ P, v ≤
¯u − x(k)}, which is different from the classical LMO of Frank-Wolfe-style algorithms (hence we
refer to it as the “shrunken LMO”). Then it employs an update step in the direction v(k) chosen by
the LMO with a uniform step size γk = γ. The cumulative step size t(k) is used to ensure that the
overall step sizes sum to one, thus the output solution x(K) is a convex combination of the LMO
outputs, hence also lies in P.

The shrunken LMO (Step 3) is the key difference compared to the monotone FRANK-WOLFE variant
in [4]. The extra constraint v ≤ ¯u − x(k) is added to prevent too aggressive growth of the solution,
since in the non-monotone setting such aggressive growth may hurt the overall performance. The
next theorem states the guarantees of Algorithm 2.
Theorem 2. Consider Algorithm 2 with uniform step size γ. For k = 1, ..., K it holds that,

f (x(k)) ≥ t(k)e−t(k)

f (x∗) −

kγ2 − O(γ2)f (x∗).

(11)

LD2
2

By observing that t(K) = 1 and applying Theorem 2, we get the following Corollary:
Corollary 1. The output of Algorithm 2 satisﬁes f (x(K)) ≥ e−1f (x∗) − LD2
Corollary 1 shows that Algorithm 2 enjoys a sublinear convergence rate towards some point x(K)
inside P, with a 1/e approximation guarantee.

2K − O (cid:0) 1

(cid:1) f (x∗).

K2

Proof sketch of Theorem 2: The proof is by induction. To prepare the building blocks, we ﬁrst of
all show that the growth of x(k) is indeed bounded,
Lemma 2. Assume x(0) = 0. For k = 0, ..., K − 1, it holds x(k)

i ≤ ¯ui[1 − (1 − γ)t(k)/γ], ∀i ∈ [n].

Then the following Lemma provides a lower bound, which gets the global optimum involved,
Lemma 3 (Generalized from Lemma 7 in [8]). Given θ ∈ (0, ¯u], let λ(cid:48) = mini∈[n]
x ∈ [0, θ], it holds f (x ∨ x∗) ≥ (1 − 1

¯ui
θi

. Then for all

λ(cid:48) )f (x∗).

Then the key ingredient for induction is the relation between f (x(k+1)) and f (x(k)) indicated by:
Claim 2. For k = 0, ..., K −1 it holds f (x(k+1)) ≥ (1−γ)f (x(k))+γ(1−γ)t(k)/γf (x∗)− LD2

2 γ2,

which is derived by a combination of the quadratic lower bound in (5), Lemma 2 and Lemma 3.

6

Remarks on the two algorithms. Notice that though the TWO-PHASE algorithm has a worse
guarantee than the non-monotone FRANK-WOLFE variant, it is still of interest: i) It allows ﬂexibility
in using a wide range of existing solvers for ﬁnding an (approximately) stationary point. ii) The
guarantees that we present rely on a worst-case analysis. The empirical performance of the TWO-
PHASE algorithm is often comparable or better than that of the FRANK-WOLFE variant. This suggests
to explore more properties in concrete problems that may favor the TWO-PHASE algorithm, which we
leave for future work.

5 Experimental Results

We test the performance of the analyzed algorithms, while considering the following baselines: 1)
QUADPROGIP [39], which is a global solver for non-convex quadratic programming; 2) Projected
gradient ascent (PROJGRAD) with diminishing step sizes ( 1
k+1 , k starts from 0). We run all the
algorithms for 100 iterations. For the subroutine (Algorithm 3) of TWO-PHASE FRANK-WOLFE,
we set (cid:15)1 = (cid:15)2 = 10−6, K1 = K2 = 100. All the synthetic results are the average of 20 repeated
experiments. All experiments were implemented using MATLAB. Source code can be found at:
https://github.com/bianan/non-monotone-dr-submodular.

5.1 DR-submodular Quadratic Programming

As a state-of-the-art global solver, QUADPROGIP3 [39] can ﬁnd the global optimum (possibly in
exponential time), which were used to calculate the approximation ratios. Our problem instances are
synthetic DR-submodular quadratic objectives with down-closed polytope constraints, i.e., f (x) =
+ | Ax ≤ b, x ≤ ¯u, A ∈ Rm×n
2 x(cid:62)Hx + h(cid:62)x + c and P = {x ∈ Rn
1
+ }. Both objective
and constraints were randomly generated, in the following two manners:
1) Uniform distribution. H ∈ Rn×n is a symmetric matrix with uniformly distributed entries in
[−1, 0]; A ∈ Rm×n has uniformly distributed entries in [ν, ν + 1], where ν = 0.01 is a small positive
constant in order to make entries of A strictly positive.

++ , b ∈ Rm

(a) m = (cid:98)0.5n(cid:99)

(b) m = n

(c) m = (cid:98)1.5n(cid:99)

Figure 1: Results on DR-submodular quadratic instances with uniform distribution.

2) Exponential distribution. The entries of −H and A were sampled from exponential distributions
Exp(λ) (For a random variable y ≥ 0, its probability density function is λe−λy, and for y < 0, its
density is 0). Speciﬁcally, each entry of −H was sampled from Exp(1), then the matrix −H was
made to be symmetric. Each entry of A was sampled from Exp(0.25) + ν, where ν = 0.01 is a small
positive constant.
In both the above two cases, we set b = 1m, and ¯u to be the tightest upper bound of P by
, ∀j ∈ [n]. In order to make f non-monotone, we set h = −0.2 ∗ H(cid:62) ¯u. To
¯uj = mini∈[m]
2 x(cid:62)Hx + h(cid:62)x using
make sure that f is non-negative, we ﬁrst of all solve the problem minx∈P
QUADPROGIP, let the solution to be ˆx, then set c = −f ( ˆx) + 0.1 ∗ |f ( ˆx)|.

bi
Aij

1

The approximation ratios w.r.t. dimensionalities (n) are plotted in Figures 1 and 2, for the two
manners of data generation. We set the number of constraints to be m = (cid:98)0.5n(cid:99), m = n and
m = (cid:98)1.5n(cid:99) in Figures 1a to 1c (and Figures 2a to 2c), respectively.

3We used the open source code provided by [39], and the IBM CPLEX optimization studio https://www.

ibm.com/jm-en/marketplace/ibm-ilog-cplex as the subroutine.

7

(a) m = (cid:98)0.5n(cid:99)

(b) m = n

(c) m = (cid:98)1.5n(cid:99)

Figure 2: Results on quadratic instances with exponential distribution.

One can see that TWO-PHASE FRANK-WOLFE usually performs the best, PROJGRAD follows, and
non-monotone FRANK-WOLFE variant is the last. The good performance of TWO-PHASE FRANK-
WOLFE can be partially explained by the strong DR-submodularity of quadratic functions according
to Theorem 1. Performance of the two analyzed algorithms is consistent with the theoretical bounds:
the approximation ratios of FRANK-WOLFE variant are always much higher than 1/e.

5.2 Maximizing Softmax Extensions

With some derivation, one can see the derivative of the softmax extension in (3) is: ∇if (x) =
tr((diag(x)(L − I) + I)−1(L − I)i), ∀i ∈ [n], where (L − I)i denotes the matrix obtained by
zeroing all entries except the ith row of (L − I). Let C := (diag(x)(L − I) + I)−1, D := (L − I),
one can see that ∇if (x) = D(cid:62)

i· C·i, which gives an efﬁcient way to calculate the gradient ∇f (x).

(a) m = (cid:98)0.5n(cid:99)

(b) m = n

(c) m = (cid:98)1.5n(cid:99)

Figure 3: Results on softmax instances with polytope constraints generated from uniform distribution.

Results on synthetic data. We generate the softmax objectives (see (3)) in the following way: ﬁrst
generate the n eigenvalues d ∈ Rn
+, each randomly distributed in [0, 1.5], and set D = diag(d).
After generating a random unitary matrix U, we set L = UDU(cid:62). One can verify that L is positive
semideﬁnite and has eigenvalues as the entries of d.

We generate the down-closed polytope constraints in the same form and same way as that for DR-
submodular quadratic functions, except for setting b = 2 ∗ 1m. Function values returned by different
solvers w.r.t. n are shown in Figure 3, for which the random polytope constraints were generated
with uniform distribution (results for which the random polytope constraints were generated with
exponential distribution are deferred to Appendix G). The number of constraints was set to be
m = (cid:98)0.5n(cid:99), m = n and m = (cid:98)1.5n(cid:99) in Figures 3a to 3c, respectively. One can observe that
TWO-PHASE FRANK-WOLFE still has the best performance, the non-monotone FRANK-WOLFE
variant follows, and PROJGRAD has the worst performance.

Real-world results on matched summarization. The task of “matched summarization” is to select
a set of document pairs out of a corpus of documents, such that the two documents within a pair
are similar, and the overall set of pairs is as diverse as possible. The motivation for this task is very
practical: it could be, for example, to compare the opinions of various politicians on a range of
representative topics.

In our experiments, we used a similar setting to the one in [20]. We experimented on the 2012
US Republican debates data, which consists of 8 candidates: Bachman, Gingrich, Huntsman, Paul,
Perry, Romney and Santorum. Each task involves one pair of candidates, so in total there are

8

28 = 7 ∗ 8/2 tasks. Figure 4a plots the averaged function values returned by the three solvers over 28
tasks, w.r.t. different values of a hyperparameter reﬂecting the matching quality (details see [20]).
Figure 4b traces the objectives
w.r.t.
iterations for a spe-
ciﬁc candidate pair (Bachman,
For TWO-PHASE
Romney).
FRANK-WOLFE, the objectives
of the selected phase were plot-
ted. One can see that TWO-
PHASE FRANK-WOLFE also
achieves the best performance,
while the performance of non-
monotone FRANK-WOLFE vari-
ant and PROJGRAD is compara-
ble.

Figure 4: Results on 2012 US Republican debates data.

(b) Objectives w.r.t. iterations

(a) Average on 28 tasks

6 Related Work

Submodular optimization and, more broadly, non-convex optimization are extensively studied in the
literature, which renders it very difﬁcult comprehensively surveying all previous work. Here we only
brieﬂy summarize some of the most related papers.

Submodular optimization over integer-lattice and continuous domains. Many results from sub-
modular set function optimization have been generalized to the integer-lattice case [34; 33; 12; 24].
Of particular interest is the reduction [12] from an integer-lattice DR-submodular maximization prob-
lem to a submodular set function maximization problem. Submodular optimization over continuous
domains has attracted considerable attention recently [3; 4; 36]. Two classes of functions that are
covered by continuous submodularity are the Lovasz extensions [28] and multilinear extensions
[6] of submodular set functions. Particularly, multilinear extensions of submodular set functions
are also continuous DR-submodular [3], but with the special property that they are coordinate-wise
linear. Combined with the rounding technique of contention resolution [7], maximizing multilinear
extensions [38; 19; 13; 8; 11] has become the state-of-the-art method for submodular set function
maximization. Some of the techniques in maximizing multilinear extensions [13; 7; 8] have inspired
this work. However, we are the ﬁrst to explore the rich properties and devise algorithms for the
general constrained DR-submodular maximization problem over continuous domains.

Non-convex optimization. Non-convex optimization receives a surge of attention in the past years.
One active research topic is to reach a stationary point for unconstrained optimization [35; 32; 1] or
constrained optimization [18; 27]. However, without proper assumptions, a stationary point may not
lead to any global approximation guarantee. The local-global relation (in Proposition 1) provides a
strong relation between (approximately) stationary points and global optimum, thus making it ﬂexible
to incorporate progress in this area.

7 Conclusion

We have studied the problem of constrained non-monotone DR-submodular continuous maximization.
We explored the structural properties of such problems, and established a local-global relation. Based
on these properties, we presented a TWO-PHASE algorithm with a 1/4 approximation guarantee, and a
non-monotone FRANK-WOLFE variant with a 1/e approximation guarantee. We further generalized
submodular continuous function over conic lattices, which enabled us to model a larger class of
applications. Lastly, our theoretical ﬁndings were veriﬁed by synthetic and real-world experiments.

Acknowledgement. This research was partially supported by ERC StG 307036, by the Max Planck
ETH Center for Learning Systems, and by the ETH Zürich Postdoctoral Fellowship program.

9

References

[1] Allen-Zhu, Zeyuan and Hazan, Elad. Variance reduction for faster non-convex optimization. In

International Conference on Machine Learning (ICML), pp. 699–707, 2016.

[2] Antoniadis, Anestis, Gijbels, Irène, and Nikolova, Mila. Penalized likelihood regression for
generalized linear models with non-quadratic penalties. Annals of the Institute of Statistical
Mathematics, 63(3):585–615, 2011.

[3] Bach, Francis. Submodular functions: from discrete to continous domains. arXiv preprint

arXiv:1511.00394, 2015.

[4] Bian, Andrew An, Mirzasoleiman, Baharan, Buhmann, Joachim M., and Krause, Andreas.
Guaranteed non-convex optimization: Submodular maximization over continuous domains. In
International Conference on Artiﬁcial Intelligence and Statistics (AISTATS), pp. 111–120, 2017.

[5] Boyd, Stephen and Vandenberghe, Lieven. Convex optimization. Cambridge university press,

2004.

[6] Calinescu, Gruia, Chekuri, Chandra, Pál, Martin, and Vondrák, Jan. Maximizing a submod-
ular set function subject to a matroid constraint. In Integer programming and combinatorial
optimization, pp. 182–196. Springer, 2007.

[7] Chekuri, Chandra, Vondrák, Jan, and Zenklusen, Rico. Submodular function maximization via
the multilinear relaxation and contention resolution schemes. SIAM Journal on Computing, 43
(6):1831–1879, 2014.

[8] Chekuri, Chandra, Jayram, TS, and Vondrák, Jan. On multiplicative weight updates for concave
and submodular function maximization. In Proceedings of the 2015 Conference on Innovations
in Theoretical Computer Science, pp. 201–210. ACM, 2015.

[9] Djolonga, Josip and Krause, Andreas. From map to marginals: Variational inference in bayesian
submodular models. In Neural Information Processing Systems (NIPS), pp. 244–252, 2014.

[10] Eghbali, Reza and Fazel, Maryam. Designing smoothing functions for improved worst-case
competitive ratio in online optimization. In Advances in Neural Information Processing Systems
(NIPS), pp. 3279–3287. 2016.

[11] Ene, Alina and Nguyen, Huy L. Constrained submodular maximization: Beyond 1/e.

In
Foundations of Computer Science (FOCS), 2016 IEEE 57th Annual Symposium on, pp. 248–257,
2016.

[12] Ene, Alina and Nguyen, Huy L. A reduction for optimizing lattice submodular functions with

diminishing returns. arXiv preprint arXiv:1606.08362, 2016.

[13] Feldman, Moran, Naor, Joseph, and Schwartz, Roy. A uniﬁed continuous greedy algorithm
for submodular maximization. In Foundations of Computer Science (FOCS), 2011 IEEE 52nd
Annual Symposium on, pp. 570–579. IEEE, 2011.

[14] Friedland, S and Gaubert, S. Submodular spectral functions of principal submatrices of a
hermitian matrix, extensions and applications. Linear Algebra and its Applications, 438(10):
3872–3884, 2013.

[15] Fuchssteiner, Benno and Lusky, Wolfgang. Convex cones, volume 56. Elsevier, 2011.

[16] Fujishige, Satoru. Submodular functions and optimization, volume 58. Elsevier, 2005.

[17] Garg, Vijay K. Introduction to lattice theory with computer science applications. John Wiley &

Sons, 2015.

[18] Ghadimi, Saeed, Lan, Guanghui, and Zhang, Hongchao. Mini-batch stochastic approximation
methods for nonconvex stochastic composite optimization. Mathematical Programming, 155
(1-2):267–305, 2016.

[19] Gharan, Shayan Oveis and Vondrák, Jan. Submodular maximization by simulated annealing. In
Proceedings of the twenty-second annual ACM-SIAM symposium on Discrete Algorithms, pp.
1098–1116. Society for Industrial and Applied Mathematics, 2011.

[20] Gillenwater, Jennifer, Kulesza, Alex, and Taskar, Ben. Near-optimal map inference for deter-
minantal point processes. In Advances in Neural Information Processing Systems (NIPS), pp.
2735–2743, 2012.

10

[21] Hassani, Hamed, Soltanolkotabi, Mahdi, and Karbasi, Amin. Gradient methods for submodular
maximization. In Advances in Neural Information Processing Systems (NIPS), pp. 5837–5847,
2017.

[22] Ito, Shinji and Fujimaki, Ryohei. Large-scale price optimization via network ﬂow. In Advances

in Neural Information Processing Systems (NIPS), pp. 3855–3863, 2016.

[23] Iwata, Satoru, Fleischer, Lisa, and Fujishige, Satoru. A combinatorial strongly polynomial

algorithm for minimizing submodular functions. Journal of the ACM, 48(4):761–777, 2001.

[24] Khodabakhsh, Ali and Nikolova, Evdokia. Maximizing non-monotone dr-submodular functions

with cardinality constraints. arXiv preprint arXiv:1611.09474, 2016.

[25] Krause, Andreas and Golovin, Daniel. Submodular function maximization. Tractability:

Practical Approaches to Hard Problems, 3:19, 2012.

[26] Kulesza, Alex, Taskar, Ben, et al. Determinantal point processes for machine learning. Founda-

tions and Trends R(cid:13) in Machine Learning, 5(2–3):123–286, 2012.

[27] Lacoste-Julien, Simon. Convergence rate of frank-wolfe for non-convex objectives. arXiv

preprint arXiv:1607.00345, 2016.

[28] Lovász, László. Submodular functions and convexity. In Mathematical Programming The State

of the Art, pp. 235–257. Springer, 1983.

[29] Montanari, Andrea and Richard, Emile. Non-negative principal component analysis: Message
passing algorithms and sharp asymptotics. IEEE Transactions on Information Theory, 62(3):
1458–1484, 2016.

[30] Motzkin, Theodore S and Straus, Ernst G. Maxima for graphs and a new proof of a theorem of

turán. Canad. J. Math, 17(4):533–540, 1965.

[31] Nemhauser, George L, Wolsey, Laurence A, and Fisher, Marshall L. An analysis of approxima-
tions for maximizing submodular set functions – i. Mathematical Programming, 14(1):265–294,
1978.

[32] Reddi, Sashank J., Sra, Suvrit, Poczos, Barnabas, and Smola, Alexander J. Proximal stochastic
methods for nonsmooth nonconvex ﬁnite-sum optimization. In Advances in Neural Information
Processing Systems (NIPS), pp. 1145–1153. 2016.

[33] Soma, Tasuku and Yoshida, Yuichi. A generalization of submodular cover via the diminishing
return property on the integer lattice. In Advances in Neural Information Processing Systems
(NIPS), pp. 847–855, 2015.

[34] Soma, Tasuku, Kakimura, Naonori, Inaba, Kazuhiro, and Kawarabayashi, Ken-ichi. Optimal
budget allocation: Theoretical guarantee and efﬁcient algorithm. In International Conference
on Machine Learning (ICML), pp. 351–359, 2014.

[35] Sra, Suvrit. Scalable nonconvex inexact proximal splitting. In Advances in Neural Information

Processing Systems (NIPS), pp. 530–538, 2012.

[36] Staib, Matthew and Jegelka, Stefanie. Robust budget allocation via continuous submodular

functions. In International Conference on Machine Learning (ICML), pp. 3230–3240, 2017.

[37] Topkis, Donald M. Minimizing a submodular function on a lattice. Operations research, 26(2):

305–321, 1978.

[38] Vondrák, Jan. Optimal approximation for the submodular welfare problem in the value oracle
model. In Proceedings of the 40th Annual ACM Symposium on Theory of Computing, pp. 67–74,
2008.

[39] Xia, Wei, Vera, Juan, and Zuluaga, Luis F. Globally solving non-convex quadratic programs via

linear integer programming techniques. arXiv preprint arXiv:1511.02423, 2015.

[40] Zass, Ron and Shashua, Amnon. Nonnegative sparse pca. Advances in Neural Information

Processing Systems (NIPS), pp. 1561–1568, 2007.

11

Appendix

A Continuous Submodular Functions on Conic Lattices and the Reduction

Motivated by the objectives that can not be modeled by continuous submodular functions, we
consider the more general submodular continuous functions over lattices induced by conic inequalities.
Furthermore we provide a reduction to the original (DR-)submodular optimization problem.

A.1 Deﬁnitions and Properties

Let us look at the proper cone that will be used to deﬁne a conic inequality ﬁrstly. A cone K ⊆ Rn
is a proper cone if it is convex, closed, solid (having nonempty interior) and pointed (contains no
line, i.e., x ∈ K, −x ∈ K implies x = 0). A proper cone K can be used to deﬁne a conic inequality
(a.k.a. generalized inequality [5, Chapter 2.4]): a (cid:22)K b iff b − a ∈ K, which also deﬁnes a partial
ordering since the binary relation (cid:22)K is reﬂexive, antisymmetric and transitive. Then it is easy to see
that (X , (cid:22)K) is a partial ordered set (poset).

If two elements a, b ∈ X have a least upper bound (greatest lower bound), it is denoted as the “join”:
a ∨ b (the “meet”: a ∧ b). A lattice is a poset that contains the join and meet of each pair of its
elements [17]. A “lattice cone” [15] is the proper cone that can be used to deﬁne a lattice. Note that
not all conic inequalities can be used to deﬁne a lattice. For example, the positive semideﬁne cone
KPSD = {A ∈ Rn×n|A is symmetric, A (cid:23) 0} is a proper cone, but its induced ordering can not be
used to deﬁne a lattice. There is a simple counter example to show this in Appendix F.2.

Speciﬁcally, we name the lattice that can be deﬁned through a conic inequality as “conic lattice”,
since it is of particular interest for modeling the real-world applications in this paper.
Deﬁnition 4 (Conic Lattice). Given a poset (X , (cid:22)K) induced by the conic inequality (cid:22)K, if there
exist joint and meet operations for every pair of elements (a, b) in X × X , s.t. a ∨ b and a ∧ b are
still in X , then we call (X , (cid:22)K) a conic lattice.

In one word, a conic lattice (X , (cid:22)K) is a lattice induced by a conic inequality (cid:22)K. In the following
we introduce a class of conic lattices to model the applications in this work. We further provide a
general characterization about submodularity on this conic lattice.
Orthant conic lattice. Given a sign vector α ∈ {±1}n, the orthant cone is deﬁned as Kα :=
{x ∈ Rn | xiαi ≥ 0, ∀i ∈ [n]}, one can see that Kα is a proper cone. For any two points
a, b ∈ X , one can further deﬁne the join and meet operations: (a ∨ b)i := αi max{αiai, αibi},
(a ∧ b)i := αi min{αiai, αibi}, ∀i ∈ [n]. Then one can show that the poset (X , (cid:22)Kα ) is a conic
lattice.
A function f : X (cid:55)→ R is submodular on a lattice [37; 16] if for all (x, y) ∈ X × X , it holds that,

f (x) + f (y) ≥ f (x ∨ y) + f (x ∧ y).

(12)

One can establish the characterizations of submodularity on the orthant conic lattice (X , (cid:22)Kα)
similarly as that in [4]:
Proposition 2 (Characterizations of Submodularity on Orthant Conic Lattice (X , (cid:22)Kα )). If a function
f is is submodular on the lattice (X , (cid:22)Kα ) (called Kα-submodular), then we have the following two
equivalent characterizations:
a) ∀a, b ∈ X s.t. a (cid:22)Kα b, ∀i s.t. ai = bi, ∀k ∈ R+ s.t. (kei + a) and (kei + b) are still in X , it
holds that,

αi[f (kei + a) − f (a)] ≥ αi[f (kei + b) − f (b)].

(weak DR)

b) If f is twice differentiable, then ∀x ∈ X it holds,

αiαj∇2

ijf (x) ≤ 0, ∀i, j ∈ [n], i (cid:54)= j.

Proposition 2 can be proved by directly generalizing the proof of Proposition 1 in [4], proof is omitted
here due to the high similarity. Next, we generalize the deﬁnition of DR-submodularity to the conic
lattice (X , (cid:22)Kα):

(13)

(14)

12

Deﬁnition 5 (Kα-DR-submodular). A function f : X (cid:55)→ R is Kα-DR-submodular if ∀a, b ∈ X s.t.
a (cid:22)Kα b, ∀i ∈ [n], ∀k ∈ R+ s.t. (kei + a) and (kei + b) are still in X , it holds that,

αi[f (kei + a) − f (a)] ≥ αi[f (kei + b) − f (b)].

(15)

In correspondence to the relation between DR-submodularity and submodularity over continuous
domains (Proposition 2 in [4]), one can easily get the similar relation (with highly similar proof) in
bellow:
Proposition 3 (Kα-submodular + coordinate-wise concave ⇔ Kα-DR-submodular). A function f is
Kα-DR-submodular iff it is Kα-submodular and coordinate-wise concave.

Combining (14) and Proposition 3, one can show that if f is twice differentiable and Kα-DR-
submodular, then ∀x ∈ X it holds that,

αiαj∇2

ijf (x) ≤ 0, ∀i, j ∈ [n].

(16)

Similarly, a function f is Kα-DR-supermodular iff −f is Kα-DR-submodular.
Remark: We only consider the orthant conic lattice (X , (cid:22)Kα ) here, since it can already model
the applications in this paper. However, it is noteworthy that the framework can be generalized to
arbitrary conic lattices, which may be of interest to model more complicated applications. We left
this as future exploration.

A.2 A Reduction to Optimizing Submodular Functions over Continuous Domains

To be succint, in this section we only discuss the reduction for the Kα-DR-submodular maximization
problems. However, it is easy to see that the reduction works for all kinds of Kα-submodular
optimization problems, e.g., Kα-submodular minimization problem.

Suppose g is a Kα-DR-submodular function, and the Kα-DR-submodular maximization problem
is maxy∈P (cid:48) g(y), where P (cid:48) = {y ∈ Rn|hi(y) ≤ bi, ∀i ∈ [m], y (cid:23)Kα 0} is down-closed w.r.t. the
conic inequality (cid:22)Kα. The down-closedness here means if a ∈ P (cid:48) and 0 (cid:22)Kα b (cid:22)Kα a, then
b ∈ P (cid:48) as well.

Let A := diag(α), and a function f (x) := g(Ax). One can see that if g is Kα-DR-submodular,
then f is DR-submodular: assume wlog.4 that g is twice differentiable, then ∇2f (x) = A(cid:62)∇2gA,
and ∇2

ijg ≤ 0, so f is DR-submodular.

ijf (x) = αiαj∇2

By the afﬁne transformation y := Ax, one can transform the Kα-DR-submodular maximiza-
tion problem to be a DR-submodular maximization problem maxx∈P g(Ax), where P = {x ∈
Rn|hi(Ax) ≤ bi, ∀i ∈ [m], Ax (cid:23)Kα 0} is down-closed w.r.t. the ordinary component-wise inequal-
ity ≤. To verify the down-closedness of P w.r.t. to the ordinary inequality ≤ here, let y1 = Ax1 ∈ P (cid:48)
(so x1 ∈ P). Suppose there is a point y2 = Ax2 s.t. 0 (cid:22)Kα y2 (cid:22)Kα y1. From the down-closedness
of P (cid:48), we know that y2 ∈ P (cid:48), thus x2 ∈ P. Looking at 0 (cid:22)Kα y2 (cid:22)Kα y1, it is equivalent to that
0 ≤ x2 ≤ x1. Thus we establish the down-closedness of P.

Given the reduction, we can reuse the algorithms for the original DR-submodular maximization
problem (P).

A.3 Proof for the Logistic Loss in Section 2.1

Remember that the logistic loss is:

l(x) =

1
m

(cid:88)m

j=1

fj(x) =

1
m

(cid:88)m

j=1

log(1 + exp(−yjx(cid:62)zj))

(17)

Claim 3. l(x) in (17) is Kα-DR-supermodular.

Proof of Claim 3. To show that l(x) is Kα-DR-supermodular, we can check the second-order con-
dition in (16), that is, whether it holds that αpαq∇2
pql(x) ≥ 0, ∀p, q ∈ [n]. One can easily see

4If not one can still use other equivalent characterizations, for instance, the characterization in (12) or in (13)

to formulate this.

13

that,

=

∂l(x)
∂xp
∂2l(x)
∂xp∂xq

(cid:88)m

1
m

j=1

(cid:88)m

=

1
m

−yjzj
p
exp (yjx(cid:62)zj) + 1
exp (yjx(cid:62)zj)
pzj
[exp (yjx(cid:62)zj) + 1]2 zj
q.

j=1

Since αp = sign(zj
according to (16).

p), so αpαq∇2

pql(x) ≥ 0, ∀p, q ∈ [n]. Thus l(x) in (17) is Kα-DR-supermodular

B More Applications

We present more applications that fall into submodular or Kα-submodular optimization problems.
One class of notable examples are the objectives studied in [10] in the online setting. These objectives
are captured by the DR-submodular property over continuous domains. One can also refer to Section
2.2 in [3] to see more examples.

DR-submodular quadratic functions. Price optimization with continuous prices is a DR-
submodular quadratic optimization problem [22]. Another representative class of DR-submodular
quadratic objectives arises when computing the stability number s(G) of a graph G = (V, E) [30],
s(G)−1 = minx∈∆ x(cid:62)(A + I)x, where A is the adjacency matrix of the graph G, ∆ is the standard
simplex. This is an instance of a convex-constrained DR-submodular maximization problem.

Non-negative PCA (NN-PCA). NN-PCA [40; 29] is widely used as alternative models of PCA for
dimension reduction, since its projection involves only non-negative weights—a required property
in ﬁelds like economics, bioinformatics and computer vision. For a given set of m data points
zj ∈ Rn, j ∈ [m], NN-PCA aims to solve the following non-convex optimization problem:

min
(cid:107)x(cid:107)2≤1,x≥0

f (x) := −

1
2

x(cid:62) (cid:16)(cid:88)m

zjzj (cid:62)(cid:17)

x.

j=1

(18)

Let A = (cid:80)m

j=1 zjzj (cid:62)

, one can see that,

App =

(cid:88)m

j=1

(zj

p)2 ≥ 0, Apq =

(cid:88)m

j=1

pzj
zj

q = Aqp.

Let us make the following weak assumption: For one dimension/feature i, all the data points have
the same sign, i.e., sign(zj
i ) is the same for all j ∈ [m] (which can be achieved by easily scaling
if not). Now, by choosing the sign vector α ∈ {±1}n to be αp = sign(zj
p), ∀p ∈ [n], one can
easily verify that Apqαpαq ≥ 0, ∀p, q ∈ [n]. Notice that ∇2f in (18) is −A, so it holds that
αpαq∇2
pqf ≤ 0, ∀p, q ∈ [n], thus f (x) is Kα-DR-submodular according to (16). Thus we can treat
(18) as a constrained Kα-DR-submodular minimization problem.

Submodular spectral functions. As discussed by [3], submodular spectral functions [14] in the
following form are DR-submodular,

f (x) = log det

(cid:16)(cid:88)n

i=1

(cid:17)

xiAi

, x ∈ Rn
+,

(19)

where Ai are positive deﬁnite matrices. One can check the DR-submodularity of f (x) by checking
its second-order-derivatives.

C The Subroutine Algorithm

Algorithm 3 is taken from [27], the only difference lies in the output: we output the solution x(k(cid:48))
with the minimum non-stationarity, which is needed to apply the local-global relation. While [27]
outputs the solution in the last step. Since Cf (P) is generally hard to evaluate, we used the classical
FRANK-WOLFE step size

2
k+2 in the experiments.

14

Algorithm 3: NON-CONVEX FRANK-WOLFE (f, P, K, (cid:15), x(0))[27]

Input: maxx∈P f (x), P: convex set, K: number of iterations, (cid:15): stopping tolerance

1 for k = 0, ..., K do
2

ﬁnd v(k) s.t. (cid:104)v(k), ∇f (x(k))(cid:105) ≥ maxv∈P (cid:104)v, ∇f (x(k))(cid:105);
dk ← v(k) − x(k), gk := (cid:104)dk, ∇f (x(k))(cid:105) ;
if gk ≤ (cid:15) then return x(k);
Option I: γk ∈ arg minγ∈[0,1]f (x(k) + γd(k)), Option II: γk ← min{ gk
C ≥ Cf (P) ;
x(k+1) ← x(k) + γkd(k) ;

3

4

5

6

C , 1} for

// LMO
// gk: non-stationarity measure

Output: x(k(cid:48)) and gk(cid:48) = min0≤k≤K gk ;

// modiﬁed output solution compared to [27]

D Proofs for Properties

D.1 Proof of Lemma 1

Proof of Lemma 1. Since f is DR-submodular, so it is concave along any direction v ∈ ±Rn
know that x ∨ y − x ≥ 0 and x ∧ y − x ≤ 0, so from the strong DR-submodularity in (6),

+. We

f (x ∨ y) − f (x) ≤ (cid:104)∇f (x), x ∨ y − x(cid:105) −

(cid:107)x ∨ y − x(cid:107)2,

f (x ∧ y) − f (x) ≤ (cid:104)∇f (x), x ∧ y − x(cid:105) −

(cid:107)x ∧ y − x(cid:107)2.

Summing the above two inequalities and notice that x ∨ y + x ∧ y = x + y, we arrive,

(y − x)(cid:62)∇f (x) ≥ f (x ∨ y) + f (x ∧ y) − 2f (x) +

((cid:107)x ∨ y − x(cid:107)2 + (cid:107)x ∧ y − x(cid:107)2)

µ
2
µ
2

µ
2
µ
2

= f (x ∨ y) + f (x ∧ y) − 2f (x) +

(cid:107)y − x(cid:107)2,

the last equality holds since (cid:107)x ∨ y − x(cid:107)2 + (cid:107)x ∧ y − x(cid:107)2 = (cid:107)y − x(cid:107)2.

D.2 Proof of Proposition 1

Proof of Proposition 1. Consider the point z∗ := x ∨ x∗ − x = (x∗ − x) ∨ 0. One can see that: 1)
0 ≤ z∗ ≤ x∗; 2) z∗ ∈ P (down-closedness); 3) z∗ ∈ Q (because of z∗ ≤ ¯u − x). From Lemma 1,

µ
(cid:104)x∗ − x, ∇f (x)(cid:105) + 2f (x) ≥ f (x ∨ x∗) + f (x ∧ x∗) +
2
µ
(cid:107)z − z∗(cid:107)2.
2

(cid:104)z∗ − z, ∇f (z)(cid:105) + 2f (z) ≥ f (z ∨ z∗) + f (z ∧ z∗) +

(cid:107)x − x∗(cid:107)2,

Let us ﬁrst of all prove the following key Claim.
Claim 1. It holds that f (x ∨ x∗) + f (x ∧ x∗) + f (z ∨ z∗) + f (z ∧ z∗) ≥ f (x∗).

Proof of Claim 1. Firstly, we are going to prove that

f (x ∨ x∗) + f (z ∨ z∗) ≥ f (z∗) + f ((x + z) ∨ x∗),

which is equivalent to f (x ∨ x∗) − f (z∗) ≥ f ((x + z) ∨ x∗) − f (z ∨ z∗). It can be shown that
x ∨ x∗ − z∗ = (x + z) ∨ x∗ − z ∨ z∗. Combining this with the fact that z∗ ≤ z ∨ z∗, and using
the DR property (see (1)) implies (22). Then we establish,

x ∨ x∗ − z∗ = (x + z) ∨ x∗ − z ∨ z∗ .

We will show that both the RHS and LHS of the above equation are equal to x: for the LHS of (23)
we can write x ∨ x∗ − z∗ = x ∨ x∗ − (x ∨ x∗ − x) = x. For the RHS of (23) let us consider any
coordinate i ∈ [n],
(xi + zi) ∨ x∗

i − ((xi + zi) − xi) ∨ ((xi ∨ x∗

i = (xi + zi) ∨ x∗

i ) − xi) = xi,

i − zi ∨ z∗

(20)

(21)

(22)

(23)

15

where the last equality holds easily for the two situations: (xi + zi) ≥ x∗
Next, we are going to prove that,

i and (xi + zi) < x∗
i .

f (z∗) + f (x ∧ x∗) ≥ f (x∗) + f (0)
(24)
it is equivalent to f (z∗) − f (0) ≥ f (x∗) − f (x ∧ x∗), which can be done similarly by the DR
property: Notice that

x∗ − x ∧ x∗ = x ∨ x∗ − x = z∗ − 0 and 0 ≤ x ∧ x∗
thus (24) holds from the DR property. Combining (22) and (24) one can get,
f (x ∨ x∗) + f (z ∨ z∗) + f (x ∧ x∗) + f (z ∧ z∗) ≥ f (x∗) + f (0) + f ((x + z) ∨ x∗) + f (z ∧ z∗)

≥ f (x∗)

(non-negativity of f ) .

Combining (20) and (21) and Claim 1 it reads,

(cid:104)x∗−x, ∇f (x)(cid:105)+ (cid:104)z∗−z, ∇f (z)(cid:105)+ 2(f (x) + f (z)) ≥ f (x∗) +

((cid:107)x−x∗(cid:107)2 + (cid:107)z−z∗(cid:107)2)

(25)

µ
2

From the deﬁnition of non-stationarity in (8) one can get,

gP (x) := max
v∈P

gQ(z) := max
v∈Q

(cid:104)v − x, ∇f (x)(cid:105)

≥ (cid:104)x∗ − x, ∇f (x)(cid:105)

(cid:104)v − z, ∇f (z)(cid:105)

≥ (cid:104)z∗ − z, ∇f (z)(cid:105)

(26)

(27)

Putting together (25) to (27) we can get,

2(f (x) + f (z)) ≥ f (x∗) − gP (x) − gQ(z) +

((cid:107)x − x∗(cid:107)2 + (cid:107)z − z∗(cid:107)2).

so it arrives max{f (x), f (z)} ≥ 1

4 [f (x∗) − gP (x) − gQ(z)] + µ

8 ((cid:107)x − x∗(cid:107)2 + (cid:107)z − z∗(cid:107)2).

x∗∈P

z∗∈Q

µ
2

E Proofs for Algorithms

E.1 Proof of Theorem 1

Proof of Theorem 1. Let gP (x), gQ(z) to be the non-stationarity of x and z, respectively. Since we
are using the NON-CONVEX FRANK-WOLFE (Algorithm 3) as subroutine, according to [27, Theorem
1], one can get,

gP (x) ≤ min

gQ(z) ≤ min

(cid:26) max{2h1, Cf (P)}

(cid:26) max{2h2, Cf (Q)}

√

√

K1 + 1

K2 + 1

, (cid:15)1

(cid:27)

(cid:27)

, (cid:15)2

,

Plugging the above into Proposition 1 we reach the conclusion in (10).

E.2 Proof of Lemma 2

Lemma 2. Assume x(0) = 0. For k = 0, ..., K − 1, it holds x(k)

i ≤ ¯ui[1 − (1 − γ)t(k)/γ], ∀i ∈ [n].

Proof of Lemma 2. We prove by induction. First of all, it holds when k = 0, since x(0)
t(0) = 0 as well. Assume it holds for k. Then for k + 1, we have

i = 0, and

x(k+1)
i

i

)

i + γv(k)
i + γ(¯ui − x(k)
i
i + γ ¯ui

= x(k)
≤ x(k)
= (1 − γ)x(k)
≤ (1 − γ)¯ui[1 − (1 − γ)t(k)/γ] + γ ¯ui
= ¯ui[1 − (1 − γ)t(k+1)/γ].

(constraint of shrunken LMO)

(induction)

(28)

(29)

16

E.3 Proof of Lemma 3

Lemma 3 (Generalized from Lemma 7 in [8]). Given θ ∈ (0, ¯u], let λ(cid:48) = mini∈[n]
x ∈ [0, θ], it holds f (x ∨ x∗) ≥ (1 − 1

λ(cid:48) )f (x∗).

¯ui
θi

. Then for all

Proof of Lemma 3. Consider r(λ) = x∗ + λ(x ∨ x∗ − x∗), it is easy to see that r(λ) ≥ 0, ∀λ ≥ 0.
Notice that λ(cid:48) ≥ 1. Let y = r(λ(cid:48)) = x∗ + λ(cid:48)(x ∨ x∗ − x∗), it is easy to see that y ≥ 0, it also hold
i ) ≤ λ(cid:48)xi ≤ λ(cid:48)θi ≤ ¯ui;
that y ≤ ¯u: Consider one coordinate i, 1) if xi ≥ x∗
2) if xi < x∗
Note that

i ≤ ¯ui. So f (y) ≥ 0.

i , then yi = x∗

i , then yi = x∗

i +λ(cid:48)(xi−x∗

1
λ(cid:48) )x∗ +
since f is concave along r(λ), so it holds that,

x ∨ x∗ = (1 −

1
λ(cid:48) y = (1 −

1
λ(cid:48) )r(0) +

1
λ(cid:48) r(λ(cid:48)),

f (x ∨ x∗) ≥ (1 −

1
λ(cid:48) )f (x∗) +

1
λ(cid:48) f (y) ≥ (1 −

1
λ(cid:48) )f (x∗).

E.4 Proof of Theorem 2

Proof of Theorem 2. First of all, let us prove the Claim:

Claim 2. For k = 0, ..., K −1 it holds f (x(k+1)) ≥ (1−γ)f (x(k))+γ(1−γ)t(k)/γf (x∗)− LD2

2 γ2,

Proof of Claim 2. Consider a point z(k) := x(k) ∨ x∗ − x(k), one can observe that: 1) z(k) ≤
¯u − x(k); 2) since x(k) ≥ 0, x∗ ≥ 0, so z(k) ≤ x∗, which implies that z(k) ∈ P (from down-
closedness of P). So z(k) is a candidate solution for the new LMO (Step 3). We have,

f (x(k+1)) − f (x(k)) ≥ γ(cid:104)∇f (x(k)), v(k)(cid:105) −

γ2(cid:107)v(k)(cid:107)2

(Quadratic lower bound from (5))

L
2
L
2
L
2

≥ γ(cid:104)∇f (x(k)), v(k)(cid:105) −

γ2D2

(diameter of P)

≥ γ(cid:104)∇f (x(k)), z(k)(cid:105) −

γ2D2

(shrunken LMO)

≥ γ(f (x(k) + z(k)) − f (x(k))) −

γ2D2

(concave along z(k))

= γ[f (x(k) ∨ x∗) − f (x(k))] −

γ2D2

L
2
1
λ(cid:48) )f (x∗) − f (x(k))] −

L
2

≥ γ[(1 −

= γ[(1 − γ)t(k)/γf (x∗) − f (x(k))] −

γ2D2

γ2D2

(Lemma 3)

L
2

L
2

where the last equality comes from setting θ := ¯u(1 − (1 − γ)t(k)/γ) according to Lemma 2, thus
λ(cid:48) = mini

= (1 − (1 − γ)t(k)/γ)−1.

¯ui
θi

First of all, it holds when k = 0 (notice that t(0) = 0). Assume that it holds for k. Then for k + 1,
considering the fact e−t − O(γ) ≤ (1 − γ)t/γ when 0 < γ ≤ t ≤ 1 and Claim 2 we get,

After rearrangement, we reach the claim.

Then, let us prove Theorem 2 by induction.

f (x(k+1))

≥ (1 − γ)f (x(k)) + γ(1 − γ)t(k)/γf (x∗) −

LD2
2

γ2

17

≥ (1 − γ)f (x(k)) + γ[e−t(k)

− O(γ)]f (x∗) −

≥ (1 − γ)[t(k)e−t(k)

f (x∗) −

LD2
2
kγ2 − O(γ2)f (x∗)] + γ[e−t(k)

γ2

LD2
2

− O(γ)]f (x∗) −

LD2
2

γ2

= [(1 − γ)t(k)e−t(k)

+ γe−t(k)

]f (x∗) −

γ2[(1 − γ)k + 1] − [(1 − γ)O(γ2) + γO(γ)]f (x∗)

≥ [(1 − γ)t(k)e−t(k)

+ γe−t(k)

]f (x∗) −

γ2(k + 1) − O(γ2)f (x∗).

(30)

(31)

LD2
2
LD2
2

Let us consider the term [(1 − γ)t(k)e−t(k)
is concave in [0, 2], so g(t(k) + γ) − g(t(k)) ≤ γg(cid:48)(t(k)), which amounts to

+ γe−t(k)

]f (x∗). We know that the function g(t) = te−t

[(1 − γ)t(k)e−t(k)

+ γe−t(k)

]f (x∗) ≥ (t(k) + γ)e−(t(k)+γ)f (x∗) = t(k+1)e−t(k+1)

f (x∗)

(32)

Plugging (32) into (31) we get,

f (x(k+1)) ≥ t(k+1)e−t(k+1)

f (x∗) −

γ2(k + 1) − O(γ2)f (x∗).

LD2
2

Thus proving the induction, and proving the theorem as well.

F Miscellaneous Results

F.1 Verifying DR-submodularity of the Objectives

Softmax extension. For softmax extension, the objective is,

f (x) = log det (diag(x)(L − I) + I) , x ∈ [0, 1]n.

Its DR-submodularity can be established by directly applying Lemma 3 in [20]: [20, Lemma 3]
immediately implies that all entries of ∇2f are non-positive, so f (x) is DR-submodular.

Multilinear extension. The DR-submodularity of multilinear extension can be directly recognized
by considering the conclusion in Appendix A.2 of [3] and the fact that multilinear extension is
coordinate-wise linear.
KL(x). The Kullback-Leibler divergence between qx and p, i.e., (cid:80)

S⊆V qx(S) log qx(S)

p(S) is,

KL(x) = −

xi

(1 − xj)F (S) +

[xi log xi + (1 − xi) log(1 − xi)] + log Z.

(cid:88)

(cid:89)

(cid:89)

S⊆V

i∈S

j /∈S

(cid:88)n

i=1

The ﬁrst term is the negative of a multilinear extension, so it is DR-supermodular. The second term
is separable, and coordinate-wise convex, so it will not affect the off-diagonal entries of ∇2KL(x),
it will only contribute to the diagonal entries. Now, one can see that all entries of ∇2KL(x) are
non-negative, so KL(x) is DR-supermodular w.r.t. x.

F.2 A Counter Example to Show PSD Cone is not Lattice

The positive semideﬁne cone KPSD = {A ∈ Rn×n|A is symmetric, A (cid:23) 0} is a proper cone, but
not a lattice cone. That is, it can not be used to deﬁne a lattice over the space of symmetric matrices.
Let us consider the two dimensional symmetric matrix space S2. Speciﬁcally, the following two
symmetric matrices,

X =

, Y =

(cid:20)1
0

(cid:21)

0
0

(cid:20)0
0

(cid:21)
0
1

.

For the conic inequality (cid:22)KPSD , assume that there exists a least upper bound, i.e., the join of X, Y:
Z := X ∨ Y. From the deﬁnition of least upper bound, ∀ W ∈ S2 it should hold that,

W (cid:23)KPSD X and W (cid:23)KPSD Y iff W (cid:23)KPSD Z.

(33)

18

(cid:20)b a
(cid:21)
a c
(cid:21)
(cid:20)1 a
a 1
(cid:20)2
1

Suppose Z =

. Firstly, consider W to be diagonal matrices, one can verify that Z must be in

the form of

, then considering W = I forcing Z to be I.

Now let W = 2
3

(cid:21)
1
, which is (cid:23)KPSD X and (cid:23)KPSD Y. However, W − I = 1
2
3
thus contradicting (33).

(cid:20)1
2

(cid:21)
2
1

/∈ KPSD,

G Additional Experimental Results

We generate the down-closed polytope constraints in the same form and same way as that for
DR-submodular quadratic functions.

Figure 5 shows the function values returned by different solvers w.r.t. n, for which the random
polytope constraints were generated with exponential distribution. Speciﬁcally, the random polytope
is in the form of P = {x ∈ Rn
+ | Ax ≤ b, x ≤ ¯u, A ∈ Rm×n
+ }. Each entry of A was
sampled from Exp(1) + ν, where ν = 0.01 is a small positive constant. We set b = 2 ∗ 1m, and
set ¯u to be the tightest upper bound of P by ¯uj = mini∈[m]
, ∀j ∈ [n]. One can see that the
TWO-PHASE FRANK-WOLFE has the best performance, while non-monotone FRANK-WOLFE and
PROJGRAD have comparable performance.

++ , b ∈ Rm

bi
Aij

(a) m = (cid:98)0.5n(cid:99)

(b) m = n

(c) m = (cid:98)1.5n(cid:99)

Figure 5: Results on softmax instances with random polytope constraints generated from exponential
distribution.

19

