SEQ3: Differentiable Sequence-to-Sequence-to-Sequence Autoencoder for
Unsupervised Abstractive Sentence Compression

Christos Baziotis1;2, Ion Androutsopoulos2, Ioannis Konstas3, Alexandros Potamianos1
1 School of ECE, National Technical University of Athens, Athens, Greece
2 Department of Informatics, Athens University of Economics and Business, Athens, Greece
3 Interaction Lab, School of Math. and Comp. Sciences, Heriot-Watt University, Edinburgh, UK
cbaziotis@mail.ntua.gr, ion@aueb.gr
i.konstas@hw.ac.uk, potam@central.ntua.gr

Abstract

Neural sequence-to-sequence models are cur-
rently the dominant approach in several nat-
ural language processing tasks, but require
large parallel corpora. We present a sequence-
to-sequence-to-sequence autoencoder (SEQ3),
consisting of two chained encoder-decoder
pairs, with words used as a sequence of dis-
crete latent variables. We apply the pro-
posed model to unsupervised abstractive sen-
tence compression, where the ﬁrst and last
sequences are the input and reconstructed
sentences, respectively, while the middle se-
quence is the compressed sentence. Constrain-
ing the length of the latent word sequences
forces the model to distill important infor-
mation from the input. A pretrained lan-
guage model, acting as a prior over the latent
sequences, encourages the compressed sen-
tences to be human-readable. Continuous re-
laxations enable us to sample from categori-
cal distributions, allowing gradient-based op-
timization, unlike alternatives that rely on re-
inforcement learning. The proposed model
does not require parallel text-summary pairs,
achieving promising results in unsupervised
sentence compression on benchmark datasets.

1

Introduction

Neural sequence-to-sequence models (SEQ2SEQ)
perform impressively well in several natural lan-
guage processing tasks, such as machine trans-
lation (Sutskever et al., 2014; Bahdanau et al.,
2015) or syntactic constituency parsing (Vinyals
et al., 2015). However, they require massive par-
allel training datasets (Koehn and Knowles, 2017).
Consequently there has been extensive work on
utilizing non-parallel corpora to boost the per-
formance of SEQ2SEQ models (Sennrich et al.,
2016; G¨ulc¸ehre et al., 2015), mostly in neural ma-
chine translation where models that require ab-
solutely no parallel corpora have also been pro-

Figure 1: Overview of the proposed SEQ3 autoencoder.

posed (Artetxe et al., 2018; Lample et al., 2018b).
Unsupervised (or semi-supervised) SEQ2SEQ
models have also been proposed for summariza-
tion tasks with no (or small) parallel text-summary
sets, including unsupervised sentence compres-
sion. Current models, however, barely reach lead-
N baselines (Fevry and Phang, 2018; Wang and
Lee, 2018), and/or are non-differentiable (Wang
and Lee, 2018; Miao and Blunsom, 2016), thus
relying on reinforcement learning, which is un-
stable and inefﬁcient. By contrast, we propose
a sequence-to-sequence-to-sequence autoencoder,
dubbed SEQ3, that can be trained end-to-end via
gradient-based optimization. SEQ3 employs dif-
ferentiable approximations for sampling from cat-
egorical distributions (Maddison et al., 2017; Jang
et al., 2017), which have been shown to outper-
form reinforcement learning (Havrylov and Titov,
2017). Therefore it is a generic framework which
can be easily extended to other tasks, e.g., machine
translation and semantic parsing via task-speciﬁc
losses. In this work, as a ﬁrst step, we apply SEQ3
to unsupervised abstractive sentence compression.
SEQ3 (x2) comprises two attentional encoder-
decoder (Bahdanau et al., 2015) pairs (Fig. 1): a
compressor C and a reconstructor R. C (x2.1) re-
ceives an input text x = ⟨x1; : : : ; xN ⟩ of N words,
and generates a summary y = ⟨y1; : : : ; yM ⟩ of M
words (M<N), y being a latent variable. R and
C communicate only through the discrete words
of the summary y (x2.2). R (x2.3) produces a se-
quence ^x = ⟨^x1; : : : ; ^xN ⟩ of N words from y, try-

⟩. Each hs

1; : : : ; hs
N

coded by a bidirectional RNN, producing hs =
⟨hs
t is the concatenation of the
corresponding left-to-right and right-to-left states
(outputs in LSTMs) of the bi-RNN.
 (cid:0)(cid:0)
RNNs(es
t ;

(cid:0)(cid:0)!
RNNs(es
t ;

hs
t = [

 (cid:0)
h s

(cid:0)!
h s

t(cid:0)1);

t+1)]

To generate the summary y, we employ the atten-
tional RNN decoder of Luong et al. (2015), with
their global attention and input feeding. Con-
cretely, at each timestep (t 2 f1; : : : ; Mg) we
compute a probability distribution ai over all the
states hs
N of the source encoder condi-
tioned on the current state hc
t of the compressor’s
decoder to produce a context vector ct.

1; : : : ; hs

ai = softmax(hs
i

⊺ Wa hc

t ); ct =

ai hs
i

N∑

i=1

The matrix Wa is learned. We obtain a probability
distribution for yt over the vocabulary V by com-
bining ct and the current state hc

t of the decoder.

oc
t = tanh(Wo [ct; hc
t = Wv oc
uc

t + bv
p(ytjy<t; x) = softmax(uc
t )

t ] + bo)

(1)

(2)

(3)

Wo; bo; Wv; bv are learned. ct is also used when
updating the state hc
t of the decoder, along with
the embedding ec
t of yt and a countdown argument
M (cid:0) t (scaled by a learnable wd) indicating the
number of the remaining words of the summary
(Fevry and Phang, 2018; Kikuchi et al., 2016).

hc
t+1 =

(cid:0)(cid:0)!
RNNc(hc

t ; ec

t ; ct; wd (M (cid:0) t))

(4)

For each input x = ⟨x1; : : : ; xN ⟩, we obtain a tar-
get length M for the summary y = ⟨y1; : : : ; yM ⟩
by sampling (and rounding) from a uniform dis-
tribution U ((cid:11)N; (cid:12)N); (cid:11); (cid:12) are hyper-parameters
((cid:11) < (cid:12) < 1); we set M = 5, if the sampled M
is smaller. Sampling M, instead of using a static
compression ratio, allows us to train a model ca-
pable of producing summaries with varying (e.g.,
user-speciﬁed) compression ratios. Controlling
the output length in encoder-decoder architectures
has been explored in machine translation (Kikuchi
et al., 2016) and summarization (Fan et al., 2018).

Figure 2: More detailed illustration of SEQ3. The com-
pressor (C) produces a summary from the input text,
and the reconstructor (R) tries to reproduce the input
from the summary. R and C comprise an attentional
encoder-decoder each, and communicate only through
the (discrete) words of the summary. The LM prior
incentivizes C to produce human-readable summaries,
while topic loss rewards summaries with similar topic-
indicating words as the input text.

ing to minimize a reconstruction loss LR = (x; ^x)
(x2.5). A pretrained language model acts as a prior
on y, introducing an additional loss LP (x; y) that
encourages SEQ3 to produce human-readable sum-
maries. A third loss LT (x; y) rewards summaries
y with similar topic-indicating words as x. Experi-
ments (x3) on the Gigaword sentence compression
dataset (Rush et al., 2015) and the DUC-2003 and
DUC-2004 shared tasks (Over et al., 2007) pro-
duce promising results.

Our contributions are: (1) a fully differentiable
sequence-to-sequence-to-sequence (SEQ3) autoen-
coder that can be trained without parallel data via
gradient optimization; (2) an application of SEQ3
to unsupervised abstractive sentence compression,
with additional task-speciﬁc loss functions; (3)
state of the art performance in unsupervised ab-
stractive sentence compression. This work is a
step towards exploring the potential of SEQ3 in
other tasks, such as machine translation.

2 Proposed Model

2.1 Compressor

The bottom left part of Fig. 2 illustrates the inter-
nals of the compressor C. An embedding layer
projects the source sequence x to the word em-
⟩, which are then en-
beddings es = ⟨es

1; : : : ; es
N

2.2 Differentiable Word Sampling

To generate the summary, we need to sample
its words yt from the categorical distributions
p(ytjy<t; x), which is a non-differentiable process.

Soft-Argmax Instead of sampling yt, a simple
workaround during training is to pass as input to
the next timestep of C’s decoder and to the corre-
sponding timestep of R’s encoder a weighted sum
of all the vocabulary’s (V ) word embeddings, us-
ing a peaked softmax function (Goyal et al., 2017):

ec
t =

e(wi) softmax(uc

t =(cid:28) )

(5)

jV j∑

i

where uc
t is the unnormalized score in Eq. 2 (i.e.,
the logit) of each word wi and (cid:28) 2 (0; 1) is the
temperature. As (cid:28) ! 0 most of the probability
mass in Eq. 5 goes to the most probable word,
hence the operation approaches the arg max.

Gumbel-Softmax We still want to be able to per-
form sampling, though, as it has the beneﬁt of
adding stochasticity and facilitating exploration of
the parameter space. Hence, we use the Gumbel-
Softmax (GS) reparametrization trick (Maddison
et al., 2017; Jang et al., 2017) as a low variance
approximation of sampling from categorical distri-
butions. Sampling a speciﬁc word yt from the soft-
max (Eq. 3) is equivalent to adding (element-wise)
to the logits an independent noise sample (cid:24) from
the Gumbel distribution1 and taking the arg max:

yt (cid:24) softmax(uc

t ) $ yt = arg max(uc

t + (cid:24)) (6)

Therefore, using the GS trick, Eq. 5 becomes:

~ec
t =

e(wi) softmax((uc

t + (cid:24))=(cid:28) )

(7)

jV j∑

i

Straight-Through Both relaxations lead to mix-
tures of embeddings, which do not correspond
to actual words. Even though this enables the
compressor to communicate with the reconstruc-
tor using continuous values, thus fully utilizing
the available embedding space, ultimately our aim
is to constrain them to communicate using only
In addition, an unwanted dis-
natural language.
crepancy is created between training (continuous
embeddings) and test time (discrete embeddings).
We alleviate these problems with the Straight-
Through estimator (ST) (Bengio et al., 2013).
Speciﬁcally, in the forward pass of training we dis-
cretize ~ec
t by using the arg max (Eq. 6), whereas
in the backward pass we compute the gradients us-
ing the GS (Eq. 7). This is a biased estimator due

1(cid:24)i = (cid:0) log((cid:0) log(xi)); xi (cid:24) U (0; 1)

to the mismatch between the forward and back-
ward passes, but works well in practice. ST GS re-
portedly outperforms scheduled sampling (Goyal
et al., 2017) and converges faster than reinforce-
ment learning (Havrylov and Titov, 2017).

2.3 Reconstructor

The reconstructor (upper right of Fig. 2) works
like the compressor, but its encoder operates on the
embeddings ec
M of the words y1; : : : ; yM
of the summary (exact embeddings of the sampled
words yt in the forward pass, approximate differ-
entiable embeddings in the backward pass).

1; : : : ; ec

2.4 Decoder Initialization

(cid:0)!
hs
N ;

We initialize the hidden state of each decoder us-
 (cid:0)
hs
1]
ing a transformation of the concatenation [
of the last hidden states (from the two directions)
of its bidirectional encoder and a length vector,
following Mallinson et al. (2018). The length vec-
tor for the decoder of the compressor C consists of
the target summary length M, scaled by a learnable
parameter wv, and the compression ratio M
N .

hc
0 = tanh(Wc [

(cid:0)!
hs
N ;

 (cid:0)
hs
1; wvM ;

M
N

])

Wc is a trainable hidden layer. The decoder of the
reconstructor R is initialized similarly.

2.5 Loss Functions
Reconstruction Loss LR(x; ^x) is the (negative)
log-likelihood assigned by the (decoder of) R to
the input (correctly reconstructed) words x =
⟨x1; : : : ; xN ⟩, where pR is the distribution of R.
N∑

LR(x; ^x) = (cid:0)

log pR(^xi = xi)

i=1
We do not expect LR(x; ^x) to decrease to zero, as
there is information loss through the compression.
However, we expect it to drive the compressor to
produce such sentences that will increase the like-
lihood of the target words in the reconstruction.
LM Prior Loss To ensure that the summaries y are
readable, we pretrain an RNN language model (see
Appendix) on the source texts of the full training
set. We compute the Kullback-Leibler divergence
DKL between the probability distributions of the
(decoder of) the compressor (p(ytjy<t; x), Eq. 3)
and the language model (pLM(ytjy<t; x)). Sim-
ilar priors have been used in sentence compres-
sion (Miao and Blunsom, 2016) and agent com-
munication (Havrylov and Titov, 2017).

We also use the following task-speciﬁc losses.
Topic Loss Words with high TF-IDF scores are in-
dicative of the topic of a text (Ramos et al., 2003;
Erkan and Radev, 2004). To encourage the com-
pressor to preserve in the summary y the topic-
indicating words of the input x, we compute the
TF-IDF-weighted average vx of the word embed-
dings of x and the average vy of the word embed-
dings of y and use their cosine distance as an ad-
ditional loss LT = 1 (cid:0) cos(vx; vy).

vx =

N∑

i=1

∑

IDF(xi) es
i
N
t=1 IDF(xt)

vy =

1
M

M∑

i=1

ec
i

(Using TF-IDF in vy did not help.) All IDF scores
are computed on the training set.
Length Penalty A fourth loss LL (not shown in
Fig. 1) helps the (decoder of the) compressor to
predict the end-of-sequence (EOS) token at the tar-
get summary length M. LL is the cross-entropy be-
tween the distributions p(ytjy<t; x) (Eq. 3) of the
compressor at t = M + 1 and onward, with the
one-hot distribution of the EOS token.

2.6 Modeling Details

Parameter Sharing We tie the weights of layers
encoding similar information, to reduce the num-
ber of trainable parameters. First, we use a shared
embedding layer for the encoders and decoders,
initialized with 100-dimensional GloVe embed-
dings (Pennington et al., 2014). Additionally, we
tie the shared embedding layer with the output lay-
ers of both decoders (Press and Wolf, 2017; Inan
et al., 2017). Finally, we tie the encoders of the
compressor and reconstructor (see Appendix).
OOVs Out-of-vocabulary words are handled as in
Fevry and Phang (2018) (see Appendix).

3 Experiments

Datasets We train SEQ3 on the Gigaword sentence
compression dataset (Rush et al., 2015).2 It con-
sists of pairs, each containing the ﬁrst sentence of
a news article (x) and the article’s headline (y), a
total of 3.8M/189k/1951 train/dev/test pairs. We
also test (without retraining) SEQ3 on DUC-2003
and DUC-2004 shared tasks (Over et al., 2007),
containing 624/500 news articles each, paired with
4 reference summaries capped at 75 bytes.
Methods compared We evaluated SEQ3 and an
ablated version of SEQ3. We only used the article

sentences (sources) of the training pairs from Gi-
gaword to train SEQ3; our model is never exposed
to target headlines (summaries) during training or
evaluation, i.e., it is completely unsupervised. Our
code is publicly available.3

We compare SEQ3 to other unsupervised sen-
tence compression models. We note that the ex-
tractive model of Miao and Blunsom (2016) re-
lies on a pre-trained attention model using at least
500K parallel sentences, which is crucial to miti-
gate the inefﬁciency of sampling-based variational
inference and REINFORCE. Therefore it is not
comparable, as it is semi-supervised. The re-
sults of the extractive model of Fevry and Phang
(2018) are also not comparable, as they were ob-
tained on a different, not publicly available test set.
We note, however, that they report that their sys-
tem performs worse than the LEAD-8 baseline in
ROUGE-2 and ROUGE-L on Gigaword. The only
directly comparable unsupervised model is the ab-
stractive ‘Pretrained Generator’ of Wang and Lee
(2018). The version of ‘Adversarial REINFORCE’
that Wang and Lee (2018) consider unsupervised
is actually weakly supervised, since its discrimi-
nator was exposed to the summaries of the same
sources the rest of the model was trained on.

As baselines, we use LEAD-8 for Gigaword,
which simply selects the ﬁrst 8 words of the
source, and PREFIX for DUC, which includes the
ﬁrst 75 bytes of the source article. We also
compare to supervised abstractive sentence com-
pression methods (Tables 1-3). Following previ-
ous work, we report the average F1 of ROUGE-
1, ROUGE-2, ROUGE-L (Lin, 2004). We imple-
mented SEQ3 with LSTMs (see Appendix) and dur-
ing inference we perform greedy-sampling.

Results Table 1 reports the Gigaword results.
SEQ3 outperforms the unsupervised Pretrained
Generator across all metrics by a large margin. It
also surpasses LEAD-8. If we remove the LM prior,
performance drops, esp. in ROUGE-2 and ROUGE-
L. This makes sense, since the pretrained LM re-
wards correct word order. We also tried remov-
ing the topic loss, but the model failed to con-
verge and results were extremely poor (Table 1).
Topic loss acts as a bootstrap mechanism, bias-
ing the compressor to generate words that main-
tain the topic of the input text. This greatly re-
duces variance due to sampling in early stages of
training, alleviating the need to pretrain individual

2github.com/harvardnlp/sent-summary

3https://github.com/cbaziotis/seq3

Type

Supervision Methods

Supervised

3.8M

Weakly supervised

(3.8M)

Unsupervised

0

ABS (Rush et al., 2015)
SEASS (Zhou et al., 2017)
words-lvt5k-1sent (Nallapati et al., 2016)
Adversarial REINFORCE (Wang and Lee, 2018)
LEAD-8 (Baseline)
Pretrained Generator (Wang and Lee, 2018)
SEQ3 (Full)
SEQ3 w/o LM prior loss
SEQ3 w/o TOPIC loss

R-1
29.55
36.15
36.4
28.11
21.86
21.26
25.39
24.48
3.89

R-2
11.32
17.54
17.7
9.97
7.66
5.60
8.21
6.68
0.1

R-L
26.42
33.63
33.71
25.41
20.45
18.89
22.68
21.79
3.75

Table 1: Average results on the (English) Gigaword dataset for abstractive sentence compression methods.

Model
ABS (Rush et al., 2015)
PREFIX
SEQ3 (Full)

R-1
28.48
21.3
20.90

R-2
8.91
6.38
6.08

R-L
23.97
18.82
18.55

Table 2: Averaged results on the DUC-2003 dataset; the
top part reports results of supervised systems.

Model
TOPIARY (Zajic et al., 2007)
Woodsend et al. (2010)
ABS (Rush et al., 2015)
PREFIX
SEQ3 (Full)

R-1
25.12
22
28.18
20.91
22.13

R-2
6.46
6
8.49
5.52
6.18

R-L
20.12
17
23.81
18.20
19.3

Table 3: Averaged results on the DUC-2004 dataset; the
top part reports results of supervised systems.

components, unlike works that rely on reinforce-
ment learning (Miao and Blunsom, 2016; Wang
and Lee, 2018). Overall, both losses work in syn-
ergy, with the topic loss driving what and the LM
prior loss driving how words should be included
in the summary. SEQ3 behaves similarly on DUC-
2003 and DUC-2004 (Tables 2-3), although it was
trained on Gigaword.
In DUC-2003, however, it
does not surpass the PREFIX baseline.

Finally, Fig. 3 illustrates three randomly sam-
pled outputs of SEQ3 on Gigaword.
In the ﬁrst
one, SEQ3 copies several words esp. from the be-
ginning of the input (hence the high ROUGE-L) ex-
hibiting extractive capabilities, though still being
adequately abstractive (bold words denote para-
phrases). In the second one, SEQ3 showcases its
true abstractive power by paraphrasing and com-
pressing multi-word expressions to single content
words more heavily, still without losing the overall
meaning. In the last example, SEQ3 progressively
becomes ungrammatical though interestingly re-
taining some content words from the input.

4 Limitations and Future Work

The model tends to copy the ﬁrst words of the in-
put sentence in the compressed text (Fig. 3). We

input: the american sailors who thwarted somali pirates
ﬂew home to the u.s. on wednesday but without their cap-
tain , who was still aboard a navy destroyer after being
rescued from the hijackers .
gold: us sailors who thwarted pirate hijackers ﬂy home
SEQ3: the american sailors who foiled somali pirates ﬂew
home after crew hijacked .

input: the central election commission -lrb- cec -rrb- on
monday decided that taiwan will hold another election
of national assembly members on may # .
gold: national <unk> election scheduled for may
SEQ3: the central election commission -lrb- cec UNK an-
nounced elections .

input: dave bassett resigned as manager of struggling en-
glish premier league side nottingham forest on saturday
after they were knocked out of the f.a. cup in the third
round , according to local reports on saturday .
gold: forest manager bassett quits .
SEQ3: dave bassett resigned as manager of struggling en-
glish premier league side UNK forest on knocked round
press

Figure 3: Good/bad example summaries on Gigaword.

hypothesize that since the reconstructor is autore-
gressive, i.e., each word is conditioned on the pre-
vious one, errors occurring early in the generated
sequence have cascading effects. This inevitably
encourages the compressor to select the ﬁrst words
of the input. A possible workaround might be to
modify SEQ3 so that the ﬁrst encoder-decoder pair
would turn the inputs to longer sequences, and
the second encoder-decoder would compress them
trying to reconstruct the original inputs. In future
work, we plan to explore the potential of SEQ3 in
other tasks, such as unsupervised machine trans-
lation (Lample et al., 2018a; Artetxe et al., 2018)
and caption generation (Xu et al., 2015).

Acknowledgments

We would like to thank Ryan McDonald for help-
ful discussions and feedback. This work has been
partially supported by computational time granted
from the Greek Research & Technology Network
(GR-NET) in the National HPC facility - ARIS.
We thank NVIDIA for donating a TitanX GPU.

References

Mikel Artetxe, Gorka Labaka, Eneko Agirre, and
Kyunghyun Cho. 2018. Unsupervised neural ma-
In Proceedings of the Annual
chine translation.
Meeting of International Conference on Learning
Representations.

Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin-

ton. 2016. Layer normalization.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
In Proceedings of
learning to align and translate.
the International Conference on Learning Represen-
tations, San Diego, California.

Yoshua Bengio, Nicholas L´eonard,

and Aaron
Courville. 2013. Estimating or propagating gradi-
ents through stochastic neurons for conditional com-
putation. arXiv preprint arXiv:1308.3432.

Samuel R. Bowman, Luke Vilnis, Oriol Vinyals, An-
drew Dai, Rafal Jozefowicz, and Samy Bengio.
2016. Generating sentences from a continuous
space. In Proceedings of the SIGNLL Conference on
Computational Natural Language Learning, pages
10–21, Berlin, Germany. Association for Computa-
tional Linguistics.

Sumit Chopra, Michael Auli, and Alexander M. Rush.
2016. Abstractive sentence summarization with at-
In Proceedings
tentive recurrent neural networks.
of the Conference of the NAACL:HLT, pages 93–98,
San Diego, California.

G¨unes Erkan and Dragomir R. Radev. 2004. Lexrank:
Graph-based lexical centrality as salience in text
Journal of Artiﬁcial Intelligence
summarization.
Research, 22:457–479.

Angela Fan, David Grangier, and Michael Auli. 2018.
In Pro-
Controllable abstractive summarization.
ceedings of the Workshop on Neural Machine Trans-
lation and Generation, pages 45–54, Melbourne,
Australia.

Thibault Fevry and Jason Phang. 2018. Unsuper-
vised sentence compression using denoising auto-
In Proceedings of the Conference on
encoders.
Computational Natural Language Learning, pages
413–422, Brussels, Belgium.

Caglar Gulcehre, Sarath Chandar, and Yoshua Ben-
Memory augmented neural net-
gio. 2017.
works with wormhole connections. arXiv preprint
arXiv:1701.08718.

C¸ aglar G¨ulc¸ehre, Orhan Firat, Kelvin Xu, Kyunghyun
Cho, Lo¨ıc Barrault, Huei-Chi Lin, Fethi Bougares,
Holger Schwenk, and Yoshua Bengio. 2015. On us-
ing monolingual corpora in neural machine transla-
tion. arXiv preprint arXiv:1503.03535.

Serhii Havrylov and Ivan Titov. 2017. Emergence of
language with multi-agent games: Learning to com-
municate with sequences of symbols. In I. Guyon,
U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus,
S. Vishwanathan, and R. Garnett, editors, Proceed-
ings of the Advances in Neural Information Process-
ing Systems, pages 2149–2159.

Sepp Hochreiter and Jrgen Schmidhuber. 1997.
Long short-term memory. Neural Computation,
9(8):1735–1780.

Hakan Inan, Khashayar Khosravi, and Richard Socher.
2017. Tying word vectors and word classiﬁers:
A loss framework for language modeling. CoRR,
abs/1611.01462.

Eric Jang, Shixiang Gu, and Ben Poole. 2017. Cate-
gorical reparametrization with gumble-softmax. In
Proceedings of
the International Conference on
Learning Representations, Toulon, France.

Yuta Kikuchi, Graham Neubig, Ryohei Sasano, Hiroya
Takamura, and Manabu Okumura. 2016. Control-
ling output length in neural encoder-decoders.
In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing, pages 1328–
1338, Austin, Texas.

Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
method for stochastic optimization. In Proceedings
of the International Conference on Learning Repre-
sentations.

Diederik P. Kingma and Max Welling. 2014. Auto-
In Proceedings of the
encoding variational bayes.
International Conference on Learning Representa-
tions, Banff, AB, Canada.

Philipp Koehn and Rebecca Knowles. 2017.
challenges for neural machine translation.
preprint arXiv:1706.03872.

Six
arXiv

Kartik Goyal, Chris Dyer,

and Taylor Berg-
Kirkpatrick. 2017.
Differentiable scheduled
sampling for credit assignment. In Proceedings of
the Annual Meeting of the ACL, pages 366–371,
Vancouver, Canada.

Guillaume Lample, Alexis Conneau, Ludovic Denoyer,
Herv´e J´egou, et al. 2018a. Word translation without
In Proceedings of the International
parallel data.
Conference on Learning Representations, Vancou-
ver, Canada.

Jiatao Gu, Daniel Jiwoong Im, and Victor O. K. Li.
2018. Neural machine translation with gumbel-
the AAAI
greedy decoding.
Conference on Artiﬁcial Intelligence, New Orleans,
Louisiana, USA, February 2-7, 2018, pages 5125–
5132.

In Proceedings of

Guillaume Lample, Alexis Conneau, Ludovic De-
noyer, and Marc’Aurelio Ranzato. 2018b. Unsu-
pervised machine translation using monolingual cor-
pora only. In Proceedings of the International Con-
ference on Learning Representations, Vancouver,
Canada.

Chin-Yew Lin. 2004. Rouge: A package for auto-
matic evaluation of summaries. Text Summarization
Branches Out.

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
In Proceedings of the
neural machine translation.
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1412–1421, Lisbon, Portu-
gal.

Chris J. Maddison, Andriy Mnih, and Yee Whye Teh.
2017. The concrete distribution: A continuous re-
laxation of discrete random variables. In Proceed-
ings of the International Conference on Learning
Representations, Toulon, France.

Jonathan Mallinson, Rico Sennrich, and Mirella Lap-
ata. 2018. Sentence compression for arbitrary lan-
In Proceedings
guages via multilingual pivoting.
of the Conference on Empirical Methods in Natural
Language Processing, pages 2453–2464, Brussels,
Belgium.

Yishu Miao and Phil Blunsom. 2016. Language as
a Latent Variable: Discrete Generative Models for
Sentence Compression. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing, pages 319–328, Austin, Texas.

Ramesh Nallapati, Bowen Zhou, Cicero dos Santos,
Caglar Gulcehre, and Bing Xiang. 2016. Abstrac-
tive text summarization using sequence-to-sequence
In Proceedings of the Confer-
rnns and beyond.
ence on Computational Natural Language Learning,
pages 280–290, Berlin, Germany.

Paul Over, Hoa Dang, and Donna Harman. 2007. Duc
Information Processing and Manage-

in context.
ment, 43(6):1506–1520.

Adam Paszke, Sam Gross, Soumith Chintala, Gre-
gory Chanan, Edward Yang, Zachary DeVito, Zem-
ing Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
In Proceedings of the Con-
word representation.
ference on Empirical Methods in Natural Language
Processing, pages 1532–1543, Doha, Qatar.

Oﬁr Press and Lior Wolf. 2017. Using the output
In Pro-
embedding to improve language models.
ceedings of the Conference of the European Chap-
ter of the Association for Computational Linguis-
tics, pages 157–163, Valencia, Spain. Association
for Computational Linguistics.

Juan Ramos et al. 2003. Using tf-idf to determine word
In Proceedings of
relevance in document queries.
the 1st International Conference on Machine Learn-
ing, volume 242, pages 133–142.

Alexander M. Rush, Sumit Chopra, and Jason Weston.
2015. A neural attention model for abstractive sen-
In Proceedings of the Con-
tence summarization.
ference on Empirical Methods in Natural Language
Processing, pages 379–389, Lisbon, Portugal.

Abigail See, Peter J. Liu, and Christopher D. Manning.
2017. Get to the point: Summarization with pointer-
In Proceedings of the Annual
generator networks.
Meeting of the ACL, pages 1073–1083, Vancouver,
Canada.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2016. Improving neural machine translation models
In Proceedings of the An-
with monolingual data.
nual Meeting of the ACL, pages 86–96, Berlin, Ger-
many.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
In Proceedings of the Advances in Neural
works.
Information Processing Systems, pages 3104–3112.

Oriol Vinyals, Ł ukasz Kaiser, Terry Koo, Slav Petrov,
Ilya Sutskever, and Geoffrey Hinton. 2015. Gram-
mar as a foreign language. In Proceedings of the Ad-
vances in Neural Information Processing Systems,
pages 2773–2781.

Yaushian Wang and Hung-yi Lee. 2018. Learning
to encode text as human-readable summaries using
generative adversarial networks. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing, pages 4187–4195, Brussels,
Belgium.

Kristian Woodsend, Yansong Feng, and Mirella Lap-
ata. 2010. Title generation with quasi-synchronous
grammar. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing,
pages 513–523, Cambridge, MA.

Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho,
Aaron Courville, Ruslan Salakhudinov, Rich Zemel,
and Yoshua Bengio. 2015. Show, attend and tell:
Neural image caption generation with visual atten-
In Proceedings of the International Confer-
tion.
ence on Machine Learning, volume 37, pages 2048–
2057, Lille, France. PMLR.

David Zajic, Bonnie J. Dorr, Jimmy Lin, and Richard
Schwartz. 2007. Multi-candidate reduction: Sen-
tence compression as a tool for document summa-
rization tasks. Information Processing Management
Special Issue on Summarization, 43(6):1549–1570.

Qingyu Zhou, Nan Yang, Furu Wei, and Ming Zhou.
2017. Selective encoding for abstractive sentence
the Annual
summarization.
Meeting of the ACL, pages 1095–1104, Vancouver,
Canada.

In Proceedings of

A Appendix

A.1 Temperature for Gumbel-Softmax

Even though the value of the temperature (cid:28) does
not affect the forward pass, it greatly affects the
gradient computation and therefore the learning
process. Jang et al. (2017) propose to anneal (cid:28) dur-
ing training towards zero. Gulcehre et al. (2017)
propose to learn (cid:28) as a function of the compres-
sor’s decoder state hc
t , in order to reduce hyper-
parameter tuning:

(cid:28) (hc

t ) =

log(1 + exp(w

⊺
(cid:28) hc

t )) + 1

(8)

t ) 2
where w(cid:28) is a trainable parameter and (cid:28) (hc
(0; 1). Havrylov and Titov (2017) add (cid:28)0 as a
hyper-parameter which controls the upper bound
of the temperature.

1

1

(cid:28) (hc

t ) =

log(1 + exp(w

⊺
(cid:28) hc

t )) + (cid:28)0

(9)

(cid:28)0 = 0:5
(cid:28)0 = 1
(cid:28)0 = 2

1:5

2

1

0:5

(cid:0)8 (cid:0)6 (cid:0)4 (cid:0)2

2

4

6

8

Figure 4: Plot of Eq. 9, with different values for the
upper bound (cid:28)0.

In our experiments, we had convergence prob-
lems with the learned temperature technique. We
found that the compressor preferred values close
to the upper bound, which led to unstable training,
forcing us to set (cid:28)0 > 1 to stabilize the training
process. Our ﬁndings align with the behavior re-
ported by Gu et al. (2018). Consequently, we fol-
low their choice and ﬁx (cid:28) = 0:5, which worked
well in practice.

A.2 Out of Vocabulary (OOV) Words

The vocabulary of our experiments comprises the
15k most frequent words of Gigaword’s training

input texts (without looking at their summaries).
To handle OOVs, we adopt the approach of Fevry
and Phang (2018), which can be thought of as
a simpler form of copying compared to pointer
networks (See et al., 2017). We use a small
set (10 in our experiments) of special OOV to-
kens OOV1, OOV2, . . . , OOV10, whose embeddings
are updated during learning. Given an input text
x = ⟨x1; : : : ; xN ⟩, we replace (before feeding x
to SEQ3) each unknown word xi with the ﬁrst un-
used (for the particular x) OOV token, taking care
to use the same OOV token for all the occurrences
of the same unknown word in x. For example, if
‘John’ and ‘Rome’ are not in the vocabulary, then
“John arrived in Rome yesterday. While in Rome,
John had fun.” becomes “OOV1 arrived in OOV2
yesterday. While in OOV2, OOV1 had fun.” If
a new unknown word xi is encountered in x and
all the available OOV tokens have been used, xi
is replaced by ‘UNK’, whose embedding is also
updated during learning. The OOV tokens (and
‘UNK’) are included in the vocabulary, and SEQ3
learns to predict them as summary words, in effect
copying the corresponding unknown words of x.
At test time, we replace the OOV tokens with the
corresponding unknown words.

A.3 Reconstruction Word Drop

Our model is an instance of Variational Auto-
Encoders (VAE) (Kingma and Welling, 2014). A
common problem in VAEs is that the reconstructor
tends to disregard the latent variable. We weaken
the reconstructor R, in order to force it to fully
utilize the latent sequence y to generate ^x. To this
end, we employ word dropout as in Bowman et al.
(2016) and randomly drop a percentage of the in-
put words, thus forcing R to rely solely on y to
make good reconstructions.

A.4 Implementation and Hyper-parameters
We implemented SEQ3 in PyTorch (Paszke et al.,
2017). All the RNNs are LSTMs (Hochreiter and
Schmidhuber, 1997). We use a shared encoder
for the compressor and the reconstructor, consist-
ing of a two-layer bidirectional LSTM with size
300 per direction. We use separate decoders for
the compressor and the reconstructor; each de-
coder is a two-layer unidirectional LSTM with size
300. The (shared) embedding layer of the com-
pressor and the reconstructor is initialized with
100-dimensional GloVe embeddings (Pennington
et al., 2014) and is tied with the output (projec-

tion) layers of the decoders and jointly ﬁnetuned
during training. We apply layer normalization (Ba
et al., 2016) to the context vectors (Eq. 1) of the
compressor and the reconstructor. We apply word
dropout (xA.3) to the reconstructor with p = 0:5.
During training, the summary length M is sam-
pled from U (0:4 N; 0:6 N); during testing, M =
0:5 N. The four losses are summed, (cid:21)s being scalar
hyper-parameters.

L = (cid:21)R LR + (cid:21)P LP + (cid:21)T LT + (cid:21)LLL

We set (cid:21)R = (cid:21)T = 1, (cid:21)L = (cid:21)P = 0:1. We use
the Adam (Kingma and Ba, 2015) optimizer, with
batch size 128 and the default learning rate 0:001.
The network is trained for 5 epochs.
LM Prior The pretrained language model is a
two-layer LSTM of size 1024 per layer. It uses its
own embedding layer of size 256, which is ran-
domly initialized and updated when training the
language model. We apply dropout with p = 0:2
to the embedding layer and dropout with p = 0:5
to the LSTM layers. We use Adam (Kingma and
Ba, 2015) with batch size 128 and the network is
trained for 30 epochs. The learning rate is set ini-
tially to 0:001 and is multiplied with (cid:13) = 0:5 every
10 epochs.
Evaluation Following Chopra et al. (2016), we ﬁl-
ter out pairs with empty headlines from the test set.
We employ the PYROUGE package with “-m -n 2
-w 1.2” to compute ROUGE scores. We use the
provided tokenizations of the Gigaword and DUC-
2003, DUC-2004 datasets. All hyper-parameters
were tuned on the development set.

