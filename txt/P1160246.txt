Perspective-Guided Convolution Networks for Crowd Counting

Zhaoyi Yan1†, Yuchen Yuan2, Wangmeng Zuo1,3∗, Xiao Tan2, Yezhen Wang1, Shilei Wen2, Errui Ding2
1Harbin Institute of Technology, 2Department of Computer Vision Technology (VIS), Baidu Inc., 3Peng Cheng Laboratory, Shenzhen
yanzhaoyi@outlook.com, wmzuo@hit.edu.cn

{tanxchong, yezhen.wang0305}@gmail.com
{yuanyuchen02, wenshilei, dingerrui}@baidu.com

9
1
0
2
 
p
e
S
 
6
1
 
 
]

V
C
.
s
c
[
 
 
1
v
6
6
9
6
0
.
9
0
9
1
:
v
i
X
r
a

Abstract

In this paper, we propose a novel perspective-guided
convolution (PGC) for convolutional neural network (CNN)
based crowd counting (i.e. PGCNet), which aims to over-
come the dramatic intra-scene scale variations of people
due to the perspective effect. While most state-of-the-arts
adopt multi-scale or multi-column architectures to address
such issue, they generally fail in modeling continuous scale
variations since only discrete representative scales are con-
sidered. PGCNet, on the other hand, utilizes perspective
information to guide the spatially variant smoothing of fea-
ture maps before feeding them to the successive convolu-
tions. An effective perspective estimation branch is also in-
troduced to PGCNet, which can be trained in either super-
vised setting or weakly-supervised setting when the branch
has been pre-trained. Our PGCNet is single-column with
moderate increase in computation, and extensive experi-
mental results on four benchmark datasets show the im-
provements of our method against the state-of-the-arts. Ad-
ditionally, we also introduce Crowd Surveillance, a large
scale dataset for crowd counting that contains 13,000+
high-resolution images with challenging scenarios.

1. Introduction

The growth of global population and urbanization has
been consistently promoting the frequency of crowd gather-
ing. In such scenarios, stampedes and crushes can be life
threatening and should always be prevented. Congested
scene analysis and understanding is thus essential to the
management, control, and security guarding of crowd gath-
ering in cities. Among the developments in congested scene
analysis, crowd counting [28, 10] is one of the fundamental
tasks, and recently has drawn considerable attention from
the computer vision community.

†This work was done when Zhaoyi Yan was a research intern at Baidu
∗Corresponding author

Figure 1: Density map estimations by CSRNet [11] and our PGC-
Net. The MAE of our PGCNet is 2.8, much lower than that of
CSRNet (7.7). It is observed that PGCNet has consistent better
performances at either smaller or larger scales among the marked
regions.

Single image based crowd counting remains an active but
challenging topic due to the complex distribution of people,
non-uniform illumination, inter- and intra-scene scale vari-
ations, cluttering and occlusions, etc. Existing crowd count-
ing methods can be broadly classiﬁed into three categories,
i.e. detection-based [22, 14], regression-based [7, 27], and
CNN-based methods [11, 15]. Among them, CNN-based
methods have been studied in depth in the past few years,
and have achieved superior performances in terms of accu-
racy and robustness.

However, the dramatic intra-scene scale variations of
people due to the perspective effect forms a major chal-
lenge. Existing methods [6, 19, 23, 26, 29, 30] usually
adopt multi-scale or multi-column architectures to fuse the
features of different scales. Yet, they suffer from several
limitations. Firstly, the multi-column architectures (e.g.

MCNN [30]) are ineffective to train. As shown in [11],
MCNN cannot even compete with a deeper CNN due to
the high correlation of the features learned by different
columns. Secondly, they only consider discrete scales,
which is limited when addressing continuous scale varia-
tions in practical scenarios. Thirdly, the computational cost
increases linearly with the growth of columns or scales.

In [11], a deeper CNN (CSRNet) with dilated convolu-
tions has achieved state-of-the-art performance. Neverthe-
less, it still delivers ﬁxed receptive ﬁeld for different scales
of people, thereby remaining vulnerable to the highly vari-
ant intra-scene scales. It is seen in Fig. 1(c) that CSRNet
performs well at intermediate scales, but behaves relatively
poor at smaller or larger scales. We thus take a step for-
ward to propose the perspective-guided convolutional net-
work (PGCNet), which is a single-column CNN that aims
to tackle the continuous scale variation issue with perspec-
tive information considered.

The perspective information encodes the distance be-
tween camera and a scene, which serves as a reasonable
scale estimation of people. We thus adopt it to allocate
spatially variant receptive ﬁelds, thereby conducting scale
adaptive density map estimation. To this end, we propose
a novel perspective-guided convolution (PGC), in which
the perspective information functions to guide the spatially
variant smoothing of feature maps before taking them to
the successive convolutions. As a result, larger (or smaller)
Gaussian kernels for feature smoothing are adopted for peo-
ple at larger (or smaller) scales. After such spatially variant
feature smoothing, the conventional spatially invariant con-
volution is appended, which forms a PGC block. It is worth
noting that PGC serves as an insertable module to existing
architectures, and our PGCNet is formulated by stacking
multiple PGC blocks upon a CNN backbone.

However, off-the-rack perspective annotations are sel-
dom available for existing datasets. We hence introduce
a perspective estimation branch to PGCNet, which can be
learned either in supervised or weakly-supervised setting
when the branch has been pre-trained.

Experimental results on benchmark datasets against the
state-of-the-arts show the favorable performance of our pro-
posed PGCNet in handling intra-scene scale variations. In
addition, we also introduce Crowd Surveillance, a large
scale dataset for crowd counting that contains 10,000+ high-
resolution images with complicated backgrounds and varied
crowd counts. This dataset will be released as a new bench-
mark to facilitate crowd counting researches. To sum up,
the main contribution of this work includes:

(1) The PGC, as an insertable module, is proposed to

handle the intra-scene scale variations of crowd counting;

(2) A perspective estimation branch is introduced, which

can be trained with or without perspective annotations;

(3) An end-to-end trainable PGCNet is formulated with

(1) and (2);

(4) A new large scale dataset is introduced;
(5) State-of-the-art performance is achieved by PGC-
Net on four benchmark datasets, e.g. 57.0 MAE on Shang-
haiTech Part A and 8.8 MAE on ShanghaiTech Part B.

2. Related Work

Crowd counting methods can be roughly categorized into
i.e. detection-based, regression-based and
three subsets,
CNN-based methods. In this paper, we only review CNN-
based methods, which are the most related to our method.
Besides, the exploration on perspective normalization in
crowd counting is also surveyed.

2.1. CNN-based Methods

Beneﬁted from the great success of CNN, many CNN-
based works of crowd counting have been proposed in re-
cent years. These methods usually focus on typical tech-
niques, including multi-scale [30, 23, 26, 16, 17, 24], con-
text [26], multi-task [29, 6, 15], and others [12, 13, 21]. Re-
cently, more methods have been proposed for handling the
scale variation issue. For instance, Zhang et al. [30] suggest
a multi-column architecture (MCNN) that combines fea-
tures with different sizes of receptive ﬁelds. In Switching-
CNN [23], one of the three regressors is assigned for an
input image in refer to its speciﬁc crowd density. CP-
CNN [26] incorporates MCNN with local and global con-
texts. SANet [2] employs scale aggregation modules for
multi-scale representation. And instead of multi-column ar-
chitecture, CSRNet [11] enlarges receptive ﬁelds by stack-
ing dilated convolutions.

Our proposed method differs from existing CNN-based
method in two aspects: ﬁrstly, our method is able to han-
dle continuous scale variations of each single pedestrian in
the image, instead of simply fusing the features of different
scales; secondly, the perspective information is taken into
account as a vital estimator of pedestrian scales.

2.2. Perspective Normalization

Perspective is originally adopted in the normalization of
extracted features from foreground objects in [3]. Later,
Lempitsky et al. [9] attempt to deal with perspective distor-
tion by optimizing the loss on the MESA-distance. Among
the CNN-based methods, the perspective information is
usually exploited as part of the pre-processing to generate
the density maps [29, 30, 23, 6], but is seldom directly en-
coded into the network architecture. One of the most rele-
vant work to our method is PACNN [17]. However, PACNN
is still based on the multi-column architecture with discrete
In PACNN, two density maps are estimated from
scales.
two columns based on VGG-16 [25] backbone. The two
predicted density maps are assigned weights generated by

the perspective map and later are combined together as the
ﬁnal estimation. However, we argue that a better choice
would be an explicit perspective normalization during the
training of the network itself, which is able to tackle the
continuous scale variation issue, as illustrated in Sec. 3.1.

3. Proposed Method

In this section, we ﬁrst describe the principles of PGC,
then introduce a perspective estimation branch for perspec-
tive map estimation, and ﬁnally provide the network archi-
tecture and learning objective of the complete PGCNet.

3.1. Perspective-Guided Convolution

To handle the intra-scene scale variations mentioned in
Sec. 1, it is desirable to use a larger (or smaller) receptive
ﬁeld for people at larger (or smaller) scales. Let x and p be
the feature map and perspective map of an image, respec-
tively. Without loss of generality, p is downsampled to the
same size h × w with x. A straightforward way is to apply
spatially variant convolutions by assigning scale-aware ker-
nel sizes based on the corresponding perspective values, i.e.
kernels with different sizes may be used at different loca-
tions of a feature map. However, several drawbacks hinder
such solution: (1) the discrete kernel sizes might be incom-
patible with the continuous perspective values, (2) arbitrary
spatially variant convolution is hard to implement and op-
timize, and (3) additional constraints are required to effec-
tively enforce the consistency among different scales [24].
To address the issues above, we propose perspective-
guided convolution (PGC), which functions in a two-stage
scheme: spatially variant Gaussian ﬁltering (which smooths
the feature maps in a spatially variant way) and spatially in-
variant convolution (i.e. the conventional convolution). To
begin with, the perspective map p is normalized as,

(cid:101)p = ζ (p) =

1
1 + e−α(p−β)

(1)

where ζ (x) is a sigmoid-like function, and α and β are two
parameters learned during training. We then deﬁne the blur
map as,

σ = max(a((cid:101)p − p0), 0),
where a and p0 are another two trainable parameters. Thus,
in the spatially variant Gaussian ﬁltering, the smoothing re-
sult (cid:101)xi,j at (i, j) can be obtained by

(2)

(cid:101)xi,j =

(cid:88)

(cid:88)

k

l

xk,lGσi,j (i, j, k, l),

(3)

The perspective-guided convolution can then be deﬁned as,

y = WT

(cid:101)x,

(5)

where W denotes the spatially invariant convolution kernel.
However, Eqn. (3) is computationally heavy. We thus
present an efﬁcient version for approximation. First, we
sample N candidate Gaussian ﬁlters with size K × K and
standard deviation in the pre-deﬁned range [c, d]. After that,
principal component analysis (PCA) is performed on the
candidates to obtain the eigenvectors {Gq}C
q=1 correspond-
ing to the C non-zero eigenvalues. For each Gq, we deﬁne
the coefﬁcient map uq with its (i, j)-th element as,

uq(i, j) = (cid:104)Gq, Gσi,j (cid:105),

where (cid:104)·, ·(cid:105) denotes the inner product. With uq, spatially
variant Gaussian smoothing can then be approximated as,

(6)

(7)

(cid:101)x =

C
(cid:88)

q=1

uq ◦ (x ∗ Gq),

where ◦ denotes entry-wise product, and ∗ is convolution
operation. Due to the fact that Gaussian ﬁlter is isotropic,
C is generally smaller than (K + 1)/2. When N is large,
Eqn. (7) is guaranteed to be a good and efﬁcient approxima-
tion. The efﬁciency is given more descriptions here. Take
the feature of size C × H × W as an example, Eqn. (3) has
to perform pixel-wise matrix multiplication (MM) for each
xk,l. In comparison, Eqn. (6) only need C × i times MM,
by the observation that Gσi,j shares the same value for each
j. Finally, Eqn. (7) only takes about 1/10 the time com-
pared to Eqn. (6), making the acceleration up to ∼20 times
for most cases. For the degree of approximation, it is mea-
sured by the energy preserved. Please refer to Section. 5.1
for more details.

There are a few notes about PGC that are worthwhile
to mention. With the spatially variant Gaussian smoothing,
PGC can adaptively employ a larger (or smaller) receptive
ﬁeld for people at larger (or smaller) scale, which handles
the continuous intra-scene scale variations ﬂexibly. On the
other hand, to effectively enforce the consistency for han-
dling different scales, the conventional spatially invariant
convolution is appended in the second stage of PGC, as in-
dicated in Eqn. (5). Furthermore, it is seen from Eqns. (5)
and (7) that the complete set of parameters of PGC can be
trained end-to-end.

3.2. Perspective Estimation

where Gσi,j (i, j, k, l) is a Gaussian kernel with standard de-
viation σi,j centered at (i, j),

Gσi,j (i, j, k, l) =

√

1
2πσi,j

(cid:32)

exp

−

(cid:0)(k−i)2 +(l−j)2(cid:1)
2σ2
i,j

(cid:33)

. (4)

Since perspective map annotations are seldom available,
we introduce a perspective estimation branch to learn the
perspective map of an image. Ideally, with the annotated
density map for crowd counting alone, the entire model (in-
cluding the perspective estimation branch) can be trained

Figure 2: The architecture of the proposed PGCNet. The DMPNet takes the backbone features and the estimated perspective map from
PENet to generate the ﬁnal density map estimation.

end-to-end. However, such strategy ignores the internal
structure of the perspective map and may result in very poor
results. Motivated by [18], we suggest a three-phase proce-
dure to train an auto-encoder.

In

use

the ﬁrst

p ); ΘD

phase, we

perspective maps
to train an auto-encoder
from WorldExpo’10 [29]
Dp(Ep(p; ΘE
p ), which takes a perspective map
p as input and reconstructs it. ΘE
p denote
the model parameters of the encoder Ep and decoder
Dp, respectively. The objective is to minimize the (cid:96)2
reconstruction loss,

p and ΘD

Lp2p =

(cid:107)Dp(Ep(pi; ΘE

p ); ΘD

p ) − pi(cid:107)2
2,

(8)

1
2N

N
(cid:88)

i=1

where N denotes the number of perspective maps. After
training, the latent code Ep(p; ΘE
p ) can encode the internal
structure and contextual relationships of p, while the de-
coder Dp can accurately and robustly recover a high quality
perspective map from the latent code.

In the second phase, we use the image and perspective
map pairs in WorldExpo’10 to learn another auto-encoder
Dp(EI (I; ΘE
p ), which takes an image I as input to
predict its perspective map. Here, we adopt the decoder pa-
rameters ΘD
p from the ﬁrst phase, and only train the encoder
parameters ΘE

I by minimizing the following loss,

I ); ΘD

LI2p =

(cid:107)Dp(EI (Ii; ΘE

I ); ΘD

p ) − pi(cid:107)2
2.

(9)

1
2N

N
(cid:88)

i=1

In the third phase, we further train the encoder with an-
other training set. The encoder is ﬁne-tuned with the loss
of the density map if perspective maps are unavailable, and
can be optimized by both LI2p and density map loss if per-
spective maps are available. Beneﬁted from the robustness
of the decoder, even if the encoder is not well trained, the
decoder can still recover a reasonable perspective map.

Based on the description above, for a new set of training
data, our perspective estimation branch can be trained even
without corresponding perspective annotations.

3.3. Network Architecture

Fig. 2 illustrates the architecture of our PGCNet, which
is comprised of three subnetworks, i.e. backbone, perspec-
tive estimation network (PENet), and density map predic-
tor network (DMPNet). We adopt CSRNet [11] as our
backbone, where the last convolution (i.e. conv1-1-1) is re-
moved. The PENet uses the encoder-decoder structure in
Sec. 3.2, which will be described in detail in supplemen-
tary material. As for the DMPNet, in each PGC module,
a dilated convolution with factor of 2 is exploited after the
spatially variant Gaussian smoothing. The PGC block is
then constructed by concatenating the features before / after
the PGC module. Finally, the outputs from the backbone
and PENet are fed to the DMPNet, which stacks ﬁve PGC
blocks for density map estimation.

4. The Crowd Surveillance Dataset

Limited by the annotation difﬁculty, most public datasets
for crowd counting are of relatively small size (as shown in
Table 1). Although larger datasets (i.e. WorldExpo’10 [29])
have been proposed, they are nevertheless of low resolution
and image quality. We hence introduce the Crowd Surveil-
lance dataset∗, which contains 13,945 high-resolution im-
ages (386,513 marked people). This means that Crowd
Surveillance is nearly 3× larger than the combination of
all the other four datasets in Table 1, leading to the largest
dataset with the highest average resolution for crowd count-
ing at present. Besides, we also provide regions of interest
(ROI) annotation for each image to mask out the regions
that are too blurry or ambiguous for training / testing.

We build our dataset by both online crawling with search
engines and real-life surveillance video acquisition from

∗https://ai.baidu.com/broad/subordinate?dataset=crowd surv

Dataset

#Train

#Test Avg. Density Avg. Resolution

ShanghaiTech A
ShanghaiTech B
WorldExpo’10
UCF CC 50
Crowd Surveillance

300
400
3, 380
-
10,880

182
316
600
50
3,065

500
123
56
1,279
35

868×589
1,024×768
720×576
902×653
1,342×840

Table 1: Statistics of different crowd counting datasets.

Figure 3: Statistical histogram of crowd counts on different
datasets. It is seen that our dataset exhibits high data volume and
crowd count variance.

Figure 4: Qualitative comparison of crowd counting datasets. Our
dataset is seen to have more challenging scenarios and higher res-
olutions than existing datasets.

cooperative partners with necessary permissions. Fig. 3
provides the statistical histogram of crowd count on dif-
ferent datasets, among which Crowd Surveillance exhibits
remarkable high data volume and crowd count variances.
Fig. 4 shows the qualitative comparison between our dataset
and two most relevant benchmarks, ShanghaiTech Part
A [30] and WorldExpo’10 [29]. From Fig. 4 and Table 1,
it is seen that although our dataset is less crowded in av-
erage density, it provides the highest average resolution
(which ensures the image quality), and covers more chal-
lenging scenarios with complicated backgrounds and vary-
ing crowd count, which signiﬁcantly increases the difﬁculty
of crowd density estimation. It is also worth noting that al-
though datasets with extremely high crowd densities (such
as UCF-QNRF [8]) have been proposed, they are less suit-
able for real-world surveillance scenarios, which usually
have moderate-to-low crowd density. Our dataset, on the

other hand, ﬁts these practical applications well.
5. Experimental Results

In this section, we ﬁrst present our implementation de-
tails, and then compare the proposed PGCNet with the
state-of-the-arts on four public datasets, namely Shang-
haiTech [30], WorldExpo’10 [29], UCF CC 50 [7] and our
proposed Crowd Surveillance. Extensive ablation study is
then conducted to reveal the contribution of each compo-
nent in PGCNet. We adopt mean absolute error (MAE) and
mean square error (MSE) as metrics for evaluating crowd
counting and perspective estimation.

5.1. Implementation Details

Denote by Θ the model parameters of the full PGCNet
Φ(I; Θ). Given the training data {(Ii, Yi)}, the network can
be trained by minimizing the following objective function,

L (Θ) =

(cid:107)Φ(I; Θ) − Yi(cid:107)2
2,

(10)

1
2N

N
(cid:88)

i=1

where Yi is the ground-truth density map of Ii. If perspec-
tive map annotations are also available, we can further in-
corporate LI2p in Eqn. (9) for better training of the PENet.
To train PGCNet, we adopt stochastic gradient descent
(SGD) with ﬁxed learning rate 10−7 and weight decay
5 × 10−4. The momentum is set to 0.95 and the batch size
is set to 1. PGCNet takes a whole image as input during
both training and testing. Suppose there is a dot annotation
of people head at location (xi, yi) represented by a delta
function δ(x − xi)δ(y − yi), the ground-truth density map
Y is obtained by convolving each annotation point with a
normalized Gaussian kernel Gσ: Y = (cid:80)S
i δ(x − xi)δ(y −
yi) ∗ Gσ, where S is the total number of dot annotations in
the image, and σ is set to ﬁxed value 0.5.

To establish the baseline, we reimplement CSRNet [11]
on Pytorch [20] (denoted as CSRNet*) with the four
datasets adopted, which is expected to deliver comparable
performances against [11]. The weights of the PGC mod-
ules are initialized with Gaussian distribution of zero mean
and 0.01 standard deviation, while the other layers are ini-
tialized with the corresponding pre-trained weights from
CSRNet*. Random ﬂipping is adopted for data augmen-
tation. For ShanghaiTech and WorldExpo’10, since their
ground-truth perspective maps are available, they are used
as the guidance of PGC directly, and our model is trained for
300 epochs without PENet. For the datasets without per-
spective annotations, the PENet is pre-trained for the ﬁrst
two phases of Sec. 3.2, both 500 epochs; the backbone,
PENet and DMPNet are then trained together for another
300 epochs, as the third phase of Sec. 3.2.

The range of σ we sample is [1/4, K/4] with P {(cid:107)X −
µ(cid:107) < 2σ} ≈ 0.95. We pre-deﬁne a group of Gaussian can-
didates Gσ of size K × K with σ ranging in [1/4, K/4] on

the step s. K is set to 7 by default, unless explicitly stated;
and s is set to 0.05 since no signiﬁcant gain is observed
with denser steps. The total number of Gaussian candidates
is N = 30 with σ sampling in [1/4, 7/4] on step s = 0.05.
PCA is then applied on Gσ to get the (K+1)/2 eigenvectors
Gq in Eqn. (6). In this case, the original matrix is 30×7×7,
which will be reshaped to 30×49 and applied PCA to get the
approximate matrix 4 × 49. The energy preserved is 99.9%,
which is the ratio between the sum of singular values of ap-
proximated matrix against those of the original matrix. α
and β are initialized by normalizing the p in Eqn. (1) to
(0, 1), while p0 and a are empirically set to 0 and 1. All
the parameters above are differentiable and trainable. As
a tradeoff between efﬁciency and performance, our results
are achieved by stacking ﬁve PGC blocks for all datasets.
It takes about 2 days to train the network on WolrdExpo’10
with an NVIDIA Tesla P40 GPU.

5.2. Evaluations and Comparisons

Four datasets are adopted in our experiments, including
ShanghaiTech [30], WorldExpo’10 [29], UCF CC 50 [7]
and the proposed Crowd Surveillance. For the later two
that do not have perspective map annotations, we de-
note Ours A as directly adopting the estimated perspec-
tive maps (based on the PENet trained on perspective an-
notations from ShanghaiTech A) as ground-truth and feed
them to the training of PGC; while Ours B as the end-to-
end training without perspective map annotations described
in Sec. 3.2, where the backbone, PENet, and DMPNet are
jointly trained without any density map annotation. For the
estimated perspective maps of both Ours A and Ours B, we
use the mean of each line to replace the values of the whole
line, which forms the ﬁnal estimated perspective map. For
Ours A, by following Sec. 3.2 with ShanghaiTech A, we get
0.020 MAE and 0.031 MSE for the ﬁrst phase of perspec-
tive map estimation, and 0.101 MAE and 0.142 MSE for
the second phase. Visualization of perspective estimation
and more details of training of the PENet will be illustrated
in our supplementary materials.
ShanghaiTech contains 1,198 images with a total of
330,165 annotated people. The dataset is split into Part A
and Part B, with 482 and 716 images respectively.

We adopt the ground-truth perspective maps provided
by [17] as the guidance of DMPNet. The results are listed in
Table 2. It is seen that our method and SANet [2] dominate
the top ranks, where ours achieves the best result on Part
A w.r.t. both MAE and MSE with signiﬁcant margins, and
is only slightly surpassed by SANet on Part B. Our method
also exhibits signiﬁcant performance gain over the baseline
CSRNet*. Besides, some test cases can be found in Fig. 5,
clearly indicating that the superiority of PGCNet over CSR-
Net in estimating a better density map.
WorldExpo’10 contains 3,980 images from the 2010

Figure 5: Density maps estimated by CSRNet [11] and Ours.

Method

Zhang et al. [29]
MCNN [30]
Cascaded-MTL [1]
Switching-CNN [23]
CP-CNN [26]
PACNN [17]
DecideNet [12]
SANet [2]
CSRNet [11]
CSRNet*
Ours

Part A

Part B

MAE MSE MAE MSE
49.8
181.8
41.3
110.2
31.1
101.3
33.4
90.4
30.1
73.6
24.1
84.5
29.4
-
13.6
67.0
16.0
68.2
16.4
67.5
57.0
13.7

277.7
173.2
152.4
135.0
106.4
132.5
-
104.5
115.0
103.1
86.0

32.0
26.4
20.0
21.6
20.1
14.2
20.8
8.4
10.6
10.7
8.8

Table 2: Comparisons on ShanghaiTech dataset [30].

Shanghai WorldExpo. The training set contains 3,380 im-
ages, while the test set is divided into ﬁve different scenes
with 120 images each. ROIs are provided to indicate the
target regions for training / testing. Following [11], each
image and its ground-truth density map are masked with the
ROI in preprocessing. We use the ofﬁcial ground-truth per-
spective map to guide the processing of PGC. The results
are shown in Table 3, where our method achieves the best
8.1 average MAE against other methods.

Method
Zhang et al. [29]
MCNN [30]
Switching-CNN [23]
CP-CNN [26]
PACNN [17]
DecideNet [12]
SANet [2]
CSRNet [11]
CSRNet*
Ours

Sce.1
9.6
3.4
4.4
2.9
2.6
2.0
2.6
2.9
2.4
2.5

Sce.2
14.1
20.6
15.7
14.7
15.4
13.1
13.2
11.5
15.1
12.7

Sce.3
14.3
12.9
10.0
10.5
10.6
8.9
9.0
8.6
7.9
8.4

Sce.4
22.2
13.0
11.0
10.4
10.0
17.4
13.3
16.6
15.6
13.7

Sce.5 Avg.
12.9
3.7
11.6
8.1
9.4
5.9
8.9
5.8
8.7
4.8
9.2
4.8
8.2
3.0
8.6
3.4
8.7
2.7
8.1
3.2

Table 3: Comparisons on WorldExpo’10 [29] dataset.

UCF CC 50 contains 50 images of diverse scenes. The
head count per image varies drastically (from 94 to 4,543).
Following [7], we split the dataset into ﬁve subsets and per-
form a 5-fold cross-validation. Since the perspective map

annotation is unavailable, we conduct the two comparison
experiments Ours A and Ours B described at the beginning
of this section. The results are shown in Table 4, where
our method achieves the optimal performance with large
margins. Compared with the baseline CSRNet*, Ours A
achieves signiﬁcant gain on both MAE and MSE.

We further note that Ours B achieves 244.6 MAE, with
another 14.8 gain over Ours A, which shows the feasibility
of our end-to-end training strategy described in Sec. 3.2.

Method
Idrees et al. [7]
Zhang et al. [29]
MCNN [30]
Cascaded-MTL [1]
Switching-CNN [23]
CP-CNN [26]
PACNN [17]
SANet [2]
CSRNet [11]
CSRNet*
Ours A
Ours B

MAE MSE
541.6
419.5
498.5
467.0
509.1
377.6
341.4
322.8
439.2
318.1
320.9
295.8
411.7
304.9
334.9
258.4
397.5
266.1
398.1
264.0
317.6
259.4
244.6
361.2

Table 4: Comparisons on UCF CC 50 [7] dataset.

Crowd Surveillance is our newly proposed dataset with
10,880 and 3,065 images for training / testing, as illus-
trated in Sec. 4. Similar to WorldExpo’10, we also pro-
vide ROI annotations that are used in the preprocessing. Ta-
ble 5 demonstrates the comparisons of our method against
MCNN [30], Switching-CNN [23] and CSRNet [11], and
our method achieves the best results. Moreover, when we
directly adopt the perspective map estimated by the PENet
pre-trained on ShanghaiTech A (Ours A), we achieve 2.1
MAE gain over the baseline; and when we train the model
end-to-end (Ours B), another 0.5 MAE gain over Ours A
is achieved. We also provide visualization results of a test
example in Fig. 6. It is seen that even perspective annota-
tion is completely absent in Crowd Surveillance, the PENet
is still able to provide reasonable perspective estimations,
which supports its generalization ability. Such observations
further validates our end-to-end training strategy described
in Sec. 3.2.

Method
MCNN [30]
Switching-CNN [23]
CSRNet*
Ours A
Ours B

MAE MSE
49.9
23.8
33.2
16.9
21.6
9.8
16.4
7.7
15.6
7.2

Table 5: Comparisons on Crowd Surveillance.

Figure 6: Visualization of a test example from Crowd Surveil-
lance. (a) is the input; (b)(c) / (d)(f) are estimated perspective /
density maps of Ours A and Ours B; and (f) is the ground truth.

5.3. Ablation Study

The evaluations against

the state-of-the-arts above
demonstrate the superiority of our PGC block and the end-
to-end training strategy. We ﬁrst conduct the experiment
on choosing the appropriate value of K. Then we show
the inﬂuence of the number of PGC blocks stacked in our
network. Moreover, we demonstrate the feasibility of PGC
block being an insertable component for existing network
to improve performance. Finally, we also verify the impor-
tance of the pre-training of PENet in our method.

5.3.1

Inﬂuence of K

Table 6 lists the results of our method with a single
PGC block but different K, i.e. the Gaussian ﬁlter size of
Sec. 3.1. When K is small (e.g. ≤ 5), the PGC module is
computationally light (∼6ms for a 576 × 720 image, simi-
larly hereinafter) but has poor performance; when K grows
too large (e.g. ≥ 9), the performance starts to degrade with
heavier computational burden (∼16ms); when K = 7, it
performs optimally with affordable efﬁciency (∼10ms). We
therefore adopt K = 7 in our following experiments.

K
K = 1
K = 3
K = 5

K

MAE MSE
67.3
66.2
66.4

100.0 K = 7
K = 9
97.7
98.3 K = 11

MAE MSE
65.8
98.0
98.8
66.3
97.4
66.4

Table 6: Inﬂuence of K on a single PGC block on ShanghaiTech
Part A.

5.3.2

Inﬂuence of the Number of PGC Blocks

Table 7 shows the performance of our network when
stacking different numbers of PGC blocks, as Fig. 2 shows.
The performance increases with the number of PGC blocks

stack three PGC blocks (ResNet-101(PGC)), we obtain the
most performance gain of 19.9/7.6 MAE against ResNet-
101(backbone), reaching 89.7/18.6 MAE. Such observa-
tions validate the effectiveness and extensibility of the PGC
block on another backbone.

Method

ResNet-101(backbone)
ResNet-101(PGC)

Part A

Part B

MAE MSE MAE MSE
40.5
109.6
30.9
89.7

187.6
148.4

26.2
18.6

Table 8: Comparisons on the ResNet-101 backbone.

5.3.4

Importance of the pre-training of PENet

Although the end-to-end training strategy has been pro-
posed, we still note that the PENet requires fair pre-training
for accurate perspective estimation. To validate the neces-
sity, we conduct two experiments without pre-training of
PENet on UCF CC 50 [7] and Crowd Surveillance, and
compare the results in Table. 4 and Table. 5. As shown
in Table 9, the results with PENet pre-training signiﬁcantly
outperform those without pre-training. Such performance
margin is attributed to the confusing guidance of PENet on
the spatially variant Gaussian smoothing of Sec. 3.1, since
without pre-training, we observe that the output of PENet is
still messy even after considerable epochs of training.

Method

PENet(w/ pre-training)
PENet(w/o pre-training)

Crowd Surveillance

UCF CC 50
MAE MSE MAE
7.2
361.2
244.6
10.3
403.5
278.6

MSE
15.6
24.7

Table 9: The performances with / without pre-training of PENet
on UCF CC 50 [7] and Crowd Surveillance.

6. Conclusion

In this paper, we present a perspective-guided convolu-
tion network (PGCNet) for crowd counting. The key idea of
PGCNet is the perspective-guided convolution, which func-
tions as an insertable module that successfully handles the
continuous intra-scene scale variation issue. We also pro-
pose a perspective estimation branch as well as its learning
strategy, which is incorporated into our method to form an
end-to-end trainable network, even without perspective map
annotations. A new large scale dataset Crowd Surveillance
is introduced as well to promote the researches in crowd
counting. Experiments on four benchmark datasets show
the superiority of our PGCNet against the state-of-the-arts.

Acknowledgement

This work was partially supported by the National Natu-
ral Science Foundation of China under grant No. 61671182.

Figure 7: Density maps predicted by stacking of different number
of PGC blocks.

# of blocks

1
2
3
4
5
6

Part A

Part B

MAE MSE MAE MSE
15.8
65.8
15.4
64.5
14.9
60.9
14.4
58.5
13.7
57.0
14.2
58.3

98.0
96.6
95.2
89.5
86.0
90.2

9.8
9.6
9.2
9.1
8.8
9.0

Table 7: Inﬂuence of the number of stacked PGC blocks in our
method on ShanghaiTech.

stacked until reaching peak values (57.0 and 8.8 MAE on
Part A and Part B, respectively) with 5 blocks, and de-
grades afterwards. Fig. 7 demonstrates the predicted density
maps when stacking serveral PGC blocks. It is seen that
PGC gradually reﬁnes the density map till 5 PGC blocks.
Too many PGC blocks(e.g., 6) may lead to over-smoothing
of features, resulting in worse estimation of density maps.
We hence determine our ﬁnal network architecture with 5
PGC blocks stacked, resulting in 100ms total time cost per
576×720 image in testing.

5.3.3 Extensibility to Another Backbone

In order to verify the extensibility of our PGC block
to another backbone instead of VGG-16 [25] in CSRNet*,
we adopt a truncated ResNet-101 [5] with the ﬁrst 10
convolutional layers.
It then appends PGC blocks (three
in our experiment) and three extra convolutional layers
are added afterwards to reduce the channel dimension to
1, making it compatible with the density map. Table 8
shows the comparison results on ShanghaiTech Part A /
B, where ResNet-101(backbone) is the backbone itself, and
ResNet-101(PGC) appends three PGC blocks. All mod-
els are trained for 500 epochs with the ﬁrst 10 convo-
lutional layers initialized by pre-trained weights on Ima-
geNet [4]. For ResNet-101(backbone), we get 109.6/26.2
is seen that when we
MAE and 187.6/40.5 MSE. It

References

[1] Lokesh Boominathan, Srinivas SS Kruthiventi,

and
Crowdnet: A deep convolutional
R Venkatesh Babu.
In Proceedings of the
network for dense crowd counting.
2016 ACM on Multimedia Conference, pages 640–644.
ACM, 2016.

[2] Xinkun Cao, Zhipeng Wang, Yanyun Zhao, and Fei Su. Scale
aggregation network for accurate and efﬁcient crowd count-
In Proceedings of the European Conference on Com-
ing.
puter Vision (ECCV), pages 734–750, 2018.

[3] Antoni B Chan, Zhang-Sheng John Liang, and Nuno Vas-
concelos. Privacy preserving crowd monitoring: Counting
people without people models or tracking. In Computer Vi-
sion and Pattern Recognition, 2008. CVPR 2008. IEEE Con-
ference on, pages 1–7. IEEE, 2008.

[4] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei. Imagenet: A large-scale hierarchical image
database. In 2009 IEEE conference on computer vision and
pattern recognition, pages 248–255. Ieee, 2009.

[5] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 770–778, 2016.

[6] S. Huang, X. Li, Z. Zhang, F. Wu, S. Gao, R. Ji, and J. Han.
Body structure aware deep crowd counting. IEEE Transac-
tions on Image Processing, 27(3):1049–1059, March 2018.
[7] Haroon Idrees, Imran Saleemi, Cody Seibert, and Mubarak
Shah. Multi-source multi-scale counting in extremely dense
In Proceedings of the IEEE conference on
crowd images.
computer vision and pattern recognition, pages 2547–2554,
2013.

[8] Haroon Idrees, Muhmmad Tayyab, Kishan Athrey, Dong
Zhang, Somaya Al-Maadeed, Nasir Rajpoot, and Mubarak
Shah. Composition loss for counting, density map esti-
mation and localization in dense crowds. arXiv preprint
arXiv:1808.01050, 2018.

[9] Victor Lempitsky and Andrew Zisserman. Learning to count
objects in images. In Advances in neural information pro-
cessing systems, pages 1324–1332, 2010.

[10] Teng Li, Huan Chang, Meng Wang, Bingbing Ni, Richang
Hong, and Shuicheng Yan. Crowded scene analysis: A sur-
IEEE transactions on circuits and systems for video
vey.
technology, 25(3):367–386, 2015.

[11] Yuhong Li, Xiaofan Zhang, and Deming Chen. Csrnet: Di-
lated convolutional neural networks for understanding the
highly congested scenes. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
1091–1100, 2018.

[12] Jiang Liu, Chenqiang Gao, Deyu Meng, and Alexander G
Hauptmann. Decidenet: Counting varying density crowds
through attention guided detection and density estimation.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 5197–5206, 2018.

[14] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian
Szegedy, Scott Reed, Cheng-Yang Fu, and Alexander C
Berg. Ssd: Single shot multibox detector. In European con-
ference on computer vision, pages 21–37. Springer, 2016.

[15] Xialei Liu, Joost van de Weijer, and Andrew D Bagdanov.
Leveraging unlabeled data for crowd counting by learning to
rank. arXiv preprint arXiv:1803.03095, 2018.

[16] Miaojing Shi* Lu Zhang* and Qiaobo Chen. Crowd count-

ing via sacle-adaptive convolutional neural network.

[17] Chao Xu Miaojing Shi, Zhaohui Yang and Qijun Chen.

Perspective-aware cnn for crowd counting.

[18] Mohammadreza Mostajabi, Michael Maire, and Gregory
Shakhnarovich. Regularizing deep networks by modeling
In The IEEE Conference
and predicting label structure.
on Computer Vision and Pattern Recognition (CVPR), June
2018.

[19] Daniel Onoro-Rubio and Roberto J L´opez-Sastre. Towards
perspective-free object counting with deep learning. In Eu-
ropean Conference on Computer Vision, pages 615–629.
Springer, 2016.

[20] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NIPS-W, 2017.

[21] Viresh Ranjan, Hieu Le, and Minh Hoai.

Iterative crowd
In Proceedings of the European Conference on

counting.
Computer Vision (ECCV), pages 270–285, 2018.

[22] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In Advances in neural information pro-
cessing systems, pages 91–99, 2015.

[23] Deepak Babu Sam, Shiv Surya, and R Venkatesh Babu.
Switching convolutional neural network for crowd counting.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, volume 1, page 6, 2017.

[24] Zan Shen, Yi Xu, Bingbing Ni, Minsi Wang, Jianguo Hu, and
Xiaokang Yang. Crowd counting via adversarial cross-scale
consistency pursuit. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 5245–
5254, 2018.

[25] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014.

[26] Vishwanath A Sindagi and Vishal M Patel. Generating high-
quality crowd density maps using contextual pyramid cnns.
In 2017 IEEE International Conference on Computer Vision
(ICCV), pages 1879–1888. IEEE, 2017.

[27] Chuan Wang, Hua Zhang, Liang Yang, Si Liu, and Xiaochun
Cao. Deep people counting in extremely dense crowds. In
Proceedings of the 23rd ACM international conference on
Multimedia, pages 1299–1302. ACM, 2015.

[28] Beibei Zhan, Dorothy N Monekosso, Paolo Remagnino, Ser-
gio A Velastin, and Li-Qun Xu. Crowd analysis: a survey.
Machine Vision and Applications, 19(5-6):345–357, 2008.

[13] Lingbo Liu, Hongjun Wang, Guanbin Li, Wanli Ouyang, and
Liang Lin. Crowd counting using deep recurrent spatial-
aware network. arXiv preprint arXiv:1807.00601, 2018.

[29] Cong Zhang, Hongsheng Li, Xiaogang Wang, and Xiaokang
Yang. Cross-scene crowd counting via deep convolutional
neural networks. In Proceedings of the IEEE Conference on

Computer Vision and Pattern Recognition, pages 833–841,
2015.

[30] Yingying Zhang, Desen Zhou, Siqin Chen, Shenghua Gao,
and Yi Ma. Single-image crowd counting via multi-column
convolutional neural network. In Proceedings of the IEEE
conference on computer vision and pattern recognition,
pages 589–597, 2016.

Supplementary Material

The following items are included in the supplementary

materials:

• The architecture of PENet and the details of three train-

ing phases of PENet.

• The visualization of estimated perspective maps in

each phase of training PENet.

• Reliability of the prediction of PENet.

• More density maps predicted by the proposed PGC-

Net.

Details

A. The Architecture of PENet and the Training

We adopt Convolution-LeakyReLU as the basic pattern
of the encoder Ep, with each block scaling down the en-
coder feature by ratio 2. While the decoder enlarges the res-
olution of encoded feature by the combination of UpConv-
ReLU. Details of the architecture of PENet are demon-
strated in Table 11.

In the ﬁrst phase, PENet is trained to reconstruct the
input when given certain perspective map. As PGCNet
adopts CSRNet as the baseline, the resolution of perspec-
tive needed by PGC block is only 1/8 size of the original
input. Therefore, we do not need to predict the full resolu-
tion of perspective map. We downsample the original im-
age to make the resized image be only 1/8 resolution of the
original image and then train PENet as an identity mapping
of perspective maps. We get 0.020 MAE and 0.031 MSE in
this phase.

In the second stage, we ﬁx the parameters of Dp trained
in the ﬁrst phase, and only train Ep, aiming at construct-
ing the perspective map from its corresponding RGB image.
We get 0.101 MAE and 0.142 MSE in the second training
phase. And ﬁnally in the third stage, Ours A denotes di-
rectly adopting the estimated perspective map of PENet as
the ground-truth, while Ours B represents the PENet is em-
bedded as a perspective estimation branch and the whole
network can be trained end-to-end. Quantitative results of
Ours A and Ours B have been demonstrated in Sec. 5.3.

B. The Visualization of Estimated Perspective
Maps in Each Phase of Training PENet

Beyond the quantitative results given in Sec. A, we also
demonstrate visualizations of perspective maps in these
three phases. Fig. 8(a)(b) show the input / ground-truth
and estimated perspective map, respectively. It can be seen
that our PENet performs well in reconstructing the input in
the ﬁrst phase. Fig. 9 demonstrates two examples of esti-
mated maps predicted by PENet. PENet generally produces

roughly accurate perspective maps, showing its robustness
in dealing with different scenes. Taking into account the
quantitative results, it is obvious that PENet is capable of
predicting a meaningful perspective map quantitatively and
qualitatively in the ﬁrst two stages.

For the third phase, Fig. 10 shows the estimated per-
spective maps of Ours A and Ours B, respectively shown
in the second and third columns. Comparing these two im-
ages in Fig. 10(a) vertically, it can be seen that the visual
angle of the image in the second row is relatively larger
than that of the image in the ﬁrst row. This observation
accords with the directly estimated maps in the Fig. 10(b),
which can been seen that the second image contains more
larger values comparing with the ﬁrst image does. When we
train the whole network end-to-end, the perspective estima-
tion branch can still predict generally satisfying perspective
maps (i.e., Fig. 10(c)). It is seen that larger perspective val-
ues move from the right to the left, which is visually ex-
planatory.

Therefore, our PENet works well either in directly pre-
dicting perspective maps or in functioning as the perspec-
tive map estimator of the end-to-end architecture.

C. Reliability of the Prediction of PENet

PENet is designed as a compromise of the situation that
perspective annotations are unavailable, in which the reli-
ability of PENet is essential. Therefore, we conduct an
experiment to conﬁrm the feasibility of PENet. Table 10
demonstrates the comparisons of adopting the ground-truth
or the estimated perspective map as the guidance of spa-
tially variant smoothing on ShanghaiTech Part A/B and
WorldExpo’10. MAEs are respectively 58.1, 9.0 and 8.3,
with a small decrease of 1.1, 0.2 and 0.2, respectively. This
indicates that PENet is competent to a reasonable perspec-
tive map estimator.

Perspective Map
Estimated
Ground-truth

ShanghaiTech Part A/B WorldExpo’10

58.1/9.0
57.0/8.8

8.3
8.1

Table 10: Different guidances of PGC on ShanghaiTech Part A/B
and WorldExpo’10.

D. More Density Maps Predicted by the Pro-

posed PGCNet

Figs. 11 and 12 demonstrate more density maps pre-
dicted by PGCNet as well as by CSRNet. From the visual-
ization, it can be seen that our PGCNet shows its superiority
to CSRNet in estimating a more accurate number of pedes-
trians in either sparse or congested scenes. The quantitative
results have been shown in Sec. 5.

Figure 8: Results of the ﬁrst phase of training PENet. Given (a)
the input of PENet, (b) is the reconstructing output, and (c) denotes
the corresponding RGB image.

Figure 9: Results of second phase of training PENet. Given (a) the
input of PENet, (b) is the output of PENet, and (c) represents the
ground-truth.

Figure 10: Results of third phase of training PENet. Given (a)
the original RGB image, (b) is the corresponding perspective map
directly predicted by PENet, and (c) represents perspective map
when training end-to-end.

The architecture of PENet
Conv. (3, 3, 64), stride=2; LReLU
Conv. (3, 3, 128), stride=2; LReLU
Conv. (3, 3, 256), stride=2; LReLU
Conv. (3, 3, 512), stride=2; LReLU
UpConv. (3, 3, 256), stride=2; ReLU
UpConv. (3, 3,128), stride=2; ReLU
UpConv. (3, 3, 64), stride=2; ReLU
UpConv. (3, 3, 1), stride=2; ReLU

Table 11: The architecture of PENet. “LReLU” denotes leaky
ReLU with the slope of 0.2.

Figure 11: Results of density map estimation of CSRNet and our PGCNet.

Figure 12: Results of density map estimation of CSRNet and our PGCNet.

