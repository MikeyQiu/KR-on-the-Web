Learning to Adapt Structured Output Space for Semantic Segmentation

Yi-Hsuan Tsai1∗ Wei-Chih Hung2∗

Samuel Schulter1

Kihyuk Sohn1

Ming-Hsuan Yang2 Manmohan Chandraker1

1NEC Laboratories America

2University of California, Merced

9
1
0
2
 
t
c
O
 
6
1
 
 
]

V
C
.
s
c
[
 
 
2
v
9
4
3
0
1
.
2
0
8
1
:
v
i
X
r
a

Abstract

Convolutional neural network-based approaches for se-
mantic segmentation rely on supervision with pixel-level
ground truth, but may not generalize well to unseen image
domains. As the labeling process is tedious and labor inten-
sive, developing algorithms that can adapt source ground
truth labels to the target domain is of great interest. In this
paper, we propose an adversarial learning method for do-
main adaptation in the context of semantic segmentation.
Considering semantic segmentations as structured outputs
that contain spatial similarities between the source and tar-
get domains, we adopt adversarial learning in the output
space. To further enhance the adapted model, we con-
struct a multi-level adversarial network to effectively per-
form output space domain adaptation at different feature
levels. Extensive experiments and ablation study are con-
ducted under various domain adaptation settings, includ-
ing synthetic-to-real and cross-city scenarios. We show that
the proposed method performs favorably against the state-
of-the-art methods in terms of accuracy and visual quality.

1. Introduction

Semantic segmentation aims to assign each pixel a se-
mantic label, e.g., person, car, road or tree, in an image.
Recently, methods based on convolutional neural networks
(CNNs) have achieved signiﬁcant progress in semantic seg-
mentation [2, 21, 23, 24, 40, 42, 43] with applications for
autonomous driving [9] and image editing [36]. The crux
of CNN-based approaches is to annotate a large number of
images that cover possible scene variations. However, this
trained model may not generalize well to unseen images,
especially when there is a domain gap between the training
(source) and test (target) images. For instance, the distribu-
tion of appearance for objects and scenes may vary in dif-
ferent cities, and even weather and lighting conditions can
change signiﬁcantly in the same city. In such cases, rely-

∗Both authors contribute equally to this work.

Figure 1. Our motivation of learning adaptation in the output
space. While images may be very different in appearance, their
outputs are structured and share many similarities, such as spatial
layout and local context.

ing only on the supervised model that requires re-annotating
per-pixel ground truths in different scenarios would entail
prohibitively high labor cost.

To address this issue, knowledge transfer or domain
adaptation techniques have been proposed to close the gap
between source and target domains, where annotations are
not available in the target domain. For image classiﬁcation,
one effective approach is to align features across two do-
mains [8, 25] such that the adapted features can generalize
to both domains. Similar efforts have been made for se-
mantic segmentation via adversarial learning in the feature
space [3, 13]. However, different from the image classi-
ﬁcation task, feature adaptation for semantic segmentation
may suffer from the complexity of high-dimensional fea-
tures that needs to encode diverse visual cues, including
appearance, shape and context. This motivates us to de-
velop an effective method for adapting pixel-level predic-
tion tasks rather than using feature adaptation. In semantic
segmentation, we note that the output space contains rich
information, both spatially and locally. For instance, even
if images from two domains are very different in appear-
ance, their segmentation outputs share a signiﬁcant amount
of similarities, e.g., spatial layout and local context (see Fig-
ure 1). Based on this observation, we address the pixel-
level domain adaptation problem in the output (segmenta-
tion) space.

1

In this paper, we propose an end-to-end CNN-based do-
main adaptation algorithm for semantic segmentation. Our
formulation is based on adversarial learning in the output
space, where the intuition is to directly make the predicted
label distributions close to each other across source and tar-
get domains. Based on the generative adversarial network
(GAN) [10, 31, 22], the proposed model consists of two
parts: 1) a segmentation model to predict output results, and
2) a discriminator to distinguish whether the input is from
the source or target segmentation output. With an adversar-
ial loss, the proposed segmentation model aims to fool the
discriminator, with the goal of generating similar distribu-
tions in the output space for either source or target images.
The proposed method also adapts features as the errors
are back-propagated to the feature level from the output la-
bels. However, one concern is that lower-level features may
not be adapted well as they are far away from the high-level
output labels. To address this issue, we develop a multi-
level strategy by incorporating adversarial learning at differ-
ent feature levels of the segmentation model. For instance,
we can use both conv5 and conv4 features to predict seg-
mentation results in the output space. Then two discrimi-
nators can be connected to each of the predicted output for
multi-level adversarial learning. We perform one-stage end-
to-end training for the segmentation model and discrimina-
tors jointly, without using any prior knowledge of the data in
the target domain. In the testing phase, we can simply dis-
card discriminators and use the adapted segmentation model
on target images, with no extra computational requirements.
Due to the high labor cost of annotating segmentation
ground truth, there has been great interest in large-scale syn-
thetic datasets with annotations, e.g., GTA5 [32] and SYN-
THIA [33]. As a result, one critical setting is to adapt the
model trained on synthetic data to real-world datasets, such
as Cityscapes [4]. We follow this setting and conduct ex-
tensive experiments to validate the proposed domain adap-
tation method. First, we use a strong baseline model that
is able to generalize to different domains. We note that a
strong baseline facilitates real-world applications and can
evaluate the limitation of the proposed adaptation approach.
Based on this baseline model, we show comparisons using
adversarial adaptation in the feature and output spaces. Fur-
thermore, we show that the multi-level adversarial learning
improves the results over single-level adaptation. In addi-
tion to the synthetic-to-real setting, we show experimental
results on the Cross-City dataset [3], where annotations are
provided in one city (source), while testing the model on
another unseen city (target). Overall, our method performs
favorably against state-of-the-art algorithms on numerous
benchmark datasets under different settings.

The contributions of this work are as follows. First,
we propose a domain adaptation method for pixel-level se-
mantic segmentation via adversarial learning. Second, we

demonstrate that adaptation in the output (segmentation)
space can effectively align scene layout and local context
between source and target images. Third, a multi-level ad-
versarial learning scheme is developed to adapt features at
different levels of the segmentation model, which leads to
improved performance.

2. Related Work

Semantic Segmentation. State-of-the-art semantic seg-
mentation methods are mainly based on the recent advances
of deep neural networks. As proposed by Long et al. [24],
one can transform a classiﬁcation CNN (e.g., AlexNet [19],
VGG [34], or ResNet [11]) to a fully-convolutional net-
work (FCN) for semantic segmentation. Numerous meth-
ods have since been developed to improve this model by
utilizing context information [15, 42] or enlarging receptive
ﬁelds [2, 40]. To train these advanced networks, a substan-
tial amount of dense pixel annotations must be collected in
order to match the model capacity of deep CNNs. As a re-
sult, weakly and semi-supervised approaches [5, 14, 17, 29,
30] are proposed in recent years to reduce the heavy label-
ing cost of collecting segmentation ground truths. However,
in most real-world applications, it is difﬁcult to obtain weak
annotations and the trained model may not generalize well
to unseen image domains.

Another approach to tackle the annotation problem is
to construct synthetic datasets based on rendering, e.g.,
GTA5 [32] and SYNTHIA [33]. While the data collection
is less costly since the pixel-level annotation can be done
with a partially automated process, these datasets are usu-
ally used in conjunction with real-world datasets for joint
learning to improve the performance. However, when train-
ing solely on the synthetic dataset, the model does not gen-
eralize well to real-world data, mainly due to the large do-
main shift between synthetic images and real-world images,
i.e., appearance differences are still signiﬁcant with current
rendering techniques. Although synthesizing more realistic
images can decrease the domain shift, it is necessary to use
domain adaptation to narrow the performance gap.

Domain Adaptation. Domain adaptation methods for
image classiﬁcation have been developed to address the
domain-shift problem between the source and target do-
mains. Numerous methods [7, 8, 25, 26, 35, 37, 38] are de-
veloped based on CNN classiﬁers due to performance gain.
The main insight behind these approaches is to tackle the
problem by aligning the feature distribution between source
and target images. Ganin et al. [7, 8] propose the Domain-
Adversarial Neural Network (DANN) to transfer the feature
distribution. A number of variants have since been proposed
with different loss functions [25, 37, 38] or classiﬁers [26].
Recently, the PixelDA method [1] addresses domain adap-
tation for image classiﬁcation by transferring the source im-

Figure 2. Algorithmic overview. Given images with the size H by W in source and target domains, we pass them through the segmentation
network to obtain output predictions. For source predictions with C categories, a segmentation loss is computed based on the source ground
truth. To make target predictions closer to the source ones, we utilize a discriminator to distinguish whether the input is from the source or
target domain. Then an adversarial loss is calculated on the target prediction and is back-propagated to the segmentation network. We call
this process as one adaptation module, and we illustrate our proposed multi-level adversarial learning by adopting two adaptation modules
at two different levels here.

ages to target domain, thereby obtaining a simulated train-
ing set for target images.

We note that domain adaptation for pixel-level prediction
tasks have not been explored widely. Hoffman et al. [13]
introduce the task of domain adaptation on semantic seg-
mentation by applying adversarial learning (i.e., DANN)
in a fully-convolutional way on feature representations and
additional category constraints similar to the constrained
CNN [30]. Other methods focus on adapting synthetic-to-
real or cross-city images by adopting class-wise adversarial
learning [3] or label transfer [3]. Similar to the PixelDA
method [1], one concurrent work, CyCADA [12] uses the
CycleGAN [44] and transfers source domain images to the
target domain with pixel alignment, thus generating extra
training data combined with feature space adversarial learn-
ing [13].

Although feature space adaptation has been successfully
applied to image classiﬁcation, pixel-level tasks such as
semantic segmentation remains challenging based on fea-
ture adaptation-based approaches. In this paper, we use the
property that pixel-level predictions are structured outputs
that contain information spatially and locally, to propose an
efﬁcient domain adaptation algorithm through adversarial
learning in the output space.

where i indicates the level of a discriminator in the multi-
level adversarial learning. Two sets of images ∈ RH×W ×3
from source and target domains are denoted as {IS} and
{IT }. We ﬁrst forward the source image Is (with annota-
tions) to the segmentation network for optimizing G. Then
we predict the segmentation softmax output Pt for the tar-
get image It (without annotations). Since our goal is to
make segmentation predictions P of source and target im-
ages (i.e., Ps and Pt) close to each other, we use these two
predictions as the input to the discriminator Di to distin-
guish whether the input is from the source or target domain.
With an adversarial loss on the target prediction, the net-
work propagates gradients from Di to G, which would en-
courage G to generate similar segmentation distributions in
the target domain to the source prediction. Figure 2 shows
the overview of the proposed algorithm.

3.2. Objective Function for Domain Adaptation

With the proposed network, we formulate the adaptation

task containing two loss functions from both modules:

L(Is, It) = Lseg(Is) + λadvLadv(It),

(1)

3. Algorithmic Overview

3.1. Overview of the Proposed Model

Our domain adaptation algorithm consists of two mod-
ules: a segmentation network G and the discriminator Di,

where Lseg is the cross-entropy loss using ground truth an-
notations in the source domain, and Ladv is the adversarial
loss that adapts predicted segmentations of target images to
the distribution of source predictions (see Section 4). In (1),
λadv is the weight used to balance the two losses.

4. Output Space Adaptation

Different from image classiﬁcation based on features
[8, 25] that describe the global visual information of the
image, high-dimensional features learned for semantic seg-
mentation encodes complex representations. As a result,
adaptation in the feature space may not be the best choice
for semantic segmentation. On the other hand, although
segmentation outputs are in the low-dimensional space, they
contain rich information, e.g., scene layout and context. Our
intuition is that no matter images are from the source or tar-
get domain, their segmentations should share strong simi-
larities, spatially and locally. Thus, we utilize this property
to adapt low-dimensional softmax outputs of segmentation
predictions via an adversarial learning scheme.

4.1. Single-level Adversarial Learning
Discriminator Training. Before introducing how to adapt
the segmentation network via adversarial learning, we ﬁrst
describe the training objective for the discriminator. Given
the segmentation softmax output P = G(I) ∈ RH×W ×C,
where C is the number of categories, we forward P to a
fully-convolutional discriminator D using a cross-entropy
loss Ld for the two classes (i.e., source and target). The loss
can be written as:

Ld(P ) = −

(1 − z) log(D(P )(h,w,0))

(2)

(cid:88)

h,w

+z log(D(P )(h,w,1)),

where z = 0 if the sample is drawn from the target domain,
and z = 1 for the sample from the source domain.
Segmentation Network Training. First, we deﬁne the seg-
mentation loss in (1) as the cross-entropy loss for images
from the source domain:
(cid:88)

(cid:88)

Y (h,w,c)
s

log(P (h,w,c)
s

),

(3)

Lseg(Is) = −

h,w

c∈C

where Ys is the ground truth annotations for source images
and Ps = G(Is) is the segmentation output.

Second, for images in the target domain, we forward
them to G and obtain the prediction Pt = G(It). To make
the distribution of Pt closer to Ps, we use an adversarial loss
Ladv in (1) as:

Ladv(It) = −

log(D(Pt)(h,w,1)).

(4)

(cid:88)

h,w

This loss is designed to train the segmentation network and
fool the discriminator by maximizing the probability of the
target prediction being considered as the source prediction.

4.2. Multi-level Adversarial Learning

Although performing adversarial learning in the output
space directly adapts predictions, low-level features may

not be adapted well as they are far away from the output.
Similar to the deep supervision method [20] that uses aux-
iliary loss for semantic segmentation [42], we incorporate
additional adversarial module in the low-level feature space
to enhance the adaptation. The training objective for the
segmentation network can be extended from (1) as:

L(Is, It) =

segLi
λi

seg(Is) +

advLi
λi

adv(It),

(5)

(cid:88)

i

(cid:88)

i

where i indicates the level used for predicting the segmen-
tation output. We note that, the segmentation output is
still predicted in each feature space, before passing through
individual discriminators for adversarial learning. Hence,
Li
adv(It) remain in the same form as in (3)
and (4), respectively. Based on (5), we optimize the follow-
ing min-max criterion:

seg(Is) and Li

max
D

min
G

L(Is, It).

(6)

The ultimate goal is to minimize the segmentation loss in
G for source images, while maximizing the probability of
target predictions being considered as source predictions.

5. Network Architecture and Training
Discriminator. For the discriminator, we use an architec-
ture similar to [31] but utilize all fully-convolutional lay-
ers to retain the spatial information. The network consists
of 5 convolution layers with kernel 4 × 4 and stride of 2,
where the channel number is {64, 128, 256, 512, 1}, re-
spectively. Except for the last layer, each convolution layer
is followed by a leaky ReLU [27] parameterized by 0.2. An
up-sampling layer is added to the last convolution layer for
re-scaling the output to the size of the input. We do not use
any batch-normalization layers [16] as we jointly train the
discriminator with the segmentation network using a small
batch size.
Segmentation Network. It is essential to build upon a good
baseline model to achieve high-quality segmentation results
[2, 40, 42]. We adopt the DeepLab-v2 [2] framework with
ResNet-101 [11] model pre-trained on ImageNet [6] as our
segmentation baseline network. However, we do not use
the multi-scale fusion strategy [2] due to the memory issue.
Similar to the recent work on semantic segmentation [2, 40],
we remove the last classiﬁcation layer and modify the stride
of the last two convolution layers from 2 to 1, making the
resolution of the output feature maps effectively 1/8 times
the input image size. To enlarge the receptive ﬁeld, we ap-
ply dilated convolution layers [40] in conv4 and conv5 lay-
ers with a stride of 2 and 4, respectively. After the last layer,
we use the Atrous Spatial Pyramid Pooling (ASPP) [2] as
the ﬁnal classiﬁer. Finally, we apply an up-sampling layer
along with the softmax output to match the size of the input
image. Based on this architecture, our segmentation model

Table 1. Results of adapting GTA5 to Cityscapes. We ﬁrst compare our results using single-level adversarial learning in the output space
with other state-of-the-art algorithms with the VGG-16 based model. Then we adopt the ResNet-101 based model and present ablation
study on different components of our proposed method.

GTA5 → Cityscapes

Method

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

FCNs in the Wild [13]
CDA [41]
CyCADA (feature) [12] 85.6 30.7 74.7 14.4 13.0 17.6 13.7 5.8 74.6 15.8 69.9 38.2 3.5 72.3 16.0 5.0 0.1 3.6 0.0
83.5 38.3 76.4 20.6 16.5 22.2 26.2 21.9 80.4 28.7 65.7 49.4 4.2 74.6 16.0 26.6 2.0 8.0 0.0
CyCADA (pixel) [12]
87.3 29.8 78.6 21.1 18.2 22.5 21.5 11.0 79.7 29.6 71.3 46.8 6.5 80.1 23.0 26.9 0.0 10.6 0.3
Ours (singel-level)

70.4 32.4 62.1 14.9 5.4 10.9 14.2 2.7 79.2 21.3 64.6 44.1 4.2 70.4 8.0 7.3 0.0 3.5 0.0
27.1
74.9 22.0 71.7 6.0 11.9 8.4 16.3 11.1 75.7 13.3 66.5 38.0 9.3 55.2 18.8 18.9 0.0 16.8 14.6 28.9
29.2
34.8
35.0

Baseline (ResNet)
Ours (feature)
Ours (single-level)
Ours (multi-level)

75.8 16.8 77.2 12.5 21.0 25.5 30.1 20.1 81.3 24.6 70.3 53.8 26.4 49.9 17.2 25.9 6.5 25.3 36.0 36.6
83.7 27.6 75.5 20.3 19.9 27.4 28.3 27.4 79.0 28.4 70.1 55.1 20.2 72.9 22.5 35.7 8.3 20.6 23.0 39.3
86.5 25.9 79.8 22.1 20.0 23.6 33.1 21.8 81.8 25.9 75.9 57.3 26.2 76.3 29.8 32.1 7.2 29.5 32.5 41.4
86.5 36.0 79.9 23.4 23.3 23.9 35.2 14.8 83.4 33.3 75.6 58.5 27.6 73.7 32.5 35.4 3.9 30.1 28.1 42.4

achieves 65.1% mean intersection-over-union (IoU) when
trained on the Cityscapes [4] training set and tested on the
Cityscapes validation set.

Multi-level Adaptation Model. We construct the above-
mentioned discriminator and segmentation network as our
single-level adaptation model. For the multi-level structure,
we extract feature maps from the conv4 layer and add an
ASPP module as the auxiliary classiﬁer. Similarly, a dis-
criminator with the same architecture is added for adversar-
ial learning. Figure 2 shows the proposed multi-level adap-
tation model. In this paper, we use two levels due to the
balance of its efﬁciency and accuracy.
Network Training. To train the proposed single/multi-level
adaptation model, we ﬁnd that jointly training the segmen-
tation network and discriminators in one stage is effective.
In each training batch, we ﬁrst forward the source image Is
to optimize the segmentation network for Lseg in (3) and
generate the output Ps. For the target image It, we obtain
the segmentation output Pt, and pass it along with Ps to the
discriminator for optimizing Ld in (2). In addition, we com-
pute the adversarial loss Ladv in (4) for the target prediction
Pt. For the multi-level training objective in (5), we simply
repeat the same procedure for each adaptation module.

We implement our network using the PyTorch toolbox
on a single Titan X GPU with 12 GB memory. To train
the segmentation network, we use the Stochastic Gradient
Descent (SGD) optimizer with Nesterov acceleration where
the momentum is 0.9 and the weight decay is 10−4. The
initial learning rate is set as 2.5 × 10−4 and is decreased
using the polynomial decay with power of 0.9 as mentioned
in [2]. For training the discriminator, we use the Adam op-
timizer [18] with the learning rate as 10−4 and the same
polynomial decay as the segmentation network. The mo-
mentum is set as 0.9 and 0.99.

Table 2. Performance gap between the adapted model and the
fully-supervised (oracle) model. We ﬁrst compare results with
state-of-the-art methods using the VGG based model, and then
show our result using the ResNet one.

GTA5 → Cityscapes

method

Baseline Adapt Oracle mIoU Gap

FCNs in the Wild [13]
CDA [41]
CyCADA (feature) [12]
CyCADA (pixel) [12]
Ours (single-level)

VGG-16

27.1
28.9
29.2
34.8
35.0

64.6
60.3
60.3
60.3
61.8

Ours (multi-level)

ResNet-101 42.4

65.1

-37.5
-31.4
-30.5
-24.9
-25.2

-22.7

6. Experimental Results

In this section, we present experimental results to val-
idate the proposed domain adaptation method for seman-
tic segmentation under different settings. First, we show
evaluations of the model trained on synthetic datasets (i.e.,
GTA5 [32] and SYNTHIA [33]) and test the adapted model
on real-world images from the Cityscapes [4] dataset. Ex-
tensive experiments including comparisons to the state-of-
the-art methods and ablation study are also conducted, e.g.,
adaptation in the feature/output spaces and single/multi-
level adversarial learning. Second, we carry out experi-
ments on the Cross-City dataset [3], where the model is
trained on one city and adapted to another city without
In all the experiments, the IoU met-
using annotations.
ric is used. The code and model are available at https:
//github.com/wasidennis/AdaptSegNet.

6.1. GTA5

The GTA5 dataset [32] consists of 24966 images with
the resolution of 1914 × 1052 synthesized from the video

game based on the city of Los Angeles. The ground truth
annotations are compatible with the Cityscapes dataset [4]
that contains 19 categories. Following [13], we use the full
set of GTA5 and adapt the model to the Cityscapes training
set with 2975 images. During testing, we evaluate on the
Cityscapes validation set with 500 images.

Overall Results. We present adaptation results in Table 1
with comparisons to the state-of-the-art domain adaptation
methods [12, 13, 41]. For these approaches, the baseline
model is trained using VGG-based architectures [24, 40].
To fairly evaluate our method, we ﬁrst use the same baseline
architecture (VGG-16) and train our model with the pro-
posed single-level adaptation module. Table 1 shows that
our method performs favorably against the other algorithms.
While these methods all have feature adaptation modules,
our results show that adapting the model in the output space
achieves better performance. We note that CyCADA [12]
has a pixel adaptation module by transforming source do-
main images to the target domain and hence obtains ad-
ditional training samples. Although this strategy achieves
a similar performance as ours, one can always apply pixel
transformation combined with our output space adaptation
to improve the results.

On the other hand, we argue that utilizing a stronger
baseline model is critical for understanding the importance
of different adaptation components as well as for enhancing
the performance to enable real-world applications. Thus,
we use the ResNet-101 based network introduced in Sec-
tion 5 and train the proposed adaptation model. Table 1
shows the baseline results only trained on source images
without adaptation, with comparisons to our adapted mod-
els under different settings, including feature adaptation and
single/multi-level adversarial learning in the output space.
Figure 3 presents some example results for adapted seg-
mentation. We note that for small objects such as poles and
trafﬁc signs, they are harder to adapt since they easily get
merged with background classes.

In addition, another factor to evaluate the adaptation per-
formance is to measure how much gap is narrowed be-
tween the adaptation model and the fully-supervised model.
Hence, we train the model using annotated ground truths
in the Cityscapes dataset as the oracle results. Table 2
shows the gap under different baseline models. We observe
that, although the oracle result does not differ a lot between
VGG-16 and ResNet-101 based models, the gap is larger for
the VGG one. It suggests us that to narrow the gap, using a
deeper model with larger capacity is more practical.
Parameter Analysis. During optimizing the segmentation
network G, it is essential to balance the weight between
segmentation and adversarial losses. We ﬁrst consider the
single-level case in (1) and conduct experiments to observe
the impact of changing λadv. Table 3 shows that a smaller
λadv may not facilitate the training process signiﬁcantly,

Table 3. Sensitivity analysis of λadv for feature/output space do-
main adaptation in the proposed method. We show that output
space adaptation can tolerate a wide range of λadv, while it is sen-
sitive to change λadv for feature adaptation.

GTA5 → Cityscapes

λadv

0.0005 0.001 0.002 0.004

Feature
Output Space

35.3
40.2

39.3
41.4

35.9
40.4

32.8
40.1

while a larger λadv may propagate incorrect gradients to
the network. We empirically choose λadv as 0.001 in the
single-level setting.
Feature Level v.s. Output Space Adaptation.
In the
single-level setting in (1), we compare results by using
feature-level or output space adaptation via adversarial
learning. For feature-level adaptation, we adopt a similar
strategy as used in [13, 3] and train our model accordingly.
Table 1 shows that the proposed adaptation method in the
output space performs better than the one in the feature
level.

In addition, Table 3 shows that adaptation in the feature
space is more sensitive to λadv, which causes the training
process more difﬁcult, while output space adaptation allows
for a wider range of λadv. One reason is that as feature
adaptation is performed in the high-dimensional space, the
problem for the discriminator becomes easier. Thus, such
an adapted model cannot effectively match distributions be-
tween source and target domains via adversarial learning.

Single-level v.s. Multi-level Adversarial Learning. We
have shown the merits of adopting adversarial learning in
the output space. In addition, we present the results of us-
ing multi-level adversarial learning in Table 1. Here, we
utilize an additional adversarial module (see Figure 2) and
jointly optimize (5) for two levels. To properly balance λi
seg
and λi
adv, we use the same weight as in the single-level set-
ting for the high-level output space (i.e., λ1
adv
= 0.001). Since the low-level output carries less informa-
tion to predict the segmentation, we use smaller weights for
both the segmentation and adversarial loss (i.e., λ2
seg = 0.1
and λ2
adv = 0.0002). Evaluation results show that our multi-
level adversarial adaptation further improves the segmenta-
tion accuracy. More results and analysis are presented in
the supplementary material.

seg = 1 and λ1

6.2. SYNTHIA

To adapt from the SYNTHIA to Cityscapes datasets,
we use the SYNTHIA-RAND-CITYSCAPES [33] set as
the source domain which contains 9400 images compati-
ble with the cityscapes annotated classes. Similar to [3],
we evaluate images on the Cityscapes validation set with 13

Table 4. Results of adapting SYNTHIA to Cityscapes. We ﬁrst compare our results using single-level adversarial learning in the output
space with other state-of-the-art algorithms with the VGG-16 based model. Then we adopt the ResNet-101 based model and present
ablation study on different components of our proposed method.

SYNTHIA → Cityscapes

Method

FCNs in the Wild [13]
CDA [41]
Cross-City [3]
Ours (single-level)

Baseline (ResNet)
Ours (feature)
Ours (single-level)
Ours (multi-level)

k
l
a
w
e
d
i
s

19.6
26.1
25.6
29.2

23.8
21.9
37.2
42.7

g
n
i
d
l
i
u
b

30.8
74.9
78.3
75.5

74.6
76.3
78.8
77.5

d
a
o
r

11.5
65.2
62.7
78.9

55.6
62.4
79.2
84.3

t
h
g
i
l

0.1
3.7
1.2
0.1

6.1
11.7
9.9
4.7

n
g
i
s

11.7
3.0
5.4
4.8

12.1
11.4
10.5
7.0

g
e
v

42.3
76.1
81.3
72.6

74.8
75.3
78.2
77.9

y
k
s

68.7
70.6
81.0
76.7

79.0
80.9
80.5
82.5

n
o
s
r
e
p

51.2
47.1
37.4
43.4

55.3
53.7
53.5
54.3

r
e
d
i
r

3.8
8.2
6.4
8.8

19.1
18.5
19.6
21.0

r
a
c

54.0
43.2
63.5
71.1

39.6
59.7
67.0
72.3

s
u
b

3.2
20.7
16.1
16.0

23.3
13.7
29.5
32.2

e
k
i
b
m

0.2
0.7
1.2
3.6

13.7
20.6
21.6
18.9

e
k
i
b

0.6
13.1
4.6
8.4

25.0
24.0
31.3
32.3

mIoU

22.9
34.8
35.7
37.6

38.6
40.8
45.9
46.7

Table 5. Performance gap between the adapted model and the
fully-supervised (oracle) model. We ﬁrst compare results with
state-of-the-art methods using the VGG based model, and then
show our result using the ResNet one.

SYNTHIA → Cityscapes

Method

Baseline Adapt Oracle mIoU Gap

FCNs in the Wild [13]
CDA [41]
Cross-City [3]
Ours (single-level)

VGG-16

22.9
34.8
35.7
37.6

73.8
69.6
73.8
68.4

Ours (multi-level)

ResNet-101 46.7

71.7

-50.9
-34.8
-38.1
-30.8

-25.0

classes. For the weight in (1) and (5), we use the same ones
as in the case of GTA5 dataset.

Table 4 shows evaluation results of the proposed algo-
rithm against the state-of-the-art methods [3, 13, 41] that
use feature adaptation. Similar to the experiments with the
GTA5 dataset, we ﬁrst utilize the same VGG-based model
and train our single-level adaptation model for fair com-
parisons. The experimental results suggest that adapting
the model in the output space performs better. Second, we
compare results using different components of the proposed
method with the ResNet based model. We show that the
multi-level adaptation module improves the results over the
baseline, feature space adaptation and single-level adapta-
tion models. In addition, we present comparisons of mean
IoU gap between adapted and oracle results in Table 5. Our
method achieves the smallest gap and is the only one that
can minimize the gap below 30%.

6.3. Cross-City Dataset

In addition to the synthetic-to-real adaptation for a larger
domain gap, we conduct experiment on the Cross-City
dataset [3] with smaller domain gaps between cities. The
dataset contains four different cities: Rio, Rome, Tokyo and

Taipei, in which each city has 3200 images without annota-
tions and 100 images with pixel-level ground truths for 13
classes. Similar to [3], we use the Cityscapes training set
as the source domain and adapt it to each target city using
3200 images, while 100 annotated images are used for eval-
uation. Since a smaller domain gap results in smaller output
differences, we use smaller weights for the adversarial loss
(i.e., λi
adv = 0.0005) when training our models, while the
weights for segmentation remain the same as previous ex-
periments.

We show our results in Table 6 with comparisons to [3]
and our baseline models under different settings. Again,
our ﬁnal multi-level model achieves consistent improve-
ment for different cities, which demonstrates the advantages
of the proposed adaptation method in the output space. Note
that the state-of-the-art method [3] uses a different baseline
model, and we present it as a reference to analyze how much
the proposed algorithm can improve.

7. Concluding Remarks

In this paper, we exploit the fact that segmentations
are structured outputs and share many similarities between
source and target domains. We tackle the domain adaptation
problem for semantic segmentation via adversarial learning
in the output space. To further enhance the adapted model,
we construct a multi-level adversarial network to effectively
perform output space domain adaptation at different feature
levels. Experimental results show that the proposed method
performs favorably against numerous baseline models and
the state-of-the-art algorithms. We hope that our proposed
method can be a generic adaptation model for a wide range
of pixel-level prediction tasks.

Acknowledgments. W.-C. Hung is supported in part by
the NSF CAREER Grant #1149783, gifts from Adobe and
NVIDIA. We especially thank Yan-Ting Liu for helping ex-

Table 6. Results of adapting Cityscapes to the Cross-City dataset. We construct our baseline model using the ResNet-101 architecture,
and compare results between feature adaptation and our multi-level adaptation method in the output space.

Cityscapes → Cross-City

k
l
a
w
e
d
i
s

29.3
34.3
28.6
34.2

43.9
47.3
44.2
44.7

35.4
31.3
30.8
26.0

28.6
33.4
31.9
29.5

g
n
i
d
l
i
u
b

84.5
87.7
85.5
88.3

79.0
82.5
83.0
84.6

72.8
78.7
76.6
77.8

80.0
86.6
84.1
85.2

d
a
o
r

79.5
83.9
78.8
83.9

74.2
76.6
73.7
76.2

83.4
82.9
81.5
81.5

78.6
83.5
82.1
81.7

t
h
g
i
l

0.0
13.0
16.6
18.8

2.4
12.6
6.1
9.3

12.3
14.2
15.3
17.8

13.1
12.7
25.7
26.4

n
g
i
s

22.2
41.9
40.1
40.2

7.5
22.5
18.1
25.5

12.7
24.5
20.2
26.8

7.6
16.4
13.2
15.6

g
e
v

y
k
s

r
a
c

s
u
b

n
o
s
r
e
p

29.5
37.7
42.4
47.8

39.3
43.0
51.0
55.3

42.7
48.6
49.4
55.8

16.8
17.6
28.1
31.0

r
e
d
i
r

13.0
22.4
20.7
21.7

10.3
19.8
22.1
32.7

21.5
33.3
33.3
38.0

9.4
13.7
12.0
12.5

e
k
i
b
m

25.9
39.1
45.5
48.3

27.9
29.4
48.3
43.0

8.9
11.5
24.3
24.5

26.5
44.4
43.5
47.3

e
k
i
b

1.0
5.3
6.1
8.6

10.9
16.7
28.4
27.6

40.3
45.9
51.6
50.8

9.9
18.5
20.9
27.7

mIoU

42.9
50.9
51.4
53.8

42.5
48.2
49.7
51.6

42.8
47.7
48.0
49.9

39.6
46.5
46.6
49.1

71.7
80.8
79.6
80.9

67.9
74.5
73.7
74.3

64.1
70.5
70.5
72.1

60.4
70.7
67.0
71.5

37.5
38.1
58.8
47.8

41.2
36.8
31.4
28.9

20.8
7.7
4.5
4.2

34.0
37.7
35.8
41.1

80.6
84.6
85.3
86.2

77.8
77.9
79.6
81.8

77.4
81.6
82.0
82.7

68.2
77.0
77.2
76.7

82.8
92.5
79.6
93.1

69.5
86.5
86.9
87.3

64.3
89.2
84.0
90.9

82.1
92.1
81.2
91.7

City

Method

Rome

Rio

Tokyo

Taipei

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Target Image

Ground Truth

Before Adaptation

Feature Adaptation

Ours

Figure 3. Example results of adapted segmentation for GTA5-to-Cityscapes. For each target image, we show results before adaptation,
with feature adaptation and our adapted segmentations in the output space.

Table 7. Results of adapting GTA5 to Cityscapes.

GTA5 → Cityscapes

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

Method

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

Vanilla-GAN 86.5 25.9 79.8 22.1 20.0 23.6 33.1 21.8 81.8 25.9 75.9 57.3 26.2 76.3 29.8 32.1 7.2 29.5 32.5 41.4
91.4 48.4 81.2 27.4 21.2 31.2 35.3 16.1 84.1 32.5 78.2 57.7 28.2 85.9 33.8 43.5 0.2 23.9 16.9 44.1
LS-GAN

Table 8. Results of adapting SYNTHIA to Cityscapes. mIoU and mIoU∗ are averaged over 16 and 13 categories, respectively.

SYNTHIA → Cityscapes

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

Method

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

s
u
b

e
k
i
b
m

e
k
i
b

mIoU mIoU∗

Vanilla-GAN 79.2 37.2 78.8 10.5 0.3 25.1 9.9 10.5 78.2 80.5 53.5 19.6 67.0 29.5 21.6 31.3
8.0 78.3 82.7 56.3 22.4 74.0 33.2 18.9 34.9
LS-GAN

84.0 40.5 79.3 10.4 0.2 22.7 6.5

39.5
40.8

45.9
47.6

Table 9. Results of adapting Synscapes to Cityscapes.

Synscapes → Cityscapes

Method

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

Without Adaptation 81.8 40.6 76.1 23.3 16.8 36.9 36.8 40.1 83.0 34.8 84.9 59.9 37.7 78.5 20.4 20.5 7.8 27.3 52.5 45.3
94.2 60.9 85.1 29.1 25.2 38.6 43.9 40.8 85.2 29.7 88.2 64.4 40.6 85.8 31.5 43.0 28.3 30.5 56.7 52.7
Vanilla-GAN
94.2 60.5 85.0 29.2 25.6 39.8 43.4 43.8 85.2 35.9 88.3 63.2 41.1 87.2 30.8 44.2 29.8 28.5 53.7 53.1
LS-GAN

periments using LS-GAN and the Synscapes dataset, as in
the appendix.

[7] Y. Ganin and V. Lempitsky. Unsupervised domain adaptation

by backpropagation. In ICML, 2015. 2

References

[1] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised pixel-level domain adaptation with
generative adversarial networks. In CVPR, 2017. 2, 3
[2] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. CoRR, abs/1606.00915, 2016. 1, 2, 4, 5

[3] Y.-H. Chen, W.-Y. Chen, Y.-T. Chen, B.-C. Tsai, Y.-C. F.
Wang, and M. Sun. No more discrimination: Cross city
adaptation of road scene segmenters. In ICCV, 2017. 1, 2, 3,
5, 6, 7, 8

[4] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In CVPR, 2016. 2, 5, 6

[5] J. Dai, K. He, and J. Sun. Boxsup: Exploiting bounding
boxes to supervise convolutional networks for semantic seg-
mentation. In ICCV, 2015. 2

[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
CVPR, 2009. 4

[8] Y. Ganin, E. Ustinova, H. Ajakan, P. Germain, H. Larochelle,
F. Laviolette, M. Marchand, and V. Lempitsky. Domain-
adversarial training of neural networks. In JMLR, 2016. 1,
2, 4

[9] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for au-
In

the kitti vision benchmark suite.

tonomous driving?
CVPR, 2012. 1

[10] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In NIPS, 2014. 2

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 2, 4

[12] J. Hoffman, E. Tzeng, T. Park, J.-Y. Zhu, P. Isola, K. Saenko,
A. A. Efros, and T. Darrell. Cycada: Cycle-consistent adver-
sarial domain adaptation. CoRR, abs/1711.03213, 2017. 3,
5, 6

[13] J. Hoffman, D. Wang, F. Yu, and T. Darrell. Fcns in the
wild: Pixel-level adversarial and constraint-based adapta-
tion. CoRR, abs/1612.02649, 2016. 1, 3, 5, 6, 7

[14] S. Hong, H. Noh, and B. Han. Decoupled deep neural net-
work for semi-supervised semantic segmentation. In NIPS,
2015. 2

[15] W.-C. Hung, Y.-H. Tsai, X. Shen, Z. Lin, K. Sunkavalli,
X. Lu, and M.-H. Yang. Scene parsing with global context
embedding. In ICCV, 2017. 2

[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015. 4

[17] A. Khoreva, R. Benenson, J. Hosang, M. Hein, and
B. Schiele. Simple does it: Weakly supervised instance and
semantic segmentation. In CVPR, 2017. 2

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. In ICLR, 2015. 5

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, 2012. 2

Imagenet
In

[20] C. Lee, S. Xie, P. W. Gallagher, Z. Zhang, and Z. Tu. Deeply-

supervised nets. In AISTATS, 2015. 4

[21] G. Lin, C. Shen, A. van dan Hengel, and I. Reid. Efﬁcient
piecewise training of deep structured models for semantic
segmentation. In CVPR, 2016. 1

[22] M.-Y. Liu and O. Tuzel. Coupled generative adversarial net-

works. In NIPS, 2016. 2

[23] Z. Liu, X. Li, P. Luo, C. C. Loy, and X. Tang. Semantic im-
age segmentation via deep parsing network. In ICCV, 2015.
1

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 1, 2, 6
[25] M. Long, Y. Cao, J. Wang, and M. Jordan. Learning transfer-
able features with deep adaptation networks. In ICML, 2015.
1, 2, 4

[26] M. Long, H. Zhu, J. Wang, and M. I. Jordan. Unsupervised
domain adaptation with residual transfer networks. In NIPS,
2016. 2

[27] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectiﬁer nonlin-
earities improve neural network acoustic models. In ICML,
2013. 4

[28] X. Mao, Q. Li, H. Xie, R. Y. Lau, Z. Wang, and S. Paul Smol-
ley. Least squares generative adversarial networks. In ICCV,
2017. 10

[29] G. Papandreou, L.-C. Chen, K. Murphy, and A. L. Yuille.
Weakly-and semi-supervised learning of a dcnn for semantic
image segmentation. In ICCV, 2015. 2

[30] D. Pathak, P. Krahenbuhl, and T. Darrell. Constrained con-
volutional neural networks for weakly supervised segmenta-
tion. In ICCV, 2015. 2, 3

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. In ICLR, 2016. 2, 4

[32] S. R. Richter, V. Vineet, S. Roth, and V. Koltun. Playing for
data: Ground truth from computer games. In ECCV, 2016.
2, 5

[33] G. Ros, L. Sellart, J. Materzynska, D. Vazquez, and
A. Lopez. The SYNTHIA Dataset: A large collection of
synthetic images for semantic segmentation of urban scenes.
In CVPR, 2016. 2, 5, 6

[34] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2015.
2

[35] K. Sohn, S. Liu, G. Zhong, X. Yu, M.-H. Yang, and M. Chan-
draker. Unsupervised domain adaptation for face recognition
in unlabeled videos. In ICCV, 2017. 2

[36] Y.-H. Tsai, X. Shen, Z. Lin, K. Sunkavalli, X. Lu, and M.-H.
Yang. Deep image harmonization. In CVPR, 2017. 1
[37] E. Tzeng, J. Hoffman, T. Darrell, and K. Saenko. Simultane-
ous deep transfer across domains and tasks. In ICCV, 2015.
2

[38] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversarial
discriminative domain adaptation. In CVPR, 2017. 2

[39] M. Wrenninge and J. Unger.

istic synthetic dataset for street scene parsing.
abs/1810.08705, 2018. 10

Synscapes: A photoreal-
CoRR,

[40] F. Yu and V. Koltun. Multi-scale context aggregation by di-

lated convolutions. In ICLR, 2016. 1, 2, 4, 6

[41] Y. Zhang, P. David, and B. Gong. Curriculum domain adap-
tation for semantic segmentation of urban scenes. In ICCV,
2017. 5, 6, 7

[42] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia. Pyramid scene

parsing network. In CVPR, 2017. 1, 2, 4

[43] S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet,
Z. Su, D. Du, C. Huang, and P. Torr. Conditional random
ﬁelds as recurrent neural networks. In ICCV, 2015. 1
[44] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. ICCV, 2017. 3

A. Least Squares Objective

To analyze the impact of different type of GANs in our
framework, we adopt the least-squares loss function in [28]
that claims to generate higher-quality results and perform
more stably during GAN training. The loss for discrimina-
tor training, similar to (2), can be written as:

LLS

d (P ) =

(cid:88)

(cid:16)

z

D(P )(h,w,1) − 1

(cid:17)2

(7)

h,w

+(1 − z)

(cid:16)

D(P )(h,w,0)(cid:17)2

,

where z = 0 if the sample is drawn from the target domain,
and z = 1 for the sample from the source domain. Similar
to (4), the adversarial loss can be written as:

LLS

adv(It) =

(cid:88)

(cid:16)

h,w

D(Pt)(h,w,1) − 1

(cid:17)2

.

(8)

We use the single-level adaptation network and the ResNet-
101 backbone as in the main paper, and all the other details
are the same. Results on Cityscapes using GTA5 and SYN-
THIA as the source domain are presented in Table 7 and
Table 8, respectively. We compare the performance of the
vanilla GAN (as in the main paper) and the least-squares
(LS) GAN. Both tables show that using the LS-GAN objec-
tive achieves a higher mean IoU.

B. Synscapes

The Synscapes dataset [39] is a photorealistic synthetic
dataset for street scene parsing. It consists of 25, 000 RGB
images at 1440 × 720 resolution. The ground truth annota-
tion adopts the Cityscapes convention that contains 19 cat-
egories. To adapt from Synscapes to Cityscapes, we use the
entire Synsacpes dataset as the source domain. In Table 9,
we show results without adaptation, with vanilla GAN, and
LS-GAN, using the single-level adaptation network and the
ResNet-101 backbone.

Since the domain gap between Cityscapes and Synscapes
is smaller than the case using either GTA5 or SYNTHIA
as the source domain, the performance without adaptation
already achieves a mean IoU of 45.3%. By further using
output space adaptation, the vanilla and LS GAN objectives
improve the results and perform competitively.

Learning to Adapt Structured Output Space for Semantic Segmentation

Yi-Hsuan Tsai1∗ Wei-Chih Hung2∗

Samuel Schulter1

Kihyuk Sohn1

Ming-Hsuan Yang2 Manmohan Chandraker1

1NEC Laboratories America

2University of California, Merced

9
1
0
2
 
t
c
O
 
6
1
 
 
]

V
C
.
s
c
[
 
 
2
v
9
4
3
0
1
.
2
0
8
1
:
v
i
X
r
a

Abstract

Convolutional neural network-based approaches for se-
mantic segmentation rely on supervision with pixel-level
ground truth, but may not generalize well to unseen image
domains. As the labeling process is tedious and labor inten-
sive, developing algorithms that can adapt source ground
truth labels to the target domain is of great interest. In this
paper, we propose an adversarial learning method for do-
main adaptation in the context of semantic segmentation.
Considering semantic segmentations as structured outputs
that contain spatial similarities between the source and tar-
get domains, we adopt adversarial learning in the output
space. To further enhance the adapted model, we con-
struct a multi-level adversarial network to effectively per-
form output space domain adaptation at different feature
levels. Extensive experiments and ablation study are con-
ducted under various domain adaptation settings, includ-
ing synthetic-to-real and cross-city scenarios. We show that
the proposed method performs favorably against the state-
of-the-art methods in terms of accuracy and visual quality.

1. Introduction

Semantic segmentation aims to assign each pixel a se-
mantic label, e.g., person, car, road or tree, in an image.
Recently, methods based on convolutional neural networks
(CNNs) have achieved signiﬁcant progress in semantic seg-
mentation [2, 21, 23, 24, 40, 42, 43] with applications for
autonomous driving [9] and image editing [36]. The crux
of CNN-based approaches is to annotate a large number of
images that cover possible scene variations. However, this
trained model may not generalize well to unseen images,
especially when there is a domain gap between the training
(source) and test (target) images. For instance, the distribu-
tion of appearance for objects and scenes may vary in dif-
ferent cities, and even weather and lighting conditions can
change signiﬁcantly in the same city. In such cases, rely-

∗Both authors contribute equally to this work.

Figure 1. Our motivation of learning adaptation in the output
space. While images may be very different in appearance, their
outputs are structured and share many similarities, such as spatial
layout and local context.

ing only on the supervised model that requires re-annotating
per-pixel ground truths in different scenarios would entail
prohibitively high labor cost.

To address this issue, knowledge transfer or domain
adaptation techniques have been proposed to close the gap
between source and target domains, where annotations are
not available in the target domain. For image classiﬁcation,
one effective approach is to align features across two do-
mains [8, 25] such that the adapted features can generalize
to both domains. Similar efforts have been made for se-
mantic segmentation via adversarial learning in the feature
space [3, 13]. However, different from the image classi-
ﬁcation task, feature adaptation for semantic segmentation
may suffer from the complexity of high-dimensional fea-
tures that needs to encode diverse visual cues, including
appearance, shape and context. This motivates us to de-
velop an effective method for adapting pixel-level predic-
tion tasks rather than using feature adaptation. In semantic
segmentation, we note that the output space contains rich
information, both spatially and locally. For instance, even
if images from two domains are very different in appear-
ance, their segmentation outputs share a signiﬁcant amount
of similarities, e.g., spatial layout and local context (see Fig-
ure 1). Based on this observation, we address the pixel-
level domain adaptation problem in the output (segmenta-
tion) space.

1

In this paper, we propose an end-to-end CNN-based do-
main adaptation algorithm for semantic segmentation. Our
formulation is based on adversarial learning in the output
space, where the intuition is to directly make the predicted
label distributions close to each other across source and tar-
get domains. Based on the generative adversarial network
(GAN) [10, 31, 22], the proposed model consists of two
parts: 1) a segmentation model to predict output results, and
2) a discriminator to distinguish whether the input is from
the source or target segmentation output. With an adversar-
ial loss, the proposed segmentation model aims to fool the
discriminator, with the goal of generating similar distribu-
tions in the output space for either source or target images.
The proposed method also adapts features as the errors
are back-propagated to the feature level from the output la-
bels. However, one concern is that lower-level features may
not be adapted well as they are far away from the high-level
output labels. To address this issue, we develop a multi-
level strategy by incorporating adversarial learning at differ-
ent feature levels of the segmentation model. For instance,
we can use both conv5 and conv4 features to predict seg-
mentation results in the output space. Then two discrimi-
nators can be connected to each of the predicted output for
multi-level adversarial learning. We perform one-stage end-
to-end training for the segmentation model and discrimina-
tors jointly, without using any prior knowledge of the data in
the target domain. In the testing phase, we can simply dis-
card discriminators and use the adapted segmentation model
on target images, with no extra computational requirements.
Due to the high labor cost of annotating segmentation
ground truth, there has been great interest in large-scale syn-
thetic datasets with annotations, e.g., GTA5 [32] and SYN-
THIA [33]. As a result, one critical setting is to adapt the
model trained on synthetic data to real-world datasets, such
as Cityscapes [4]. We follow this setting and conduct ex-
tensive experiments to validate the proposed domain adap-
tation method. First, we use a strong baseline model that
is able to generalize to different domains. We note that a
strong baseline facilitates real-world applications and can
evaluate the limitation of the proposed adaptation approach.
Based on this baseline model, we show comparisons using
adversarial adaptation in the feature and output spaces. Fur-
thermore, we show that the multi-level adversarial learning
improves the results over single-level adaptation. In addi-
tion to the synthetic-to-real setting, we show experimental
results on the Cross-City dataset [3], where annotations are
provided in one city (source), while testing the model on
another unseen city (target). Overall, our method performs
favorably against state-of-the-art algorithms on numerous
benchmark datasets under different settings.

The contributions of this work are as follows. First,
we propose a domain adaptation method for pixel-level se-
mantic segmentation via adversarial learning. Second, we

demonstrate that adaptation in the output (segmentation)
space can effectively align scene layout and local context
between source and target images. Third, a multi-level ad-
versarial learning scheme is developed to adapt features at
different levels of the segmentation model, which leads to
improved performance.

2. Related Work

Semantic Segmentation. State-of-the-art semantic seg-
mentation methods are mainly based on the recent advances
of deep neural networks. As proposed by Long et al. [24],
one can transform a classiﬁcation CNN (e.g., AlexNet [19],
VGG [34], or ResNet [11]) to a fully-convolutional net-
work (FCN) for semantic segmentation. Numerous meth-
ods have since been developed to improve this model by
utilizing context information [15, 42] or enlarging receptive
ﬁelds [2, 40]. To train these advanced networks, a substan-
tial amount of dense pixel annotations must be collected in
order to match the model capacity of deep CNNs. As a re-
sult, weakly and semi-supervised approaches [5, 14, 17, 29,
30] are proposed in recent years to reduce the heavy label-
ing cost of collecting segmentation ground truths. However,
in most real-world applications, it is difﬁcult to obtain weak
annotations and the trained model may not generalize well
to unseen image domains.

Another approach to tackle the annotation problem is
to construct synthetic datasets based on rendering, e.g.,
GTA5 [32] and SYNTHIA [33]. While the data collection
is less costly since the pixel-level annotation can be done
with a partially automated process, these datasets are usu-
ally used in conjunction with real-world datasets for joint
learning to improve the performance. However, when train-
ing solely on the synthetic dataset, the model does not gen-
eralize well to real-world data, mainly due to the large do-
main shift between synthetic images and real-world images,
i.e., appearance differences are still signiﬁcant with current
rendering techniques. Although synthesizing more realistic
images can decrease the domain shift, it is necessary to use
domain adaptation to narrow the performance gap.

Domain Adaptation. Domain adaptation methods for
image classiﬁcation have been developed to address the
domain-shift problem between the source and target do-
mains. Numerous methods [7, 8, 25, 26, 35, 37, 38] are de-
veloped based on CNN classiﬁers due to performance gain.
The main insight behind these approaches is to tackle the
problem by aligning the feature distribution between source
and target images. Ganin et al. [7, 8] propose the Domain-
Adversarial Neural Network (DANN) to transfer the feature
distribution. A number of variants have since been proposed
with different loss functions [25, 37, 38] or classiﬁers [26].
Recently, the PixelDA method [1] addresses domain adap-
tation for image classiﬁcation by transferring the source im-

Figure 2. Algorithmic overview. Given images with the size H by W in source and target domains, we pass them through the segmentation
network to obtain output predictions. For source predictions with C categories, a segmentation loss is computed based on the source ground
truth. To make target predictions closer to the source ones, we utilize a discriminator to distinguish whether the input is from the source or
target domain. Then an adversarial loss is calculated on the target prediction and is back-propagated to the segmentation network. We call
this process as one adaptation module, and we illustrate our proposed multi-level adversarial learning by adopting two adaptation modules
at two different levels here.

ages to target domain, thereby obtaining a simulated train-
ing set for target images.

We note that domain adaptation for pixel-level prediction
tasks have not been explored widely. Hoffman et al. [13]
introduce the task of domain adaptation on semantic seg-
mentation by applying adversarial learning (i.e., DANN)
in a fully-convolutional way on feature representations and
additional category constraints similar to the constrained
CNN [30]. Other methods focus on adapting synthetic-to-
real or cross-city images by adopting class-wise adversarial
learning [3] or label transfer [3]. Similar to the PixelDA
method [1], one concurrent work, CyCADA [12] uses the
CycleGAN [44] and transfers source domain images to the
target domain with pixel alignment, thus generating extra
training data combined with feature space adversarial learn-
ing [13].

Although feature space adaptation has been successfully
applied to image classiﬁcation, pixel-level tasks such as
semantic segmentation remains challenging based on fea-
ture adaptation-based approaches. In this paper, we use the
property that pixel-level predictions are structured outputs
that contain information spatially and locally, to propose an
efﬁcient domain adaptation algorithm through adversarial
learning in the output space.

where i indicates the level of a discriminator in the multi-
level adversarial learning. Two sets of images ∈ RH×W ×3
from source and target domains are denoted as {IS} and
{IT }. We ﬁrst forward the source image Is (with annota-
tions) to the segmentation network for optimizing G. Then
we predict the segmentation softmax output Pt for the tar-
get image It (without annotations). Since our goal is to
make segmentation predictions P of source and target im-
ages (i.e., Ps and Pt) close to each other, we use these two
predictions as the input to the discriminator Di to distin-
guish whether the input is from the source or target domain.
With an adversarial loss on the target prediction, the net-
work propagates gradients from Di to G, which would en-
courage G to generate similar segmentation distributions in
the target domain to the source prediction. Figure 2 shows
the overview of the proposed algorithm.

3.2. Objective Function for Domain Adaptation

With the proposed network, we formulate the adaptation

task containing two loss functions from both modules:

L(Is, It) = Lseg(Is) + λadvLadv(It),

(1)

3. Algorithmic Overview

3.1. Overview of the Proposed Model

Our domain adaptation algorithm consists of two mod-
ules: a segmentation network G and the discriminator Di,

where Lseg is the cross-entropy loss using ground truth an-
notations in the source domain, and Ladv is the adversarial
loss that adapts predicted segmentations of target images to
the distribution of source predictions (see Section 4). In (1),
λadv is the weight used to balance the two losses.

4. Output Space Adaptation

Different from image classiﬁcation based on features
[8, 25] that describe the global visual information of the
image, high-dimensional features learned for semantic seg-
mentation encodes complex representations. As a result,
adaptation in the feature space may not be the best choice
for semantic segmentation. On the other hand, although
segmentation outputs are in the low-dimensional space, they
contain rich information, e.g., scene layout and context. Our
intuition is that no matter images are from the source or tar-
get domain, their segmentations should share strong simi-
larities, spatially and locally. Thus, we utilize this property
to adapt low-dimensional softmax outputs of segmentation
predictions via an adversarial learning scheme.

4.1. Single-level Adversarial Learning
Discriminator Training. Before introducing how to adapt
the segmentation network via adversarial learning, we ﬁrst
describe the training objective for the discriminator. Given
the segmentation softmax output P = G(I) ∈ RH×W ×C,
where C is the number of categories, we forward P to a
fully-convolutional discriminator D using a cross-entropy
loss Ld for the two classes (i.e., source and target). The loss
can be written as:

Ld(P ) = −

(1 − z) log(D(P )(h,w,0))

(2)

(cid:88)

h,w

+z log(D(P )(h,w,1)),

where z = 0 if the sample is drawn from the target domain,
and z = 1 for the sample from the source domain.
Segmentation Network Training. First, we deﬁne the seg-
mentation loss in (1) as the cross-entropy loss for images
from the source domain:
(cid:88)

(cid:88)

Y (h,w,c)
s

log(P (h,w,c)
s

),

(3)

Lseg(Is) = −

h,w

c∈C

where Ys is the ground truth annotations for source images
and Ps = G(Is) is the segmentation output.

Second, for images in the target domain, we forward
them to G and obtain the prediction Pt = G(It). To make
the distribution of Pt closer to Ps, we use an adversarial loss
Ladv in (1) as:

Ladv(It) = −

log(D(Pt)(h,w,1)).

(4)

(cid:88)

h,w

This loss is designed to train the segmentation network and
fool the discriminator by maximizing the probability of the
target prediction being considered as the source prediction.

4.2. Multi-level Adversarial Learning

Although performing adversarial learning in the output
space directly adapts predictions, low-level features may

not be adapted well as they are far away from the output.
Similar to the deep supervision method [20] that uses aux-
iliary loss for semantic segmentation [42], we incorporate
additional adversarial module in the low-level feature space
to enhance the adaptation. The training objective for the
segmentation network can be extended from (1) as:

L(Is, It) =

segLi
λi

seg(Is) +

advLi
λi

adv(It),

(5)

(cid:88)

i

(cid:88)

i

where i indicates the level used for predicting the segmen-
tation output. We note that, the segmentation output is
still predicted in each feature space, before passing through
individual discriminators for adversarial learning. Hence,
Li
adv(It) remain in the same form as in (3)
and (4), respectively. Based on (5), we optimize the follow-
ing min-max criterion:

seg(Is) and Li

max
D

min
G

L(Is, It).

(6)

The ultimate goal is to minimize the segmentation loss in
G for source images, while maximizing the probability of
target predictions being considered as source predictions.

5. Network Architecture and Training
Discriminator. For the discriminator, we use an architec-
ture similar to [31] but utilize all fully-convolutional lay-
ers to retain the spatial information. The network consists
of 5 convolution layers with kernel 4 × 4 and stride of 2,
where the channel number is {64, 128, 256, 512, 1}, re-
spectively. Except for the last layer, each convolution layer
is followed by a leaky ReLU [27] parameterized by 0.2. An
up-sampling layer is added to the last convolution layer for
re-scaling the output to the size of the input. We do not use
any batch-normalization layers [16] as we jointly train the
discriminator with the segmentation network using a small
batch size.
Segmentation Network. It is essential to build upon a good
baseline model to achieve high-quality segmentation results
[2, 40, 42]. We adopt the DeepLab-v2 [2] framework with
ResNet-101 [11] model pre-trained on ImageNet [6] as our
segmentation baseline network. However, we do not use
the multi-scale fusion strategy [2] due to the memory issue.
Similar to the recent work on semantic segmentation [2, 40],
we remove the last classiﬁcation layer and modify the stride
of the last two convolution layers from 2 to 1, making the
resolution of the output feature maps effectively 1/8 times
the input image size. To enlarge the receptive ﬁeld, we ap-
ply dilated convolution layers [40] in conv4 and conv5 lay-
ers with a stride of 2 and 4, respectively. After the last layer,
we use the Atrous Spatial Pyramid Pooling (ASPP) [2] as
the ﬁnal classiﬁer. Finally, we apply an up-sampling layer
along with the softmax output to match the size of the input
image. Based on this architecture, our segmentation model

Table 1. Results of adapting GTA5 to Cityscapes. We ﬁrst compare our results using single-level adversarial learning in the output space
with other state-of-the-art algorithms with the VGG-16 based model. Then we adopt the ResNet-101 based model and present ablation
study on different components of our proposed method.

GTA5 → Cityscapes

Method

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

FCNs in the Wild [13]
CDA [41]
CyCADA (feature) [12] 85.6 30.7 74.7 14.4 13.0 17.6 13.7 5.8 74.6 15.8 69.9 38.2 3.5 72.3 16.0 5.0 0.1 3.6 0.0
83.5 38.3 76.4 20.6 16.5 22.2 26.2 21.9 80.4 28.7 65.7 49.4 4.2 74.6 16.0 26.6 2.0 8.0 0.0
CyCADA (pixel) [12]
87.3 29.8 78.6 21.1 18.2 22.5 21.5 11.0 79.7 29.6 71.3 46.8 6.5 80.1 23.0 26.9 0.0 10.6 0.3
Ours (singel-level)

70.4 32.4 62.1 14.9 5.4 10.9 14.2 2.7 79.2 21.3 64.6 44.1 4.2 70.4 8.0 7.3 0.0 3.5 0.0
27.1
74.9 22.0 71.7 6.0 11.9 8.4 16.3 11.1 75.7 13.3 66.5 38.0 9.3 55.2 18.8 18.9 0.0 16.8 14.6 28.9
29.2
34.8
35.0

Baseline (ResNet)
Ours (feature)
Ours (single-level)
Ours (multi-level)

75.8 16.8 77.2 12.5 21.0 25.5 30.1 20.1 81.3 24.6 70.3 53.8 26.4 49.9 17.2 25.9 6.5 25.3 36.0 36.6
83.7 27.6 75.5 20.3 19.9 27.4 28.3 27.4 79.0 28.4 70.1 55.1 20.2 72.9 22.5 35.7 8.3 20.6 23.0 39.3
86.5 25.9 79.8 22.1 20.0 23.6 33.1 21.8 81.8 25.9 75.9 57.3 26.2 76.3 29.8 32.1 7.2 29.5 32.5 41.4
86.5 36.0 79.9 23.4 23.3 23.9 35.2 14.8 83.4 33.3 75.6 58.5 27.6 73.7 32.5 35.4 3.9 30.1 28.1 42.4

achieves 65.1% mean intersection-over-union (IoU) when
trained on the Cityscapes [4] training set and tested on the
Cityscapes validation set.

Multi-level Adaptation Model. We construct the above-
mentioned discriminator and segmentation network as our
single-level adaptation model. For the multi-level structure,
we extract feature maps from the conv4 layer and add an
ASPP module as the auxiliary classiﬁer. Similarly, a dis-
criminator with the same architecture is added for adversar-
ial learning. Figure 2 shows the proposed multi-level adap-
tation model. In this paper, we use two levels due to the
balance of its efﬁciency and accuracy.
Network Training. To train the proposed single/multi-level
adaptation model, we ﬁnd that jointly training the segmen-
tation network and discriminators in one stage is effective.
In each training batch, we ﬁrst forward the source image Is
to optimize the segmentation network for Lseg in (3) and
generate the output Ps. For the target image It, we obtain
the segmentation output Pt, and pass it along with Ps to the
discriminator for optimizing Ld in (2). In addition, we com-
pute the adversarial loss Ladv in (4) for the target prediction
Pt. For the multi-level training objective in (5), we simply
repeat the same procedure for each adaptation module.

We implement our network using the PyTorch toolbox
on a single Titan X GPU with 12 GB memory. To train
the segmentation network, we use the Stochastic Gradient
Descent (SGD) optimizer with Nesterov acceleration where
the momentum is 0.9 and the weight decay is 10−4. The
initial learning rate is set as 2.5 × 10−4 and is decreased
using the polynomial decay with power of 0.9 as mentioned
in [2]. For training the discriminator, we use the Adam op-
timizer [18] with the learning rate as 10−4 and the same
polynomial decay as the segmentation network. The mo-
mentum is set as 0.9 and 0.99.

Table 2. Performance gap between the adapted model and the
fully-supervised (oracle) model. We ﬁrst compare results with
state-of-the-art methods using the VGG based model, and then
show our result using the ResNet one.

GTA5 → Cityscapes

method

Baseline Adapt Oracle mIoU Gap

FCNs in the Wild [13]
CDA [41]
CyCADA (feature) [12]
CyCADA (pixel) [12]
Ours (single-level)

VGG-16

27.1
28.9
29.2
34.8
35.0

64.6
60.3
60.3
60.3
61.8

Ours (multi-level)

ResNet-101 42.4

65.1

-37.5
-31.4
-30.5
-24.9
-25.2

-22.7

6. Experimental Results

In this section, we present experimental results to val-
idate the proposed domain adaptation method for seman-
tic segmentation under different settings. First, we show
evaluations of the model trained on synthetic datasets (i.e.,
GTA5 [32] and SYNTHIA [33]) and test the adapted model
on real-world images from the Cityscapes [4] dataset. Ex-
tensive experiments including comparisons to the state-of-
the-art methods and ablation study are also conducted, e.g.,
adaptation in the feature/output spaces and single/multi-
level adversarial learning. Second, we carry out experi-
ments on the Cross-City dataset [3], where the model is
trained on one city and adapted to another city without
In all the experiments, the IoU met-
using annotations.
ric is used. The code and model are available at https:
//github.com/wasidennis/AdaptSegNet.

6.1. GTA5

The GTA5 dataset [32] consists of 24966 images with
the resolution of 1914 × 1052 synthesized from the video

game based on the city of Los Angeles. The ground truth
annotations are compatible with the Cityscapes dataset [4]
that contains 19 categories. Following [13], we use the full
set of GTA5 and adapt the model to the Cityscapes training
set with 2975 images. During testing, we evaluate on the
Cityscapes validation set with 500 images.

Overall Results. We present adaptation results in Table 1
with comparisons to the state-of-the-art domain adaptation
methods [12, 13, 41]. For these approaches, the baseline
model is trained using VGG-based architectures [24, 40].
To fairly evaluate our method, we ﬁrst use the same baseline
architecture (VGG-16) and train our model with the pro-
posed single-level adaptation module. Table 1 shows that
our method performs favorably against the other algorithms.
While these methods all have feature adaptation modules,
our results show that adapting the model in the output space
achieves better performance. We note that CyCADA [12]
has a pixel adaptation module by transforming source do-
main images to the target domain and hence obtains ad-
ditional training samples. Although this strategy achieves
a similar performance as ours, one can always apply pixel
transformation combined with our output space adaptation
to improve the results.

On the other hand, we argue that utilizing a stronger
baseline model is critical for understanding the importance
of different adaptation components as well as for enhancing
the performance to enable real-world applications. Thus,
we use the ResNet-101 based network introduced in Sec-
tion 5 and train the proposed adaptation model. Table 1
shows the baseline results only trained on source images
without adaptation, with comparisons to our adapted mod-
els under different settings, including feature adaptation and
single/multi-level adversarial learning in the output space.
Figure 3 presents some example results for adapted seg-
mentation. We note that for small objects such as poles and
trafﬁc signs, they are harder to adapt since they easily get
merged with background classes.

In addition, another factor to evaluate the adaptation per-
formance is to measure how much gap is narrowed be-
tween the adaptation model and the fully-supervised model.
Hence, we train the model using annotated ground truths
in the Cityscapes dataset as the oracle results. Table 2
shows the gap under different baseline models. We observe
that, although the oracle result does not differ a lot between
VGG-16 and ResNet-101 based models, the gap is larger for
the VGG one. It suggests us that to narrow the gap, using a
deeper model with larger capacity is more practical.
Parameter Analysis. During optimizing the segmentation
network G, it is essential to balance the weight between
segmentation and adversarial losses. We ﬁrst consider the
single-level case in (1) and conduct experiments to observe
the impact of changing λadv. Table 3 shows that a smaller
λadv may not facilitate the training process signiﬁcantly,

Table 3. Sensitivity analysis of λadv for feature/output space do-
main adaptation in the proposed method. We show that output
space adaptation can tolerate a wide range of λadv, while it is sen-
sitive to change λadv for feature adaptation.

GTA5 → Cityscapes

λadv

0.0005 0.001 0.002 0.004

Feature
Output Space

35.3
40.2

39.3
41.4

35.9
40.4

32.8
40.1

while a larger λadv may propagate incorrect gradients to
the network. We empirically choose λadv as 0.001 in the
single-level setting.
Feature Level v.s. Output Space Adaptation.
In the
single-level setting in (1), we compare results by using
feature-level or output space adaptation via adversarial
learning. For feature-level adaptation, we adopt a similar
strategy as used in [13, 3] and train our model accordingly.
Table 1 shows that the proposed adaptation method in the
output space performs better than the one in the feature
level.

In addition, Table 3 shows that adaptation in the feature
space is more sensitive to λadv, which causes the training
process more difﬁcult, while output space adaptation allows
for a wider range of λadv. One reason is that as feature
adaptation is performed in the high-dimensional space, the
problem for the discriminator becomes easier. Thus, such
an adapted model cannot effectively match distributions be-
tween source and target domains via adversarial learning.

Single-level v.s. Multi-level Adversarial Learning. We
have shown the merits of adopting adversarial learning in
the output space. In addition, we present the results of us-
ing multi-level adversarial learning in Table 1. Here, we
utilize an additional adversarial module (see Figure 2) and
jointly optimize (5) for two levels. To properly balance λi
seg
and λi
adv, we use the same weight as in the single-level set-
ting for the high-level output space (i.e., λ1
adv
= 0.001). Since the low-level output carries less informa-
tion to predict the segmentation, we use smaller weights for
both the segmentation and adversarial loss (i.e., λ2
seg = 0.1
and λ2
adv = 0.0002). Evaluation results show that our multi-
level adversarial adaptation further improves the segmenta-
tion accuracy. More results and analysis are presented in
the supplementary material.

seg = 1 and λ1

6.2. SYNTHIA

To adapt from the SYNTHIA to Cityscapes datasets,
we use the SYNTHIA-RAND-CITYSCAPES [33] set as
the source domain which contains 9400 images compati-
ble with the cityscapes annotated classes. Similar to [3],
we evaluate images on the Cityscapes validation set with 13

Table 4. Results of adapting SYNTHIA to Cityscapes. We ﬁrst compare our results using single-level adversarial learning in the output
space with other state-of-the-art algorithms with the VGG-16 based model. Then we adopt the ResNet-101 based model and present
ablation study on different components of our proposed method.

SYNTHIA → Cityscapes

Method

FCNs in the Wild [13]
CDA [41]
Cross-City [3]
Ours (single-level)

Baseline (ResNet)
Ours (feature)
Ours (single-level)
Ours (multi-level)

k
l
a
w
e
d
i
s

19.6
26.1
25.6
29.2

23.8
21.9
37.2
42.7

g
n
i
d
l
i
u
b

30.8
74.9
78.3
75.5

74.6
76.3
78.8
77.5

d
a
o
r

11.5
65.2
62.7
78.9

55.6
62.4
79.2
84.3

t
h
g
i
l

0.1
3.7
1.2
0.1

6.1
11.7
9.9
4.7

n
g
i
s

11.7
3.0
5.4
4.8

12.1
11.4
10.5
7.0

g
e
v

42.3
76.1
81.3
72.6

74.8
75.3
78.2
77.9

y
k
s

68.7
70.6
81.0
76.7

79.0
80.9
80.5
82.5

n
o
s
r
e
p

51.2
47.1
37.4
43.4

55.3
53.7
53.5
54.3

r
e
d
i
r

3.8
8.2
6.4
8.8

19.1
18.5
19.6
21.0

r
a
c

54.0
43.2
63.5
71.1

39.6
59.7
67.0
72.3

s
u
b

3.2
20.7
16.1
16.0

23.3
13.7
29.5
32.2

e
k
i
b
m

0.2
0.7
1.2
3.6

13.7
20.6
21.6
18.9

e
k
i
b

0.6
13.1
4.6
8.4

25.0
24.0
31.3
32.3

mIoU

22.9
34.8
35.7
37.6

38.6
40.8
45.9
46.7

Table 5. Performance gap between the adapted model and the
fully-supervised (oracle) model. We ﬁrst compare results with
state-of-the-art methods using the VGG based model, and then
show our result using the ResNet one.

SYNTHIA → Cityscapes

Method

Baseline Adapt Oracle mIoU Gap

FCNs in the Wild [13]
CDA [41]
Cross-City [3]
Ours (single-level)

VGG-16

22.9
34.8
35.7
37.6

73.8
69.6
73.8
68.4

Ours (multi-level)

ResNet-101 46.7

71.7

-50.9
-34.8
-38.1
-30.8

-25.0

classes. For the weight in (1) and (5), we use the same ones
as in the case of GTA5 dataset.

Table 4 shows evaluation results of the proposed algo-
rithm against the state-of-the-art methods [3, 13, 41] that
use feature adaptation. Similar to the experiments with the
GTA5 dataset, we ﬁrst utilize the same VGG-based model
and train our single-level adaptation model for fair com-
parisons. The experimental results suggest that adapting
the model in the output space performs better. Second, we
compare results using different components of the proposed
method with the ResNet based model. We show that the
multi-level adaptation module improves the results over the
baseline, feature space adaptation and single-level adapta-
tion models. In addition, we present comparisons of mean
IoU gap between adapted and oracle results in Table 5. Our
method achieves the smallest gap and is the only one that
can minimize the gap below 30%.

6.3. Cross-City Dataset

In addition to the synthetic-to-real adaptation for a larger
domain gap, we conduct experiment on the Cross-City
dataset [3] with smaller domain gaps between cities. The
dataset contains four different cities: Rio, Rome, Tokyo and

Taipei, in which each city has 3200 images without annota-
tions and 100 images with pixel-level ground truths for 13
classes. Similar to [3], we use the Cityscapes training set
as the source domain and adapt it to each target city using
3200 images, while 100 annotated images are used for eval-
uation. Since a smaller domain gap results in smaller output
differences, we use smaller weights for the adversarial loss
(i.e., λi
adv = 0.0005) when training our models, while the
weights for segmentation remain the same as previous ex-
periments.

We show our results in Table 6 with comparisons to [3]
and our baseline models under different settings. Again,
our ﬁnal multi-level model achieves consistent improve-
ment for different cities, which demonstrates the advantages
of the proposed adaptation method in the output space. Note
that the state-of-the-art method [3] uses a different baseline
model, and we present it as a reference to analyze how much
the proposed algorithm can improve.

7. Concluding Remarks

In this paper, we exploit the fact that segmentations
are structured outputs and share many similarities between
source and target domains. We tackle the domain adaptation
problem for semantic segmentation via adversarial learning
in the output space. To further enhance the adapted model,
we construct a multi-level adversarial network to effectively
perform output space domain adaptation at different feature
levels. Experimental results show that the proposed method
performs favorably against numerous baseline models and
the state-of-the-art algorithms. We hope that our proposed
method can be a generic adaptation model for a wide range
of pixel-level prediction tasks.

Acknowledgments. W.-C. Hung is supported in part by
the NSF CAREER Grant #1149783, gifts from Adobe and
NVIDIA. We especially thank Yan-Ting Liu for helping ex-

Table 6. Results of adapting Cityscapes to the Cross-City dataset. We construct our baseline model using the ResNet-101 architecture,
and compare results between feature adaptation and our multi-level adaptation method in the output space.

Cityscapes → Cross-City

k
l
a
w
e
d
i
s

29.3
34.3
28.6
34.2

43.9
47.3
44.2
44.7

35.4
31.3
30.8
26.0

28.6
33.4
31.9
29.5

g
n
i
d
l
i
u
b

84.5
87.7
85.5
88.3

79.0
82.5
83.0
84.6

72.8
78.7
76.6
77.8

80.0
86.6
84.1
85.2

d
a
o
r

79.5
83.9
78.8
83.9

74.2
76.6
73.7
76.2

83.4
82.9
81.5
81.5

78.6
83.5
82.1
81.7

t
h
g
i
l

0.0
13.0
16.6
18.8

2.4
12.6
6.1
9.3

12.3
14.2
15.3
17.8

13.1
12.7
25.7
26.4

n
g
i
s

22.2
41.9
40.1
40.2

7.5
22.5
18.1
25.5

12.7
24.5
20.2
26.8

7.6
16.4
13.2
15.6

g
e
v

y
k
s

r
a
c

s
u
b

n
o
s
r
e
p

29.5
37.7
42.4
47.8

39.3
43.0
51.0
55.3

42.7
48.6
49.4
55.8

16.8
17.6
28.1
31.0

r
e
d
i
r

13.0
22.4
20.7
21.7

10.3
19.8
22.1
32.7

21.5
33.3
33.3
38.0

9.4
13.7
12.0
12.5

e
k
i
b
m

25.9
39.1
45.5
48.3

27.9
29.4
48.3
43.0

8.9
11.5
24.3
24.5

26.5
44.4
43.5
47.3

e
k
i
b

1.0
5.3
6.1
8.6

10.9
16.7
28.4
27.6

40.3
45.9
51.6
50.8

9.9
18.5
20.9
27.7

mIoU

42.9
50.9
51.4
53.8

42.5
48.2
49.7
51.6

42.8
47.7
48.0
49.9

39.6
46.5
46.6
49.1

71.7
80.8
79.6
80.9

67.9
74.5
73.7
74.3

64.1
70.5
70.5
72.1

60.4
70.7
67.0
71.5

37.5
38.1
58.8
47.8

41.2
36.8
31.4
28.9

20.8
7.7
4.5
4.2

34.0
37.7
35.8
41.1

80.6
84.6
85.3
86.2

77.8
77.9
79.6
81.8

77.4
81.6
82.0
82.7

68.2
77.0
77.2
76.7

82.8
92.5
79.6
93.1

69.5
86.5
86.9
87.3

64.3
89.2
84.0
90.9

82.1
92.1
81.2
91.7

City

Method

Rome

Rio

Tokyo

Taipei

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Cross-City [3]
Our Baseline
Ours (feature)
Ours (output space)

Target Image

Ground Truth

Before Adaptation

Feature Adaptation

Ours

Figure 3. Example results of adapted segmentation for GTA5-to-Cityscapes. For each target image, we show results before adaptation,
with feature adaptation and our adapted segmentations in the output space.

Table 7. Results of adapting GTA5 to Cityscapes.

GTA5 → Cityscapes

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

Method

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

Vanilla-GAN 86.5 25.9 79.8 22.1 20.0 23.6 33.1 21.8 81.8 25.9 75.9 57.3 26.2 76.3 29.8 32.1 7.2 29.5 32.5 41.4
91.4 48.4 81.2 27.4 21.2 31.2 35.3 16.1 84.1 32.5 78.2 57.7 28.2 85.9 33.8 43.5 0.2 23.9 16.9 44.1
LS-GAN

Table 8. Results of adapting SYNTHIA to Cityscapes. mIoU and mIoU∗ are averaged over 16 and 13 categories, respectively.

SYNTHIA → Cityscapes

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

Method

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

s
u
b

e
k
i
b
m

e
k
i
b

mIoU mIoU∗

Vanilla-GAN 79.2 37.2 78.8 10.5 0.3 25.1 9.9 10.5 78.2 80.5 53.5 19.6 67.0 29.5 21.6 31.3
8.0 78.3 82.7 56.3 22.4 74.0 33.2 18.9 34.9
LS-GAN

84.0 40.5 79.3 10.4 0.2 22.7 6.5

39.5
40.8

45.9
47.6

Table 9. Results of adapting Synscapes to Cityscapes.

Synscapes → Cityscapes

Method

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l

n
g
i
s

g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
m

e
k
i
b

mIoU

Without Adaptation 81.8 40.6 76.1 23.3 16.8 36.9 36.8 40.1 83.0 34.8 84.9 59.9 37.7 78.5 20.4 20.5 7.8 27.3 52.5 45.3
94.2 60.9 85.1 29.1 25.2 38.6 43.9 40.8 85.2 29.7 88.2 64.4 40.6 85.8 31.5 43.0 28.3 30.5 56.7 52.7
Vanilla-GAN
94.2 60.5 85.0 29.2 25.6 39.8 43.4 43.8 85.2 35.9 88.3 63.2 41.1 87.2 30.8 44.2 29.8 28.5 53.7 53.1
LS-GAN

periments using LS-GAN and the Synscapes dataset, as in
the appendix.

[7] Y. Ganin and V. Lempitsky. Unsupervised domain adaptation

by backpropagation. In ICML, 2015. 2

References

[1] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised pixel-level domain adaptation with
generative adversarial networks. In CVPR, 2017. 2, 3
[2] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. CoRR, abs/1606.00915, 2016. 1, 2, 4, 5

[3] Y.-H. Chen, W.-Y. Chen, Y.-T. Chen, B.-C. Tsai, Y.-C. F.
Wang, and M. Sun. No more discrimination: Cross city
adaptation of road scene segmenters. In ICCV, 2017. 1, 2, 3,
5, 6, 7, 8

[4] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In CVPR, 2016. 2, 5, 6

[5] J. Dai, K. He, and J. Sun. Boxsup: Exploiting bounding
boxes to supervise convolutional networks for semantic seg-
mentation. In ICCV, 2015. 2

[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
CVPR, 2009. 4

[8] Y. Ganin, E. Ustinova, H. Ajakan, P. Germain, H. Larochelle,
F. Laviolette, M. Marchand, and V. Lempitsky. Domain-
adversarial training of neural networks. In JMLR, 2016. 1,
2, 4

[9] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for au-
In

the kitti vision benchmark suite.

tonomous driving?
CVPR, 2012. 1

[10] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In NIPS, 2014. 2

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 2, 4

[12] J. Hoffman, E. Tzeng, T. Park, J.-Y. Zhu, P. Isola, K. Saenko,
A. A. Efros, and T. Darrell. Cycada: Cycle-consistent adver-
sarial domain adaptation. CoRR, abs/1711.03213, 2017. 3,
5, 6

[13] J. Hoffman, D. Wang, F. Yu, and T. Darrell. Fcns in the
wild: Pixel-level adversarial and constraint-based adapta-
tion. CoRR, abs/1612.02649, 2016. 1, 3, 5, 6, 7

[14] S. Hong, H. Noh, and B. Han. Decoupled deep neural net-
work for semi-supervised semantic segmentation. In NIPS,
2015. 2

[15] W.-C. Hung, Y.-H. Tsai, X. Shen, Z. Lin, K. Sunkavalli,
X. Lu, and M.-H. Yang. Scene parsing with global context
embedding. In ICCV, 2017. 2

[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015. 4

[17] A. Khoreva, R. Benenson, J. Hosang, M. Hein, and
B. Schiele. Simple does it: Weakly supervised instance and
semantic segmentation. In CVPR, 2017. 2

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. In ICLR, 2015. 5

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, 2012. 2

Imagenet
In

[20] C. Lee, S. Xie, P. W. Gallagher, Z. Zhang, and Z. Tu. Deeply-

supervised nets. In AISTATS, 2015. 4

[21] G. Lin, C. Shen, A. van dan Hengel, and I. Reid. Efﬁcient
piecewise training of deep structured models for semantic
segmentation. In CVPR, 2016. 1

[22] M.-Y. Liu and O. Tuzel. Coupled generative adversarial net-

works. In NIPS, 2016. 2

[23] Z. Liu, X. Li, P. Luo, C. C. Loy, and X. Tang. Semantic im-
age segmentation via deep parsing network. In ICCV, 2015.
1

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 1, 2, 6
[25] M. Long, Y. Cao, J. Wang, and M. Jordan. Learning transfer-
able features with deep adaptation networks. In ICML, 2015.
1, 2, 4

[26] M. Long, H. Zhu, J. Wang, and M. I. Jordan. Unsupervised
domain adaptation with residual transfer networks. In NIPS,
2016. 2

[27] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectiﬁer nonlin-
earities improve neural network acoustic models. In ICML,
2013. 4

[28] X. Mao, Q. Li, H. Xie, R. Y. Lau, Z. Wang, and S. Paul Smol-
ley. Least squares generative adversarial networks. In ICCV,
2017. 10

[29] G. Papandreou, L.-C. Chen, K. Murphy, and A. L. Yuille.
Weakly-and semi-supervised learning of a dcnn for semantic
image segmentation. In ICCV, 2015. 2

[30] D. Pathak, P. Krahenbuhl, and T. Darrell. Constrained con-
volutional neural networks for weakly supervised segmenta-
tion. In ICCV, 2015. 2, 3

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. In ICLR, 2016. 2, 4

[32] S. R. Richter, V. Vineet, S. Roth, and V. Koltun. Playing for
data: Ground truth from computer games. In ECCV, 2016.
2, 5

[33] G. Ros, L. Sellart, J. Materzynska, D. Vazquez, and
A. Lopez. The SYNTHIA Dataset: A large collection of
synthetic images for semantic segmentation of urban scenes.
In CVPR, 2016. 2, 5, 6

[34] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In ICLR, 2015.
2

[35] K. Sohn, S. Liu, G. Zhong, X. Yu, M.-H. Yang, and M. Chan-
draker. Unsupervised domain adaptation for face recognition
in unlabeled videos. In ICCV, 2017. 2

[36] Y.-H. Tsai, X. Shen, Z. Lin, K. Sunkavalli, X. Lu, and M.-H.
Yang. Deep image harmonization. In CVPR, 2017. 1
[37] E. Tzeng, J. Hoffman, T. Darrell, and K. Saenko. Simultane-
ous deep transfer across domains and tasks. In ICCV, 2015.
2

[38] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversarial
discriminative domain adaptation. In CVPR, 2017. 2

[39] M. Wrenninge and J. Unger.

istic synthetic dataset for street scene parsing.
abs/1810.08705, 2018. 10

Synscapes: A photoreal-
CoRR,

[40] F. Yu and V. Koltun. Multi-scale context aggregation by di-

lated convolutions. In ICLR, 2016. 1, 2, 4, 6

[41] Y. Zhang, P. David, and B. Gong. Curriculum domain adap-
tation for semantic segmentation of urban scenes. In ICCV,
2017. 5, 6, 7

[42] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia. Pyramid scene

parsing network. In CVPR, 2017. 1, 2, 4

[43] S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet,
Z. Su, D. Du, C. Huang, and P. Torr. Conditional random
ﬁelds as recurrent neural networks. In ICCV, 2015. 1
[44] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. ICCV, 2017. 3

A. Least Squares Objective

To analyze the impact of different type of GANs in our
framework, we adopt the least-squares loss function in [28]
that claims to generate higher-quality results and perform
more stably during GAN training. The loss for discrimina-
tor training, similar to (2), can be written as:

LLS

d (P ) =

(cid:88)

(cid:16)

z

D(P )(h,w,1) − 1

(cid:17)2

(7)

h,w

+(1 − z)

(cid:16)

D(P )(h,w,0)(cid:17)2

,

where z = 0 if the sample is drawn from the target domain,
and z = 1 for the sample from the source domain. Similar
to (4), the adversarial loss can be written as:

LLS

adv(It) =

(cid:88)

(cid:16)

h,w

D(Pt)(h,w,1) − 1

(cid:17)2

.

(8)

We use the single-level adaptation network and the ResNet-
101 backbone as in the main paper, and all the other details
are the same. Results on Cityscapes using GTA5 and SYN-
THIA as the source domain are presented in Table 7 and
Table 8, respectively. We compare the performance of the
vanilla GAN (as in the main paper) and the least-squares
(LS) GAN. Both tables show that using the LS-GAN objec-
tive achieves a higher mean IoU.

B. Synscapes

The Synscapes dataset [39] is a photorealistic synthetic
dataset for street scene parsing. It consists of 25, 000 RGB
images at 1440 × 720 resolution. The ground truth annota-
tion adopts the Cityscapes convention that contains 19 cat-
egories. To adapt from Synscapes to Cityscapes, we use the
entire Synsacpes dataset as the source domain. In Table 9,
we show results without adaptation, with vanilla GAN, and
LS-GAN, using the single-level adaptation network and the
ResNet-101 backbone.

Since the domain gap between Cityscapes and Synscapes
is smaller than the case using either GTA5 or SYNTHIA
as the source domain, the performance without adaptation
already achieves a mean IoU of 45.3%. By further using
output space adaptation, the vanilla and LS GAN objectives
improve the results and perform competitively.

