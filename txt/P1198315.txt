0
2
0
2
 
r
a

M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
3
v
1
4
4
9
0
.
7
0
8
1
:
v
i
X
r
a

Two at Once: Enhancing Learning and
Generalization Capacities via IBN-Net

Xingang Pan1, Ping Luo1, Jianping Shi2, and Xiaoou Tang1

1 CUHK-SenseTime Joint Lab, The Chinese University of Hong Kong
{px117,pluo,xtang}@ie.cuhk.edu.hk
2 SenseTime Group Limited
shijianping@sensetime.com

Abstract. Convolutional neural networks (CNNs) have achieved great
successes in many computer vision problems. Unlike existing works that
designed CNN architectures to improve performance on a single task
of a single domain and not generalizable, we present IBN-Net, a novel
convolutional architecture, which remarkably enhances a CNN’s model-
ing ability on one domain (e.g. Cityscapes) as well as its generalization
capacity on another domain (e.g. GTA5) without ﬁnetuning. IBN-Net
carefully integrates Instance Normalization (IN) and Batch Normaliza-
tion (BN) as building blocks, and can be wrapped into many advanced
deep networks to improve their performances. This work has three key
contributions. (1) By delving into IN and BN, we disclose that IN learns
features that are invariant to appearance changes, such as colors, styles,
and virtuality/reality, while BN is essential for preserving content related
information. (2) IBN-Net can be applied to many advanced deep architec-
tures, such as DenseNet, ResNet, ResNeXt, and SENet, and consistently
improve their performance without increasing computational cost. 1 (3)
When applying the trained networks to new domains, e.g. from GTA5
to Cityscapes, IBN-Net achieves comparable improvements as domain
adaptation methods, even without using data from the target domain.
With IBN-Net, we won the 1st place on the WAD 2018 Challenge Driv-
able Area track, with an mIoU of 86.18%.

Keywords: Instance Normalization, Invariance, Generalization, CNNs

1 Introduction

Deep convolutional neural networks (CNNs) have improved performance of many
tasks in computer vision, such as image recognition [17], object detection [22],
and semantic segmentation [1]. However, existing works mainly design network
architectures to solve the above problems on a single domain, for example, im-
proving scene parsing on the real images of Cityscape dataset [2,21]. When these
networks are applied to the other domain of this scene parsing task, such as the
virtual images of GTA5 dataset [23], their performance would drop notably. This

1 Code and models are available at https://github.com/XingangPan/IBN-Net

2

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 1. (a) visualizes two example images (left) and their segmentation maps (right)
selected from Cityscapes [2] and GTA5 [23] respectively. These samples have simi-
lar categories and scene conﬁgurations when comparing their segmentation maps, but
their images are from diﬀerent domains, i.e. reality and virtuality. (b) shows simple ap-
pearance variations, while those of complex appearance variations are provided in (c).
(d) proves that Instance Normalization (IN) is able to ﬁlter out complex appearance
variance. The style transfer network used here is AdaIN [14]. (Best viewed in color)

is due to the appearance gap between the images of these two datasets, as shown
in Fig.1 (a).

A natural solution to solve the appearance gap is by using transfer learning.
For instance, by ﬁnetuning a CNN pretrained on Cityscapes using the data from
GTA5, we are able to adapt the features learned from Cityscapes to GTA5, where
accuracy can be increased. But even so, the appearance gap is not eliminated,
because when applying the ﬁnetuned CNN back to Cityscapes, the accuracy
would be signiﬁcantly degraded. How to address large diversity of appearances
by designing deep architectures? It is a key challenge in computer vision.

The answer is to induce appearance invariance into CNNs. This solution is
obvious but non-trivial. For example, there are many ways to produce the prop-
erty of spatial invariance in deep networks, such as max pooling [17], deformable
convolution [3], which are invariant to spatial variations like poses, viewpoints,
and scales, but are not invariant to variations of image appearances. As shown in
Fig.1 (b), when the appearance variance of two datasets are simple and known
beforehand, such as lightings and infrared, they can be reduced by explicitly
augmenting data. However, as shown in Fig.1 (c), when appearance variance are
complex and unknown, such as arbitrary image styles and virtuality, the CNNs
have to learn to reduce them by introducing new component into their deep
architectures.

To this end, we present IBN-Net, a novel convolutional architecture, which
learns to capture and eliminate appearance variance, while maintains discrimi-

IBN-Net

3

Fig. 2. (a) Feature divergence calculated from image sets with appearance diﬀerence
(blue) and content diﬀerence (orange). We show the results of the 17 features after the
residual blocks of ResNet50. The detailed deﬁnition of feature divergence is given in
Section 4.3. The orange bars are enlarged 10 times for better visualization.

nation of the learned features. IBN-Net carefully integrates Instance Normaliza-
tion (IN) and Batch Normalization (BN) as building blocks, enhancing both its
learning and generalization capacity. It has two appealing beneﬁts that previous
deep architectures do not have.

First, diﬀerent from previous CNN structures that isolate IN and BN, IBN-
Net uniﬁes them by delving into their learned features. For example, many recent
advanced deep architectures employed BN as a key component to improve their
learning capacity in high-level vision tasks such as image recognition [8,31,12,13],
while IN was often combined with CNNs to remove variance of images on low-
level vision tasks such as image style transfer [30,5,14]. But the diﬀerent char-
acteristics of their learned features and the impact of their combination have
not been disclosed in existing works. In contrast, IBN-Net shows that combin-
ing them in an appropriate manner improves both learning and generalization
capacities.

Second, our IBN-Net keeps IN and BN features in shallow layer and BN fea-
tures in higher layer, inheriting from the statistical merit of feature divergence
under diﬀerent depth of a network. As shown in Fig.2, the x-axis denotes the
depth of a network and the y-axis shows feature divergence calculated via sym-
metric KL divergence. When analyzing the depth-vs-divergence in ImageNet
original with its Monet version (blue bars), the divergence decreases as layer
depth increases, manifesting the appearance diﬀerence mainly lies in shallow
layers. On the contrary, compared with two disjoint ImageNet splits (orange
bar), the object level diﬀerence attributes to majorly higher layer divergence
and partially low layer ones. Based on these observations, we introduce IN lay-
ers to CNNs following two rules. Firstly, to reduce feature variance caused by
appearance in shallow layers while not interfering the content discrimination in
deep layers, we only add IN layers to the shallow half of the CNNs. Secondly, to
also preserve image content information in shallow layers, we replace the original
BN layers to IN for a half of features and BN for the other half. These give rise
to our IBN-Net.

Our contributions can be summarized as follows:

4

X. Pan, P. Luo, J. Shi, and X. Tang

(1) A novel deep structure, IBN-Net, is proposed to improve both learning
and generalization capacities of deep networks. For example, IBN-Net50 achieves
22.54%/6.32% and 51.57%/27.15% top1/top5 errors on the original validation
set of ImageNet [4] and a new validation set after style transformation respec-
tively, outperforming ResNet50 by 1.73%/0.76% and 2.17%/2.94%, when they
have similar numbers of parameters and computational cost.

(2) By delving into IN and BN, we disclose the key characteristics of their
learned features, where IN provides visual and appearance invariance, while BN
accelerates training and preserves discriminative features. This ﬁnding is im-
portant to understand them, and helpful to design the architecture of IBN-Net,
where IN is preferred in shallow layers to remove appearance variations, whereas
its strength in deep layers should be reduced in order to maintain discrimina-
tion. The component of IBN-Net can be used to re-develop many recent deep
architectures, improving both their learning and generalization capacities, but
keeping their computational cost unchanged. For example, by using IBN-Net,
DenseNet169 [13], ResNet101 [8], ResNeXt101 [31], and SE-ResNet101 [12], out-
perform their original versions by 0.79%, 1.09%, 0.43%, and 0.43% on ImageNet
respectively. These re-developed networks can be utilized as strong backbones in
many tasks in future researches.

(3) IBN-Net signiﬁcantly improves performance across domains. By taking
scene understanding as an example under a cross-evaluation setting, i.e. training
a CNN on Cityscapes and evaluating it on GTA5 without ﬁnetuning and vice
versa, ResNet50 integrated with IBN-Net improves its counterpart by 8.5% and
7.5% respectively. It also notably reduces sample size when ﬁnetuning GTA5
pretrained model on Cityscapes. For instance, it achieves a segmentation ac-
curacy of 65.5% when ﬁnetuning using just 30% training data from Cityscapes,
compared to 63.8% of ResNet50 alone, which is ﬁnetuned using all training data.

2 Related Works

The previous work related to IBN-Net are described in three aspects, including
invariance of CNNs, network architectures, and methods of domain adaptation
and generalization.

Invariance in CNNs. Several modules [17,3,25,30,15] have been proposed
to improve a CNN’s modeling capacity, or reduce overﬁtting to enhance its gen-
eralization capacity on a single domain. These methods typically achieved the
above purposes by introducing speciﬁc kinds of invariance into the architec-
tures of CNNs. For example, max pooling [17] and deformable convolution [3]
introduce spatial invariance to CNNs, thus increasing their robustness to spa-
tial variations such as aﬃne, distortion, and viewpoint transformations. And
dropout [25] and batch normalization (BN) [15] can be treated as regularizers
to reduce the eﬀects of sample noise in training. When image appearances are
presented, simple appearance variations such as color or brightness shift could
simply be eliminated by normalizing each RGB channel of an image with its
mean and standard deviation. For more complex appearance transforms such

IBN-Net

5

as style transformations, recent studies have found that such information could
be encoded in the mean and variance of the hidden feature maps [5,14]. There-
fore, the instance normalization (IN) [30] layer shows potential to eliminate such
appearance diﬀerences.

CNN Architectures. Since CNNs have shown compelling modeling capac-
ity over traditional methods, their architectures have gone through a number of
developments. Among them one of the most widely used is the residual network
(ResNet) [8], which uses short cut to alleviate training diﬃculties of very deep
networks. Since then a number of variants of ResNet were proposed. Compared
to ResNet, ResNeXt [31] improves modeling capacity by increasing ‘cardinality’
of ResNet. It is implemented by using group convolutions. In practice, increas-
ing cardinality increases runtime in modern deep learning frameworks. Moreover,
squeeze-and-excitation network (SENet) [12] introduces channel wise attention
into ResNet. It achieves better performance on ImageNet compared to ResNet,
but it also increases number of network parameters and computations. The re-
cently proposed densely connected networks (DenseNet) [13] uses concatenation
to replace short-cut connections. It was proved to be more eﬃcient than ResNet.
However, there are two limitations in the above CNN architectures. Firstly,
the limited basic modules prevent them from gaining more appealing properties.
For example, all these architectures are simply composed of convolutions, BNs,
ReLUs, and poolings. The only diﬀerence among them is how these modules
are organized. However, the composition of these layers are naturally vulner-
able by appearance variations. Secondly, the design goal of these models is to
achieve strong modeling capacity on a single task of a single domain, while their
capacities to generalize to new domains are still limited.

In the ﬁeld of image style transfer, some methods employ IN to help remove
image contrast [30,5,14]. Basically, this helps the models transfer images to dif-
ferent styles. However, the invariance property of image appearance has not been
successfully introduced to aforementioned CNNs, especially in high-level tasks
such as image classiﬁcation or semantic segmentation. This is because IN drops
useful content information presented in the hidden features, impeding modeling
capacity as proved in [30].

Improve Performances across Domains. Alleviating the drop of perfor-
mances caused by appearance gap between diﬀerent domains is an important
problem. One natural approach is to use transfer learning such as ﬁnetuning the
model on the target domain. However, this requires human annotations of the
target domain, and the performances of the ﬁnetuned models would then drop
when they are applied on the source domain. There are a number of domain
adaptation approaches which use the statistics of the target domain to facilitate
adaptation. Most of these works address the problem by reducing feature diver-
gences between two domains through carefully designed loss functions, like max-
imum mean discrepancy (MMD) [29,19], correlation alignment (CORAL) [26],
and adversarial loss [28,11]. Besides, [24] and [10] use generative adversarial net-
works (GAN) to transfer images between two domains to help adaptation, but
required independent models for the two domains. AdaBN [18] provides a sim-

6

X. Pan, P. Luo, J. Shi, and X. Tang

ple approach for domain adaptation simply by adjusting the statistics of all BN
layers using data from the target domain. Our method does not rely on any
speciﬁc target domain and there is no need to adjust any parameters. There are
two main limitations in transfer learning and domain adaptation. First, in real
applications it is expensive and diﬃcult to collect data that covers all possible
scenarios in the target domain. Second, most state-of-the-art methods employ
diﬀerent model weights for the source and target domains in order to improve
performance. But the ideal case is that one model could adapt to all domains.

Another paradigm towards this problem is domain generalization, which aims
to acquire knowledge from a number of related source domains and apply it to a
new target domain whose statistics is unknown during training. Existing meth-
ods typically design algorithms to learn domain agnostic representations or de-
sign models that capture common aspects from the domains, such as [16] [20] [6].
However, for real applications it is often hard to acquire data from a number
of related source domains, and the performance highly depends on the series of
source domains.

In this work, we increase the modeling capacity and generalization ability
across domains by designing a new CNN architecture, IBN-Net. The beneﬁt is
that we do not require either target domain data or related source domains, un-
like existing domain adaptation and generalization methods. The improvement of
generalization across domains is achieved by designing architectures with built-
in appearance invariance. Our method is extremely useful for the situations that
the target domain data are unobtainable, where traditional domain adaptation
cannot be applied. For more detailed comparison of our method with related
works, please refer to our supplementary material.

3 Method

3.1 Background

Batch normalization [15] enables larger learning rate and faster convergence
by reducing the internal covariate shift during training CNNs. It uses the mean
and variance of a mini-batch to normalize each feature channels during training,
while in inference phase, BN uses the global statistics to normalize features. Ex-
periments have shown that BN signiﬁcantly accelerates training, and could im-
prove the ﬁnal performance meanwhile. It has become a standard component in
most prevalent CNN architectures like Inception [27], ResNet [8], DenseNet [13],
etc.

Unlike batch normalization, instance normalization [30] uses the statistics
of an individual sample instead of mini-batch to normalize features. Another im-
portant diﬀerence between IN and BN is that IN applies the same normalize pro-
cedure for both training and inference. Instance normalization has been mainly
used in the style transfer ﬁeld [30,5,14]. The reason for IN’s success in style
transfer and similar tasks is that, these tasks try to change image appearance
while preserving content, and IN allows to ﬁlter out instance-speciﬁc contrast

IBN-Net

7

Fig. 3. Instance-batch normalization (IBN) block.

information from the content. Despite these successes, IN has not shown beneﬁts
for high-level vision tasks like image classiﬁcation and semantic segmentation.
Ulyanov et al [30] have given primary attempt adopting IN for image classiﬁca-
tion, but got worse results than CNNs with BN.

In a word, batch normalization preserves discrimination between individ-
ual samples, but also makes CNNs vulnerable to appearance transforms. And
instance normalization eliminates individual contrast, but diminishes useful in-
formation at the same time. Both methods have their limitations. In order to
introduce appearance invariance to CNNs without hurting feature discrimina-
tion, here we carefully unify them in a single deep hierarchy.

3.2

Instance-Batch Normalization Networks

Our architecture design is based on an important observation: as shown in
Fig. 2(a)(b), for BN based CNNs, the feature divergence caused by appearance
variance mainly lies in shallow half of the CNN, while the feature discrimination
for content is high in deep layers, but also exists in shallow layers. Therefore we
introduce INs following two rules. Firstly, in order not to diminish the content
discrimination in deep features, we do not add INs in the last part of CNNs. Sec-
ondly, in order to also preserve content information in shallow layers, we keep
part of the batch normalized features.

To provide instance for discussion, we describe our method based on the
classic residual networks (ResNet). ResNet mainly consists of four groups of
residual blocks, with each block having the structure as shown in Fig. 3(a).
Following our ﬁrst rule, we only add IN to the ﬁrst three groups (conv2 x-
conv4 x) and leave the fourth group (conv5 x) as before. For a residual block,
we apply BN for half channels and IN for the others after the ﬁrst convolution
layer in the residual path, as Fig. 3(b) shows. There are three reasons to do so.

8

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 4. Variants of IBN block.

Firstly, as [9] pointed out, a clean identity path is essential for optimizing ResNet,
so we add IN to the residual path instead of identity path. Secondly, in the
residual learning function y = F(x, {Wi}) + x, the residual function F(x, {Wi})
is learned to align with x in the identity path. Therefore IN is applied to the
ﬁrst normalization layer instead of the last to avoid misalignment. Thirdly, the
half BN half IN scheme comes from our second design rule as discussed before.
This gives rise to our instance-batch normalization network (IBN-Net).

This design is a pursuit of model capacity. On one hand, INs enable the
model to learn appearance invariant features so that it could better utilize the
images with high appearance diversity within one dataset. On the other hand,
INs are added in a moderate way so that content related information could be
well preserved. We denote this model as IBN-Net-a. To take full use of IN’s
potential for generalization, in this work we also study another version, which is
IBN-Net-b. Since appearance information could be either preserved in residual
path or identity path, we add IN right after the addition operation, as shown
in Fig. 3(c). To not deteriorate optimization for ResNet, we only add three IN
layers after the ﬁrst convolution layer (conv1) and the ﬁrst two convolution
groups (conv2 x, conv3 x).
Variants of IBN-Net.
The two types of IBN-Net described above are not the only ways to utilize
IN and BN in CNNs. In the experiments we will also study some interesting
variants, as shown in Fig. 4. For example, to keep both generalizable and dis-
criminative features, another natural idea is to feed the feature to both IN and
BN layers and then concatenate their outputs, as in Fig. 4(a), but this would
introduce more parameters. And the idea of keeping two kind of features also
be applied to the IBN-b, giving rise to Fig. 4(b). We may also combine these
schemes as Fig. 4(c)(d) do. Discussions about these variants would be given in
the experiments section.

Table 1. Results on ImageNet validation set with appearance transforms. The perfor-
mance drops are given in brackets.

IBN-Net

9

appearance
transform
origin

RGB+50

R+50

std ×1.5

Monet

ResNet50 [8]
top1/top5 err.
24.27/7.08
28.22/9.64
(3.94/2.56)
27.53/8.78
(3.26/1.70)
40.01/19.08
(15.74/12.00)
54.51/29.32
(30.24/22.24)

IBN-Net50-a
top1/top5 err.
22.54/6.32
25.54/8.03
(3.00/1.71)
25.20/7.56
(2.66/1.24)
35.97/16.22
(13.43/9.90)
51.57/27.15
(29.03/20.83)

IBN-Net50-b
top1/top5 err.
23.64/6.86
23.82/6.96
(0.18/0.10)
25.10/7.43
(1.46/0.57)
23.64/6.86
(0.00/0.00)
50.45/25.22
(26.81/18.36)

4 Experiments

We evaluate IBN-Net on both classiﬁcation and semantic segmentation tasks
on the ImageNet and Cityscapes-GTA5 dataset respectively. In both tasks, we
study our models’ modeling capacity within one dataset and their generalization
under appearance transforms.

4.1 ImageNet Classiﬁcation

We evaluate our method on the ImageNet [4] 2012 classiﬁcation dataset with
1000 object classes. It has 1.28 million images for training and 50k images for
validation. Data augmentation includes random scale, random aspect ratio, ran-
dom crop, and random ﬂip. We use the same training policy as in [7], and apply
224 × 224 center crop during testing.

Generalization to Appearance Transforms. We ﬁrst evaluate the mod-
els’ generalization to many kinds of appearance transforms including shift in
color, brightness, contrast, and style transform, which is realized using Cycle-
GAN [33]. The models are trained merely on ImageNet training set and evaluated
on validation set with the appearance transforms mentioned. The result for the
original ResNet50 and our IBN-Net versions are given in Table. 1.

From the results we can see that IBN-Net-a achieves both better generaliza-
tion and stronger capacity. When applied to images with new appearance do-
mains, it shows less performance drop than the original ResNet. Meanwhile, its
top1/top5 error on the original images is signiﬁcantly improved by 1.73%/0.76%,
showing that the model capacity is also improved. For IBN-Net-b, generalization
is signiﬁcantly enhanced, as the performance drops on new image domains are
largely reduced. This shows that IN does help CNNs to generalize. Meanwhile, its
performance on the original images also increases a little, showing that although
IN removed discrepancy of feature mean and variance, content information could
be well preserved in the spatial dimension.

Model Capacity. To demonstrate the stronger model capacity of IBN-Net
over traditional CNNs, we compare its performance with a number of recently
prevalent CNN architectures on the ImageNet validation set. As Table 2 shows,

10

X. Pan, P. Luo, J. Shi, and X. Tang

Table 2. Results of IBN-Net over other CNNs on ImageNet validation set. The perfor-
mance gains are shown in the brackets. More detailed descriptions of these IBN-Nets
are provided in the supplementary material.

Model

DenseNet121 [13]
DenseNet169 [13]
ResNet50 [8]
ResNet101 [8]
ResNeXt101 [31]
SE-ResNet101 [12]

original
top1/top5 err.
25.0/-
23.6/-
24.7/7.8
23.6/7.1
21.2/5.6
22.38/6.07

re-implementation
top1/top5 err.
24.96/7.85
24.02/7.06
24.27/7.08
22.48/6.23
21.31/5.74
21.68/5.88

IBN-Net-a
top1/top5 err.
24.47/7.25 (0.49/0.60)
23.25/6.51 (0.79/0.55)
22.54/6.32 (1.73/0.76)
21.39/5.59 (1.09/0.64)
20.88/5.42 (0.43/0.32)
21.25/5.51 (0.43/0.37)

Table 3. Results of IBN-Net variants on ImageNet validation set and Monet style set.

Model

ResNet50
IBN-Net50-a
IBN-Net50-b
IBN-Net50-c
IBN-Net50-d
IBN-Net50-a&d
IBN-Net50-a×2

origin
top1/top5 err.
24.26/7.08
22.54/6.32
23.64/6.86
22.78/6.32
22.86/6.48
22.89/6.48
22.81/6.46

Monet
top1/top5 err.
54.51/29.32 (30.24/22.24)
51.57/27.15 (29.03/20.83)
50.45/25.22 (26.81/18.36)
51.83/27.09 (29.05/20.77)
50.80/26.16 (27.94/19.68)
51.27/26.64 (28.38/20.16)
51.95/26.98 (29.14/20.52)

Table 4. Comparison of IBN-Net50-
a with IN layers added to diﬀerent
amount of residual groups.

Table 5. Eﬀects of the ratio of IN
channels in the IBN layers. ’full’ de-
notes ResNet50 with all BN layers re-
placed by IN.

Residual groups none

top1 err.
top5 err.

1

1-4
1-2
24.27 23.58 22.94 22.54 22.96
7.08 6.72 6.40 6.32 6.49

1-3

0

0.25

IN ratio
full
top1 err. 24.27 22.49 22.54 23.11 23.44 28.56
top5 err. 7.08 6.39 6.32 6.57 6.94 9.83

0.75

0.5

1

IBN-Net achieves consistent improvement over these CNNs, indicating stronger
model capacity. Speciﬁcally, IBN-ResNet101 gives comparable or higher accu-
racy than ResNeXt101 and SE-ResNet101, which either requires more time con-
sumption or introduces additional parameters. Note that our method brings
no additional parameters while only add marginal calculations during inference
phase. Our results show that, dropping out some mean and variance statistics in
features helps the model to learn from images with high appearance diversity.

IBN-Net variants. We further study some other variants of IBN-Net. Ta-
ble. 3 shows results for IBN-Net variants described in the method section. All our
IBN-Net variants show better performance than the original ResNet50 and less
performance drop under appearance transform. Speciﬁcally, IBN-Net-c achieves
similar performance as IBN-Net-a, providing an alternative feature combining
approach. The modeling and generalization capacity of IBN-Net-d lies in be-
tween IBN-Net a and b, which demonstrates that preserving some BN features

IBN-Net

11

help improve performance, but loses generalization meanwhile. The combination
of IBN-Net a and d makes little diﬀerence with d, showing that the eﬀects of INs
on the main path of ResNet would dominate, eliminating the eﬀects of those on
the residual path. Finally, adding additional IBN layers to IBN-Net-a brings no
good, a moderate amount of IN features would suﬃce.

On the amount of IN and BN. Here we study IBN-Nets with diﬀerent
amount of IN layers added. Table.4 gives performance of IBN-Net50-a with IN
layers added to diﬀerent amount of residual groups. It can be seen that the
performance is improved with more IN layers added to shallow layers, but de-
creased when IN layers are added to the last residual group. This indicates that
IN in shallow layers help to improve modelling capacity, while in deep layers
BN should be kept to preserve important content information. Furthermore, we
study the eﬀects of IN-BN ratio on the performance, as shown in Table.5. Again,
the best performance is achieved at a moderate ratio 0.25-0.5, demonstrating the
trade-oﬀ relationship between IN and BN.

4.2 Cross Domain Experiments

If models trained with synthetic data could be applied to the real world, it would
save much eﬀort for data collection and labelling. In this section we study our
model’s capacity to generalize across real and synthetic domains on Cityscapes
and GTA5 datasets.

Cityscapes [2] is a traﬃc scene dataset collect from a number of European
cities. It contains high resolution 2048×1024 images with pixel level annotations
of 34 categories. The dataset is divided into 2975 for training, 500 for validation,
and 1525 for testing.

GTA5 [23] is a similar street view dataset generated semi-automatically
from the realistic computer game Grand Theft Auto V (GTA5). It has 12403
training images, 6382 validation images, and 6181 testing images of resolution
1914 × 1052 and the labels have the same categories as in Cityscapes.

Implementation. During training, we use random scale, aspect ratio and
mirror for data augmentation. We apply random crop on full resolution images
for Cityscapes and 1024 × 563 resized images for GTA5, because this leads to
better performance for both datasets. We use the ”poly” learning rate policy
with base learning rate set to 0.01 and power set to 0.9. We train the models
for 80 epochs. Batch size, momentum and weight decay are set to 16, 0.9, and
0.0001 respectively. When training on GTA5, we use a quarter of the train data
so that the data scale matches that of Cityscapes.

As in [1], we use ResNet50 with atrous convolution strategy as our baseline,
and our IBN-Net follows the same modiﬁcation. We train the models on each
dataset and evaluate on both, the results are given in Table 6.

Results. Our results are consistent with those on the ImageNet dataset.
IBN-Net shows both stronger modeling capacity within one dataset and better
generalization across datasets of diﬀerent domains. Speciﬁcally, IBN-Net-a shows
stronger model capacity, outperforming ResNet50 by 4.6% and 3.8% on the
two datasets. And IBN-Net-b’s generalization is better, as the cross evaluation

12

X. Pan, P. Luo, J. Shi, and X. Tang

Table 6. Results on Cityscapes-GTA dataset. Mean IoU for both within domain eval-
uation and cross domain evaluation is reported.

Table 7. Comparison with domain adaptation methods. Note that our method does
not use target data to help adaptation.

Train

Test

mIoU(%) Pixel Acc.(%)

Cityscapes

Cityscapes

GTA5

GTA5

GTA5

Cityscapes

Model
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b

64.5
69.1
67.0
29.4
32.5
37.9
61.0
64.8
64.2
22.2
26.0
29.6

93.4
94.4
94.3
71.9
71.4
78.8
91.5
92.5
92.4
53.5
60.9
66.8

5.9

mIoU mIoU gain Target data
Method
21.2
Source only [11]
27.1
FCN wild [11]
22.3
Source only [32]
28.9
Curr. DA [32]
29.6
Source only [24]
37.1
GAN DA [24]
Ours - Source only
22.17
Ours - IBN - Source only 29.64

w/o

7.5

7.5

6.6

w/

w/

w/

Table 8. Finetune with diﬀerent data percent.

Data for ﬁnetune (%) 10
ResNet50
IBN-Net50-a

100
52.7 54.2 58.7 63.84
56.5 60.5 65.5 68.78

20

30

performance is increased by 8.5% from Cityscapes to GTA5 and 7.5% for the
opposite direction.

Comparison with domain adaptation methods. It should be mentioned
that our method is under the diﬀerent setting with the domain adaptation works.
Domain adaptation is target domain oriented and requires target domain data
during training, while our method does not. Despite so, we show that the per-
formance gain of our method is comparable with those of domain adaptation
methods, as Table. 7 shows. Our approach takes an important step towards
more generalizable models since we introduce built-in appearance invariance to
the model instead of forcing it to ﬁt into a speciﬁc data domain.

Finetune on Cityscapes. Another commonly used approach to apply a
model on new data domain is to ﬁnetune it with a small amount of target
domain annotations. Here we show that with our more generalizable model,
the data required for ﬁnetuning could be signiﬁcantly reduced. We ﬁnetune the
models pretrained on the GTA5 dataset with diﬀerent amount of Cityscapes data

IBN-Net

13

and labels. The initial learning rate and the number of epochs is set to 0.003 and
80 respectively. As Table. 8 shows, with only 30% of Cityscapes training data,
IBN-Net50-a outperforms resnet50 ﬁnetuned on all the data.

4.3 Feature Divergence Analysis

In order to understand how IBN-Net achieves better generalization, we analyse
the feature divergence caused by domain bias in this section. Similar to [18], our
metric for feature divergence is as follows. For the output feature of a certain
layer in a CNN, we denote the mean value of a channel as F , which basically
describes how much this channel is activated. We assume a Gaussian distribution
of F , with mean µ and variance σ2. Then the symmetric KL divergence of this
channel between domain A and B would be:

D(FA||FB) = KL(FA||FB) + KL(FB||FA)

KL(FA||FB) = log

+

σB
σA

A + (µA − µB)2
σ2
2σ2
B

−

1
2

Denote D(FiA||FiB) as the symmetric KL divergence of the ith channel, then
the average feature divergence of the layer would be:

(1)

(2)

(3)

D(LA||LB) =

D(FiA||FiB)

1
C

C
(cid:88)

i=1

where C is the number of channels in this layer. This metric provides a mea-
surement of the distance between feature distribution for domain A and that for
domain B.

To capture the eﬀects of instance normalization on appearance information
and content information, here we consider three groups of domains. The ﬁrst
two groups are ”Cityscapes-GTA5” and ”photo-Monet”, which diﬀers in com-
plex appearance. To build two domains with diﬀerent contents, we split the
ImageNet-1k validation set into two parts, with the ﬁrst part containing images
with 500 object categories and the second part containing those with the other
500 categories. Then we calculate the feature divergence of the 17 ReLU layers
on the main path of ResNet50 and IBN-Net50. The results are shown in Fig. 5.
It can be seen from Fig. 5(a)(b) that in our IBN-Net, the feature divergence
caused by appearance diﬀerence is signiﬁcantly reduced. For IBN-Net-a the di-
vergence decreases moderately while for IBN-Net-b it encounters sudden drop
after IN layer at position 2,4,8. And this eﬀect lasts till deep layers where IN
is not added, which implies that the variance encoding appearance is reduced
in deep features, so that their interference with classiﬁcation is reduced. On the
other hand, the feature divergence caused by content diﬀerence does not drop in
IBN-Net, as Fig. 5(c) shows, showing that the content information in features
are well preserved in BN layers.

Discussions. These results give us an intuition of how IBN-Net gains stronger
generalization. By introducing IN layers to CNNs in a clever and moderate way,

14

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 5. Feature divergence caused by (a) real-virtual appearance gap, (b) style gap,
(c) object class diﬀerence.

they could work in a manner that helps to ﬁlter out the appearance variance
within features. In this way the models’ robustness to appearance transforms is
improved, as shown in our experiments.

Note that generalization and modelling capacity are not uncorrelated prop-
erties. On one hand, intuitively appearance invariance could also help the model
to better adapt to the training data of high appearance diversity and extract
their common aspects. On the other hand, even within one dataset, appearance
gap exists between the training and testing set, in which case stronger gener-
alization would also improve performance. These could be the reasons for the
stronger modelling capacity of IBN-Net.

5 Conclusions

In this work we propose IBN-Net, which carefully uniﬁes instance normaliza-
tion and batch normalization layers in a single deep network to increase both
modeling and generalization capacity. We show that IBN-Net achieves consistent
improvement over a number of classic CNNs including VGG, ResNet, ResNeXt,
and SENet on ImageNet dataset. Moreover, the built-in appearance invariance
introduced by IN helps our model to generalize across image domains even with-
out the use of target domain data. Our work concludes the role of IN and BN
layers in CNNs: IN introduces appearance invariance and improves generaliza-
tion while BN preserves content information in discriminative features.

Acknowledgement. This work is partially supported by SenseTime Group
Limited, the Hong Kong Innovation and Technology Support Programme, and
the National Natural Science Foundation of China (61503366).

IBN-Net

15

References

1. Chen, L., Papandreou, G., Kokkinos, I., Murphy, K., Yuille, A.: Deeplab: Semantic
image segmentation with deep convolutional nets, atrous convolution, and fully
connected crfs. TPAMI (2017)

2. Cordts, M., Omran, M., Ramos, S., Rehfeld, T., Enzweiler, M., Benenson, R.,
Franke, U., Roth, S., Schiele, B.: The cityscapes dataset for semantic urban scene
understanding. CVPR (2016)

3. Dai, J., Qi, H., Xiong, Y., Li, Y., Zhang, G., Hu, H., Wei, Y.: Deformable convo-

lutional networks. ICCV (2017)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: Imagenet: A large-scale

hierarchical image database. CVPR (2009)

5. Dumoulin, V., Shlens, J., Kudlur, M.: A learned representation for artistic style.

6. Ghifary, M., Bastiaan Kleijn, W., Zhang, M., Balduzzi, D.: Domain generalization

for object recognition with multi-task autoencoders. ICCV (2015)

7. Gross,

S., Wilber, M.: Training

and

investigating

residual

nets.

https://github.com/ facebook/fb.resnet.torch (2016)

8. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition.

9. He, K., Zhang, X., Ren, S., Sun, J.: Identity mappings in deep residual networks.

ICLR (2017)

CVPR (2016)

ECCV (2016)

10. Hoﬀman, J., Tzeng, E., Park, T., Zhu, J.Y., Isola, P., Saenko, K., Efros, A.A., Dar-
rell, T.: Cycada: Cycle-consistent adversarial domain adaptation. arXiv preprint
arXiv:1711.03213 (2017)

11. Hoﬀman, J., Wang, D., Yu, F., Darrell, T.: Fcns in the wild: Pixel-level adversarial

and constraint-based adaptation. arXiv preprint arXiv:1612.02649 (2016)

12. Hu, J., Shen, L., Sun, G.: Squeeze-and-excitation networks. arXiv preprint

13. Huang, G., Liu, Z., Weinberger, K.Q., van der Maaten, L.: Densely connected

14. Huang, X., Belongie, S.: Arbitrary style transfer in real-time with adaptive instance

arXiv:1709.01507 (2017)

convolutional networks. CVPR (2017)

normalization. ICCV (2017)

15. Ioﬀe, S., Szegedy, C.: Batch normalization: Accelerating deep network training by

reducing internal covariate shift. ICML (2015)

16. Khosla, A., Zhou, T., Malisiewicz, T., Efros, A.A., Torralba, A.: Undoing the

17. Krizhevsky, A., Sutskever, I., Hinton, G.E.: Imagenet classiﬁcation with deep con-

damage of dataset bias. ECCV (2012)

volutional neural networks. NIPS (2012)

18. Li, Y., Wang, N., Shi, J., Liu, J., Hou, X.: Revisiting batch normalization for

practical domain adaptation. arXiv preprint arXiv:1603.04779 (2016)

19. Long, M., Cao, Y., Wang, J., Jordan, M.: Learning transferable features with deep

20. Muandet, K., Balduzzi, D., Sch¨olkopf, B.: Domain generalization via invariant

adaptation networks. ICML (2015)

feature representation. ICML (2013)

21. Pan, X., Shi, J., Luo, P., Wang, X., Tang, X.: Spatial as deep: Spatial cnn for

traﬃc scene understanding. AAAI (2018)

22. Ren, S., He, K., Girshick, R., Sun, J.: Faster r-cnn: Towards real-time object de-

tection with region proposal networks. NIPS (2015)

16

X. Pan, P. Luo, J. Shi, and X. Tang

23. Richter, S.R., Vineet, V., Roth, S., Koltun, V.: Playing for data: Ground truth

from computer games. ECCV (2016)

24. Sankaranarayanan, S., Balaji, Y., Jain, A., Lim, S.N., Chellappa, R.: Unsuper-
vised domain adaptation for semantic segmentation with gans. arXiv preprint
arXiv:1711.06969 (2017)

25. Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., Salakhutdinov, R.:
Dropout: A simple way to prevent neural networks from overﬁtting. The Jour-
nal of Machine Learning Research (2014)

26. Sun, B., Saenko, K.: Deep coral: Correlation alignment for deep domain adaptation.

ECCV (2016)

27. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A., et al.: Going deeper with convolutions. CVPR
(2015)

28. Tzeng, E., Hoﬀman, J., Saenko, K., Darrell, T.: Adversarial discriminative domain

adaptation. CVPR (2017)

29. Tzeng, E., Hoﬀman, J., Zhang, N., Saenko, K., Darrell, T.: Deep domain confusion:

Maximizing for domain invariance. arXiv preprint arXiv:1412.3474 (2014)

30. Ulyanov, D., Vedaldi, A., Lempitsky, V.: Improved texture networks: Maximiz-
ing quality and diversity in feed-forward stylization and texture synthesis. CVPR
(2017)

31. Xie, S., Girshick, R., Doll´ar, P., Tu, Z., He, K.: Aggregated residual transformations

32. Zhang, Y., David, P., Gong, B.: Curriculum domain adaptation for semantic seg-

for deep neural networks. CVPR (2017)

mentation of urban scenes. ICCV (2017)

33. Zhu, J.Y., Park, T., Isola, P., Efros, A.A.: Unpaired image-to-image translation

using cycle-consistent adversarial networks. ICCV (2017)

0
2
0
2
 
r
a

M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
3
v
1
4
4
9
0
.
7
0
8
1
:
v
i
X
r
a

Two at Once: Enhancing Learning and
Generalization Capacities via IBN-Net

Xingang Pan1, Ping Luo1, Jianping Shi2, and Xiaoou Tang1

1 CUHK-SenseTime Joint Lab, The Chinese University of Hong Kong
{px117,pluo,xtang}@ie.cuhk.edu.hk
2 SenseTime Group Limited
shijianping@sensetime.com

Abstract. Convolutional neural networks (CNNs) have achieved great
successes in many computer vision problems. Unlike existing works that
designed CNN architectures to improve performance on a single task
of a single domain and not generalizable, we present IBN-Net, a novel
convolutional architecture, which remarkably enhances a CNN’s model-
ing ability on one domain (e.g. Cityscapes) as well as its generalization
capacity on another domain (e.g. GTA5) without ﬁnetuning. IBN-Net
carefully integrates Instance Normalization (IN) and Batch Normaliza-
tion (BN) as building blocks, and can be wrapped into many advanced
deep networks to improve their performances. This work has three key
contributions. (1) By delving into IN and BN, we disclose that IN learns
features that are invariant to appearance changes, such as colors, styles,
and virtuality/reality, while BN is essential for preserving content related
information. (2) IBN-Net can be applied to many advanced deep architec-
tures, such as DenseNet, ResNet, ResNeXt, and SENet, and consistently
improve their performance without increasing computational cost. 1 (3)
When applying the trained networks to new domains, e.g. from GTA5
to Cityscapes, IBN-Net achieves comparable improvements as domain
adaptation methods, even without using data from the target domain.
With IBN-Net, we won the 1st place on the WAD 2018 Challenge Driv-
able Area track, with an mIoU of 86.18%.

Keywords: Instance Normalization, Invariance, Generalization, CNNs

1 Introduction

Deep convolutional neural networks (CNNs) have improved performance of many
tasks in computer vision, such as image recognition [17], object detection [22],
and semantic segmentation [1]. However, existing works mainly design network
architectures to solve the above problems on a single domain, for example, im-
proving scene parsing on the real images of Cityscape dataset [2,21]. When these
networks are applied to the other domain of this scene parsing task, such as the
virtual images of GTA5 dataset [23], their performance would drop notably. This

1 Code and models are available at https://github.com/XingangPan/IBN-Net

2

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 1. (a) visualizes two example images (left) and their segmentation maps (right)
selected from Cityscapes [2] and GTA5 [23] respectively. These samples have simi-
lar categories and scene conﬁgurations when comparing their segmentation maps, but
their images are from diﬀerent domains, i.e. reality and virtuality. (b) shows simple ap-
pearance variations, while those of complex appearance variations are provided in (c).
(d) proves that Instance Normalization (IN) is able to ﬁlter out complex appearance
variance. The style transfer network used here is AdaIN [14]. (Best viewed in color)

is due to the appearance gap between the images of these two datasets, as shown
in Fig.1 (a).

A natural solution to solve the appearance gap is by using transfer learning.
For instance, by ﬁnetuning a CNN pretrained on Cityscapes using the data from
GTA5, we are able to adapt the features learned from Cityscapes to GTA5, where
accuracy can be increased. But even so, the appearance gap is not eliminated,
because when applying the ﬁnetuned CNN back to Cityscapes, the accuracy
would be signiﬁcantly degraded. How to address large diversity of appearances
by designing deep architectures? It is a key challenge in computer vision.

The answer is to induce appearance invariance into CNNs. This solution is
obvious but non-trivial. For example, there are many ways to produce the prop-
erty of spatial invariance in deep networks, such as max pooling [17], deformable
convolution [3], which are invariant to spatial variations like poses, viewpoints,
and scales, but are not invariant to variations of image appearances. As shown in
Fig.1 (b), when the appearance variance of two datasets are simple and known
beforehand, such as lightings and infrared, they can be reduced by explicitly
augmenting data. However, as shown in Fig.1 (c), when appearance variance are
complex and unknown, such as arbitrary image styles and virtuality, the CNNs
have to learn to reduce them by introducing new component into their deep
architectures.

To this end, we present IBN-Net, a novel convolutional architecture, which
learns to capture and eliminate appearance variance, while maintains discrimi-

IBN-Net

3

Fig. 2. (a) Feature divergence calculated from image sets with appearance diﬀerence
(blue) and content diﬀerence (orange). We show the results of the 17 features after the
residual blocks of ResNet50. The detailed deﬁnition of feature divergence is given in
Section 4.3. The orange bars are enlarged 10 times for better visualization.

nation of the learned features. IBN-Net carefully integrates Instance Normaliza-
tion (IN) and Batch Normalization (BN) as building blocks, enhancing both its
learning and generalization capacity. It has two appealing beneﬁts that previous
deep architectures do not have.

First, diﬀerent from previous CNN structures that isolate IN and BN, IBN-
Net uniﬁes them by delving into their learned features. For example, many recent
advanced deep architectures employed BN as a key component to improve their
learning capacity in high-level vision tasks such as image recognition [8,31,12,13],
while IN was often combined with CNNs to remove variance of images on low-
level vision tasks such as image style transfer [30,5,14]. But the diﬀerent char-
acteristics of their learned features and the impact of their combination have
not been disclosed in existing works. In contrast, IBN-Net shows that combin-
ing them in an appropriate manner improves both learning and generalization
capacities.

Second, our IBN-Net keeps IN and BN features in shallow layer and BN fea-
tures in higher layer, inheriting from the statistical merit of feature divergence
under diﬀerent depth of a network. As shown in Fig.2, the x-axis denotes the
depth of a network and the y-axis shows feature divergence calculated via sym-
metric KL divergence. When analyzing the depth-vs-divergence in ImageNet
original with its Monet version (blue bars), the divergence decreases as layer
depth increases, manifesting the appearance diﬀerence mainly lies in shallow
layers. On the contrary, compared with two disjoint ImageNet splits (orange
bar), the object level diﬀerence attributes to majorly higher layer divergence
and partially low layer ones. Based on these observations, we introduce IN lay-
ers to CNNs following two rules. Firstly, to reduce feature variance caused by
appearance in shallow layers while not interfering the content discrimination in
deep layers, we only add IN layers to the shallow half of the CNNs. Secondly, to
also preserve image content information in shallow layers, we replace the original
BN layers to IN for a half of features and BN for the other half. These give rise
to our IBN-Net.

Our contributions can be summarized as follows:

4

X. Pan, P. Luo, J. Shi, and X. Tang

(1) A novel deep structure, IBN-Net, is proposed to improve both learning
and generalization capacities of deep networks. For example, IBN-Net50 achieves
22.54%/6.32% and 51.57%/27.15% top1/top5 errors on the original validation
set of ImageNet [4] and a new validation set after style transformation respec-
tively, outperforming ResNet50 by 1.73%/0.76% and 2.17%/2.94%, when they
have similar numbers of parameters and computational cost.

(2) By delving into IN and BN, we disclose the key characteristics of their
learned features, where IN provides visual and appearance invariance, while BN
accelerates training and preserves discriminative features. This ﬁnding is im-
portant to understand them, and helpful to design the architecture of IBN-Net,
where IN is preferred in shallow layers to remove appearance variations, whereas
its strength in deep layers should be reduced in order to maintain discrimina-
tion. The component of IBN-Net can be used to re-develop many recent deep
architectures, improving both their learning and generalization capacities, but
keeping their computational cost unchanged. For example, by using IBN-Net,
DenseNet169 [13], ResNet101 [8], ResNeXt101 [31], and SE-ResNet101 [12], out-
perform their original versions by 0.79%, 1.09%, 0.43%, and 0.43% on ImageNet
respectively. These re-developed networks can be utilized as strong backbones in
many tasks in future researches.

(3) IBN-Net signiﬁcantly improves performance across domains. By taking
scene understanding as an example under a cross-evaluation setting, i.e. training
a CNN on Cityscapes and evaluating it on GTA5 without ﬁnetuning and vice
versa, ResNet50 integrated with IBN-Net improves its counterpart by 8.5% and
7.5% respectively. It also notably reduces sample size when ﬁnetuning GTA5
pretrained model on Cityscapes. For instance, it achieves a segmentation ac-
curacy of 65.5% when ﬁnetuning using just 30% training data from Cityscapes,
compared to 63.8% of ResNet50 alone, which is ﬁnetuned using all training data.

2 Related Works

The previous work related to IBN-Net are described in three aspects, including
invariance of CNNs, network architectures, and methods of domain adaptation
and generalization.

Invariance in CNNs. Several modules [17,3,25,30,15] have been proposed
to improve a CNN’s modeling capacity, or reduce overﬁtting to enhance its gen-
eralization capacity on a single domain. These methods typically achieved the
above purposes by introducing speciﬁc kinds of invariance into the architec-
tures of CNNs. For example, max pooling [17] and deformable convolution [3]
introduce spatial invariance to CNNs, thus increasing their robustness to spa-
tial variations such as aﬃne, distortion, and viewpoint transformations. And
dropout [25] and batch normalization (BN) [15] can be treated as regularizers
to reduce the eﬀects of sample noise in training. When image appearances are
presented, simple appearance variations such as color or brightness shift could
simply be eliminated by normalizing each RGB channel of an image with its
mean and standard deviation. For more complex appearance transforms such

IBN-Net

5

as style transformations, recent studies have found that such information could
be encoded in the mean and variance of the hidden feature maps [5,14]. There-
fore, the instance normalization (IN) [30] layer shows potential to eliminate such
appearance diﬀerences.

CNN Architectures. Since CNNs have shown compelling modeling capac-
ity over traditional methods, their architectures have gone through a number of
developments. Among them one of the most widely used is the residual network
(ResNet) [8], which uses short cut to alleviate training diﬃculties of very deep
networks. Since then a number of variants of ResNet were proposed. Compared
to ResNet, ResNeXt [31] improves modeling capacity by increasing ‘cardinality’
of ResNet. It is implemented by using group convolutions. In practice, increas-
ing cardinality increases runtime in modern deep learning frameworks. Moreover,
squeeze-and-excitation network (SENet) [12] introduces channel wise attention
into ResNet. It achieves better performance on ImageNet compared to ResNet,
but it also increases number of network parameters and computations. The re-
cently proposed densely connected networks (DenseNet) [13] uses concatenation
to replace short-cut connections. It was proved to be more eﬃcient than ResNet.
However, there are two limitations in the above CNN architectures. Firstly,
the limited basic modules prevent them from gaining more appealing properties.
For example, all these architectures are simply composed of convolutions, BNs,
ReLUs, and poolings. The only diﬀerence among them is how these modules
are organized. However, the composition of these layers are naturally vulner-
able by appearance variations. Secondly, the design goal of these models is to
achieve strong modeling capacity on a single task of a single domain, while their
capacities to generalize to new domains are still limited.

In the ﬁeld of image style transfer, some methods employ IN to help remove
image contrast [30,5,14]. Basically, this helps the models transfer images to dif-
ferent styles. However, the invariance property of image appearance has not been
successfully introduced to aforementioned CNNs, especially in high-level tasks
such as image classiﬁcation or semantic segmentation. This is because IN drops
useful content information presented in the hidden features, impeding modeling
capacity as proved in [30].

Improve Performances across Domains. Alleviating the drop of perfor-
mances caused by appearance gap between diﬀerent domains is an important
problem. One natural approach is to use transfer learning such as ﬁnetuning the
model on the target domain. However, this requires human annotations of the
target domain, and the performances of the ﬁnetuned models would then drop
when they are applied on the source domain. There are a number of domain
adaptation approaches which use the statistics of the target domain to facilitate
adaptation. Most of these works address the problem by reducing feature diver-
gences between two domains through carefully designed loss functions, like max-
imum mean discrepancy (MMD) [29,19], correlation alignment (CORAL) [26],
and adversarial loss [28,11]. Besides, [24] and [10] use generative adversarial net-
works (GAN) to transfer images between two domains to help adaptation, but
required independent models for the two domains. AdaBN [18] provides a sim-

6

X. Pan, P. Luo, J. Shi, and X. Tang

ple approach for domain adaptation simply by adjusting the statistics of all BN
layers using data from the target domain. Our method does not rely on any
speciﬁc target domain and there is no need to adjust any parameters. There are
two main limitations in transfer learning and domain adaptation. First, in real
applications it is expensive and diﬃcult to collect data that covers all possible
scenarios in the target domain. Second, most state-of-the-art methods employ
diﬀerent model weights for the source and target domains in order to improve
performance. But the ideal case is that one model could adapt to all domains.

Another paradigm towards this problem is domain generalization, which aims
to acquire knowledge from a number of related source domains and apply it to a
new target domain whose statistics is unknown during training. Existing meth-
ods typically design algorithms to learn domain agnostic representations or de-
sign models that capture common aspects from the domains, such as [16] [20] [6].
However, for real applications it is often hard to acquire data from a number
of related source domains, and the performance highly depends on the series of
source domains.

In this work, we increase the modeling capacity and generalization ability
across domains by designing a new CNN architecture, IBN-Net. The beneﬁt is
that we do not require either target domain data or related source domains, un-
like existing domain adaptation and generalization methods. The improvement of
generalization across domains is achieved by designing architectures with built-
in appearance invariance. Our method is extremely useful for the situations that
the target domain data are unobtainable, where traditional domain adaptation
cannot be applied. For more detailed comparison of our method with related
works, please refer to our supplementary material.

3 Method

3.1 Background

Batch normalization [15] enables larger learning rate and faster convergence
by reducing the internal covariate shift during training CNNs. It uses the mean
and variance of a mini-batch to normalize each feature channels during training,
while in inference phase, BN uses the global statistics to normalize features. Ex-
periments have shown that BN signiﬁcantly accelerates training, and could im-
prove the ﬁnal performance meanwhile. It has become a standard component in
most prevalent CNN architectures like Inception [27], ResNet [8], DenseNet [13],
etc.

Unlike batch normalization, instance normalization [30] uses the statistics
of an individual sample instead of mini-batch to normalize features. Another im-
portant diﬀerence between IN and BN is that IN applies the same normalize pro-
cedure for both training and inference. Instance normalization has been mainly
used in the style transfer ﬁeld [30,5,14]. The reason for IN’s success in style
transfer and similar tasks is that, these tasks try to change image appearance
while preserving content, and IN allows to ﬁlter out instance-speciﬁc contrast

IBN-Net

7

Fig. 3. Instance-batch normalization (IBN) block.

information from the content. Despite these successes, IN has not shown beneﬁts
for high-level vision tasks like image classiﬁcation and semantic segmentation.
Ulyanov et al [30] have given primary attempt adopting IN for image classiﬁca-
tion, but got worse results than CNNs with BN.

In a word, batch normalization preserves discrimination between individ-
ual samples, but also makes CNNs vulnerable to appearance transforms. And
instance normalization eliminates individual contrast, but diminishes useful in-
formation at the same time. Both methods have their limitations. In order to
introduce appearance invariance to CNNs without hurting feature discrimina-
tion, here we carefully unify them in a single deep hierarchy.

3.2

Instance-Batch Normalization Networks

Our architecture design is based on an important observation: as shown in
Fig. 2(a)(b), for BN based CNNs, the feature divergence caused by appearance
variance mainly lies in shallow half of the CNN, while the feature discrimination
for content is high in deep layers, but also exists in shallow layers. Therefore we
introduce INs following two rules. Firstly, in order not to diminish the content
discrimination in deep features, we do not add INs in the last part of CNNs. Sec-
ondly, in order to also preserve content information in shallow layers, we keep
part of the batch normalized features.

To provide instance for discussion, we describe our method based on the
classic residual networks (ResNet). ResNet mainly consists of four groups of
residual blocks, with each block having the structure as shown in Fig. 3(a).
Following our ﬁrst rule, we only add IN to the ﬁrst three groups (conv2 x-
conv4 x) and leave the fourth group (conv5 x) as before. For a residual block,
we apply BN for half channels and IN for the others after the ﬁrst convolution
layer in the residual path, as Fig. 3(b) shows. There are three reasons to do so.

8

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 4. Variants of IBN block.

Firstly, as [9] pointed out, a clean identity path is essential for optimizing ResNet,
so we add IN to the residual path instead of identity path. Secondly, in the
residual learning function y = F(x, {Wi}) + x, the residual function F(x, {Wi})
is learned to align with x in the identity path. Therefore IN is applied to the
ﬁrst normalization layer instead of the last to avoid misalignment. Thirdly, the
half BN half IN scheme comes from our second design rule as discussed before.
This gives rise to our instance-batch normalization network (IBN-Net).

This design is a pursuit of model capacity. On one hand, INs enable the
model to learn appearance invariant features so that it could better utilize the
images with high appearance diversity within one dataset. On the other hand,
INs are added in a moderate way so that content related information could be
well preserved. We denote this model as IBN-Net-a. To take full use of IN’s
potential for generalization, in this work we also study another version, which is
IBN-Net-b. Since appearance information could be either preserved in residual
path or identity path, we add IN right after the addition operation, as shown
in Fig. 3(c). To not deteriorate optimization for ResNet, we only add three IN
layers after the ﬁrst convolution layer (conv1) and the ﬁrst two convolution
groups (conv2 x, conv3 x).
Variants of IBN-Net.
The two types of IBN-Net described above are not the only ways to utilize
IN and BN in CNNs. In the experiments we will also study some interesting
variants, as shown in Fig. 4. For example, to keep both generalizable and dis-
criminative features, another natural idea is to feed the feature to both IN and
BN layers and then concatenate their outputs, as in Fig. 4(a), but this would
introduce more parameters. And the idea of keeping two kind of features also
be applied to the IBN-b, giving rise to Fig. 4(b). We may also combine these
schemes as Fig. 4(c)(d) do. Discussions about these variants would be given in
the experiments section.

Table 1. Results on ImageNet validation set with appearance transforms. The perfor-
mance drops are given in brackets.

IBN-Net

9

appearance
transform
origin

RGB+50

R+50

std ×1.5

Monet

ResNet50 [8]
top1/top5 err.
24.27/7.08
28.22/9.64
(3.94/2.56)
27.53/8.78
(3.26/1.70)
40.01/19.08
(15.74/12.00)
54.51/29.32
(30.24/22.24)

IBN-Net50-a
top1/top5 err.
22.54/6.32
25.54/8.03
(3.00/1.71)
25.20/7.56
(2.66/1.24)
35.97/16.22
(13.43/9.90)
51.57/27.15
(29.03/20.83)

IBN-Net50-b
top1/top5 err.
23.64/6.86
23.82/6.96
(0.18/0.10)
25.10/7.43
(1.46/0.57)
23.64/6.86
(0.00/0.00)
50.45/25.22
(26.81/18.36)

4 Experiments

We evaluate IBN-Net on both classiﬁcation and semantic segmentation tasks
on the ImageNet and Cityscapes-GTA5 dataset respectively. In both tasks, we
study our models’ modeling capacity within one dataset and their generalization
under appearance transforms.

4.1 ImageNet Classiﬁcation

We evaluate our method on the ImageNet [4] 2012 classiﬁcation dataset with
1000 object classes. It has 1.28 million images for training and 50k images for
validation. Data augmentation includes random scale, random aspect ratio, ran-
dom crop, and random ﬂip. We use the same training policy as in [7], and apply
224 × 224 center crop during testing.

Generalization to Appearance Transforms. We ﬁrst evaluate the mod-
els’ generalization to many kinds of appearance transforms including shift in
color, brightness, contrast, and style transform, which is realized using Cycle-
GAN [33]. The models are trained merely on ImageNet training set and evaluated
on validation set with the appearance transforms mentioned. The result for the
original ResNet50 and our IBN-Net versions are given in Table. 1.

From the results we can see that IBN-Net-a achieves both better generaliza-
tion and stronger capacity. When applied to images with new appearance do-
mains, it shows less performance drop than the original ResNet. Meanwhile, its
top1/top5 error on the original images is signiﬁcantly improved by 1.73%/0.76%,
showing that the model capacity is also improved. For IBN-Net-b, generalization
is signiﬁcantly enhanced, as the performance drops on new image domains are
largely reduced. This shows that IN does help CNNs to generalize. Meanwhile, its
performance on the original images also increases a little, showing that although
IN removed discrepancy of feature mean and variance, content information could
be well preserved in the spatial dimension.

Model Capacity. To demonstrate the stronger model capacity of IBN-Net
over traditional CNNs, we compare its performance with a number of recently
prevalent CNN architectures on the ImageNet validation set. As Table 2 shows,

10

X. Pan, P. Luo, J. Shi, and X. Tang

Table 2. Results of IBN-Net over other CNNs on ImageNet validation set. The perfor-
mance gains are shown in the brackets. More detailed descriptions of these IBN-Nets
are provided in the supplementary material.

Model

DenseNet121 [13]
DenseNet169 [13]
ResNet50 [8]
ResNet101 [8]
ResNeXt101 [31]
SE-ResNet101 [12]

original
top1/top5 err.
25.0/-
23.6/-
24.7/7.8
23.6/7.1
21.2/5.6
22.38/6.07

re-implementation
top1/top5 err.
24.96/7.85
24.02/7.06
24.27/7.08
22.48/6.23
21.31/5.74
21.68/5.88

IBN-Net-a
top1/top5 err.
24.47/7.25 (0.49/0.60)
23.25/6.51 (0.79/0.55)
22.54/6.32 (1.73/0.76)
21.39/5.59 (1.09/0.64)
20.88/5.42 (0.43/0.32)
21.25/5.51 (0.43/0.37)

Table 3. Results of IBN-Net variants on ImageNet validation set and Monet style set.

Model

ResNet50
IBN-Net50-a
IBN-Net50-b
IBN-Net50-c
IBN-Net50-d
IBN-Net50-a&d
IBN-Net50-a×2

origin
top1/top5 err.
24.26/7.08
22.54/6.32
23.64/6.86
22.78/6.32
22.86/6.48
22.89/6.48
22.81/6.46

Monet
top1/top5 err.
54.51/29.32 (30.24/22.24)
51.57/27.15 (29.03/20.83)
50.45/25.22 (26.81/18.36)
51.83/27.09 (29.05/20.77)
50.80/26.16 (27.94/19.68)
51.27/26.64 (28.38/20.16)
51.95/26.98 (29.14/20.52)

Table 4. Comparison of IBN-Net50-
a with IN layers added to diﬀerent
amount of residual groups.

Table 5. Eﬀects of the ratio of IN
channels in the IBN layers. ’full’ de-
notes ResNet50 with all BN layers re-
placed by IN.

Residual groups none

top1 err.
top5 err.

1

1-4
1-2
24.27 23.58 22.94 22.54 22.96
7.08 6.72 6.40 6.32 6.49

1-3

0

0.25

IN ratio
full
top1 err. 24.27 22.49 22.54 23.11 23.44 28.56
top5 err. 7.08 6.39 6.32 6.57 6.94 9.83

0.75

0.5

1

IBN-Net achieves consistent improvement over these CNNs, indicating stronger
model capacity. Speciﬁcally, IBN-ResNet101 gives comparable or higher accu-
racy than ResNeXt101 and SE-ResNet101, which either requires more time con-
sumption or introduces additional parameters. Note that our method brings
no additional parameters while only add marginal calculations during inference
phase. Our results show that, dropping out some mean and variance statistics in
features helps the model to learn from images with high appearance diversity.

IBN-Net variants. We further study some other variants of IBN-Net. Ta-
ble. 3 shows results for IBN-Net variants described in the method section. All our
IBN-Net variants show better performance than the original ResNet50 and less
performance drop under appearance transform. Speciﬁcally, IBN-Net-c achieves
similar performance as IBN-Net-a, providing an alternative feature combining
approach. The modeling and generalization capacity of IBN-Net-d lies in be-
tween IBN-Net a and b, which demonstrates that preserving some BN features

IBN-Net

11

help improve performance, but loses generalization meanwhile. The combination
of IBN-Net a and d makes little diﬀerence with d, showing that the eﬀects of INs
on the main path of ResNet would dominate, eliminating the eﬀects of those on
the residual path. Finally, adding additional IBN layers to IBN-Net-a brings no
good, a moderate amount of IN features would suﬃce.

On the amount of IN and BN. Here we study IBN-Nets with diﬀerent
amount of IN layers added. Table.4 gives performance of IBN-Net50-a with IN
layers added to diﬀerent amount of residual groups. It can be seen that the
performance is improved with more IN layers added to shallow layers, but de-
creased when IN layers are added to the last residual group. This indicates that
IN in shallow layers help to improve modelling capacity, while in deep layers
BN should be kept to preserve important content information. Furthermore, we
study the eﬀects of IN-BN ratio on the performance, as shown in Table.5. Again,
the best performance is achieved at a moderate ratio 0.25-0.5, demonstrating the
trade-oﬀ relationship between IN and BN.

4.2 Cross Domain Experiments

If models trained with synthetic data could be applied to the real world, it would
save much eﬀort for data collection and labelling. In this section we study our
model’s capacity to generalize across real and synthetic domains on Cityscapes
and GTA5 datasets.

Cityscapes [2] is a traﬃc scene dataset collect from a number of European
cities. It contains high resolution 2048×1024 images with pixel level annotations
of 34 categories. The dataset is divided into 2975 for training, 500 for validation,
and 1525 for testing.

GTA5 [23] is a similar street view dataset generated semi-automatically
from the realistic computer game Grand Theft Auto V (GTA5). It has 12403
training images, 6382 validation images, and 6181 testing images of resolution
1914 × 1052 and the labels have the same categories as in Cityscapes.

Implementation. During training, we use random scale, aspect ratio and
mirror for data augmentation. We apply random crop on full resolution images
for Cityscapes and 1024 × 563 resized images for GTA5, because this leads to
better performance for both datasets. We use the ”poly” learning rate policy
with base learning rate set to 0.01 and power set to 0.9. We train the models
for 80 epochs. Batch size, momentum and weight decay are set to 16, 0.9, and
0.0001 respectively. When training on GTA5, we use a quarter of the train data
so that the data scale matches that of Cityscapes.

As in [1], we use ResNet50 with atrous convolution strategy as our baseline,
and our IBN-Net follows the same modiﬁcation. We train the models on each
dataset and evaluate on both, the results are given in Table 6.

Results. Our results are consistent with those on the ImageNet dataset.
IBN-Net shows both stronger modeling capacity within one dataset and better
generalization across datasets of diﬀerent domains. Speciﬁcally, IBN-Net-a shows
stronger model capacity, outperforming ResNet50 by 4.6% and 3.8% on the
two datasets. And IBN-Net-b’s generalization is better, as the cross evaluation

12

X. Pan, P. Luo, J. Shi, and X. Tang

Table 6. Results on Cityscapes-GTA dataset. Mean IoU for both within domain eval-
uation and cross domain evaluation is reported.

Table 7. Comparison with domain adaptation methods. Note that our method does
not use target data to help adaptation.

Train

Test

mIoU(%) Pixel Acc.(%)

Cityscapes

Cityscapes

GTA5

GTA5

GTA5

Cityscapes

Model
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b
ResNet50
IBN-Net50-a
IBN-Net50-b

64.5
69.1
67.0
29.4
32.5
37.9
61.0
64.8
64.2
22.2
26.0
29.6

93.4
94.4
94.3
71.9
71.4
78.8
91.5
92.5
92.4
53.5
60.9
66.8

5.9

mIoU mIoU gain Target data
Method
21.2
Source only [11]
27.1
FCN wild [11]
22.3
Source only [32]
28.9
Curr. DA [32]
29.6
Source only [24]
37.1
GAN DA [24]
Ours - Source only
22.17
Ours - IBN - Source only 29.64

w/o

7.5

7.5

6.6

w/

w/

w/

Table 8. Finetune with diﬀerent data percent.

Data for ﬁnetune (%) 10
ResNet50
IBN-Net50-a

100
52.7 54.2 58.7 63.84
56.5 60.5 65.5 68.78

20

30

performance is increased by 8.5% from Cityscapes to GTA5 and 7.5% for the
opposite direction.

Comparison with domain adaptation methods. It should be mentioned
that our method is under the diﬀerent setting with the domain adaptation works.
Domain adaptation is target domain oriented and requires target domain data
during training, while our method does not. Despite so, we show that the per-
formance gain of our method is comparable with those of domain adaptation
methods, as Table. 7 shows. Our approach takes an important step towards
more generalizable models since we introduce built-in appearance invariance to
the model instead of forcing it to ﬁt into a speciﬁc data domain.

Finetune on Cityscapes. Another commonly used approach to apply a
model on new data domain is to ﬁnetune it with a small amount of target
domain annotations. Here we show that with our more generalizable model,
the data required for ﬁnetuning could be signiﬁcantly reduced. We ﬁnetune the
models pretrained on the GTA5 dataset with diﬀerent amount of Cityscapes data

IBN-Net

13

and labels. The initial learning rate and the number of epochs is set to 0.003 and
80 respectively. As Table. 8 shows, with only 30% of Cityscapes training data,
IBN-Net50-a outperforms resnet50 ﬁnetuned on all the data.

4.3 Feature Divergence Analysis

In order to understand how IBN-Net achieves better generalization, we analyse
the feature divergence caused by domain bias in this section. Similar to [18], our
metric for feature divergence is as follows. For the output feature of a certain
layer in a CNN, we denote the mean value of a channel as F , which basically
describes how much this channel is activated. We assume a Gaussian distribution
of F , with mean µ and variance σ2. Then the symmetric KL divergence of this
channel between domain A and B would be:

D(FA||FB) = KL(FA||FB) + KL(FB||FA)

KL(FA||FB) = log

+

σB
σA

A + (µA − µB)2
σ2
2σ2
B

−

1
2

Denote D(FiA||FiB) as the symmetric KL divergence of the ith channel, then
the average feature divergence of the layer would be:

(1)

(2)

(3)

D(LA||LB) =

D(FiA||FiB)

1
C

C
(cid:88)

i=1

where C is the number of channels in this layer. This metric provides a mea-
surement of the distance between feature distribution for domain A and that for
domain B.

To capture the eﬀects of instance normalization on appearance information
and content information, here we consider three groups of domains. The ﬁrst
two groups are ”Cityscapes-GTA5” and ”photo-Monet”, which diﬀers in com-
plex appearance. To build two domains with diﬀerent contents, we split the
ImageNet-1k validation set into two parts, with the ﬁrst part containing images
with 500 object categories and the second part containing those with the other
500 categories. Then we calculate the feature divergence of the 17 ReLU layers
on the main path of ResNet50 and IBN-Net50. The results are shown in Fig. 5.
It can be seen from Fig. 5(a)(b) that in our IBN-Net, the feature divergence
caused by appearance diﬀerence is signiﬁcantly reduced. For IBN-Net-a the di-
vergence decreases moderately while for IBN-Net-b it encounters sudden drop
after IN layer at position 2,4,8. And this eﬀect lasts till deep layers where IN
is not added, which implies that the variance encoding appearance is reduced
in deep features, so that their interference with classiﬁcation is reduced. On the
other hand, the feature divergence caused by content diﬀerence does not drop in
IBN-Net, as Fig. 5(c) shows, showing that the content information in features
are well preserved in BN layers.

Discussions. These results give us an intuition of how IBN-Net gains stronger
generalization. By introducing IN layers to CNNs in a clever and moderate way,

14

X. Pan, P. Luo, J. Shi, and X. Tang

Fig. 5. Feature divergence caused by (a) real-virtual appearance gap, (b) style gap,
(c) object class diﬀerence.

they could work in a manner that helps to ﬁlter out the appearance variance
within features. In this way the models’ robustness to appearance transforms is
improved, as shown in our experiments.

Note that generalization and modelling capacity are not uncorrelated prop-
erties. On one hand, intuitively appearance invariance could also help the model
to better adapt to the training data of high appearance diversity and extract
their common aspects. On the other hand, even within one dataset, appearance
gap exists between the training and testing set, in which case stronger gener-
alization would also improve performance. These could be the reasons for the
stronger modelling capacity of IBN-Net.

5 Conclusions

In this work we propose IBN-Net, which carefully uniﬁes instance normaliza-
tion and batch normalization layers in a single deep network to increase both
modeling and generalization capacity. We show that IBN-Net achieves consistent
improvement over a number of classic CNNs including VGG, ResNet, ResNeXt,
and SENet on ImageNet dataset. Moreover, the built-in appearance invariance
introduced by IN helps our model to generalize across image domains even with-
out the use of target domain data. Our work concludes the role of IN and BN
layers in CNNs: IN introduces appearance invariance and improves generaliza-
tion while BN preserves content information in discriminative features.

Acknowledgement. This work is partially supported by SenseTime Group
Limited, the Hong Kong Innovation and Technology Support Programme, and
the National Natural Science Foundation of China (61503366).

IBN-Net

15

References

1. Chen, L., Papandreou, G., Kokkinos, I., Murphy, K., Yuille, A.: Deeplab: Semantic
image segmentation with deep convolutional nets, atrous convolution, and fully
connected crfs. TPAMI (2017)

2. Cordts, M., Omran, M., Ramos, S., Rehfeld, T., Enzweiler, M., Benenson, R.,
Franke, U., Roth, S., Schiele, B.: The cityscapes dataset for semantic urban scene
understanding. CVPR (2016)

3. Dai, J., Qi, H., Xiong, Y., Li, Y., Zhang, G., Hu, H., Wei, Y.: Deformable convo-

lutional networks. ICCV (2017)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: Imagenet: A large-scale

hierarchical image database. CVPR (2009)

5. Dumoulin, V., Shlens, J., Kudlur, M.: A learned representation for artistic style.

6. Ghifary, M., Bastiaan Kleijn, W., Zhang, M., Balduzzi, D.: Domain generalization

for object recognition with multi-task autoencoders. ICCV (2015)

7. Gross,

S., Wilber, M.: Training

and

investigating

residual

nets.

https://github.com/ facebook/fb.resnet.torch (2016)

8. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition.

9. He, K., Zhang, X., Ren, S., Sun, J.: Identity mappings in deep residual networks.

ICLR (2017)

CVPR (2016)

ECCV (2016)

10. Hoﬀman, J., Tzeng, E., Park, T., Zhu, J.Y., Isola, P., Saenko, K., Efros, A.A., Dar-
rell, T.: Cycada: Cycle-consistent adversarial domain adaptation. arXiv preprint
arXiv:1711.03213 (2017)

11. Hoﬀman, J., Wang, D., Yu, F., Darrell, T.: Fcns in the wild: Pixel-level adversarial

and constraint-based adaptation. arXiv preprint arXiv:1612.02649 (2016)

12. Hu, J., Shen, L., Sun, G.: Squeeze-and-excitation networks. arXiv preprint

13. Huang, G., Liu, Z., Weinberger, K.Q., van der Maaten, L.: Densely connected

14. Huang, X., Belongie, S.: Arbitrary style transfer in real-time with adaptive instance

arXiv:1709.01507 (2017)

convolutional networks. CVPR (2017)

normalization. ICCV (2017)

15. Ioﬀe, S., Szegedy, C.: Batch normalization: Accelerating deep network training by

reducing internal covariate shift. ICML (2015)

16. Khosla, A., Zhou, T., Malisiewicz, T., Efros, A.A., Torralba, A.: Undoing the

17. Krizhevsky, A., Sutskever, I., Hinton, G.E.: Imagenet classiﬁcation with deep con-

damage of dataset bias. ECCV (2012)

volutional neural networks. NIPS (2012)

18. Li, Y., Wang, N., Shi, J., Liu, J., Hou, X.: Revisiting batch normalization for

practical domain adaptation. arXiv preprint arXiv:1603.04779 (2016)

19. Long, M., Cao, Y., Wang, J., Jordan, M.: Learning transferable features with deep

20. Muandet, K., Balduzzi, D., Sch¨olkopf, B.: Domain generalization via invariant

adaptation networks. ICML (2015)

feature representation. ICML (2013)

21. Pan, X., Shi, J., Luo, P., Wang, X., Tang, X.: Spatial as deep: Spatial cnn for

traﬃc scene understanding. AAAI (2018)

22. Ren, S., He, K., Girshick, R., Sun, J.: Faster r-cnn: Towards real-time object de-

tection with region proposal networks. NIPS (2015)

16

X. Pan, P. Luo, J. Shi, and X. Tang

23. Richter, S.R., Vineet, V., Roth, S., Koltun, V.: Playing for data: Ground truth

from computer games. ECCV (2016)

24. Sankaranarayanan, S., Balaji, Y., Jain, A., Lim, S.N., Chellappa, R.: Unsuper-
vised domain adaptation for semantic segmentation with gans. arXiv preprint
arXiv:1711.06969 (2017)

25. Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., Salakhutdinov, R.:
Dropout: A simple way to prevent neural networks from overﬁtting. The Jour-
nal of Machine Learning Research (2014)

26. Sun, B., Saenko, K.: Deep coral: Correlation alignment for deep domain adaptation.

ECCV (2016)

27. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A., et al.: Going deeper with convolutions. CVPR
(2015)

28. Tzeng, E., Hoﬀman, J., Saenko, K., Darrell, T.: Adversarial discriminative domain

adaptation. CVPR (2017)

29. Tzeng, E., Hoﬀman, J., Zhang, N., Saenko, K., Darrell, T.: Deep domain confusion:

Maximizing for domain invariance. arXiv preprint arXiv:1412.3474 (2014)

30. Ulyanov, D., Vedaldi, A., Lempitsky, V.: Improved texture networks: Maximiz-
ing quality and diversity in feed-forward stylization and texture synthesis. CVPR
(2017)

31. Xie, S., Girshick, R., Doll´ar, P., Tu, Z., He, K.: Aggregated residual transformations

32. Zhang, Y., David, P., Gong, B.: Curriculum domain adaptation for semantic seg-

for deep neural networks. CVPR (2017)

mentation of urban scenes. ICCV (2017)

33. Zhu, J.Y., Park, T., Isola, P., Efros, A.A.: Unpaired image-to-image translation

using cycle-consistent adversarial networks. ICCV (2017)

