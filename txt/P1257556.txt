Unsupervised Adaptation with Interpretable Disentangled Representations
for Distant Conversational Speech Recognition

Wei-Ning Hsu, Hao Tang, James Glass

Computer Science and Artiﬁcial Intelligence Laboratory
Massachusetts Institute of Technology
Cambridge, MA 02139, USA
{wnhsu,haotang,glass}@mit.edu

8
1
0
2
 
n
u
J
 
3
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
7
8
4
0
.
6
0
8
1
:
v
i
X
r
a

Abstract

The current trend in automatic speech recognition is to leverage
large amounts of labeled data to train supervised neural net-
work models. Unfortunately, obtaining data for a wide range
of domains to train robust models can be costly. However, it
is relatively inexpensive to collect large amounts of unlabeled
data from domains that we want the models to generalize to. In
this paper, we propose a novel unsupervised adaptation method
that learns to synthesize labeled data for the target domain from
unlabeled in-domain data and labeled out-of-domain data. We
ﬁrst learn without supervision an interpretable latent represen-
tation of speech that encodes linguistic and nuisance factors
(e.g., speaker and channel) using different latent variables. To
transform a labeled out-of-domain utterance without altering
its transcript, we transform the latent nuisance variables while
maintaining the linguistic variables. To demonstrate our ap-
proach, we focus on a channel mismatch setting, where the do-
main of interest is distant conversational speech, and labels are
only available for close-talking speech. Our proposed method is
evaluated on the AMI dataset, outperforming all baselines and
bridging the gap between unadapted and in-domain models by
over 77% without using any parallel data.
Index Terms: unsupervised adaptation, distant speech recogni-
tion, unsupervised data augmentation, variational autoencoder

1. Introduction

Distant speech recognition has greatly improved due to the re-
cent advance in neural network-based acoustic models, which
facilitates integration of automatic speech recognition (ASR)
systems into hands-free human-machine interaction scenar-
ios [1]. To build a robust acoustic model, previous work pri-
marily focused on collecting labeled in-domain data for fully
supervised training [2, 3, 4]. However, in practice, it is expen-
sive and laborious to collect labeled data for all possible testing
conditions. In contrast, collecting large amount of unlabeled in-
domain data and labeled out-of-domain data can be fast and eco-
nomical. Hence, an important question arises for this scenario:
how can we do unsupervised adaptation for acoustic models by
utilizing labeled out-of-domain data and unlabeled in-domain
data, in order to achieve good performance on in-domain data?
Research on unsupervised adaptation for acoustic models
can be roughly divided into three categories: (1) constrained
model adaptation [5, 6, 7], (2) domain-invariant feature ex-
traction [8, 9, 10], and (3) labeled in-domain data augmenta-
tion by synthesis [11, 12, 13]. Among these approaches, data
augmentation-based adaptation is favorable, because it does not
require extra hyperparameter tuning for acoustic model training,
and can utilize full model capacity by training a model with as

much and as diverse a dataset as possible. Another beneﬁt of
this approach is that data in their original domain are more in-
tuitive to humans. In other words, it is easier for us to inspect
and manipulate the data. Furthermore, with the recent progress
on domain translation [13, 14, 15], conditional synthesis of in-
domain data without parallel data has become achievable, which
makes data augmentation-based adaptation a more promising
direction to investigate.

Variational autoencoder-based data augmentation (VAE-
DA) is a domain adaptation method proposed in [13], which
pools in-domain and out-domain to train a VAE that learns fac-
torized latent representations of speech segments. To disentan-
gle linguistic factors from nuisance ones in the latent space,
statistics of the latent representations for each utterance are
computed. By altering the latent representations of the seg-
ments from a labeled out-of-domain utterance properly accord-
ing to the computed statistics, one can synthesize an in-domain
utterance without changing the linguistic content using the
trained VAE decoder. This approach shows promising results
on synthesizing noisy read speech from clean speech. However,
it is non-trivial to apply this approach to conversational speech,
because utterances tend to be shorter, which makes estimating
the statistics of a disentangled representation difﬁcult.

In this paper, we extend VAE-DA and address the issue by
learning interpretable and disentangled representations using a
variant of VAEs that is designed for sequential data, named fac-
torized hierarchical variational autoencoders (FHVAEs) [15].
Instead of estimating the latent representation statistics on short
utterances, we use a loss that considers the statistics across ut-
terances in the entire corpus. Therefore, we can safely alter
the latent part that models non-linguistic factors in order to
synthesize in-domain data from out-of-domain data. Our pro-
posed methods are evaluated on the AMI [16] dataset, which
contains close-talking and distant-talking recordings in a con-
ference room meeting scenario. We treat close-talking data as
out-of-domain data and distant-talking data as in-domain data.
In addition to outperforming all baseline methods, our pro-
posed methods successfully close the gap between an unadapted
model and a fully-supervised model by more than 77% in terms
of word error rate without the presence of any parallel data.

2. Limitations of Previous Work

In this section, we brieﬂy review VAE-based data augmentation
and its limitations.

2.1. VAE-Based Data Augmentation

Generation of speech data often involves many independent
factors, such as linguistic content, speaker identity, and room

acoustics, that are often unobserved, or only partially observed.
One can describe such a generative process using a latent vari-
able model, where a vector z ∈ Z describing generating factors
is ﬁrst drawn from a prior distribution, and a speech segment
x ∈ X is then drawn from a distribution conditioned on z.
VAEs [17, 18] are among the most successful latent variable
models, which parameterize a conditional distribution, p(x|z),
with a decoder neural network, and introduce an encoder neural
network, q(z|x), to approximate the true posterior, p(z|x).

In [19], a VAE is proposed to model a generative process of
speech segments. A latent vector in the latent space is assumed
to be a linear combination of orthogonal vectors corresponding
to the independent factors, such as phonetic content and speaker
identity. In other words, we assume that z = z(cid:96) + zn where
z(cid:96) encodes the linguistic/phonetic content and zn encodes the
nuisance factors, and z(cid:96) ⊥ zn. To augment the data set while
reusing the labels, for any pair of utterance and its correspond-
ing label sequence (X, y) in the data set, we generate ( ˆX, y)
by altering the nuisance part of X in the latent space.

2.2. Estimating Latent Nuisance Vectors

A key observation made in [13] is that nuisance factors, such as
speaker identity and room acoustics, are generally constant over
segments within an utterance, while linguistic content changes
from segment to segment. In other words, latent nuisance vec-
tors zn are relatively consistent within an utterance, while the
distribution of z(cid:96) conditioned on an utterance can be assumed to
have the same distribution as the prior. Therefore, suppose the
prior is a diagonal Gaussian with zero mean. Given an utterance
X = {x(n)}N

n=1 of N segments, we have:

1
N

N
(cid:88)

n=1

z(n) =

z(n)
n +

(1)

1
N

N
(cid:88)

n=1

z(n)
(cid:96)

≈

zn + Ep(z)[z(cid:96)] = zn + 0.

(2)

1
N

1
N

N
(cid:88)

n=1

N
(cid:88)

n=1

That is to say, the latent nuisance vector would stand out, and
the rest would cancel out, when we take the average of latent
vectors over segments within an utterance.

This approach shows great success in transforming clean
read speech into noisy read speech. However, in a conversa-
tional scenario, the portion of short utterances are much larger
than that in a reading scenario. For instance, in the Wall Street
Journal corpus [20], a read speech corpus, the average duration
on the training set is 7.6s (±2.9s), with no utterance shorter
than 1s. On the other hand, in the AMI corpus [16], the dis-
tant conversational speech meeting corpus, the average dura-
tion on the training set is 2.6s (±2.7s), with over 35% of the
utterances being shorter than 1s. The small number of segments
in a conversational scenario can lead to unreliable estimation
of latent nuisance vectors, because the sampled mean of latent
linguistic vectors would exhibit large variance from the popula-
tion mean. The estimation under such a condition can contain
information about not only nuisance factors, but also linguistic
factors. Indeed, we illustrate in Figure 1 that modifying the es-
timated latent nuisance vector of a short utterance can result in
undesirable changes to its linguistic content.

3. Methods

In this section, we describe the formulation of FHVAEs and
explain how it can overcome the limitations of vanilla VAEs.

Figure 1: Comparison between VAE-DA and proposed FHVAE-
DA applied to a short utterance using nuisance factor replace-
ment. The same source and two target utterances are used
for both methods. Our proposed FHVAE-DA can successfully
transform only nuisance factors, while VAE-DA cannot.

3.1. Learning Interpretable Disentangled Representations

To avoid estimating nuisance vectors on short segments, one can
leverage the statistics at the corpus level, instead of at the utter-
ance level, to disentangle generating factors. An FHVAE [15]
is a variant of VAEs that models a generative process of se-
quential data with a hierarchical graphical model. Speciﬁcally,
an FHVAE imposes sequence-independent priors and sequence-
dependent priors to two sets of latent variables, z1 and z2, re-
spectively. We now formulate the process of generating a se-
quence X = {x(n)}N

n=1 composed of N sub-sequences:
1. an s-vector µ2 is drawn from p(µ2) = N (µ2|0, σ2
2. N i.i.d. latent segment variables Z1 = {z(n)
1 }N
drawn from a global prior p(z1) = N (z1|0, σ2
z1 I).
3. N i.i.d. latent sequence variables Z2 = {z(n)
2 }N

n=1
are drawn from a sequence-dependent prior p(z2|µ2) =
N (z2|µ2, σ2

n=1 are

µ2 I).

z2 I).

4. N i.i.d. sub-sequences X = {x(n)}N

p(x|z1, z2) = N (x|fµx (z1, z2), diag(fσ2
where fµx (·, ·) and fσ2
coder neural network.

n=1 are drawn from
(z1, z2))),
(·, ·) are parameterized by a de-

x

x

The joint probability for a sequence is formulated as follows:

p(µ2)

p(x(n)|z(n)

1

, z(n)
2

)p(z(n)
1

)p(z(n)
2

|µ2).

(3)

N
(cid:89)

n=1

With such a formulation, z2 is encouraged to capture gen-
erating factors that are relatively consistent within a sequence,
and z1 will then capture the residual generating factors. There-
fore, when we apply an FHVAE to model speech sequence gen-
eration, it is clear that z2 will capture the nuisance generating
factors that are in general consistent within an utterance.

Since the exact posterior inference is intractable, FHVAEs
introduce an inference model q(Z1, Z2, µ2|X) to approximate
the true posterior, which is factorized as follows:

q(µ2)

q(z(n)
1

|x(n), z(n)

2

)q(z(n)
2

|x(n)),

(4)

N
(cid:89)

n=1

where q(µ2), q(z1|x, z2), and q(z2|x) are all diagonal Gaus-
sian distributions. Two encoder networks are introduced in FH-
VAEs to parameterize mean and variance values of q(z1|x, z2)
and q(z2|x) respectively. As for q(µ2), for testing utterances
we parameterize its mean with an approximated maximum

2

n=1 ˆz(n)

2 /(N + σ2

a posterior (MAP) estimation (cid:80)N
z2 /σ2
µ2 ),
where ˆz(n)
is the inferred posterior mean of q(z(n)
|x(n)); dur-
ing training, we initialize a lookup table of posterior mean of µ2
for each training utterance with the approximated MAP estima-
tion, and treat the lookup table as trainable parameters. This can
avoid computing the MAP estimation of each segment for each
mini-batch, and utilize the discriminative loss proposed in [15]
to encourage disentanglement.

2

3.2. FHVAE-Based Data Augmentation

With a trained FHVAE, we are able to infer disentangled latent
representations that capture linguistic factors z1 and nuisance
factors z2. To transform nuisance factors of an utterance X
without changing the corresponding transcript, one only needs
to perturb Z2. Furthermore, since each z2 within an utterance
is generated conditioned on a Gaussian whose mean is µ2, we
can regard µ2 as the representation of nuisance factors of an ut-
terance. We now derive two data augmentation methods similar
to those proposed in [13], named nuisance factor replacement
and nuisance factor perturbation.

3.2.1. Nuisance Factor Replacement

Given a labeled out-of-domain utterance (Xout, yout) and an
unlabeled in-domain utterance Xin, we want to transform
Xout to ˆXout such that it exhibits the same nuisance factors as
Xin, while maintaining the original linguistic content. We can
then add the synthesized labeled in-domain data ( ˆXout, yout)
to the ASR training set. From the generative modeling perspec-
tive, this implies that z2 of Xin and ˆXout are drawn from the
same distribution. We carry out the same modiﬁcation for the
latent sequence variable of each segment of Xout as follows:
ˆz2,out = z2,out − µ2,out + µ2,in, where µ2,out and µ2,in are
the approximate MAP estimations of µ2.

3.2.2. Nuisance Factor Perturbation

Alternatively, we are also interested in synthesizing an utter-
ance conditioned on unseen nuisance factors, for example, the
interpolation of nuisance factors between two utterances. We
propose to draw a random perturbation vector p and compute
ˆz2,out = z2,out + p for each segment in an utterance, in or-
der to synthesize an utterance with perturbed nuisance factors.
Naively, we may want to sample p from a centered isotropic
Gaussian. However, in practice, VAE-type of models suffer
from an over-pruning issue [21] in that some latent variables
Instead,
become inactive, which we do not want to perturb.
we only want to perturb the linear subspace which models the
variation of nuisance factors between utterances. Therefore,
we adopt a similar soft perturbation scheme as in [13]. First,
{µ2}M
i=1 for all M utterances are estimated with the approxi-
mated MAP. Principle component analysis is performed to ob-
tain D pairs of eigenvalue σd and eigenvectors ed, where D is
the dimension of µ2. Lastly, one random perturbation vector p
is drawn for each utterance to perturb as follows:

p = γ

ψdσded, ψd ∼ N (0, 1),

(5)

D
(cid:88)

d=1

where γ is used to control the perturbation scale.

4. Experimental Setup

We evaluate our proposed method on the AMI meeting cor-
pus [16]. The AMI corpus consists of 100 hours of meeting
recordings in English, recorded in three different meeting rooms
with different acoustic properties, and with three to ﬁve par-
ticipants for each meeting that are mostly non-native speakers.
Multiple microphones are used for recording, including individ-
ual headset microphones (IHM), and far-ﬁeld microphone ar-
rays. In this paper, we regard IHM recordings as out-of-domain
data, whose transcripts are available, and single distant micro-
phone (SDM) recordings as in-domain data, whose transcripts
are not available, but on which we will evaluate our model. The
recommended partition of the corpus is used, which contains
an 80 hours training set, and 9 hours for a development and a
test set respectively. FHVAE and VAE models are trained using
both IHM and SDM training sets, which do not require tran-
scripts. ASR acoustic models are trained using augmented data
and transcripts based on only the IHM training set. The perfor-
mance of all ASR systems are evaluated on the SDM develop-
ment set. The NIST asclite tool [22] is used for scoring.

4.1. VAE and FHVAE Conﬁgurations

Speech segments of 20 frames, represented with 80 dimensional
log Mel ﬁlterbank coefﬁcients (FBank) are used as inputs. We
conﬁgure VAE and FHVAE models such that they have com-
parable modeling capacity. The VAE latent variable dimension
is 64, whereas the dimensions of z1 and z2 in FHVAEs are
both 32. Both models have a two-layer LSTM decoder with
256 memory cells that predicts one frame of x at a time. Since
a FHVAE model has two encoders, while a VAE model only
has one, we use a two-layer LSTM encoder with 256 memory
cells for the former, and with 512 memory cells for the latter.
All the LSTM encoders take one frame as input at each step,
and the output from the last step is passed to an afﬁne trans-
formation layer that predicts the mean and the log variance of
latent variables. The VAE model is trained to maximize the
variational lower bound, and the FHVAE model is trained to
maximize the discriminative segment variational lower bound
proposed in [15] with a discriminative weight α = 10. In ad-
dition, the original FHVAE training [15] is not scalable to hun-
dreds of thousands of utterances; we therefore use the hierar-
chical sampling-based training algorithm proposed in [23] with
batches of 5,000 utterances. Adam [24] with β1 = 0.95 and
β2 = 0.999 is used to optimize all models. Tensorﬂow [25] is
used for implementation.

4.2. ASR Conﬁguration

Kaldi [26] is used for feature extraction, forced alignment, de-
coding, and training of initial HMM-GMM models on the IHM
training set. The Microsoft Cognitive Toolkit [27] is used for
neural network acoustic model training. For all experiments,
the same 3-layer LSTM acoustic model [28] with the architec-
ture proposed in [2] is adopted, which has 1024 memory cells
and a 512-node linear projection layer for each LSTM layer.
Following the setup in [29], LSTM acoustic models are trained
with cross entropy loss, truncated back-propagation through
time [30], and mini-batches of 40 parallel utterances and 20
frames. A momentum of 0.9 is used starting from the second
epoch [2]. Ten percent of training data is held out for validation,
and the learning rate is halved if no improvement is observed on
the validation set after an epoch.

Table 1: Baseline WERs for the AMI IHM/SDM task.

Table 3: WERs on reconstructed data and original data.

ASR Training Set
IHM
SDM
IHM, FHVAE-DI, (z1) [10]
IHM, VAE-DA, (repl) [13]
IHM, VAE-DA, (p, γ = 1.0) [13]
IHM, VAE-DA, (p, γ = 1.5) [13]

WER (%)

SDM-dev
70.8
46.8 (-24.0)
64.8 (-6.0)
62.2 (-8.0)
61.1 (-9.7)
61.9 (-8.9)

IHM-dev
27.0
42.5 (+15.5)
29.0 (+2.0)
31.8 (+4.8)
30.0 (+3.0)
31.4 (+4.4)

Table 2: WERs of the proposed and the alternative methods.

ASR Training Set
IHM
IHM, FHVAE-DA, (repl)
IHM, FHVAE-DA, (p, γ = 1.0)
IHM, FHVAE-DA, (p, γ = 1.5)
IHM, FHVAE-DA, (rev-p, γ = 1.0)
IHM, FHVAE-DA, (uni-p, γ = 1.0)

WER (%)

SDM-dev
70.8
59.0 (-11.8)
58.6 (-12.2)
58.7 (-12.1)
70.9 (+0.1)
66.6 (-4.2)

IHM-dev
27.0
31.3 (+4.3)
30.1 (+3.1)
31.4 (+4.4)
30.2 (+3.2)
30.9 (+3.9)

5. Results and Discussion

We ﬁrst establish baseline results and report the SDM (in-
domain) and IHM (out-of-domain) development set word error
rates (WERs) in Table 1. To avoid constantly querying the test
set results, we only report WERs on the development set. If
not otherwise mentioned, the data augmentation-based systems
are evaluated on reconstructed features, and trained on a trans-
formed IHM set, where each utterance is only transformed once,
without the original copy of data.

The ﬁrst two rows of results show that the WER gap be-
tween the unadapted model and the model trained on in-domain
data is 24%. The third row reports the results of training with
domain invariant feature, z1, extracted with a FHVAE as is done
in [10]. It improves over the baseline by 6% absolute. VAE-
DA [13] results with nuisance factor replacement (repl) and la-
tent nuisance perturbation (p) are shown in the last three rows.
We then examine the effectiveness of our proposed method
and show the results in the second, third, and fourth rows in Ta-
ble 2. We observe about 12% WER reduction on the in-domain
development set for both nuisance factor perturbation (p) and
nuisance factor replacement (repl), with little degradation on
the out-of-domain development set. Both augmentation meth-
ods outperform their VAE counterparts and the domain invariant
feature baseline using the same FHVAE model. We attribute the
improvement to the better quality of the transformed IHM data,
which covers the nuisance factors of the SDM data, without al-
tering the original linguistic content.

To verify the superiority of the proposed method of drawing
random perturbation vectors, we compare two alternative sam-
pling methods: rev-p and uni-p, similar to [13], with the same
expected squared Euclidean norm as the proposed method. The
rev-p replaces σd in Eq. 5 with σD−d, where [σ1, · · · , σD] is
sorted, while the uni-p replaces it with
d/D. Results
shown in the last two rows in Table 2 conﬁrm that the proposed
sampling method is more effective under the same perturbation
scale γ = 1.0 compared to the alternative methods as expected.
Due to imperfect reconstruction using FHVAE models,
some linguistic information may be lost in this process. Further-
more, since VAE models tend to have overly-smoothed outputs,
one can easily tell an original utterance from a reconstructed

(cid:113)(cid:80)D

d=1 σ2

ASR Training Set
reconstruction
repl

+ori. IHM

p, γ = 1.0

+ori. IHM

SDM-dev WER (%)
recon.
73.8
59.0
59.4
58.6
58.0

ori.
79.5
71.4
61.4
71.8
66.2

IHM-dev WER (%)
recon.
30.1
31.3
30.5
30.1
29.0

ori.
32.1
34.4
26.2
31.5
25.9

Table 4: Models trained on disjoint partition of IHM/SDM data.

ASR Training Set
IHM-a
SDM-b
IHM-a, FHVAE-DA, (pert, γ = 1.0)

SDM-dev
86.5
55.4 (-31.1)
62.4 (-24.1)

IHM-dev
31.8
51.0 (+19.2)
33.4 (+1.6)

WER (%)

one. In other words, there is another layer of domain mismatch
between original data and reconstructed data. In Table 3, we in-
vestigate the performance of models trained with different data
on both original data and reconstructed data. The ﬁrst row, a
model trained on the reconstructed IHM data serves as the base-
line, from which we observe a 3.0%/3.1% WER increase on
SDM/IHM when tested on the reconstructed data, and a further
5.7%/2.0% WER increase when tested on the original data.

Compared to the reconstruction baseline, the proposed per-
turbation and replacement method both show about 15% im-
provement on the reconstructed SDM data, and 8% on the orig-
inal SDM data. Results on the reconstructed or original IHM
data are comparable to the baseline. The performance differ-
ence between the original and reconstructed SDM shows that
FHVAEs are able to transform the IHM acoustic features closer
to the reconstructed SDM data. We then explore adding the
original IHM training data to the two transformed sets (+ori.
IHM). This signiﬁcantly improves the performance on the orig-
inal data for both SDM and IHM data sets. We even see an
improvement from 27.0% to 25.9% on the IHM development
set compared to the model trained on original IHM data.

Finally, to demonstrate that FHVAEs are not exploiting the
parallel connection between the IHM and SDM data sets, we
create two disjoint sets of recordings of roughly the same size,
such that IHM-a and SDM-b only contain one set of record-
ings each. Results are shown in 4, where the FHVAE models is
trained without any parallel utterances. In this setting, we ob-
serve an even more signiﬁcant 24.1% absolute WER improve-
ment from the baseline IHM-a model, which bridges the gap by
over 77% to the fully supervised model.

6. Conclusions and Future Work

In this paper, we marry the VAE-based data augmentation
method with interpretable disentangled representations learned
from FHVAE models for transforming data from one domain
to another. The proposed method outperforms both baselines,
and demonstrates the ability to reduce the gap between an un-
adapted model and a fully supervised model by over 77% with-
out the presence of any parallel data. For future work, we plan
to investigate the unsupervised data augmentation techniques
for a wider range of tasks. In addition, data augmentation is in-
herently inefﬁcient because the training time grows linearly in
the amount of data we have. We plan to explore model-space
unsupervised adaptation to combat this limitation.

[21] S. Yeung, A. Kannan, Y. Dauphin, and L. Fei-Fei, “Tackling over-

pruning in variational autoencoders,” arXiv:1706.03643, 2017.

[22] J. G. Fiscus, J. Ajot, N. Radde, and C. Laprun, “Multiple dimen-
sion Levenshtein edit distance calculations for evaluating auto-
matic speech recognition systems during simultaneous speech,” in
International Conference on language Resources and Evaluation
(LERC), 2006.

[23] W.-N. Hsu and J. Glass, “Scalable factorized hierarchical vari-
ational autoencoder training,” arXiv preprint arXiv:1804.03201,
2018.

[24] D. Kingma and J. Ba, “Adam: A method for stochastic optimiza-

tion,” arXiv:1412.6980, 2014.

[25] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean,
M. Devin, S. Ghemawat, G. Irving, M. Isard et al., “Tensorﬂow: A
system for large-scale machine learning.” in OSDI, vol. 16, 2016.

[26] D. Povey, A. Ghoshal, G. Boulianne, L. Burget, O. Glembek,
N. Goel, M. Hannemann, P. Motlicek, Y. Qian, P. Schwarz et al.,
“The Kaldi speech recognition toolkit,” in IEEE Workshop on Au-
tomatic Speech Recognition and Understanding (ASRU), 2011.

[27] D. Yu, A. Eversole, M. Seltzer, K. Yao, Z. Huang, B. Guenter,
O. Kuchaiev, Y. Zhang, F. Seide, H. Wang et al., “An introduc-
tion to computational networks and the computational network
toolkit,” Microsoft Research, Tech. Rep., 2014.

[28] H. Sak, A. W. Senior, and F. Beaufays, “Long short-term mem-
ory recurrent neural network architectures for large scale acoustic
modeling.” in Interspeech, 2014.

[29] W.-N. Hsu, Y. Zhang, A. Lee, and J. R. Glass, “Exploiting depth
and highway connections in convolutional recurrent deep neural
networks for speech recognition.” in Interspeech, 2016.

[30] R. J. Williams and J. Peng, “An efﬁcient gradient-based algo-
rithm for on-line training of recurrent network trajectories,” Neu-
ral computation, vol. 2, no. 4, 1990.

7. References
[1] B. Li, T. Sainath, A. Narayanan, J. Caroselli, M. Bacchiani,
A. Misra, I. Shafran, H. Sak, G. Pundak, K. Chin et al., “Acoustic
modeling for Google Home,” in Interspeech, 2017.

[2] Y. Zhang, G. Chen, D. Yu, K. Yaco, S. Khudanpur, and J. Glass,
“Highway long short-term memory RNNs for distant speech
recognition,” in International Conference on Acoustics, Speech
and Signal Processing (ICASSP), 2016.

[3] W.-N. Hsu, Y. Zhang, and J. Glass, “A prioritized grid long short-
term memory rnn for speech recognition,” in IEEE Workshop on
Spoken Language Technology (SLT), 2016 IEEE, 2016.

[4] J. Kim, M. El-Khamy, and J. Lee, “Residual LSTM: Design
of a deep recurrent architecture for distant speech recognition,”
arXiv:1701.03360, 2017.

[5] M. J. Gales, “Maximum likelihood linear transformations for
HMM-based speech recognition,” Computer speech & language,
vol. 12, no. 2, 1998.

[6] P. Swietojanski and S. Renals, “Learning hidden unit contri-
butions for unsupervised speaker adaptation of neural network
acoustic models,” in IEEE Workshop on Spoken Language Tech-
nology (SLT).

IEEE, 2014.

[7] P. Swietojanski, J. Li, and S. Renals, “Learning hidden unit contri-
butions for unsupervised acoustic model adaptation,” IEEE Trans-
actions on Audio, Speech, and Language Processing, vol. 24,
no. 8, 2016.

[8] S. Sun, B. Zhang, L. Xie, and Y. Zhang, “An unsupervised deep
domain adaptation approach for robust speech recognition,” Neu-
rocomputing, 2017.

[9] Z. Meng, Z. Chen, V. Mazalov, J. Li, and Y. Gong, “Unsupervised
adaptation with domain separation networks for robust speech
recognition,” arXiv:1711.08010, 2017.

[10] W.-N. Hsu and J. Glass, “Extracting domain invariant features by
unsupervised learning for robust automatic speech recognition,”
in International Conference on Acoustics, Speech and Signal Pro-
cessing (ICASSP), 2018.

[11] N. Jaitly and G. E. Hinton, “Vocal tract length perturbation
(VTLP) improves speech recognition,” in ICML workshop on
Deep Learning for Audio, Speech, and Language Processing,
2013.

[12] T. Ko, V. Peddinti, D. Povey, and S. Khudanpur, “Audio augmen-

tation for speech recognition,” in Interspeech, 2015.

[13] W.-N. Hsu, Y. Zhang, and J. Glass, “Unsupervised domain adap-
tation for robust speech recognition via variational autoencoder-
based data augmentation,” in IEEE Workshop on Automatic
Speech Recognition and Understanding (ASRU), 2017.

[14] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros, “Unpaired image-
to-image translation using cycle-consistent adversarial networks,”
arXiv:1703.10593, 2017.

[15] W.-N. Hsu, Y. Zhang, and J. Glass, “Unsupervised learning of dis-
entangled and interpretable representations from sequential data,”
in Advances in Neural Information Processing Systems (NIPS),
2017.

[16] J. Carletta, “Unleashing the killer corpus: experiences in creating
the multi-everything AMI meeting corpus,” Language Resources
and Evaluation, vol. 41, no. 2, 2007.

[17] D. P. Kingma and M. Welling, “Auto-encoding variational bayes,”

arXiv:1312.6114, 2013.

[18] D. J. Rezende, S. Mohamed, and D. Wierstra, “Stochastic back-
propagation and approximate inference in deep generative mod-
els,” arXiv:1401.4082, 2014.

[19] W.-N. Hsu, Y. Zhang, and J. Glass, “Learning latent representa-
tions for speech generation and transformation,” in Interspeech,
2017.

[20] J. Garofalo, D. Graff, D. Paul, and D. Pallett, “CSR-I (WSJ0)

complete,” Linguistic Data Consortium, 2007.

