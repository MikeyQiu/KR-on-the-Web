Lexical Query Modeling in Session Search

Christophe Van Gysel
cvangysel@uva.nl

Evangelos Kanoulas
e.kanoulas@uva.nl

Maarten de Rijke
derijke@uva.nl

University of Amsterdam, Amsterdam, The Netherlands

6
1
0
2
 
g
u
A
 
3
2
 
 
]

R

I
.
s
c
[
 
 
1
v
6
5
6
6
0
.
8
0
6
1
:
v
i
X
r
a

ABSTRACT
Lexical query modeling has been the leading paradigm for session
search.
In this paper, we analyze TREC session query logs and
compare the performance of different lexical matching approaches
for session search. Naive methods based on term frequency weigh-
ing perform on par with specialized session models. In addition,
we investigate the viability of lexical query models in the setting
of session search. We give important insights into the potential and
limitations of lexical query modeling for session search and pro-
pose future directions for the ﬁeld of session search.

1.

INTRODUCTION

Many complex information seeking tasks, such as planning a
trip or buying a car, cannot sufﬁciently be expressed in a single
query [7]. These multi-faceted tasks are exploratory, comprehen-
sive, survey-like or comparative in nature [14] and require multiple
search iterations to be adequately answered [8]. Donato et al. [5]
note that 10% of the user sessions (more than 25% of query vol-
ume) consists of such complex information needs.

The TREC Session Track [15] created an environment for re-
searchers “to test whether systems can improve their performance
for a given query by using previous queries and user interactions
with the retrieval system.” The track’s existence led to an increas-
ing number of methods aimed at improving session search. Yang
et al. [16] introduce the Query Change Model (QCM), which uses
lexical editing changes between consecutive queries in addition to
query terms occurring in previously retrieved documents, to im-
prove session search. They heuristically construct a lexicon-based
query model for every query in a session. Query models are then
linearly combined for every document, based on query recency [16]
or document satisfaction [3, 10], into a session-wide lexical query
model. However, there has been a clear trend towards the use of
supervised learning [3, 12, 16] and external data sources [6, 11].
Guan et al. [6] perform lexical query expansion by adding higher-
order n-grams to queries by mining document snippets. In addi-
tion, they expand query representations by including anchor texts
to previously top-ranked documents in the session. Carterette et al.
[3] expand document representations by including incoming anchor

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ICTIR ’16, September 12 - 16, 2016, Newark, DE, USA
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4497-5/16/09. . . $15.00
DOI: http://dx.doi.org/10.1145/2970398.2970422

texts. Luo et al. [12] introduce a linear point-wise learning-to-rank
model that predicts relevance given a document and query change
features. They incorporate document-independent session features
in their ranker.

The use of machine-learned ranking and the expansion of query
and document representations is meant to address a speciﬁc in-
stance of a wider problem in information retrieval, namely the query
document mismatch [9]. In this paper, we analyze the session query
logs made available by TREC and compare the performance of dif-
ferent lexical query modeling approaches for session search, taking
into account session length.1 In addition, we investigate the viabil-
ity of lexical query models in a session search setting.

The main purpose of this paper is to investigate the potential of
lexical methods in session search and provide foundations for fu-
ture research. We ask the following questions:
(1) Increasingly
complex methods for session search are being developed, but how
do naive methods perform? (2) How well can lexical methods per-
form? (3) Can we solve the session search task using lexical match-
ing only?

2. LEXICAL MATCHING FOR SESSIONS
We deﬁne a search session s as a sequence of n interactions
(qi, ri) between user and search engine, where qi denotes a user-
issued query consisting of |qi| terms ti,1, . . . , ti,|qi| and ri denotes
a result page consisting of |ri| documents ri,1, . . . , ri,|ri| returned
by the search engine (also referred to as SERP). The goal, then, is
to return a SERP rn+1 given a query qn+1 and the session history
that maximizes the user’s utility function.

In this work, we formalize session search by modeling an ob-
served session s as a query model parameterized by θs = {θs
1, . . . ,
|V |}, where θs
θs
i denotes the weight associated with term ti ∈ V
(speciﬁed below). Documents dj are then ranked in decreasing or-
der of

log P (dj | s) =

k log θdj
θs
k ,

|V |
(cid:88)

k=1

where θdj is a lexical model of document dj, which can be a lan-
guage model (LM), a vector space model or a specialized model
using hand-engineered features. Query model θs is a function of
the query models of the interactions i in the session, θsi (e.g., for
a uniform aggregation scheme, θs = (cid:80)
i θsi ). Existing session
search methods [6, 16] can be expressed in this formalism as fol-
lows:
Term frequency (TF) Terms in a query are weighted according to
k becomes the frequency
1An open-source implementation of our testbed for evaluating ses-
sion search is available at https://github.com/cvangysel/sesh.

their frequency in the query (i.e., θsi

of term tk in qi). Queries qi that are part of the same session
s are then aggregated uniformly for a subset of queries. In
this work, we consider the following subsets: the ﬁrst query,
the last query and the concatenation of all queries in a ses-
sion. Using the last query corresponds to the ofﬁcial baseline
of the TREC Session track [3].

Nugget Nugget [6] is a method for effective structured query for-
mulation for session search. Queries qi, part of session s, are
expanded using higher order n-grams occurring in both qi
and snippets of the top-k documents in the previous interac-
tion, ri−1,1, . . . , ri−1,k. This effectively expands the vocab-
ulary by additionally considering n-grams next to unigram
terms. The query models of individual queries in the session
are then aggregated using one of the aggregation schemes.
Nugget is primarily targeted at resolving the query-document
mismatch by incorporating structure and external data and
does not model query transitions. The method can be ex-
tended to include external evidence by expanding θs to in-
clude anchor texts pointing to (clicked) documents in previ-
ous SERPs.

Query Change Model (QCM) QCM [16] uses syntactic editing
changes between consecutive queries in addition to query
changes and previous SERPs to enhance session search. In
QCM [16, Section 6.3], document model θd is provided by
a language model with Dirichlet smoothing and the query
model at interaction i, θsi , in session s is given by

θsi
k =






1 + α(1 − P (tk | ri−1,1)),
1 − βP (tk | ri−1,1),
1 + (cid:15) idf(tk),
−δP (tk | ri−1,1),

tk ∈ qtheme
tk ∈ +∆q ∧ tk ∈ ri−1,1
tk ∈ +∆q ∧ tk /∈ ri−1,1
tk ∈ −∆q,

where qtheme are the session’s theme terms, +∆q (−∆q, resp.)
are the added (removed) terms, P (tk | ri−1,1) denotes the
probability of tk occurring in SAT clicks, idf(tk) is the in-
verse document frequency of term tk and α, β, (cid:15), δ are pa-
rameters. The θsi are then aggregated into θs using one of
the aggregation schemes, such as the uniform aggregation
scheme (i.e., the sum of the θsi ).

3. EXPERIMENTS

3.1 Benchmarks

We evaluate the lexical query modeling methods listed in §2 on
the session search task (G1) of the TREC Session track from 2011
to 2014 [15]. We report performance on each track edition inde-
pendently and on the track aggregate. Given a query, the task is to
improve retrieval performance by using previous queries and user
interactions with the retrieval system. To accomplish this, we ﬁrst
retrieve the 2,000 most relevant documents for the given query and
then re-rank these documents using the methods described in §2.
We use the “Category B” subsets of ClueWeb09 (2011/2012) and
ClueWeb12 (2013/2014) as document collections. Both collections
consist of approximately 50 million documents. Spam documents
are removed before indexing by ﬁltering out documents with scores
(GroupX and Fusion, respectively) below 70 [4]. Table 1 shows an
overview of the benchmarks and document collections.

3.2 Evaluation measures

To measure retrieval effectiveness, we report Normalized Dis-
counted Cumulative Gain at rank 10 (NDCG@10) in addition to

Mean Reciprocal Rank (MRR). The relevance judgments of the
tracks were converted from topic-centric to session-centric accord-
ing to the mappings provided by the track organizers.2 Evaluation
measures are then computed using TREC’s ofﬁcial evaluation tool,
trec_eval.3

3.3 Systems under comparison

We compare the lexical query model methods outlined in §2. All
methods compute weights for lexical entities (e.g., unigram terms)
on a per-session basis, construct a structured Indri query [13] and
query the document collection using pyndri.4 For fair compar-
ison, we use Indri’s default smoothing conﬁguration (i.e., Dirich-
let smoothing with µ = 2500) and uniform query aggregation for
all methods (different from the smoothing used for QCM in [16]).
This allows us to separate query aggregation techniques from query
modeling approaches in the case of session search.

For Nugget, we use the default parameter conﬁguration (ksnippet =
10, θ = 0.97, kanchor = 5 and β = 0.1), using the strict expansion
method. We report the performance of Nugget without the use of
external resources (RL2), with anchor texts (RL3) and with click
data (RL4). For QCM, we use the parameter conﬁguration as de-
scribed in [12, 16]: α = 2.2, β = 1.8, (cid:15) = 0.07 and δ = 0.4.

In addition to the methods above, we report the performance of
an oracle that always ranks in decreasing order of ground-truth rel-
evance. This oracle will give us an upper-bound on the achievable
ranking performance.

3.4

Ideal lexical term weighting

We investigate the maximally achievable performance by weight-
ing query terms.
Inspired by Bendersky et al. [1], we optimize
NDCG@10 for every session using a grid search over the term
weight space. We sweep the weight of every term between −1.0
and 1.0 (inclusive) with increments of 0.1, resulting in a total of
21 weight assignments per term. Due to the exponential time com-
plexity of the grid search, we limit our analysis to the 230 sessions
with 7 unique query terms or less (see Table 1). This experiment
will tell us the maximally achievable retrieval performance in ses-
sion search by the re-weighting lexical terms only.

In this section, we report and discuss our experimental results.
Of special interest to us are the methods that perform lexical match-
ing based on a user’s queries in a single session: QCM, Nugget
(RL2) and the three variants of TF. Table 2 shows the methods’
performance on the TREC Session track editions from 2011 to
2014. No single method consistently outperforms the other meth-
ods. Interestingly enough, the methods based on term frequency
(TF) perform quite competitively compared to the specialized ses-
sion search methods (Nugget and QCM). In addition, the TF variant
using all queries in a session even outperforms Nugget (RL2) on
the 2011 and 2014 editions and QCM on nearly all editions. Using
the concatenation of all queries in a session, while being an obvi-
ous baseline, has not received much attention in recent literature
or by TREC [15]. In addition, note that the best-performing (un-
supervised) TF method achieves better results than the supervised
method of Luo et al. [12] on the 2012 and 2013 tracks. Fig. 1 de-
picts the boxplot of the NDCG@10 distribution over all track edi-
tions (2011–2014). The term frequency approach using all queries

2We take into account the mapping between judgments and actual
relevance grades for the 2012 edition.
3https://github.com/usnistgov/trec_eval
4https://github.com/cvangysel/pyndri

In §4, we analyze the methods listed above in terms of their ability
to handle sessions of different lengths and contextual history.

4. RESULTS & DISCUSSION

Table 1: Overview of 2011, 2012, 2013 and 2014 TREC session tracks. For the 2014 track, we report the total number of sessions in
addition to those sessions with judgments. We report the mean and standard deviation where appropriate; M denotes the median.
2012

2013

2014

2011

Sessions
Sessions
Queries per session
Unique terms per session

Topics
Session per topic
Document judgments per topic

Collection
Documents
Document length
Terms
Spam scores

76
3.68 ± 1.79; M=3.00
7.01 ± 3.28; M=6.50

98
3.03 ± 1.57; M=2.00
5.76 ± 2.95; M=5.00

87
5.08 ± 3.60; M=4.00
8.86 ± 4.38; M=8.00

100 (1,021 total)
4.34 ± 2.22; M=4.00
7.79 ± 4.08; M=7.00

1.23 ± 0.46; M= 1.00
313.11 ± 114.63; M=292.00

2.04 ± 0.98; M= 2.00
372.10 ± 162.63; M=336.50

2.18 ± 0.93; M= 2.00
268.00 ± 116.86; M=247.00

20.95 ± 4.81; M= 21.00
332.33 ± 149.03; M=322.00

21,258,800
1,096.18 ± 1,502.45
3.40 × 107 (2.33 × 1010 total)
GroupX

15,702,181
649.07 ± 1,635.29
2.36 × 107 (1.02 × 1010 total)
Fusion

Table 2: Overview of experimental results on 2011–2014 TREC Session tracks of the TF, Nugget and QCM methods (see §2). The
ground-truth oracle shows the ideal performance (§3.3).

2011

2012

2013

2014

NDCG@10 MRR NDCG@10 MRR NDCG@10 MRR NDCG@10 MRR

Ground-truth oracle
TF (ﬁrst query)
TF (last query)
TF (all queries)
Nugget (RL2)
Nugget (RL3)
Nugget (RL4)
QCM

0.777
0.371
0.358
0.448
0.437
0.442
0.437
0.440

0.868
0.568
0.598
0.685
0.677
0.678
0.677
0.661

0.695
0.302
0.316
0.348
0.352
0.360
0.352
0.342

0.865
0.523
0.586
0.604
0.609
0.619
0.609
0.575

0.517
0.121
0.133
0.162
0.163
0.162
0.163
0.160

0.920
0.379
0.358
0.477
0.488
0.488
0.488
0.484

0.410
0.120
0.156
0.174
0.173
0.172
0.173
0.162

0.800
0.336
0.458
0.478
0.476
0.477
0.476
0.450

as for these sessions there is only a limited history that specialized
methods can use. However, the TF method using the concatena-
tion of all queries still performs competitively for longer sessions.
This can be explained by the fact that as queries are aggregated
over time, a better representation of the user’s information need is
created. This aggregated representation naturally emphasizes im-
portant theme terms of the session, which is a key component in
the QCM [16].

Figure 1: Box plot of NDCG@10 on all sessions of the TREC
Session track (2011–2014). The box depicts the ﬁrst, second
(median) and third quartiles. The whiskers are located at 1.5
times the interquartile range on both sides of the box. The
square and crosses depict the average and outliers respectively.

achieves the highest mean/median overall. Given this peculiar ﬁnd-
ing, where a generic retrieval model performs better than special-
ized session search models, we continue with an analysis of the
TREC Session search logs.

In Fig. 2 we investigate the effect of varying session lengths in
the session logs. The distribution of session lengths is shown in the
top row of Fig. 2. For the 2011–2013 track editions, most sessions
consisted of only two queries. The mode of the 2014 edition lies at
5 queries per session. If we examine the performance of the meth-
ods on a per-session length basis, we observe that the TF methods
perform well for short sessions. This does not come as a surprise,

(a) Full history of session

(b) Previous query in session only

Figure 3: Difference in NDCG@10 with the ofﬁcial TREC
baseline (TF using the last query only) of 5-query sessions (45
instances) with different history conﬁgurations for the 2011–
2014 TREC Session tracks.

Figure 2: The top row depicts the distribution of session lengths for the 2011–2014 TREC Session tracks, while the bottom row shows
the performance of the TF, Nugget and QCM models for different session lengths.

(a) 2011

(b) 2012

(c) 2013

(d) 2014

Table 3: NDCG@10 for TF weighting (§2), ideal term weight-
ing (§3.4) and the ground-truth oracle (§3.3).

2011

2012

2013

2014

0.391 0.333 0.179 0.183
TF (all queries)
Ideal term weighing 0.589 0.528 0.361 0.296
Ground-truth oracle 0.716 0.682 0.593 0.453

How do these methods perform as the search session progresses?
Fig. 3 shows the performance of sessions of length ﬁve after every
user interaction, when using all queries in a session (Fig. 3a) and
when using only the previous query (Fig. 3b). We can see that
NDCG@10 increases as the session progresses for all methods.
Beyond half of the session, the session search methods outperform
retrieving according to the last query in the session. We see that,
for longer sessions, specialized methods (Nugget, QCM) outper-
form generic term frequency models. This comes as no surprise.
Bennett et al. [2] note that users tend to reformulate and adapt their
information needs based on observed results and this is essentially
the observation upon which QCM builds.

Fig. 1 and Table 2 reveal a large NDCG@10 gap between the
compared methods and the ground-truth oracle. How can we bridge
this gap? Table 3 shows a comparison between frequency-based
term weighting, the ideal term weighting (§3.4) and the ground-
truth oracle (§3.3) for all sessions consisting of 7 unique terms or
less (§3.4). Two important observations. There is still plenty of
room for improvement using lexical query modeling only. Rela-
tively speaking, around half of the gap between weighting accord-
ing to term frequency and the ground-truth can be bridged by pre-
dicting better term weights. However, the other half of the per-
formance gap cannot be bridged using lexical matching only, but
instead requires a notion of semantic matching [9].

5. CONCLUSIONS

We have shown that naive frequency-based term weighting meth-
ods perform on par with specialized session search methods on
the TREC Session track (2011–2014).5 This is due to the fact
that shorter sessions are more prominent in the session query logs.
On longer sessions, specialized models are able to exploit session
history more effectively. Future work should focus on creating
benchmarks consisting of longer sessions with complex informa-
tion needs. Perhaps more importantly, we have looked at the vi-
ability of lexical query matching in session search. There is still
much room for improvement by re-weighting query terms. How-

5An open-source implementation of our testbed for evaluating ses-
sion search is available at https://github.com/cvangysel/sesh.

ever, the query/document mismatch is prevalent in session search
and methods restricted to lexical query modeling face a very strict
performance ceiling. Future work should focus on better lexical
query models for session search, in addition to semantic matching
and tracking the dynamics of contextualized semantics in search.

Acknowledgments This work was supported by the Google Faculty Re-
search Award and the Bloomberg Research Grant programs. Any opinions,
ﬁndings and conclusions or recommendations expressed in this material are
the authors’ and do not necessarily reﬂect those of the sponsors. The authors
would like to thank Daan Odijk, David Graus and the anonymous reviewers
for their valuable comments and suggestions.
REFERENCES
[1] M. Bendersky, D. Metzler, and W. B. Croft. Effective query

formulation with multiple information sources. In SIGIR, pages
443–452. ACM, 2012.

[2] P. N. Bennett, R. W. White, W. Chu, S. T. Dumais, P. Bailey,
F. Borisyuk, and X. Cui. Modeling the impact of short- and
long-term behavior on search personalization. In SIGIR, pages
185–194. ACM, 2012.

[3] B. Carterette, E. Kanoulas, M. M. Hall, and P. D. Clough. Overview

of the trec 2014 session track. In TREC, 2014.

[4] G. V. Cormack, M. D. Smucker, and C. L. Clarke. Efﬁcient and
effective spam ﬁltering and re-ranking for large web datasets.
Information retrieval, 14(5):441–465, 2011.

[5] D. Donato, F. Bonchi, T. Chi, and Y. Maarek. Do you want to take
notes?: identifying research missions in yahoo! search pad. In
WWW, pages 321–330. ACM, 2010.

[6] D. Guan, H. Yang, and N. Goharian. Effective structured query

formulation for session search. Techn. report, 2012.

[7] A. Hassan, R. W. White, S. T. Dumais, and Y.-M. Wang. Struggling

or exploring?: disambiguating long search sessions. In WSDM, pages
53–62. ACM, 2014.

[8] A. Kotov, P. N. Bennett, R. W. White, S. T. Dumais, and J. Teevan.

Modeling and analysis of cross-session search tasks. In SIGIR, pages
5–14. ACM, 2011.

[9] H. Li and J. Xu. Semantic matching in search. Found. & Tr. in

Information Retrieval, 7(5):343–469, June 2014.

[10] J. Luo, X. Dong, and H. Yang. Modeling rich interactions in session
search - georgetown university at trec 2014 session track. Techn.
report, 2014.

[11] J. Luo, S. Zhang, and H. Yang. Win-win search: Dual-agent

stochastic game in session search. In SIGIR, pages 587–596. ACM,
2014.

[12] J. Luo, X. Dong, and H. Yang. Session search by direct policy

learning. In ICTIR, pages 261–270. ACM, 2015.

[13] D. Metzler and W. B. Croft. Combining the language model and
inference network approaches to retrieval. IPM, 40(5):735–750,
2004.

[14] K. Raman, P. N. Bennett, and K. Collins-Thompson. Toward

whole-session relevance: exploring intrinsic diversity in web search.
In SIGIR, pages 463–472. ACM, 2013.

[15] TREC. Session Track, 2009–2014.
[16] H. Yang, D. Guan, and S. Zhang. The query change model:

Modeling session search as a markov decision process. TOIS, 33(4):
20:1–20:33, May 2015.

Lexical Query Modeling in Session Search

Christophe Van Gysel
cvangysel@uva.nl

Evangelos Kanoulas
e.kanoulas@uva.nl

Maarten de Rijke
derijke@uva.nl

University of Amsterdam, Amsterdam, The Netherlands

6
1
0
2
 
g
u
A
 
3
2
 
 
]

R

I
.
s
c
[
 
 
1
v
6
5
6
6
0
.
8
0
6
1
:
v
i
X
r
a

ABSTRACT
Lexical query modeling has been the leading paradigm for session
search.
In this paper, we analyze TREC session query logs and
compare the performance of different lexical matching approaches
for session search. Naive methods based on term frequency weigh-
ing perform on par with specialized session models. In addition,
we investigate the viability of lexical query models in the setting
of session search. We give important insights into the potential and
limitations of lexical query modeling for session search and pro-
pose future directions for the ﬁeld of session search.

1.

INTRODUCTION

Many complex information seeking tasks, such as planning a
trip or buying a car, cannot sufﬁciently be expressed in a single
query [7]. These multi-faceted tasks are exploratory, comprehen-
sive, survey-like or comparative in nature [14] and require multiple
search iterations to be adequately answered [8]. Donato et al. [5]
note that 10% of the user sessions (more than 25% of query vol-
ume) consists of such complex information needs.

The TREC Session Track [15] created an environment for re-
searchers “to test whether systems can improve their performance
for a given query by using previous queries and user interactions
with the retrieval system.” The track’s existence led to an increas-
ing number of methods aimed at improving session search. Yang
et al. [16] introduce the Query Change Model (QCM), which uses
lexical editing changes between consecutive queries in addition to
query terms occurring in previously retrieved documents, to im-
prove session search. They heuristically construct a lexicon-based
query model for every query in a session. Query models are then
linearly combined for every document, based on query recency [16]
or document satisfaction [3, 10], into a session-wide lexical query
model. However, there has been a clear trend towards the use of
supervised learning [3, 12, 16] and external data sources [6, 11].
Guan et al. [6] perform lexical query expansion by adding higher-
order n-grams to queries by mining document snippets. In addi-
tion, they expand query representations by including anchor texts
to previously top-ranked documents in the session. Carterette et al.
[3] expand document representations by including incoming anchor

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ICTIR ’16, September 12 - 16, 2016, Newark, DE, USA
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4497-5/16/09. . . $15.00
DOI: http://dx.doi.org/10.1145/2970398.2970422

texts. Luo et al. [12] introduce a linear point-wise learning-to-rank
model that predicts relevance given a document and query change
features. They incorporate document-independent session features
in their ranker.

The use of machine-learned ranking and the expansion of query
and document representations is meant to address a speciﬁc in-
stance of a wider problem in information retrieval, namely the query
document mismatch [9]. In this paper, we analyze the session query
logs made available by TREC and compare the performance of dif-
ferent lexical query modeling approaches for session search, taking
into account session length.1 In addition, we investigate the viabil-
ity of lexical query models in a session search setting.

The main purpose of this paper is to investigate the potential of
lexical methods in session search and provide foundations for fu-
ture research. We ask the following questions:
(1) Increasingly
complex methods for session search are being developed, but how
do naive methods perform? (2) How well can lexical methods per-
form? (3) Can we solve the session search task using lexical match-
ing only?

2. LEXICAL MATCHING FOR SESSIONS
We deﬁne a search session s as a sequence of n interactions
(qi, ri) between user and search engine, where qi denotes a user-
issued query consisting of |qi| terms ti,1, . . . , ti,|qi| and ri denotes
a result page consisting of |ri| documents ri,1, . . . , ri,|ri| returned
by the search engine (also referred to as SERP). The goal, then, is
to return a SERP rn+1 given a query qn+1 and the session history
that maximizes the user’s utility function.

In this work, we formalize session search by modeling an ob-
served session s as a query model parameterized by θs = {θs
1, . . . ,
|V |}, where θs
θs
i denotes the weight associated with term ti ∈ V
(speciﬁed below). Documents dj are then ranked in decreasing or-
der of

log P (dj | s) =

k log θdj
θs
k ,

|V |
(cid:88)

k=1

where θdj is a lexical model of document dj, which can be a lan-
guage model (LM), a vector space model or a specialized model
using hand-engineered features. Query model θs is a function of
the query models of the interactions i in the session, θsi (e.g., for
a uniform aggregation scheme, θs = (cid:80)
i θsi ). Existing session
search methods [6, 16] can be expressed in this formalism as fol-
lows:
Term frequency (TF) Terms in a query are weighted according to
k becomes the frequency
1An open-source implementation of our testbed for evaluating ses-
sion search is available at https://github.com/cvangysel/sesh.

their frequency in the query (i.e., θsi

of term tk in qi). Queries qi that are part of the same session
s are then aggregated uniformly for a subset of queries. In
this work, we consider the following subsets: the ﬁrst query,
the last query and the concatenation of all queries in a ses-
sion. Using the last query corresponds to the ofﬁcial baseline
of the TREC Session track [3].

Nugget Nugget [6] is a method for effective structured query for-
mulation for session search. Queries qi, part of session s, are
expanded using higher order n-grams occurring in both qi
and snippets of the top-k documents in the previous interac-
tion, ri−1,1, . . . , ri−1,k. This effectively expands the vocab-
ulary by additionally considering n-grams next to unigram
terms. The query models of individual queries in the session
are then aggregated using one of the aggregation schemes.
Nugget is primarily targeted at resolving the query-document
mismatch by incorporating structure and external data and
does not model query transitions. The method can be ex-
tended to include external evidence by expanding θs to in-
clude anchor texts pointing to (clicked) documents in previ-
ous SERPs.

Query Change Model (QCM) QCM [16] uses syntactic editing
changes between consecutive queries in addition to query
changes and previous SERPs to enhance session search. In
QCM [16, Section 6.3], document model θd is provided by
a language model with Dirichlet smoothing and the query
model at interaction i, θsi , in session s is given by

θsi
k =






1 + α(1 − P (tk | ri−1,1)),
1 − βP (tk | ri−1,1),
1 + (cid:15) idf(tk),
−δP (tk | ri−1,1),

tk ∈ qtheme
tk ∈ +∆q ∧ tk ∈ ri−1,1
tk ∈ +∆q ∧ tk /∈ ri−1,1
tk ∈ −∆q,

where qtheme are the session’s theme terms, +∆q (−∆q, resp.)
are the added (removed) terms, P (tk | ri−1,1) denotes the
probability of tk occurring in SAT clicks, idf(tk) is the in-
verse document frequency of term tk and α, β, (cid:15), δ are pa-
rameters. The θsi are then aggregated into θs using one of
the aggregation schemes, such as the uniform aggregation
scheme (i.e., the sum of the θsi ).

3. EXPERIMENTS

3.1 Benchmarks

We evaluate the lexical query modeling methods listed in §2 on
the session search task (G1) of the TREC Session track from 2011
to 2014 [15]. We report performance on each track edition inde-
pendently and on the track aggregate. Given a query, the task is to
improve retrieval performance by using previous queries and user
interactions with the retrieval system. To accomplish this, we ﬁrst
retrieve the 2,000 most relevant documents for the given query and
then re-rank these documents using the methods described in §2.
We use the “Category B” subsets of ClueWeb09 (2011/2012) and
ClueWeb12 (2013/2014) as document collections. Both collections
consist of approximately 50 million documents. Spam documents
are removed before indexing by ﬁltering out documents with scores
(GroupX and Fusion, respectively) below 70 [4]. Table 1 shows an
overview of the benchmarks and document collections.

3.2 Evaluation measures

To measure retrieval effectiveness, we report Normalized Dis-
counted Cumulative Gain at rank 10 (NDCG@10) in addition to

Mean Reciprocal Rank (MRR). The relevance judgments of the
tracks were converted from topic-centric to session-centric accord-
ing to the mappings provided by the track organizers.2 Evaluation
measures are then computed using TREC’s ofﬁcial evaluation tool,
trec_eval.3

3.3 Systems under comparison

We compare the lexical query model methods outlined in §2. All
methods compute weights for lexical entities (e.g., unigram terms)
on a per-session basis, construct a structured Indri query [13] and
query the document collection using pyndri.4 For fair compar-
ison, we use Indri’s default smoothing conﬁguration (i.e., Dirich-
let smoothing with µ = 2500) and uniform query aggregation for
all methods (different from the smoothing used for QCM in [16]).
This allows us to separate query aggregation techniques from query
modeling approaches in the case of session search.

For Nugget, we use the default parameter conﬁguration (ksnippet =
10, θ = 0.97, kanchor = 5 and β = 0.1), using the strict expansion
method. We report the performance of Nugget without the use of
external resources (RL2), with anchor texts (RL3) and with click
data (RL4). For QCM, we use the parameter conﬁguration as de-
scribed in [12, 16]: α = 2.2, β = 1.8, (cid:15) = 0.07 and δ = 0.4.

In addition to the methods above, we report the performance of
an oracle that always ranks in decreasing order of ground-truth rel-
evance. This oracle will give us an upper-bound on the achievable
ranking performance.

3.4

Ideal lexical term weighting

We investigate the maximally achievable performance by weight-
ing query terms.
Inspired by Bendersky et al. [1], we optimize
NDCG@10 for every session using a grid search over the term
weight space. We sweep the weight of every term between −1.0
and 1.0 (inclusive) with increments of 0.1, resulting in a total of
21 weight assignments per term. Due to the exponential time com-
plexity of the grid search, we limit our analysis to the 230 sessions
with 7 unique query terms or less (see Table 1). This experiment
will tell us the maximally achievable retrieval performance in ses-
sion search by the re-weighting lexical terms only.

In this section, we report and discuss our experimental results.
Of special interest to us are the methods that perform lexical match-
ing based on a user’s queries in a single session: QCM, Nugget
(RL2) and the three variants of TF. Table 2 shows the methods’
performance on the TREC Session track editions from 2011 to
2014. No single method consistently outperforms the other meth-
ods. Interestingly enough, the methods based on term frequency
(TF) perform quite competitively compared to the specialized ses-
sion search methods (Nugget and QCM). In addition, the TF variant
using all queries in a session even outperforms Nugget (RL2) on
the 2011 and 2014 editions and QCM on nearly all editions. Using
the concatenation of all queries in a session, while being an obvi-
ous baseline, has not received much attention in recent literature
or by TREC [15]. In addition, note that the best-performing (un-
supervised) TF method achieves better results than the supervised
method of Luo et al. [12] on the 2012 and 2013 tracks. Fig. 1 de-
picts the boxplot of the NDCG@10 distribution over all track edi-
tions (2011–2014). The term frequency approach using all queries

2We take into account the mapping between judgments and actual
relevance grades for the 2012 edition.
3https://github.com/usnistgov/trec_eval
4https://github.com/cvangysel/pyndri

In §4, we analyze the methods listed above in terms of their ability
to handle sessions of different lengths and contextual history.

4. RESULTS & DISCUSSION

Table 1: Overview of 2011, 2012, 2013 and 2014 TREC session tracks. For the 2014 track, we report the total number of sessions in
addition to those sessions with judgments. We report the mean and standard deviation where appropriate; M denotes the median.
2012

2014

2013

2011

Sessions
Sessions
Queries per session
Unique terms per session

Topics
Session per topic
Document judgments per topic

Collection
Documents
Document length
Terms
Spam scores

76
3.68 ± 1.79; M=3.00
7.01 ± 3.28; M=6.50

98
3.03 ± 1.57; M=2.00
5.76 ± 2.95; M=5.00

87
5.08 ± 3.60; M=4.00
8.86 ± 4.38; M=8.00

100 (1,021 total)
4.34 ± 2.22; M=4.00
7.79 ± 4.08; M=7.00

1.23 ± 0.46; M= 1.00
313.11 ± 114.63; M=292.00

2.04 ± 0.98; M= 2.00
372.10 ± 162.63; M=336.50

2.18 ± 0.93; M= 2.00
268.00 ± 116.86; M=247.00

20.95 ± 4.81; M= 21.00
332.33 ± 149.03; M=322.00

21,258,800
1,096.18 ± 1,502.45
3.40 × 107 (2.33 × 1010 total)
GroupX

15,702,181
649.07 ± 1,635.29
2.36 × 107 (1.02 × 1010 total)
Fusion

Table 2: Overview of experimental results on 2011–2014 TREC Session tracks of the TF, Nugget and QCM methods (see §2). The
ground-truth oracle shows the ideal performance (§3.3).

2011

2012

2013

2014

NDCG@10 MRR NDCG@10 MRR NDCG@10 MRR NDCG@10 MRR

Ground-truth oracle
TF (ﬁrst query)
TF (last query)
TF (all queries)
Nugget (RL2)
Nugget (RL3)
Nugget (RL4)
QCM

0.777
0.371
0.358
0.448
0.437
0.442
0.437
0.440

0.868
0.568
0.598
0.685
0.677
0.678
0.677
0.661

0.695
0.302
0.316
0.348
0.352
0.360
0.352
0.342

0.865
0.523
0.586
0.604
0.609
0.619
0.609
0.575

0.517
0.121
0.133
0.162
0.163
0.162
0.163
0.160

0.920
0.379
0.358
0.477
0.488
0.488
0.488
0.484

0.410
0.120
0.156
0.174
0.173
0.172
0.173
0.162

0.800
0.336
0.458
0.478
0.476
0.477
0.476
0.450

as for these sessions there is only a limited history that specialized
methods can use. However, the TF method using the concatena-
tion of all queries still performs competitively for longer sessions.
This can be explained by the fact that as queries are aggregated
over time, a better representation of the user’s information need is
created. This aggregated representation naturally emphasizes im-
portant theme terms of the session, which is a key component in
the QCM [16].

Figure 1: Box plot of NDCG@10 on all sessions of the TREC
Session track (2011–2014). The box depicts the ﬁrst, second
(median) and third quartiles. The whiskers are located at 1.5
times the interquartile range on both sides of the box. The
square and crosses depict the average and outliers respectively.

achieves the highest mean/median overall. Given this peculiar ﬁnd-
ing, where a generic retrieval model performs better than special-
ized session search models, we continue with an analysis of the
TREC Session search logs.

In Fig. 2 we investigate the effect of varying session lengths in
the session logs. The distribution of session lengths is shown in the
top row of Fig. 2. For the 2011–2013 track editions, most sessions
consisted of only two queries. The mode of the 2014 edition lies at
5 queries per session. If we examine the performance of the meth-
ods on a per-session length basis, we observe that the TF methods
perform well for short sessions. This does not come as a surprise,

(a) Full history of session

(b) Previous query in session only

Figure 3: Difference in NDCG@10 with the ofﬁcial TREC
baseline (TF using the last query only) of 5-query sessions (45
instances) with different history conﬁgurations for the 2011–
2014 TREC Session tracks.

Figure 2: The top row depicts the distribution of session lengths for the 2011–2014 TREC Session tracks, while the bottom row shows
the performance of the TF, Nugget and QCM models for different session lengths.

(a) 2011

(b) 2012

(c) 2013

(d) 2014

Table 3: NDCG@10 for TF weighting (§2), ideal term weight-
ing (§3.4) and the ground-truth oracle (§3.3).

2011

2012

2013

2014

0.391 0.333 0.179 0.183
TF (all queries)
Ideal term weighing 0.589 0.528 0.361 0.296
Ground-truth oracle 0.716 0.682 0.593 0.453

How do these methods perform as the search session progresses?
Fig. 3 shows the performance of sessions of length ﬁve after every
user interaction, when using all queries in a session (Fig. 3a) and
when using only the previous query (Fig. 3b). We can see that
NDCG@10 increases as the session progresses for all methods.
Beyond half of the session, the session search methods outperform
retrieving according to the last query in the session. We see that,
for longer sessions, specialized methods (Nugget, QCM) outper-
form generic term frequency models. This comes as no surprise.
Bennett et al. [2] note that users tend to reformulate and adapt their
information needs based on observed results and this is essentially
the observation upon which QCM builds.

Fig. 1 and Table 2 reveal a large NDCG@10 gap between the
compared methods and the ground-truth oracle. How can we bridge
this gap? Table 3 shows a comparison between frequency-based
term weighting, the ideal term weighting (§3.4) and the ground-
truth oracle (§3.3) for all sessions consisting of 7 unique terms or
less (§3.4). Two important observations. There is still plenty of
room for improvement using lexical query modeling only. Rela-
tively speaking, around half of the gap between weighting accord-
ing to term frequency and the ground-truth can be bridged by pre-
dicting better term weights. However, the other half of the per-
formance gap cannot be bridged using lexical matching only, but
instead requires a notion of semantic matching [9].

5. CONCLUSIONS

We have shown that naive frequency-based term weighting meth-
ods perform on par with specialized session search methods on
the TREC Session track (2011–2014).5 This is due to the fact
that shorter sessions are more prominent in the session query logs.
On longer sessions, specialized models are able to exploit session
history more effectively. Future work should focus on creating
benchmarks consisting of longer sessions with complex informa-
tion needs. Perhaps more importantly, we have looked at the vi-
ability of lexical query matching in session search. There is still
much room for improvement by re-weighting query terms. How-

5An open-source implementation of our testbed for evaluating ses-
sion search is available at https://github.com/cvangysel/sesh.

ever, the query/document mismatch is prevalent in session search
and methods restricted to lexical query modeling face a very strict
performance ceiling. Future work should focus on better lexical
query models for session search, in addition to semantic matching
and tracking the dynamics of contextualized semantics in search.

Acknowledgments This work was supported by the Google Faculty Re-
search Award and the Bloomberg Research Grant programs. Any opinions,
ﬁndings and conclusions or recommendations expressed in this material are
the authors’ and do not necessarily reﬂect those of the sponsors. The authors
would like to thank Daan Odijk, David Graus and the anonymous reviewers
for their valuable comments and suggestions.
REFERENCES
[1] M. Bendersky, D. Metzler, and W. B. Croft. Effective query

formulation with multiple information sources. In SIGIR, pages
443–452. ACM, 2012.

[2] P. N. Bennett, R. W. White, W. Chu, S. T. Dumais, P. Bailey,
F. Borisyuk, and X. Cui. Modeling the impact of short- and
long-term behavior on search personalization. In SIGIR, pages
185–194. ACM, 2012.

[3] B. Carterette, E. Kanoulas, M. M. Hall, and P. D. Clough. Overview

of the trec 2014 session track. In TREC, 2014.

[4] G. V. Cormack, M. D. Smucker, and C. L. Clarke. Efﬁcient and
effective spam ﬁltering and re-ranking for large web datasets.
Information retrieval, 14(5):441–465, 2011.

[5] D. Donato, F. Bonchi, T. Chi, and Y. Maarek. Do you want to take
notes?: identifying research missions in yahoo! search pad. In
WWW, pages 321–330. ACM, 2010.

[6] D. Guan, H. Yang, and N. Goharian. Effective structured query

formulation for session search. Techn. report, 2012.

[7] A. Hassan, R. W. White, S. T. Dumais, and Y.-M. Wang. Struggling

or exploring?: disambiguating long search sessions. In WSDM, pages
53–62. ACM, 2014.

[8] A. Kotov, P. N. Bennett, R. W. White, S. T. Dumais, and J. Teevan.

Modeling and analysis of cross-session search tasks. In SIGIR, pages
5–14. ACM, 2011.

[9] H. Li and J. Xu. Semantic matching in search. Found. & Tr. in

Information Retrieval, 7(5):343–469, June 2014.

[10] J. Luo, X. Dong, and H. Yang. Modeling rich interactions in session
search - georgetown university at trec 2014 session track. Techn.
report, 2014.

[11] J. Luo, S. Zhang, and H. Yang. Win-win search: Dual-agent

stochastic game in session search. In SIGIR, pages 587–596. ACM,
2014.

[12] J. Luo, X. Dong, and H. Yang. Session search by direct policy

learning. In ICTIR, pages 261–270. ACM, 2015.

[13] D. Metzler and W. B. Croft. Combining the language model and
inference network approaches to retrieval. IPM, 40(5):735–750,
2004.

[14] K. Raman, P. N. Bennett, and K. Collins-Thompson. Toward

whole-session relevance: exploring intrinsic diversity in web search.
In SIGIR, pages 463–472. ACM, 2013.

[15] TREC. Session Track, 2009–2014.
[16] H. Yang, D. Guan, and S. Zhang. The query change model:

Modeling session search as a markov decision process. TOIS, 33(4):
20:1–20:33, May 2015.

