Event Representations with Tensor-based Compositions

Noah Weber
Stony Brook University
Stony Brook, New York, USA
nwweber@cs.stonybrook.edu

Niranjan Balasubramanian
Stony Brook University
Stony Brook, New York, USA
niranjan@cs.stonybrook.edu

Nathanael Chambers
United States Naval Academy
Annapolis, Maryland, USA
nchamber@usna.edu

7
1
0
2
 
v
o
N
 
1
2
 
 
]
L
C
.
s
c
[
 
 
1
v
1
1
6
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Robust and ﬂexible event representations are important to
many core areas in language understanding. Scripts were
proposed early on as a way of representing sequences of
events for such understanding, and has recently attracted
renewed attention. However, obtaining effective representa-
tions for modeling script-like event sequences is challeng-
ing. It requires representations that can capture event-level
and scenario-level semantics. We propose a new tensor-based
composition method for creating event representations. The
method captures more subtle semantic interactions between
an event and its entities and yields representations that are
effective at multiple event-related tasks. With the continu-
ous representations, we also devise a simple schema gener-
ation method which produces better schemas compared to
a prior discrete representation based method. Our analysis
shows that the tensors capture distinct usages of a predicate
even when there are only subtle differences in their surface
realizations.

Introduction
Understanding the events described in text is central to ap-
plications in artiﬁcial intelligence such as question answer-
ing, discourse understanding, and information extraction.
Research in event understanding ranges from relation ex-
traction of individual events to full document understand-
ing of all its events. Inspired by the concept of scripts, pro-
posed in the seminal work by Schank and Abelson (1977),
much work has looked at modeling stereotypical sequences
of events in order to drive discourse understanding. Early
rule-based methods for this task were characteristically brit-
tle and domain-speciﬁc. Later work proposed computational
models for script learning and understanding (Mooney and
DeJong 1985; Chambers and Jurafsky 2009; Balasubrama-
nian et al. 2013), but they use shallow event representations
dependent on their speciﬁc surface words. Others have fo-
cused on training neural networks for robust event represen-
tations, using them to predict which events are likely to oc-
cur next (Modi 2016; Pichotta and Mooney 2016).

To be broadly useful, a good representation should
capture both event-level semantics (e.g., synonymy) and
broader scenario-level semantics. Event-level semantics are

Figure 1: Additive compositions of word embeddings do not
distinguish distinct events. Tensor compositions can tease
out distinct events even with high lexical overlap, and rec-
ognize related events even with low lexical overlap.

accessible to simple composition methods. However, mod-
eling scenario-level semantics is challenging. For example,
consider the following events: (i) she threw a football and
(ii) she threw a bomb. Even though the subject and the verb
are the same, these two events denote entirely different sce-
narios – sports and terrorism. The interaction of football or
bomb with the predicate threw is what determines the precise
semantics of the event and the broader scenario in which it
is embedded. A change to a single argument requires a large
shift in the event’s representation.

As illustrated in Figure 1, due to the overlap of words, pa-
rameterized additive models (Granroth-Wilding and Clark
2016; Modi 2016) and RNN-based models (Pichotta and
Mooney 2016; Hu et al. 2017) are limited in their trans-
formations. Additive models combine the words in these
phrases by the passing the concatenation or addition of their
word embeddings to a parameterized function (usually a
feed forward neural network) that maps the summed vec-
tor into event embedding space. The additive nature of these
models makes it difﬁcult to model subtle differences in an
event’s surface form. Instead of additive models, we pro-
pose tensor-based composition models, which combine the
subject, predicate, and object to produce the ﬁnal event rep-
resentation. The models capture multiplicative interactions
between these elements and are thus able to make large shifts
in event semantics with only small changes to the arguments.

This paper puts forth three main contributions:

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

• A scalable tensor-based composition model for event
representations, which can implicitly recognize different

event contexts based on predicate argument interactions.
• A broad set of evaluations on event-related tasks: we ﬁnd
that the tensor-based event representation outperforms ad-
ditive compositions on (i) a sentence similarity task, (ii)
a new hard similarity task, and (iii) an event prediction
task (two variants of the narrative cloze), suggesting broad
utility in event-related tasks.

• A simple yet effective method for generating event
schemas: to our knowledge, ours is the ﬁrst proposal
for using continuous event representations in schema
generation. We show that event tensors produce supe-
rior schemas compared to a prior distributional counting
model (Balasubramanian et al. 2013).

Models: Tensor-based Event Composition
Event composition models produce vector representations of
an event given its predicate and argument representations. To
be broadly useful, a representation should have two proper-
ties: (i) Events that are usually part of the same underly-
ing scenario should get similar representations – that is they
should be embedded close together in the event space. (ii)
Events that occur in different scenarios should get differ-
ent representations, even if they have similar lexical expres-
sions. In our earlier example, we want she threw football and
she threw bomb to be farther apart in the embedding space,
even though they share the subject and the verb.

An effective event composition model must be able to ac-
count for the numerous usage contexts for a given predicate
and should be able to invoke the appropriate usage context
based on the arguments. This problem is compounded even
further when considering predicates that take on many dif-
ferent meanings depending on their arguments. This requires
that the composition models be sensitive to small changes in
the predicate argument interactions. Simple averaging or ad-
ditive transformations are not enough.

One way to capture this rich interaction is through tensor
composition. Tensor-based composition has been used for
composing over tree based structures (Socher et al. 2013b)
and in general for modeling words with operator like se-
mantics (Grefenstette et al. 2013; Fried, Polajnar, and Clark
2015). A key beneﬁt of tensor composition that is relevant to
our setting is that they capture multiplicative interactions of
all the elements involved in the composition, which allows
for the composition to be sensitive to even small changes in
predicate argument interaction.

Formally, we can deﬁne a tensor-based event composition
model as follows. Given a predicate-speciﬁc tensor P , and
the embeddings of the subject s and the object o, the rep-
resentation for the event e can be composed through tensor
contraction denoted as e = P (s, o). Each element in the d(cid:48)-
dimensional event vector is obtained by the multiplicative
interaction of all elements of the subject and object vectors,
weighted by a term that depends on the predicate. The ith
component of e is computed as:

ei =

Pijksjok

(cid:88)

j,k

(1)

The key question with predicate-speciﬁc tensors is how
to learn and reason with such a huge number of parameters.

Figure 2: Predicate Tensor Model: Event representations are com-
puted using a predicate tensor that combines the arguments. Ele-
ments in blue are inputs, green are model parameters, and pink are
outputs generated by the model. Function h produces the predicate
tensor using tensors W and U as shown in Equation 2. Function g
produces the ﬁnal event representation through tensor contraction
as shown in Equation 3.

Prior work that models words as tensors are not scalable be-
cause the methods for learning such word-speciﬁc tensors
require a large number of parameters, as well as a large num-
ber of training instances for each word. Relaxing the need
for predicate speciﬁc training data and reducing the number
of parameters motivate the two models we propose here.

Predicate Tensor Model
Rather than learn a predicate-speciﬁc tensor, we instead
learn two general tensors that can generate a predicate-
speciﬁc tensor on the ﬂy. The predicate tensor model deﬁnes
a function from a basic word embedding for the predicate
to a tensor P . In this model, the predicate tensors are de-
rived from a shared base tensor W ∈ Rd×d×d (where d is
the input embedding dimension). To allow the predicate’s
word embedding to inﬂuence its resulting tensor, we allow
each element of W (each one dimensional ‘row’ of W ) to
be scaled by a value that depends on a linear function of the
predicate embedding p:

Pijk = Wijk

paUajk

(2)

(cid:88)

a

Here U is also a tensor in Rd×d×d which deﬁnes linear
functions for each one dimensional row of W , determining
how p should scale that dimension. Now, given the predicate
vector p, the subject vector s, and the object vector o, the
original tensor contraction P (s, o) we seek above is realized
as follows. Each element in the resulting event vector ei is
computed as:

ei =

pasjokWijkUajk

(3)

(cid:88)

a,i,j,k

Thus this model captures multiplicative interactions

across all three: subject, verb, and object.

Role Factored Tensor Model
The representation power of the predicate tensor comes at
the cost of model complexity and sensitivity. The ability to
capture multiplicative interactions across all its arguments
allows the predicate tensor to model complex relations be-
tween the predicate and its arguments. While this is useful
from a representation stand point, it also makes the model

Figure 3 displays the structure of the model. This factored
model has fewer parameters compared to the Predicate Ten-
sor Model and can also readily generalize to higher-arity
events with any arbitrary number of arguments.

Training Tasks
In order to learn the parameters of the tensor composition
models we employ two different training tasks, which corre-
spond to predicting two different types of contexts.

Predict Events
One natural way to learn script knowledge is to directly learn
how to predict what other events are likely to occur given
a set of events (Pichotta and Mooney 2016; Modi 2016).
We use an alternate learning formulation deﬁned over a pair
of events rather than over sequences of events. One goal is
to learn representations that maximize some similarity mea-
sure between co-occurring events similar to the task deﬁned
by Granroth-Wilding and Clark (2016)2.

Given some input event ei, a target event et which occurs
within in a window of w in front of ei is randomly chosen. A
negative event en is also randomly sampled from the entire
corpus. The regularized learning objective is to minimize the
following quantity:

1
N

N
(cid:88)

i=1

max(0, m + sim(ei, en) − sim(ei, et)) + λL(θ)

where sim(a, b) is cosine similarity, m is the margin, and
L(θ) is l2 regularization on all model parameters θ.

Predict Words
A second training approach is to predict the nearby words of
an event’s sentence context, rather than just the event words.
This is similar to most other word representation learning
objectives. Formally the objective function to minimize is:

1
N

N
(cid:88)

nei(cid:88)

i=1

j=1

−log(P (wij|ei)) + λL(θ)

where nei is the number of words in the sentence that ei
appears in, and wij is the jth word in the sentence for
ei. P (wij|ei) is computed via a softmax layer. The use of
this type of inter sentence word prediction for ﬁnding em-
beddings for phrases has been shown to be useful (Le and
Mikolov 2014).

Training Details
We use the New York Times Gigaword Corpus for training
data. Event triples are extracted using the Open Information
Extraction system Ollie (Mausam et al. 2012). We initial-
ize the word embedding layer with 100 dimensional pre-
trained GloVe vectors (Pennington, Socher, and Manning

2The objective function in (Granroth-Wilding and Clark 2016)
differs from ours in that they learn a coherence function which is
used to measure similarity between events, rather than directly us-
ing cosine similarity.

Figure 3: Role Factored Tensor Model: Uses two tensor contrac-
tions of the predicate with the subject and object, which are then
combined. Elements in blue are inputs, green are model parame-
ters, and pink are outputs generated by the model. Function f is
the tensor contraction operation deﬁned in Equation 6.

behavior more complex and highly sensitive – changes in the
components of the event can drastically change the value of
the event embedding.

In many cases, however, it may not be necessary to jointly
model the interaction of a predicate with all of its arguments.
Often times, the predicate’s interaction with just one of its
arguments is enough for recognizing its usage context. For
example, knowing that football is an argument to throw im-
mediately places the event in the context of sports.

Rather than model interactions between all components,
we thus introduce a factored composition strategy: capture
interactions between the predicate and its arguments sepa-
rately to then combine these interactions into the ﬁnal em-
bedding. In this model, a single tensor T ∈ Rh×d×d (where
h is the output dimension and d is deﬁned as before) is used
to capture these interactions. The resulting interactions are
then combined using role-speciﬁc transformations1.

Formally, let s, o, and p denote the word vectors for the
subject, object, and the predicate respectively. The argument
speciﬁc interactions are captured using two compositions of
the predicate, one with the subject and one with the object:

As before, this composition is deﬁned via tensor contrac-
tion. Given arbitrary arguments a and b, the element vi of
the output vector T (a, b) = v ∈ Rh is given by:

vs = T (s, p)
vo = T (o, p)

vi =

Tljkajbk

(cid:88)

j,k

(4)
(5)

(6)

The subject and object interactions vs and vo are then
transformed via their respective role speciﬁc matrices,
Ws, Wv ∈ Rd(cid:48)×h and summed together to obtain the ﬁnal
event embedding e ∈ Rd(cid:48)

:

e = Wsvs + Wovo

(7)

1This approach is similar to the application of recursive tensor
composition (Socher et al. 2013b) but is not fully recursive in that
the partial interactions are not combined using recursive tensor ap-
plication. We found this additional recursion to be detrimental to
performance.

2014). Like previous work (Modi 2016; Granroth-Wilding
and Clark 2016), we allow the word embeddings to be fur-
ther updated during training for all models.

We hold out 4000 articles from the corpus to construct
dev sets for hyperparameter tuning, and 6000 articles for test
purposes. We make all code and data publicly available.3
Hyperparameter tuning was done using dev sets constructed
for the CMCNC and MCNC tasks (see below). Training was
done using Adagrad (Duchi, Hazan, and Singer 2011) with
a learning rate of 0.01 and a minibatch size of 128.

Evaluation
We evaluate our proposed tensor models on a variety of
event related tasks, comparing against a compositional neu-
ral network model, a simple multiplicative model, and an
averaging baseline. Since our goal is to produce a event rep-
resentation given a single event, and not a sequence as in Pi-
chotta and Mooney (2016), RNN based models are not suit-
able for this task. We report results on both training tasks:
predicting events (EV) and predicting words (WP).

Baselines
Compositional Neural Network (NN) Our ﬁrst baseline is
an neural network model used previously in recent work.
The event representation in this model is computed by feed-
ing the concatenation of the subject, predicate, and object
embedding into a two layer neural network4.

e = W ∗ tanh(H[s; p; o])

where W and H are matrices, the main model parameters.

This basic architecture was used to generate event repre-
sentations for narrative cloze tasks (Modi and Titov 2013;
Modi 2016; Granroth-Wilding and Clark 2016). We adapt
this architecture for our task – given the input event, whose
representation is to be composed, predict the neighboring
context (other events or words in the sentence). This devi-
ates from the model used in (Modi 2016) mainly in training
objective, and that the embedding of the protagonist’s de-
pendency is fed in as input (see the Related Works section
for details). This architecture was also used in (Granroth-
Wilding and Clark 2016) to obtain event representations,
which are then fed to another network that measures coher-
ence of the event representations. We only use the event rep-
resentation part of this model and train it to maximize our
training objectives.
Elementwise Multiplicative Composition The second
baseline extends the additive composition model by simply
concatenating the elementwise multiplications between the
verb and its subject/object. This models some (though not
all) of the multiplicative interactions. The embedding in this
model is computed as:

e = W ∗ tanh(H[s; p; o; p (cid:12) s; p (cid:12) o])

where (cid:12) denotes elementwise multiplication.

3github.com/stonybrooknlp/event-tensors
4We additionally tried a three layer network, however this

slightly decreased performance on the dev set

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Multiplicative
Averaging

ρ

WP
0.71
0.71
0.68
0.65

EV
0.64
0.63
0.63
0.57

0.67

Table 1: Performance on the Transitive Sentence Similarity
dataset, as indicated by Spearman’s ρ

Averaging Baseline This represents each event as the aver-
age of the constituent word vectors using pretrained GloVe
embeddings (Pennington, Socher, and Manning 2014).

Similarity Evaluations
Transitive Sentence Similarity Similarity tasks are a
common way to measure the quality of vector embeddings.
The transitive sentence similarity dataset (Kartsaklis and
Sadrzadeh 2014a) contains 108 pairs of transitive sentences:
short phrases containing a single subject, object, and verb
(e.g., agent sell property). Every pair is annotated by a hu-
man with a similarity score from 1 to 7. For example, pairs
such as (design, reduce, amount) and (company, cut, cost)
are annotated with a high similarity score, while pairs such
as (wife, pour, tea) and (worker, join, party) are given low
similarity scores. Since each pair has several annotations, we
use the average annotator score as the gold score. We evalu-
ate using the Spearman’s correlation of the cosine similarity
given by each model and the annotated similarity score.

Hard Similarity Task The main requirement we laid out
for event composition is that similar events should be em-
bedded close to each other, and dissimilar events or those
from distinct scenarios should be farther from each other. We
create a hard similarity task to explicitly measure how well
the representations satisfy this requirement. To this end, we
create two types of event pairs, one with events that should
be close to each other but have very little lexical overlap
(e.g., police catch robber / authorities apprehend suspect),
and another with events that should be farther apart but have
high overlap (e.g., police catch robber / police catch disease.
A good composition model should have higher cosine
similarity for the similar pair than for the dissimilar pair. To
evaluate this directly we created 230 pairs (115 pairs each of
similar and dissimilar types). To create the set, we have one
annotator create similar/dissimilar pairs from a set of am-
biguous verbs, while three different annotators give the sim-
ilarity/dissimilarity rankings. We kept pairs where the anno-
tators agreed completely. For each composition method, we
obtain the cosine similarity of the pairs under that represen-
tation, and report the fraction of cases where the similar pair
receives a higher cosine than the dissimilar pair.

Results Table 1 shows the Spearman’s ρ scores of the var-
ious models on the transitive similarity task. Consistent with
prior work (Milajevs et al. 2014), we ﬁnd that simple aver-
aging is a competitive baseline for the task. The neural net-
work baseline is only slightly better than averaging. When

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

Accuracy
EV
43.5†
41.0 †
33.0
33.9

WP
23.5
35.7†
20.9
11.3

5.2

Table 2: Hard Similarity Results: Accuracy is the percentage
of cases where the similar pair had higher cosine similarity
than the dissimilar pair.

training for word prediction, both the predicate and the role
factored tensor models have a higher correlation (+3 points
in ρ). Across all models, training for the word objective is
better than training for the event objective. This is to be ex-
pected since the word prediction task focuses on a narrower
context, requiring that representation to be consistent with
information within the sentence in which it appears. This
goal aligns well with the sentence similarity task where the
events that are roughly exchangeable are deemed similar.

Table 2 compares the percentage of cases where the sim-
ilar pairs had a higher cosine similarity than dissimilar pairs
under each event composition method. Both tensor meth-
ods outperform the baselines showing that tensors capture a
richer and broader set of semantics about the events. Inter-
estingly, the event objective is better than word prediction
for all models. We believe the broader context used by the
event prediction objective helps capture broader event se-
mantics necessary to generalize to the difﬁcult pairs.

Coherent Multiple Choice Narrative Cloze
The above experiments judge event similarity, but our
broader goal is to model real-world knowledge. The nar-
rative cloze task was proposed to evaluate script knowl-
edge and knowledge about events that occur together in the
world (Chambers and Jurafsky 2008). The task starts with
a series of events that are mentioned in a document, but
hides one of the events. A reasoning system should pre-
dict what the held out event is, given only the other events.
Event predication is typically done by choosing an event
such that it maximizes some similarity score with the context
events.5 This formulation is difﬁcult since the output space
of possible events is rather large. We evaluate on variant
called the multi-choice narrative cloze (MCNC) (Granroth-
Wilding and Clark 2016), where the system should distin-
guish the held out event from a small set of randomly drawn
events.

However, using automatic cloze evaluation has multiple
issues (Chambers 2017), one of which is that it is overly
sensitive to frequency cutoffs of common events (e.g. said,
was, did, etc.) and errors in the preprocessing tools. To ad-
dress these, we manually curated an evaluation set for the
MCNC task, and call it the Coherent Multiple Choice Nar-
rative Cloze (CMCNC). We generated an MCNC dataset and
made three modiﬁcations.

5We use cosine similarity as our measure

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

CMCNC

MCNC

WP
70.1†
64.5
65.7
67.3

EV WP
42.2
32.3
38.4
41.7

72.1 †
66.1
68.5
67.7

EV
46.5 †
41.1
45.3
45.4

26.7

14.3

Table 3: CMCNC Results: Predict the held out event, given
the observed events from the same document. The dataset
is curated manually for coherence by removing noisy in-
stances and context events. † denotes a statistically signif-
icant difference(α < 0.05) over the best competing baseline
under a paired t-test.

First, we manually removed events that are either: (1) fre-
quent events types that are in our stop event list , or (2) non-
sensical events coming from obvious extraction errors .

Second, we discard heldout events that don’t ﬁt the fol-
lowing criteria: (i) One of its entities must appear in the
given context events. (ii) Given the context events, the held
out event should seem plausible to a human evaluator.
Third, when the heldout event is included with 5 randomly
selected negative events, we replace the entities appearing
in the negative events with similar (under word embedding
distance) entities that appear in the context events.

Enforcing these constraints allows us to better evaluate
how well the system learned commonsense script knowl-
edge, rather than how well the system learned to emulate
noise in the data. For comparison, we also report on an au-
tomatically generated MCNC task. Since we do not restrict
the evaluation to narrative chains with a single protagonist,
the numbers for the automatic MCNC task are lower than
those reported in Granroth-Wilding and Clark (2016).

Results Table 3 show the results for the manually ﬁl-
tered CMCNC and the automatic MCNC tasks. Whereas the
word-based objective excelled on similarity tasks, the event-
based objective does better on cloze tasks. The Role Fac-
tor model shows signiﬁcant improvements in accuracy com-
pared to the neural network model (+4.4 points with word
prediction and +3.6 points with event prediction). The Pred-
icate tensor model, however, performs worse than the neural
network model. The human-curated evaluation shows vastly
different results than the automatic-MCNC, perhaps bolster-
ing the idea that MCNC is not ideal (Chambers 2017). Our
Role Factor model excels in both.

Generating Event Schemas
An event schema is a form of script like knowledge about a
scenario (e.g., a bank heist). Chambers and Jurafsky (2009)
introduce schemas as a set of the main entities in the sce-
nario (the robber, bank teller, etc.) and the main events they
participate in (robber steals money, teller calls police etc.).
Prior work on event schema generation use discrete repre-
sentations of events and build count-based conditional mod-
els over these representations c.f., (Chambers and Jurafsky
2009; Balasubramanian et al. 2013). The basic idea behind

System

Average Score
With 0’s Without 0’s

Role Factor (EV)
Comp. Neural Net (EV)
(Balasubramanian et al. 2013)

2.45
2.26
1.51

2.62
2.47
1.78

Table 4: Average Annotator Scores for generated schemas
(scale from 0-4). Higher scores indicate a more coherent
schema.

Schema Evaluation
We compare against previous work that produces schemas
using relation co-occurrence graphs (Balasubramanian et al.
2013). It also uses OpenIE triples mined from a text corpus.
We refer to this as the Relgrams approach. For a fair com-
parison, we choose 20 seed tuples at random from the list of
top seeds in (Balasubramanian et al. 2013). For each seed,
we generate a schema of 10 grounded events using our best
models. We report results using the Role Factor (EV) repre-
sentations, the Compositional Neural Network (EV) repre-
sentations, and the Relgrams approach.

Our evaluation is human-driven. We present annotators
with 3 schemas (from the 3 models) using the same seed.
For each event in each schema, annotators rated the event
on a 0-4 scale with regards to its relevance to the seed and
the rest of the schema. A score of 0 is reserved for events
that are completely nonsensical (either caused by an extrac-
tion error, or bad entity replacement). A score of 1 indicates
that the event was not relevant with no obvious relation to
the scenario, while a score of 4 indicates the event is highly
relevant and would be a core part of any description of the
scenario. Table 4 shows the average scores given for each
method. We report average ratings both with and without
nonsensical events6.

Both nearest neighbor schemas consistently out-ranked
the Relgrams schemas by a large margin. Figure 4 shows the
schemas produced by both systems using the same seed. The
biggest problem with the schemas produced by the Relgrams
method was their tendency to include overly speciﬁc triples
in the schemas, simply because they co-occur with one of
the events in the schema. The schemas based on continuous
representations can avoid this problem. Here is a typical ex-
ample: the event (police, found, machete) co-occurs a couple
times in an article with (he, likes to eat, dinner). Since (po-
lice, found, machete) is rare in the corpus, the count based
system takes into consideration the co-occurrence. Although
tuples similar to (police, found, machete) such as (authori-
ties, recovered, murder weapon) may appear in the corpus,
the counts based on discrete representations cannot share
evidence across these similar tuples. The method based on
continuous representations can take advantage of similarity
of words in the two tuples. The tensor model further aids by
helping the system better differentiate between events with
many similar words, but different meanings.

While the Compositional Neural Network and Role Fac-
tor representations both perform well compared to the Rel-

6All differences in means are signiﬁcant under t-test w/ α < .05

Figure 4: Example schemas from nearest neighbors and rel-
grams approach. X, Y, and Z are variables that denote dis-
tinct entities. Each row indicates the main event that the en-
tities participate in.

these methods is to start with a seed event and locate other
events that are also likely to occur in the scenario. These
methods suffer fragmented counts because of synonymy
(different tuples can denote the same event) and mixing
events from different contexts because of polysemy (simi-
lar looking tuples denote distinct events). Continuous event
representation provides an opportunity to address these is-
sues.

The tensor-based representations yields a simpler and
more direct approach to generating event schemas. Recall
that with the predict events objective, events that tend to co-
occur with each other end up with a similar representation
and get embedded closer to each other in the event space.
To create a schema seeded by an event, we can simply ﬁnd
its nearest neighbors in the event embedding space and use
them as candidates. This method is simple, scalable, and
does not require maintaining large tables of co-occurrence
information (c.f. Balasubramanian et al. (2013)).

Nearest Neighbor Schema Generation Like previous
systems, our system takes as input a single seed event and
produces the schema based on this event. Given a seed event
s the algorithm proceeds as follows:
• From a corpus of events, compute their representations
using one of the composition methods described above
• Find the k nearest neighbors to s in the text corpus with
respect to the cosine distance of their representations.
• Go through this list of nearest neighbors, add a neighbor
x to the schema if all the following conditions are true:
– The cosine distance between the GloVe embedding of
x’s predicate and all other predicates currently in the
schema is greater than α

– The cosine distance between the GloVe embedding of
at least one of x’s arguments and some entity e in the
schema is less than β. The argument is then replaced
with e to create a new event x(cid:48)

– The average cosine distance between the representation
of x(cid:48) (computed using the same composition function
used to compute the original representations) with all
other events in the schema is less than γ

The end result is a series of events representing a schema.
For values of α, β and γ, we use α = 0.5, β = 0.25, γ = 0.2
(for Role Factor), and γ = 0.3 (for Neural Network). Values
were selected using a develoment set of 20 seeds.

context 1
hitting
inning
walked
hit
ﬁelder

context 2
police
marchers
chechens
stoned
protesters

context 3
shouted
chanted
chanting
yelled
shouting

context 4
farve
elway
yards
rookie
broncos

context 5
lodged
complaint
ﬁled
remand
lawsuit

Table 5: Nearest Neighbors for the implicitly learned con-
texts in which ’throw’ may be used.

grams approach, the Role Factor factor does better, suggest-
ing that the model’s ability to tease out contextual usages of
predicates can be useful in end tasks.

Discussion

This is the ﬁrst paper to propose and evaluate event mod-
els on both event similarity and event schema predic-
tion/generation. We believe there is signiﬁcant overlap in
goals (any event representation needs to learn a nearness be-
tween similar events), but there are also differences (script
learning is not at all about synonymy).

Interpreting the Role Factor Model

The Role Factor model consistently outperforms on all tasks,
in particular over additive/concatenation models from recent
work in event learning. One question to ask is what exactly
is the Role Factor model learning?

Besides simply allowing multiplicative interactions be-
tween the predicate and its arguments, the Role Factored
model can be interpreted as capturing different scenarios or
contexts in which a predicate is used. First, observe that per-
forming the contraction to compute v = T (a, p) can be done
by ﬁrst partially applying T to p, producing a matrix P ,
whose columns Pi are the result of multiplying each slice
Ti in T by the predicate vector p. Thus, each slice Ti moves
the predicate vector to a new point p(cid:48) in the original word
embedding space. If there are distinct usages for a predicate
p, we hope that the slices of T provide a map from p to those
usages in word embedding space.

Table 5 shows the nearest neighbors for several different
Pi vectors for the verb throw. Each of these nearest neigh-
bor clusters indicate what type of arguments (either subject
or object) should ’activate’ the ith dimension, reﬂecting the
type of event contexts that tensor T captures.

Script Generation

This is the ﬁrst attempt to generate event scripts (or schemas)
from continuous representations. Recent work focuses on
event language models that can perform narrative cloze, but
to our knowledge, the goal of the learning explicit scripts has
been left behind. Our human evaluation of generated scripts
shows that nearest neighbor selection with coherent entities
builds far superior scripts than previous work. Figure 4 gives
an example of a generated schema from both systems.

Related Work

Neural Event Representations Neural event embedding
approaches learn representations by training to predict the
next event. Granroth-Wilding and Clark (2016) concatenate
predicate and argument embeddings and feed them to a neu-
ral network to generate an event embedding. Event embed-
dings are further concatenated and fed through another neu-
ral network to predict the coherence between the events.
Modi (2016) encode a set of events in a similar way and
use that to incrementally predict the next event – ﬁrst the ar-
gument, then the predicate and then next argument. Pichotta
and Mooney (2016) treat event prediction as a sequence to
sequence problem and use RNN based models conditioned
on event sequences in order to predict the next event. These
three works all model narrative chains, that is, event se-
quences in which a single entity (the protagonist) partici-
pates in every event. Hu et al. (2017) also apply a RNN ap-
proach, applying a new hierarchical LSTM model in order
predict events by generating discriptive word sequences.

Multiplicative and Tensor composition models Tensor
based composition models have been shown to be useful
for other NLP tasks such as sentiment analysis (Socher et
al. 2011; Socher et al. 2013b), knowledge base comple-
tion (Socher et al. 2013a), and in general for demonstrat-
ing compositional semantics in measuring sentence simi-
larity (Grefenstette et al. 2013; Kartsaklis and Sadrzadeh
2014b; Fried, Polajnar, and Clark 2015; Kim, de Marneffe,
and Fosler-Lussier 2015).

Polajnar, Rimell, and Clark (2015) learn verb speciﬁc ten-
sors by setting up a regression task where the learned tensor
for a verb is expected to yield a representation for the sen-
tential contexts where the verb is found. Huang et al. (2016)
use tensor based autoencoders over AMR representations of
events in order to induce event level (rather than scenerio
level), ACE7 style templates for use in event extraction. Sim-
ilarly, Huang et al. (2017) use tensor compositions to build
representations that facilitate zero shot relation extraction.
Related to our hard similarity task, Tilk et al. (2016) use
(factorized) tensor based methods to model the thematic ﬁt
between event arguments.

Schema/script learning Unsupervised learning of script
knowledge can be traced back to (Chambers and Jurafsky
2008), which introduced a count based technique for induc-
ing narrative chains. Chambers and Jurafsky (2009) extends
this idea to creating full on narrative schemas by merging
together narrative chains with argument overlap. Other un-
supervised induction approaches include a relation n-gram
based method (Balasubramanian et al. 2013), and generative
latent variable models (Nguyen et al. 2015; Chambers 2013;
Cheung, Poon, and Vanderwende 2013). All of these mod-
els worked on discrete representations for capturing co-
occurrence statistics. In this work, we show that higher qual-
ity scripts can be produced using continuous representations
instead.

7www.itl.nist.gov/iad/mig/tests/ace/

Conclusions
Understanding events requires effective representations that
contain both information that is speciﬁc to the event and in-
formation that relates to the underlying context in which the
event occurs. We propose tensor-based composition models
which are able to capture the distinct event contexts in which
a predicate gets used. This improved modeling of these event
contexts allows the resulting continuous representations to
be more effective in multiple event related tasks. Last, we
also show that the continuous representations yield a simple
schema generation method which produces schemas supe-
rior to a prior count based schema generation method.

Acknowledgements
This work is supported in part by the National Science Foun-
dation under Grant IIS-1617969.

References
[Balasubramanian et al. 2013] Balasubramanian, N.; Soder-
land, S.; Mausam, O. E.; and Etzioni, O. 2013. Generating
coherent event schemas at scale. In EMNLP, 1721–1731.
[Chambers and Jurafsky 2008] Chambers, N., and Jurafsky,
D. 2008. Unsupervised learning of narrative event chains.
In ACL, 789–797.
[Chambers and Jurafsky 2009] Chambers, N., and Jurafsky,
D. 2009. Unsupervised learning of narrative schemas and
their participants. In ACL, 602–610.
[Chambers 2013] Chambers, N. 2013. Event schema induc-
In EMNLP,
tion with a probabilistic entity-driven model.
1797–1807.
[Chambers 2017] Chambers, N. 2017. Behind the scenes
In Proceedings of the
of an evolving event cloze test.
2nd Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics, 41–45.
[Cheung, Poon, and Vanderwende 2013] Cheung, J. C. K.;
Poon, H.; and Vanderwende, L. 2013. Probabilistic frame
induction. arXiv preprint arXiv:1302.4813.
[Duchi, Hazan, and Singer 2011] Duchi, J.; Hazan, E.; and
Singer, Y. 2011. Adaptive subgradient methods for online
learning and stochastic optimization. Journal of Machine
Learning Research 2121–2159.
[Fried, Polajnar, and Clark 2015] Fried, D.; Polajnar, T.; and
Clark, S. 2015. Low-rank tensors for verbs in compositional
distributional semantics. In ACL, 731–736.
[Granroth-Wilding and Clark 2016] Granroth-Wilding, M.,
and Clark, S. 2016. What happens next? event prediction us-
ing a compositional neural network model. In AAAI, 2727–
2733.
[Grefenstette et al. 2013] Grefenstette, E.; Dinu, G.; Zhang,
Y.-Z.; Sadrzadeh, M.; and Baroni, M. 2013. Multi-step re-
gression learning for compositional distributional semantics.
In IWCS.
[Hu et al. 2017] Hu, L.; Li, J.; Nie, L.; Li, X.-L.; and Shao,
C. 2017. What happens next? future subevent prediction
using contextual hierarchical lstm. In AAAI, 3450–3456.

D.,

D.,

[Huang et al. 2016] Huang, L.; Cassidy, T.; Feng, X.; Ji, H.;
Voss, C. R.; Han, J.; and Sil, A. 2016. Liberal event extrac-
tion and event schema induction. In ACL.
[Huang et al. 2017] Huang, L.; Ji, H.; Cho, K.; and Voss,
C. R. 2017. Zero-shot transfer learning for event extrac-
tion. arXiv preprint arXiv:1707.01066.
and
[Kartsaklis and Sadrzadeh 2014a] Kartsaklis,
Sadrzadeh, M.
2014a. A study of entanglement in a
categorical framework of natural language. In Proceedings
of the 11th workshop on Quantum Physics and Logic, QPL,
249–261.
and
[Kartsaklis and Sadrzadeh 2014b] Kartsaklis,
Sadrzadeh, M.
2014b. A study of entanglement in a
categorical framework of natural language. arXiv preprint
arXiv:1405.2874.
J.-K.;
[Kim, de Marneffe, and Fosler-Lussier 2015] Kim,
de Marneffe, M.-C.; and Fosler-Lussier, E. 2015. Neural
word embeddings with multiplicative feature interactions
In VS@ HLT-NAACL,
for tensor-based compositions.
143–150.
[Le and Mikolov 2014] Le, Q. V., and Mikolov, T. 2014. Dis-
tributed representations of sentences and documents. CoRR
abs/1405.4053.
[Mausam et al. 2012] Mausam; Schmitz, M.; Bart, R.;
Soderland, S.; and Etzioni, O. 2012. Open language learning
for information extraction. In EMNLP-CoNLL, 523–534.
D.;
[Milajevs et al. 2014] Milajevs,
Sadrzadeh, M.; and Purver, M.
Evaluating
neural word representations in tensor-based compositional
settings. CoRR abs/1408.6179.
[Modi and Titov 2013] Modi, A., and Titov, I. 2013. Learn-
ing semantic script knowledge with event embeddings.
CoRR abs/1312.5198.
[Modi 2016] Modi, A. 2016. Event embeddings for seman-
In Proceedings of the Conference on
tic script modeling.
Computational Natural Language Learning (CoNLL).
[Mooney and DeJong 1985] Mooney, R., and DeJong, G.
1985. Learning schemata for natural language processing.
In Ninth International Joint Conference on Artiﬁcial Intelli-
gence (IJCAI), 681–687.
[Nguyen et al. 2015] Nguyen, K.-H.; Tannier, X.; Ferret, O.;
and Besanc¸on, R. 2015. Generative event schema induction
with entity disambiguation. In ACL, 188–197.
[Pennington, Socher, and Manning 2014] Pennington,
J.;
Socher, R.; and Manning, C. 2014. Glove: Global vectors
for word representation. In EMNLP, 1532–1543.
[Pichotta and Mooney 2016] Pichotta, K., and Mooney, R. J.
2016. Learning statistical scripts with LSTM recurrent neu-
ral networks. In AAAI.
[Polajnar, Rimell, and Clark 2015] Polajnar, T.; Rimell, L.;
and Clark, S. 2015. An exploration of discourse-based
sentence spaces for compositional distributional semantics.
In Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics (LSDSem), 1.
[Schank and Abelson 1977] Schank, R. C., and Abelson,
R. P. 1977. Scripts, Plans, Goals and Understanding: an

Kartsaklis,

2014.

D.;

2011.

Inquiry into Human Knowledge Structures. Hillsdale, NJ:
L. Erlbaum.
J.; Huang,
[Socher et al. 2011] Socher, R.; Pennington,
E. H.; Ng, A. Y.; and Manning, C. D.
Semi-
supervised recursive autoencoders for predicting sentiment
distributions. In EMNLP, 151–161.
[Socher et al. 2013a] Socher, R.; Chen, D.; Manning, C. D.;
and Ng, A. 2013a. Reasoning with neural tensor networks
for knowledge base completion. In Advances in neural in-
formation processing systems, 926–934.
[Socher et al. 2013b] Socher, R.; Perelygin, A.; Wu, J.;
Chuang, J.; Manning, C. D.; Ng, A.; and Potts, C. 2013b.
Recursive deep models for semantic compositionality over a
sentiment treebank. In EMNLP, 1631–1642.
[Tilk et al. 2016] Tilk, O.; Demberg, V.; Sayeed, A.; Klakow,
D.; and Thater, S. 2016. Event participant modelling with
neural networks. In EMNLP, 171–182.

Event Representations with Tensor-based Compositions

Noah Weber
Stony Brook University
Stony Brook, New York, USA
nwweber@cs.stonybrook.edu

Niranjan Balasubramanian
Stony Brook University
Stony Brook, New York, USA
niranjan@cs.stonybrook.edu

Nathanael Chambers
United States Naval Academy
Annapolis, Maryland, USA
nchamber@usna.edu

7
1
0
2
 
v
o
N
 
1
2
 
 
]
L
C
.
s
c
[
 
 
1
v
1
1
6
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Robust and ﬂexible event representations are important to
many core areas in language understanding. Scripts were
proposed early on as a way of representing sequences of
events for such understanding, and has recently attracted
renewed attention. However, obtaining effective representa-
tions for modeling script-like event sequences is challeng-
ing. It requires representations that can capture event-level
and scenario-level semantics. We propose a new tensor-based
composition method for creating event representations. The
method captures more subtle semantic interactions between
an event and its entities and yields representations that are
effective at multiple event-related tasks. With the continu-
ous representations, we also devise a simple schema gener-
ation method which produces better schemas compared to
a prior discrete representation based method. Our analysis
shows that the tensors capture distinct usages of a predicate
even when there are only subtle differences in their surface
realizations.

Introduction
Understanding the events described in text is central to ap-
plications in artiﬁcial intelligence such as question answer-
ing, discourse understanding, and information extraction.
Research in event understanding ranges from relation ex-
traction of individual events to full document understand-
ing of all its events. Inspired by the concept of scripts, pro-
posed in the seminal work by Schank and Abelson (1977),
much work has looked at modeling stereotypical sequences
of events in order to drive discourse understanding. Early
rule-based methods for this task were characteristically brit-
tle and domain-speciﬁc. Later work proposed computational
models for script learning and understanding (Mooney and
DeJong 1985; Chambers and Jurafsky 2009; Balasubrama-
nian et al. 2013), but they use shallow event representations
dependent on their speciﬁc surface words. Others have fo-
cused on training neural networks for robust event represen-
tations, using them to predict which events are likely to oc-
cur next (Modi 2016; Pichotta and Mooney 2016).

To be broadly useful, a good representation should
capture both event-level semantics (e.g., synonymy) and
broader scenario-level semantics. Event-level semantics are

Figure 1: Additive compositions of word embeddings do not
distinguish distinct events. Tensor compositions can tease
out distinct events even with high lexical overlap, and rec-
ognize related events even with low lexical overlap.

accessible to simple composition methods. However, mod-
eling scenario-level semantics is challenging. For example,
consider the following events: (i) she threw a football and
(ii) she threw a bomb. Even though the subject and the verb
are the same, these two events denote entirely different sce-
narios – sports and terrorism. The interaction of football or
bomb with the predicate threw is what determines the precise
semantics of the event and the broader scenario in which it
is embedded. A change to a single argument requires a large
shift in the event’s representation.

As illustrated in Figure 1, due to the overlap of words, pa-
rameterized additive models (Granroth-Wilding and Clark
2016; Modi 2016) and RNN-based models (Pichotta and
Mooney 2016; Hu et al. 2017) are limited in their trans-
formations. Additive models combine the words in these
phrases by the passing the concatenation or addition of their
word embeddings to a parameterized function (usually a
feed forward neural network) that maps the summed vec-
tor into event embedding space. The additive nature of these
models makes it difﬁcult to model subtle differences in an
event’s surface form. Instead of additive models, we pro-
pose tensor-based composition models, which combine the
subject, predicate, and object to produce the ﬁnal event rep-
resentation. The models capture multiplicative interactions
between these elements and are thus able to make large shifts
in event semantics with only small changes to the arguments.

This paper puts forth three main contributions:

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

• A scalable tensor-based composition model for event
representations, which can implicitly recognize different

event contexts based on predicate argument interactions.
• A broad set of evaluations on event-related tasks: we ﬁnd
that the tensor-based event representation outperforms ad-
ditive compositions on (i) a sentence similarity task, (ii)
a new hard similarity task, and (iii) an event prediction
task (two variants of the narrative cloze), suggesting broad
utility in event-related tasks.

• A simple yet effective method for generating event
schemas: to our knowledge, ours is the ﬁrst proposal
for using continuous event representations in schema
generation. We show that event tensors produce supe-
rior schemas compared to a prior distributional counting
model (Balasubramanian et al. 2013).

Models: Tensor-based Event Composition
Event composition models produce vector representations of
an event given its predicate and argument representations. To
be broadly useful, a representation should have two proper-
ties: (i) Events that are usually part of the same underly-
ing scenario should get similar representations – that is they
should be embedded close together in the event space. (ii)
Events that occur in different scenarios should get differ-
ent representations, even if they have similar lexical expres-
sions. In our earlier example, we want she threw football and
she threw bomb to be farther apart in the embedding space,
even though they share the subject and the verb.

An effective event composition model must be able to ac-
count for the numerous usage contexts for a given predicate
and should be able to invoke the appropriate usage context
based on the arguments. This problem is compounded even
further when considering predicates that take on many dif-
ferent meanings depending on their arguments. This requires
that the composition models be sensitive to small changes in
the predicate argument interactions. Simple averaging or ad-
ditive transformations are not enough.

One way to capture this rich interaction is through tensor
composition. Tensor-based composition has been used for
composing over tree based structures (Socher et al. 2013b)
and in general for modeling words with operator like se-
mantics (Grefenstette et al. 2013; Fried, Polajnar, and Clark
2015). A key beneﬁt of tensor composition that is relevant to
our setting is that they capture multiplicative interactions of
all the elements involved in the composition, which allows
for the composition to be sensitive to even small changes in
predicate argument interaction.

Formally, we can deﬁne a tensor-based event composition
model as follows. Given a predicate-speciﬁc tensor P , and
the embeddings of the subject s and the object o, the rep-
resentation for the event e can be composed through tensor
contraction denoted as e = P (s, o). Each element in the d(cid:48)-
dimensional event vector is obtained by the multiplicative
interaction of all elements of the subject and object vectors,
weighted by a term that depends on the predicate. The ith
component of e is computed as:

ei =

Pijksjok

(cid:88)

j,k

(1)

The key question with predicate-speciﬁc tensors is how
to learn and reason with such a huge number of parameters.

Figure 2: Predicate Tensor Model: Event representations are com-
puted using a predicate tensor that combines the arguments. Ele-
ments in blue are inputs, green are model parameters, and pink are
outputs generated by the model. Function h produces the predicate
tensor using tensors W and U as shown in Equation 2. Function g
produces the ﬁnal event representation through tensor contraction
as shown in Equation 3.

Prior work that models words as tensors are not scalable be-
cause the methods for learning such word-speciﬁc tensors
require a large number of parameters, as well as a large num-
ber of training instances for each word. Relaxing the need
for predicate speciﬁc training data and reducing the number
of parameters motivate the two models we propose here.

Predicate Tensor Model
Rather than learn a predicate-speciﬁc tensor, we instead
learn two general tensors that can generate a predicate-
speciﬁc tensor on the ﬂy. The predicate tensor model deﬁnes
a function from a basic word embedding for the predicate
to a tensor P . In this model, the predicate tensors are de-
rived from a shared base tensor W ∈ Rd×d×d (where d is
the input embedding dimension). To allow the predicate’s
word embedding to inﬂuence its resulting tensor, we allow
each element of W (each one dimensional ‘row’ of W ) to
be scaled by a value that depends on a linear function of the
predicate embedding p:

Pijk = Wijk

paUajk

(2)

(cid:88)

a

Here U is also a tensor in Rd×d×d which deﬁnes linear
functions for each one dimensional row of W , determining
how p should scale that dimension. Now, given the predicate
vector p, the subject vector s, and the object vector o, the
original tensor contraction P (s, o) we seek above is realized
as follows. Each element in the resulting event vector ei is
computed as:

ei =

pasjokWijkUajk

(3)

(cid:88)

a,i,j,k

Thus this model captures multiplicative interactions

across all three: subject, verb, and object.

Role Factored Tensor Model
The representation power of the predicate tensor comes at
the cost of model complexity and sensitivity. The ability to
capture multiplicative interactions across all its arguments
allows the predicate tensor to model complex relations be-
tween the predicate and its arguments. While this is useful
from a representation stand point, it also makes the model

Figure 3 displays the structure of the model. This factored
model has fewer parameters compared to the Predicate Ten-
sor Model and can also readily generalize to higher-arity
events with any arbitrary number of arguments.

Training Tasks
In order to learn the parameters of the tensor composition
models we employ two different training tasks, which corre-
spond to predicting two different types of contexts.

Predict Events
One natural way to learn script knowledge is to directly learn
how to predict what other events are likely to occur given
a set of events (Pichotta and Mooney 2016; Modi 2016).
We use an alternate learning formulation deﬁned over a pair
of events rather than over sequences of events. One goal is
to learn representations that maximize some similarity mea-
sure between co-occurring events similar to the task deﬁned
by Granroth-Wilding and Clark (2016)2.

Given some input event ei, a target event et which occurs
within in a window of w in front of ei is randomly chosen. A
negative event en is also randomly sampled from the entire
corpus. The regularized learning objective is to minimize the
following quantity:

1
N

N
(cid:88)

i=1

max(0, m + sim(ei, en) − sim(ei, et)) + λL(θ)

where sim(a, b) is cosine similarity, m is the margin, and
L(θ) is l2 regularization on all model parameters θ.

Predict Words
A second training approach is to predict the nearby words of
an event’s sentence context, rather than just the event words.
This is similar to most other word representation learning
objectives. Formally the objective function to minimize is:

1
N

N
(cid:88)

nei(cid:88)

i=1

j=1

−log(P (wij|ei)) + λL(θ)

where nei is the number of words in the sentence that ei
appears in, and wij is the jth word in the sentence for
ei. P (wij|ei) is computed via a softmax layer. The use of
this type of inter sentence word prediction for ﬁnding em-
beddings for phrases has been shown to be useful (Le and
Mikolov 2014).

Training Details
We use the New York Times Gigaword Corpus for training
data. Event triples are extracted using the Open Information
Extraction system Ollie (Mausam et al. 2012). We initial-
ize the word embedding layer with 100 dimensional pre-
trained GloVe vectors (Pennington, Socher, and Manning

2The objective function in (Granroth-Wilding and Clark 2016)
differs from ours in that they learn a coherence function which is
used to measure similarity between events, rather than directly us-
ing cosine similarity.

Figure 3: Role Factored Tensor Model: Uses two tensor contrac-
tions of the predicate with the subject and object, which are then
combined. Elements in blue are inputs, green are model parame-
ters, and pink are outputs generated by the model. Function f is
the tensor contraction operation deﬁned in Equation 6.

behavior more complex and highly sensitive – changes in the
components of the event can drastically change the value of
the event embedding.

In many cases, however, it may not be necessary to jointly
model the interaction of a predicate with all of its arguments.
Often times, the predicate’s interaction with just one of its
arguments is enough for recognizing its usage context. For
example, knowing that football is an argument to throw im-
mediately places the event in the context of sports.

Rather than model interactions between all components,
we thus introduce a factored composition strategy: capture
interactions between the predicate and its arguments sepa-
rately to then combine these interactions into the ﬁnal em-
bedding. In this model, a single tensor T ∈ Rh×d×d (where
h is the output dimension and d is deﬁned as before) is used
to capture these interactions. The resulting interactions are
then combined using role-speciﬁc transformations1.

Formally, let s, o, and p denote the word vectors for the
subject, object, and the predicate respectively. The argument
speciﬁc interactions are captured using two compositions of
the predicate, one with the subject and one with the object:

As before, this composition is deﬁned via tensor contrac-
tion. Given arbitrary arguments a and b, the element vi of
the output vector T (a, b) = v ∈ Rh is given by:

vs = T (s, p)
vo = T (o, p)

vi =

Tljkajbk

(cid:88)

j,k

(4)
(5)

(6)

The subject and object interactions vs and vo are then
transformed via their respective role speciﬁc matrices,
Ws, Wv ∈ Rd(cid:48)×h and summed together to obtain the ﬁnal
event embedding e ∈ Rd(cid:48)

:

e = Wsvs + Wovo

(7)

1This approach is similar to the application of recursive tensor
composition (Socher et al. 2013b) but is not fully recursive in that
the partial interactions are not combined using recursive tensor ap-
plication. We found this additional recursion to be detrimental to
performance.

2014). Like previous work (Modi 2016; Granroth-Wilding
and Clark 2016), we allow the word embeddings to be fur-
ther updated during training for all models.

We hold out 4000 articles from the corpus to construct
dev sets for hyperparameter tuning, and 6000 articles for test
purposes. We make all code and data publicly available.3
Hyperparameter tuning was done using dev sets constructed
for the CMCNC and MCNC tasks (see below). Training was
done using Adagrad (Duchi, Hazan, and Singer 2011) with
a learning rate of 0.01 and a minibatch size of 128.

Evaluation
We evaluate our proposed tensor models on a variety of
event related tasks, comparing against a compositional neu-
ral network model, a simple multiplicative model, and an
averaging baseline. Since our goal is to produce a event rep-
resentation given a single event, and not a sequence as in Pi-
chotta and Mooney (2016), RNN based models are not suit-
able for this task. We report results on both training tasks:
predicting events (EV) and predicting words (WP).

Baselines
Compositional Neural Network (NN) Our ﬁrst baseline is
an neural network model used previously in recent work.
The event representation in this model is computed by feed-
ing the concatenation of the subject, predicate, and object
embedding into a two layer neural network4.

e = W ∗ tanh(H[s; p; o])

where W and H are matrices, the main model parameters.

This basic architecture was used to generate event repre-
sentations for narrative cloze tasks (Modi and Titov 2013;
Modi 2016; Granroth-Wilding and Clark 2016). We adapt
this architecture for our task – given the input event, whose
representation is to be composed, predict the neighboring
context (other events or words in the sentence). This devi-
ates from the model used in (Modi 2016) mainly in training
objective, and that the embedding of the protagonist’s de-
pendency is fed in as input (see the Related Works section
for details). This architecture was also used in (Granroth-
Wilding and Clark 2016) to obtain event representations,
which are then fed to another network that measures coher-
ence of the event representations. We only use the event rep-
resentation part of this model and train it to maximize our
training objectives.
Elementwise Multiplicative Composition The second
baseline extends the additive composition model by simply
concatenating the elementwise multiplications between the
verb and its subject/object. This models some (though not
all) of the multiplicative interactions. The embedding in this
model is computed as:

e = W ∗ tanh(H[s; p; o; p (cid:12) s; p (cid:12) o])

where (cid:12) denotes elementwise multiplication.

3github.com/stonybrooknlp/event-tensors
4We additionally tried a three layer network, however this

slightly decreased performance on the dev set

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Multiplicative
Averaging

ρ

WP
0.71
0.71
0.68
0.65

EV
0.64
0.63
0.63
0.57

0.67

Table 1: Performance on the Transitive Sentence Similarity
dataset, as indicated by Spearman’s ρ

Averaging Baseline This represents each event as the aver-
age of the constituent word vectors using pretrained GloVe
embeddings (Pennington, Socher, and Manning 2014).

Similarity Evaluations
Transitive Sentence Similarity Similarity tasks are a
common way to measure the quality of vector embeddings.
The transitive sentence similarity dataset (Kartsaklis and
Sadrzadeh 2014a) contains 108 pairs of transitive sentences:
short phrases containing a single subject, object, and verb
(e.g., agent sell property). Every pair is annotated by a hu-
man with a similarity score from 1 to 7. For example, pairs
such as (design, reduce, amount) and (company, cut, cost)
are annotated with a high similarity score, while pairs such
as (wife, pour, tea) and (worker, join, party) are given low
similarity scores. Since each pair has several annotations, we
use the average annotator score as the gold score. We evalu-
ate using the Spearman’s correlation of the cosine similarity
given by each model and the annotated similarity score.

Hard Similarity Task The main requirement we laid out
for event composition is that similar events should be em-
bedded close to each other, and dissimilar events or those
from distinct scenarios should be farther from each other. We
create a hard similarity task to explicitly measure how well
the representations satisfy this requirement. To this end, we
create two types of event pairs, one with events that should
be close to each other but have very little lexical overlap
(e.g., police catch robber / authorities apprehend suspect),
and another with events that should be farther apart but have
high overlap (e.g., police catch robber / police catch disease.
A good composition model should have higher cosine
similarity for the similar pair than for the dissimilar pair. To
evaluate this directly we created 230 pairs (115 pairs each of
similar and dissimilar types). To create the set, we have one
annotator create similar/dissimilar pairs from a set of am-
biguous verbs, while three different annotators give the sim-
ilarity/dissimilarity rankings. We kept pairs where the anno-
tators agreed completely. For each composition method, we
obtain the cosine similarity of the pairs under that represen-
tation, and report the fraction of cases where the similar pair
receives a higher cosine than the dissimilar pair.

Results Table 1 shows the Spearman’s ρ scores of the var-
ious models on the transitive similarity task. Consistent with
prior work (Milajevs et al. 2014), we ﬁnd that simple aver-
aging is a competitive baseline for the task. The neural net-
work baseline is only slightly better than averaging. When

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

Accuracy
EV
43.5†
41.0 †
33.0
33.9

WP
23.5
35.7†
20.9
11.3

5.2

Table 2: Hard Similarity Results: Accuracy is the percentage
of cases where the similar pair had higher cosine similarity
than the dissimilar pair.

training for word prediction, both the predicate and the role
factored tensor models have a higher correlation (+3 points
in ρ). Across all models, training for the word objective is
better than training for the event objective. This is to be ex-
pected since the word prediction task focuses on a narrower
context, requiring that representation to be consistent with
information within the sentence in which it appears. This
goal aligns well with the sentence similarity task where the
events that are roughly exchangeable are deemed similar.

Table 2 compares the percentage of cases where the sim-
ilar pairs had a higher cosine similarity than dissimilar pairs
under each event composition method. Both tensor meth-
ods outperform the baselines showing that tensors capture a
richer and broader set of semantics about the events. Inter-
estingly, the event objective is better than word prediction
for all models. We believe the broader context used by the
event prediction objective helps capture broader event se-
mantics necessary to generalize to the difﬁcult pairs.

Coherent Multiple Choice Narrative Cloze
The above experiments judge event similarity, but our
broader goal is to model real-world knowledge. The nar-
rative cloze task was proposed to evaluate script knowl-
edge and knowledge about events that occur together in the
world (Chambers and Jurafsky 2008). The task starts with
a series of events that are mentioned in a document, but
hides one of the events. A reasoning system should pre-
dict what the held out event is, given only the other events.
Event predication is typically done by choosing an event
such that it maximizes some similarity score with the context
events.5 This formulation is difﬁcult since the output space
of possible events is rather large. We evaluate on variant
called the multi-choice narrative cloze (MCNC) (Granroth-
Wilding and Clark 2016), where the system should distin-
guish the held out event from a small set of randomly drawn
events.

However, using automatic cloze evaluation has multiple
issues (Chambers 2017), one of which is that it is overly
sensitive to frequency cutoffs of common events (e.g. said,
was, did, etc.) and errors in the preprocessing tools. To ad-
dress these, we manually curated an evaluation set for the
MCNC task, and call it the Coherent Multiple Choice Nar-
rative Cloze (CMCNC). We generated an MCNC dataset and
made three modiﬁcations.

5We use cosine similarity as our measure

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

CMCNC

MCNC

WP
70.1†
64.5
65.7
67.3

EV WP
42.2
32.3
38.4
41.7

72.1 †
66.1
68.5
67.7

EV
46.5 †
41.1
45.3
45.4

26.7

14.3

Table 3: CMCNC Results: Predict the held out event, given
the observed events from the same document. The dataset
is curated manually for coherence by removing noisy in-
stances and context events. † denotes a statistically signif-
icant difference(α < 0.05) over the best competing baseline
under a paired t-test.

First, we manually removed events that are either: (1) fre-
quent events types that are in our stop event list , or (2) non-
sensical events coming from obvious extraction errors .

Second, we discard heldout events that don’t ﬁt the fol-
lowing criteria: (i) One of its entities must appear in the
given context events. (ii) Given the context events, the held
out event should seem plausible to a human evaluator.
Third, when the heldout event is included with 5 randomly
selected negative events, we replace the entities appearing
in the negative events with similar (under word embedding
distance) entities that appear in the context events.

Enforcing these constraints allows us to better evaluate
how well the system learned commonsense script knowl-
edge, rather than how well the system learned to emulate
noise in the data. For comparison, we also report on an au-
tomatically generated MCNC task. Since we do not restrict
the evaluation to narrative chains with a single protagonist,
the numbers for the automatic MCNC task are lower than
those reported in Granroth-Wilding and Clark (2016).

Results Table 3 show the results for the manually ﬁl-
tered CMCNC and the automatic MCNC tasks. Whereas the
word-based objective excelled on similarity tasks, the event-
based objective does better on cloze tasks. The Role Fac-
tor model shows signiﬁcant improvements in accuracy com-
pared to the neural network model (+4.4 points with word
prediction and +3.6 points with event prediction). The Pred-
icate tensor model, however, performs worse than the neural
network model. The human-curated evaluation shows vastly
different results than the automatic-MCNC, perhaps bolster-
ing the idea that MCNC is not ideal (Chambers 2017). Our
Role Factor model excels in both.

Generating Event Schemas
An event schema is a form of script like knowledge about a
scenario (e.g., a bank heist). Chambers and Jurafsky (2009)
introduce schemas as a set of the main entities in the sce-
nario (the robber, bank teller, etc.) and the main events they
participate in (robber steals money, teller calls police etc.).
Prior work on event schema generation use discrete repre-
sentations of events and build count-based conditional mod-
els over these representations c.f., (Chambers and Jurafsky
2009; Balasubramanian et al. 2013). The basic idea behind

System

Average Score
With 0’s Without 0’s

Role Factor (EV)
Comp. Neural Net (EV)
(Balasubramanian et al. 2013)

2.45
2.26
1.51

2.62
2.47
1.78

Table 4: Average Annotator Scores for generated schemas
(scale from 0-4). Higher scores indicate a more coherent
schema.

Schema Evaluation
We compare against previous work that produces schemas
using relation co-occurrence graphs (Balasubramanian et al.
2013). It also uses OpenIE triples mined from a text corpus.
We refer to this as the Relgrams approach. For a fair com-
parison, we choose 20 seed tuples at random from the list of
top seeds in (Balasubramanian et al. 2013). For each seed,
we generate a schema of 10 grounded events using our best
models. We report results using the Role Factor (EV) repre-
sentations, the Compositional Neural Network (EV) repre-
sentations, and the Relgrams approach.

Our evaluation is human-driven. We present annotators
with 3 schemas (from the 3 models) using the same seed.
For each event in each schema, annotators rated the event
on a 0-4 scale with regards to its relevance to the seed and
the rest of the schema. A score of 0 is reserved for events
that are completely nonsensical (either caused by an extrac-
tion error, or bad entity replacement). A score of 1 indicates
that the event was not relevant with no obvious relation to
the scenario, while a score of 4 indicates the event is highly
relevant and would be a core part of any description of the
scenario. Table 4 shows the average scores given for each
method. We report average ratings both with and without
nonsensical events6.

Both nearest neighbor schemas consistently out-ranked
the Relgrams schemas by a large margin. Figure 4 shows the
schemas produced by both systems using the same seed. The
biggest problem with the schemas produced by the Relgrams
method was their tendency to include overly speciﬁc triples
in the schemas, simply because they co-occur with one of
the events in the schema. The schemas based on continuous
representations can avoid this problem. Here is a typical ex-
ample: the event (police, found, machete) co-occurs a couple
times in an article with (he, likes to eat, dinner). Since (po-
lice, found, machete) is rare in the corpus, the count based
system takes into consideration the co-occurrence. Although
tuples similar to (police, found, machete) such as (authori-
ties, recovered, murder weapon) may appear in the corpus,
the counts based on discrete representations cannot share
evidence across these similar tuples. The method based on
continuous representations can take advantage of similarity
of words in the two tuples. The tensor model further aids by
helping the system better differentiate between events with
many similar words, but different meanings.

While the Compositional Neural Network and Role Fac-
tor representations both perform well compared to the Rel-

6All differences in means are signiﬁcant under t-test w/ α < .05

Figure 4: Example schemas from nearest neighbors and rel-
grams approach. X, Y, and Z are variables that denote dis-
tinct entities. Each row indicates the main event that the en-
tities participate in.

these methods is to start with a seed event and locate other
events that are also likely to occur in the scenario. These
methods suffer fragmented counts because of synonymy
(different tuples can denote the same event) and mixing
events from different contexts because of polysemy (simi-
lar looking tuples denote distinct events). Continuous event
representation provides an opportunity to address these is-
sues.

The tensor-based representations yields a simpler and
more direct approach to generating event schemas. Recall
that with the predict events objective, events that tend to co-
occur with each other end up with a similar representation
and get embedded closer to each other in the event space.
To create a schema seeded by an event, we can simply ﬁnd
its nearest neighbors in the event embedding space and use
them as candidates. This method is simple, scalable, and
does not require maintaining large tables of co-occurrence
information (c.f. Balasubramanian et al. (2013)).

Nearest Neighbor Schema Generation Like previous
systems, our system takes as input a single seed event and
produces the schema based on this event. Given a seed event
s the algorithm proceeds as follows:
• From a corpus of events, compute their representations
using one of the composition methods described above
• Find the k nearest neighbors to s in the text corpus with
respect to the cosine distance of their representations.
• Go through this list of nearest neighbors, add a neighbor
x to the schema if all the following conditions are true:
– The cosine distance between the GloVe embedding of
x’s predicate and all other predicates currently in the
schema is greater than α

– The cosine distance between the GloVe embedding of
at least one of x’s arguments and some entity e in the
schema is less than β. The argument is then replaced
with e to create a new event x(cid:48)

– The average cosine distance between the representation
of x(cid:48) (computed using the same composition function
used to compute the original representations) with all
other events in the schema is less than γ

The end result is a series of events representing a schema.
For values of α, β and γ, we use α = 0.5, β = 0.25, γ = 0.2
(for Role Factor), and γ = 0.3 (for Neural Network). Values
were selected using a develoment set of 20 seeds.

context 1
hitting
inning
walked
hit
ﬁelder

context 2
police
marchers
chechens
stoned
protesters

context 3
shouted
chanted
chanting
yelled
shouting

context 4
farve
elway
yards
rookie
broncos

context 5
lodged
complaint
ﬁled
remand
lawsuit

Table 5: Nearest Neighbors for the implicitly learned con-
texts in which ’throw’ may be used.

grams approach, the Role Factor factor does better, suggest-
ing that the model’s ability to tease out contextual usages of
predicates can be useful in end tasks.

Discussion

This is the ﬁrst paper to propose and evaluate event mod-
els on both event similarity and event schema predic-
tion/generation. We believe there is signiﬁcant overlap in
goals (any event representation needs to learn a nearness be-
tween similar events), but there are also differences (script
learning is not at all about synonymy).

Interpreting the Role Factor Model

The Role Factor model consistently outperforms on all tasks,
in particular over additive/concatenation models from recent
work in event learning. One question to ask is what exactly
is the Role Factor model learning?

Besides simply allowing multiplicative interactions be-
tween the predicate and its arguments, the Role Factored
model can be interpreted as capturing different scenarios or
contexts in which a predicate is used. First, observe that per-
forming the contraction to compute v = T (a, p) can be done
by ﬁrst partially applying T to p, producing a matrix P ,
whose columns Pi are the result of multiplying each slice
Ti in T by the predicate vector p. Thus, each slice Ti moves
the predicate vector to a new point p(cid:48) in the original word
embedding space. If there are distinct usages for a predicate
p, we hope that the slices of T provide a map from p to those
usages in word embedding space.

Table 5 shows the nearest neighbors for several different
Pi vectors for the verb throw. Each of these nearest neigh-
bor clusters indicate what type of arguments (either subject
or object) should ’activate’ the ith dimension, reﬂecting the
type of event contexts that tensor T captures.

Script Generation

This is the ﬁrst attempt to generate event scripts (or schemas)
from continuous representations. Recent work focuses on
event language models that can perform narrative cloze, but
to our knowledge, the goal of the learning explicit scripts has
been left behind. Our human evaluation of generated scripts
shows that nearest neighbor selection with coherent entities
builds far superior scripts than previous work. Figure 4 gives
an example of a generated schema from both systems.

Related Work

Neural Event Representations Neural event embedding
approaches learn representations by training to predict the
next event. Granroth-Wilding and Clark (2016) concatenate
predicate and argument embeddings and feed them to a neu-
ral network to generate an event embedding. Event embed-
dings are further concatenated and fed through another neu-
ral network to predict the coherence between the events.
Modi (2016) encode a set of events in a similar way and
use that to incrementally predict the next event – ﬁrst the ar-
gument, then the predicate and then next argument. Pichotta
and Mooney (2016) treat event prediction as a sequence to
sequence problem and use RNN based models conditioned
on event sequences in order to predict the next event. These
three works all model narrative chains, that is, event se-
quences in which a single entity (the protagonist) partici-
pates in every event. Hu et al. (2017) also apply a RNN ap-
proach, applying a new hierarchical LSTM model in order
predict events by generating discriptive word sequences.

Multiplicative and Tensor composition models Tensor
based composition models have been shown to be useful
for other NLP tasks such as sentiment analysis (Socher et
al. 2011; Socher et al. 2013b), knowledge base comple-
tion (Socher et al. 2013a), and in general for demonstrat-
ing compositional semantics in measuring sentence simi-
larity (Grefenstette et al. 2013; Kartsaklis and Sadrzadeh
2014b; Fried, Polajnar, and Clark 2015; Kim, de Marneffe,
and Fosler-Lussier 2015).

Polajnar, Rimell, and Clark (2015) learn verb speciﬁc ten-
sors by setting up a regression task where the learned tensor
for a verb is expected to yield a representation for the sen-
tential contexts where the verb is found. Huang et al. (2016)
use tensor based autoencoders over AMR representations of
events in order to induce event level (rather than scenerio
level), ACE7 style templates for use in event extraction. Sim-
ilarly, Huang et al. (2017) use tensor compositions to build
representations that facilitate zero shot relation extraction.
Related to our hard similarity task, Tilk et al. (2016) use
(factorized) tensor based methods to model the thematic ﬁt
between event arguments.

Schema/script learning Unsupervised learning of script
knowledge can be traced back to (Chambers and Jurafsky
2008), which introduced a count based technique for induc-
ing narrative chains. Chambers and Jurafsky (2009) extends
this idea to creating full on narrative schemas by merging
together narrative chains with argument overlap. Other un-
supervised induction approaches include a relation n-gram
based method (Balasubramanian et al. 2013), and generative
latent variable models (Nguyen et al. 2015; Chambers 2013;
Cheung, Poon, and Vanderwende 2013). All of these mod-
els worked on discrete representations for capturing co-
occurrence statistics. In this work, we show that higher qual-
ity scripts can be produced using continuous representations
instead.

7www.itl.nist.gov/iad/mig/tests/ace/

Conclusions
Understanding events requires effective representations that
contain both information that is speciﬁc to the event and in-
formation that relates to the underlying context in which the
event occurs. We propose tensor-based composition models
which are able to capture the distinct event contexts in which
a predicate gets used. This improved modeling of these event
contexts allows the resulting continuous representations to
be more effective in multiple event related tasks. Last, we
also show that the continuous representations yield a simple
schema generation method which produces schemas supe-
rior to a prior count based schema generation method.

Acknowledgements
This work is supported in part by the National Science Foun-
dation under Grant IIS-1617969.

References
[Balasubramanian et al. 2013] Balasubramanian, N.; Soder-
land, S.; Mausam, O. E.; and Etzioni, O. 2013. Generating
coherent event schemas at scale. In EMNLP, 1721–1731.
[Chambers and Jurafsky 2008] Chambers, N., and Jurafsky,
D. 2008. Unsupervised learning of narrative event chains.
In ACL, 789–797.
[Chambers and Jurafsky 2009] Chambers, N., and Jurafsky,
D. 2009. Unsupervised learning of narrative schemas and
their participants. In ACL, 602–610.
[Chambers 2013] Chambers, N. 2013. Event schema induc-
In EMNLP,
tion with a probabilistic entity-driven model.
1797–1807.
[Chambers 2017] Chambers, N. 2017. Behind the scenes
In Proceedings of the
of an evolving event cloze test.
2nd Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics, 41–45.
[Cheung, Poon, and Vanderwende 2013] Cheung, J. C. K.;
Poon, H.; and Vanderwende, L. 2013. Probabilistic frame
induction. arXiv preprint arXiv:1302.4813.
[Duchi, Hazan, and Singer 2011] Duchi, J.; Hazan, E.; and
Singer, Y. 2011. Adaptive subgradient methods for online
learning and stochastic optimization. Journal of Machine
Learning Research 2121–2159.
[Fried, Polajnar, and Clark 2015] Fried, D.; Polajnar, T.; and
Clark, S. 2015. Low-rank tensors for verbs in compositional
distributional semantics. In ACL, 731–736.
[Granroth-Wilding and Clark 2016] Granroth-Wilding, M.,
and Clark, S. 2016. What happens next? event prediction us-
ing a compositional neural network model. In AAAI, 2727–
2733.
[Grefenstette et al. 2013] Grefenstette, E.; Dinu, G.; Zhang,
Y.-Z.; Sadrzadeh, M.; and Baroni, M. 2013. Multi-step re-
gression learning for compositional distributional semantics.
In IWCS.
[Hu et al. 2017] Hu, L.; Li, J.; Nie, L.; Li, X.-L.; and Shao,
C. 2017. What happens next? future subevent prediction
using contextual hierarchical lstm. In AAAI, 3450–3456.

D.,

D.,

[Huang et al. 2016] Huang, L.; Cassidy, T.; Feng, X.; Ji, H.;
Voss, C. R.; Han, J.; and Sil, A. 2016. Liberal event extrac-
tion and event schema induction. In ACL.
[Huang et al. 2017] Huang, L.; Ji, H.; Cho, K.; and Voss,
C. R. 2017. Zero-shot transfer learning for event extrac-
tion. arXiv preprint arXiv:1707.01066.
and
[Kartsaklis and Sadrzadeh 2014a] Kartsaklis,
Sadrzadeh, M.
2014a. A study of entanglement in a
categorical framework of natural language. In Proceedings
of the 11th workshop on Quantum Physics and Logic, QPL,
249–261.
and
[Kartsaklis and Sadrzadeh 2014b] Kartsaklis,
Sadrzadeh, M.
2014b. A study of entanglement in a
categorical framework of natural language. arXiv preprint
arXiv:1405.2874.
J.-K.;
[Kim, de Marneffe, and Fosler-Lussier 2015] Kim,
de Marneffe, M.-C.; and Fosler-Lussier, E. 2015. Neural
word embeddings with multiplicative feature interactions
In VS@ HLT-NAACL,
for tensor-based compositions.
143–150.
[Le and Mikolov 2014] Le, Q. V., and Mikolov, T. 2014. Dis-
tributed representations of sentences and documents. CoRR
abs/1405.4053.
[Mausam et al. 2012] Mausam; Schmitz, M.; Bart, R.;
Soderland, S.; and Etzioni, O. 2012. Open language learning
for information extraction. In EMNLP-CoNLL, 523–534.
D.;
[Milajevs et al. 2014] Milajevs,
Sadrzadeh, M.; and Purver, M.
Evaluating
neural word representations in tensor-based compositional
settings. CoRR abs/1408.6179.
[Modi and Titov 2013] Modi, A., and Titov, I. 2013. Learn-
ing semantic script knowledge with event embeddings.
CoRR abs/1312.5198.
[Modi 2016] Modi, A. 2016. Event embeddings for seman-
In Proceedings of the Conference on
tic script modeling.
Computational Natural Language Learning (CoNLL).
[Mooney and DeJong 1985] Mooney, R., and DeJong, G.
1985. Learning schemata for natural language processing.
In Ninth International Joint Conference on Artiﬁcial Intelli-
gence (IJCAI), 681–687.
[Nguyen et al. 2015] Nguyen, K.-H.; Tannier, X.; Ferret, O.;
and Besanc¸on, R. 2015. Generative event schema induction
with entity disambiguation. In ACL, 188–197.
[Pennington, Socher, and Manning 2014] Pennington,
J.;
Socher, R.; and Manning, C. 2014. Glove: Global vectors
for word representation. In EMNLP, 1532–1543.
[Pichotta and Mooney 2016] Pichotta, K., and Mooney, R. J.
2016. Learning statistical scripts with LSTM recurrent neu-
ral networks. In AAAI.
[Polajnar, Rimell, and Clark 2015] Polajnar, T.; Rimell, L.;
and Clark, S. 2015. An exploration of discourse-based
sentence spaces for compositional distributional semantics.
In Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics (LSDSem), 1.
[Schank and Abelson 1977] Schank, R. C., and Abelson,
R. P. 1977. Scripts, Plans, Goals and Understanding: an

Kartsaklis,

2014.

D.;

2011.

Inquiry into Human Knowledge Structures. Hillsdale, NJ:
L. Erlbaum.
J.; Huang,
[Socher et al. 2011] Socher, R.; Pennington,
E. H.; Ng, A. Y.; and Manning, C. D.
Semi-
supervised recursive autoencoders for predicting sentiment
distributions. In EMNLP, 151–161.
[Socher et al. 2013a] Socher, R.; Chen, D.; Manning, C. D.;
and Ng, A. 2013a. Reasoning with neural tensor networks
for knowledge base completion. In Advances in neural in-
formation processing systems, 926–934.
[Socher et al. 2013b] Socher, R.; Perelygin, A.; Wu, J.;
Chuang, J.; Manning, C. D.; Ng, A.; and Potts, C. 2013b.
Recursive deep models for semantic compositionality over a
sentiment treebank. In EMNLP, 1631–1642.
[Tilk et al. 2016] Tilk, O.; Demberg, V.; Sayeed, A.; Klakow,
D.; and Thater, S. 2016. Event participant modelling with
neural networks. In EMNLP, 171–182.

Event Representations with Tensor-based Compositions

Noah Weber
Stony Brook University
Stony Brook, New York, USA
nwweber@cs.stonybrook.edu

Niranjan Balasubramanian
Stony Brook University
Stony Brook, New York, USA
niranjan@cs.stonybrook.edu

Nathanael Chambers
United States Naval Academy
Annapolis, Maryland, USA
nchamber@usna.edu

7
1
0
2
 
v
o
N
 
1
2
 
 
]
L
C
.
s
c
[
 
 
1
v
1
1
6
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Robust and ﬂexible event representations are important to
many core areas in language understanding. Scripts were
proposed early on as a way of representing sequences of
events for such understanding, and has recently attracted
renewed attention. However, obtaining effective representa-
tions for modeling script-like event sequences is challeng-
ing. It requires representations that can capture event-level
and scenario-level semantics. We propose a new tensor-based
composition method for creating event representations. The
method captures more subtle semantic interactions between
an event and its entities and yields representations that are
effective at multiple event-related tasks. With the continu-
ous representations, we also devise a simple schema gener-
ation method which produces better schemas compared to
a prior discrete representation based method. Our analysis
shows that the tensors capture distinct usages of a predicate
even when there are only subtle differences in their surface
realizations.

Introduction
Understanding the events described in text is central to ap-
plications in artiﬁcial intelligence such as question answer-
ing, discourse understanding, and information extraction.
Research in event understanding ranges from relation ex-
traction of individual events to full document understand-
ing of all its events. Inspired by the concept of scripts, pro-
posed in the seminal work by Schank and Abelson (1977),
much work has looked at modeling stereotypical sequences
of events in order to drive discourse understanding. Early
rule-based methods for this task were characteristically brit-
tle and domain-speciﬁc. Later work proposed computational
models for script learning and understanding (Mooney and
DeJong 1985; Chambers and Jurafsky 2009; Balasubrama-
nian et al. 2013), but they use shallow event representations
dependent on their speciﬁc surface words. Others have fo-
cused on training neural networks for robust event represen-
tations, using them to predict which events are likely to oc-
cur next (Modi 2016; Pichotta and Mooney 2016).

To be broadly useful, a good representation should
capture both event-level semantics (e.g., synonymy) and
broader scenario-level semantics. Event-level semantics are

Figure 1: Additive compositions of word embeddings do not
distinguish distinct events. Tensor compositions can tease
out distinct events even with high lexical overlap, and rec-
ognize related events even with low lexical overlap.

accessible to simple composition methods. However, mod-
eling scenario-level semantics is challenging. For example,
consider the following events: (i) she threw a football and
(ii) she threw a bomb. Even though the subject and the verb
are the same, these two events denote entirely different sce-
narios – sports and terrorism. The interaction of football or
bomb with the predicate threw is what determines the precise
semantics of the event and the broader scenario in which it
is embedded. A change to a single argument requires a large
shift in the event’s representation.

As illustrated in Figure 1, due to the overlap of words, pa-
rameterized additive models (Granroth-Wilding and Clark
2016; Modi 2016) and RNN-based models (Pichotta and
Mooney 2016; Hu et al. 2017) are limited in their trans-
formations. Additive models combine the words in these
phrases by the passing the concatenation or addition of their
word embeddings to a parameterized function (usually a
feed forward neural network) that maps the summed vec-
tor into event embedding space. The additive nature of these
models makes it difﬁcult to model subtle differences in an
event’s surface form. Instead of additive models, we pro-
pose tensor-based composition models, which combine the
subject, predicate, and object to produce the ﬁnal event rep-
resentation. The models capture multiplicative interactions
between these elements and are thus able to make large shifts
in event semantics with only small changes to the arguments.

This paper puts forth three main contributions:

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

• A scalable tensor-based composition model for event
representations, which can implicitly recognize different

event contexts based on predicate argument interactions.
• A broad set of evaluations on event-related tasks: we ﬁnd
that the tensor-based event representation outperforms ad-
ditive compositions on (i) a sentence similarity task, (ii)
a new hard similarity task, and (iii) an event prediction
task (two variants of the narrative cloze), suggesting broad
utility in event-related tasks.

• A simple yet effective method for generating event
schemas: to our knowledge, ours is the ﬁrst proposal
for using continuous event representations in schema
generation. We show that event tensors produce supe-
rior schemas compared to a prior distributional counting
model (Balasubramanian et al. 2013).

Models: Tensor-based Event Composition
Event composition models produce vector representations of
an event given its predicate and argument representations. To
be broadly useful, a representation should have two proper-
ties: (i) Events that are usually part of the same underly-
ing scenario should get similar representations – that is they
should be embedded close together in the event space. (ii)
Events that occur in different scenarios should get differ-
ent representations, even if they have similar lexical expres-
sions. In our earlier example, we want she threw football and
she threw bomb to be farther apart in the embedding space,
even though they share the subject and the verb.

An effective event composition model must be able to ac-
count for the numerous usage contexts for a given predicate
and should be able to invoke the appropriate usage context
based on the arguments. This problem is compounded even
further when considering predicates that take on many dif-
ferent meanings depending on their arguments. This requires
that the composition models be sensitive to small changes in
the predicate argument interactions. Simple averaging or ad-
ditive transformations are not enough.

One way to capture this rich interaction is through tensor
composition. Tensor-based composition has been used for
composing over tree based structures (Socher et al. 2013b)
and in general for modeling words with operator like se-
mantics (Grefenstette et al. 2013; Fried, Polajnar, and Clark
2015). A key beneﬁt of tensor composition that is relevant to
our setting is that they capture multiplicative interactions of
all the elements involved in the composition, which allows
for the composition to be sensitive to even small changes in
predicate argument interaction.

Formally, we can deﬁne a tensor-based event composition
model as follows. Given a predicate-speciﬁc tensor P , and
the embeddings of the subject s and the object o, the rep-
resentation for the event e can be composed through tensor
contraction denoted as e = P (s, o). Each element in the d(cid:48)-
dimensional event vector is obtained by the multiplicative
interaction of all elements of the subject and object vectors,
weighted by a term that depends on the predicate. The ith
component of e is computed as:

ei =

Pijksjok

(cid:88)

j,k

(1)

The key question with predicate-speciﬁc tensors is how
to learn and reason with such a huge number of parameters.

Figure 2: Predicate Tensor Model: Event representations are com-
puted using a predicate tensor that combines the arguments. Ele-
ments in blue are inputs, green are model parameters, and pink are
outputs generated by the model. Function h produces the predicate
tensor using tensors W and U as shown in Equation 2. Function g
produces the ﬁnal event representation through tensor contraction
as shown in Equation 3.

Prior work that models words as tensors are not scalable be-
cause the methods for learning such word-speciﬁc tensors
require a large number of parameters, as well as a large num-
ber of training instances for each word. Relaxing the need
for predicate speciﬁc training data and reducing the number
of parameters motivate the two models we propose here.

Predicate Tensor Model
Rather than learn a predicate-speciﬁc tensor, we instead
learn two general tensors that can generate a predicate-
speciﬁc tensor on the ﬂy. The predicate tensor model deﬁnes
a function from a basic word embedding for the predicate
to a tensor P . In this model, the predicate tensors are de-
rived from a shared base tensor W ∈ Rd×d×d (where d is
the input embedding dimension). To allow the predicate’s
word embedding to inﬂuence its resulting tensor, we allow
each element of W (each one dimensional ‘row’ of W ) to
be scaled by a value that depends on a linear function of the
predicate embedding p:

Pijk = Wijk

paUajk

(2)

(cid:88)

a

Here U is also a tensor in Rd×d×d which deﬁnes linear
functions for each one dimensional row of W , determining
how p should scale that dimension. Now, given the predicate
vector p, the subject vector s, and the object vector o, the
original tensor contraction P (s, o) we seek above is realized
as follows. Each element in the resulting event vector ei is
computed as:

ei =

pasjokWijkUajk

(3)

(cid:88)

a,i,j,k

Thus this model captures multiplicative interactions

across all three: subject, verb, and object.

Role Factored Tensor Model
The representation power of the predicate tensor comes at
the cost of model complexity and sensitivity. The ability to
capture multiplicative interactions across all its arguments
allows the predicate tensor to model complex relations be-
tween the predicate and its arguments. While this is useful
from a representation stand point, it also makes the model

Figure 3 displays the structure of the model. This factored
model has fewer parameters compared to the Predicate Ten-
sor Model and can also readily generalize to higher-arity
events with any arbitrary number of arguments.

Training Tasks
In order to learn the parameters of the tensor composition
models we employ two different training tasks, which corre-
spond to predicting two different types of contexts.

Predict Events
One natural way to learn script knowledge is to directly learn
how to predict what other events are likely to occur given
a set of events (Pichotta and Mooney 2016; Modi 2016).
We use an alternate learning formulation deﬁned over a pair
of events rather than over sequences of events. One goal is
to learn representations that maximize some similarity mea-
sure between co-occurring events similar to the task deﬁned
by Granroth-Wilding and Clark (2016)2.

Given some input event ei, a target event et which occurs
within in a window of w in front of ei is randomly chosen. A
negative event en is also randomly sampled from the entire
corpus. The regularized learning objective is to minimize the
following quantity:

1
N

N
(cid:88)

i=1

max(0, m + sim(ei, en) − sim(ei, et)) + λL(θ)

where sim(a, b) is cosine similarity, m is the margin, and
L(θ) is l2 regularization on all model parameters θ.

Predict Words
A second training approach is to predict the nearby words of
an event’s sentence context, rather than just the event words.
This is similar to most other word representation learning
objectives. Formally the objective function to minimize is:

1
N

N
(cid:88)

nei(cid:88)

i=1

j=1

−log(P (wij|ei)) + λL(θ)

where nei is the number of words in the sentence that ei
appears in, and wij is the jth word in the sentence for
ei. P (wij|ei) is computed via a softmax layer. The use of
this type of inter sentence word prediction for ﬁnding em-
beddings for phrases has been shown to be useful (Le and
Mikolov 2014).

Training Details
We use the New York Times Gigaword Corpus for training
data. Event triples are extracted using the Open Information
Extraction system Ollie (Mausam et al. 2012). We initial-
ize the word embedding layer with 100 dimensional pre-
trained GloVe vectors (Pennington, Socher, and Manning

2The objective function in (Granroth-Wilding and Clark 2016)
differs from ours in that they learn a coherence function which is
used to measure similarity between events, rather than directly us-
ing cosine similarity.

Figure 3: Role Factored Tensor Model: Uses two tensor contrac-
tions of the predicate with the subject and object, which are then
combined. Elements in blue are inputs, green are model parame-
ters, and pink are outputs generated by the model. Function f is
the tensor contraction operation deﬁned in Equation 6.

behavior more complex and highly sensitive – changes in the
components of the event can drastically change the value of
the event embedding.

In many cases, however, it may not be necessary to jointly
model the interaction of a predicate with all of its arguments.
Often times, the predicate’s interaction with just one of its
arguments is enough for recognizing its usage context. For
example, knowing that football is an argument to throw im-
mediately places the event in the context of sports.

Rather than model interactions between all components,
we thus introduce a factored composition strategy: capture
interactions between the predicate and its arguments sepa-
rately to then combine these interactions into the ﬁnal em-
bedding. In this model, a single tensor T ∈ Rh×d×d (where
h is the output dimension and d is deﬁned as before) is used
to capture these interactions. The resulting interactions are
then combined using role-speciﬁc transformations1.

Formally, let s, o, and p denote the word vectors for the
subject, object, and the predicate respectively. The argument
speciﬁc interactions are captured using two compositions of
the predicate, one with the subject and one with the object:

As before, this composition is deﬁned via tensor contrac-
tion. Given arbitrary arguments a and b, the element vi of
the output vector T (a, b) = v ∈ Rh is given by:

vs = T (s, p)
vo = T (o, p)

vi =

Tljkajbk

(cid:88)

j,k

(4)
(5)

(6)

The subject and object interactions vs and vo are then
transformed via their respective role speciﬁc matrices,
Ws, Wv ∈ Rd(cid:48)×h and summed together to obtain the ﬁnal
event embedding e ∈ Rd(cid:48)

:

e = Wsvs + Wovo

(7)

1This approach is similar to the application of recursive tensor
composition (Socher et al. 2013b) but is not fully recursive in that
the partial interactions are not combined using recursive tensor ap-
plication. We found this additional recursion to be detrimental to
performance.

2014). Like previous work (Modi 2016; Granroth-Wilding
and Clark 2016), we allow the word embeddings to be fur-
ther updated during training for all models.

We hold out 4000 articles from the corpus to construct
dev sets for hyperparameter tuning, and 6000 articles for test
purposes. We make all code and data publicly available.3
Hyperparameter tuning was done using dev sets constructed
for the CMCNC and MCNC tasks (see below). Training was
done using Adagrad (Duchi, Hazan, and Singer 2011) with
a learning rate of 0.01 and a minibatch size of 128.

Evaluation
We evaluate our proposed tensor models on a variety of
event related tasks, comparing against a compositional neu-
ral network model, a simple multiplicative model, and an
averaging baseline. Since our goal is to produce a event rep-
resentation given a single event, and not a sequence as in Pi-
chotta and Mooney (2016), RNN based models are not suit-
able for this task. We report results on both training tasks:
predicting events (EV) and predicting words (WP).

Baselines
Compositional Neural Network (NN) Our ﬁrst baseline is
an neural network model used previously in recent work.
The event representation in this model is computed by feed-
ing the concatenation of the subject, predicate, and object
embedding into a two layer neural network4.

e = W ∗ tanh(H[s; p; o])

where W and H are matrices, the main model parameters.

This basic architecture was used to generate event repre-
sentations for narrative cloze tasks (Modi and Titov 2013;
Modi 2016; Granroth-Wilding and Clark 2016). We adapt
this architecture for our task – given the input event, whose
representation is to be composed, predict the neighboring
context (other events or words in the sentence). This devi-
ates from the model used in (Modi 2016) mainly in training
objective, and that the embedding of the protagonist’s de-
pendency is fed in as input (see the Related Works section
for details). This architecture was also used in (Granroth-
Wilding and Clark 2016) to obtain event representations,
which are then fed to another network that measures coher-
ence of the event representations. We only use the event rep-
resentation part of this model and train it to maximize our
training objectives.
Elementwise Multiplicative Composition The second
baseline extends the additive composition model by simply
concatenating the elementwise multiplications between the
verb and its subject/object. This models some (though not
all) of the multiplicative interactions. The embedding in this
model is computed as:

e = W ∗ tanh(H[s; p; o; p (cid:12) s; p (cid:12) o])

where (cid:12) denotes elementwise multiplication.

3github.com/stonybrooknlp/event-tensors
4We additionally tried a three layer network, however this

slightly decreased performance on the dev set

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Multiplicative
Averaging

ρ

WP
0.71
0.71
0.68
0.65

EV
0.64
0.63
0.63
0.57

0.67

Table 1: Performance on the Transitive Sentence Similarity
dataset, as indicated by Spearman’s ρ

Averaging Baseline This represents each event as the aver-
age of the constituent word vectors using pretrained GloVe
embeddings (Pennington, Socher, and Manning 2014).

Similarity Evaluations
Transitive Sentence Similarity Similarity tasks are a
common way to measure the quality of vector embeddings.
The transitive sentence similarity dataset (Kartsaklis and
Sadrzadeh 2014a) contains 108 pairs of transitive sentences:
short phrases containing a single subject, object, and verb
(e.g., agent sell property). Every pair is annotated by a hu-
man with a similarity score from 1 to 7. For example, pairs
such as (design, reduce, amount) and (company, cut, cost)
are annotated with a high similarity score, while pairs such
as (wife, pour, tea) and (worker, join, party) are given low
similarity scores. Since each pair has several annotations, we
use the average annotator score as the gold score. We evalu-
ate using the Spearman’s correlation of the cosine similarity
given by each model and the annotated similarity score.

Hard Similarity Task The main requirement we laid out
for event composition is that similar events should be em-
bedded close to each other, and dissimilar events or those
from distinct scenarios should be farther from each other. We
create a hard similarity task to explicitly measure how well
the representations satisfy this requirement. To this end, we
create two types of event pairs, one with events that should
be close to each other but have very little lexical overlap
(e.g., police catch robber / authorities apprehend suspect),
and another with events that should be farther apart but have
high overlap (e.g., police catch robber / police catch disease.
A good composition model should have higher cosine
similarity for the similar pair than for the dissimilar pair. To
evaluate this directly we created 230 pairs (115 pairs each of
similar and dissimilar types). To create the set, we have one
annotator create similar/dissimilar pairs from a set of am-
biguous verbs, while three different annotators give the sim-
ilarity/dissimilarity rankings. We kept pairs where the anno-
tators agreed completely. For each composition method, we
obtain the cosine similarity of the pairs under that represen-
tation, and report the fraction of cases where the similar pair
receives a higher cosine than the dissimilar pair.

Results Table 1 shows the Spearman’s ρ scores of the var-
ious models on the transitive similarity task. Consistent with
prior work (Milajevs et al. 2014), we ﬁnd that simple aver-
aging is a competitive baseline for the task. The neural net-
work baseline is only slightly better than averaging. When

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

Accuracy
EV
43.5†
41.0 †
33.0
33.9

WP
23.5
35.7†
20.9
11.3

5.2

Table 2: Hard Similarity Results: Accuracy is the percentage
of cases where the similar pair had higher cosine similarity
than the dissimilar pair.

training for word prediction, both the predicate and the role
factored tensor models have a higher correlation (+3 points
in ρ). Across all models, training for the word objective is
better than training for the event objective. This is to be ex-
pected since the word prediction task focuses on a narrower
context, requiring that representation to be consistent with
information within the sentence in which it appears. This
goal aligns well with the sentence similarity task where the
events that are roughly exchangeable are deemed similar.

Table 2 compares the percentage of cases where the sim-
ilar pairs had a higher cosine similarity than dissimilar pairs
under each event composition method. Both tensor meth-
ods outperform the baselines showing that tensors capture a
richer and broader set of semantics about the events. Inter-
estingly, the event objective is better than word prediction
for all models. We believe the broader context used by the
event prediction objective helps capture broader event se-
mantics necessary to generalize to the difﬁcult pairs.

Coherent Multiple Choice Narrative Cloze
The above experiments judge event similarity, but our
broader goal is to model real-world knowledge. The nar-
rative cloze task was proposed to evaluate script knowl-
edge and knowledge about events that occur together in the
world (Chambers and Jurafsky 2008). The task starts with
a series of events that are mentioned in a document, but
hides one of the events. A reasoning system should pre-
dict what the held out event is, given only the other events.
Event predication is typically done by choosing an event
such that it maximizes some similarity score with the context
events.5 This formulation is difﬁcult since the output space
of possible events is rather large. We evaluate on variant
called the multi-choice narrative cloze (MCNC) (Granroth-
Wilding and Clark 2016), where the system should distin-
guish the held out event from a small set of randomly drawn
events.

However, using automatic cloze evaluation has multiple
issues (Chambers 2017), one of which is that it is overly
sensitive to frequency cutoffs of common events (e.g. said,
was, did, etc.) and errors in the preprocessing tools. To ad-
dress these, we manually curated an evaluation set for the
MCNC task, and call it the Coherent Multiple Choice Nar-
rative Cloze (CMCNC). We generated an MCNC dataset and
made three modiﬁcations.

5We use cosine similarity as our measure

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

CMCNC

MCNC

WP
70.1†
64.5
65.7
67.3

EV WP
42.2
32.3
38.4
41.7

72.1 †
66.1
68.5
67.7

EV
46.5 †
41.1
45.3
45.4

26.7

14.3

Table 3: CMCNC Results: Predict the held out event, given
the observed events from the same document. The dataset
is curated manually for coherence by removing noisy in-
stances and context events. † denotes a statistically signif-
icant difference(α < 0.05) over the best competing baseline
under a paired t-test.

First, we manually removed events that are either: (1) fre-
quent events types that are in our stop event list , or (2) non-
sensical events coming from obvious extraction errors .

Second, we discard heldout events that don’t ﬁt the fol-
lowing criteria: (i) One of its entities must appear in the
given context events. (ii) Given the context events, the held
out event should seem plausible to a human evaluator.
Third, when the heldout event is included with 5 randomly
selected negative events, we replace the entities appearing
in the negative events with similar (under word embedding
distance) entities that appear in the context events.

Enforcing these constraints allows us to better evaluate
how well the system learned commonsense script knowl-
edge, rather than how well the system learned to emulate
noise in the data. For comparison, we also report on an au-
tomatically generated MCNC task. Since we do not restrict
the evaluation to narrative chains with a single protagonist,
the numbers for the automatic MCNC task are lower than
those reported in Granroth-Wilding and Clark (2016).

Results Table 3 show the results for the manually ﬁl-
tered CMCNC and the automatic MCNC tasks. Whereas the
word-based objective excelled on similarity tasks, the event-
based objective does better on cloze tasks. The Role Fac-
tor model shows signiﬁcant improvements in accuracy com-
pared to the neural network model (+4.4 points with word
prediction and +3.6 points with event prediction). The Pred-
icate tensor model, however, performs worse than the neural
network model. The human-curated evaluation shows vastly
different results than the automatic-MCNC, perhaps bolster-
ing the idea that MCNC is not ideal (Chambers 2017). Our
Role Factor model excels in both.

Generating Event Schemas
An event schema is a form of script like knowledge about a
scenario (e.g., a bank heist). Chambers and Jurafsky (2009)
introduce schemas as a set of the main entities in the sce-
nario (the robber, bank teller, etc.) and the main events they
participate in (robber steals money, teller calls police etc.).
Prior work on event schema generation use discrete repre-
sentations of events and build count-based conditional mod-
els over these representations c.f., (Chambers and Jurafsky
2009; Balasubramanian et al. 2013). The basic idea behind

System

Average Score
With 0’s Without 0’s

Role Factor (EV)
Comp. Neural Net (EV)
(Balasubramanian et al. 2013)

2.45
2.26
1.51

2.62
2.47
1.78

Table 4: Average Annotator Scores for generated schemas
(scale from 0-4). Higher scores indicate a more coherent
schema.

Schema Evaluation
We compare against previous work that produces schemas
using relation co-occurrence graphs (Balasubramanian et al.
2013). It also uses OpenIE triples mined from a text corpus.
We refer to this as the Relgrams approach. For a fair com-
parison, we choose 20 seed tuples at random from the list of
top seeds in (Balasubramanian et al. 2013). For each seed,
we generate a schema of 10 grounded events using our best
models. We report results using the Role Factor (EV) repre-
sentations, the Compositional Neural Network (EV) repre-
sentations, and the Relgrams approach.

Our evaluation is human-driven. We present annotators
with 3 schemas (from the 3 models) using the same seed.
For each event in each schema, annotators rated the event
on a 0-4 scale with regards to its relevance to the seed and
the rest of the schema. A score of 0 is reserved for events
that are completely nonsensical (either caused by an extrac-
tion error, or bad entity replacement). A score of 1 indicates
that the event was not relevant with no obvious relation to
the scenario, while a score of 4 indicates the event is highly
relevant and would be a core part of any description of the
scenario. Table 4 shows the average scores given for each
method. We report average ratings both with and without
nonsensical events6.

Both nearest neighbor schemas consistently out-ranked
the Relgrams schemas by a large margin. Figure 4 shows the
schemas produced by both systems using the same seed. The
biggest problem with the schemas produced by the Relgrams
method was their tendency to include overly speciﬁc triples
in the schemas, simply because they co-occur with one of
the events in the schema. The schemas based on continuous
representations can avoid this problem. Here is a typical ex-
ample: the event (police, found, machete) co-occurs a couple
times in an article with (he, likes to eat, dinner). Since (po-
lice, found, machete) is rare in the corpus, the count based
system takes into consideration the co-occurrence. Although
tuples similar to (police, found, machete) such as (authori-
ties, recovered, murder weapon) may appear in the corpus,
the counts based on discrete representations cannot share
evidence across these similar tuples. The method based on
continuous representations can take advantage of similarity
of words in the two tuples. The tensor model further aids by
helping the system better differentiate between events with
many similar words, but different meanings.

While the Compositional Neural Network and Role Fac-
tor representations both perform well compared to the Rel-

6All differences in means are signiﬁcant under t-test w/ α < .05

Figure 4: Example schemas from nearest neighbors and rel-
grams approach. X, Y, and Z are variables that denote dis-
tinct entities. Each row indicates the main event that the en-
tities participate in.

these methods is to start with a seed event and locate other
events that are also likely to occur in the scenario. These
methods suffer fragmented counts because of synonymy
(different tuples can denote the same event) and mixing
events from different contexts because of polysemy (simi-
lar looking tuples denote distinct events). Continuous event
representation provides an opportunity to address these is-
sues.

The tensor-based representations yields a simpler and
more direct approach to generating event schemas. Recall
that with the predict events objective, events that tend to co-
occur with each other end up with a similar representation
and get embedded closer to each other in the event space.
To create a schema seeded by an event, we can simply ﬁnd
its nearest neighbors in the event embedding space and use
them as candidates. This method is simple, scalable, and
does not require maintaining large tables of co-occurrence
information (c.f. Balasubramanian et al. (2013)).

Nearest Neighbor Schema Generation Like previous
systems, our system takes as input a single seed event and
produces the schema based on this event. Given a seed event
s the algorithm proceeds as follows:
• From a corpus of events, compute their representations
using one of the composition methods described above
• Find the k nearest neighbors to s in the text corpus with
respect to the cosine distance of their representations.
• Go through this list of nearest neighbors, add a neighbor
x to the schema if all the following conditions are true:
– The cosine distance between the GloVe embedding of
x’s predicate and all other predicates currently in the
schema is greater than α

– The cosine distance between the GloVe embedding of
at least one of x’s arguments and some entity e in the
schema is less than β. The argument is then replaced
with e to create a new event x(cid:48)

– The average cosine distance between the representation
of x(cid:48) (computed using the same composition function
used to compute the original representations) with all
other events in the schema is less than γ

The end result is a series of events representing a schema.
For values of α, β and γ, we use α = 0.5, β = 0.25, γ = 0.2
(for Role Factor), and γ = 0.3 (for Neural Network). Values
were selected using a develoment set of 20 seeds.

context 1
hitting
inning
walked
hit
ﬁelder

context 2
police
marchers
chechens
stoned
protesters

context 3
shouted
chanted
chanting
yelled
shouting

context 4
farve
elway
yards
rookie
broncos

context 5
lodged
complaint
ﬁled
remand
lawsuit

Table 5: Nearest Neighbors for the implicitly learned con-
texts in which ’throw’ may be used.

grams approach, the Role Factor factor does better, suggest-
ing that the model’s ability to tease out contextual usages of
predicates can be useful in end tasks.

Discussion

This is the ﬁrst paper to propose and evaluate event mod-
els on both event similarity and event schema predic-
tion/generation. We believe there is signiﬁcant overlap in
goals (any event representation needs to learn a nearness be-
tween similar events), but there are also differences (script
learning is not at all about synonymy).

Interpreting the Role Factor Model

The Role Factor model consistently outperforms on all tasks,
in particular over additive/concatenation models from recent
work in event learning. One question to ask is what exactly
is the Role Factor model learning?

Besides simply allowing multiplicative interactions be-
tween the predicate and its arguments, the Role Factored
model can be interpreted as capturing different scenarios or
contexts in which a predicate is used. First, observe that per-
forming the contraction to compute v = T (a, p) can be done
by ﬁrst partially applying T to p, producing a matrix P ,
whose columns Pi are the result of multiplying each slice
Ti in T by the predicate vector p. Thus, each slice Ti moves
the predicate vector to a new point p(cid:48) in the original word
embedding space. If there are distinct usages for a predicate
p, we hope that the slices of T provide a map from p to those
usages in word embedding space.

Table 5 shows the nearest neighbors for several different
Pi vectors for the verb throw. Each of these nearest neigh-
bor clusters indicate what type of arguments (either subject
or object) should ’activate’ the ith dimension, reﬂecting the
type of event contexts that tensor T captures.

Script Generation

This is the ﬁrst attempt to generate event scripts (or schemas)
from continuous representations. Recent work focuses on
event language models that can perform narrative cloze, but
to our knowledge, the goal of the learning explicit scripts has
been left behind. Our human evaluation of generated scripts
shows that nearest neighbor selection with coherent entities
builds far superior scripts than previous work. Figure 4 gives
an example of a generated schema from both systems.

Related Work

Neural Event Representations Neural event embedding
approaches learn representations by training to predict the
next event. Granroth-Wilding and Clark (2016) concatenate
predicate and argument embeddings and feed them to a neu-
ral network to generate an event embedding. Event embed-
dings are further concatenated and fed through another neu-
ral network to predict the coherence between the events.
Modi (2016) encode a set of events in a similar way and
use that to incrementally predict the next event – ﬁrst the ar-
gument, then the predicate and then next argument. Pichotta
and Mooney (2016) treat event prediction as a sequence to
sequence problem and use RNN based models conditioned
on event sequences in order to predict the next event. These
three works all model narrative chains, that is, event se-
quences in which a single entity (the protagonist) partici-
pates in every event. Hu et al. (2017) also apply a RNN ap-
proach, applying a new hierarchical LSTM model in order
predict events by generating discriptive word sequences.

Multiplicative and Tensor composition models Tensor
based composition models have been shown to be useful
for other NLP tasks such as sentiment analysis (Socher et
al. 2011; Socher et al. 2013b), knowledge base comple-
tion (Socher et al. 2013a), and in general for demonstrat-
ing compositional semantics in measuring sentence simi-
larity (Grefenstette et al. 2013; Kartsaklis and Sadrzadeh
2014b; Fried, Polajnar, and Clark 2015; Kim, de Marneffe,
and Fosler-Lussier 2015).

Polajnar, Rimell, and Clark (2015) learn verb speciﬁc ten-
sors by setting up a regression task where the learned tensor
for a verb is expected to yield a representation for the sen-
tential contexts where the verb is found. Huang et al. (2016)
use tensor based autoencoders over AMR representations of
events in order to induce event level (rather than scenerio
level), ACE7 style templates for use in event extraction. Sim-
ilarly, Huang et al. (2017) use tensor compositions to build
representations that facilitate zero shot relation extraction.
Related to our hard similarity task, Tilk et al. (2016) use
(factorized) tensor based methods to model the thematic ﬁt
between event arguments.

Schema/script learning Unsupervised learning of script
knowledge can be traced back to (Chambers and Jurafsky
2008), which introduced a count based technique for induc-
ing narrative chains. Chambers and Jurafsky (2009) extends
this idea to creating full on narrative schemas by merging
together narrative chains with argument overlap. Other un-
supervised induction approaches include a relation n-gram
based method (Balasubramanian et al. 2013), and generative
latent variable models (Nguyen et al. 2015; Chambers 2013;
Cheung, Poon, and Vanderwende 2013). All of these mod-
els worked on discrete representations for capturing co-
occurrence statistics. In this work, we show that higher qual-
ity scripts can be produced using continuous representations
instead.

7www.itl.nist.gov/iad/mig/tests/ace/

Conclusions
Understanding events requires effective representations that
contain both information that is speciﬁc to the event and in-
formation that relates to the underlying context in which the
event occurs. We propose tensor-based composition models
which are able to capture the distinct event contexts in which
a predicate gets used. This improved modeling of these event
contexts allows the resulting continuous representations to
be more effective in multiple event related tasks. Last, we
also show that the continuous representations yield a simple
schema generation method which produces schemas supe-
rior to a prior count based schema generation method.

Acknowledgements
This work is supported in part by the National Science Foun-
dation under Grant IIS-1617969.

References
[Balasubramanian et al. 2013] Balasubramanian, N.; Soder-
land, S.; Mausam, O. E.; and Etzioni, O. 2013. Generating
coherent event schemas at scale. In EMNLP, 1721–1731.
[Chambers and Jurafsky 2008] Chambers, N., and Jurafsky,
D. 2008. Unsupervised learning of narrative event chains.
In ACL, 789–797.
[Chambers and Jurafsky 2009] Chambers, N., and Jurafsky,
D. 2009. Unsupervised learning of narrative schemas and
their participants. In ACL, 602–610.
[Chambers 2013] Chambers, N. 2013. Event schema induc-
In EMNLP,
tion with a probabilistic entity-driven model.
1797–1807.
[Chambers 2017] Chambers, N. 2017. Behind the scenes
In Proceedings of the
of an evolving event cloze test.
2nd Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics, 41–45.
[Cheung, Poon, and Vanderwende 2013] Cheung, J. C. K.;
Poon, H.; and Vanderwende, L. 2013. Probabilistic frame
induction. arXiv preprint arXiv:1302.4813.
[Duchi, Hazan, and Singer 2011] Duchi, J.; Hazan, E.; and
Singer, Y. 2011. Adaptive subgradient methods for online
learning and stochastic optimization. Journal of Machine
Learning Research 2121–2159.
[Fried, Polajnar, and Clark 2015] Fried, D.; Polajnar, T.; and
Clark, S. 2015. Low-rank tensors for verbs in compositional
distributional semantics. In ACL, 731–736.
[Granroth-Wilding and Clark 2016] Granroth-Wilding, M.,
and Clark, S. 2016. What happens next? event prediction us-
ing a compositional neural network model. In AAAI, 2727–
2733.
[Grefenstette et al. 2013] Grefenstette, E.; Dinu, G.; Zhang,
Y.-Z.; Sadrzadeh, M.; and Baroni, M. 2013. Multi-step re-
gression learning for compositional distributional semantics.
In IWCS.
[Hu et al. 2017] Hu, L.; Li, J.; Nie, L.; Li, X.-L.; and Shao,
C. 2017. What happens next? future subevent prediction
using contextual hierarchical lstm. In AAAI, 3450–3456.

D.,

D.,

[Huang et al. 2016] Huang, L.; Cassidy, T.; Feng, X.; Ji, H.;
Voss, C. R.; Han, J.; and Sil, A. 2016. Liberal event extrac-
tion and event schema induction. In ACL.
[Huang et al. 2017] Huang, L.; Ji, H.; Cho, K.; and Voss,
C. R. 2017. Zero-shot transfer learning for event extrac-
tion. arXiv preprint arXiv:1707.01066.
and
[Kartsaklis and Sadrzadeh 2014a] Kartsaklis,
Sadrzadeh, M.
2014a. A study of entanglement in a
categorical framework of natural language. In Proceedings
of the 11th workshop on Quantum Physics and Logic, QPL,
249–261.
and
[Kartsaklis and Sadrzadeh 2014b] Kartsaklis,
Sadrzadeh, M.
2014b. A study of entanglement in a
categorical framework of natural language. arXiv preprint
arXiv:1405.2874.
J.-K.;
[Kim, de Marneffe, and Fosler-Lussier 2015] Kim,
de Marneffe, M.-C.; and Fosler-Lussier, E. 2015. Neural
word embeddings with multiplicative feature interactions
In VS@ HLT-NAACL,
for tensor-based compositions.
143–150.
[Le and Mikolov 2014] Le, Q. V., and Mikolov, T. 2014. Dis-
tributed representations of sentences and documents. CoRR
abs/1405.4053.
[Mausam et al. 2012] Mausam; Schmitz, M.; Bart, R.;
Soderland, S.; and Etzioni, O. 2012. Open language learning
for information extraction. In EMNLP-CoNLL, 523–534.
D.;
[Milajevs et al. 2014] Milajevs,
Sadrzadeh, M.; and Purver, M.
Evaluating
neural word representations in tensor-based compositional
settings. CoRR abs/1408.6179.
[Modi and Titov 2013] Modi, A., and Titov, I. 2013. Learn-
ing semantic script knowledge with event embeddings.
CoRR abs/1312.5198.
[Modi 2016] Modi, A. 2016. Event embeddings for seman-
In Proceedings of the Conference on
tic script modeling.
Computational Natural Language Learning (CoNLL).
[Mooney and DeJong 1985] Mooney, R., and DeJong, G.
1985. Learning schemata for natural language processing.
In Ninth International Joint Conference on Artiﬁcial Intelli-
gence (IJCAI), 681–687.
[Nguyen et al. 2015] Nguyen, K.-H.; Tannier, X.; Ferret, O.;
and Besanc¸on, R. 2015. Generative event schema induction
with entity disambiguation. In ACL, 188–197.
[Pennington, Socher, and Manning 2014] Pennington,
J.;
Socher, R.; and Manning, C. 2014. Glove: Global vectors
for word representation. In EMNLP, 1532–1543.
[Pichotta and Mooney 2016] Pichotta, K., and Mooney, R. J.
2016. Learning statistical scripts with LSTM recurrent neu-
ral networks. In AAAI.
[Polajnar, Rimell, and Clark 2015] Polajnar, T.; Rimell, L.;
and Clark, S. 2015. An exploration of discourse-based
sentence spaces for compositional distributional semantics.
In Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics (LSDSem), 1.
[Schank and Abelson 1977] Schank, R. C., and Abelson,
R. P. 1977. Scripts, Plans, Goals and Understanding: an

Kartsaklis,

2014.

D.;

2011.

Inquiry into Human Knowledge Structures. Hillsdale, NJ:
L. Erlbaum.
J.; Huang,
[Socher et al. 2011] Socher, R.; Pennington,
E. H.; Ng, A. Y.; and Manning, C. D.
Semi-
supervised recursive autoencoders for predicting sentiment
distributions. In EMNLP, 151–161.
[Socher et al. 2013a] Socher, R.; Chen, D.; Manning, C. D.;
and Ng, A. 2013a. Reasoning with neural tensor networks
for knowledge base completion. In Advances in neural in-
formation processing systems, 926–934.
[Socher et al. 2013b] Socher, R.; Perelygin, A.; Wu, J.;
Chuang, J.; Manning, C. D.; Ng, A.; and Potts, C. 2013b.
Recursive deep models for semantic compositionality over a
sentiment treebank. In EMNLP, 1631–1642.
[Tilk et al. 2016] Tilk, O.; Demberg, V.; Sayeed, A.; Klakow,
D.; and Thater, S. 2016. Event participant modelling with
neural networks. In EMNLP, 171–182.

Event Representations with Tensor-based Compositions

Noah Weber
Stony Brook University
Stony Brook, New York, USA
nwweber@cs.stonybrook.edu

Niranjan Balasubramanian
Stony Brook University
Stony Brook, New York, USA
niranjan@cs.stonybrook.edu

Nathanael Chambers
United States Naval Academy
Annapolis, Maryland, USA
nchamber@usna.edu

7
1
0
2
 
v
o
N
 
1
2
 
 
]
L
C
.
s
c
[
 
 
1
v
1
1
6
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

Robust and ﬂexible event representations are important to
many core areas in language understanding. Scripts were
proposed early on as a way of representing sequences of
events for such understanding, and has recently attracted
renewed attention. However, obtaining effective representa-
tions for modeling script-like event sequences is challeng-
ing. It requires representations that can capture event-level
and scenario-level semantics. We propose a new tensor-based
composition method for creating event representations. The
method captures more subtle semantic interactions between
an event and its entities and yields representations that are
effective at multiple event-related tasks. With the continu-
ous representations, we also devise a simple schema gener-
ation method which produces better schemas compared to
a prior discrete representation based method. Our analysis
shows that the tensors capture distinct usages of a predicate
even when there are only subtle differences in their surface
realizations.

Introduction
Understanding the events described in text is central to ap-
plications in artiﬁcial intelligence such as question answer-
ing, discourse understanding, and information extraction.
Research in event understanding ranges from relation ex-
traction of individual events to full document understand-
ing of all its events. Inspired by the concept of scripts, pro-
posed in the seminal work by Schank and Abelson (1977),
much work has looked at modeling stereotypical sequences
of events in order to drive discourse understanding. Early
rule-based methods for this task were characteristically brit-
tle and domain-speciﬁc. Later work proposed computational
models for script learning and understanding (Mooney and
DeJong 1985; Chambers and Jurafsky 2009; Balasubrama-
nian et al. 2013), but they use shallow event representations
dependent on their speciﬁc surface words. Others have fo-
cused on training neural networks for robust event represen-
tations, using them to predict which events are likely to oc-
cur next (Modi 2016; Pichotta and Mooney 2016).

To be broadly useful, a good representation should
capture both event-level semantics (e.g., synonymy) and
broader scenario-level semantics. Event-level semantics are

Figure 1: Additive compositions of word embeddings do not
distinguish distinct events. Tensor compositions can tease
out distinct events even with high lexical overlap, and rec-
ognize related events even with low lexical overlap.

accessible to simple composition methods. However, mod-
eling scenario-level semantics is challenging. For example,
consider the following events: (i) she threw a football and
(ii) she threw a bomb. Even though the subject and the verb
are the same, these two events denote entirely different sce-
narios – sports and terrorism. The interaction of football or
bomb with the predicate threw is what determines the precise
semantics of the event and the broader scenario in which it
is embedded. A change to a single argument requires a large
shift in the event’s representation.

As illustrated in Figure 1, due to the overlap of words, pa-
rameterized additive models (Granroth-Wilding and Clark
2016; Modi 2016) and RNN-based models (Pichotta and
Mooney 2016; Hu et al. 2017) are limited in their trans-
formations. Additive models combine the words in these
phrases by the passing the concatenation or addition of their
word embeddings to a parameterized function (usually a
feed forward neural network) that maps the summed vec-
tor into event embedding space. The additive nature of these
models makes it difﬁcult to model subtle differences in an
event’s surface form. Instead of additive models, we pro-
pose tensor-based composition models, which combine the
subject, predicate, and object to produce the ﬁnal event rep-
resentation. The models capture multiplicative interactions
between these elements and are thus able to make large shifts
in event semantics with only small changes to the arguments.

This paper puts forth three main contributions:

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

• A scalable tensor-based composition model for event
representations, which can implicitly recognize different

event contexts based on predicate argument interactions.
• A broad set of evaluations on event-related tasks: we ﬁnd
that the tensor-based event representation outperforms ad-
ditive compositions on (i) a sentence similarity task, (ii)
a new hard similarity task, and (iii) an event prediction
task (two variants of the narrative cloze), suggesting broad
utility in event-related tasks.

• A simple yet effective method for generating event
schemas: to our knowledge, ours is the ﬁrst proposal
for using continuous event representations in schema
generation. We show that event tensors produce supe-
rior schemas compared to a prior distributional counting
model (Balasubramanian et al. 2013).

Models: Tensor-based Event Composition
Event composition models produce vector representations of
an event given its predicate and argument representations. To
be broadly useful, a representation should have two proper-
ties: (i) Events that are usually part of the same underly-
ing scenario should get similar representations – that is they
should be embedded close together in the event space. (ii)
Events that occur in different scenarios should get differ-
ent representations, even if they have similar lexical expres-
sions. In our earlier example, we want she threw football and
she threw bomb to be farther apart in the embedding space,
even though they share the subject and the verb.

An effective event composition model must be able to ac-
count for the numerous usage contexts for a given predicate
and should be able to invoke the appropriate usage context
based on the arguments. This problem is compounded even
further when considering predicates that take on many dif-
ferent meanings depending on their arguments. This requires
that the composition models be sensitive to small changes in
the predicate argument interactions. Simple averaging or ad-
ditive transformations are not enough.

One way to capture this rich interaction is through tensor
composition. Tensor-based composition has been used for
composing over tree based structures (Socher et al. 2013b)
and in general for modeling words with operator like se-
mantics (Grefenstette et al. 2013; Fried, Polajnar, and Clark
2015). A key beneﬁt of tensor composition that is relevant to
our setting is that they capture multiplicative interactions of
all the elements involved in the composition, which allows
for the composition to be sensitive to even small changes in
predicate argument interaction.

Formally, we can deﬁne a tensor-based event composition
model as follows. Given a predicate-speciﬁc tensor P , and
the embeddings of the subject s and the object o, the rep-
resentation for the event e can be composed through tensor
contraction denoted as e = P (s, o). Each element in the d(cid:48)-
dimensional event vector is obtained by the multiplicative
interaction of all elements of the subject and object vectors,
weighted by a term that depends on the predicate. The ith
component of e is computed as:

ei =

Pijksjok

(cid:88)

j,k

(1)

The key question with predicate-speciﬁc tensors is how
to learn and reason with such a huge number of parameters.

Figure 2: Predicate Tensor Model: Event representations are com-
puted using a predicate tensor that combines the arguments. Ele-
ments in blue are inputs, green are model parameters, and pink are
outputs generated by the model. Function h produces the predicate
tensor using tensors W and U as shown in Equation 2. Function g
produces the ﬁnal event representation through tensor contraction
as shown in Equation 3.

Prior work that models words as tensors are not scalable be-
cause the methods for learning such word-speciﬁc tensors
require a large number of parameters, as well as a large num-
ber of training instances for each word. Relaxing the need
for predicate speciﬁc training data and reducing the number
of parameters motivate the two models we propose here.

Predicate Tensor Model
Rather than learn a predicate-speciﬁc tensor, we instead
learn two general tensors that can generate a predicate-
speciﬁc tensor on the ﬂy. The predicate tensor model deﬁnes
a function from a basic word embedding for the predicate
to a tensor P . In this model, the predicate tensors are de-
rived from a shared base tensor W ∈ Rd×d×d (where d is
the input embedding dimension). To allow the predicate’s
word embedding to inﬂuence its resulting tensor, we allow
each element of W (each one dimensional ‘row’ of W ) to
be scaled by a value that depends on a linear function of the
predicate embedding p:

Pijk = Wijk

paUajk

(2)

(cid:88)

a

Here U is also a tensor in Rd×d×d which deﬁnes linear
functions for each one dimensional row of W , determining
how p should scale that dimension. Now, given the predicate
vector p, the subject vector s, and the object vector o, the
original tensor contraction P (s, o) we seek above is realized
as follows. Each element in the resulting event vector ei is
computed as:

ei =

pasjokWijkUajk

(3)

(cid:88)

a,i,j,k

Thus this model captures multiplicative interactions

across all three: subject, verb, and object.

Role Factored Tensor Model
The representation power of the predicate tensor comes at
the cost of model complexity and sensitivity. The ability to
capture multiplicative interactions across all its arguments
allows the predicate tensor to model complex relations be-
tween the predicate and its arguments. While this is useful
from a representation stand point, it also makes the model

Figure 3 displays the structure of the model. This factored
model has fewer parameters compared to the Predicate Ten-
sor Model and can also readily generalize to higher-arity
events with any arbitrary number of arguments.

Training Tasks
In order to learn the parameters of the tensor composition
models we employ two different training tasks, which corre-
spond to predicting two different types of contexts.

Predict Events
One natural way to learn script knowledge is to directly learn
how to predict what other events are likely to occur given
a set of events (Pichotta and Mooney 2016; Modi 2016).
We use an alternate learning formulation deﬁned over a pair
of events rather than over sequences of events. One goal is
to learn representations that maximize some similarity mea-
sure between co-occurring events similar to the task deﬁned
by Granroth-Wilding and Clark (2016)2.

Given some input event ei, a target event et which occurs
within in a window of w in front of ei is randomly chosen. A
negative event en is also randomly sampled from the entire
corpus. The regularized learning objective is to minimize the
following quantity:

1
N

N
(cid:88)

i=1

max(0, m + sim(ei, en) − sim(ei, et)) + λL(θ)

where sim(a, b) is cosine similarity, m is the margin, and
L(θ) is l2 regularization on all model parameters θ.

Predict Words
A second training approach is to predict the nearby words of
an event’s sentence context, rather than just the event words.
This is similar to most other word representation learning
objectives. Formally the objective function to minimize is:

1
N

N
(cid:88)

nei(cid:88)

i=1

j=1

−log(P (wij|ei)) + λL(θ)

where nei is the number of words in the sentence that ei
appears in, and wij is the jth word in the sentence for
ei. P (wij|ei) is computed via a softmax layer. The use of
this type of inter sentence word prediction for ﬁnding em-
beddings for phrases has been shown to be useful (Le and
Mikolov 2014).

Training Details
We use the New York Times Gigaword Corpus for training
data. Event triples are extracted using the Open Information
Extraction system Ollie (Mausam et al. 2012). We initial-
ize the word embedding layer with 100 dimensional pre-
trained GloVe vectors (Pennington, Socher, and Manning

2The objective function in (Granroth-Wilding and Clark 2016)
differs from ours in that they learn a coherence function which is
used to measure similarity between events, rather than directly us-
ing cosine similarity.

Figure 3: Role Factored Tensor Model: Uses two tensor contrac-
tions of the predicate with the subject and object, which are then
combined. Elements in blue are inputs, green are model parame-
ters, and pink are outputs generated by the model. Function f is
the tensor contraction operation deﬁned in Equation 6.

behavior more complex and highly sensitive – changes in the
components of the event can drastically change the value of
the event embedding.

In many cases, however, it may not be necessary to jointly
model the interaction of a predicate with all of its arguments.
Often times, the predicate’s interaction with just one of its
arguments is enough for recognizing its usage context. For
example, knowing that football is an argument to throw im-
mediately places the event in the context of sports.

Rather than model interactions between all components,
we thus introduce a factored composition strategy: capture
interactions between the predicate and its arguments sepa-
rately to then combine these interactions into the ﬁnal em-
bedding. In this model, a single tensor T ∈ Rh×d×d (where
h is the output dimension and d is deﬁned as before) is used
to capture these interactions. The resulting interactions are
then combined using role-speciﬁc transformations1.

Formally, let s, o, and p denote the word vectors for the
subject, object, and the predicate respectively. The argument
speciﬁc interactions are captured using two compositions of
the predicate, one with the subject and one with the object:

As before, this composition is deﬁned via tensor contrac-
tion. Given arbitrary arguments a and b, the element vi of
the output vector T (a, b) = v ∈ Rh is given by:

vs = T (s, p)
vo = T (o, p)

vi =

Tljkajbk

(cid:88)

j,k

(4)
(5)

(6)

The subject and object interactions vs and vo are then
transformed via their respective role speciﬁc matrices,
Ws, Wv ∈ Rd(cid:48)×h and summed together to obtain the ﬁnal
event embedding e ∈ Rd(cid:48)

:

e = Wsvs + Wovo

(7)

1This approach is similar to the application of recursive tensor
composition (Socher et al. 2013b) but is not fully recursive in that
the partial interactions are not combined using recursive tensor ap-
plication. We found this additional recursion to be detrimental to
performance.

2014). Like previous work (Modi 2016; Granroth-Wilding
and Clark 2016), we allow the word embeddings to be fur-
ther updated during training for all models.

We hold out 4000 articles from the corpus to construct
dev sets for hyperparameter tuning, and 6000 articles for test
purposes. We make all code and data publicly available.3
Hyperparameter tuning was done using dev sets constructed
for the CMCNC and MCNC tasks (see below). Training was
done using Adagrad (Duchi, Hazan, and Singer 2011) with
a learning rate of 0.01 and a minibatch size of 128.

Evaluation
We evaluate our proposed tensor models on a variety of
event related tasks, comparing against a compositional neu-
ral network model, a simple multiplicative model, and an
averaging baseline. Since our goal is to produce a event rep-
resentation given a single event, and not a sequence as in Pi-
chotta and Mooney (2016), RNN based models are not suit-
able for this task. We report results on both training tasks:
predicting events (EV) and predicting words (WP).

Baselines
Compositional Neural Network (NN) Our ﬁrst baseline is
an neural network model used previously in recent work.
The event representation in this model is computed by feed-
ing the concatenation of the subject, predicate, and object
embedding into a two layer neural network4.

e = W ∗ tanh(H[s; p; o])

where W and H are matrices, the main model parameters.

This basic architecture was used to generate event repre-
sentations for narrative cloze tasks (Modi and Titov 2013;
Modi 2016; Granroth-Wilding and Clark 2016). We adapt
this architecture for our task – given the input event, whose
representation is to be composed, predict the neighboring
context (other events or words in the sentence). This devi-
ates from the model used in (Modi 2016) mainly in training
objective, and that the embedding of the protagonist’s de-
pendency is fed in as input (see the Related Works section
for details). This architecture was also used in (Granroth-
Wilding and Clark 2016) to obtain event representations,
which are then fed to another network that measures coher-
ence of the event representations. We only use the event rep-
resentation part of this model and train it to maximize our
training objectives.
Elementwise Multiplicative Composition The second
baseline extends the additive composition model by simply
concatenating the elementwise multiplications between the
verb and its subject/object. This models some (though not
all) of the multiplicative interactions. The embedding in this
model is computed as:

e = W ∗ tanh(H[s; p; o; p (cid:12) s; p (cid:12) o])

where (cid:12) denotes elementwise multiplication.

3github.com/stonybrooknlp/event-tensors
4We additionally tried a three layer network, however this

slightly decreased performance on the dev set

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Multiplicative
Averaging

ρ

WP
0.71
0.71
0.68
0.65

EV
0.64
0.63
0.63
0.57

0.67

Table 1: Performance on the Transitive Sentence Similarity
dataset, as indicated by Spearman’s ρ

Averaging Baseline This represents each event as the aver-
age of the constituent word vectors using pretrained GloVe
embeddings (Pennington, Socher, and Manning 2014).

Similarity Evaluations
Transitive Sentence Similarity Similarity tasks are a
common way to measure the quality of vector embeddings.
The transitive sentence similarity dataset (Kartsaklis and
Sadrzadeh 2014a) contains 108 pairs of transitive sentences:
short phrases containing a single subject, object, and verb
(e.g., agent sell property). Every pair is annotated by a hu-
man with a similarity score from 1 to 7. For example, pairs
such as (design, reduce, amount) and (company, cut, cost)
are annotated with a high similarity score, while pairs such
as (wife, pour, tea) and (worker, join, party) are given low
similarity scores. Since each pair has several annotations, we
use the average annotator score as the gold score. We evalu-
ate using the Spearman’s correlation of the cosine similarity
given by each model and the annotated similarity score.

Hard Similarity Task The main requirement we laid out
for event composition is that similar events should be em-
bedded close to each other, and dissimilar events or those
from distinct scenarios should be farther from each other. We
create a hard similarity task to explicitly measure how well
the representations satisfy this requirement. To this end, we
create two types of event pairs, one with events that should
be close to each other but have very little lexical overlap
(e.g., police catch robber / authorities apprehend suspect),
and another with events that should be farther apart but have
high overlap (e.g., police catch robber / police catch disease.
A good composition model should have higher cosine
similarity for the similar pair than for the dissimilar pair. To
evaluate this directly we created 230 pairs (115 pairs each of
similar and dissimilar types). To create the set, we have one
annotator create similar/dissimilar pairs from a set of am-
biguous verbs, while three different annotators give the sim-
ilarity/dissimilarity rankings. We kept pairs where the anno-
tators agreed completely. For each composition method, we
obtain the cosine similarity of the pairs under that represen-
tation, and report the fraction of cases where the similar pair
receives a higher cosine than the dissimilar pair.

Results Table 1 shows the Spearman’s ρ scores of the var-
ious models on the transitive similarity task. Consistent with
prior work (Milajevs et al. 2014), we ﬁnd that simple aver-
aging is a competitive baseline for the task. The neural net-
work baseline is only slightly better than averaging. When

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

Accuracy
EV
43.5†
41.0 †
33.0
33.9

WP
23.5
35.7†
20.9
11.3

5.2

Table 2: Hard Similarity Results: Accuracy is the percentage
of cases where the similar pair had higher cosine similarity
than the dissimilar pair.

training for word prediction, both the predicate and the role
factored tensor models have a higher correlation (+3 points
in ρ). Across all models, training for the word objective is
better than training for the event objective. This is to be ex-
pected since the word prediction task focuses on a narrower
context, requiring that representation to be consistent with
information within the sentence in which it appears. This
goal aligns well with the sentence similarity task where the
events that are roughly exchangeable are deemed similar.

Table 2 compares the percentage of cases where the sim-
ilar pairs had a higher cosine similarity than dissimilar pairs
under each event composition method. Both tensor meth-
ods outperform the baselines showing that tensors capture a
richer and broader set of semantics about the events. Inter-
estingly, the event objective is better than word prediction
for all models. We believe the broader context used by the
event prediction objective helps capture broader event se-
mantics necessary to generalize to the difﬁcult pairs.

Coherent Multiple Choice Narrative Cloze
The above experiments judge event similarity, but our
broader goal is to model real-world knowledge. The nar-
rative cloze task was proposed to evaluate script knowl-
edge and knowledge about events that occur together in the
world (Chambers and Jurafsky 2008). The task starts with
a series of events that are mentioned in a document, but
hides one of the events. A reasoning system should pre-
dict what the held out event is, given only the other events.
Event predication is typically done by choosing an event
such that it maximizes some similarity score with the context
events.5 This formulation is difﬁcult since the output space
of possible events is rather large. We evaluate on variant
called the multi-choice narrative cloze (MCNC) (Granroth-
Wilding and Clark 2016), where the system should distin-
guish the held out event from a small set of randomly drawn
events.

However, using automatic cloze evaluation has multiple
issues (Chambers 2017), one of which is that it is overly
sensitive to frequency cutoffs of common events (e.g. said,
was, did, etc.) and errors in the preprocessing tools. To ad-
dress these, we manually curated an evaluation set for the
MCNC task, and call it the Coherent Multiple Choice Nar-
rative Cloze (CMCNC). We generated an MCNC dataset and
made three modiﬁcations.

5We use cosine similarity as our measure

System

Role Factor Tensor
Predicate Tensor
Comp. Neural Net
Elementwise Mult.
Averaging

CMCNC

MCNC

WP
70.1†
64.5
65.7
67.3

EV WP
42.2
32.3
38.4
41.7

72.1 †
66.1
68.5
67.7

EV
46.5 †
41.1
45.3
45.4

26.7

14.3

Table 3: CMCNC Results: Predict the held out event, given
the observed events from the same document. The dataset
is curated manually for coherence by removing noisy in-
stances and context events. † denotes a statistically signif-
icant difference(α < 0.05) over the best competing baseline
under a paired t-test.

First, we manually removed events that are either: (1) fre-
quent events types that are in our stop event list , or (2) non-
sensical events coming from obvious extraction errors .

Second, we discard heldout events that don’t ﬁt the fol-
lowing criteria: (i) One of its entities must appear in the
given context events. (ii) Given the context events, the held
out event should seem plausible to a human evaluator.
Third, when the heldout event is included with 5 randomly
selected negative events, we replace the entities appearing
in the negative events with similar (under word embedding
distance) entities that appear in the context events.

Enforcing these constraints allows us to better evaluate
how well the system learned commonsense script knowl-
edge, rather than how well the system learned to emulate
noise in the data. For comparison, we also report on an au-
tomatically generated MCNC task. Since we do not restrict
the evaluation to narrative chains with a single protagonist,
the numbers for the automatic MCNC task are lower than
those reported in Granroth-Wilding and Clark (2016).

Results Table 3 show the results for the manually ﬁl-
tered CMCNC and the automatic MCNC tasks. Whereas the
word-based objective excelled on similarity tasks, the event-
based objective does better on cloze tasks. The Role Fac-
tor model shows signiﬁcant improvements in accuracy com-
pared to the neural network model (+4.4 points with word
prediction and +3.6 points with event prediction). The Pred-
icate tensor model, however, performs worse than the neural
network model. The human-curated evaluation shows vastly
different results than the automatic-MCNC, perhaps bolster-
ing the idea that MCNC is not ideal (Chambers 2017). Our
Role Factor model excels in both.

Generating Event Schemas
An event schema is a form of script like knowledge about a
scenario (e.g., a bank heist). Chambers and Jurafsky (2009)
introduce schemas as a set of the main entities in the sce-
nario (the robber, bank teller, etc.) and the main events they
participate in (robber steals money, teller calls police etc.).
Prior work on event schema generation use discrete repre-
sentations of events and build count-based conditional mod-
els over these representations c.f., (Chambers and Jurafsky
2009; Balasubramanian et al. 2013). The basic idea behind

System

Average Score
With 0’s Without 0’s

Role Factor (EV)
Comp. Neural Net (EV)
(Balasubramanian et al. 2013)

2.45
2.26
1.51

2.62
2.47
1.78

Table 4: Average Annotator Scores for generated schemas
(scale from 0-4). Higher scores indicate a more coherent
schema.

Schema Evaluation
We compare against previous work that produces schemas
using relation co-occurrence graphs (Balasubramanian et al.
2013). It also uses OpenIE triples mined from a text corpus.
We refer to this as the Relgrams approach. For a fair com-
parison, we choose 20 seed tuples at random from the list of
top seeds in (Balasubramanian et al. 2013). For each seed,
we generate a schema of 10 grounded events using our best
models. We report results using the Role Factor (EV) repre-
sentations, the Compositional Neural Network (EV) repre-
sentations, and the Relgrams approach.

Our evaluation is human-driven. We present annotators
with 3 schemas (from the 3 models) using the same seed.
For each event in each schema, annotators rated the event
on a 0-4 scale with regards to its relevance to the seed and
the rest of the schema. A score of 0 is reserved for events
that are completely nonsensical (either caused by an extrac-
tion error, or bad entity replacement). A score of 1 indicates
that the event was not relevant with no obvious relation to
the scenario, while a score of 4 indicates the event is highly
relevant and would be a core part of any description of the
scenario. Table 4 shows the average scores given for each
method. We report average ratings both with and without
nonsensical events6.

Both nearest neighbor schemas consistently out-ranked
the Relgrams schemas by a large margin. Figure 4 shows the
schemas produced by both systems using the same seed. The
biggest problem with the schemas produced by the Relgrams
method was their tendency to include overly speciﬁc triples
in the schemas, simply because they co-occur with one of
the events in the schema. The schemas based on continuous
representations can avoid this problem. Here is a typical ex-
ample: the event (police, found, machete) co-occurs a couple
times in an article with (he, likes to eat, dinner). Since (po-
lice, found, machete) is rare in the corpus, the count based
system takes into consideration the co-occurrence. Although
tuples similar to (police, found, machete) such as (authori-
ties, recovered, murder weapon) may appear in the corpus,
the counts based on discrete representations cannot share
evidence across these similar tuples. The method based on
continuous representations can take advantage of similarity
of words in the two tuples. The tensor model further aids by
helping the system better differentiate between events with
many similar words, but different meanings.

While the Compositional Neural Network and Role Fac-
tor representations both perform well compared to the Rel-

6All differences in means are signiﬁcant under t-test w/ α < .05

Figure 4: Example schemas from nearest neighbors and rel-
grams approach. X, Y, and Z are variables that denote dis-
tinct entities. Each row indicates the main event that the en-
tities participate in.

these methods is to start with a seed event and locate other
events that are also likely to occur in the scenario. These
methods suffer fragmented counts because of synonymy
(different tuples can denote the same event) and mixing
events from different contexts because of polysemy (simi-
lar looking tuples denote distinct events). Continuous event
representation provides an opportunity to address these is-
sues.

The tensor-based representations yields a simpler and
more direct approach to generating event schemas. Recall
that with the predict events objective, events that tend to co-
occur with each other end up with a similar representation
and get embedded closer to each other in the event space.
To create a schema seeded by an event, we can simply ﬁnd
its nearest neighbors in the event embedding space and use
them as candidates. This method is simple, scalable, and
does not require maintaining large tables of co-occurrence
information (c.f. Balasubramanian et al. (2013)).

Nearest Neighbor Schema Generation Like previous
systems, our system takes as input a single seed event and
produces the schema based on this event. Given a seed event
s the algorithm proceeds as follows:
• From a corpus of events, compute their representations
using one of the composition methods described above
• Find the k nearest neighbors to s in the text corpus with
respect to the cosine distance of their representations.
• Go through this list of nearest neighbors, add a neighbor
x to the schema if all the following conditions are true:
– The cosine distance between the GloVe embedding of
x’s predicate and all other predicates currently in the
schema is greater than α

– The cosine distance between the GloVe embedding of
at least one of x’s arguments and some entity e in the
schema is less than β. The argument is then replaced
with e to create a new event x(cid:48)

– The average cosine distance between the representation
of x(cid:48) (computed using the same composition function
used to compute the original representations) with all
other events in the schema is less than γ

The end result is a series of events representing a schema.
For values of α, β and γ, we use α = 0.5, β = 0.25, γ = 0.2
(for Role Factor), and γ = 0.3 (for Neural Network). Values
were selected using a develoment set of 20 seeds.

context 1
hitting
inning
walked
hit
ﬁelder

context 2
police
marchers
chechens
stoned
protesters

context 3
shouted
chanted
chanting
yelled
shouting

context 4
farve
elway
yards
rookie
broncos

context 5
lodged
complaint
ﬁled
remand
lawsuit

Table 5: Nearest Neighbors for the implicitly learned con-
texts in which ’throw’ may be used.

grams approach, the Role Factor factor does better, suggest-
ing that the model’s ability to tease out contextual usages of
predicates can be useful in end tasks.

Discussion

This is the ﬁrst paper to propose and evaluate event mod-
els on both event similarity and event schema predic-
tion/generation. We believe there is signiﬁcant overlap in
goals (any event representation needs to learn a nearness be-
tween similar events), but there are also differences (script
learning is not at all about synonymy).

Interpreting the Role Factor Model

The Role Factor model consistently outperforms on all tasks,
in particular over additive/concatenation models from recent
work in event learning. One question to ask is what exactly
is the Role Factor model learning?

Besides simply allowing multiplicative interactions be-
tween the predicate and its arguments, the Role Factored
model can be interpreted as capturing different scenarios or
contexts in which a predicate is used. First, observe that per-
forming the contraction to compute v = T (a, p) can be done
by ﬁrst partially applying T to p, producing a matrix P ,
whose columns Pi are the result of multiplying each slice
Ti in T by the predicate vector p. Thus, each slice Ti moves
the predicate vector to a new point p(cid:48) in the original word
embedding space. If there are distinct usages for a predicate
p, we hope that the slices of T provide a map from p to those
usages in word embedding space.

Table 5 shows the nearest neighbors for several different
Pi vectors for the verb throw. Each of these nearest neigh-
bor clusters indicate what type of arguments (either subject
or object) should ’activate’ the ith dimension, reﬂecting the
type of event contexts that tensor T captures.

Script Generation

This is the ﬁrst attempt to generate event scripts (or schemas)
from continuous representations. Recent work focuses on
event language models that can perform narrative cloze, but
to our knowledge, the goal of the learning explicit scripts has
been left behind. Our human evaluation of generated scripts
shows that nearest neighbor selection with coherent entities
builds far superior scripts than previous work. Figure 4 gives
an example of a generated schema from both systems.

Related Work

Neural Event Representations Neural event embedding
approaches learn representations by training to predict the
next event. Granroth-Wilding and Clark (2016) concatenate
predicate and argument embeddings and feed them to a neu-
ral network to generate an event embedding. Event embed-
dings are further concatenated and fed through another neu-
ral network to predict the coherence between the events.
Modi (2016) encode a set of events in a similar way and
use that to incrementally predict the next event – ﬁrst the ar-
gument, then the predicate and then next argument. Pichotta
and Mooney (2016) treat event prediction as a sequence to
sequence problem and use RNN based models conditioned
on event sequences in order to predict the next event. These
three works all model narrative chains, that is, event se-
quences in which a single entity (the protagonist) partici-
pates in every event. Hu et al. (2017) also apply a RNN ap-
proach, applying a new hierarchical LSTM model in order
predict events by generating discriptive word sequences.

Multiplicative and Tensor composition models Tensor
based composition models have been shown to be useful
for other NLP tasks such as sentiment analysis (Socher et
al. 2011; Socher et al. 2013b), knowledge base comple-
tion (Socher et al. 2013a), and in general for demonstrat-
ing compositional semantics in measuring sentence simi-
larity (Grefenstette et al. 2013; Kartsaklis and Sadrzadeh
2014b; Fried, Polajnar, and Clark 2015; Kim, de Marneffe,
and Fosler-Lussier 2015).

Polajnar, Rimell, and Clark (2015) learn verb speciﬁc ten-
sors by setting up a regression task where the learned tensor
for a verb is expected to yield a representation for the sen-
tential contexts where the verb is found. Huang et al. (2016)
use tensor based autoencoders over AMR representations of
events in order to induce event level (rather than scenerio
level), ACE7 style templates for use in event extraction. Sim-
ilarly, Huang et al. (2017) use tensor compositions to build
representations that facilitate zero shot relation extraction.
Related to our hard similarity task, Tilk et al. (2016) use
(factorized) tensor based methods to model the thematic ﬁt
between event arguments.

Schema/script learning Unsupervised learning of script
knowledge can be traced back to (Chambers and Jurafsky
2008), which introduced a count based technique for induc-
ing narrative chains. Chambers and Jurafsky (2009) extends
this idea to creating full on narrative schemas by merging
together narrative chains with argument overlap. Other un-
supervised induction approaches include a relation n-gram
based method (Balasubramanian et al. 2013), and generative
latent variable models (Nguyen et al. 2015; Chambers 2013;
Cheung, Poon, and Vanderwende 2013). All of these mod-
els worked on discrete representations for capturing co-
occurrence statistics. In this work, we show that higher qual-
ity scripts can be produced using continuous representations
instead.

7www.itl.nist.gov/iad/mig/tests/ace/

Conclusions
Understanding events requires effective representations that
contain both information that is speciﬁc to the event and in-
formation that relates to the underlying context in which the
event occurs. We propose tensor-based composition models
which are able to capture the distinct event contexts in which
a predicate gets used. This improved modeling of these event
contexts allows the resulting continuous representations to
be more effective in multiple event related tasks. Last, we
also show that the continuous representations yield a simple
schema generation method which produces schemas supe-
rior to a prior count based schema generation method.

Acknowledgements
This work is supported in part by the National Science Foun-
dation under Grant IIS-1617969.

References
[Balasubramanian et al. 2013] Balasubramanian, N.; Soder-
land, S.; Mausam, O. E.; and Etzioni, O. 2013. Generating
coherent event schemas at scale. In EMNLP, 1721–1731.
[Chambers and Jurafsky 2008] Chambers, N., and Jurafsky,
D. 2008. Unsupervised learning of narrative event chains.
In ACL, 789–797.
[Chambers and Jurafsky 2009] Chambers, N., and Jurafsky,
D. 2009. Unsupervised learning of narrative schemas and
their participants. In ACL, 602–610.
[Chambers 2013] Chambers, N. 2013. Event schema induc-
In EMNLP,
tion with a probabilistic entity-driven model.
1797–1807.
[Chambers 2017] Chambers, N. 2017. Behind the scenes
In Proceedings of the
of an evolving event cloze test.
2nd Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics, 41–45.
[Cheung, Poon, and Vanderwende 2013] Cheung, J. C. K.;
Poon, H.; and Vanderwende, L. 2013. Probabilistic frame
induction. arXiv preprint arXiv:1302.4813.
[Duchi, Hazan, and Singer 2011] Duchi, J.; Hazan, E.; and
Singer, Y. 2011. Adaptive subgradient methods for online
learning and stochastic optimization. Journal of Machine
Learning Research 2121–2159.
[Fried, Polajnar, and Clark 2015] Fried, D.; Polajnar, T.; and
Clark, S. 2015. Low-rank tensors for verbs in compositional
distributional semantics. In ACL, 731–736.
[Granroth-Wilding and Clark 2016] Granroth-Wilding, M.,
and Clark, S. 2016. What happens next? event prediction us-
ing a compositional neural network model. In AAAI, 2727–
2733.
[Grefenstette et al. 2013] Grefenstette, E.; Dinu, G.; Zhang,
Y.-Z.; Sadrzadeh, M.; and Baroni, M. 2013. Multi-step re-
gression learning for compositional distributional semantics.
In IWCS.
[Hu et al. 2017] Hu, L.; Li, J.; Nie, L.; Li, X.-L.; and Shao,
C. 2017. What happens next? future subevent prediction
using contextual hierarchical lstm. In AAAI, 3450–3456.

D.,

D.,

[Huang et al. 2016] Huang, L.; Cassidy, T.; Feng, X.; Ji, H.;
Voss, C. R.; Han, J.; and Sil, A. 2016. Liberal event extrac-
tion and event schema induction. In ACL.
[Huang et al. 2017] Huang, L.; Ji, H.; Cho, K.; and Voss,
C. R. 2017. Zero-shot transfer learning for event extrac-
tion. arXiv preprint arXiv:1707.01066.
and
[Kartsaklis and Sadrzadeh 2014a] Kartsaklis,
Sadrzadeh, M.
2014a. A study of entanglement in a
categorical framework of natural language. In Proceedings
of the 11th workshop on Quantum Physics and Logic, QPL,
249–261.
and
[Kartsaklis and Sadrzadeh 2014b] Kartsaklis,
Sadrzadeh, M.
2014b. A study of entanglement in a
categorical framework of natural language. arXiv preprint
arXiv:1405.2874.
J.-K.;
[Kim, de Marneffe, and Fosler-Lussier 2015] Kim,
de Marneffe, M.-C.; and Fosler-Lussier, E. 2015. Neural
word embeddings with multiplicative feature interactions
In VS@ HLT-NAACL,
for tensor-based compositions.
143–150.
[Le and Mikolov 2014] Le, Q. V., and Mikolov, T. 2014. Dis-
tributed representations of sentences and documents. CoRR
abs/1405.4053.
[Mausam et al. 2012] Mausam; Schmitz, M.; Bart, R.;
Soderland, S.; and Etzioni, O. 2012. Open language learning
for information extraction. In EMNLP-CoNLL, 523–534.
D.;
[Milajevs et al. 2014] Milajevs,
Sadrzadeh, M.; and Purver, M.
Evaluating
neural word representations in tensor-based compositional
settings. CoRR abs/1408.6179.
[Modi and Titov 2013] Modi, A., and Titov, I. 2013. Learn-
ing semantic script knowledge with event embeddings.
CoRR abs/1312.5198.
[Modi 2016] Modi, A. 2016. Event embeddings for seman-
In Proceedings of the Conference on
tic script modeling.
Computational Natural Language Learning (CoNLL).
[Mooney and DeJong 1985] Mooney, R., and DeJong, G.
1985. Learning schemata for natural language processing.
In Ninth International Joint Conference on Artiﬁcial Intelli-
gence (IJCAI), 681–687.
[Nguyen et al. 2015] Nguyen, K.-H.; Tannier, X.; Ferret, O.;
and Besanc¸on, R. 2015. Generative event schema induction
with entity disambiguation. In ACL, 188–197.
[Pennington, Socher, and Manning 2014] Pennington,
J.;
Socher, R.; and Manning, C. 2014. Glove: Global vectors
for word representation. In EMNLP, 1532–1543.
[Pichotta and Mooney 2016] Pichotta, K., and Mooney, R. J.
2016. Learning statistical scripts with LSTM recurrent neu-
ral networks. In AAAI.
[Polajnar, Rimell, and Clark 2015] Polajnar, T.; Rimell, L.;
and Clark, S. 2015. An exploration of discourse-based
sentence spaces for compositional distributional semantics.
In Workshop on Linking Models of Lexical, Sentential and
Discourse-level Semantics (LSDSem), 1.
[Schank and Abelson 1977] Schank, R. C., and Abelson,
R. P. 1977. Scripts, Plans, Goals and Understanding: an

Kartsaklis,

2014.

D.;

2011.

Inquiry into Human Knowledge Structures. Hillsdale, NJ:
L. Erlbaum.
J.; Huang,
[Socher et al. 2011] Socher, R.; Pennington,
E. H.; Ng, A. Y.; and Manning, C. D.
Semi-
supervised recursive autoencoders for predicting sentiment
distributions. In EMNLP, 151–161.
[Socher et al. 2013a] Socher, R.; Chen, D.; Manning, C. D.;
and Ng, A. 2013a. Reasoning with neural tensor networks
for knowledge base completion. In Advances in neural in-
formation processing systems, 926–934.
[Socher et al. 2013b] Socher, R.; Perelygin, A.; Wu, J.;
Chuang, J.; Manning, C. D.; Ng, A.; and Potts, C. 2013b.
Recursive deep models for semantic compositionality over a
sentiment treebank. In EMNLP, 1631–1642.
[Tilk et al. 2016] Tilk, O.; Demberg, V.; Sayeed, A.; Klakow,
D.; and Thater, S. 2016. Event participant modelling with
neural networks. In EMNLP, 171–182.

