7
1
0
2
 
p
e
S
 
7
2
 
 
]
L
D
.
s
c
[
 
 
2
v
1
1
3
5
0
.
5
0
7
1
:
v
i
X
r
a

Using Titles vs. Full-text as Source for
Automated Semantic Document Annotation

Lukas Galke
ZBW—Leibniz Information Centre for
Economics, Kiel
l.galke@zbw.eu

Florian Mai
Kiel University
stu96542@mail.uni-kiel.de

Alan Schelten
Kiel University
stu111405@informatik.uni-kiel.de

Dennis Brunsch
Kiel University
deb@informatik.uni-kiel.de

Ansgar Scherp
ZBW—Leibniz Information Centre for
Economics, Kiel
a.scherp@zbw.eu

ABSTRACT
A significant part of the largest Knowledge Graph today, the Linked
Open Data cloud, consists of metadata about documents such as
publications, news reports, and other media articles. While the
widespread access to the document metadata is a tremendous ad-
vancement, it is yet not so easy to assign semantic annotations and
organize the documents along semantic concepts. Providing seman-
tic annotations like concepts in SKOS thesauri is a classical research
topic, but typically it is conducted on the full-text of the documents.
For the first time, we offer a systematic comparison of classification
approaches to investigate how far semantic annotations can be
conducted using just the metadata of the documents such as titles
published as labels on the Linked Open Data cloud. We compare the
classifications obtained from analyzing the documents’ titles with
semantic annotations obtained from analyzing the full-text. Apart
from the prominent text classification baselines kNN and SVM, we
also compare recent techniques of Learning to Rank and neural
networks and revisit the traditional methods logistic regression,
Rocchio, and Naive Bayes. The results show that across three of
our four datasets, the performance of the classifications using only
titles reaches over 90% of the quality compared to the classification
performance when using the full-text. Thus, conducting document
classification by just using the titles is a reasonable approach for
automated semantic annotation and opens up new possibilities for
enriching Knowledge Graphs.

CCS CONCEPTS
• Machine Learning → Document analysis; Text processing;

KEYWORDS
Multi-label classification; document analysis

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States
© 2017 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

ACM Reference Format:
Lukas Galke, Florian Mai, Alan Schelten, Dennis Brunsch, and Ansgar
Scherp. 2017. Using Titles vs. Full-text as Source for Automated Semantic
Document Annotation. In Proceedings of Knowledge Capture, Austin, Texas,
United States, December 4th-6th, 2017 (K-CAP 2017), 9 pages.
https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
A significant amount of today’s largest Knowledge Graph on the
web, the so-called Linked Open Data cloud1, consists of meta-
data about documents such as scientific papers and news articles.
Domain-specific SKOS vocabularies are used to describe the se-
mantics of these documents, SKOS (short for: Simple Knowledge
Organization System)2 is an established W3C standard for model-
ing thesauri in domains such as economics, politics, social sciences,
news, etc. Those thesauri are often of high quality since they are
manually crafted as well as maintained by domain experts, and
made freely available on the web3.

The challenge is to successfully use those SKOS thesauri to se-
mantically annotate the documents. However, the full-text PDF of
the documents may not be available (linked from the documents’
metadata) or may not be legally accessible due to licensing or copy-
right issues (even though there is a link to the PDF). Thus, it is
highly desirable to conduct a semantic annotation of the docu-
ments with the SKOS thesauri by just using the already published
documents’ metadata like the title, year, authors, etc. In contrast
to the full-text of documents, the metadata is directly available on
the Linked Open Data cloud, accessible in RDF format, and can
be processed with no legal barriers for semantic annotation. Con-
ducting semantic annotations by using only the title (or further
metadata of the documents) is challenging, since the title is short
and thus carries only little information compared to the full-text.
The process of semantic annotation is a multi-label classification
task where not only one label is to be chosen as annotation but a
set of labels since many concepts of the SKOS thesauri are needed
to appropriately describe the semantics of the documents.

We tackle the challenge of conducting a semantic multi-label
classification into SKOS thesauri by using only the title metadata

1See latest version from 02/2017: http://lod-cloud.net/versions/2017-02-20/lod.svg
2SKOS: https://www.w3.org/2004/02/skos/
3An overview of current SKOS vocabularies is maintained by the W3C: https://www.
w3.org/2001/sw/wiki/SKOS/Datasets

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

of the documents. To this end, we run an extensive series of ex-
periments to compare established methods and recent methods
from machine learning for document classification. The goal is to
decide whether it is possible to reach a comparable classification
performance when using only the title of the documents. It is note-
worthy that all the compared approaches operate on the underlying
machine learning level which makes a comparison with prevalent
end-to-end ontology tagging systems such as SOLR ontology tag-
ger4 and MAUI5 difficult. We instead show that despite not using
the hierarchical properties of the thesaurus, the presented methods
outperform the best-performing methods that do make use of the hi-
erarchy such as the ones of our own prior work [8]. Apart from the
well-known multi-label classification baseline k-nearest neighbors
(kNN) and support vector machines (SVM), we revisit traditional
text classification methods such as Naive Bayes, Rocchio, and logis-
tic regression (LR). We also include the prominent Learning to Rank
(L2R) approach, as well as a modern variant of neural networks
motivated by the success of the Deep Learning field. Please note,
the present work focuses solely on using the titles of documents,
since they are the richest metadata attribute and contain keywords
relevant in the domain. In the future, we may also incorporate other
metadata like authors’ names and publication year.

The results of our experiments show that it is possible to reach
a competitive performance for semantic annotation using solely
the title of documents, compared to exploiting the full-text of the
documents. Using a sample-averaged F1 measure as evaluation
metric, we compare the automated predictions of semantic anno-
tations from different methods with those annotations provided
by domain experts. We run our experiments over four large-scale
documents corpora of different origin and domain with a total of
over 300, 000 documents. All datasets offer professional labels, i. e.,
manual annotations from domain experts. Two datasets are from
professional scientific libraries in economics and politics while the
other two datasets are the well-known news corpora from New
York Times and Reuters. In the past, algorithms of the lazy learner
family such as kNN used to dominate multi-label classification
tasks on such datasets with a high amount of classes [8, 25]. How-
ever, we show that eager learners such as logistic regression and
feed-forward neural networks outperform lazy learners. Most eager
learners have the benefit of O(Nparameters) time complexity to pre-
dict a label set for an unseen document, which is important when
applying an automated semantic annotation process for on-the-fly
enrichment of metadata on the Linked Open Data cloud. In con-
trast, lazy learners as well as Learning to Rank need to store and
traverse O(Ntraining examples · Nfeatures) space to predict the labels
for a single new document at test time. Finally, focusing on the
metadata also allows direct processing of data in published RDF
format (e. g. the rdfs:Literal and rdfs:label information) without
accessing the full-text of the documents at all. Overall, we conclude
that eager learning algorithms are well-suited for automated se-
mantic annotation of RDF resources in Linked Data. Summarized,
the contributions of this work are:

4https://www.opensemanticsearch.org/solr-ontology-tagger
5https://github.com/zelandiya/maui-standalone

(1) To the best of our knowledge, the first large-scale systematic
comparison of multi-label classifiers applied to either the
full-text or only the titles of documents.

(2) Results that show that eager learners such as neural net-
works and linear models outperform lazy learners even when
a high amount of possible labels is considered.

(3) We offer evidence that using only the title for high-dimensional
multi-label classification is a reasonable choice for semantic
annotation of resources where only metadata is available,
such as documents modeled in RDF on the Linked Open Data
cloud.

The remainder of the paper is organized as follows: Below, we
present an overview of the state of the art in multi-label classifica-
tion of text and related fields. In Section 3, we describe our experi-
mental apparatus. We depict different methods for conversion of
unstructured text to feature vectors in Section 3.1. The classifiers
and their respective configurations are elaborated in detail in Sec-
tion 3.2. We describe the four datasets used for our experiments as
well as the evaluation metrics in Section 4. The results are presented
in Section 5 and discussed in Section 6, before we conclude.

2 RELATED WORK
Most earlier work on the multi-label classification task with many
possible output labels relies on nearest neighbor searches (kNN).
Using the union of labels as well as separately voting for each indi-
vidual label among neighbors is a common choice in these nearest
neighbor-based classifiers [8, 25, 28, 29, 33]. Concept extraction [7]
refers to explicitly finding known concept-specific phrases in the
documents. The extracted concepts are re-weighted by inverse doc-
ument frequency, as in the well-known TF-IDF [23] retrieval model.
In our prior work [8], we have conducted an exhaustive comparison
of concept extraction and feature re-weighting methods using kNN
as a multi-label classifier.

Recent progress in the field of topic modeling with latent Dirich-
let allocation [3] suggest using labeled variants [1, 20, 24] for multi-
label classification. While these techniques outperform SVMs, we
found from pre-experiments that they do not scale well regarding
the number of considered labels. In the closely related field of (label)
recommendation, Tuarob et al. [30] as well applied topic models to
obtain a ranking of the labels.

In the biomedical domain, the most popular approach is Learning
to Rank [11, 19]. The algorithm learns a ranking of the MeSH terms.
In multi-label classification, however, a hard decision is necessary
to enable fully automated classification. Thus, Learning to Rank
is typically adjusted for multi-labeling by imposing a hard cut-off.
There are also approaches that use Learning to Rank along with
dynamic cut-off techniques [16]. The most prominent approach
to adapt classifiers for multi-labeling is binary relevance [26, 28].
Other options include the chaining [21] as well as stacking [9, 27] of
classifiers. While the former is not well-suited for high amounts of
considered labels, we also include a variation of the latter idea in our
comparison. Bi and Kwok [2] approach the multi-label classification
task from a different direction. They strive for more efficient multi-
label classification and proper treatment of label correlation by
transforming the label indicator matrix.

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

3.1 Vectorization

Counting terms and extracting concepts. In the first step of our
text processing pipeline, the raw text needs to be converted into a
vector representation that can be supplied as input to the classifiers.
As features, we use the counts of term occurrences in the text (TF) as
well as the number of times a concept provided by a domain specific
thesaurus can be extracted from the text (CF). A concept is a set
of concept-specific phrases. In case of SKOS format, each concept
has one preferred phrase (skos:prefLabel) and optionally a set
of alternative phrases (skos:altLabel). We extract these concept-
specific phrases from the text using a finite state machine. When
there is more than one possible match in a sequence of words,
we favor the longest phrase. We assume that longer phrases carry
more specificity. Hence, the occurrences of a concept (set of concept-
specific phrases) are counted in the same way as term occurrences.
The effect of concept extraction is to ensure that domain-specific
synonyms encoded in the thesauri are mapped to the same concept.
The concepts are also directly associated to the respective class
labels. Hence it is left to the learning algorithm, to decide about the
concrete label assignment, given the extracted terms or concepts.

Discounting frequent terms and concepts. Inverse document fre-
quency (IDF) is a re-weighting scheme introduced in the 1970s
by Salton and Buckley [23] which has proven to work well for
information retrieval [15]. IDF discounts features that occur in
many documents of the corpus, and thus do not hold discrimi-
native information. This can be both term counts and counts of
extracted concepts. Let D be the set of documents, then the IDF
re-weighted score for some term or concept w in a document
d ∈ D is defined as: TF-IDF(w, d) = TF(w, d) · IDF(w, D), where
IDF(t, D) = 1 + log
| {d ∈D:w ∈d } |+1 . To avoid division by zero, both
the nominator and the denominator are incremented by one, as if
there was one artificial document containing all possible terms and
concepts. This can happen because the set of concepts given by the
thesaurus but the data itself might not cover all of these possible
concepts. The fraction as a whole is as well incremented by one, to
ensure that words that appear in all documents are not completely
discarded.

|D |+1

Okapi BM25 is an extension of IDF by Robertson et al. [22] that
slightly modifies the IDF term to include the average length of
a document. It offers two hyper-parameters for interpolating the
difference between the current document length and the corpus-
wide mean document length. The literature suggests to use BM25
especially for fields with short texts using hyper-parameters k = 1.6
and b = 0.75 [15]. Hence, variants of our text vectorization methods
using BM25 instead of TF-IDF re-weighting are included in our
comparison.

Combining terms and concepts. After re-weighting by either in-
verse document frequency or BM25, the resulting vectors are nor-
malized to unit length (with respect to the L2-norm). This leads
to desirable invariance to document length. Besides using only ei-
ther the term frequency (TF) or the concept frequency (CF), we
concatenate the respective feature vectors (CTF).

Figure 1: Illustration of the configurable text-processing
pipeline used for our experiments. The pipeline starts with
the vectorization of the input text, followed by feature re-
weighting, classification and evaluation. The emphasized
edges and nodes show the most successful strategy applied
to title data.

Zhang and Zhou [32] have proposed to train a separate neural
network for each label along with a dedicated loss function. How-
ever, this approach does not scale to high amounts of possible out-
put labels. One year later, the same authors suggest a lazy-learning
multi-label variant of kNN [33], which is considered in our com-
parison. Nam et al. [18] adapt fully connected feed-forward neural
networks for multi-label classification by learning a threshold that
determines whether a label should be assigned or not.

While the related fields of label recommendation and single-label
text classification are broad, only few works consider multi-label
classification with a large amount of possible output labels. From
these, the dominant approaches are based on nearest neighbors
searches, i. e. lazy learners and Learning to Rank. The considered
works all use either short texts or full-text as input data but do not
compare these two different input variants. Thus, we offer the first
systematic comparison of text vectorization methods and lazy as
well as eager learning algorithms for the multi-label classification
problem with many possible labels applied to either title data or
full-text data.

3 SEMANTIC ANNOTATION APPARATUS
We present an end-to-end apparatus for semantic annotation of un-
structured text. Figure 1 shows our generic text processing pipeline
that we used for the experiments. Each path through the graph
resembles a possible configuration. In the following Section 3.1, we
describe the conversion from unstructured text to a vector repre-
sentation. In Section 3.2, we elaborate in detail on the classification
methods that we have compared.

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

3.2 Classification
In the second step of the pipeline, a classifier is consulted to predict
the desired set of labels based on the vector representation of the
input text (compare Figure 1). Given training data, the classifiers
have the opportunity to learn how to associate the features with
the respective class labels. Lazy learners merely copy their input at
training time, shifting the main computational effort to test time
(described in Section 3.2.1). On the other hand, eager learners use the
training data for adapting their parameters according to the correct
classification result. We describe those in detail in Section 3.2.2.
Some of the learning algorithms are only designed for single-label
classification (SVM, logistic regression, Naive Bayes), others do
only return a ranked list of possible labels (kNN, Rocchio, Learning
to Rank). We describe the multi-label adaption strategies for both
cases in Section 3.2.3.

3.2.1 Lazy Learners.

Nearest Neighbor Classifier. The most typical lazy-learning al-
gorithm is k-nearest neighbors (kNN). All training examples are
stored along with their class annotations. At test time, the k nearest
neighbors with respect to some distance metric (we chose cosine)
vote on class membership. For multi-label problems, variants are
proposed that assign the union of label annotations in the neigh-
borhood as well as conducting a separate vote for each label [25].
By auto-optimizing the k hyperparameter for these methods, we
found k = 1 to be the optimal value in our setting (as in our prior
work [8]). In this case all multi-label variants coincide to copy the
label set from the nearest neighbor of the training set.

Rocchio Classifier. The Rocchio classifier, or nearest-centroid clas-
sifier resembles a light-weight modification of the nearest neighbor
classifier. During training, only the centroid of each class is stored.
The classification result is then determined by the nearest of these
centroids at test time. In multi-label classification however, the
classifier is only capable to return a ranked list of labels based on
the distance to the respective centroids. As in the nearest neighbor
classifier above, we use cosine distance as criterion.

3.2.2 Eager Learners.

Naive Bayes. The Naive Bayes classifier is one of the most tradi-
tional classifiers for text classification tasks. We consider two Naive
Bayes variants, multinomial and Bernoulli. In the multinomial vari-
ant, the features of term or concept frequencies are assumed to
be generated by a multinomial distribution. The Bernoulli variant
only takes the occurrences of (binary) features into account, which
leads to penalizing the non-occurrences of features. The Bernoulli
variant is an intuitive approach for short text such as titles since du-
plicate words are rather infrequent, while the multinomial variant
is more intuitive for full-texts. For both variants, we apply Lidstone-
Smoothing with α = 10−5. The main drawback of Naive Bayes is the
assumption of statistical independence among the input features.

Linear Models. Generalized linear models [12] use the training
examples to learn a decision boundary. This decision boundary is
a separating hyperplane specified by a linear combination of the
input features w·x−b = 0. The parameters w and b are optimized to
minimize the regularized training error: 1
i=1 J (yi , y(xi))+αR(w)
n

(cid:205)n

where y(x) = w · x − b is the model’s output and αR(w) is a
regularization term on the model’s weights such as the L2-norm.
For the loss function J , we consider two variants: logistic loss
Jlogistic(y, p) = ln(1 + exp(−p · y)) as in logistic regression (LR) and
hinge loss Jhinge(y, p) = max(0, 1 − p · y) as in linear support vector
machines (SVM). At test time, the binary decision is determined
by the side of the hyperplane, on which the document in question
falls. We employ stochastic gradient descent as an optimizer for
these generalized linear models, which is known to yield good gen-
eralization on large-scale datasets [4, 6, 34]. We apply the learning
rate schedule η(t ) =
α ·(t0+t ) , where t0 is chosen by a heuristic of
Léon Bottou [5]. We average the weights w over time, which allows
higher learning rates and leads to faster convergence [5]. In this
setting, we empirically determined α = 10−7 to be a good hyper-
parameter value for all datasets (in the range 10−1, 10−2, . . . , 10−9).
This leads to comparatively high initial learning rates and low
regularization.

1

Learning to Rank. Learning to Rank (L2R) refers to a set of tech-
niques that can be used to learn the ranking of a list from training
data. As suggested by Huang et al. [11], we restrict the supplied
list to those labels that occur in the k neighboring documents (we
empirically determined k = 45). Those labels, that are also assigned
to current document in question should be ranked higher than the
others. To learn the ranking, we use the neighborhood, overlap,
and translation-probability features proposed by Huang et al. [11].
Hence at test time, the union of labels among the k nearest neigh-
bors are ranked via the learned parameters. However, the algorithm
itself does not offer the possibility of hard decisions on label as-
signments. Thus, we chose to cut off the ranked list at the position
of the average number of assigned labels in the training data. In
our experiments, we made use of the RankLib library6 and found
LambdaMART to outperform other list-wise L2R algorithms.

Multi-Layer Perceptron. As representative for the neural network
family, we employ a fully connected feed-forward neural network
with one hidden layer, a so-called multi-layer perceptron (MLP).
Compared to the linear models, the MLP has an additional interme-
diate hidden layer h with a nonlinear activation function f . Thus, we
first compute h = f (cid:0)W 1x + b1(cid:1), and then y = W 2h + b2. The out-
put y is then scaled to the interval (0, 1) by the sigmoid function σ
as in logistic regression and compared to the gold-standard by cross-
entropy. The gradient for updating the parameters is computed by
the chain-rule, also known as back-propagation. The optimization
itself is carried out by Adam [13] with the default hyper-parameters
and α = 0.01. We chose a hidden layer size of 1000 and use recti-
fied linear units [17] as activation function f (except for the NYT
dataset where we use tanh due to numerical difficulties). For reg-
ularization, we apply dropout [10] with a probability of 0.5. The
intermediate hidden layer can be regarded as a fine-tuned task-
specific word embedding, which enables the classifier as a whole
to learn nonlinear relationships among the features. To convert the
odds σ (y) into a binary decision, several approaches suggest to use
a threshold learning technique [18, 27]. In our initial experiments,
however, we experienced that the most recent threshold learning

6https://people.cs.umass.edu/~vdang/ranklib.html

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

technique yields rather unsatisfactory results in terms of the F1
measure. Instead, we use a fixed threshold of 0.2.

3.2.3 Multi-Label Adaption.

Binary Relevance. Linear models as well as Naive Bayes are re-
stricted to mutually exclusive class assignments by design. Only one
class out of all possible ones is selected. In multi-label classification,
however, multiple labels need to be assigned. The most common
approach to adapt such classifiers is to train one classifier per class,
which distinguishes its respective class from all others, i. e. decides
for binary relevance [28] (also known as one-vs-all or one-vs-rest).
The training documents are supplied to all label-specific classifiers.
Depending on the prevalence of the label that corresponds to the
respective classifier, the example is either treated as positive or as
negative. At test time, the classification result is composed of the
binary decisions for each label.

Classifier Stacking. Multi-value classification stacking [9] refers
to a technique where the final classification result is composed by
two classifiers. The so-called base-classifier returns a ranked list
of label predictions with confidence scores. Then for each class, a
meta-classifier takes these confidence scores along with the posi-
tion in the ranked list as input and outputs a binary decision for
the specific class. This technique enables transforming any clas-
sifier that returns confidence scores into a multi-label classifier.
As meta-classifiers, we use decision trees with Gini impurity as
splitting criterion. To limit complexity, we generate training data
only for those meta-classifiers, whose class is among the top 30 of
the base-classifier’s ranking [9]. We use this decision tree module
(abbreviated with the suffix *DT) as an alternative to hard cut-offs
in Learning to Rank (see Section 2, and the fixed thresholds in
multi-layer perceptrons (see Section 3.2.2). For comparison with
the original work of Heß et al. [9], we also consider Rocchio as
a base-classifier. We furthermore experiment with applying the
decision tree module on top of binary-relevance logistic regression.

4 EXPERIMENTAL SETUP
We describe the datasets used for our experiments in Section 4.1, be-
fore we outline the experimental procedure in Section 4.2. We then
depict the conducted preprocessing and introduce our evaluation
metric of a sample-based F1 measure in Section 4.3. We choose a
sample-based evaluation measure since it will assess the classifica-
tion quality of each document separately. This reflects the workflow
of manual document classification as it is done by domain experts
in scientific digital libraries as well as journalists.

4.1 Datasets
We have conducted our experiments on four datasets of English doc-
uments: two datasets are obtained from scientific digital libraries
in the domains of economics and political sciences along with two
news datasets from Reuters and New York Times. Table 1 sum-
marizes the basic statistics of the datasets. For each document
in the datasets, there are manually created gold-standard anno-
tations provided by respective domain experts, who work as pro-
fessional subject indexers in the corresponding organizations. In
addition, each dataset provides a domain-specific thesaurus that
serves as controlled vocabulary of the gold-standard. Its concepts

are used as target labels in our multi-label document classifica-
tion task. The thesaurus also offers sets of concept-specific phrases
(i. e. skos:prefLabel and skos:altLabel in case of SKOS format)
that are used for concept extraction from the documents’ full-text
and titles [7]. The economics dataset consists of 62, 924 documents
and is provided by ZBW — Leibniz Information Centre for Eco-
nomics. The annotations are taken from the Standard Thesaurus
Wirtschaft (STW) version 97, which is a controlled domain-specific
thesaurus for economics and business studies maintained by ZBW.
The thesaurus contains 6, 217 concepts with 12, 707 concept-specific
phrases. From these concepts, 4, 682 are used in the corpus and thus
considered in the multi-label classification task. Each document
is annotated by domain experts with on average 5.26 labels (SD:
1.84). The political sciences dataset has 28, 324 documents. Similar
to the economics dataset, we made a legal agreement for the po-
litical sciences dataset with the German Information Network for
International Relations and Area Studies8 that is providing the doc-
uments. The labels are taken from the thesaurus for International
Relations and Area Studies9, which contains 9, 255 concepts (and
an equivalent number of concept-specific phrases, i. e., there are
no alternative phrases). From these concepts, 7, 234 are used in the
corpus. Each document in the dataset has on average 8.07 labels
(SD: 3.03). The Reuters RCV1-v2 dataset contains 805, 414 articles.
We chose articles where both the titles and the full-text of the doc-
uments are available. From this set of documents, we randomly
selected 100, 000 articles to match the scale of the scientific corpora.
In our experiments, we employ the thesaurus re-engineered from
the Reuters dataset by Lewis et al. [14]. The thesaurus contains 117
concepts and a total of 173 concept-specific phrases. From these
concepts, 101 are used in the corpus. Each document was annotated
with on average 3.21 (SD: 1.41) labels. The New York Times Anno-
tated Corpus Dataset (NYT) contains 1, 846, 656 articles. Each article
has two sets of annotations, consisting of annotations created by a
professional indexing service and annotations which were added
by the authors using a semi-automatic system. We used the anno-
tations provided by the indexing service because it is reasonable to
expect that they are more consistent and of higher quality (cf. [9]).
As for the Reuters dataset, we chose a random subset of 100, 000
documents containing both full-text and titles. The number of con-
cepts in the NYT dataset is 25, 226. From these concepts, 6, 809 are
used in our random sample. Each document is annotated with on
average 2.53 (SD 1.78) labels. Like the political sciences dataset,
each concept consists of only a single specific phrase.

4.2 Procedure

Vectorization methods. We compare the different vectorization of
the input text as shown in Figure 1 and described in Section 3.1. One
vectorization is based on term frequencies (TF-IDF) and the other is
based on concept frequencies (CF-IDF). We experiment with the re-
weighting method BM25 using term frequencies and BM25C using
concept frequencies. The concatenation of both terms and concepts
is denoted by CTF-IDF and BM25CT, respectively. As classifier, we
employ kNN with cosine distance. The performance of kNN relies

7http://zbw.eu/stw/versions/9.0/about.en.html
8http://www.fiv-iblk.de/eindex.htm
9http://www.fiv-iblk.de/information/information_thesaurus.htm

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

Table 1: Statistics for the datasets: |D| documents, |C | con-
cepts in the thesaurus, |L| labels assigned in the dataset, d/l
mean documents per label, l/d mean labels per documents
along with median l/d50, V vocabulary size, w/d mean terms
per document, and c/d mean concepts per document

Table 2: Sample-averaged F-scores of the text vectorization
methods with using kNN as common classifier

Input

Vectoriz. Econ. Polit. RCV1 NYT

Econ.

Polit.

RCV1

NYT

62, 924
6, 217
4, 682
70.8 (322.9)
5.26 (1.84)
4
19, 579
7.07 (3.03)
3.33 (1.83)
1, 340, 628
6, 750 (6, 854)
247 (121)

27, 576
9, 255
7, 234
32.6 (116.8)
8.57 (3.03)
5
15, 419
8.13 (5.29)
3.69 (2.36)
1, 165, 919
11, 255 (15, 565)
346 (189)

100, 000
117
101
3174.9 (6371.3)
3.21 (1.41)
14
32, 859
12.21 (2.39)
0.57 (1.02)
155, 339
136 (114)
6.80 (8.60)

100, 000
25, 226
6, 809
37.1 (213.0)
2.53 (1.78)
2
40, 736
4.46 (2.25)
0.70 (0.83)
270, 710
310 (294)
37.0 (38.2)

|D|
|C |
|L|
d/l
l/d
l/d50
Vtitle
w/dtitle
c/dtitle
Vfull
w/dfull
c/dfull

on the assumption that documents are well represented by the
features and that similar documents have similar labels. Therefore,
its classification performance is a good indicator for the quality of
the features.

Classification methods. After determining the best-performing
vectorization method, we compare lazy learning as well as eager
learning classifiers of Sections 3.2.1 and 3.2.2 combined with the
multi-label adaption methods of Section 3.2.3, where appropriate.
We leverage the linear models (SVMs and logistic regression) to
perform multi-label classification with binary relevance, i. e. train-
ing one classifier per label. To adapt the Learning to Rank approach
and the multi-layer perceptron to multi-labeling, we consider us-
ing thresholds as well as stacking with decision trees. We also
experiment with stacking the decision tree module on top of binary-
relevance logistic regression. Careful tuning of the hyperparameters
is crucial to the success of machine learning algorithms, especially
in those multi-label classification tasks, where only few training
examples are available per class. Striving to identify well-suited
hyperparameters that are invariant to the concrete dataset, we
keep all hyperparameters (as denoted in Section 3) fixed across all
experiments and datasets.

4.3 Preprocessing and Evaluation

Preprocessing. Prior to counting terms and extracting concepts,
both the input text and the concept-specific phrases of the thesauri
are subject to preprocessing steps. This includes discarding all char-
acters except for sequences of alphabetic characters with a length
of at least two. Words connected with a hyphen are joined (i. e., the
hyphen is removed). Detected words were lower-cased and lemma-
tized based on the morphological processing of WordNet [31].

Evaluation. For evaluation, we separate each dataset into 90%
training documents and 10% test documents and perform a 10-fold
cross-validation, such that each document occurs exactly once in
the test set. Hence for each test document, we compare the predicted
labels with the label set of the gold standard and evaluate the F1
measure. The F1 measure is the harmonic mean between precision,

Full-text CTF-IDF

0.411

0.272

0.761

0.406

Full-text BM25CT

0.377

0.231

0.742

0.379

0.406

0.370

0.402

0.296

0.351

0.349

0.303

0.304

0.269

0.758

0.230

0.740

0.266

0.451

0.161

0.423

0.201

0.709

0.196

0.687

0.183

0.275

0.172

0.193

0.394

0.370

0.367

0.236

0.238

0.230

0.105

0.073

Full-text TF-IDF

Full-text BM25

Full-text CF-IDF

Full-text BM25C

TF-IDF

BM25

CF-IDF

BM25C

Titles

Titles

Titles

Titles

Titles

Titles

CTF-IDF

0.368

0.212

0.717

0.242

BM25CT

0.364

0.208

0.693

0.239

i. e. true positives w.r.t false positives, and recall, i. e. true positives
w.r.t false negatives. When no label is predicted, the precision is set
to zero. The F-scores are then averaged over the test documents. We
chose this sample-based F1 measure over class-averaged or global
variants because it is closest to an assumed application, where each
individual document needs to be annotated as good as possible.
Please note, there is a possibility that all documents annotated
with a specific label fall only into one test set. Despite no training
data is available for these labels, we do not exclude those from
our evaluation metric. Finally, we report the mean sample-based
F-score over the ten folds of the cross-validation.

5 RESULTS
In this section, we describe the results of our experiments. Due to
the high amount of possible pipeline configurations, we applied a
step-by-step approach. For both the text vectorization step and the
classification step, we search for a local optimum solution to find
the best overall classification strategy.

Results for Vectorization Methods. Table 2 shows the results for
the text vectorization experiment. The term-based vectorization
method TF-IDF perform consistently better than the purely concept-
based vectorization CF-IDF methods on both the titles and the
full-text. The difference ranges from 0.003 on Economics to 0.307
F-score on Reuters. When combining the term vector with the con-
cept vector, the performance is at least as good as the other text
vectorization methods and in many cases yields better results. This
is more noticeable on titles than on full-texts. BM25 re-weighting
does not improve the results compared to TF-IDF neither in case of
the titles nor the full-text. Rather, we observe a decrease in perfor-
mance by up to 0.13. These experiment using a nearest neighbor
classifier indicates that CTF-IDF is the best-suited vectorization
method. Henceforth, we use CTF-IDF for comparing the perfor-
mance of the classifiers.

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

Results for Classifiers. The results of comparing the different clas-
sifiers are documented in Table 3. As shown in the table, Bernoulli
Bayes has a slight advantage over multinomial Bayes for titles. On
the other hand, the multinomial variant has a slight disadvantage on
full-texts. However, both methods consistently fall far behind kNN
on full-texts. In the case of working with titles, the Bayes classifiers
are able to keep up with kNN on two datasets. RocchioDT’s scores
are depending on the datasets and range from the lowest (Reuters)
to a score only slightly different from kNN (NYT, political sciences).
The generalized linear models SVM and logistic regression are close
to each other. The difference is no more than 0.04 for any dataset.
Considering Learning to Rank, we observe that the technique yields
consistently lower scores than the multi-layer perceptron. Over-
all, the eager learners SVM, LR, L2R and MLP outperform both
Naive Bayes and the lazy learners Rocchio, and kNN. Among all
classifiers, MLP dominates on all datasets apart from NYT on titles,
where LRDT achieves a .021 higher score. While the stacked deci-
sion tree module increases the F-scores of logistic regression on all
datasets with fewer than 100 documents per label (all but Reuters),
the impact of the stacking method is inconsistent for the Learning
to Rank and MLP approaches. It is noteworthy that there are cases
where a classifier performs better on the title data than the same
classifier applied on the full-text data. These are Bernoulli Bayes
on the Reuters dataset and RocchioDT on the economics dataset.
As a general rule, however, full-texts generate higher scores than
the titles. Comparing different classifiers across titles and full-text,
we can make the observation that some classifiers trained on titles
outperform others that were trained on the full-text. Apart from
the NYT corpus, the eager learners LR, LRDT and MLP on titles are
superior to kNN on full-texts. Finally, we compare the F-scores of
the best-performing multi-layer perceptron on titles with its scores
obtained on full-text. On the NYT dataset, 58% of the F-score is
retained when using only titles. On the political sciences and eco-
nomics datasets, the retained F-score is 83% and 91%, respectively.
On the Reuters dataset, the MLP using solely titles retains 95% of
the F-score that is obtained with full-text information available.

6 DISCUSSION
The results show that multi-label classification of text documents
can be reasonably conducted using only the titles of the documents.
Over all datasets, the multi-layer perceptron on titles retains 82%
of the F-score obtained on full-text. This gives an empirical justifi-
cation for the value of automated semantic document annotation
using metadata. From the first experiment, we find that combining
words with extracted concepts as features is preferable over one
of them alone. Concepts hold valuable domain-specific semantic
information. The term frequency on the other hand, holds implicit
information which is as well important for correct classification.
Eager learners are, by design, capable of learning which terms or
concepts need to be associated to the respective class. The results
show that also lazy learners benefit from this joint representation.
The second experiment shows that eager learners such as logis-
tic regression and MLP consistently outperform lazy learners for
multi-label classification. This result extends recent advancements
in multi-labeling [18, 26] towards document classification scenarios
with many possible output labels and only few examples per class.

Table 3: Sample-averaged F-scores for classification methods
with using the best vectorization method CTF-IDF

Input

Classifier

Econ. Polit. RCV1 NYT

Full-text

kNN (baseline)

Full-text Bayes (Bernoulli)

0.411

0.318

0.272

0.761

0.191

0.657

Full-text Bayes (Multinom.)

0.235

0.207

0.703

0.519

0.373

0.857

0.569

0.406

0.281

0.349

0.554

0.556

0.435

0.393

0.562

0.421

0.242

0.233

0.214

0.325

0.326

0.296

0.319

0.852

0.322

0.851

0.328

0.727

0.225

0.645

0.339

0.843

0.280

0.751

0.212

0.717

0.179

0.708

0.272

0.804

0.274

0.803

0.296

0.699

0.340

0.857

0.578

0.472

0.309

0.812

0.332

0.219

0.584

0.252

0.279

0.796

0.353

0.261

0.730

0.25

0.277

0.808

0.340

0.481

0.485

0.431

0.291

0.498

0.415

0.492

0.368

0.301

0.426

0.429

0.419

0.335

0.451

0.428

0.457

Full-text

SVM

Full-text

LR

Full-text

L2R

Full-text MLP

Full-text RocchioDT

Full-text

LRDT

Full-text

L2RDT

Full-text MLPDT

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

kNN

SVM

LR

L2R

MLP

RocchioDT

LRDT

L2RDT

MLPDT

Bayes (Bernoulli)

Bayes (Multinom.)

0.254

0.178

0.699

Inspecting the results for titles and full-text, the best-performing
classifiers still perform better on the full-text. This is not surprising
since the full-text holds considerably more information (including
the title). However, for all datasets apart from the NYT dataset,
the difference in F-score of the best-performing MLP is small. The
difficulties in classifying the documents in the NYT dataset can be
explained by a characteristic that the titles consist only of 4 words
on average. There may be a lower bound on the title length to
perform the classification task, since a short title limits the amount
of available information and thus prohibits discrimination. From
the other datasets, we can state that an average of 7 words per
title leads to at least 80% retained F-score. Thus, it would require
further investigation to understand the specific influence of the title
length on the classification performance. The complexity of a multi-
labeling problem depends on the number of available documents
per label, independent of whether the full-text or the titles are used.
Especially binary-relevance classifiers suffer from conservative la-
bel assignments (high precision, low recall), when many negative
examples and only few positive examples are presented during

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

training. While the results of the stacked decision tree module are
inconsistent for MLP and L2R, it does alleviate the conservative as-
signments problem of binary-relevance, when only few documents
per label are available.

In our experiments over four large-scale real-world corpora cov-
ering a broad range of domains (economics, political sciences and
news), we did not limit the complexity by excluding rare labels and
kept all independent variables as well as hyperparameters fixed. In
our prior work [8], we have used the thesaurus hierarchy to model
label dependencies which improves the classifications obtained by
kNN. Despite not making use of the hierarchy anymore, we are
able to achieve even higher absolute F-scores using eager learning
techniques and supplying term features in addition to extracted
concepts. We can therefore drop the constraint of a hierarchical
organization among the labels. Due to this minimal amount of
requirements and invariant configurations of the text processing
pipeline, we can expect our findings to generalize to a wide range
of other corpora.

To validate the practical impact of the experimental results, we
have conducted a qualitative assessment of the experimental results
in an expert workshop with three subject indexing specialists at
ZBW, the national library for economics in Germany. The experts
state that titles can be sufficient for classification of scientific docu-
ments. They further noted that titles contain less information than
what an intellectual indexer has available when manually conduct-
ing the classification tasks for the documents. They also pointed
out that researchers carefully chose their titles for findability. The
experts argued that reasonably good automatic indexing based on
titles is valuable since it does not raise legal problems compared to
processing full-text as discussed in the introduction. We conclude
that using the documents’ title for automated semantic annotation
is not only technically possible with a high quality but also valuable
from a practical point of view.

7 CONCLUSION
We have shown that it is reasonable to conduct semantic annota-
tions of documents by just analyzing the titles. Our experiments
show that by using titles, a performance of over 90% can be reached
w.r.t to the classification performance obtained when using the
full-text of the documents. This opens many new possibilities for
using document classification even when only little input data is
available such as titles obtained from the documents’ metadata on
the Linked Open Data cloud.

To encourage further research in the field and to invite other
researchers to compare and develop further methods, the full source
code of our generic text processing pipeline is available on GitHub10.
We invite practitioners and developers to use and extend the frame-
work.

Acknowledgement. This research was co-financed by the EU
H2020 project MOVING (http://www.moving-project.eu/) under
contract no 693092. We thank Tobias Rebholz, Gabi Schädle, and
Andreas Oskar Kempf from ZBW for valuable discussions in our
expert workshops on how to use SKOS vocabularies and titles to
annotate scientific papers.

10https://github.com/Quadflor/quadflor

REFERENCES
[1] Yiqi Bai and Jie Wang. 2015. News Classifications with Labeled LDA. In KDIR.

SciTePress.

[2] Wei Bi and James Tin-Yau Kwok. 2013. Efficient Multi-label Classification with
Many Labels. In ICML (3) (JMLR Workshop and Conference Proceedings), Vol. 28.
JMLR.org.

[3] David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent dirichlet allocation.

Machine Learning Research 3 (2003).

[4] Léon Bottou. 2010. Large-scale machine learning with stochastic gradient descent.

In Proceedings of COMPSTAT’2010. Springer.

[5] Léon Bottou. 2012. Stochastic gradient descent tricks. In Neural Networks: Tricks

of the Trade. Springer.

[6] Olivier Bousquet and Léon Bottou. 2008. The tradeoffs of large scale learning. In

Advances in neural information processing systems.

[7] Frank Goossen, Wouter IJntema, Flavius Frasincar, Frederik Hogenboom, and
Uzay Kaymak. 2011. News personalization using the CF-IDF semantic recom-
mender. In Web Intelligence, Mining and Semantics. ACM.

[8] Gregor Große-Bölting, Chifumi Nishioka, and Ansgar Scherp. 2015. A comparison
of different strategies for automated semantic document annotation. In Knowledge
Capture. ACM.

[9] Andreas Heß, Philipp Dopichaj, and Christian Maaß. 2008. Multi-value classifi-

cation of very short texts. In Advances in Artificial Intelligence. Springer.
[10] Geoffrey E. Hinton, Nitish Srivastava, Alex Krizhevsky, Ilya Sutskever, and Ruslan
Salakhutdinov. 2012. Improving neural networks by preventing co-adaptation of
feature detectors. CoRR abs/1207.0580 (2012). http://arxiv.org/abs/1207.0580
[11] Minlie Huang, Aurélie Névéol, and Zhiyong Lu. 2011. Recommending MeSH
terms for annotating biomedical articles. Am. Medical Informatics Association 18,
5 (2011).

[12] R. W. M. Wedderburn J. A. Nelder. 1972. Generalized Linear Models. Royal

Statistical Society 135, 3 (1972). http://www.jstor.org/stable/2344614

[13] Diederik P. Kingma and Jimmy Ba. 2014. Adam: A Method for Stochastic Opti-

mization. CoRR abs/1412.6980 (2014). http://arxiv.org/abs/1412.6980

[14] David D Lewis, Yiming Yang, Tony G Rose, and Fan Li. 2004. RCV1: A new
benchmark collection for text categorization research. Machine Learning Research
5 (2004).

[15] Christopher D Manning, Prabhakar Raghavan, Hinrich Schütze, et al. 2008. In-

troduction to information retrieval. Cambridge.

[16] Yuqing Mao and Zhiyong Lu. 2017. MeSH Now: automatic MeSH indexing at

PubMed scale via learning to rank. J. Biomedical Semantics 8, 1 (2017).

[17] Vinod Nair and Geoffrey E. Hinton. 2010. Rectified Linear Units Improve Re-

stricted Boltzmann Machines. In ICML.

[18] Jinseok Nam, Jungi Kim, Eneldo Loza Mencía, Iryna Gurevych, and Johannes
Fürnkranz. 2014. Large-scale Multi-label Text Classification. Revisiting Neural
Networks. In Machine Learning and Knowledge Discovery in Databases. Springer.
[19] Shengwen Peng, Ronghui You, Hongning Wang, Chengxiang Zhai, Hiroshi
Mamitsuka, and Shanfeng Zhu. 2016. DeepMeSH: deep semantic representation
for improving large-scale MeSH indexing. Bioinformatics 32, 12 (2016).

[20] Daniel Ramage, David Leo Wright Hall, Ramesh Nallapati, and Christopher D.
Manning. 2009. Labeled LDA: A supervised topic model for credit attribution in
multi-labeled corpora. In EMNLP. ACL.

[21] Jesse Read, Bernhard Pfahringer, Geoff Holmes, and Eibe Frank. 2011. Classifier

chains for multi-label classification. Machine Learning 85, 3 (2011).

[22] Stephen E Robertson, Steve Walker, Micheline Beaulieu, and Peter Willett. 1999.
Okapi at TREC-7: automatic ad hoc, filtering, VLC and interactive track. Nist
Special Publication SP (1999).

[23] Gerard Salton and Christopher Buckley. 1988. Term-weighting approaches in
automatic text retrieval. Information processing & management 24, 5 (1988).
[24] Hossein Soleimani and David J. Miller. 2016. Semi-supervised Multi-Label Topic
Models for Document Classification and Sentence Labeling. In CIKM. ACM.
[25] Eleftherios Spyromitros, Grigorios Tsoumakas, and Ioannis Vlahavas. 2008. An
empirical study of lazy multilabel classification algorithms. In Artificial Intelli-
gence. Springer.

[26] Erica Akemi Tanaka, Sérgio Ricardo Nozawa, Alessandra Alaniz Macedo, and
José Augusto Baranauskas. 2015. A multi-label approach using binary relevance
and decision trees applied to functional genomics. Journal of Biomedical Infor-
matics 54 (2015).

[27] Lei Tang, Suju Rajan, and Vijay K. Narayanan. 2009. Large scale multi-label

classification via metalabeler. In WWW. ACM.

[28] Grigorios Tsoumakas and Ioannis Katakis. 2007. Multi-Label Classification: An

Overview. IJDWM 3, 3 (2007).

[29] Grigorios Tsoumakas, Ioannis Katakis, and Ioannis P. Vlahavas. 2010. Mining
Multi-label Data. In Data Mining and Knowledge Discovery Handbook. Springer.
[30] Suppawong Tuarob, Line C Pouchard, and C Lee Giles. 2013. Automatic tag
recommendation for metadata annotation using probabilistic topic modeling. In
Joint Conf. on Digital Libraries. ACM.

[31] Princeton University. 2010. About WordNet. wordnet.princeton.edu. (2010).

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

[32] Min-Ling Zhang and Zhi-Hua Zhou. 2006. Multilabel neural networks with
applications to functional genomics and text categorization. IEEE transactions on
Knowledge and Data Engineering 18, 10 (2006).

[33] Min-Ling Zhang and Zhi-Hua Zhou. 2007. ML-KNN: A lazy learning approach

to multi-label learning. Pattern recognition 40, 7 (2007).

[34] Tong Zhang. 2004. Solving large scale linear prediction problems using stochastic

gradient descent algorithms. In ICML. ACM.

7
1
0
2
 
p
e
S
 
7
2
 
 
]
L
D
.
s
c
[
 
 
2
v
1
1
3
5
0
.
5
0
7
1
:
v
i
X
r
a

Using Titles vs. Full-text as Source for
Automated Semantic Document Annotation

Lukas Galke
ZBW—Leibniz Information Centre for
Economics, Kiel
l.galke@zbw.eu

Florian Mai
Kiel University
stu96542@mail.uni-kiel.de

Alan Schelten
Kiel University
stu111405@informatik.uni-kiel.de

Dennis Brunsch
Kiel University
deb@informatik.uni-kiel.de

Ansgar Scherp
ZBW—Leibniz Information Centre for
Economics, Kiel
a.scherp@zbw.eu

ABSTRACT
A significant part of the largest Knowledge Graph today, the Linked
Open Data cloud, consists of metadata about documents such as
publications, news reports, and other media articles. While the
widespread access to the document metadata is a tremendous ad-
vancement, it is yet not so easy to assign semantic annotations and
organize the documents along semantic concepts. Providing seman-
tic annotations like concepts in SKOS thesauri is a classical research
topic, but typically it is conducted on the full-text of the documents.
For the first time, we offer a systematic comparison of classification
approaches to investigate how far semantic annotations can be
conducted using just the metadata of the documents such as titles
published as labels on the Linked Open Data cloud. We compare the
classifications obtained from analyzing the documents’ titles with
semantic annotations obtained from analyzing the full-text. Apart
from the prominent text classification baselines kNN and SVM, we
also compare recent techniques of Learning to Rank and neural
networks and revisit the traditional methods logistic regression,
Rocchio, and Naive Bayes. The results show that across three of
our four datasets, the performance of the classifications using only
titles reaches over 90% of the quality compared to the classification
performance when using the full-text. Thus, conducting document
classification by just using the titles is a reasonable approach for
automated semantic annotation and opens up new possibilities for
enriching Knowledge Graphs.

CCS CONCEPTS
• Machine Learning → Document analysis; Text processing;

KEYWORDS
Multi-label classification; document analysis

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States
© 2017 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

ACM Reference Format:
Lukas Galke, Florian Mai, Alan Schelten, Dennis Brunsch, and Ansgar
Scherp. 2017. Using Titles vs. Full-text as Source for Automated Semantic
Document Annotation. In Proceedings of Knowledge Capture, Austin, Texas,
United States, December 4th-6th, 2017 (K-CAP 2017), 9 pages.
https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
A significant amount of today’s largest Knowledge Graph on the
web, the so-called Linked Open Data cloud1, consists of meta-
data about documents such as scientific papers and news articles.
Domain-specific SKOS vocabularies are used to describe the se-
mantics of these documents, SKOS (short for: Simple Knowledge
Organization System)2 is an established W3C standard for model-
ing thesauri in domains such as economics, politics, social sciences,
news, etc. Those thesauri are often of high quality since they are
manually crafted as well as maintained by domain experts, and
made freely available on the web3.

The challenge is to successfully use those SKOS thesauri to se-
mantically annotate the documents. However, the full-text PDF of
the documents may not be available (linked from the documents’
metadata) or may not be legally accessible due to licensing or copy-
right issues (even though there is a link to the PDF). Thus, it is
highly desirable to conduct a semantic annotation of the docu-
ments with the SKOS thesauri by just using the already published
documents’ metadata like the title, year, authors, etc. In contrast
to the full-text of documents, the metadata is directly available on
the Linked Open Data cloud, accessible in RDF format, and can
be processed with no legal barriers for semantic annotation. Con-
ducting semantic annotations by using only the title (or further
metadata of the documents) is challenging, since the title is short
and thus carries only little information compared to the full-text.
The process of semantic annotation is a multi-label classification
task where not only one label is to be chosen as annotation but a
set of labels since many concepts of the SKOS thesauri are needed
to appropriately describe the semantics of the documents.

We tackle the challenge of conducting a semantic multi-label
classification into SKOS thesauri by using only the title metadata

1See latest version from 02/2017: http://lod-cloud.net/versions/2017-02-20/lod.svg
2SKOS: https://www.w3.org/2004/02/skos/
3An overview of current SKOS vocabularies is maintained by the W3C: https://www.
w3.org/2001/sw/wiki/SKOS/Datasets

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

of the documents. To this end, we run an extensive series of ex-
periments to compare established methods and recent methods
from machine learning for document classification. The goal is to
decide whether it is possible to reach a comparable classification
performance when using only the title of the documents. It is note-
worthy that all the compared approaches operate on the underlying
machine learning level which makes a comparison with prevalent
end-to-end ontology tagging systems such as SOLR ontology tag-
ger4 and MAUI5 difficult. We instead show that despite not using
the hierarchical properties of the thesaurus, the presented methods
outperform the best-performing methods that do make use of the hi-
erarchy such as the ones of our own prior work [8]. Apart from the
well-known multi-label classification baseline k-nearest neighbors
(kNN) and support vector machines (SVM), we revisit traditional
text classification methods such as Naive Bayes, Rocchio, and logis-
tic regression (LR). We also include the prominent Learning to Rank
(L2R) approach, as well as a modern variant of neural networks
motivated by the success of the Deep Learning field. Please note,
the present work focuses solely on using the titles of documents,
since they are the richest metadata attribute and contain keywords
relevant in the domain. In the future, we may also incorporate other
metadata like authors’ names and publication year.

The results of our experiments show that it is possible to reach
a competitive performance for semantic annotation using solely
the title of documents, compared to exploiting the full-text of the
documents. Using a sample-averaged F1 measure as evaluation
metric, we compare the automated predictions of semantic anno-
tations from different methods with those annotations provided
by domain experts. We run our experiments over four large-scale
documents corpora of different origin and domain with a total of
over 300, 000 documents. All datasets offer professional labels, i. e.,
manual annotations from domain experts. Two datasets are from
professional scientific libraries in economics and politics while the
other two datasets are the well-known news corpora from New
York Times and Reuters. In the past, algorithms of the lazy learner
family such as kNN used to dominate multi-label classification
tasks on such datasets with a high amount of classes [8, 25]. How-
ever, we show that eager learners such as logistic regression and
feed-forward neural networks outperform lazy learners. Most eager
learners have the benefit of O(Nparameters) time complexity to pre-
dict a label set for an unseen document, which is important when
applying an automated semantic annotation process for on-the-fly
enrichment of metadata on the Linked Open Data cloud. In con-
trast, lazy learners as well as Learning to Rank need to store and
traverse O(Ntraining examples · Nfeatures) space to predict the labels
for a single new document at test time. Finally, focusing on the
metadata also allows direct processing of data in published RDF
format (e. g. the rdfs:Literal and rdfs:label information) without
accessing the full-text of the documents at all. Overall, we conclude
that eager learning algorithms are well-suited for automated se-
mantic annotation of RDF resources in Linked Data. Summarized,
the contributions of this work are:

4https://www.opensemanticsearch.org/solr-ontology-tagger
5https://github.com/zelandiya/maui-standalone

(1) To the best of our knowledge, the first large-scale systematic
comparison of multi-label classifiers applied to either the
full-text or only the titles of documents.

(2) Results that show that eager learners such as neural net-
works and linear models outperform lazy learners even when
a high amount of possible labels is considered.

(3) We offer evidence that using only the title for high-dimensional
multi-label classification is a reasonable choice for semantic
annotation of resources where only metadata is available,
such as documents modeled in RDF on the Linked Open Data
cloud.

The remainder of the paper is organized as follows: Below, we
present an overview of the state of the art in multi-label classifica-
tion of text and related fields. In Section 3, we describe our experi-
mental apparatus. We depict different methods for conversion of
unstructured text to feature vectors in Section 3.1. The classifiers
and their respective configurations are elaborated in detail in Sec-
tion 3.2. We describe the four datasets used for our experiments as
well as the evaluation metrics in Section 4. The results are presented
in Section 5 and discussed in Section 6, before we conclude.

2 RELATED WORK
Most earlier work on the multi-label classification task with many
possible output labels relies on nearest neighbor searches (kNN).
Using the union of labels as well as separately voting for each indi-
vidual label among neighbors is a common choice in these nearest
neighbor-based classifiers [8, 25, 28, 29, 33]. Concept extraction [7]
refers to explicitly finding known concept-specific phrases in the
documents. The extracted concepts are re-weighted by inverse doc-
ument frequency, as in the well-known TF-IDF [23] retrieval model.
In our prior work [8], we have conducted an exhaustive comparison
of concept extraction and feature re-weighting methods using kNN
as a multi-label classifier.

Recent progress in the field of topic modeling with latent Dirich-
let allocation [3] suggest using labeled variants [1, 20, 24] for multi-
label classification. While these techniques outperform SVMs, we
found from pre-experiments that they do not scale well regarding
the number of considered labels. In the closely related field of (label)
recommendation, Tuarob et al. [30] as well applied topic models to
obtain a ranking of the labels.

In the biomedical domain, the most popular approach is Learning
to Rank [11, 19]. The algorithm learns a ranking of the MeSH terms.
In multi-label classification, however, a hard decision is necessary
to enable fully automated classification. Thus, Learning to Rank
is typically adjusted for multi-labeling by imposing a hard cut-off.
There are also approaches that use Learning to Rank along with
dynamic cut-off techniques [16]. The most prominent approach
to adapt classifiers for multi-labeling is binary relevance [26, 28].
Other options include the chaining [21] as well as stacking [9, 27] of
classifiers. While the former is not well-suited for high amounts of
considered labels, we also include a variation of the latter idea in our
comparison. Bi and Kwok [2] approach the multi-label classification
task from a different direction. They strive for more efficient multi-
label classification and proper treatment of label correlation by
transforming the label indicator matrix.

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

3.1 Vectorization

Counting terms and extracting concepts. In the first step of our
text processing pipeline, the raw text needs to be converted into a
vector representation that can be supplied as input to the classifiers.
As features, we use the counts of term occurrences in the text (TF) as
well as the number of times a concept provided by a domain specific
thesaurus can be extracted from the text (CF). A concept is a set
of concept-specific phrases. In case of SKOS format, each concept
has one preferred phrase (skos:prefLabel) and optionally a set
of alternative phrases (skos:altLabel). We extract these concept-
specific phrases from the text using a finite state machine. When
there is more than one possible match in a sequence of words,
we favor the longest phrase. We assume that longer phrases carry
more specificity. Hence, the occurrences of a concept (set of concept-
specific phrases) are counted in the same way as term occurrences.
The effect of concept extraction is to ensure that domain-specific
synonyms encoded in the thesauri are mapped to the same concept.
The concepts are also directly associated to the respective class
labels. Hence it is left to the learning algorithm, to decide about the
concrete label assignment, given the extracted terms or concepts.

Discounting frequent terms and concepts. Inverse document fre-
quency (IDF) is a re-weighting scheme introduced in the 1970s
by Salton and Buckley [23] which has proven to work well for
information retrieval [15]. IDF discounts features that occur in
many documents of the corpus, and thus do not hold discrimi-
native information. This can be both term counts and counts of
extracted concepts. Let D be the set of documents, then the IDF
re-weighted score for some term or concept w in a document
d ∈ D is defined as: TF-IDF(w, d) = TF(w, d) · IDF(w, D), where
IDF(t, D) = 1 + log
| {d ∈D:w ∈d } |+1 . To avoid division by zero, both
the nominator and the denominator are incremented by one, as if
there was one artificial document containing all possible terms and
concepts. This can happen because the set of concepts given by the
thesaurus but the data itself might not cover all of these possible
concepts. The fraction as a whole is as well incremented by one, to
ensure that words that appear in all documents are not completely
discarded.

|D |+1

Okapi BM25 is an extension of IDF by Robertson et al. [22] that
slightly modifies the IDF term to include the average length of
a document. It offers two hyper-parameters for interpolating the
difference between the current document length and the corpus-
wide mean document length. The literature suggests to use BM25
especially for fields with short texts using hyper-parameters k = 1.6
and b = 0.75 [15]. Hence, variants of our text vectorization methods
using BM25 instead of TF-IDF re-weighting are included in our
comparison.

Combining terms and concepts. After re-weighting by either in-
verse document frequency or BM25, the resulting vectors are nor-
malized to unit length (with respect to the L2-norm). This leads
to desirable invariance to document length. Besides using only ei-
ther the term frequency (TF) or the concept frequency (CF), we
concatenate the respective feature vectors (CTF).

Figure 1: Illustration of the configurable text-processing
pipeline used for our experiments. The pipeline starts with
the vectorization of the input text, followed by feature re-
weighting, classification and evaluation. The emphasized
edges and nodes show the most successful strategy applied
to title data.

Zhang and Zhou [32] have proposed to train a separate neural
network for each label along with a dedicated loss function. How-
ever, this approach does not scale to high amounts of possible out-
put labels. One year later, the same authors suggest a lazy-learning
multi-label variant of kNN [33], which is considered in our com-
parison. Nam et al. [18] adapt fully connected feed-forward neural
networks for multi-label classification by learning a threshold that
determines whether a label should be assigned or not.

While the related fields of label recommendation and single-label
text classification are broad, only few works consider multi-label
classification with a large amount of possible output labels. From
these, the dominant approaches are based on nearest neighbors
searches, i. e. lazy learners and Learning to Rank. The considered
works all use either short texts or full-text as input data but do not
compare these two different input variants. Thus, we offer the first
systematic comparison of text vectorization methods and lazy as
well as eager learning algorithms for the multi-label classification
problem with many possible labels applied to either title data or
full-text data.

3 SEMANTIC ANNOTATION APPARATUS
We present an end-to-end apparatus for semantic annotation of un-
structured text. Figure 1 shows our generic text processing pipeline
that we used for the experiments. Each path through the graph
resembles a possible configuration. In the following Section 3.1, we
describe the conversion from unstructured text to a vector repre-
sentation. In Section 3.2, we elaborate in detail on the classification
methods that we have compared.

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

3.2 Classification
In the second step of the pipeline, a classifier is consulted to predict
the desired set of labels based on the vector representation of the
input text (compare Figure 1). Given training data, the classifiers
have the opportunity to learn how to associate the features with
the respective class labels. Lazy learners merely copy their input at
training time, shifting the main computational effort to test time
(described in Section 3.2.1). On the other hand, eager learners use the
training data for adapting their parameters according to the correct
classification result. We describe those in detail in Section 3.2.2.
Some of the learning algorithms are only designed for single-label
classification (SVM, logistic regression, Naive Bayes), others do
only return a ranked list of possible labels (kNN, Rocchio, Learning
to Rank). We describe the multi-label adaption strategies for both
cases in Section 3.2.3.

3.2.1 Lazy Learners.

Nearest Neighbor Classifier. The most typical lazy-learning al-
gorithm is k-nearest neighbors (kNN). All training examples are
stored along with their class annotations. At test time, the k nearest
neighbors with respect to some distance metric (we chose cosine)
vote on class membership. For multi-label problems, variants are
proposed that assign the union of label annotations in the neigh-
borhood as well as conducting a separate vote for each label [25].
By auto-optimizing the k hyperparameter for these methods, we
found k = 1 to be the optimal value in our setting (as in our prior
work [8]). In this case all multi-label variants coincide to copy the
label set from the nearest neighbor of the training set.

Rocchio Classifier. The Rocchio classifier, or nearest-centroid clas-
sifier resembles a light-weight modification of the nearest neighbor
classifier. During training, only the centroid of each class is stored.
The classification result is then determined by the nearest of these
centroids at test time. In multi-label classification however, the
classifier is only capable to return a ranked list of labels based on
the distance to the respective centroids. As in the nearest neighbor
classifier above, we use cosine distance as criterion.

3.2.2 Eager Learners.

Naive Bayes. The Naive Bayes classifier is one of the most tradi-
tional classifiers for text classification tasks. We consider two Naive
Bayes variants, multinomial and Bernoulli. In the multinomial vari-
ant, the features of term or concept frequencies are assumed to
be generated by a multinomial distribution. The Bernoulli variant
only takes the occurrences of (binary) features into account, which
leads to penalizing the non-occurrences of features. The Bernoulli
variant is an intuitive approach for short text such as titles since du-
plicate words are rather infrequent, while the multinomial variant
is more intuitive for full-texts. For both variants, we apply Lidstone-
Smoothing with α = 10−5. The main drawback of Naive Bayes is the
assumption of statistical independence among the input features.

Linear Models. Generalized linear models [12] use the training
examples to learn a decision boundary. This decision boundary is
a separating hyperplane specified by a linear combination of the
input features w·x−b = 0. The parameters w and b are optimized to
minimize the regularized training error: 1
i=1 J (yi , y(xi))+αR(w)
n

(cid:205)n

where y(x) = w · x − b is the model’s output and αR(w) is a
regularization term on the model’s weights such as the L2-norm.
For the loss function J , we consider two variants: logistic loss
Jlogistic(y, p) = ln(1 + exp(−p · y)) as in logistic regression (LR) and
hinge loss Jhinge(y, p) = max(0, 1 − p · y) as in linear support vector
machines (SVM). At test time, the binary decision is determined
by the side of the hyperplane, on which the document in question
falls. We employ stochastic gradient descent as an optimizer for
these generalized linear models, which is known to yield good gen-
eralization on large-scale datasets [4, 6, 34]. We apply the learning
rate schedule η(t ) =
α ·(t0+t ) , where t0 is chosen by a heuristic of
Léon Bottou [5]. We average the weights w over time, which allows
higher learning rates and leads to faster convergence [5]. In this
setting, we empirically determined α = 10−7 to be a good hyper-
parameter value for all datasets (in the range 10−1, 10−2, . . . , 10−9).
This leads to comparatively high initial learning rates and low
regularization.

1

Learning to Rank. Learning to Rank (L2R) refers to a set of tech-
niques that can be used to learn the ranking of a list from training
data. As suggested by Huang et al. [11], we restrict the supplied
list to those labels that occur in the k neighboring documents (we
empirically determined k = 45). Those labels, that are also assigned
to current document in question should be ranked higher than the
others. To learn the ranking, we use the neighborhood, overlap,
and translation-probability features proposed by Huang et al. [11].
Hence at test time, the union of labels among the k nearest neigh-
bors are ranked via the learned parameters. However, the algorithm
itself does not offer the possibility of hard decisions on label as-
signments. Thus, we chose to cut off the ranked list at the position
of the average number of assigned labels in the training data. In
our experiments, we made use of the RankLib library6 and found
LambdaMART to outperform other list-wise L2R algorithms.

Multi-Layer Perceptron. As representative for the neural network
family, we employ a fully connected feed-forward neural network
with one hidden layer, a so-called multi-layer perceptron (MLP).
Compared to the linear models, the MLP has an additional interme-
diate hidden layer h with a nonlinear activation function f . Thus, we
first compute h = f (cid:0)W 1x + b1(cid:1), and then y = W 2h + b2. The out-
put y is then scaled to the interval (0, 1) by the sigmoid function σ
as in logistic regression and compared to the gold-standard by cross-
entropy. The gradient for updating the parameters is computed by
the chain-rule, also known as back-propagation. The optimization
itself is carried out by Adam [13] with the default hyper-parameters
and α = 0.01. We chose a hidden layer size of 1000 and use recti-
fied linear units [17] as activation function f (except for the NYT
dataset where we use tanh due to numerical difficulties). For reg-
ularization, we apply dropout [10] with a probability of 0.5. The
intermediate hidden layer can be regarded as a fine-tuned task-
specific word embedding, which enables the classifier as a whole
to learn nonlinear relationships among the features. To convert the
odds σ (y) into a binary decision, several approaches suggest to use
a threshold learning technique [18, 27]. In our initial experiments,
however, we experienced that the most recent threshold learning

6https://people.cs.umass.edu/~vdang/ranklib.html

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

technique yields rather unsatisfactory results in terms of the F1
measure. Instead, we use a fixed threshold of 0.2.

3.2.3 Multi-Label Adaption.

Binary Relevance. Linear models as well as Naive Bayes are re-
stricted to mutually exclusive class assignments by design. Only one
class out of all possible ones is selected. In multi-label classification,
however, multiple labels need to be assigned. The most common
approach to adapt such classifiers is to train one classifier per class,
which distinguishes its respective class from all others, i. e. decides
for binary relevance [28] (also known as one-vs-all or one-vs-rest).
The training documents are supplied to all label-specific classifiers.
Depending on the prevalence of the label that corresponds to the
respective classifier, the example is either treated as positive or as
negative. At test time, the classification result is composed of the
binary decisions for each label.

Classifier Stacking. Multi-value classification stacking [9] refers
to a technique where the final classification result is composed by
two classifiers. The so-called base-classifier returns a ranked list
of label predictions with confidence scores. Then for each class, a
meta-classifier takes these confidence scores along with the posi-
tion in the ranked list as input and outputs a binary decision for
the specific class. This technique enables transforming any clas-
sifier that returns confidence scores into a multi-label classifier.
As meta-classifiers, we use decision trees with Gini impurity as
splitting criterion. To limit complexity, we generate training data
only for those meta-classifiers, whose class is among the top 30 of
the base-classifier’s ranking [9]. We use this decision tree module
(abbreviated with the suffix *DT) as an alternative to hard cut-offs
in Learning to Rank (see Section 2, and the fixed thresholds in
multi-layer perceptrons (see Section 3.2.2). For comparison with
the original work of Heß et al. [9], we also consider Rocchio as
a base-classifier. We furthermore experiment with applying the
decision tree module on top of binary-relevance logistic regression.

4 EXPERIMENTAL SETUP
We describe the datasets used for our experiments in Section 4.1, be-
fore we outline the experimental procedure in Section 4.2. We then
depict the conducted preprocessing and introduce our evaluation
metric of a sample-based F1 measure in Section 4.3. We choose a
sample-based evaluation measure since it will assess the classifica-
tion quality of each document separately. This reflects the workflow
of manual document classification as it is done by domain experts
in scientific digital libraries as well as journalists.

4.1 Datasets
We have conducted our experiments on four datasets of English doc-
uments: two datasets are obtained from scientific digital libraries
in the domains of economics and political sciences along with two
news datasets from Reuters and New York Times. Table 1 sum-
marizes the basic statistics of the datasets. For each document
in the datasets, there are manually created gold-standard anno-
tations provided by respective domain experts, who work as pro-
fessional subject indexers in the corresponding organizations. In
addition, each dataset provides a domain-specific thesaurus that
serves as controlled vocabulary of the gold-standard. Its concepts

are used as target labels in our multi-label document classifica-
tion task. The thesaurus also offers sets of concept-specific phrases
(i. e. skos:prefLabel and skos:altLabel in case of SKOS format)
that are used for concept extraction from the documents’ full-text
and titles [7]. The economics dataset consists of 62, 924 documents
and is provided by ZBW — Leibniz Information Centre for Eco-
nomics. The annotations are taken from the Standard Thesaurus
Wirtschaft (STW) version 97, which is a controlled domain-specific
thesaurus for economics and business studies maintained by ZBW.
The thesaurus contains 6, 217 concepts with 12, 707 concept-specific
phrases. From these concepts, 4, 682 are used in the corpus and thus
considered in the multi-label classification task. Each document
is annotated by domain experts with on average 5.26 labels (SD:
1.84). The political sciences dataset has 28, 324 documents. Similar
to the economics dataset, we made a legal agreement for the po-
litical sciences dataset with the German Information Network for
International Relations and Area Studies8 that is providing the doc-
uments. The labels are taken from the thesaurus for International
Relations and Area Studies9, which contains 9, 255 concepts (and
an equivalent number of concept-specific phrases, i. e., there are
no alternative phrases). From these concepts, 7, 234 are used in the
corpus. Each document in the dataset has on average 8.07 labels
(SD: 3.03). The Reuters RCV1-v2 dataset contains 805, 414 articles.
We chose articles where both the titles and the full-text of the doc-
uments are available. From this set of documents, we randomly
selected 100, 000 articles to match the scale of the scientific corpora.
In our experiments, we employ the thesaurus re-engineered from
the Reuters dataset by Lewis et al. [14]. The thesaurus contains 117
concepts and a total of 173 concept-specific phrases. From these
concepts, 101 are used in the corpus. Each document was annotated
with on average 3.21 (SD: 1.41) labels. The New York Times Anno-
tated Corpus Dataset (NYT) contains 1, 846, 656 articles. Each article
has two sets of annotations, consisting of annotations created by a
professional indexing service and annotations which were added
by the authors using a semi-automatic system. We used the anno-
tations provided by the indexing service because it is reasonable to
expect that they are more consistent and of higher quality (cf. [9]).
As for the Reuters dataset, we chose a random subset of 100, 000
documents containing both full-text and titles. The number of con-
cepts in the NYT dataset is 25, 226. From these concepts, 6, 809 are
used in our random sample. Each document is annotated with on
average 2.53 (SD 1.78) labels. Like the political sciences dataset,
each concept consists of only a single specific phrase.

4.2 Procedure

Vectorization methods. We compare the different vectorization of
the input text as shown in Figure 1 and described in Section 3.1. One
vectorization is based on term frequencies (TF-IDF) and the other is
based on concept frequencies (CF-IDF). We experiment with the re-
weighting method BM25 using term frequencies and BM25C using
concept frequencies. The concatenation of both terms and concepts
is denoted by CTF-IDF and BM25CT, respectively. As classifier, we
employ kNN with cosine distance. The performance of kNN relies

7http://zbw.eu/stw/versions/9.0/about.en.html
8http://www.fiv-iblk.de/eindex.htm
9http://www.fiv-iblk.de/information/information_thesaurus.htm

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

Table 1: Statistics for the datasets: |D| documents, |C | con-
cepts in the thesaurus, |L| labels assigned in the dataset, d/l
mean documents per label, l/d mean labels per documents
along with median l/d50, V vocabulary size, w/d mean terms
per document, and c/d mean concepts per document

Table 2: Sample-averaged F-scores of the text vectorization
methods with using kNN as common classifier

Input

Vectoriz. Econ. Polit. RCV1 NYT

Econ.

Polit.

RCV1

NYT

62, 924
6, 217
4, 682
70.8 (322.9)
5.26 (1.84)
4
19, 579
7.07 (3.03)
3.33 (1.83)
1, 340, 628
6, 750 (6, 854)
247 (121)

27, 576
9, 255
7, 234
32.6 (116.8)
8.57 (3.03)
5
15, 419
8.13 (5.29)
3.69 (2.36)
1, 165, 919
11, 255 (15, 565)
346 (189)

100, 000
117
101
3174.9 (6371.3)
3.21 (1.41)
14
32, 859
12.21 (2.39)
0.57 (1.02)
155, 339
136 (114)
6.80 (8.60)

100, 000
25, 226
6, 809
37.1 (213.0)
2.53 (1.78)
2
40, 736
4.46 (2.25)
0.70 (0.83)
270, 710
310 (294)
37.0 (38.2)

|D|
|C |
|L|
d/l
l/d
l/d50
Vtitle
w/dtitle
c/dtitle
Vfull
w/dfull
c/dfull

on the assumption that documents are well represented by the
features and that similar documents have similar labels. Therefore,
its classification performance is a good indicator for the quality of
the features.

Classification methods. After determining the best-performing
vectorization method, we compare lazy learning as well as eager
learning classifiers of Sections 3.2.1 and 3.2.2 combined with the
multi-label adaption methods of Section 3.2.3, where appropriate.
We leverage the linear models (SVMs and logistic regression) to
perform multi-label classification with binary relevance, i. e. train-
ing one classifier per label. To adapt the Learning to Rank approach
and the multi-layer perceptron to multi-labeling, we consider us-
ing thresholds as well as stacking with decision trees. We also
experiment with stacking the decision tree module on top of binary-
relevance logistic regression. Careful tuning of the hyperparameters
is crucial to the success of machine learning algorithms, especially
in those multi-label classification tasks, where only few training
examples are available per class. Striving to identify well-suited
hyperparameters that are invariant to the concrete dataset, we
keep all hyperparameters (as denoted in Section 3) fixed across all
experiments and datasets.

4.3 Preprocessing and Evaluation

Preprocessing. Prior to counting terms and extracting concepts,
both the input text and the concept-specific phrases of the thesauri
are subject to preprocessing steps. This includes discarding all char-
acters except for sequences of alphabetic characters with a length
of at least two. Words connected with a hyphen are joined (i. e., the
hyphen is removed). Detected words were lower-cased and lemma-
tized based on the morphological processing of WordNet [31].

Evaluation. For evaluation, we separate each dataset into 90%
training documents and 10% test documents and perform a 10-fold
cross-validation, such that each document occurs exactly once in
the test set. Hence for each test document, we compare the predicted
labels with the label set of the gold standard and evaluate the F1
measure. The F1 measure is the harmonic mean between precision,

Full-text CTF-IDF

0.411

0.272

0.761

0.406

Full-text BM25CT

0.377

0.231

0.742

0.379

0.406

0.370

0.402

0.296

0.351

0.349

0.303

0.304

0.269

0.758

0.230

0.740

0.266

0.451

0.161

0.423

0.201

0.709

0.196

0.687

0.183

0.275

0.172

0.193

0.394

0.370

0.367

0.236

0.238

0.230

0.105

0.073

Full-text TF-IDF

Full-text BM25

Full-text CF-IDF

Full-text BM25C

TF-IDF

BM25

CF-IDF

BM25C

Titles

Titles

Titles

Titles

Titles

Titles

CTF-IDF

0.368

0.212

0.717

0.242

BM25CT

0.364

0.208

0.693

0.239

i. e. true positives w.r.t false positives, and recall, i. e. true positives
w.r.t false negatives. When no label is predicted, the precision is set
to zero. The F-scores are then averaged over the test documents. We
chose this sample-based F1 measure over class-averaged or global
variants because it is closest to an assumed application, where each
individual document needs to be annotated as good as possible.
Please note, there is a possibility that all documents annotated
with a specific label fall only into one test set. Despite no training
data is available for these labels, we do not exclude those from
our evaluation metric. Finally, we report the mean sample-based
F-score over the ten folds of the cross-validation.

5 RESULTS
In this section, we describe the results of our experiments. Due to
the high amount of possible pipeline configurations, we applied a
step-by-step approach. For both the text vectorization step and the
classification step, we search for a local optimum solution to find
the best overall classification strategy.

Results for Vectorization Methods. Table 2 shows the results for
the text vectorization experiment. The term-based vectorization
method TF-IDF perform consistently better than the purely concept-
based vectorization CF-IDF methods on both the titles and the
full-text. The difference ranges from 0.003 on Economics to 0.307
F-score on Reuters. When combining the term vector with the con-
cept vector, the performance is at least as good as the other text
vectorization methods and in many cases yields better results. This
is more noticeable on titles than on full-texts. BM25 re-weighting
does not improve the results compared to TF-IDF neither in case of
the titles nor the full-text. Rather, we observe a decrease in perfor-
mance by up to 0.13. These experiment using a nearest neighbor
classifier indicates that CTF-IDF is the best-suited vectorization
method. Henceforth, we use CTF-IDF for comparing the perfor-
mance of the classifiers.

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

Results for Classifiers. The results of comparing the different clas-
sifiers are documented in Table 3. As shown in the table, Bernoulli
Bayes has a slight advantage over multinomial Bayes for titles. On
the other hand, the multinomial variant has a slight disadvantage on
full-texts. However, both methods consistently fall far behind kNN
on full-texts. In the case of working with titles, the Bayes classifiers
are able to keep up with kNN on two datasets. RocchioDT’s scores
are depending on the datasets and range from the lowest (Reuters)
to a score only slightly different from kNN (NYT, political sciences).
The generalized linear models SVM and logistic regression are close
to each other. The difference is no more than 0.04 for any dataset.
Considering Learning to Rank, we observe that the technique yields
consistently lower scores than the multi-layer perceptron. Over-
all, the eager learners SVM, LR, L2R and MLP outperform both
Naive Bayes and the lazy learners Rocchio, and kNN. Among all
classifiers, MLP dominates on all datasets apart from NYT on titles,
where LRDT achieves a .021 higher score. While the stacked deci-
sion tree module increases the F-scores of logistic regression on all
datasets with fewer than 100 documents per label (all but Reuters),
the impact of the stacking method is inconsistent for the Learning
to Rank and MLP approaches. It is noteworthy that there are cases
where a classifier performs better on the title data than the same
classifier applied on the full-text data. These are Bernoulli Bayes
on the Reuters dataset and RocchioDT on the economics dataset.
As a general rule, however, full-texts generate higher scores than
the titles. Comparing different classifiers across titles and full-text,
we can make the observation that some classifiers trained on titles
outperform others that were trained on the full-text. Apart from
the NYT corpus, the eager learners LR, LRDT and MLP on titles are
superior to kNN on full-texts. Finally, we compare the F-scores of
the best-performing multi-layer perceptron on titles with its scores
obtained on full-text. On the NYT dataset, 58% of the F-score is
retained when using only titles. On the political sciences and eco-
nomics datasets, the retained F-score is 83% and 91%, respectively.
On the Reuters dataset, the MLP using solely titles retains 95% of
the F-score that is obtained with full-text information available.

6 DISCUSSION
The results show that multi-label classification of text documents
can be reasonably conducted using only the titles of the documents.
Over all datasets, the multi-layer perceptron on titles retains 82%
of the F-score obtained on full-text. This gives an empirical justifi-
cation for the value of automated semantic document annotation
using metadata. From the first experiment, we find that combining
words with extracted concepts as features is preferable over one
of them alone. Concepts hold valuable domain-specific semantic
information. The term frequency on the other hand, holds implicit
information which is as well important for correct classification.
Eager learners are, by design, capable of learning which terms or
concepts need to be associated to the respective class. The results
show that also lazy learners benefit from this joint representation.
The second experiment shows that eager learners such as logis-
tic regression and MLP consistently outperform lazy learners for
multi-label classification. This result extends recent advancements
in multi-labeling [18, 26] towards document classification scenarios
with many possible output labels and only few examples per class.

Table 3: Sample-averaged F-scores for classification methods
with using the best vectorization method CTF-IDF

Input

Classifier

Econ. Polit. RCV1 NYT

Full-text

kNN (baseline)

Full-text Bayes (Bernoulli)

0.411

0.318

0.272

0.761

0.191

0.657

Full-text Bayes (Multinom.)

0.235

0.207

0.703

0.519

0.373

0.857

0.569

0.406

0.281

0.349

0.554

0.556

0.435

0.393

0.562

0.421

0.242

0.233

0.214

0.325

0.326

0.296

0.319

0.852

0.322

0.851

0.328

0.727

0.225

0.645

0.339

0.843

0.280

0.751

0.212

0.717

0.179

0.708

0.272

0.804

0.274

0.803

0.296

0.699

0.340

0.857

0.578

0.472

0.309

0.812

0.332

0.219

0.584

0.252

0.279

0.796

0.353

0.261

0.730

0.25

0.277

0.808

0.340

0.481

0.485

0.431

0.291

0.498

0.415

0.492

0.368

0.301

0.426

0.429

0.419

0.335

0.451

0.428

0.457

Full-text

SVM

Full-text

LR

Full-text

L2R

Full-text MLP

Full-text RocchioDT

Full-text

LRDT

Full-text

L2RDT

Full-text MLPDT

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

Titles

kNN

SVM

LR

L2R

MLP

RocchioDT

LRDT

L2RDT

MLPDT

Bayes (Bernoulli)

Bayes (Multinom.)

0.254

0.178

0.699

Inspecting the results for titles and full-text, the best-performing
classifiers still perform better on the full-text. This is not surprising
since the full-text holds considerably more information (including
the title). However, for all datasets apart from the NYT dataset,
the difference in F-score of the best-performing MLP is small. The
difficulties in classifying the documents in the NYT dataset can be
explained by a characteristic that the titles consist only of 4 words
on average. There may be a lower bound on the title length to
perform the classification task, since a short title limits the amount
of available information and thus prohibits discrimination. From
the other datasets, we can state that an average of 7 words per
title leads to at least 80% retained F-score. Thus, it would require
further investigation to understand the specific influence of the title
length on the classification performance. The complexity of a multi-
labeling problem depends on the number of available documents
per label, independent of whether the full-text or the titles are used.
Especially binary-relevance classifiers suffer from conservative la-
bel assignments (high precision, low recall), when many negative
examples and only few positive examples are presented during

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

L. Galke, F. Mai, A. Schelten, D. Brunsch, A. Scherp

training. While the results of the stacked decision tree module are
inconsistent for MLP and L2R, it does alleviate the conservative as-
signments problem of binary-relevance, when only few documents
per label are available.

In our experiments over four large-scale real-world corpora cov-
ering a broad range of domains (economics, political sciences and
news), we did not limit the complexity by excluding rare labels and
kept all independent variables as well as hyperparameters fixed. In
our prior work [8], we have used the thesaurus hierarchy to model
label dependencies which improves the classifications obtained by
kNN. Despite not making use of the hierarchy anymore, we are
able to achieve even higher absolute F-scores using eager learning
techniques and supplying term features in addition to extracted
concepts. We can therefore drop the constraint of a hierarchical
organization among the labels. Due to this minimal amount of
requirements and invariant configurations of the text processing
pipeline, we can expect our findings to generalize to a wide range
of other corpora.

To validate the practical impact of the experimental results, we
have conducted a qualitative assessment of the experimental results
in an expert workshop with three subject indexing specialists at
ZBW, the national library for economics in Germany. The experts
state that titles can be sufficient for classification of scientific docu-
ments. They further noted that titles contain less information than
what an intellectual indexer has available when manually conduct-
ing the classification tasks for the documents. They also pointed
out that researchers carefully chose their titles for findability. The
experts argued that reasonably good automatic indexing based on
titles is valuable since it does not raise legal problems compared to
processing full-text as discussed in the introduction. We conclude
that using the documents’ title for automated semantic annotation
is not only technically possible with a high quality but also valuable
from a practical point of view.

7 CONCLUSION
We have shown that it is reasonable to conduct semantic annota-
tions of documents by just analyzing the titles. Our experiments
show that by using titles, a performance of over 90% can be reached
w.r.t to the classification performance obtained when using the
full-text of the documents. This opens many new possibilities for
using document classification even when only little input data is
available such as titles obtained from the documents’ metadata on
the Linked Open Data cloud.

To encourage further research in the field and to invite other
researchers to compare and develop further methods, the full source
code of our generic text processing pipeline is available on GitHub10.
We invite practitioners and developers to use and extend the frame-
work.

Acknowledgement. This research was co-financed by the EU
H2020 project MOVING (http://www.moving-project.eu/) under
contract no 693092. We thank Tobias Rebholz, Gabi Schädle, and
Andreas Oskar Kempf from ZBW for valuable discussions in our
expert workshops on how to use SKOS vocabularies and titles to
annotate scientific papers.

10https://github.com/Quadflor/quadflor

REFERENCES
[1] Yiqi Bai and Jie Wang. 2015. News Classifications with Labeled LDA. In KDIR.

SciTePress.

[2] Wei Bi and James Tin-Yau Kwok. 2013. Efficient Multi-label Classification with
Many Labels. In ICML (3) (JMLR Workshop and Conference Proceedings), Vol. 28.
JMLR.org.

[3] David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent dirichlet allocation.

Machine Learning Research 3 (2003).

[4] Léon Bottou. 2010. Large-scale machine learning with stochastic gradient descent.

In Proceedings of COMPSTAT’2010. Springer.

[5] Léon Bottou. 2012. Stochastic gradient descent tricks. In Neural Networks: Tricks

of the Trade. Springer.

[6] Olivier Bousquet and Léon Bottou. 2008. The tradeoffs of large scale learning. In

Advances in neural information processing systems.

[7] Frank Goossen, Wouter IJntema, Flavius Frasincar, Frederik Hogenboom, and
Uzay Kaymak. 2011. News personalization using the CF-IDF semantic recom-
mender. In Web Intelligence, Mining and Semantics. ACM.

[8] Gregor Große-Bölting, Chifumi Nishioka, and Ansgar Scherp. 2015. A comparison
of different strategies for automated semantic document annotation. In Knowledge
Capture. ACM.

[9] Andreas Heß, Philipp Dopichaj, and Christian Maaß. 2008. Multi-value classifi-

cation of very short texts. In Advances in Artificial Intelligence. Springer.
[10] Geoffrey E. Hinton, Nitish Srivastava, Alex Krizhevsky, Ilya Sutskever, and Ruslan
Salakhutdinov. 2012. Improving neural networks by preventing co-adaptation of
feature detectors. CoRR abs/1207.0580 (2012). http://arxiv.org/abs/1207.0580
[11] Minlie Huang, Aurélie Névéol, and Zhiyong Lu. 2011. Recommending MeSH
terms for annotating biomedical articles. Am. Medical Informatics Association 18,
5 (2011).

[12] R. W. M. Wedderburn J. A. Nelder. 1972. Generalized Linear Models. Royal

Statistical Society 135, 3 (1972). http://www.jstor.org/stable/2344614

[13] Diederik P. Kingma and Jimmy Ba. 2014. Adam: A Method for Stochastic Opti-

mization. CoRR abs/1412.6980 (2014). http://arxiv.org/abs/1412.6980

[14] David D Lewis, Yiming Yang, Tony G Rose, and Fan Li. 2004. RCV1: A new
benchmark collection for text categorization research. Machine Learning Research
5 (2004).

[15] Christopher D Manning, Prabhakar Raghavan, Hinrich Schütze, et al. 2008. In-

troduction to information retrieval. Cambridge.

[16] Yuqing Mao and Zhiyong Lu. 2017. MeSH Now: automatic MeSH indexing at

PubMed scale via learning to rank. J. Biomedical Semantics 8, 1 (2017).

[17] Vinod Nair and Geoffrey E. Hinton. 2010. Rectified Linear Units Improve Re-

stricted Boltzmann Machines. In ICML.

[18] Jinseok Nam, Jungi Kim, Eneldo Loza Mencía, Iryna Gurevych, and Johannes
Fürnkranz. 2014. Large-scale Multi-label Text Classification. Revisiting Neural
Networks. In Machine Learning and Knowledge Discovery in Databases. Springer.
[19] Shengwen Peng, Ronghui You, Hongning Wang, Chengxiang Zhai, Hiroshi
Mamitsuka, and Shanfeng Zhu. 2016. DeepMeSH: deep semantic representation
for improving large-scale MeSH indexing. Bioinformatics 32, 12 (2016).

[20] Daniel Ramage, David Leo Wright Hall, Ramesh Nallapati, and Christopher D.
Manning. 2009. Labeled LDA: A supervised topic model for credit attribution in
multi-labeled corpora. In EMNLP. ACL.

[21] Jesse Read, Bernhard Pfahringer, Geoff Holmes, and Eibe Frank. 2011. Classifier

chains for multi-label classification. Machine Learning 85, 3 (2011).

[22] Stephen E Robertson, Steve Walker, Micheline Beaulieu, and Peter Willett. 1999.
Okapi at TREC-7: automatic ad hoc, filtering, VLC and interactive track. Nist
Special Publication SP (1999).

[23] Gerard Salton and Christopher Buckley. 1988. Term-weighting approaches in
automatic text retrieval. Information processing & management 24, 5 (1988).
[24] Hossein Soleimani and David J. Miller. 2016. Semi-supervised Multi-Label Topic
Models for Document Classification and Sentence Labeling. In CIKM. ACM.
[25] Eleftherios Spyromitros, Grigorios Tsoumakas, and Ioannis Vlahavas. 2008. An
empirical study of lazy multilabel classification algorithms. In Artificial Intelli-
gence. Springer.

[26] Erica Akemi Tanaka, Sérgio Ricardo Nozawa, Alessandra Alaniz Macedo, and
José Augusto Baranauskas. 2015. A multi-label approach using binary relevance
and decision trees applied to functional genomics. Journal of Biomedical Infor-
matics 54 (2015).

[27] Lei Tang, Suju Rajan, and Vijay K. Narayanan. 2009. Large scale multi-label

classification via metalabeler. In WWW. ACM.

[28] Grigorios Tsoumakas and Ioannis Katakis. 2007. Multi-Label Classification: An

Overview. IJDWM 3, 3 (2007).

[29] Grigorios Tsoumakas, Ioannis Katakis, and Ioannis P. Vlahavas. 2010. Mining
Multi-label Data. In Data Mining and Knowledge Discovery Handbook. Springer.
[30] Suppawong Tuarob, Line C Pouchard, and C Lee Giles. 2013. Automatic tag
recommendation for metadata annotation using probabilistic topic modeling. In
Joint Conf. on Digital Libraries. ACM.

[31] Princeton University. 2010. About WordNet. wordnet.princeton.edu. (2010).

Titles vs. Full-text for Automated Semantic Annotation

K-CAP 2017, December 4th-6th, 2017, Austin, Texas, United States

[32] Min-Ling Zhang and Zhi-Hua Zhou. 2006. Multilabel neural networks with
applications to functional genomics and text categorization. IEEE transactions on
Knowledge and Data Engineering 18, 10 (2006).

[33] Min-Ling Zhang and Zhi-Hua Zhou. 2007. ML-KNN: A lazy learning approach

to multi-label learning. Pattern recognition 40, 7 (2007).

[34] Tong Zhang. 2004. Solving large scale linear prediction problems using stochastic

gradient descent algorithms. In ICML. ACM.

