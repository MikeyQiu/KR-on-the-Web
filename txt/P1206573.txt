Beyond Similarity: Relation Embedding with Dual Attentions
for Item-based Recommendation

Liang Zhang1, Guannan Liu1, Junjie Wu1
1Beihang University, {zhangliang2017, liugn, wujj}@buaa.edu.cn

9
1
0
2
 
v
o
N
 
1
1
 
 
]

R

I
.
s
c
[
 
 
1
v
9
9
0
4
0
.
1
1
9
1
:
v
i
X
r
a

Abstract

Given the effectiveness and ease of use, Item-based Collab-
orative Filtering (ICF) methods have been broadly used in
industry in recent years. The key of ICF lies in the similar-
ity measurement between items, which however is a coarse-
grained numerical value that can hardly capture users’ ﬁne-
grained preferences toward different latent aspects of items
from a representation learning perspective. In this paper, we
propose a model called REDA (latent Relation Embedding
with Dual Attentions) to address this challenge. REDA is es-
sentially a deep learning based recommendation method that
employs an item relation embedding scheme through a neu-
ral network structure for inter-item relations representation.
A relational user embedding is then proposed by aggregat-
ing the relation embeddings between all purchased items of a
user, which not only better characterizes user preferences but
also alleviates the data sparsity problem. Moreover, to cap-
ture valid meta-knowledge that reﬂects users’ desired latent
aspects and meanwhile suppress their explosive growth to-
wards overﬁtting, we further propose a dual attentions mech-
anism, including a memory attention and a weight attention.
A relation-wise optimization method is ﬁnally developed for
model inference by constructing a personalized ranking loss
for item relations. Extensive experiments are implemented
on real-world datasets and the proposed model is shown to
greatly outperform state-of-the-art methods, especially when
the data is sparse.

Introduction
Recommender system has become an indispensable tool in
e-commerce sites for enabling users to discover their pre-
ferred items more efﬁciently. Numerous recommendation
methods have been proposed to improve recommendation
accuracy by inferring users’ preferences through their pur-
chasing records. Owing to the advantageous interpretabil-
ity and effectiveness, Item-based Collaborative Filtering
(ICF) methods stand out among all methods and have been
widely favored by industrial applications (Liu et al. 2017;
Smith and Linden 2017) and become a focal point of study in
recent years. Rather than adopting a handcrafted similarity
measurement in traditional ICF methods, SLIM (Ning and
Karypis 2011) and several of its variants such as FISM (Kab-
bur, Ning, and Karypis 2013) have been proposed to learn

Copyright c(cid:13) 2020, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

similarity between items by taking inner dots between the
latent representations of items.

In reality, however, two items may be deemed “similar”
due to different latent factors (i.e., relation aspects), and
users may only be driven by several desired aspects. For ex-
ample, two “similar” songs may share the same genre and
singer, but this “similarity” could be interpreted differently
for two fans; that is, one fan may be attributed to the same
genre while the other may be driven by the preferred singer.
From this perspective, an overall similarity metric in tradi-
tional ICF methods does lack adequate semantics to cap-
ture ﬁne-grained user preferences toward speciﬁc aspects of
items, which could generate ineffective recommendations,
particularly when users have only a few purchased items
without explicit intentions. This indeed motivates our study
in this paper, which aims to replace item-item similarity
in ICF with inter-item relations representation such that a
user’s preferences can be better captured by the multiple la-
tent aspects of inter-item relations.

Therefore, in this paper, we propose a deep learning based
model called REDA (latent Relation Embedding with Dual
Attentions) for item-based recommendation. REDA repre-
sents each item pair in the purchased records as an item re-
lation embedding through a neural network structure. Then,
instead of representing a user directly by an embedding vec-
tor, a relational user embedding scheme is proposed by ag-
gregating the item relation embeddings obtained from the
whole purchasing records of a user to reﬂect his/her pref-
erences in different latent aspects. Speciﬁcally, in order to
construct relational user embedding, we start from decom-
posing all the items into multiple embeddings, with each
representing a particular latent aspect. Since each embed-
ding may represent one latent aspect, we can further exploit
a crossing strategy to account for intensive interactions be-
tween different aspects of item pairs. However, not all the
latent aspects of item relations would contribute equally to
revealing users’ preferences and too many parameters from
the decomposed embedding may degrade the effectiveness
in learning the model. Thus, we further propose a dual at-
tentions mechanism to reﬁne the item relations in restricted
relation space and avoid overﬁtting. We exploit a memory
attention to store the meta-knowledge that can best depict
the desired latent aspects, and meanwhile a weight attention
mechanism to weight all the interacted embedding vectors.

These ﬁnally yield the architecture of REDA.

Moreover, based on the architecture of item relation em-
bedding, a relation-wise optimization method is further de-
veloped by constructing a personalized ranking loss for item
relations, under the assumption that users generally main-
tain stable preferences toward several latent aspects, and
then negative item relations can be sampled to construct the
relation-wise ranking loss. Extensive experiments have been
implemented on real-world datasets, and the results demon-
strated that the proposed model can outperform the state-of-
the-art methods, particularly on sparse data where users only
have a small number of purchasing records. Additionally, we
also employ a case study to show what have been learned
from the latent relation embeddings in correspondence with
the auxiliary information of items.

Related Work
Item-based Collaborative Filtering. Item-based CF meth-
ods are usually based on the principle that users prefer sim-
ilar items. In this case, traditional models often predeﬁne
some similarity measures such as cosine similarity and Pear-
son coefﬁcien. However, such heuristic similarity measure-
ment lacks optimization tailored for different datasets. Re-
cently, Ning et al. has proposed a method SLIM (Ning and
Karypis 2011) which learns item similarity directly from
data. Afterwards, Kabbur et al. further proposes FISM (Kab-
bur, Ning, and Karypis 2013) to explore the low-rank prop-
erty of the learned similarity matrix to handle data sparsity
problem. While FISM is shown to outperform recommenda-
tion approaches, it has the limitation in estimating only a sin-
gle global metric for all users. To that end, GLSLIM (Chris-
takopoulou and Karypis 2016) clusters the users and esti-
mates an independent SLIM model for every user subset,
whereas the number of clusters is difﬁcult to determine, and
thus may yield suboptimal results.

Deep Learning in Recommendation. Recently employ-
ing deep learning to help improve recommendation per-
formance has become prevailing in the research ﬁeld.
NeuMF (He et al. 2017) addresses implicit feedback by
jointly learning a matrix factorization and a feedforward
neural network. Following this research line, NNCF (Bai
et al. 2017) is further proposed as a variant that takes user
neighbors and item neighbors as inputs. Liang et al. ex-
tends NeuMF by substituting MLP with auto-encoder archi-
tecture(Liang et al. 2018). It is worth noting that all these
methods focus on the user-item latent space and overlook
the correlations in the item-item latent space. Besides the
more closely related domain of collaborative ﬁltering on im-
plicit feedback, CNN is often used to capture localized item
feature representations of images (He and McAuley 2016)
and text (Kim et al. 2016). The sequential nature of RNN
also provides desirable properties for time aware (Wu et al.
2017) and session-based recommendation systems (Hidasi
et al. 2015). However, this auxiliary information is not al-
ways available, which limits their applications in real-world
recommendation systems.

Memory Augmented Neural Networks. Memory aug-
mented neural networks have shown signiﬁcant success in
NLP research areas (Sukhbaatar et al. 2015; Kumar et al.

Figure 1: The architecture of REDA.

2016; Miller et al. 2016) recently. The key insight is using
external memory components to assist the deep neural net-
works in remembering and storing meta-knowledge. Moti-
vated by this architecture, RUM (Chen et al. 2018) replaces
common RNN with memory network to address sequential
recommendation. Gamenet (Shang et al. 2019) uses mem-
ory component to fuse multi-model graphs as memory bank
to facilitate medication combination recommendation. As
for top-n recommendation tasks, CMN (Ebesu, Shen, and
Fang 2018) introduces the memory module to store user em-
beddings as a nearest neighborhood model identifying sim-
ilar users. LRML (Tay, Anh Tuan, and Hui 2018) exploits
the key-value memory neural network to model relational
translations between user and item vectors. We follow this
trend to enhance our model by devising a memory module
to model the relations between two arbitrary items.

Methodology
The core idea of item-based CF method is to predict a user’s
rating on a target item based on the similarity between this
item and all the previously rated items of the user, which is
generally in the following form according to (Kabbur, Ning,
and Karypis 2013).

ˆyu,i = p(cid:62)
i (

1
|R+
u |α

(cid:88)

qj),

j∈R+

u \{i}

(1)

where pi and qj denote the embedding vector for item i and
j respectively, and R+
u denotes the set of items that have
been purchased by u. In this approach, the similarity is ob-
tained through the inner product between pi and qj.

However, if we take a subtle look at the similarity be-
tween item pairs, one prominent problem would naturally
arise, that is, an overall similarity cannot provide adequate
semantics to disclose speciﬁc aspects for the item pair.

Obviously, a simple inner product cannot capture such
complex relations between items, and meanwhile each user
may only desire a partial latent aspects for items. To address
this concern, one of the feasible solutions might be to de-
compose the similarity into more ﬁne-grained item relations
that could account for multiple aspects, and users’ prefer-
ences toward speciﬁc aspects can then be revealed.

Therefore, we propose a novel model latent Relation Em-
bedding with Dual Attentions (REDA) to handle the above
limitations regarding the item similarity. The overview of
the model architecture is shown in Fig. 1. We then introduce
each module of the model in detail as follows.

Item Relation Embedding

Since an overall similarity cannot adequately capture users’
ﬁne-grained preferences, we seek to better represent the re-
lation between a pair of items so as to decompose the over-
all similarity measurement. Speciﬁcally, we extend the gen-
eral idea of Item-based CF method that a user may prefer
items similar to those in their purchasing records, by adding
a more subtle assumption that the “similarity” should be ow-
ing to several particular aspects. In this regard, a pair of
items that have been bought by a same user can generate
a relation, with emphasis on several latent aspects. Notably,
a paired item may appear in different users’ records, but the
corresponding driving aspects for the item relation may dif-
fer according to the whole purchasing records of a user. For
example, two songs may share the same singer and genre,
but two different users may be keen on different aspects,
which can only be revealed by probing more item relations
of the users respectively. Thus, in order to formulate more
comprehensive item relation embeddings, we need to ﬁrstly
decompose a user’s purchasing records to paired items.

Then, we employ a special decomposed embedding layer
to represent each item by multiple embedding vectors to de-
note various aspects of the item. Speciﬁcally, each item i is
represented by a k embedding vector p1

i , · · · , pk
i .

Pair-wise Interaction Layer For a given item pair i and
j, we can obtain pi and pj ∈ Rk×d through the decomposed
embeddings, where d is the dimensionality of item embed-
dings. However, the relations between each item pair may
not be exactly captured though one-to-one mapping between
the corresponding embedding vectors. Inspired by previous
methods (Rendle 2010; Wang et al. 2017) that considers the
interaction across features, we augment the k embedding
vectors to k2 interacted vectors vi,j by crossing the embed-
dings representing different latent aspects, where vn,l
i,j is the
element-wise product of pn
j. Formally, the output of
this layer can be represented as follows,

i and pl

where (cid:12) denotes the element-wise product of two vectors.
By deﬁning this layer, we can model the interactions be-
tween items in different latent aspects.

Dual Attentions Layer Given the decomposed embed-
dings with pair-wise interactions for each item pair, we pro-
pose a dual attentions layer to derive a more delicate relation
embedding. On one hand, we need to reason which aspects
would these latent interacted embedding vectors actually im-
plicate, in which we exploit an memory attention mechanism
to reason and store valid meta-knowledge. On the other, not
all the interacted embeddings can contribute to the relation
embedding, and thus we add another weight attention to ac-
count for the importance of different interactions.

Memory Attention: One assumption we have made for
the item relations is that they can indicate several latent as-
pects between the items, e.g., the genre, the singer, the price,
and other attributed aspects of the items, which can generally
be regarded as prior knowledge for the relations. Therefore,
the core of this framework is to reason the relation aspects
of two arbitrary items from the prior knowledge, given the
interacted embeddings. This procedure is indeed similar to
answering a complex question, where the interacted embed-
ding vectors can be treated as query vector while the out-
put is the answer, namely the corresponding item relation
embedding. Following this idea, we introduce a key-value
structured memory, which is often used in question answer-
ing (Miller et al. 2016), to generate item relation embed-
ding. Through the memory attention module, useful meta-
knowledge towards a particular pair of interacted embed-
ding vector can be captured. Speciﬁcally, the memory ma-
trix is represented as M ∈ Rm×d where m is the number
of memory slices. Similarly, the key matrix is represented as
K ∈ Rm×d. For a speciﬁc interacted vector vn,l
i,j obtained in
pair-wise interaction layer, we generate corresponding item
relation embedding vector as follows.

at = vn,l

i,j k(cid:62)
t ,

˜at = softmax(at) =

exp(at)
t(cid:48) exp(at(cid:48))

,

(cid:80)

rn,l
i,j =

˜atmt,

(cid:88)

t

(3)

(4)

(5)

where at is the normalized attention score and rn,l
generated item relation embedding vector.

i,j is the

Weight Attention: Intuitively, there might exist some
trivial interactions between items, and it is unreasonable to
assign an equal weight for all interacted vectors. Therefore,
we employ the general attention mechanism which has been
widely used in many tasks. The idea is to allow different in-
teractions contribute differently when compressing them to
a single item relation representation. Speciﬁcally, the atten-
tion score of a speciﬁc interacted vector can be obtained by
a Multi-Layer Perception (MLP).

fP I (i, j) = {pn

i (cid:12) pl
j}

1≤n≤k,1≤l≤k

,

(2)

i,j = h(cid:62)ReLU(Wvn,l
an,l

i,j + b),

(6)

i,j = softmax(an,l
˜an,l

i,j ) =

exp(an,l
i,j )
n(cid:48),l(cid:48) exp(an(cid:48),l(cid:48)
i,j )

,

(cid:80)

(7)

where W ∈ Rd×s, b ∈ Rs, h ∈ Rs are model parameters,
and s denotes the hidden layer size.

Pooling Layer The output of pooling layer is a d dimen-
sion vector namely ri,j, which compress all item interac-
tions between item i and j in the relation space by distin-
guishing their importance.

ri,j =

(cid:88)

i,j rn,l
˜an,l
i,j ,

1≤n≤k,1≤l≤k

(8)

i,j is the relation embedding and an,l
where rn,l
sponding attention weight calculated by Equation (7).

i,j is the corre-

Relational User Embedding
Assuming that users would remain stable preferences toward
particular aspects in choosing items, then if we probe all the
possible item relations formed in their purchasing records,
their preferences toward certain aspects can be distilled from
the aggregated item relations. For instance, we cannot di-
rectly identify the underlying preferences for the two users
listening to the same pair of songs, but if we inspect all the
relations formed in their playlists respectively, we may ﬁnd
the songs in one playlist mostly share the same genre, while
the other concentrates on a same singer.

Therefore, personalized preferences of a user u on par-
ticular latent aspects can be disclosed through the item re-
lations decomposed from their purchasing records R+
u . By
aggregating relation embeddings between all the item pairs
of each individual user, we can map users into the same rela-
tional space to model their preferences. We refer zu to rep-
resent user embedding of user u, which can be derived by,

zu =

(cid:88)

ri,j.

i,j∈R+

u ,i(cid:54)=j

(9)

Since each user has their own purchasing records, the
aggregated item relation embeddings can concentrate their
ﬁne-grained preferences on certain latent aspects. Moreover,
an item relation embedding is learned by traversing all the
users’ purchasing records, and thus all the possible desired
latent aspects of any two co-purchased items can be captured
across users. In view of this, a relation embedding learned
from REDA is universally applicable among all the users.
Thus, even when users have only a small number of pur-
chased items, i.e., the purchasing data is sparse, the learned
relation embedding can provide adequate information to un-
cover their preferences and may still ensure good recom-
mendation performances.

Relation-wise Optimization
Traditional solution for learning Item-based CF is item-wise
optimization, which maximizes the difference between user-
interacted items and non-interacted items. Unfortunately, we

ﬁnd such a standard solution does not work well in prac-
tice. Therefore, in this paper, we propose a novel relation-
wise optimization method to guide the learning of REDA.
An underlying assumption is that users would remain stable
in their preferences for the items and therefore relations be-
tween user-interacted items tend to be more similar. Speciﬁ-
cally, given a particular user u and a user-interacted item pair
(it, jt), we randomly sample another interacted item pair
(ic, jc) of the user, and meanwhile we also sample a non-
interacted item pair (in, jn). Then, ric,jc should be more
close in the relational space with rit,jt than that with rin,jn.
Following this idea, we can construct the loss function in
view of item relations as follows.

(cid:88)

(cid:88)

L =

u∈U

it,jt∈R+
u

log σ(r(cid:62)

ic,jc

rin,jn − r(cid:62)

ic,jc

rit,jt).

(10)

Here, we name rit,jt as positive relation, ric,jc as context
relation and rin,jn as negative relation. The relation-wise
optimization is to maximize the distance between negative
relation and context relation while minimize the distance be-
tween positive relation and context relation simultaneously.

Recommendation Score
Similar to traditional Item-based CF, when evaluating the
recommendation score of user u for a target item i given
the learned representations, we need to revisit the relations
between i and each item j that has ever been purchased by
u, which can be approximated by,

ˆyu,i =

1
|R+
u |

(cid:88)

z(cid:62)
u ri,j.

j∈R+

u \{i}

(11)

Compared to Equation (1), the main difference is to re-
place the global similarity metric p(cid:62)
i qj with personalized
preferences on relation aspects z(cid:62)
u ri,j. When generating rec-
ommendations for u, we simply need to rank candidate items
according to the recommendation score and select the ones
with highest scores as the items to be recommended.

Experiment
In this section, we ﬁrst evaluate the model performance in
terms of recommendation accuracy, and analyze the inﬂu-
ences of each component respectively (i.e., the pair-wise in-
teraction layer and memory attention layer). Then we con-
duct experiments to demonstrate the robustness and data
sparsity tolerance of our model. Finally, we give a short pa-
rameter sensitivity discussion and a case study to explain
what the latent relation embeddings represent.

Experimental Setup
Data Sets. We evaluate our method on four real-world
datasets with diverse sizes and interaction intensity, which
are all publicly available datasets to validate recommenda-
tion algorithms including Delicious1, LastFM2, Amazon-

1http://www.delicious.com
2http://last.fm

Table 1: Data statistics.

# users

# items

# actions % Density

Delicious
LastFM
Amazon-Music
Goodreads-Poetry

1779
1877
19847
45096

68326
17543
95426
31604

102822
90924
181124
540546

0.08
0.27
0.01
0.04

Music3 (McAuley et al. 2015), and Goodreads-Poetry4 (Wan
and McAuley 2018). In this paper, we treat rating larger than
3 as positive feedback, and only retain users having more
than 5 actions. The detailed statistics of all the datasets are
reported in Table 1.

Baseline Methods. The following SOTA methods are ap-
plied as baselines in our experiments.

NMF (Paatero and Tapper 2010): NMF is a widely used
collaborative ﬁltering approach, which factorizes the inter-
action binary matrix.

BPR-MF (Rendle et al. 2009): BPR-MF is a well-known
top-n recommendation method, which uses the Bayesian
personalized ranking optimization criterion on factorization.
FISM (Kabbur, Ning, and Karypis 2013): FISM is a state-
of-the-art item-based CF method which learns global item
similarities from user-item interactions.

NeuMF (He et al. 2017): NeuMF is a uniﬁed framework
to combine MF with MLP. NeuMF concatenates the output
of MF and MLP, and uses a regression layer to predict user
item rating.

CML (Hsieh et al. 2017): CML is a state-of-the-art metric
based CF method, which learns a joint metric space by en-
coding both users’ preferences and similarity between users
and items.

LRML (Tay, Anh Tuan, and Hui 2018): LRML extends
CML by explicitly modeling relational translations between
user and item vectors.

In this section, we adopt

Experimental Settings.
the
leave-one-out evaluation strategy, that is, for each user, we
hold-out one purchased item as test set and the remaining
is used for training. Since it is too time-consuming to rank
all the items for every user during evaluation, we follow the
experimental settings in (He et al. 2017) which randomly
samples 100 negative items of each user and rank the recom-
mendation score among the 100 items. We evaluate the per-
formances of REDA based on HR@N and nDCG@N given
the top-N ranked items.

The parameter settings of different methods are stated as
follows. For our method, we set the mini-batch size, the
learning rate of the Adam (Kingma and Ba 2014), the hidden
layer size s, the embedding size d to be 2000, 0.001, 10 and
128 respectively. The number of memory slices m is tuned
amongst {5,10,20,30,40,50}, and the number of k for pair-
wise interaction layer is tuned amongst {2,3,4,5,10}. As for
the baseline methods, we apply default parameters except

3https://www.amazon.com
4https://www.goodreads.com

for the embedding size d, which is ﬁxed to be 128 for all the
methods. More detailed discussions about parameter sensi-
tivity of our model will be given in the following subsection.

Performance Comparisons
We show the recommendation performance of different
methods in Table 2, where the best performance is in bold-
face and second best is underlined. We can ﬁnd that the pro-
posed model is consistently better than all the baselines as
measured by HR and nDCG in all the datasets, while the
second best is relatively unstable, showing that the model
REDA is more robust against various settings. Moreover,
REDA achieves the greatest improvement on Amazon-Music
with the most sparse ratings among the four datasets, which
indicate that the model is capable of handling data sparsity
issues and more results will be shown on this. NeuMF gen-
erally performs better than other baseline methods in many
cases, however it does not perform well on Amazon-Music.
It is worth mentioning that REDA is much better than FISM,
which may be possibly due to that the decomposed similar-
ity through item relation embedding can capture ﬁne-grained
user preferences. Among the baselines, the performance of
NeuMF is often better than other methods in most cases. In
contrast, CML seems to perform reasonably well only on
Goodreads-Poetry, the relatively larger and denser dataset,
which may indicate that CML cannot handle data sparsity
issues. In addition, the performance of LRML is not satis-
factory on all datasets though the relations between items
and users are explicitly modeled with a memory network. A
possible reason might be that the relations are too complex
to be effectively modeled with limited memory slices. While
in our case, item relations are relatively stable and limited,
hence may be explained by several aspects.

Model Discussion
We further inspect how each module of the model affects the
performances in Figure 2. Speciﬁcally, by removing the pair-
wise interaction layer and memory attention layer, we can
obtain two simple versions of our model, namely REDA-
NPIL and REDA-NMAL respectively. Here, removing the
pair-wise interaction layer means we just have one embed-
ding for each item and one interacted vector for each item
pair. We observe that the complete REDA improves REDA-
NMAL for at least 8% in both metrics, showing that memory
attention layer is a key component and greatly affects model
performances. Moreover, REDA is consistently better than
REDA-NPIL in all the settings, meaning that multiple item
embeddings can indeed capture item combinations in differ-
ent latent aspects more precisely.

Data Sparsity
In real-world recommendations, data sparsity is one big
challenge because most users only have sparse purchas-
ing records. In this section, we proceed to further explore
whether the proposed model can address this challenge. To
that end, we conduct comparative experiments on several fo-
cal groups of users under different sparsity settings. Specif-
ically, we still adopt the leave-one-out evaluation strategy,

Table 2: Experimental results on four real-world datasets.

Method

NMF
BPR-MF
FISM
CML
LRML
NeuMF

REDA

0.4942
0.4665
0.3966
0.4825
0.4018
0.5423

0.5754

Delicious

LastFM

Amazon-Music

Goodreads-Poetry

HR@10

nDCG@10 HR@10

nDCG@10 HR@10

nDCG@10 HR@10

nDCG@10

0.2960
0.2753
0.2547
0.3714
0.2932
0.3873

0.4320

0.7766
0.6138
0.7273
0.7039
0.6218
0.7715

0.7944

0.4996
0.3444
0.5145
0.4729
0.4064
0.5186

0.5288

0.6062
0.5268
0.6173
0.5278
0.4559
0.5936

0.6738

0.4358
0.3574
0.4078
0.3795
0.2758
0.4154

0.4952

0.6904
0.7756
0.7843
0.8251
0.7459
0.8322

0.8862

0.5541
0.6161
0.6365
0.7046
0.5816
0.7015

0.7486

(a) HR

(b) nDCG

Figure 2: Module inﬂuences on model performances.

(a) HR

(b) nDCG

Figure 4: Model performances with varying ratios of actions.

(a) HR@10

(b) nDCG@10

Figure 3: Improvement achieved by REDA over other meth-
ods as data sparsity increases

and group users according to the number of their actions to
derive the recommendation performances. Figure 3 shows
the experimental results on different groups of users, where
we present the actual improvement of REDA over baseline
methods NeuMF and FISM. It is obvious that REDA out-
performs both NeuMF and FISM increasingly as sparsity
grows, i.e., the number of actions decreases. NeuMF can
achieve comparable performances as REDA when the num-
ber of user actions larger than 30, but will drop rapidly when
data becomes sparse. This result well demonstrates the ef-
fectiveness of REDA in handling sparsity issues due to the
intensive learned relation embeddings.

Model Robustness
The computational bottleneck of the proposed model when
computing recommendation score lies in that we need to re-
visit the relation embedding between the target item and all
the previously items of the user according to Equation (11),

which can be rather time consuming. Thus, we further vali-
date whether our model can produce robust results if we only
retain a partial relations with varying ratios ranging from 0.2
to 1.0 to make recommendation. As shown in Figure 4, we
can see that the model performs quite robust against differ-
ent ratios, with the largest difference being less than 2%. It
is also interesting to discover that using all user actions does
not always produce the best results. For example, nDCG@5
and nDCG@10 achieve the best when only 80% actions are
available, which may be due to the fact that some relations
may not indicate preferences and can be neglected. Thus,
in the real scenarios, we only need to randomly sample a
small number of user actions when making recommenda-
tions, which allows us to recommend more efﬁciently.

Parameter Sensitivity
In this section, we examine the sensitivity of two important
parameters, i.e., the embedding size d and the number of
memory slices m.

Embedding size. Figure 5a demonstrates the impact of
embedding size on the results. It’s easy to ﬁnd that 64 is
the best embedding size for HR while 32 is the best embed-
ding size for nDCG. In addition, nDCG seems to be more
sensitive to this parameter. We can see the performance of
nDCG ﬁrst increases along with d, and then begins to be
stable when d is larger than 32.

The number of memory slices. From the results shown
in Figure 5b, we can ﬁnd that both HR and nDCG achieve
best at m = 20. A possible reason is that when m is rela-
tively small, the memory attention layer lacks ability to cap-
ture multiple relations between items; while when m is too
big, the model might be overﬁtting.

(a) d

(b) m

Figure 5: Impact of hyper-parameters on model performances

Figure 6: A show case of learned item relations.

In general, the performances remain relatively stable in all

the settings, which shows the robustness of the method.

Case Study
We introduce auxiliary information such as item attributes to
help us uncover what the model is learning, which is not pro-
vided during model training. We ﬁrstly select several item
pairs which share a certain genre, e.g., Rock and Pop, and
then obtain their item relation embeddings from the model.
For the sake of visualization, we exploit t-SNE (van der
Maaten and Hinton 2008) to project the derived relation em-
beddings to two-dimensional space as shown in Figure 6.
Each group in this ﬁgure represents a special item relation.
Firstly, as seen in Figure 6, the derived item relation embed-
dings for music with different genres are separated, showing
that REDA does capture ﬁne-grained item relations in dif-
ferent aspects, and these aspects can be explained as several
item attributes which are indeed not available during model
training. In addition, we can discover that the relation em-
beddings of Rock and Pop music has more overlaps, while
House and New Wave are clearly separated apart from each
other. The underlying reason might be that the two genres
Rock and Pop are both popular types music and many users
would like both genres, and hence the item relations formed
in these two groups may not be solely attributed to the genre.
In contrast, House and New Wave are relatively niche music
and the item relations formed within each group are rela-
tively pure and thus the embeddings can be well separated.
The meaning of learned user representations is also ex-
plored in this section. We ﬁrst select several users who prefer
music with a certain genre as an illustrative case. Then, we
exploit softmax function to derive user representations ag-

Figure 7: A show case of learned user representations.

gregated from item relation embeddings for the sake of visu-
alization. Speciﬁcally, u74, u598 and u3994 is keen on Rock
while u329, u344 and u508 prefer Hip-Hop most. As shown
in Figure 7, we can discover that Rock users are mostly as-
sociated with a relatively uniform distribution on the dimen-
sion d2 and d8. While for Hip-Hop users, d2 is the absolutely
dominant dimension.

To conclude, despite being only trained on implicit in-
teractions arise from co-purchase records, the model REDA
can still encode latent aspects of item pairs and can provide
richer semantics than an overall similarity.

Conclusion
In this paper, we propose a personalized Item-based CF
framework REDA to model the latent item relations for
recommendation. By mapping the paired item into a rela-
tion space through a dual attention mechanism, REDA de-
composes the overall similarity into multiple item relations.
Meanwhile, a special embedding method namely relational
user embedding is exploited to capture the ﬁne-grained user
preference and alleviate data sparsity problem simultane-
ously. In addition, a novel and efﬁcient relation-wise opti-
mization method is proposed to guide the learning of REDA.
Experiments on four real-world datasets demonstrate the su-
periority of REDA, and the improvements increase as the
datasets become sparser. The model robustness is also ex-
plored for faster recommendation with minimal reduction
in the recommendation quality. Moreover, qualitative analy-
sis further demonstrates that attribute information is actually
encoded despite being only trained on implicit interactions.

2016.

Local

E.,
item-item models for
In Proceedings of the 10th ACM

References
[Bai et al. 2017] Bai, T.; Wen, J.-R.; Zhang, J.; and Zhao,
W. X. 2017. A neural collaborative ﬁltering model with
interaction-based neighborhood. In Proceedings of the 2017
ACM on Conference on Information and Knowledge Man-
agement, 1979–1982. ACM.
[Chen et al. 2018] Chen, X.; Xu, H.; Zhang, Y.; Tang, J.;
Cao, Y.; Qin, Z.; and Zha, H. 2018. Sequential recommen-
dation with user memory networks. In Proceedings of the
eleventh ACM international conference on web search and
data mining, 108–116. ACM.
[Christakopoulou and Karypis 2016] Christakopoulou,
and Karypis, G.
top-n recommendation.
Conference on Recommender Systems, 67–74. ACM.
[Ebesu, Shen, and Fang 2018] Ebesu, T.; Shen, B.; and Fang,
Y. 2018. Collaborative memory network for recommenda-
tion systems. In The 41st International ACM SIGIR Confer-
ence on Research & Development in Information Retrieval,
515–524. ACM.
[He and McAuley 2016] He, R., and McAuley, J.
2016.
Vbpr: visual bayesian personalized ranking from implicit
feedback. In Thirtieth AAAI Conference on Artiﬁcial Intelli-
gence.
[He et al. 2017] He, X.; Liao, L.; Zhang, H.; Nie, L.; Hu, X.;
and Chua, T.-S. 2017. Neural collaborative ﬁltering. In Pro-
ceedings of the 26th international conference on world wide
web, 173–182. International World Wide Web Conferences
Steering Committee.
[Hidasi et al. 2015] Hidasi, B.; Karatzoglou, A.; Baltrunas,
Session-based recommenda-
L.; and Tikk, D.
arXiv preprint
tions with recurrent neural networks.
arXiv:1511.06939.
[Hsieh et al. 2017] Hsieh, C.-K.; Yang, L.; Cui, Y.; Lin, T.-
Y.; Belongie, S.; and Estrin, D. 2017. Collaborative metric
In Proceedings of the 26th international confer-
learning.
ence on world wide web, 193–201. International World Wide
Web Conferences Steering Committee.
[Kabbur, Ning, and Karypis 2013] Kabbur, S.; Ning, X.; and
Karypis, G. 2013. Fism: factored item similarity models
for top-n recommender systems. In Proceedings of the 19th
ACM SIGKDD international conference on Knowledge dis-
covery and data mining, 659–667. ACM.
[Kim et al. 2016] Kim, D.; Park, C.; Oh, J.; Lee, S.; and Yu,
H.
2016. Convolutional matrix factorization for docu-
ment context-aware recommendation. In Proceedings of the
10th ACM Conference on Recommender Systems, 233–240.
ACM.
[Kingma and Ba 2014] Kingma, D. P., and Ba, J.
2014.
Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980.
[Kumar et al. 2016] Kumar, A.; Irsoy, O.; Ondruska, P.;
Iyyer, M.; Bradbury, J.; Gulrajani, I.; Zhong, V.; Paulus, R.;
and Socher, R. 2016. Ask me anything: Dynamic memory
networks for natural language processing. In International
conference on machine learning, 1378–1387.

2015.

[Liang et al. 2018] Liang, D.; Krishnan, R. G.; Hoffman,
M. D.; and Jebara, T. 2018. Variational autoencoders for
In Proceedings of the 2018 World
collaborative ﬁltering.
Wide Web Conference, 689–698. International World Wide
Web Conferences Steering Committee.
[Liu et al. 2017] Liu, D. C.; Rogers, S.; Shiau, R.; Kislyuk,
D.; Ma, K. C.; Zhong, Z.; Liu, J.; and Jing, Y. 2017. Re-
lated pins at pinterest: The evolution of a real-world recom-
In Proceedings of the 26th International
mender system.
Conference on World Wide Web Companion, 583–592. In-
ternational World Wide Web Conferences Steering Commit-
tee.
[McAuley et al. 2015] McAuley, J.; Targett, C.; Shi, Q.; and
Van Den Hengel, A. 2015. Image-based recommendations
on styles and substitutes. 43–52. ACM.
[Miller et al. 2016] Miller, A.; Fisch, A.; Dodge, J.; Karimi,
A.-H.; Bordes, A.; and Weston, J. 2016. Key-value mem-
ory networks for directly reading documents. arXiv preprint
arXiv:1606.03126.
[Ning and Karypis 2011] Ning, X., and Karypis, G. 2011.
Slim: Sparse linear methods for top-n recommender sys-
tems. In 2011 11th IEEE International Conference on Data
Mining, 497–506. IEEE.
[Paatero and Tapper 2010] Paatero, P., and Tapper, U. 2010.
Positive matrix factorization: A non-negative factor model
with optimal utilization of error estimates of data values. En-
vironmetrics 5(2):111–126.
[Rendle et al. 2009] Rendle, S.; Freudenthaler, C.; Gantner,
Z.; and Schmidt-Thieme, L. 2009. Bpr: Bayesian person-
In Proceedings of
alized ranking from implicit feedback.
the twenty-ﬁfth conference on uncertainty in artiﬁcial intel-
ligence, 452–461. AUAI Press.
[Rendle 2010] Rendle, S. 2010. Factorization machines. In
2010 IEEE International Conference on Data Mining, 995–
1000. IEEE.
[Shang et al. 2019] Shang, J.; Xiao, C.; Ma, T.; Li, H.; and
Sun, J. 2019. Gamenet: Graph augmented memory net-
works for recommending medication combination. In Pro-
ceedings of the AAAI Conference on Artiﬁcial Intelligence,
volume 33, 1126–1133.
[Smith and Linden 2017] Smith, B., and Linden, G. 2017.
Two decades of recommender systems at amazon. com. Ieee
internet computing 21(3):12–18.
[Sukhbaatar et al. 2015] Sukhbaatar, S.; Weston, J.; Fergus,
R.; et al. 2015. End-to-end memory networks. In Advances
in neural information processing systems, 2440–2448.
[Tay, Anh Tuan, and Hui 2018] Tay, Y.; Anh Tuan, L.; and
Hui, S. C.
2018. Latent relational metric learning via
memory-based attention for collaborative ranking. In Pro-
ceedings of the 2018 World Wide Web Conference, 729–739.
International World Wide Web Conferences Steering Com-
mittee.
[van der Maaten and Hinton 2008] van der Maaten, L., and
Hinton, G. E. 2008. Visualizing high-dimensional data us-
ing t-sne. JMLR 9:2579–2605.

[Wan and McAuley 2018] Wan, M., and McAuley, J. 2018.
Item recommendation on monotonic behavior chains.
In
Proceedings of the 12th ACM Conference on Recommender
Systems, 86–94. ACM.
[Wang et al. 2017] Wang, R.; Fu, B.; Fu, G.; and Wang, M.
2017. Deep & cross network for ad click predictions.
In
Proceedings of the ADKDD’17, 12. ACM.
[Wu et al. 2017] Wu, C.-Y.; Ahmed, A.; Beutel, A.; Smola,
A. J.; and Jing, H. 2017. Recurrent recommender networks.
In Proceedings of the tenth ACM international conference
on web search and data mining, 495–503. ACM.

