8
1
0
2
 
p
e
S
 
6
 
 
]

V
C
.
s
c
[
 
 
3
v
5
7
0
0
1
.
3
0
8
1
:
v
i
X
r
a

A Framework for Evaluating
6-DOF Object Trackers

Mathieu Garon[0000−0003−1811−4156], Denis Laurendeau[0000−0003−2858−5955] and
Jean-Fran¸cois Lalonde[0000−0002−6583−2364]

Universit´e Laval(cid:63)(cid:63)

Abstract. We present a challenging and realistic novel dataset for eval-
uating 6-DOF object tracking algorithms. Existing datasets show serious
limitations—notably, unrealistic synthetic data, or real data with large
ﬁducial markers—preventing the community from obtaining an accurate
picture of the state-of-the-art. Using a data acquisition pipeline based
on a commercial motion capture system for acquiring accurate ground
truth poses of real objects with respect to a Kinect V2 camera, we build
a dataset which contains a total of 297 calibrated sequences. They are ac-
quired in three diﬀerent scenarios to evaluate the performance of trackers:
stability, robustness to occlusion and accuracy during challenging inter-
actions between a person and the object. We conduct an extensive study
of a deep 6-DOF tracking architecture and determine a set of optimal
parameters. We enhance the architecture and the training methodology
to train a 6-DOF tracker that can robustly generalize to objects never
seen during training, and demonstrate favorable performance compared
to previous approaches trained speciﬁcally on the objects to track.

Keywords: 3D object tracking, databases, deep learning

1 Introduction

With the recent emergence of 3D-enabled augmented reality devices, tracking 3D
objects in 6 degrees of freedom (DOF) is a problem that has received increased
attention in the past few years. As opposed to SLAM-based camera localization
techniques—now robustly implemented on-board various commercial devices—
that can use features from the entire scene, 6-DOF object tracking approaches
have to rely on features present on a (typically small) object, making it a chal-
lenging problem. Despite this, recent approaches have demonstrated tremendous
performance both in terms of speed and accuracy [1–3].

Unfortunately, obtaining an accurate assessment of the performance of 6-
DOF object tracking approaches is becoming increasingly diﬃcult since accuracy
on the main dataset used for this purpose has now reached closed to 100%.
Introduced in 2013 by Choi and Christensen [4], their dataset consists of 4 short
sequences of purely synthetic scenes. The scenes are made of unrealistic, texture-
less backgrounds with a single colored object to track, resulting in noiseless

(cid:63)(cid:63)

mathieu.garon.2@ulaval.ca, denis.laurendeau@gel.ulaval.ca, jflalonde@gel.ulaval.ca

2

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

(a) Choi-Christensen [4]

(b) Garon-Lalonde [3]

(c) Ours

Fig. 1. Comparison of datasets for evaluating 6-DOF tracking algorithms. Typical
RGB (top) and depth (bottom) frames for (a) the synthetic dataset of Choi and Chris-
tensen [4], (b) the real dataset of Garon and Lalonde [3], and (c) ours. Compared to
the previous work, our dataset contains real objects captured by a sensor, and does
not use a calibration board, therefore mimicking realistic real-world scenarios.

RGBD images (see ﬁg. 1-(a)). The object is static and the camera rotates around
it in wide motions, occasionally creating small occlusions (at most 20% of the
object is occluded). While challenging at ﬁrst, the dataset has now essentially
been solved for the RGBD case. For example, the method of Kehl et al. [1]
(2017) reports an average error in translation/rotation of 0.5mm/0.26◦, which
is an improvement of 0.3mm/0.1◦ over the work of Tan et al. (2015) [5], who
have themselves reported a 0.01mm/1◦ improvement to the approach designed
by Krull et al. (2014) [6]. The state of the art on the dataset has reached a near-
perfect error of 0.1mm/0.07◦ [2], which highlights the need for a new dataset
with more challenging scenarios.

Another dataset, introduced by Garon and Lalonde [3], includes 12 sequences
of real objects captured with real sensors. While a signiﬁcant improvement over
the synthetic dataset of [4], dealing with real data raises the issue of providing
accurate ground truth pose of the object at all times. To obtain this ground truth
information, their strategy (also adopted in 6-DOF detection datasets [7, 8])
is to use calibration boards with ﬁducial markers. While useful to accurately
and easily determine an object pose, this has the unfortunate consequence of
constraining the object to lie on a large planar surface (ﬁg. 1-(b)).

In this paper, we present a novel dataset allowing the systematic evaluation of
6-DOF tracking algorithms in a wide variety of real scenarios without requiring
calibration boards (ﬁg. 1-(c)). Our dataset is one order of magnitude larger than
the previous work: it contains 297 sequences of 11 real objects. The sequences
are split into 3 diﬀerent scenarios, which we refer to as stability, occlusion, and
interaction. The stability scenario aims at quantifying the degree of jitter in a
tracker. The object is kept static and placed at various angles and distances from
the camera. The occlusion scenario, inspired by [3], has the object rotating on a
turntable and being progressively occluded by a ﬂat panel. Occlusion ranges from

A Framework for Evaluating 6-DOF Object Trackers

3

0% (unoccluded) to 75%, thereby testing trackers in very challenging situations.
Finally, in the interaction scenario, a person is moving the object around freely
in front of the camera (ﬁg. 1-(c)), creating occlusions and varying object speed.
In addition, we also introduce two new 6-DOF real-time object trackers based
on deep learning. The ﬁrst, trained for a speciﬁc object, achieves state-of-the-art
performance on the new dataset. The second, trained without a priori knowledge
of the object to track, is able to achieve an accuracy that is comparable with
previous work trained speciﬁcally on the object. These two trackers rely on the
same deep learning architecture and only diﬀer in the training data. Furthermore,
both of our trackers have the additional signiﬁcant advantage of requiring only
synthetic training data (i.e. no real data is needed for training). We believe this
is an exciting ﬁrst step in the direction of training generic trackers which do not
require knowledge of the object to track at training time.

In summary, this paper brings 3 key contributions to 6-DOF object tracking:

1. A novel dataset of real RGBD sequences for the systematic evaluation of 6-
DOF tracking algorithms that is one order of magnitude larger than existing
ones, and contains 3 challenging scenarios;

2. A real-time deep learning architecture for tracking objects in 6-DOF which
is more stable and more robust to occlusions than previous approaches;
3. A generic 6-DOF object tracker trained without knowledge of the object
to track, achieving performance on par with previous approaches trained
speciﬁcally on the object.

2 Related work

There are two main relevant aspects in 6-DOF pose estimation: single frame
object detection and multi-frame temporal trackers. The former has received
a lot of attention in the literature and beneﬁts from a large range of public
datasets. The most notorious dataset is arguably Linemod [7], which provide 15
objects with their mesh models and surface colors. To obtain the ground truth
object pose, a calibration board with ﬁducial markers is used. Since then, many
authors created similar but more challenging benchmarks [8–10]. However these
datasets do not contain temporal and displacement correlation between each
frame, which makes them inadequate for evaluating temporal trackers.

In the case of temporal tracking, only a few datasets exist to evaluate the
approaches. As mentioned in the introduction, the current, widely used standard
dataset is the synthetic dataset of Choi and Christensen [4], which contains
4 sequences with 4 objects rendered in a texture-less virtual scene. Another
available option is the one provided by Akkaladevi et al. [11] who captured a
single sequence of a scene containing 4 diﬀerent objects with a Primesense sensor.
However, the 3D models are not complete and do not include training data that
could be exploited by learning-based methods. Finally, recent work by Garon
and Lalonde [3] proposed a public dataset of 4 objects containing 4 sequences
with clutter and an additional set of 8 sequences with controlled occlusion on
a speciﬁc object. Fiducial markers are used to generate the ground truth pose

4

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

of the model, which limits the range of displacements that can be achieved. In
contrast, we propose a new method to collect ground truth pose data that makes
the acquisition simpler without the need for ﬁducial markers.

There is an increasing interest in 6-DOF temporal trackers since they were
shown to be faster and more robust than single frame detection methods. In the
past, geometric methods based on ICP [4,12–14] were used for temporal tracking,
but they lack robustness for small objects and are generally computationally
expensive. Data-driven approaches such as the ones reported in [5,6,15] can learn
more robust features and the use of the Random Forest regressor [16] decreases
the computing overhead signiﬁcantly. Other methods show that the contours of
the objects in RGB and depth data provide important cues for estimating pose [1,
2, 17]. While their optimization techniques can be accurate, many assumptions
are made on the features which restrict the type of object and the type of
background that can be dealt with. Recently, Garon and Lalonde [3] proposed
a deep learning framework which can learn robust features automatically from
data. They use a feedback loop by rendering the 3D model at runtime at the
previous pose, and regress the pose diﬀerence between the rendered object and
the real image. While their method compares to the previous work with respect
to accuracy, their learned features are more robust to higher level of occlusion
and noise. A downside is that their method needs a dataset of real images and a
speciﬁc network has to be trained for each object which can be time consuming.
We take advantage of their architecture but introduce novel ideas to provide
a better performing tracker that can be trained entirely on synthetic data. In
addition, our network can be trained to generalize to previously unseen objects.

3 Dataset capture and calibration

Building a dataset with calibrated object pose w.r.t the sensor at each frame is
a challenging task since it requires an accurate method to collect ground truth
object pose. Until now, the most practical method to achieve this task was to
use ﬁducial markers and calibrate the object pose w.r.t these markers [3, 7–9].
However, this method suﬀers from two main drawbacks. First, the object cannot
be moved independently of the panel so this restricts the camera to move around
the object of interest. Second, the scene always contains visual cues (the markers)
which could involuntarily “help” the algorithms.

Our approach eliminates these limitations. A ViconTM MX-T40 motion cap-
ture system is used to collect the ground truth pose of the objects in the scene.
The retroreﬂective Vicon markers that must be used are very small in size (3mm
diameter) and can be automatically removed in a post-processing step. In this
section, we describe the capture setup and the various calibration steps needed
to align the object model and estimate its ground truth pose. The resulting
RGBD video sequences captured using this setup are presented in sec. 4.

A Framework for Evaluating 6-DOF Object Trackers

5

(a)

(b)

Fig. 2. Acquisition setup used to capture our novel dataset. (a) Actual setup, which
includes an 8-camera Vicon motion capture system and a Kinect V2. The resulting
view from the Kinect is shown in the inset. Here, an occluder is placed in front of
the object. (b) The various transformations that must be calibrated in order to obtain
the object pose in the Kinect RGB camera reference frame Tknt
obj. The transformations
shown in black are obtained from the motion capture system directly, while the gray
ones need a speciﬁc calibration procedure described in the main body of the paper.

3.1 Capture setup

The motion capture setup is composed of a set of 8 calibrated cameras that track
retro-reﬂective markers of 3mm in diameter installed on the objects of interest in
a 3 × 3 × 3m3 work area. Vicon systems can provide a marker detection accuracy
of up to 0.15 mm on static objects and 2mm on moving objects according to [18].
A Kinect V2 is used to acquire the RGBD frames, and is calibrated with the
Vicon to record the ground truth pose of the objects in the Kinect coordinate
system. The actual setup used to capture the dataset is shown in ﬁg. 2-(a).

3.2 Calibration

With an RGB-D sensor such as the Kinect V2, color and depth values are pro-
jected onto two diﬀerent planes. We deﬁne the Kinect reference frame (“knt”)
as the origin of its RGB camera, and align the depth data by reprojecting it to
the color plane using the factory calibration parameters. We calibrate the depth
a is used to denote
correction as in Hodan et al. [8]. In this section, the notation Tb
a rigid transformation from reference frame “a” to “b”.

We aim to recover the pose of the object in the Kinect reference frame Tknt
(ﬁg. 2-(b)). To do so, we ﬁrst rely on the Vicon motion capture system, which
has its own reference frame “vcn”. The set of retroreﬂective markers installed on
the object deﬁne the local reference frame “objm”. Similarly, the set of markers
placed on the Kinect deﬁne the local reference frame “kntm”. The Vicon sys-
tem provides the transformations Tvcn
kntm directly, that is, the mappings
between the object and Kinect markers and the Vicon reference frame respec-
tively. The transformation between the object markers and the Kinect markers

objm and Tvcn

obj

6

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

is obtained by chaining the previous transformations:

Tkntm

objm = (Tvcn

kntm)−1Tvcn

objm .

The pose Tknt
deﬁned by the markers and the object/Kinect reference frames Tobjm

obj is recovered with the transformations between the local frames
knt :
obj and Tkntm

Tknt

obj = (Tkntm

knt )−1Tkntm

objmTobjm

obj

.

The calibration procedures needed to obtain these two transformations, also
shown in gray in ﬁg. 2-(b), are detailed next.

(1)

(2)

Kinect calibration In order to ﬁnd the transformation Tknt
kntm between the local
frame deﬁned by the markers installed on the Kinect and its RGB camera, we
rely on a planar checkerboard target on which Vicon markers are randomly
placed. Then, the position of each corner of the checkerboard is determined with
respect to the markers with the following procedure. A 15cm-long pen-like probe
that has a 1cm Vicon marker attached at one end was designed for this purpose.
The sharp end is placed on the corner to be detected, and the probe is moved in
a circular motion around that point. A sphere is then ﬁt (using least-squares) to
the resulting marker positions (achieving an average radius estimation error of
0.7mm), and the center of the sphere is kept as the location for the checkerboard
corner. The checkerboard target was then moved in the capture volume and
corners were detected by the Kinect RGB camera, thereby establishing 2D-3D
correspondences between these points. The perspective-n-points algorithm [19]
was ﬁnally used to compute Tknt

kntm.

Object calibration To estimate the transformation between the local frame
deﬁned by the markers placed on the object and its mesh coordinate system Tobj
objm,
we rely on the Kinect pose calibrated with the method described previously. As
a convention, we deﬁne the origin of the object local coordinate system at the
center of mass of the markers, the same convention is used for the mesh by using
the center of mass of the vertices. We roughly align the axis and use ICP to
reﬁne its position (based on the Kinect depth values). Finally, with the help of a
visual interface where a user can move and visualize the aligment of the object,
ﬁne-scale adjustments can be performed manually from several viewpoints to
minimize the error between the observed object and the reprojected mesh.

Synchronization In addition to spatial calibration, precise temporal alignment
must be achieved to synchronize Vicon and Kinect frames. Unfortunately, the
Kinect does not oﬀer hardware synchronization capabilities, therefore we adopt
the following software solution. We assume that the sequences are short enough
to neglect clock drift. We also assume a stable sampling of the Vicon system on
a high bandwidth closed network. In this setup, synchronization can be achieved
by estimating the (constant) time diﬀerence δt between the Vicon and the Kinect

A Framework for Evaluating 6-DOF Object Trackers

7

Fig. 3. Example of an RGB and depth frame containing 2 markers on a ﬂat surface,
and 2 markers near an edge. We take advantage of our knowledge of the object mesh
and pose to replace patches of 10 × 10 pixels around the marker by the depth values
of a render at the same pose. We capture an image without the markers to compare
the error. On the modiﬁed patches we report a RMSE of 139.8 mm on the depth with
the markers, and 4.7 with the corrected version.

frame timestamps. By moving the checkboard of sec.3.2 with varying speed, we
estimate the δt that minimizes the reprojection error between the checkerboard
corners from sec. 3.2 and the Vicon markers.

Removing the markers The 3mm markers used to track the object are retro-
reﬂective and, despite their small size and their low number (7 per object on
average), they nevertheless create visible artifacts in the depth data measured by
the Kinect, see ﬁg. 3. We propose a post-processing algorithm for automatically
removing them in all the sequences. First, to ensure that the marker can be
observed by the Kinect we reproject the (known) marker positions onto the depth
image and compute the median distance between the depth in a small window
around the reprojected point and its ground truth depth. If the diﬀerence is
less than 1cm, the point is considered as not occluded, and will be processed.
Finally, we render the depth values of the 3D model at the given pose and
replace the 10 × 10 pixel window from the original image with the rendered
depth values. For more realism, a small amount of gaussian noise is added. Pixels
from the background are simply ignored. On average, only 3.4% of the object
pixels are corrected. We also minimize the chances of aﬀecting the geometric
structure of the object by placing the markers on planar surfaces. Fig. 3 shows a
comparison of the error between a Kinect depth image captured with markers,
and another image of the same scene with markers that have been corrected with
our algorithm. The RMSE of the pixel patches around the markers is 139.8 mm
without the correction, and 4.7 mm with the correction.

4 Dataset scenarios, metrics, and statistics

This section deﬁnes novel ways to evaluate 6-DOF trackers using calibrated
sequences captured with the setup presented in sec. 3. We provide an evaluation

8

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

methodology that will reﬂect the overall performance of a tracker in diﬀerent
scenarios. To attain this objective, we captured 297 sequences of 11 diﬀerent
objects of various shapes in 3 scenarios: stability, occlusion, and interaction. We
also provide quantitative metrics to measure the performance in each scenario.
Our dataset and accompanying code is available at http://www.jflalonde.ca/
projects/6dofObjectTracking.

4.1 Performance metrics

Before we describe each scenario, we ﬁrst introduce how we propose to evaluate
the diﬀerence between two poses P1 and P2. Here, a pose P = (cid:2) R t (cid:3) is described
by a rotation matrix R and a translation vector t. Previous works consider the
average of each axis component in translation and rotation separately. The side
eﬀect of this metric is that a large error on a single component is less penalized.
To overcome this limitation, the translation error is simply deﬁned as the L2
norm between the two translation vectors:

δt(t1, t2) = ||t1 − t2||2 .

The distance between two rotation matrices is computed using:

δR(R1, R2) = arccos

(cid:18) Tr(RT

1 R2) − 1

(cid:19)

,

2

(3)

(4)

where Tr(·) denotes the matrix trace.

4.2 Scenarios

The stability scenario In this ﬁrst scenario, we propose to quantify the de-
gree of pose jitter when tracking a static object. To evaluate this, we captured
5-second sequences of the object under 4 diﬀerent viewpoints and with 3 conﬁg-
urations: at a distance of 0.8m from the sensor (“near”), of 1.5m from the sensor
(“far”), and of 0.8m from the sensor, but this time with distractor objects partly
occluding the object of interest (“occluded”). To measure the stability, Tan et
al. [2] use the standard deviation of the pose parameters on a sequence. We
propose a diﬀerent metric inspired from [20] that penalizes variation from frame
to frame instead of the general distribution across the sequence. We compute
the distance between poses Pi−1 and Pi at time i. In other words, we report
the distribution of δt(ti−1, ti) and δR(Ri−1, Ri) for all frames of the stability
scenario.

The occlusion scenario To evaluate the robustness to occlusion, we follow
[3] and place the object on a turntable at 1.2m from the sensor, and a static
occluder is placed in front of the object in a vertical and horizontal position.
We compute the amount of occlusion based on the largest dimension of the
object, and provide sequences for each object from 0% to 75% occlusion in 15%

A Framework for Evaluating 6-DOF Object Trackers

9

clock (222)

dragon (207)

dog (187)

shoe (314)

kinect (287)

skull (218)

turtle (225)

lego (118)

watering can (287)

walkman (141)

cookie jar (187)

Fig. 4. Overview of the 11 objects in our dataset, with their maximum distance between
two vertices in mm shown above.

increments, which results in a total of 11 sequences per object. Here, we compute
errors by comparing the pose Pi at time i with the ground truth P∗
i for that
same frame, i.e., δt(t∗
i , Ri). Temporal trackers may lose tracking
on diﬃcult frames. This can aﬀect the overall score depending on the moment
where the tracker fails. To bypass this limitation, we initialize the tracker at the
ground truth pose P∗

i , ti) and δR(R∗

i every 15 frames as in [3].

The interaction scenario In this last scenario, the experimenter holds the ob-
ject in his hands and manipulates it in 4 diﬀerent ways: 1) by moving the object
around but without rotating it (“translation-only”); 2) by rotating the object on
itself without translating it (“rotation-only”); 3) by freely moving and rotating
the object around at low speeds (“free-slow”); and 4) by freely moving and ro-
tating the object at higher speeds and by voluntarily generating more occlusions
(“free-hard”). In all situations but the “free-hard”, we reset the tracker every 15
frames and we report δt(t∗
i , Ri) as in sec. 4.2. Since the object
speed varies, we also compute the translational and rotational inter-frame dis-
placement (δt(t∗
i )) and report the performance metric above
as a function of that displacement. In addition, it is also informative to count
the number of times the tracker has failed. We consider a tracking failure when
either δt(t∗
i , Ri) > 20◦ for more than 7 consecutive frames.
When a failure is detected, the tracker is reset at the ground truth pose P∗. We
report these failures on the “free-hard” sequences only.

i , ti) > 3cm or δR(R∗

i , ti) and δR(R∗

i ), δR(R∗

i−1, R∗

i−1, t∗

4.3 Dataset statistics

We selected 11 diﬀerent objects to obtain a wide variety of object geometries
and appearance, as shown in ﬁg. 4. To obtain a precise 3D model of each object
in the database, each of them was scanned with a Creaform GoScanTM handheld
3D scanner at a 1mm voxel resolution. The scans were manually cleaned using
Creaform VxElementsTM to remove background and spurious vertices.

Overall, the dataset contains 297 sequences: 27 sequences for each object.
The breakdown is the following: 12 sequences for stability (4 viewpoints, 3 con-
ﬁgurations: “near”, “far”, “occluded”); 11 sequences for occlusion (0% to 75%

10

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

Fig. 5. The deep learning architecture
used to track 3D objects in this work,
inspired by [3]. The notation “convx-y”
indicates a convolution layer of y ﬁlters
of dimension x × x, “ﬁre-x-y” indicates a
“ﬁre” module [21] which reduces the num-
ber of channels to x and expands to y,
and “FC-x” is a fully-connected layer of
x units. Each layer have a skip link similar
to DenseNet [22] and is followed by a max
pooling 2 × 2 operation. We use a dropout
of 50% on the input connections to the FC-
500 layer. All layers (except the last FC-6)
have batch normalization and the ELU ac-
tivation function [23].

Input: xpred

Input: xobs

conv3-96
ﬁre-48-96

conv3-96
ﬁre-48-96

concatenation
ﬁre-96-384
ﬁre-192-768
ﬁre-384-768
FC-500
FC-6

Output: y

in 15% increment for both horizontal and vertical occluders); and 4 sequences
for interaction (“rotation-only”, “translation-only”, “free-slow”, “free-hard”). It
also contains high resolution textured 3D models for each object.

5 Analyzing a deep 6-DOF tracker with our dataset

As a testbed to evaluate the relevance of the new dataset, we borrow the tech-
nique of Garon and Lalonde [3] who train a 6-DOF tracker using deep learning,
but propose changes to their architecture and training methodology. We evaluate
several variants of the network on our dataset and show that it can be used to
accurately quantify the performance of a tracker in a wide variety of scenarios.

5.1 Training an object-speciﬁc tracker

We propose improvements over the previous work of [3] by adding 5 main
changes: 2 to the network architecture, and 3 to the training procedure. The
new proposed network architecture is shown in ﬁg. 5. As in [3], the network
accepts two inputs: an image of the object rendered at its predicted position
(from the previous timestamp in the video sequence) xpred, and an image of
the observed object at the current timestamp xobs. The last layer outputs the
6-DOF (3 for translation, 3 for rotation in Euler angles) representing the pose
change between the two inputs. We ﬁrst replace convolution layers by the “ﬁre”
modules proposed in [21]. The second change, inspired by DenseNet [22], is to
concatenate the input features of each layers to the outputs before being max-
pooled. Our improvement requires the same runtime as [3], which is 6 ms on a
Nvidia GTX-970M. As in [3], the loss used is the MSE between the predicted
and ground truth pose change. Note that we experimented with the reprojection
loss [24], but found it did not help in our context.

We also propose changes to the training procedure of [3]. Their approach
consists in generating pairs of synthetic views of the object with random pose

A Framework for Evaluating 6-DOF Object Trackers

11

changes between them. To sample the random pose changes, they proposed to
independently sample a random translation tx,y,z ∼ U (20mm, 20mm) and rota-
tion rα,β,γ ∼ U (−10◦, 10◦) in Euler angle notation, with U (a, b) referring to a
uniform distribution on interval [a, b]. Doing so unfortunately biases the resulting
pose changes. For example, small amplitude translations are quite unlikely to be
generated (since this requires all three translation components to be small simul-
taneously). Our ﬁrst change is to sample a random translation vector and mag-
nitude separately. The translation vector vt is sampled in spherical coordinates
(θt, φt), where θt ∼ U (−180◦, 180◦) and φt = cos−1(x) with x ∼ U (−1, 1). The
translation magnitude mt is drawn from a Gaussian distribution mt ∼ N (0, ∆t).
The same process is repeated for rotations, where the rotation axis vr and angle
mr ∼ N (0, ∆r) are sampled similarly. Here, we intentionally parameterize the
translation magnitude mt and rotation angle mr distributions with ∆t and ∆r,
since the range of these parameters may inﬂuence the behavior of the network.
Our second change is to downsample the depth channel to better match the
resolution of the Kinect V2. Our third change consists in a data augmentation
method for RGBD images where we randomly set a modality (depth or RGB)
to zero during training, which has the eﬀect of untangling the features of both
modalities. With these changes, we can now rely purely on synthetic data to train
the network (in [3] a set of real frames was required to ﬁne-tune the network).

5.2 Training a generic tracker

To train a generic 6-DOF object tracker, we experimented with two ways of gen-
erating a training dataset, using the same network architecture, loss, and training
procedure described in sec. 5.1. First, we generate a training set of images that
contain all 11 objects from our dataset, as well as 30 other objects. These other
objects, downloaded from 3D Warehouse1 and from “Linemod” [7], show a high
diversity in geometry and texture and are roughly of the same size. We name the
network trained on this dataset the “multi-object” network. Second, we generate
a training set of images that contain only the 30 other objects—the actual ob-
jects to track are not included. We call this network “generic”, since it never saw
any of the objects in our dataset during training. Note that all these approaches
require the 3D model of the object to track at test time, however.

6 Experiments

In this section, we perform an exhaustive evaluation of the various approaches
presented in sec. 5 using our novel dataset and framework proposed in sec. 4.
First, we analyze the impact of varying the training data generation hyper-
parameters ∆t and ∆r for the object-speciﬁc case. Then, we proceed to com-
pare our object-speciﬁc, “multi-object”, and “generic” trackers with two existing
methods: Garon and Lalonde [3] and Tan et al. [5].

1 Available at: https://3dwarehouse.sketchup.com.

12

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

Stability Scenario

Translation (mm/frame)

Rotation (degree/frame)

Near

Far

Occluded

Near

Far

Occluded

t

∆

10
20
30
40
50

0.42
0.62
0.72
0.75
0.95

0.53
0.77
0.84
0.89
1.03

0.48
0.71
0.89
1.00
1.16

r
∆

15
20
25
30
35

0.35
0.55
0.53
0.61
0.68

0.51
0.68
0.66
0.74
0.87

0.63
0.88
0.97
1.04
1.10

Occlusion scenario

Translation (mm)

Rotation (degrees)

Occlusion %

0

15

30

45

60

75

0

15

30

45

60

75

t

∆

10 14.8
20 7.5
30 11.0
40 12.7
50 10.4

12.5

13.1 15.5 20.0 25.3
29.5
33.9
68.1
73.7

7.6 12.5 15.5 22.3
26.6
36.0
43.8

17.4
17.9
17.7

21.5
26.0
30.6

11.5
14.8
11.1

r
∆

15 2.1
3.3
20
3.3
25
2.7
30
3.2
35

2.9
4.8
4.8
3.9
4.6

5.4
7.5
8.7
6.9
9.1

8.1 15.7 26.0
48.0
17.2
9.9
41.1
30.6
16.8
62.9
26.9
12.3
66.1
36.7
16.1

Interaction scenario

Translation (mm)

Rotation (degrees)

Speed (per frame)

(0, 10]

(10, 20]

(20, 30]

(30, 40]

(0, 4]

(4, 8]

(8, 12]

(12, 16]

t

∆

10
20
30
40
50

10.1
6.5
9.7
10.8
10.5

11.8
8.7
9.9
11.4
11.4

16.4
11.0
11.5
11.7
10.9

18.8
18.0
9.5
6.6
7.2

r
∆

15
20
25
30
35

2.9
3.7
5.7
4.3
4.7

3.8
4.7
5.9
4.6
4.8

4.2
4.9
5.8
4.7
5.4

4.4
5.0
6.1
4.7
5.1

(a) Impact of ∆t on δt

(b) Impact of ∆r on δR

Table 1. Applying our evaluation methodology for determining the best range of
translations ∆t and rotations ∆r for generating synthetic data when training a deep
6-DOF tracker. We show (a) the impact of varying ∆t on the error δt, and (b) the
impact of varying ∆r on the error δR for all three scenarios (from top to bottom:
stability, occlusion, and interaction).

6.1 Analysis to training data generation parameters

We now apply the evaluation methodology proposed in sec. 4 on the method
presented above and evaluate the inﬂuence of the ∆r and ∆t hyper-parameters
on the various metrics and sequences from our dataset. We experiment by varying
∆t ∈ {10, 20, 30, 40, 50}mm and ∆r ∈ {15, 20, 25, 30, 35}◦ one at a time (the
other parameter is kept at its lowest value). For each of these parameters, we
synthesize 200,000 training image pairs per object using [3] and the modiﬁcations
proposed in sec. 5.1. We then train a network for each object, for each set of
parameters, and evaluate each network on our dataset. A subset of the results
of this analysis is shown in tab. 1. Note that, for the interaction scenario, the
“free-hard” sequences (sec. 4.2) were left out since they are much harder than the
others and would bias the results. In particular, we show the impact that varying
∆t has on δt, as well as that of varying ∆r has on δR for all 3 scenarios. Here,
we drop the parentheses for the δ{t,R} error metrics for ease of notation (see
sec. 4 for the deﬁnitions). The ﬁgure reveals a clear trend: increasing ∆r (tab. 1-
(b)) systematically results in worse performance in rotation. This is especially
visible for the high occlusion cases (45% and 60%), where the rotation error δR
increases signiﬁcantly as a function of ∆r. The situation is not so simple when ∆t
is increased (tab. 1-(a)). Indeed, while increasing ∆t negatively impacts δt in the
stability and occlusion scenarios, performance actually improves when the object
speed is higher, as seen in the interaction scenario. Therefore, to achieve a good
balance between stability and accuracy at higher speeds, a value of ∆t = 30mm
seems to be a good trade-oﬀ. The remainder of the plots for this analysis, as

A Framework for Evaluating 6-DOF Object Trackers

13

Stability scenario

Translation (mm/frame)

Rotation (degree/frame)

Near

Far

Occluded

Near

Far

Occluded

Ours specific
Ours multi-object
Ours generic
Garon and Lalonde [1]
Tan et al [5]

0.56
0.38
0.72
0.93
1.20

0.68
0.41
0.75
1.06
1.31

0.72
0.57
1.19
1.24
1.53

0.52
0.69
0.95
1.13
1.30

0.59
0.79
0.98
1.23
1.44

0.76
1.09
1.67
1.49
1.92

Occlusion scenario

Translation (mm)

Rotation (degrees)

Occlusion %

0

15

30

45

60

75

0

15

30

45

60

75

Ours specific
Ours multi-object
Ours generic
Garon and Lalonde [1]
Tan et al [5]

7.4
23.3

16.9
6.7 11.1
7.4
11.2
8.2

14.6
18.9
18.9
8.5 15.9

24.2
14.3 13.2 13.4
47.4
34.4
25.9
55.0
38.1
26.8
213
186
138

9.8 11.5 12.5 15.5

3.6
4.0
5.3
5.3
4.0

5.9
8.6
8.4
8.8
7.4

7.9 10.0 12.6 22.2
14.7 15.4
50.6
43.7
49.8
41.7
88.0
89.5

12.1
26.8
28.2
70.3

12.3
16.1
17.7
33.1

Interaction scenario

Translation (mm)

Rotation (degrees)

Speed (per frame)

(0, 12.5] (12.5, 25] (25, 37.5] (37.5, 50] (0, 19] (19, 37] (37, 56] (56, 75] Fail

Ours specific
Ours multi-object
Ours generic
Garon and Lalonde [1]
Tan et al [5]

8.2
22.1
9.3
9.5
8.1

10.3
27.3
9.9
10.2
8.5

11.1
26.0
11.7
10.3
10.7

13.4
41.9
13.4
12.4
67.1

3.7
6.0
6.3
7.8
4.5

5.8
8.6
6.8
9.5
6.0

3.6
2.9
8.8
13.4
8.1

5.8
6.1
7.0
11.8
10.1

37
127
38
53
86

Table 2. Comparison of our networks with the previous work of [3] and [5]. Our “object-
speciﬁc” networks outperform the state of the art in almost all scenarios, and performs
remarkably well at predicting the rotation. Our “generic” tracker shows great promise:
although not as good as the “object-speciﬁc” version, it results in slightly lower error
compared with [3], even if it has not seen any of these objects during training. See the
supplementary video for a visual qualitative comparison of the trackers.

well as plots evaluating the impact of the resolution of the crop and the size of
the bounding box w.r.t the object are shown in the supplementary material.

6.2 Comparison with previous work

Our trackers yields a 1.7mm/0.6◦ error on the 4 sequences of [4] which is slightly
above [5] who obtain 0.81mm/0.37◦. However, as reported in tab. 2, more in-
teresting diﬀerences between the trackers can be observed when using our new
dataset. We compare with object-speciﬁc versions of the work of Garon and
Lalonde [3] as well as the Random Forest approach of Tan et al. [5]. For [3], we
use the training parameters reported in their paper. For our trackers, the ∆m
and ∆r hyper-parameters were obtained with leave-one-out cross-validation to
ensure no training/test overlap. As before, the “free-hard” sequences were left
out for the interaction experiments.

Overall, as can be observed in tab. 2, the proposed deep learning methods
perform either on par or better than the previous work. The “object-speciﬁc”
networks outperform almost all the other techniques, except for the case of
translational error in the interaction scenario. It performs remarkably well at
predicting rotations, and is on par with the other methods for translation. In
comparison, [5] performs well at low occlusions, but fails when the occlusion
level is 30% or greater (particularly in rotation). [3] shows improved robustness
to occlusions, but still achieves high rotation errors at 45% occlusion, and is also
much less stable (esp. in rotation) than our “object-speciﬁc” networks. Interest-
ingly, our “generic” tracker, which has seen none of these objects in training,

14

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

performs similarly to the previous works that were trained speciﬁcally on these
objects. Indeed, it shows a stability, robustness to occlusions and behavior at
higher speeds that is similar to [3] and [5], demonstrating that learning generic
features that are useful for tracking objects can be achieved. Finally, we use the
“free-hard” interaction sequences to count the number of times the tracking is
lost (sec. 4.2). In this case, the “object-speciﬁc” and “generic” networks outper-
forms the other methods. Qualitative videos showing side-by-side comparisons
of these methods are available in the supplementary material.

7 Discussion

The recent evolution in 6-DOF tracking performance on the popular dataset of
Choi et al. [4] highlights the need for a new dataset containing real data and
more challenging scenarios. In this paper, we provide such a dataset, which we
hope will spur further research in the ﬁeld. Our dataset contains 297 sequences
containing 11 objects of various shapes and textures. The sequences are grouped
into 3 scenarios: stability, occlusion, and interaction. The dataset and companion
evaluation code is released publicly2. Additionally, we build on the framework
of [3] with an improved architecture and training procedure which allows the
network to learn purely from synthetic data, yet generalize well on real data.
In addition, the architecture allows for training on multiple objects and test on
diﬀerent objects it has never seen in training. To the best of our knowledge, we
are the ﬁrst to propose such a generic learner for the 6-DOF object tracking task.
Finally, our approach is extensively compared with recent work and is shown to
achieve better performance.

A current limitation is that the Vicon markers must be removed in a post-
processing step, which may leave some artifacts behind. While the markers are
very small (3mm) and the resulting marker-free images have low error (see ﬁg. 3),
there might still be room for improvement. Finally, our “generic” tracker is
promising, but it still does not perform quite as well as “object-speciﬁc” models,
especially for rotations. In addition, a 3D model of the object is still required at
test time, so exploring how this constraint can be removed would make for an
exciting future research direction.

Acknowledgements

The authors wish to thank Jonathan Gilbert for his help with data acquisi-
tion and Sylvain Comtois for the Vicon setup. This work was supported by the
NSERC/Creaform Industrial Research Chair on 3D Scanning: CREATION 3D.
We gratefully acknowledge the support of Nvidia with the donation of the Tesla
K40 and Titan X GPUs used for this research.

2 http://www.jflalonde.ca/projects/6dofObjectTracking

A Framework for Evaluating 6-DOF Object Trackers

15

References

1. Kehl, W., Tombari, F., Ilic, S., Navab, N.: Real-time 3D model tracking in color
and depth on a single CPU core. In: IEEE Conference on Computer Vision and
Pattern Recognition. (2017)

2. Tan, D.J., Navab, N., Tombari, F.: Looking beyond the simple scenarios: Com-
IEEE transactions on

bining learners and optimizers in 3D temporal tracking.
visualization and computer graphics 23(11) (2017) 2399–2409

3. Garon, M., Lalonde, J.F.: Deep 6-DOF tracking. IEEE Transactions on Computer

Graphics and Visualization 23(11) (2017)

4. Choi, C., Christensen, H.I.: RGB-D object tracking: A particle ﬁlter approach on
GPU. In: International Conference on Intelligent Robots and Systems. (2013)
5. Tan, D.J., Tombari, F., Ilic, S., Navab, N.: A versatile learning-based 3D temporal
tracker: Scalable, robust, online. In: IEEE International Conference on Computer
Vision. (2015)

6. Krull, A., Michel, F., Brachmann, E., Gumhold, S., Ihrke, S., Rother, C.: 6-dof
model based tracking via object coordinate regression. In: Asian Conference on
Computer Vision. (2014)

7. Hinterstoisser, S., Lepetit, V., Ilic, S., Holzer, S., Bradski, G., Konolige, K., Navab,
N.: Model based training, detection and pose estimation of texture-less 3D objects
in heavily cluttered scenes. In: Asian conference on computer vision. (2012)

8. Hodan, T., Haluza, P., Obdrˇz´alek, ˇS., Matas, J., Lourakis, M., Zabulis, X.: T-
LESS: An RGB-D dataset for 6D pose estimation of texture-less objects. In: IEEE
Winter Conference on Applications of Computer Vision. (2017)

9. Tejani, A., Tang, D., Kouskouridas, R., Kim, T.K.: Latent-class hough forests for
3D object detection and pose estimation. In: European Conference on Computer
Vision. (2014)

10. Doumanoglou, A., Kouskouridas, R., Malassiotis, S., Kim, T.K.: Recovering 6D
object pose and predicting next-best-view in the crowd. In: IEEE Conference on
Computer Vision and Pattern Recognition. (2016)

11. Akkaladevi, S., Ankerl, M., Heindl, C., Pichler, A.: Tracking multiple rigid sym-
metric and non-symmetric objects in real-time using depth data. In: IEEE Inter-
national Conference on Robotics and Automation. (2016)

12. Aldoma, A., Tombari, F., Prankl, J., Richtsfeld, A., Di Stefano, L., Vincze, M.:
Multimodal cue integration through hypotheses veriﬁcation for rgb-d object recog-
nition and 6dof pose estimation. In: IEEE International Conference on Robotics
and Automation, IEEE (2013) 2104–2111

13. Kwon, J., Choi, M., Park, F.C., Chun, C.: Particle ﬁltering on the euclidean group:

framework and applications. Robotica 25(6) (2007)

14. Chitchian, M., van Amesfoort, A.S., Simonetto, A., Keviczky, T., Sips, H.J.: Adapt-
ing particle ﬁlter algorithms to many-core architectures. In: Parallel & Distributed
Processing (IPDPS), 2013 IEEE 27th International Symposium on, IEEE (2013)
427–438

15. Tan, D.J., Ilic, S.: Multi-forest tracker: A chameleon in tracking. In: Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition. (2014)

16. Breiman, L.: Random forests. Machine learning 45(1) (2001)
17. Tjaden, H., Schwanecke, U., Sch¨omer, E.: Real-time monocular pose estimation of
3D objects using temporally consistent local color histograms. In: IEEE Conference
on Computer Vision and Pattern Recognition. (2017)

16

Mathieu Garon, Denis Laurendeau and Jean-Fran¸cois Lalonde

18. Merriaux, P., Dupuis, Y., Boutteau, R., Vasseur, P., Savatier, X.: A study of vicon

system positioning performance. Sensors 17(7) (2017) 1591

19. Zhang, Z.: A ﬂexible new technique for camera calibration. IEEE Transactions on

Pattern Analysis and Machine Intelligence 22(11) (2000) 1330–1334

20. Niehorster, D.C., Li, L., Lappe, M.: The accuracy and precision of position and
orientation tracking in the HTC vive virtual reality system for scientiﬁc research.
i-Perception 8(3) (2017)

21. Iandola, F.N., Han, S., Moskewicz, M.W., Ashraf, K., Dally, W.J., Keutzer, K.:
Squeezenet: Alexnet-level accuracy with 50x fewer parameters and <0.5MB model
size. arXiv:1602.07360 (2016)

22. Huang, G., Liu, Z., van der Maaten, L., Weinberger, K.Q.: Densely connected
In: IEEE Conference on Computer Vision and Pattern

convolutional networks.
Recognition. (2017)

23. Clevert, D.A., Unterthiner, T., Hochreiter, S.: Fast and accurate deep network
learning by exponential linear units (elus). arXiv preprint arXiv:1511.07289 (2015)
24. Kendall, A., Cipolla, R.: Geometric loss functions for camera pose regression with
deep learning. In: IEEE Conference on Computer Vision and Pattern Recognition.
(2017)

