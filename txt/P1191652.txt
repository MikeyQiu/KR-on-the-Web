Greedy Search with Probabilistic N-gram Matching
for Neural Machine Translation

Chenze Shao1,2

Xilin Chen1,2
Yang Feng1,2∗
1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences (ICT/CAS)
2University of Chinese Academy of Science
{shaochenze18z,fengyang,xlchen}@ict.ac.cn

Abstract

Neural machine translation (NMT) models are
usually trained with the word-level loss using
the teacher forcing algorithm, which not only
evaluates the translation improperly but also
suffers from exposure bias. Sequence-level
training under the reinforcement framework
can mitigate the problems of the word-level
loss, but its performance is unstable due to the
high variance of the gradient estimation. On
these grounds, we present a method with a dif-
ferentiable sequence-level training objective
based on probabilistic n-gram matching which
can avoid the reinforcement framework. In ad-
dition, this method performs greedy search in
the training which uses the predicted words
as context just as at inference to alleviate the
problem of exposure bias. Experiment results
on the NIST Chinese-to-English translation
tasks show that our method signiﬁcantly out-
performs the reinforcement-based algorithms
and achieves an improvement of 1.5 BLEU
points on average over a strong baseline sys-
tem.

1

Introduction

Neural machine translation (NMT) (Kalchbrenner
and Blunsom, 2013; Cho et al., 2014; Sutskever
et al., 2014; Bahdanau et al., 2014) has now
achieved impressive performance (Wu et al., 2016;
Gehring et al., 2017; Vaswani et al., 2017; Hassan
et al., 2018; Chen et al., 2018; Lample et al., 2018)
and draws more attention. NMT models are built
on the encoder-decoder framework where the en-
coder network encodes the source sentence to dis-
tributed representations and the decoder network
reconstructs the target sentence form the represen-
tations word by word.

Currently, NMT models are usually trained with
the word-level loss (i.e., cross-entropy) under the
teacher forcing algorithm (Williams and Zipser,

*Corresponding Author

1989), which forces the model to generate trans-
lation strictly matching the ground-truth at the
word level. However, in practice it is impossible
to generate translation totally the same as ground
truth. Once different target words are generated,
the word-level loss cannot evaluate the translation
properly, usually under-estimating the translation.
In addition, the teacher forcing algorithm suffers
from the exposure bias (Ranzato et al., 2015) as it
uses different inputs at training and inference, that
is ground-truth words for the training and previ-
ously predicted words for the inference. Kim and
Rush (2016) proposed a method of sequence-level
knowledge distillation, which use teacher outputs
to direct the training of student model, but the stu-
dent model still have no access to its own pre-
dicted words. Scheduled sampling(SS) (Bengio
et al., 2015; Venkatraman et al., 2015) attempts to
alleviate the exposure bias problem through mix-
ing ground-truth words and previously predicted
words as inputs during training. However, the se-
quence generated by SS may not be aligned with
the target sequence, which is inconsistent with the
word-level loss.

In contrast, sequence-level objectives, such as
BLEU (Papineni et al., 2002), GLEU (Wu et al.,
2016), TER (Snover et al., 2006), and NIST (Dod-
dington, 2002), evaluate translation at the sen-
tence or n-gram level and allow for greater ﬂex-
ibility, and thus can mitigate the above problems
of the word-level loss. However, due to the non-
differentiable of sequence-level objectives, pre-
vious works on sequence-level training (Ranzato
et al., 2015; Shen et al., 2016; Bahdanau et al.,
2016; Wu et al., 2016; He et al., 2016; Wu et al.,
2017; Yang et al., 2017) mainly rely on reinforce-
ment learning algorithms (Williams, 1992; Sutton
et al., 2000) to ﬁnd an unbiased gradient estima-
tor for the gradient update. Sparse rewards in this
situation often cause the high variance of gradient
estimation, which consequently leads to unstable

8
1
0
2
 
p
e
S
 
0
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
3
1
3
0
.
9
0
8
1
:
v
i
X
r
a

training and limited improvements.

Lamb et al. (2016); Gu et al. (2017); Ma et al.
(2018) respectively use the discriminator, critic
and bag-of-words target as sequence-level train-
ing objectives, all of which are directly connected
to the generation model and hence enable direct
gradient update. However, these methods do not
allow for direct optimization with respect to eval-
uation metrics.

In this paper, we propose a method to com-
bine the strengths of the word-level and sequence-
level training, that is the direct gradient update
without gradient estimation from word-level train-
ing and the greater ﬂexibility from sequence-level
training. Our method introduces probabilistic n-
gram matching which makes sequence-level ob-
jectives (e.g., BLEU, GLEU) differentiable. Dur-
ing training, it abandons teacher forcing and per-
forms greedy search instead to take into consid-
eration the predicted words. Experiment results
show that our method signiﬁcantly outperforms
word-level training with the cross-entropy loss and
sequence-level training under the reinforcement
framework. The experiments also indicate that
greedy search strategy indeed has superiority over
teacher forcing.

2 Background

NMT is based on an end-to-end framework which
directly models the translation probability from
the source sentence x to the target sentence ˆy:

P (ˆy|x) =

p(ˆyj|ˆy<j, x, θ),

(1)

T
(cid:89)

j=1

where T is the target length and θ is the model pa-
rameters. Given the training set D = {XM, YM}
with M sentences pairs, the training objective is to
maximize the log-likelihood of the training data as

θ = arg max

{L(θ)}

θ

L(θ) =

log(p(ˆym

j |ˆym

<j, xm, θ)),

M
(cid:88)

lm
(cid:88)

m=1

j=1

where the superior m indicates the m-th sentence
in the dataset and lm is the length of m-th target
sentence.

In the above model, the probability of each tar-
get word p(ˆym
<j, xm, θ) is conditioned on the
previous target words. The scenario is that in the

j |ˆym

training time, the teacher forcing algorithm is em-
ployed and the ground truth words from the tar-
get sentence are fed as context, while during in-
ference, the ground truth words are not available
and the previous predicted words are instead fed as
context. This discrepancy is called exposure bias.

3 Model

3.1 Sequence-Level Objectives

Many automatic evaluation metrics of machine
translation, such as BLEU, GLEU and NIST, are
based on the n-gram matching. Assuming that y
and ˆy are the output sentence and the ground truth
sentence with length T and T (cid:48) respectively, the
count of an n-gram g = (g1, . . . , gn) in sentence
y is calculated as

Cy(g) =

1{gi = yt+i},

(3)

T −n
(cid:88)

n
(cid:89)

t=0

i=1

where 1{·} is the indicator function. The matching
count of the n-gram g between ˆy and y is given by

Cˆy

y(g) = min (Cy(g), Cˆy(g)).
Then the precision pn and the recall rn of the pre-
dicted n-grams are calculated as follows

(4)

pn =

rn =

(cid:80)

(cid:80)

(cid:80)

(cid:80)

,

g∈y Cˆy
y(g)
g∈y Cy(g)
g∈y Cˆy
y(g)
g∈ˆy Cˆy(g)

.

(5)

(6)

BLEU, the most widely used metric for ma-
chine translation evaluation, is deﬁned based on
the n-gram precision as follows

BLEU = BP · exp(

wn log pn),

(7)

N
(cid:88)

n=1

where BP stands for the brevity penalty and wn is
the weight for the n-gram. In contrast, GLEU is
the minimum of recall and precision of 1-4 grams
where 1-4 grams are counted together:

(2)

GLEU = min(p1-4, r1-4).

(8)

3.2 probabilistic Sequence-Level Objectives

In the output sentence y, the prediction probabil-
ity varies among words. Some words are trans-
lated by the model with high conﬁdence while
some words are translated with high uncertainty.

Figure 1: The overview of our model with greedy search. At each decoding step, the predicted word which has the
highest probability in the probability vector is selected as context and fed into the RNN, and meanwhile this word
and its probability are also used to calculate the probabilistic n-gram count.

However, when calculating the count of n-grams
in Eq.(3), all the words in the output sentence are
treated equally, regardless of their respective pre-
diction probabilities.

To give a more precise description of n-gram
counts which considers the variety of prediction
probabilities, we use the prediction probability
p(yj|y<j, x, θ) as the count of word yj, and cor-
respondingly the count of an n-gram is the product
of these probabilistic counts of all the words in the
n-gram, not one anymore. Then the probabilistic
count of g = (g1, . . . , gn) is calculated by sum-
ming over the output sentence y as

(cid:101)Cy(g) =
T −n
(cid:88)

n
(cid:89)

t=0

i=1

1{gi = yt+i} · p(yt+i|y<t+i, x, θ).

(9)

Now the probabilistic sequence-level objective
can be got by replacing Cy(g) with (cid:101)Cy(g) (the
tilde over the head indicates the probabilistic ver-
sion) and keeping the rest unchanged. Here, we
take BLEU as an example and show how the prob-
abilistic BLEU (denoted as P-BLEU) is deﬁned.
From this purpose, the matching count of n-gram
g in Eq.(4) is modiﬁed as follows

ˆy
y(g) = min((cid:101)Cy(g), Cˆy(g)).
(cid:101)C

(10)

and the predict precision of n-grams changes into

˜pn =

(cid:80)

(cid:80)

ˆy
y(g)
g∈y (cid:101)C
g∈y (cid:101)Cy(g)

.

(11)

Finally, the probabilistic BLEU (P-BLEU) is de-
ﬁned as

P-BLEU = BP · exp(

wn log ˜pn),

(12)

N
(cid:88)

n=1

Probabilistic GLEU (P-GLEU) can be deﬁned
in a similar way. Speciﬁcally, we denote the prob-
abilistic precision of n-grams as P-Pn. The prob-
abilistic precision is more reasonable than recall
since the denominator in Eq.(11) plays a normal-
ization role, so we modify the deﬁnition in Eq.(8)
and deﬁne P-GLEU as simply the probabilistic
precision of 1-4 grams.

The general probabilistic loss function is:

L(θ) = −

P(ym, ˆym),

(13)

M
(cid:88)

m=1

where P represents the probabilistic sequence-
level objectives, and ym and ˆym are the predicted
translation and the ground truth for the m-th sen-
tence respectively. The calculation of the proba-
bilistic objective is illustrated in Figure 1. This
probabilistic loss can work with decoding strate-
gies such as greedy search and teacher forcing. In
this paper we employ greedy search rather than
teacher forcing so as to use the previously pre-
dicted words as context and alleviate the exposure
bias problem.

System

Dev(MT02) MT03 MT04 MT05 MT06 AVG

BaseNMT
MRT
RF
P-BLEU
P-GLEU
P-P2

36.72
37.17
37.13
37.26
37.44
38.03

33.95
34.89
34.66
34.54
34.67
35.45

37.44
37.90
37.69
38.05
38.11
39.30

33.96
34.62
34.55
34.30
34.24
35.10

33.09
33.78
33.74
34.11
34.58
34.59

34.61
35.30
35.16
35.25
35.40
36.11

Table 1: Results on NIST Chinese-to-English Translation Task. AVG = average BLEU scores for test sets. The
bold number indicates the highest score in the column.

4 Experiment

4.1 Settings

We carry out experiments on Chinese-to-English
translation.1 The training data consists of 1.25M
pairs of sentences extracted from LDC corpora2.
Sentence pairs with either side longer than 50 were
dropped. We use NIST 2002 (MT 02) as the vali-
dation set and NIST 2003-2006 (MT 03-08) as the
test sets. We use the case insensitive 4-gram NIST
BLEU score (Papineni et al., 2002) for the transla-
tion task.

We apply our method to an attention-based
NMT system (Bahdanau et al., 2014) implemented
by Pytorch. Both source and target vocabularies
are limited to 30K. All word embedding sizes are
set to 512, and the sizes of hidden units in both
encoder and decoder RNNs are also set to 512.
All parameters are initialized by uniform distri-
bution over [−0.1, 0.1]. The mini-batch stochas-
tic gradient descent (SGD) algorithm is employed
to train the model with batch size of 40. In ad-
dition, the learning rate is adjusted by adadelta
optimizer (Zeiler, 2012) with ρ = 0.95 and (cid:15) =
1e-6. Dropout is applied on the output layer with
dropout rate of 0.5. The beam size is set to 10.

4.2 Performance

Systems We ﬁrst pretrain the baseline model by
maximum likelihood estimation (MLE) and then
reﬁne the model using probabilistic sequence-
level objectives, including P-BLEU, P-GLEU and
P-P2 (probabilistic 2-gram precision).
In addi-
tion, we reproduce previous works which train
the NMT model through minimum risk training
(MRT) (Shen et al., 2016) and REINFORCE algo-

1Experiment code: https://github.com/ictnlp/GS4NMT
2The corpora include LDC2002E18, LDC2003E07,
LDC2004T07,

portion

of

LDC2003E14,
LDC2004T08 and LDC2005T06.

Hansards

rithm (RF) (Ranzato et al., 2015). When reproduc-
ing their works, we set BLEU, GLEU and 2-gram
precision as training objectives respectively and
ﬁnd out that GLEU yields the best performance.
In the following, we only report the results with
training objective GLEU.
Performance Table 1 shows the translation per-
formance on test sets measured in BLEU score.
Simply training NMT model by the probabilistic
2-gram precision achieves an improvement of 1.5
BLEU points, which signiﬁcantly outperforms the
reinforcement-based algorithms. We also test the
precision of other n-grams and their combinations,
but do not notice signiﬁcant improvements over
P-P2. Notice that our method only changes the
loss function, without any modiﬁcation on model
structure and training data.

4.3 Why Pretraining

We use the probabilistic loss to ﬁnetune the base-
line model rather than training from scratch. This
is in line with our motivation: to alleviate the ex-
posure bias and make the model exposed to its own
output during training. In the very beginning of
the training, the model’s translation capability is
nearly zero and the generated sentences are often
meaningless and do not contain useful information
for the training, so it is unreasonable to directly ap-
ply the greedy search strategy. Therefore, we ﬁrst
apply the teacher forcing algorithm to pretrain the
model, and then we let the model generate the sen-
tences itself and learn from its own outputs.

Another reason favoring pretraining is that pre-
training can lower the training cost. The train-
ing cost of the introduced probabilistic loss is
about three times higher than the cost of cross en-
tropy. Without pretraining, the training time will
be much higher than usual. Otherwise, the train-
ing cost is acceptable if the probabilistic loss is
only for ﬁnetuning.

Figure 2: learning curves of different decoding strate-
gies with training objective P-P2.

Figure 3: P-GLEU and GLEU scores on 100 pairs of
sentences.

4.4 Effect of Decoding Strategy

The probabilistic loss, deﬁned in Eq.(13), is com-
puted from the model output y and reference ˆy.
In this section, we apply two different decoding
strategies to generate y: 1. teacher forcing, which
uses the ground truth as decoder input. 2. greedy
search, which feeds the word with maximum prob-
ability. By conducting this experiment, we attempt
to ﬁgure out where the improvements come from:
the modiﬁcation of loss or the mitigation of expo-
sure bias?

Figure 2 shows the learning curves of the two
decoding strategies with training objective P-P2.
Teacher forcing raises about 0.5 BLEU improve-
ments and greedy search outperform the teacher
forcing algorithm by nearly 1 BLEU point. We
conclude that the probabilistic loss has its own ad-
vantage even when trained by the teacher forcing
algorithm, and greedy search is effective in allevi-
ating the exposure bias.

Notice that the greedy search strategy highly
relys on the probabilistic loss and can not be con-
ducted independently. Greedy search together
with the word-level loss is very similar with the
scheduled sampling(SS). However, SS is inconsis-
tent with the word-level loss since the word-level
loss requires strict alignment between hypothesis
and reference, which can only be accomplished by
the teacher forcing algorithm.

4.5 Correlation with Evaluation Metrics

In this section, we explore how the probabilistic
objective correlates with the real evaluation met-
ric. We randomly sample 100 pairs of sentences

from the training set and compute their P-GLEU
and GLEU scores (Wu et al. (2016) indicates that
GLEU have better performance in the sentence-
level evaluation than BLEU).

Directly computing the correlation between
GLEU and P-GLEU gives the correlation coefﬁ-
cient 0.86, which indicates strong correlation. In
addition, we draw the scatter diagram of the 100
pairs of sentences in Figure 3 with GLEU as x-axis
and P-GLEU as y-axix. Figure 3 shows that P-
GLEU correlates well with GLEU, suggesting that
it is reasonable to directly train the NMT model
with P-GLEU.

5 Conclusion

Word-level loss cannot evaluate the translation
properly and suffers from the exposure bias, and
sequence-level objectives are usually indifferen-
tiable and require gradient estimation. We propose
probabilistic sequence-level objectives based on n-
gram matching, which relieve the dependence on
gradient estimation and can directly train the NMT
model. Experiment results show that our method
signiﬁcantly outperforms previous sequence-level
training works and successfully alleviates the ex-
posure bias through performing greedy search.

6 Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments. This work was supported by
the National Natural Science Foundation of China
(NSFC) under the project NO.61472428 and the
project NO. 61662077.

References

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2016. An actor-critic
algorithm for sequence prediction. arXiv preprint
arXiv:1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171–1179.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014.
Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natural
Language Processing, pages 1317–1327.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016.
Professor
forcing: A new algorithm for training recurrent net-
works. In Advances In Neural Information Process-
ing Systems, pages 4601–4609.

Guillaume Lample, Myle Ott, Alexis Conneau, Lu-
dovic Denoyer, and Marc’Aurelio Ranzato. 2018.
Phrase-based & neural unsupervised machine trans-
lation. arXiv preprint arXiv:1804.07755.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. arXiv preprint arXiv:1805.04871.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
In Proceedings of
uation of machine translation.
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

George Doddington. 2002.

Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 1683–1692.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jiatao Gu, Kyunghyun Cho, and Victor OK Li. 2017.
Trainable greedy decoding for neural machine trans-
In Proceedings of the 2017 Conference on
lation.
Empirical Methods in Natural Language Process-
ing, pages 1968–1978.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary,
Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, volume 200.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
In Proceedings of
continuous translation models.
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Arun Venkatraman, Martial Hebert, and J Andrew
Bagnell. 2015.
Improving multi-step prediction of
learned time series models. In AAAI, pages 3024–
3030.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
In Reinforcement Learning, pages
ment learning.
5–32. Springer.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2017. Adver-
arXiv preprint
sarial neural machine translation.
arXiv:1704.06933.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016.
Google’s neural ma-
chine translation system: Bridging the gap between
arXiv preprint
human and machine translation.
arXiv:1609.08144.

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2017.
Improving neural machine translation with condi-
tional sequence generative adversarial nets. arXiv
preprint arXiv:1703.04887.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

Greedy Search with Probabilistic N-gram Matching
for Neural Machine Translation

Chenze Shao1,2

Xilin Chen1,2
Yang Feng1,2∗
1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences (ICT/CAS)
2University of Chinese Academy of Science
{shaochenze18z,fengyang,xlchen}@ict.ac.cn

Abstract

Neural machine translation (NMT) models are
usually trained with the word-level loss using
the teacher forcing algorithm, which not only
evaluates the translation improperly but also
suffers from exposure bias. Sequence-level
training under the reinforcement framework
can mitigate the problems of the word-level
loss, but its performance is unstable due to the
high variance of the gradient estimation. On
these grounds, we present a method with a dif-
ferentiable sequence-level training objective
based on probabilistic n-gram matching which
can avoid the reinforcement framework. In ad-
dition, this method performs greedy search in
the training which uses the predicted words
as context just as at inference to alleviate the
problem of exposure bias. Experiment results
on the NIST Chinese-to-English translation
tasks show that our method signiﬁcantly out-
performs the reinforcement-based algorithms
and achieves an improvement of 1.5 BLEU
points on average over a strong baseline sys-
tem.

1

Introduction

Neural machine translation (NMT) (Kalchbrenner
and Blunsom, 2013; Cho et al., 2014; Sutskever
et al., 2014; Bahdanau et al., 2014) has now
achieved impressive performance (Wu et al., 2016;
Gehring et al., 2017; Vaswani et al., 2017; Hassan
et al., 2018; Chen et al., 2018; Lample et al., 2018)
and draws more attention. NMT models are built
on the encoder-decoder framework where the en-
coder network encodes the source sentence to dis-
tributed representations and the decoder network
reconstructs the target sentence form the represen-
tations word by word.

Currently, NMT models are usually trained with
the word-level loss (i.e., cross-entropy) under the
teacher forcing algorithm (Williams and Zipser,

*Corresponding Author

1989), which forces the model to generate trans-
lation strictly matching the ground-truth at the
word level. However, in practice it is impossible
to generate translation totally the same as ground
truth. Once different target words are generated,
the word-level loss cannot evaluate the translation
properly, usually under-estimating the translation.
In addition, the teacher forcing algorithm suffers
from the exposure bias (Ranzato et al., 2015) as it
uses different inputs at training and inference, that
is ground-truth words for the training and previ-
ously predicted words for the inference. Kim and
Rush (2016) proposed a method of sequence-level
knowledge distillation, which use teacher outputs
to direct the training of student model, but the stu-
dent model still have no access to its own pre-
dicted words. Scheduled sampling(SS) (Bengio
et al., 2015; Venkatraman et al., 2015) attempts to
alleviate the exposure bias problem through mix-
ing ground-truth words and previously predicted
words as inputs during training. However, the se-
quence generated by SS may not be aligned with
the target sequence, which is inconsistent with the
word-level loss.

In contrast, sequence-level objectives, such as
BLEU (Papineni et al., 2002), GLEU (Wu et al.,
2016), TER (Snover et al., 2006), and NIST (Dod-
dington, 2002), evaluate translation at the sen-
tence or n-gram level and allow for greater ﬂex-
ibility, and thus can mitigate the above problems
of the word-level loss. However, due to the non-
differentiable of sequence-level objectives, pre-
vious works on sequence-level training (Ranzato
et al., 2015; Shen et al., 2016; Bahdanau et al.,
2016; Wu et al., 2016; He et al., 2016; Wu et al.,
2017; Yang et al., 2017) mainly rely on reinforce-
ment learning algorithms (Williams, 1992; Sutton
et al., 2000) to ﬁnd an unbiased gradient estima-
tor for the gradient update. Sparse rewards in this
situation often cause the high variance of gradient
estimation, which consequently leads to unstable

8
1
0
2
 
p
e
S
 
0
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
3
1
3
0
.
9
0
8
1
:
v
i
X
r
a

training and limited improvements.

Lamb et al. (2016); Gu et al. (2017); Ma et al.
(2018) respectively use the discriminator, critic
and bag-of-words target as sequence-level train-
ing objectives, all of which are directly connected
to the generation model and hence enable direct
gradient update. However, these methods do not
allow for direct optimization with respect to eval-
uation metrics.

In this paper, we propose a method to com-
bine the strengths of the word-level and sequence-
level training, that is the direct gradient update
without gradient estimation from word-level train-
ing and the greater ﬂexibility from sequence-level
training. Our method introduces probabilistic n-
gram matching which makes sequence-level ob-
jectives (e.g., BLEU, GLEU) differentiable. Dur-
ing training, it abandons teacher forcing and per-
forms greedy search instead to take into consid-
eration the predicted words. Experiment results
show that our method signiﬁcantly outperforms
word-level training with the cross-entropy loss and
sequence-level training under the reinforcement
framework. The experiments also indicate that
greedy search strategy indeed has superiority over
teacher forcing.

2 Background

NMT is based on an end-to-end framework which
directly models the translation probability from
the source sentence x to the target sentence ˆy:

P (ˆy|x) =

p(ˆyj|ˆy<j, x, θ),

(1)

T
(cid:89)

j=1

where T is the target length and θ is the model pa-
rameters. Given the training set D = {XM, YM}
with M sentences pairs, the training objective is to
maximize the log-likelihood of the training data as

θ = arg max

{L(θ)}

θ

L(θ) =

log(p(ˆym

j |ˆym

<j, xm, θ)),

M
(cid:88)

lm
(cid:88)

m=1

j=1

where the superior m indicates the m-th sentence
in the dataset and lm is the length of m-th target
sentence.

In the above model, the probability of each tar-
get word p(ˆym
<j, xm, θ) is conditioned on the
previous target words. The scenario is that in the

j |ˆym

training time, the teacher forcing algorithm is em-
ployed and the ground truth words from the tar-
get sentence are fed as context, while during in-
ference, the ground truth words are not available
and the previous predicted words are instead fed as
context. This discrepancy is called exposure bias.

3 Model

3.1 Sequence-Level Objectives

Many automatic evaluation metrics of machine
translation, such as BLEU, GLEU and NIST, are
based on the n-gram matching. Assuming that y
and ˆy are the output sentence and the ground truth
sentence with length T and T (cid:48) respectively, the
count of an n-gram g = (g1, . . . , gn) in sentence
y is calculated as

Cy(g) =

1{gi = yt+i},

(3)

T −n
(cid:88)

n
(cid:89)

t=0

i=1

where 1{·} is the indicator function. The matching
count of the n-gram g between ˆy and y is given by

Cˆy

y(g) = min (Cy(g), Cˆy(g)).
Then the precision pn and the recall rn of the pre-
dicted n-grams are calculated as follows

(4)

pn =

rn =

(cid:80)

(cid:80)

(cid:80)

(cid:80)

,

g∈y Cˆy
y(g)
g∈y Cy(g)
g∈y Cˆy
y(g)
g∈ˆy Cˆy(g)

.

(5)

(6)

BLEU, the most widely used metric for ma-
chine translation evaluation, is deﬁned based on
the n-gram precision as follows

BLEU = BP · exp(

wn log pn),

(7)

N
(cid:88)

n=1

where BP stands for the brevity penalty and wn is
the weight for the n-gram. In contrast, GLEU is
the minimum of recall and precision of 1-4 grams
where 1-4 grams are counted together:

(2)

GLEU = min(p1-4, r1-4).

(8)

3.2 probabilistic Sequence-Level Objectives

In the output sentence y, the prediction probabil-
ity varies among words. Some words are trans-
lated by the model with high conﬁdence while
some words are translated with high uncertainty.

Figure 1: The overview of our model with greedy search. At each decoding step, the predicted word which has the
highest probability in the probability vector is selected as context and fed into the RNN, and meanwhile this word
and its probability are also used to calculate the probabilistic n-gram count.

However, when calculating the count of n-grams
in Eq.(3), all the words in the output sentence are
treated equally, regardless of their respective pre-
diction probabilities.

To give a more precise description of n-gram
counts which considers the variety of prediction
probabilities, we use the prediction probability
p(yj|y<j, x, θ) as the count of word yj, and cor-
respondingly the count of an n-gram is the product
of these probabilistic counts of all the words in the
n-gram, not one anymore. Then the probabilistic
count of g = (g1, . . . , gn) is calculated by sum-
ming over the output sentence y as

(cid:101)Cy(g) =
T −n
(cid:88)

n
(cid:89)

t=0

i=1

1{gi = yt+i} · p(yt+i|y<t+i, x, θ).

(9)

Now the probabilistic sequence-level objective
can be got by replacing Cy(g) with (cid:101)Cy(g) (the
tilde over the head indicates the probabilistic ver-
sion) and keeping the rest unchanged. Here, we
take BLEU as an example and show how the prob-
abilistic BLEU (denoted as P-BLEU) is deﬁned.
From this purpose, the matching count of n-gram
g in Eq.(4) is modiﬁed as follows

ˆy
y(g) = min((cid:101)Cy(g), Cˆy(g)).
(cid:101)C

(10)

and the predict precision of n-grams changes into

˜pn =

(cid:80)

(cid:80)

ˆy
y(g)
g∈y (cid:101)C
g∈y (cid:101)Cy(g)

.

(11)

Finally, the probabilistic BLEU (P-BLEU) is de-
ﬁned as

P-BLEU = BP · exp(

wn log ˜pn),

(12)

N
(cid:88)

n=1

Probabilistic GLEU (P-GLEU) can be deﬁned
in a similar way. Speciﬁcally, we denote the prob-
abilistic precision of n-grams as P-Pn. The prob-
abilistic precision is more reasonable than recall
since the denominator in Eq.(11) plays a normal-
ization role, so we modify the deﬁnition in Eq.(8)
and deﬁne P-GLEU as simply the probabilistic
precision of 1-4 grams.

The general probabilistic loss function is:

L(θ) = −

P(ym, ˆym),

(13)

M
(cid:88)

m=1

where P represents the probabilistic sequence-
level objectives, and ym and ˆym are the predicted
translation and the ground truth for the m-th sen-
tence respectively. The calculation of the proba-
bilistic objective is illustrated in Figure 1. This
probabilistic loss can work with decoding strate-
gies such as greedy search and teacher forcing. In
this paper we employ greedy search rather than
teacher forcing so as to use the previously pre-
dicted words as context and alleviate the exposure
bias problem.

System

Dev(MT02) MT03 MT04 MT05 MT06 AVG

BaseNMT
MRT
RF
P-BLEU
P-GLEU
P-P2

36.72
37.17
37.13
37.26
37.44
38.03

33.95
34.89
34.66
34.54
34.67
35.45

37.44
37.90
37.69
38.05
38.11
39.30

33.96
34.62
34.55
34.30
34.24
35.10

33.09
33.78
33.74
34.11
34.58
34.59

34.61
35.30
35.16
35.25
35.40
36.11

Table 1: Results on NIST Chinese-to-English Translation Task. AVG = average BLEU scores for test sets. The
bold number indicates the highest score in the column.

4 Experiment

4.1 Settings

We carry out experiments on Chinese-to-English
translation.1 The training data consists of 1.25M
pairs of sentences extracted from LDC corpora2.
Sentence pairs with either side longer than 50 were
dropped. We use NIST 2002 (MT 02) as the vali-
dation set and NIST 2003-2006 (MT 03-08) as the
test sets. We use the case insensitive 4-gram NIST
BLEU score (Papineni et al., 2002) for the transla-
tion task.

We apply our method to an attention-based
NMT system (Bahdanau et al., 2014) implemented
by Pytorch. Both source and target vocabularies
are limited to 30K. All word embedding sizes are
set to 512, and the sizes of hidden units in both
encoder and decoder RNNs are also set to 512.
All parameters are initialized by uniform distri-
bution over [−0.1, 0.1]. The mini-batch stochas-
tic gradient descent (SGD) algorithm is employed
to train the model with batch size of 40. In ad-
dition, the learning rate is adjusted by adadelta
optimizer (Zeiler, 2012) with ρ = 0.95 and (cid:15) =
1e-6. Dropout is applied on the output layer with
dropout rate of 0.5. The beam size is set to 10.

4.2 Performance

Systems We ﬁrst pretrain the baseline model by
maximum likelihood estimation (MLE) and then
reﬁne the model using probabilistic sequence-
level objectives, including P-BLEU, P-GLEU and
P-P2 (probabilistic 2-gram precision).
In addi-
tion, we reproduce previous works which train
the NMT model through minimum risk training
(MRT) (Shen et al., 2016) and REINFORCE algo-

1Experiment code: https://github.com/ictnlp/GS4NMT
2The corpora include LDC2002E18, LDC2003E07,
LDC2004T07,

portion

of

LDC2003E14,
LDC2004T08 and LDC2005T06.

Hansards

rithm (RF) (Ranzato et al., 2015). When reproduc-
ing their works, we set BLEU, GLEU and 2-gram
precision as training objectives respectively and
ﬁnd out that GLEU yields the best performance.
In the following, we only report the results with
training objective GLEU.
Performance Table 1 shows the translation per-
formance on test sets measured in BLEU score.
Simply training NMT model by the probabilistic
2-gram precision achieves an improvement of 1.5
BLEU points, which signiﬁcantly outperforms the
reinforcement-based algorithms. We also test the
precision of other n-grams and their combinations,
but do not notice signiﬁcant improvements over
P-P2. Notice that our method only changes the
loss function, without any modiﬁcation on model
structure and training data.

4.3 Why Pretraining

We use the probabilistic loss to ﬁnetune the base-
line model rather than training from scratch. This
is in line with our motivation: to alleviate the ex-
posure bias and make the model exposed to its own
output during training. In the very beginning of
the training, the model’s translation capability is
nearly zero and the generated sentences are often
meaningless and do not contain useful information
for the training, so it is unreasonable to directly ap-
ply the greedy search strategy. Therefore, we ﬁrst
apply the teacher forcing algorithm to pretrain the
model, and then we let the model generate the sen-
tences itself and learn from its own outputs.

Another reason favoring pretraining is that pre-
training can lower the training cost. The train-
ing cost of the introduced probabilistic loss is
about three times higher than the cost of cross en-
tropy. Without pretraining, the training time will
be much higher than usual. Otherwise, the train-
ing cost is acceptable if the probabilistic loss is
only for ﬁnetuning.

Figure 2: learning curves of different decoding strate-
gies with training objective P-P2.

Figure 3: P-GLEU and GLEU scores on 100 pairs of
sentences.

4.4 Effect of Decoding Strategy

The probabilistic loss, deﬁned in Eq.(13), is com-
puted from the model output y and reference ˆy.
In this section, we apply two different decoding
strategies to generate y: 1. teacher forcing, which
uses the ground truth as decoder input. 2. greedy
search, which feeds the word with maximum prob-
ability. By conducting this experiment, we attempt
to ﬁgure out where the improvements come from:
the modiﬁcation of loss or the mitigation of expo-
sure bias?

Figure 2 shows the learning curves of the two
decoding strategies with training objective P-P2.
Teacher forcing raises about 0.5 BLEU improve-
ments and greedy search outperform the teacher
forcing algorithm by nearly 1 BLEU point. We
conclude that the probabilistic loss has its own ad-
vantage even when trained by the teacher forcing
algorithm, and greedy search is effective in allevi-
ating the exposure bias.

Notice that the greedy search strategy highly
relys on the probabilistic loss and can not be con-
ducted independently. Greedy search together
with the word-level loss is very similar with the
scheduled sampling(SS). However, SS is inconsis-
tent with the word-level loss since the word-level
loss requires strict alignment between hypothesis
and reference, which can only be accomplished by
the teacher forcing algorithm.

4.5 Correlation with Evaluation Metrics

In this section, we explore how the probabilistic
objective correlates with the real evaluation met-
ric. We randomly sample 100 pairs of sentences

from the training set and compute their P-GLEU
and GLEU scores (Wu et al. (2016) indicates that
GLEU have better performance in the sentence-
level evaluation than BLEU).

Directly computing the correlation between
GLEU and P-GLEU gives the correlation coefﬁ-
cient 0.86, which indicates strong correlation. In
addition, we draw the scatter diagram of the 100
pairs of sentences in Figure 3 with GLEU as x-axis
and P-GLEU as y-axix. Figure 3 shows that P-
GLEU correlates well with GLEU, suggesting that
it is reasonable to directly train the NMT model
with P-GLEU.

5 Conclusion

Word-level loss cannot evaluate the translation
properly and suffers from the exposure bias, and
sequence-level objectives are usually indifferen-
tiable and require gradient estimation. We propose
probabilistic sequence-level objectives based on n-
gram matching, which relieve the dependence on
gradient estimation and can directly train the NMT
model. Experiment results show that our method
signiﬁcantly outperforms previous sequence-level
training works and successfully alleviates the ex-
posure bias through performing greedy search.

6 Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments. This work was supported by
the National Natural Science Foundation of China
(NSFC) under the project NO.61472428 and the
project NO. 61662077.

References

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2016. An actor-critic
algorithm for sequence prediction. arXiv preprint
arXiv:1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171–1179.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014.
Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natural
Language Processing, pages 1317–1327.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016.
Professor
forcing: A new algorithm for training recurrent net-
works. In Advances In Neural Information Process-
ing Systems, pages 4601–4609.

Guillaume Lample, Myle Ott, Alexis Conneau, Lu-
dovic Denoyer, and Marc’Aurelio Ranzato. 2018.
Phrase-based & neural unsupervised machine trans-
lation. arXiv preprint arXiv:1804.07755.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. arXiv preprint arXiv:1805.04871.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
In Proceedings of
uation of machine translation.
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

George Doddington. 2002.

Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 1683–1692.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jiatao Gu, Kyunghyun Cho, and Victor OK Li. 2017.
Trainable greedy decoding for neural machine trans-
In Proceedings of the 2017 Conference on
lation.
Empirical Methods in Natural Language Process-
ing, pages 1968–1978.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary,
Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, volume 200.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
In Proceedings of
continuous translation models.
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Arun Venkatraman, Martial Hebert, and J Andrew
Bagnell. 2015.
Improving multi-step prediction of
learned time series models. In AAAI, pages 3024–
3030.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
In Reinforcement Learning, pages
ment learning.
5–32. Springer.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2017. Adver-
arXiv preprint
sarial neural machine translation.
arXiv:1704.06933.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016.
Google’s neural ma-
chine translation system: Bridging the gap between
arXiv preprint
human and machine translation.
arXiv:1609.08144.

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2017.
Improving neural machine translation with condi-
tional sequence generative adversarial nets. arXiv
preprint arXiv:1703.04887.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

Greedy Search with Probabilistic N-gram Matching
for Neural Machine Translation

Chenze Shao1,2

Xilin Chen1,2
Yang Feng1,2∗
1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences (ICT/CAS)
2University of Chinese Academy of Science
{shaochenze18z,fengyang,xlchen}@ict.ac.cn

Abstract

Neural machine translation (NMT) models are
usually trained with the word-level loss using
the teacher forcing algorithm, which not only
evaluates the translation improperly but also
suffers from exposure bias. Sequence-level
training under the reinforcement framework
can mitigate the problems of the word-level
loss, but its performance is unstable due to the
high variance of the gradient estimation. On
these grounds, we present a method with a dif-
ferentiable sequence-level training objective
based on probabilistic n-gram matching which
can avoid the reinforcement framework. In ad-
dition, this method performs greedy search in
the training which uses the predicted words
as context just as at inference to alleviate the
problem of exposure bias. Experiment results
on the NIST Chinese-to-English translation
tasks show that our method signiﬁcantly out-
performs the reinforcement-based algorithms
and achieves an improvement of 1.5 BLEU
points on average over a strong baseline sys-
tem.

1

Introduction

Neural machine translation (NMT) (Kalchbrenner
and Blunsom, 2013; Cho et al., 2014; Sutskever
et al., 2014; Bahdanau et al., 2014) has now
achieved impressive performance (Wu et al., 2016;
Gehring et al., 2017; Vaswani et al., 2017; Hassan
et al., 2018; Chen et al., 2018; Lample et al., 2018)
and draws more attention. NMT models are built
on the encoder-decoder framework where the en-
coder network encodes the source sentence to dis-
tributed representations and the decoder network
reconstructs the target sentence form the represen-
tations word by word.

Currently, NMT models are usually trained with
the word-level loss (i.e., cross-entropy) under the
teacher forcing algorithm (Williams and Zipser,

*Corresponding Author

1989), which forces the model to generate trans-
lation strictly matching the ground-truth at the
word level. However, in practice it is impossible
to generate translation totally the same as ground
truth. Once different target words are generated,
the word-level loss cannot evaluate the translation
properly, usually under-estimating the translation.
In addition, the teacher forcing algorithm suffers
from the exposure bias (Ranzato et al., 2015) as it
uses different inputs at training and inference, that
is ground-truth words for the training and previ-
ously predicted words for the inference. Kim and
Rush (2016) proposed a method of sequence-level
knowledge distillation, which use teacher outputs
to direct the training of student model, but the stu-
dent model still have no access to its own pre-
dicted words. Scheduled sampling(SS) (Bengio
et al., 2015; Venkatraman et al., 2015) attempts to
alleviate the exposure bias problem through mix-
ing ground-truth words and previously predicted
words as inputs during training. However, the se-
quence generated by SS may not be aligned with
the target sequence, which is inconsistent with the
word-level loss.

In contrast, sequence-level objectives, such as
BLEU (Papineni et al., 2002), GLEU (Wu et al.,
2016), TER (Snover et al., 2006), and NIST (Dod-
dington, 2002), evaluate translation at the sen-
tence or n-gram level and allow for greater ﬂex-
ibility, and thus can mitigate the above problems
of the word-level loss. However, due to the non-
differentiable of sequence-level objectives, pre-
vious works on sequence-level training (Ranzato
et al., 2015; Shen et al., 2016; Bahdanau et al.,
2016; Wu et al., 2016; He et al., 2016; Wu et al.,
2017; Yang et al., 2017) mainly rely on reinforce-
ment learning algorithms (Williams, 1992; Sutton
et al., 2000) to ﬁnd an unbiased gradient estima-
tor for the gradient update. Sparse rewards in this
situation often cause the high variance of gradient
estimation, which consequently leads to unstable

8
1
0
2
 
p
e
S
 
0
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
3
1
3
0
.
9
0
8
1
:
v
i
X
r
a

training and limited improvements.

Lamb et al. (2016); Gu et al. (2017); Ma et al.
(2018) respectively use the discriminator, critic
and bag-of-words target as sequence-level train-
ing objectives, all of which are directly connected
to the generation model and hence enable direct
gradient update. However, these methods do not
allow for direct optimization with respect to eval-
uation metrics.

In this paper, we propose a method to com-
bine the strengths of the word-level and sequence-
level training, that is the direct gradient update
without gradient estimation from word-level train-
ing and the greater ﬂexibility from sequence-level
training. Our method introduces probabilistic n-
gram matching which makes sequence-level ob-
jectives (e.g., BLEU, GLEU) differentiable. Dur-
ing training, it abandons teacher forcing and per-
forms greedy search instead to take into consid-
eration the predicted words. Experiment results
show that our method signiﬁcantly outperforms
word-level training with the cross-entropy loss and
sequence-level training under the reinforcement
framework. The experiments also indicate that
greedy search strategy indeed has superiority over
teacher forcing.

2 Background

NMT is based on an end-to-end framework which
directly models the translation probability from
the source sentence x to the target sentence ˆy:

P (ˆy|x) =

p(ˆyj|ˆy<j, x, θ),

(1)

T
(cid:89)

j=1

where T is the target length and θ is the model pa-
rameters. Given the training set D = {XM, YM}
with M sentences pairs, the training objective is to
maximize the log-likelihood of the training data as

θ = arg max

{L(θ)}

θ

L(θ) =

log(p(ˆym

j |ˆym

<j, xm, θ)),

M
(cid:88)

lm
(cid:88)

m=1

j=1

where the superior m indicates the m-th sentence
in the dataset and lm is the length of m-th target
sentence.

In the above model, the probability of each tar-
get word p(ˆym
<j, xm, θ) is conditioned on the
previous target words. The scenario is that in the

j |ˆym

training time, the teacher forcing algorithm is em-
ployed and the ground truth words from the tar-
get sentence are fed as context, while during in-
ference, the ground truth words are not available
and the previous predicted words are instead fed as
context. This discrepancy is called exposure bias.

3 Model

3.1 Sequence-Level Objectives

Many automatic evaluation metrics of machine
translation, such as BLEU, GLEU and NIST, are
based on the n-gram matching. Assuming that y
and ˆy are the output sentence and the ground truth
sentence with length T and T (cid:48) respectively, the
count of an n-gram g = (g1, . . . , gn) in sentence
y is calculated as

Cy(g) =

1{gi = yt+i},

(3)

T −n
(cid:88)

n
(cid:89)

t=0

i=1

where 1{·} is the indicator function. The matching
count of the n-gram g between ˆy and y is given by

Cˆy

y(g) = min (Cy(g), Cˆy(g)).
Then the precision pn and the recall rn of the pre-
dicted n-grams are calculated as follows

(4)

pn =

rn =

(cid:80)

(cid:80)

(cid:80)

(cid:80)

,

g∈y Cˆy
y(g)
g∈y Cy(g)
g∈y Cˆy
y(g)
g∈ˆy Cˆy(g)

.

(5)

(6)

BLEU, the most widely used metric for ma-
chine translation evaluation, is deﬁned based on
the n-gram precision as follows

BLEU = BP · exp(

wn log pn),

(7)

N
(cid:88)

n=1

where BP stands for the brevity penalty and wn is
the weight for the n-gram. In contrast, GLEU is
the minimum of recall and precision of 1-4 grams
where 1-4 grams are counted together:

(2)

GLEU = min(p1-4, r1-4).

(8)

3.2 probabilistic Sequence-Level Objectives

In the output sentence y, the prediction probabil-
ity varies among words. Some words are trans-
lated by the model with high conﬁdence while
some words are translated with high uncertainty.

Figure 1: The overview of our model with greedy search. At each decoding step, the predicted word which has the
highest probability in the probability vector is selected as context and fed into the RNN, and meanwhile this word
and its probability are also used to calculate the probabilistic n-gram count.

However, when calculating the count of n-grams
in Eq.(3), all the words in the output sentence are
treated equally, regardless of their respective pre-
diction probabilities.

To give a more precise description of n-gram
counts which considers the variety of prediction
probabilities, we use the prediction probability
p(yj|y<j, x, θ) as the count of word yj, and cor-
respondingly the count of an n-gram is the product
of these probabilistic counts of all the words in the
n-gram, not one anymore. Then the probabilistic
count of g = (g1, . . . , gn) is calculated by sum-
ming over the output sentence y as

(cid:101)Cy(g) =
T −n
(cid:88)

n
(cid:89)

t=0

i=1

1{gi = yt+i} · p(yt+i|y<t+i, x, θ).

(9)

Now the probabilistic sequence-level objective
can be got by replacing Cy(g) with (cid:101)Cy(g) (the
tilde over the head indicates the probabilistic ver-
sion) and keeping the rest unchanged. Here, we
take BLEU as an example and show how the prob-
abilistic BLEU (denoted as P-BLEU) is deﬁned.
From this purpose, the matching count of n-gram
g in Eq.(4) is modiﬁed as follows

ˆy
y(g) = min((cid:101)Cy(g), Cˆy(g)).
(cid:101)C

(10)

and the predict precision of n-grams changes into

˜pn =

(cid:80)

(cid:80)

ˆy
y(g)
g∈y (cid:101)C
g∈y (cid:101)Cy(g)

.

(11)

Finally, the probabilistic BLEU (P-BLEU) is de-
ﬁned as

P-BLEU = BP · exp(

wn log ˜pn),

(12)

N
(cid:88)

n=1

Probabilistic GLEU (P-GLEU) can be deﬁned
in a similar way. Speciﬁcally, we denote the prob-
abilistic precision of n-grams as P-Pn. The prob-
abilistic precision is more reasonable than recall
since the denominator in Eq.(11) plays a normal-
ization role, so we modify the deﬁnition in Eq.(8)
and deﬁne P-GLEU as simply the probabilistic
precision of 1-4 grams.

The general probabilistic loss function is:

L(θ) = −

P(ym, ˆym),

(13)

M
(cid:88)

m=1

where P represents the probabilistic sequence-
level objectives, and ym and ˆym are the predicted
translation and the ground truth for the m-th sen-
tence respectively. The calculation of the proba-
bilistic objective is illustrated in Figure 1. This
probabilistic loss can work with decoding strate-
gies such as greedy search and teacher forcing. In
this paper we employ greedy search rather than
teacher forcing so as to use the previously pre-
dicted words as context and alleviate the exposure
bias problem.

System

Dev(MT02) MT03 MT04 MT05 MT06 AVG

BaseNMT
MRT
RF
P-BLEU
P-GLEU
P-P2

36.72
37.17
37.13
37.26
37.44
38.03

33.95
34.89
34.66
34.54
34.67
35.45

37.44
37.90
37.69
38.05
38.11
39.30

33.96
34.62
34.55
34.30
34.24
35.10

33.09
33.78
33.74
34.11
34.58
34.59

34.61
35.30
35.16
35.25
35.40
36.11

Table 1: Results on NIST Chinese-to-English Translation Task. AVG = average BLEU scores for test sets. The
bold number indicates the highest score in the column.

4 Experiment

4.1 Settings

We carry out experiments on Chinese-to-English
translation.1 The training data consists of 1.25M
pairs of sentences extracted from LDC corpora2.
Sentence pairs with either side longer than 50 were
dropped. We use NIST 2002 (MT 02) as the vali-
dation set and NIST 2003-2006 (MT 03-08) as the
test sets. We use the case insensitive 4-gram NIST
BLEU score (Papineni et al., 2002) for the transla-
tion task.

We apply our method to an attention-based
NMT system (Bahdanau et al., 2014) implemented
by Pytorch. Both source and target vocabularies
are limited to 30K. All word embedding sizes are
set to 512, and the sizes of hidden units in both
encoder and decoder RNNs are also set to 512.
All parameters are initialized by uniform distri-
bution over [−0.1, 0.1]. The mini-batch stochas-
tic gradient descent (SGD) algorithm is employed
to train the model with batch size of 40. In ad-
dition, the learning rate is adjusted by adadelta
optimizer (Zeiler, 2012) with ρ = 0.95 and (cid:15) =
1e-6. Dropout is applied on the output layer with
dropout rate of 0.5. The beam size is set to 10.

4.2 Performance

Systems We ﬁrst pretrain the baseline model by
maximum likelihood estimation (MLE) and then
reﬁne the model using probabilistic sequence-
level objectives, including P-BLEU, P-GLEU and
P-P2 (probabilistic 2-gram precision).
In addi-
tion, we reproduce previous works which train
the NMT model through minimum risk training
(MRT) (Shen et al., 2016) and REINFORCE algo-

1Experiment code: https://github.com/ictnlp/GS4NMT
2The corpora include LDC2002E18, LDC2003E07,
LDC2004T07,

Hansards

portion

of

LDC2003E14,
LDC2004T08 and LDC2005T06.

rithm (RF) (Ranzato et al., 2015). When reproduc-
ing their works, we set BLEU, GLEU and 2-gram
precision as training objectives respectively and
ﬁnd out that GLEU yields the best performance.
In the following, we only report the results with
training objective GLEU.
Performance Table 1 shows the translation per-
formance on test sets measured in BLEU score.
Simply training NMT model by the probabilistic
2-gram precision achieves an improvement of 1.5
BLEU points, which signiﬁcantly outperforms the
reinforcement-based algorithms. We also test the
precision of other n-grams and their combinations,
but do not notice signiﬁcant improvements over
P-P2. Notice that our method only changes the
loss function, without any modiﬁcation on model
structure and training data.

4.3 Why Pretraining

We use the probabilistic loss to ﬁnetune the base-
line model rather than training from scratch. This
is in line with our motivation: to alleviate the ex-
posure bias and make the model exposed to its own
output during training. In the very beginning of
the training, the model’s translation capability is
nearly zero and the generated sentences are often
meaningless and do not contain useful information
for the training, so it is unreasonable to directly ap-
ply the greedy search strategy. Therefore, we ﬁrst
apply the teacher forcing algorithm to pretrain the
model, and then we let the model generate the sen-
tences itself and learn from its own outputs.

Another reason favoring pretraining is that pre-
training can lower the training cost. The train-
ing cost of the introduced probabilistic loss is
about three times higher than the cost of cross en-
tropy. Without pretraining, the training time will
be much higher than usual. Otherwise, the train-
ing cost is acceptable if the probabilistic loss is
only for ﬁnetuning.

Figure 2: learning curves of different decoding strate-
gies with training objective P-P2.

Figure 3: P-GLEU and GLEU scores on 100 pairs of
sentences.

4.4 Effect of Decoding Strategy

The probabilistic loss, deﬁned in Eq.(13), is com-
puted from the model output y and reference ˆy.
In this section, we apply two different decoding
strategies to generate y: 1. teacher forcing, which
uses the ground truth as decoder input. 2. greedy
search, which feeds the word with maximum prob-
ability. By conducting this experiment, we attempt
to ﬁgure out where the improvements come from:
the modiﬁcation of loss or the mitigation of expo-
sure bias?

Figure 2 shows the learning curves of the two
decoding strategies with training objective P-P2.
Teacher forcing raises about 0.5 BLEU improve-
ments and greedy search outperform the teacher
forcing algorithm by nearly 1 BLEU point. We
conclude that the probabilistic loss has its own ad-
vantage even when trained by the teacher forcing
algorithm, and greedy search is effective in allevi-
ating the exposure bias.

Notice that the greedy search strategy highly
relys on the probabilistic loss and can not be con-
ducted independently. Greedy search together
with the word-level loss is very similar with the
scheduled sampling(SS). However, SS is inconsis-
tent with the word-level loss since the word-level
loss requires strict alignment between hypothesis
and reference, which can only be accomplished by
the teacher forcing algorithm.

4.5 Correlation with Evaluation Metrics

In this section, we explore how the probabilistic
objective correlates with the real evaluation met-
ric. We randomly sample 100 pairs of sentences

from the training set and compute their P-GLEU
and GLEU scores (Wu et al. (2016) indicates that
GLEU have better performance in the sentence-
level evaluation than BLEU).

Directly computing the correlation between
GLEU and P-GLEU gives the correlation coefﬁ-
cient 0.86, which indicates strong correlation. In
addition, we draw the scatter diagram of the 100
pairs of sentences in Figure 3 with GLEU as x-axis
and P-GLEU as y-axix. Figure 3 shows that P-
GLEU correlates well with GLEU, suggesting that
it is reasonable to directly train the NMT model
with P-GLEU.

5 Conclusion

Word-level loss cannot evaluate the translation
properly and suffers from the exposure bias, and
sequence-level objectives are usually indifferen-
tiable and require gradient estimation. We propose
probabilistic sequence-level objectives based on n-
gram matching, which relieve the dependence on
gradient estimation and can directly train the NMT
model. Experiment results show that our method
signiﬁcantly outperforms previous sequence-level
training works and successfully alleviates the ex-
posure bias through performing greedy search.

6 Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments. This work was supported by
the National Natural Science Foundation of China
(NSFC) under the project NO.61472428 and the
project NO. 61662077.

References

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2016. An actor-critic
algorithm for sequence prediction. arXiv preprint
arXiv:1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171–1179.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014.
Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natural
Language Processing, pages 1317–1327.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016.
Professor
forcing: A new algorithm for training recurrent net-
works. In Advances In Neural Information Process-
ing Systems, pages 4601–4609.

Guillaume Lample, Myle Ott, Alexis Conneau, Lu-
dovic Denoyer, and Marc’Aurelio Ranzato. 2018.
Phrase-based & neural unsupervised machine trans-
lation. arXiv preprint arXiv:1804.07755.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. arXiv preprint arXiv:1805.04871.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
In Proceedings of
uation of machine translation.
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

George Doddington. 2002.

Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 1683–1692.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jiatao Gu, Kyunghyun Cho, and Victor OK Li. 2017.
Trainable greedy decoding for neural machine trans-
In Proceedings of the 2017 Conference on
lation.
Empirical Methods in Natural Language Process-
ing, pages 1968–1978.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary,
Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, volume 200.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
In Proceedings of
continuous translation models.
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Arun Venkatraman, Martial Hebert, and J Andrew
Bagnell. 2015.
Improving multi-step prediction of
learned time series models. In AAAI, pages 3024–
3030.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
In Reinforcement Learning, pages
ment learning.
5–32. Springer.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2017. Adver-
arXiv preprint
sarial neural machine translation.
arXiv:1704.06933.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016.
Google’s neural ma-
chine translation system: Bridging the gap between
arXiv preprint
human and machine translation.
arXiv:1609.08144.

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2017.
Improving neural machine translation with condi-
tional sequence generative adversarial nets. arXiv
preprint arXiv:1703.04887.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

Greedy Search with Probabilistic N-gram Matching
for Neural Machine Translation

Chenze Shao1,2

Xilin Chen1,2
Yang Feng1,2∗
1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences (ICT/CAS)
2University of Chinese Academy of Science
{shaochenze18z,fengyang,xlchen}@ict.ac.cn

Abstract

Neural machine translation (NMT) models are
usually trained with the word-level loss using
the teacher forcing algorithm, which not only
evaluates the translation improperly but also
suffers from exposure bias. Sequence-level
training under the reinforcement framework
can mitigate the problems of the word-level
loss, but its performance is unstable due to the
high variance of the gradient estimation. On
these grounds, we present a method with a dif-
ferentiable sequence-level training objective
based on probabilistic n-gram matching which
can avoid the reinforcement framework. In ad-
dition, this method performs greedy search in
the training which uses the predicted words
as context just as at inference to alleviate the
problem of exposure bias. Experiment results
on the NIST Chinese-to-English translation
tasks show that our method signiﬁcantly out-
performs the reinforcement-based algorithms
and achieves an improvement of 1.5 BLEU
points on average over a strong baseline sys-
tem.

1

Introduction

Neural machine translation (NMT) (Kalchbrenner
and Blunsom, 2013; Cho et al., 2014; Sutskever
et al., 2014; Bahdanau et al., 2014) has now
achieved impressive performance (Wu et al., 2016;
Gehring et al., 2017; Vaswani et al., 2017; Hassan
et al., 2018; Chen et al., 2018; Lample et al., 2018)
and draws more attention. NMT models are built
on the encoder-decoder framework where the en-
coder network encodes the source sentence to dis-
tributed representations and the decoder network
reconstructs the target sentence form the represen-
tations word by word.

Currently, NMT models are usually trained with
the word-level loss (i.e., cross-entropy) under the
teacher forcing algorithm (Williams and Zipser,

*Corresponding Author

1989), which forces the model to generate trans-
lation strictly matching the ground-truth at the
word level. However, in practice it is impossible
to generate translation totally the same as ground
truth. Once different target words are generated,
the word-level loss cannot evaluate the translation
properly, usually under-estimating the translation.
In addition, the teacher forcing algorithm suffers
from the exposure bias (Ranzato et al., 2015) as it
uses different inputs at training and inference, that
is ground-truth words for the training and previ-
ously predicted words for the inference. Kim and
Rush (2016) proposed a method of sequence-level
knowledge distillation, which use teacher outputs
to direct the training of student model, but the stu-
dent model still have no access to its own pre-
dicted words. Scheduled sampling(SS) (Bengio
et al., 2015; Venkatraman et al., 2015) attempts to
alleviate the exposure bias problem through mix-
ing ground-truth words and previously predicted
words as inputs during training. However, the se-
quence generated by SS may not be aligned with
the target sequence, which is inconsistent with the
word-level loss.

In contrast, sequence-level objectives, such as
BLEU (Papineni et al., 2002), GLEU (Wu et al.,
2016), TER (Snover et al., 2006), and NIST (Dod-
dington, 2002), evaluate translation at the sen-
tence or n-gram level and allow for greater ﬂex-
ibility, and thus can mitigate the above problems
of the word-level loss. However, due to the non-
differentiable of sequence-level objectives, pre-
vious works on sequence-level training (Ranzato
et al., 2015; Shen et al., 2016; Bahdanau et al.,
2016; Wu et al., 2016; He et al., 2016; Wu et al.,
2017; Yang et al., 2017) mainly rely on reinforce-
ment learning algorithms (Williams, 1992; Sutton
et al., 2000) to ﬁnd an unbiased gradient estima-
tor for the gradient update. Sparse rewards in this
situation often cause the high variance of gradient
estimation, which consequently leads to unstable

8
1
0
2
 
p
e
S
 
0
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
3
1
3
0
.
9
0
8
1
:
v
i
X
r
a

training and limited improvements.

Lamb et al. (2016); Gu et al. (2017); Ma et al.
(2018) respectively use the discriminator, critic
and bag-of-words target as sequence-level train-
ing objectives, all of which are directly connected
to the generation model and hence enable direct
gradient update. However, these methods do not
allow for direct optimization with respect to eval-
uation metrics.

In this paper, we propose a method to com-
bine the strengths of the word-level and sequence-
level training, that is the direct gradient update
without gradient estimation from word-level train-
ing and the greater ﬂexibility from sequence-level
training. Our method introduces probabilistic n-
gram matching which makes sequence-level ob-
jectives (e.g., BLEU, GLEU) differentiable. Dur-
ing training, it abandons teacher forcing and per-
forms greedy search instead to take into consid-
eration the predicted words. Experiment results
show that our method signiﬁcantly outperforms
word-level training with the cross-entropy loss and
sequence-level training under the reinforcement
framework. The experiments also indicate that
greedy search strategy indeed has superiority over
teacher forcing.

2 Background

NMT is based on an end-to-end framework which
directly models the translation probability from
the source sentence x to the target sentence ˆy:

P (ˆy|x) =

p(ˆyj|ˆy<j, x, θ),

(1)

T
(cid:89)

j=1

where T is the target length and θ is the model pa-
rameters. Given the training set D = {XM, YM}
with M sentences pairs, the training objective is to
maximize the log-likelihood of the training data as

θ = arg max

{L(θ)}

θ

L(θ) =

log(p(ˆym

j |ˆym

<j, xm, θ)),

M
(cid:88)

lm
(cid:88)

m=1

j=1

where the superior m indicates the m-th sentence
in the dataset and lm is the length of m-th target
sentence.

In the above model, the probability of each tar-
get word p(ˆym
<j, xm, θ) is conditioned on the
previous target words. The scenario is that in the

j |ˆym

training time, the teacher forcing algorithm is em-
ployed and the ground truth words from the tar-
get sentence are fed as context, while during in-
ference, the ground truth words are not available
and the previous predicted words are instead fed as
context. This discrepancy is called exposure bias.

3 Model

3.1 Sequence-Level Objectives

Many automatic evaluation metrics of machine
translation, such as BLEU, GLEU and NIST, are
based on the n-gram matching. Assuming that y
and ˆy are the output sentence and the ground truth
sentence with length T and T (cid:48) respectively, the
count of an n-gram g = (g1, . . . , gn) in sentence
y is calculated as

Cy(g) =

1{gi = yt+i},

(3)

T −n
(cid:88)

n
(cid:89)

t=0

i=1

where 1{·} is the indicator function. The matching
count of the n-gram g between ˆy and y is given by

Cˆy

y(g) = min (Cy(g), Cˆy(g)).
Then the precision pn and the recall rn of the pre-
dicted n-grams are calculated as follows

(4)

pn =

rn =

(cid:80)

(cid:80)

(cid:80)

(cid:80)

,

g∈y Cˆy
y(g)
g∈y Cy(g)
g∈y Cˆy
y(g)
g∈ˆy Cˆy(g)

.

(5)

(6)

BLEU, the most widely used metric for ma-
chine translation evaluation, is deﬁned based on
the n-gram precision as follows

BLEU = BP · exp(

wn log pn),

(7)

N
(cid:88)

n=1

where BP stands for the brevity penalty and wn is
the weight for the n-gram. In contrast, GLEU is
the minimum of recall and precision of 1-4 grams
where 1-4 grams are counted together:

(2)

GLEU = min(p1-4, r1-4).

(8)

3.2 probabilistic Sequence-Level Objectives

In the output sentence y, the prediction probabil-
ity varies among words. Some words are trans-
lated by the model with high conﬁdence while
some words are translated with high uncertainty.

Figure 1: The overview of our model with greedy search. At each decoding step, the predicted word which has the
highest probability in the probability vector is selected as context and fed into the RNN, and meanwhile this word
and its probability are also used to calculate the probabilistic n-gram count.

However, when calculating the count of n-grams
in Eq.(3), all the words in the output sentence are
treated equally, regardless of their respective pre-
diction probabilities.

To give a more precise description of n-gram
counts which considers the variety of prediction
probabilities, we use the prediction probability
p(yj|y<j, x, θ) as the count of word yj, and cor-
respondingly the count of an n-gram is the product
of these probabilistic counts of all the words in the
n-gram, not one anymore. Then the probabilistic
count of g = (g1, . . . , gn) is calculated by sum-
ming over the output sentence y as

(cid:101)Cy(g) =
T −n
(cid:88)

n
(cid:89)

t=0

i=1

1{gi = yt+i} · p(yt+i|y<t+i, x, θ).

(9)

Now the probabilistic sequence-level objective
can be got by replacing Cy(g) with (cid:101)Cy(g) (the
tilde over the head indicates the probabilistic ver-
sion) and keeping the rest unchanged. Here, we
take BLEU as an example and show how the prob-
abilistic BLEU (denoted as P-BLEU) is deﬁned.
From this purpose, the matching count of n-gram
g in Eq.(4) is modiﬁed as follows

ˆy
y(g) = min((cid:101)Cy(g), Cˆy(g)).
(cid:101)C

(10)

and the predict precision of n-grams changes into

˜pn =

(cid:80)

(cid:80)

ˆy
y(g)
g∈y (cid:101)C
g∈y (cid:101)Cy(g)

.

(11)

Finally, the probabilistic BLEU (P-BLEU) is de-
ﬁned as

P-BLEU = BP · exp(

wn log ˜pn),

(12)

N
(cid:88)

n=1

Probabilistic GLEU (P-GLEU) can be deﬁned
in a similar way. Speciﬁcally, we denote the prob-
abilistic precision of n-grams as P-Pn. The prob-
abilistic precision is more reasonable than recall
since the denominator in Eq.(11) plays a normal-
ization role, so we modify the deﬁnition in Eq.(8)
and deﬁne P-GLEU as simply the probabilistic
precision of 1-4 grams.

The general probabilistic loss function is:

L(θ) = −

P(ym, ˆym),

(13)

M
(cid:88)

m=1

where P represents the probabilistic sequence-
level objectives, and ym and ˆym are the predicted
translation and the ground truth for the m-th sen-
tence respectively. The calculation of the proba-
bilistic objective is illustrated in Figure 1. This
probabilistic loss can work with decoding strate-
gies such as greedy search and teacher forcing. In
this paper we employ greedy search rather than
teacher forcing so as to use the previously pre-
dicted words as context and alleviate the exposure
bias problem.

System

Dev(MT02) MT03 MT04 MT05 MT06 AVG

BaseNMT
MRT
RF
P-BLEU
P-GLEU
P-P2

36.72
37.17
37.13
37.26
37.44
38.03

33.95
34.89
34.66
34.54
34.67
35.45

37.44
37.90
37.69
38.05
38.11
39.30

33.96
34.62
34.55
34.30
34.24
35.10

33.09
33.78
33.74
34.11
34.58
34.59

34.61
35.30
35.16
35.25
35.40
36.11

Table 1: Results on NIST Chinese-to-English Translation Task. AVG = average BLEU scores for test sets. The
bold number indicates the highest score in the column.

4 Experiment

4.1 Settings

We carry out experiments on Chinese-to-English
translation.1 The training data consists of 1.25M
pairs of sentences extracted from LDC corpora2.
Sentence pairs with either side longer than 50 were
dropped. We use NIST 2002 (MT 02) as the vali-
dation set and NIST 2003-2006 (MT 03-08) as the
test sets. We use the case insensitive 4-gram NIST
BLEU score (Papineni et al., 2002) for the transla-
tion task.

We apply our method to an attention-based
NMT system (Bahdanau et al., 2014) implemented
by Pytorch. Both source and target vocabularies
are limited to 30K. All word embedding sizes are
set to 512, and the sizes of hidden units in both
encoder and decoder RNNs are also set to 512.
All parameters are initialized by uniform distri-
bution over [−0.1, 0.1]. The mini-batch stochas-
tic gradient descent (SGD) algorithm is employed
to train the model with batch size of 40. In ad-
dition, the learning rate is adjusted by adadelta
optimizer (Zeiler, 2012) with ρ = 0.95 and (cid:15) =
1e-6. Dropout is applied on the output layer with
dropout rate of 0.5. The beam size is set to 10.

4.2 Performance

Systems We ﬁrst pretrain the baseline model by
maximum likelihood estimation (MLE) and then
reﬁne the model using probabilistic sequence-
level objectives, including P-BLEU, P-GLEU and
P-P2 (probabilistic 2-gram precision).
In addi-
tion, we reproduce previous works which train
the NMT model through minimum risk training
(MRT) (Shen et al., 2016) and REINFORCE algo-

1Experiment code: https://github.com/ictnlp/GS4NMT
2The corpora include LDC2002E18, LDC2003E07,
LDC2004T07,

portion

of

LDC2003E14,
LDC2004T08 and LDC2005T06.

Hansards

rithm (RF) (Ranzato et al., 2015). When reproduc-
ing their works, we set BLEU, GLEU and 2-gram
precision as training objectives respectively and
ﬁnd out that GLEU yields the best performance.
In the following, we only report the results with
training objective GLEU.
Performance Table 1 shows the translation per-
formance on test sets measured in BLEU score.
Simply training NMT model by the probabilistic
2-gram precision achieves an improvement of 1.5
BLEU points, which signiﬁcantly outperforms the
reinforcement-based algorithms. We also test the
precision of other n-grams and their combinations,
but do not notice signiﬁcant improvements over
P-P2. Notice that our method only changes the
loss function, without any modiﬁcation on model
structure and training data.

4.3 Why Pretraining

We use the probabilistic loss to ﬁnetune the base-
line model rather than training from scratch. This
is in line with our motivation: to alleviate the ex-
posure bias and make the model exposed to its own
output during training. In the very beginning of
the training, the model’s translation capability is
nearly zero and the generated sentences are often
meaningless and do not contain useful information
for the training, so it is unreasonable to directly ap-
ply the greedy search strategy. Therefore, we ﬁrst
apply the teacher forcing algorithm to pretrain the
model, and then we let the model generate the sen-
tences itself and learn from its own outputs.

Another reason favoring pretraining is that pre-
training can lower the training cost. The train-
ing cost of the introduced probabilistic loss is
about three times higher than the cost of cross en-
tropy. Without pretraining, the training time will
be much higher than usual. Otherwise, the train-
ing cost is acceptable if the probabilistic loss is
only for ﬁnetuning.

Figure 2: learning curves of different decoding strate-
gies with training objective P-P2.

Figure 3: P-GLEU and GLEU scores on 100 pairs of
sentences.

4.4 Effect of Decoding Strategy

The probabilistic loss, deﬁned in Eq.(13), is com-
puted from the model output y and reference ˆy.
In this section, we apply two different decoding
strategies to generate y: 1. teacher forcing, which
uses the ground truth as decoder input. 2. greedy
search, which feeds the word with maximum prob-
ability. By conducting this experiment, we attempt
to ﬁgure out where the improvements come from:
the modiﬁcation of loss or the mitigation of expo-
sure bias?

Figure 2 shows the learning curves of the two
decoding strategies with training objective P-P2.
Teacher forcing raises about 0.5 BLEU improve-
ments and greedy search outperform the teacher
forcing algorithm by nearly 1 BLEU point. We
conclude that the probabilistic loss has its own ad-
vantage even when trained by the teacher forcing
algorithm, and greedy search is effective in allevi-
ating the exposure bias.

Notice that the greedy search strategy highly
relys on the probabilistic loss and can not be con-
ducted independently. Greedy search together
with the word-level loss is very similar with the
scheduled sampling(SS). However, SS is inconsis-
tent with the word-level loss since the word-level
loss requires strict alignment between hypothesis
and reference, which can only be accomplished by
the teacher forcing algorithm.

4.5 Correlation with Evaluation Metrics

In this section, we explore how the probabilistic
objective correlates with the real evaluation met-
ric. We randomly sample 100 pairs of sentences

from the training set and compute their P-GLEU
and GLEU scores (Wu et al. (2016) indicates that
GLEU have better performance in the sentence-
level evaluation than BLEU).

Directly computing the correlation between
GLEU and P-GLEU gives the correlation coefﬁ-
cient 0.86, which indicates strong correlation. In
addition, we draw the scatter diagram of the 100
pairs of sentences in Figure 3 with GLEU as x-axis
and P-GLEU as y-axix. Figure 3 shows that P-
GLEU correlates well with GLEU, suggesting that
it is reasonable to directly train the NMT model
with P-GLEU.

5 Conclusion

Word-level loss cannot evaluate the translation
properly and suffers from the exposure bias, and
sequence-level objectives are usually indifferen-
tiable and require gradient estimation. We propose
probabilistic sequence-level objectives based on n-
gram matching, which relieve the dependence on
gradient estimation and can directly train the NMT
model. Experiment results show that our method
signiﬁcantly outperforms previous sequence-level
training works and successfully alleviates the ex-
posure bias through performing greedy search.

6 Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments. This work was supported by
the National Natural Science Foundation of China
(NSFC) under the project NO.61472428 and the
project NO. 61662077.

References

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2016. An actor-critic
algorithm for sequence prediction. arXiv preprint
arXiv:1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171–1179.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014.
Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natural
Language Processing, pages 1317–1327.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016.
Professor
forcing: A new algorithm for training recurrent net-
works. In Advances In Neural Information Process-
ing Systems, pages 4601–4609.

Guillaume Lample, Myle Ott, Alexis Conneau, Lu-
dovic Denoyer, and Marc’Aurelio Ranzato. 2018.
Phrase-based & neural unsupervised machine trans-
lation. arXiv preprint arXiv:1804.07755.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. arXiv preprint arXiv:1805.04871.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
In Proceedings of
uation of machine translation.
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

George Doddington. 2002.

Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 1683–1692.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jiatao Gu, Kyunghyun Cho, and Victor OK Li. 2017.
Trainable greedy decoding for neural machine trans-
In Proceedings of the 2017 Conference on
lation.
Empirical Methods in Natural Language Process-
ing, pages 1968–1978.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary,
Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, volume 200.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
In Proceedings of
continuous translation models.
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Arun Venkatraman, Martial Hebert, and J Andrew
Bagnell. 2015.
Improving multi-step prediction of
learned time series models. In AAAI, pages 3024–
3030.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
In Reinforcement Learning, pages
ment learning.
5–32. Springer.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2017. Adver-
arXiv preprint
sarial neural machine translation.
arXiv:1704.06933.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016.
Google’s neural ma-
chine translation system: Bridging the gap between
arXiv preprint
human and machine translation.
arXiv:1609.08144.

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2017.
Improving neural machine translation with condi-
tional sequence generative adversarial nets. arXiv
preprint arXiv:1703.04887.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

Greedy Search with Probabilistic N-gram Matching
for Neural Machine Translation

Chenze Shao1,2

Xilin Chen1,2
Yang Feng1,2∗
1Key Laboratory of Intelligent Information Processing
Institute of Computing Technology, Chinese Academy of Sciences (ICT/CAS)
2University of Chinese Academy of Science
{shaochenze18z,fengyang,xlchen}@ict.ac.cn

Abstract

Neural machine translation (NMT) models are
usually trained with the word-level loss using
the teacher forcing algorithm, which not only
evaluates the translation improperly but also
suffers from exposure bias. Sequence-level
training under the reinforcement framework
can mitigate the problems of the word-level
loss, but its performance is unstable due to the
high variance of the gradient estimation. On
these grounds, we present a method with a dif-
ferentiable sequence-level training objective
based on probabilistic n-gram matching which
can avoid the reinforcement framework. In ad-
dition, this method performs greedy search in
the training which uses the predicted words
as context just as at inference to alleviate the
problem of exposure bias. Experiment results
on the NIST Chinese-to-English translation
tasks show that our method signiﬁcantly out-
performs the reinforcement-based algorithms
and achieves an improvement of 1.5 BLEU
points on average over a strong baseline sys-
tem.

1

Introduction

Neural machine translation (NMT) (Kalchbrenner
and Blunsom, 2013; Cho et al., 2014; Sutskever
et al., 2014; Bahdanau et al., 2014) has now
achieved impressive performance (Wu et al., 2016;
Gehring et al., 2017; Vaswani et al., 2017; Hassan
et al., 2018; Chen et al., 2018; Lample et al., 2018)
and draws more attention. NMT models are built
on the encoder-decoder framework where the en-
coder network encodes the source sentence to dis-
tributed representations and the decoder network
reconstructs the target sentence form the represen-
tations word by word.

Currently, NMT models are usually trained with
the word-level loss (i.e., cross-entropy) under the
teacher forcing algorithm (Williams and Zipser,

*Corresponding Author

1989), which forces the model to generate trans-
lation strictly matching the ground-truth at the
word level. However, in practice it is impossible
to generate translation totally the same as ground
truth. Once different target words are generated,
the word-level loss cannot evaluate the translation
properly, usually under-estimating the translation.
In addition, the teacher forcing algorithm suffers
from the exposure bias (Ranzato et al., 2015) as it
uses different inputs at training and inference, that
is ground-truth words for the training and previ-
ously predicted words for the inference. Kim and
Rush (2016) proposed a method of sequence-level
knowledge distillation, which use teacher outputs
to direct the training of student model, but the stu-
dent model still have no access to its own pre-
dicted words. Scheduled sampling(SS) (Bengio
et al., 2015; Venkatraman et al., 2015) attempts to
alleviate the exposure bias problem through mix-
ing ground-truth words and previously predicted
words as inputs during training. However, the se-
quence generated by SS may not be aligned with
the target sequence, which is inconsistent with the
word-level loss.

In contrast, sequence-level objectives, such as
BLEU (Papineni et al., 2002), GLEU (Wu et al.,
2016), TER (Snover et al., 2006), and NIST (Dod-
dington, 2002), evaluate translation at the sen-
tence or n-gram level and allow for greater ﬂex-
ibility, and thus can mitigate the above problems
of the word-level loss. However, due to the non-
differentiable of sequence-level objectives, pre-
vious works on sequence-level training (Ranzato
et al., 2015; Shen et al., 2016; Bahdanau et al.,
2016; Wu et al., 2016; He et al., 2016; Wu et al.,
2017; Yang et al., 2017) mainly rely on reinforce-
ment learning algorithms (Williams, 1992; Sutton
et al., 2000) to ﬁnd an unbiased gradient estima-
tor for the gradient update. Sparse rewards in this
situation often cause the high variance of gradient
estimation, which consequently leads to unstable

8
1
0
2
 
p
e
S
 
0
1
 
 
]
L
C
.
s
c
[
 
 
1
v
2
3
1
3
0
.
9
0
8
1
:
v
i
X
r
a

training and limited improvements.

Lamb et al. (2016); Gu et al. (2017); Ma et al.
(2018) respectively use the discriminator, critic
and bag-of-words target as sequence-level train-
ing objectives, all of which are directly connected
to the generation model and hence enable direct
gradient update. However, these methods do not
allow for direct optimization with respect to eval-
uation metrics.

In this paper, we propose a method to com-
bine the strengths of the word-level and sequence-
level training, that is the direct gradient update
without gradient estimation from word-level train-
ing and the greater ﬂexibility from sequence-level
training. Our method introduces probabilistic n-
gram matching which makes sequence-level ob-
jectives (e.g., BLEU, GLEU) differentiable. Dur-
ing training, it abandons teacher forcing and per-
forms greedy search instead to take into consid-
eration the predicted words. Experiment results
show that our method signiﬁcantly outperforms
word-level training with the cross-entropy loss and
sequence-level training under the reinforcement
framework. The experiments also indicate that
greedy search strategy indeed has superiority over
teacher forcing.

2 Background

NMT is based on an end-to-end framework which
directly models the translation probability from
the source sentence x to the target sentence ˆy:

P (ˆy|x) =

p(ˆyj|ˆy<j, x, θ),

(1)

T
(cid:89)

j=1

where T is the target length and θ is the model pa-
rameters. Given the training set D = {XM, YM}
with M sentences pairs, the training objective is to
maximize the log-likelihood of the training data as

θ = arg max

{L(θ)}

θ

L(θ) =

log(p(ˆym

j |ˆym

<j, xm, θ)),

M
(cid:88)

lm
(cid:88)

m=1

j=1

where the superior m indicates the m-th sentence
in the dataset and lm is the length of m-th target
sentence.

In the above model, the probability of each tar-
get word p(ˆym
<j, xm, θ) is conditioned on the
previous target words. The scenario is that in the

j |ˆym

training time, the teacher forcing algorithm is em-
ployed and the ground truth words from the tar-
get sentence are fed as context, while during in-
ference, the ground truth words are not available
and the previous predicted words are instead fed as
context. This discrepancy is called exposure bias.

3 Model

3.1 Sequence-Level Objectives

Many automatic evaluation metrics of machine
translation, such as BLEU, GLEU and NIST, are
based on the n-gram matching. Assuming that y
and ˆy are the output sentence and the ground truth
sentence with length T and T (cid:48) respectively, the
count of an n-gram g = (g1, . . . , gn) in sentence
y is calculated as

Cy(g) =

1{gi = yt+i},

(3)

T −n
(cid:88)

n
(cid:89)

t=0

i=1

where 1{·} is the indicator function. The matching
count of the n-gram g between ˆy and y is given by

Cˆy

y(g) = min (Cy(g), Cˆy(g)).
Then the precision pn and the recall rn of the pre-
dicted n-grams are calculated as follows

(4)

pn =

rn =

(cid:80)

(cid:80)

(cid:80)

(cid:80)

,

g∈y Cˆy
y(g)
g∈y Cy(g)
g∈y Cˆy
y(g)
g∈ˆy Cˆy(g)

.

(5)

(6)

BLEU, the most widely used metric for ma-
chine translation evaluation, is deﬁned based on
the n-gram precision as follows

BLEU = BP · exp(

wn log pn),

(7)

N
(cid:88)

n=1

where BP stands for the brevity penalty and wn is
the weight for the n-gram. In contrast, GLEU is
the minimum of recall and precision of 1-4 grams
where 1-4 grams are counted together:

(2)

GLEU = min(p1-4, r1-4).

(8)

3.2 probabilistic Sequence-Level Objectives

In the output sentence y, the prediction probabil-
ity varies among words. Some words are trans-
lated by the model with high conﬁdence while
some words are translated with high uncertainty.

Figure 1: The overview of our model with greedy search. At each decoding step, the predicted word which has the
highest probability in the probability vector is selected as context and fed into the RNN, and meanwhile this word
and its probability are also used to calculate the probabilistic n-gram count.

However, when calculating the count of n-grams
in Eq.(3), all the words in the output sentence are
treated equally, regardless of their respective pre-
diction probabilities.

To give a more precise description of n-gram
counts which considers the variety of prediction
probabilities, we use the prediction probability
p(yj|y<j, x, θ) as the count of word yj, and cor-
respondingly the count of an n-gram is the product
of these probabilistic counts of all the words in the
n-gram, not one anymore. Then the probabilistic
count of g = (g1, . . . , gn) is calculated by sum-
ming over the output sentence y as

(cid:101)Cy(g) =
T −n
(cid:88)

n
(cid:89)

t=0

i=1

1{gi = yt+i} · p(yt+i|y<t+i, x, θ).

(9)

Now the probabilistic sequence-level objective
can be got by replacing Cy(g) with (cid:101)Cy(g) (the
tilde over the head indicates the probabilistic ver-
sion) and keeping the rest unchanged. Here, we
take BLEU as an example and show how the prob-
abilistic BLEU (denoted as P-BLEU) is deﬁned.
From this purpose, the matching count of n-gram
g in Eq.(4) is modiﬁed as follows

ˆy
y(g) = min((cid:101)Cy(g), Cˆy(g)).
(cid:101)C

(10)

and the predict precision of n-grams changes into

˜pn =

(cid:80)

(cid:80)

ˆy
y(g)
g∈y (cid:101)C
g∈y (cid:101)Cy(g)

.

(11)

Finally, the probabilistic BLEU (P-BLEU) is de-
ﬁned as

P-BLEU = BP · exp(

wn log ˜pn),

(12)

N
(cid:88)

n=1

Probabilistic GLEU (P-GLEU) can be deﬁned
in a similar way. Speciﬁcally, we denote the prob-
abilistic precision of n-grams as P-Pn. The prob-
abilistic precision is more reasonable than recall
since the denominator in Eq.(11) plays a normal-
ization role, so we modify the deﬁnition in Eq.(8)
and deﬁne P-GLEU as simply the probabilistic
precision of 1-4 grams.

The general probabilistic loss function is:

L(θ) = −

P(ym, ˆym),

(13)

M
(cid:88)

m=1

where P represents the probabilistic sequence-
level objectives, and ym and ˆym are the predicted
translation and the ground truth for the m-th sen-
tence respectively. The calculation of the proba-
bilistic objective is illustrated in Figure 1. This
probabilistic loss can work with decoding strate-
gies such as greedy search and teacher forcing. In
this paper we employ greedy search rather than
teacher forcing so as to use the previously pre-
dicted words as context and alleviate the exposure
bias problem.

System

Dev(MT02) MT03 MT04 MT05 MT06 AVG

BaseNMT
MRT
RF
P-BLEU
P-GLEU
P-P2

36.72
37.17
37.13
37.26
37.44
38.03

33.95
34.89
34.66
34.54
34.67
35.45

37.44
37.90
37.69
38.05
38.11
39.30

33.96
34.62
34.55
34.30
34.24
35.10

33.09
33.78
33.74
34.11
34.58
34.59

34.61
35.30
35.16
35.25
35.40
36.11

Table 1: Results on NIST Chinese-to-English Translation Task. AVG = average BLEU scores for test sets. The
bold number indicates the highest score in the column.

4 Experiment

4.1 Settings

We carry out experiments on Chinese-to-English
translation.1 The training data consists of 1.25M
pairs of sentences extracted from LDC corpora2.
Sentence pairs with either side longer than 50 were
dropped. We use NIST 2002 (MT 02) as the vali-
dation set and NIST 2003-2006 (MT 03-08) as the
test sets. We use the case insensitive 4-gram NIST
BLEU score (Papineni et al., 2002) for the transla-
tion task.

We apply our method to an attention-based
NMT system (Bahdanau et al., 2014) implemented
by Pytorch. Both source and target vocabularies
are limited to 30K. All word embedding sizes are
set to 512, and the sizes of hidden units in both
encoder and decoder RNNs are also set to 512.
All parameters are initialized by uniform distri-
bution over [−0.1, 0.1]. The mini-batch stochas-
tic gradient descent (SGD) algorithm is employed
to train the model with batch size of 40. In ad-
dition, the learning rate is adjusted by adadelta
optimizer (Zeiler, 2012) with ρ = 0.95 and (cid:15) =
1e-6. Dropout is applied on the output layer with
dropout rate of 0.5. The beam size is set to 10.

4.2 Performance

Systems We ﬁrst pretrain the baseline model by
maximum likelihood estimation (MLE) and then
reﬁne the model using probabilistic sequence-
level objectives, including P-BLEU, P-GLEU and
P-P2 (probabilistic 2-gram precision).
In addi-
tion, we reproduce previous works which train
the NMT model through minimum risk training
(MRT) (Shen et al., 2016) and REINFORCE algo-

1Experiment code: https://github.com/ictnlp/GS4NMT
2The corpora include LDC2002E18, LDC2003E07,
LDC2004T07,

portion

of

LDC2003E14,
LDC2004T08 and LDC2005T06.

Hansards

rithm (RF) (Ranzato et al., 2015). When reproduc-
ing their works, we set BLEU, GLEU and 2-gram
precision as training objectives respectively and
ﬁnd out that GLEU yields the best performance.
In the following, we only report the results with
training objective GLEU.
Performance Table 1 shows the translation per-
formance on test sets measured in BLEU score.
Simply training NMT model by the probabilistic
2-gram precision achieves an improvement of 1.5
BLEU points, which signiﬁcantly outperforms the
reinforcement-based algorithms. We also test the
precision of other n-grams and their combinations,
but do not notice signiﬁcant improvements over
P-P2. Notice that our method only changes the
loss function, without any modiﬁcation on model
structure and training data.

4.3 Why Pretraining

We use the probabilistic loss to ﬁnetune the base-
line model rather than training from scratch. This
is in line with our motivation: to alleviate the ex-
posure bias and make the model exposed to its own
output during training. In the very beginning of
the training, the model’s translation capability is
nearly zero and the generated sentences are often
meaningless and do not contain useful information
for the training, so it is unreasonable to directly ap-
ply the greedy search strategy. Therefore, we ﬁrst
apply the teacher forcing algorithm to pretrain the
model, and then we let the model generate the sen-
tences itself and learn from its own outputs.

Another reason favoring pretraining is that pre-
training can lower the training cost. The train-
ing cost of the introduced probabilistic loss is
about three times higher than the cost of cross en-
tropy. Without pretraining, the training time will
be much higher than usual. Otherwise, the train-
ing cost is acceptable if the probabilistic loss is
only for ﬁnetuning.

Figure 2: learning curves of different decoding strate-
gies with training objective P-P2.

Figure 3: P-GLEU and GLEU scores on 100 pairs of
sentences.

4.4 Effect of Decoding Strategy

The probabilistic loss, deﬁned in Eq.(13), is com-
puted from the model output y and reference ˆy.
In this section, we apply two different decoding
strategies to generate y: 1. teacher forcing, which
uses the ground truth as decoder input. 2. greedy
search, which feeds the word with maximum prob-
ability. By conducting this experiment, we attempt
to ﬁgure out where the improvements come from:
the modiﬁcation of loss or the mitigation of expo-
sure bias?

Figure 2 shows the learning curves of the two
decoding strategies with training objective P-P2.
Teacher forcing raises about 0.5 BLEU improve-
ments and greedy search outperform the teacher
forcing algorithm by nearly 1 BLEU point. We
conclude that the probabilistic loss has its own ad-
vantage even when trained by the teacher forcing
algorithm, and greedy search is effective in allevi-
ating the exposure bias.

Notice that the greedy search strategy highly
relys on the probabilistic loss and can not be con-
ducted independently. Greedy search together
with the word-level loss is very similar with the
scheduled sampling(SS). However, SS is inconsis-
tent with the word-level loss since the word-level
loss requires strict alignment between hypothesis
and reference, which can only be accomplished by
the teacher forcing algorithm.

4.5 Correlation with Evaluation Metrics

In this section, we explore how the probabilistic
objective correlates with the real evaluation met-
ric. We randomly sample 100 pairs of sentences

from the training set and compute their P-GLEU
and GLEU scores (Wu et al. (2016) indicates that
GLEU have better performance in the sentence-
level evaluation than BLEU).

Directly computing the correlation between
GLEU and P-GLEU gives the correlation coefﬁ-
cient 0.86, which indicates strong correlation. In
addition, we draw the scatter diagram of the 100
pairs of sentences in Figure 3 with GLEU as x-axis
and P-GLEU as y-axix. Figure 3 shows that P-
GLEU correlates well with GLEU, suggesting that
it is reasonable to directly train the NMT model
with P-GLEU.

5 Conclusion

Word-level loss cannot evaluate the translation
properly and suffers from the exposure bias, and
sequence-level objectives are usually indifferen-
tiable and require gradient estimation. We propose
probabilistic sequence-level objectives based on n-
gram matching, which relieve the dependence on
gradient estimation and can directly train the NMT
model. Experiment results show that our method
signiﬁcantly outperforms previous sequence-level
training works and successfully alleviates the ex-
posure bias through performing greedy search.

6 Acknowledgments

We thank the anonymous reviewers for their in-
sightful comments. This work was supported by
the National Natural Science Foundation of China
(NSFC) under the project NO.61472428 and the
project NO. 61662077.

References

Dzmitry Bahdanau, Philemon Brakel, Kelvin Xu,
Anirudh Goyal, Ryan Lowe, Joelle Pineau, Aaron
Courville, and Yoshua Bengio. 2016. An actor-critic
algorithm for sequence prediction. arXiv preprint
arXiv:1607.07086.

Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2014. Neural machine translation by jointly
arXiv preprint
learning to align and translate.
arXiv:1409.0473.

Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015. Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems, pages 1171–1179.

Mia Xu Chen, Orhan Firat, Ankur Bapna, Melvin
Johnson, Wolfgang Macherey, George Foster, Llion
Jones, Niki Parmar, Mike Schuster, Zhifeng Chen,
et al. 2018. The best of both worlds: Combining re-
cent advances in neural machine translation. arXiv
preprint arXiv:1804.09849.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. 2014.
Learning
phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint
arXiv:1406.1078.

Yoon Kim and Alexander M Rush. 2016. Sequence-
level knowledge distillation. In Proceedings of the
2016 Conference on Empirical Methods in Natural
Language Processing, pages 1317–1327.

Alex M Lamb, Anirudh Goyal ALIAS PARTH
GOYAL, Ying Zhang, Saizheng Zhang, Aaron C
Courville, and Yoshua Bengio. 2016.
Professor
forcing: A new algorithm for training recurrent net-
works. In Advances In Neural Information Process-
ing Systems, pages 4601–4609.

Guillaume Lample, Myle Ott, Alexis Conneau, Lu-
dovic Denoyer, and Marc’Aurelio Ranzato. 2018.
Phrase-based & neural unsupervised machine trans-
lation. arXiv preprint arXiv:1804.07755.

Shuming Ma, Xu Sun, Yizhong Wang, and Junyang
Lin. 2018. Bag-of-words as target for neural ma-
chine translation. arXiv preprint arXiv:1805.04871.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
In Proceedings of
uation of machine translation.
the 40th annual meeting on association for compu-
tational linguistics, pages 311–318. Association for
Computational Linguistics.

Marc’Aurelio Ranzato, Sumit Chopra, Michael Auli,
and Wojciech Zaremba. 2015. Sequence level train-
ing with recurrent neural networks. arXiv preprint
arXiv:1511.06732.

George Doddington. 2002.

Automatic evaluation
of machine translation quality using n-gram co-
occurrence statistics. In Proceedings of the second
international conference on Human Language Tech-
nology Research, pages 138–145. Morgan Kauf-
mann Publishers Inc.

Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), volume 1, pages 1683–1692.

Jonas Gehring, Michael Auli, David Grangier, De-
nis Yarats, and Yann N Dauphin. 2017. Convolu-
tional sequence to sequence learning. arXiv preprint
arXiv:1705.03122.

Jiatao Gu, Kyunghyun Cho, and Victor OK Li. 2017.
Trainable greedy decoding for neural machine trans-
In Proceedings of the 2017 Conference on
lation.
Empirical Methods in Natural Language Process-
ing, pages 1968–1978.

Hany Hassan, Anthony Aue, Chang Chen, Vishal
Chowdhary,
Jonathan Clark, Christian Feder-
mann, Xuedong Huang, Marcin Junczys-Dowmunt,
William Lewis, Mu Li, et al. 2018. Achieving hu-
man parity on automatic chinese to english news
translation. arXiv preprint arXiv:1803.05567.

Di He, Yingce Xia, Tao Qin, Liwei Wang, Nenghai Yu,
Tieyan Liu, and Wei-Ying Ma. 2016. Dual learn-
ing for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proceedings of association for machine transla-
tion in the Americas, volume 200.

Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.

Richard S Sutton, David A McAllester, Satinder P
Singh, and Yishay Mansour. 2000. Policy gradi-
ent methods for reinforcement learning with func-
tion approximation. In Advances in neural informa-
tion processing systems, pages 1057–1063.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.

Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
In Proceedings of
continuous translation models.
the 2013 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1700–1709.

Arun Venkatraman, Martial Hebert, and J Andrew
Bagnell. 2015.
Improving multi-step prediction of
learned time series models. In AAAI, pages 3024–
3030.

Ronald J Williams. 1992. Simple statistical gradient-
following algorithms for connectionist reinforce-
In Reinforcement Learning, pages
ment learning.
5–32. Springer.

Ronald J Williams and David Zipser. 1989. A learn-
ing algorithm for continually running fully recurrent
neural networks. Neural computation, 1(2):270–
280.

Lijun Wu, Yingce Xia, Li Zhao, Fei Tian, Tao Qin,
Jianhuang Lai, and Tie-Yan Liu. 2017. Adver-
arXiv preprint
sarial neural machine translation.
arXiv:1704.06933.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016.
Google’s neural ma-
chine translation system: Bridging the gap between
arXiv preprint
human and machine translation.
arXiv:1609.08144.

Zhen Yang, Wei Chen, Feng Wang, and Bo Xu. 2017.
Improving neural machine translation with condi-
tional sequence generative adversarial nets. arXiv
preprint arXiv:1703.04887.

Matthew D Zeiler. 2012. Adadelta: an adaptive learn-
ing rate method. arXiv preprint arXiv:1212.5701.

