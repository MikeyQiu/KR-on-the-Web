Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

Leveraging Unlabeled Data for Crowd Counting by Learning to Rank

Xialei Liu
Computer Vision Center
Barcelona, Spain
xialei@cvc.uab.es

Joost van de Weijer
Computer Vision Center
Barcelona, Spain
joost@cvc.uab.es

Andrew D. Bagdanov
MICC, University of Florence
Florence, Italy
andrew.bagdanov@unifi.it

8
1
0
2
 
r
a

M
 
8
 
 
]

V
C
.
s
c
[
 
 
1
v
5
9
0
3
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

We propose a novel crowd counting approach that lever-
ages abundantly available unlabeled crowd imagery in
a learning-to-rank framework. To induce a ranking of
cropped images , we use the observation that any sub-image
of a crowded scene image is guaranteed to contain the same
number or fewer persons than the super-image. This al-
lows us to address the problem of limited size of existing
datasets for crowd counting. We collect two crowd scene
datasets from Google using keyword searches and query-
by-example image retrieval, respectively. We demonstrate
how to efﬁciently learn from these unlabeled datasets by in-
corporating learning-to-rank in a multi-task network which
simultaneously ranks images and estimates crowd density
maps. Experiments on two of the most challenging crowd
counting datasets show that our approach obtains state-of-
the-art results.

1. Introduction

Crowd counting and crowd density estimation tech-
niques aim to count the number of persons in crowded
scenes. They are essential in video surveillance [3], safety
monitoring, and behavior analysis [29]. Person counting
and density estimation are instances of a broader class of
classical counting problems in computer vision. Counting
semantic image features is important in medical and bio-
logical image processing [18], vehicle counting [25], and
numerous other application contexts.

Despite the attention the crowd counting problem has re-
ceived, both classically and in the recent computer vision
literature, it remains a difﬁcult task in practice. Perspec-
tive distortion, clutter, occlusion, non-uniform distribution
of people, complex illumination, scale variation, and a host
of other scene-incidental imaging conditions render per-
son counting and crowd density estimation in unconstrained
images an extremely daunting problem. Techniques for
crowd counting have been recently improved using Convo-
lutional Neural Networks (CNNs). These recent approaches

Figure 1. Using ranked sub-images for self-supervised training.
We sample a decreasing sequence of sub-images I1, I2, and I3
from an unlabeled image. Though we do not know the exact per-
son counts C(Ii), we use the fact that C(I1) ≥ C(I2) ≥ C(I3)
as self-supervision to learn representations for person counting.

include scale-aware regression models [25], multi-column
CNNs [37], and switching networks [1]. As with most CNN
architectures, however, these person counting and crowd
density estimation techniques are highly data-driven. Even
modestly deep architectures for visual recognition require
massive amounts of labeled training data for learning. For
person counting, the labeling burden is even more onerous
than usual. Training data for person counting requires that
each individual person be meticulously labeled in training
images. It is for this reason that person counting and crowd
density estimation datasets tend to have only a few hundred
images available for training. As a consequence, the ability
to train these sophisticated CNN-based models suffers.

Recently, self-supervised learning has received more at-
tention because it provides an alternative to collecting large
hand-labeled datasets. Self-supervised learning is based on

1

Methods Basic CNNs

Scale-aware Context-aware Multi-task Fast inference

Zhang et al. (2015) [35]
Shang et al. [28]
Marsden et al. [23]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours
Table 1. State-of-the-art crowd counting networks and their characteristics.

(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

the idea of using an auxiliary task (different, but related to
the original supervised task) for which data is freely avail-
able and no annotation is required. As a consequence, self-
supervised learning can be much more scalable and ﬂexi-
ble. A network trained to estimate the relative location of
patches in images was shown to automatically learn features
discriminative for semantic concepts in [10]. Other exam-
ples include methods that can generate color images from
gray scale images and vice versa [17, 36], recover a whole
patch from the surrounding pixels by inpainting [26], and
learn from equivalence relations [24].

In this paper, we propose a self-supervised task to im-
prove the training of networks for crowd counting. Our ap-
proach leverages unlabeled crowd images at training time
to signiﬁcantly improve performance. Our key insight is
that even though we do not have an exact count of the
number of persons in a crowd image, we do know that
crops sampled from a crowd image are guaranteed to con-
tain the same or fewer persons than the original (see Fig-
ure 1). This gives a technique for generating a ranking of
sub-images that can be used to train a network to estimate
whether one image contains more persons than another im-
age. The standard approach to exploiting self-supervised
learning is to train the self-supervised task ﬁrst, after which
the resulting network is ﬁne-tuned on the ﬁnal task for
which limited data is available. We show that this approach,
which is used by the vast majority of self-supervised meth-
ods [10, 20, 24, 26, 36], does not produce satisfactory re-
sults for crowd counting. Our proposed self-supervision,
however, yields signiﬁcant improvement over the state-of-
the-art when added as a proxy task to supervised crowd
counting in a multi-task network.

The main contribution of this work is that we propose a
method that can leverage unlabeled crowd imagery at train-
ing time. We propose two different approaches to automati-
cally acquire this data from the Internet. In addition, we an-
alyze three approaches to training using ranked image sets
in combination with datasets of labeled crowd scenes. Fi-
nally, we demonstrate that our approach leads to state-of-
the-art results on two crowd counting datasets and obtains
excellent results on a cross-dataset experiment.

The rest of this paper is organized as follows.

In the

next section we brieﬂy review the literature related to crowd
counting. Then, in Section 3 we describe how to system-
atically generate ranked images from unlabeled crowd im-
agery. In Section 4 we introduce our approach to exploiting
this ranked imagery at training time. We follow in Section 5
with an extensive experimental evaluation of our approach
and a comparative analysis with the state-of-the-art.

2. Related work

We divide our discussion of related work into two main
groups as in [32]: traditional approaches and CNN-based
methods. We focus on crowd counting in still images, but
we refer the interested reader to the following papers for
examples of crowd counting in video [5, 9, 22].

Various traditional approaches have been proposed to
deal with the crowd counting problem. The main strate-
gies are divided into the various categories as in [21]. Most
early work on crowd counting used detectors to detect the
heads or full bodies of persons in the scene [11, 19]. This
information can then be used to count. However, detection-
based approaches fail in extremely dense crowded scenes
due to occlusion and low resolution of persons. To address
these issues, researchers proposed to map features learned
from the crowded scene or patches to the number of peo-
ple [4, 6]. By counting using regression, the crowd counting
problem is decomposed into two parts: feature extraction
and a regression model. While regression-based approaches
resulted in improvement, only global counting was consid-
ered without any spatial information (i.e. without estimat-
ing a density map). The authors of [18] proposed to learn
a mapping from patches to corresponding density maps,
which achieved great success on a variety of counting prob-
lems.

As introduced in the review of [32], CNN-based ap-
proaches can be classiﬁed into different categories based on
the properties of the CNN (see Table 1 for an overview of
state-of-the-art networks and the properties they hold). Ba-
sic CNNs incorporate only basic CNN layers in their net-
works. The approaches in [12, 34] use the AlexNet net-
work [16] to map from crowd scene patches to global num-
ber of people by changing the output of AlexNet from 1000
to 1. The resulting network can be trained end-to-end.

Figure 2. Example images from the retrieved crowd scene dataset.
Representative images using training image as query image (the query image is depicted on the left).

(top) Representative images using key words as query.

(bottom)

Due to the large variations of density in different im-
ages, recent methods have focused on scale-awareness. The
method proposed in [37] trains a multi-column based ar-
chitecture (MCNN) to capture the different densities by us-
ing different sizes of kernels in the network. Similarly, the
authors of [25] propose the Hydra-CNN architecture that
takes different resolutions of patches as inputs and has mul-
tiple output layers (heads) which are combined in the end.
Most recently, in [1] the authors propose a switching CNN
that can select an optimal head instead of combining the in-
formation from all network heads. Finally, context-aware
models are networks that can learn from the context of im-
ages.
In [12, 31] the authors propose to classify images
or patches into one of ﬁve classes: very high density, high
density, medium density, low density and very low density.
However, the deﬁnition of these ﬁve classes varies across
datasets and must be carefully chosen using knowledge of
the statistics of each dataset.

Although CNN-based methods have achieved great suc-
cess in crowd counting, due to lack of labeled data it is still
challenging to train deep CNNs without over-ﬁtting. The
authors of [35] propose to learn density map and global
counting in an alternating sequence to obtain better local op-
tima. The method in [15] uses side information like ground-
truth camera angle and height to help the network to learn.
However, this side information is expensive to obtain and is
not available in most existing crowd counting datasets.

There are several works which have studied how to learn
to rank, and they focus on learning a ranking function from
ground-truth rankings [7, 27]. However, these are very dif-
ferent from our approach in which we aim to learn from
rankings. Most related to our work is a recent paper [20]
proposing a method for image quality assessment using au-
tomatically generated rankings of distorted images. In that

work the authors used ranking data to pre-train a network
and then ﬁne-tune on available labeled datasets. We will
show that such an approach fails for crowd counting, and
that only when posed as a multi-task learning problem is the
network able to exploit the additional data from rankings.

In another recent paper [24] a method is proposed where
the self-supervised task is to learn to count. The authors
propose two pretext tasks (scaling and tiling) which guide
self-supervised training. The network aims to learn to count
visual primitives in image regions. It is self-supervised by
the fact that the number of visual primitives is not expected
to change under scaling, and that the sum of all visual prim-
itives in individual tiles should equal the total number of
visual primitives in the whole image. Unlike our approach,
they do not consider rankings of regions and their counts are
typically very low (several image primitives). Also, their ﬁ-
nal tasks do not involve counting but rather unsupervised
learning of features for object recognition.

Contributions with respect to the state-of-the-art: Ba-
sic CNNs are simple and fast to train, but usually achieve
lower accuracy. Combining different scale-aware models
and context-aware models has been shown to signiﬁcantly
increase performance, but the complexity of these models
is high. In addition, considering the scarcity of large an-
notated datasets, ranked patches are used as side informa-
tion to decrease the effect of over-ﬁtting. The model we
propose in this paper is fast to train, uses no side informa-
tion, supports fast inference, is scale-aware, is multi-task,
and outperforms the state-of-the-art. Our key contribution
is in showing how to effectively exploit unlabeled crowd
imagery for pre-training CNNs. In Table 1 we list current
state-of-the-art approaches to crowd counting along with
ours and indicate the characteristics of each.

3. Generating ranked image sets for counting

Algorithm 1 : Algorithm to generate ranked datasets.

As discussed in the introduction, acquiring data for
crowd counting is laborious because images often contain
hundreds of persons which require precise annotation. In-
stead, we propose a self-supervised task for crowd-counting
which exploits crowd images which are not hand-labeled
with person counts during training. Rather than regressing
to the absolute number of persons in the image, we train a
network which compares images and ranks them according
to the number of persons in the images. In this section, we
show how to cheaply collect rank-labeled data which can be
used to train these methods.

The main idea is based on the observation that all patches
contained within a larger patch must have a fewer or equal
number of persons than the larger patch (see Figure 1). This
observation allows us to collect large datasets of crowd im-
ages for which relative ranks exist. Rather than having to
painstakingly annotate each person we are only required to
verify if the image contains a crowd. Given a crowd image
we extract ranked patches according to Algorithm 1.

To collect a large dataset of crowd images from the In-

ternet, we use two different approaches:

• Keyword query: We collect a crowd scene dataset
from Google Images by using different key words:
Crowded, Demonstration, Train station, Mall, Studio,
Beach, all of which have high likelihood of contain-
ing a crowd scene. Then we delete images not rele-
vant to our problem. In the end, we collected a dataset
containing 1180 high resolution crowd scene images,
which is about 24x the size of the UCF CC 50 dataset,
2.5x the size of ShanghaiTech Part A, and 2x the size
of ShanghaiTech Part B. Note that no other annota-
tion of images is performed. Example images from
this dataset are given in Figure 2 (top row).

• Query-by-example image retrieval: For each spe-
ciﬁc existing crowd counting dataset, we collect a
dataset by using the training images as queries with
the visual image search engine Google Images. We
choose the ﬁrst ten similar images and remove irrel-
evant ones. For UCF CC 50 we collect 256 images,
for ShanghaiTech Part A 2229 images, and for Shang-
haiTech Part B 3819 images. An example of images
returned for a speciﬁc query image is given in Figure 2
(bottom row).

4. Learning from ranked image sets

Input: A crowd scene image, number of patches k

and scale factor s.

Step 1: Choose an anchor point randomly from the
anchor region. The anchor region is deﬁned
to be 1/r the size of the original image, cen-
tered at the original image center, and with
the same aspect ratio as the original image.
Find the largest square patch centered at the
anchor point and contained within the image
boundaries.

Step 2:

Step 3: Crop k − 1 additional square patches, reduc-
ing size iteratively by a scale factor s. Keep
all patches centered at anchor point.
Step 4: Resize all k patches to input size of network.
Output: A list of patches ordered according to the
number of persons in the patch.

self-supervised task of ranking crowd images. We ﬁrst in-
troduce the network architectures used for counting and
ranking, and then describe three different approaches to
combining both losses.

4.1. Crowd density estimation network

Here we explain the network architecture which is
trained on available crowd counting datasets with ground
truth annotations. This network regresses to a crowd den-
sity image which indicates the number of persons per pixel
(examples of such maps are given in Figure 5). A sum-
mation of all values in such a crowd density image gives an
estimate of the number of people in the scene. In the experi-
mental section we will consider this network as the baseline
method to which we compare.

Our baseline network is derived from the VGG-16 net-
work [30], which consists of 13 convolutional layers fol-
lowed by three fully connected layers. We adapt the net-
work to regress to person density maps. We remove its two
fully connected layers, and the max-pooling layer (pool5) to
prevent further reduction of spatial resolution. In their place
we add a single convolutional layer (a single 3 × 3 × 512
ﬁlter with stride 1 and zero padding to maintain same size)
which directly regresses to the crowd density map. As the
counting loss, Lc, we use the Euclidean distance between
the estimated and ground truth density maps:

Lc =

(yi − ˆyi)2

(1)

1
M

M
(cid:88)

i=1

In this section we describe our approach to training a
CNN to estimate the number of persons in dense crowd
scenes. We use the ranked image set generation technique
described in the previous section to generate data for the

where M is the number of images in a training batch, yi
is ground truth person density map of the i-th image in the
batch, and the prediction from the network as ˆyi. The net-
work is indicated in orange in Figure 3.

Figure 3. The multi-task framework combining both counting and ranking information. This network can be trained end-to-end for crowd
counting. VGG-conv refers to the convolutional layers of the VGG-16 network. See text for more details.

Figure 4. Three ways to combine ranking and counting datasets.

Ground truth annotations for crowd counting typically
consist of a set of coordinates which indicate the ’center’
(typically head center of a person). To convert this data
to crowd density maps, we place a Gaussian with standard
deviation of 15 pixels and sum these for all persons in the
scene to obtain yi. This is a standard procedure and is also
used in [25, 37].

The fact that we derive our architecture from the VGG-
16 network has the advantage of being able to use pre-
trained features from ImageNet. Given the large success
of pre-trained features in neural networks, it is somewhat
surprising to note that the vast majority of deep learning
methods for crowd counting train from scratch [37, 1, 31].
We found, however, that using pre-trained features signiﬁ-
cantly improves results.

To further improve the performance of our baseline net-
work, we introduce multi-scale sampling from the available
labeled datasets.
Instead of using the whole image as an
input, we randomly sample square patches of varying size
In the experimental section we
(from 56 to 448 pixels).
verify that this multi-scale sampling is important for good
performance. Since we are processing patches rather than
images, we will use ˆyi to refer to the estimate of patch i
from now on. The importance of multi-scale processing of
crowd data was also noted in [2].

4.2. Crowd ranking network

In the previous section we explained how to collect abun-
dantly available data for crowd counting. This data does
not have crowd density maps and only ranking data is avail-

able via the sampling procedure described in Algorithm 1.
This ranking indicates that an equal number or more per-
sons are present in a patch when compared to another. Here
we present the network which is trained based on this infor-
mation. For this purpose, we replace the Euclidean loss by
an average pooling layer followed by a ranking loss (net-
work in blue in Figure 3). First, the average pooling layer
converts the density map into an estimate of the number of
persons per spatial unit ˆc(Ii) according to:

ˆc (Ii) =

ˆyi (xj),

(2)

1
M

(cid:88)

j

where xj are the spatial coordinates of the density map, and
M = 14 × 14 is the number of spatial units in the density
map. The ranking which is on the total number of persons
in the patch ˆCi also directly holds for its normalized version
ˆci, since ˆC (Ii) = M × ˆc (Ii).

To enforce the ranking, we apply the pairwise ranking

hinge loss which for a single pair is deﬁned as:

Lr = max (0, ˆc (I2) − ˆc (I1) + ε),

(3)

where ε is the margin, which is set to zero in our case. This
loss increases with the difference between two count esti-
mates when their order does not respect the correct ranking.
Without loss of generality, we assume that the rank of ˆc(I1)
is higher than ˆc(I2).

The gradient with respect to the network parameters θ of

the loss in Eq. 3 is given by:

∇θLr =

(cid:40)
0
∇θˆc (I2) − ∇θˆc (I1) otherwise

if ˆc (I2)−ˆc (I1) + ε ≤ 0

(4)

When network outputs the correct ranking there is no back-
propagated gradient. However, when the network estimates
are not in accordance with the correct ranking the backprop-
agated gradient causes the network to increase its estimate
for the patch with lower score and to decrease its estimate
for the one with higher score (note that in backpropagation
the gradient is subtracted).

A typical implementation of the ranking loss would in-
volve a Siamese network [8] where two images are sent
through parallel branches of the network which share their
parameters. However, in [20] the authors show that it is
computationally advantageous (and sometimes leads to bet-
ter minima) to send the images in a batch through a single
branch and combine them when computing the ranking loss.
The ranking loss is then computed with:

Lr =

max (0, ˆc (Ij) − ˆc (Ii) + ε)

(5)

M
(cid:88)

(cid:88)

i=1

j∈S(i)

where S (i) is the set of patches containing fewer people
than patch i. Note that this relation is only deﬁned for
patches which are contained by patch i.
In practice we
sample minibatches of 25 images which contain 5 sets of
5 images which can be compared among them resulting in
a total of 5 × (4 + 3 + 2 + 1) = 50 pairs in one minibatch.

4.3. Combining counting and ranking data

Here we discuss three approaches to combining ground
truth labeled crowd scenes with data for which only rank in-
formation is available. These three approaches are depicted
in Figure 4. We shortly introduce them here:

• Ranking plus ﬁne-tuning: In this approach the net-
work is ﬁrst trained on the large dataset of ranking
data, and is next ﬁne-tuned on the smaller dataset for
which density maps are available. To the best of our
knowledge this is the approach which is used by all
self-supervised methods in vision [10, 26, 36, 24, 20].

• Alternating-task training: While ranking plus ﬁne-
tuning works well when the two tasks are closely re-
lated, it might perform bad for crowd counting be-
cause no supervision is performed to indicate what the
network is actually supposed to count. Therefore, we
propose to alternate between the tasks of counting and
ranking.
In practice we perform train for 300 mini-
batches on a single task before switching to the other,
then repeat.

• Multi-task training: In the third approach, we add
the self-supervised task as a proxy to the supervised
counting task and train both simultaneously. In each
minibatch we sample data from both ranking and la-
beled datasets and train both tasks simultaneously as
shown in Figure 3. The loss function for multi-task
training is:

L = Lc + λLr,

(6)

where λ sets the relative weight between the counting
and ranking loss.

In the next section we compare these three approaches on
several standard dataset for crowd counting.

5. Experiments

We report on several experiments to evaluate our ap-
proach with respect to baselines and the state-of-the-art
methods.1

5.1. Datasets and Experimental Protocol

We use two standard benchmark crowd counting
datasets. The UCF CC 50 dataset is a very challenging
It contains 50 annotated im-
dataset introduced by [13].
ages of different resolutions, illuminations and scenes. The
variation of densities is very large among images from 94 to
4543 persons with an average of 1280 persons per image.

The ShanghaiTech dataset introduced by [37] is a large-
scale crowd counting dataset consisting of 1198 images
with 330,165 annotated heads. This dataset includes two
parts: 482 images in Part A which are randomly crawled
from the Internet, and 716 images in Part B which are taken
from busy streets. Both parts are further divided into train-
ing and evaluation sets. The training and test of Part A has
300 and 182 images, respectively, whereas that of Part B
has 400 and 316 images, respectively.

Following existing work, we use the mean absolute er-
ror (MAE) and the mean squared error (MSE) to evaluate
different methods. These are deﬁned as follows:

M AE =

(cid:12)
(cid:12)C (Ii) − ˆC (Ii)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

,

M SE =

C (Ii) − ˆC (Ii)

(cid:17)2

(7)

N
(cid:88)

i=1

1
N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

1
N

N
(cid:88)

(cid:16)

i=1

where N is the number of test images, C (Ii) is the ground
truth number of persons in the ith image and ˆC (Ii) is the
predicted number of persons in the ith image.

We use the Caffe [14] framework and train using mini-
batch Stochastic Gradient Descent (SGD). The minibatch
size for both ranking and counting is 25, and for multi-task
training is 50. For the ranking plus ﬁne-tuning method, the
learning rate is 1e-6 for both ranking and ﬁne-tuning. Sim-
ilarly, for the alternating-task training method, the steps for
training both tasks are 300 iterations. For the multi-task
method, we found λ = 100 to provide good results on all
datasets. Learning rates are decreased by a factor of 0.1
every 10K iterations for a total of 20K iterations. For both
training phases we use (cid:96)2 weight decay (set to 5e-4). During
training we sample one sub-image from each training image
per epoch. We perform down-sampling of three scales and
up-sampling of one scale on the UCF CC 50 dataset and
only up-sampling of one scale is used on the ShanghaiTech
dataset. The number of ranked crops k = 5, the scale factor
s = 0.75 and the anchor region r = 8.

1Code and models: https://github.com/xialeiliu/CrowdCountingCVPR18

Method
Basic CNN
+ Pre-trained model
+ multi-scale
Ranking plus ﬁne-tuning
Alternating-task training
Multi-task training

Split 3
497.57
334.89
266.75
241.28
172.52
196.76
Table 2. MAE and MSE on the UCF CC 50 dataset with ﬁve-fold cross validation. The Basic CNN is trained from scratch on the training
set. The second row is the VGG-16 network ﬁne-tuned starting from a pre-trained ImageNet model. The third row is the VGG-16 network
trained with multi-scale data augmentation and starting from a pre-trained model. Results for combining both ranking and counting datasets
are in the last three rows.

Split 5 Ave MAE Ave MSE
415.23
202.41
216.35
247.70
235.70
199.54

Split 2
394.52
350.63
307.43
375.38
350.63
340.31

Split 1
701.41
570.01
532.85
552.68
454.33
443.68

Split 4
263.56
184.79
216.96
211.66
214.03
218.48

454.45
328.54
308.06
325.73
285.44
279.60

620.95
443.38
408.70
429.28
401.29
408.07

5.2. Ablation study

We begin with an ablation study on the UCF CC 50
dataset. The aim is to evaluate the relative gain of the pro-
posed improvements and to evaluate the use of a ranking
loss against the baseline. The ranked images in this ex-
periment are generated from the Keyword dataset. The re-
sults are summarized in Table 2. We can observe the beneﬁt
of using a pre-trained ImageNet model in crowd counting,
with a signiﬁcant drop in MAE of around 28% compared to
the model trained from scratch. By using both multi-scale
data augmentation and starting from a pre-trained model,
another improvement of around 6% is obtained.

Next, we compare the three methods we propose for
combining the ranking and counting losses. The “Ranking
plus ﬁne-tuning” method, which is the approach applied by
all self-supervised methods in the literature [10, 26, 36, 24,
20], performs worse than directly ﬁne-tuning from a pre-
trained ImageNet model. This is probably caused by the
poorly-deﬁned nature of the self-supervised task. To opti-
mize this task the network could decide to count anything,
e.g. ‘hats’, ‘trees’, or ‘people’, all of which would agree
with the ranking constraints that are imposed. By jointly
learning both the self-supervised and crowd counting tasks,
the self-supervised task is forced to focus on counting per-
sons. As a result the “Alternating-task training” method
improves the MAE by about 12% when compared to the
direct ﬁne-tuning method. Moreover, the “Multi-task train-
ing” approach reduces the MAE further to 279.6. Given its
excellent results we consider only the “Multi-task training”
approach for the remainder of the experiments.

We also probe how performance scales with increasing
training data. We ran an experiment in which we incre-
mentally add supervised training data from Part A of the
ShanghaiTech data. Our approach, using only 60% of the
labeled data, yields about the same accuracy as training the
counting objective alone on 100% of this data.

5.3. Comparison with the state-of-the-art

We start with the results on the UCF CC 50 dataset.
A ﬁve-fold cross-validation was performed for evaluating

Method MAE MSE
541.6
498.5
509.1
425.2
341.4
439.2
320.9
397.6
388.9
Table 3. MAE and MSE error on the UCF CC 50 dataset.

Idrees et al. [13]
Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Onoro et al. [25]
Walach et al. [33]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

419.5
467.0
377.6
333.7
364.4
318.1
295.8
291.5
279.6

Part A

Part B

Zhang et al. (2015) [35]
Zhang et al. (2016) [37]
Babu Sam et al. [1]
Sindagi et al. [31]
Ours: Multi-task (Query-by-example)
Ours: Multi-task (Keyword)

Method MAE MSE MAE MSE
49.8
41.3
33.4
30.1
23.8
21.4

277.7
173.2
135.0
106.4
106.6
112.0

181.8
110.2
90.4
73.6
72.0
73.6

32.0
26.4
21.6
20.1
14.4
13.7

Table 4. MAE and MSE error on the ShanghaiTech dataset.

the methods. Results are shown in Table 3. Our multi-
task training method with the Keyword dataset reduces the
MAE error from 295.8 to 279.6 compared to the state-of-
the-art. However the MSE of our method on UCF CC 50
dataset is worse then the state-of-the-art methods [33, 31],
which means our methods works better in general but has
more extreme outliers. Compared to training on the Key-
word dataset, learning from the Query-by-example dataset
is slightly worse, which might be because most images from
UCF CC 50 are black and white with low resolution, which
often does not lead to satisfactory query results. An exam-
ple of prediction in UCF CC 50 using our network is shown
in Figure 5.

Next we compare with state-of-the-art on the two sets
of the ShanghaiTech dataset. As shown in Table 4, simi-
lar conclusions as on UCF CC 50 can be drawn. We see
that using the our approach further improves by about 2%
on ShanghaiTech. For both Part A and Part B, our ap-
proach surpasses the state-of-the-art method [31]. An ex-
ample of prediction by our network on ShanghaiTech is
given in Figure 5. For comparison we also provide the re-
sults of our baseline method (including ﬁne-tuning from a

Figure 5. Examples of predicted density maps for the UCF CC 50 (Top row, true count: 3406 prediction: 3052) and ShanghaiTech datasets
(Bottom row, true count: 361 prediction: 365). Left column: crowd image. Middle column: ground truth. Right column: prediction.

pre-trained model and multi-scale data augmentation) on
this dataset: M AE = 77.7 and M SE = 115.9 on Part
A, and M AE = 14.7 and M SE = 24.7 on Part B. On
Part B our baseline already obtains state-of-the-art, with the
best results for the multi-task approach obtaining around a
30% improvement when compared to the state-of-the-art. It
should also be noted that the method of [31] is complemen-
tary to ours and an approach which combines both methods
is expected to further improve results.

5.4. Evaluation on transfer learning

As proposed in [37], to demonstrate the generalization of
the learned model, we test our method in the transfer learn-
ing setting by using Part A of the ShanghaiTech dataset as
the source domain and using UCF CC 50 dataset as the tar-
get domain. The model trained on Part A of ShanghaiTech
is used to predict the crowd scene images from UCF CC 50
dataset, and the results can be seen in Table 5. Using only
counting information improves the MAE by 12% compared
to reported results in [37]. By combining both ranking
and counting datasets, the MAE decreases from 349.5 to
337.6, and MSE decreases from 475.7 to 434.3. In conclu-
sion, these results show that our method signiﬁcantly out-
performs the only other work reporting results on the task
of cross-dataset crowd counting.

6. Conclusions

In this work we proposed a method for crowd counting.
The main novelty is based on the observation that a crop
which is contained within a larger crop must contain fewer
or an equal number of persons than the larger crop. This

Zhang et al. (2016) [37]
Ours: Counting only
Ours: Multi-task

Method MAE MSE
624.1
475.7
434.3

397.6
349.5
337.6

Table 5. Transfer learning across datasets. Models were trained on
Part A of ShanghaiTech and tested on UCF CC 50.

allows us to address one of the main problems for crowd
counting, namely the lack of large training datasets. Our
approach enables the exploitation of abundantly available
training data from the Internet by automatically generating
rankings from them. We showed how this additional data
can be leveraged with available annotated data in a multi-
task network.

Experiments show that the proposed self-supervised task
improves results signiﬁcantly when compared to a net-
work which is only trained on the annotated data. We
show that incorporating the self-supervised task in a multi-
task approach obtains optimal results. Furthermore, we
obtain state-of-the-art results on two challenging datasets
for crowd counting, namely the ShanghaiTech and the
UCF CC 50 dataset. Finally, we show that the learned mod-
els generalize well to other datasets, signiﬁcantly outper-
forming the only other crowd counting method which re-
ports on this transfer learning task.
Acknowledgements We acknowledge the Spanish project
TIN2016-79717-R, the CHISTERA project M2CR (PCIN-
2015-251) and the CERCA Programme / Generalitat de
Catalunya. Xialei Liu acknowledges the Chinese Scholar-
ship Council (CSC) grant No.201506290018. We also ac-
knowledge the generous GPU donation from NVIDIA.

References

[1] D. Babu Sam, S. Surya, and R. Venkatesh Babu. Switching
convolutional neural network for crowd counting. In CVPR,
2017. 1, 2, 3, 5, 7

[2] L. Boominathan, S. S. Kruthiventi, and R. V. Babu. Crowd-
net: a deep convolutional network for dense crowd counting.
In Proc. ACM on Multimedia Conference, 2016. 5

[3] A. B. Chan, Z.-S. J. Liang, and N. Vasconcelos. Privacy pre-
serving crowd monitoring: Counting people without people
models or tracking. In CVPR, 2008. 1

[4] A. B. Chan and N. Vasconcelos. Bayesian poisson regression

for crowd counting. In ICCV, 2009. 2

[5] A. B. Chan and N. Vasconcelos. Counting people with low-
IEEE Transactions

level features and bayesian regression.
on Image Processing, 21(4):2160–2177, 2012. 2

[6] K. Chen, C. C. Loy, S. Gong, and T. Xiang. Feature mining

for localised crowd counting. In BMVC, 2012. 2

[7] W. Chen, T.-Y. Liu, Y. Lan, Z.-M. Ma, and H. Li. Ranking
In NIPS,

measures and loss functions in learning to rank.
2009. 3

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, 2005. 6

[9] Y. Cong, H. Gong, S.-C. Zhu, and Y. Tang. Flow mosaick-
ing: Real-time pedestrian counting without scene-speciﬁc
learning. In Computer Vision and Pattern Recognition, 2009.
CVPR 2009. IEEE Conference on, pages 1093–1100. IEEE,
2009. 2

[10] C. Doersch, A. Gupta, and A. A. Efros. Unsupervised vi-
sual representation learning by context prediction. In ICCV,
2015. 2, 6, 7

[11] P. Dollar, C. Wojek, B. Schiele, and P. Perona. Pedestrian de-
tection: An evaluation of the state of the art. IEEE trans. on
pattern analysis and machine intelligence, 34(4):743–761,
2012. 2

[12] M. Fu, P. Xu, X. Li, Q. Liu, M. Ye, and C. Zhu. Fast crowd
density estimation with convolutional neural networks. En-
gineering Applications of Artiﬁcial Intelligence, 43:81–88,
2015. 2, 3

[13] H. Idrees, I. Saleemi, C. Seibert, and M. Shah. Multi-source
multi-scale counting in extremely dense crowd images.
In
CVPR, 2013. 6, 7

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolu-
tional architecture for fast feature embedding. arXiv preprint
arXiv:1408.5093, 2014. 6

[15] D. Kang, D. Dhar, and A. B. Chan. Crowd counting by
adapting convolutional neural networks with side informa-
tion. arXiv preprint arXiv:1611.06748, 2016. 3

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1097–1105, 2012. 2

Imagenet
In

[17] G. Larsson, M. Maire, and G. Shakhnarovich. Colorization
as a proxy task for visual understanding. In CVPR, 2017. 2
[18] V. Lempitsky and A. Zisserman. Learning to count objects

in images. In NIPS, pages 1324–1332, 2010. 1, 2

[19] M. Li, Z. Zhang, K. Huang, and T. Tan. Estimating the num-
ber of people in crowded scenes by mid based foreground
segmentation and head-shoulder detection. In International
Conference on Pattern Recognition. IEEE, 2008. 2

[20] X. Liu, J. van de Weijer, and A. D. Bagdanov. Rankiqa:
Learning from rankings for no-reference image quality as-
sessment. In ICCV, 2017. 2, 3, 6, 7

[21] C. C. Loy, K. Chen, S. Gong, and T. Xiang. Crowd counting
In Modeling,
and proﬁling: Methodology and evaluation.
Simulation and Visual Analysis of Crowds, pages 347–382.
Springer, 2013. 2

[22] Z. Ma and A. B. Chan. Crossing the line: Crowd count-
ing by integer programming with local features. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2539–2546, 2013. 2

[23] M. Marsden, K. McGuiness, S. Little, and N. E. O’Connor.
Fully convolutional crowd counting on highly congested
scenes. arXiv preprint arXiv:1612.00220, 2016. 2

[24] M. Noroozi, H. Pirsiavash, and P. Favaro. Representation
learning by learning to count. In ICCV, 2017. 2, 3, 6, 7

[25] D. Onoro-Rubio and R. J. L´opez-Sastre.

perspective-free object counting with deep learning.
ECCV. Springer, 2016. 1, 3, 5, 7

Towards
In

[26] D. Pathak, P. Krahenbuhl, J. Donahue, T. Darrell, and A. A.
Efros. Context encoders: Feature learning by inpainting. In
CVPR, 2016. 2, 6, 7

[27] D. Sculley. Large scale learning to rank. In NIPS Workshop

on Advances in Ranking, 2009. 3

[28] C. Shang, H. Ai, and B. Bai. End-to-end crowd counting
In International

via joint learning local and global count.
Conference on Image Processing (ICIP), 2016. 2

[29] B. Sheng, C. Shen, G. Lin, J. Li, W. Yang, and C. Sun. Crowd
counting via weighted vlad on dense attribute feature maps.
IEEE Transactions on Circuits and Systems for Video Tech-
nology, 2016. 1

[30] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. ICLR, 2015. 4

[31] V. A. Sindagi and V. M. Patel. Generating high-quality crowd
density maps using contextual pyramid cnns. In ICCV, 2017.
2, 3, 5, 7, 8

[32] V. A. Sindagi and V. M. Patel. A survey of recent advances
in cnn-based single image crowd counting and density esti-
mation. Pattern Recognition Letters, 2017. 2

[33] E. Walach and L. Wolf. Learning to count with cnn boosting.

In ECCV. Springer, 2016. 7

[34] C. Wang, H. Zhang, L. Yang, S. Liu, and X. Cao. Deep
people counting in extremely dense crowds. In Proceedings
of ACM int. conf. on Multimedia. ACM, 2015. 2

[35] C. Zhang, H. Li, X. Wang, and X. Yang. Cross-scene crowd
counting via deep convolutional neural networks. In CVPR,
2015. 2, 3, 7

[36] R. Zhang, P. Isola, and A. A. Efros. Colorful image coloriza-

tion. In ECCV, 2016. 2, 6, 7

[37] Y. Zhang, D. Zhou, S. Chen, S. Gao, and Y. Ma. Single-
image crowd counting via multi-column convolutional neu-
ral network. In CVPR, 2016. 1, 2, 3, 5, 6, 7, 8

