7
1
0
2
 
v
o
N
 
4
2
 
 
]

G
L
.
s
c
[
 
 
2
v
3
8
6
6
0
.
9
0
7
1
:
v
i
X
r
a

OptionGAN: Learning Joint Reward-Policy Options using Generative Adversarial
Inverse Reinforcement Learning

Peter Henderson1, Wei-Di Chang2, Pierre-Luc Bacon1
David Meger1, Joelle Pineau1, Doina Precup1
1 School of Computer Science, McGill University, Montreal, Canada
2 Department of Electrical, Computer, and Software Engineering, McGill University, Montreal, Canada
{peter.henderson,wei-di.chang}@mail.mcgill.ca
pbacon@cs.mcgill.ca, dmeger@cim.mcgill.ca, {jpineau,dprecup}@cs.mcgill.ca

Abstract

Reinforcement learning has shown promise in learning poli-
cies that can solve complex problems. However, manually
specifying a good reward function can be difﬁcult, especially
for intricate tasks. Inverse reinforcement learning offers a
useful paradigm to learn the underlying reward function di-
rectly from expert demonstrations. Yet in reality, the corpus
of demonstrations may contain trajectories arising from a di-
verse set of underlying reward functions rather than a single
one. Thus, in inverse reinforcement learning, it is useful to
consider such a decomposition. The options framework in re-
inforcement learning is speciﬁcally designed to decompose
policies in a similar light. We therefore extend the options
framework and propose a method to simultaneously recover
reward options in addition to policy options. We leverage
adversarial methods to learn joint reward-policy options us-
ing only observed expert states. We show that this approach
works well in both simple and complex continuous control
tasks and shows signiﬁcant performance increases in one-shot
transfer learning.

Introduction

A long term goal of Inverse Reinforcement Learning (IRL)
is to be able to learn underlying reward functions and poli-
cies solely from human video demonstrations. We call such
a case, where the demonstrations come from different con-
texts and the task must be performed in a novel environment,
one-shot transfer learning. For example, given only demon-
strations of a human walking on earth, can an agent learn to
walk on the moon?

However, such demonstrations would undoubtedly come
from a wide range of settings and environments and may
not conform to a single reward function. This proves detri-
mental to current methods which might over-generalize and
cause poor performance. In forward RL, decomposing a pol-
icy into smaller specialized policy options has been shown
to improve results for exactly such cases (Sutton, Precup,
and Singh 1999; Bacon, Harb, and Precup 2017). Thus, we
extend the options framework to IRL and decompose both
the reward function and policy. Our method is able to learn
deep policies which can specialize to the set of best-ﬁtting

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

experts. Hence, it excels at one-shot transfer learning where
single-approximator methods waver.

To accomplish this, we make use of the Generative Adver-
sarial Imitation Learning (GAIL) framework (Ho and Ermon
2016) and formulate a method for learning joint reward-
policy options with adversarial methods in IRL. As such,
we call our method OptionGAN. This method can implicitly
learn divisions in the demonstration state space and accord-
ingly learn policy and reward options. Leveraging a corre-
spondence between Mixture-of-Experts (MoE) and one-step
options, we learn a decomposition of rewards and the policy-
over-options in an end-to-end fashion. This decomposition is
able to capture simple problems and learn any of the under-
lying rewards in one shot. This gives ﬂexibility and beneﬁts
for a variety of future applications (both in reinforcement
learning and standard machine learning).

We evaluate OptionGAN in the context of continuous
control locomotion tasks, considering both simulated Mu-
JoCo locomotion OpenAI Gym environments (Brockman et
al. 2016), modiﬁcations of these environments for task trans-
fer (Henderson et al. 2017), and a more complex Roboschool
task (Schulman et al. 2017). We show that the ﬁnal policies
learned using joint reward-policy options outperform a sin-
gle reward approximator and policy network in most cases,
and particularly excel at one-shot transfer learning.

Related Work
One goal in robotics research is to create a system which
learns how to accomplish complex tasks simply from ob-
serving an expert’s actions (such as videos of humans per-
forming actions). While IRL has been instrumental in work-
ing towards this goal, it has become clear that ﬁtting a single
reward function which generalizes across many domains is
difﬁcult. To this end, several works investigate decomposing
the underlying reward functions of expert demonstrations
and environments in both IRL and RL (Krishnan et al. 2016;
Sermanet, Xu, and Levine 2016; Choi and eung Kim 2012;
Babes et al. 2011; van Seijen et al. 2017). For example,
in (Krishnan et al. 2016), reward functions are decomposed
into a set of subtasks based on segmenting expert demonstra-
tion transitions (known state-action pairs) by analyzing the
changes in “local linearity with respect to a kernel function”.
Similarly, in (Sermanet, Xu, and Levine 2016), techniques in
video editing based on information-similarity are adopted to

divide a video demonstration into distinct sections which can
then be recombined into a differentiable reward function.

However, simply decomposing the reward function may
not be enough, the policy must also be able to adapt to
different tasks. Several works have investigated learning
a latent dimension along with the policy for such a pur-
pose (Hausman et al. 2017; Wang et al. 2017; Li, Song,
and Ermon 2017). This latent dimension allows multiple
tasks to be learned by one policy and elicited via the latent
variable. In contrast, our work focuses on one-shot trans-
fer learning. In the former work, the desired latent vari-
able must be known and provided, whereas in our formu-
lation the latent structure is inherently encoded in an un-
supervised manner. This is inherently accomplished while
learning to solve a task composed of a wide range of un-
derlying reward functions and policies in a single frame-
work. Overall, this work contains parallels to all of the afore-
mentioned and other works emphasizing hierarchical poli-
cies (Daniel, Neumann, and Peters 2012; Dietterich 2000;
Merel et al. 2017), but speciﬁcally focuses on leveraging
MoEs and reward decompositions to ﬁt into the options
framework for efﬁcient one-shot transfer learning in IRL.

Preliminaries and Notation

∈

∈

∈

A

A

×

→

→

∼ N

R, S

t=0 γtrt+1

Markov Decision Processes (MDPs) MDPs consist of
states S, actions A, a transition function P : S
→
×
R. We formu-
R), and a reward function r : S
(S
late our methods in the space of continuous control tasks
R) using measure-theoretic assumptions. Thus
(A
we deﬁne a parameterized policy as the probability distri-
bution over actions conditioned on states πθ : S
→
(µ, σ2) where θ are
[0, 1], modeled by a Gaussian πθ
the policy parameters. The value of a policy is deﬁned as
Vπ(s) = Eπ[(cid:80)∞
s0 = s] and the action-value
|
is Qπ(s, a) = Eπ[(cid:80)∞
t=0 γtrt+1
s0 = s, a0 = a], where
|
[0, 1) is the discount factor.
γ

∈
The Options framework In reinforcement learning, an
Ω) can be deﬁned by a triplet (Iω, πω, βω). In
option (ω
S
this deﬁnition, πω is called an intra-policy option, Iω
is an initiation set, and βω : S
[0, 1] is a termination
function (i.e. the probability that an option ends at a given
state) (Sutton, Precup, and Singh 1999). Furthermore, πΩ is
the policy-over-options. That is, πΩ determines which op-
tion πω an agent picks to use until the termination func-
tion βω indicates that a new option should be chosen. Other
works explicitly formulate call-and-return options, but we
instead simplify to one-step options, where βω(s) = 1;
∈
Ω,
S. One-step options have long been discussed as
an alternative to temporally extended methods and often
provide advantages in terms of optimality and value esti-
mation (Sutton, Precup, and Singh 1999; Dietterich 2000;
Daniel, Neumann, and Peters 2012). Furthermore, we ﬁnd
that our options still converge to temporally extended and
interpretable actions.

s
∀

→

⊆

∈

ω

∀

Mixture-of-Experts The idea of creating a mixture of
experts (MoEs) was initially formalized to improve learn-
ing of neural networks by dividing the input space among
several networks and then combining their outputs through

a soft weighted average (Jacobs et al. 1991). It has since
come into prevalence for generating extremely large neu-
ral networks (Shazeer et al. 2017). In our formulation of
joint reward-policy options, we leverage a correspondence
between Mixture-of-Experts and options. In the case of one-
step options, the policy-over-options (πΩ) can be viewed as a
specialized gating function over experts (intra-options poli-
cies πω(a
s). Several works inves-
s)πω(a
|
|
|
tigate convergence to a sparse and specialized Mixture-of-
Experts (Jacobs et al. 1991; Shazeer et al. 2017). We lever-
age these works to formulate a Mixture-of-Experts which
converges to one-step options.

s)): (cid:80)

ω πΩ(ω

Policy Gradients Policy gradient (PG) methods (Sutton
et al. 2000) formulate a method for optimizing a param-
eterized policy πθ through stochastic gradient ascent. In
the discounted setting, PG methods optimize ρ(θ, s0) =
Eπθ [(cid:80)∞
s0]. The PG theorem states: δρ(θ,s0)
t=0 γtr(st)
=
δθ
|
(cid:80)
s0) (cid:80)
δπθ(a|s)
δθ Qπθ (s, a), where µπθ (s
s µπθ (s
s0) =
a
|
|
(cid:80)∞
t=0 γtP (st = s
s0) (Sutton et al. 2000). In Trust Re-
|
gion Policy Optimization (TRPO) (Schulman et al. 2015)
and Proximal Policy Optimization (PPO) (Schulman et al.
2017) this update is constrained and transformed into the ad-
vantage estimation view such that the above becomes a con-
strained optimization: maxθ Et
sub-
ject to Et [KL [πθold (
δ where At(st, at) is
st), πθ(
·|
·|
the generalized advantage function according to (Schulman
et al. 2016). In TRPO, this is solved as a constrained conju-
gate gradient descent problem, while in PPO the constraint
is transformed into a penalty term or clipping objective.

(cid:104) πθ(at|st)
πθold (at|st) At(st, at)
st)]]

≤

(cid:105)

Inverse Reinforcement Learning Inverse Reinforcement
Learning was ﬁrst formulated in the context of MDPs by
(Ng and Russell 2000). In later work, a parametrization of
the reward function is learned as a linear combination of
the state feature expectation so that the hyperdistance be-
tween the expert and the novice’s feature expectation is
minimized (Abbeel and Ng 2004). It has also been shown
that a solution can be formulated using the maximum en-
tropy principle, with the goal of matching feature expecta-
tion as well (Ziebart et al. 2008). Generative adversarial im-
itation learning (GAIL) make use of adversarial techniques
from (Goodfellow et al. 2014) to perform a similar feature
expectation matching (Ho and Ermon 2016). In this case,
a discriminator uses state-action pairs (transitions) from the
expert demonstrations and novice rollouts to learn a binary
classiﬁcation probability distribution. The probability that a
state belongs to an expert demonstration can then be used
as the reward for a policy optimization step. However, un-
like GAIL, we do not assume knowledge of the expert ac-
tions. Rather, we rely solely on observations in the discrim-
inator problem. We therefore refer to our baseline approach
as Generative Adversarial Inverse Reinforcement Learning
(IRLGAN) as opposed to imitation learning. It is important
to note that IRLGAN is GAIL without known actions, we
adopt the different naming scheme to highlight this differ-
ence. As such, our adversarial game optimizes:
(cid:2)EπΘ[log R ˆΘ(s)] + EπE [log(1

R ˆΘ(s))](cid:3)

max
πΘ

min
R ˆΘ −

−

(1)

Figure 1: Generative Adversarial Inverse Reinforcement Learning (left) and OptionGAN (right) Architectures

where πΘ and πE are the policy of the novice and expert
parameterized by Θ and E, respectively, and R ˆΘ is the dis-
criminator probability that a sample state belongs to an ex-
pert demonstration (parameterized by ˆΘ). We use this nota-
tion since in this case the discriminator approximates a re-
ward function. Similarly to GAIL, we use TRPO during the
policy optimization step for simple tasks. However, for com-
plex tasks we adopt PPO. Figure 1 and Algorithm 1 show an
outline for the general IRLGAN process.

Algorithm 1: IRLGAN
Input

: Expert trajectories τE

1 Initialize Θ, ˆΘ
2 for i = 0, 1, 2, . . . do
3

πE.

∼

πΘi

Sample trajectories τN
∼
Update discriminator parameters ( ˆΘ) according to:
L ˆΘ = Es∼τN [log R ˆΘ(s)]+Es∼τE [log(1
Update policy (with constrained update step and
parameters θ) according to:
EτN [

s)EτN [log(R ˆΘi+1

(s))

−

Θ log πΘi(a
|

s0 = ¯s]]
|

R ˆΘ(s))]

∇

4

5

6 end

Reward-Policy Options Framework
Based on the need to infer a decomposition of underlying
reward functions from a wide range of expert demonstra-
tions in one-shot transfer learning, we extend the options
framework for decomposing rewards as well as policies. In
this way, intra-option policies, decomposed rewards, and the
policy-over-options can all be learned in concert in a co-
hesive framework. In this case, an option is formulated by
a tuple: (Iω, πω, βω, rω). Here, rω is a reward option from
which a corresponding intra-option policy πω is derived.
That is, each policy option is optimized with respect to its
own local reward option. The policy-over-options not only
chooses the intra-option policy, but the reward option as

→

well: πΩ
(rω, πω). For simplicity, we refer to the policy-
over-reward-options as rΩ (in our formulation, rΩ = πΩ).
There is a parallel to be drawn from this framework to Feu-
dal RL (Dayan and Hinton 1993), but here the intrinsic re-
ward function is statically bound to each worker (policy op-
tion), whereas in that framework the worker dynamically re-
ceives a new intrinsic reward from the manager.

To learn joint reward-policy options, we present a method
which ﬁts into the framework of IRLGAN. We reformu-
late the discriminator as a Mixture-Of-Experts and re-use
the gating function when learning a set of policy options.
We show that by properly formulating the discriminator loss
function, the Mixture-Of-Experts converges to one-step op-
tions. This formulation also allows us to use regularizers
which encourage distribution of information, diversity, and
sparsity in both the reward and policy options.

ω πΩ,ζ(ω

Learning Joint Reward-Policy Options
The use of one-step options allows us to learn a policy-over-
options in an end-to-end fashion as a Mixture-of-Experts
formulation. In the one-step case, selecting an option (πω,θ)
using the policy-over-options (πΩ,ζ) can be viewed as a mix-
ture of completely specialized experts such that: πΘ(a
s) =
(cid:80)
|
s). The reward for a given state is
s)πω,θ(a
composed as: RΩ, ˆΘ(s) = (cid:80)
|
|
s)rω,ˆθ(s), where
ω πΩ,ζ(ω
|
Θ, ˆθ
ˆΘ are the parameters of the policy-over-
ζ, θ
options, policy options, and reward options, respectively.
Thus, we reformulate our discriminator loss as a weighted
mixture of completely specialized experts in Eq. 2. This al-
lows us to update the parameters of the policy-over-options
and reward options together during the discriminator update.

∈

∈

(cid:104)

(cid:105)

LΩ = Eω

+ Lreg

πΩ,ζ(ω

s)Lˆθ,ω
|
Here, Lˆθ,ω is the sigmoid cross-entropy loss of the reward
options (discriminators). Lreg, as will be discussed later on,
is a penalty or set of penalties which can encourage certain
properties of the policy-over-options or the overall reward
signal. As can be seen in Algorithm 2 and Figure 1, this loss
function can ﬁt directly into the IRLGAN framework.

(2)

Algorithm 2: OptionGAN
Input

: Expert trajectories τE

1 Initialize θ, ˆθ
2 for i = 0, 1, 2, . . . do
3

πE.

∼

Sample trajectories τN
∼
Update discriminator options parameters ˆθ, ω and
policy-over-options parameters ζ, to minimize:

πΘi

LΩ = Eω

πΩ,ζ(ω

(cid:104)

(cid:105)

+ Lreg

s)Lˆθ,ω
|

Lˆθ,ω = EτN [log rˆθ,ω(s)] + EτE [log(1
rˆθ,ω(s))]
Update policy options (with constrained update step
and parameters θω
EτN [

ΘΩ) according to:
∈
s)EτN [log(RΩ, ˆΘ(s))

−

θ log πΘ(a
|

∇

s0 = ¯s]]
|

4

5

6 end

Having updated the parameters of the policy-over-options
and reward options, standard PG methods can be used to op-
timize the parameters of the intra-option policies. This can
be done by weighting the average of the intra-option policy
actions with the policy-over-options πΩ,ζ. While it is possi-
ble to update each intra-option policy separately as in (Ba-
con, Harb, and Precup 2017), this Mixture-of-Experts for-
mulation is equivalent, as discussed in the next section. Once
the gating function specializes over the options, all gradients
except for those related to the intra-option policy selected
would be weighted by zero. We ﬁnd that this end-to-end pa-
rameter update formulation leads to easier implementation
and smoother learning with constraint-based methods.

Mixture-of-Experts as Options
To ensure that our MoE formulation converges to options
in the optimal case, we must properly formulate our loss
function such that the gating function specializes over ex-
perts. While it may be possible to force a sparse selec-
tion of options through a top-k choice as in (Shazeer et
al. 2017), we ﬁnd that this leads to instability since for
k = 1 the top-k function is not differentiable. As is spec-
iﬁed in (Jacobs et al. 1991), a loss function of the form
s)yω(s))2 draws cooperation
L = (y
|
between experts, but a reformulation of the loss, L =
yω(s))2, encourages specialization.
If we view our policy-over-options as a softmax (i.e.
i exp(zi(s)) ), then the derivative of the loss

πΩ(ω
function with respect to the gating function becomes:

s) = exp(zω(s))
(cid:80)

ω πΩ(ω

ω πΩ(ω

s)(y
|

1
||Ω||

1
||Ω||

(cid:80)

(cid:80)

−

−

|

dL
dzω

=

1
Ω

||

||

πΩ(ω

s) (cid:0)(y
|

−

yω(s))2

L(cid:1)

−

(3)

This can intuitively be interpreted as encouraging the gat-
ing function to increase the likelihood of choosing an expert
when its loss is less than the average loss of all the experts.
The gating function will thus move toward deterministic se-
lection of experts.

As we can see in Eq. 2, we formulate our discrimina-
tor loss in the same way, using each reward option and the
policy-over-options as the experts and gating function re-
spectively. This ensures that the policy-over-options special-
izes over the state space and converges to a deterministic se-
lection of experts. Hence, we can assume that in the optimal
case, our formulation of an MoE-style policy-over-options is
equivalent to one-step options. Our characterization of this
notion of MoE-as-options is further backed by experimental
results. Empirically, we still ﬁnd temporal coherence across
option activation despite not explicitly formulating call-and-
return options as in (Bacon, Harb, and Precup 2017).

Regularization Penalties
Due to our formulation of Mixture-of-Experts as options, we
can learn our policy-over-options in an end-to-end manner.
This allows us to add additional terms to our loss function to
encourage the appearance of certain target properties.

Sparsity and Variance Regularization To ensure an even
distribution of activation across the options, we look to con-
ditional computation techniques that encourage sparsity and
diversity in hidden layer activations and apply these to our
policy-over-options (Bengio et al. 2015). We borrow three
penalty terms Lb, Le, Lv (adopting a similar notation). In
the minibatch setting, these are formulated as:

Lb =

Es[πΩ(ω

s)]
|

τ

2
||

−

(cid:88)
ω ||
(cid:34)

(cid:32)

Le = Es

Lv =

||
(cid:88)

−

ω

||
varω

ω

||
πΩ(ω
{

s)
}
|

(cid:33)

(cid:35)

(cid:88)

1
Ω

πΩ(ω

s)
|

τ

2
||

−

(4)

(5)

(6)

where τ is the target sparsity rate (which we set to .5 for
all cases). Here, Lb encourages the activation of the policy-
over-options with target sparsity τ “in expectation over the
data” (Bengio et al. 2015). Essentially, Lb encourages a uni-
form distribution of options over the data while Le drives
toward a target sparsity of activations per example (doubly
encouraging our mixtures to be sparse). Lv also encourages
varied πΩ activations while discouraging uniform selection.
Mutual Information Penalty To ensure the specialization
of each option to a speciﬁc partition of the state space, a mu-
tual information (MI) penalty is added.1 We thus minimize
mutual information pairwise between option distributions,
similarly to (Liu and Yao 2002):
1
2
−
where Fi and Fj are the outputs of reward options i and j
respectively, and ρij the correlation coefﬁcient of Fi and Fj,
deﬁned as ρij = E[(Fi−E[Fi])(Fj −E[Fj ])]

I(Fi; Fj) =

ρ2
ij),

log(1

(7)

−

.

σ2
i σ2
j

1While it may be simpler to use an entropy regularizer, we
found that in practice it performs worse. Entropy regularization en-
courages exploration (Mnih et al. 2016). In the OptionGAN setting,
this results in unstable learning, while the mutual information term
encourages diversity in the options while providing stable learning.

Figure 2: The policy-over-options elicits two interpretable behaviour modes per option, but temporal cohesion and specialization
is seen between these behaviour modes across time within a sample rollout trajectory.

The resulting loss term is thus computed as:
(cid:88)

(cid:88)

LMI =

I(πω, πˆω).

(8)

ω∈Ω

ˆω∈Ω,ω(cid:54)=ˆω

Thus the overall regularization term becomes:

reg = λbLb + λeLe + λvLv + λMILMI.

(9)

L

Experiments
To evaluate our method of learning joint reward-policy op-
tions, we investigate continuous control tasks. We divide
our experiments into 3 settings: simple locomotion tasks,
one-shot transfer learning, and complex tasks. We compare
OptionGAN against IRLGAN in all scenarios, investigat-
ing whether dividing the reward and policy into options im-
proves performance against the single approximator case.2
Table 1 shows the overall results of our evaluations and we
highlight a subset of learning curves in Figure 3. We ﬁnd that
in nearly every setting, the ﬁnal optionated policy learned by
OptionGAN outperforms the single approximator case.

Experimental Setup
All shared hyperparameters are held constant between IRL-
GAN and OptionGAN evaluation runs. All evaluations are
averaged across 10 trials, each using a different random
seed. We use the average return of the true reward function
across 25 sample rollouts as the evaluation metric. Multi-
layer perceptrons are used for all approximators as in (Ho
and Ermon 2016). For the OptionGAN intra-option policy
and reward networks, we use shared hidden layers. That is
rω,
Ω share
hidden layers. We use separate parameters for the policy-
over-options πΩ. Shared layers are used to ensure a fair com-
parison against a single network of the same number of hid-
den layers. For simple settings all hidden layers are of size

Ω all share hidden layers and πω,

∈

∈

ω

ω

∀

∀

2Extended experimental details and results can be found in the

supplemental. Code is located at:
https://github.com/Breakend/OptionGAN.

(64, 64) and for complex experiments are (128, 128). For
the 2-options case we set λe = 10.0, λb = 10.0, λv = 1.0
based on a simple hyperparameter search and reported re-
sults from (Bengio et al. 2015). For the 4-options case we
relax the regularizer that encourages a uniform distribution
of options (Lb), setting λb = .01.

Simple Tasks
First, we investigate simple settings without transfer learn-
ing for a set of benchmark locomotion tasks provided in
OpenAI Gym (Brockman et al. 2016) using the MuJoCo
simulator (Todorov, Erez, and Tassa 2012). We use the
Hopper-v1, HalfCheetah-v1, and Walker2d-v1 locomotion
environments. The results of this experiment are shown
in Table 1 and sample learning curves for Hopper and
HalfCheetah can be found in Figure 3. We use 10 expert roll-
outs from a policy trained using TRPO for 500 iterations.

In these simple settings, OptionGAN converges to poli-
cies which perform as well or better than the single approxi-
mator setting. Importantly, even in these simple settings, the
options which our policy selects have a notion of temporal
coherence and interpretability despite not explicitly enforc-
ing this in the form of a termination function. This can be
seen in the two option version of the Hopper-v1 task in Fig-
ure 2. We ﬁnd that generally each option takes on two be-
haviour modes. The ﬁrst option handles: (1) the rolling of
the foot during hopper landing; (2) the folding in of the foot
in preparation for ﬂoating. The second option handles: (1)
the last part of take-off where the foot is hyper-extended and
body ﬂexed; (2) the part of air travel without any movement.

One-Shot Transfer Learning
We also investigate one-shot transfer learning. In this sce-
nario, the novice is trained on a target environment, while
expert demonstrations come from a similar task, but from
environments with altered dynamics (i.e. one-shot transfer
from varied expert demonstrations to a new environment).
To demonstrate the effectiveness of OptionGAN in these set-
tings, we use expert demonstrations from environments with

Task
Hopper-v1
HalfCheetah-v1
Walker2d-v1
Hopper (One-Shot)
HalfCheetah (One-Shot)
Walker (One-Shot)
HopperSimpleWall-v0
RoboschoolHumanoidFlagrun-v1

Expert
3778.8 ± 0.3
4156.9 ± 8.7
5528.5 ± 7.3
3657.7 ± 25.4
4156.9 ± 51.3
4218.1 ± 43.1
3218.2 ± 315.7
2822.1 ± 531.1

IRLGAN
3736.3 ± 152.4
3212.9 ± 69.9
4158.7 ± 247.3
2775.1 ± 203.3
1296.3 ± 177.8
3229.8 ± 145.3
2897.5 ± 753.5
1455.2 ± 567.6

OptionGAN (2ops) OptionGAN (4ops)

3641.2 ± 105.9
3714.7 ± 87.5
3858.5 ± 504.9
3409.4 ± 80.8
1679.0 ± 284.2
3925.3 ± 138.9
3140.3 ± 674.3
1868.9 ± 723.7

3715.5 ± 17.6
3616.1 ± 127.3
4239.3 ± 314.2
3464.0 ± 67.8
2219.4 ± 231.8
3769.40 ± 170.4
3272.3 ± 569.0
2113.6 ± 862.9

Table 1: True Average Return with the standard error across 10 trials on the 25 ﬁnal evaluation rollouts using the ﬁnal policy.

varying gravity conditions as seen in (Henderson et al. 2017;
Christiano et al. 2016). We vary the gravity (.5, .75, 1.25, 1.5
of Earth’s gravity) and train experts using TRPO for each
of these. We gather 10 expert trajectories from each gravity
variation, for a total of 40 expert rollouts, to train a novice
agent on the normal Earth gravity environment (the default
-v1 environment as provided in OpenAI Gym). We repeat
this for Hopper-v1, HalfCheetah-v1, and Walker2D-v1.

These gravity tasks are selected due to the demonstration
in (Henderson et al. 2017) that learning sequentially on these
varied gravity environments causes catastrophic forgetting
of the policy on environments seen earlier in training. This
suggests that the dynamics are varied enough that trajecto-
ries are difﬁcult to generalize across, yet still share some
state representations and task goals. As seen in Figure 3, us-
ing options can cause signiﬁcant performance increases in
this area, but performance gains can vary across the number
of options and the regularization penalty as seen in Table 1.

Complex Tasks

Lastly, we investigate slightly more complex tasks. We uti-
lize the HopperSimpleWall-v0 environment provided by the
gym-extensions framework (Henderson et al. 2017) and
the RoboschoolHumanoidFlagrun-v1 environment used in
(Schulman et al. 2017). In the ﬁrst, a wall is placed ran-
domly in the path of the Hopper-v1 agent and simpliﬁed
sensor readouts are added to the observations as in (Wang
et al. 2017). In the latter, the goal is to run and reach a fre-
quently changing target. This is an especially complex task
with a highly varied state space. In both cases we use an ex-
pert trained with TRPO and PPO respectively, to generate
40 expert rollouts. For the Roboschool environment, we ﬁnd
that TRPO does not allow enough exploration to perform ad-
equately, and thus we switch our policy optimization method
to the clipping-objective version of PPO.

Ablation Investigations
Convergence of Mixtures to Options To show that our
formulation of Mixture-of-Experts decomposes to options
in the optimal case, we investigate the distributions of our
policy-over-options. We ﬁnd that across 40 trials, 100% of
activations fell within a reasonable error bound of deter-
ministic selection across 1M samples. That is, in 40 to-
tal trials across 4 environments (Hopper-v1, HalfCheetah-
v1, Walker2d-v1, RoboschoolHumanoidFlagrun-v1), poli-
cies were trained for 500 iterations (or 5k iterations in

the case of RoboschoolHumanoidFlagrun-v1). We collected
25k samples at the end of each trial. Among the gating ac-
tivations across the samples, we recorded the number of
for (cid:15) =
gating activations within the range
0.1. 100% fell within this range. 98.72% fell within range
(cid:15) = 1−3. Thus at convergence, both intuitively and empiri-
cally we can refer to our gating function over experts as the
policy-over-options and each of the experts as options.

0 + (cid:15), 1
{

−

}

(cid:15)

Effect of Uniform Distribution Regularizer We ﬁnd that
forcing a uniform distribution over options can potentially
be harmful. This can be seen in the experiment in Figure 4,
where we evaluate the 4 option case with λb =
.
}
However, relaxing the uniform constraint results in rapid
performance increases, particularly in the HalfCheetah-v1
where we see increases in learning speed with 4 options.

0.1, 10
{

There is an intuitive explanation for this. In the 4-option
case, with a relaxed uniform distribution penalty, we allow
options to drop out during training. In the case of Hop-
per and Walker tasks, generally 2 options drop out slowly
over time, but in HalfCheetah, only one option drops out
in the ﬁrst 20 iterations with a uniform distribution remain-
ing across the remaining options as seen in Figure 3. We
posit that in the case of HalfCheetah there is enough mutu-
ally exclusive information in the environment state space to
divide across 3 options, quickly causing a rapid gain in per-
formance, while the Hopper tasks do not settle as quickly
and thus do not see that large gain in performance.

Latent Structure in Expert Demonstrations Another
beneﬁt of using options in the IRL transfer setting is that
the underlying latent division of the original expert envi-
ronments is learned by the policy-over-options. As seen in
Figure 5, the expert demonstrations have a clear separation
among options. We suspect that options further away from
the target gravity are not as specialized due to the fact that
their state spaces are covered signiﬁcantly by a mixture of
the closer options (see supplemental material for support-
ing projected state space mappings). This indicates that the
policy-over-options specializes over the experts and is thus
inherently beneﬁcial for use in one-shot transfer learning.

Discussion
We propose a direct extension of the options framework by
adding joint reward-policy options. We learn these options in
the context of generative adversarial inverse reinforcement
learning and show that this method outperforms the single

Figure 3: Left Column: Simple locomotion curves. Error bars indicate standard error of average returns across 10 trials on
25 evaluation rollouts. Middle Column: One-shot transfer experiments with 40 expert demonstrations from varied gravity
environments without any demonstrations on the novice training environment training on demonstrations from .5G, .75G,
1.25G, 1.5G gravity variations. Right Column: Activations of policy-over-options over time with 4 options on training samples
in the one-shot transfer setting with λb = .01.

policy case in a variety of tasks – particularly in transfer
settings. Furthermore, the learned options demonstrate tem-
poral and interpretable cohesion without specifying a call-
and-return termination function.

Our formulation of joint reward-policy options as a Mix-
ture Of Experts allows for: potential upscaling to extremely
large networks as in (Shazeer et al. 2017), reward shaping in
forward RL, and using similarly specialized MoEs in gener-
ative adversarial networks. This work presents an effective
and extendable framework. Our optionated networks capture
the problem structure effectively, which allows strong gen-
eralization in one-shot transfer learning. Moreover, as adver-
sarial methods are now commonly used across a myriad of
communities, we believe the embedding of options within
this methodology is an excellent delivery mechanism to ex-
ploit the beneﬁts of hierarchical RL in many new ﬁelds.

Acknowledgements
We thank CIFAR, NSERC, The Open Philanthropy Project,
and the AWS Cloud Credits for Research Program for their
generous contributions.

References
Abbeel, P., and Ng, A. Y. 2004. Apprenticeship learning
In Proceedings of the
via inverse reinforcement learning.
Twenty-ﬁrst International Conference on Machine Learning,
1–. New York, NY, USA: ACM.
Babes, M.; Marivate, V.; Subramanian, K.; and Littman,
M. L. 2011. Apprenticeship learning about multiple inten-
tions. In Proceedings of the 28th International Conference
on Machine Learning (ICML-11), 897–904.
Bacon, P.-L.; Harb, J.; and Precup, D. 2017. The option-
critic architecture. In AAAI, 1726–1734.

Figure 4: Effect of uniform distribution regularizer. Aver-
age πΩ across ﬁnal sample novice rollouts: λb = 10.0,
[.27, .21, .25, .25]; λb = .01, [0., 0., .62, .38].

Figure 5: Probability distribution of πΩ over options on ex-
pert demonstrations. Inherent structure is found in the under-
lying demonstrations. The .75G demonstration state spaces
are signiﬁcantly assigned to Option 1 and similarly, the
1.25G state spaces to Option 0.

Bengio, E.; Bacon, P.-L.; Pineau, J.; and Precup, D. 2015.
Conditional computation in neural networks for faster mod-
els. arXiv preprint arXiv:1511.06297.
Brockman, G.; Cheung, V.; Pettersson, L.; Schneider, J.;
Schulman, J.; Tang, J.; and Zaremba, W. 2016. OpenAI
Gym.
Choi, J., and eung Kim, K. 2012. Nonparametric bayesian
inverse reinforcement learning for multiple reward func-
tions. In Pereira, F.; Burges, C. J. C.; Bottou, L.; and Wein-
berger, K. Q., eds., Advances in Neural Information Process-
ing Systems 25. Curran Associates, Inc. 305–313.
Christiano, P.; Shah, Z.; Mordatch, I.; Schneider, J.; Black-
well, T.; Tobin, J.; Abbeel, P.; and Zaremba, W. 2016. Trans-
fer from simulation to real world through learning deep in-
verse dynamics model. arXiv preprint arXiv:1610.03518.
Daniel, C.; Neumann, G.; and Peters, J. R. 2012. Hierarchi-
cal relative entropy policy search. In International Confer-
ence on Artiﬁcial Intelligence and Statistics, 273–281.
Dayan, P., and Hinton, G. E. 1993. Feudal reinforcement
learning. In Advances in neural information processing sys-
tems, 271–278.
Dietterich, T. G. 2000. Hierarchical reinforcement learning
with the MAXQ value function decomposition. Journal of
Artiﬁcial Intelligence Research 13:227–303.
Goodfellow, I. J.; Pouget-Abadie, J.; Mirza, M.; Xu, B.;
Warde-Farley, D.; Ozair, S.; Courville, A.; and Bengio, Y.
2014. Generative adversarial nets. In Advances in Neural
Information Processing Systems, 2672–2680.
Hausman, K.; Chebotar, Y.; Schaal, S.; Sukhatme, G.; and
Lim, J. 2017. Multi-modal imitation learning from un-
structured demonstrations using generative adversarial nets.
arXiv preprint arXiv:1705.10479.
Henderson, P.; Chang, W.-D.; Shkurti, F.; Hansen, J.; Meger,
D.; and Dudek, G. 2017. Benchmark environments for
ICML Lifelong
multitask learning in continuous domains.
Learning: A Reinforcement Learning Approach Workshop.
Ho, J., and Ermon, S. 2016. Generative adversarial imita-
tion learning. In Advances in Neural Information Processing
Systems, 4565–4573.
Jacobs, R. A.; Jordan, M. I.; Nowlan, S. J.; and Hinton, G. E.
1991. Adaptive mixtures of local experts. Neural computa-
tion 3(1):79–87.
Kingma, D. P., and Ba, J. 2014. Adam: A Method for
Stochastic Optimization. ArXiv e-prints.
Krishnan, S.; Garg, A.; Liaw, R.; Miller, L.; Pokorny, F. T.;
and Goldberg, K. 2016. Hirl: Hierarchical inverse reinforce-
ment learning for long-horizon tasks with delayed rewards.
arXiv preprint arXiv:1604.06508.
InfoGAIL: In-
Li, Y.; Song, J.; and Ermon, S.
terpretable imitation learning from visual demonstrations.
arXiv preprint arXiv:1703.08840.
Liu, Y., and Yao, X. 2002. Learning and evolution by min-
imization of mutual information. In International Confer-
ence on Parallel Problem Solving from Nature, 495–504.
Springer.

2017.

Merel, J.; Tassa, Y.; Srinivasan, S.; Lemmon, J.; Wang, Z.;
Wayne, G.; and Heess, N. 2017. Learning human behaviors
from motion capture by adversarial imitation. arXiv preprint
arXiv:1707.02201.
Mnih, V.; Badia, A. P.; Mirza, M.; Graves, A.; Lillicrap, T.;
Harley, T.; Silver, D.; and Kavukcuoglu, K. 2016. Asyn-
chronous methods for deep reinforcement learning. In In-
ternational Conference on Machine Learning, 1928–1937.
Ng, A. Y., and Russell, S. J. 2000. Algorithms for inverse re-
inforcement learning. In Proceedings of the Seventeenth In-
ternational Conference on Machine Learning, 663–670. San
Francisco, CA, USA: Morgan Kaufmann Publishers Inc.
Schulman, J.; Levine, S.; Abbeel, P.; Jordan, M.; and Moritz,
P. 2015. Trust region policy optimization. In Proceedings
of the 32nd International Conference on Machine Learning
(ICML-15), 1889–1897.
Schulman, J.; Moritz, P.; Levine, S.; Jordan, M.; and Abbeel,
P. 2016. High-dimensional continuous control using gener-
alized advantage estimation. In Proceedings of the Interna-
tional Conference on Learning Representations (ICLR).
Schulman, J.; Wolski, F.; Dhariwal, P.; Radford, A.; and
Klimov, O. 2017. Proximal policy optimization algorithms.
arXiv preprint arXiv:1707.06347.
Sermanet, P.; Xu, K.; and Levine, S. 2016. Unsupervised
perceptual rewards for imitation learning. arXiv preprint
arXiv:1612.06699.
Shazeer, N.; Mirhoseini, A.; Maziarz, K.; Davis, A.; Le, Q.;
Hinton, G.; and Dean, J. 2017. Outrageously large neu-
ral networks: The sparsely-gated mixture-of-experts layer.
arXiv preprint arXiv:1701.06538.
Sutton, R. S.; McAllester, D. A.; Singh, S. P.; and Mansour,
Y. 2000. Policy gradient methods for reinforcement learning
with function approximation. In Advances in neural infor-
mation processing systems, 1057–1063.
Sutton, R. S.; Precup, D.; and Singh, S. 1999. Between
MDPs and semi-MDPs: A framework for temporal abstrac-
tion in reinforcement learning. Artiﬁcial intelligence 112(1-
2):181–211.
Todorov, E.; Erez, T.; and Tassa, Y. 2012. MuJoCo: A
physics engine for model-based control. In 2012 IEEE/RSJ
International Conference on Intelligent Robots and Systems,
IROS 2012, Vilamoura, Algarve, Portugal, October 7-12,
2012, 5026–5033.
van Seijen, H.; Fatemi, M.; Romoff, J.; Laroche, R.; Barnes,
T.; and Tsang, J. 2017. Hybrid reward architecture for rein-
forcement learning. arXiv preprint arXiv:1706.04208.
Wang, Z.; Merel, J.; Reed, S.; Wayne, G.; de Freitas, N.;
and Heess, N. 2017. Robust imitation of diverse behaviors.
arXiv preprint arXiv:1707.02747.
Ziebart, B. D.; Maas, A.; Bagnell, J. A.; and Dey, A. K.
2008. Maximum entropy inverse reinforcement learning. In
Proceedings of the 23rd National Conference on Artiﬁcial
Intelligence - Volume 3, 1433–1438. AAAI Press.

The expectation over the discriminator loss for the option case can be expanded:

Supplemental Material

Expanded Equations

LΩ = Eω
(cid:88)

=

(cid:104)

πΩ,ζ(ω

πΩ,ζ(ω

(cid:105)

+ Lreg

s)Lˆθ,ω
|
s)Lˆθ,ω + Lreg
|

ω

As can the regularization terms:

Lb =

(cid:88)
ω ||

E[πΩ(ω)]

τ

2
||

−

(cid:88)
ω ||

1
mb

≈

mb(cid:88)

i

(πΩ(ω

si))

τ

2
||

−

Le = E

(cid:34)

(cid:32)

1
Ω
||
(cid:32)

||
||
mb(cid:88)

||

i

(cid:88)

πΩ(ω)

ω

1
Ω

(cid:88)

||

||

ω

1
mb

≈

|

(cid:33)

(cid:35)

τ

−

2
||
(cid:33)

πΩ(ω

si)

|

τ

2
||

−

Lv =

−

≈ −

πΩ(s)
{
}
mb(cid:88)

(cid:32)

(cid:88)

varω

(cid:88)

ω

ω

1
mb

i

πΩ(ω

si)
|

−

(cid:32)

1
mb

mb(cid:88)

i

πΩ(ω

si)

|

(cid:33)(cid:33)

(10)

(11)

(12)

(13)

Expert Collection
The expert demonstration rollouts (state sequences) for all OpenAI Gym (Brockman et al. 2016) environments were obtained
from policies trained for 1000 iterations using Trust Region Policy Optimization (Schulman et al. 2015) with parameters
KLmax = .01, generalized advantage estimation λ = .97, discount factor γ = .99 and batch size 25, 000 (rollout timesteps
shared when updating the discriminator and policy). For the Roboschool (Schulman et al. 2017) Flagrun-v1 environment, the
rollouts were obtained using the PPO pre-trained expert provided with Roboschool.

Experimental Setup and Hyperparameters
Observations are not normalized in all cases as we found that it did not help or hurt performance. In all cases for advantage
estimation we use a value approximator as in (Schulman et al. 2015), which uses L-BFGS optimization with a mixing fraction
of .1. That is, it uses the current prediction Vθ(s) and mixes it with the actual discounted returns with .1 belonging to the actual
discounted returns and .9 belonging to the current prediction. This is identical to the original Trust Region Policy Optimization
(TRPO) code as provided at: https://github.com/joschu/modular_rl/. We perform a maximum of 20 L-BFGS
iterations per value function update. For all the environments, we let the agent act until the maximum allowed timesteps of the
speciﬁc environment (as set by default in OpenAI Gym), gather the rollouts and keep the number of timesteps per batch desired.
For all policy optimization steps in both IRLGAN and OPTIONGAN, we use TRPO with the with parameters set to the same
values as the ones used for the expert collection (KLmax = .01, generalized advantage estimation λ = .97, discount factor
γ = .99 and batch size 25, 000), except for the Roboschool Flagrun Experiment where PPO was used instead, as explained in
its respective section below.

Simple Tasks and Transfer Tasks

For simple tasks we use 10 expert rollouts while for transfer tasks we use 40 expert rollouts (10 from each environment
variation).

Figure 6: Experiments from 40 expert demonstrations from varied gravity environments without any demonstrations on the
novice training environment. Average returns from expert demonstrations across all mixed environments: 3657.71 (Hopper-
v1), 4181.97 (HalfCheetah-v1), 4218.12 (Walker2d-v1).

Figure 7: Simple locomotion task learning curves. The True Average Return provided by the expert demonstrations are: 3778.82
(Hopper-v1), 4156.94 (HalfCheetah-v1), 5528.51 (Walker2d-v1). Error bars indicate standard error of True Average Return
across 10 trial runs.
.

Figure 8: Evaluation on RoboschoolHumanoidFlagrun-v1 environment (Schulman et al. 2017). Average expert rollout returns:
2822.13.

IRLGAN We use a Gaussian Multilayer Perceptron policy as in (Schulman et al. 2015) with two 64 units hidden layers and
tanh hidden layer activations. The output of the network gives the Gaussian mean and the standard deviation is modeled by a
single learned variable as in (Schulman et al. 2015). Similarly for our discriminator network, we use the same architecture with
10−3 for the discriminator. We do not use entropy
a sigmoid output, tanh hidden layer activations, and a learning rate of 1
regularization or l2 regularization as it resulted in worse performance. For every policy update we perform 3 discriminator
updates as we found the policy optimization step is able to handle this and results in faster learning.

·

Ω

OPTIONGAN Aligning with the IRLGAN networks, we make use of a Gaussian Multilayer Perceptron policy as in (Schul-
man et al. 2015) with 2 hidden layers of 64 units with tanh hidden layer activations for our shared hidden layers. These hidden
layers connect to
options depending on the experiment (2 or 4). In this case the output of the network gives the Gaussian
mean for each option and the standard deviation is modeled by a single learned variable per option. The policy-over-options
is also modeled by a 2 layered 64 units network with tanh activations and a softmax output corresponding to the number of
options. For our discriminator, we use the same architecture with tanh hidden layer activations, a sigmoid output and
||
outputs, one for each option. We use the policy over options to create a specialized mixture of experts model with a specialized
10−3 for the discriminator. Same as in IRLGAN, we
loss function which converges to options. We use a learning rate of 1

Ω

||

||

||

·

do not make use of entropy regularization or l2 regularization as we found either regularizers to hurt performance. Instead we
use scaling factors for the regularization terms included in the loss: λb = 10.0, λe = 10.0, λv = 1.0 for the 2 options case and
λb = 0.01, λe = 10.0, λv = 1.0 for the 4 options case. Again, we perform 3 discriminator updates per policy update

RoboschoolHumanoidFlagrun-v1
For Roboschool experiments we use proximal policy optimization (PPO) with a clipping objective (Schulman et al. 2017) (clip-
ping parameter set to (cid:15) = .02). We perform 5 Adam (Kingma and Ba 2014) policy updates on the PPO clipping objective with
10−3. The value function and advantage estimation parameters from previous experiments are maintained
a learning rate of 1
while our network architecture sizes are increased to (128, 128) and use ReLU activations instead of tanh.

·

We show that the trained policy-over-options network shows some intrinsic structure over the expert demonstrations.

Decomposition of Rewards over Expert Demonstrations

Figure 9: Probability distribution of πΩ over options on expert demonstrations. Inherent structure is found in the demonstrations.

Figure 10: State distribution of expert demonstrations projected onto a 2D plane to pair with Figure 5. Axes correspond to
projected state dimensions from the original 6-D state space using SVD.

In Figure 9 are shown the activation of the gating function across expert rollouts after training. We see that the underlying
division in expert demonstrations is learned by the policy-over-options, which indicates that our method for training the policy-
over-options induces it to learn a latent structure to the expert demonstrations and thus can beneﬁt in the transfer case since
each option inherently specializes to be used in different environments. We ﬁnd that options specialized more clearly over the
experts with environments closest to the normal gravity environment, while the others use an even mixture of options. This is
due to the fact that the mixing specialized options are able to cover the state space of the non-specialized options as we can
observe from the state distribution of the expert demonstrations shown in Figure 10.

7
1
0
2
 
v
o
N
 
4
2
 
 
]

G
L
.
s
c
[
 
 
2
v
3
8
6
6
0
.
9
0
7
1
:
v
i
X
r
a

OptionGAN: Learning Joint Reward-Policy Options using Generative Adversarial
Inverse Reinforcement Learning

Peter Henderson1, Wei-Di Chang2, Pierre-Luc Bacon1
David Meger1, Joelle Pineau1, Doina Precup1
1 School of Computer Science, McGill University, Montreal, Canada
2 Department of Electrical, Computer, and Software Engineering, McGill University, Montreal, Canada
{peter.henderson,wei-di.chang}@mail.mcgill.ca
pbacon@cs.mcgill.ca, dmeger@cim.mcgill.ca, {jpineau,dprecup}@cs.mcgill.ca

Abstract

Reinforcement learning has shown promise in learning poli-
cies that can solve complex problems. However, manually
specifying a good reward function can be difﬁcult, especially
for intricate tasks. Inverse reinforcement learning offers a
useful paradigm to learn the underlying reward function di-
rectly from expert demonstrations. Yet in reality, the corpus
of demonstrations may contain trajectories arising from a di-
verse set of underlying reward functions rather than a single
one. Thus, in inverse reinforcement learning, it is useful to
consider such a decomposition. The options framework in re-
inforcement learning is speciﬁcally designed to decompose
policies in a similar light. We therefore extend the options
framework and propose a method to simultaneously recover
reward options in addition to policy options. We leverage
adversarial methods to learn joint reward-policy options us-
ing only observed expert states. We show that this approach
works well in both simple and complex continuous control
tasks and shows signiﬁcant performance increases in one-shot
transfer learning.

Introduction

A long term goal of Inverse Reinforcement Learning (IRL)
is to be able to learn underlying reward functions and poli-
cies solely from human video demonstrations. We call such
a case, where the demonstrations come from different con-
texts and the task must be performed in a novel environment,
one-shot transfer learning. For example, given only demon-
strations of a human walking on earth, can an agent learn to
walk on the moon?

However, such demonstrations would undoubtedly come
from a wide range of settings and environments and may
not conform to a single reward function. This proves detri-
mental to current methods which might over-generalize and
cause poor performance. In forward RL, decomposing a pol-
icy into smaller specialized policy options has been shown
to improve results for exactly such cases (Sutton, Precup,
and Singh 1999; Bacon, Harb, and Precup 2017). Thus, we
extend the options framework to IRL and decompose both
the reward function and policy. Our method is able to learn
deep policies which can specialize to the set of best-ﬁtting

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

experts. Hence, it excels at one-shot transfer learning where
single-approximator methods waver.

To accomplish this, we make use of the Generative Adver-
sarial Imitation Learning (GAIL) framework (Ho and Ermon
2016) and formulate a method for learning joint reward-
policy options with adversarial methods in IRL. As such,
we call our method OptionGAN. This method can implicitly
learn divisions in the demonstration state space and accord-
ingly learn policy and reward options. Leveraging a corre-
spondence between Mixture-of-Experts (MoE) and one-step
options, we learn a decomposition of rewards and the policy-
over-options in an end-to-end fashion. This decomposition is
able to capture simple problems and learn any of the under-
lying rewards in one shot. This gives ﬂexibility and beneﬁts
for a variety of future applications (both in reinforcement
learning and standard machine learning).

We evaluate OptionGAN in the context of continuous
control locomotion tasks, considering both simulated Mu-
JoCo locomotion OpenAI Gym environments (Brockman et
al. 2016), modiﬁcations of these environments for task trans-
fer (Henderson et al. 2017), and a more complex Roboschool
task (Schulman et al. 2017). We show that the ﬁnal policies
learned using joint reward-policy options outperform a sin-
gle reward approximator and policy network in most cases,
and particularly excel at one-shot transfer learning.

Related Work
One goal in robotics research is to create a system which
learns how to accomplish complex tasks simply from ob-
serving an expert’s actions (such as videos of humans per-
forming actions). While IRL has been instrumental in work-
ing towards this goal, it has become clear that ﬁtting a single
reward function which generalizes across many domains is
difﬁcult. To this end, several works investigate decomposing
the underlying reward functions of expert demonstrations
and environments in both IRL and RL (Krishnan et al. 2016;
Sermanet, Xu, and Levine 2016; Choi and eung Kim 2012;
Babes et al. 2011; van Seijen et al. 2017). For example,
in (Krishnan et al. 2016), reward functions are decomposed
into a set of subtasks based on segmenting expert demonstra-
tion transitions (known state-action pairs) by analyzing the
changes in “local linearity with respect to a kernel function”.
Similarly, in (Sermanet, Xu, and Levine 2016), techniques in
video editing based on information-similarity are adopted to

divide a video demonstration into distinct sections which can
then be recombined into a differentiable reward function.

However, simply decomposing the reward function may
not be enough, the policy must also be able to adapt to
different tasks. Several works have investigated learning
a latent dimension along with the policy for such a pur-
pose (Hausman et al. 2017; Wang et al. 2017; Li, Song,
and Ermon 2017). This latent dimension allows multiple
tasks to be learned by one policy and elicited via the latent
variable. In contrast, our work focuses on one-shot trans-
fer learning. In the former work, the desired latent vari-
able must be known and provided, whereas in our formu-
lation the latent structure is inherently encoded in an un-
supervised manner. This is inherently accomplished while
learning to solve a task composed of a wide range of un-
derlying reward functions and policies in a single frame-
work. Overall, this work contains parallels to all of the afore-
mentioned and other works emphasizing hierarchical poli-
cies (Daniel, Neumann, and Peters 2012; Dietterich 2000;
Merel et al. 2017), but speciﬁcally focuses on leveraging
MoEs and reward decompositions to ﬁt into the options
framework for efﬁcient one-shot transfer learning in IRL.

Preliminaries and Notation

∈

∈

∈

A

A

×

→

→

∼ N

R, S

t=0 γtrt+1

Markov Decision Processes (MDPs) MDPs consist of
states S, actions A, a transition function P : S
→
×
R. We formu-
R), and a reward function r : S
(S
late our methods in the space of continuous control tasks
R) using measure-theoretic assumptions. Thus
(A
we deﬁne a parameterized policy as the probability distri-
bution over actions conditioned on states πθ : S
→
(µ, σ2) where θ are
[0, 1], modeled by a Gaussian πθ
the policy parameters. The value of a policy is deﬁned as
Vπ(s) = Eπ[(cid:80)∞
s0 = s] and the action-value
|
is Qπ(s, a) = Eπ[(cid:80)∞
t=0 γtrt+1
s0 = s, a0 = a], where
|
[0, 1) is the discount factor.
γ

∈
The Options framework In reinforcement learning, an
Ω) can be deﬁned by a triplet (Iω, πω, βω). In
option (ω
S
this deﬁnition, πω is called an intra-policy option, Iω
is an initiation set, and βω : S
[0, 1] is a termination
function (i.e. the probability that an option ends at a given
state) (Sutton, Precup, and Singh 1999). Furthermore, πΩ is
the policy-over-options. That is, πΩ determines which op-
tion πω an agent picks to use until the termination func-
tion βω indicates that a new option should be chosen. Other
works explicitly formulate call-and-return options, but we
instead simplify to one-step options, where βω(s) = 1;
∈
Ω,
S. One-step options have long been discussed as
an alternative to temporally extended methods and often
provide advantages in terms of optimality and value esti-
mation (Sutton, Precup, and Singh 1999; Dietterich 2000;
Daniel, Neumann, and Peters 2012). Furthermore, we ﬁnd
that our options still converge to temporally extended and
interpretable actions.

s
∀

→

⊆

∈

ω

∀

Mixture-of-Experts The idea of creating a mixture of
experts (MoEs) was initially formalized to improve learn-
ing of neural networks by dividing the input space among
several networks and then combining their outputs through

a soft weighted average (Jacobs et al. 1991). It has since
come into prevalence for generating extremely large neu-
ral networks (Shazeer et al. 2017). In our formulation of
joint reward-policy options, we leverage a correspondence
between Mixture-of-Experts and options. In the case of one-
step options, the policy-over-options (πΩ) can be viewed as a
specialized gating function over experts (intra-options poli-
cies πω(a
s). Several works inves-
s)πω(a
|
|
|
tigate convergence to a sparse and specialized Mixture-of-
Experts (Jacobs et al. 1991; Shazeer et al. 2017). We lever-
age these works to formulate a Mixture-of-Experts which
converges to one-step options.

s)): (cid:80)

ω πΩ(ω

Policy Gradients Policy gradient (PG) methods (Sutton
et al. 2000) formulate a method for optimizing a param-
eterized policy πθ through stochastic gradient ascent. In
the discounted setting, PG methods optimize ρ(θ, s0) =
Eπθ [(cid:80)∞
s0]. The PG theorem states: δρ(θ,s0)
t=0 γtr(st)
=
δθ
|
(cid:80)
s0) (cid:80)
δπθ(a|s)
δθ Qπθ (s, a), where µπθ (s
s µπθ (s
s0) =
a
|
|
(cid:80)∞
t=0 γtP (st = s
s0) (Sutton et al. 2000). In Trust Re-
|
gion Policy Optimization (TRPO) (Schulman et al. 2015)
and Proximal Policy Optimization (PPO) (Schulman et al.
2017) this update is constrained and transformed into the ad-
vantage estimation view such that the above becomes a con-
strained optimization: maxθ Et
sub-
ject to Et [KL [πθold (
δ where At(st, at) is
st), πθ(
·|
·|
the generalized advantage function according to (Schulman
et al. 2016). In TRPO, this is solved as a constrained conju-
gate gradient descent problem, while in PPO the constraint
is transformed into a penalty term or clipping objective.

(cid:104) πθ(at|st)
πθold (at|st) At(st, at)
st)]]

≤

(cid:105)

Inverse Reinforcement Learning Inverse Reinforcement
Learning was ﬁrst formulated in the context of MDPs by
(Ng and Russell 2000). In later work, a parametrization of
the reward function is learned as a linear combination of
the state feature expectation so that the hyperdistance be-
tween the expert and the novice’s feature expectation is
minimized (Abbeel and Ng 2004). It has also been shown
that a solution can be formulated using the maximum en-
tropy principle, with the goal of matching feature expecta-
tion as well (Ziebart et al. 2008). Generative adversarial im-
itation learning (GAIL) make use of adversarial techniques
from (Goodfellow et al. 2014) to perform a similar feature
expectation matching (Ho and Ermon 2016). In this case,
a discriminator uses state-action pairs (transitions) from the
expert demonstrations and novice rollouts to learn a binary
classiﬁcation probability distribution. The probability that a
state belongs to an expert demonstration can then be used
as the reward for a policy optimization step. However, un-
like GAIL, we do not assume knowledge of the expert ac-
tions. Rather, we rely solely on observations in the discrim-
inator problem. We therefore refer to our baseline approach
as Generative Adversarial Inverse Reinforcement Learning
(IRLGAN) as opposed to imitation learning. It is important
to note that IRLGAN is GAIL without known actions, we
adopt the different naming scheme to highlight this differ-
ence. As such, our adversarial game optimizes:
(cid:2)EπΘ[log R ˆΘ(s)] + EπE [log(1

R ˆΘ(s))](cid:3)

max
πΘ

min
R ˆΘ −

−

(1)

Figure 1: Generative Adversarial Inverse Reinforcement Learning (left) and OptionGAN (right) Architectures

where πΘ and πE are the policy of the novice and expert
parameterized by Θ and E, respectively, and R ˆΘ is the dis-
criminator probability that a sample state belongs to an ex-
pert demonstration (parameterized by ˆΘ). We use this nota-
tion since in this case the discriminator approximates a re-
ward function. Similarly to GAIL, we use TRPO during the
policy optimization step for simple tasks. However, for com-
plex tasks we adopt PPO. Figure 1 and Algorithm 1 show an
outline for the general IRLGAN process.

Algorithm 1: IRLGAN
Input

: Expert trajectories τE

1 Initialize Θ, ˆΘ
2 for i = 0, 1, 2, . . . do
3

πE.

∼

πΘi

Sample trajectories τN
∼
Update discriminator parameters ( ˆΘ) according to:
L ˆΘ = Es∼τN [log R ˆΘ(s)]+Es∼τE [log(1
Update policy (with constrained update step and
parameters θ) according to:
EτN [

s)EτN [log(R ˆΘi+1

(s))

−

Θ log πΘi(a
|

s0 = ¯s]]
|

R ˆΘ(s))]

∇

4

5

6 end

Reward-Policy Options Framework
Based on the need to infer a decomposition of underlying
reward functions from a wide range of expert demonstra-
tions in one-shot transfer learning, we extend the options
framework for decomposing rewards as well as policies. In
this way, intra-option policies, decomposed rewards, and the
policy-over-options can all be learned in concert in a co-
hesive framework. In this case, an option is formulated by
a tuple: (Iω, πω, βω, rω). Here, rω is a reward option from
which a corresponding intra-option policy πω is derived.
That is, each policy option is optimized with respect to its
own local reward option. The policy-over-options not only
chooses the intra-option policy, but the reward option as

→

well: πΩ
(rω, πω). For simplicity, we refer to the policy-
over-reward-options as rΩ (in our formulation, rΩ = πΩ).
There is a parallel to be drawn from this framework to Feu-
dal RL (Dayan and Hinton 1993), but here the intrinsic re-
ward function is statically bound to each worker (policy op-
tion), whereas in that framework the worker dynamically re-
ceives a new intrinsic reward from the manager.

To learn joint reward-policy options, we present a method
which ﬁts into the framework of IRLGAN. We reformu-
late the discriminator as a Mixture-Of-Experts and re-use
the gating function when learning a set of policy options.
We show that by properly formulating the discriminator loss
function, the Mixture-Of-Experts converges to one-step op-
tions. This formulation also allows us to use regularizers
which encourage distribution of information, diversity, and
sparsity in both the reward and policy options.

ω πΩ,ζ(ω

Learning Joint Reward-Policy Options
The use of one-step options allows us to learn a policy-over-
options in an end-to-end fashion as a Mixture-of-Experts
formulation. In the one-step case, selecting an option (πω,θ)
using the policy-over-options (πΩ,ζ) can be viewed as a mix-
ture of completely specialized experts such that: πΘ(a
s) =
(cid:80)
|
s). The reward for a given state is
s)πω,θ(a
composed as: RΩ, ˆΘ(s) = (cid:80)
|
|
s)rω,ˆθ(s), where
ω πΩ,ζ(ω
|
Θ, ˆθ
ˆΘ are the parameters of the policy-over-
ζ, θ
options, policy options, and reward options, respectively.
Thus, we reformulate our discriminator loss as a weighted
mixture of completely specialized experts in Eq. 2. This al-
lows us to update the parameters of the policy-over-options
and reward options together during the discriminator update.

∈

∈

(cid:104)

(cid:105)

LΩ = Eω

+ Lreg

πΩ,ζ(ω

s)Lˆθ,ω
|
Here, Lˆθ,ω is the sigmoid cross-entropy loss of the reward
options (discriminators). Lreg, as will be discussed later on,
is a penalty or set of penalties which can encourage certain
properties of the policy-over-options or the overall reward
signal. As can be seen in Algorithm 2 and Figure 1, this loss
function can ﬁt directly into the IRLGAN framework.

(2)

Algorithm 2: OptionGAN
Input

: Expert trajectories τE

1 Initialize θ, ˆθ
2 for i = 0, 1, 2, . . . do
3

πE.

∼

Sample trajectories τN
∼
Update discriminator options parameters ˆθ, ω and
policy-over-options parameters ζ, to minimize:

πΘi

LΩ = Eω

πΩ,ζ(ω

(cid:104)

(cid:105)

+ Lreg

s)Lˆθ,ω
|

Lˆθ,ω = EτN [log rˆθ,ω(s)] + EτE [log(1
rˆθ,ω(s))]
Update policy options (with constrained update step
and parameters θω
EτN [

ΘΩ) according to:
∈
s)EτN [log(RΩ, ˆΘ(s))

−

θ log πΘ(a
|

∇

s0 = ¯s]]
|

4

5

6 end

Having updated the parameters of the policy-over-options
and reward options, standard PG methods can be used to op-
timize the parameters of the intra-option policies. This can
be done by weighting the average of the intra-option policy
actions with the policy-over-options πΩ,ζ. While it is possi-
ble to update each intra-option policy separately as in (Ba-
con, Harb, and Precup 2017), this Mixture-of-Experts for-
mulation is equivalent, as discussed in the next section. Once
the gating function specializes over the options, all gradients
except for those related to the intra-option policy selected
would be weighted by zero. We ﬁnd that this end-to-end pa-
rameter update formulation leads to easier implementation
and smoother learning with constraint-based methods.

Mixture-of-Experts as Options
To ensure that our MoE formulation converges to options
in the optimal case, we must properly formulate our loss
function such that the gating function specializes over ex-
perts. While it may be possible to force a sparse selec-
tion of options through a top-k choice as in (Shazeer et
al. 2017), we ﬁnd that this leads to instability since for
k = 1 the top-k function is not differentiable. As is spec-
iﬁed in (Jacobs et al. 1991), a loss function of the form
s)yω(s))2 draws cooperation
L = (y
|
between experts, but a reformulation of the loss, L =
yω(s))2, encourages specialization.
If we view our policy-over-options as a softmax (i.e.
i exp(zi(s)) ), then the derivative of the loss

πΩ(ω
function with respect to the gating function becomes:

s) = exp(zω(s))
(cid:80)

ω πΩ(ω

ω πΩ(ω

s)(y
|

1
||Ω||

1
||Ω||

(cid:80)

(cid:80)

−

−

|

dL
dzω

=

1
Ω

||

||

πΩ(ω

s) (cid:0)(y
|

−

yω(s))2

L(cid:1)

−

(3)

This can intuitively be interpreted as encouraging the gat-
ing function to increase the likelihood of choosing an expert
when its loss is less than the average loss of all the experts.
The gating function will thus move toward deterministic se-
lection of experts.

As we can see in Eq. 2, we formulate our discrimina-
tor loss in the same way, using each reward option and the
policy-over-options as the experts and gating function re-
spectively. This ensures that the policy-over-options special-
izes over the state space and converges to a deterministic se-
lection of experts. Hence, we can assume that in the optimal
case, our formulation of an MoE-style policy-over-options is
equivalent to one-step options. Our characterization of this
notion of MoE-as-options is further backed by experimental
results. Empirically, we still ﬁnd temporal coherence across
option activation despite not explicitly formulating call-and-
return options as in (Bacon, Harb, and Precup 2017).

Regularization Penalties
Due to our formulation of Mixture-of-Experts as options, we
can learn our policy-over-options in an end-to-end manner.
This allows us to add additional terms to our loss function to
encourage the appearance of certain target properties.

Sparsity and Variance Regularization To ensure an even
distribution of activation across the options, we look to con-
ditional computation techniques that encourage sparsity and
diversity in hidden layer activations and apply these to our
policy-over-options (Bengio et al. 2015). We borrow three
penalty terms Lb, Le, Lv (adopting a similar notation). In
the minibatch setting, these are formulated as:

Lb =

Es[πΩ(ω

s)]
|

τ

2
||

−

(cid:88)
ω ||
(cid:34)

(cid:32)

Le = Es

Lv =

||
(cid:88)

−

ω

||
varω

ω

||
πΩ(ω
{

s)
}
|

(cid:33)

(cid:35)

(cid:88)

1
Ω

πΩ(ω

s)
|

τ

2
||

−

(4)

(5)

(6)

where τ is the target sparsity rate (which we set to .5 for
all cases). Here, Lb encourages the activation of the policy-
over-options with target sparsity τ “in expectation over the
data” (Bengio et al. 2015). Essentially, Lb encourages a uni-
form distribution of options over the data while Le drives
toward a target sparsity of activations per example (doubly
encouraging our mixtures to be sparse). Lv also encourages
varied πΩ activations while discouraging uniform selection.
Mutual Information Penalty To ensure the specialization
of each option to a speciﬁc partition of the state space, a mu-
tual information (MI) penalty is added.1 We thus minimize
mutual information pairwise between option distributions,
similarly to (Liu and Yao 2002):
1
2
−
where Fi and Fj are the outputs of reward options i and j
respectively, and ρij the correlation coefﬁcient of Fi and Fj,
deﬁned as ρij = E[(Fi−E[Fi])(Fj −E[Fj ])]

I(Fi; Fj) =

ρ2
ij),

log(1

(7)

−

.

σ2
i σ2
j

1While it may be simpler to use an entropy regularizer, we
found that in practice it performs worse. Entropy regularization en-
courages exploration (Mnih et al. 2016). In the OptionGAN setting,
this results in unstable learning, while the mutual information term
encourages diversity in the options while providing stable learning.

Figure 2: The policy-over-options elicits two interpretable behaviour modes per option, but temporal cohesion and specialization
is seen between these behaviour modes across time within a sample rollout trajectory.

The resulting loss term is thus computed as:
(cid:88)

(cid:88)

LMI =

I(πω, πˆω).

(8)

ω∈Ω

ˆω∈Ω,ω(cid:54)=ˆω

Thus the overall regularization term becomes:

reg = λbLb + λeLe + λvLv + λMILMI.

(9)

L

Experiments
To evaluate our method of learning joint reward-policy op-
tions, we investigate continuous control tasks. We divide
our experiments into 3 settings: simple locomotion tasks,
one-shot transfer learning, and complex tasks. We compare
OptionGAN against IRLGAN in all scenarios, investigat-
ing whether dividing the reward and policy into options im-
proves performance against the single approximator case.2
Table 1 shows the overall results of our evaluations and we
highlight a subset of learning curves in Figure 3. We ﬁnd that
in nearly every setting, the ﬁnal optionated policy learned by
OptionGAN outperforms the single approximator case.

Experimental Setup
All shared hyperparameters are held constant between IRL-
GAN and OptionGAN evaluation runs. All evaluations are
averaged across 10 trials, each using a different random
seed. We use the average return of the true reward function
across 25 sample rollouts as the evaluation metric. Multi-
layer perceptrons are used for all approximators as in (Ho
and Ermon 2016). For the OptionGAN intra-option policy
and reward networks, we use shared hidden layers. That is
rω,
Ω share
hidden layers. We use separate parameters for the policy-
over-options πΩ. Shared layers are used to ensure a fair com-
parison against a single network of the same number of hid-
den layers. For simple settings all hidden layers are of size

Ω all share hidden layers and πω,

∈

∈

ω

ω

∀

∀

2Extended experimental details and results can be found in the

supplemental. Code is located at:
https://github.com/Breakend/OptionGAN.

(64, 64) and for complex experiments are (128, 128). For
the 2-options case we set λe = 10.0, λb = 10.0, λv = 1.0
based on a simple hyperparameter search and reported re-
sults from (Bengio et al. 2015). For the 4-options case we
relax the regularizer that encourages a uniform distribution
of options (Lb), setting λb = .01.

Simple Tasks
First, we investigate simple settings without transfer learn-
ing for a set of benchmark locomotion tasks provided in
OpenAI Gym (Brockman et al. 2016) using the MuJoCo
simulator (Todorov, Erez, and Tassa 2012). We use the
Hopper-v1, HalfCheetah-v1, and Walker2d-v1 locomotion
environments. The results of this experiment are shown
in Table 1 and sample learning curves for Hopper and
HalfCheetah can be found in Figure 3. We use 10 expert roll-
outs from a policy trained using TRPO for 500 iterations.

In these simple settings, OptionGAN converges to poli-
cies which perform as well or better than the single approxi-
mator setting. Importantly, even in these simple settings, the
options which our policy selects have a notion of temporal
coherence and interpretability despite not explicitly enforc-
ing this in the form of a termination function. This can be
seen in the two option version of the Hopper-v1 task in Fig-
ure 2. We ﬁnd that generally each option takes on two be-
haviour modes. The ﬁrst option handles: (1) the rolling of
the foot during hopper landing; (2) the folding in of the foot
in preparation for ﬂoating. The second option handles: (1)
the last part of take-off where the foot is hyper-extended and
body ﬂexed; (2) the part of air travel without any movement.

One-Shot Transfer Learning
We also investigate one-shot transfer learning. In this sce-
nario, the novice is trained on a target environment, while
expert demonstrations come from a similar task, but from
environments with altered dynamics (i.e. one-shot transfer
from varied expert demonstrations to a new environment).
To demonstrate the effectiveness of OptionGAN in these set-
tings, we use expert demonstrations from environments with

Task
Hopper-v1
HalfCheetah-v1
Walker2d-v1
Hopper (One-Shot)
HalfCheetah (One-Shot)
Walker (One-Shot)
HopperSimpleWall-v0
RoboschoolHumanoidFlagrun-v1

Expert
3778.8 ± 0.3
4156.9 ± 8.7
5528.5 ± 7.3
3657.7 ± 25.4
4156.9 ± 51.3
4218.1 ± 43.1
3218.2 ± 315.7
2822.1 ± 531.1

IRLGAN
3736.3 ± 152.4
3212.9 ± 69.9
4158.7 ± 247.3
2775.1 ± 203.3
1296.3 ± 177.8
3229.8 ± 145.3
2897.5 ± 753.5
1455.2 ± 567.6

OptionGAN (2ops) OptionGAN (4ops)

3641.2 ± 105.9
3714.7 ± 87.5
3858.5 ± 504.9
3409.4 ± 80.8
1679.0 ± 284.2
3925.3 ± 138.9
3140.3 ± 674.3
1868.9 ± 723.7

3715.5 ± 17.6
3616.1 ± 127.3
4239.3 ± 314.2
3464.0 ± 67.8
2219.4 ± 231.8
3769.40 ± 170.4
3272.3 ± 569.0
2113.6 ± 862.9

Table 1: True Average Return with the standard error across 10 trials on the 25 ﬁnal evaluation rollouts using the ﬁnal policy.

varying gravity conditions as seen in (Henderson et al. 2017;
Christiano et al. 2016). We vary the gravity (.5, .75, 1.25, 1.5
of Earth’s gravity) and train experts using TRPO for each
of these. We gather 10 expert trajectories from each gravity
variation, for a total of 40 expert rollouts, to train a novice
agent on the normal Earth gravity environment (the default
-v1 environment as provided in OpenAI Gym). We repeat
this for Hopper-v1, HalfCheetah-v1, and Walker2D-v1.

These gravity tasks are selected due to the demonstration
in (Henderson et al. 2017) that learning sequentially on these
varied gravity environments causes catastrophic forgetting
of the policy on environments seen earlier in training. This
suggests that the dynamics are varied enough that trajecto-
ries are difﬁcult to generalize across, yet still share some
state representations and task goals. As seen in Figure 3, us-
ing options can cause signiﬁcant performance increases in
this area, but performance gains can vary across the number
of options and the regularization penalty as seen in Table 1.

Complex Tasks

Lastly, we investigate slightly more complex tasks. We uti-
lize the HopperSimpleWall-v0 environment provided by the
gym-extensions framework (Henderson et al. 2017) and
the RoboschoolHumanoidFlagrun-v1 environment used in
(Schulman et al. 2017). In the ﬁrst, a wall is placed ran-
domly in the path of the Hopper-v1 agent and simpliﬁed
sensor readouts are added to the observations as in (Wang
et al. 2017). In the latter, the goal is to run and reach a fre-
quently changing target. This is an especially complex task
with a highly varied state space. In both cases we use an ex-
pert trained with TRPO and PPO respectively, to generate
40 expert rollouts. For the Roboschool environment, we ﬁnd
that TRPO does not allow enough exploration to perform ad-
equately, and thus we switch our policy optimization method
to the clipping-objective version of PPO.

Ablation Investigations
Convergence of Mixtures to Options To show that our
formulation of Mixture-of-Experts decomposes to options
in the optimal case, we investigate the distributions of our
policy-over-options. We ﬁnd that across 40 trials, 100% of
activations fell within a reasonable error bound of deter-
ministic selection across 1M samples. That is, in 40 to-
tal trials across 4 environments (Hopper-v1, HalfCheetah-
v1, Walker2d-v1, RoboschoolHumanoidFlagrun-v1), poli-
cies were trained for 500 iterations (or 5k iterations in

the case of RoboschoolHumanoidFlagrun-v1). We collected
25k samples at the end of each trial. Among the gating ac-
tivations across the samples, we recorded the number of
for (cid:15) =
gating activations within the range
0.1. 100% fell within this range. 98.72% fell within range
(cid:15) = 1−3. Thus at convergence, both intuitively and empiri-
cally we can refer to our gating function over experts as the
policy-over-options and each of the experts as options.

0 + (cid:15), 1
{

−

}

(cid:15)

Effect of Uniform Distribution Regularizer We ﬁnd that
forcing a uniform distribution over options can potentially
be harmful. This can be seen in the experiment in Figure 4,
where we evaluate the 4 option case with λb =
.
}
However, relaxing the uniform constraint results in rapid
performance increases, particularly in the HalfCheetah-v1
where we see increases in learning speed with 4 options.

0.1, 10
{

There is an intuitive explanation for this. In the 4-option
case, with a relaxed uniform distribution penalty, we allow
options to drop out during training. In the case of Hop-
per and Walker tasks, generally 2 options drop out slowly
over time, but in HalfCheetah, only one option drops out
in the ﬁrst 20 iterations with a uniform distribution remain-
ing across the remaining options as seen in Figure 3. We
posit that in the case of HalfCheetah there is enough mutu-
ally exclusive information in the environment state space to
divide across 3 options, quickly causing a rapid gain in per-
formance, while the Hopper tasks do not settle as quickly
and thus do not see that large gain in performance.

Latent Structure in Expert Demonstrations Another
beneﬁt of using options in the IRL transfer setting is that
the underlying latent division of the original expert envi-
ronments is learned by the policy-over-options. As seen in
Figure 5, the expert demonstrations have a clear separation
among options. We suspect that options further away from
the target gravity are not as specialized due to the fact that
their state spaces are covered signiﬁcantly by a mixture of
the closer options (see supplemental material for support-
ing projected state space mappings). This indicates that the
policy-over-options specializes over the experts and is thus
inherently beneﬁcial for use in one-shot transfer learning.

Discussion
We propose a direct extension of the options framework by
adding joint reward-policy options. We learn these options in
the context of generative adversarial inverse reinforcement
learning and show that this method outperforms the single

Figure 3: Left Column: Simple locomotion curves. Error bars indicate standard error of average returns across 10 trials on
25 evaluation rollouts. Middle Column: One-shot transfer experiments with 40 expert demonstrations from varied gravity
environments without any demonstrations on the novice training environment training on demonstrations from .5G, .75G,
1.25G, 1.5G gravity variations. Right Column: Activations of policy-over-options over time with 4 options on training samples
in the one-shot transfer setting with λb = .01.

policy case in a variety of tasks – particularly in transfer
settings. Furthermore, the learned options demonstrate tem-
poral and interpretable cohesion without specifying a call-
and-return termination function.

Our formulation of joint reward-policy options as a Mix-
ture Of Experts allows for: potential upscaling to extremely
large networks as in (Shazeer et al. 2017), reward shaping in
forward RL, and using similarly specialized MoEs in gener-
ative adversarial networks. This work presents an effective
and extendable framework. Our optionated networks capture
the problem structure effectively, which allows strong gen-
eralization in one-shot transfer learning. Moreover, as adver-
sarial methods are now commonly used across a myriad of
communities, we believe the embedding of options within
this methodology is an excellent delivery mechanism to ex-
ploit the beneﬁts of hierarchical RL in many new ﬁelds.

Acknowledgements
We thank CIFAR, NSERC, The Open Philanthropy Project,
and the AWS Cloud Credits for Research Program for their
generous contributions.

References
Abbeel, P., and Ng, A. Y. 2004. Apprenticeship learning
In Proceedings of the
via inverse reinforcement learning.
Twenty-ﬁrst International Conference on Machine Learning,
1–. New York, NY, USA: ACM.
Babes, M.; Marivate, V.; Subramanian, K.; and Littman,
M. L. 2011. Apprenticeship learning about multiple inten-
tions. In Proceedings of the 28th International Conference
on Machine Learning (ICML-11), 897–904.
Bacon, P.-L.; Harb, J.; and Precup, D. 2017. The option-
critic architecture. In AAAI, 1726–1734.

Figure 4: Effect of uniform distribution regularizer. Aver-
age πΩ across ﬁnal sample novice rollouts: λb = 10.0,
[.27, .21, .25, .25]; λb = .01, [0., 0., .62, .38].

Figure 5: Probability distribution of πΩ over options on ex-
pert demonstrations. Inherent structure is found in the under-
lying demonstrations. The .75G demonstration state spaces
are signiﬁcantly assigned to Option 1 and similarly, the
1.25G state spaces to Option 0.

Bengio, E.; Bacon, P.-L.; Pineau, J.; and Precup, D. 2015.
Conditional computation in neural networks for faster mod-
els. arXiv preprint arXiv:1511.06297.
Brockman, G.; Cheung, V.; Pettersson, L.; Schneider, J.;
Schulman, J.; Tang, J.; and Zaremba, W. 2016. OpenAI
Gym.
Choi, J., and eung Kim, K. 2012. Nonparametric bayesian
inverse reinforcement learning for multiple reward func-
tions. In Pereira, F.; Burges, C. J. C.; Bottou, L.; and Wein-
berger, K. Q., eds., Advances in Neural Information Process-
ing Systems 25. Curran Associates, Inc. 305–313.
Christiano, P.; Shah, Z.; Mordatch, I.; Schneider, J.; Black-
well, T.; Tobin, J.; Abbeel, P.; and Zaremba, W. 2016. Trans-
fer from simulation to real world through learning deep in-
verse dynamics model. arXiv preprint arXiv:1610.03518.
Daniel, C.; Neumann, G.; and Peters, J. R. 2012. Hierarchi-
cal relative entropy policy search. In International Confer-
ence on Artiﬁcial Intelligence and Statistics, 273–281.
Dayan, P., and Hinton, G. E. 1993. Feudal reinforcement
learning. In Advances in neural information processing sys-
tems, 271–278.
Dietterich, T. G. 2000. Hierarchical reinforcement learning
with the MAXQ value function decomposition. Journal of
Artiﬁcial Intelligence Research 13:227–303.
Goodfellow, I. J.; Pouget-Abadie, J.; Mirza, M.; Xu, B.;
Warde-Farley, D.; Ozair, S.; Courville, A.; and Bengio, Y.
2014. Generative adversarial nets. In Advances in Neural
Information Processing Systems, 2672–2680.
Hausman, K.; Chebotar, Y.; Schaal, S.; Sukhatme, G.; and
Lim, J. 2017. Multi-modal imitation learning from un-
structured demonstrations using generative adversarial nets.
arXiv preprint arXiv:1705.10479.
Henderson, P.; Chang, W.-D.; Shkurti, F.; Hansen, J.; Meger,
D.; and Dudek, G. 2017. Benchmark environments for
ICML Lifelong
multitask learning in continuous domains.
Learning: A Reinforcement Learning Approach Workshop.
Ho, J., and Ermon, S. 2016. Generative adversarial imita-
tion learning. In Advances in Neural Information Processing
Systems, 4565–4573.
Jacobs, R. A.; Jordan, M. I.; Nowlan, S. J.; and Hinton, G. E.
1991. Adaptive mixtures of local experts. Neural computa-
tion 3(1):79–87.
Kingma, D. P., and Ba, J. 2014. Adam: A Method for
Stochastic Optimization. ArXiv e-prints.
Krishnan, S.; Garg, A.; Liaw, R.; Miller, L.; Pokorny, F. T.;
and Goldberg, K. 2016. Hirl: Hierarchical inverse reinforce-
ment learning for long-horizon tasks with delayed rewards.
arXiv preprint arXiv:1604.06508.
InfoGAIL: In-
Li, Y.; Song, J.; and Ermon, S.
terpretable imitation learning from visual demonstrations.
arXiv preprint arXiv:1703.08840.
Liu, Y., and Yao, X. 2002. Learning and evolution by min-
imization of mutual information. In International Confer-
ence on Parallel Problem Solving from Nature, 495–504.
Springer.

2017.

Merel, J.; Tassa, Y.; Srinivasan, S.; Lemmon, J.; Wang, Z.;
Wayne, G.; and Heess, N. 2017. Learning human behaviors
from motion capture by adversarial imitation. arXiv preprint
arXiv:1707.02201.
Mnih, V.; Badia, A. P.; Mirza, M.; Graves, A.; Lillicrap, T.;
Harley, T.; Silver, D.; and Kavukcuoglu, K. 2016. Asyn-
chronous methods for deep reinforcement learning. In In-
ternational Conference on Machine Learning, 1928–1937.
Ng, A. Y., and Russell, S. J. 2000. Algorithms for inverse re-
inforcement learning. In Proceedings of the Seventeenth In-
ternational Conference on Machine Learning, 663–670. San
Francisco, CA, USA: Morgan Kaufmann Publishers Inc.
Schulman, J.; Levine, S.; Abbeel, P.; Jordan, M.; and Moritz,
P. 2015. Trust region policy optimization. In Proceedings
of the 32nd International Conference on Machine Learning
(ICML-15), 1889–1897.
Schulman, J.; Moritz, P.; Levine, S.; Jordan, M.; and Abbeel,
P. 2016. High-dimensional continuous control using gener-
alized advantage estimation. In Proceedings of the Interna-
tional Conference on Learning Representations (ICLR).
Schulman, J.; Wolski, F.; Dhariwal, P.; Radford, A.; and
Klimov, O. 2017. Proximal policy optimization algorithms.
arXiv preprint arXiv:1707.06347.
Sermanet, P.; Xu, K.; and Levine, S. 2016. Unsupervised
perceptual rewards for imitation learning. arXiv preprint
arXiv:1612.06699.
Shazeer, N.; Mirhoseini, A.; Maziarz, K.; Davis, A.; Le, Q.;
Hinton, G.; and Dean, J. 2017. Outrageously large neu-
ral networks: The sparsely-gated mixture-of-experts layer.
arXiv preprint arXiv:1701.06538.
Sutton, R. S.; McAllester, D. A.; Singh, S. P.; and Mansour,
Y. 2000. Policy gradient methods for reinforcement learning
with function approximation. In Advances in neural infor-
mation processing systems, 1057–1063.
Sutton, R. S.; Precup, D.; and Singh, S. 1999. Between
MDPs and semi-MDPs: A framework for temporal abstrac-
tion in reinforcement learning. Artiﬁcial intelligence 112(1-
2):181–211.
Todorov, E.; Erez, T.; and Tassa, Y. 2012. MuJoCo: A
physics engine for model-based control. In 2012 IEEE/RSJ
International Conference on Intelligent Robots and Systems,
IROS 2012, Vilamoura, Algarve, Portugal, October 7-12,
2012, 5026–5033.
van Seijen, H.; Fatemi, M.; Romoff, J.; Laroche, R.; Barnes,
T.; and Tsang, J. 2017. Hybrid reward architecture for rein-
forcement learning. arXiv preprint arXiv:1706.04208.
Wang, Z.; Merel, J.; Reed, S.; Wayne, G.; de Freitas, N.;
and Heess, N. 2017. Robust imitation of diverse behaviors.
arXiv preprint arXiv:1707.02747.
Ziebart, B. D.; Maas, A.; Bagnell, J. A.; and Dey, A. K.
2008. Maximum entropy inverse reinforcement learning. In
Proceedings of the 23rd National Conference on Artiﬁcial
Intelligence - Volume 3, 1433–1438. AAAI Press.

The expectation over the discriminator loss for the option case can be expanded:

Supplemental Material

Expanded Equations

LΩ = Eω
(cid:88)

=

(cid:104)

πΩ,ζ(ω

πΩ,ζ(ω

(cid:105)

+ Lreg

s)Lˆθ,ω
|
s)Lˆθ,ω + Lreg
|

ω

As can the regularization terms:

Lb =

(cid:88)
ω ||

E[πΩ(ω)]

τ

2
||

−

(cid:88)
ω ||

1
mb

≈

mb(cid:88)

i

(πΩ(ω

si))

τ

2
||

−

Le = E

(cid:34)

(cid:32)

1
Ω
||
(cid:32)

||
||
mb(cid:88)

||

i

(cid:88)

πΩ(ω)

ω

1
Ω

(cid:88)

||

||

ω

1
mb

≈

|

(cid:33)

(cid:35)

τ

−

2
||
(cid:33)

πΩ(ω

si)

|

τ

2
||

−

Lv =

−

≈ −

πΩ(s)
{
}
mb(cid:88)

(cid:32)

(cid:88)

varω

(cid:88)

ω

ω

1
mb

i

πΩ(ω

si)
|

−

(cid:32)

1
mb

mb(cid:88)

i

πΩ(ω

si)

|

(cid:33)(cid:33)

(10)

(11)

(12)

(13)

Expert Collection
The expert demonstration rollouts (state sequences) for all OpenAI Gym (Brockman et al. 2016) environments were obtained
from policies trained for 1000 iterations using Trust Region Policy Optimization (Schulman et al. 2015) with parameters
KLmax = .01, generalized advantage estimation λ = .97, discount factor γ = .99 and batch size 25, 000 (rollout timesteps
shared when updating the discriminator and policy). For the Roboschool (Schulman et al. 2017) Flagrun-v1 environment, the
rollouts were obtained using the PPO pre-trained expert provided with Roboschool.

Experimental Setup and Hyperparameters
Observations are not normalized in all cases as we found that it did not help or hurt performance. In all cases for advantage
estimation we use a value approximator as in (Schulman et al. 2015), which uses L-BFGS optimization with a mixing fraction
of .1. That is, it uses the current prediction Vθ(s) and mixes it with the actual discounted returns with .1 belonging to the actual
discounted returns and .9 belonging to the current prediction. This is identical to the original Trust Region Policy Optimization
(TRPO) code as provided at: https://github.com/joschu/modular_rl/. We perform a maximum of 20 L-BFGS
iterations per value function update. For all the environments, we let the agent act until the maximum allowed timesteps of the
speciﬁc environment (as set by default in OpenAI Gym), gather the rollouts and keep the number of timesteps per batch desired.
For all policy optimization steps in both IRLGAN and OPTIONGAN, we use TRPO with the with parameters set to the same
values as the ones used for the expert collection (KLmax = .01, generalized advantage estimation λ = .97, discount factor
γ = .99 and batch size 25, 000), except for the Roboschool Flagrun Experiment where PPO was used instead, as explained in
its respective section below.

Simple Tasks and Transfer Tasks

For simple tasks we use 10 expert rollouts while for transfer tasks we use 40 expert rollouts (10 from each environment
variation).

Figure 6: Experiments from 40 expert demonstrations from varied gravity environments without any demonstrations on the
novice training environment. Average returns from expert demonstrations across all mixed environments: 3657.71 (Hopper-
v1), 4181.97 (HalfCheetah-v1), 4218.12 (Walker2d-v1).

Figure 7: Simple locomotion task learning curves. The True Average Return provided by the expert demonstrations are: 3778.82
(Hopper-v1), 4156.94 (HalfCheetah-v1), 5528.51 (Walker2d-v1). Error bars indicate standard error of True Average Return
across 10 trial runs.
.

Figure 8: Evaluation on RoboschoolHumanoidFlagrun-v1 environment (Schulman et al. 2017). Average expert rollout returns:
2822.13.

IRLGAN We use a Gaussian Multilayer Perceptron policy as in (Schulman et al. 2015) with two 64 units hidden layers and
tanh hidden layer activations. The output of the network gives the Gaussian mean and the standard deviation is modeled by a
single learned variable as in (Schulman et al. 2015). Similarly for our discriminator network, we use the same architecture with
10−3 for the discriminator. We do not use entropy
a sigmoid output, tanh hidden layer activations, and a learning rate of 1
regularization or l2 regularization as it resulted in worse performance. For every policy update we perform 3 discriminator
updates as we found the policy optimization step is able to handle this and results in faster learning.

·

Ω

OPTIONGAN Aligning with the IRLGAN networks, we make use of a Gaussian Multilayer Perceptron policy as in (Schul-
man et al. 2015) with 2 hidden layers of 64 units with tanh hidden layer activations for our shared hidden layers. These hidden
layers connect to
options depending on the experiment (2 or 4). In this case the output of the network gives the Gaussian
mean for each option and the standard deviation is modeled by a single learned variable per option. The policy-over-options
is also modeled by a 2 layered 64 units network with tanh activations and a softmax output corresponding to the number of
options. For our discriminator, we use the same architecture with tanh hidden layer activations, a sigmoid output and
||
outputs, one for each option. We use the policy over options to create a specialized mixture of experts model with a specialized
10−3 for the discriminator. Same as in IRLGAN, we
loss function which converges to options. We use a learning rate of 1

Ω

||

||

||

·

do not make use of entropy regularization or l2 regularization as we found either regularizers to hurt performance. Instead we
use scaling factors for the regularization terms included in the loss: λb = 10.0, λe = 10.0, λv = 1.0 for the 2 options case and
λb = 0.01, λe = 10.0, λv = 1.0 for the 4 options case. Again, we perform 3 discriminator updates per policy update

RoboschoolHumanoidFlagrun-v1
For Roboschool experiments we use proximal policy optimization (PPO) with a clipping objective (Schulman et al. 2017) (clip-
ping parameter set to (cid:15) = .02). We perform 5 Adam (Kingma and Ba 2014) policy updates on the PPO clipping objective with
10−3. The value function and advantage estimation parameters from previous experiments are maintained
a learning rate of 1
while our network architecture sizes are increased to (128, 128) and use ReLU activations instead of tanh.

·

We show that the trained policy-over-options network shows some intrinsic structure over the expert demonstrations.

Decomposition of Rewards over Expert Demonstrations

Figure 9: Probability distribution of πΩ over options on expert demonstrations. Inherent structure is found in the demonstrations.

Figure 10: State distribution of expert demonstrations projected onto a 2D plane to pair with Figure 5. Axes correspond to
projected state dimensions from the original 6-D state space using SVD.

In Figure 9 are shown the activation of the gating function across expert rollouts after training. We see that the underlying
division in expert demonstrations is learned by the policy-over-options, which indicates that our method for training the policy-
over-options induces it to learn a latent structure to the expert demonstrations and thus can beneﬁt in the transfer case since
each option inherently specializes to be used in different environments. We ﬁnd that options specialized more clearly over the
experts with environments closest to the normal gravity environment, while the others use an even mixture of options. This is
due to the fact that the mixing specialized options are able to cover the state space of the non-specialized options as we can
observe from the state distribution of the expert demonstrations shown in Figure 10.

