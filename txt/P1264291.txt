Composing Distributed Representations of Relational Patterns

Sho Takase

Naoaki Okazaki Kentaro Inui

Graduate School of Information Sciences, Tohoku University
{takase, okazaki, inui}@ecei.tohoku.ac.jp

7
1
0
2
 
l
u
J
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
5
6
2
7
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Learning distributed representations for
relation instances is a central technique
In or-
in downstream NLP applications.
der to address semantic modeling of rela-
tional patterns, this paper constructs a new
dataset that provides multiple similarity
ratings for every pair of relational patterns
on the existing dataset (Zeichner et al.,
2012). In addition, we conduct a compar-
ative study of different encoders includ-
ing additive composition, RNN, LSTM,
and GRU for composing distributed rep-
resentations of relational patterns. We
also present Gated Additive Composition,
which is an enhancement of additive com-
position with the gating mechanism. Ex-
periments show that the new dataset does
not only enable detailed analyses of the
different encoders, but also provides a
gauge to predict successes of distributed
representations of relational patterns in the
relation classiﬁcation task.

1

Introduction

Knowledge about entities and their relations (re-
lation instances) are crucial for a wide spectrum
of NLP applications, e.g., information retrieval,
question answering, and recognizing textual en-
tailment. Learning distributed representations for
relation instances is a central technique in down-
stream applications as a number of recent studies
demonstrated the usefulness of distributed repre-
sentations for words (Mikolov et al., 2013; Pen-
nington et al., 2014) and sentences (Sutskever et
al., 2014; Cho et al., 2014; Kiros et al., 2015).

In particular, semantic modeling of relations
and their textual realizations (relational patterns
hereafter) is extremely important because a rela-

Figure 1: Overview of this study.

tion (e.g., causality) can be mentioned by various
expressions (e.g., “X cause Y”, “X lead to Y”, “Y is
associated with X”). To make matters worse, rela-
tional patterns are highly productive: we can pro-
duce a emphasized causality pattern “X increase
the severe risk of Y” from “X increase the risk of
Y” by inserting severe to the pattern.

To model the meanings of relational patterns,
the previous studies built a co-occurrence matrix
between relational patterns (e.g., “X increase the
risk of Y”) and entity pairs (e.g., “X: smoking,
Y: cancer”) (Lin and Pantel, 2001; Nakashole et
al., 2012). Based on the distributional hypothe-
sis (Harris, 1954), we can compute a semantic vec-
tor of a relational pattern from the co-occurrence
matrix, and measure the similarity of two rela-
tional patterns as the cosine similarity of the vec-
tors. Nowadays, several studies adopt distributed
representations computed by neural networks for
semantic modeling of relational patterns (Yih et
al., 2014; Takase et al., 2016).

Notwithstanding, the previous studies paid lit-
tle attention to explicitly evaluate semantic mod-
eling of relational patterns. In this paper, we con-
struct a new dataset that contains a pair of rela-
tional patterns with ﬁve similarity ratings judged
by human annotators. The new dataset shows a

high inter-annotator agreement, following the an-
notation guideline of Mitchell and Lapata (2010).
The dataset is publicly available on the Web site1.
In addition, we conduct a comparative study
of different encoders for composing distributed
representations of relational patterns. During the
comparative study, we present Gated Additive
Composition, which is an enhancement of addi-
tive composition with the gating mechanism. We
utilize the Skip-gram objective for training the pa-
rameters of the encoders on a large unlabeled cor-
pus. Experiments show that the new dataset does
not only enable detailed analyses of the different
encoders, but also provides a gauge to predict suc-
cesses of distributed representations of relational
patterns in another task (relation classiﬁcation).
Figure 1 illustrates the overview of this study.

2 Data Construction

2.1 Target relation instances

We build a new dataset upon the work of Ze-
ichner et al. (2012), which consists of relational
patterns with semantic inference labels annotated.
The dataset includes 5,555 pairs2 extracted by Re-
verb (Fader et al., 2011), 2,447 pairs with infer-
ence relation and 3,108 pairs (the rest) without
one.

Initially, we considered using this high-quality
dataset as it is for semantic modeling of relational
patterns. However, we found that inference rela-
tions exhibit quite different properties from those
of semantic similarity. Take a relational pattern
pair “X be the part of Y” and “X be an essential
part of Y” ﬁlled with “X = the small intestine, Y =
the digestive system” as an instance. The pattern
“X be the part of Y” does not entail “X be an essen-
tial part of Y” because the meaning of the former
does not include ‘essential’. Nevertheless, both
statements are similar, representing the same rela-
tion (PART-OF). Another uncomfortable pair is “X
fall down Y” and “X go up Y” ﬁlled with “X = the
dude, Y = the stairs”. The dataset indicates that the
former entails the latter probably because falling
down from the stairs requires going up there, but
they present the opposite meaning. For this rea-
son, we decided to re-annotate semantic similarity

1http://github.com/takase/relPatSim
2More precisely, the dataset includes 1,012 meaningless
pairs in addition to 5,555 pairs. A pair of relational patterns
was annotated as meaningless if the annotators were unable
to understand the meaning of the patterns easily. We ignore
the meaningless pairs in this study.

judgments on every pair of relational patterns on
the dataset.

2.2 Annotation guideline

We use instance-based judgment in a similar man-
ner to that of Zeichner et al. (2012) to secure
a high inter-annotator agreement.
In instance-
based judgment, an annotator judges a pair of
relational patterns whose variable slots are ﬁlled
with the same entity pair.
In other words, he
or she does not make a judgment for a pair of
relational patterns with variables, “X prevent Y”
and “X reduce the risk of Y”, but two instantiated
statements “Cephalexin prevent the bacteria” and
“Cephalexin reduce the risk of the bacteria” (“X =
Cephalexin, Y = the bacteria”). We use the entity
pairs provided in Zeichner et al. (2012).

We asked annotators to make a judgment for a
pair of relation instances by choosing a rating from
1 (dissimilar) to 7 (very similar). We provided
the following instructions for judgment, which is
compatible with Mitchell and Lapata (2010): (1)
rate 6 or 7 if the meanings of two statements are
the same or mostly the same (e.g., “Palmer team
with Jack Nicklaus” and “Palmer join with Jack
Nicklaus”); (2) rate 1 or 2 if two statements are
dissimilar or unrelated (e.g., “the kids grow up
with him” and “the kids forget about him”); (3)
rate 3, 4, or 5 if two statements have some rela-
tionships (e.g., “Many of you know about the site”
and “Many of you get more information about the
site”, where the two statements differ but also rea-
sonably resemble to some extent).

2.3 Annotation procedure
We use a crowdsourcing service CrowdFlower3
to collect similarity judgments from the crowds.
CrowdFlower has the mechanism to assess the re-
liability of annotators using Gold Standard Data
(Gold, hereafter), which consists of pairs of re-
lational patterns with similarity scores assigned.
Gold examples are regularly inserted throughout
the judgment job to enable measurement of the
performance of each worker4. Two authors of
this paper annotated 100 pairs extracted randomly
from 5,555 pairs, and prepared 80 Gold examples
showing high agreement. Ratings of the Gold ex-
amples were used merely for quality assessment
of the workers. In other words, we discarded the

3http://www.crowdflower.com/
4We allow ±1 differences in rating when we measure the

performance of the workers.

as a preprocessing step, mining phrasal expres-
sions with strong collocations from a training cor-
pus. However, this approach might be affected by
data sparseness, which lowers the quality of dis-
tributed representations.

Another simple but effective approach is ad-
ditive composition (Mitchell and Lapata, 2010),
where the distributed representation of a relational
pattern is computed by the mean of embeddings of
constituent words. Presuming that a relational pat-
tern consists of a sequence of T words w1, ..., wT ,
then we let xt ∈ Rd the embedding of the word
wt. This approach computes 1
t=1 xt as the em-
T
bedding of the relational pattern. Muraoka et al.
(2014) reported that the additive composition is a
strong baseline among various methods.

(cid:80)T

3.2 Recurrent Neural Network

Recently, a number of studies model seman-
tic compositions of phrases and sentences by
using (a variant of) Recurrent Neural Network
(RNN) (Sutskever et al., 2014; Tang et al., 2015).
For a given embedding xt at position t, the vanilla
RNN (Elman, 1990) computes the hidden state
ht ∈ Rd by the following recursive equation5,

ht = g(Wxxt + Whht−1).

(1)

Here, Wx and Wh are d × d matrices (parameters),
g(.) is the elementwise activation function (tanh).
We set h0 = 0 at t = 1. In essence, RNN com-
putes the hidden state ht based on the one at the
previous position (ht−1) and the word embedding
xt. Applying Equation 1 from t = 1 to T , we
use hT as the distributed representation of the re-
lational pattern.

3.3 RNN variants

We also employ Long Short-Term Memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
Gated Recurrent Unit (GRU) (Cho et al., 2014) as
an encoder for relational patterns. LSTM has been
applied successfully to various NLP tasks includ-
ing word segmentation (Chen et al., 2015), depen-
dency parsing (Dyer et al., 2015), machine trans-
lation (Sutskever et al., 2014), and sentiment anal-
ysis (Tai et al., 2015). GRU is also successful in
machine translation (Cho et al., 2014) and various

5We do not use a bias term in this study. We set the num-
ber of dimensions of hidden states identical to that of word
embeddings (d) so that we can adapt the objective function
of the Skip-gram model for training (Section 3.5).

Figure 2: Number of judgments for each similarity
rating. The total number of judgments is 27, 775
(5, 555 pairs × 5 workers).

similarity ratings of the Gold examples, and used
those judged by the workers.

To build a high quality dataset, we use judg-
ments from workers whose conﬁdence values (re-
liability scores) computed by CrowdFlower are
greater than 75%. Additionally, we force every
pair to have at least ﬁve judgments from the work-
ers. Consequently, 60 workers participated in this
job. In the ﬁnal version of this dataset, each pair
has ﬁve similarity ratings judged by the ﬁve most
reliable workers who were involved in the pair.

Figure 2 presents the number of judgments for
each similarity rating. Workers seldom rated 7
for a pair of relational patterns, probably because
most pairs have at least one difference in content
words. The mean of the standard deviations of
similarity ratings of all pairs is 1.16. Moreover, we
computed Spearman’s ρ between similarity judg-
ments from each worker and the mean of ﬁve judg-
ments in the dataset. The mean of Spearman’s ρ
of workers involved in the dataset is 0.728. These
statistics show a high inter-annotator agreement of
the dataset.

3 Encoder for Relational Patterns

The new dataset built in the previous section raises
two new questions — What is the reasonable
method (encoder) for computing the distributed
representations of relational patterns?
Is this
dataset useful to predict successes of distributed
representations of relational patterns in real ap-
plications? In order to answer these questions, this
section explores various methods for learning dis-
tributed representations of relational patterns.

3.1 Baseline methods without supervision

A na¨ıve approach would be to regard a rela-
tional pattern as a single unit (word) and to
train word/pattern embeddings as usual. In fact,
Mikolov et al. (2013) implemented this approach

forget gates in LSTM, we compute the input gate
it ∈ Rd and forget gate ft ∈ Rd at position t. We
use them to control the amount to propagate to the
hidden state ht from the current word xt and the
previous state ht−1.

it = σ(Wixxt + Wihht−1)
ft = σ(Wf xxt + Wf hht−1)
ht = g(ft (cid:12) ht−1 + it (cid:12) xt)

(2)

(3)

(4)

Here, Wix, Wih, Wf x, Wf h are d × d matri-
ces. Equation 4 is interpreted as a weighted ad-
ditive composition between the vector of the cur-
rent word xt and the vector of the previous hid-
den state ht−1. The elementwise weights are con-
trolled by the input gate it and forget gate ft; we
expect that input gates are closed (close to zero)
and forget gates are opened (close to one) when
the current word is a control verb or function word.
We name this architecture gated additive compo-
sition (GAC).

3.5 Parameter estimation: Skip-gram model

To train the parameters of the encoders (RNN,
LSTM, GRU, and GAC) on an unlabeled text cor-
pus, we adapt the Skip-gram model (Mikolov et
al., 2013). Formally, we designate an occurrence
of a relational pattern p as a subsequence of L
words ws, ..., ws+L−1 in a corpus. We deﬁne
δ words appearing before and after pattern p as
the context words, and let Cp = (s − δ, ..., s −
1, s + L, ..., s + L + δ) denote the indices of
the context words. We deﬁne the log-likelihood
of the relational pattern lp, following the objec-
tive function of Skip-gram with negative sampling
(SGNS) (Levy and Goldberg, 2014).

(cid:32)

lp =

(cid:88)

τ ∈Cp

log σ(h(cid:62)

p ˜xτ ) +

log σ(−h(cid:62)

p ˜x˘τ )

K
(cid:88)

k=1

(cid:33)

(5)

In this formula: K denotes the number of nega-
tive samples; hp ∈ Rd is the vector for the rela-
tional pattern p computed by each encoder such as
RNN; ˜xτ ∈ Rd is the context vector for the word
7; x˘τ (cid:48) ∈ Rd is the context vector for the word
wτ
7The Skip-gram model has two kinds of vectors xt and
˜xt assigned for a word wt. Equation 2 of the original pa-
per (Mikolov et al., 2013) denotes xt (word vector) as v
(input vector) and ˜xt (context vector) as v(cid:48) (output vector).
The word2vec implementation does not write context (out-
put) vectors but only word (input) vectors to a model ﬁle.
Therefore, we modiﬁed the source code to save context vec-
tors, and use them in Equation 5. This modiﬁcation ensures
the consistency of the entire model.

Figure 3: Overview of GAC trained with Skip-
gram model. GAC computes the distributed rep-
resentation of a relational pattern using the input
gate and forget gate, and learns parameters by pre-
dicting surrounding words (Skip-gram model).

tasks including sentence similarity, paraphrase de-
tection, and sentiment analysis (Kiros et al., 2015).
LSTM and GRU are similar in that the both ar-
chitectures have gates (input, forget, and output
for LSTM; reset and update for GRU) to rem-
edy the gradient vanishing or explosion problem
in training RNNs. Although some researchers re-
ported that GRU is superior to LSTM (Chung et
al., 2014), we have no consensus about the supe-
riority. Besides, we are not sure whether LSTM
or GRU is really necessary for relational patterns,
which ususlly consist of a few words. Thus, we
compare RNN, LSTM, and GRU empirically with
the same training data and the same training pro-
cedure. Similarly to RNN, we use the hidden state
hT of LSTM6 or GRU as the distributed represen-
tation of a relation pattern.

3.4 Gated Additive Composition (GAC)

In addition to the gradient problem, LSTM or
GRU may be suitable for relational patterns, hav-
ing the mechanism of adaptive control of gates for
input words and hidden states. Consider the rela-
tional pattern “X have access to Y”, whose mean-
ing is mostly identical to that of “X access Y”.
Because ‘have’ in the pattern is a light verb, it
may be harmful to incorporate the semantic vector
of ‘have’ into the distributed representation of the
pattern. The same may be true for the functional
word ‘to’ in the pattern. However, the additive
composition nor RNN does not have a mechanism
to ignore the semantic vectors of these words. It
is interesting to explore a method somewhere be-
tween additive composition and LSTM/GRU: ad-
ditive composition with the gating mechanism.

For this reason, we present an another variant
of RNN in this study. Inspired by the input and

6We omitted peephole connections and bias terms.

that were sampled from the unigram distribution8
at every iteration of (cid:80)
k.

At every occurrence of a relational pattern in
the corpus, we use Stochastic Gradient Descent
(SGD) and backpropagation through time (BPTT)
for training the parameters (matrices) in encoders.
More speciﬁcally, we initialize the word vectors xt
and context vectors ˜xt with pre-trained values, and
compute gradients for Equation 5 to update the pa-
rameters in encoders. In this way, each encoder
is trained to compose a vector of a relational pat-
tern so that it can predict the surrounding context
words. An advantage of this parameter estimation
is that the distributed representations of words and
relational patterns stay in the same vector space.
Figure 3 visualizes the training process for GAC.

4 Experiments

In Section 4.1, we investigate the performance of
the distributed representations computed by differ-
ent encoders on the pattern similarity task. Section
4.2 examines the contribution of the distributed
representations on SemEval 2010 Task 8, and dis-
cusses the usefulness of the new dataset to predict
successes of the relation classiﬁcation task.

4.1 Relational pattern similarity

For every pair in the dataset built in Section 2, we
compose the vectors of the two relational patterns
using an encoder described in Section 3, and com-
pute the cosine similarity of the two vectors. Re-
peating this process for all pairs in the dataset, we
measure Spearman’s ρ between the similarity val-
ues computed by the encoder and similarity ratings
assigned by humans.

4.1.1 Training procedure
We used ukWaC9 as the training corpus for the
encoders. This corpus includes the text of 2 bil-
lion words from Web pages crawled in the .uk
domain. Part-of-speech tags and lemmas are an-
notated by TreeTagger10. We used lowercased
lemmas throughout the experiments. We apply
word2vec to this corpus to pre-train word vec-
tors xt and context vectors ˜xt. All encoders use
word vectors xt to compose vectors of relational
patterns; and the Skip-gram model uses context

8We use the probability distribution of words raised to the

3/4 power (Mikolov et al., 2013).

9http://wacky.sslmit.unibo.it
10http://www.cis.uni-muenchen.de/

˜schmid/tools/TreeTagger/

Figure 4: Performance of each method on the rela-
tional pattern similarity task with variation in the
number of dimensions.

vectors ˜xt to compute the objective function and
gradients. We ﬁx the vectors xt and ˜xt with pre-
trained values during training.

We used Reverb (Fader et al., 2011) to the
ukWaC corpus to extract relational pattern can-
didates. To remove unuseful relational patterns,
we applied ﬁltering rules that are compatible with
those used in the publicly available extraction re-
sult11. Additionally, we discarded relational pat-
terns appearing in the evaluation dataset through-
out the experiments to assess the performance un-
der which an encoder composes vectors of unseen
relational patterns. This preprocessing yielded
127, 677 relational patterns.

All encoders were implemented on Chainer12, a
ﬂexible framework of neural networks. The hyper-
parameters of the Skip-gram model are identical
to those in Mikolov et al. (2013):
the width of
context window δ = 5, the number of negative
samples K = 5, the subsampling of 10−5. For
each encoder that requires training, we tried 0.025,
0.0025, and 0.00025 as an initial learning rate, and
selected the best value for the encoder. In contrast
to the presentation of Section 3, we compose a pat-
tern vector in backward order (from the last to the
ﬁrst) because preliminary experiments showed a
slight improvement with this treatment.

4.1.2 Results and discussions
Figure 4 shows Spearman’s rank correlations of
different encoders when the number of dimensions
of vectors is 100–500. The ﬁgure shows that GAC
achieves the best performance on all dimensions.
Figure 4 includes the performance of the na¨ıve
approach, “NoComp”, which regards a relational
pattern as a single unit (word). In this approach,

11http://reverb.cs.washington.edu/
12http://chainer.org/

Length
1
2
3
4
> 5
All

#
636
1,018
2,272
1,206
423
5,555

NoComp Add
0.324
0.319
0.386
0.306
0.315
0.340

0.324
0.215
0.234
0.208
0.278
0.215

LSTM GRU RNN GAC
0.324
0.324
0.321
0.257
0.404
0.344
0.323
0.314
0.357
0.369
0.370
0.336

0.324
0.274
0.370
0.329
0.384
0.356

0.324
0.285
0.387
0.319
0.394
0.362

Table 1: Spearman’s rank correlations on different pattern lengths (number of dimensions d = 500).

we allocated a vector hp for each relational pat-
tern p in Equation 5 instead of the vector compo-
sition, and trained the vectors of relational patterns
using the Skip-gram model. The performance was
poor for two reasons: we were unable to compute
similarity values for 1,744 pairs because relational
patterns in these pairs do not appear in ukWaC;
and relational patterns could not obtain sufﬁcient
statistics because of data sparseness.

Table 1 reports Spearman’s rank correlations
computed for each pattern length. Here, the length
of a relational-pattern pair is deﬁned by the maxi-
mum of the lengths of two patterns in the pair. In
length of 1, all methods achieve the same corre-
lation score because they use the same word vec-
tor xt. The table shows that additive composition
(Add) performs well for shorter relational patterns
(lengths of 2 and 3) but poorly for longer ones
(lengths of 4 and 5+). GAC also exhibits the sim-
ilar tendency to Add, but it outperforms Add for
shorter patterns (lengths of 2 and 3) probably be-
cause of the adaptive control of input and forget
gates.
In contrast, RNN and its variants (RNN,
GRU, and LSTM) enjoy the advantage on longer
patterns (lengths of 4 and 5+).

To examine the roles of input and forget gates of
GAC, we visualize the moments when input/forget
gates are wide open or closed. More precisely, we
extract the input word and scanned words when
|it|2 or |ft|2 is small (close to zero) or large (close
to one) on the relational-pattern dataset. We re-
state that we compose a pattern vector in backward
order (from the last to the ﬁrst): GAC scans ‘of’,
‘author’, and ‘be’ in this order for composing the
vector of the relational pattern ‘be author of’.

Table 2 displays the top three examples iden-
tiﬁed using the procedure. The table shows two
groups of tendencies. Input gates open and forget
gates close when scanned words are only a prepo-
sition and the current word is a content word. In
these situations, GAC tries to read the semantic

large it
(input
open)
small it
(input
close)
large ft
(forget
open)
small ft
(forget
close)

wt
reimburse
payable
liable
a
a
be
be
be
be
coauthor
capital
center

wt+1 wt+2 ...

for
in
to
charter member of
valuable member of
an avid reader of
eligible to participate in
require to submit
request to submit
of
of
of

Table 2: Prominent moments for input/forget
gates.

vector of the content word and to ignore the se-
mantic vector of the preposition. In contrast, input
gates close and forget gates open when the current
word is ‘be’ or ‘a’ and scanned words form a noun
phrase (e.g., “charter member of”), a complement
(e.g., “eligible to participate in”), or a passive
voice (e.g., “require(d) to submit”). This behavior
is also reasonable because GAC emphasizes infor-
mative words more than functional words.

4.2 Relation classiﬁcation

4.2.1 Experimental settings

To examine the usefulness of the dataset and dis-
tributed representations for a different application,
we address the task of relation classiﬁcation on
the SemEval 2010 Task 8 dataset (Hendrickx et
al., 2010).
In other words, we explore whether
high-quality distributed representations of rela-
tional patterns are effective to identify a relation
type of an entity pair.

The dataset consists of 10, 717 relation in-
stances (8, 000 training and 2, 717 test instances)
with their relation types annotated. The dataset
deﬁnes 9 directed relations (e.g.,CAUSE-EFFECT)

Method

Feature set

SVM
SVM + NoComp
SVM + LSTM
SVM + Add
SVM + GRU
SVM + RNN
SVM + GAC

Ranking loss + GAC w/ ﬁne-tuning

SVM (Rink and Harabagiu, 2010)
MV-RNN (Socher et al., 2012)

FCM (Gormley et al., 2015) w/o ﬁne-tuning

w/ ﬁne-tuning

RelEmb (Hashimoto et al., 2015)

CR-CNN (dos Santos et al., 2015) w/ Other
w/o Other
depLCNN (Xu et al., 2015)

depLCNN + NS

BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
+ dependency, WordNet, NE
embeddings, BoW, POS
+ dependency, WordNet, NE
BoW, POS, dependency, Google n-gram, etc.
embeddings, parse trees
+ WordNet, POS, NE
embeddings, dependency
+ WordNet
embeddings, dependency
+ NE
embeddings
+ dependency, WordNet, NE
embeddings, word position embeddings
embeddings, word position embeddings
embeddings, dependency
+ WordNet
embeddings, dependency
+ WordNet

F1
77.3
79.9
81.1
81.1
81.4
81.7
82.0
83.7

84.2
82.2
79.1
82.4
79.4
82.0
82.2
83.4
82.8
83.5
82.7
84.1
81.9
83.7
84.0
85.6

Table 3: F1 scores on the SemEval 2010 dataset.

and 1 undirected relation OTHER. Given a pair
of entity mentions, the task is to identify a rela-
tion type in 19 candidate labels (2 × 9 directed +
1 undirected relations). For example, given the
pair of entity mentions e1 = ‘burst’ and e2 =
‘pressure’ in the sentence “The burst has been
caused by water hammer pressure”, a system is
expected to predict CAUSE-EFFECT(e2, e1).

We used Support Vector Machines (SVM) with
a Radial Basis Function (RBF) kernel
imple-
mented in libsvm13. Basic features are: part-
of-speech tags (predicted by TreeTagger), surface
forms, lemmas of words appearing between an en-
tity pair, and lemmas of the words in the entity
pair. Additionally, we incorporate distributed rep-
resentations of a relational pattern, entities, and a
word before and after the entity pair (number of
dimensions d = 500).
In this task, we regard
words appearing between an entity pair as a re-
lational pattern. We compare the vector represen-

13https://www.csie.ntu.edu.tw/˜cjlin/

libsvm/

tations of relational patterns computed by the ﬁve
encoders presented in Section 4.1: additive com-
position, RNN, GRU, LSTM, and GAC. Hyper-
parameters related to SVM were tuned by 5-fold
cross validation on the training data.

4.2.2 Results and discussions

Table 3 presents the macro-averaged F1 scores on
the SemEval 2010 Task 8 dataset. The ﬁrst group
of the table provides basic features and enhance-
ments with the distributed representations. We
can observe a signiﬁcant improvement even from
the distributed representation of NoComp (77.3
to 79.9). Moreover, the distributed representation
that exhibited the high performance on the pattern
similarity task was also successful on this task;
GAC, which yielded the highest performance on
the pattern similarity task, also achieved the best
performance (82.0) of all encoders on this task.

It is noteworthy that the improvements brought
by the different encoders on this task roughly cor-
respond to the performance on the pattern similar-

ity task. This fact implies two potential impacts.
First, the distributed representations of relational
patterns are useful and easily transferable to other
tasks such as knowledge base population. Second,
the pattern similarity dataset provides a gauge to
predict successes of distributed representations in
another task.

We could further improve the performance of
SVM + GAC by incorporating external resources
in the similar manner as the previous studies
did. Concretely, SVM + GAC achieved 83.7 F1
score by adding features for WordNet, named en-
tities (NE), and dependency paths explained in
Hashimoto et al. (2015). Moreover, we could ob-
tain 84.2 F1 score, using the ranking based loss
function (dos Santos et al., 2015) and ﬁne-tuning
of the distributed representations initially trained
by GAC. Currently, this is the second best score
among the performance values reported in the pre-
vious studies on this task (the second group of Ta-
ble 3). If we could use the negative sampling tech-
nique proposed by Xu et al. (2015), we might im-
prove the performance further14.

5 Related Work

Mitchell and Lapata (2010) was a pioneering work
in semantic modeling of short phrases. They con-
structed the dataset that contains two-word phrase
pairs with semantic similarity judged by human
annotators. Korkontzelos et al. (2013) provided a
semantic similarity dataset with pairs of two words
and a single word. Wieting et al. (2015) annotated
a part of PPDB (Ganitkevitch et al., 2013) to eval-
uate semantic modeling of paraphrases. Although
the target unit of semantic modeling is different
from that for these previous studies, we follow the
annotation guideline and instruction of Mitchell
and Lapata (2010) to build the new dataset.

The task addressed in this paper is also re-
lated to the Semantic Textual Similarity (STS)
task (Agirre et al., 2012). STS is the task to mea-
sure the degree of semantic similarity between two
sentences. Even though a relational pattern ap-
pears as a part of a sentence, it may be difﬁcult
to transfer ﬁndings from one to another: for exam-
ple, the encoders of RNN and its variants explored
in this study may exhibit different characteristics,

14In fact, we made substantial efforts to introduce the nega-
tive sampling technique. However, Xu et al. (2015) omits the
detail of the technique probably because of the severe page
limit of short papers. For this reason, we could not reproduce
their method in this study.

inﬂuenced by the length and complexity of input
text expressions.

In addition to data construction, this paper ad-
dresses semantic modeling of relational patterns.
Nakashole et al. (2012) approached the similar
task by constructing a taxonomy of relational pat-
terns. They represented a vector of a relational pat-
tern as the distribution of entity pairs co-occurring
with the relational pattern. Grycner et al. (2015)
extended Nakashole et al. (2012) to generalize di-
mensions of the vector space (entity pairs) by in-
corporating hyponymy relation between entities.
They also used external resources to recognize the
transitivity of pattern pairs and applied transitivi-
ties to ﬁnd patterns in entailment relation. These
studies did not consider semantic composition of
relational patterns. Thus, they might suffer from
the data sparseness problem, as shown by No-
Comp in Figure 4.

Numerous studies have been aimed at encod-
ing distributed representations of phrases and sen-
tences from word embeddings by using: Recur-
sive Neural Network (Socher et al., 2011), Matrix
Vector Recursive Neural Network (Socher et al.,
2012), Recursive Neural Network with different
weight matrices corresponding to syntactic cate-
gories (Socher et al., 2013) or word types (Takase
et al., 2016), RNN (Sutskever et al., 2011),
LSTM (Sutskever et al., 2014), GRU (Cho et al.,
2014), PAS-CLBLM (Hashimoto et al., 2014), etc.
As described in Section 3, we applied RNN, GRU,
and LSTM to compute distributed representations
of relational patterns because recent papers have
demonstrated their superiority in semantic compo-
sition (Sutskever et al., 2014; Tang et al., 2015).
In this paper, we presented a comparative study of
different encoders for semantic modeling of rela-
tional patterns.

To investigate usefulness of the distributed rep-
resentations and the new dataset, we adopted the
relation classiﬁcation task (SemEval 2010 Task 8)
as a real application. On the SemEval 2010 Task
8, several studies considered semantic composi-
tion. Gormley et al. (2015) proposed Feature-rich
Compositional Embedding Model (FCM) that can
combine binary features (e.g., positional indica-
tors) with word embeddings via outer products.
dos Santos et al. (2015) addressed the task using
Convolutional Neural Network (CNN). Xu et al.
(2015) achieved a higher performance than dos
Santos et al. (2015) by application of CNN on de-

pendency paths.

In addition to the relation classiﬁcation task,
we brieﬂy describe other applications. To popu-
late a knowledge base, Riedel et al. (2013) jointly
learned latent feature vectors of entities, relational
patterns, and relation types in the knowledge base.
Toutanova et al. (2015) adapted CNN to capture
the compositional structure of a relational pattern
during the joint learning. For open domain ques-
tion answering, Yih et al. (2014) proposed the
method to map an interrogative sentence on an en-
tity and a relation type contained in a knowledge
base by using CNN.

Although these reports described good perfor-
mance on the respective tasks, we are unsure of the
generality of distributed representations trained
for a speciﬁc task such as the relation classiﬁca-
tion. In contrast, this paper demonstrated the con-
tribution of distributed representations trained in a
generic manner (with the Skip-gram objective) to
the task of relation classiﬁcation.

6 Conclusion

In this paper, we addressed the semantic model-
ing of relational patterns. We introduced the new
dataset in which humans rated multiple similar-
ity scores for every pair of relational patterns on
the dataset of semantic inference (Zeichner et al.,
2012). Additionally, we explored different en-
coders for composing distributed representations
of relational patterns. The experimental results
shows that Gated Additive Composition (GAC),
which is a combination of additive composition
and the gating mechanism, is effective to compose
distributed representations of relational patterns.
Furthermore, we demonstrated that the presented
dataset is useful to predict successes of the dis-
tributed representations in the relation classiﬁca-
tion task.

We expect that several further studies will use
the new dataset not only for distributed represen-
tations of relational patterns but also for other NLP
tasks (e.g., paraphrasing). Analyzing the internal
mechanism of LSTM, GRU, and GAC, we plan to
explore an alternative architecture of neural net-
works that is optimal for relational patterns.

Acknowledgments

26.5820, JSPS KAKENHI Grant number

no.
15H05318, and JST, CREST.

References

[Agirre et al.2012] Eneko Agirre, Daniel Cer, Mona
Diab, and Aitor Gonzalez-Agirre. 2012. Semeval-
2012 task 6: A pilot on semantic textual similarity.
In The First Joint Conference on Lexical and Com-
putational Semantics (*SEM 2012), pages 385–393.

[Chen et al.2015] Xinchi Chen, Xipeng Qiu, Chenxi
Zhu, Pengfei Liu, and Xuanjing Huang.
2015.
Long short-term memory neural networks for chi-
In Proceedings of the
nese word segmentation.
2015 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2015), pages 1197–
1206.

[Cho et al.2014] Kyunghyun Cho, Bart van Merrien-
boer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi
Bougares, Holger Schwenk, and Yoshua Bengio.
2014. Learning phrase representations using rnn
encoder–decoder for statistical machine translation.
In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2014), pages 1724–1734.

[Chung et al.2014] Junyoung Chung, C¸ aglar G¨ulc¸ehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural networks
on sequence modeling.

[dos Santos et al.2015] Cicero dos Santos, Bing Xiang,
and Bowen Zhou. 2015. Classifying relations by
ranking with convolutional neural networks. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (ACL-IJCNLP 2015), pages 626–634.

[Dyer et al.2015] Chris Dyer, Miguel Ballesteros,
Wang Ling, Austin Matthews, and Noah A. Smith.
2015. Transition-based dependency parsing with
In Proceedings of
stack long short-term memory.
the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International
Joint Conference on Natural Language Processing
(ACL-IJCNLP 2015), pages 334–343.

[Elman1990] Jeffrey L Elman. 1990. Finding structure

in time. Cognitive science, 14(2):179–211.

[Fader et al.2011] Anthony Fader, Stephen Soderland,
and Oren Etzioni. 2011.
Identifying relations for
open information extraction. In Proceedings of the
2011 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2011), pages 1535–
1545.

We thank the reviewers and Jun Suzuki for valu-
able comments. This work was partially sup-
ported by Grant-in-Aid for JSPS Fellows Grant

[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin
Van Durme, and Chris Callison-Burch. 2013. Ppdb:
In Proceedings of the
The paraphrase database.
2013 Conference of the North American Chapter of

the Association for Computational Linguistics: Hu-
man Language Technologies (NAACL-HLT 2013),
pages 758–764.

matrix factorization. In Advances in Neural Infor-
mation Processing Systems 27 (NIPS 2014), pages
2177–2185.

[Gormley et al.2015] Matthew R. Gormley, Mo Yu, and
Mark Dredze. 2015. Improved relation extraction
with feature-rich compositional embedding models.
In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1774–1784.

[Grycner et al.2015] Adam Grycner, Gerhard Weikum,
Jay Pujara, James Foulds, and Lise Getoor. 2015.
Relly: Inferring hypernym relationships between re-
In Proceedings of the 2015 Con-
lational phrases.
ference on Empirical Methods in Natural Language
Processing (EMNLP 2015), pages 971–981.

[Harris1954] Zellig Harris. 1954. Distributional struc-

ture. Word, 10(23):146–162.

[Lin and Pantel2001] Dekang Lin and Patrick Pantel.
2001. Dirt – discovery of inference rules from text.
In Proceedings of the Seventh ACM SIGKDD Inter-
national Conference on Knowledge Discovery and
Data Mining (KDD 01), pages 323–328.

[Mikolov et al.2013] Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases
In Advances in Neu-
and their compositionality.
ral Information Processing Systems 26 (NIPS 2013),
pages 3111–3119.

[Mitchell and Lapata2010] Jeff Mitchell and Mirella
Lapata. 2010. Composition in distributional models
of semantics. Cognitive Science, 34(8):1388–1439.

[Hashimoto et al.2014] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsu-
ruoka. 2014. Jointly learning word representations
and composition functions using predicate-argument
structures. In Proceedings of the 2014 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2014), pages 1544–1555.

[Muraoka et al.2014] Masayasu Muraoka, Sonse Shi-
maoka, Kazeto Yamamoto, Yotaro Watanabe,
Naoaki Okazaki, and Kentaro Inui. 2014. Finding
the best model among representative compositional
In Proceedings of the 28th Paciﬁc Asia
models.
Conference on Language, Information, and Compu-
tation (PACLIC 28), pages 65–74.

[Hashimoto et al.2015] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsuruoka.
2015. Task-oriented learning of word embeddings
for semantic relation classiﬁcation. In Proceedings
of the 19th Conference on Computational Natural
Language Learning (CoNLL 2015), pages 268–278.

[Hendrickx et al.2010] Iris Hendrickx, Su Nam Kim,
Zornitsa Kozareva, Preslav Nakov, Diarmuid
´O S´eaghdha, Sebastian Pad´o, Marco Pennacchiotti,
Lorenza Romano, and Stan Szpakowicz.
2010.
Semeval-2010 task 8: Multi-way classiﬁcation of se-
mantic relations between pairs of nominals. In Pro-
ceedings of the 5th International Workshop on Se-
mantic Evaluation, pages 33–38.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and J¨urgen Schmidhuber. 1997. Long short-term
memory. Neural Computation, 9(8):1735–1780.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S. Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. In Advances in Neural Information
Processing Systems 28 (NIPS 2015), pages 3276–
3284.

[Korkontzelos et al.2013] Ioannis

Korkontzelos,
Torsten Zesch, Fabio Massimo Zanzotto, and Chris
Biemann. 2013. Semeval-2013 task 5: Evaluating
In Second Joint Conference
phrasal semantics.
on Lexical and Computational Semantics (*SEM
2013), pages 39–47.

[Levy and Goldberg2014] Omer Levy and Yoav Gold-
berg. 2014. Neural word embedding as implicit

[Nakashole et al.2012] Ndapandula Nakashole, Ger-
hard Weikum, and Fabian Suchanek. 2012. Patty: A
taxonomy of relational patterns with semantic types.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL 2012), pages 1135–1145.

[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher Manning. 2014. Glove:
Global vectors for word representation. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP 2014),
pages 1532–1543.

[Riedel et al.2013] Sebastian Riedel, Limin Yao, An-
drew McCallum, and Benjamin M. Marlin. 2013.
Relation extraction with matrix factorization and
universal schemas. In Proceedings of the 2013 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL-HLT 2013), pages 74–
84.

[Rink and Harabagiu2010] Bryan Rink and Sanda
Harabagiu. 2010. Utd: Classifying semantic rela-
tions by combining lexical and semantic resources.
In Proceedings of the 5th International Workshop
on Semantic Evaluation, pages 256–259.

[Socher et al.2011] Richard Socher, Cliff Chiung-Yu
Lin, Andrew Y. Ng, and Christopher D. Manning.
2011. Parsing natural scenes and natural language
In Proceedings
with recursive neural networks.
of the 28th International Conference on Machine
learning (ICML 2011), pages 129–136.

[Xu et al.2015] Kun Xu, Yansong Feng, Songfang
Huang, and Dongyan Zhao. 2015. Semantic rela-
tion classiﬁcation via convolutional neural networks
In Proceedings of
with simple negative sampling.
the 2015 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP 2015), pages
536–540.

[Yih et al.2014] Wen-tau Yih, Xiaodong He,

and
Christopher Meek.
2014. Semantic parsing for
single-relation question answering. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL 2014), pages 643–
648.

[Zeichner et al.2012] Naomi Zeichner, Jonathan Be-
Crowdsourcing
rant, and Ido Dagan.
In Proceedings of the
inference-rule evaluation.
50th Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2012), pages 156–160.

2012.

[Socher et al.2012] Richard Socher, Brody Huval,
Christopher D. Manning, and Andrew Y. Ng.
2012. Semantic compositionality through recursive
In Proceedings of the 2012
matrix-vector spaces.
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning (EMNLP-CoNLL 2012), pages
1201–1211.

[Socher et al.2013] Richard

Socher,

John Bauer,
Christopher D. Manning, and Ng Andrew Y. 2013.
In
Parsing with compositional vector grammars.
Proceedings of
the
the 51st Annual Meeting of
Association for Computational Linguistics (ACL
2013), pages 455–465.

[Sutskever et al.2011] Ilya Sutskever, James Martens,
and Geoffrey Hinton. 2011. Generating text with
In Proceedings of the
recurrent neural networks.
28th International Conference on Machine Learning
(ICML 2011), pages 1017–1024.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals,
2014. Sequence to sequence
and Quoc V. Le.
learning with neural networks. In Advances in Neu-
ral Information Processing Systems 27 (NIPS 2014),
pages 3104–3112.

[Tai et al.2015] Kai Sheng Tai, Richard Socher, and
Christopher D. Manning. 2015. Improved seman-
tic representations from tree-structured long short-
term memory networks. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL-
IJCNLP 2015), pages 1556–1566.

[Takase et al.2016] Sho Takase, Naoaki Okazaki, and
Kentaro Inui. 2016. Modeling semantic composi-
tionality of relational patterns. Engineering Appli-
cations of Artiﬁcial Intelligence, 50(C):256–264.

[Tang et al.2015] Duyu Tang, Bing Qin, and Ting Liu.
2015. Document modeling with gated recurrent
neural network for sentiment classiﬁcation.
In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1422–1432.

[Toutanova et al.2015] Kristina

Toutanova,

Danqi
Chen, Patrick Pantel, Hoifung Poon, Pallavi Choud-
hury, and Michael Gamon. 2015. Representing text
for joint embedding of text and knowledge bases. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1499–1509.

[Wieting et al.2015] John Wieting, Mohit Bansal,
Kevin Gimpel, and Karen Livescu. 2015. From
paraphrase database to compositional paraphrase
the Associa-
model and back.
tion for Computational Linguistics (TACL 2015),
3:345–358.

Transactions of

Composing Distributed Representations of Relational Patterns

Sho Takase

Naoaki Okazaki Kentaro Inui

Graduate School of Information Sciences, Tohoku University
{takase, okazaki, inui}@ecei.tohoku.ac.jp

7
1
0
2
 
l
u
J
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
5
6
2
7
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Learning distributed representations for
relation instances is a central technique
In or-
in downstream NLP applications.
der to address semantic modeling of rela-
tional patterns, this paper constructs a new
dataset that provides multiple similarity
ratings for every pair of relational patterns
on the existing dataset (Zeichner et al.,
2012). In addition, we conduct a compar-
ative study of different encoders includ-
ing additive composition, RNN, LSTM,
and GRU for composing distributed rep-
resentations of relational patterns. We
also present Gated Additive Composition,
which is an enhancement of additive com-
position with the gating mechanism. Ex-
periments show that the new dataset does
not only enable detailed analyses of the
different encoders, but also provides a
gauge to predict successes of distributed
representations of relational patterns in the
relation classiﬁcation task.

1

Introduction

Knowledge about entities and their relations (re-
lation instances) are crucial for a wide spectrum
of NLP applications, e.g., information retrieval,
question answering, and recognizing textual en-
tailment. Learning distributed representations for
relation instances is a central technique in down-
stream applications as a number of recent studies
demonstrated the usefulness of distributed repre-
sentations for words (Mikolov et al., 2013; Pen-
nington et al., 2014) and sentences (Sutskever et
al., 2014; Cho et al., 2014; Kiros et al., 2015).

In particular, semantic modeling of relations
and their textual realizations (relational patterns
hereafter) is extremely important because a rela-

Figure 1: Overview of this study.

tion (e.g., causality) can be mentioned by various
expressions (e.g., “X cause Y”, “X lead to Y”, “Y is
associated with X”). To make matters worse, rela-
tional patterns are highly productive: we can pro-
duce a emphasized causality pattern “X increase
the severe risk of Y” from “X increase the risk of
Y” by inserting severe to the pattern.

To model the meanings of relational patterns,
the previous studies built a co-occurrence matrix
between relational patterns (e.g., “X increase the
risk of Y”) and entity pairs (e.g., “X: smoking,
Y: cancer”) (Lin and Pantel, 2001; Nakashole et
al., 2012). Based on the distributional hypothe-
sis (Harris, 1954), we can compute a semantic vec-
tor of a relational pattern from the co-occurrence
matrix, and measure the similarity of two rela-
tional patterns as the cosine similarity of the vec-
tors. Nowadays, several studies adopt distributed
representations computed by neural networks for
semantic modeling of relational patterns (Yih et
al., 2014; Takase et al., 2016).

Notwithstanding, the previous studies paid lit-
tle attention to explicitly evaluate semantic mod-
eling of relational patterns. In this paper, we con-
struct a new dataset that contains a pair of rela-
tional patterns with ﬁve similarity ratings judged
by human annotators. The new dataset shows a

high inter-annotator agreement, following the an-
notation guideline of Mitchell and Lapata (2010).
The dataset is publicly available on the Web site1.
In addition, we conduct a comparative study
of different encoders for composing distributed
representations of relational patterns. During the
comparative study, we present Gated Additive
Composition, which is an enhancement of addi-
tive composition with the gating mechanism. We
utilize the Skip-gram objective for training the pa-
rameters of the encoders on a large unlabeled cor-
pus. Experiments show that the new dataset does
not only enable detailed analyses of the different
encoders, but also provides a gauge to predict suc-
cesses of distributed representations of relational
patterns in another task (relation classiﬁcation).
Figure 1 illustrates the overview of this study.

2 Data Construction

2.1 Target relation instances

We build a new dataset upon the work of Ze-
ichner et al. (2012), which consists of relational
patterns with semantic inference labels annotated.
The dataset includes 5,555 pairs2 extracted by Re-
verb (Fader et al., 2011), 2,447 pairs with infer-
ence relation and 3,108 pairs (the rest) without
one.

Initially, we considered using this high-quality
dataset as it is for semantic modeling of relational
patterns. However, we found that inference rela-
tions exhibit quite different properties from those
of semantic similarity. Take a relational pattern
pair “X be the part of Y” and “X be an essential
part of Y” ﬁlled with “X = the small intestine, Y =
the digestive system” as an instance. The pattern
“X be the part of Y” does not entail “X be an essen-
tial part of Y” because the meaning of the former
does not include ‘essential’. Nevertheless, both
statements are similar, representing the same rela-
tion (PART-OF). Another uncomfortable pair is “X
fall down Y” and “X go up Y” ﬁlled with “X = the
dude, Y = the stairs”. The dataset indicates that the
former entails the latter probably because falling
down from the stairs requires going up there, but
they present the opposite meaning. For this rea-
son, we decided to re-annotate semantic similarity

1http://github.com/takase/relPatSim
2More precisely, the dataset includes 1,012 meaningless
pairs in addition to 5,555 pairs. A pair of relational patterns
was annotated as meaningless if the annotators were unable
to understand the meaning of the patterns easily. We ignore
the meaningless pairs in this study.

judgments on every pair of relational patterns on
the dataset.

2.2 Annotation guideline

We use instance-based judgment in a similar man-
ner to that of Zeichner et al. (2012) to secure
a high inter-annotator agreement.
In instance-
based judgment, an annotator judges a pair of
relational patterns whose variable slots are ﬁlled
with the same entity pair.
In other words, he
or she does not make a judgment for a pair of
relational patterns with variables, “X prevent Y”
and “X reduce the risk of Y”, but two instantiated
statements “Cephalexin prevent the bacteria” and
“Cephalexin reduce the risk of the bacteria” (“X =
Cephalexin, Y = the bacteria”). We use the entity
pairs provided in Zeichner et al. (2012).

We asked annotators to make a judgment for a
pair of relation instances by choosing a rating from
1 (dissimilar) to 7 (very similar). We provided
the following instructions for judgment, which is
compatible with Mitchell and Lapata (2010): (1)
rate 6 or 7 if the meanings of two statements are
the same or mostly the same (e.g., “Palmer team
with Jack Nicklaus” and “Palmer join with Jack
Nicklaus”); (2) rate 1 or 2 if two statements are
dissimilar or unrelated (e.g., “the kids grow up
with him” and “the kids forget about him”); (3)
rate 3, 4, or 5 if two statements have some rela-
tionships (e.g., “Many of you know about the site”
and “Many of you get more information about the
site”, where the two statements differ but also rea-
sonably resemble to some extent).

2.3 Annotation procedure
We use a crowdsourcing service CrowdFlower3
to collect similarity judgments from the crowds.
CrowdFlower has the mechanism to assess the re-
liability of annotators using Gold Standard Data
(Gold, hereafter), which consists of pairs of re-
lational patterns with similarity scores assigned.
Gold examples are regularly inserted throughout
the judgment job to enable measurement of the
performance of each worker4. Two authors of
this paper annotated 100 pairs extracted randomly
from 5,555 pairs, and prepared 80 Gold examples
showing high agreement. Ratings of the Gold ex-
amples were used merely for quality assessment
of the workers. In other words, we discarded the

3http://www.crowdflower.com/
4We allow ±1 differences in rating when we measure the

performance of the workers.

as a preprocessing step, mining phrasal expres-
sions with strong collocations from a training cor-
pus. However, this approach might be affected by
data sparseness, which lowers the quality of dis-
tributed representations.

Another simple but effective approach is ad-
ditive composition (Mitchell and Lapata, 2010),
where the distributed representation of a relational
pattern is computed by the mean of embeddings of
constituent words. Presuming that a relational pat-
tern consists of a sequence of T words w1, ..., wT ,
then we let xt ∈ Rd the embedding of the word
wt. This approach computes 1
t=1 xt as the em-
T
bedding of the relational pattern. Muraoka et al.
(2014) reported that the additive composition is a
strong baseline among various methods.

(cid:80)T

3.2 Recurrent Neural Network

Recently, a number of studies model seman-
tic compositions of phrases and sentences by
using (a variant of) Recurrent Neural Network
(RNN) (Sutskever et al., 2014; Tang et al., 2015).
For a given embedding xt at position t, the vanilla
RNN (Elman, 1990) computes the hidden state
ht ∈ Rd by the following recursive equation5,

ht = g(Wxxt + Whht−1).

(1)

Here, Wx and Wh are d × d matrices (parameters),
g(.) is the elementwise activation function (tanh).
We set h0 = 0 at t = 1. In essence, RNN com-
putes the hidden state ht based on the one at the
previous position (ht−1) and the word embedding
xt. Applying Equation 1 from t = 1 to T , we
use hT as the distributed representation of the re-
lational pattern.

3.3 RNN variants

We also employ Long Short-Term Memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
Gated Recurrent Unit (GRU) (Cho et al., 2014) as
an encoder for relational patterns. LSTM has been
applied successfully to various NLP tasks includ-
ing word segmentation (Chen et al., 2015), depen-
dency parsing (Dyer et al., 2015), machine trans-
lation (Sutskever et al., 2014), and sentiment anal-
ysis (Tai et al., 2015). GRU is also successful in
machine translation (Cho et al., 2014) and various

5We do not use a bias term in this study. We set the num-
ber of dimensions of hidden states identical to that of word
embeddings (d) so that we can adapt the objective function
of the Skip-gram model for training (Section 3.5).

Figure 2: Number of judgments for each similarity
rating. The total number of judgments is 27, 775
(5, 555 pairs × 5 workers).

similarity ratings of the Gold examples, and used
those judged by the workers.

To build a high quality dataset, we use judg-
ments from workers whose conﬁdence values (re-
liability scores) computed by CrowdFlower are
greater than 75%. Additionally, we force every
pair to have at least ﬁve judgments from the work-
ers. Consequently, 60 workers participated in this
job. In the ﬁnal version of this dataset, each pair
has ﬁve similarity ratings judged by the ﬁve most
reliable workers who were involved in the pair.

Figure 2 presents the number of judgments for
each similarity rating. Workers seldom rated 7
for a pair of relational patterns, probably because
most pairs have at least one difference in content
words. The mean of the standard deviations of
similarity ratings of all pairs is 1.16. Moreover, we
computed Spearman’s ρ between similarity judg-
ments from each worker and the mean of ﬁve judg-
ments in the dataset. The mean of Spearman’s ρ
of workers involved in the dataset is 0.728. These
statistics show a high inter-annotator agreement of
the dataset.

3 Encoder for Relational Patterns

The new dataset built in the previous section raises
two new questions — What is the reasonable
method (encoder) for computing the distributed
representations of relational patterns?
Is this
dataset useful to predict successes of distributed
representations of relational patterns in real ap-
plications? In order to answer these questions, this
section explores various methods for learning dis-
tributed representations of relational patterns.

3.1 Baseline methods without supervision

A na¨ıve approach would be to regard a rela-
tional pattern as a single unit (word) and to
train word/pattern embeddings as usual. In fact,
Mikolov et al. (2013) implemented this approach

forget gates in LSTM, we compute the input gate
it ∈ Rd and forget gate ft ∈ Rd at position t. We
use them to control the amount to propagate to the
hidden state ht from the current word xt and the
previous state ht−1.

it = σ(Wixxt + Wihht−1)
ft = σ(Wf xxt + Wf hht−1)
ht = g(ft (cid:12) ht−1 + it (cid:12) xt)

(2)

(3)

(4)

Here, Wix, Wih, Wf x, Wf h are d × d matri-
ces. Equation 4 is interpreted as a weighted ad-
ditive composition between the vector of the cur-
rent word xt and the vector of the previous hid-
den state ht−1. The elementwise weights are con-
trolled by the input gate it and forget gate ft; we
expect that input gates are closed (close to zero)
and forget gates are opened (close to one) when
the current word is a control verb or function word.
We name this architecture gated additive compo-
sition (GAC).

3.5 Parameter estimation: Skip-gram model

To train the parameters of the encoders (RNN,
LSTM, GRU, and GAC) on an unlabeled text cor-
pus, we adapt the Skip-gram model (Mikolov et
al., 2013). Formally, we designate an occurrence
of a relational pattern p as a subsequence of L
words ws, ..., ws+L−1 in a corpus. We deﬁne
δ words appearing before and after pattern p as
the context words, and let Cp = (s − δ, ..., s −
1, s + L, ..., s + L + δ) denote the indices of
the context words. We deﬁne the log-likelihood
of the relational pattern lp, following the objec-
tive function of Skip-gram with negative sampling
(SGNS) (Levy and Goldberg, 2014).

(cid:32)

lp =

(cid:88)

τ ∈Cp

log σ(h(cid:62)

p ˜xτ ) +

log σ(−h(cid:62)

p ˜x˘τ )

K
(cid:88)

k=1

(cid:33)

(5)

In this formula: K denotes the number of nega-
tive samples; hp ∈ Rd is the vector for the rela-
tional pattern p computed by each encoder such as
RNN; ˜xτ ∈ Rd is the context vector for the word
7; x˘τ (cid:48) ∈ Rd is the context vector for the word
wτ
7The Skip-gram model has two kinds of vectors xt and
˜xt assigned for a word wt. Equation 2 of the original pa-
per (Mikolov et al., 2013) denotes xt (word vector) as v
(input vector) and ˜xt (context vector) as v(cid:48) (output vector).
The word2vec implementation does not write context (out-
put) vectors but only word (input) vectors to a model ﬁle.
Therefore, we modiﬁed the source code to save context vec-
tors, and use them in Equation 5. This modiﬁcation ensures
the consistency of the entire model.

Figure 3: Overview of GAC trained with Skip-
gram model. GAC computes the distributed rep-
resentation of a relational pattern using the input
gate and forget gate, and learns parameters by pre-
dicting surrounding words (Skip-gram model).

tasks including sentence similarity, paraphrase de-
tection, and sentiment analysis (Kiros et al., 2015).
LSTM and GRU are similar in that the both ar-
chitectures have gates (input, forget, and output
for LSTM; reset and update for GRU) to rem-
edy the gradient vanishing or explosion problem
in training RNNs. Although some researchers re-
ported that GRU is superior to LSTM (Chung et
al., 2014), we have no consensus about the supe-
riority. Besides, we are not sure whether LSTM
or GRU is really necessary for relational patterns,
which ususlly consist of a few words. Thus, we
compare RNN, LSTM, and GRU empirically with
the same training data and the same training pro-
cedure. Similarly to RNN, we use the hidden state
hT of LSTM6 or GRU as the distributed represen-
tation of a relation pattern.

3.4 Gated Additive Composition (GAC)

In addition to the gradient problem, LSTM or
GRU may be suitable for relational patterns, hav-
ing the mechanism of adaptive control of gates for
input words and hidden states. Consider the rela-
tional pattern “X have access to Y”, whose mean-
ing is mostly identical to that of “X access Y”.
Because ‘have’ in the pattern is a light verb, it
may be harmful to incorporate the semantic vector
of ‘have’ into the distributed representation of the
pattern. The same may be true for the functional
word ‘to’ in the pattern. However, the additive
composition nor RNN does not have a mechanism
to ignore the semantic vectors of these words. It
is interesting to explore a method somewhere be-
tween additive composition and LSTM/GRU: ad-
ditive composition with the gating mechanism.

For this reason, we present an another variant
of RNN in this study. Inspired by the input and

6We omitted peephole connections and bias terms.

that were sampled from the unigram distribution8
at every iteration of (cid:80)
k.

At every occurrence of a relational pattern in
the corpus, we use Stochastic Gradient Descent
(SGD) and backpropagation through time (BPTT)
for training the parameters (matrices) in encoders.
More speciﬁcally, we initialize the word vectors xt
and context vectors ˜xt with pre-trained values, and
compute gradients for Equation 5 to update the pa-
rameters in encoders. In this way, each encoder
is trained to compose a vector of a relational pat-
tern so that it can predict the surrounding context
words. An advantage of this parameter estimation
is that the distributed representations of words and
relational patterns stay in the same vector space.
Figure 3 visualizes the training process for GAC.

4 Experiments

In Section 4.1, we investigate the performance of
the distributed representations computed by differ-
ent encoders on the pattern similarity task. Section
4.2 examines the contribution of the distributed
representations on SemEval 2010 Task 8, and dis-
cusses the usefulness of the new dataset to predict
successes of the relation classiﬁcation task.

4.1 Relational pattern similarity

For every pair in the dataset built in Section 2, we
compose the vectors of the two relational patterns
using an encoder described in Section 3, and com-
pute the cosine similarity of the two vectors. Re-
peating this process for all pairs in the dataset, we
measure Spearman’s ρ between the similarity val-
ues computed by the encoder and similarity ratings
assigned by humans.

4.1.1 Training procedure
We used ukWaC9 as the training corpus for the
encoders. This corpus includes the text of 2 bil-
lion words from Web pages crawled in the .uk
domain. Part-of-speech tags and lemmas are an-
notated by TreeTagger10. We used lowercased
lemmas throughout the experiments. We apply
word2vec to this corpus to pre-train word vec-
tors xt and context vectors ˜xt. All encoders use
word vectors xt to compose vectors of relational
patterns; and the Skip-gram model uses context

8We use the probability distribution of words raised to the

3/4 power (Mikolov et al., 2013).

9http://wacky.sslmit.unibo.it
10http://www.cis.uni-muenchen.de/

˜schmid/tools/TreeTagger/

Figure 4: Performance of each method on the rela-
tional pattern similarity task with variation in the
number of dimensions.

vectors ˜xt to compute the objective function and
gradients. We ﬁx the vectors xt and ˜xt with pre-
trained values during training.

We used Reverb (Fader et al., 2011) to the
ukWaC corpus to extract relational pattern can-
didates. To remove unuseful relational patterns,
we applied ﬁltering rules that are compatible with
those used in the publicly available extraction re-
sult11. Additionally, we discarded relational pat-
terns appearing in the evaluation dataset through-
out the experiments to assess the performance un-
der which an encoder composes vectors of unseen
relational patterns. This preprocessing yielded
127, 677 relational patterns.

All encoders were implemented on Chainer12, a
ﬂexible framework of neural networks. The hyper-
parameters of the Skip-gram model are identical
to those in Mikolov et al. (2013):
the width of
context window δ = 5, the number of negative
samples K = 5, the subsampling of 10−5. For
each encoder that requires training, we tried 0.025,
0.0025, and 0.00025 as an initial learning rate, and
selected the best value for the encoder. In contrast
to the presentation of Section 3, we compose a pat-
tern vector in backward order (from the last to the
ﬁrst) because preliminary experiments showed a
slight improvement with this treatment.

4.1.2 Results and discussions
Figure 4 shows Spearman’s rank correlations of
different encoders when the number of dimensions
of vectors is 100–500. The ﬁgure shows that GAC
achieves the best performance on all dimensions.
Figure 4 includes the performance of the na¨ıve
approach, “NoComp”, which regards a relational
pattern as a single unit (word). In this approach,

11http://reverb.cs.washington.edu/
12http://chainer.org/

Length
1
2
3
4
> 5
All

#
636
1,018
2,272
1,206
423
5,555

NoComp Add
0.324
0.319
0.386
0.306
0.315
0.340

0.324
0.215
0.234
0.208
0.278
0.215

LSTM GRU RNN GAC
0.324
0.324
0.321
0.257
0.404
0.344
0.323
0.314
0.357
0.369
0.370
0.336

0.324
0.274
0.370
0.329
0.384
0.356

0.324
0.285
0.387
0.319
0.394
0.362

Table 1: Spearman’s rank correlations on different pattern lengths (number of dimensions d = 500).

we allocated a vector hp for each relational pat-
tern p in Equation 5 instead of the vector compo-
sition, and trained the vectors of relational patterns
using the Skip-gram model. The performance was
poor for two reasons: we were unable to compute
similarity values for 1,744 pairs because relational
patterns in these pairs do not appear in ukWaC;
and relational patterns could not obtain sufﬁcient
statistics because of data sparseness.

Table 1 reports Spearman’s rank correlations
computed for each pattern length. Here, the length
of a relational-pattern pair is deﬁned by the maxi-
mum of the lengths of two patterns in the pair. In
length of 1, all methods achieve the same corre-
lation score because they use the same word vec-
tor xt. The table shows that additive composition
(Add) performs well for shorter relational patterns
(lengths of 2 and 3) but poorly for longer ones
(lengths of 4 and 5+). GAC also exhibits the sim-
ilar tendency to Add, but it outperforms Add for
shorter patterns (lengths of 2 and 3) probably be-
cause of the adaptive control of input and forget
gates.
In contrast, RNN and its variants (RNN,
GRU, and LSTM) enjoy the advantage on longer
patterns (lengths of 4 and 5+).

To examine the roles of input and forget gates of
GAC, we visualize the moments when input/forget
gates are wide open or closed. More precisely, we
extract the input word and scanned words when
|it|2 or |ft|2 is small (close to zero) or large (close
to one) on the relational-pattern dataset. We re-
state that we compose a pattern vector in backward
order (from the last to the ﬁrst): GAC scans ‘of’,
‘author’, and ‘be’ in this order for composing the
vector of the relational pattern ‘be author of’.

Table 2 displays the top three examples iden-
tiﬁed using the procedure. The table shows two
groups of tendencies. Input gates open and forget
gates close when scanned words are only a prepo-
sition and the current word is a content word. In
these situations, GAC tries to read the semantic

large it
(input
open)
small it
(input
close)
large ft
(forget
open)
small ft
(forget
close)

wt
reimburse
payable
liable
a
a
be
be
be
be
coauthor
capital
center

wt+1 wt+2 ...

for
in
to
charter member of
valuable member of
an avid reader of
eligible to participate in
require to submit
request to submit
of
of
of

Table 2: Prominent moments for input/forget
gates.

vector of the content word and to ignore the se-
mantic vector of the preposition. In contrast, input
gates close and forget gates open when the current
word is ‘be’ or ‘a’ and scanned words form a noun
phrase (e.g., “charter member of”), a complement
(e.g., “eligible to participate in”), or a passive
voice (e.g., “require(d) to submit”). This behavior
is also reasonable because GAC emphasizes infor-
mative words more than functional words.

4.2 Relation classiﬁcation

4.2.1 Experimental settings

To examine the usefulness of the dataset and dis-
tributed representations for a different application,
we address the task of relation classiﬁcation on
the SemEval 2010 Task 8 dataset (Hendrickx et
al., 2010).
In other words, we explore whether
high-quality distributed representations of rela-
tional patterns are effective to identify a relation
type of an entity pair.

The dataset consists of 10, 717 relation in-
stances (8, 000 training and 2, 717 test instances)
with their relation types annotated. The dataset
deﬁnes 9 directed relations (e.g.,CAUSE-EFFECT)

Method

Feature set

SVM
SVM + NoComp
SVM + LSTM
SVM + Add
SVM + GRU
SVM + RNN
SVM + GAC

Ranking loss + GAC w/ ﬁne-tuning

SVM (Rink and Harabagiu, 2010)
MV-RNN (Socher et al., 2012)

FCM (Gormley et al., 2015) w/o ﬁne-tuning

w/ ﬁne-tuning

RelEmb (Hashimoto et al., 2015)

CR-CNN (dos Santos et al., 2015) w/ Other
w/o Other
depLCNN (Xu et al., 2015)

depLCNN + NS

BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
+ dependency, WordNet, NE
embeddings, BoW, POS
+ dependency, WordNet, NE
BoW, POS, dependency, Google n-gram, etc.
embeddings, parse trees
+ WordNet, POS, NE
embeddings, dependency
+ WordNet
embeddings, dependency
+ NE
embeddings
+ dependency, WordNet, NE
embeddings, word position embeddings
embeddings, word position embeddings
embeddings, dependency
+ WordNet
embeddings, dependency
+ WordNet

F1
77.3
79.9
81.1
81.1
81.4
81.7
82.0
83.7

84.2
82.2
79.1
82.4
79.4
82.0
82.2
83.4
82.8
83.5
82.7
84.1
81.9
83.7
84.0
85.6

Table 3: F1 scores on the SemEval 2010 dataset.

and 1 undirected relation OTHER. Given a pair
of entity mentions, the task is to identify a rela-
tion type in 19 candidate labels (2 × 9 directed +
1 undirected relations). For example, given the
pair of entity mentions e1 = ‘burst’ and e2 =
‘pressure’ in the sentence “The burst has been
caused by water hammer pressure”, a system is
expected to predict CAUSE-EFFECT(e2, e1).

We used Support Vector Machines (SVM) with
a Radial Basis Function (RBF) kernel
imple-
mented in libsvm13. Basic features are: part-
of-speech tags (predicted by TreeTagger), surface
forms, lemmas of words appearing between an en-
tity pair, and lemmas of the words in the entity
pair. Additionally, we incorporate distributed rep-
resentations of a relational pattern, entities, and a
word before and after the entity pair (number of
dimensions d = 500).
In this task, we regard
words appearing between an entity pair as a re-
lational pattern. We compare the vector represen-

13https://www.csie.ntu.edu.tw/˜cjlin/

libsvm/

tations of relational patterns computed by the ﬁve
encoders presented in Section 4.1: additive com-
position, RNN, GRU, LSTM, and GAC. Hyper-
parameters related to SVM were tuned by 5-fold
cross validation on the training data.

4.2.2 Results and discussions

Table 3 presents the macro-averaged F1 scores on
the SemEval 2010 Task 8 dataset. The ﬁrst group
of the table provides basic features and enhance-
ments with the distributed representations. We
can observe a signiﬁcant improvement even from
the distributed representation of NoComp (77.3
to 79.9). Moreover, the distributed representation
that exhibited the high performance on the pattern
similarity task was also successful on this task;
GAC, which yielded the highest performance on
the pattern similarity task, also achieved the best
performance (82.0) of all encoders on this task.

It is noteworthy that the improvements brought
by the different encoders on this task roughly cor-
respond to the performance on the pattern similar-

ity task. This fact implies two potential impacts.
First, the distributed representations of relational
patterns are useful and easily transferable to other
tasks such as knowledge base population. Second,
the pattern similarity dataset provides a gauge to
predict successes of distributed representations in
another task.

We could further improve the performance of
SVM + GAC by incorporating external resources
in the similar manner as the previous studies
did. Concretely, SVM + GAC achieved 83.7 F1
score by adding features for WordNet, named en-
tities (NE), and dependency paths explained in
Hashimoto et al. (2015). Moreover, we could ob-
tain 84.2 F1 score, using the ranking based loss
function (dos Santos et al., 2015) and ﬁne-tuning
of the distributed representations initially trained
by GAC. Currently, this is the second best score
among the performance values reported in the pre-
vious studies on this task (the second group of Ta-
ble 3). If we could use the negative sampling tech-
nique proposed by Xu et al. (2015), we might im-
prove the performance further14.

5 Related Work

Mitchell and Lapata (2010) was a pioneering work
in semantic modeling of short phrases. They con-
structed the dataset that contains two-word phrase
pairs with semantic similarity judged by human
annotators. Korkontzelos et al. (2013) provided a
semantic similarity dataset with pairs of two words
and a single word. Wieting et al. (2015) annotated
a part of PPDB (Ganitkevitch et al., 2013) to eval-
uate semantic modeling of paraphrases. Although
the target unit of semantic modeling is different
from that for these previous studies, we follow the
annotation guideline and instruction of Mitchell
and Lapata (2010) to build the new dataset.

The task addressed in this paper is also re-
lated to the Semantic Textual Similarity (STS)
task (Agirre et al., 2012). STS is the task to mea-
sure the degree of semantic similarity between two
sentences. Even though a relational pattern ap-
pears as a part of a sentence, it may be difﬁcult
to transfer ﬁndings from one to another: for exam-
ple, the encoders of RNN and its variants explored
in this study may exhibit different characteristics,

14In fact, we made substantial efforts to introduce the nega-
tive sampling technique. However, Xu et al. (2015) omits the
detail of the technique probably because of the severe page
limit of short papers. For this reason, we could not reproduce
their method in this study.

inﬂuenced by the length and complexity of input
text expressions.

In addition to data construction, this paper ad-
dresses semantic modeling of relational patterns.
Nakashole et al. (2012) approached the similar
task by constructing a taxonomy of relational pat-
terns. They represented a vector of a relational pat-
tern as the distribution of entity pairs co-occurring
with the relational pattern. Grycner et al. (2015)
extended Nakashole et al. (2012) to generalize di-
mensions of the vector space (entity pairs) by in-
corporating hyponymy relation between entities.
They also used external resources to recognize the
transitivity of pattern pairs and applied transitivi-
ties to ﬁnd patterns in entailment relation. These
studies did not consider semantic composition of
relational patterns. Thus, they might suffer from
the data sparseness problem, as shown by No-
Comp in Figure 4.

Numerous studies have been aimed at encod-
ing distributed representations of phrases and sen-
tences from word embeddings by using: Recur-
sive Neural Network (Socher et al., 2011), Matrix
Vector Recursive Neural Network (Socher et al.,
2012), Recursive Neural Network with different
weight matrices corresponding to syntactic cate-
gories (Socher et al., 2013) or word types (Takase
et al., 2016), RNN (Sutskever et al., 2011),
LSTM (Sutskever et al., 2014), GRU (Cho et al.,
2014), PAS-CLBLM (Hashimoto et al., 2014), etc.
As described in Section 3, we applied RNN, GRU,
and LSTM to compute distributed representations
of relational patterns because recent papers have
demonstrated their superiority in semantic compo-
sition (Sutskever et al., 2014; Tang et al., 2015).
In this paper, we presented a comparative study of
different encoders for semantic modeling of rela-
tional patterns.

To investigate usefulness of the distributed rep-
resentations and the new dataset, we adopted the
relation classiﬁcation task (SemEval 2010 Task 8)
as a real application. On the SemEval 2010 Task
8, several studies considered semantic composi-
tion. Gormley et al. (2015) proposed Feature-rich
Compositional Embedding Model (FCM) that can
combine binary features (e.g., positional indica-
tors) with word embeddings via outer products.
dos Santos et al. (2015) addressed the task using
Convolutional Neural Network (CNN). Xu et al.
(2015) achieved a higher performance than dos
Santos et al. (2015) by application of CNN on de-

pendency paths.

In addition to the relation classiﬁcation task,
we brieﬂy describe other applications. To popu-
late a knowledge base, Riedel et al. (2013) jointly
learned latent feature vectors of entities, relational
patterns, and relation types in the knowledge base.
Toutanova et al. (2015) adapted CNN to capture
the compositional structure of a relational pattern
during the joint learning. For open domain ques-
tion answering, Yih et al. (2014) proposed the
method to map an interrogative sentence on an en-
tity and a relation type contained in a knowledge
base by using CNN.

Although these reports described good perfor-
mance on the respective tasks, we are unsure of the
generality of distributed representations trained
for a speciﬁc task such as the relation classiﬁca-
tion. In contrast, this paper demonstrated the con-
tribution of distributed representations trained in a
generic manner (with the Skip-gram objective) to
the task of relation classiﬁcation.

6 Conclusion

In this paper, we addressed the semantic model-
ing of relational patterns. We introduced the new
dataset in which humans rated multiple similar-
ity scores for every pair of relational patterns on
the dataset of semantic inference (Zeichner et al.,
2012). Additionally, we explored different en-
coders for composing distributed representations
of relational patterns. The experimental results
shows that Gated Additive Composition (GAC),
which is a combination of additive composition
and the gating mechanism, is effective to compose
distributed representations of relational patterns.
Furthermore, we demonstrated that the presented
dataset is useful to predict successes of the dis-
tributed representations in the relation classiﬁca-
tion task.

We expect that several further studies will use
the new dataset not only for distributed represen-
tations of relational patterns but also for other NLP
tasks (e.g., paraphrasing). Analyzing the internal
mechanism of LSTM, GRU, and GAC, we plan to
explore an alternative architecture of neural net-
works that is optimal for relational patterns.

Acknowledgments

26.5820, JSPS KAKENHI Grant number

no.
15H05318, and JST, CREST.

References

[Agirre et al.2012] Eneko Agirre, Daniel Cer, Mona
Diab, and Aitor Gonzalez-Agirre. 2012. Semeval-
2012 task 6: A pilot on semantic textual similarity.
In The First Joint Conference on Lexical and Com-
putational Semantics (*SEM 2012), pages 385–393.

[Chen et al.2015] Xinchi Chen, Xipeng Qiu, Chenxi
Zhu, Pengfei Liu, and Xuanjing Huang.
2015.
Long short-term memory neural networks for chi-
In Proceedings of the
nese word segmentation.
2015 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2015), pages 1197–
1206.

[Cho et al.2014] Kyunghyun Cho, Bart van Merrien-
boer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi
Bougares, Holger Schwenk, and Yoshua Bengio.
2014. Learning phrase representations using rnn
encoder–decoder for statistical machine translation.
In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2014), pages 1724–1734.

[Chung et al.2014] Junyoung Chung, C¸ aglar G¨ulc¸ehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural networks
on sequence modeling.

[dos Santos et al.2015] Cicero dos Santos, Bing Xiang,
and Bowen Zhou. 2015. Classifying relations by
ranking with convolutional neural networks. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (ACL-IJCNLP 2015), pages 626–634.

[Dyer et al.2015] Chris Dyer, Miguel Ballesteros,
Wang Ling, Austin Matthews, and Noah A. Smith.
2015. Transition-based dependency parsing with
In Proceedings of
stack long short-term memory.
the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International
Joint Conference on Natural Language Processing
(ACL-IJCNLP 2015), pages 334–343.

[Elman1990] Jeffrey L Elman. 1990. Finding structure

in time. Cognitive science, 14(2):179–211.

[Fader et al.2011] Anthony Fader, Stephen Soderland,
and Oren Etzioni. 2011.
Identifying relations for
open information extraction. In Proceedings of the
2011 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2011), pages 1535–
1545.

We thank the reviewers and Jun Suzuki for valu-
able comments. This work was partially sup-
ported by Grant-in-Aid for JSPS Fellows Grant

[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin
Van Durme, and Chris Callison-Burch. 2013. Ppdb:
In Proceedings of the
The paraphrase database.
2013 Conference of the North American Chapter of

the Association for Computational Linguistics: Hu-
man Language Technologies (NAACL-HLT 2013),
pages 758–764.

matrix factorization. In Advances in Neural Infor-
mation Processing Systems 27 (NIPS 2014), pages
2177–2185.

[Gormley et al.2015] Matthew R. Gormley, Mo Yu, and
Mark Dredze. 2015. Improved relation extraction
with feature-rich compositional embedding models.
In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1774–1784.

[Grycner et al.2015] Adam Grycner, Gerhard Weikum,
Jay Pujara, James Foulds, and Lise Getoor. 2015.
Relly: Inferring hypernym relationships between re-
In Proceedings of the 2015 Con-
lational phrases.
ference on Empirical Methods in Natural Language
Processing (EMNLP 2015), pages 971–981.

[Harris1954] Zellig Harris. 1954. Distributional struc-

ture. Word, 10(23):146–162.

[Lin and Pantel2001] Dekang Lin and Patrick Pantel.
2001. Dirt – discovery of inference rules from text.
In Proceedings of the Seventh ACM SIGKDD Inter-
national Conference on Knowledge Discovery and
Data Mining (KDD 01), pages 323–328.

[Mikolov et al.2013] Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases
In Advances in Neu-
and their compositionality.
ral Information Processing Systems 26 (NIPS 2013),
pages 3111–3119.

[Mitchell and Lapata2010] Jeff Mitchell and Mirella
Lapata. 2010. Composition in distributional models
of semantics. Cognitive Science, 34(8):1388–1439.

[Hashimoto et al.2014] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsu-
ruoka. 2014. Jointly learning word representations
and composition functions using predicate-argument
structures. In Proceedings of the 2014 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2014), pages 1544–1555.

[Muraoka et al.2014] Masayasu Muraoka, Sonse Shi-
maoka, Kazeto Yamamoto, Yotaro Watanabe,
Naoaki Okazaki, and Kentaro Inui. 2014. Finding
the best model among representative compositional
In Proceedings of the 28th Paciﬁc Asia
models.
Conference on Language, Information, and Compu-
tation (PACLIC 28), pages 65–74.

[Hashimoto et al.2015] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsuruoka.
2015. Task-oriented learning of word embeddings
for semantic relation classiﬁcation. In Proceedings
of the 19th Conference on Computational Natural
Language Learning (CoNLL 2015), pages 268–278.

[Hendrickx et al.2010] Iris Hendrickx, Su Nam Kim,
Zornitsa Kozareva, Preslav Nakov, Diarmuid
´O S´eaghdha, Sebastian Pad´o, Marco Pennacchiotti,
Lorenza Romano, and Stan Szpakowicz.
2010.
Semeval-2010 task 8: Multi-way classiﬁcation of se-
mantic relations between pairs of nominals. In Pro-
ceedings of the 5th International Workshop on Se-
mantic Evaluation, pages 33–38.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and J¨urgen Schmidhuber. 1997. Long short-term
memory. Neural Computation, 9(8):1735–1780.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S. Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. In Advances in Neural Information
Processing Systems 28 (NIPS 2015), pages 3276–
3284.

[Korkontzelos et al.2013] Ioannis

Korkontzelos,
Torsten Zesch, Fabio Massimo Zanzotto, and Chris
Biemann. 2013. Semeval-2013 task 5: Evaluating
In Second Joint Conference
phrasal semantics.
on Lexical and Computational Semantics (*SEM
2013), pages 39–47.

[Levy and Goldberg2014] Omer Levy and Yoav Gold-
berg. 2014. Neural word embedding as implicit

[Nakashole et al.2012] Ndapandula Nakashole, Ger-
hard Weikum, and Fabian Suchanek. 2012. Patty: A
taxonomy of relational patterns with semantic types.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL 2012), pages 1135–1145.

[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher Manning. 2014. Glove:
Global vectors for word representation. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP 2014),
pages 1532–1543.

[Riedel et al.2013] Sebastian Riedel, Limin Yao, An-
drew McCallum, and Benjamin M. Marlin. 2013.
Relation extraction with matrix factorization and
universal schemas. In Proceedings of the 2013 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL-HLT 2013), pages 74–
84.

[Rink and Harabagiu2010] Bryan Rink and Sanda
Harabagiu. 2010. Utd: Classifying semantic rela-
tions by combining lexical and semantic resources.
In Proceedings of the 5th International Workshop
on Semantic Evaluation, pages 256–259.

[Socher et al.2011] Richard Socher, Cliff Chiung-Yu
Lin, Andrew Y. Ng, and Christopher D. Manning.
2011. Parsing natural scenes and natural language
In Proceedings
with recursive neural networks.
of the 28th International Conference on Machine
learning (ICML 2011), pages 129–136.

[Xu et al.2015] Kun Xu, Yansong Feng, Songfang
Huang, and Dongyan Zhao. 2015. Semantic rela-
tion classiﬁcation via convolutional neural networks
In Proceedings of
with simple negative sampling.
the 2015 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP 2015), pages
536–540.

[Yih et al.2014] Wen-tau Yih, Xiaodong He,

and
Christopher Meek.
2014. Semantic parsing for
single-relation question answering. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL 2014), pages 643–
648.

[Zeichner et al.2012] Naomi Zeichner, Jonathan Be-
Crowdsourcing
rant, and Ido Dagan.
In Proceedings of the
inference-rule evaluation.
50th Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2012), pages 156–160.

2012.

[Socher et al.2012] Richard Socher, Brody Huval,
Christopher D. Manning, and Andrew Y. Ng.
2012. Semantic compositionality through recursive
In Proceedings of the 2012
matrix-vector spaces.
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning (EMNLP-CoNLL 2012), pages
1201–1211.

[Socher et al.2013] Richard

Socher,

John Bauer,
Christopher D. Manning, and Ng Andrew Y. 2013.
In
Parsing with compositional vector grammars.
Proceedings of
the
the 51st Annual Meeting of
Association for Computational Linguistics (ACL
2013), pages 455–465.

[Sutskever et al.2011] Ilya Sutskever, James Martens,
and Geoffrey Hinton. 2011. Generating text with
In Proceedings of the
recurrent neural networks.
28th International Conference on Machine Learning
(ICML 2011), pages 1017–1024.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals,
2014. Sequence to sequence
and Quoc V. Le.
learning with neural networks. In Advances in Neu-
ral Information Processing Systems 27 (NIPS 2014),
pages 3104–3112.

[Tai et al.2015] Kai Sheng Tai, Richard Socher, and
Christopher D. Manning. 2015. Improved seman-
tic representations from tree-structured long short-
term memory networks. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL-
IJCNLP 2015), pages 1556–1566.

[Takase et al.2016] Sho Takase, Naoaki Okazaki, and
Kentaro Inui. 2016. Modeling semantic composi-
tionality of relational patterns. Engineering Appli-
cations of Artiﬁcial Intelligence, 50(C):256–264.

[Tang et al.2015] Duyu Tang, Bing Qin, and Ting Liu.
2015. Document modeling with gated recurrent
neural network for sentiment classiﬁcation.
In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1422–1432.

[Toutanova et al.2015] Kristina

Toutanova,

Danqi
Chen, Patrick Pantel, Hoifung Poon, Pallavi Choud-
hury, and Michael Gamon. 2015. Representing text
for joint embedding of text and knowledge bases. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1499–1509.

[Wieting et al.2015] John Wieting, Mohit Bansal,
Kevin Gimpel, and Karen Livescu. 2015. From
paraphrase database to compositional paraphrase
the Associa-
model and back.
tion for Computational Linguistics (TACL 2015),
3:345–358.

Transactions of

Composing Distributed Representations of Relational Patterns

Sho Takase

Naoaki Okazaki Kentaro Inui

Graduate School of Information Sciences, Tohoku University
{takase, okazaki, inui}@ecei.tohoku.ac.jp

7
1
0
2
 
l
u
J
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
5
6
2
7
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Learning distributed representations for
relation instances is a central technique
In or-
in downstream NLP applications.
der to address semantic modeling of rela-
tional patterns, this paper constructs a new
dataset that provides multiple similarity
ratings for every pair of relational patterns
on the existing dataset (Zeichner et al.,
2012). In addition, we conduct a compar-
ative study of different encoders includ-
ing additive composition, RNN, LSTM,
and GRU for composing distributed rep-
resentations of relational patterns. We
also present Gated Additive Composition,
which is an enhancement of additive com-
position with the gating mechanism. Ex-
periments show that the new dataset does
not only enable detailed analyses of the
different encoders, but also provides a
gauge to predict successes of distributed
representations of relational patterns in the
relation classiﬁcation task.

1

Introduction

Knowledge about entities and their relations (re-
lation instances) are crucial for a wide spectrum
of NLP applications, e.g., information retrieval,
question answering, and recognizing textual en-
tailment. Learning distributed representations for
relation instances is a central technique in down-
stream applications as a number of recent studies
demonstrated the usefulness of distributed repre-
sentations for words (Mikolov et al., 2013; Pen-
nington et al., 2014) and sentences (Sutskever et
al., 2014; Cho et al., 2014; Kiros et al., 2015).

In particular, semantic modeling of relations
and their textual realizations (relational patterns
hereafter) is extremely important because a rela-

Figure 1: Overview of this study.

tion (e.g., causality) can be mentioned by various
expressions (e.g., “X cause Y”, “X lead to Y”, “Y is
associated with X”). To make matters worse, rela-
tional patterns are highly productive: we can pro-
duce a emphasized causality pattern “X increase
the severe risk of Y” from “X increase the risk of
Y” by inserting severe to the pattern.

To model the meanings of relational patterns,
the previous studies built a co-occurrence matrix
between relational patterns (e.g., “X increase the
risk of Y”) and entity pairs (e.g., “X: smoking,
Y: cancer”) (Lin and Pantel, 2001; Nakashole et
al., 2012). Based on the distributional hypothe-
sis (Harris, 1954), we can compute a semantic vec-
tor of a relational pattern from the co-occurrence
matrix, and measure the similarity of two rela-
tional patterns as the cosine similarity of the vec-
tors. Nowadays, several studies adopt distributed
representations computed by neural networks for
semantic modeling of relational patterns (Yih et
al., 2014; Takase et al., 2016).

Notwithstanding, the previous studies paid lit-
tle attention to explicitly evaluate semantic mod-
eling of relational patterns. In this paper, we con-
struct a new dataset that contains a pair of rela-
tional patterns with ﬁve similarity ratings judged
by human annotators. The new dataset shows a

high inter-annotator agreement, following the an-
notation guideline of Mitchell and Lapata (2010).
The dataset is publicly available on the Web site1.
In addition, we conduct a comparative study
of different encoders for composing distributed
representations of relational patterns. During the
comparative study, we present Gated Additive
Composition, which is an enhancement of addi-
tive composition with the gating mechanism. We
utilize the Skip-gram objective for training the pa-
rameters of the encoders on a large unlabeled cor-
pus. Experiments show that the new dataset does
not only enable detailed analyses of the different
encoders, but also provides a gauge to predict suc-
cesses of distributed representations of relational
patterns in another task (relation classiﬁcation).
Figure 1 illustrates the overview of this study.

2 Data Construction

2.1 Target relation instances

We build a new dataset upon the work of Ze-
ichner et al. (2012), which consists of relational
patterns with semantic inference labels annotated.
The dataset includes 5,555 pairs2 extracted by Re-
verb (Fader et al., 2011), 2,447 pairs with infer-
ence relation and 3,108 pairs (the rest) without
one.

Initially, we considered using this high-quality
dataset as it is for semantic modeling of relational
patterns. However, we found that inference rela-
tions exhibit quite different properties from those
of semantic similarity. Take a relational pattern
pair “X be the part of Y” and “X be an essential
part of Y” ﬁlled with “X = the small intestine, Y =
the digestive system” as an instance. The pattern
“X be the part of Y” does not entail “X be an essen-
tial part of Y” because the meaning of the former
does not include ‘essential’. Nevertheless, both
statements are similar, representing the same rela-
tion (PART-OF). Another uncomfortable pair is “X
fall down Y” and “X go up Y” ﬁlled with “X = the
dude, Y = the stairs”. The dataset indicates that the
former entails the latter probably because falling
down from the stairs requires going up there, but
they present the opposite meaning. For this rea-
son, we decided to re-annotate semantic similarity

1http://github.com/takase/relPatSim
2More precisely, the dataset includes 1,012 meaningless
pairs in addition to 5,555 pairs. A pair of relational patterns
was annotated as meaningless if the annotators were unable
to understand the meaning of the patterns easily. We ignore
the meaningless pairs in this study.

judgments on every pair of relational patterns on
the dataset.

2.2 Annotation guideline

We use instance-based judgment in a similar man-
ner to that of Zeichner et al. (2012) to secure
a high inter-annotator agreement.
In instance-
based judgment, an annotator judges a pair of
relational patterns whose variable slots are ﬁlled
with the same entity pair.
In other words, he
or she does not make a judgment for a pair of
relational patterns with variables, “X prevent Y”
and “X reduce the risk of Y”, but two instantiated
statements “Cephalexin prevent the bacteria” and
“Cephalexin reduce the risk of the bacteria” (“X =
Cephalexin, Y = the bacteria”). We use the entity
pairs provided in Zeichner et al. (2012).

We asked annotators to make a judgment for a
pair of relation instances by choosing a rating from
1 (dissimilar) to 7 (very similar). We provided
the following instructions for judgment, which is
compatible with Mitchell and Lapata (2010): (1)
rate 6 or 7 if the meanings of two statements are
the same or mostly the same (e.g., “Palmer team
with Jack Nicklaus” and “Palmer join with Jack
Nicklaus”); (2) rate 1 or 2 if two statements are
dissimilar or unrelated (e.g., “the kids grow up
with him” and “the kids forget about him”); (3)
rate 3, 4, or 5 if two statements have some rela-
tionships (e.g., “Many of you know about the site”
and “Many of you get more information about the
site”, where the two statements differ but also rea-
sonably resemble to some extent).

2.3 Annotation procedure
We use a crowdsourcing service CrowdFlower3
to collect similarity judgments from the crowds.
CrowdFlower has the mechanism to assess the re-
liability of annotators using Gold Standard Data
(Gold, hereafter), which consists of pairs of re-
lational patterns with similarity scores assigned.
Gold examples are regularly inserted throughout
the judgment job to enable measurement of the
performance of each worker4. Two authors of
this paper annotated 100 pairs extracted randomly
from 5,555 pairs, and prepared 80 Gold examples
showing high agreement. Ratings of the Gold ex-
amples were used merely for quality assessment
of the workers. In other words, we discarded the

3http://www.crowdflower.com/
4We allow ±1 differences in rating when we measure the

performance of the workers.

as a preprocessing step, mining phrasal expres-
sions with strong collocations from a training cor-
pus. However, this approach might be affected by
data sparseness, which lowers the quality of dis-
tributed representations.

Another simple but effective approach is ad-
ditive composition (Mitchell and Lapata, 2010),
where the distributed representation of a relational
pattern is computed by the mean of embeddings of
constituent words. Presuming that a relational pat-
tern consists of a sequence of T words w1, ..., wT ,
then we let xt ∈ Rd the embedding of the word
wt. This approach computes 1
t=1 xt as the em-
T
bedding of the relational pattern. Muraoka et al.
(2014) reported that the additive composition is a
strong baseline among various methods.

(cid:80)T

3.2 Recurrent Neural Network

Recently, a number of studies model seman-
tic compositions of phrases and sentences by
using (a variant of) Recurrent Neural Network
(RNN) (Sutskever et al., 2014; Tang et al., 2015).
For a given embedding xt at position t, the vanilla
RNN (Elman, 1990) computes the hidden state
ht ∈ Rd by the following recursive equation5,

ht = g(Wxxt + Whht−1).

(1)

Here, Wx and Wh are d × d matrices (parameters),
g(.) is the elementwise activation function (tanh).
We set h0 = 0 at t = 1. In essence, RNN com-
putes the hidden state ht based on the one at the
previous position (ht−1) and the word embedding
xt. Applying Equation 1 from t = 1 to T , we
use hT as the distributed representation of the re-
lational pattern.

3.3 RNN variants

We also employ Long Short-Term Memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
Gated Recurrent Unit (GRU) (Cho et al., 2014) as
an encoder for relational patterns. LSTM has been
applied successfully to various NLP tasks includ-
ing word segmentation (Chen et al., 2015), depen-
dency parsing (Dyer et al., 2015), machine trans-
lation (Sutskever et al., 2014), and sentiment anal-
ysis (Tai et al., 2015). GRU is also successful in
machine translation (Cho et al., 2014) and various

5We do not use a bias term in this study. We set the num-
ber of dimensions of hidden states identical to that of word
embeddings (d) so that we can adapt the objective function
of the Skip-gram model for training (Section 3.5).

Figure 2: Number of judgments for each similarity
rating. The total number of judgments is 27, 775
(5, 555 pairs × 5 workers).

similarity ratings of the Gold examples, and used
those judged by the workers.

To build a high quality dataset, we use judg-
ments from workers whose conﬁdence values (re-
liability scores) computed by CrowdFlower are
greater than 75%. Additionally, we force every
pair to have at least ﬁve judgments from the work-
ers. Consequently, 60 workers participated in this
job. In the ﬁnal version of this dataset, each pair
has ﬁve similarity ratings judged by the ﬁve most
reliable workers who were involved in the pair.

Figure 2 presents the number of judgments for
each similarity rating. Workers seldom rated 7
for a pair of relational patterns, probably because
most pairs have at least one difference in content
words. The mean of the standard deviations of
similarity ratings of all pairs is 1.16. Moreover, we
computed Spearman’s ρ between similarity judg-
ments from each worker and the mean of ﬁve judg-
ments in the dataset. The mean of Spearman’s ρ
of workers involved in the dataset is 0.728. These
statistics show a high inter-annotator agreement of
the dataset.

3 Encoder for Relational Patterns

The new dataset built in the previous section raises
two new questions — What is the reasonable
method (encoder) for computing the distributed
representations of relational patterns?
Is this
dataset useful to predict successes of distributed
representations of relational patterns in real ap-
plications? In order to answer these questions, this
section explores various methods for learning dis-
tributed representations of relational patterns.

3.1 Baseline methods without supervision

A na¨ıve approach would be to regard a rela-
tional pattern as a single unit (word) and to
train word/pattern embeddings as usual. In fact,
Mikolov et al. (2013) implemented this approach

forget gates in LSTM, we compute the input gate
it ∈ Rd and forget gate ft ∈ Rd at position t. We
use them to control the amount to propagate to the
hidden state ht from the current word xt and the
previous state ht−1.

it = σ(Wixxt + Wihht−1)
ft = σ(Wf xxt + Wf hht−1)
ht = g(ft (cid:12) ht−1 + it (cid:12) xt)

(2)

(3)

(4)

Here, Wix, Wih, Wf x, Wf h are d × d matri-
ces. Equation 4 is interpreted as a weighted ad-
ditive composition between the vector of the cur-
rent word xt and the vector of the previous hid-
den state ht−1. The elementwise weights are con-
trolled by the input gate it and forget gate ft; we
expect that input gates are closed (close to zero)
and forget gates are opened (close to one) when
the current word is a control verb or function word.
We name this architecture gated additive compo-
sition (GAC).

3.5 Parameter estimation: Skip-gram model

To train the parameters of the encoders (RNN,
LSTM, GRU, and GAC) on an unlabeled text cor-
pus, we adapt the Skip-gram model (Mikolov et
al., 2013). Formally, we designate an occurrence
of a relational pattern p as a subsequence of L
words ws, ..., ws+L−1 in a corpus. We deﬁne
δ words appearing before and after pattern p as
the context words, and let Cp = (s − δ, ..., s −
1, s + L, ..., s + L + δ) denote the indices of
the context words. We deﬁne the log-likelihood
of the relational pattern lp, following the objec-
tive function of Skip-gram with negative sampling
(SGNS) (Levy and Goldberg, 2014).

(cid:32)

lp =

(cid:88)

τ ∈Cp

log σ(h(cid:62)

p ˜xτ ) +

log σ(−h(cid:62)

p ˜x˘τ )

K
(cid:88)

k=1

(cid:33)

(5)

In this formula: K denotes the number of nega-
tive samples; hp ∈ Rd is the vector for the rela-
tional pattern p computed by each encoder such as
RNN; ˜xτ ∈ Rd is the context vector for the word
7; x˘τ (cid:48) ∈ Rd is the context vector for the word
wτ
7The Skip-gram model has two kinds of vectors xt and
˜xt assigned for a word wt. Equation 2 of the original pa-
per (Mikolov et al., 2013) denotes xt (word vector) as v
(input vector) and ˜xt (context vector) as v(cid:48) (output vector).
The word2vec implementation does not write context (out-
put) vectors but only word (input) vectors to a model ﬁle.
Therefore, we modiﬁed the source code to save context vec-
tors, and use them in Equation 5. This modiﬁcation ensures
the consistency of the entire model.

Figure 3: Overview of GAC trained with Skip-
gram model. GAC computes the distributed rep-
resentation of a relational pattern using the input
gate and forget gate, and learns parameters by pre-
dicting surrounding words (Skip-gram model).

tasks including sentence similarity, paraphrase de-
tection, and sentiment analysis (Kiros et al., 2015).
LSTM and GRU are similar in that the both ar-
chitectures have gates (input, forget, and output
for LSTM; reset and update for GRU) to rem-
edy the gradient vanishing or explosion problem
in training RNNs. Although some researchers re-
ported that GRU is superior to LSTM (Chung et
al., 2014), we have no consensus about the supe-
riority. Besides, we are not sure whether LSTM
or GRU is really necessary for relational patterns,
which ususlly consist of a few words. Thus, we
compare RNN, LSTM, and GRU empirically with
the same training data and the same training pro-
cedure. Similarly to RNN, we use the hidden state
hT of LSTM6 or GRU as the distributed represen-
tation of a relation pattern.

3.4 Gated Additive Composition (GAC)

In addition to the gradient problem, LSTM or
GRU may be suitable for relational patterns, hav-
ing the mechanism of adaptive control of gates for
input words and hidden states. Consider the rela-
tional pattern “X have access to Y”, whose mean-
ing is mostly identical to that of “X access Y”.
Because ‘have’ in the pattern is a light verb, it
may be harmful to incorporate the semantic vector
of ‘have’ into the distributed representation of the
pattern. The same may be true for the functional
word ‘to’ in the pattern. However, the additive
composition nor RNN does not have a mechanism
to ignore the semantic vectors of these words. It
is interesting to explore a method somewhere be-
tween additive composition and LSTM/GRU: ad-
ditive composition with the gating mechanism.

For this reason, we present an another variant
of RNN in this study. Inspired by the input and

6We omitted peephole connections and bias terms.

that were sampled from the unigram distribution8
at every iteration of (cid:80)
k.

At every occurrence of a relational pattern in
the corpus, we use Stochastic Gradient Descent
(SGD) and backpropagation through time (BPTT)
for training the parameters (matrices) in encoders.
More speciﬁcally, we initialize the word vectors xt
and context vectors ˜xt with pre-trained values, and
compute gradients for Equation 5 to update the pa-
rameters in encoders. In this way, each encoder
is trained to compose a vector of a relational pat-
tern so that it can predict the surrounding context
words. An advantage of this parameter estimation
is that the distributed representations of words and
relational patterns stay in the same vector space.
Figure 3 visualizes the training process for GAC.

4 Experiments

In Section 4.1, we investigate the performance of
the distributed representations computed by differ-
ent encoders on the pattern similarity task. Section
4.2 examines the contribution of the distributed
representations on SemEval 2010 Task 8, and dis-
cusses the usefulness of the new dataset to predict
successes of the relation classiﬁcation task.

4.1 Relational pattern similarity

For every pair in the dataset built in Section 2, we
compose the vectors of the two relational patterns
using an encoder described in Section 3, and com-
pute the cosine similarity of the two vectors. Re-
peating this process for all pairs in the dataset, we
measure Spearman’s ρ between the similarity val-
ues computed by the encoder and similarity ratings
assigned by humans.

4.1.1 Training procedure
We used ukWaC9 as the training corpus for the
encoders. This corpus includes the text of 2 bil-
lion words from Web pages crawled in the .uk
domain. Part-of-speech tags and lemmas are an-
notated by TreeTagger10. We used lowercased
lemmas throughout the experiments. We apply
word2vec to this corpus to pre-train word vec-
tors xt and context vectors ˜xt. All encoders use
word vectors xt to compose vectors of relational
patterns; and the Skip-gram model uses context

8We use the probability distribution of words raised to the

3/4 power (Mikolov et al., 2013).

9http://wacky.sslmit.unibo.it
10http://www.cis.uni-muenchen.de/

˜schmid/tools/TreeTagger/

Figure 4: Performance of each method on the rela-
tional pattern similarity task with variation in the
number of dimensions.

vectors ˜xt to compute the objective function and
gradients. We ﬁx the vectors xt and ˜xt with pre-
trained values during training.

We used Reverb (Fader et al., 2011) to the
ukWaC corpus to extract relational pattern can-
didates. To remove unuseful relational patterns,
we applied ﬁltering rules that are compatible with
those used in the publicly available extraction re-
sult11. Additionally, we discarded relational pat-
terns appearing in the evaluation dataset through-
out the experiments to assess the performance un-
der which an encoder composes vectors of unseen
relational patterns. This preprocessing yielded
127, 677 relational patterns.

All encoders were implemented on Chainer12, a
ﬂexible framework of neural networks. The hyper-
parameters of the Skip-gram model are identical
to those in Mikolov et al. (2013):
the width of
context window δ = 5, the number of negative
samples K = 5, the subsampling of 10−5. For
each encoder that requires training, we tried 0.025,
0.0025, and 0.00025 as an initial learning rate, and
selected the best value for the encoder. In contrast
to the presentation of Section 3, we compose a pat-
tern vector in backward order (from the last to the
ﬁrst) because preliminary experiments showed a
slight improvement with this treatment.

4.1.2 Results and discussions
Figure 4 shows Spearman’s rank correlations of
different encoders when the number of dimensions
of vectors is 100–500. The ﬁgure shows that GAC
achieves the best performance on all dimensions.
Figure 4 includes the performance of the na¨ıve
approach, “NoComp”, which regards a relational
pattern as a single unit (word). In this approach,

11http://reverb.cs.washington.edu/
12http://chainer.org/

Length
1
2
3
4
> 5
All

#
636
1,018
2,272
1,206
423
5,555

NoComp Add
0.324
0.319
0.386
0.306
0.315
0.340

0.324
0.215
0.234
0.208
0.278
0.215

LSTM GRU RNN GAC
0.324
0.324
0.321
0.257
0.404
0.344
0.323
0.314
0.357
0.369
0.370
0.336

0.324
0.274
0.370
0.329
0.384
0.356

0.324
0.285
0.387
0.319
0.394
0.362

Table 1: Spearman’s rank correlations on different pattern lengths (number of dimensions d = 500).

we allocated a vector hp for each relational pat-
tern p in Equation 5 instead of the vector compo-
sition, and trained the vectors of relational patterns
using the Skip-gram model. The performance was
poor for two reasons: we were unable to compute
similarity values for 1,744 pairs because relational
patterns in these pairs do not appear in ukWaC;
and relational patterns could not obtain sufﬁcient
statistics because of data sparseness.

Table 1 reports Spearman’s rank correlations
computed for each pattern length. Here, the length
of a relational-pattern pair is deﬁned by the maxi-
mum of the lengths of two patterns in the pair. In
length of 1, all methods achieve the same corre-
lation score because they use the same word vec-
tor xt. The table shows that additive composition
(Add) performs well for shorter relational patterns
(lengths of 2 and 3) but poorly for longer ones
(lengths of 4 and 5+). GAC also exhibits the sim-
ilar tendency to Add, but it outperforms Add for
shorter patterns (lengths of 2 and 3) probably be-
cause of the adaptive control of input and forget
gates.
In contrast, RNN and its variants (RNN,
GRU, and LSTM) enjoy the advantage on longer
patterns (lengths of 4 and 5+).

To examine the roles of input and forget gates of
GAC, we visualize the moments when input/forget
gates are wide open or closed. More precisely, we
extract the input word and scanned words when
|it|2 or |ft|2 is small (close to zero) or large (close
to one) on the relational-pattern dataset. We re-
state that we compose a pattern vector in backward
order (from the last to the ﬁrst): GAC scans ‘of’,
‘author’, and ‘be’ in this order for composing the
vector of the relational pattern ‘be author of’.

Table 2 displays the top three examples iden-
tiﬁed using the procedure. The table shows two
groups of tendencies. Input gates open and forget
gates close when scanned words are only a prepo-
sition and the current word is a content word. In
these situations, GAC tries to read the semantic

large it
(input
open)
small it
(input
close)
large ft
(forget
open)
small ft
(forget
close)

wt
reimburse
payable
liable
a
a
be
be
be
be
coauthor
capital
center

wt+1 wt+2 ...

for
in
to
charter member of
valuable member of
an avid reader of
eligible to participate in
require to submit
request to submit
of
of
of

Table 2: Prominent moments for input/forget
gates.

vector of the content word and to ignore the se-
mantic vector of the preposition. In contrast, input
gates close and forget gates open when the current
word is ‘be’ or ‘a’ and scanned words form a noun
phrase (e.g., “charter member of”), a complement
(e.g., “eligible to participate in”), or a passive
voice (e.g., “require(d) to submit”). This behavior
is also reasonable because GAC emphasizes infor-
mative words more than functional words.

4.2 Relation classiﬁcation

4.2.1 Experimental settings

To examine the usefulness of the dataset and dis-
tributed representations for a different application,
we address the task of relation classiﬁcation on
the SemEval 2010 Task 8 dataset (Hendrickx et
al., 2010).
In other words, we explore whether
high-quality distributed representations of rela-
tional patterns are effective to identify a relation
type of an entity pair.

The dataset consists of 10, 717 relation in-
stances (8, 000 training and 2, 717 test instances)
with their relation types annotated. The dataset
deﬁnes 9 directed relations (e.g.,CAUSE-EFFECT)

Method

Feature set

SVM
SVM + NoComp
SVM + LSTM
SVM + Add
SVM + GRU
SVM + RNN
SVM + GAC

Ranking loss + GAC w/ ﬁne-tuning

SVM (Rink and Harabagiu, 2010)
MV-RNN (Socher et al., 2012)

FCM (Gormley et al., 2015) w/o ﬁne-tuning

w/ ﬁne-tuning

RelEmb (Hashimoto et al., 2015)

CR-CNN (dos Santos et al., 2015) w/ Other
w/o Other
depLCNN (Xu et al., 2015)

depLCNN + NS

BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
+ dependency, WordNet, NE
embeddings, BoW, POS
+ dependency, WordNet, NE
BoW, POS, dependency, Google n-gram, etc.
embeddings, parse trees
+ WordNet, POS, NE
embeddings, dependency
+ WordNet
embeddings, dependency
+ NE
embeddings
+ dependency, WordNet, NE
embeddings, word position embeddings
embeddings, word position embeddings
embeddings, dependency
+ WordNet
embeddings, dependency
+ WordNet

F1
77.3
79.9
81.1
81.1
81.4
81.7
82.0
83.7

84.2
82.2
79.1
82.4
79.4
82.0
82.2
83.4
82.8
83.5
82.7
84.1
81.9
83.7
84.0
85.6

Table 3: F1 scores on the SemEval 2010 dataset.

and 1 undirected relation OTHER. Given a pair
of entity mentions, the task is to identify a rela-
tion type in 19 candidate labels (2 × 9 directed +
1 undirected relations). For example, given the
pair of entity mentions e1 = ‘burst’ and e2 =
‘pressure’ in the sentence “The burst has been
caused by water hammer pressure”, a system is
expected to predict CAUSE-EFFECT(e2, e1).

We used Support Vector Machines (SVM) with
a Radial Basis Function (RBF) kernel
imple-
mented in libsvm13. Basic features are: part-
of-speech tags (predicted by TreeTagger), surface
forms, lemmas of words appearing between an en-
tity pair, and lemmas of the words in the entity
pair. Additionally, we incorporate distributed rep-
resentations of a relational pattern, entities, and a
word before and after the entity pair (number of
dimensions d = 500).
In this task, we regard
words appearing between an entity pair as a re-
lational pattern. We compare the vector represen-

13https://www.csie.ntu.edu.tw/˜cjlin/

libsvm/

tations of relational patterns computed by the ﬁve
encoders presented in Section 4.1: additive com-
position, RNN, GRU, LSTM, and GAC. Hyper-
parameters related to SVM were tuned by 5-fold
cross validation on the training data.

4.2.2 Results and discussions

Table 3 presents the macro-averaged F1 scores on
the SemEval 2010 Task 8 dataset. The ﬁrst group
of the table provides basic features and enhance-
ments with the distributed representations. We
can observe a signiﬁcant improvement even from
the distributed representation of NoComp (77.3
to 79.9). Moreover, the distributed representation
that exhibited the high performance on the pattern
similarity task was also successful on this task;
GAC, which yielded the highest performance on
the pattern similarity task, also achieved the best
performance (82.0) of all encoders on this task.

It is noteworthy that the improvements brought
by the different encoders on this task roughly cor-
respond to the performance on the pattern similar-

ity task. This fact implies two potential impacts.
First, the distributed representations of relational
patterns are useful and easily transferable to other
tasks such as knowledge base population. Second,
the pattern similarity dataset provides a gauge to
predict successes of distributed representations in
another task.

We could further improve the performance of
SVM + GAC by incorporating external resources
in the similar manner as the previous studies
did. Concretely, SVM + GAC achieved 83.7 F1
score by adding features for WordNet, named en-
tities (NE), and dependency paths explained in
Hashimoto et al. (2015). Moreover, we could ob-
tain 84.2 F1 score, using the ranking based loss
function (dos Santos et al., 2015) and ﬁne-tuning
of the distributed representations initially trained
by GAC. Currently, this is the second best score
among the performance values reported in the pre-
vious studies on this task (the second group of Ta-
ble 3). If we could use the negative sampling tech-
nique proposed by Xu et al. (2015), we might im-
prove the performance further14.

5 Related Work

Mitchell and Lapata (2010) was a pioneering work
in semantic modeling of short phrases. They con-
structed the dataset that contains two-word phrase
pairs with semantic similarity judged by human
annotators. Korkontzelos et al. (2013) provided a
semantic similarity dataset with pairs of two words
and a single word. Wieting et al. (2015) annotated
a part of PPDB (Ganitkevitch et al., 2013) to eval-
uate semantic modeling of paraphrases. Although
the target unit of semantic modeling is different
from that for these previous studies, we follow the
annotation guideline and instruction of Mitchell
and Lapata (2010) to build the new dataset.

The task addressed in this paper is also re-
lated to the Semantic Textual Similarity (STS)
task (Agirre et al., 2012). STS is the task to mea-
sure the degree of semantic similarity between two
sentences. Even though a relational pattern ap-
pears as a part of a sentence, it may be difﬁcult
to transfer ﬁndings from one to another: for exam-
ple, the encoders of RNN and its variants explored
in this study may exhibit different characteristics,

14In fact, we made substantial efforts to introduce the nega-
tive sampling technique. However, Xu et al. (2015) omits the
detail of the technique probably because of the severe page
limit of short papers. For this reason, we could not reproduce
their method in this study.

inﬂuenced by the length and complexity of input
text expressions.

In addition to data construction, this paper ad-
dresses semantic modeling of relational patterns.
Nakashole et al. (2012) approached the similar
task by constructing a taxonomy of relational pat-
terns. They represented a vector of a relational pat-
tern as the distribution of entity pairs co-occurring
with the relational pattern. Grycner et al. (2015)
extended Nakashole et al. (2012) to generalize di-
mensions of the vector space (entity pairs) by in-
corporating hyponymy relation between entities.
They also used external resources to recognize the
transitivity of pattern pairs and applied transitivi-
ties to ﬁnd patterns in entailment relation. These
studies did not consider semantic composition of
relational patterns. Thus, they might suffer from
the data sparseness problem, as shown by No-
Comp in Figure 4.

Numerous studies have been aimed at encod-
ing distributed representations of phrases and sen-
tences from word embeddings by using: Recur-
sive Neural Network (Socher et al., 2011), Matrix
Vector Recursive Neural Network (Socher et al.,
2012), Recursive Neural Network with different
weight matrices corresponding to syntactic cate-
gories (Socher et al., 2013) or word types (Takase
et al., 2016), RNN (Sutskever et al., 2011),
LSTM (Sutskever et al., 2014), GRU (Cho et al.,
2014), PAS-CLBLM (Hashimoto et al., 2014), etc.
As described in Section 3, we applied RNN, GRU,
and LSTM to compute distributed representations
of relational patterns because recent papers have
demonstrated their superiority in semantic compo-
sition (Sutskever et al., 2014; Tang et al., 2015).
In this paper, we presented a comparative study of
different encoders for semantic modeling of rela-
tional patterns.

To investigate usefulness of the distributed rep-
resentations and the new dataset, we adopted the
relation classiﬁcation task (SemEval 2010 Task 8)
as a real application. On the SemEval 2010 Task
8, several studies considered semantic composi-
tion. Gormley et al. (2015) proposed Feature-rich
Compositional Embedding Model (FCM) that can
combine binary features (e.g., positional indica-
tors) with word embeddings via outer products.
dos Santos et al. (2015) addressed the task using
Convolutional Neural Network (CNN). Xu et al.
(2015) achieved a higher performance than dos
Santos et al. (2015) by application of CNN on de-

pendency paths.

In addition to the relation classiﬁcation task,
we brieﬂy describe other applications. To popu-
late a knowledge base, Riedel et al. (2013) jointly
learned latent feature vectors of entities, relational
patterns, and relation types in the knowledge base.
Toutanova et al. (2015) adapted CNN to capture
the compositional structure of a relational pattern
during the joint learning. For open domain ques-
tion answering, Yih et al. (2014) proposed the
method to map an interrogative sentence on an en-
tity and a relation type contained in a knowledge
base by using CNN.

Although these reports described good perfor-
mance on the respective tasks, we are unsure of the
generality of distributed representations trained
for a speciﬁc task such as the relation classiﬁca-
tion. In contrast, this paper demonstrated the con-
tribution of distributed representations trained in a
generic manner (with the Skip-gram objective) to
the task of relation classiﬁcation.

6 Conclusion

In this paper, we addressed the semantic model-
ing of relational patterns. We introduced the new
dataset in which humans rated multiple similar-
ity scores for every pair of relational patterns on
the dataset of semantic inference (Zeichner et al.,
2012). Additionally, we explored different en-
coders for composing distributed representations
of relational patterns. The experimental results
shows that Gated Additive Composition (GAC),
which is a combination of additive composition
and the gating mechanism, is effective to compose
distributed representations of relational patterns.
Furthermore, we demonstrated that the presented
dataset is useful to predict successes of the dis-
tributed representations in the relation classiﬁca-
tion task.

We expect that several further studies will use
the new dataset not only for distributed represen-
tations of relational patterns but also for other NLP
tasks (e.g., paraphrasing). Analyzing the internal
mechanism of LSTM, GRU, and GAC, we plan to
explore an alternative architecture of neural net-
works that is optimal for relational patterns.

Acknowledgments

26.5820, JSPS KAKENHI Grant number

no.
15H05318, and JST, CREST.

References

[Agirre et al.2012] Eneko Agirre, Daniel Cer, Mona
Diab, and Aitor Gonzalez-Agirre. 2012. Semeval-
2012 task 6: A pilot on semantic textual similarity.
In The First Joint Conference on Lexical and Com-
putational Semantics (*SEM 2012), pages 385–393.

[Chen et al.2015] Xinchi Chen, Xipeng Qiu, Chenxi
Zhu, Pengfei Liu, and Xuanjing Huang.
2015.
Long short-term memory neural networks for chi-
In Proceedings of the
nese word segmentation.
2015 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2015), pages 1197–
1206.

[Cho et al.2014] Kyunghyun Cho, Bart van Merrien-
boer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi
Bougares, Holger Schwenk, and Yoshua Bengio.
2014. Learning phrase representations using rnn
encoder–decoder for statistical machine translation.
In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2014), pages 1724–1734.

[Chung et al.2014] Junyoung Chung, C¸ aglar G¨ulc¸ehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural networks
on sequence modeling.

[dos Santos et al.2015] Cicero dos Santos, Bing Xiang,
and Bowen Zhou. 2015. Classifying relations by
ranking with convolutional neural networks. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (ACL-IJCNLP 2015), pages 626–634.

[Dyer et al.2015] Chris Dyer, Miguel Ballesteros,
Wang Ling, Austin Matthews, and Noah A. Smith.
2015. Transition-based dependency parsing with
In Proceedings of
stack long short-term memory.
the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International
Joint Conference on Natural Language Processing
(ACL-IJCNLP 2015), pages 334–343.

[Elman1990] Jeffrey L Elman. 1990. Finding structure

in time. Cognitive science, 14(2):179–211.

[Fader et al.2011] Anthony Fader, Stephen Soderland,
and Oren Etzioni. 2011.
Identifying relations for
open information extraction. In Proceedings of the
2011 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2011), pages 1535–
1545.

We thank the reviewers and Jun Suzuki for valu-
able comments. This work was partially sup-
ported by Grant-in-Aid for JSPS Fellows Grant

[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin
Van Durme, and Chris Callison-Burch. 2013. Ppdb:
In Proceedings of the
The paraphrase database.
2013 Conference of the North American Chapter of

the Association for Computational Linguistics: Hu-
man Language Technologies (NAACL-HLT 2013),
pages 758–764.

matrix factorization. In Advances in Neural Infor-
mation Processing Systems 27 (NIPS 2014), pages
2177–2185.

[Gormley et al.2015] Matthew R. Gormley, Mo Yu, and
Mark Dredze. 2015. Improved relation extraction
with feature-rich compositional embedding models.
In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1774–1784.

[Grycner et al.2015] Adam Grycner, Gerhard Weikum,
Jay Pujara, James Foulds, and Lise Getoor. 2015.
Relly: Inferring hypernym relationships between re-
In Proceedings of the 2015 Con-
lational phrases.
ference on Empirical Methods in Natural Language
Processing (EMNLP 2015), pages 971–981.

[Harris1954] Zellig Harris. 1954. Distributional struc-

ture. Word, 10(23):146–162.

[Lin and Pantel2001] Dekang Lin and Patrick Pantel.
2001. Dirt – discovery of inference rules from text.
In Proceedings of the Seventh ACM SIGKDD Inter-
national Conference on Knowledge Discovery and
Data Mining (KDD 01), pages 323–328.

[Mikolov et al.2013] Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases
In Advances in Neu-
and their compositionality.
ral Information Processing Systems 26 (NIPS 2013),
pages 3111–3119.

[Mitchell and Lapata2010] Jeff Mitchell and Mirella
Lapata. 2010. Composition in distributional models
of semantics. Cognitive Science, 34(8):1388–1439.

[Hashimoto et al.2014] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsu-
ruoka. 2014. Jointly learning word representations
and composition functions using predicate-argument
structures. In Proceedings of the 2014 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2014), pages 1544–1555.

[Muraoka et al.2014] Masayasu Muraoka, Sonse Shi-
maoka, Kazeto Yamamoto, Yotaro Watanabe,
Naoaki Okazaki, and Kentaro Inui. 2014. Finding
the best model among representative compositional
In Proceedings of the 28th Paciﬁc Asia
models.
Conference on Language, Information, and Compu-
tation (PACLIC 28), pages 65–74.

[Hashimoto et al.2015] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsuruoka.
2015. Task-oriented learning of word embeddings
for semantic relation classiﬁcation. In Proceedings
of the 19th Conference on Computational Natural
Language Learning (CoNLL 2015), pages 268–278.

[Hendrickx et al.2010] Iris Hendrickx, Su Nam Kim,
Zornitsa Kozareva, Preslav Nakov, Diarmuid
´O S´eaghdha, Sebastian Pad´o, Marco Pennacchiotti,
Lorenza Romano, and Stan Szpakowicz.
2010.
Semeval-2010 task 8: Multi-way classiﬁcation of se-
mantic relations between pairs of nominals. In Pro-
ceedings of the 5th International Workshop on Se-
mantic Evaluation, pages 33–38.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and J¨urgen Schmidhuber. 1997. Long short-term
memory. Neural Computation, 9(8):1735–1780.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S. Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. In Advances in Neural Information
Processing Systems 28 (NIPS 2015), pages 3276–
3284.

[Korkontzelos et al.2013] Ioannis

Korkontzelos,
Torsten Zesch, Fabio Massimo Zanzotto, and Chris
Biemann. 2013. Semeval-2013 task 5: Evaluating
In Second Joint Conference
phrasal semantics.
on Lexical and Computational Semantics (*SEM
2013), pages 39–47.

[Levy and Goldberg2014] Omer Levy and Yoav Gold-
berg. 2014. Neural word embedding as implicit

[Nakashole et al.2012] Ndapandula Nakashole, Ger-
hard Weikum, and Fabian Suchanek. 2012. Patty: A
taxonomy of relational patterns with semantic types.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL 2012), pages 1135–1145.

[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher Manning. 2014. Glove:
Global vectors for word representation. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP 2014),
pages 1532–1543.

[Riedel et al.2013] Sebastian Riedel, Limin Yao, An-
drew McCallum, and Benjamin M. Marlin. 2013.
Relation extraction with matrix factorization and
universal schemas. In Proceedings of the 2013 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL-HLT 2013), pages 74–
84.

[Rink and Harabagiu2010] Bryan Rink and Sanda
Harabagiu. 2010. Utd: Classifying semantic rela-
tions by combining lexical and semantic resources.
In Proceedings of the 5th International Workshop
on Semantic Evaluation, pages 256–259.

[Socher et al.2011] Richard Socher, Cliff Chiung-Yu
Lin, Andrew Y. Ng, and Christopher D. Manning.
2011. Parsing natural scenes and natural language
In Proceedings
with recursive neural networks.
of the 28th International Conference on Machine
learning (ICML 2011), pages 129–136.

[Xu et al.2015] Kun Xu, Yansong Feng, Songfang
Huang, and Dongyan Zhao. 2015. Semantic rela-
tion classiﬁcation via convolutional neural networks
In Proceedings of
with simple negative sampling.
the 2015 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP 2015), pages
536–540.

[Yih et al.2014] Wen-tau Yih, Xiaodong He,

and
Christopher Meek.
2014. Semantic parsing for
single-relation question answering. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL 2014), pages 643–
648.

[Zeichner et al.2012] Naomi Zeichner, Jonathan Be-
Crowdsourcing
rant, and Ido Dagan.
In Proceedings of the
inference-rule evaluation.
50th Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2012), pages 156–160.

2012.

[Socher et al.2012] Richard Socher, Brody Huval,
Christopher D. Manning, and Andrew Y. Ng.
2012. Semantic compositionality through recursive
In Proceedings of the 2012
matrix-vector spaces.
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning (EMNLP-CoNLL 2012), pages
1201–1211.

[Socher et al.2013] Richard

Socher,

John Bauer,
Christopher D. Manning, and Ng Andrew Y. 2013.
In
Parsing with compositional vector grammars.
Proceedings of
the
the 51st Annual Meeting of
Association for Computational Linguistics (ACL
2013), pages 455–465.

[Sutskever et al.2011] Ilya Sutskever, James Martens,
and Geoffrey Hinton. 2011. Generating text with
In Proceedings of the
recurrent neural networks.
28th International Conference on Machine Learning
(ICML 2011), pages 1017–1024.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals,
2014. Sequence to sequence
and Quoc V. Le.
learning with neural networks. In Advances in Neu-
ral Information Processing Systems 27 (NIPS 2014),
pages 3104–3112.

[Tai et al.2015] Kai Sheng Tai, Richard Socher, and
Christopher D. Manning. 2015. Improved seman-
tic representations from tree-structured long short-
term memory networks. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL-
IJCNLP 2015), pages 1556–1566.

[Takase et al.2016] Sho Takase, Naoaki Okazaki, and
Kentaro Inui. 2016. Modeling semantic composi-
tionality of relational patterns. Engineering Appli-
cations of Artiﬁcial Intelligence, 50(C):256–264.

[Tang et al.2015] Duyu Tang, Bing Qin, and Ting Liu.
2015. Document modeling with gated recurrent
neural network for sentiment classiﬁcation.
In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1422–1432.

[Toutanova et al.2015] Kristina

Toutanova,

Danqi
Chen, Patrick Pantel, Hoifung Poon, Pallavi Choud-
hury, and Michael Gamon. 2015. Representing text
for joint embedding of text and knowledge bases. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1499–1509.

[Wieting et al.2015] John Wieting, Mohit Bansal,
Kevin Gimpel, and Karen Livescu. 2015. From
paraphrase database to compositional paraphrase
the Associa-
model and back.
tion for Computational Linguistics (TACL 2015),
3:345–358.

Transactions of

Composing Distributed Representations of Relational Patterns

Sho Takase

Naoaki Okazaki Kentaro Inui

Graduate School of Information Sciences, Tohoku University
{takase, okazaki, inui}@ecei.tohoku.ac.jp

7
1
0
2
 
l
u
J
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
5
6
2
7
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Learning distributed representations for
relation instances is a central technique
In or-
in downstream NLP applications.
der to address semantic modeling of rela-
tional patterns, this paper constructs a new
dataset that provides multiple similarity
ratings for every pair of relational patterns
on the existing dataset (Zeichner et al.,
2012). In addition, we conduct a compar-
ative study of different encoders includ-
ing additive composition, RNN, LSTM,
and GRU for composing distributed rep-
resentations of relational patterns. We
also present Gated Additive Composition,
which is an enhancement of additive com-
position with the gating mechanism. Ex-
periments show that the new dataset does
not only enable detailed analyses of the
different encoders, but also provides a
gauge to predict successes of distributed
representations of relational patterns in the
relation classiﬁcation task.

1

Introduction

Knowledge about entities and their relations (re-
lation instances) are crucial for a wide spectrum
of NLP applications, e.g., information retrieval,
question answering, and recognizing textual en-
tailment. Learning distributed representations for
relation instances is a central technique in down-
stream applications as a number of recent studies
demonstrated the usefulness of distributed repre-
sentations for words (Mikolov et al., 2013; Pen-
nington et al., 2014) and sentences (Sutskever et
al., 2014; Cho et al., 2014; Kiros et al., 2015).

In particular, semantic modeling of relations
and their textual realizations (relational patterns
hereafter) is extremely important because a rela-

Figure 1: Overview of this study.

tion (e.g., causality) can be mentioned by various
expressions (e.g., “X cause Y”, “X lead to Y”, “Y is
associated with X”). To make matters worse, rela-
tional patterns are highly productive: we can pro-
duce a emphasized causality pattern “X increase
the severe risk of Y” from “X increase the risk of
Y” by inserting severe to the pattern.

To model the meanings of relational patterns,
the previous studies built a co-occurrence matrix
between relational patterns (e.g., “X increase the
risk of Y”) and entity pairs (e.g., “X: smoking,
Y: cancer”) (Lin and Pantel, 2001; Nakashole et
al., 2012). Based on the distributional hypothe-
sis (Harris, 1954), we can compute a semantic vec-
tor of a relational pattern from the co-occurrence
matrix, and measure the similarity of two rela-
tional patterns as the cosine similarity of the vec-
tors. Nowadays, several studies adopt distributed
representations computed by neural networks for
semantic modeling of relational patterns (Yih et
al., 2014; Takase et al., 2016).

Notwithstanding, the previous studies paid lit-
tle attention to explicitly evaluate semantic mod-
eling of relational patterns. In this paper, we con-
struct a new dataset that contains a pair of rela-
tional patterns with ﬁve similarity ratings judged
by human annotators. The new dataset shows a

high inter-annotator agreement, following the an-
notation guideline of Mitchell and Lapata (2010).
The dataset is publicly available on the Web site1.
In addition, we conduct a comparative study
of different encoders for composing distributed
representations of relational patterns. During the
comparative study, we present Gated Additive
Composition, which is an enhancement of addi-
tive composition with the gating mechanism. We
utilize the Skip-gram objective for training the pa-
rameters of the encoders on a large unlabeled cor-
pus. Experiments show that the new dataset does
not only enable detailed analyses of the different
encoders, but also provides a gauge to predict suc-
cesses of distributed representations of relational
patterns in another task (relation classiﬁcation).
Figure 1 illustrates the overview of this study.

2 Data Construction

2.1 Target relation instances

We build a new dataset upon the work of Ze-
ichner et al. (2012), which consists of relational
patterns with semantic inference labels annotated.
The dataset includes 5,555 pairs2 extracted by Re-
verb (Fader et al., 2011), 2,447 pairs with infer-
ence relation and 3,108 pairs (the rest) without
one.

Initially, we considered using this high-quality
dataset as it is for semantic modeling of relational
patterns. However, we found that inference rela-
tions exhibit quite different properties from those
of semantic similarity. Take a relational pattern
pair “X be the part of Y” and “X be an essential
part of Y” ﬁlled with “X = the small intestine, Y =
the digestive system” as an instance. The pattern
“X be the part of Y” does not entail “X be an essen-
tial part of Y” because the meaning of the former
does not include ‘essential’. Nevertheless, both
statements are similar, representing the same rela-
tion (PART-OF). Another uncomfortable pair is “X
fall down Y” and “X go up Y” ﬁlled with “X = the
dude, Y = the stairs”. The dataset indicates that the
former entails the latter probably because falling
down from the stairs requires going up there, but
they present the opposite meaning. For this rea-
son, we decided to re-annotate semantic similarity

1http://github.com/takase/relPatSim
2More precisely, the dataset includes 1,012 meaningless
pairs in addition to 5,555 pairs. A pair of relational patterns
was annotated as meaningless if the annotators were unable
to understand the meaning of the patterns easily. We ignore
the meaningless pairs in this study.

judgments on every pair of relational patterns on
the dataset.

2.2 Annotation guideline

We use instance-based judgment in a similar man-
ner to that of Zeichner et al. (2012) to secure
a high inter-annotator agreement.
In instance-
based judgment, an annotator judges a pair of
relational patterns whose variable slots are ﬁlled
with the same entity pair.
In other words, he
or she does not make a judgment for a pair of
relational patterns with variables, “X prevent Y”
and “X reduce the risk of Y”, but two instantiated
statements “Cephalexin prevent the bacteria” and
“Cephalexin reduce the risk of the bacteria” (“X =
Cephalexin, Y = the bacteria”). We use the entity
pairs provided in Zeichner et al. (2012).

We asked annotators to make a judgment for a
pair of relation instances by choosing a rating from
1 (dissimilar) to 7 (very similar). We provided
the following instructions for judgment, which is
compatible with Mitchell and Lapata (2010): (1)
rate 6 or 7 if the meanings of two statements are
the same or mostly the same (e.g., “Palmer team
with Jack Nicklaus” and “Palmer join with Jack
Nicklaus”); (2) rate 1 or 2 if two statements are
dissimilar or unrelated (e.g., “the kids grow up
with him” and “the kids forget about him”); (3)
rate 3, 4, or 5 if two statements have some rela-
tionships (e.g., “Many of you know about the site”
and “Many of you get more information about the
site”, where the two statements differ but also rea-
sonably resemble to some extent).

2.3 Annotation procedure
We use a crowdsourcing service CrowdFlower3
to collect similarity judgments from the crowds.
CrowdFlower has the mechanism to assess the re-
liability of annotators using Gold Standard Data
(Gold, hereafter), which consists of pairs of re-
lational patterns with similarity scores assigned.
Gold examples are regularly inserted throughout
the judgment job to enable measurement of the
performance of each worker4. Two authors of
this paper annotated 100 pairs extracted randomly
from 5,555 pairs, and prepared 80 Gold examples
showing high agreement. Ratings of the Gold ex-
amples were used merely for quality assessment
of the workers. In other words, we discarded the

3http://www.crowdflower.com/
4We allow ±1 differences in rating when we measure the

performance of the workers.

as a preprocessing step, mining phrasal expres-
sions with strong collocations from a training cor-
pus. However, this approach might be affected by
data sparseness, which lowers the quality of dis-
tributed representations.

Another simple but effective approach is ad-
ditive composition (Mitchell and Lapata, 2010),
where the distributed representation of a relational
pattern is computed by the mean of embeddings of
constituent words. Presuming that a relational pat-
tern consists of a sequence of T words w1, ..., wT ,
then we let xt ∈ Rd the embedding of the word
wt. This approach computes 1
t=1 xt as the em-
T
bedding of the relational pattern. Muraoka et al.
(2014) reported that the additive composition is a
strong baseline among various methods.

(cid:80)T

3.2 Recurrent Neural Network

Recently, a number of studies model seman-
tic compositions of phrases and sentences by
using (a variant of) Recurrent Neural Network
(RNN) (Sutskever et al., 2014; Tang et al., 2015).
For a given embedding xt at position t, the vanilla
RNN (Elman, 1990) computes the hidden state
ht ∈ Rd by the following recursive equation5,

ht = g(Wxxt + Whht−1).

(1)

Here, Wx and Wh are d × d matrices (parameters),
g(.) is the elementwise activation function (tanh).
We set h0 = 0 at t = 1. In essence, RNN com-
putes the hidden state ht based on the one at the
previous position (ht−1) and the word embedding
xt. Applying Equation 1 from t = 1 to T , we
use hT as the distributed representation of the re-
lational pattern.

3.3 RNN variants

We also employ Long Short-Term Memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
Gated Recurrent Unit (GRU) (Cho et al., 2014) as
an encoder for relational patterns. LSTM has been
applied successfully to various NLP tasks includ-
ing word segmentation (Chen et al., 2015), depen-
dency parsing (Dyer et al., 2015), machine trans-
lation (Sutskever et al., 2014), and sentiment anal-
ysis (Tai et al., 2015). GRU is also successful in
machine translation (Cho et al., 2014) and various

5We do not use a bias term in this study. We set the num-
ber of dimensions of hidden states identical to that of word
embeddings (d) so that we can adapt the objective function
of the Skip-gram model for training (Section 3.5).

Figure 2: Number of judgments for each similarity
rating. The total number of judgments is 27, 775
(5, 555 pairs × 5 workers).

similarity ratings of the Gold examples, and used
those judged by the workers.

To build a high quality dataset, we use judg-
ments from workers whose conﬁdence values (re-
liability scores) computed by CrowdFlower are
greater than 75%. Additionally, we force every
pair to have at least ﬁve judgments from the work-
ers. Consequently, 60 workers participated in this
job. In the ﬁnal version of this dataset, each pair
has ﬁve similarity ratings judged by the ﬁve most
reliable workers who were involved in the pair.

Figure 2 presents the number of judgments for
each similarity rating. Workers seldom rated 7
for a pair of relational patterns, probably because
most pairs have at least one difference in content
words. The mean of the standard deviations of
similarity ratings of all pairs is 1.16. Moreover, we
computed Spearman’s ρ between similarity judg-
ments from each worker and the mean of ﬁve judg-
ments in the dataset. The mean of Spearman’s ρ
of workers involved in the dataset is 0.728. These
statistics show a high inter-annotator agreement of
the dataset.

3 Encoder for Relational Patterns

The new dataset built in the previous section raises
two new questions — What is the reasonable
method (encoder) for computing the distributed
representations of relational patterns?
Is this
dataset useful to predict successes of distributed
representations of relational patterns in real ap-
plications? In order to answer these questions, this
section explores various methods for learning dis-
tributed representations of relational patterns.

3.1 Baseline methods without supervision

A na¨ıve approach would be to regard a rela-
tional pattern as a single unit (word) and to
train word/pattern embeddings as usual. In fact,
Mikolov et al. (2013) implemented this approach

forget gates in LSTM, we compute the input gate
it ∈ Rd and forget gate ft ∈ Rd at position t. We
use them to control the amount to propagate to the
hidden state ht from the current word xt and the
previous state ht−1.

it = σ(Wixxt + Wihht−1)
ft = σ(Wf xxt + Wf hht−1)
ht = g(ft (cid:12) ht−1 + it (cid:12) xt)

(2)

(3)

(4)

Here, Wix, Wih, Wf x, Wf h are d × d matri-
ces. Equation 4 is interpreted as a weighted ad-
ditive composition between the vector of the cur-
rent word xt and the vector of the previous hid-
den state ht−1. The elementwise weights are con-
trolled by the input gate it and forget gate ft; we
expect that input gates are closed (close to zero)
and forget gates are opened (close to one) when
the current word is a control verb or function word.
We name this architecture gated additive compo-
sition (GAC).

3.5 Parameter estimation: Skip-gram model

To train the parameters of the encoders (RNN,
LSTM, GRU, and GAC) on an unlabeled text cor-
pus, we adapt the Skip-gram model (Mikolov et
al., 2013). Formally, we designate an occurrence
of a relational pattern p as a subsequence of L
words ws, ..., ws+L−1 in a corpus. We deﬁne
δ words appearing before and after pattern p as
the context words, and let Cp = (s − δ, ..., s −
1, s + L, ..., s + L + δ) denote the indices of
the context words. We deﬁne the log-likelihood
of the relational pattern lp, following the objec-
tive function of Skip-gram with negative sampling
(SGNS) (Levy and Goldberg, 2014).

(cid:32)

lp =

(cid:88)

τ ∈Cp

log σ(h(cid:62)

p ˜xτ ) +

log σ(−h(cid:62)

p ˜x˘τ )

K
(cid:88)

k=1

(cid:33)

(5)

In this formula: K denotes the number of nega-
tive samples; hp ∈ Rd is the vector for the rela-
tional pattern p computed by each encoder such as
RNN; ˜xτ ∈ Rd is the context vector for the word
7; x˘τ (cid:48) ∈ Rd is the context vector for the word
wτ
7The Skip-gram model has two kinds of vectors xt and
˜xt assigned for a word wt. Equation 2 of the original pa-
per (Mikolov et al., 2013) denotes xt (word vector) as v
(input vector) and ˜xt (context vector) as v(cid:48) (output vector).
The word2vec implementation does not write context (out-
put) vectors but only word (input) vectors to a model ﬁle.
Therefore, we modiﬁed the source code to save context vec-
tors, and use them in Equation 5. This modiﬁcation ensures
the consistency of the entire model.

Figure 3: Overview of GAC trained with Skip-
gram model. GAC computes the distributed rep-
resentation of a relational pattern using the input
gate and forget gate, and learns parameters by pre-
dicting surrounding words (Skip-gram model).

tasks including sentence similarity, paraphrase de-
tection, and sentiment analysis (Kiros et al., 2015).
LSTM and GRU are similar in that the both ar-
chitectures have gates (input, forget, and output
for LSTM; reset and update for GRU) to rem-
edy the gradient vanishing or explosion problem
in training RNNs. Although some researchers re-
ported that GRU is superior to LSTM (Chung et
al., 2014), we have no consensus about the supe-
riority. Besides, we are not sure whether LSTM
or GRU is really necessary for relational patterns,
which ususlly consist of a few words. Thus, we
compare RNN, LSTM, and GRU empirically with
the same training data and the same training pro-
cedure. Similarly to RNN, we use the hidden state
hT of LSTM6 or GRU as the distributed represen-
tation of a relation pattern.

3.4 Gated Additive Composition (GAC)

In addition to the gradient problem, LSTM or
GRU may be suitable for relational patterns, hav-
ing the mechanism of adaptive control of gates for
input words and hidden states. Consider the rela-
tional pattern “X have access to Y”, whose mean-
ing is mostly identical to that of “X access Y”.
Because ‘have’ in the pattern is a light verb, it
may be harmful to incorporate the semantic vector
of ‘have’ into the distributed representation of the
pattern. The same may be true for the functional
word ‘to’ in the pattern. However, the additive
composition nor RNN does not have a mechanism
to ignore the semantic vectors of these words. It
is interesting to explore a method somewhere be-
tween additive composition and LSTM/GRU: ad-
ditive composition with the gating mechanism.

For this reason, we present an another variant
of RNN in this study. Inspired by the input and

6We omitted peephole connections and bias terms.

that were sampled from the unigram distribution8
at every iteration of (cid:80)
k.

At every occurrence of a relational pattern in
the corpus, we use Stochastic Gradient Descent
(SGD) and backpropagation through time (BPTT)
for training the parameters (matrices) in encoders.
More speciﬁcally, we initialize the word vectors xt
and context vectors ˜xt with pre-trained values, and
compute gradients for Equation 5 to update the pa-
rameters in encoders. In this way, each encoder
is trained to compose a vector of a relational pat-
tern so that it can predict the surrounding context
words. An advantage of this parameter estimation
is that the distributed representations of words and
relational patterns stay in the same vector space.
Figure 3 visualizes the training process for GAC.

4 Experiments

In Section 4.1, we investigate the performance of
the distributed representations computed by differ-
ent encoders on the pattern similarity task. Section
4.2 examines the contribution of the distributed
representations on SemEval 2010 Task 8, and dis-
cusses the usefulness of the new dataset to predict
successes of the relation classiﬁcation task.

4.1 Relational pattern similarity

For every pair in the dataset built in Section 2, we
compose the vectors of the two relational patterns
using an encoder described in Section 3, and com-
pute the cosine similarity of the two vectors. Re-
peating this process for all pairs in the dataset, we
measure Spearman’s ρ between the similarity val-
ues computed by the encoder and similarity ratings
assigned by humans.

4.1.1 Training procedure
We used ukWaC9 as the training corpus for the
encoders. This corpus includes the text of 2 bil-
lion words from Web pages crawled in the .uk
domain. Part-of-speech tags and lemmas are an-
notated by TreeTagger10. We used lowercased
lemmas throughout the experiments. We apply
word2vec to this corpus to pre-train word vec-
tors xt and context vectors ˜xt. All encoders use
word vectors xt to compose vectors of relational
patterns; and the Skip-gram model uses context

8We use the probability distribution of words raised to the

3/4 power (Mikolov et al., 2013).

9http://wacky.sslmit.unibo.it
10http://www.cis.uni-muenchen.de/

˜schmid/tools/TreeTagger/

Figure 4: Performance of each method on the rela-
tional pattern similarity task with variation in the
number of dimensions.

vectors ˜xt to compute the objective function and
gradients. We ﬁx the vectors xt and ˜xt with pre-
trained values during training.

We used Reverb (Fader et al., 2011) to the
ukWaC corpus to extract relational pattern can-
didates. To remove unuseful relational patterns,
we applied ﬁltering rules that are compatible with
those used in the publicly available extraction re-
sult11. Additionally, we discarded relational pat-
terns appearing in the evaluation dataset through-
out the experiments to assess the performance un-
der which an encoder composes vectors of unseen
relational patterns. This preprocessing yielded
127, 677 relational patterns.

All encoders were implemented on Chainer12, a
ﬂexible framework of neural networks. The hyper-
parameters of the Skip-gram model are identical
to those in Mikolov et al. (2013):
the width of
context window δ = 5, the number of negative
samples K = 5, the subsampling of 10−5. For
each encoder that requires training, we tried 0.025,
0.0025, and 0.00025 as an initial learning rate, and
selected the best value for the encoder. In contrast
to the presentation of Section 3, we compose a pat-
tern vector in backward order (from the last to the
ﬁrst) because preliminary experiments showed a
slight improvement with this treatment.

4.1.2 Results and discussions
Figure 4 shows Spearman’s rank correlations of
different encoders when the number of dimensions
of vectors is 100–500. The ﬁgure shows that GAC
achieves the best performance on all dimensions.
Figure 4 includes the performance of the na¨ıve
approach, “NoComp”, which regards a relational
pattern as a single unit (word). In this approach,

11http://reverb.cs.washington.edu/
12http://chainer.org/

Length
1
2
3
4
> 5
All

#
636
1,018
2,272
1,206
423
5,555

NoComp Add
0.324
0.319
0.386
0.306
0.315
0.340

0.324
0.215
0.234
0.208
0.278
0.215

LSTM GRU RNN GAC
0.324
0.324
0.321
0.257
0.404
0.344
0.323
0.314
0.357
0.369
0.370
0.336

0.324
0.274
0.370
0.329
0.384
0.356

0.324
0.285
0.387
0.319
0.394
0.362

Table 1: Spearman’s rank correlations on different pattern lengths (number of dimensions d = 500).

we allocated a vector hp for each relational pat-
tern p in Equation 5 instead of the vector compo-
sition, and trained the vectors of relational patterns
using the Skip-gram model. The performance was
poor for two reasons: we were unable to compute
similarity values for 1,744 pairs because relational
patterns in these pairs do not appear in ukWaC;
and relational patterns could not obtain sufﬁcient
statistics because of data sparseness.

Table 1 reports Spearman’s rank correlations
computed for each pattern length. Here, the length
of a relational-pattern pair is deﬁned by the maxi-
mum of the lengths of two patterns in the pair. In
length of 1, all methods achieve the same corre-
lation score because they use the same word vec-
tor xt. The table shows that additive composition
(Add) performs well for shorter relational patterns
(lengths of 2 and 3) but poorly for longer ones
(lengths of 4 and 5+). GAC also exhibits the sim-
ilar tendency to Add, but it outperforms Add for
shorter patterns (lengths of 2 and 3) probably be-
cause of the adaptive control of input and forget
gates.
In contrast, RNN and its variants (RNN,
GRU, and LSTM) enjoy the advantage on longer
patterns (lengths of 4 and 5+).

To examine the roles of input and forget gates of
GAC, we visualize the moments when input/forget
gates are wide open or closed. More precisely, we
extract the input word and scanned words when
|it|2 or |ft|2 is small (close to zero) or large (close
to one) on the relational-pattern dataset. We re-
state that we compose a pattern vector in backward
order (from the last to the ﬁrst): GAC scans ‘of’,
‘author’, and ‘be’ in this order for composing the
vector of the relational pattern ‘be author of’.

Table 2 displays the top three examples iden-
tiﬁed using the procedure. The table shows two
groups of tendencies. Input gates open and forget
gates close when scanned words are only a prepo-
sition and the current word is a content word. In
these situations, GAC tries to read the semantic

large it
(input
open)
small it
(input
close)
large ft
(forget
open)
small ft
(forget
close)

wt
reimburse
payable
liable
a
a
be
be
be
be
coauthor
capital
center

wt+1 wt+2 ...

for
in
to
charter member of
valuable member of
an avid reader of
eligible to participate in
require to submit
request to submit
of
of
of

Table 2: Prominent moments for input/forget
gates.

vector of the content word and to ignore the se-
mantic vector of the preposition. In contrast, input
gates close and forget gates open when the current
word is ‘be’ or ‘a’ and scanned words form a noun
phrase (e.g., “charter member of”), a complement
(e.g., “eligible to participate in”), or a passive
voice (e.g., “require(d) to submit”). This behavior
is also reasonable because GAC emphasizes infor-
mative words more than functional words.

4.2 Relation classiﬁcation

4.2.1 Experimental settings

To examine the usefulness of the dataset and dis-
tributed representations for a different application,
we address the task of relation classiﬁcation on
the SemEval 2010 Task 8 dataset (Hendrickx et
al., 2010).
In other words, we explore whether
high-quality distributed representations of rela-
tional patterns are effective to identify a relation
type of an entity pair.

The dataset consists of 10, 717 relation in-
stances (8, 000 training and 2, 717 test instances)
with their relation types annotated. The dataset
deﬁnes 9 directed relations (e.g.,CAUSE-EFFECT)

Method

Feature set

SVM
SVM + NoComp
SVM + LSTM
SVM + Add
SVM + GRU
SVM + RNN
SVM + GAC

Ranking loss + GAC w/ ﬁne-tuning

SVM (Rink and Harabagiu, 2010)
MV-RNN (Socher et al., 2012)

FCM (Gormley et al., 2015) w/o ﬁne-tuning

w/ ﬁne-tuning

RelEmb (Hashimoto et al., 2015)

CR-CNN (dos Santos et al., 2015) w/ Other
w/o Other
depLCNN (Xu et al., 2015)

depLCNN + NS

BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
embeddings, BoW, POS
+ dependency, WordNet, NE
embeddings, BoW, POS
+ dependency, WordNet, NE
BoW, POS, dependency, Google n-gram, etc.
embeddings, parse trees
+ WordNet, POS, NE
embeddings, dependency
+ WordNet
embeddings, dependency
+ NE
embeddings
+ dependency, WordNet, NE
embeddings, word position embeddings
embeddings, word position embeddings
embeddings, dependency
+ WordNet
embeddings, dependency
+ WordNet

F1
77.3
79.9
81.1
81.1
81.4
81.7
82.0
83.7

84.2
82.2
79.1
82.4
79.4
82.0
82.2
83.4
82.8
83.5
82.7
84.1
81.9
83.7
84.0
85.6

Table 3: F1 scores on the SemEval 2010 dataset.

and 1 undirected relation OTHER. Given a pair
of entity mentions, the task is to identify a rela-
tion type in 19 candidate labels (2 × 9 directed +
1 undirected relations). For example, given the
pair of entity mentions e1 = ‘burst’ and e2 =
‘pressure’ in the sentence “The burst has been
caused by water hammer pressure”, a system is
expected to predict CAUSE-EFFECT(e2, e1).

We used Support Vector Machines (SVM) with
a Radial Basis Function (RBF) kernel
imple-
mented in libsvm13. Basic features are: part-
of-speech tags (predicted by TreeTagger), surface
forms, lemmas of words appearing between an en-
tity pair, and lemmas of the words in the entity
pair. Additionally, we incorporate distributed rep-
resentations of a relational pattern, entities, and a
word before and after the entity pair (number of
dimensions d = 500).
In this task, we regard
words appearing between an entity pair as a re-
lational pattern. We compare the vector represen-

13https://www.csie.ntu.edu.tw/˜cjlin/

libsvm/

tations of relational patterns computed by the ﬁve
encoders presented in Section 4.1: additive com-
position, RNN, GRU, LSTM, and GAC. Hyper-
parameters related to SVM were tuned by 5-fold
cross validation on the training data.

4.2.2 Results and discussions

Table 3 presents the macro-averaged F1 scores on
the SemEval 2010 Task 8 dataset. The ﬁrst group
of the table provides basic features and enhance-
ments with the distributed representations. We
can observe a signiﬁcant improvement even from
the distributed representation of NoComp (77.3
to 79.9). Moreover, the distributed representation
that exhibited the high performance on the pattern
similarity task was also successful on this task;
GAC, which yielded the highest performance on
the pattern similarity task, also achieved the best
performance (82.0) of all encoders on this task.

It is noteworthy that the improvements brought
by the different encoders on this task roughly cor-
respond to the performance on the pattern similar-

ity task. This fact implies two potential impacts.
First, the distributed representations of relational
patterns are useful and easily transferable to other
tasks such as knowledge base population. Second,
the pattern similarity dataset provides a gauge to
predict successes of distributed representations in
another task.

We could further improve the performance of
SVM + GAC by incorporating external resources
in the similar manner as the previous studies
did. Concretely, SVM + GAC achieved 83.7 F1
score by adding features for WordNet, named en-
tities (NE), and dependency paths explained in
Hashimoto et al. (2015). Moreover, we could ob-
tain 84.2 F1 score, using the ranking based loss
function (dos Santos et al., 2015) and ﬁne-tuning
of the distributed representations initially trained
by GAC. Currently, this is the second best score
among the performance values reported in the pre-
vious studies on this task (the second group of Ta-
ble 3). If we could use the negative sampling tech-
nique proposed by Xu et al. (2015), we might im-
prove the performance further14.

5 Related Work

Mitchell and Lapata (2010) was a pioneering work
in semantic modeling of short phrases. They con-
structed the dataset that contains two-word phrase
pairs with semantic similarity judged by human
annotators. Korkontzelos et al. (2013) provided a
semantic similarity dataset with pairs of two words
and a single word. Wieting et al. (2015) annotated
a part of PPDB (Ganitkevitch et al., 2013) to eval-
uate semantic modeling of paraphrases. Although
the target unit of semantic modeling is different
from that for these previous studies, we follow the
annotation guideline and instruction of Mitchell
and Lapata (2010) to build the new dataset.

The task addressed in this paper is also re-
lated to the Semantic Textual Similarity (STS)
task (Agirre et al., 2012). STS is the task to mea-
sure the degree of semantic similarity between two
sentences. Even though a relational pattern ap-
pears as a part of a sentence, it may be difﬁcult
to transfer ﬁndings from one to another: for exam-
ple, the encoders of RNN and its variants explored
in this study may exhibit different characteristics,

14In fact, we made substantial efforts to introduce the nega-
tive sampling technique. However, Xu et al. (2015) omits the
detail of the technique probably because of the severe page
limit of short papers. For this reason, we could not reproduce
their method in this study.

inﬂuenced by the length and complexity of input
text expressions.

In addition to data construction, this paper ad-
dresses semantic modeling of relational patterns.
Nakashole et al. (2012) approached the similar
task by constructing a taxonomy of relational pat-
terns. They represented a vector of a relational pat-
tern as the distribution of entity pairs co-occurring
with the relational pattern. Grycner et al. (2015)
extended Nakashole et al. (2012) to generalize di-
mensions of the vector space (entity pairs) by in-
corporating hyponymy relation between entities.
They also used external resources to recognize the
transitivity of pattern pairs and applied transitivi-
ties to ﬁnd patterns in entailment relation. These
studies did not consider semantic composition of
relational patterns. Thus, they might suffer from
the data sparseness problem, as shown by No-
Comp in Figure 4.

Numerous studies have been aimed at encod-
ing distributed representations of phrases and sen-
tences from word embeddings by using: Recur-
sive Neural Network (Socher et al., 2011), Matrix
Vector Recursive Neural Network (Socher et al.,
2012), Recursive Neural Network with different
weight matrices corresponding to syntactic cate-
gories (Socher et al., 2013) or word types (Takase
et al., 2016), RNN (Sutskever et al., 2011),
LSTM (Sutskever et al., 2014), GRU (Cho et al.,
2014), PAS-CLBLM (Hashimoto et al., 2014), etc.
As described in Section 3, we applied RNN, GRU,
and LSTM to compute distributed representations
of relational patterns because recent papers have
demonstrated their superiority in semantic compo-
sition (Sutskever et al., 2014; Tang et al., 2015).
In this paper, we presented a comparative study of
different encoders for semantic modeling of rela-
tional patterns.

To investigate usefulness of the distributed rep-
resentations and the new dataset, we adopted the
relation classiﬁcation task (SemEval 2010 Task 8)
as a real application. On the SemEval 2010 Task
8, several studies considered semantic composi-
tion. Gormley et al. (2015) proposed Feature-rich
Compositional Embedding Model (FCM) that can
combine binary features (e.g., positional indica-
tors) with word embeddings via outer products.
dos Santos et al. (2015) addressed the task using
Convolutional Neural Network (CNN). Xu et al.
(2015) achieved a higher performance than dos
Santos et al. (2015) by application of CNN on de-

pendency paths.

In addition to the relation classiﬁcation task,
we brieﬂy describe other applications. To popu-
late a knowledge base, Riedel et al. (2013) jointly
learned latent feature vectors of entities, relational
patterns, and relation types in the knowledge base.
Toutanova et al. (2015) adapted CNN to capture
the compositional structure of a relational pattern
during the joint learning. For open domain ques-
tion answering, Yih et al. (2014) proposed the
method to map an interrogative sentence on an en-
tity and a relation type contained in a knowledge
base by using CNN.

Although these reports described good perfor-
mance on the respective tasks, we are unsure of the
generality of distributed representations trained
for a speciﬁc task such as the relation classiﬁca-
tion. In contrast, this paper demonstrated the con-
tribution of distributed representations trained in a
generic manner (with the Skip-gram objective) to
the task of relation classiﬁcation.

6 Conclusion

In this paper, we addressed the semantic model-
ing of relational patterns. We introduced the new
dataset in which humans rated multiple similar-
ity scores for every pair of relational patterns on
the dataset of semantic inference (Zeichner et al.,
2012). Additionally, we explored different en-
coders for composing distributed representations
of relational patterns. The experimental results
shows that Gated Additive Composition (GAC),
which is a combination of additive composition
and the gating mechanism, is effective to compose
distributed representations of relational patterns.
Furthermore, we demonstrated that the presented
dataset is useful to predict successes of the dis-
tributed representations in the relation classiﬁca-
tion task.

We expect that several further studies will use
the new dataset not only for distributed represen-
tations of relational patterns but also for other NLP
tasks (e.g., paraphrasing). Analyzing the internal
mechanism of LSTM, GRU, and GAC, we plan to
explore an alternative architecture of neural net-
works that is optimal for relational patterns.

Acknowledgments

26.5820, JSPS KAKENHI Grant number

no.
15H05318, and JST, CREST.

References

[Agirre et al.2012] Eneko Agirre, Daniel Cer, Mona
Diab, and Aitor Gonzalez-Agirre. 2012. Semeval-
2012 task 6: A pilot on semantic textual similarity.
In The First Joint Conference on Lexical and Com-
putational Semantics (*SEM 2012), pages 385–393.

[Chen et al.2015] Xinchi Chen, Xipeng Qiu, Chenxi
Zhu, Pengfei Liu, and Xuanjing Huang.
2015.
Long short-term memory neural networks for chi-
In Proceedings of the
nese word segmentation.
2015 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2015), pages 1197–
1206.

[Cho et al.2014] Kyunghyun Cho, Bart van Merrien-
boer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi
Bougares, Holger Schwenk, and Yoshua Bengio.
2014. Learning phrase representations using rnn
encoder–decoder for statistical machine translation.
In Proceedings of the 2014 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2014), pages 1724–1734.

[Chung et al.2014] Junyoung Chung, C¸ aglar G¨ulc¸ehre,
KyungHyun Cho, and Yoshua Bengio. 2014. Em-
pirical evaluation of gated recurrent neural networks
on sequence modeling.

[dos Santos et al.2015] Cicero dos Santos, Bing Xiang,
and Bowen Zhou. 2015. Classifying relations by
ranking with convolutional neural networks. In Pro-
ceedings of the 53rd Annual Meeting of the Associ-
ation for Computational Linguistics and the 7th In-
ternational Joint Conference on Natural Language
Processing (ACL-IJCNLP 2015), pages 626–634.

[Dyer et al.2015] Chris Dyer, Miguel Ballesteros,
Wang Ling, Austin Matthews, and Noah A. Smith.
2015. Transition-based dependency parsing with
In Proceedings of
stack long short-term memory.
the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International
Joint Conference on Natural Language Processing
(ACL-IJCNLP 2015), pages 334–343.

[Elman1990] Jeffrey L Elman. 1990. Finding structure

in time. Cognitive science, 14(2):179–211.

[Fader et al.2011] Anthony Fader, Stephen Soderland,
and Oren Etzioni. 2011.
Identifying relations for
open information extraction. In Proceedings of the
2011 Conference on Empirical Methods in Natural
Language Processing (EMNLP 2011), pages 1535–
1545.

We thank the reviewers and Jun Suzuki for valu-
able comments. This work was partially sup-
ported by Grant-in-Aid for JSPS Fellows Grant

[Ganitkevitch et al.2013] Juri Ganitkevitch, Benjamin
Van Durme, and Chris Callison-Burch. 2013. Ppdb:
In Proceedings of the
The paraphrase database.
2013 Conference of the North American Chapter of

the Association for Computational Linguistics: Hu-
man Language Technologies (NAACL-HLT 2013),
pages 758–764.

matrix factorization. In Advances in Neural Infor-
mation Processing Systems 27 (NIPS 2014), pages
2177–2185.

[Gormley et al.2015] Matthew R. Gormley, Mo Yu, and
Mark Dredze. 2015. Improved relation extraction
with feature-rich compositional embedding models.
In Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1774–1784.

[Grycner et al.2015] Adam Grycner, Gerhard Weikum,
Jay Pujara, James Foulds, and Lise Getoor. 2015.
Relly: Inferring hypernym relationships between re-
In Proceedings of the 2015 Con-
lational phrases.
ference on Empirical Methods in Natural Language
Processing (EMNLP 2015), pages 971–981.

[Harris1954] Zellig Harris. 1954. Distributional struc-

ture. Word, 10(23):146–162.

[Lin and Pantel2001] Dekang Lin and Patrick Pantel.
2001. Dirt – discovery of inference rules from text.
In Proceedings of the Seventh ACM SIGKDD Inter-
national Conference on Knowledge Discovery and
Data Mining (KDD 01), pages 323–328.

[Mikolov et al.2013] Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases
In Advances in Neu-
and their compositionality.
ral Information Processing Systems 26 (NIPS 2013),
pages 3111–3119.

[Mitchell and Lapata2010] Jeff Mitchell and Mirella
Lapata. 2010. Composition in distributional models
of semantics. Cognitive Science, 34(8):1388–1439.

[Hashimoto et al.2014] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsu-
ruoka. 2014. Jointly learning word representations
and composition functions using predicate-argument
structures. In Proceedings of the 2014 Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2014), pages 1544–1555.

[Muraoka et al.2014] Masayasu Muraoka, Sonse Shi-
maoka, Kazeto Yamamoto, Yotaro Watanabe,
Naoaki Okazaki, and Kentaro Inui. 2014. Finding
the best model among representative compositional
In Proceedings of the 28th Paciﬁc Asia
models.
Conference on Language, Information, and Compu-
tation (PACLIC 28), pages 65–74.

[Hashimoto et al.2015] Kazuma Hashimoto, Pontus
Stenetorp, Makoto Miwa, and Yoshimasa Tsuruoka.
2015. Task-oriented learning of word embeddings
for semantic relation classiﬁcation. In Proceedings
of the 19th Conference on Computational Natural
Language Learning (CoNLL 2015), pages 268–278.

[Hendrickx et al.2010] Iris Hendrickx, Su Nam Kim,
Zornitsa Kozareva, Preslav Nakov, Diarmuid
´O S´eaghdha, Sebastian Pad´o, Marco Pennacchiotti,
Lorenza Romano, and Stan Szpakowicz.
2010.
Semeval-2010 task 8: Multi-way classiﬁcation of se-
mantic relations between pairs of nominals. In Pro-
ceedings of the 5th International Workshop on Se-
mantic Evaluation, pages 33–38.

[Hochreiter and Schmidhuber1997] Sepp Hochreiter
and J¨urgen Schmidhuber. 1997. Long short-term
memory. Neural Computation, 9(8):1735–1780.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S. Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler.
2015. Skip-
thought vectors. In Advances in Neural Information
Processing Systems 28 (NIPS 2015), pages 3276–
3284.

[Korkontzelos et al.2013] Ioannis

Korkontzelos,
Torsten Zesch, Fabio Massimo Zanzotto, and Chris
Biemann. 2013. Semeval-2013 task 5: Evaluating
In Second Joint Conference
phrasal semantics.
on Lexical and Computational Semantics (*SEM
2013), pages 39–47.

[Levy and Goldberg2014] Omer Levy and Yoav Gold-
berg. 2014. Neural word embedding as implicit

[Nakashole et al.2012] Ndapandula Nakashole, Ger-
hard Weikum, and Fabian Suchanek. 2012. Patty: A
taxonomy of relational patterns with semantic types.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL 2012), pages 1135–1145.

[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher Manning. 2014. Glove:
Global vectors for word representation. In Proceed-
ings of the 2014 Conference on Empirical Methods
in Natural Language Processing (EMNLP 2014),
pages 1532–1543.

[Riedel et al.2013] Sebastian Riedel, Limin Yao, An-
drew McCallum, and Benjamin M. Marlin. 2013.
Relation extraction with matrix factorization and
universal schemas. In Proceedings of the 2013 Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies (NAACL-HLT 2013), pages 74–
84.

[Rink and Harabagiu2010] Bryan Rink and Sanda
Harabagiu. 2010. Utd: Classifying semantic rela-
tions by combining lexical and semantic resources.
In Proceedings of the 5th International Workshop
on Semantic Evaluation, pages 256–259.

[Socher et al.2011] Richard Socher, Cliff Chiung-Yu
Lin, Andrew Y. Ng, and Christopher D. Manning.
2011. Parsing natural scenes and natural language
In Proceedings
with recursive neural networks.
of the 28th International Conference on Machine
learning (ICML 2011), pages 129–136.

[Xu et al.2015] Kun Xu, Yansong Feng, Songfang
Huang, and Dongyan Zhao. 2015. Semantic rela-
tion classiﬁcation via convolutional neural networks
In Proceedings of
with simple negative sampling.
the 2015 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP 2015), pages
536–540.

[Yih et al.2014] Wen-tau Yih, Xiaodong He,

and
Christopher Meek.
2014. Semantic parsing for
single-relation question answering. In Proceedings
of the 52nd Annual Meeting of the Association for
Computational Linguistics (ACL 2014), pages 643–
648.

[Zeichner et al.2012] Naomi Zeichner, Jonathan Be-
Crowdsourcing
rant, and Ido Dagan.
In Proceedings of the
inference-rule evaluation.
50th Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2012), pages 156–160.

2012.

[Socher et al.2012] Richard Socher, Brody Huval,
Christopher D. Manning, and Andrew Y. Ng.
2012. Semantic compositionality through recursive
In Proceedings of the 2012
matrix-vector spaces.
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning (EMNLP-CoNLL 2012), pages
1201–1211.

[Socher et al.2013] Richard

Socher,

John Bauer,
Christopher D. Manning, and Ng Andrew Y. 2013.
In
Parsing with compositional vector grammars.
Proceedings of
the
the 51st Annual Meeting of
Association for Computational Linguistics (ACL
2013), pages 455–465.

[Sutskever et al.2011] Ilya Sutskever, James Martens,
and Geoffrey Hinton. 2011. Generating text with
In Proceedings of the
recurrent neural networks.
28th International Conference on Machine Learning
(ICML 2011), pages 1017–1024.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals,
2014. Sequence to sequence
and Quoc V. Le.
learning with neural networks. In Advances in Neu-
ral Information Processing Systems 27 (NIPS 2014),
pages 3104–3112.

[Tai et al.2015] Kai Sheng Tai, Richard Socher, and
Christopher D. Manning. 2015. Improved seman-
tic representations from tree-structured long short-
term memory networks. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics and the 7th International Joint
Conference on Natural Language Processing (ACL-
IJCNLP 2015), pages 1556–1566.

[Takase et al.2016] Sho Takase, Naoaki Okazaki, and
Kentaro Inui. 2016. Modeling semantic composi-
tionality of relational patterns. Engineering Appli-
cations of Artiﬁcial Intelligence, 50(C):256–264.

[Tang et al.2015] Duyu Tang, Bing Qin, and Ting Liu.
2015. Document modeling with gated recurrent
neural network for sentiment classiﬁcation.
In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1422–1432.

[Toutanova et al.2015] Kristina

Toutanova,

Danqi
Chen, Patrick Pantel, Hoifung Poon, Pallavi Choud-
hury, and Michael Gamon. 2015. Representing text
for joint embedding of text and knowledge bases. In
Proceedings of the 2015 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2015), pages 1499–1509.

[Wieting et al.2015] John Wieting, Mohit Bansal,
Kevin Gimpel, and Karen Livescu. 2015. From
paraphrase database to compositional paraphrase
the Associa-
model and back.
tion for Computational Linguistics (TACL 2015),
3:345–358.

Transactions of

