Detect to Track and Track to Detect

Christoph Feichtenhofer∗
Graz University of Technology
feichtenhofer@tugraz.at

Axel Pinz
Graz University of Technology
axel.pinz@tugraz.at

Andrew Zisserman
University of Oxford
az@robots.ox.ac.uk

8
1
0
2
 
r
a

M
 
7
 
 
]

V
C
.
s
c
[
 
 
2
v
8
5
9
3
0
.
0
1
7
1
:
v
i
X
r
a

Abstract

Recent approaches for high accuracy detection and
tracking of object categories in video consist of complex
multistage solutions that become more cumbersome each
year. In this paper we propose a ConvNet architecture that
jointly performs detection and tracking, solving the task in
a simple and effective way.

Our contributions are threefold: (i) we set up a ConvNet
architecture for simultaneous detection and tracking, using
a multi-task objective for frame-based object detection and
across-frame track regression; (ii) we introduce correlation
features that represent object co-occurrences across time
to aid the ConvNet during tracking; and (iii) we link
the frame level detections based on our across-frame
tracklets to produce high accuracy detections at the video
level. Our ConvNet architecture for spatiotemporal object
detection is evaluated on the large-scale ImageNet VID
dataset where it achieves state-of-the-art results. Our
approach provides better single model performance than
the winning method of the last ImageNet challenge while
being conceptually much simpler. Finally, we show that by
increasing the temporal stride we can dramatically increase
the tracker speed. Our code and models are available at
http://github.com/feichtenhofer/detect-track

1. Introduction

Object detection in images has received a lot of atten-
tion over the last years with tremendous progress mostly
due to the emergence of deep Convolutional Networks
[12, 19, 21, 36, 38] and their region based descendants
[3, 9, 10, 31].
In the case of object detection and track-
ing in videos, recent approaches have mostly used detec-
tion as a ﬁrst step, followed by post-processing methods
such as applying a tracker to propagate detection scores
over time. Such variations on the ‘tracking by detection’
paradigm have seen impressive progress but are dominated

∗Christoph Feichtenhofer is a recipient of a DOC Fellowship of the
Austrian Academy of Sciences at the Institute of Electrical Measurement
and Measurement Signal Processing, Graz University of Technology.

(a)

(c)

(b)

(d)

Figure 1. Challenges for video object detection. Training examples
for: (a) bicycle, bird, rabbit; (b) dog; (c) fox; and (d) red panda.

by frame-level detection methods.

Object detection in video has seen a surge in interest
lately, especially since the introduction of the ImageNet
[32] video object detection challenge (VID). Different from
the ImageNet object detection (DET) challenge, VID shows
objects in image sequences and comes with additional
challenges of (i) size:
the sheer number of frames that
video provides (VID has around 1.3M images, compared
to around 400K in DET or 100K in COCO [22]), (ii)
motion blur: due to rapid camera or object motion, (iii)
quality: internet video clips are typically of lower quality
than static photos, (iv) partial occlusion: due to change in
objects/viewer positioning, and (v) pose: unconventional
In
object-to-camera poses are frequently seen in video.
Fig. 1, we show example images from the VID dataset; for
more examples please see1.

To solve this challenging task, recent top entries in the
ImageNet [32] video detection challenge use exhaustive
post-processing on top of frame-level detectors. For ex-
ample, the winner [17] of ILSVRC’15 uses two multi-stage
Faster R-CNN [31] detection frameworks, context suppres-
sion, multi-scale training/testing, a ConvNet tracker [39],
optical-ﬂow based score propagation and model ensembles.
In this paper we propose a uniﬁed approach to tackle the
problem of object detection in realistic video. Our object-
ive is to directly infer a ‘tracklet’ over multiple frames by
simultaneously carrying out detection and tracking with a

1http://vision.cs.unc.edu/ilsvrc2015/ui/vid

ConvNet. To achieve this we propose to extend the R-FCN
[3] detector with a tracking formulation that is inspired by
current correlation and regression based trackers [1, 13, 25].
We train a fully convolutional architecture end-to-end us-
ing a detection and tracking based loss and term our ap-
proach D&T for joint Detection and Tracking. The input
to the network consists of multiple frames which are ﬁrst
passed through a ConvNet trunk (e.g. a ResNet-101 [12])
to produce convolutional features which are shared for the
task of detection and tracking. We compute convolutional
cross-correlation between the feature responses of adjacent
frames to estimate the local displacement at different fea-
ture scales. On top of the features, we employ an RoI-
pooling layer [3] to classify and regress box proposals as
well as an RoI-tracking layer that regresses box transforma-
tions (translation, scale, aspect ratio) across frames. Finally,
to infer long-term tubes of objects across a video we link
detections based on our tracklets.

An evaluation on the large-scale ImageNet VID dataset
shows that our approach is able to achieve better single-
model performance than the winner of the last ILSVRC’16
challenge, despite being conceptually simple and much
faster. Moreover, we show that including a tracking loss
may improve feature learning for better static object detec-
tion, and we also present a very fast version of D&T that
works on temporally-strided input frames.

2. Related work

Object detection. Two families of detectors are currently
popular: First, region proposal based detectors R-CNN
[10], Fast R-CNN [9], Faster R-CNN [31] and R-FCN [3]
and second, detectors that directly predict boxes for an im-
age in one step such as YOLO [30] and SSD [23].

Our approach builds on R-FCN [3] which is a simple and
efﬁcient framework for object detection on region propos-
als with a fully convolutional nature. In terms of accuracy it
is competitive with Faster R-CNN [31] which uses a multi-
layer network that is evaluated per-region (and thus has a
cost growing linearly with the number of candidate RoIs).
R-FCN reduces the cost for region classiﬁcation by pushing
the region-wise operations to the end of the network with
the introduction of a position-sensitive RoI pooling layer
which works on convolutional features that encode the spa-
tially subsampled class scores of input RoIs.

Tracking. Tracking is also an extensively studied prob-
lem in computer vision with most recent progress devoted
to trackers operating on deep ConvNet features.
In [26]
a ConvNet is ﬁne-tuned at test-time to track a target from
the same video via detection and bounding box regression.
Training on the examples of a test sequence is slow and
also not applicable in the object detection setting. Other
methods use pre-trained ConvNet features to track and have

achieved strong performance either with correlation [1, 25]
or regression trackers on heat maps [39] or bounding boxes
[13]. The regression tracker in [13] is related to our method.
It is based on a Siamese ConvNet that predicts the location
in the second image of the object shown in the center of the
previous image. Since this tracker predicts a bounding box
instead of just the position, it is able to model changes in
scale and aspect of the tracked template. The major draw-
back of this approach is that it only can process a single tar-
get template and it also has to rely on signiﬁcant data aug-
mentation to learn all possible transformations of tracked
boxes. The approach in [1] is an example of a correlation
tracker and inspires our method. The tracker also uses a
fully-convolutional Siamese network that takes as input the
tracking template and the search image. The ConvNet fea-
tures from the last convolutional layer are correlated to ﬁnd
the target position in the response map. One drawback of
many correlation trackers [1, 25] is that they only work on
single targets and do not account for changes in object scale
and aspect ratio.

Video object detection. Action detection is also a re-
lated problem and has received increased attention recently,
mostly with methods building on two-stream ConvNets
[35]. In [11] a method is presented that uses a two-stream
R-CNN [10] to classify regions and link them across frames
based on the action predictions and their spatial overlap.
This method has been adopted by [33] and [27] where the
R-CNN was replaced by Faster R-CNN with the RPN oper-
ating on two streams of appearance and motion information.
One area of interest is learning to detect and localize in
each frame (e.g. in video co-localization) with only weak
supervision. The YouTube Object Dataset [28], has been
used for this purpose, e.g. [15, 20].

Since the object detection from video task has been in-
troduced at the ImageNet challenge, it has drawn signiﬁc-
ant attention.
In [18] tubelet proposals are generated by
applying a tracker to frame-based bounding box propos-
als. The detector scores across the video are re-scored by
a 1D CNN model. In their corresponding ILSVRC submis-
sion the group [17] added a propagation of scores to nearby
frames based on optical ﬂows between frames and sup-
pression of class scores that are not among the top classes
in a video. A more recent work [16] introduces a tube-
let proposal network that regresses static object proposals
over multiple frames, extracts features by applying Faster
R-CNN which are ﬁnally processed by an encoder-decoder
LSTM. In deep feature ﬂow [42] a recognition ConvNet is
applied to key frames only and an optical ﬂow ConvNet is
used for propagating the deep feature maps via a ﬂow ﬁeld
to the rest of the frames. This approach can increase detec-
tion speed by a factor of 5 at a slight accuracy cost. The
approach is error-prone due largely to two aspects: First,

propagation from the key frame to the current frame can
be erroneous and, second, the key frames can miss features
from current frames. Very recently a new large-scale data-
set for video object detection has been introduced [29] with
single objects annotations over video sequences.

3. D&T Approach

In this section we ﬁrst give an overview of the Detect
and Track (D&T) approach (Sect. 3.1) that generates track-
lets given two (or more) frames as input. We then give
the details, starting with the baseline R-FCN detector [3]
(Sect. 3.2), and formulating the tracking objective as cross-
frame bounding box regression (Sect. 3.3); ﬁnally, we intro-
duce the correlation features (Sect. 3.4) that aid the network
in the tracking process.

Sect. 4 shows how we link across-frame tracklets to
tubes over the temporal extent of a video, and Sect. 5 de-
scribes how we apply D&T to the ImageNet VID challenge.

3.1. D&T overview

We aim at jointly detecting and tracking (D&T) objects
in video. Fig. 2 illustrates our D&T architecture. We build
on the R-FCN [3] object detection framework which is fully
convolutional up to region classiﬁcation and regression, and
extend it for multi-frame detection and tracking. Given
a set of two high-resolution input frames our architecture
ﬁrst computes convolutional feature maps that are shared
for the tasks of detection and tracking (e.g. the features of
a ResNet-101[12]). An RPN is used to propose candid-
ate regions in each frame based on the objectness likeli-
hood for pre-deﬁned candidate boxes (i.e. “anchors”[31]).
Based on these regions, RoI pooling is employed to aggreg-
ate position-sensitive score and regression maps, produced
from intermediate convolutional layers, to classify boxes
and reﬁne their coordinates (regression), respectively.

We extend this architecture by introducing a regressor
that
takes the intermediate position-sensitive regression
maps from both frames (together with correlation maps, see
below) as input to an RoI tracking operation which out-
puts the box transformation from one frame to the other.
The correspondence between frames is thus simply accom-
plished by pooling features from both frames, at the same
proposal region. We train the RoI tracking task by extend-
ing the multi-task objective of R-FCN with a tracking loss
that regresses object coordinates across frames. Our track-
ing loss operates on ground truth objects and evaluates a
soft L1 norm [9] between coordinates of the predicted track
and the ground truth track of an object.

Such a tracking formulation can be seen as a multi-
object extension of the single target tracker in [13] where
a ConvNet is trained to infer an object’s bounding box from
features of the two frames. One drawback of such an ap-
proach is that it does not exploit translational equivariance

which means that the tracker has to learn all possible trans-
lations from training data. Thus such a tracker requires ex-
ceptional data augmentation (artiﬁcially scaling and shifting
boxes) during training [13] .

A tracking representation that is based on correlation ﬁl-
ters [2, 4, 14] can exploit the translational equivariance as
correlation is equivariant to translation. Recent correlation
trackers [1, 25] typically work on high-level ConvNet fea-
tures and compute the cross correlation between a tracking
template and the search image (or a local region around the
tracked position from the previous frame). The resulting
correlation map measures the similarity between the tem-
plate and the search image for all circular shifts along the
horizontal and vertical dimension. The displacement of a
target object can thus be found by taking the maximum of
the correlation response map.

Different from typical correlation trackers that work on
single target templates, we aim to track multiple objects
simultaneously. We compute correlation maps for all posi-
tions in a feature map and let RoI tracking additionally op-
erate on these feature maps for better track regression. Our
architecture is able to be trained end-to-end taking as input
frames from a video and producing object detections and
their tracks. The next sections describe how we structure
our architecture for end-to-end learning of object detection
and tracklets.

3.2. Object detection and tracking in R-FCN

Our architecture takes frames It ∈ RH0×W0×3 at time t
and pushes them through a backbone ConvNet (i.e. ResNet-
l ∈ RHl×Wl×Dl where
101 [12]) to obtain feature maps xt
Wl, Hl and Dl are the width, height and number of chan-
nels of the respective feature map output by layer l. As in
R-FCN [3] we reduce the effective stride at the last convo-
lutional layer from 32 pixels to 16 pixels by modifying the
conv5 block to have unit spatial stride, and also increase its
receptive ﬁeld by dilated convolutions [24].

Our overall system builds on the R-FCN [3] object de-
tector which works in two stages: ﬁrst it extracts candid-
ate regions of interest (RoI) using a Region Proposal Net-
work (RPN) [31]; and, second, it performs region classi-
ﬁcation into different object categories and background by
using a position-sensitive RoI pooling layer [3]. The in-
put to this RoI pooling layer comes from an extra convolu-
tional layer with output xt
cls that operates on the last convo-
lutional layer of a ResNet [12]. The layer produces a bank
of Dcls = k2(C + 1) position-sensitive score maps which
correspond to a k × k spatial grid describing relative pos-
itions to be used in the RoI pooling operation for each of
the C categories and background. Applying the softmax
function to the outputs leads to a probability distribution p
over C + 1 classes for each RoI. In a second branch R-FCN
puts a sibling convolutional layer with output xt
reg after the

Figure 2. Architecture of our Detect and Track (D&T) approach (see Section 3 for details).

last convolutional layer for bounding box regression, again
a position-sensitive RoI pooling operation is performed on
this bank of Dcls = 4k2 maps for class-agnostic bounding
box prediction of a box b = (bx, by, bw, bh).

Let us now consider a pair of frames It, It+τ , sampled at
time t and t+τ , given as input to the network. We introduce
an inter-frame bounding box regression layer that performs
position sensitive RoI pooling on the concatenation of the
bounding box regression features {xt
reg } to predict
w , ∆t+τ
the transformation ∆t+τ = (∆t+τ
) of
the RoIs from t to t + τ . The correlation features, that are
also used by the bounding box regressors, are described in
section 3.4. Fig. 3 shows an illustration of this approach.

reg, xt+τ
, ∆t+τ
, ∆t+τ
y

h

x

3.3. Multitask detection and tracking objective

To learn this regressor, we extend the multi-task loss of
Fast R-CNN [9], consisting of a combined classiﬁcation
Lcls and regression loss Lreg, with an additional term that
scores the tracking across two frames Ltra. For a single
iteration and a batch of N RoIs the network predicts soft-
max probabilities {pi}N
i=1, and
}Ntra
cross-frame RoI-tracks {∆t+τ
i=1 . Our overall objective
function is written as:

i=1, regression offsets {bi}N

i

L({pi}, {bi}, {∆i}) =

Lcls(pi,c∗ )

1
N

N
(cid:88)

i=1

+λ

1
Nf g

N
(cid:88)

i=1

+λ

1
Ntra

Ntra(cid:88)

i=1

[c∗

i > 0]Lreg(bi, b∗
i )

(1)

Ltra(∆t+τ

i

, ∆∗,t+τ
i

).

The ground truth class label of an RoI is deﬁned by c∗
i
and its predicted softmax score is pi,c∗ . b∗
i is the ground
truth regression target, and ∆∗,t+τ
is the track regression
target. The indicator function [c∗
i > 0] is 1 for fore-

i

ground RoIs and 0 for background RoIs (with c∗
i = 0).
Lcls(pi,c∗ ) = − log(pi,c∗ ) is the cross-entropy loss for box
classiﬁcation, and Lreg & Ltra are bounding box and track
regression losses deﬁned as the smooth L1 function in [9].
The tradeoff parameter is set to λ = 1 as in [3, 9]. The as-
signment of RoIs to ground truth is as follows: a class label
c∗ and regression targets b∗ are assigned if the RoI overlaps
with a ground-truth box at least by 0.5 in intersection-over-
union (IoU) and the tracking target ∆∗,t+τ is assigned only
to ground truth targets which are appearing in both frames.
Thus, the ﬁrst term of (1) is active for all N boxes in a train-
ing batch, the second term is active for Nf g foreground RoIs
and the last term is active for Ntra ground truth RoIs which
have a track correspondence across the two frames.

y, Bt

x, Bt

For track regression we use the bounding box re-
gression parametrisation of R-CNN [9, 10, 31]. For a
single object we have ground truth box coordinates Bt =
h) in frame t, and similarly Bt+τ for frame
(Bt
t + τ , denoting the horizontal & vertical centre coordinates
and its width and height. The tracking regression values for
the target ∆∗,t+τ = {∆∗,t+τ
} are
then

, ∆∗,t+τ
h

, ∆∗,t+τ
y

, ∆∗,t+τ
w

w, Bt

x

∆∗,t+τ
x

=

∆∗,t+τ
y

=

(2)

∆∗,t+τ
w

= log(

∆∗,t+τ
h

= log(

)).

(3)

Bt+τ

x − Bt
x
Bt
w
Bt+τ
w
Bt
w

)

Bt+τ

y − Bt
y
Bt
h
Bt+τ
h
Bt
h

3.4. Correlation features for object tracking

Different from typical correlation trackers on single tar-
get templates, we aim to track multiple objects simultan-
eously. We compute correlation maps for all positions in
a feature map and let RoI pooling operate on these feature
maps for track regression. Considering all possible circular
shifts in a feature map would lead to large output dimen-
sionality and also produce responses for too large displace-

Figure 3. Schematic of our approach for two frames at time t and t + τ . The inputs are ﬁrst passed through a fully-convolutional network
to produce feature maps. A correlation layer operates on multiple feature maps of different scales (only the coarsest scale is shown in the
ﬁgure) and estimates local feature similarity for various offsets between the two frames. Finally, position sensitive RoI-pooling [3] operates
on the convolutional features of the individual frames to produce per-frame detections and also on a stack of individual frame-features as
well as the between frame correlation features to output regression offsets of the boxes across the two frames (RoI-tracking).

ments. Therefore, we restrict correlation to a local neigh-
bourhood. This idea was originally used for optical ﬂow
estimation in [5], where a correlation layer is introduced to
aid a ConvNet in matching feature points between frames.
The correlation layer performs point-wise feature compar-
l, xt+τ
ison of two feature maps xt

l

xt,t+τ

corr (i, j, p, q) =

l(i, j), xt+τ
xt

l

(i + p, j + q)

(4)

(cid:68)

(cid:69)

where −d ≤ p ≤ d and −d ≤ q ≤ d are offsets to compare
features in a square neighbourhood around the locations i, j
in the feature map, deﬁned by the maximum displacement,
d. Thus the output of the correlation layer is a feature map
of size xcorr ∈ RHl×Wl×(2d+1)×(2d+1). Equation (4) can
be seen as a correlation of two feature maps within a local
square window deﬁned by d. We compute this local correl-
ation for features at layers conv3, conv4 and conv5 (we use
a stride of 2 in i, j to have the same size in the conv3 cor-
relation). We show an illustration of these features for two
sample sequences in Fig. 4.

To use these features for track-regression, we let RoI
pooling operate on these maps by stacking them with the
bounding box features in Sect. 3.2 {xt,t+τ

reg, xt+τ

reg }.

corr , xt

puts a hard constraint on the number of frames a (deep) ar-
chitecture can process in one iteration (due to memory limit-
ations in GPU hardware). Therefore, a tradeoff between the
number of frames and detection accuracy has to be made.
Since video possesses a lot of redundant information and
objects typically move smoothly in time we can use our
inter-frame tracks to link detections in time and build long-
term object tubes. To this end, we adopt an established tech-
nique from action localization [11, 27, 33], which is used to
to link frame detections in time to tubes.

i, yt

i, ht
i, yt

i,c}, where Dt,c

Consider the class detections for a frame at time t,
Dt,c
i = {xt
i, pt
i , wt
is a box indexed
i
i and height ht
i ) with width wt
by i, centred at (xt
i, and
pt
i,c is the softmax probability for class c. Similarly, we
also have tracks T t,t+τ
= {xt
i, yt
i; xt
i +
∆t+τ
i + ∆t+τ
h } that describe the transforma-
y
tion of the boxes from frame t to t + τ . We can now deﬁne a
class-wise linking score that combines detections and tracks
across time

i
w , ht

i + ∆t+τ

i + ∆t+τ

i , wt

i, ht

, wt

, yt

x

sc(Dt

i,c, Dt+τ

j,c , T t,t+τ ) = pt

i,c + pt+τ

j,c + ψ(Dt

i, Dj, T t,t+τ )
(5)

where the pairwise score is

(cid:40)

i, Dt+τ
if Dt
1,
j
0, otherwise.

∈ T t,t+τ ,

4. Linking tracklets to object tubes

ψ(Dt

i,c, Dt+τ

j,c , T t,t+τ ) =

One drawback of high-accuracy object detection is that
high-resolution input images have to be processed which

(6)
Here, the pairwise term ψ evaluates to 1 if the IoU over-

(a) frame t

(b) frame t + τ

(c) corr. conv3

(d) corr. conv4

(e) corr. conv5

(f) frame t

(g) frame t + τ

(h) corr. conv3
Figure 4. Correlation features for two frames of two validation videos. For the frames in (a) & (b) , we show in (c),(d) and (e) the correlation
maps computed by using features from conv3, conv4 and conv5, respectively. The feature maps are shown as arrays with the centre map
corresponding to zero offsets p, q between the frames and the neighbouring rows and columns correspond to shifted correlation maps
of increasing p, q. We observe that the airplane moves to the top-right; hence the feature maps corresponding to p = 2, q = 3 show
strong responses (highlighted in red). Note that the features at conv4 and conv5 have the same resolution, whereas at conv3 we use stride
2 correlation sampling to produce equal sized outputs. In (h),(i) and (j) we show additional multiscale correlation maps for the frames
in (f) & (g) which are affected by camera motion resulting in correlation patterns that correctly estimate this at the lower layer (conv3
corr. responds on the grass and legs of the animal (h)), and also handles the independent motion of the animals at the higher conv5 corr (j).

(j) corr. conv5

(i) corr. conv4

i, Dt+τ
j

lap a track correspondences T t,t+τ with the detection boxes
Dt
is larger than 0.5. This is necessary, because the
output of the track regressor does not have to exactly match
the output of the box regressor.

The optimal path across a video can then be found by
maximizing the scores over the duration T of the video [11]

¯D(cid:63)

c = argmax

¯D

1
T

T −τ
(cid:88)

t=1

sc(Dt, Dt+τ , T t,t+τ ).

(7)

Eq. (7) can be solved efﬁciently by applying the Viterbi al-
gorithm [11]. Once the optimal tube ¯D(cid:63)
c is found, the detec-
tions corresponding to that tube are removed from the set of
regions and (7) is applied again to the remaining regions.

After having found the class-speciﬁc tubes ¯Dc for one
video, we re-weight all detection scores in a tube by adding
the mean of the α = 50% highest scores in that tube. We
found that overall performance is largely robust to that para-
meter, with less than 0.5% mAP variation when varying
10% ≤ α ≤ 100%. Our simple tube-based re-weighting
aims to boost the scores for positive boxes on which the
detector fails. Using the highest scores of a tube for re-
weighting acts as a form of non-maximum suppression. It
is also inspired by the hysteresis tracking in the Canny edge
detector. Our reweighting assumes that the detector fails
at most in half of a tubes frames, and improves robustness
of the tracker, though the performance is quite insensitive
to the proportion chosen (α). Note that our approach en-
forces the tube to span the whole video and, for simplicity,
we do not prune any detections in time. Removing detec-
tions with subsequent low scores along a tube (e.g. [27, 33])
could clearly improve the results, but we leave that for fu-
ture work. In the following section our approach is applied
to the video object detection task.

5. Experiments

5.1. Dataset sampling and evaluation

We evaluate our method on the ImageNet [32] object de-
tection from video (VID) dataset2 which contains 30 classes
in 3862 training and 555 validation videos. The objects
have ground truth annotations of their bounding box and
track ID in a video. Since the ground truth for the test set
is not publicly available, we measure performance as mean
average precision (mAP) over the 30 classes on the valida-
tion set by following the protocols in [16, 17, 18, 42], as is
standard practice.

The 30 object categories in ImageNet VID are a subset
of the 200 categories in the ImageNet DET dataset. Thus
we follow previous approaches [16, 17, 18, 42] and train
our R-FCN detector on an intersection of ImageNet VID
and DET set (only using the data from the 30 VID classes).
Since the DET set contains large variations in the number
of samples per class, we sample at most 2k images per class
from DET. We also subsample the VID training set by using
only 10 frames from each video. The subsampling reduces
the effect of dominant classes in DET (e.g. there are 56K
images for the dog class in the DET training set) and very
long video sequences in the VID training set.

5.2. Training and testing

RPN. Our RPN is trained as originally proposed [31]. We
attach two sibling convolutional layers to the stride-reduced
ResNet-101 (Sect. 3.2) to perform proposal classiﬁcation
and bounding box regression at 15 anchors corresponding
to 5 scales and 3 aspect ratios. As in [31] we also extract
proposals from 5 scales and apply non-maximum suppres-
sion (NMS) with an IoU threshold of 0.7 to select the top

2http://www.image-net.org/challenges/LSVRC/

300 proposals in each frame for training/testing our R-FCN
detector. We found that pre-training on the full ImageNet
DET set helps to increase the recall; thus, our RPN is ﬁrst
pre-trained on the 200 classes of ImageNet DET before
ﬁne-tuning on only the 30 classes which intersect ImageNet
DET and VID. Our 300 proposals per image achieve a mean
recall of 96.5% on the ImageNet VID validation set.

R-FCN. Our R-FCN detector is trained similar to [3, 42].
We use the stride-reduced ResNet-101 with dilated con-
volution in conv5 (see Sect. 3.2) and online hard example
mining [34]. A randomly initialized 3 × 3, dilation 6 con-
volutional layer is attached to conv5 for reducing the fea-
ture dimension to 512 [42] (in the original R-FCN this is
a 1 × 1 convolutional layer without dilation and an out-
put dimension of 1024). For object detection and box re-
gression, two sibling 1 × 1 convolutional layers provide the
Dcls = k2(C + 1) and Dreg = 4k2 inputs to the position-
sensitive RoI pooling layer. We use a k × k = 7 × 7 spatial
grid for encoding relative positions as in [3].

In both training and testing, we use single scale images
with shorter dimension of 600 pixels. We use a batch size of
4 in SGD training and a learning rate of 10−3 for 60K itera-
tions followed by a learning rate of 10−4 for 20K iterations.
For testing we apply NMS with IoU threshold of 0.3.

D & T. For training our D&T architecture we start with the
R-FCN model from above and further ﬁne-tune it on the
full ImageNet VID training set with randomly sampling a
set of two adjacent frames from a different video in each
iteration. In each other iteration we also sample from the
ImageNet DET training set to avoid biasing our model to
the VID training set. When sampling from the DET set we
send the same two frames through the network as there are
no sequences available. Besides not forgetting the images
from the DET training set, this has an additional beneﬁcial
effect of letting our model prefer small motions over large
ones (e.g. the tracker in [13] samples motion augmentation
from a Laplacian distribution with zero mean to bias a re-
gression tracker on small displacements). Our correlation
features (4) are computed at layers conv3, conv4 and conv5
with a maximum displacement of d = 8 and a stride of 2
in i, j for the the conv3 correlation. For training, we use a
learning rate of 10−4 for 40K iterations and 10−5 for 20K it-
erations at a batch size of 4. During testing our architecture
is applied to a sequence with temporal stride τ , predicting
detections D and tracklets T between them. For object-
centred tracks, we use the regressed frame boxes as input
of the ROI-tracking layer. We perform non-maximum sup-
pression with bounding-box voting [8] before the tracklet
linking step to reduce the number of detections per image
and class to 25. These detections are then used in eq. (7)
to extract tubes and the corresponding detection boxes are
re-weighted as outlined in Sect. 4 for evaluation.

5.3. Results

We show experimental results for our models and
the current state-of-the-art in Table 1. Qualitative res-
ults for difﬁcult validation videos can be seen in Fig. 5
and also at http://www.robots.ox.ac.uk/˜vgg/
research/detect-track/
Frame level methods. First we compare methods work-
ing on single frames without any temporal processing. Our
R-FCN baseline achieves 74.2% mAP which compares fa-
vourably to the best performance of 73.9% mAP in [42].
We think our slightly better accuracy comes from the use of
15 anchors for RPN instead of the 9 anchors in [42]. The
Faster R-CNN models working as single frame baselines in
[18], [16] and [17] score with 45.3%, 63.0% and 63.9%, re-
spectively. We think their lower performance is mostly due
to the difference in training procedure and data sampling,
and not originating from a weaker base ConvNet, since our
frame baseline with a weaker ResNet-50 produces 72.1%
mAP (vs. the 74.2% for ResNet-101). Next, we are in-
terested in how our model performs after ﬁne-tuning with
the tracking loss, operating via RoI tracking on the correl-
ation and track regression features (termed D (& T loss) in
Table 1). The resulting performance for single-frame test-
ing is 75.8% mAP. This 1.6% gain in accuracy shows that
merely adding the tracking loss can aid the per-frame de-
tection. A possible reason is that the correlation features
propagate gradients back into the base ConvNet and there-
fore make the features more sensitive to important objects
in the training data. We see signiﬁcant gains for classes like
panda, monkey, rabbit or snake which are likely to move.
Video level methods. Next, we investigate the effect of
multi-frame input during testing.
In Table 1 we see that
linking our detections to tubes based on our tracklets, D&T
(τ = 1), raises performance substantially to 79.8% mAP.
Some class-AP scores can be boosted signiﬁcantly (e.g.
cattle by 9.6, dog by 5.5, cat by 6, fox by 7.9, horse by
5.3, lion by 9.4, motorcycle by 6.4 rabbit by 8.9, red panda
by 6.3 and squirrel by 8.5 points AP). This gain is mostly
for the following reason: if an object is captured in an un-
conventional pose, is distorted by motion blur, or appears
at a small scale, the detector might fail; however, if its tube
is linked to other potentially highly scoring detections of
the same object, these failed detections can be recovered
(even though we use a very simple re-weighting of detec-
tions across a tube). The only class that loses AP is whale
(−2.6 points) and this has an obvious explanation: in most
validation snippets the whales successively emerge and sub-
merge from the water and our detection rescoring based on
tubes would assign false positives when they submerge for
a couple of frames.

When comparing our 79.8% mAP against the current
state of the art, we make the following observations. The
method in [18] achieves 47.5% by using a temporal con-

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
Winner ILSVRC’16 [41]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

airplane

72.7
84.6
83.7
87.4
89.4
89.1
90.2
91.5

lizard

54.2
74.4
80.3

antelope

75.5
78.1
85.7
79.4
80.4
79.8
82.3
81.4

monkey

1.6
36.6
54.8

bear
42.2
72.0
84.4
84.5
83.8
87.5
87.9
91.4

motorcycle

61.0
76.3
80.6

bicycle

39.5
67.2
74.5
67.0
70.0
68.8
70.1
76.4

rabbit

36.6
51.4
63.7

(single model performance)

bird
25.0
68.0
73.8
72.1
71.8
72.9
73.2
73.9

panda
red
19.7
70.6
85.7

bus
64.1
80.1
75.7
84.6
82.6
86.1
87.7
86.8

sheep

55.0
64.2
60.5

car
36.3
54.7
57.1
54.6
56.8
55.7
57.0
57.8

snake

38.9
61.2
72.9

cattle

51.1
61.2
58.7
72.9
71.0
78.6
80.6
81.8

squirrel

2.6
42.3
52.7

dog
24.4
61.6
72.3
70.9
71.8
76.4
77.3
83.0

tiger

42.8
84.8
89.7

cat
d.
48.6
78.9
69.2
77.3
76.6
83.4
82.6
92.0

train

54.6
78.1
81.3

panda

hamster

elephant

65.6
71.6
80.2
76.7
79.3
82.9
83.0
81.3

turtle

66.1
77.2
73.7

fox
73.9
83.2
83.4
89.7
89.9
97.0
97.8
96.6

watercraft

69.2
61.5
69.5

g.
61.7
78.1
80.5
77.6
83.3
85.0
85.8
84.3

whale

26.5
66.9
33.5

82.4
91.5
93.1
88.5
91.9
96.0
96.6
98.0

zebra

68.6
88.5
90.2

horse

30.8
66.8
84.2
74.8
76.8
82.2
82.1
83.8

lion
34.4
21.6
67.8
57.9
57.3
66.0
66.7
78.1

(%)
AP
m
47.5
68.4
73.8
76.2
74.2
75.8
78.6
79.8
82.0

76.8
79.0
83.1
83.4
87.9

69.0
74.1
75.6
76.4
80.1
Table 1. Performance comparison on the ImageNet VID validation set. The average precision (in %) for each class and the mean average
precision over all classes is shown. τ corresponds to the temporal sampling stride. Our D&T variants use ResNet-101 [12] as backbone,
except for the last row which lists performance for an Inception-v4 [37] backbone which excels at some challenging object categories.

57.4
59.9
65.4
68.4
71.9

90.2
91.3
90.5
92.6
92.5

83.3
84.9
85.6
86.1
84.6

61.3
65.3
72.7
74.2
78.6

50.1
54.1
57.9
57.6
59.4

80.2
80.3
79.8
86.7
89.3

79.5
85.3
90.0
91.6
94.7

51.9
56.9
59.4
59.7
63.3

81.4
81.9
83.3
84.3
85.5

68.7
68.3
68.3
69.7
70.1

68.4
68.9
66.5
66.3
67.4

90.9
90.9
93.2
95.2
95.2

volutional network on top of the still image detector. An
extended work [16] uses an encoder-decoder LSTM on top
of a Faster R-CNN object detector which works on propos-
als from a tubelet proposal network, and produces 68.4%
mAP. The ILSVRC 2015 winner [17] combines two Faster
R-CNN detectors, multi-scale training/testing, context sup-
pression, high conﬁdence tracking [39] and optical-ﬂow-
guided propagation to achieve 73.8%. And the winner from
ILSVRC2016 [41] uses a cascaded R-FCN detector, con-
text inference, cascade regression and a correlation tracker
[25] to achieve 76.19% mAP validation performance with
a single model (multi-scale testing and model ensembles
boost their accuracy to 81.1%).

Online capabilities and runtime. The only component
limiting online application is the tube rescoring (Sect. 4).
We have evaluated an online version which performs only
causal rescoring across the tracks. The performance for this
method is 78.7%mAP, compared to the noncausal method
(79.8%mAP). Since the correlation layer and track re-
gressors are operating fully convolutional (no additional
per-ROI computation is added except at the ROI-tracking
layer), the extra runtime cost for testing a 1000x600 pixel
image is 14ms (i.e. 141ms vs 127ms without correlation
and ROI-tracking layers) on a Titan X GPU. The (unoptim-
ized) tube linking (Sect. 4) takes on average 46ms per frame
on a single CPU core).

Temporally strided testing. We look at larger temporal
strides τ during testing, which has recently been found use-
ful for the related task of video action recognition [6, 7].
Our D & T architecture is evaluated only at every τ th frame
of an input sequence and tracklets have to link detections
over larger temporal strides. The performance for a tem-
poral stride of τ = 10 is 78.6% mAP which is 1.2% below

Backbone
ResNet-50
ResNet-101
ResNeXt-101-32×4
Inception-v4

D
72.1
74.1
75.9
77.9

D&T D&T, average
76.5
79.8
81.4
82.0

76.7
80.0
81.6
82.1

Table 2. Backbone network comparison for
image-based
Detection, and video-based Detection & Tracking architectures.
mAP (in %) over all classes on ImageNet VID validation is shown.

the full-frame evaluation. We think that such a minor drop
is remarkable as the duration for processing a video is now
roughly reduced by a factor of 10.

A potential point of improvement is to extend the de-
tector to operate over multiple frames of the sequence. We
found that such an extension did not have a clear beneﬁ-
cial effect on accuracy for short temporal windows (i.e. aug-
menting the detection scores at time t with the detector out-
put at the tracked proposals in the adjacent frame at time
t + 1 only raises the accuracy from 79.8 to 80.0% mAP).
Increasing this window to frames at t ± 1 by bidirectional
detection and tracking from the tth frame did not lead to
any gain. Interestingly, when testing with a temporal stride
of τ = 10 and augmenting the detections from the current
frame at time t with the detector output at the tracked pro-
posals at t+10 raises the accuracy from 78.6 to 79.2% mAP.
We conjecture that the insensitivity of the accuracy for
short temporal windows originates from the high redund-
ancy of the detection scores from the centre frames with the
scores at tracked locations. The accuracy gain for larger
temporal strides, however, suggests that more complement-
ary information is integrated from the tracked objects; thus,
a potentially promising direction for improvement is to de-
tect and track over multiple temporally strided inputs.
Varying the base network. Finally, we compare different
base networks for the Detect & Track architecture. Table 2

shows the performance for using 50 and 101 layer ResNets
[12], ResNeXt-101 [40], and Inception-v4 [37] as back-
bones. We report performance for frame-level Detection
(D), video-level Detection and Tracking (D&T), as well
as the variant that additionally classiﬁes the tracked re-
gion and computes the detection conﬁdence as the average
of the scores in the current frame and the tracked region
in the adjacent frame, (D&T, average). We observe that
D&T beneﬁts from deeper base ConvNets as well as spe-
ciﬁc design structures (ResNeXt and Inception-v4). The
last row in Table 1 lists class-wise performance for D&T
with an Inception-v4 backbone that seems to greatly boost
certain categories, e.g., dog (+5.7 AP), domestic cat (+9.4
AP) , lion (+11.4 AP), lizard (+4.5 AP), rabbit (+4.4 AP),
in comparison to ResNet-101.

6. Conclusion

We have presented a uniﬁed framework for simultaneous
object detection and tracking in video. Our fully convolu-
tional D&T architecture allows end-to-end training for de-
tection and tracking in a joint formulation. In evaluation,
our method achieves accuracy competitive with the winner
of the last ImageNet challenge while being simple and efﬁ-
cient. We demonstrate clear mutual beneﬁts of jointly per-
forming the task of detection and tracking, a concept that
can foster further research in video analysis.
Acknowledgments. This work was partly supported by the
Austrian Science Fund (FWF P27076) and by EPSRC Pro-
gramme Grant Seebibyte EP/M013774/1.

References

[1] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. S. Torr. Fully-convolutional siamese networks for ob-
ject tracking. In ECCV VOT Workshop, 2016.

[2] D. S. Bolme, J. R. Beveridge, B. A. Draper, and Y. M. Lui.
Visual object tracking using adaptive correlation ﬁlters. In
Proc. CVPR, 2010.

[3] J. Dai, Y. Li, K. He, and J. Sun. R-FCN: Object detection via

region-based fully convolutional networks. In NIPS, 2016.

[4] M. Danelljan, A. Robinson, F. S. Khan, and M. Felsberg.
Beyond correlation ﬁlters: Learning continuous convolution
operators for visual tracking. In Proc. ECCV, 2016.

[5] A. Dosovitskiy, P. Fischer, E. Ilg, P. Hausser, C. Hazirbas,
V. Golkov, P. van der Smagt, D. Cremers, and T. Brox.
Flownet: Learning optical ﬂow with convolutional networks.
In Proc. ICCV, 2015.

[6] C. Feichtenhofer, A. Pinz, and R. Wildes. Spatiotemporal re-
sidual networks for video action recognition. In NIPS, 2016.
[7] C. Feichtenhofer, A. Pinz, and A. Zisserman. Convolutional
two-stream network fusion for video action recognition. In
Proc. CVPR, 2016.

[8] S. Gidaris and N. Komodakis. Object detection via a multi-
region and semantic segmentation-aware cnn model. In Proc.
CVPR, 2015.

[9] R. B. Girshick. Fast R-CNN. In Proc. ICCV, 2015.

[10] R. B. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich
feature hierarchies for accurate object detection and semantic
segmentation. In Proc. CVPR, 2014.

[11] G. Gkioxari and J. Malik. Finding action tubes.

In Proc.

CVPR, 2015.

[12] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In Proc. CVPR, 2016.

[13] D. Held, S. Thrun, and S. Savarese. Learning to track at 100

FPS with deep regression networks. In Proc. ECCV, 2016.

[14] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista. High-
IEEE

speed tracking with kernelized correlation ﬁlters.
PAMI, 37(3):583–596, 2015.

[15] A. Joulin, K. Tang, and L. Fei-Fei. Efﬁcient image and video
co-localization with frank-wolfe algorithm. In Proc. ECCV,
2014.

[16] K. Kang, H. Li, T. Xiao, W. Ouyang, J. Yan, X. Liu, and
X. Wang. Object detection in videos with tubelet proposal
networks. In Proc. CVPR, 2017.

[17] K. Kang, H. Li, J. Yan, X. Zeng, B. Yang, T. Xiao, C. Zhang,
Z. Wang, R. Wang, X. Wang, and W. Ouyang. T-CNN: tube-
lets with convolutional neural networks for object detection
from videos. arXiv preprint, 2016.

[18] K. Kang, W. Ouyang, H. Li, and X. Wang. Object detection
from video tubelets with convolutional neural networks. In
Proc. CVPR, 2016.

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1106–1114, 2012.

[20] S. Kwak, M. Cho, I. Laptev, J. Ponce, and C. Schmid. Unsu-
pervised object discovery and tracking in video collections.
In Proc. CVPR, 2015.

[21] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1(4):541–551, 1989.

[22] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona,
D. Ramanan, P. Doll´ar, and C. L. Zitnick. Microsoft coco:
Common objects in context. In Proc. ECCV, 2014.

[23] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y.
Fu, and A. C. Berg. Ssd: Single shot multibox detector. In
Proc. ECCV, 2016.

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proc. CVPR, 2015.
[25] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang. Hierarchical
In Proc. ICCV,

convolutional features for visual tracking.
2015.

[26] H. Nam and B. Han. Learning multi-domain convolutional

neural networks for visual tracking. In Proc. CVPR, 2016.

[27] X. Peng and C. Schmid. Multi-region two-stream R-CNN

ImageNet
In

for action detection. In Proc. ECCV, 2016.

[28] A. Prest, C. Leistner, J. Civera, C. Schmid, and V. Fer-
rari. Learning object class detectors from weakly annotated
video. In Proc. CVPR, 2012.

[29] E. Real, J. Shlens, S. Mazzocchi, X. Pan, and V. Vanhoucke.
YouTube-BoundingBoxes: A Large High-Precision Human-
Annotated Data Set for Object Detection in Video. ArXiv
e-prints, 2017.

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Proc.
CVPR, 2016.

[31] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. IEEE PAMI, 2016.

[32] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
ImageNet Large Scale Visual
A. C. Berg, and L. Fei-Fei.
Recognition Challenge. IJCV, 115(3):211–252, 2015.
[33] S. Saha, G. Singh, M. Sapienza, P. H. Torr, and F. Cuzzolin.
Deep learning for detecting multiple space-time action tubes
in videos. In Proc. BMVC., 2016.

[34] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proc. CVPR, 2016.

[35] K. Simonyan and A. Zisserman. Two-stream convolutional

networks for action recognition in videos. In NIPS, 2014.

[36] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In Proc. ICLR,
2015.

[37] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, Inception-ResNet and the impact of residual
connections on learning. 2017.

[38] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proc. CVPR, 2015.
[39] L. Wang, W. Ouyang, X. Wang, and H. Lu. Visual tracking
with fully convolutional networks. In Proc. ICCV, 2015.
[40] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. arXiv pre-
print arXiv:1611.05431, 2016.

[41] J. Yang, H. Shuai, Z. Yu, R. Fan, Q. Ma, Q. Liu, and J. Deng.
ILSVRC2016 object detection from video: Team NUIST.
http://image-net.org/challenges/talks/
2016/Imagenet%202016%20VID.pptx, 2016.
[42] X. Zhu, Y. Xiong, J. Dai, L. Yuan, and Y. Wei. Deep feature

ﬂow for video recognition. In Proc. CVPR, 2017.

Figure 5. Qualitative results for consecutive frames of videos where our D&T approach could improve. Failures can be attributed to scale,
occlusion, misclassiﬁcation, or NMS issues.

Detect to Track and Track to Detect

Christoph Feichtenhofer∗
Graz University of Technology
feichtenhofer@tugraz.at

Axel Pinz
Graz University of Technology
axel.pinz@tugraz.at

Andrew Zisserman
University of Oxford
az@robots.ox.ac.uk

8
1
0
2
 
r
a

M
 
7
 
 
]

V
C
.
s
c
[
 
 
2
v
8
5
9
3
0
.
0
1
7
1
:
v
i
X
r
a

Abstract

Recent approaches for high accuracy detection and
tracking of object categories in video consist of complex
multistage solutions that become more cumbersome each
year. In this paper we propose a ConvNet architecture that
jointly performs detection and tracking, solving the task in
a simple and effective way.

Our contributions are threefold: (i) we set up a ConvNet
architecture for simultaneous detection and tracking, using
a multi-task objective for frame-based object detection and
across-frame track regression; (ii) we introduce correlation
features that represent object co-occurrences across time
to aid the ConvNet during tracking; and (iii) we link
the frame level detections based on our across-frame
tracklets to produce high accuracy detections at the video
level. Our ConvNet architecture for spatiotemporal object
detection is evaluated on the large-scale ImageNet VID
dataset where it achieves state-of-the-art results. Our
approach provides better single model performance than
the winning method of the last ImageNet challenge while
being conceptually much simpler. Finally, we show that by
increasing the temporal stride we can dramatically increase
the tracker speed. Our code and models are available at
http://github.com/feichtenhofer/detect-track

1. Introduction

Object detection in images has received a lot of atten-
tion over the last years with tremendous progress mostly
due to the emergence of deep Convolutional Networks
[12, 19, 21, 36, 38] and their region based descendants
[3, 9, 10, 31].
In the case of object detection and track-
ing in videos, recent approaches have mostly used detec-
tion as a ﬁrst step, followed by post-processing methods
such as applying a tracker to propagate detection scores
over time. Such variations on the ‘tracking by detection’
paradigm have seen impressive progress but are dominated

∗Christoph Feichtenhofer is a recipient of a DOC Fellowship of the
Austrian Academy of Sciences at the Institute of Electrical Measurement
and Measurement Signal Processing, Graz University of Technology.

(a)

(c)

(b)

(d)

Figure 1. Challenges for video object detection. Training examples
for: (a) bicycle, bird, rabbit; (b) dog; (c) fox; and (d) red panda.

by frame-level detection methods.

Object detection in video has seen a surge in interest
lately, especially since the introduction of the ImageNet
[32] video object detection challenge (VID). Different from
the ImageNet object detection (DET) challenge, VID shows
objects in image sequences and comes with additional
challenges of (i) size:
the sheer number of frames that
video provides (VID has around 1.3M images, compared
to around 400K in DET or 100K in COCO [22]), (ii)
motion blur: due to rapid camera or object motion, (iii)
quality: internet video clips are typically of lower quality
than static photos, (iv) partial occlusion: due to change in
objects/viewer positioning, and (v) pose: unconventional
In
object-to-camera poses are frequently seen in video.
Fig. 1, we show example images from the VID dataset; for
more examples please see1.

To solve this challenging task, recent top entries in the
ImageNet [32] video detection challenge use exhaustive
post-processing on top of frame-level detectors. For ex-
ample, the winner [17] of ILSVRC’15 uses two multi-stage
Faster R-CNN [31] detection frameworks, context suppres-
sion, multi-scale training/testing, a ConvNet tracker [39],
optical-ﬂow based score propagation and model ensembles.
In this paper we propose a uniﬁed approach to tackle the
problem of object detection in realistic video. Our object-
ive is to directly infer a ‘tracklet’ over multiple frames by
simultaneously carrying out detection and tracking with a

1http://vision.cs.unc.edu/ilsvrc2015/ui/vid

ConvNet. To achieve this we propose to extend the R-FCN
[3] detector with a tracking formulation that is inspired by
current correlation and regression based trackers [1, 13, 25].
We train a fully convolutional architecture end-to-end us-
ing a detection and tracking based loss and term our ap-
proach D&T for joint Detection and Tracking. The input
to the network consists of multiple frames which are ﬁrst
passed through a ConvNet trunk (e.g. a ResNet-101 [12])
to produce convolutional features which are shared for the
task of detection and tracking. We compute convolutional
cross-correlation between the feature responses of adjacent
frames to estimate the local displacement at different fea-
ture scales. On top of the features, we employ an RoI-
pooling layer [3] to classify and regress box proposals as
well as an RoI-tracking layer that regresses box transforma-
tions (translation, scale, aspect ratio) across frames. Finally,
to infer long-term tubes of objects across a video we link
detections based on our tracklets.

An evaluation on the large-scale ImageNet VID dataset
shows that our approach is able to achieve better single-
model performance than the winner of the last ILSVRC’16
challenge, despite being conceptually simple and much
faster. Moreover, we show that including a tracking loss
may improve feature learning for better static object detec-
tion, and we also present a very fast version of D&T that
works on temporally-strided input frames.

2. Related work

Object detection. Two families of detectors are currently
popular: First, region proposal based detectors R-CNN
[10], Fast R-CNN [9], Faster R-CNN [31] and R-FCN [3]
and second, detectors that directly predict boxes for an im-
age in one step such as YOLO [30] and SSD [23].

Our approach builds on R-FCN [3] which is a simple and
efﬁcient framework for object detection on region propos-
als with a fully convolutional nature. In terms of accuracy it
is competitive with Faster R-CNN [31] which uses a multi-
layer network that is evaluated per-region (and thus has a
cost growing linearly with the number of candidate RoIs).
R-FCN reduces the cost for region classiﬁcation by pushing
the region-wise operations to the end of the network with
the introduction of a position-sensitive RoI pooling layer
which works on convolutional features that encode the spa-
tially subsampled class scores of input RoIs.

Tracking. Tracking is also an extensively studied prob-
lem in computer vision with most recent progress devoted
to trackers operating on deep ConvNet features.
In [26]
a ConvNet is ﬁne-tuned at test-time to track a target from
the same video via detection and bounding box regression.
Training on the examples of a test sequence is slow and
also not applicable in the object detection setting. Other
methods use pre-trained ConvNet features to track and have

achieved strong performance either with correlation [1, 25]
or regression trackers on heat maps [39] or bounding boxes
[13]. The regression tracker in [13] is related to our method.
It is based on a Siamese ConvNet that predicts the location
in the second image of the object shown in the center of the
previous image. Since this tracker predicts a bounding box
instead of just the position, it is able to model changes in
scale and aspect of the tracked template. The major draw-
back of this approach is that it only can process a single tar-
get template and it also has to rely on signiﬁcant data aug-
mentation to learn all possible transformations of tracked
boxes. The approach in [1] is an example of a correlation
tracker and inspires our method. The tracker also uses a
fully-convolutional Siamese network that takes as input the
tracking template and the search image. The ConvNet fea-
tures from the last convolutional layer are correlated to ﬁnd
the target position in the response map. One drawback of
many correlation trackers [1, 25] is that they only work on
single targets and do not account for changes in object scale
and aspect ratio.

Video object detection. Action detection is also a re-
lated problem and has received increased attention recently,
mostly with methods building on two-stream ConvNets
[35]. In [11] a method is presented that uses a two-stream
R-CNN [10] to classify regions and link them across frames
based on the action predictions and their spatial overlap.
This method has been adopted by [33] and [27] where the
R-CNN was replaced by Faster R-CNN with the RPN oper-
ating on two streams of appearance and motion information.
One area of interest is learning to detect and localize in
each frame (e.g. in video co-localization) with only weak
supervision. The YouTube Object Dataset [28], has been
used for this purpose, e.g. [15, 20].

Since the object detection from video task has been in-
troduced at the ImageNet challenge, it has drawn signiﬁc-
ant attention.
In [18] tubelet proposals are generated by
applying a tracker to frame-based bounding box propos-
als. The detector scores across the video are re-scored by
a 1D CNN model. In their corresponding ILSVRC submis-
sion the group [17] added a propagation of scores to nearby
frames based on optical ﬂows between frames and sup-
pression of class scores that are not among the top classes
in a video. A more recent work [16] introduces a tube-
let proposal network that regresses static object proposals
over multiple frames, extracts features by applying Faster
R-CNN which are ﬁnally processed by an encoder-decoder
LSTM. In deep feature ﬂow [42] a recognition ConvNet is
applied to key frames only and an optical ﬂow ConvNet is
used for propagating the deep feature maps via a ﬂow ﬁeld
to the rest of the frames. This approach can increase detec-
tion speed by a factor of 5 at a slight accuracy cost. The
approach is error-prone due largely to two aspects: First,

propagation from the key frame to the current frame can
be erroneous and, second, the key frames can miss features
from current frames. Very recently a new large-scale data-
set for video object detection has been introduced [29] with
single objects annotations over video sequences.

3. D&T Approach

In this section we ﬁrst give an overview of the Detect
and Track (D&T) approach (Sect. 3.1) that generates track-
lets given two (or more) frames as input. We then give
the details, starting with the baseline R-FCN detector [3]
(Sect. 3.2), and formulating the tracking objective as cross-
frame bounding box regression (Sect. 3.3); ﬁnally, we intro-
duce the correlation features (Sect. 3.4) that aid the network
in the tracking process.

Sect. 4 shows how we link across-frame tracklets to
tubes over the temporal extent of a video, and Sect. 5 de-
scribes how we apply D&T to the ImageNet VID challenge.

3.1. D&T overview

We aim at jointly detecting and tracking (D&T) objects
in video. Fig. 2 illustrates our D&T architecture. We build
on the R-FCN [3] object detection framework which is fully
convolutional up to region classiﬁcation and regression, and
extend it for multi-frame detection and tracking. Given
a set of two high-resolution input frames our architecture
ﬁrst computes convolutional feature maps that are shared
for the tasks of detection and tracking (e.g. the features of
a ResNet-101[12]). An RPN is used to propose candid-
ate regions in each frame based on the objectness likeli-
hood for pre-deﬁned candidate boxes (i.e. “anchors”[31]).
Based on these regions, RoI pooling is employed to aggreg-
ate position-sensitive score and regression maps, produced
from intermediate convolutional layers, to classify boxes
and reﬁne their coordinates (regression), respectively.

We extend this architecture by introducing a regressor
that
takes the intermediate position-sensitive regression
maps from both frames (together with correlation maps, see
below) as input to an RoI tracking operation which out-
puts the box transformation from one frame to the other.
The correspondence between frames is thus simply accom-
plished by pooling features from both frames, at the same
proposal region. We train the RoI tracking task by extend-
ing the multi-task objective of R-FCN with a tracking loss
that regresses object coordinates across frames. Our track-
ing loss operates on ground truth objects and evaluates a
soft L1 norm [9] between coordinates of the predicted track
and the ground truth track of an object.

Such a tracking formulation can be seen as a multi-
object extension of the single target tracker in [13] where
a ConvNet is trained to infer an object’s bounding box from
features of the two frames. One drawback of such an ap-
proach is that it does not exploit translational equivariance

which means that the tracker has to learn all possible trans-
lations from training data. Thus such a tracker requires ex-
ceptional data augmentation (artiﬁcially scaling and shifting
boxes) during training [13] .

A tracking representation that is based on correlation ﬁl-
ters [2, 4, 14] can exploit the translational equivariance as
correlation is equivariant to translation. Recent correlation
trackers [1, 25] typically work on high-level ConvNet fea-
tures and compute the cross correlation between a tracking
template and the search image (or a local region around the
tracked position from the previous frame). The resulting
correlation map measures the similarity between the tem-
plate and the search image for all circular shifts along the
horizontal and vertical dimension. The displacement of a
target object can thus be found by taking the maximum of
the correlation response map.

Different from typical correlation trackers that work on
single target templates, we aim to track multiple objects
simultaneously. We compute correlation maps for all posi-
tions in a feature map and let RoI tracking additionally op-
erate on these feature maps for better track regression. Our
architecture is able to be trained end-to-end taking as input
frames from a video and producing object detections and
their tracks. The next sections describe how we structure
our architecture for end-to-end learning of object detection
and tracklets.

3.2. Object detection and tracking in R-FCN

Our architecture takes frames It ∈ RH0×W0×3 at time t
and pushes them through a backbone ConvNet (i.e. ResNet-
l ∈ RHl×Wl×Dl where
101 [12]) to obtain feature maps xt
Wl, Hl and Dl are the width, height and number of chan-
nels of the respective feature map output by layer l. As in
R-FCN [3] we reduce the effective stride at the last convo-
lutional layer from 32 pixels to 16 pixels by modifying the
conv5 block to have unit spatial stride, and also increase its
receptive ﬁeld by dilated convolutions [24].

Our overall system builds on the R-FCN [3] object de-
tector which works in two stages: ﬁrst it extracts candid-
ate regions of interest (RoI) using a Region Proposal Net-
work (RPN) [31]; and, second, it performs region classi-
ﬁcation into different object categories and background by
using a position-sensitive RoI pooling layer [3]. The in-
put to this RoI pooling layer comes from an extra convolu-
tional layer with output xt
cls that operates on the last convo-
lutional layer of a ResNet [12]. The layer produces a bank
of Dcls = k2(C + 1) position-sensitive score maps which
correspond to a k × k spatial grid describing relative pos-
itions to be used in the RoI pooling operation for each of
the C categories and background. Applying the softmax
function to the outputs leads to a probability distribution p
over C + 1 classes for each RoI. In a second branch R-FCN
puts a sibling convolutional layer with output xt
reg after the

Figure 2. Architecture of our Detect and Track (D&T) approach (see Section 3 for details).

last convolutional layer for bounding box regression, again
a position-sensitive RoI pooling operation is performed on
this bank of Dcls = 4k2 maps for class-agnostic bounding
box prediction of a box b = (bx, by, bw, bh).

Let us now consider a pair of frames It, It+τ , sampled at
time t and t+τ , given as input to the network. We introduce
an inter-frame bounding box regression layer that performs
position sensitive RoI pooling on the concatenation of the
bounding box regression features {xt
reg } to predict
w , ∆t+τ
the transformation ∆t+τ = (∆t+τ
) of
the RoIs from t to t + τ . The correlation features, that are
also used by the bounding box regressors, are described in
section 3.4. Fig. 3 shows an illustration of this approach.

reg, xt+τ
, ∆t+τ
, ∆t+τ
y

h

x

3.3. Multitask detection and tracking objective

To learn this regressor, we extend the multi-task loss of
Fast R-CNN [9], consisting of a combined classiﬁcation
Lcls and regression loss Lreg, with an additional term that
scores the tracking across two frames Ltra. For a single
iteration and a batch of N RoIs the network predicts soft-
max probabilities {pi}N
i=1, and
}Ntra
cross-frame RoI-tracks {∆t+τ
i=1 . Our overall objective
function is written as:

i=1, regression offsets {bi}N

i

L({pi}, {bi}, {∆i}) =

Lcls(pi,c∗ )

1
N

N
(cid:88)

i=1

+λ

1
Nf g

N
(cid:88)

i=1

+λ

1
Ntra

Ntra(cid:88)

i=1

[c∗

i > 0]Lreg(bi, b∗
i )

(1)

Ltra(∆t+τ

i

, ∆∗,t+τ
i

).

The ground truth class label of an RoI is deﬁned by c∗
i
and its predicted softmax score is pi,c∗ . b∗
i is the ground
truth regression target, and ∆∗,t+τ
is the track regression
target. The indicator function [c∗
i > 0] is 1 for fore-

i

ground RoIs and 0 for background RoIs (with c∗
i = 0).
Lcls(pi,c∗ ) = − log(pi,c∗ ) is the cross-entropy loss for box
classiﬁcation, and Lreg & Ltra are bounding box and track
regression losses deﬁned as the smooth L1 function in [9].
The tradeoff parameter is set to λ = 1 as in [3, 9]. The as-
signment of RoIs to ground truth is as follows: a class label
c∗ and regression targets b∗ are assigned if the RoI overlaps
with a ground-truth box at least by 0.5 in intersection-over-
union (IoU) and the tracking target ∆∗,t+τ is assigned only
to ground truth targets which are appearing in both frames.
Thus, the ﬁrst term of (1) is active for all N boxes in a train-
ing batch, the second term is active for Nf g foreground RoIs
and the last term is active for Ntra ground truth RoIs which
have a track correspondence across the two frames.

y, Bt

x, Bt

For track regression we use the bounding box re-
gression parametrisation of R-CNN [9, 10, 31]. For a
single object we have ground truth box coordinates Bt =
h) in frame t, and similarly Bt+τ for frame
(Bt
t + τ , denoting the horizontal & vertical centre coordinates
and its width and height. The tracking regression values for
the target ∆∗,t+τ = {∆∗,t+τ
} are
then

, ∆∗,t+τ
h

, ∆∗,t+τ
y

, ∆∗,t+τ
w

w, Bt

x

∆∗,t+τ
x

=

∆∗,t+τ
y

=

(2)

∆∗,t+τ
w

= log(

∆∗,t+τ
h

= log(

)).

(3)

Bt+τ

x − Bt
x
Bt
w
Bt+τ
w
Bt
w

)

Bt+τ

y − Bt
y
Bt
h
Bt+τ
h
Bt
h

3.4. Correlation features for object tracking

Different from typical correlation trackers on single tar-
get templates, we aim to track multiple objects simultan-
eously. We compute correlation maps for all positions in
a feature map and let RoI pooling operate on these feature
maps for track regression. Considering all possible circular
shifts in a feature map would lead to large output dimen-
sionality and also produce responses for too large displace-

Figure 3. Schematic of our approach for two frames at time t and t + τ . The inputs are ﬁrst passed through a fully-convolutional network
to produce feature maps. A correlation layer operates on multiple feature maps of different scales (only the coarsest scale is shown in the
ﬁgure) and estimates local feature similarity for various offsets between the two frames. Finally, position sensitive RoI-pooling [3] operates
on the convolutional features of the individual frames to produce per-frame detections and also on a stack of individual frame-features as
well as the between frame correlation features to output regression offsets of the boxes across the two frames (RoI-tracking).

ments. Therefore, we restrict correlation to a local neigh-
bourhood. This idea was originally used for optical ﬂow
estimation in [5], where a correlation layer is introduced to
aid a ConvNet in matching feature points between frames.
The correlation layer performs point-wise feature compar-
l, xt+τ
ison of two feature maps xt

l

xt,t+τ

corr (i, j, p, q) =

l(i, j), xt+τ
xt

l

(i + p, j + q)

(4)

(cid:68)

(cid:69)

where −d ≤ p ≤ d and −d ≤ q ≤ d are offsets to compare
features in a square neighbourhood around the locations i, j
in the feature map, deﬁned by the maximum displacement,
d. Thus the output of the correlation layer is a feature map
of size xcorr ∈ RHl×Wl×(2d+1)×(2d+1). Equation (4) can
be seen as a correlation of two feature maps within a local
square window deﬁned by d. We compute this local correl-
ation for features at layers conv3, conv4 and conv5 (we use
a stride of 2 in i, j to have the same size in the conv3 cor-
relation). We show an illustration of these features for two
sample sequences in Fig. 4.

To use these features for track-regression, we let RoI
pooling operate on these maps by stacking them with the
bounding box features in Sect. 3.2 {xt,t+τ

reg, xt+τ

reg }.

corr , xt

puts a hard constraint on the number of frames a (deep) ar-
chitecture can process in one iteration (due to memory limit-
ations in GPU hardware). Therefore, a tradeoff between the
number of frames and detection accuracy has to be made.
Since video possesses a lot of redundant information and
objects typically move smoothly in time we can use our
inter-frame tracks to link detections in time and build long-
term object tubes. To this end, we adopt an established tech-
nique from action localization [11, 27, 33], which is used to
to link frame detections in time to tubes.

i, yt

i, ht
i, yt

i,c}, where Dt,c

Consider the class detections for a frame at time t,
Dt,c
i = {xt
i, pt
i , wt
is a box indexed
i
i and height ht
i ) with width wt
by i, centred at (xt
i, and
pt
i,c is the softmax probability for class c. Similarly, we
also have tracks T t,t+τ
= {xt
i, yt
i; xt
i +
∆t+τ
i + ∆t+τ
h } that describe the transforma-
y
tion of the boxes from frame t to t + τ . We can now deﬁne a
class-wise linking score that combines detections and tracks
across time

i
w , ht

i + ∆t+τ

i + ∆t+τ

i , wt

i, ht

, wt

, yt

x

sc(Dt

i,c, Dt+τ

j,c , T t,t+τ ) = pt

i,c + pt+τ

j,c + ψ(Dt

i, Dj, T t,t+τ )
(5)

where the pairwise score is

(cid:40)

i, Dt+τ
if Dt
1,
j
0, otherwise.

∈ T t,t+τ ,

4. Linking tracklets to object tubes

ψ(Dt

i,c, Dt+τ

j,c , T t,t+τ ) =

One drawback of high-accuracy object detection is that
high-resolution input images have to be processed which

(6)
Here, the pairwise term ψ evaluates to 1 if the IoU over-

(a) frame t

(b) frame t + τ

(c) corr. conv3

(d) corr. conv4

(e) corr. conv5

(f) frame t

(g) frame t + τ

(h) corr. conv3
Figure 4. Correlation features for two frames of two validation videos. For the frames in (a) & (b) , we show in (c),(d) and (e) the correlation
maps computed by using features from conv3, conv4 and conv5, respectively. The feature maps are shown as arrays with the centre map
corresponding to zero offsets p, q between the frames and the neighbouring rows and columns correspond to shifted correlation maps
of increasing p, q. We observe that the airplane moves to the top-right; hence the feature maps corresponding to p = 2, q = 3 show
strong responses (highlighted in red). Note that the features at conv4 and conv5 have the same resolution, whereas at conv3 we use stride
2 correlation sampling to produce equal sized outputs. In (h),(i) and (j) we show additional multiscale correlation maps for the frames
in (f) & (g) which are affected by camera motion resulting in correlation patterns that correctly estimate this at the lower layer (conv3
corr. responds on the grass and legs of the animal (h)), and also handles the independent motion of the animals at the higher conv5 corr (j).

(j) corr. conv5

(i) corr. conv4

i, Dt+τ
j

lap a track correspondences T t,t+τ with the detection boxes
Dt
is larger than 0.5. This is necessary, because the
output of the track regressor does not have to exactly match
the output of the box regressor.

The optimal path across a video can then be found by
maximizing the scores over the duration T of the video [11]

¯D(cid:63)

c = argmax

¯D

1
T

T −τ
(cid:88)

t=1

sc(Dt, Dt+τ , T t,t+τ ).

(7)

Eq. (7) can be solved efﬁciently by applying the Viterbi al-
gorithm [11]. Once the optimal tube ¯D(cid:63)
c is found, the detec-
tions corresponding to that tube are removed from the set of
regions and (7) is applied again to the remaining regions.

After having found the class-speciﬁc tubes ¯Dc for one
video, we re-weight all detection scores in a tube by adding
the mean of the α = 50% highest scores in that tube. We
found that overall performance is largely robust to that para-
meter, with less than 0.5% mAP variation when varying
10% ≤ α ≤ 100%. Our simple tube-based re-weighting
aims to boost the scores for positive boxes on which the
detector fails. Using the highest scores of a tube for re-
weighting acts as a form of non-maximum suppression. It
is also inspired by the hysteresis tracking in the Canny edge
detector. Our reweighting assumes that the detector fails
at most in half of a tubes frames, and improves robustness
of the tracker, though the performance is quite insensitive
to the proportion chosen (α). Note that our approach en-
forces the tube to span the whole video and, for simplicity,
we do not prune any detections in time. Removing detec-
tions with subsequent low scores along a tube (e.g. [27, 33])
could clearly improve the results, but we leave that for fu-
ture work. In the following section our approach is applied
to the video object detection task.

5. Experiments

5.1. Dataset sampling and evaluation

We evaluate our method on the ImageNet [32] object de-
tection from video (VID) dataset2 which contains 30 classes
in 3862 training and 555 validation videos. The objects
have ground truth annotations of their bounding box and
track ID in a video. Since the ground truth for the test set
is not publicly available, we measure performance as mean
average precision (mAP) over the 30 classes on the valida-
tion set by following the protocols in [16, 17, 18, 42], as is
standard practice.

The 30 object categories in ImageNet VID are a subset
of the 200 categories in the ImageNet DET dataset. Thus
we follow previous approaches [16, 17, 18, 42] and train
our R-FCN detector on an intersection of ImageNet VID
and DET set (only using the data from the 30 VID classes).
Since the DET set contains large variations in the number
of samples per class, we sample at most 2k images per class
from DET. We also subsample the VID training set by using
only 10 frames from each video. The subsampling reduces
the effect of dominant classes in DET (e.g. there are 56K
images for the dog class in the DET training set) and very
long video sequences in the VID training set.

5.2. Training and testing

RPN. Our RPN is trained as originally proposed [31]. We
attach two sibling convolutional layers to the stride-reduced
ResNet-101 (Sect. 3.2) to perform proposal classiﬁcation
and bounding box regression at 15 anchors corresponding
to 5 scales and 3 aspect ratios. As in [31] we also extract
proposals from 5 scales and apply non-maximum suppres-
sion (NMS) with an IoU threshold of 0.7 to select the top

2http://www.image-net.org/challenges/LSVRC/

300 proposals in each frame for training/testing our R-FCN
detector. We found that pre-training on the full ImageNet
DET set helps to increase the recall; thus, our RPN is ﬁrst
pre-trained on the 200 classes of ImageNet DET before
ﬁne-tuning on only the 30 classes which intersect ImageNet
DET and VID. Our 300 proposals per image achieve a mean
recall of 96.5% on the ImageNet VID validation set.

R-FCN. Our R-FCN detector is trained similar to [3, 42].
We use the stride-reduced ResNet-101 with dilated con-
volution in conv5 (see Sect. 3.2) and online hard example
mining [34]. A randomly initialized 3 × 3, dilation 6 con-
volutional layer is attached to conv5 for reducing the fea-
ture dimension to 512 [42] (in the original R-FCN this is
a 1 × 1 convolutional layer without dilation and an out-
put dimension of 1024). For object detection and box re-
gression, two sibling 1 × 1 convolutional layers provide the
Dcls = k2(C + 1) and Dreg = 4k2 inputs to the position-
sensitive RoI pooling layer. We use a k × k = 7 × 7 spatial
grid for encoding relative positions as in [3].

In both training and testing, we use single scale images
with shorter dimension of 600 pixels. We use a batch size of
4 in SGD training and a learning rate of 10−3 for 60K itera-
tions followed by a learning rate of 10−4 for 20K iterations.
For testing we apply NMS with IoU threshold of 0.3.

D & T. For training our D&T architecture we start with the
R-FCN model from above and further ﬁne-tune it on the
full ImageNet VID training set with randomly sampling a
set of two adjacent frames from a different video in each
iteration. In each other iteration we also sample from the
ImageNet DET training set to avoid biasing our model to
the VID training set. When sampling from the DET set we
send the same two frames through the network as there are
no sequences available. Besides not forgetting the images
from the DET training set, this has an additional beneﬁcial
effect of letting our model prefer small motions over large
ones (e.g. the tracker in [13] samples motion augmentation
from a Laplacian distribution with zero mean to bias a re-
gression tracker on small displacements). Our correlation
features (4) are computed at layers conv3, conv4 and conv5
with a maximum displacement of d = 8 and a stride of 2
in i, j for the the conv3 correlation. For training, we use a
learning rate of 10−4 for 40K iterations and 10−5 for 20K it-
erations at a batch size of 4. During testing our architecture
is applied to a sequence with temporal stride τ , predicting
detections D and tracklets T between them. For object-
centred tracks, we use the regressed frame boxes as input
of the ROI-tracking layer. We perform non-maximum sup-
pression with bounding-box voting [8] before the tracklet
linking step to reduce the number of detections per image
and class to 25. These detections are then used in eq. (7)
to extract tubes and the corresponding detection boxes are
re-weighted as outlined in Sect. 4 for evaluation.

5.3. Results

We show experimental results for our models and
the current state-of-the-art in Table 1. Qualitative res-
ults for difﬁcult validation videos can be seen in Fig. 5
and also at http://www.robots.ox.ac.uk/˜vgg/
research/detect-track/
Frame level methods. First we compare methods work-
ing on single frames without any temporal processing. Our
R-FCN baseline achieves 74.2% mAP which compares fa-
vourably to the best performance of 73.9% mAP in [42].
We think our slightly better accuracy comes from the use of
15 anchors for RPN instead of the 9 anchors in [42]. The
Faster R-CNN models working as single frame baselines in
[18], [16] and [17] score with 45.3%, 63.0% and 63.9%, re-
spectively. We think their lower performance is mostly due
to the difference in training procedure and data sampling,
and not originating from a weaker base ConvNet, since our
frame baseline with a weaker ResNet-50 produces 72.1%
mAP (vs. the 74.2% for ResNet-101). Next, we are in-
terested in how our model performs after ﬁne-tuning with
the tracking loss, operating via RoI tracking on the correl-
ation and track regression features (termed D (& T loss) in
Table 1). The resulting performance for single-frame test-
ing is 75.8% mAP. This 1.6% gain in accuracy shows that
merely adding the tracking loss can aid the per-frame de-
tection. A possible reason is that the correlation features
propagate gradients back into the base ConvNet and there-
fore make the features more sensitive to important objects
in the training data. We see signiﬁcant gains for classes like
panda, monkey, rabbit or snake which are likely to move.
Video level methods. Next, we investigate the effect of
multi-frame input during testing.
In Table 1 we see that
linking our detections to tubes based on our tracklets, D&T
(τ = 1), raises performance substantially to 79.8% mAP.
Some class-AP scores can be boosted signiﬁcantly (e.g.
cattle by 9.6, dog by 5.5, cat by 6, fox by 7.9, horse by
5.3, lion by 9.4, motorcycle by 6.4 rabbit by 8.9, red panda
by 6.3 and squirrel by 8.5 points AP). This gain is mostly
for the following reason: if an object is captured in an un-
conventional pose, is distorted by motion blur, or appears
at a small scale, the detector might fail; however, if its tube
is linked to other potentially highly scoring detections of
the same object, these failed detections can be recovered
(even though we use a very simple re-weighting of detec-
tions across a tube). The only class that loses AP is whale
(−2.6 points) and this has an obvious explanation: in most
validation snippets the whales successively emerge and sub-
merge from the water and our detection rescoring based on
tubes would assign false positives when they submerge for
a couple of frames.

When comparing our 79.8% mAP against the current
state of the art, we make the following observations. The
method in [18] achieves 47.5% by using a temporal con-

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
Winner ILSVRC’16 [41]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

airplane

72.7
84.6
83.7
87.4
89.4
89.1
90.2
91.5

lizard

54.2
74.4
80.3

antelope

75.5
78.1
85.7
79.4
80.4
79.8
82.3
81.4

monkey

1.6
36.6
54.8

bear
42.2
72.0
84.4
84.5
83.8
87.5
87.9
91.4

motorcycle

61.0
76.3
80.6

bicycle

39.5
67.2
74.5
67.0
70.0
68.8
70.1
76.4

rabbit

36.6
51.4
63.7

(single model performance)

bird
25.0
68.0
73.8
72.1
71.8
72.9
73.2
73.9

panda
red
19.7
70.6
85.7

bus
64.1
80.1
75.7
84.6
82.6
86.1
87.7
86.8

sheep

55.0
64.2
60.5

car
36.3
54.7
57.1
54.6
56.8
55.7
57.0
57.8

snake

38.9
61.2
72.9

cattle

51.1
61.2
58.7
72.9
71.0
78.6
80.6
81.8

squirrel

2.6
42.3
52.7

dog
24.4
61.6
72.3
70.9
71.8
76.4
77.3
83.0

tiger

42.8
84.8
89.7

cat
d.
48.6
78.9
69.2
77.3
76.6
83.4
82.6
92.0

train

54.6
78.1
81.3

panda

hamster

elephant

65.6
71.6
80.2
76.7
79.3
82.9
83.0
81.3

turtle

66.1
77.2
73.7

fox
73.9
83.2
83.4
89.7
89.9
97.0
97.8
96.6

watercraft

69.2
61.5
69.5

g.
61.7
78.1
80.5
77.6
83.3
85.0
85.8
84.3

whale

26.5
66.9
33.5

82.4
91.5
93.1
88.5
91.9
96.0
96.6
98.0

zebra

68.6
88.5
90.2

horse

30.8
66.8
84.2
74.8
76.8
82.2
82.1
83.8

lion
34.4
21.6
67.8
57.9
57.3
66.0
66.7
78.1

(%)
AP
m
47.5
68.4
73.8
76.2
74.2
75.8
78.6
79.8
82.0

76.8
79.0
83.1
83.4
87.9

69.0
74.1
75.6
76.4
80.1
Table 1. Performance comparison on the ImageNet VID validation set. The average precision (in %) for each class and the mean average
precision over all classes is shown. τ corresponds to the temporal sampling stride. Our D&T variants use ResNet-101 [12] as backbone,
except for the last row which lists performance for an Inception-v4 [37] backbone which excels at some challenging object categories.

57.4
59.9
65.4
68.4
71.9

90.2
91.3
90.5
92.6
92.5

83.3
84.9
85.6
86.1
84.6

61.3
65.3
72.7
74.2
78.6

50.1
54.1
57.9
57.6
59.4

80.2
80.3
79.8
86.7
89.3

79.5
85.3
90.0
91.6
94.7

51.9
56.9
59.4
59.7
63.3

81.4
81.9
83.3
84.3
85.5

68.7
68.3
68.3
69.7
70.1

68.4
68.9
66.5
66.3
67.4

90.9
90.9
93.2
95.2
95.2

volutional network on top of the still image detector. An
extended work [16] uses an encoder-decoder LSTM on top
of a Faster R-CNN object detector which works on propos-
als from a tubelet proposal network, and produces 68.4%
mAP. The ILSVRC 2015 winner [17] combines two Faster
R-CNN detectors, multi-scale training/testing, context sup-
pression, high conﬁdence tracking [39] and optical-ﬂow-
guided propagation to achieve 73.8%. And the winner from
ILSVRC2016 [41] uses a cascaded R-FCN detector, con-
text inference, cascade regression and a correlation tracker
[25] to achieve 76.19% mAP validation performance with
a single model (multi-scale testing and model ensembles
boost their accuracy to 81.1%).

Online capabilities and runtime. The only component
limiting online application is the tube rescoring (Sect. 4).
We have evaluated an online version which performs only
causal rescoring across the tracks. The performance for this
method is 78.7%mAP, compared to the noncausal method
(79.8%mAP). Since the correlation layer and track re-
gressors are operating fully convolutional (no additional
per-ROI computation is added except at the ROI-tracking
layer), the extra runtime cost for testing a 1000x600 pixel
image is 14ms (i.e. 141ms vs 127ms without correlation
and ROI-tracking layers) on a Titan X GPU. The (unoptim-
ized) tube linking (Sect. 4) takes on average 46ms per frame
on a single CPU core).

Temporally strided testing. We look at larger temporal
strides τ during testing, which has recently been found use-
ful for the related task of video action recognition [6, 7].
Our D & T architecture is evaluated only at every τ th frame
of an input sequence and tracklets have to link detections
over larger temporal strides. The performance for a tem-
poral stride of τ = 10 is 78.6% mAP which is 1.2% below

Backbone
ResNet-50
ResNet-101
ResNeXt-101-32×4
Inception-v4

D
72.1
74.1
75.9
77.9

D&T D&T, average
76.5
79.8
81.4
82.0

76.7
80.0
81.6
82.1

Table 2. Backbone network comparison for
image-based
Detection, and video-based Detection & Tracking architectures.
mAP (in %) over all classes on ImageNet VID validation is shown.

the full-frame evaluation. We think that such a minor drop
is remarkable as the duration for processing a video is now
roughly reduced by a factor of 10.

A potential point of improvement is to extend the de-
tector to operate over multiple frames of the sequence. We
found that such an extension did not have a clear beneﬁ-
cial effect on accuracy for short temporal windows (i.e. aug-
menting the detection scores at time t with the detector out-
put at the tracked proposals in the adjacent frame at time
t + 1 only raises the accuracy from 79.8 to 80.0% mAP).
Increasing this window to frames at t ± 1 by bidirectional
detection and tracking from the tth frame did not lead to
any gain. Interestingly, when testing with a temporal stride
of τ = 10 and augmenting the detections from the current
frame at time t with the detector output at the tracked pro-
posals at t+10 raises the accuracy from 78.6 to 79.2% mAP.
We conjecture that the insensitivity of the accuracy for
short temporal windows originates from the high redund-
ancy of the detection scores from the centre frames with the
scores at tracked locations. The accuracy gain for larger
temporal strides, however, suggests that more complement-
ary information is integrated from the tracked objects; thus,
a potentially promising direction for improvement is to de-
tect and track over multiple temporally strided inputs.
Varying the base network. Finally, we compare different
base networks for the Detect & Track architecture. Table 2

shows the performance for using 50 and 101 layer ResNets
[12], ResNeXt-101 [40], and Inception-v4 [37] as back-
bones. We report performance for frame-level Detection
(D), video-level Detection and Tracking (D&T), as well
as the variant that additionally classiﬁes the tracked re-
gion and computes the detection conﬁdence as the average
of the scores in the current frame and the tracked region
in the adjacent frame, (D&T, average). We observe that
D&T beneﬁts from deeper base ConvNets as well as spe-
ciﬁc design structures (ResNeXt and Inception-v4). The
last row in Table 1 lists class-wise performance for D&T
with an Inception-v4 backbone that seems to greatly boost
certain categories, e.g., dog (+5.7 AP), domestic cat (+9.4
AP) , lion (+11.4 AP), lizard (+4.5 AP), rabbit (+4.4 AP),
in comparison to ResNet-101.

6. Conclusion

We have presented a uniﬁed framework for simultaneous
object detection and tracking in video. Our fully convolu-
tional D&T architecture allows end-to-end training for de-
tection and tracking in a joint formulation. In evaluation,
our method achieves accuracy competitive with the winner
of the last ImageNet challenge while being simple and efﬁ-
cient. We demonstrate clear mutual beneﬁts of jointly per-
forming the task of detection and tracking, a concept that
can foster further research in video analysis.
Acknowledgments. This work was partly supported by the
Austrian Science Fund (FWF P27076) and by EPSRC Pro-
gramme Grant Seebibyte EP/M013774/1.

References

[1] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. S. Torr. Fully-convolutional siamese networks for ob-
ject tracking. In ECCV VOT Workshop, 2016.

[2] D. S. Bolme, J. R. Beveridge, B. A. Draper, and Y. M. Lui.
Visual object tracking using adaptive correlation ﬁlters. In
Proc. CVPR, 2010.

[3] J. Dai, Y. Li, K. He, and J. Sun. R-FCN: Object detection via

region-based fully convolutional networks. In NIPS, 2016.

[4] M. Danelljan, A. Robinson, F. S. Khan, and M. Felsberg.
Beyond correlation ﬁlters: Learning continuous convolution
operators for visual tracking. In Proc. ECCV, 2016.

[5] A. Dosovitskiy, P. Fischer, E. Ilg, P. Hausser, C. Hazirbas,
V. Golkov, P. van der Smagt, D. Cremers, and T. Brox.
Flownet: Learning optical ﬂow with convolutional networks.
In Proc. ICCV, 2015.

[6] C. Feichtenhofer, A. Pinz, and R. Wildes. Spatiotemporal re-
sidual networks for video action recognition. In NIPS, 2016.
[7] C. Feichtenhofer, A. Pinz, and A. Zisserman. Convolutional
two-stream network fusion for video action recognition. In
Proc. CVPR, 2016.

[8] S. Gidaris and N. Komodakis. Object detection via a multi-
region and semantic segmentation-aware cnn model. In Proc.
CVPR, 2015.

[9] R. B. Girshick. Fast R-CNN. In Proc. ICCV, 2015.

[10] R. B. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich
feature hierarchies for accurate object detection and semantic
segmentation. In Proc. CVPR, 2014.

[11] G. Gkioxari and J. Malik. Finding action tubes.

In Proc.

CVPR, 2015.

[12] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In Proc. CVPR, 2016.

[13] D. Held, S. Thrun, and S. Savarese. Learning to track at 100

FPS with deep regression networks. In Proc. ECCV, 2016.

[14] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista. High-
IEEE

speed tracking with kernelized correlation ﬁlters.
PAMI, 37(3):583–596, 2015.

[15] A. Joulin, K. Tang, and L. Fei-Fei. Efﬁcient image and video
co-localization with frank-wolfe algorithm. In Proc. ECCV,
2014.

[16] K. Kang, H. Li, T. Xiao, W. Ouyang, J. Yan, X. Liu, and
X. Wang. Object detection in videos with tubelet proposal
networks. In Proc. CVPR, 2017.

[17] K. Kang, H. Li, J. Yan, X. Zeng, B. Yang, T. Xiao, C. Zhang,
Z. Wang, R. Wang, X. Wang, and W. Ouyang. T-CNN: tube-
lets with convolutional neural networks for object detection
from videos. arXiv preprint, 2016.

[18] K. Kang, W. Ouyang, H. Li, and X. Wang. Object detection
from video tubelets with convolutional neural networks. In
Proc. CVPR, 2016.

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1106–1114, 2012.

[20] S. Kwak, M. Cho, I. Laptev, J. Ponce, and C. Schmid. Unsu-
pervised object discovery and tracking in video collections.
In Proc. CVPR, 2015.

[21] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1(4):541–551, 1989.

[22] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona,
D. Ramanan, P. Doll´ar, and C. L. Zitnick. Microsoft coco:
Common objects in context. In Proc. ECCV, 2014.

[23] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y.
Fu, and A. C. Berg. Ssd: Single shot multibox detector. In
Proc. ECCV, 2016.

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proc. CVPR, 2015.
[25] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang. Hierarchical
In Proc. ICCV,

convolutional features for visual tracking.
2015.

[26] H. Nam and B. Han. Learning multi-domain convolutional

neural networks for visual tracking. In Proc. CVPR, 2016.

[27] X. Peng and C. Schmid. Multi-region two-stream R-CNN

ImageNet
In

for action detection. In Proc. ECCV, 2016.

[28] A. Prest, C. Leistner, J. Civera, C. Schmid, and V. Fer-
rari. Learning object class detectors from weakly annotated
video. In Proc. CVPR, 2012.

[29] E. Real, J. Shlens, S. Mazzocchi, X. Pan, and V. Vanhoucke.
YouTube-BoundingBoxes: A Large High-Precision Human-
Annotated Data Set for Object Detection in Video. ArXiv
e-prints, 2017.

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Proc.
CVPR, 2016.

[31] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. IEEE PAMI, 2016.

[32] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
ImageNet Large Scale Visual
A. C. Berg, and L. Fei-Fei.
Recognition Challenge. IJCV, 115(3):211–252, 2015.
[33] S. Saha, G. Singh, M. Sapienza, P. H. Torr, and F. Cuzzolin.
Deep learning for detecting multiple space-time action tubes
in videos. In Proc. BMVC., 2016.

[34] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proc. CVPR, 2016.

[35] K. Simonyan and A. Zisserman. Two-stream convolutional

networks for action recognition in videos. In NIPS, 2014.

[36] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In Proc. ICLR,
2015.

[37] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, Inception-ResNet and the impact of residual
connections on learning. 2017.

[38] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proc. CVPR, 2015.
[39] L. Wang, W. Ouyang, X. Wang, and H. Lu. Visual tracking
with fully convolutional networks. In Proc. ICCV, 2015.
[40] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. arXiv pre-
print arXiv:1611.05431, 2016.

[41] J. Yang, H. Shuai, Z. Yu, R. Fan, Q. Ma, Q. Liu, and J. Deng.
ILSVRC2016 object detection from video: Team NUIST.
http://image-net.org/challenges/talks/
2016/Imagenet%202016%20VID.pptx, 2016.
[42] X. Zhu, Y. Xiong, J. Dai, L. Yuan, and Y. Wei. Deep feature

ﬂow for video recognition. In Proc. CVPR, 2017.

Figure 5. Qualitative results for consecutive frames of videos where our D&T approach could improve. Failures can be attributed to scale,
occlusion, misclassiﬁcation, or NMS issues.

Detect to Track and Track to Detect

Christoph Feichtenhofer∗
Graz University of Technology
feichtenhofer@tugraz.at

Axel Pinz
Graz University of Technology
axel.pinz@tugraz.at

Andrew Zisserman
University of Oxford
az@robots.ox.ac.uk

8
1
0
2
 
r
a

M
 
7
 
 
]

V
C
.
s
c
[
 
 
2
v
8
5
9
3
0
.
0
1
7
1
:
v
i
X
r
a

Abstract

Recent approaches for high accuracy detection and
tracking of object categories in video consist of complex
multistage solutions that become more cumbersome each
year. In this paper we propose a ConvNet architecture that
jointly performs detection and tracking, solving the task in
a simple and effective way.

Our contributions are threefold: (i) we set up a ConvNet
architecture for simultaneous detection and tracking, using
a multi-task objective for frame-based object detection and
across-frame track regression; (ii) we introduce correlation
features that represent object co-occurrences across time
to aid the ConvNet during tracking; and (iii) we link
the frame level detections based on our across-frame
tracklets to produce high accuracy detections at the video
level. Our ConvNet architecture for spatiotemporal object
detection is evaluated on the large-scale ImageNet VID
dataset where it achieves state-of-the-art results. Our
approach provides better single model performance than
the winning method of the last ImageNet challenge while
being conceptually much simpler. Finally, we show that by
increasing the temporal stride we can dramatically increase
the tracker speed. Our code and models are available at
http://github.com/feichtenhofer/detect-track

1. Introduction

Object detection in images has received a lot of atten-
tion over the last years with tremendous progress mostly
due to the emergence of deep Convolutional Networks
[12, 19, 21, 36, 38] and their region based descendants
[3, 9, 10, 31].
In the case of object detection and track-
ing in videos, recent approaches have mostly used detec-
tion as a ﬁrst step, followed by post-processing methods
such as applying a tracker to propagate detection scores
over time. Such variations on the ‘tracking by detection’
paradigm have seen impressive progress but are dominated

∗Christoph Feichtenhofer is a recipient of a DOC Fellowship of the
Austrian Academy of Sciences at the Institute of Electrical Measurement
and Measurement Signal Processing, Graz University of Technology.

(a)

(c)

(b)

(d)

Figure 1. Challenges for video object detection. Training examples
for: (a) bicycle, bird, rabbit; (b) dog; (c) fox; and (d) red panda.

by frame-level detection methods.

Object detection in video has seen a surge in interest
lately, especially since the introduction of the ImageNet
[32] video object detection challenge (VID). Different from
the ImageNet object detection (DET) challenge, VID shows
objects in image sequences and comes with additional
challenges of (i) size:
the sheer number of frames that
video provides (VID has around 1.3M images, compared
to around 400K in DET or 100K in COCO [22]), (ii)
motion blur: due to rapid camera or object motion, (iii)
quality: internet video clips are typically of lower quality
than static photos, (iv) partial occlusion: due to change in
objects/viewer positioning, and (v) pose: unconventional
In
object-to-camera poses are frequently seen in video.
Fig. 1, we show example images from the VID dataset; for
more examples please see1.

To solve this challenging task, recent top entries in the
ImageNet [32] video detection challenge use exhaustive
post-processing on top of frame-level detectors. For ex-
ample, the winner [17] of ILSVRC’15 uses two multi-stage
Faster R-CNN [31] detection frameworks, context suppres-
sion, multi-scale training/testing, a ConvNet tracker [39],
optical-ﬂow based score propagation and model ensembles.
In this paper we propose a uniﬁed approach to tackle the
problem of object detection in realistic video. Our object-
ive is to directly infer a ‘tracklet’ over multiple frames by
simultaneously carrying out detection and tracking with a

1http://vision.cs.unc.edu/ilsvrc2015/ui/vid

ConvNet. To achieve this we propose to extend the R-FCN
[3] detector with a tracking formulation that is inspired by
current correlation and regression based trackers [1, 13, 25].
We train a fully convolutional architecture end-to-end us-
ing a detection and tracking based loss and term our ap-
proach D&T for joint Detection and Tracking. The input
to the network consists of multiple frames which are ﬁrst
passed through a ConvNet trunk (e.g. a ResNet-101 [12])
to produce convolutional features which are shared for the
task of detection and tracking. We compute convolutional
cross-correlation between the feature responses of adjacent
frames to estimate the local displacement at different fea-
ture scales. On top of the features, we employ an RoI-
pooling layer [3] to classify and regress box proposals as
well as an RoI-tracking layer that regresses box transforma-
tions (translation, scale, aspect ratio) across frames. Finally,
to infer long-term tubes of objects across a video we link
detections based on our tracklets.

An evaluation on the large-scale ImageNet VID dataset
shows that our approach is able to achieve better single-
model performance than the winner of the last ILSVRC’16
challenge, despite being conceptually simple and much
faster. Moreover, we show that including a tracking loss
may improve feature learning for better static object detec-
tion, and we also present a very fast version of D&T that
works on temporally-strided input frames.

2. Related work

Object detection. Two families of detectors are currently
popular: First, region proposal based detectors R-CNN
[10], Fast R-CNN [9], Faster R-CNN [31] and R-FCN [3]
and second, detectors that directly predict boxes for an im-
age in one step such as YOLO [30] and SSD [23].

Our approach builds on R-FCN [3] which is a simple and
efﬁcient framework for object detection on region propos-
als with a fully convolutional nature. In terms of accuracy it
is competitive with Faster R-CNN [31] which uses a multi-
layer network that is evaluated per-region (and thus has a
cost growing linearly with the number of candidate RoIs).
R-FCN reduces the cost for region classiﬁcation by pushing
the region-wise operations to the end of the network with
the introduction of a position-sensitive RoI pooling layer
which works on convolutional features that encode the spa-
tially subsampled class scores of input RoIs.

Tracking. Tracking is also an extensively studied prob-
lem in computer vision with most recent progress devoted
to trackers operating on deep ConvNet features.
In [26]
a ConvNet is ﬁne-tuned at test-time to track a target from
the same video via detection and bounding box regression.
Training on the examples of a test sequence is slow and
also not applicable in the object detection setting. Other
methods use pre-trained ConvNet features to track and have

achieved strong performance either with correlation [1, 25]
or regression trackers on heat maps [39] or bounding boxes
[13]. The regression tracker in [13] is related to our method.
It is based on a Siamese ConvNet that predicts the location
in the second image of the object shown in the center of the
previous image. Since this tracker predicts a bounding box
instead of just the position, it is able to model changes in
scale and aspect of the tracked template. The major draw-
back of this approach is that it only can process a single tar-
get template and it also has to rely on signiﬁcant data aug-
mentation to learn all possible transformations of tracked
boxes. The approach in [1] is an example of a correlation
tracker and inspires our method. The tracker also uses a
fully-convolutional Siamese network that takes as input the
tracking template and the search image. The ConvNet fea-
tures from the last convolutional layer are correlated to ﬁnd
the target position in the response map. One drawback of
many correlation trackers [1, 25] is that they only work on
single targets and do not account for changes in object scale
and aspect ratio.

Video object detection. Action detection is also a re-
lated problem and has received increased attention recently,
mostly with methods building on two-stream ConvNets
[35]. In [11] a method is presented that uses a two-stream
R-CNN [10] to classify regions and link them across frames
based on the action predictions and their spatial overlap.
This method has been adopted by [33] and [27] where the
R-CNN was replaced by Faster R-CNN with the RPN oper-
ating on two streams of appearance and motion information.
One area of interest is learning to detect and localize in
each frame (e.g. in video co-localization) with only weak
supervision. The YouTube Object Dataset [28], has been
used for this purpose, e.g. [15, 20].

Since the object detection from video task has been in-
troduced at the ImageNet challenge, it has drawn signiﬁc-
ant attention.
In [18] tubelet proposals are generated by
applying a tracker to frame-based bounding box propos-
als. The detector scores across the video are re-scored by
a 1D CNN model. In their corresponding ILSVRC submis-
sion the group [17] added a propagation of scores to nearby
frames based on optical ﬂows between frames and sup-
pression of class scores that are not among the top classes
in a video. A more recent work [16] introduces a tube-
let proposal network that regresses static object proposals
over multiple frames, extracts features by applying Faster
R-CNN which are ﬁnally processed by an encoder-decoder
LSTM. In deep feature ﬂow [42] a recognition ConvNet is
applied to key frames only and an optical ﬂow ConvNet is
used for propagating the deep feature maps via a ﬂow ﬁeld
to the rest of the frames. This approach can increase detec-
tion speed by a factor of 5 at a slight accuracy cost. The
approach is error-prone due largely to two aspects: First,

propagation from the key frame to the current frame can
be erroneous and, second, the key frames can miss features
from current frames. Very recently a new large-scale data-
set for video object detection has been introduced [29] with
single objects annotations over video sequences.

3. D&T Approach

In this section we ﬁrst give an overview of the Detect
and Track (D&T) approach (Sect. 3.1) that generates track-
lets given two (or more) frames as input. We then give
the details, starting with the baseline R-FCN detector [3]
(Sect. 3.2), and formulating the tracking objective as cross-
frame bounding box regression (Sect. 3.3); ﬁnally, we intro-
duce the correlation features (Sect. 3.4) that aid the network
in the tracking process.

Sect. 4 shows how we link across-frame tracklets to
tubes over the temporal extent of a video, and Sect. 5 de-
scribes how we apply D&T to the ImageNet VID challenge.

3.1. D&T overview

We aim at jointly detecting and tracking (D&T) objects
in video. Fig. 2 illustrates our D&T architecture. We build
on the R-FCN [3] object detection framework which is fully
convolutional up to region classiﬁcation and regression, and
extend it for multi-frame detection and tracking. Given
a set of two high-resolution input frames our architecture
ﬁrst computes convolutional feature maps that are shared
for the tasks of detection and tracking (e.g. the features of
a ResNet-101[12]). An RPN is used to propose candid-
ate regions in each frame based on the objectness likeli-
hood for pre-deﬁned candidate boxes (i.e. “anchors”[31]).
Based on these regions, RoI pooling is employed to aggreg-
ate position-sensitive score and regression maps, produced
from intermediate convolutional layers, to classify boxes
and reﬁne their coordinates (regression), respectively.

We extend this architecture by introducing a regressor
that
takes the intermediate position-sensitive regression
maps from both frames (together with correlation maps, see
below) as input to an RoI tracking operation which out-
puts the box transformation from one frame to the other.
The correspondence between frames is thus simply accom-
plished by pooling features from both frames, at the same
proposal region. We train the RoI tracking task by extend-
ing the multi-task objective of R-FCN with a tracking loss
that regresses object coordinates across frames. Our track-
ing loss operates on ground truth objects and evaluates a
soft L1 norm [9] between coordinates of the predicted track
and the ground truth track of an object.

Such a tracking formulation can be seen as a multi-
object extension of the single target tracker in [13] where
a ConvNet is trained to infer an object’s bounding box from
features of the two frames. One drawback of such an ap-
proach is that it does not exploit translational equivariance

which means that the tracker has to learn all possible trans-
lations from training data. Thus such a tracker requires ex-
ceptional data augmentation (artiﬁcially scaling and shifting
boxes) during training [13] .

A tracking representation that is based on correlation ﬁl-
ters [2, 4, 14] can exploit the translational equivariance as
correlation is equivariant to translation. Recent correlation
trackers [1, 25] typically work on high-level ConvNet fea-
tures and compute the cross correlation between a tracking
template and the search image (or a local region around the
tracked position from the previous frame). The resulting
correlation map measures the similarity between the tem-
plate and the search image for all circular shifts along the
horizontal and vertical dimension. The displacement of a
target object can thus be found by taking the maximum of
the correlation response map.

Different from typical correlation trackers that work on
single target templates, we aim to track multiple objects
simultaneously. We compute correlation maps for all posi-
tions in a feature map and let RoI tracking additionally op-
erate on these feature maps for better track regression. Our
architecture is able to be trained end-to-end taking as input
frames from a video and producing object detections and
their tracks. The next sections describe how we structure
our architecture for end-to-end learning of object detection
and tracklets.

3.2. Object detection and tracking in R-FCN

Our architecture takes frames It ∈ RH0×W0×3 at time t
and pushes them through a backbone ConvNet (i.e. ResNet-
l ∈ RHl×Wl×Dl where
101 [12]) to obtain feature maps xt
Wl, Hl and Dl are the width, height and number of chan-
nels of the respective feature map output by layer l. As in
R-FCN [3] we reduce the effective stride at the last convo-
lutional layer from 32 pixels to 16 pixels by modifying the
conv5 block to have unit spatial stride, and also increase its
receptive ﬁeld by dilated convolutions [24].

Our overall system builds on the R-FCN [3] object de-
tector which works in two stages: ﬁrst it extracts candid-
ate regions of interest (RoI) using a Region Proposal Net-
work (RPN) [31]; and, second, it performs region classi-
ﬁcation into different object categories and background by
using a position-sensitive RoI pooling layer [3]. The in-
put to this RoI pooling layer comes from an extra convolu-
tional layer with output xt
cls that operates on the last convo-
lutional layer of a ResNet [12]. The layer produces a bank
of Dcls = k2(C + 1) position-sensitive score maps which
correspond to a k × k spatial grid describing relative pos-
itions to be used in the RoI pooling operation for each of
the C categories and background. Applying the softmax
function to the outputs leads to a probability distribution p
over C + 1 classes for each RoI. In a second branch R-FCN
puts a sibling convolutional layer with output xt
reg after the

Figure 2. Architecture of our Detect and Track (D&T) approach (see Section 3 for details).

last convolutional layer for bounding box regression, again
a position-sensitive RoI pooling operation is performed on
this bank of Dcls = 4k2 maps for class-agnostic bounding
box prediction of a box b = (bx, by, bw, bh).

Let us now consider a pair of frames It, It+τ , sampled at
time t and t+τ , given as input to the network. We introduce
an inter-frame bounding box regression layer that performs
position sensitive RoI pooling on the concatenation of the
bounding box regression features {xt
reg } to predict
w , ∆t+τ
the transformation ∆t+τ = (∆t+τ
) of
the RoIs from t to t + τ . The correlation features, that are
also used by the bounding box regressors, are described in
section 3.4. Fig. 3 shows an illustration of this approach.

reg, xt+τ
, ∆t+τ
, ∆t+τ
y

h

x

3.3. Multitask detection and tracking objective

To learn this regressor, we extend the multi-task loss of
Fast R-CNN [9], consisting of a combined classiﬁcation
Lcls and regression loss Lreg, with an additional term that
scores the tracking across two frames Ltra. For a single
iteration and a batch of N RoIs the network predicts soft-
max probabilities {pi}N
i=1, and
}Ntra
cross-frame RoI-tracks {∆t+τ
i=1 . Our overall objective
function is written as:

i=1, regression offsets {bi}N

i

L({pi}, {bi}, {∆i}) =

Lcls(pi,c∗ )

1
N

N
(cid:88)

i=1

+λ

1
Nf g

N
(cid:88)

i=1

+λ

1
Ntra

Ntra(cid:88)

i=1

[c∗

i > 0]Lreg(bi, b∗
i )

(1)

Ltra(∆t+τ

i

, ∆∗,t+τ
i

).

The ground truth class label of an RoI is deﬁned by c∗
i
and its predicted softmax score is pi,c∗ . b∗
i is the ground
truth regression target, and ∆∗,t+τ
is the track regression
target. The indicator function [c∗
i > 0] is 1 for fore-

i

ground RoIs and 0 for background RoIs (with c∗
i = 0).
Lcls(pi,c∗ ) = − log(pi,c∗ ) is the cross-entropy loss for box
classiﬁcation, and Lreg & Ltra are bounding box and track
regression losses deﬁned as the smooth L1 function in [9].
The tradeoff parameter is set to λ = 1 as in [3, 9]. The as-
signment of RoIs to ground truth is as follows: a class label
c∗ and regression targets b∗ are assigned if the RoI overlaps
with a ground-truth box at least by 0.5 in intersection-over-
union (IoU) and the tracking target ∆∗,t+τ is assigned only
to ground truth targets which are appearing in both frames.
Thus, the ﬁrst term of (1) is active for all N boxes in a train-
ing batch, the second term is active for Nf g foreground RoIs
and the last term is active for Ntra ground truth RoIs which
have a track correspondence across the two frames.

y, Bt

x, Bt

For track regression we use the bounding box re-
gression parametrisation of R-CNN [9, 10, 31]. For a
single object we have ground truth box coordinates Bt =
h) in frame t, and similarly Bt+τ for frame
(Bt
t + τ , denoting the horizontal & vertical centre coordinates
and its width and height. The tracking regression values for
the target ∆∗,t+τ = {∆∗,t+τ
} are
then

, ∆∗,t+τ
h

, ∆∗,t+τ
y

, ∆∗,t+τ
w

w, Bt

x

∆∗,t+τ
x

=

∆∗,t+τ
y

=

(2)

∆∗,t+τ
w

= log(

∆∗,t+τ
h

= log(

)).

(3)

Bt+τ

x − Bt
x
Bt
w
Bt+τ
w
Bt
w

)

Bt+τ

y − Bt
y
Bt
h
Bt+τ
h
Bt
h

3.4. Correlation features for object tracking

Different from typical correlation trackers on single tar-
get templates, we aim to track multiple objects simultan-
eously. We compute correlation maps for all positions in
a feature map and let RoI pooling operate on these feature
maps for track regression. Considering all possible circular
shifts in a feature map would lead to large output dimen-
sionality and also produce responses for too large displace-

Figure 3. Schematic of our approach for two frames at time t and t + τ . The inputs are ﬁrst passed through a fully-convolutional network
to produce feature maps. A correlation layer operates on multiple feature maps of different scales (only the coarsest scale is shown in the
ﬁgure) and estimates local feature similarity for various offsets between the two frames. Finally, position sensitive RoI-pooling [3] operates
on the convolutional features of the individual frames to produce per-frame detections and also on a stack of individual frame-features as
well as the between frame correlation features to output regression offsets of the boxes across the two frames (RoI-tracking).

ments. Therefore, we restrict correlation to a local neigh-
bourhood. This idea was originally used for optical ﬂow
estimation in [5], where a correlation layer is introduced to
aid a ConvNet in matching feature points between frames.
The correlation layer performs point-wise feature compar-
l, xt+τ
ison of two feature maps xt

l

xt,t+τ

corr (i, j, p, q) =

l(i, j), xt+τ
xt

l

(i + p, j + q)

(4)

(cid:68)

(cid:69)

where −d ≤ p ≤ d and −d ≤ q ≤ d are offsets to compare
features in a square neighbourhood around the locations i, j
in the feature map, deﬁned by the maximum displacement,
d. Thus the output of the correlation layer is a feature map
of size xcorr ∈ RHl×Wl×(2d+1)×(2d+1). Equation (4) can
be seen as a correlation of two feature maps within a local
square window deﬁned by d. We compute this local correl-
ation for features at layers conv3, conv4 and conv5 (we use
a stride of 2 in i, j to have the same size in the conv3 cor-
relation). We show an illustration of these features for two
sample sequences in Fig. 4.

To use these features for track-regression, we let RoI
pooling operate on these maps by stacking them with the
bounding box features in Sect. 3.2 {xt,t+τ

reg, xt+τ

reg }.

corr , xt

puts a hard constraint on the number of frames a (deep) ar-
chitecture can process in one iteration (due to memory limit-
ations in GPU hardware). Therefore, a tradeoff between the
number of frames and detection accuracy has to be made.
Since video possesses a lot of redundant information and
objects typically move smoothly in time we can use our
inter-frame tracks to link detections in time and build long-
term object tubes. To this end, we adopt an established tech-
nique from action localization [11, 27, 33], which is used to
to link frame detections in time to tubes.

i, yt

i, ht
i, yt

i,c}, where Dt,c

Consider the class detections for a frame at time t,
Dt,c
i = {xt
i, pt
i , wt
is a box indexed
i
i and height ht
i ) with width wt
by i, centred at (xt
i, and
pt
i,c is the softmax probability for class c. Similarly, we
also have tracks T t,t+τ
= {xt
i, yt
i; xt
i +
∆t+τ
i + ∆t+τ
h } that describe the transforma-
y
tion of the boxes from frame t to t + τ . We can now deﬁne a
class-wise linking score that combines detections and tracks
across time

i
w , ht

i + ∆t+τ

i + ∆t+τ

i , wt

i, ht

, wt

, yt

x

sc(Dt

i,c, Dt+τ

j,c , T t,t+τ ) = pt

i,c + pt+τ

j,c + ψ(Dt

i, Dj, T t,t+τ )
(5)

where the pairwise score is

(cid:40)

i, Dt+τ
if Dt
1,
j
0, otherwise.

∈ T t,t+τ ,

4. Linking tracklets to object tubes

ψ(Dt

i,c, Dt+τ

j,c , T t,t+τ ) =

One drawback of high-accuracy object detection is that
high-resolution input images have to be processed which

(6)
Here, the pairwise term ψ evaluates to 1 if the IoU over-

(a) frame t

(b) frame t + τ

(c) corr. conv3

(d) corr. conv4

(e) corr. conv5

(f) frame t

(g) frame t + τ

(h) corr. conv3
Figure 4. Correlation features for two frames of two validation videos. For the frames in (a) & (b) , we show in (c),(d) and (e) the correlation
maps computed by using features from conv3, conv4 and conv5, respectively. The feature maps are shown as arrays with the centre map
corresponding to zero offsets p, q between the frames and the neighbouring rows and columns correspond to shifted correlation maps
of increasing p, q. We observe that the airplane moves to the top-right; hence the feature maps corresponding to p = 2, q = 3 show
strong responses (highlighted in red). Note that the features at conv4 and conv5 have the same resolution, whereas at conv3 we use stride
2 correlation sampling to produce equal sized outputs. In (h),(i) and (j) we show additional multiscale correlation maps for the frames
in (f) & (g) which are affected by camera motion resulting in correlation patterns that correctly estimate this at the lower layer (conv3
corr. responds on the grass and legs of the animal (h)), and also handles the independent motion of the animals at the higher conv5 corr (j).

(j) corr. conv5

(i) corr. conv4

i, Dt+τ
j

lap a track correspondences T t,t+τ with the detection boxes
Dt
is larger than 0.5. This is necessary, because the
output of the track regressor does not have to exactly match
the output of the box regressor.

The optimal path across a video can then be found by
maximizing the scores over the duration T of the video [11]

¯D(cid:63)

c = argmax

¯D

1
T

T −τ
(cid:88)

t=1

sc(Dt, Dt+τ , T t,t+τ ).

(7)

Eq. (7) can be solved efﬁciently by applying the Viterbi al-
gorithm [11]. Once the optimal tube ¯D(cid:63)
c is found, the detec-
tions corresponding to that tube are removed from the set of
regions and (7) is applied again to the remaining regions.

After having found the class-speciﬁc tubes ¯Dc for one
video, we re-weight all detection scores in a tube by adding
the mean of the α = 50% highest scores in that tube. We
found that overall performance is largely robust to that para-
meter, with less than 0.5% mAP variation when varying
10% ≤ α ≤ 100%. Our simple tube-based re-weighting
aims to boost the scores for positive boxes on which the
detector fails. Using the highest scores of a tube for re-
weighting acts as a form of non-maximum suppression. It
is also inspired by the hysteresis tracking in the Canny edge
detector. Our reweighting assumes that the detector fails
at most in half of a tubes frames, and improves robustness
of the tracker, though the performance is quite insensitive
to the proportion chosen (α). Note that our approach en-
forces the tube to span the whole video and, for simplicity,
we do not prune any detections in time. Removing detec-
tions with subsequent low scores along a tube (e.g. [27, 33])
could clearly improve the results, but we leave that for fu-
ture work. In the following section our approach is applied
to the video object detection task.

5. Experiments

5.1. Dataset sampling and evaluation

We evaluate our method on the ImageNet [32] object de-
tection from video (VID) dataset2 which contains 30 classes
in 3862 training and 555 validation videos. The objects
have ground truth annotations of their bounding box and
track ID in a video. Since the ground truth for the test set
is not publicly available, we measure performance as mean
average precision (mAP) over the 30 classes on the valida-
tion set by following the protocols in [16, 17, 18, 42], as is
standard practice.

The 30 object categories in ImageNet VID are a subset
of the 200 categories in the ImageNet DET dataset. Thus
we follow previous approaches [16, 17, 18, 42] and train
our R-FCN detector on an intersection of ImageNet VID
and DET set (only using the data from the 30 VID classes).
Since the DET set contains large variations in the number
of samples per class, we sample at most 2k images per class
from DET. We also subsample the VID training set by using
only 10 frames from each video. The subsampling reduces
the effect of dominant classes in DET (e.g. there are 56K
images for the dog class in the DET training set) and very
long video sequences in the VID training set.

5.2. Training and testing

RPN. Our RPN is trained as originally proposed [31]. We
attach two sibling convolutional layers to the stride-reduced
ResNet-101 (Sect. 3.2) to perform proposal classiﬁcation
and bounding box regression at 15 anchors corresponding
to 5 scales and 3 aspect ratios. As in [31] we also extract
proposals from 5 scales and apply non-maximum suppres-
sion (NMS) with an IoU threshold of 0.7 to select the top

2http://www.image-net.org/challenges/LSVRC/

300 proposals in each frame for training/testing our R-FCN
detector. We found that pre-training on the full ImageNet
DET set helps to increase the recall; thus, our RPN is ﬁrst
pre-trained on the 200 classes of ImageNet DET before
ﬁne-tuning on only the 30 classes which intersect ImageNet
DET and VID. Our 300 proposals per image achieve a mean
recall of 96.5% on the ImageNet VID validation set.

R-FCN. Our R-FCN detector is trained similar to [3, 42].
We use the stride-reduced ResNet-101 with dilated con-
volution in conv5 (see Sect. 3.2) and online hard example
mining [34]. A randomly initialized 3 × 3, dilation 6 con-
volutional layer is attached to conv5 for reducing the fea-
ture dimension to 512 [42] (in the original R-FCN this is
a 1 × 1 convolutional layer without dilation and an out-
put dimension of 1024). For object detection and box re-
gression, two sibling 1 × 1 convolutional layers provide the
Dcls = k2(C + 1) and Dreg = 4k2 inputs to the position-
sensitive RoI pooling layer. We use a k × k = 7 × 7 spatial
grid for encoding relative positions as in [3].

In both training and testing, we use single scale images
with shorter dimension of 600 pixels. We use a batch size of
4 in SGD training and a learning rate of 10−3 for 60K itera-
tions followed by a learning rate of 10−4 for 20K iterations.
For testing we apply NMS with IoU threshold of 0.3.

D & T. For training our D&T architecture we start with the
R-FCN model from above and further ﬁne-tune it on the
full ImageNet VID training set with randomly sampling a
set of two adjacent frames from a different video in each
iteration. In each other iteration we also sample from the
ImageNet DET training set to avoid biasing our model to
the VID training set. When sampling from the DET set we
send the same two frames through the network as there are
no sequences available. Besides not forgetting the images
from the DET training set, this has an additional beneﬁcial
effect of letting our model prefer small motions over large
ones (e.g. the tracker in [13] samples motion augmentation
from a Laplacian distribution with zero mean to bias a re-
gression tracker on small displacements). Our correlation
features (4) are computed at layers conv3, conv4 and conv5
with a maximum displacement of d = 8 and a stride of 2
in i, j for the the conv3 correlation. For training, we use a
learning rate of 10−4 for 40K iterations and 10−5 for 20K it-
erations at a batch size of 4. During testing our architecture
is applied to a sequence with temporal stride τ , predicting
detections D and tracklets T between them. For object-
centred tracks, we use the regressed frame boxes as input
of the ROI-tracking layer. We perform non-maximum sup-
pression with bounding-box voting [8] before the tracklet
linking step to reduce the number of detections per image
and class to 25. These detections are then used in eq. (7)
to extract tubes and the corresponding detection boxes are
re-weighted as outlined in Sect. 4 for evaluation.

5.3. Results

We show experimental results for our models and
the current state-of-the-art in Table 1. Qualitative res-
ults for difﬁcult validation videos can be seen in Fig. 5
and also at http://www.robots.ox.ac.uk/˜vgg/
research/detect-track/
Frame level methods. First we compare methods work-
ing on single frames without any temporal processing. Our
R-FCN baseline achieves 74.2% mAP which compares fa-
vourably to the best performance of 73.9% mAP in [42].
We think our slightly better accuracy comes from the use of
15 anchors for RPN instead of the 9 anchors in [42]. The
Faster R-CNN models working as single frame baselines in
[18], [16] and [17] score with 45.3%, 63.0% and 63.9%, re-
spectively. We think their lower performance is mostly due
to the difference in training procedure and data sampling,
and not originating from a weaker base ConvNet, since our
frame baseline with a weaker ResNet-50 produces 72.1%
mAP (vs. the 74.2% for ResNet-101). Next, we are in-
terested in how our model performs after ﬁne-tuning with
the tracking loss, operating via RoI tracking on the correl-
ation and track regression features (termed D (& T loss) in
Table 1). The resulting performance for single-frame test-
ing is 75.8% mAP. This 1.6% gain in accuracy shows that
merely adding the tracking loss can aid the per-frame de-
tection. A possible reason is that the correlation features
propagate gradients back into the base ConvNet and there-
fore make the features more sensitive to important objects
in the training data. We see signiﬁcant gains for classes like
panda, monkey, rabbit or snake which are likely to move.
Video level methods. Next, we investigate the effect of
multi-frame input during testing.
In Table 1 we see that
linking our detections to tubes based on our tracklets, D&T
(τ = 1), raises performance substantially to 79.8% mAP.
Some class-AP scores can be boosted signiﬁcantly (e.g.
cattle by 9.6, dog by 5.5, cat by 6, fox by 7.9, horse by
5.3, lion by 9.4, motorcycle by 6.4 rabbit by 8.9, red panda
by 6.3 and squirrel by 8.5 points AP). This gain is mostly
for the following reason: if an object is captured in an un-
conventional pose, is distorted by motion blur, or appears
at a small scale, the detector might fail; however, if its tube
is linked to other potentially highly scoring detections of
the same object, these failed detections can be recovered
(even though we use a very simple re-weighting of detec-
tions across a tube). The only class that loses AP is whale
(−2.6 points) and this has an obvious explanation: in most
validation snippets the whales successively emerge and sub-
merge from the water and our detection rescoring based on
tubes would assign false positives when they submerge for
a couple of frames.

When comparing our 79.8% mAP against the current
state of the art, we make the following observations. The
method in [18] achieves 47.5% by using a temporal con-

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
Winner ILSVRC’16 [41]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

airplane

72.7
84.6
83.7
87.4
89.4
89.1
90.2
91.5

lizard

54.2
74.4
80.3

antelope

75.5
78.1
85.7
79.4
80.4
79.8
82.3
81.4

monkey

1.6
36.6
54.8

bear
42.2
72.0
84.4
84.5
83.8
87.5
87.9
91.4

motorcycle

61.0
76.3
80.6

bicycle

39.5
67.2
74.5
67.0
70.0
68.8
70.1
76.4

rabbit

36.6
51.4
63.7

(single model performance)

bird
25.0
68.0
73.8
72.1
71.8
72.9
73.2
73.9

panda
red
19.7
70.6
85.7

bus
64.1
80.1
75.7
84.6
82.6
86.1
87.7
86.8

sheep

55.0
64.2
60.5

car
36.3
54.7
57.1
54.6
56.8
55.7
57.0
57.8

snake

38.9
61.2
72.9

cattle

51.1
61.2
58.7
72.9
71.0
78.6
80.6
81.8

squirrel

2.6
42.3
52.7

dog
24.4
61.6
72.3
70.9
71.8
76.4
77.3
83.0

tiger

42.8
84.8
89.7

cat
d.
48.6
78.9
69.2
77.3
76.6
83.4
82.6
92.0

train

54.6
78.1
81.3

panda

hamster

elephant

65.6
71.6
80.2
76.7
79.3
82.9
83.0
81.3

turtle

66.1
77.2
73.7

fox
73.9
83.2
83.4
89.7
89.9
97.0
97.8
96.6

watercraft

69.2
61.5
69.5

g.
61.7
78.1
80.5
77.6
83.3
85.0
85.8
84.3

whale

26.5
66.9
33.5

82.4
91.5
93.1
88.5
91.9
96.0
96.6
98.0

zebra

68.6
88.5
90.2

horse

30.8
66.8
84.2
74.8
76.8
82.2
82.1
83.8

lion
34.4
21.6
67.8
57.9
57.3
66.0
66.7
78.1

(%)
AP
m
47.5
68.4
73.8
76.2
74.2
75.8
78.6
79.8
82.0

76.8
79.0
83.1
83.4
87.9

69.0
74.1
75.6
76.4
80.1
Table 1. Performance comparison on the ImageNet VID validation set. The average precision (in %) for each class and the mean average
precision over all classes is shown. τ corresponds to the temporal sampling stride. Our D&T variants use ResNet-101 [12] as backbone,
except for the last row which lists performance for an Inception-v4 [37] backbone which excels at some challenging object categories.

57.4
59.9
65.4
68.4
71.9

90.2
91.3
90.5
92.6
92.5

83.3
84.9
85.6
86.1
84.6

61.3
65.3
72.7
74.2
78.6

50.1
54.1
57.9
57.6
59.4

80.2
80.3
79.8
86.7
89.3

79.5
85.3
90.0
91.6
94.7

51.9
56.9
59.4
59.7
63.3

81.4
81.9
83.3
84.3
85.5

68.7
68.3
68.3
69.7
70.1

68.4
68.9
66.5
66.3
67.4

90.9
90.9
93.2
95.2
95.2

volutional network on top of the still image detector. An
extended work [16] uses an encoder-decoder LSTM on top
of a Faster R-CNN object detector which works on propos-
als from a tubelet proposal network, and produces 68.4%
mAP. The ILSVRC 2015 winner [17] combines two Faster
R-CNN detectors, multi-scale training/testing, context sup-
pression, high conﬁdence tracking [39] and optical-ﬂow-
guided propagation to achieve 73.8%. And the winner from
ILSVRC2016 [41] uses a cascaded R-FCN detector, con-
text inference, cascade regression and a correlation tracker
[25] to achieve 76.19% mAP validation performance with
a single model (multi-scale testing and model ensembles
boost their accuracy to 81.1%).

Online capabilities and runtime. The only component
limiting online application is the tube rescoring (Sect. 4).
We have evaluated an online version which performs only
causal rescoring across the tracks. The performance for this
method is 78.7%mAP, compared to the noncausal method
(79.8%mAP). Since the correlation layer and track re-
gressors are operating fully convolutional (no additional
per-ROI computation is added except at the ROI-tracking
layer), the extra runtime cost for testing a 1000x600 pixel
image is 14ms (i.e. 141ms vs 127ms without correlation
and ROI-tracking layers) on a Titan X GPU. The (unoptim-
ized) tube linking (Sect. 4) takes on average 46ms per frame
on a single CPU core).

Temporally strided testing. We look at larger temporal
strides τ during testing, which has recently been found use-
ful for the related task of video action recognition [6, 7].
Our D & T architecture is evaluated only at every τ th frame
of an input sequence and tracklets have to link detections
over larger temporal strides. The performance for a tem-
poral stride of τ = 10 is 78.6% mAP which is 1.2% below

Backbone
ResNet-50
ResNet-101
ResNeXt-101-32×4
Inception-v4

D
72.1
74.1
75.9
77.9

D&T D&T, average
76.5
79.8
81.4
82.0

76.7
80.0
81.6
82.1

Table 2. Backbone network comparison for
image-based
Detection, and video-based Detection & Tracking architectures.
mAP (in %) over all classes on ImageNet VID validation is shown.

the full-frame evaluation. We think that such a minor drop
is remarkable as the duration for processing a video is now
roughly reduced by a factor of 10.

A potential point of improvement is to extend the de-
tector to operate over multiple frames of the sequence. We
found that such an extension did not have a clear beneﬁ-
cial effect on accuracy for short temporal windows (i.e. aug-
menting the detection scores at time t with the detector out-
put at the tracked proposals in the adjacent frame at time
t + 1 only raises the accuracy from 79.8 to 80.0% mAP).
Increasing this window to frames at t ± 1 by bidirectional
detection and tracking from the tth frame did not lead to
any gain. Interestingly, when testing with a temporal stride
of τ = 10 and augmenting the detections from the current
frame at time t with the detector output at the tracked pro-
posals at t+10 raises the accuracy from 78.6 to 79.2% mAP.
We conjecture that the insensitivity of the accuracy for
short temporal windows originates from the high redund-
ancy of the detection scores from the centre frames with the
scores at tracked locations. The accuracy gain for larger
temporal strides, however, suggests that more complement-
ary information is integrated from the tracked objects; thus,
a potentially promising direction for improvement is to de-
tect and track over multiple temporally strided inputs.
Varying the base network. Finally, we compare different
base networks for the Detect & Track architecture. Table 2

shows the performance for using 50 and 101 layer ResNets
[12], ResNeXt-101 [40], and Inception-v4 [37] as back-
bones. We report performance for frame-level Detection
(D), video-level Detection and Tracking (D&T), as well
as the variant that additionally classiﬁes the tracked re-
gion and computes the detection conﬁdence as the average
of the scores in the current frame and the tracked region
in the adjacent frame, (D&T, average). We observe that
D&T beneﬁts from deeper base ConvNets as well as spe-
ciﬁc design structures (ResNeXt and Inception-v4). The
last row in Table 1 lists class-wise performance for D&T
with an Inception-v4 backbone that seems to greatly boost
certain categories, e.g., dog (+5.7 AP), domestic cat (+9.4
AP) , lion (+11.4 AP), lizard (+4.5 AP), rabbit (+4.4 AP),
in comparison to ResNet-101.

6. Conclusion

We have presented a uniﬁed framework for simultaneous
object detection and tracking in video. Our fully convolu-
tional D&T architecture allows end-to-end training for de-
tection and tracking in a joint formulation. In evaluation,
our method achieves accuracy competitive with the winner
of the last ImageNet challenge while being simple and efﬁ-
cient. We demonstrate clear mutual beneﬁts of jointly per-
forming the task of detection and tracking, a concept that
can foster further research in video analysis.
Acknowledgments. This work was partly supported by the
Austrian Science Fund (FWF P27076) and by EPSRC Pro-
gramme Grant Seebibyte EP/M013774/1.

References

[1] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. S. Torr. Fully-convolutional siamese networks for ob-
ject tracking. In ECCV VOT Workshop, 2016.

[2] D. S. Bolme, J. R. Beveridge, B. A. Draper, and Y. M. Lui.
Visual object tracking using adaptive correlation ﬁlters. In
Proc. CVPR, 2010.

[3] J. Dai, Y. Li, K. He, and J. Sun. R-FCN: Object detection via

region-based fully convolutional networks. In NIPS, 2016.

[4] M. Danelljan, A. Robinson, F. S. Khan, and M. Felsberg.
Beyond correlation ﬁlters: Learning continuous convolution
operators for visual tracking. In Proc. ECCV, 2016.

[5] A. Dosovitskiy, P. Fischer, E. Ilg, P. Hausser, C. Hazirbas,
V. Golkov, P. van der Smagt, D. Cremers, and T. Brox.
Flownet: Learning optical ﬂow with convolutional networks.
In Proc. ICCV, 2015.

[6] C. Feichtenhofer, A. Pinz, and R. Wildes. Spatiotemporal re-
sidual networks for video action recognition. In NIPS, 2016.
[7] C. Feichtenhofer, A. Pinz, and A. Zisserman. Convolutional
two-stream network fusion for video action recognition. In
Proc. CVPR, 2016.

[8] S. Gidaris and N. Komodakis. Object detection via a multi-
region and semantic segmentation-aware cnn model. In Proc.
CVPR, 2015.

[9] R. B. Girshick. Fast R-CNN. In Proc. ICCV, 2015.

[10] R. B. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich
feature hierarchies for accurate object detection and semantic
segmentation. In Proc. CVPR, 2014.

[11] G. Gkioxari and J. Malik. Finding action tubes.

In Proc.

CVPR, 2015.

[12] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In Proc. CVPR, 2016.

[13] D. Held, S. Thrun, and S. Savarese. Learning to track at 100

FPS with deep regression networks. In Proc. ECCV, 2016.

[14] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista. High-
IEEE

speed tracking with kernelized correlation ﬁlters.
PAMI, 37(3):583–596, 2015.

[15] A. Joulin, K. Tang, and L. Fei-Fei. Efﬁcient image and video
co-localization with frank-wolfe algorithm. In Proc. ECCV,
2014.

[16] K. Kang, H. Li, T. Xiao, W. Ouyang, J. Yan, X. Liu, and
X. Wang. Object detection in videos with tubelet proposal
networks. In Proc. CVPR, 2017.

[17] K. Kang, H. Li, J. Yan, X. Zeng, B. Yang, T. Xiao, C. Zhang,
Z. Wang, R. Wang, X. Wang, and W. Ouyang. T-CNN: tube-
lets with convolutional neural networks for object detection
from videos. arXiv preprint, 2016.

[18] K. Kang, W. Ouyang, H. Li, and X. Wang. Object detection
from video tubelets with convolutional neural networks. In
Proc. CVPR, 2016.

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1106–1114, 2012.

[20] S. Kwak, M. Cho, I. Laptev, J. Ponce, and C. Schmid. Unsu-
pervised object discovery and tracking in video collections.
In Proc. CVPR, 2015.

[21] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1(4):541–551, 1989.

[22] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona,
D. Ramanan, P. Doll´ar, and C. L. Zitnick. Microsoft coco:
Common objects in context. In Proc. ECCV, 2014.

[23] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y.
Fu, and A. C. Berg. Ssd: Single shot multibox detector. In
Proc. ECCV, 2016.

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proc. CVPR, 2015.
[25] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang. Hierarchical
In Proc. ICCV,

convolutional features for visual tracking.
2015.

[26] H. Nam and B. Han. Learning multi-domain convolutional

neural networks for visual tracking. In Proc. CVPR, 2016.

[27] X. Peng and C. Schmid. Multi-region two-stream R-CNN

ImageNet
In

for action detection. In Proc. ECCV, 2016.

[28] A. Prest, C. Leistner, J. Civera, C. Schmid, and V. Fer-
rari. Learning object class detectors from weakly annotated
video. In Proc. CVPR, 2012.

[29] E. Real, J. Shlens, S. Mazzocchi, X. Pan, and V. Vanhoucke.
YouTube-BoundingBoxes: A Large High-Precision Human-
Annotated Data Set for Object Detection in Video. ArXiv
e-prints, 2017.

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Proc.
CVPR, 2016.

[31] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. IEEE PAMI, 2016.

[32] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
ImageNet Large Scale Visual
A. C. Berg, and L. Fei-Fei.
Recognition Challenge. IJCV, 115(3):211–252, 2015.
[33] S. Saha, G. Singh, M. Sapienza, P. H. Torr, and F. Cuzzolin.
Deep learning for detecting multiple space-time action tubes
in videos. In Proc. BMVC., 2016.

[34] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proc. CVPR, 2016.

[35] K. Simonyan and A. Zisserman. Two-stream convolutional

networks for action recognition in videos. In NIPS, 2014.

[36] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In Proc. ICLR,
2015.

[37] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, Inception-ResNet and the impact of residual
connections on learning. 2017.

[38] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proc. CVPR, 2015.
[39] L. Wang, W. Ouyang, X. Wang, and H. Lu. Visual tracking
with fully convolutional networks. In Proc. ICCV, 2015.
[40] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. arXiv pre-
print arXiv:1611.05431, 2016.

[41] J. Yang, H. Shuai, Z. Yu, R. Fan, Q. Ma, Q. Liu, and J. Deng.
ILSVRC2016 object detection from video: Team NUIST.
http://image-net.org/challenges/talks/
2016/Imagenet%202016%20VID.pptx, 2016.
[42] X. Zhu, Y. Xiong, J. Dai, L. Yuan, and Y. Wei. Deep feature

ﬂow for video recognition. In Proc. CVPR, 2017.

Figure 5. Qualitative results for consecutive frames of videos where our D&T approach could improve. Failures can be attributed to scale,
occlusion, misclassiﬁcation, or NMS issues.

Detect to Track and Track to Detect

Christoph Feichtenhofer∗
Graz University of Technology
feichtenhofer@tugraz.at

Axel Pinz
Graz University of Technology
axel.pinz@tugraz.at

Andrew Zisserman
University of Oxford
az@robots.ox.ac.uk

8
1
0
2
 
r
a

M
 
7
 
 
]

V
C
.
s
c
[
 
 
2
v
8
5
9
3
0
.
0
1
7
1
:
v
i
X
r
a

Abstract

Recent approaches for high accuracy detection and
tracking of object categories in video consist of complex
multistage solutions that become more cumbersome each
year. In this paper we propose a ConvNet architecture that
jointly performs detection and tracking, solving the task in
a simple and effective way.

Our contributions are threefold: (i) we set up a ConvNet
architecture for simultaneous detection and tracking, using
a multi-task objective for frame-based object detection and
across-frame track regression; (ii) we introduce correlation
features that represent object co-occurrences across time
to aid the ConvNet during tracking; and (iii) we link
the frame level detections based on our across-frame
tracklets to produce high accuracy detections at the video
level. Our ConvNet architecture for spatiotemporal object
detection is evaluated on the large-scale ImageNet VID
dataset where it achieves state-of-the-art results. Our
approach provides better single model performance than
the winning method of the last ImageNet challenge while
being conceptually much simpler. Finally, we show that by
increasing the temporal stride we can dramatically increase
the tracker speed. Our code and models are available at
http://github.com/feichtenhofer/detect-track

1. Introduction

Object detection in images has received a lot of atten-
tion over the last years with tremendous progress mostly
due to the emergence of deep Convolutional Networks
[12, 19, 21, 36, 38] and their region based descendants
[3, 9, 10, 31].
In the case of object detection and track-
ing in videos, recent approaches have mostly used detec-
tion as a ﬁrst step, followed by post-processing methods
such as applying a tracker to propagate detection scores
over time. Such variations on the ‘tracking by detection’
paradigm have seen impressive progress but are dominated

∗Christoph Feichtenhofer is a recipient of a DOC Fellowship of the
Austrian Academy of Sciences at the Institute of Electrical Measurement
and Measurement Signal Processing, Graz University of Technology.

(a)

(c)

(b)

(d)

Figure 1. Challenges for video object detection. Training examples
for: (a) bicycle, bird, rabbit; (b) dog; (c) fox; and (d) red panda.

by frame-level detection methods.

Object detection in video has seen a surge in interest
lately, especially since the introduction of the ImageNet
[32] video object detection challenge (VID). Different from
the ImageNet object detection (DET) challenge, VID shows
objects in image sequences and comes with additional
challenges of (i) size:
the sheer number of frames that
video provides (VID has around 1.3M images, compared
to around 400K in DET or 100K in COCO [22]), (ii)
motion blur: due to rapid camera or object motion, (iii)
quality: internet video clips are typically of lower quality
than static photos, (iv) partial occlusion: due to change in
objects/viewer positioning, and (v) pose: unconventional
In
object-to-camera poses are frequently seen in video.
Fig. 1, we show example images from the VID dataset; for
more examples please see1.

To solve this challenging task, recent top entries in the
ImageNet [32] video detection challenge use exhaustive
post-processing on top of frame-level detectors. For ex-
ample, the winner [17] of ILSVRC’15 uses two multi-stage
Faster R-CNN [31] detection frameworks, context suppres-
sion, multi-scale training/testing, a ConvNet tracker [39],
optical-ﬂow based score propagation and model ensembles.
In this paper we propose a uniﬁed approach to tackle the
problem of object detection in realistic video. Our object-
ive is to directly infer a ‘tracklet’ over multiple frames by
simultaneously carrying out detection and tracking with a

1http://vision.cs.unc.edu/ilsvrc2015/ui/vid

ConvNet. To achieve this we propose to extend the R-FCN
[3] detector with a tracking formulation that is inspired by
current correlation and regression based trackers [1, 13, 25].
We train a fully convolutional architecture end-to-end us-
ing a detection and tracking based loss and term our ap-
proach D&T for joint Detection and Tracking. The input
to the network consists of multiple frames which are ﬁrst
passed through a ConvNet trunk (e.g. a ResNet-101 [12])
to produce convolutional features which are shared for the
task of detection and tracking. We compute convolutional
cross-correlation between the feature responses of adjacent
frames to estimate the local displacement at different fea-
ture scales. On top of the features, we employ an RoI-
pooling layer [3] to classify and regress box proposals as
well as an RoI-tracking layer that regresses box transforma-
tions (translation, scale, aspect ratio) across frames. Finally,
to infer long-term tubes of objects across a video we link
detections based on our tracklets.

An evaluation on the large-scale ImageNet VID dataset
shows that our approach is able to achieve better single-
model performance than the winner of the last ILSVRC’16
challenge, despite being conceptually simple and much
faster. Moreover, we show that including a tracking loss
may improve feature learning for better static object detec-
tion, and we also present a very fast version of D&T that
works on temporally-strided input frames.

2. Related work

Object detection. Two families of detectors are currently
popular: First, region proposal based detectors R-CNN
[10], Fast R-CNN [9], Faster R-CNN [31] and R-FCN [3]
and second, detectors that directly predict boxes for an im-
age in one step such as YOLO [30] and SSD [23].

Our approach builds on R-FCN [3] which is a simple and
efﬁcient framework for object detection on region propos-
als with a fully convolutional nature. In terms of accuracy it
is competitive with Faster R-CNN [31] which uses a multi-
layer network that is evaluated per-region (and thus has a
cost growing linearly with the number of candidate RoIs).
R-FCN reduces the cost for region classiﬁcation by pushing
the region-wise operations to the end of the network with
the introduction of a position-sensitive RoI pooling layer
which works on convolutional features that encode the spa-
tially subsampled class scores of input RoIs.

Tracking. Tracking is also an extensively studied prob-
lem in computer vision with most recent progress devoted
to trackers operating on deep ConvNet features.
In [26]
a ConvNet is ﬁne-tuned at test-time to track a target from
the same video via detection and bounding box regression.
Training on the examples of a test sequence is slow and
also not applicable in the object detection setting. Other
methods use pre-trained ConvNet features to track and have

achieved strong performance either with correlation [1, 25]
or regression trackers on heat maps [39] or bounding boxes
[13]. The regression tracker in [13] is related to our method.
It is based on a Siamese ConvNet that predicts the location
in the second image of the object shown in the center of the
previous image. Since this tracker predicts a bounding box
instead of just the position, it is able to model changes in
scale and aspect of the tracked template. The major draw-
back of this approach is that it only can process a single tar-
get template and it also has to rely on signiﬁcant data aug-
mentation to learn all possible transformations of tracked
boxes. The approach in [1] is an example of a correlation
tracker and inspires our method. The tracker also uses a
fully-convolutional Siamese network that takes as input the
tracking template and the search image. The ConvNet fea-
tures from the last convolutional layer are correlated to ﬁnd
the target position in the response map. One drawback of
many correlation trackers [1, 25] is that they only work on
single targets and do not account for changes in object scale
and aspect ratio.

Video object detection. Action detection is also a re-
lated problem and has received increased attention recently,
mostly with methods building on two-stream ConvNets
[35]. In [11] a method is presented that uses a two-stream
R-CNN [10] to classify regions and link them across frames
based on the action predictions and their spatial overlap.
This method has been adopted by [33] and [27] where the
R-CNN was replaced by Faster R-CNN with the RPN oper-
ating on two streams of appearance and motion information.
One area of interest is learning to detect and localize in
each frame (e.g. in video co-localization) with only weak
supervision. The YouTube Object Dataset [28], has been
used for this purpose, e.g. [15, 20].

Since the object detection from video task has been in-
troduced at the ImageNet challenge, it has drawn signiﬁc-
ant attention.
In [18] tubelet proposals are generated by
applying a tracker to frame-based bounding box propos-
als. The detector scores across the video are re-scored by
a 1D CNN model. In their corresponding ILSVRC submis-
sion the group [17] added a propagation of scores to nearby
frames based on optical ﬂows between frames and sup-
pression of class scores that are not among the top classes
in a video. A more recent work [16] introduces a tube-
let proposal network that regresses static object proposals
over multiple frames, extracts features by applying Faster
R-CNN which are ﬁnally processed by an encoder-decoder
LSTM. In deep feature ﬂow [42] a recognition ConvNet is
applied to key frames only and an optical ﬂow ConvNet is
used for propagating the deep feature maps via a ﬂow ﬁeld
to the rest of the frames. This approach can increase detec-
tion speed by a factor of 5 at a slight accuracy cost. The
approach is error-prone due largely to two aspects: First,

propagation from the key frame to the current frame can
be erroneous and, second, the key frames can miss features
from current frames. Very recently a new large-scale data-
set for video object detection has been introduced [29] with
single objects annotations over video sequences.

3. D&T Approach

In this section we ﬁrst give an overview of the Detect
and Track (D&T) approach (Sect. 3.1) that generates track-
lets given two (or more) frames as input. We then give
the details, starting with the baseline R-FCN detector [3]
(Sect. 3.2), and formulating the tracking objective as cross-
frame bounding box regression (Sect. 3.3); ﬁnally, we intro-
duce the correlation features (Sect. 3.4) that aid the network
in the tracking process.

Sect. 4 shows how we link across-frame tracklets to
tubes over the temporal extent of a video, and Sect. 5 de-
scribes how we apply D&T to the ImageNet VID challenge.

3.1. D&T overview

We aim at jointly detecting and tracking (D&T) objects
in video. Fig. 2 illustrates our D&T architecture. We build
on the R-FCN [3] object detection framework which is fully
convolutional up to region classiﬁcation and regression, and
extend it for multi-frame detection and tracking. Given
a set of two high-resolution input frames our architecture
ﬁrst computes convolutional feature maps that are shared
for the tasks of detection and tracking (e.g. the features of
a ResNet-101[12]). An RPN is used to propose candid-
ate regions in each frame based on the objectness likeli-
hood for pre-deﬁned candidate boxes (i.e. “anchors”[31]).
Based on these regions, RoI pooling is employed to aggreg-
ate position-sensitive score and regression maps, produced
from intermediate convolutional layers, to classify boxes
and reﬁne their coordinates (regression), respectively.

We extend this architecture by introducing a regressor
that
takes the intermediate position-sensitive regression
maps from both frames (together with correlation maps, see
below) as input to an RoI tracking operation which out-
puts the box transformation from one frame to the other.
The correspondence between frames is thus simply accom-
plished by pooling features from both frames, at the same
proposal region. We train the RoI tracking task by extend-
ing the multi-task objective of R-FCN with a tracking loss
that regresses object coordinates across frames. Our track-
ing loss operates on ground truth objects and evaluates a
soft L1 norm [9] between coordinates of the predicted track
and the ground truth track of an object.

Such a tracking formulation can be seen as a multi-
object extension of the single target tracker in [13] where
a ConvNet is trained to infer an object’s bounding box from
features of the two frames. One drawback of such an ap-
proach is that it does not exploit translational equivariance

which means that the tracker has to learn all possible trans-
lations from training data. Thus such a tracker requires ex-
ceptional data augmentation (artiﬁcially scaling and shifting
boxes) during training [13] .

A tracking representation that is based on correlation ﬁl-
ters [2, 4, 14] can exploit the translational equivariance as
correlation is equivariant to translation. Recent correlation
trackers [1, 25] typically work on high-level ConvNet fea-
tures and compute the cross correlation between a tracking
template and the search image (or a local region around the
tracked position from the previous frame). The resulting
correlation map measures the similarity between the tem-
plate and the search image for all circular shifts along the
horizontal and vertical dimension. The displacement of a
target object can thus be found by taking the maximum of
the correlation response map.

Different from typical correlation trackers that work on
single target templates, we aim to track multiple objects
simultaneously. We compute correlation maps for all posi-
tions in a feature map and let RoI tracking additionally op-
erate on these feature maps for better track regression. Our
architecture is able to be trained end-to-end taking as input
frames from a video and producing object detections and
their tracks. The next sections describe how we structure
our architecture for end-to-end learning of object detection
and tracklets.

3.2. Object detection and tracking in R-FCN

Our architecture takes frames It ∈ RH0×W0×3 at time t
and pushes them through a backbone ConvNet (i.e. ResNet-
l ∈ RHl×Wl×Dl where
101 [12]) to obtain feature maps xt
Wl, Hl and Dl are the width, height and number of chan-
nels of the respective feature map output by layer l. As in
R-FCN [3] we reduce the effective stride at the last convo-
lutional layer from 32 pixels to 16 pixels by modifying the
conv5 block to have unit spatial stride, and also increase its
receptive ﬁeld by dilated convolutions [24].

Our overall system builds on the R-FCN [3] object de-
tector which works in two stages: ﬁrst it extracts candid-
ate regions of interest (RoI) using a Region Proposal Net-
work (RPN) [31]; and, second, it performs region classi-
ﬁcation into different object categories and background by
using a position-sensitive RoI pooling layer [3]. The in-
put to this RoI pooling layer comes from an extra convolu-
tional layer with output xt
cls that operates on the last convo-
lutional layer of a ResNet [12]. The layer produces a bank
of Dcls = k2(C + 1) position-sensitive score maps which
correspond to a k × k spatial grid describing relative pos-
itions to be used in the RoI pooling operation for each of
the C categories and background. Applying the softmax
function to the outputs leads to a probability distribution p
over C + 1 classes for each RoI. In a second branch R-FCN
puts a sibling convolutional layer with output xt
reg after the

Figure 2. Architecture of our Detect and Track (D&T) approach (see Section 3 for details).

last convolutional layer for bounding box regression, again
a position-sensitive RoI pooling operation is performed on
this bank of Dcls = 4k2 maps for class-agnostic bounding
box prediction of a box b = (bx, by, bw, bh).

Let us now consider a pair of frames It, It+τ , sampled at
time t and t+τ , given as input to the network. We introduce
an inter-frame bounding box regression layer that performs
position sensitive RoI pooling on the concatenation of the
bounding box regression features {xt
reg } to predict
w , ∆t+τ
the transformation ∆t+τ = (∆t+τ
) of
the RoIs from t to t + τ . The correlation features, that are
also used by the bounding box regressors, are described in
section 3.4. Fig. 3 shows an illustration of this approach.

reg, xt+τ
, ∆t+τ
, ∆t+τ
y

h

x

3.3. Multitask detection and tracking objective

To learn this regressor, we extend the multi-task loss of
Fast R-CNN [9], consisting of a combined classiﬁcation
Lcls and regression loss Lreg, with an additional term that
scores the tracking across two frames Ltra. For a single
iteration and a batch of N RoIs the network predicts soft-
max probabilities {pi}N
i=1, and
}Ntra
cross-frame RoI-tracks {∆t+τ
i=1 . Our overall objective
function is written as:

i=1, regression offsets {bi}N

i

L({pi}, {bi}, {∆i}) =

Lcls(pi,c∗ )

1
N

N
(cid:88)

i=1

+λ

1
Nf g

N
(cid:88)

i=1

+λ

1
Ntra

Ntra(cid:88)

i=1

[c∗

i > 0]Lreg(bi, b∗
i )

(1)

Ltra(∆t+τ

i

, ∆∗,t+τ
i

).

The ground truth class label of an RoI is deﬁned by c∗
i
and its predicted softmax score is pi,c∗ . b∗
i is the ground
truth regression target, and ∆∗,t+τ
is the track regression
target. The indicator function [c∗
i > 0] is 1 for fore-

i

ground RoIs and 0 for background RoIs (with c∗
i = 0).
Lcls(pi,c∗ ) = − log(pi,c∗ ) is the cross-entropy loss for box
classiﬁcation, and Lreg & Ltra are bounding box and track
regression losses deﬁned as the smooth L1 function in [9].
The tradeoff parameter is set to λ = 1 as in [3, 9]. The as-
signment of RoIs to ground truth is as follows: a class label
c∗ and regression targets b∗ are assigned if the RoI overlaps
with a ground-truth box at least by 0.5 in intersection-over-
union (IoU) and the tracking target ∆∗,t+τ is assigned only
to ground truth targets which are appearing in both frames.
Thus, the ﬁrst term of (1) is active for all N boxes in a train-
ing batch, the second term is active for Nf g foreground RoIs
and the last term is active for Ntra ground truth RoIs which
have a track correspondence across the two frames.

y, Bt

x, Bt

For track regression we use the bounding box re-
gression parametrisation of R-CNN [9, 10, 31]. For a
single object we have ground truth box coordinates Bt =
h) in frame t, and similarly Bt+τ for frame
(Bt
t + τ , denoting the horizontal & vertical centre coordinates
and its width and height. The tracking regression values for
the target ∆∗,t+τ = {∆∗,t+τ
} are
then

, ∆∗,t+τ
h

, ∆∗,t+τ
y

, ∆∗,t+τ
w

w, Bt

x

∆∗,t+τ
x

=

∆∗,t+τ
y

=

(2)

∆∗,t+τ
w

= log(

∆∗,t+τ
h

= log(

)).

(3)

Bt+τ

x − Bt
x
Bt
w
Bt+τ
w
Bt
w

)

Bt+τ

y − Bt
y
Bt
h
Bt+τ
h
Bt
h

3.4. Correlation features for object tracking

Different from typical correlation trackers on single tar-
get templates, we aim to track multiple objects simultan-
eously. We compute correlation maps for all positions in
a feature map and let RoI pooling operate on these feature
maps for track regression. Considering all possible circular
shifts in a feature map would lead to large output dimen-
sionality and also produce responses for too large displace-

Figure 3. Schematic of our approach for two frames at time t and t + τ . The inputs are ﬁrst passed through a fully-convolutional network
to produce feature maps. A correlation layer operates on multiple feature maps of different scales (only the coarsest scale is shown in the
ﬁgure) and estimates local feature similarity for various offsets between the two frames. Finally, position sensitive RoI-pooling [3] operates
on the convolutional features of the individual frames to produce per-frame detections and also on a stack of individual frame-features as
well as the between frame correlation features to output regression offsets of the boxes across the two frames (RoI-tracking).

ments. Therefore, we restrict correlation to a local neigh-
bourhood. This idea was originally used for optical ﬂow
estimation in [5], where a correlation layer is introduced to
aid a ConvNet in matching feature points between frames.
The correlation layer performs point-wise feature compar-
l, xt+τ
ison of two feature maps xt

l

xt,t+τ

corr (i, j, p, q) =

l(i, j), xt+τ
xt

l

(i + p, j + q)

(4)

(cid:68)

(cid:69)

where −d ≤ p ≤ d and −d ≤ q ≤ d are offsets to compare
features in a square neighbourhood around the locations i, j
in the feature map, deﬁned by the maximum displacement,
d. Thus the output of the correlation layer is a feature map
of size xcorr ∈ RHl×Wl×(2d+1)×(2d+1). Equation (4) can
be seen as a correlation of two feature maps within a local
square window deﬁned by d. We compute this local correl-
ation for features at layers conv3, conv4 and conv5 (we use
a stride of 2 in i, j to have the same size in the conv3 cor-
relation). We show an illustration of these features for two
sample sequences in Fig. 4.

To use these features for track-regression, we let RoI
pooling operate on these maps by stacking them with the
bounding box features in Sect. 3.2 {xt,t+τ

reg, xt+τ

reg }.

corr , xt

puts a hard constraint on the number of frames a (deep) ar-
chitecture can process in one iteration (due to memory limit-
ations in GPU hardware). Therefore, a tradeoff between the
number of frames and detection accuracy has to be made.
Since video possesses a lot of redundant information and
objects typically move smoothly in time we can use our
inter-frame tracks to link detections in time and build long-
term object tubes. To this end, we adopt an established tech-
nique from action localization [11, 27, 33], which is used to
to link frame detections in time to tubes.

i, yt

i, ht
i, yt

i,c}, where Dt,c

Consider the class detections for a frame at time t,
Dt,c
i = {xt
i, pt
i , wt
is a box indexed
i
i and height ht
i ) with width wt
by i, centred at (xt
i, and
pt
i,c is the softmax probability for class c. Similarly, we
also have tracks T t,t+τ
= {xt
i, yt
i; xt
i +
∆t+τ
i + ∆t+τ
h } that describe the transforma-
y
tion of the boxes from frame t to t + τ . We can now deﬁne a
class-wise linking score that combines detections and tracks
across time

i
w , ht

i + ∆t+τ

i + ∆t+τ

i , wt

i, ht

, wt

, yt

x

sc(Dt

i,c, Dt+τ

j,c , T t,t+τ ) = pt

i,c + pt+τ

j,c + ψ(Dt

i, Dj, T t,t+τ )
(5)

where the pairwise score is

(cid:40)

i, Dt+τ
if Dt
1,
j
0, otherwise.

∈ T t,t+τ ,

4. Linking tracklets to object tubes

ψ(Dt

i,c, Dt+τ

j,c , T t,t+τ ) =

One drawback of high-accuracy object detection is that
high-resolution input images have to be processed which

(6)
Here, the pairwise term ψ evaluates to 1 if the IoU over-

(a) frame t

(b) frame t + τ

(c) corr. conv3

(d) corr. conv4

(e) corr. conv5

(f) frame t

(g) frame t + τ

(h) corr. conv3
Figure 4. Correlation features for two frames of two validation videos. For the frames in (a) & (b) , we show in (c),(d) and (e) the correlation
maps computed by using features from conv3, conv4 and conv5, respectively. The feature maps are shown as arrays with the centre map
corresponding to zero offsets p, q between the frames and the neighbouring rows and columns correspond to shifted correlation maps
of increasing p, q. We observe that the airplane moves to the top-right; hence the feature maps corresponding to p = 2, q = 3 show
strong responses (highlighted in red). Note that the features at conv4 and conv5 have the same resolution, whereas at conv3 we use stride
2 correlation sampling to produce equal sized outputs. In (h),(i) and (j) we show additional multiscale correlation maps for the frames
in (f) & (g) which are affected by camera motion resulting in correlation patterns that correctly estimate this at the lower layer (conv3
corr. responds on the grass and legs of the animal (h)), and also handles the independent motion of the animals at the higher conv5 corr (j).

(j) corr. conv5

(i) corr. conv4

i, Dt+τ
j

lap a track correspondences T t,t+τ with the detection boxes
Dt
is larger than 0.5. This is necessary, because the
output of the track regressor does not have to exactly match
the output of the box regressor.

The optimal path across a video can then be found by
maximizing the scores over the duration T of the video [11]

¯D(cid:63)

c = argmax

¯D

1
T

T −τ
(cid:88)

t=1

sc(Dt, Dt+τ , T t,t+τ ).

(7)

Eq. (7) can be solved efﬁciently by applying the Viterbi al-
gorithm [11]. Once the optimal tube ¯D(cid:63)
c is found, the detec-
tions corresponding to that tube are removed from the set of
regions and (7) is applied again to the remaining regions.

After having found the class-speciﬁc tubes ¯Dc for one
video, we re-weight all detection scores in a tube by adding
the mean of the α = 50% highest scores in that tube. We
found that overall performance is largely robust to that para-
meter, with less than 0.5% mAP variation when varying
10% ≤ α ≤ 100%. Our simple tube-based re-weighting
aims to boost the scores for positive boxes on which the
detector fails. Using the highest scores of a tube for re-
weighting acts as a form of non-maximum suppression. It
is also inspired by the hysteresis tracking in the Canny edge
detector. Our reweighting assumes that the detector fails
at most in half of a tubes frames, and improves robustness
of the tracker, though the performance is quite insensitive
to the proportion chosen (α). Note that our approach en-
forces the tube to span the whole video and, for simplicity,
we do not prune any detections in time. Removing detec-
tions with subsequent low scores along a tube (e.g. [27, 33])
could clearly improve the results, but we leave that for fu-
ture work. In the following section our approach is applied
to the video object detection task.

5. Experiments

5.1. Dataset sampling and evaluation

We evaluate our method on the ImageNet [32] object de-
tection from video (VID) dataset2 which contains 30 classes
in 3862 training and 555 validation videos. The objects
have ground truth annotations of their bounding box and
track ID in a video. Since the ground truth for the test set
is not publicly available, we measure performance as mean
average precision (mAP) over the 30 classes on the valida-
tion set by following the protocols in [16, 17, 18, 42], as is
standard practice.

The 30 object categories in ImageNet VID are a subset
of the 200 categories in the ImageNet DET dataset. Thus
we follow previous approaches [16, 17, 18, 42] and train
our R-FCN detector on an intersection of ImageNet VID
and DET set (only using the data from the 30 VID classes).
Since the DET set contains large variations in the number
of samples per class, we sample at most 2k images per class
from DET. We also subsample the VID training set by using
only 10 frames from each video. The subsampling reduces
the effect of dominant classes in DET (e.g. there are 56K
images for the dog class in the DET training set) and very
long video sequences in the VID training set.

5.2. Training and testing

RPN. Our RPN is trained as originally proposed [31]. We
attach two sibling convolutional layers to the stride-reduced
ResNet-101 (Sect. 3.2) to perform proposal classiﬁcation
and bounding box regression at 15 anchors corresponding
to 5 scales and 3 aspect ratios. As in [31] we also extract
proposals from 5 scales and apply non-maximum suppres-
sion (NMS) with an IoU threshold of 0.7 to select the top

2http://www.image-net.org/challenges/LSVRC/

300 proposals in each frame for training/testing our R-FCN
detector. We found that pre-training on the full ImageNet
DET set helps to increase the recall; thus, our RPN is ﬁrst
pre-trained on the 200 classes of ImageNet DET before
ﬁne-tuning on only the 30 classes which intersect ImageNet
DET and VID. Our 300 proposals per image achieve a mean
recall of 96.5% on the ImageNet VID validation set.

R-FCN. Our R-FCN detector is trained similar to [3, 42].
We use the stride-reduced ResNet-101 with dilated con-
volution in conv5 (see Sect. 3.2) and online hard example
mining [34]. A randomly initialized 3 × 3, dilation 6 con-
volutional layer is attached to conv5 for reducing the fea-
ture dimension to 512 [42] (in the original R-FCN this is
a 1 × 1 convolutional layer without dilation and an out-
put dimension of 1024). For object detection and box re-
gression, two sibling 1 × 1 convolutional layers provide the
Dcls = k2(C + 1) and Dreg = 4k2 inputs to the position-
sensitive RoI pooling layer. We use a k × k = 7 × 7 spatial
grid for encoding relative positions as in [3].

In both training and testing, we use single scale images
with shorter dimension of 600 pixels. We use a batch size of
4 in SGD training and a learning rate of 10−3 for 60K itera-
tions followed by a learning rate of 10−4 for 20K iterations.
For testing we apply NMS with IoU threshold of 0.3.

D & T. For training our D&T architecture we start with the
R-FCN model from above and further ﬁne-tune it on the
full ImageNet VID training set with randomly sampling a
set of two adjacent frames from a different video in each
iteration. In each other iteration we also sample from the
ImageNet DET training set to avoid biasing our model to
the VID training set. When sampling from the DET set we
send the same two frames through the network as there are
no sequences available. Besides not forgetting the images
from the DET training set, this has an additional beneﬁcial
effect of letting our model prefer small motions over large
ones (e.g. the tracker in [13] samples motion augmentation
from a Laplacian distribution with zero mean to bias a re-
gression tracker on small displacements). Our correlation
features (4) are computed at layers conv3, conv4 and conv5
with a maximum displacement of d = 8 and a stride of 2
in i, j for the the conv3 correlation. For training, we use a
learning rate of 10−4 for 40K iterations and 10−5 for 20K it-
erations at a batch size of 4. During testing our architecture
is applied to a sequence with temporal stride τ , predicting
detections D and tracklets T between them. For object-
centred tracks, we use the regressed frame boxes as input
of the ROI-tracking layer. We perform non-maximum sup-
pression with bounding-box voting [8] before the tracklet
linking step to reduce the number of detections per image
and class to 25. These detections are then used in eq. (7)
to extract tubes and the corresponding detection boxes are
re-weighted as outlined in Sect. 4 for evaluation.

5.3. Results

We show experimental results for our models and
the current state-of-the-art in Table 1. Qualitative res-
ults for difﬁcult validation videos can be seen in Fig. 5
and also at http://www.robots.ox.ac.uk/˜vgg/
research/detect-track/
Frame level methods. First we compare methods work-
ing on single frames without any temporal processing. Our
R-FCN baseline achieves 74.2% mAP which compares fa-
vourably to the best performance of 73.9% mAP in [42].
We think our slightly better accuracy comes from the use of
15 anchors for RPN instead of the 9 anchors in [42]. The
Faster R-CNN models working as single frame baselines in
[18], [16] and [17] score with 45.3%, 63.0% and 63.9%, re-
spectively. We think their lower performance is mostly due
to the difference in training procedure and data sampling,
and not originating from a weaker base ConvNet, since our
frame baseline with a weaker ResNet-50 produces 72.1%
mAP (vs. the 74.2% for ResNet-101). Next, we are in-
terested in how our model performs after ﬁne-tuning with
the tracking loss, operating via RoI tracking on the correl-
ation and track regression features (termed D (& T loss) in
Table 1). The resulting performance for single-frame test-
ing is 75.8% mAP. This 1.6% gain in accuracy shows that
merely adding the tracking loss can aid the per-frame de-
tection. A possible reason is that the correlation features
propagate gradients back into the base ConvNet and there-
fore make the features more sensitive to important objects
in the training data. We see signiﬁcant gains for classes like
panda, monkey, rabbit or snake which are likely to move.
Video level methods. Next, we investigate the effect of
multi-frame input during testing.
In Table 1 we see that
linking our detections to tubes based on our tracklets, D&T
(τ = 1), raises performance substantially to 79.8% mAP.
Some class-AP scores can be boosted signiﬁcantly (e.g.
cattle by 9.6, dog by 5.5, cat by 6, fox by 7.9, horse by
5.3, lion by 9.4, motorcycle by 6.4 rabbit by 8.9, red panda
by 6.3 and squirrel by 8.5 points AP). This gain is mostly
for the following reason: if an object is captured in an un-
conventional pose, is distorted by motion blur, or appears
at a small scale, the detector might fail; however, if its tube
is linked to other potentially highly scoring detections of
the same object, these failed detections can be recovered
(even though we use a very simple re-weighting of detec-
tions across a tube). The only class that loses AP is whale
(−2.6 points) and this has an obvious explanation: in most
validation snippets the whales successively emerge and sub-
merge from the water and our detection rescoring based on
tubes would assign false positives when they submerge for
a couple of frames.

When comparing our 79.8% mAP against the current
state of the art, we make the following observations. The
method in [18] achieves 47.5% by using a temporal con-

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

Methods
TCN [18]
TPN+LSTM [16]
Winner ILSVRC’15 [17]
Winner ILSVRC’16 [41]
D (R-FCN)
D (& T loss)
D&T (τ = 10)
D&T (τ = 1)
D&T (Inception-v4)

airplane

72.7
84.6
83.7
87.4
89.4
89.1
90.2
91.5

lizard

54.2
74.4
80.3

antelope

75.5
78.1
85.7
79.4
80.4
79.8
82.3
81.4

monkey

1.6
36.6
54.8

bear
42.2
72.0
84.4
84.5
83.8
87.5
87.9
91.4

motorcycle

61.0
76.3
80.6

bicycle

39.5
67.2
74.5
67.0
70.0
68.8
70.1
76.4

rabbit

36.6
51.4
63.7

(single model performance)

bird
25.0
68.0
73.8
72.1
71.8
72.9
73.2
73.9

panda
red
19.7
70.6
85.7

bus
64.1
80.1
75.7
84.6
82.6
86.1
87.7
86.8

sheep

55.0
64.2
60.5

car
36.3
54.7
57.1
54.6
56.8
55.7
57.0
57.8

snake

38.9
61.2
72.9

cattle

51.1
61.2
58.7
72.9
71.0
78.6
80.6
81.8

squirrel

2.6
42.3
52.7

dog
24.4
61.6
72.3
70.9
71.8
76.4
77.3
83.0

tiger

42.8
84.8
89.7

cat
d.
48.6
78.9
69.2
77.3
76.6
83.4
82.6
92.0

train

54.6
78.1
81.3

panda

hamster

elephant

65.6
71.6
80.2
76.7
79.3
82.9
83.0
81.3

turtle

66.1
77.2
73.7

fox
73.9
83.2
83.4
89.7
89.9
97.0
97.8
96.6

watercraft

69.2
61.5
69.5

g.
61.7
78.1
80.5
77.6
83.3
85.0
85.8
84.3

whale

26.5
66.9
33.5

82.4
91.5
93.1
88.5
91.9
96.0
96.6
98.0

zebra

68.6
88.5
90.2

horse

30.8
66.8
84.2
74.8
76.8
82.2
82.1
83.8

lion
34.4
21.6
67.8
57.9
57.3
66.0
66.7
78.1

(%)
AP
m
47.5
68.4
73.8
76.2
74.2
75.8
78.6
79.8
82.0

76.8
79.0
83.1
83.4
87.9

69.0
74.1
75.6
76.4
80.1
Table 1. Performance comparison on the ImageNet VID validation set. The average precision (in %) for each class and the mean average
precision over all classes is shown. τ corresponds to the temporal sampling stride. Our D&T variants use ResNet-101 [12] as backbone,
except for the last row which lists performance for an Inception-v4 [37] backbone which excels at some challenging object categories.

57.4
59.9
65.4
68.4
71.9

90.2
91.3
90.5
92.6
92.5

83.3
84.9
85.6
86.1
84.6

61.3
65.3
72.7
74.2
78.6

50.1
54.1
57.9
57.6
59.4

80.2
80.3
79.8
86.7
89.3

79.5
85.3
90.0
91.6
94.7

51.9
56.9
59.4
59.7
63.3

81.4
81.9
83.3
84.3
85.5

68.7
68.3
68.3
69.7
70.1

68.4
68.9
66.5
66.3
67.4

90.9
90.9
93.2
95.2
95.2

volutional network on top of the still image detector. An
extended work [16] uses an encoder-decoder LSTM on top
of a Faster R-CNN object detector which works on propos-
als from a tubelet proposal network, and produces 68.4%
mAP. The ILSVRC 2015 winner [17] combines two Faster
R-CNN detectors, multi-scale training/testing, context sup-
pression, high conﬁdence tracking [39] and optical-ﬂow-
guided propagation to achieve 73.8%. And the winner from
ILSVRC2016 [41] uses a cascaded R-FCN detector, con-
text inference, cascade regression and a correlation tracker
[25] to achieve 76.19% mAP validation performance with
a single model (multi-scale testing and model ensembles
boost their accuracy to 81.1%).

Online capabilities and runtime. The only component
limiting online application is the tube rescoring (Sect. 4).
We have evaluated an online version which performs only
causal rescoring across the tracks. The performance for this
method is 78.7%mAP, compared to the noncausal method
(79.8%mAP). Since the correlation layer and track re-
gressors are operating fully convolutional (no additional
per-ROI computation is added except at the ROI-tracking
layer), the extra runtime cost for testing a 1000x600 pixel
image is 14ms (i.e. 141ms vs 127ms without correlation
and ROI-tracking layers) on a Titan X GPU. The (unoptim-
ized) tube linking (Sect. 4) takes on average 46ms per frame
on a single CPU core).

Temporally strided testing. We look at larger temporal
strides τ during testing, which has recently been found use-
ful for the related task of video action recognition [6, 7].
Our D & T architecture is evaluated only at every τ th frame
of an input sequence and tracklets have to link detections
over larger temporal strides. The performance for a tem-
poral stride of τ = 10 is 78.6% mAP which is 1.2% below

Backbone
ResNet-50
ResNet-101
ResNeXt-101-32×4
Inception-v4

D
72.1
74.1
75.9
77.9

D&T D&T, average
76.5
79.8
81.4
82.0

76.7
80.0
81.6
82.1

Table 2. Backbone network comparison for
image-based
Detection, and video-based Detection & Tracking architectures.
mAP (in %) over all classes on ImageNet VID validation is shown.

the full-frame evaluation. We think that such a minor drop
is remarkable as the duration for processing a video is now
roughly reduced by a factor of 10.

A potential point of improvement is to extend the de-
tector to operate over multiple frames of the sequence. We
found that such an extension did not have a clear beneﬁ-
cial effect on accuracy for short temporal windows (i.e. aug-
menting the detection scores at time t with the detector out-
put at the tracked proposals in the adjacent frame at time
t + 1 only raises the accuracy from 79.8 to 80.0% mAP).
Increasing this window to frames at t ± 1 by bidirectional
detection and tracking from the tth frame did not lead to
any gain. Interestingly, when testing with a temporal stride
of τ = 10 and augmenting the detections from the current
frame at time t with the detector output at the tracked pro-
posals at t+10 raises the accuracy from 78.6 to 79.2% mAP.
We conjecture that the insensitivity of the accuracy for
short temporal windows originates from the high redund-
ancy of the detection scores from the centre frames with the
scores at tracked locations. The accuracy gain for larger
temporal strides, however, suggests that more complement-
ary information is integrated from the tracked objects; thus,
a potentially promising direction for improvement is to de-
tect and track over multiple temporally strided inputs.
Varying the base network. Finally, we compare different
base networks for the Detect & Track architecture. Table 2

shows the performance for using 50 and 101 layer ResNets
[12], ResNeXt-101 [40], and Inception-v4 [37] as back-
bones. We report performance for frame-level Detection
(D), video-level Detection and Tracking (D&T), as well
as the variant that additionally classiﬁes the tracked re-
gion and computes the detection conﬁdence as the average
of the scores in the current frame and the tracked region
in the adjacent frame, (D&T, average). We observe that
D&T beneﬁts from deeper base ConvNets as well as spe-
ciﬁc design structures (ResNeXt and Inception-v4). The
last row in Table 1 lists class-wise performance for D&T
with an Inception-v4 backbone that seems to greatly boost
certain categories, e.g., dog (+5.7 AP), domestic cat (+9.4
AP) , lion (+11.4 AP), lizard (+4.5 AP), rabbit (+4.4 AP),
in comparison to ResNet-101.

6. Conclusion

We have presented a uniﬁed framework for simultaneous
object detection and tracking in video. Our fully convolu-
tional D&T architecture allows end-to-end training for de-
tection and tracking in a joint formulation. In evaluation,
our method achieves accuracy competitive with the winner
of the last ImageNet challenge while being simple and efﬁ-
cient. We demonstrate clear mutual beneﬁts of jointly per-
forming the task of detection and tracking, a concept that
can foster further research in video analysis.
Acknowledgments. This work was partly supported by the
Austrian Science Fund (FWF P27076) and by EPSRC Pro-
gramme Grant Seebibyte EP/M013774/1.

References

[1] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. S. Torr. Fully-convolutional siamese networks for ob-
ject tracking. In ECCV VOT Workshop, 2016.

[2] D. S. Bolme, J. R. Beveridge, B. A. Draper, and Y. M. Lui.
Visual object tracking using adaptive correlation ﬁlters. In
Proc. CVPR, 2010.

[3] J. Dai, Y. Li, K. He, and J. Sun. R-FCN: Object detection via

region-based fully convolutional networks. In NIPS, 2016.

[4] M. Danelljan, A. Robinson, F. S. Khan, and M. Felsberg.
Beyond correlation ﬁlters: Learning continuous convolution
operators for visual tracking. In Proc. ECCV, 2016.

[5] A. Dosovitskiy, P. Fischer, E. Ilg, P. Hausser, C. Hazirbas,
V. Golkov, P. van der Smagt, D. Cremers, and T. Brox.
Flownet: Learning optical ﬂow with convolutional networks.
In Proc. ICCV, 2015.

[6] C. Feichtenhofer, A. Pinz, and R. Wildes. Spatiotemporal re-
sidual networks for video action recognition. In NIPS, 2016.
[7] C. Feichtenhofer, A. Pinz, and A. Zisserman. Convolutional
two-stream network fusion for video action recognition. In
Proc. CVPR, 2016.

[8] S. Gidaris and N. Komodakis. Object detection via a multi-
region and semantic segmentation-aware cnn model. In Proc.
CVPR, 2015.

[9] R. B. Girshick. Fast R-CNN. In Proc. ICCV, 2015.

[10] R. B. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich
feature hierarchies for accurate object detection and semantic
segmentation. In Proc. CVPR, 2014.

[11] G. Gkioxari and J. Malik. Finding action tubes.

In Proc.

CVPR, 2015.

[12] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In Proc. CVPR, 2016.

[13] D. Held, S. Thrun, and S. Savarese. Learning to track at 100

FPS with deep regression networks. In Proc. ECCV, 2016.

[14] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista. High-
IEEE

speed tracking with kernelized correlation ﬁlters.
PAMI, 37(3):583–596, 2015.

[15] A. Joulin, K. Tang, and L. Fei-Fei. Efﬁcient image and video
co-localization with frank-wolfe algorithm. In Proc. ECCV,
2014.

[16] K. Kang, H. Li, T. Xiao, W. Ouyang, J. Yan, X. Liu, and
X. Wang. Object detection in videos with tubelet proposal
networks. In Proc. CVPR, 2017.

[17] K. Kang, H. Li, J. Yan, X. Zeng, B. Yang, T. Xiao, C. Zhang,
Z. Wang, R. Wang, X. Wang, and W. Ouyang. T-CNN: tube-
lets with convolutional neural networks for object detection
from videos. arXiv preprint, 2016.

[18] K. Kang, W. Ouyang, H. Li, and X. Wang. Object detection
from video tubelets with convolutional neural networks. In
Proc. CVPR, 2016.

[19] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, pages 1106–1114, 2012.

[20] S. Kwak, M. Cho, I. Laptev, J. Ponce, and C. Schmid. Unsu-
pervised object discovery and tracking in video collections.
In Proc. CVPR, 2015.

[21] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1(4):541–551, 1989.

[22] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona,
D. Ramanan, P. Doll´ar, and C. L. Zitnick. Microsoft coco:
Common objects in context. In Proc. ECCV, 2014.

[23] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y.
Fu, and A. C. Berg. Ssd: Single shot multibox detector. In
Proc. ECCV, 2016.

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proc. CVPR, 2015.
[25] C. Ma, J.-B. Huang, X. Yang, and M.-H. Yang. Hierarchical
In Proc. ICCV,

convolutional features for visual tracking.
2015.

[26] H. Nam and B. Han. Learning multi-domain convolutional

neural networks for visual tracking. In Proc. CVPR, 2016.

[27] X. Peng and C. Schmid. Multi-region two-stream R-CNN

ImageNet
In

for action detection. In Proc. ECCV, 2016.

[28] A. Prest, C. Leistner, J. Civera, C. Schmid, and V. Fer-
rari. Learning object class detectors from weakly annotated
video. In Proc. CVPR, 2012.

[29] E. Real, J. Shlens, S. Mazzocchi, X. Pan, and V. Vanhoucke.
YouTube-BoundingBoxes: A Large High-Precision Human-
Annotated Data Set for Object Detection in Video. ArXiv
e-prints, 2017.

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Proc.
CVPR, 2016.

[31] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. IEEE PAMI, 2016.

[32] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
ImageNet Large Scale Visual
A. C. Berg, and L. Fei-Fei.
Recognition Challenge. IJCV, 115(3):211–252, 2015.
[33] S. Saha, G. Singh, M. Sapienza, P. H. Torr, and F. Cuzzolin.
Deep learning for detecting multiple space-time action tubes
in videos. In Proc. BMVC., 2016.

[34] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proc. CVPR, 2016.

[35] K. Simonyan and A. Zisserman. Two-stream convolutional

networks for action recognition in videos. In NIPS, 2014.

[36] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In Proc. ICLR,
2015.

[37] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, Inception-ResNet and the impact of residual
connections on learning. 2017.

[38] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proc. CVPR, 2015.
[39] L. Wang, W. Ouyang, X. Wang, and H. Lu. Visual tracking
with fully convolutional networks. In Proc. ICCV, 2015.
[40] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. arXiv pre-
print arXiv:1611.05431, 2016.

[41] J. Yang, H. Shuai, Z. Yu, R. Fan, Q. Ma, Q. Liu, and J. Deng.
ILSVRC2016 object detection from video: Team NUIST.
http://image-net.org/challenges/talks/
2016/Imagenet%202016%20VID.pptx, 2016.
[42] X. Zhu, Y. Xiong, J. Dai, L. Yuan, and Y. Wei. Deep feature

ﬂow for video recognition. In Proc. CVPR, 2017.

Figure 5. Qualitative results for consecutive frames of videos where our D&T approach could improve. Failures can be attributed to scale,
occlusion, misclassiﬁcation, or NMS issues.

