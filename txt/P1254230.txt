Learning to Parse Wireframes in Images of Man-Made Environments

Kun Huang1, Yifan Wang1, Zihan Zhou2, Tianjiao Ding1, Shenghua Gao1, and Yi Ma3
1ShanghaiTech University {huangkun, wangyf, dingtj, gaoshh}@shanghaitech.edu.cn
2The Pennsylvania State University zzhou@ist.psu.edu
3University of California, Berkeley yima@eecs.berkeley.edu

Abstract

In this paper, we propose a learning-based approach to
the task of automatically extracting a “wireframe” repre-
sentation for images of cluttered man-made environments.
The wireframe (see Fig. 1) contains all salient straight lines
and their junctions of the scene that encode efﬁciently and
accurately large-scale geometry and object shapes. To this
end, we have built a very large new dataset of over 5,000
images with wireframes thoroughly labelled by humans. We
have proposed two convolutional neural networks that are
suitable for extracting junctions and lines with large spatial
support, respectively. The networks trained on our dataset
have achieved signiﬁcantly better performance than state-
of-the-art methods for junction detection and line segment
detection, respectively. We have conducted extensive ex-
periments to evaluate quantitatively and qualitatively the
wireframes obtained by our method, and have convincingly
shown that effectively and efﬁciently parsing wireframes
for images of man-made environments is a feasible goal
within reach. Such wireframes could beneﬁt many impor-
tant visual tasks such as feature correspondence, 3D recon-
struction, vision-based mapping, localization, and naviga-
tion. The data and source code are available at https:
//github.com/huangkuns/wireframe.

1. Introduction

How to infer 3D geometric information of a scene from
2D images has been a fundamental problem in computer
vision. Conventional approaches to build a 3D model typ-
ically rely on detecting, matching, and triangulating local
image features (e.g.
corners, edges, SIFT features, and
patches). One great advantage of working with local fea-
tures is that the system can be somewhat oblivious to the
scene, as long as it contains sufﬁcient distinguishable fea-
tures. Meanwhile, modern applications of computer vi-
sion systems often require an autonomous agent (e.g., a
car, a robot, or a UAV) to efﬁciently and effectively negoti-
ate with a physical space in cluttered man-made (indoor or
outdoor) environments. Such scenarios present signiﬁcant

Figure 1. First row: Examples of typical indoor or outdoor scenes
with geometrically meaningful wireframes labelled by humans;
Second row: Wireframes automatically extracted by our method.

challenges to the current local-feature based approaches:
Man-made environments typically consist of large texture-
less surfaces (e.g. white walls or the ground); or they may
be full of repetitive patterns hence local features are am-
biguous to match; and the visual localization system is re-
quired to work robustly and accurately over extended routes
and sometimes across very large baseline between views.

Nevertheless, the human vision system seems capable of
effortlessly localizing or navigating among such environ-
ments arguably by exploiting larger-scale (global or semi-
global) structural features or regularities of the scene. For
instance, many works [6, 21, 14, 11, 35] have demonstrated
that prior knowledge about the scene such as a Manhat-
tan world could signiﬁcantly beneﬁt the 3D reconstruction
tasks. The Manhattan assumption can often be violated in
cluttered man-made environments, but it is rather safe to
assume that man-made environments are dominantly piece-
wise planar hence rich of visually salient lines (intersection
of planes) and junctions (intersection of lines). Conceptu-
ally, such junctions or lines could just be a very small “sub-
set” among the local corner features (or SIFTs) and edge
features detected by conventional methods, but they already
encode most information about larger-scale geometry of the
scene. For simplicity, we refer to such a set of lines and their

1626

intersected junctions collectively as a “wireframe”.1

The goal of this work is to study the feasibility of devel-
oping a vision system that could efﬁciently and effectively
extract the wireframe of a man-made scene. Intuitively, we
wish such a system could emulate the level of human per-
ception of the scene geometry, even from a single image.
To this end, we have collected a database of over 5,000 im-
ages of typical indoor and outdoor environments and asked
human subjects to manually label out all line segments and
junctions that they believe to be important for understand-
ing shape of regular objects or global geometric layout of
the scene.2 Fig. 1 (ﬁrst row) shows some representative
examples of labelled wireframes.

In the literature, several methods have been proposed to
detect line segments [45] or junctions [35, 47] in the image,
and to further reason about the 3D scene geometry using
the detected features [21, 11, 10, 34, 51]. These methods
typically take a bottom-up approach: First, line segments
are detected in the image. Then, two or more segments
are grouped to form candidate junctions. However, there
are several inherent difﬁculties with this approach. First,
by enumerating all pairs of line segments, a large number
of intersections are created. But only a very small subset
of them are true junctions in the image. To retrieve the true
junctions, various heuristics as well as RANSAC-based ver-
iﬁcation techniques have been previously proposed. As re-
sult, such methods are often time consuming and even break
down when the scene geometry and texture become com-
plex. Second, detecting line segments itself is a difﬁcult
problem in computer vision. If one fails to detect certain
line segments in the image, then it would be impossible for
the method to ﬁnd the associated junctions. Third, since all
existing methods rely on low-level cues such as image gra-
dients and edge features to detect line segments and junc-
tions, they are generally unable to distinguish junctions and
line segments that are of global geometric importance with
those produced by local textures or irregular shapes.

In view of the fundamental difﬁculties of existing meth-
ods, we propose a complementary approach to wireframe
(junctions and line segments) detection in this paper. Our
method does not rely on grouping low-level features such as
image gradients and edges. Instead, we directly learn detec-
tors for junctions and lines of large spatial support from the
above large-scale dataset of manually labeled junctions and
lines. In particular, inspired by the recent success of con-
volutional neural networks in object detection, we design
novel network architectures for junction and line detection,
respectively. We then give a simple but effective method to

1In architecture design, a wireframe is often referred to a line drawing
of a building or a scene on paper. Interpretation of such line drawings of
3D objects has a long history in computer vision dated back to the ’70s and
’80s [19, 3, 42, 26].

2For simplicity, this work is limited to wireframes consisting of straight
lines. But the idea and method obviously apply to wireframes with curves.

establish incidence relationships among the detected junc-
tions and lines and produce a complete wireframe for the
scene. Fig. 1 (second row) shows typical results of the
proposed method. As one can see, our method is able to
detect junctions formed by long line segments with weak
gradient while signiﬁcantly reducing the number of false
detections. In addition, as the labelled junctions and line
segments are primarily associated with salient, large-scale
geometric structures of the scene, the resulting wireframe is
geometrically more meaningful, emulating human percep-
tion of the scene’s geometry.
Contributions of this work include: (i) the establishment
of a large dataset for learning-based wireframe detection of
man-made environments, and (ii) the development of ef-
fective, end-to-end trainable CNNs for detecting geomet-
rically informative junctions and line segments. Comparing
with existing methods on junction and line segment detec-
tion, our learning-based method has achieved, both quan-
titatively and qualitatively, superior performances on both
tasks, hence convincingly veriﬁed the feasibility of wire-
frame parsing. Furthermore, both junction and line detec-
tion achieves almost real-time performance at the testing
time, thus is suitable for a wide range of real-world appli-
cations such as feature correspondence, 3D reconstruction,
vision-based mapping, localization and navigation.

Related Work
Edge and line segment detection. Much work has been
done to extract line segments from images. Existing meth-
ods are typically based on perceptual grouping of low-level
cues (i.e., image gradients) [33, 45, 2, 23, 24]. A key chal-
lenge of these local approaches is the choice of some ap-
propriate threshold to discriminate true line segments from
false conjunctions. Another line of work extends Hough
transform to line segment detection [30, 15, 50]. While
Hough transform has the ability to accumulate informa-
tion over the entire image to determine the presence of
a line structure, identifying endpoints of the line segment
in the image remains a challenge [1]. Recently, machine
learning based approaches have been shown to produce
the state-of-the-art results in generating pixel-wise edge
maps [8, 48, 28]. But these methods do not attempt to ex-
tract straight line segments from the image.
Junction detection. Detecting and analyzing junctions in
real-world images remains a challenging problem due to
a large number of fragmented, spurious, and missing line
segments.
In the literature, there are typically two ways
to tackle this problem. The ﬁrst group of methods focuses
on operators based on local image cues, such as the Harris
corner detector [18]. However, local junction detection is
known to be difﬁcult, even for humans [31]. More recent
methods detect junctions by ﬁrst locating contours (in nat-
ural images) [25] or straight line segments (in man-made
environments) [21, 35, 10, 47] and then grouping them to

2627

environments. Some examples are shown in Fig. 2. The
scenes include both indoor environments such as bedroom,
living room, and kitchen, and outdoor scenes, such as house
and yard. For each image, we manually labelled all the line
segments associated with the scene structures. Here, our
focus is on the structural elements in the image, that is, ele-
ments (i.e., line segments) from which meaningful geomet-
ric information of the scene can be extracted. As a result,
we do not label line segments that are associated with tex-
ture (e.g., curtains, tree leaves), irregular or curved objects
(e.g., sofa, humans, plants), shadows etc.

With the labelled line segments, ground truth junction
locations and their branches can be easily obtained from the
intersection or incidence relationships among two or more
line segments in the image (Fig. 2, second row). Note that,
unlike previous works [35, 34], we do not restrict ourselves
to Manhattan junctions, which are formed by line segments
aligned with one of three principal and mutually orthogonal
directions in the scene. In fact, many scenes in our dataset
do not satisfy the Manhattan world assumption [4]. For ex-
ample, the scene depicted in the last column of Fig. 2 has
more than two horizontal directions.

In summary, our annotation in each image includes a set
of junction points P = {pn}N
n=1 and a set of line segments
L = {lm}M
m=1. Each junction p is the intersection of sev-
eral, say R, line segments, called its branches. The coor-
dinates of p are denoted as x ∈ R2 and its line branches
are recorded by their angles {θr}R
r=1. The number R is
known as the order of the junction, and the typical “L”,
“Y ”, and “X”-type junctions have orders R = 2, 3, and
4, respectively. Each line segment is represented by its two
end points: l = (p1, p2). Hence, the wireframe, denoted as
W , records all incidence and intersection relationships be-
tween junctions in P and lines in L. It can be represented
by an N × M matrix W whose nm-th entry is 1 if pn is
on lm, and 0 otherwise. Notice that two line segments are
intersected at some junction if and only if the correspond-
ing entry in W T W is nonzero; and similarly W W T for
connected junctions.

3. Wireframe Detection Method

Recently, deep convolutional neural networks (CNNs)
such as [41, 38, 37] have shown impressive performance
in object detection tasks. Utilizing the dataset we have, we
here design new, end-to-end trainable CNNs for detecting
junctions and lines, respectively, and then merge them into
a complete wireframe. Fig. 3 shows the overall architecture
of our proposed networks and method. Note that we choose
different network architectures for junctions and lines due
to the nature of their geometric properties, which we will
elaborate below.

3628

Figure 2. Example images of our wireframe dataset, which covers
a wide range of man-made scenes with different viewpoints, light-
ing conditions, and styles. For each image, we show the manually
labelled line segments (ﬁrst row) and the ground truth junctions
derived from the line segments (second row).

form junctions. As we discussed before, such bottom-up
methods are (i) sensitive to scene complexity, and (ii) vul-
nerable to imperfect line segment detection results.
Line- and junction-based geometric reasoning. Knowl-
edge about junctions and the associated line structures is
known to beneﬁt many real-world 3D vision tasks. From a
single image, a series of recent work use these features to
recover the 3D layout of the scene [21, 35, 34, 51]. Mean-
while, observing that the junctions impose incident con-
straints on the adjacent line segments, [20] devises a method
for 3D reconstruction of lines without explicitly matching
them across views, whereas [46] proposes a surface scaffold
structure that consists of sets of connected edges to regular-
ize stereo-based methods for building reconstruction. Fur-
thermore, [10] uses line segments and junctions to develop
a robust and efﬁcient method for two-view pose estimation,
and [49] systematically studies how knowledge about junc-
tions can affect the complexity and number of solutions to
the Perspective-n-Line (PnL) problem.
Machine learning and geometry. There is a large body
of work on machine learning based approach to inferring
pixel-level geometric properties of the scene, such as the
depth [40, 9], and the surface normal [12, 13]. But few
work has been done on detecting mid/high-level geometric
primitives with supervised training data. Recently, [17] pro-
poses a method to recognize planes in a single image, [16]
uses SVM to classify indoor planes (e.g., walls and ﬂoors),
and [27, 39, 5] train fully convolutional networks (FCNs) to
predict “informative” edges formed by the pairwise inter-
sections of room faces. However, none of the work aims to
detect highly compressive vectorized junctions or line seg-
ments in the image, let alone a complete wireframe.

2. A New Dataset for Wireframe Detection

As part of our learning-based framework to wireframe
detection, we have collected 5,462 images of man-made

3
×
3
 
:
g
n
i
l
o
o
P

1
×
1
 
:
v
n
o
C

3
×
3
 
v
n
o
C

3
×
3
 
:
g
n
i
l
o
o
P

Junction center decoders

Conv: 3×3

Conv: 1×1

Conv: 3×3

Conv: 1×1

Junction branch decoders

5
×
5
 
v
n
o
c
e
D

 

5
×
5
v
n
o
c
e
D

5
×
5
 
v
n
o
C

n
o
i
t
p
e
c
n
I

 

Stack 1

Stack 5

Junctions

Image

M
R
P

M
R
P

Conv: 
1×1

Conv: 
3×3

Conv: 
1×1

Conv: 
1×1

Feature Maps

PRM

PRM

Line heat map

PRM

PRM

PRM

PRM

PRM

Conv: 
1×1

Conv: 
1×1

Figure 3. Architecture of the overall system. Top: junction detection network. Bottom: line detection network.

m
h
t
i
r
o
g
l
A
 
e
g
r
e

M

Wireframe

Ground truth 
Wireframe

7
×
7

 
:
v
n
o
C

7
×
7

 

v
n
o
C

H

Figure 4. Representation of a junction with three branches.

W

3.1. Junction Detection

3.1.1 Design Rationale
Our design of the network architecture is guided by several
important observations about junctions.
Fully convolutional network for global detection. As we
mentioned before, local junction detection is a difﬁcult task,
which often leads to spurious detections. Therefore, it is im-
portant to enable the network to reason globally when mak-
ing predictions. This motivates us to choose a fully convolu-
tional network (FCN), following its recent success in object
detection [37]. Unlike other popular object detection tech-
niques that are based on sliding windows [41] or region pro-
posals [38], FCN sees the entire image so it implicitly cap-
tures the contextual information about the junctions. Simi-
lar to [36, 37], our network divides the input image into an
H ×W mesh grid, see Fig. 4 right. If the center of a junction
falls into a grid cell, that cell is responsible for detecting it.
Thus, each ij-th cell predicts a conﬁdence score cij reﬂect-
ing how conﬁdent the model thinks there exists a junction in
that cell. To further locate the junction, each ij-th cell also
predicts its relative displacement xij w.r.t. the center of the
cell. Note that the behavior of the grid cells resembles the
so-called “anchors”, which serve as regression references in
the latest object detection pipelines [38, 36, 22].
Multi-bin representation for junction branches. Unlike
traditional object detection tasks, each cell in our network
needs to make different numbers of predictions due to the

varying number of branches in a junction. To address this
issue, we borrow the idea of spatial grid and propose a new
multi-bin representation for the branches, as shown in Fig. 4
left. We divide the circle (i.e., from 0 to 360 degrees) into
K equal bins, with each bin spanning 360
K degrees. Let the
center of the k-th bin be bk, we then represent an angle θ
as (k, ∆k), if θ fall into the k-th bin, where ∆k is the angle
residual from the center bk in the clockwise direction. Thus,
for each bin we regress to this local orientation ∆k.

As a result, our network architecture consists of an en-
coder and two sets of decoders. The encoder takes the
whole image as input and produces an H × W grid of
high-level descriptors via a convolutional network. The
decoders then use the feature descriptors to make junc-
tion predictions. Each junction is represented by pij =
xij, cij, {θijk, cθ
, where xij is the coordinates of
the junction center, cij ∈ [0, 1] is the conﬁdence score for
(cid:0)
the presence of a junction in the ij-th grid cell, θijk is the
angle for the branch in the k-th bin, and cijk is the con-
ﬁdence score for the bin. The two sets of decoders pre-
dict the junction center and the branches respectively. Each
FCN decoder is simply a convolutional layer followed by a
regressor, as shown in Fig. 3 top.

ijk}K

k=1

(cid:1)

Unlike local junctions, the junctions we aim to detect
each is formed by the intersection of two or more long line
segments (the branches). While the junction detection does
not explicitly rely on edge/line detection as an intermediate
step, the knowledge about the associated edges is indirectly
learned by enforcing the network to make correct detection
of the branches and their directions.

3.1.2 Loss Function
To guide the learning process towards the desired output,
our loss function consists of four modules. Given a set of
ground truth junctions P = {p1, . . . , pN } in an image, we

4629

locLc

conf Lb

conf Lc

conf +λb

write the loss function as follows:
L = λc
locLb
loc +λb
conf +λc
In the following, we explain each term in more detail.
Junction center conﬁdence loss Lc
conf . The junction cen-
ter conﬁdence decoder predicts a score ˆcij, indicating the
probability of a junction for each grid cell. Let cij be the
ground truth binary class label, we use the cross-entropy
loss:

loc. (1)

Lc

conf = −

E(ˆcij, cij).

H × W X
i,j
Junction center location loss Lc
loc. The junction center
location decoder predicts the relative position ˆxij of a junc-
tion for each grid cell. We compare the prediction with each
ground truth junction using the ℓ2 loss:

(2)

1

Lc

loc = −

kˆxf (n) − xf (n)k2
2,

(3)

1
N

N

X
n=1

where f (n) returns the index of the grid cell that the n-th
ground truth junction falls into, and xf (n) is the relative
position of the ground truth junction w.r.t. that cell center.
Junction branch conﬁdence loss Lb
conf . The junction
branch conﬁdence decoder predicts a score ˆcθ
ijk for each
bin in each grid cell, indicating the probability of a junction
branch in that bin. Similar to the junction center conﬁdence
loss above, we use the cross-entropy loss to compare the
predictions with the ground truth labels. The only differ-
ence is that we only consider those grid cells in which a
ground truth junction is present:
K

N

(4)

Lb

conf = −

E(ˆcθ

f (n),k, cθ

f (n),k).

X
n=1

X
k=1
Junction branch location loss Lb
loc. Similar to the junction
center location loss, we ﬁrst decide, for each ground truth
junction, the indices of the bins that its branches fall into,
denoted as g(r), r = 1, . . . , Rn, where Rn is the order of
pn. Then, we compare our predictions with the ground truth
using the ℓ2 loss:
N

Rn

1
N × K

Lb

loc = −

1
N

1
Rn

(cid:0)

X
n=1

X
r=1

kˆθf (n),g(r) − θf (n),g(r)k2

2(cid:1).

(5)

Implementation details. We construct our model to en-
code an image into 60×60 grid of 256-dimensional features.
Each cell in the grid is responsible for predicting if a junc-
tion is present in the corresponding image region. Our en-
coder is based on Google’s Inception-v2 model [43], which
extracts multi-scale features and is well-suited for our prob-
lem. For our problem, we only use the early layers in the
Inception network, i.e., the ﬁrst layer to “Mixed 3b”. Each
decoder consists of a 3 × 3 × 256 convolutional layer, fol-
lowed by a ReLU layer and a regressor. Note that the regres-
sor is conveniently implemented as 1 × 1 × d convolutional
layer, where d is the dimension of the output.

The default values for the weights in Eq. (1) are set to
loc = 0.1.

conf = 1, λc

conf = λb

the following: λc

loc = λb

We choose the number of bins K = 15. Our network is
trained from scratch with the Stochastic Gradient Descent
(SGD) method. The momentum parameter is set to 0.9, and
the batch size is set to 1. We follow the standard practice in
training deep neural networks to augment the data with im-
age domain operations including mirroring, ﬂipping upside-
down, and cropping. The initial learning rate is set to 0.01.
We decrease it by a multiple of 0.1 after every 100,000 iter-
ations. Convergence is reached at 300,000 iterations.

3.2. Line Detection

Next we design and train a convolutional neural network
(Fig. 3 bottom) to infer line information from RGB images.
The network predicts for each pixel p whether it falls on
a (long) line l. To suppress local edges, short lines, and
curves, the predicted value h(p) (of the heat map) at pixel
p is set to be the length of the line it belongs to. Given an
image with ground truth lines L, the target value for h(p) is
deﬁned to be:

(6)

(7)

h(p) =

(

d(l) p is on a line l in L,
0

p is not on any line in L,

where d(l) is the length of the line l. Let ˆh(p) be the esti-
mated heatmap value, then the loss function we try to mini-
mize the ℓ2 loss:

L =

kˆh(pij) − h(pij)k2
2.

i,j
X
where the sum is over all pixels of the image.
Implementation details. The network architecture is in-
spired by the Stacked Hourglass network [32]. It takes a
320 × 320 × 3 RGB image as input, extracts a 80 × 80 × 256
feature maps via three Pyramid Residual Modules (PRM),
see Fig. 3 bottom. The feature maps then go through ﬁve
stacked hourglass modules, followed by two fully convolu-
tional and ReLU layers (5 × 5 × 32 and 5 × 5 × 16) and
a 5 × 5 × 1 convolutional layer to output a 320 × 320 × 1
pixel-wise heat map. The detailed pyramid residual module
and stacked hourglass module can be found in [32].

During training, we adopt the Stochastic Gradient De-
scent (SGD) method. The momentum parameter is set to
0.9, and the batch size is set to 4. Again, we augment
the data with image domain operations including mirroring
and ﬂipping upside-down. The initial learning rate is set to
0.001. We decrease it by a multiple of 0.1 after 100 epochs.
Convergence is reached at 120 epochs.

Notice that we have used an Inception network for junc-
tion detection whereas an hourglass network for line detec-
tion. In junction detection, we are not interested in the entire
support of the line, hence the receptive ﬁeld of an Inception
network is adequate for such tasks. However, we ﬁnd that
for accurately detecting lines with large spatial support, the
Stacked Hourglass network works much better due to its
large (effective) receptive ﬁeld. In addition, our experiment

5630

also shows that above length-dependent ℓ2 loss is more ef-
fective than the cross-entropy cost often used in learning-
based edge detection.

3.3. Combine Junctions and Lines for Wireframe

The ﬁnal step of the system is to combine the results
from junction detection and line detection to generate a
wireframe W for the image, which, as mentioned before,
consists of a set of junction points P connected by a set of
line segments L.

Speciﬁcally, given a set of detected junctions {pi}N
i=1
and a line heat map h, we ﬁrst apply a threshold w to convert
h into a binary map M. Then, we construct the wireframe
based on the following rules and procedure:

1. The set P is initialized with the output from the junc-
tion detector. A pair of detected junctions p and q ∈ P
are connected by a line segment l = (p, q) if they are
on (or close to be on) each other’s branches, and we
add this segment l to L. If there are multiple detected
junctions on the same branch of a junction point p, we
only keep the shortest segment to avoid overlap.3

2. For any branch of a junction p that is not connected
to any other junction, we attempt to recover additional
line segment using M. We ﬁrst ﬁnd the farthest line
pixel qM (pixel p is a line pixel if M(p) = 1) that is
also on the ray starting at p along the branch. Then,
we ﬁnd all the intersection points {q1, . . . , qS} of line
segment (p, qM) with existing segments in L. Let
q0 = pi and qS+1 = qM, we calculate the line sup-
port ratio κ(qs−1, qs), s = {1, . . . , S, S + 1}, for each
segment. Here, κ is deﬁned as the ratio of the number
of line pixels to the total length of the segment. If κ
is above a threshold, say 0.6, we add the segment to L
and its endpoints to P .

Notice that both the sets P and L may have two sources
of candidates. For the junction set P , besides those di-
rectly detected by the junction detection, the line segments
could also produce new intersections or endpoints that were
missed by the junction detection. For the line segment set
L, it could come from branches of the detected junctions
and the line detection.

We leave more detailed description of the algorithm to
the supplementary material. Of course, there could be more
advanced ways to merge the detected junctions and line heat
map which we will explore in future work. Nevertheless,
from our experiments (see next section), we ﬁnd that the
results from junction detection and line detection are rather
complementary to each other and the above simple proce-
dure already produces rather decent results.

3Hence we are less interested in detecting a straight line with the
longest possible support, instead, we are interested in its incidence rela-
tionship with other lines and junctions.

4. Experiments

In this section, we conduct extensive experiments to
evaluate the quality of junctions and ﬁnal wireframes gen-
erated by our method, and compare it to the state-of-the-
art. All experiments are conducted on one NVIDIA Titan X
GPU device. In testing phase, our method runs at about two
frames per second, thus our method is potentially suitable
for applications which require real-time processing.

4.1. Datasets and Evaluation Metrics

For performance evaluation, we split our wireframe
dataset into a training set and a testing set. Among the 5,462
images in the dataset, 5,000 images are randomly selected
for training and validation, and the remaining 462 images
are used for testing. For junction detection (Section 4.2),
we compare the junctions detected by any method with the
ground truth junctions (Fig. 2, second row). For wireframe
construction (Section 4.3), we compare the line segments
detected by any method with the ground truth line segments
labeled by human subjects (Fig. 2, ﬁrst row).

For both junction detection and wireframe construc-
tion experiments, all methods are the evaluated quantita-
tively by means of the recall and precision as described
in [29, 25, 47]. In the context of junction detection, recall is
the fraction of true junctions that are detected, whereas pre-
cision is the fraction of junction detections that are indeed
true positives. In the context of wireframe construction, re-
call is the fraction of line segment pixels that are detected,
whereas precision is the fraction of line segment pixels that
are indeed true positives.

Speciﬁcally, let G denote the set of ground truth junc-
tions (or line segment pixels), and Q denote the set of junc-
tions (or line segment pixels) detected by any method, the
precision and recall are deﬁned as follows:

Precision

.
= |G ∩ Q|/|Q|, Recall

.
= |G ∩ Q|/|G|.

(8)

Note that, following the protocols of previous work [29, 25,
47], the particular measures of recall and precision allow
for some small tolerance in the localization of the junctions
(or line segment pixels). In this paper, we set the tolerance
to be 0.01 of the image diagonal.

4.2. Junction Detection Comparison

We compare our junction detection method with two
recent methods, namely Manhattan junction detection
(MJ) [35] and a contrario junction detection (ACJ) [47].
MJ [35]: This method detects Manhattan junctions formed
by line segments in three principal orthogonal directions
using a simple voting-based scheme. As the authors did
not release their code, we use our own implementation
of the method. Line segments are ﬁrst detected using
LSD [45], and then clustered using J-Linkage [44] to ob-
tain the vanishing points. Note that this method only ap-

6631

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

MJ
ACJ
Our Method

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

Figure 5. The precision-recall curves of different junction detec-
tion methods on our test dataset.

plies to scenes that satisfy the Manhattan world assump-
tion. For fair comparison, we only keep the images in
which three principal vanishing points are detected. An
important parameter in our implementation is the maxi-
mum distance dmax between a line segment and a point
p for that line segment to vote for p. We vary the value
dmax ∈ {10, 20, 30, 50, 100, 200, 300, 500} pixels.
ACJ [47]: This method relies on statistical modeling of im-
age gradients and an a contrario approach to detect junc-
tions. Speciﬁcally, meaningful junctions are detected as
those which are very unlikely under a null hypothesis H0,
which is deﬁned based on the distribution of gradients of
In the method, each candidate
arbitrary natural images.
junction is associated with a strength value depending on
the image gradients around it. Then, the candidate junc-
tion is validated with a threshold, which is derived by con-
trolling the number of false detections, ǫ, in an image fol-
lowing H0. For the experiments, we use the implemen-
tation provided by the authors of [47] and vary the value
ǫ ∈ {10−3, 10−2, 10−1, 1, 101, 102, 103}.
Performance comparison. Fig. 5 shows the precision-
recall curves of all methods on our new dataset. For our
method, we vary the junction conﬁdence threshold τ from
0.1 to 0.9. As one can see, our method outperforms the
other methods by a large margin. Fig. 7 compares qualita-
tively the results of all methods on our test data. Compared
to the other two methods, MJ tends to miss important junc-
tions due to the imperfect line segment detection results.
Moreover, since MJ relies on local image features, it no-
ticeably produces quite a few repetitive detections around
some junctions. By directly modeling the image gradients,
ACJ is able to ﬁnd most junctions on the scene structures.
However, as a local method, ACJ makes a lot of false pre-
dictions on textured regions (e.g., ﬂoor of the ﬁrst, sky of
the fourth image).
In contrast, our method is able to de-
tect most junctions intersected by salient lines, while min-
imizing the number of false detections. This is no surprise
because our supervised framework implicitly encodes high-
level structural and semantic information of the scene as it
learns from the labeled data provided by humans.

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

LSD
MCMLSD
Our Method

LSD
MCMLSD
Our Method

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

Figure 6. The precision-recall curves of different line segment de-
tection methods. Left: on our test dataset. Right: on the York
Urban dataset [7].

4.3. Line Segment Detection Comparison

In this section, we compare the wireframe results of
our method with two state-of-the-art line segment detection
[45]
methods, namely the Line Segment Detector (LSD)
and the Markov Chain Marginal Line Segment Detector
(MCMLSD) [1]. We test and compare with these methods
on both our new dataset and the York Urban dataset [7] used
in the work of MCMLSD [1].
LSD [45]: This method is a linear-time line segment detec-
tor that requires no parameter tuning. It also uses an a con-
trario approach to control the number of false detections.
In this experiment, we use the code released by the authors4
and vary the threshold for − log(NFA) (NFA is the number
of false alarms) in 0.01 × {1.750, 1.751, 1.752, ..., 1.7519}.
MCMLSD [1]: This method proposes a two-stage algo-
rithm to ﬁnd line segments. In the ﬁrst stage, it uses the
probabilistic Hough transform to identify globally optimal
lines. In the second stage, it searches each of these lines for
their supports (segments) in the image, which can be mod-
eled as labeling hidden states in a linear Markov chain. In
this experiment, we use the code released by the authors.5
Be aware that authors of [1] have introduced a different
metric than ours that tends to penalize over-segmentation.
Hence our metric can be unfair to their method. Neverthe-
less, our metric is more appropriate for wireframe detection
as we prefer to interpret a long line as several segments be-
tween junctions if it intersects with other lines.
Performance comparison. Fig. 6 shows the precision-
recall curves of all methods on our dataset and the York
Urban dataset, respectively. As one can see, our method
outperforms the other methods by a signiﬁcant margin on
our dataset. The margin on the York Urban dataset is decent
but not so large. According to [1], the labeling of the York
Urban dataset is not as complete for salient line segments,
hence it is not entirely suitable for the wireframe detection
task here. Fig. 8 compares qualitatively the results of all
methods on our test data. Since the other two methods rely
on local measurements, they tend to produce many line seg-

4http://www.ipol.im/pub/art/2012/gjmr-lsd/
5http://www.elderlab.yorku.ca/resources/

7632

Figure 7. Junction detection results. First row: MJ (dmax = 20). Second row: ACJ (ǫ = 1). Third row: Our method (τ = 0.5).

Figure 8. Line/wireframe detection results. First row: LSD (-log(NFA) > 0.01 × 1.758). Second row: MCMLSD (conﬁdence top 100).
Third row: Our method (line heat map h(p) > 10). Fourth row: Ground truth.

ments on textured regions (e.g. curtain of the ﬁrst image)
which do not correspond to scene structures.

5. Conclusion

This paper has demonstrated the feasibility of parsing
wireframes in images of man-made environments. The pro-
posed method is based on combining junctions and lines
detected from respective neural networks trained on a new
large-scale dataset. Both quantitatively and qualitatively,
the results of our method approximately emulate those la-

belled by humans. The junctions and line segments in a
wireframe and their incidence relationships encode rich and
accurate large-scale geometry of the scene and shape of reg-
ular objects therein, in a highly compressive and efﬁcient
manner. Hence results of this work can signiﬁcantly facili-
tate and beneﬁt visual tasks such as feature correspondence,
3D reconstruction, vision-based mapping, localization, and
navigation in man-made environments.
Acknowledgement: The project is supported by NSFC
(NO. 61502304) and Program of Shanghai Subject Chief
Scientist (A type) (No. 15XD1502900).

8633

References

[1] E. J. Almazan, R. Tal, Y. Qian, and J. H. Elder. Mcmlsd: A
dynamic programming approach to line segment detection.
In CVPR, July 2017. 2, 7

[2] M. Brown, D. Windridge, and J. Guillemaut. A generalis-
able framework for saliency-based line segment detection.
Pattern Recognition, 48(12):3993–4011, 2015. 2

[3] M. B. Clowes. On seeing things. Artif. Intell., 2(1):79–116,

1971. 2

[4] J. M. Coughlan and A. L. Yuille. Manhattan world: Orien-
tation and outlier detection by bayesian inference. Neural
Computation, 15(5):1063–1088, 2003. 3

[5] S. Dasgupta, K. Fang, K. Chen, and S. Savarese. Delay:
Robust spatial layout estimation for cluttered indoor scenes.
In CVPR, pages 616–624, 2016. 3

[6] E. Delage, H. Lee, and A. Y. Ng. Automatic single-image
3D reconstructions of indoor manhattan world scenes.
In
International Symposium on Robotics Research, pages 305–
321, 2005. 1

[7] P. Denis, J. H. Elder, and F. J. Estrada. Efﬁcient edge-based
methods for estimating manhattan frames in urban imagery.
In ECCV, pages 197–210, 2008. 7

[8] P. Doll´ar and C. L. Zitnick. Structured forests for fast edge

detection. In ICCV, pages 1841–1848, 2013. 2

[9] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
from a single image using a multi-scale deep network.
In
NIPS, pages 2366–2374, 2014. 3

[10] A. Elqursh and A. M. Elgammal. Line-based relative pose

estimation. In CVPR, pages 3049–3056, 2011. 2, 3

[11] A. Flint, D. W. Murray, and I. Reid. Manhattan scene under-
standing using monocular, stereo, and 3D features. In ICCV,
pages 2228–2235, 2011. 1, 2

[12] D. F. Fouhey, A. Gupta, and M. Hebert. Data-driven 3d prim-
itives for single image understanding. In ICCV, pages 3392–
3399, 2013. 3

[13] D. F. Fouhey, A. Gupta, and M. Hebert. Unfolding an indoor

origami world. In ECCV, pages 687–702, 2014. 3

[14] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski.
Manhattan-world stereo. In CVPR, pages 1422–1429, 2009.
1

[15] Y. Furukawa and Y. Shinagawa. Accurate and robust line
segment extraction by analyzing distribution around peaks
in hough space. CVIU, 92(1):1–25, 2003. 2

[16] R. Guo, C. Zou, and D. Hoiem. Predicting complete 3d mod-
els of indoor scenes. CoRR, abs/1504.02437, 2015. 3
[17] O. Haines and A. Calway. Recognising planes in a single

image. IEEE TPAMI, 37(9):1849–1861, 2015. 3

[18] C. Harris and M. Stephens. A combined corner and edge de-
tector. In Proceedings of the Alvey Vision Conference, pages
1–6, 1988. 2

[19] D. Huffman. Impossible objects as nonsense sentences. Ma-

chine Intelligence, 6, 1971. 2

[20] A. Jain, C. Kurz, T. Thorm¨ahlen, and H. Seidel. Exploiting
global connectivity constraints for reconstruction of 3d line
segments from images. In CVPR, pages 1586–1593, 2010. 3

[21] D. C. Lee, M. Hebert, and T. Kanade. Geometric reasoning
for single image structure recovery. In CVPR, pages 2136–
2143, 2009. 1, 2, 3

[22] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. E. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In ECCV, 2016. 4

[23] X. Liu, Z. Cao, N. Gu, S. Nahavandi, C. Zhou, and M. Tan.
Intelligent line segment perception with cortex-like mech-
IEEE Trans. Systems, Man, and Cybernetics,
anisms.
45(12):1522–1534, 2015. 2

[24] X. Lu, J. Yao, K. Li, and L. Li. Cannylines: A parameter-free
line segment detector. In ICIP, pages 507–511, 2015. 2
[25] M. Maire, P. Arbelaez, C. C. Fowlkes, and J. Malik. Using
contours to detect and localize junctions in natural images.
In CVPR, 2008. 2, 6

[26] J. Malik. Interpreting line drawings of curved objects. IJCV,

1(1):73–103, 1987. 2

[27] A. Mallya and S. Lazebnik. Learning informative edge maps
for indoor scene layout prediction. In ICCV, pages 936–944,
2015. 3

[28] K. Maninis, J. Pont-Tuset, P. A. Arbel´aez, and L. J. V. Gool.
In ECCV, pages 580–

Convolutional oriented boundaries.
596, 2016. 2

[29] D. R. Martin, C. C. Fowlkes, and J. Malik. Learning to detect
natural image boundaries using local brightness, color, and
texture cues. IEEE TPAMI, 26(5):530–549, 2004. 6

[30] J. Matas, C. Galambos, and J. Kittler. Robust detection of
lines using the progressive probabilistic hough transform.
CVIU, 78(1):119–137, 2000. 2

[31] J. McDermott. Psychophysics with junctions in real images.

Perception, 33:1101–1127, 2004. 2

[32] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-
works for human pose estimation. In ECCV, pages 483–499,
2016. 5

[33] M. Nieto, C. Cuevas, L. Salgado, and N. N. Garc´ıa. Line
segment detection using weighted mean shift procedures on
a 2d slice sampling strategy. Pattern Anal. Appl., 14(2):149–
163, 2011. 2

[34] S. Ramalingam and M. Brand. Lifting 3D manhattan lines

from a single image. In ICCV, pages 497–504, 2013. 2, 3

[35] S. Ramalingam, J. K. Pillai, A. Jain, and Y. Taguchi. Manhat-
tan junction catalogue for spatial reasoning of indoor scenes.
In CVPR, pages 3065–3072, 2013. 1, 2, 3, 6

[36] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection. In
CVPR, pages 779–788, 2016. 4

[37] J. Redmon and A. Farhadi. YOLO9000: better, faster,

stronger. CoRR, abs/1612.08242, 2016. 3, 4

[38] S. Ren, K. He, R. B. Girshick, and J. Sun. Faster R-CNN:
towards real-time object detection with region proposal net-
works. In NIPS, pages 91–99, 2015. 3, 4

[39] Y. Ren, C. Chen, S. Li, and C. J. Kuo. A coarse-to-ﬁne indoor
layout estimation (CFILE) method. CoRR, abs/1607.00598,
2016. 3

[40] A. Saxena, S. H. Chung, and A. Y. Ng. 3-D depth recon-
struction from a single still image. IJCV, 76(1):53–69, 2008.
3

9634

[41] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,
and Y. LeCun. Overfeat: Integrated recognition, localiza-
tion and detection using convolutional networks. CoRR,
abs/1312.6229, 2013. 3, 4

[42] K. Sugihara. Mathematical structures of line drawings of
polyhedrons-toward man-machine communication by means
of line drawings. IEEE TPAMI, 4(5):458–469, 1982. 2
[43] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna.
Rethinking the inception architecture for computer vision. In
CVPR, pages 2818–2826, 2016. 5

[44] J.-P. Tardif. Non-iterative approach for fast and accurate van-
ishing point detection. In ICCV, pages 1250–1257, 2009. 6
[45] R. G. von Gioi, J. Jakubowicz, J. Morel, and G. Randall.
LSD: A fast line segment detector with a false detection con-
trol. IEEE TPAMI, 32(4):722–732, 2010. 2, 6, 7

[46] J. Wang, T. Fang, Q. Su, S. Zhu, J. Liu, S. Cai, C. Tai, and
L. Quan.
Image-based building regularization using struc-
tural linear features. IEEE TVCG, 22(6):1760–1772, 2016.
3

[47] G. Xia, J. Delon, and Y. Gousseau. Accurate junction
IJCV,

detection and characterization in natural images.
106(1):31–56, 2014. 2, 6, 7

[48] S. Xie and Z. Tu. Holistically-nested edge detection.

In

ICCV, pages 1395–1403, 2015. 2

[49] C. Xu, L. Zhang, L. Cheng, and R. Koch. Pose estimation
from line correspondences: A complete analysis and a series
of solutions. IEEE TPAMI, 39(6):1209–1222, 2017. 3
[50] Z. Xu, B. Shin, and R. Klette. Accurate and robust line seg-
ment extraction using minimum entropy with hough trans-
form. IEEE TIP, 24(3):813–822, 2015. 2

[51] H. Yang and H. Zhang. Efﬁcient 3D room shape recovery

from a single panorama. In CVPR, 2016. 2, 3

10635

Learning to Parse Wireframes in Images of Man-Made Environments

Kun Huang1, Yifan Wang1, Zihan Zhou2, Tianjiao Ding1, Shenghua Gao1, and Yi Ma3
1ShanghaiTech University {huangkun, wangyf, dingtj, gaoshh}@shanghaitech.edu.cn
2The Pennsylvania State University zzhou@ist.psu.edu
3University of California, Berkeley yima@eecs.berkeley.edu

Abstract

In this paper, we propose a learning-based approach to
the task of automatically extracting a “wireframe” repre-
sentation for images of cluttered man-made environments.
The wireframe (see Fig. 1) contains all salient straight lines
and their junctions of the scene that encode efﬁciently and
accurately large-scale geometry and object shapes. To this
end, we have built a very large new dataset of over 5,000
images with wireframes thoroughly labelled by humans. We
have proposed two convolutional neural networks that are
suitable for extracting junctions and lines with large spatial
support, respectively. The networks trained on our dataset
have achieved signiﬁcantly better performance than state-
of-the-art methods for junction detection and line segment
detection, respectively. We have conducted extensive ex-
periments to evaluate quantitatively and qualitatively the
wireframes obtained by our method, and have convincingly
shown that effectively and efﬁciently parsing wireframes
for images of man-made environments is a feasible goal
within reach. Such wireframes could beneﬁt many impor-
tant visual tasks such as feature correspondence, 3D recon-
struction, vision-based mapping, localization, and naviga-
tion. The data and source code are available at https:
//github.com/huangkuns/wireframe.

1. Introduction

How to infer 3D geometric information of a scene from
2D images has been a fundamental problem in computer
vision. Conventional approaches to build a 3D model typ-
ically rely on detecting, matching, and triangulating local
image features (e.g.
corners, edges, SIFT features, and
patches). One great advantage of working with local fea-
tures is that the system can be somewhat oblivious to the
scene, as long as it contains sufﬁcient distinguishable fea-
tures. Meanwhile, modern applications of computer vi-
sion systems often require an autonomous agent (e.g., a
car, a robot, or a UAV) to efﬁciently and effectively negoti-
ate with a physical space in cluttered man-made (indoor or
outdoor) environments. Such scenarios present signiﬁcant

Figure 1. First row: Examples of typical indoor or outdoor scenes
with geometrically meaningful wireframes labelled by humans;
Second row: Wireframes automatically extracted by our method.

challenges to the current local-feature based approaches:
Man-made environments typically consist of large texture-
less surfaces (e.g. white walls or the ground); or they may
be full of repetitive patterns hence local features are am-
biguous to match; and the visual localization system is re-
quired to work robustly and accurately over extended routes
and sometimes across very large baseline between views.

Nevertheless, the human vision system seems capable of
effortlessly localizing or navigating among such environ-
ments arguably by exploiting larger-scale (global or semi-
global) structural features or regularities of the scene. For
instance, many works [6, 21, 14, 11, 35] have demonstrated
that prior knowledge about the scene such as a Manhat-
tan world could signiﬁcantly beneﬁt the 3D reconstruction
tasks. The Manhattan assumption can often be violated in
cluttered man-made environments, but it is rather safe to
assume that man-made environments are dominantly piece-
wise planar hence rich of visually salient lines (intersection
of planes) and junctions (intersection of lines). Conceptu-
ally, such junctions or lines could just be a very small “sub-
set” among the local corner features (or SIFTs) and edge
features detected by conventional methods, but they already
encode most information about larger-scale geometry of the
scene. For simplicity, we refer to such a set of lines and their

1626

intersected junctions collectively as a “wireframe”.1

The goal of this work is to study the feasibility of devel-
oping a vision system that could efﬁciently and effectively
extract the wireframe of a man-made scene. Intuitively, we
wish such a system could emulate the level of human per-
ception of the scene geometry, even from a single image.
To this end, we have collected a database of over 5,000 im-
ages of typical indoor and outdoor environments and asked
human subjects to manually label out all line segments and
junctions that they believe to be important for understand-
ing shape of regular objects or global geometric layout of
the scene.2 Fig. 1 (ﬁrst row) shows some representative
examples of labelled wireframes.

In the literature, several methods have been proposed to
detect line segments [45] or junctions [35, 47] in the image,
and to further reason about the 3D scene geometry using
the detected features [21, 11, 10, 34, 51]. These methods
typically take a bottom-up approach: First, line segments
are detected in the image. Then, two or more segments
are grouped to form candidate junctions. However, there
are several inherent difﬁculties with this approach. First,
by enumerating all pairs of line segments, a large number
of intersections are created. But only a very small subset
of them are true junctions in the image. To retrieve the true
junctions, various heuristics as well as RANSAC-based ver-
iﬁcation techniques have been previously proposed. As re-
sult, such methods are often time consuming and even break
down when the scene geometry and texture become com-
plex. Second, detecting line segments itself is a difﬁcult
problem in computer vision. If one fails to detect certain
line segments in the image, then it would be impossible for
the method to ﬁnd the associated junctions. Third, since all
existing methods rely on low-level cues such as image gra-
dients and edge features to detect line segments and junc-
tions, they are generally unable to distinguish junctions and
line segments that are of global geometric importance with
those produced by local textures or irregular shapes.

In view of the fundamental difﬁculties of existing meth-
ods, we propose a complementary approach to wireframe
(junctions and line segments) detection in this paper. Our
method does not rely on grouping low-level features such as
image gradients and edges. Instead, we directly learn detec-
tors for junctions and lines of large spatial support from the
above large-scale dataset of manually labeled junctions and
lines. In particular, inspired by the recent success of con-
volutional neural networks in object detection, we design
novel network architectures for junction and line detection,
respectively. We then give a simple but effective method to

1In architecture design, a wireframe is often referred to a line drawing
of a building or a scene on paper. Interpretation of such line drawings of
3D objects has a long history in computer vision dated back to the ’70s and
’80s [19, 3, 42, 26].

2For simplicity, this work is limited to wireframes consisting of straight
lines. But the idea and method obviously apply to wireframes with curves.

establish incidence relationships among the detected junc-
tions and lines and produce a complete wireframe for the
scene. Fig. 1 (second row) shows typical results of the
proposed method. As one can see, our method is able to
detect junctions formed by long line segments with weak
gradient while signiﬁcantly reducing the number of false
detections. In addition, as the labelled junctions and line
segments are primarily associated with salient, large-scale
geometric structures of the scene, the resulting wireframe is
geometrically more meaningful, emulating human percep-
tion of the scene’s geometry.
Contributions of this work include: (i) the establishment
of a large dataset for learning-based wireframe detection of
man-made environments, and (ii) the development of ef-
fective, end-to-end trainable CNNs for detecting geomet-
rically informative junctions and line segments. Comparing
with existing methods on junction and line segment detec-
tion, our learning-based method has achieved, both quan-
titatively and qualitatively, superior performances on both
tasks, hence convincingly veriﬁed the feasibility of wire-
frame parsing. Furthermore, both junction and line detec-
tion achieves almost real-time performance at the testing
time, thus is suitable for a wide range of real-world appli-
cations such as feature correspondence, 3D reconstruction,
vision-based mapping, localization and navigation.

Related Work
Edge and line segment detection. Much work has been
done to extract line segments from images. Existing meth-
ods are typically based on perceptual grouping of low-level
cues (i.e., image gradients) [33, 45, 2, 23, 24]. A key chal-
lenge of these local approaches is the choice of some ap-
propriate threshold to discriminate true line segments from
false conjunctions. Another line of work extends Hough
transform to line segment detection [30, 15, 50]. While
Hough transform has the ability to accumulate informa-
tion over the entire image to determine the presence of
a line structure, identifying endpoints of the line segment
in the image remains a challenge [1]. Recently, machine
learning based approaches have been shown to produce
the state-of-the-art results in generating pixel-wise edge
maps [8, 48, 28]. But these methods do not attempt to ex-
tract straight line segments from the image.
Junction detection. Detecting and analyzing junctions in
real-world images remains a challenging problem due to
a large number of fragmented, spurious, and missing line
segments.
In the literature, there are typically two ways
to tackle this problem. The ﬁrst group of methods focuses
on operators based on local image cues, such as the Harris
corner detector [18]. However, local junction detection is
known to be difﬁcult, even for humans [31]. More recent
methods detect junctions by ﬁrst locating contours (in nat-
ural images) [25] or straight line segments (in man-made
environments) [21, 35, 10, 47] and then grouping them to

2627

environments. Some examples are shown in Fig. 2. The
scenes include both indoor environments such as bedroom,
living room, and kitchen, and outdoor scenes, such as house
and yard. For each image, we manually labelled all the line
segments associated with the scene structures. Here, our
focus is on the structural elements in the image, that is, ele-
ments (i.e., line segments) from which meaningful geomet-
ric information of the scene can be extracted. As a result,
we do not label line segments that are associated with tex-
ture (e.g., curtains, tree leaves), irregular or curved objects
(e.g., sofa, humans, plants), shadows etc.

With the labelled line segments, ground truth junction
locations and their branches can be easily obtained from the
intersection or incidence relationships among two or more
line segments in the image (Fig. 2, second row). Note that,
unlike previous works [35, 34], we do not restrict ourselves
to Manhattan junctions, which are formed by line segments
aligned with one of three principal and mutually orthogonal
directions in the scene. In fact, many scenes in our dataset
do not satisfy the Manhattan world assumption [4]. For ex-
ample, the scene depicted in the last column of Fig. 2 has
more than two horizontal directions.

In summary, our annotation in each image includes a set
of junction points P = {pn}N
n=1 and a set of line segments
L = {lm}M
m=1. Each junction p is the intersection of sev-
eral, say R, line segments, called its branches. The coor-
dinates of p are denoted as x ∈ R2 and its line branches
are recorded by their angles {θr}R
r=1. The number R is
known as the order of the junction, and the typical “L”,
“Y ”, and “X”-type junctions have orders R = 2, 3, and
4, respectively. Each line segment is represented by its two
end points: l = (p1, p2). Hence, the wireframe, denoted as
W , records all incidence and intersection relationships be-
tween junctions in P and lines in L. It can be represented
by an N × M matrix W whose nm-th entry is 1 if pn is
on lm, and 0 otherwise. Notice that two line segments are
intersected at some junction if and only if the correspond-
ing entry in W T W is nonzero; and similarly W W T for
connected junctions.

3. Wireframe Detection Method

Recently, deep convolutional neural networks (CNNs)
such as [41, 38, 37] have shown impressive performance
in object detection tasks. Utilizing the dataset we have, we
here design new, end-to-end trainable CNNs for detecting
junctions and lines, respectively, and then merge them into
a complete wireframe. Fig. 3 shows the overall architecture
of our proposed networks and method. Note that we choose
different network architectures for junctions and lines due
to the nature of their geometric properties, which we will
elaborate below.

3628

Figure 2. Example images of our wireframe dataset, which covers
a wide range of man-made scenes with different viewpoints, light-
ing conditions, and styles. For each image, we show the manually
labelled line segments (ﬁrst row) and the ground truth junctions
derived from the line segments (second row).

form junctions. As we discussed before, such bottom-up
methods are (i) sensitive to scene complexity, and (ii) vul-
nerable to imperfect line segment detection results.
Line- and junction-based geometric reasoning. Knowl-
edge about junctions and the associated line structures is
known to beneﬁt many real-world 3D vision tasks. From a
single image, a series of recent work use these features to
recover the 3D layout of the scene [21, 35, 34, 51]. Mean-
while, observing that the junctions impose incident con-
straints on the adjacent line segments, [20] devises a method
for 3D reconstruction of lines without explicitly matching
them across views, whereas [46] proposes a surface scaffold
structure that consists of sets of connected edges to regular-
ize stereo-based methods for building reconstruction. Fur-
thermore, [10] uses line segments and junctions to develop
a robust and efﬁcient method for two-view pose estimation,
and [49] systematically studies how knowledge about junc-
tions can affect the complexity and number of solutions to
the Perspective-n-Line (PnL) problem.
Machine learning and geometry. There is a large body
of work on machine learning based approach to inferring
pixel-level geometric properties of the scene, such as the
depth [40, 9], and the surface normal [12, 13]. But few
work has been done on detecting mid/high-level geometric
primitives with supervised training data. Recently, [17] pro-
poses a method to recognize planes in a single image, [16]
uses SVM to classify indoor planes (e.g., walls and ﬂoors),
and [27, 39, 5] train fully convolutional networks (FCNs) to
predict “informative” edges formed by the pairwise inter-
sections of room faces. However, none of the work aims to
detect highly compressive vectorized junctions or line seg-
ments in the image, let alone a complete wireframe.

2. A New Dataset for Wireframe Detection

As part of our learning-based framework to wireframe
detection, we have collected 5,462 images of man-made

3
×
3
 
:
g
n
i
l
o
o
P

1
×
1
 
:
v
n
o
C

3
×
3
 
v
n
o
C

3
×
3
 
:
g
n
i
l
o
o
P

Junction center decoders

Conv: 3×3

Conv: 1×1

Conv: 3×3

Conv: 1×1

Junction branch decoders

5
×
5
 
v
n
o
c
e
D

 

5
×
5
v
n
o
c
e
D

5
×
5
 
v
n
o
C

n
o
i
t
p
e
c
n
I

 

Stack 1

Stack 5

Junctions

Image

M
R
P

M
R
P

Conv: 
1×1

Conv: 
3×3

Conv: 
1×1

Conv: 
1×1

Feature Maps

PRM

PRM

Line heat map

PRM

PRM

PRM

PRM

PRM

Conv: 
1×1

Conv: 
1×1

Figure 3. Architecture of the overall system. Top: junction detection network. Bottom: line detection network.

m
h
t
i
r
o
g
l
A
 
e
g
r
e

M

Wireframe

Ground truth 
Wireframe

7
×
7

 
:
v
n
o
C

7
×
7

 

v
n
o
C

H

Figure 4. Representation of a junction with three branches.

W

3.1. Junction Detection

3.1.1 Design Rationale
Our design of the network architecture is guided by several
important observations about junctions.
Fully convolutional network for global detection. As we
mentioned before, local junction detection is a difﬁcult task,
which often leads to spurious detections. Therefore, it is im-
portant to enable the network to reason globally when mak-
ing predictions. This motivates us to choose a fully convolu-
tional network (FCN), following its recent success in object
detection [37]. Unlike other popular object detection tech-
niques that are based on sliding windows [41] or region pro-
posals [38], FCN sees the entire image so it implicitly cap-
tures the contextual information about the junctions. Simi-
lar to [36, 37], our network divides the input image into an
H ×W mesh grid, see Fig. 4 right. If the center of a junction
falls into a grid cell, that cell is responsible for detecting it.
Thus, each ij-th cell predicts a conﬁdence score cij reﬂect-
ing how conﬁdent the model thinks there exists a junction in
that cell. To further locate the junction, each ij-th cell also
predicts its relative displacement xij w.r.t. the center of the
cell. Note that the behavior of the grid cells resembles the
so-called “anchors”, which serve as regression references in
the latest object detection pipelines [38, 36, 22].
Multi-bin representation for junction branches. Unlike
traditional object detection tasks, each cell in our network
needs to make different numbers of predictions due to the

varying number of branches in a junction. To address this
issue, we borrow the idea of spatial grid and propose a new
multi-bin representation for the branches, as shown in Fig. 4
left. We divide the circle (i.e., from 0 to 360 degrees) into
K equal bins, with each bin spanning 360
K degrees. Let the
center of the k-th bin be bk, we then represent an angle θ
as (k, ∆k), if θ fall into the k-th bin, where ∆k is the angle
residual from the center bk in the clockwise direction. Thus,
for each bin we regress to this local orientation ∆k.

As a result, our network architecture consists of an en-
coder and two sets of decoders. The encoder takes the
whole image as input and produces an H × W grid of
high-level descriptors via a convolutional network. The
decoders then use the feature descriptors to make junc-
tion predictions. Each junction is represented by pij =
xij, cij, {θijk, cθ
, where xij is the coordinates of
the junction center, cij ∈ [0, 1] is the conﬁdence score for
(cid:0)
the presence of a junction in the ij-th grid cell, θijk is the
angle for the branch in the k-th bin, and cijk is the con-
ﬁdence score for the bin. The two sets of decoders pre-
dict the junction center and the branches respectively. Each
FCN decoder is simply a convolutional layer followed by a
regressor, as shown in Fig. 3 top.

ijk}K

k=1

(cid:1)

Unlike local junctions, the junctions we aim to detect
each is formed by the intersection of two or more long line
segments (the branches). While the junction detection does
not explicitly rely on edge/line detection as an intermediate
step, the knowledge about the associated edges is indirectly
learned by enforcing the network to make correct detection
of the branches and their directions.

3.1.2 Loss Function
To guide the learning process towards the desired output,
our loss function consists of four modules. Given a set of
ground truth junctions P = {p1, . . . , pN } in an image, we

4629

locLc

conf Lb

conf Lc

conf +λb

write the loss function as follows:
L = λc
locLb
loc +λb
conf +λc
In the following, we explain each term in more detail.
Junction center conﬁdence loss Lc
conf . The junction cen-
ter conﬁdence decoder predicts a score ˆcij, indicating the
probability of a junction for each grid cell. Let cij be the
ground truth binary class label, we use the cross-entropy
loss:

loc. (1)

Lc

conf = −

E(ˆcij, cij).

H × W X
i,j
Junction center location loss Lc
loc. The junction center
location decoder predicts the relative position ˆxij of a junc-
tion for each grid cell. We compare the prediction with each
ground truth junction using the ℓ2 loss:

(2)

1

Lc

loc = −

kˆxf (n) − xf (n)k2
2,

(3)

1
N

N

X
n=1

where f (n) returns the index of the grid cell that the n-th
ground truth junction falls into, and xf (n) is the relative
position of the ground truth junction w.r.t. that cell center.
Junction branch conﬁdence loss Lb
conf . The junction
branch conﬁdence decoder predicts a score ˆcθ
ijk for each
bin in each grid cell, indicating the probability of a junction
branch in that bin. Similar to the junction center conﬁdence
loss above, we use the cross-entropy loss to compare the
predictions with the ground truth labels. The only differ-
ence is that we only consider those grid cells in which a
ground truth junction is present:
K

N

(4)

Lb

conf = −

E(ˆcθ

f (n),k, cθ

f (n),k).

X
n=1

X
k=1
Junction branch location loss Lb
loc. Similar to the junction
center location loss, we ﬁrst decide, for each ground truth
junction, the indices of the bins that its branches fall into,
denoted as g(r), r = 1, . . . , Rn, where Rn is the order of
pn. Then, we compare our predictions with the ground truth
using the ℓ2 loss:
N

Rn

1
N × K

Lb

loc = −

1
N

1
Rn

(cid:0)

X
n=1

X
r=1

kˆθf (n),g(r) − θf (n),g(r)k2

2(cid:1).

(5)

Implementation details. We construct our model to en-
code an image into 60×60 grid of 256-dimensional features.
Each cell in the grid is responsible for predicting if a junc-
tion is present in the corresponding image region. Our en-
coder is based on Google’s Inception-v2 model [43], which
extracts multi-scale features and is well-suited for our prob-
lem. For our problem, we only use the early layers in the
Inception network, i.e., the ﬁrst layer to “Mixed 3b”. Each
decoder consists of a 3 × 3 × 256 convolutional layer, fol-
lowed by a ReLU layer and a regressor. Note that the regres-
sor is conveniently implemented as 1 × 1 × d convolutional
layer, where d is the dimension of the output.

The default values for the weights in Eq. (1) are set to
loc = 0.1.

conf = 1, λc

conf = λb

the following: λc

loc = λb

We choose the number of bins K = 15. Our network is
trained from scratch with the Stochastic Gradient Descent
(SGD) method. The momentum parameter is set to 0.9, and
the batch size is set to 1. We follow the standard practice in
training deep neural networks to augment the data with im-
age domain operations including mirroring, ﬂipping upside-
down, and cropping. The initial learning rate is set to 0.01.
We decrease it by a multiple of 0.1 after every 100,000 iter-
ations. Convergence is reached at 300,000 iterations.

3.2. Line Detection

Next we design and train a convolutional neural network
(Fig. 3 bottom) to infer line information from RGB images.
The network predicts for each pixel p whether it falls on
a (long) line l. To suppress local edges, short lines, and
curves, the predicted value h(p) (of the heat map) at pixel
p is set to be the length of the line it belongs to. Given an
image with ground truth lines L, the target value for h(p) is
deﬁned to be:

(6)

(7)

h(p) =

(

d(l) p is on a line l in L,
0

p is not on any line in L,

where d(l) is the length of the line l. Let ˆh(p) be the esti-
mated heatmap value, then the loss function we try to mini-
mize the ℓ2 loss:

L =

kˆh(pij) − h(pij)k2
2.

i,j
X
where the sum is over all pixels of the image.
Implementation details. The network architecture is in-
spired by the Stacked Hourglass network [32]. It takes a
320 × 320 × 3 RGB image as input, extracts a 80 × 80 × 256
feature maps via three Pyramid Residual Modules (PRM),
see Fig. 3 bottom. The feature maps then go through ﬁve
stacked hourglass modules, followed by two fully convolu-
tional and ReLU layers (5 × 5 × 32 and 5 × 5 × 16) and
a 5 × 5 × 1 convolutional layer to output a 320 × 320 × 1
pixel-wise heat map. The detailed pyramid residual module
and stacked hourglass module can be found in [32].

During training, we adopt the Stochastic Gradient De-
scent (SGD) method. The momentum parameter is set to
0.9, and the batch size is set to 4. Again, we augment
the data with image domain operations including mirroring
and ﬂipping upside-down. The initial learning rate is set to
0.001. We decrease it by a multiple of 0.1 after 100 epochs.
Convergence is reached at 120 epochs.

Notice that we have used an Inception network for junc-
tion detection whereas an hourglass network for line detec-
tion. In junction detection, we are not interested in the entire
support of the line, hence the receptive ﬁeld of an Inception
network is adequate for such tasks. However, we ﬁnd that
for accurately detecting lines with large spatial support, the
Stacked Hourglass network works much better due to its
large (effective) receptive ﬁeld. In addition, our experiment

5630

also shows that above length-dependent ℓ2 loss is more ef-
fective than the cross-entropy cost often used in learning-
based edge detection.

3.3. Combine Junctions and Lines for Wireframe

The ﬁnal step of the system is to combine the results
from junction detection and line detection to generate a
wireframe W for the image, which, as mentioned before,
consists of a set of junction points P connected by a set of
line segments L.

Speciﬁcally, given a set of detected junctions {pi}N
i=1
and a line heat map h, we ﬁrst apply a threshold w to convert
h into a binary map M. Then, we construct the wireframe
based on the following rules and procedure:

1. The set P is initialized with the output from the junc-
tion detector. A pair of detected junctions p and q ∈ P
are connected by a line segment l = (p, q) if they are
on (or close to be on) each other’s branches, and we
add this segment l to L. If there are multiple detected
junctions on the same branch of a junction point p, we
only keep the shortest segment to avoid overlap.3

2. For any branch of a junction p that is not connected
to any other junction, we attempt to recover additional
line segment using M. We ﬁrst ﬁnd the farthest line
pixel qM (pixel p is a line pixel if M(p) = 1) that is
also on the ray starting at p along the branch. Then,
we ﬁnd all the intersection points {q1, . . . , qS} of line
segment (p, qM) with existing segments in L. Let
q0 = pi and qS+1 = qM, we calculate the line sup-
port ratio κ(qs−1, qs), s = {1, . . . , S, S + 1}, for each
segment. Here, κ is deﬁned as the ratio of the number
of line pixels to the total length of the segment. If κ
is above a threshold, say 0.6, we add the segment to L
and its endpoints to P .

Notice that both the sets P and L may have two sources
of candidates. For the junction set P , besides those di-
rectly detected by the junction detection, the line segments
could also produce new intersections or endpoints that were
missed by the junction detection. For the line segment set
L, it could come from branches of the detected junctions
and the line detection.

We leave more detailed description of the algorithm to
the supplementary material. Of course, there could be more
advanced ways to merge the detected junctions and line heat
map which we will explore in future work. Nevertheless,
from our experiments (see next section), we ﬁnd that the
results from junction detection and line detection are rather
complementary to each other and the above simple proce-
dure already produces rather decent results.

3Hence we are less interested in detecting a straight line with the
longest possible support, instead, we are interested in its incidence rela-
tionship with other lines and junctions.

4. Experiments

In this section, we conduct extensive experiments to
evaluate the quality of junctions and ﬁnal wireframes gen-
erated by our method, and compare it to the state-of-the-
art. All experiments are conducted on one NVIDIA Titan X
GPU device. In testing phase, our method runs at about two
frames per second, thus our method is potentially suitable
for applications which require real-time processing.

4.1. Datasets and Evaluation Metrics

For performance evaluation, we split our wireframe
dataset into a training set and a testing set. Among the 5,462
images in the dataset, 5,000 images are randomly selected
for training and validation, and the remaining 462 images
are used for testing. For junction detection (Section 4.2),
we compare the junctions detected by any method with the
ground truth junctions (Fig. 2, second row). For wireframe
construction (Section 4.3), we compare the line segments
detected by any method with the ground truth line segments
labeled by human subjects (Fig. 2, ﬁrst row).

For both junction detection and wireframe construc-
tion experiments, all methods are the evaluated quantita-
tively by means of the recall and precision as described
in [29, 25, 47]. In the context of junction detection, recall is
the fraction of true junctions that are detected, whereas pre-
cision is the fraction of junction detections that are indeed
true positives. In the context of wireframe construction, re-
call is the fraction of line segment pixels that are detected,
whereas precision is the fraction of line segment pixels that
are indeed true positives.

Speciﬁcally, let G denote the set of ground truth junc-
tions (or line segment pixels), and Q denote the set of junc-
tions (or line segment pixels) detected by any method, the
precision and recall are deﬁned as follows:

Precision

.
= |G ∩ Q|/|Q|, Recall

.
= |G ∩ Q|/|G|.

(8)

Note that, following the protocols of previous work [29, 25,
47], the particular measures of recall and precision allow
for some small tolerance in the localization of the junctions
(or line segment pixels). In this paper, we set the tolerance
to be 0.01 of the image diagonal.

4.2. Junction Detection Comparison

We compare our junction detection method with two
recent methods, namely Manhattan junction detection
(MJ) [35] and a contrario junction detection (ACJ) [47].
MJ [35]: This method detects Manhattan junctions formed
by line segments in three principal orthogonal directions
using a simple voting-based scheme. As the authors did
not release their code, we use our own implementation
of the method. Line segments are ﬁrst detected using
LSD [45], and then clustered using J-Linkage [44] to ob-
tain the vanishing points. Note that this method only ap-

6631

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

MJ
ACJ
Our Method

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

Figure 5. The precision-recall curves of different junction detec-
tion methods on our test dataset.

plies to scenes that satisfy the Manhattan world assump-
tion. For fair comparison, we only keep the images in
which three principal vanishing points are detected. An
important parameter in our implementation is the maxi-
mum distance dmax between a line segment and a point
p for that line segment to vote for p. We vary the value
dmax ∈ {10, 20, 30, 50, 100, 200, 300, 500} pixels.
ACJ [47]: This method relies on statistical modeling of im-
age gradients and an a contrario approach to detect junc-
tions. Speciﬁcally, meaningful junctions are detected as
those which are very unlikely under a null hypothesis H0,
which is deﬁned based on the distribution of gradients of
In the method, each candidate
arbitrary natural images.
junction is associated with a strength value depending on
the image gradients around it. Then, the candidate junc-
tion is validated with a threshold, which is derived by con-
trolling the number of false detections, ǫ, in an image fol-
lowing H0. For the experiments, we use the implemen-
tation provided by the authors of [47] and vary the value
ǫ ∈ {10−3, 10−2, 10−1, 1, 101, 102, 103}.
Performance comparison. Fig. 5 shows the precision-
recall curves of all methods on our new dataset. For our
method, we vary the junction conﬁdence threshold τ from
0.1 to 0.9. As one can see, our method outperforms the
other methods by a large margin. Fig. 7 compares qualita-
tively the results of all methods on our test data. Compared
to the other two methods, MJ tends to miss important junc-
tions due to the imperfect line segment detection results.
Moreover, since MJ relies on local image features, it no-
ticeably produces quite a few repetitive detections around
some junctions. By directly modeling the image gradients,
ACJ is able to ﬁnd most junctions on the scene structures.
However, as a local method, ACJ makes a lot of false pre-
dictions on textured regions (e.g., ﬂoor of the ﬁrst, sky of
the fourth image).
In contrast, our method is able to de-
tect most junctions intersected by salient lines, while min-
imizing the number of false detections. This is no surprise
because our supervised framework implicitly encodes high-
level structural and semantic information of the scene as it
learns from the labeled data provided by humans.

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

LSD
MCMLSD
Our Method

LSD
MCMLSD
Our Method

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall

Figure 6. The precision-recall curves of different line segment de-
tection methods. Left: on our test dataset. Right: on the York
Urban dataset [7].

4.3. Line Segment Detection Comparison

In this section, we compare the wireframe results of
our method with two state-of-the-art line segment detection
[45]
methods, namely the Line Segment Detector (LSD)
and the Markov Chain Marginal Line Segment Detector
(MCMLSD) [1]. We test and compare with these methods
on both our new dataset and the York Urban dataset [7] used
in the work of MCMLSD [1].
LSD [45]: This method is a linear-time line segment detec-
tor that requires no parameter tuning. It also uses an a con-
trario approach to control the number of false detections.
In this experiment, we use the code released by the authors4
and vary the threshold for − log(NFA) (NFA is the number
of false alarms) in 0.01 × {1.750, 1.751, 1.752, ..., 1.7519}.
MCMLSD [1]: This method proposes a two-stage algo-
rithm to ﬁnd line segments. In the ﬁrst stage, it uses the
probabilistic Hough transform to identify globally optimal
lines. In the second stage, it searches each of these lines for
their supports (segments) in the image, which can be mod-
eled as labeling hidden states in a linear Markov chain. In
this experiment, we use the code released by the authors.5
Be aware that authors of [1] have introduced a different
metric than ours that tends to penalize over-segmentation.
Hence our metric can be unfair to their method. Neverthe-
less, our metric is more appropriate for wireframe detection
as we prefer to interpret a long line as several segments be-
tween junctions if it intersects with other lines.
Performance comparison. Fig. 6 shows the precision-
recall curves of all methods on our dataset and the York
Urban dataset, respectively. As one can see, our method
outperforms the other methods by a signiﬁcant margin on
our dataset. The margin on the York Urban dataset is decent
but not so large. According to [1], the labeling of the York
Urban dataset is not as complete for salient line segments,
hence it is not entirely suitable for the wireframe detection
task here. Fig. 8 compares qualitatively the results of all
methods on our test data. Since the other two methods rely
on local measurements, they tend to produce many line seg-

4http://www.ipol.im/pub/art/2012/gjmr-lsd/
5http://www.elderlab.yorku.ca/resources/

7632

Figure 7. Junction detection results. First row: MJ (dmax = 20). Second row: ACJ (ǫ = 1). Third row: Our method (τ = 0.5).

Figure 8. Line/wireframe detection results. First row: LSD (-log(NFA) > 0.01 × 1.758). Second row: MCMLSD (conﬁdence top 100).
Third row: Our method (line heat map h(p) > 10). Fourth row: Ground truth.

ments on textured regions (e.g. curtain of the ﬁrst image)
which do not correspond to scene structures.

5. Conclusion

This paper has demonstrated the feasibility of parsing
wireframes in images of man-made environments. The pro-
posed method is based on combining junctions and lines
detected from respective neural networks trained on a new
large-scale dataset. Both quantitatively and qualitatively,
the results of our method approximately emulate those la-

belled by humans. The junctions and line segments in a
wireframe and their incidence relationships encode rich and
accurate large-scale geometry of the scene and shape of reg-
ular objects therein, in a highly compressive and efﬁcient
manner. Hence results of this work can signiﬁcantly facili-
tate and beneﬁt visual tasks such as feature correspondence,
3D reconstruction, vision-based mapping, localization, and
navigation in man-made environments.
Acknowledgement: The project is supported by NSFC
(NO. 61502304) and Program of Shanghai Subject Chief
Scientist (A type) (No. 15XD1502900).

8633

References

[1] E. J. Almazan, R. Tal, Y. Qian, and J. H. Elder. Mcmlsd: A
dynamic programming approach to line segment detection.
In CVPR, July 2017. 2, 7

[2] M. Brown, D. Windridge, and J. Guillemaut. A generalis-
able framework for saliency-based line segment detection.
Pattern Recognition, 48(12):3993–4011, 2015. 2

[3] M. B. Clowes. On seeing things. Artif. Intell., 2(1):79–116,

1971. 2

[4] J. M. Coughlan and A. L. Yuille. Manhattan world: Orien-
tation and outlier detection by bayesian inference. Neural
Computation, 15(5):1063–1088, 2003. 3

[5] S. Dasgupta, K. Fang, K. Chen, and S. Savarese. Delay:
Robust spatial layout estimation for cluttered indoor scenes.
In CVPR, pages 616–624, 2016. 3

[6] E. Delage, H. Lee, and A. Y. Ng. Automatic single-image
3D reconstructions of indoor manhattan world scenes.
In
International Symposium on Robotics Research, pages 305–
321, 2005. 1

[7] P. Denis, J. H. Elder, and F. J. Estrada. Efﬁcient edge-based
methods for estimating manhattan frames in urban imagery.
In ECCV, pages 197–210, 2008. 7

[8] P. Doll´ar and C. L. Zitnick. Structured forests for fast edge

detection. In ICCV, pages 1841–1848, 2013. 2

[9] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
from a single image using a multi-scale deep network.
In
NIPS, pages 2366–2374, 2014. 3

[10] A. Elqursh and A. M. Elgammal. Line-based relative pose

estimation. In CVPR, pages 3049–3056, 2011. 2, 3

[11] A. Flint, D. W. Murray, and I. Reid. Manhattan scene under-
standing using monocular, stereo, and 3D features. In ICCV,
pages 2228–2235, 2011. 1, 2

[12] D. F. Fouhey, A. Gupta, and M. Hebert. Data-driven 3d prim-
itives for single image understanding. In ICCV, pages 3392–
3399, 2013. 3

[13] D. F. Fouhey, A. Gupta, and M. Hebert. Unfolding an indoor

origami world. In ECCV, pages 687–702, 2014. 3

[14] Y. Furukawa, B. Curless, S. M. Seitz, and R. Szeliski.
Manhattan-world stereo. In CVPR, pages 1422–1429, 2009.
1

[15] Y. Furukawa and Y. Shinagawa. Accurate and robust line
segment extraction by analyzing distribution around peaks
in hough space. CVIU, 92(1):1–25, 2003. 2

[16] R. Guo, C. Zou, and D. Hoiem. Predicting complete 3d mod-
els of indoor scenes. CoRR, abs/1504.02437, 2015. 3
[17] O. Haines and A. Calway. Recognising planes in a single

image. IEEE TPAMI, 37(9):1849–1861, 2015. 3

[18] C. Harris and M. Stephens. A combined corner and edge de-
tector. In Proceedings of the Alvey Vision Conference, pages
1–6, 1988. 2

[19] D. Huffman. Impossible objects as nonsense sentences. Ma-

chine Intelligence, 6, 1971. 2

[20] A. Jain, C. Kurz, T. Thorm¨ahlen, and H. Seidel. Exploiting
global connectivity constraints for reconstruction of 3d line
segments from images. In CVPR, pages 1586–1593, 2010. 3

[21] D. C. Lee, M. Hebert, and T. Kanade. Geometric reasoning
for single image structure recovery. In CVPR, pages 2136–
2143, 2009. 1, 2, 3

[22] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. E. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In ECCV, 2016. 4

[23] X. Liu, Z. Cao, N. Gu, S. Nahavandi, C. Zhou, and M. Tan.
Intelligent line segment perception with cortex-like mech-
IEEE Trans. Systems, Man, and Cybernetics,
anisms.
45(12):1522–1534, 2015. 2

[24] X. Lu, J. Yao, K. Li, and L. Li. Cannylines: A parameter-free
line segment detector. In ICIP, pages 507–511, 2015. 2
[25] M. Maire, P. Arbelaez, C. C. Fowlkes, and J. Malik. Using
contours to detect and localize junctions in natural images.
In CVPR, 2008. 2, 6

[26] J. Malik. Interpreting line drawings of curved objects. IJCV,

1(1):73–103, 1987. 2

[27] A. Mallya and S. Lazebnik. Learning informative edge maps
for indoor scene layout prediction. In ICCV, pages 936–944,
2015. 3

[28] K. Maninis, J. Pont-Tuset, P. A. Arbel´aez, and L. J. V. Gool.
In ECCV, pages 580–

Convolutional oriented boundaries.
596, 2016. 2

[29] D. R. Martin, C. C. Fowlkes, and J. Malik. Learning to detect
natural image boundaries using local brightness, color, and
texture cues. IEEE TPAMI, 26(5):530–549, 2004. 6

[30] J. Matas, C. Galambos, and J. Kittler. Robust detection of
lines using the progressive probabilistic hough transform.
CVIU, 78(1):119–137, 2000. 2

[31] J. McDermott. Psychophysics with junctions in real images.

Perception, 33:1101–1127, 2004. 2

[32] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-
works for human pose estimation. In ECCV, pages 483–499,
2016. 5

[33] M. Nieto, C. Cuevas, L. Salgado, and N. N. Garc´ıa. Line
segment detection using weighted mean shift procedures on
a 2d slice sampling strategy. Pattern Anal. Appl., 14(2):149–
163, 2011. 2

[34] S. Ramalingam and M. Brand. Lifting 3D manhattan lines

from a single image. In ICCV, pages 497–504, 2013. 2, 3

[35] S. Ramalingam, J. K. Pillai, A. Jain, and Y. Taguchi. Manhat-
tan junction catalogue for spatial reasoning of indoor scenes.
In CVPR, pages 3065–3072, 2013. 1, 2, 3, 6

[36] J. Redmon, S. K. Divvala, R. B. Girshick, and A. Farhadi.
You only look once: Uniﬁed, real-time object detection. In
CVPR, pages 779–788, 2016. 4

[37] J. Redmon and A. Farhadi. YOLO9000: better, faster,

stronger. CoRR, abs/1612.08242, 2016. 3, 4

[38] S. Ren, K. He, R. B. Girshick, and J. Sun. Faster R-CNN:
towards real-time object detection with region proposal net-
works. In NIPS, pages 91–99, 2015. 3, 4

[39] Y. Ren, C. Chen, S. Li, and C. J. Kuo. A coarse-to-ﬁne indoor
layout estimation (CFILE) method. CoRR, abs/1607.00598,
2016. 3

[40] A. Saxena, S. H. Chung, and A. Y. Ng. 3-D depth recon-
struction from a single still image. IJCV, 76(1):53–69, 2008.
3

9634

[41] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,
and Y. LeCun. Overfeat: Integrated recognition, localiza-
tion and detection using convolutional networks. CoRR,
abs/1312.6229, 2013. 3, 4

[42] K. Sugihara. Mathematical structures of line drawings of
polyhedrons-toward man-machine communication by means
of line drawings. IEEE TPAMI, 4(5):458–469, 1982. 2
[43] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna.
Rethinking the inception architecture for computer vision. In
CVPR, pages 2818–2826, 2016. 5

[44] J.-P. Tardif. Non-iterative approach for fast and accurate van-
ishing point detection. In ICCV, pages 1250–1257, 2009. 6
[45] R. G. von Gioi, J. Jakubowicz, J. Morel, and G. Randall.
LSD: A fast line segment detector with a false detection con-
trol. IEEE TPAMI, 32(4):722–732, 2010. 2, 6, 7

[46] J. Wang, T. Fang, Q. Su, S. Zhu, J. Liu, S. Cai, C. Tai, and
L. Quan.
Image-based building regularization using struc-
tural linear features. IEEE TVCG, 22(6):1760–1772, 2016.
3

[47] G. Xia, J. Delon, and Y. Gousseau. Accurate junction
IJCV,

detection and characterization in natural images.
106(1):31–56, 2014. 2, 6, 7

[48] S. Xie and Z. Tu. Holistically-nested edge detection.

In

ICCV, pages 1395–1403, 2015. 2

[49] C. Xu, L. Zhang, L. Cheng, and R. Koch. Pose estimation
from line correspondences: A complete analysis and a series
of solutions. IEEE TPAMI, 39(6):1209–1222, 2017. 3
[50] Z. Xu, B. Shin, and R. Klette. Accurate and robust line seg-
ment extraction using minimum entropy with hough trans-
form. IEEE TIP, 24(3):813–822, 2015. 2

[51] H. Yang and H. Zhang. Efﬁcient 3D room shape recovery

from a single panorama. In CVPR, 2016. 2, 3

10635

