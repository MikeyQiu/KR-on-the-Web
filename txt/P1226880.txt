Modelling Interaction of Sentence Pair with Coupled-LSTMs

Pengfei Liu Xipeng Qiu∗ Xuanjing Huang
Shanghai Key Laboratory of Intelligent Information Processing, Fudan University
School of Computer Science, Fudan University
825 Zhangheng Road, Shanghai, China
@fudan.edu.cn
pﬂiu14,xpqiu,xjhuang
}

{

6
1
0
2
 
y
a
M
 
0
2
 
 
]
L
C
.
s
c
[
 
 
2
v
3
7
5
5
0
.
5
0
6
1
:
v
i
X
r
a

Abstract

Recently, there is rising interest in modelling the
interactions of two sentences with deep neural net-
works. However, most of the existing methods
encode two sequences with separate encoders, in
which a sentence is encoded with little or no in-
formation from the other sentence.
In this pa-
per, we propose a deep architecture to model
the strong interaction of sentence pair with two
coupled-LSTMs. Speciﬁcally, we introduce two
coupled ways to model the interdependences of two
LSTMs, coupling the local contextualized interac-
tions of two sentences. We then aggregate these
interactions and use a dynamic pooling to select
the most informative features. Experiments on two
very large datasets demonstrate the efﬁcacy of our
proposed architecture and its superiority to state-of-
the-art methods.

1 Introduction
Distributed representations of words or sentences have been
widely used in many natural language processing (NLP)
tasks, such as text classiﬁcation [Kalchbrenner et al., 2014],
question answering and machine translation [Sutskever et al.,
2014] and so on. Among these tasks, a common problem is
modelling the relevance/similarity of the sentence pair, which
is also called text semantic matching.

Recently, deep learning based models is rising a substantial
interest in text semantic matching and have achieved some
great progresses [Hu et al., 2014; Qiu and Huang, 2015; Wan
et al., 2016].

According to the phases of interaction between two sen-
tences, previous models can be classiﬁed into three cate-
gories.

Weak interaction Models Some early works focus on sen-
tence level interactions, such as ARC-I[Hu et al., 2014],
CNTN[Qiu and Huang, 2015] and so on. These models
ﬁrst encode two sequences with some basic (Neural Bag-
of-words, BOW) or advanced (RNN, CNN) components of
neural networks separately, and then compute the matching

∗Corresponding author.

score based on the distributed vectors of two sentences. In
this paradigm, two sentences have no interaction until arriv-
ing ﬁnal phase.

Semi-interaction Models Some improved methods focus
on utilizing multi-granularity representation (word, phrase
and sentence level), such as MultiGranCNN [Yin and
Sch¨utze, 2015] and Multi-Perspective CNN [He et al., 2015].
Another kind of models use soft attention mechanism to
obtain the representation of one sentence by depending on
representation of another sentence, such as ABCNN [Yin
et al., 2015], Attention LSTM[Rockt¨aschel et al., 2015;
Hermann et al., 2015]. These models can alleviate the weak
interaction problem, but are still insufﬁcient to model the con-
textualized interaction on the word as well as phrase level.

Strong Interaction Models These models directly build an
interaction space between two sentences and model the in-
teraction at different positions. ARC-II [Hu et al., 2014]
and MV-LSTM [Wan et al., 2016]. These models enable the
model to easily capture the difference between semantic ca-
pacity of two sentences.

In this paper, we propose a new deep neural network
architecture to model the strong interactions of two sen-
tences. Different with modelling two sentences with sepa-
rated LSTMs, we utilize two interdependent LSTMs, called
coupled-LSTMs, to fully affect each other at different time
steps. The output of coupled-LSTMs at each step depends on
both sentences. Speciﬁcally, we propose two interdependent
ways for the coupled-LSTMs: loosely coupled model (LC-
LSTMs) and tightly coupled model (TC-LSTMs). Similar to
bidirectional LSTM for single sentence [Schuster and Pali-
wal, 1997; Graves and Schmidhuber, 2005], there are four
directions can be used in coupled-LSTMs. To utilize all the
information of four directions of coupled-LSTMs, we aggre-
gate them and adopt a dynamic pooling strategy to automati-
cally select the most informative interaction signals. Finally,
we feed them into a fully connected layer, followed by an
output layer to compute the matching score.

The contributions of this paper can be summarized as fol-

lows.

1. Different with the architectures of using similarity ma-
trix, our proposed architecture directly model the strong
interactions of two sentences with coupled-LSTMs,
which can capture the useful local semantic relevances

of two sentences. Our architecture can also capture
the multiple granular interactions by several stacked
coupled-LSTMs layers.

2. Compared to the previous works on text matching, we
perform extensive empirical studies on two very large
datasets. The massive scale of the datasets allows us to
train a very deep neural networks. Experiment results
demonstrate that our proposed architecture is more ef-
fective than state-of-the-art methods.

2 Sentence Modelling with LSTM
Long short-term memory network (LSTM) [Hochreiter and
Schmidhuber, 1997] is a type of recurrent neural network
(RNN) [Elman, 1990], and speciﬁcally addresses the issue of
learning long-term dependencies. LSTM maintains a mem-
ory cell that updates and exposes its content only when
deemed necessary.

While there are numerous LSTM variants, here we use the
LSTM architecture used by [Jozefowicz et al., 2015], which
is similar to the architecture of [Graves, 2013] but without
peep-hole connections.

We deﬁne the LSTM units at each time step t to be a col-
lection of vectors in Rd: an input gate it, a forget gate ft, an
output gate ot, a memory cell ct and a hidden state ht. d is
the number of the LSTM units. The elements of the gating
vectors it, ft and ot are in [0, 1].

The LSTM is precisely speciﬁed as follows.

˜ct
ot
it
ft






tanh
σ
σ
σ






(cid:12)
(cid:12)

= 







ct = ˜ct
ht = ot

TA,b

xt
ht−1

,

(cid:21)

(cid:20)

it + ct−1
(cid:12)
tanh (ct) ,

ft,

(1)

(2)
(3)

where xt is the input at the current time step; TA,b is an afﬁne
transformation which depends on parameters of the network
A and b. σ denotes the logistic sigmoid function and
de-
notes elementwise multiplication. Intuitively, the forget gate
controls the amount of which each unit of the memory cell
is erased, the input gate controls how much each unit is up-
dated, and the output gate controls the exposure of the internal
memory state.

(cid:12)

The update of each LSTM unit can be written precisely as

follows

(ht, ct) = LSTM(ht−1, ct−1, xt).

(4)

Here, the function LSTM(
,
·

,

·

·

) is a shorthand for Eq. (1-3).

3 Coupled-LSTMs for Strong Sentence

Interaction

To deal with two sentences, one straightforward method is to
model them with two separate LSTMs. However, this method
is difﬁcult to model local interactions of two sentences. An
improved way is to introduce attention mechanism, which has

(a) Parallel LSTMs

(b) Attention LSTMs

(c) Loosely coupled-LSTMs

(d) Tightly coupled-LSTMs

Figure 1: Four different coupled-LSTMs.

been used in many tasks, such as machine translation [Bah-
danau et al., 2014] and question answering [Hermann et al.,
2015].

Inspired by the multi-dimensional recurrent neural net-
work [Graves et al., 2007; Graves and Schmidhuber, 2009;
Byeon et al., 2015] and grid LSTM [Kalchbrenner et al.,
2015] in computer vision community, we propose two models
to capture the interdependences between two parallel LSTMs,
called coupled-LSTMs (C-LSTMs).

· · ·

, ym, we let xi

To facilitate our models, we ﬁrstly give some deﬁni-
, xn and Y =
tions. Given two sequences X = x1, x2,
· · ·
Rd denote the embedded rep-
y1, y2,
resentation of the word xi. The standard LSTM have one
temporal dimension. When dealing with a sentence, LSTM
regards the position as time step. At position i of sen-
tence x1:n, the output hi reﬂects the meaning of subsequence
x0:i = x0,

, xi.

∈

To model the interaction of two sentences as early as pos-
sible, we deﬁne hi,j to represent the interaction of the subse-
quences x0:i and y0:j.

· · ·

Figure 1(c) and 1(d) illustrate our two propose models. For
intuitive comparison of weak interaction parallel LSTMs, we
also give parallel LSTMs and attention LSTMs in Figure 1(a)
and 1(b).

We describe our two proposed models as follows.

3.1 Loosely Coupled-LSTMs (LC-LSTMs)
To model the local contextual interactions of two sentences,
we enable two LSTMs to be interdependent at different posi-
tions. Inspired by Grid LSTM [Kalchbrenner et al., 2015] and
word-by-word attention LSTMs [Rockt¨aschel et al., 2015],
we propose a loosely coupling model for two interdependent
LSTMs.

More concretely, we refer to h(1)

i,j as the encoding of subse-
quence x0:i in the ﬁrst LSTM inﬂuenced by the output of the
second LSTM on subsequence y0:j. Meanwhile, h(2)
i,j is the

encoding of subsequence y0:j in the second LSTM inﬂuenced
by the output of the ﬁrst LSTM on subsequence x0:i

i,j and h(2)
h(1)
i,j are computed as
h(1)
i,j = LSTM1(H(1)
i,j = LSTM2(H(2)
h(2)

i−1, c(1)
j−1, c(2)

i−1,j, xi),

i,j−1, yj),

(5)

(6)

where

(8)

(7)

i−1,j],

i,j−1].

H(1)
H(2)

i−1,j, h(2)
i,j−1, h(2)

i−1 = [h(1)
j−1 = [h(1)
3.2 Tightly Coupled-LSTMs (TC-LSTMs)
The hidden states of LC-LSTMs are the combination of the
hidden states of two interdependent LSTMs, whose memory
cells are separated. Inspired by the conﬁguration of the multi-
dimensional LSTM [Byeon et al., 2015], we further conﬂate
both the hidden states and the memory cells of two LSTMs.
We assume that hi,j directly model the interaction of the sub-
sequences x0:i and y0:j, which depends on two previous in-
teraction hi−1,j and hi,j−1, where i, j are the positions in
sentence X and Y .

We deﬁne a tightly coupled-LSTMs units as follows.



= 



TA,b 

˜ci,j
oi,j
ii,j
f 1
i,j
f 2
i,j













tanh
σ
σ
σ
σ






ci,j = ˜ci,j

xi
yj
hi,j−1
hi−1,j

,










ii,j + [ci,j−1, ci−1,j]T




(9)

(10)

f 1
i,j
f 2
i,j(cid:21)
(cid:20)

(cid:12)
tanh (ci,j)

(cid:12)

hi,j = ot

(11)
where the gating units ii,j and oi,j determine which mem-
ory units are affected by the inputs through ˜ci,j, and which
memory cells are written to the hidden units hi,j. TA,b is an
afﬁne transformation which depends on parameters of the net-
work A and b. In contrast to the standard LSTM deﬁned over
time, each memory unit ci,j of a tightly coupled-LSTMs has
two preceding states ci,j−1 and ci−1,j and two corresponding
forget gates f 1

i,j.
3.3 Analysis of Two Proposed Models
Our two proposed coupled-LSTMs can be formulated as

i,j and f 2

where C-LSTMs can be either TC-LSTMs or LC-LSTMs.

The input consisted of two type of information at step (i, j) in
coupled-LSTMs: temporal dimension hi−1,j, hi,j−1, ci−1,j, ci,j−1
and depth dimension xi, yj. The difference between TC-LSTMs
and LC-LSTMs is the dependence of information from temporal and
depth dimension.

Interaction Between Temporal Dimensions The TC-
LSTMs model the interactions at position (i, j) by merging the inter-
nal memory ci−1,j ci,j−1 and hidden state hi−1,j hi,j−1 along row
and column dimensions. In contrast with TC-LSTMs, LC-LSTMs
ﬁrstly use two standard LSTMs in parallel, producing hidden states
h1
i,j along row and column dimensions respectively, which
are then merged together ﬂowing next step.

i,j and h2

Interaction Between Depth Dimension In TC-LSTMs, each
hidden state hi,j at higher layer receives a fusion of information
xi and yj, ﬂowed from lower layer. However, in LC-LSTMs, the
information xi and yj are accepted by two corresponding LSTMs
at the higher layer separately.

The two architectures have their own characteristics, TC-LSTMs
give more strong interactions among different dimensions while LC-
LSTMs ensures the two sequences interact closely without being
conﬂated using two separated LSTMs.

Comparison of LC-LSTMs and word-by-word Attention
LSTMs
The main idea of attention LSTMs is that the representation of sen-
tence X is obtained dynamically based on the alignment degree be-
tween the words in sentence X and Y, which is asymmetric unidirec-
tional encoding. Nevertheless, in LC-LSTM, each hidden state of
each step is obtained with the consideration of interaction between
two sequences with symmetrical encoding fashion.

4 End-to-End Architecture for Sentence

Matching

In this section, we present an end-to-end deep architecture for
matching two sentences, as shown in Figure 2.

4.1 Embedding Layer
To model the sentences with neural model, we ﬁrstly need trans-
form the one-hot representation of word into the distributed repre-
sentation. All words of two sequences X = x1, x2, · · · , xn and
Y = y1, y2, · · · , ym will be mapped into low dimensional vector
representations, which are taken as input of the network.

4.2 Stacked Coupled-LSTMs Layers
After the embedding layer, we use our proposed coupled-LSTMs
to capture the strong interactions between two sentences. A basic
block consists of ﬁve layers. We ﬁrstly use four directional coupled-
LSTMs to model the local interactions with different information
ﬂows. And then we sum the outputs of these LSTMs by aggregation
layer. To increase the learning capabilities of the coupled-LSTMs,
we stack the basic block on top of each other.

Four Directional Coupled-LSTMs Layers
The C-LSTMs is deﬁned along a certain pre-deﬁned direction, we
can extend them to access to the surrounding context in all direc-
tions. Similar to bi-directional LSTM, there are four directions in
coupled-LSTMs.

Aggregation Layer
The aggregation layer sums the outputs of four directional coupled-
LSTMs into a vector.

ˆhi,j =

hd

i,j,

4
(cid:88)

d=1

(13)

where the superscript t of hi,j denotes the different directions.

(hi,j, ci,j) = C-LSTMs(hi−1,j, hi,j−1, ci−1,j, ci,j−1, xi, yj),

i,j) = C-LSTMs(hi−1,j, hi,j−1, ci−1,j, ci,j−1, xi, yj),

(12)

(h1
(h2
(h3
(h4

i,j, c1
i,j, c2
i,j, c3
i,j, c4

i,j) = C-LSTMs(hi−1,j, hi,j+1, ci−1,j, ci,j+1, xi, yj),

i,j) = C-LSTMs(hi+1,j, hi,j+1, ci+1,j, ci,j+1, xi, yj),

i,j) = C-LSTMs(hi+1,j, hi,j−1, ci+1,j, ci,j−1, xi, yj).

Figure 2: Architecture of coupled-LSTMs for sentence-pair encoding. Inputs are fed to four C-LSTMs followed by an aggre-
gation layer. Blue cuboids represent different contextual information from four directions.

Stacking C-LSTMs Blocks
To increase the capabilities of network of learning multiple granular-
ities of interactions, we stack several blocks (four C-LSTMs layers
and one aggregation layer) to form deep architectures.

4.3 Pooling Layer
The output of stacked coupled-LSTMs layers is a tensor H ∈
Rn×m×d, where n and m are the lengths of sentences, and d is the
number of hidden neurons. We apply dynamic pooling to automat-
ically extract Rp×q subsampling matrix in each slice Hi ∈ Rn×m,
similar to [Socher et al., 2011].

More formally, for each slice matrix Hi, we partition the rows
and columns of Hi into p × q roughly equal grids. These grid are
non-overlapping. Then we select the maximum value within each
grid. Since each slice Hi consists of the hidden states of one neuron
at different positions, the pooling operation can be regarded as the
most informative interactions captured by the neuron.

Thus, we get a p × q × d tensor, which is further reshaped into a

vector.

4.4 Fully-Connected Layer
The vector obtained by pooling layer is fed into a full connection
layer to obtain a ﬁnal more abstractive representation.

4.5 Output Layer
The output layer depends on the types of the tasks, we choose the
corresponding form of output layer. There are two popular types of
text matching tasks in NLP. One is ranking task, such as community
question answering. Another is classiﬁcation task, such as textual
entailment.

1. For ranking task, the output is a scalar matching score, which
is obtained by a linear transformation after the last fully-
connected layer.

2. For classiﬁcation task, the outputs are the probabilities of the
different classes, which is computed by a softmax function af-
ter the last fully-connected layer.

5 Training
Our proposed architecture can deal with different sentence matching
tasks. The loss functions varies with different tasks.

Max-Margin Loss for Ranking Task Given a positive sen-
tence pair (X, Y ) and its corresponding negative pair (X, ˆY ). The
matching score s(X, Y ) should be larger than s(X, ˆY ).

For this task, we use the contrastive max-margin criterion [Bordes
et al., 2013; Socher et al., 2013] to train our models on matching
task.

MQA
100
50

Embedding size
Hidden layer size
Initial learning rate 0.05
5E
Regularization
−
Pooling (p, q)
(2,1)

5

RTE
100
50
0.005
1E
5
−
(1,1)

Table 1: Hyper-parameters for our model on two tasks.

The ranking-based loss is deﬁned as

L(X, Y, ˆY ) = max(0, 1 − s(X, Y ) + s(X, ˆY )).

(14)

where s(X, Y ) is predicted matching score for (X, Y ).

Cross-entropy Loss for Classiﬁcation Task Given a sen-
tence pair (X, Y ) and its label l. The output ˆl of neural network
is the probabilities of the different classes. The parameters of the
network are trained to minimise the cross-entropy of the predicted
and true label distributions.

L(X, Y ; l,ˆl) = −

lj log(ˆlj),

(15)

C
(cid:88)

j=1

where l is one-hot representation of the ground-truth label l; ˆl is
predicted probabilities of labels; C is the class number.

To minimize the objective, we use stochastic gradient descent
with the diagonal variant of AdaGrad [Duchi et al., 2011]. To pre-
vent exploding gradients, we perform gradient clipping by scaling
the gradient when the norm exceeds a threshold [Graves, 2013].

6 Experiment
In this section, we investigate the empirical performances of our pro-
posed model on two different text matching tasks: classiﬁcation task
(recognizing textual entailment) and ranking task (matching of ques-
tion and answer).

6.1 Hyperparameters and Training
The word embeddings for all of the models are initialized with the
100d GloVe vectors (840B token version, [Pennington et al., 2014])
and ﬁne-tuned during training to improve the performance. The
other parameters are initialized by randomly sampling from uniform
distribution in [−0.1, 0.1].

For each task, we take the hyperparameters which achieve the best
performance on the development set via an small grid search over
combinations of the initial learning rate [0.05, 0.0005, 0.0001], l2
regularization [0.0, 5E−5, 1E−5, 1E−6] and the threshold value

Model
NBOW
single LSTM
[Rockt¨aschel et al., 2015]
parallel LSTMs
[Bowman et al., 2015]
Attention LSTM
[Rockt¨aschel et al., 2015]
Attention(w-by-w) LSTM
[Rockt¨aschel et al., 2015]
LC-LSTMs (Single Direction)
LC-LSTMs
four stacked LC-LSTMs
TC-LSTMs (Single Direction)
TC-LSTMs
four stacked TC-LSTMs

k
100

100

|θ|M
80K

Train
77.9

111K

83.7

Test
75.1

80.9

100

221K

84.8

77.6

100

252K

83.2

82.3

100

252K

50
50
50
50
50
50

45K
45K
135K
77.5K
77.5K
190K

83.7

80.8
81.5
85.0
81.4
82.2
86.7

83.5

80.5
80.9
84.3
80.1
81.6
85.1

Table 2: Results on SNLI corpus.

of gradient norm [5, 10, 100]. The ﬁnal hyper-parameters are set as
Table 1.

6.2 Competitor Methods

• Neural bag-of-words (NBOW): Each sequence as the sum of
the embeddings of the words it contains, then they are concate-
nated and fed to a MLP.

• Single LSTM: A single LSTM to encode the two sequences,

which is used in [Rockt¨aschel et al., 2015].

• Parallel LSTMs: Two sequences are encoded by two LSTMs

separately, then they are concatenated and fed to a MLP.

• Attention LSTMs: An attentive LSTM to encode two sen-
tences into a semantic space, which used in [Rockt¨aschel et
al., 2015].

• Word-by-word Attention LSTMs: An improvement of atten-
tion LSTM by introducing word-by-word attention mecha-
nism, which used in [Rockt¨aschel et al., 2015].

6.3 Experiment-I: Recognizing Textual Entailment
Recognizing textual entailment (RTE) is a task to determine the se-
mantic relationship between two sentences. We use the Stanford
Natural Language Inference Corpus (SNLI) [Bowman et al., 2015].
This corpus contains 570K sentence pairs, and all of the sentences
and labels stem from human annotators. SNLI is two orders of mag-
nitude larger than all other existing RTE corpora. Therefore, the
massive scale of SNLI allows us to train powerful neural networks
such as our proposed architecture in this paper.

Results
Table 2 shows the evaluation results on SNLI. The 3rd column of the
table gives the number of parameters of different models without the
word embeddings.

Our proposed two C-LSTMs models with four stacked blocks
outperform all the competitor models, which indicates that our thin-
ner and deeper network does work effectively.

Besides, we can see both LC-LSTMs and TC-LSTMs beneﬁt
from multi-directional layer, while the latter obtains more gains than
the former. We attribute this discrepancy between two models to
their different mechanisms of controlling the information ﬂow from
depth dimension.

Compared with attention LSTMs, our two models achieve com-
parable results to them using much fewer parameters (nearly 1/5).

(a) 3rd neuron

(b) 17th neuron

Figure 3: Illustration of two interpretable neurons and some
word-pairs capture by these neurons. The darker patches de-
note the corresponding activations are higher.

By stacking C-LSTMs, the performance of them are improved sig-
niﬁcantly, and the four stacked TC-LSTMs achieve 85.1% accuracy
on this dataset.

Moreover, we can see TC-LSTMs achieve better performance
than LC-LSTMs on this task, which need ﬁne-grained reasoning
over pairs of words as well as phrases.

Understanding Behaviors of Neurons in C-LSTMs
To get an intuitive understanding of how the C-LSTMs work on this
problem, we examined the neuron activations in the last aggregation
layer while evaluating the test set using TC-LSTMs. We ﬁnd that
some cells are bound to certain roles.

Let hi,j,k denotes the activation of the k-th neuron at the position
of (i, j), where i ∈ {1, . . . , n} and j ∈ {1, . . . , m}. By visualizing
the hidden state hi,j,k and analyzing the maximum activation, we
can ﬁnd that there exist multiple interpretable neurons. For exam-
ple, when some contextualized local perspectives are semantically
related at point (i, j) of the sentence pair, the activation value of
hidden neuron hi,j,k tend to be maximum, meaning that the model
could capture some reasoning patterns.

Figure 3 illustrates this phenomenon.

In Figure 3(a), a neu-
ron shows its ability to monitor the local contextual interactions
about color. The activation in the patch, including the word pair
“(red, green)”, is much higher than others. This is informa-
tive pattern for the relation prediction of these two sentences, whose
ground truth is contradiction. An interesting thing is there are two
words describing color in the sentence “ A person in a red
shirt and black pants hunched over.”. Our model
ignores the useless word “black”, which indicates that this neu-
ron selectively captures pattern by contextual understanding, not just
word level interaction.

In Figure 3(b), another neuron shows that it can capture the
local contextual interactions, such as “(walking down the
street, outside)”. These patterns can be easily captured by
pooling layer and provide a strong support for the ﬁnal prediction.

Table 3 illustrates multiple interpretable neurons and some rep-
resentative word or phrase pairs which can activate these neurons.
These cases show that our models can capture contextual interac-
tions beyond word level.

Error Analysis
Although our models C-LSTMs are more sensitive to the dis-
crepancy of the semantic capacity between two sentences, some

Index of Cell Word or Phrase Pairs

3-th
9-th
17-th
25-th

(in a pool, swimming), (near a fountain, next to the ocean), (street, outside)
(doing a skateboard, skateboarding), (sidewalk with, inside), (standing, seated)
(blue jacket, blue jacket), (wearing black, wearing white), (green uniform, red uniform)
(a man, two other men), (a man, two girls), (an old woman, two people)

Table 3: Multiple interpretable neurons and the word-pairs/phrase-pairs captured by these neurons.

Model
Random Guess
NBOW
single LSTM
parallel LSTMs
Attention LSTMs
LC-LSTMs (Single Direction)
LC-LSTMs
three stacked LC-LSTMs
TC-LSTMs (Single Direction)
TC-LSTMs
three stacked TC-LSTMs

k
-
50
50
50
50
50
50
50
50
50
50

P@1(5)
20.0
63.9
68.2
66.9
73.5
75.4
76.1
78.5
74.3
74.9
77.0

P@1(10)
10.0
47.6
53.9
52.1
62.0
63.0
64.1
66.2
62.4
62.9
65.3

Table 4: Results on Yahoo question-answer pairs dataset.

semantic mistakes at the phrasal level still exist. For example,
our models failed to capture the key informative pattern when
predicting the entailment sentence pair “A girl takes off
her shoes and eats blue cotton candy/The girl
is eating while barefoot.”

Besides, despite the large size of the training corpus, it’s still very
different to solve some cases, which depend on the combination
of the world knowledge and context-sensitive inferences. For ex-
ample, given an entailment pair “a man grabs his crotch
during a political demonstration/The man is
making a crude gesture”, all models predict “neutral”.
This analysis suggests that some architectural improvements or
external world knowledge are necessary to eliminate all errors
instead of simply scaling up the basic model.

6.4 Experiment-II: Matching Question and

Answer

Matching question answering (MQA) is a typical task for semantic
matching. Given a question, we need select a correct answer from
some candidate answers.

In this paper, we use the dataset collected from Yahoo! Answers
with the getByCategory function provided in Yahoo! Answers API,
which produces 963, 072 questions and corresponding best answers.
We then select the pairs in which the length of questions and answers
are both in the interval [4, 30], thus obtaining 220, 000 question an-
swer pairs to form the positive pairs.

For negative pairs, we ﬁrst use each question’s best answer as a
query to retrieval top 1, 000 results from the whole answer set with
Lucene, where 4 or 9 answers will be selected randomly to construct
the negative pairs.

The whole dataset is divided into training, validation and testing
data with proportion 20 : 1 : 1. Moreover, we give two test settings:
selecting the best answer from 5 and 10 candidates respectively.

Results
Results of MQA are shown in the Table 4. For our models, due
to stacking block more than three layers can not make signiﬁcant
improvements on this task, we just use three stacked C-LSTMs.

By analyzing the evaluation results of question-answer matching
in table 4, we can see strong interaction models (attention LSTMs,
our C-LSTMs) consistently outperform the weak interaction models
(NBOW, parallel LSTMs) with a large margin, which suggests the
importance of modelling strong interaction of two sentences.

Our proposed two C-LSTMs surpass the competitor methods
and C-LSTMs augmented with multi-directions layers and multiple
stacked blocks fully utilize multiple levels of abstraction to directly
boost the performance.

Additionally, LC-LSTMs is superior to TC-LSTMs. The reason
may be that MQA is a relative simple task, which requires less rea-
soning abilities, compared with RTE task. Moreover, the parameters
of LC-LSTMs are less than TC-LSTMs, which ensures the former
can avoid suffering from overﬁtting on a relatively smaller corpus.

7 Related Work

Our architecture for sentence pair encoding can be regarded as
strong interaction models, which have been explored in previous
models.

An intuitive paradigm is to compute similarities between all the
words or phrases of the two sentences. Socher et al. [2011] ﬁrstly
used this paradigm for paraphrase detection. The representations
of words or phrases are learned based on recursive autoencoders.
Wan et al. [2016] used LSTM to enhance the positional contextual
interactions of the words or phrases between two sentences. The
input of LSTM for one sentence does not involve another sentence.
A major limitation of this paradigm is the interaction of two sen-
tence is captured by a pre-deﬁned similarity measure. Thus, it is
not easy to increase the depth of the network. Compared with this
paradigm, we can stack our C-LSTMs to model multiple-granularity
interactions of two sentences.

Rockt¨aschel et al. [2015] used two LSTMs equipped with atten-
tion mechanism to capture the iteration between two sentences. This
architecture is asymmetrical for two sentences, where the obtained
ﬁnal representation is sensitive to the two sentences’ order.

Compared with the attentive LSTM, our proposed C-LSTMs are
symmetrical and model the local contextual interaction of two se-
quences directly.

8 Conclusion and Future Work

In this paper, we propose an end-to-end deep architecture to capture
the strong interaction information of sentence pair. Experiments on
two large scale text matching tasks demonstrate the efﬁcacy of our
proposed model and its superiority to competitor models. Besides,
our visualization analysis revealed that multiple interpretable neu-
rons in our proposed models can capture the contextual interactions
of the words or phrases.

In future work, we would like to incorporate some gating strate-
gies into the depth dimension of our proposed models, like highway
or residual network, to enhance the interactions between depth and
other dimensions thus training more deep and powerful neural net-
works.

[Kalchbrenner et al., 2014] Nal Kalchbrenner, Edward Grefen-
stette, and Phil Blunsom. A convolutional neural network for
modelling sentences. In Proceedings of ACL, 2014.

[Kalchbrenner et al., 2015] Nal Kalchbrenner, Ivo Danihelka, and
Alex Graves. Grid long short-term memory. arXiv preprint
arXiv:1507.01526, 2015.

[Pennington et al., 2014] Jeffrey Pennington, Richard Socher, and
Christopher D Manning. Glove: Global vectors for word rep-
resentation. Proceedings of the Empiricial Methods in Natural
Language Processing (EMNLP 2014), 12:1532–1543, 2014.
[Qiu and Huang, 2015] Xipeng Qiu and Xuanjing Huang. Convo-
lutional neural tensor network architecture for community-based
question answering. In Proceedings of International Joint Con-
ference on Artiﬁcial Intelligence, 2015.

[Rockt¨aschel et al., 2015] Tim Rockt¨aschel, Edward Grefenstette,
Karl Moritz Hermann, Tom´aˇs Koˇcisk`y, and Phil Blunsom. Rea-
soning about entailment with neural attention. arXiv preprint
arXiv:1509.06664, 2015.

[Schuster and Paliwal, 1997] Mike Schuster and Kuldip K Paliwal.
Bidirectional recurrent neural networks. Signal Processing, IEEE
Transactions on, 45(11):2673–2681, 1997.

[Socher et al., 2011] Richard Socher, Eric H Huang, Jeffrey Pen-
nin, Christopher D Manning, and Andrew Y Ng. Dynamic pool-
ing and unfolding recursive autoencoders for paraphrase detec-
In Advances in Neural Information Processing Systems,
tion.
2011.

[Socher et al., 2013] Richard Socher, Danqi Chen, Christopher D
Manning, and Andrew Ng. Reasoning with neural tensor net-
In Advances in Neural
works for knowledge base completion.
Information Processing Systems, pages 926–934, 2013.
[Sutskever et al., 2014] Ilya Sutskever, Oriol Vinyals,

and
Sequence to sequence learning with neural
In Advances in Neural Information Processing

Quoc VV Le.
networks.
Systems, pages 3104–3112, 2014.

[Wan et al., 2016] Shengxian Wan, Yanyan Lan, Jiafeng Guo, Jun
Xu, Liang Pang, and Xueqi Cheng. A deep architecture for se-
mantic matching with multiple positional sentence representa-
tions. In AAAI, 2016.

[Yin and Sch¨utze, 2015] Wenpeng Yin and Hinrich Sch¨utze. Con-
volutional neural network for paraphrase identiﬁcation. In Pro-
ceedings of the 2015 Conference of the North American Chapter
of the Association for Computational Linguistics: Human Lan-
guage Technologies, pages 901–911, 2015.

[Yin et al., 2015] Wenpeng Yin, Hinrich Sch¨utze, Bing Xiang,
Abcnn: Attention-based convolutional
arXiv preprint

and Bowen Zhou.
neural network for modeling sentence pairs.
arXiv:1512.05193, 2015.

References
[Bahdanau et al., 2014] D. Bahdanau, K. Cho, and Y. Bengio. Neu-
ral machine translation by jointly learning to align and translate.
ArXiv e-prints, September 2014.

[Bordes et al., 2013] Antoine Bordes, Nicolas Usunier, Alberto
Garcia-Duran, Jason Weston, and Oksana Yakhnenko. Trans-
lating embeddings for modeling multi-relational data. In NIPS,
2013.

[Bowman et al., 2015] Samuel R. Bowman, Gabor Angeli, Christo-
pher Potts, and Christopher D. Manning. A large annotated cor-
In Proceedings of
pus for learning natural language inference.
the 2015 Conference on Empirical Methods in Natural Language
Processing, 2015.

[Byeon et al., 2015] Wonmin Byeon, Thomas M Breuel, Federico
Raue, and Marcus Liwicki. Scene labeling with lstm recur-
In Proceedings of the IEEE Conference
rent neural networks.
on Computer Vision and Pattern Recognition, pages 3547–3555,
2015.

[Duchi et al., 2011] John Duchi, Elad Hazan, and Yoram Singer.
Adaptive subgradient methods for online learning and stochas-
tic optimization. The Journal of Machine Learning Research,
12:2121–2159, 2011.

[Elman, 1990] Jeffrey L Elman. Finding structure in time. Cogni-

tive science, 14(2):179–211, 1990.

[Graves and Schmidhuber, 2005] Alex Graves and J¨urgen Schmid-
huber.
Framewise phoneme classiﬁcation with bidirectional
lstm and other neural network architectures. Neural Networks,
18(5):602–610, 2005.

[Graves and Schmidhuber, 2009] Alex Graves and J¨urgen Schmid-
huber. Ofﬂine handwriting recognition with multidimensional
In Advances in Neural Information
recurrent neural networks.
Processing Systems, pages 545–552, 2009.

[Graves et al., 2007] Alex Graves, Santiago Fern´andez, and J¨urgen
Schmidhuber. Multi-dimensional recurrent neural networks.
In Artiﬁcial Neural Networks–ICANN 2007, pages 549–558.
Springer, 2007.

[Graves, 2013] Alex Graves. Generating sequences with recurrent

neural networks. arXiv preprint arXiv:1308.0850, 2013.

[He et al., 2015] Hua He, Kevin Gimpel, and Jimmy Lin. Multi-
perspective sentence similarity modeling with convolutional neu-
ral networks. In Proceedings of the 2015 Conference on Empiri-
cal Methods in Natural Language Processing, pages 1576–1586,
2015.

[Hermann et al., 2015] Karl Moritz Hermann, Tomas Kocisky, Ed-
ward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Suleyman,
and Phil Blunsom. Teaching machines to read and comprehend.
In Advances in Neural Information Processing Systems, pages
1684–1692, 2015.

[Hochreiter and Schmidhuber, 1997] Sepp Hochreiter and J¨urgen
Schmidhuber. Long short-term memory. Neural computation,
9(8):1735–1780, 1997.

[Hu et al., 2014] Baotian Hu, Zhengdong Lu, Hang Li, and Qingcai
Chen. Convolutional neural network architectures for matching
natural language sentences. In Advances in Neural Information
Processing Systems, 2014.

[Jozefowicz et al., 2015] Rafal Jozefowicz, Wojciech Zaremba,
and Ilya Sutskever. An empirical exploration of recurrent net-
In Proceedings of The 32nd International
work architectures.
Conference on Machine Learning, 2015.

