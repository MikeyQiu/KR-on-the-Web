GCN-LASE: Towards Adequately Incorporating Link Attributes in Graph
Convolutional Networks ∗

Ziyao Li1 , Liang Zhang1 and Guojie Song2†
1Yuanpei College, Peking University, China
2Key Laboratory of Machine Perception, Ministry of Education, Peking University, China
{leeeezy, zl505, gjsong}@pku.edu.cn

9
1
0
2
 
y
a
M
 
0
3
 
 
]

G
L
.
s
c
[
 
 
2
v
7
1
8
9
0
.
2
0
9
1
:
v
i
X
r
a

Abstract

Graph Convolutional Networks
(GCNs) have
proved to be a most powerful architecture in ag-
gregating local neighborhood information for in-
dividual graph nodes. Low-rank proximities and
node features are successfully leveraged in exist-
ing GCNs, however, attributes that graph links may
carry are commonly ignored, as almost all of these
models simplify graph links into binary or scalar
values describing node connectedness. In our pa-
per instead, links are reverted to hypostatic rela-
tionships between entities with descriptional at-
tributes. We propose GCN-LASE (GCN with Link
Attributes and Sampling Estimation), a novel GCN
model taking both node and link attributes as in-
puts. To adequately captures the interactions be-
tween link and node attributes, their tensor prod-
uct is used as neighbor features, based on which
we deﬁne several graph kernels and further de-
velop according architectures for LASE. Besides,
to accelerate the training process, the sum of fea-
tures in entire neighborhoods are estimated through
Monte Carlo method, with novel sampling strate-
gies designed for LASE to minimize the estimation
variance. Our experiments show that LASE outper-
forms strong baselines over various graph datasets,
and further experiments corroborate the informa-
tiveness of link attributes and our model’s ability
of adequately leveraging them.

1 Introduction
After several attempts and modiﬁcations ([Bruna et al., 2014]
[Niepert et al., 2016] [Kipf and Welling, 2016] [Tao et al.,
2017] [Jie et al., 2018]), Graph Convolutional Networks
(GCNs) 1 are rapidly gaining popularity due to its excel-

∗This work was supported by the National Natural Science Foun-

dation of China (Grant No. 61876006 and No. 61572041).

†Corresponding author.
1Although some papers do not explicitly use the term convolu-
tion, such as [Tao et al., 2017] and [Hamilton et al., 2017], a similar
idea of aggregating features in a node’s neighborhood can be seen in
the models. Therefore, we categorize all similar work into the class
of graph convolutional networks.

lent performance in aggregating neighborhood information
for individual graph nodes. Although low-rank proximities
and node features are successfully leveraged through the con-
volutional layers, the attributes that graph links may carry
are generally ignored in GCNs. In almost all existing GCNs,
graph links are regarded as indicators of proximities between
nodes. These proximities are only used to identify neighbor-
ships (and their inﬂuences if weighted) in the local neighbor-
hoods.

However, in real-world scenarios, a link between a pair of
nodes carries a lot more information than a simple indicator
of neighborship. It represents a hypostatic relationship be-
tween two entities, usually with concrete attributes. For ex-
ample, two connected people in a social network may have
different relationships including family members, colleagues
and alumni, and thus their communication patterns and con-
tents may vary; a link in a business network represents a trans-
action between two companies, and the properties of such
transactions are tremendously informative. Therefore, revis-
iting these link attributes, which are generally ignored in cur-
rent GCNs, allows us to recover the exact relationships be-
tween nodes.

While one can leverage link attributes in GCNs with tricks,
such as concatenating them to neighbor node attributes, these
implementations cannot adequately captures the interactions
between the attributes 2. To the best of our knowledge, there
is no previous work focusing on incorporating link attributes
into GCNs. We propose GCN-LASE (Graph Convolutional
Network with Link Attributes and Sampling Estimation)
as an attempt. LASE is an extension of GCN, which also
learns a function that maps a target node to its hidden rep-
resentation considering the local neighborhood features and
structures, but including both link and neighbor node at-
tributes. The aggregated features are then used to conduct
downstream tasks.

To leverage the link and node attributes as well as the in-
teractions in between, we adopt their tensor products as the
fully associated neighbor features, based on which a neigh-
bor kernel is developed using the inner products of tensors.
We further derive corresponding graph kernels and ﬁnally the
neural architectures following a similar route introduced in
[Tao et al., 2017]. An intuitive understanding of LASE is then

2See Section 3 for detailed introduction.

Figure 1: Different types of graphs that LASE can deal with: a) commodity network: an example of graphs with heterogenous links; b) contact
network: an example of temporal graph; c) graph with both node and link attributes. By arranging link weights from different perspectives or
time-stamps into vectors, it is easy to turn a) b) into c).

demonstrated, by modularizing it into a gate, an ampliﬁer,
and an aggregator. Meanwhile, we adopt the Monte Carlo
method to quickly estimate the sum of features in neighbor-
hoods. We also introduce a novel sampling setup for LASE to
reduce the estimation variance.

Recovering more information is not the only beneﬁt LASE
brings about–it also enlarges the expressive abilities of graph
structures that GCNs can handle. At lease two other types of
graph-structured data can be handled with LASE: i) Graphs
with heterogenous links, where link weights from different
perspectives can be arranged into vectors and used as at-
tributes; ii) Dynamic or temporal graphs, where link weights
from different time-stamps can be stacked together and used
as attributes. See Figure 1 for detailed examples. We vali-
date our approach on four datasets across different domains,
and further design additional experiments in order to demon-
strate the informativeness of link attributes and the effect of
our sampling strategy.

2 Related Work
Our method builds upon previous work of machine learning
on graph data, including graph convolutional networks, graph
kernels and node representation learning.

Graph convolutional networks. The past few years have
seen plenty of works focusing on implementing deep archi-
tectures over graphs ([Bruna et al., 2014] [Henaff et al., 2015]
[Kipf and Welling, 2016] [Wang et al., 2016] [Niepert et
al., 2016] [Hamilton et al., 2017] [Tao et al., 2017]), among
which the convolutional networks seem to be the most appeal-
ing. There are mainly two types of convolutional networks
existing, one learning features for entire graphs ([Tao et al.,
2017] [Niepert et al., 2016]), the other for individual nodes
([Kipf and Welling, 2016] [Hamilton et al., 2017]). Both
methods interpret the concept of convolution as merging node
features in local neighborhoods. Meanwhile, as early GCNs
([Kipf and Welling, 2016]) does not support mini-batch train-
ing, modiﬁcations towards better efﬁciency emerge ([Hamil-
ton et al., 2017] [Jie et al., 2018] [Huang et al., 2018]), in
which the Monte Carlo method is generally used to estimate

neighborhood representations through a controllable size of
nodes. In our paper, a different sampling implementation is
adopted, which makes a tradeoff between variance and efﬁ-
ciency by controlling the interval of calculating the optimal
sampling probabilities.
Graph kernels. Kernel methods [Sch¨olkopf and Smola,
2002] have long been an important class of machine learn-
ing techniques, while it remains challenging to deﬁne effec-
tive and convenient kernels for graphs. Existing graph ker-
nels ([G¨artner et al., 2003] [Vishwanathan et al., 2008] [Sher-
vashidze et al., 2011]) are typically deﬁned over of sub-
structures in graphs, such as sub-trees and walk sequences.
Later, [Tao et al., 2017] introduces an innovative route to de-
velop neural architectures using graph kernels3. To the best
of our knowledge, there is no existing work aiming at incor-
porating link attributes into graph kernels. In our paper, we
adopt a similar route as [Tao et al., 2017] to design LASE,
but using novel graph kernels which are able to handle link
attributes.

Node representation learning (NRL). NRL aims to learn
low-dimensional embeddings for graph nodes ([Perozzi et
al., 2014] [Tang et al., 2015] [Grover and Leskovec, 2016]
[Ribeiro et al., 2017] [Hamilton et al., 2017] [Li et al., 2018]
[Du et al., 2018]), which are later used in downstream pre-
diction tasks such as node classiﬁcation and link prediction.
GCNs can, in a broader sense, also be classiﬁed as NRL meth-
ods when regarding the hidden layers of nodes as embed-
ding vectors. However, few existing NRL models incorporate
link attributes. In Section 5, We compare the performances of
LASE with several other NRL approaches.

3 Model
In this section, we introduce the architecture of LASE (see
Figure 2) and the motivation behind. We ﬁrst extend the con-

3These architectures have better explainability as the hidden rep-
resentations can be interpreted as a series of inner products of the
input graph and some sample graphs. See Theorem 1 for detailed
explanation.

G = (V, E)

Input graph.

u, v, w, · · ·

Nodes in G.

eu,v
(v, eu,v)

f (·)

N (u)

⊗, (cid:12), (cid:104)·, ·(cid:105)

[·, · · · , ·], [

A link from node u to v.

A pair of node and link, or to say a
neighbor of node u.

The feature of a node, a link or a pair.

The set of neighbor nodes of u.

The operations of tensor product, elem-
-ent-wise product and inner product.
...], ⊕ The operation of concatenating input

vectors.

W, U, V, · · ·

The parameters in the neural network.

h(i)(u)

The hidden representation of node u in
layer i.

Table 1: Notations in this paper.

cept of a neighbor 4, and the features of a neighbor is then
deﬁned as the tensor product of its node and link attributes.
As directly using these tensors of features in GCNs would be
clumsy, we design new graph kernels under this setup, based
on which we further derive possible architectures of LASE.
In the end, we modularize LASE and provide intuitive under-
standings of the modules’ functions. Notations in this paper
are illustrated in Table 1. Vectors in this paper are all formed
in columns.

3.1 Neighbor Feature Tensors

One simplest idea to incorporate link attributes in GCN mod-
els is to concatenate them to the node’s attributes, i.e.

h(i+1)(u) = σ

(cid:88)

v∈N (u)

W

(cid:20) h(i)(v)
f (eu,v)

(cid:21)











= σ

W1

h(i)(v) + W2

(cid:88)

v∈N (u)



f (eu,v)



(cid:88)

v∈N (u)

where W = [W1, W2]. However, as attributes of neighbor
nodes and neighbor links are individually summed among the
neighborhood, such implementations can not at all capture
the interactions within a (node, link) neighbor. As the key
idea behind LASE is to adequately incorporate link attributes
into node hidden representations, these interactions cannot
be ignored. Moreover, this setup also leads to the confusion
demonstrated in Figure 3, indicating that the graph structure
is not appropriately captured.

Instead of simply adding or concatenating node and link

4The term neighbor is used for an ordered pair, containing a
neighbor node and the link connecting it to the central node, sim-
ilarly hereinafter.

Figure 2: The architecture of LASE.

Figure 3: Simply concatenating node and link attributes does not
capture the interactions in between. It cannot distinguish between
the two situations above.

attributes, we deﬁne their tensor product5 as the associated
neighbor feature. The calculated tensor contains all bilinear
combinations of the two attributes, and serves as a fully con-
joined feature. Formally, for the central node u connected to v
by a link eu,v , the corresponding neighbor feature is deﬁned
as

f ((v, eu,v)) := f (v) ⊗ f (eu,v).
However, directly using the tensor as inputs leads to unac-
ceptably high dimensionalities and heavy redundancies, for
the feature matrix (i.e. the 2D-tensor) is only of rank 1. In-
stead, we adapt existing graph kernels for so-deﬁned neighbor
features, and derive a concise architecture for LASE follow-
ing [Tao et al., 2017]’s route.

3.2 Graph Kernels with Link Attributes
To adapt existing kernels to our setup of neighbor features, we
ﬁrst deﬁne the kernel of two neighbors, (v, e·,v) and (w, e·,w).
The neighbor kernel is deﬁned as the inner product of the
neighbor tensors, i.e.

K((v, e·,v), (w, e·,w)) :=(cid:104)f ((v, e·,v)), f ((w, e·,w))(cid:105)

=(cid:104)f (v), f (w)(cid:105) · (cid:104)f (e·,v), f (e·,w)(cid:105).

Based on the neighbor kernel, a kernel of two l-hop neigh-
borhoods with central node u and u(cid:48) can be deﬁned as
K(l)

N (u, u(cid:48)) :=




(cid:104)f (u), f (u(cid:48))(cid:105)
(cid:104)f (u), f (u(cid:48))(cid:105) · λ·
(cid:80)
(cid:80)
v(cid:48)∈N (u(cid:48))

v∈N (u)

K(l−1)
N

(v, v(cid:48))·

(cid:104)f (eu,v), f (eu(cid:48),v(cid:48))(cid:105)

l > 0

l = 0

5Brieﬂy speaking, the tensor product of two (column) vector a

and b is calculated as abT with shape (da × db).

by regarding the lower-hop kernel, K(l−1)
(v, v(cid:48)), as the in-
ner product of the (l − 1)-th hidden representations of v and
v(cid:48). λ ∈ (0, 1) is a decay factor. Furthermore, by recursively
applying the neighborhood kernel, we can derive the l-hop
Random Walk kernel for graphs with link attributes as

N

W (G, G(cid:48)) = λl−1 (cid:88)
Kl

(cid:88)

(cid:32)l−1
(cid:89)

(cid:104)f (ui), f (u(cid:48)

i)(cid:105)

u∈Pl(G)

u(cid:48)∈Pl(G(cid:48))

i=0

(cid:33)

×

(cid:104)f (eui,ui+1), f (eu(cid:48)

i,u(cid:48)

i+1

)(cid:105)

,

l−2
(cid:89)

i=0

where Pl(G) denotes the set of all walk sequences of length l
in graph G, and ui denotes the i-th node in sequence u. 6

3.3 From Kernels to Neural Architectures
Following the route introduced in [Tao et al., 2017] with
above Random Walk kernel, a corresponding architecture
LASE-RW can be immediately derived as

u,v = σ(V(l)[h(l)(u), f (eu,v), h(l)(v)] + b(l))
λ(l)

h(0)(u) = W(0)f (u)

h(l)(u) =

(cid:88)

v∈N (u)

λu,vh(l−1)(u) (cid:12) U(l)f (eu,v) (cid:12) W(l)f (v).

This architecture further enjoys a similar property to the ar-
chitecture described in [Tao et al., 2017]. We ﬁrst construct
Ll,k = (VL, EL) using the k-th row vectors in the parameter
matrices7 as node and link attributes. The node set VL = {v0,
· · · , vl} with f (vi) = W(i)
k , and the link set EL = {evi,vi+1}
with f (evi,vi+1) = U(i+1)
. Then, we have the following the-
orem:
Theorem 1. For any l ≥ 1, the sum of h(l)(v)[k] (the k-th
coordinate of h(l)(v)) satisﬁes

k

(cid:88)

v∈VG

h(l)(v)[k] = Kl

W (G, Ll,k),

and thus (cid:80)
Similarly,

v∈VG
the

h(l)(v)[k] lies in the RKHS of kernel Kl

W .

architecture LASE-WL derived from

Weisfeiler-Lehman Kernel should be adapted as

u,v = σ(V(l)[h(l)(u), f (eu,v), h(l)(v)] + b(l))
λ(l)

h(0)(u) = W(0)r(d−1)(u)
(cid:88)

h(l)(u) =

λu,vh(l−1)(v)

v∈N (u)
(cid:12) U(l)f (eu,v) (cid:12) W(l)r(d−1)(u)

r(d)(u) = σ(P1r(d−1)(u) + P2

σ(Qr(d−1)(v)))

(cid:88)

v∈N (u)

6A Weisfeiler-Lehman kernel can also be deﬁned by adopting the
graph relabeling process, which is detailedly introduced in [Tao et
al., 2017]. We skip this part due to the limitation of space.
k , · · · , U(l)
k , · · · , W(l)

7Denoted as {W(0)

k } and {U(1)

k }.

The Weisfeiler-Lehman architecture is originally designed
to convolute nodes through both depth (r) and breadth (h),
however, the calculation of LASE-WL would be too complex.
We unite the depth and breadth convolution to reduce model
size, and by referring to the neighborhood aggregation con-
cept in GraphSAGE [Hamilton et al., 2017], proposed LASE-
SAGE:

u,v = σ(V(l)[h(l)(u), f (eu,v), h(l)(v)] + b(l))
λ(l)

h(0)(u) = f (u)
(cid:16)

h(l)(u) = σ

W(l)

1 h(l−1)(u) ◦ W(l)
2 ·

(cid:88)

v∈N (u)

λu,vh(l−1)(v) (cid:12) U(l)f (eu,v)



 ,

where ◦ is a combination operation such as +, (cid:12) or ⊕.

3.4 Discussion
Although [Tao et al., 2017] is originally introduced for ag-
gregating features for entire graphs, its output graph features
are an activated sum of all nodes features. We reckon these
node features be as well informative in node-wise prediction
tasks. We also provide an intuitive understanding of LASE.
The calculations in LASE can be divided into three common
modules, namely a gate, an ampliﬁer and an aggregator, as is
shown in Figure 2. Intuitively, the gate (λu,v) evaluates v’s in-
ﬂuence in u’s neighborhood. The ampliﬁer (h(v)(cid:12)Uf (eu,v))
element-wisely ampliﬁes the node attributes using link in-
formation 8. The aggregator sums up neighbor embeddings
and combines them with the central node embedding using
various strategies. Aggregators proposed in [Hamilton et al.,
2017] may also be used in LASE.

4 Sampling Estimation
Similar to GCN [2016], scalability is an obvious challenge for
LASE: calculating the convolutions demands a recursively
expanded neighborhood. For nodes with high degrees, it will
quickly cover a large portion of the graph. To control batch
scales, we leverage the Monte Carlo method to estimate the
summed neighborhood information by sampling a ﬁxed num-
ber of neighbors. Despite different architectures, the output
hidden embeddings of LASE can all be formulated as

h(l)(u) = σ∗

u,vg(l)(v|u)
λ(l)









(cid:32)

(cid:88)

v∈N (u)

= σ∗

E

p(l)(·|u)

(cid:34)

λ(l)
u,vg(l)(v|u)
p(l)(v|u)

(cid:35)(cid:33)

where p(l)(·|u) denotes the sampling probabilities in N (u).
We then approximate h(l)(u) through estimating the expecta-
tion. As the sampling process is always unbiased, we look for

8A slight elevation in performance can be observed when ap-
plying a sigmoid activation on Uf (eu,v), which makes the vector
functions more analogously to an ampliﬁer.

the optimal probabilities that minimize the estimation vari-
ance.

Although there are existing sampling strategies proposed
for GCNs ([Jie et al., 2018] [Huang et al., 2018]), these meth-
ods cannot be directly transferred to LASE because of the ab-
sence of explicit, constant link weights. Besides, the optimal
distribution varies through the training process. However, a
similar idea of importance sampling, coined gate sampling,
can be used in LASE by regarding the decay factor λs as the
sampling weights, that is,

p(l)
gate(v|u) =

λ(l)
u,v
w∈N (u) λ(l)

u,w

.

(cid:80)

While sampling with gates may reduce the estimation vari-
ance, it is not an optimal solution because typically the norms
of g(l)(v|u)s are different. According to the derivations of im-
portance sampling in [Owen, 2013], we derive min var sam-
pling, the optimal sampling probabilities as

.

(cid:80)

p(l)
∗ (v|u) =

u,w(cid:107)g(l)(w|u)(cid:107)

λ(l)
u,v(cid:107)g(l)(v|u)(cid:107)
w∈N (u) λ(l)
Evaluating the sampling probabilities batch-wisely can be
rather inefﬁcient. Under the hypothesis that the network pa-
rameters do not dramatically vary from batch to batch, we
make a tradeoff between variance and efﬁciency by control-
ling the interval of calculating the optimal distribution. That
is, the sampling probabilities for all training nodes are calcu-
lated every k batches. Although the calculation may be time-
consuming, the batch-averaged time cost will be reduced to
1/k.

5 Experiments
5.1 Experiment Setups
Datasets. We validate our method on the four datasets
introduced below, including a graph with link attributes
(reddit), a graph with heterogenous links (dblp), and
two temporal networks (email, fmobile). The statistics
of datasets are shown in Table 2.

• Reddit is a Reddit post network with each node rep-
resenting a post, and each link indicating that the con-
nected two posts are commonly commented by at least
three users. We adopt the same setup as [Hamilton et al.,
2017] for the node attributes, and use the user-averaged
distributions of comments in different communities as
link attributes.

• Dblp is a co-author network constructed with papers
from 2013 to 2017 in eight artiﬁcial intelligence confer-
ences. We use the tf-idf vectors of paper titles as node at-
tributes. The links are categorized under author perspec-
tive, i.e. the one-hot embeddings of the common authors
are used as link attributes. The node and link attributes
are reduced to 200 dimensions using PCA.

• Email and fmobile are two temporal networks con-
structed with user contacts in email and mobile-phone
services. The contacts of exact times are discretized into

Datasets

nnodes
reddit
61,836
dblp
14,389
email
986
fmobile 21,102

nlinks
1,222,411
111,858
16,064
55,009

¯d nlabels
8
8
42
33

19.77
7.77
16.29
2.61

Table 2: Statistics of datasets used in this paper.

time-slices and used as link attributes. As there is no
available node features in the datasets, we use node
embeddings with dim=128 obtained from transductive-
LINE [2015] as the pre-trained node features in all
convolution-based models.

Baselines. We compare the performance of LASE with
baselines including raw features, LINE [2015], DeepWalk
[2014], GCN [2016] and GraphSAGE [2017]. For LINE and
DeepWalk, we adopt an online-style training strategy for the
test / validation set introduced in [Hamilton et al., 2017] 9,
and a one-layer softmax-activated neural classiﬁer is trained
for all models. To demonstrate the ability of LASE in lever-
aging link attributes through the ampliﬁers, we also test the
performance of a LASE variant, LASE-concat, implemented
by na¨ıvely concatenating link attributes to node attributes.

5.2 Node-wise Classiﬁcation
We implement node-wise classiﬁcation respectively over the
four datasets mentioned above by predicting the community
(reddit, email and fmobile) or the conference (dblp)
that a node belongs to. In all datasets, 65% nodes are used as
the training set, 15% as the validation set and the rest as the
test set. The nodes in the training set with no neighbors are
abandoned. The micro-averaged f1 scores on the test set are
shown in Table 3.

As one of the most distinguished strengths of GCNs
is to aggregate neighborhood features, convolutional-based
models including GCN, GraphSAGE and LASE show sig-
niﬁcant advantages to proximity-based models on datasets
with node attributes. Through leveraging link attributes,
LASE outperforms other GCNs. Moreover, with LASE-RW
and LASE-SAGE outperforming the na¨ıve implementation
LASE-concat, the effect of the ampliﬁer module can be cor-
roborated. Although there is no original features in two tem-
poral networks, LASE still outperforms pre-trained features
by exploring edge attributes, while GCN and GraphSAGE
do not capture these additional information and struggles in
over-ﬁtting the proximity-based features.

Figure 4 a) demonstrate the accuracies of LASE-SAGE us-
ing contaminated link attributes of different signal-to-noise
ratios (SNRs). That is, we add normal-distributed noises of
different standard deviations to the original link attributes ac-
cording to given SNRs, and separately train LASE-SAGE

9As there is no implementation of online-LINE and [Qiu et
al., 2018] proves that LINE is theoretically equivalent with Deep-
Walk with walk length=1, we use the implementation of online-
DeepWalk in [Hamilton et al., 2017] instead. N walks is respectively
added to compensate the reduction in node contexts.

Model

LINE (online)
DeepWalk (online)
GCN
GraphSAGE
LASE-concat
LASE-RW
LASE-SAGE

Raw Features
LINE (transd.)

reddit

0.1802
0.1714
0.8172
0.8468
0.8438
0.8460
0.8633

0.7923
-

dblp

0.2989
0.3306
0.5033
0.5798
0.5805
0.5433
0.5881

0.4532
-

email

0.3604*
0.3249*
0.6396
0.6548
0.7005
0.7208
0.7310

-
0.6904

fmobile

0.3047*
0.4071*
0.3908
0.5334
0.5380
0.5441
0.5649

-
0.4749

Table 3: Performances of node-wise prediction tasks of LASE, its variants and baselines (Micro-f1s). *: Comparisons between these results
and those of convolutional models would be considered unfair as the latter uses transductively learned features as inputs.

Figure 4: Analyses of LASE: a) the prediction accuracies with contaminated link attributes. With higher SNR, the test accuracy of LASE
on reddit signiﬁcantly drops; b) the validation accuracies on email with different sampling strategies; c) the validation accuracies on
email with different intervals of calculating the optimal sampling probabilities for min var.

models under identical model settings. The SNR is deﬁned
as

SN R = A(link attrs)/A(noises)

ably high on larger datasets. Additionally, when k becomes
large enough, increasing k does not signiﬁcantly inﬂuence the
training performance.

where A(·) denotes the standard deviation of the inputs. As
SNR increases, a signiﬁcant trend of decrease in accuracy can
be observed. This corroborates the informativeness of link at-
tributes in the LASE architecture.

5.3 Comparison of Sampling Strategies
We look into the training processes of different neighbor-
hood sampling strategies introduced in Section 4, namely
uniform, gate and minimal variance (min var) sampling. We
separately train models with corresponding sampling strat-
egy on email, and present the variations of accuracies on
the validation set against training epochs in Figure 4 b).
While the convergence speeds appear analogous, min var
sampling consistently attains better convergence performance
compared with uniform and gate sampling. The reason that
gate sampling does not show a signiﬁcant advantage over uni-
form sampling may be that the norms of transformed neighbor
features (g(l)(v|u)) varies greatly in the neighborhood.

Figure 4 c) shows the tradeoff between performance and
efﬁciency made through different calculation intervals of the
sampling distribution (under min var setup). As the interval
k increases, the performance slightly drops. Calculating the
probabilities batch-wise attains a signiﬁcant elevation in the
performance, while the computation cost can be unaccept-

6 Conclusions and Future Work

In this paper, we propose LASE as an extension of graph
convolutional networks, which leverages more information
from graph links than existing GCNs by incorporating the
link attributes. The contribution of LASE lies in three folds: i)
LASE provides a ubiquitous solution to a wider class of graph
data by incorporating link attributes; ii) LASE outperforms
strong baselines and na¨ıve concatenating implementations by
adequately leveraging the information in the link attributes;
iii) LASE adopt a more explainable approach in determining
the neural architecture and thus enjoys better explainability.

For future work, we are looking for better sampling so-
lutions for LASE, as although stressed with calculation in-
tervals, current sampling setup seems to be rather clumsy
when the graph becomes massively large. We are also look-
ing for other possible approaches, hopefully with better per-
formance, to incorporating link attributes. Besides, as LASE
is an universal solution to all graph-structured data, an in-
triguing direction may be designing domain- or task-speciﬁc
architectures based on LASE to attain better performances,
such as more elegant adaptations to dynamic networks.

[Qiu et al., 2018] Jiezhong Qiu, Yuxiao Dong, Hao Ma, Jian
Li, Kuansan Wang, and Jie Tang. Network embedding
as matrix factorization: Unifying deepwalk, line, pte, and
node2vec. In Proceedings of the 11th ACM International
Conference on Web Search and Data Mining (WSDM’18),
2018.

[Ribeiro et al., 2017] Leonardo F.R. Ribeiro, Pedro H.P.
Saverese, and Daniel R. Figueiredo. Struc2vec: Learning
node representations from structural identity. In Proceed-
ings of the 23rd ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining (KDD’17),
2017.

[Sch¨olkopf and Smola, 2002] B. Sch¨olkopf and Alexan-
der Johannes Smola. Learning With Kernels. The MIT
Press, 2002.

[Shervashidze et al., 2011] Nino

Pascal
Schweitzer, Erik Jan, Van Leeuwen, Kurt Mehlhorn, and
Karsten M. Borgwardt. Weisfeiler-lehman graph kernels.
Journal of Machine Learning Research, 12(3):2539–2561,
2011.

Shervashidze,

[Tang et al., 2015] Jian Tang, Meng Qu, Mingzhe Wang,
Ming Zhang, Jun Yan, and Qiaozhu Mei. Line:large-
In Proceedings
scale information network embedding.
of the 24th International Conference on World Wide Web
(WWW’15), 2015.

[Tao et al., 2017] Lei Tao, Wengong Jin, Regina Barzilay,
and Tommi Jaakkola. Deriving neural architectures from
sequence and graph kernels. In Proceedings of the 34 th In-
ternational Conference on Machine Learning (ICML’17),
2017.

[Vishwanathan et al., 2008] S. V. N. Vishwanathan,
Karsten M. Borgwardt, Imre Risi Kondor, and Nicol N.
Journal of Machine
Schraudolph.
Learning Research, 11(2):1201–1242, 2008.

Graph kernels.

[Wang et al., 2016] Daixin Wang, Peng Cui, and Wenwu
Zhu. Structural deep network embedding. In Proceedings
of the 22nd ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD’16), 2016.

References
[Bruna et al., 2014] Joan Bruna, Wojciech Zaremba, Arthur
Szlam, and Yann Lecun. Spectral networks and locally
In Proceedings of the
connected networks on graphs.
2nd International Conference on Learning Representa-
tions (ICLR’14), 2014.

[Du et al., 2018] Lun Du, Yun Wang, Guojie Song, Zhicong
Lu, and Junshan Wang. Dynamic network embedding :
An extended approach for skip-gram based network em-
In Proceedings of the 27th International Joint
bedding.
Conference on Artiﬁcial Intelligence (IJCAI’18), 2018.
[G¨artner et al., 2003] Thomas G¨artner, Peter Flach, and Ste-
fan Wrobel. On graph kernels: Hardness results and ef-
In Proceedings of the Annual Con-
ﬁcient alternatives.
ference on Computational Learning Theory (CoLT’03),
2003.

[Grover and Leskovec, 2016] Aditya Grover

Jure
node2vec: Scalable feature learning for
Leskovec.
In Proceedings of the 22nd ACM SIGKDD
networks.
International Conference on Knowledge Discovery and
Data Mining (KDD’16), pages 855–864, 2016.

and

[Hamilton et al., 2017] William L. Hamilton, Rex Ying, and
Jure Leskovec. Inductive representation learning on large
graphs. In Proceedings of the 31st Conference on Neural
Information Processing Systems (NeurIPS’17), 2017.
[Henaff et al., 2015] Mikael Henaff, Joan Bruna, and Yann
Lecun. Deep convolutional networks on graph-structured
data. Computer Science, 2015.

[Huang et al., 2018] Wen-bing Huang,
Yu Rong, and Junzhou Huang.
towards fast graph representation learning.
abs/1809.05343, 2018.

Zhang,
Adaptive sampling
CoRR,

Tong

[Jie et al., 2018] Chen Jie, Tengfei Ma, and Xiao Cao. Fast-
learning with graph convolutional networks
gcn: Fast
In Proceedings of the 6th
via importance sampling.
International Conference on Learning Representations
(ICLR’18), 2018.

[Kipf and Welling, 2016] Thomas N. Kipf and Max Welling.
Semi-supervised classiﬁcation with graph convolutional
In Proceedings of the 4th International Con-
networks.
ference on Learning Representations (ICLR’16), 2016.
[Li et al., 2018] Ziyao Li, Liang Zhang, and Guojie Song.
Sepne: Bringing separability to network embedding.
CoRR, abs/1811.05614, 2018.

[Niepert et al., 2016] Mathias Niepert, Mohamed Ahmed,
and Konstantin Kutzkov. Learning convolutional neural
networks for graphs. In Proceedings of the 33rd Interna-
tional Conference on Machine Learning (ICML’16), 2016.
[Owen, 2013] Art B. Owen. Monte Carlo theory, methods

and examples. 2013.

[Perozzi et al., 2014] Bryan Perozzi, Rami Al-Rfou, and
Steven Skiena. Deepwalk: online learning of social repre-
sentations. In Proceedings of the 20th ACM SIGKDD In-
ternational Conference on Knowledge Discovery and Data
Mining (KDD’14), 2014.

