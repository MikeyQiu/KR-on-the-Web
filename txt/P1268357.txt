6
1
0
2
 
n
u
J
 
7
 
 
]
L
C
.
s
c
[
 
 
2
v
9
1
8
0
0
.
6
0
6
1
:
v
i
X
r
a

Matrix Factorization using Window Sampling and Negative Sampling
for Improved Word Representations∗

Alexandre Salle1 Marco Idiart2 Aline Villavicencio1
1 Institute of Informatics
2 Physics Department
Universidade Federal do Rio Grande do Sul
Porto Alegre, Brazil
{atsalle,avillavicencio}@inf.ufrgs.br, idiart@if.ufrgs.br

Abstract

In this paper, we propose LexVec, a new
method for generating distributed word repre-
sentations that uses low-rank, weighted factor-
ization of the Positive Point-wise Mutual In-
formation matrix via stochastic gradient de-
scent, employing a weighting scheme that as-
signs heavier penalties for errors on frequent
co-occurrences while still accounting for neg-
ative co-occurrence. Evaluation on word sim-
ilarity and analogy tasks shows that LexVec
matches and often outperforms state-of-the-art
methods on many of these tasks.

1 Introduction

Distributed word representations, or word embed-
dings, have been successfully used in many NLP
applications (Turian et al., 2010; Collobert et al.,
2011; Socher et al., 2013). Traditionally, word
representations have been obtained using count-
based methods (Baroni et al., 2014), where the co-
occurrence matrix is derived directly from corpus
counts (Lin, 1998) or using association measures
like Point-wise Mutual Information (PMI) (Church
and Hanks, 1990) and Positive PMI (PPMI) (Bulli-
naria and Levy, 2007; Levy et al., 2014).

Techniques for generating lower-rank representa-
tions have also been employed, such as PPMI-SVD
(Levy et al., 2015) and GloVe (Pennington et al.,
2014), both achieving state-of-the-art performance
on a variety of tasks.

∗This is a preprint of the paper that will be presented at
the 54th Annual Meeting of the Association for Computational
Linguistics.

Alternatively, vector-space models can be gener-
ated with predictive methods, which generally out-
perform the count-based methods (Baroni et al.,
2014), the most notable of which is Skip-gram with
Negative Sampling (SGNS, Mikolov et al. (2013b)),
which uses a neural network to generate embed-
dings. It implicitly factorizes a shifted PMI matrix,
and its performance has been linked to the weight-
ing of positive and negative co-occurrences (Levy
and Goldberg, 2014).

In this paper, we present Lexical Vectors
(LexVec), a method for factorizing PPMI matrices
that combines characteristics of all these methods.
On the one hand, it uses SGNS window sampling,
negative sampling, and stochastic gradient descent
(SGD) to minimize a loss function that weights fre-
quent co-occurrences heavily but also takes into ac-
count negative co-occurrence. However, since PPMI
generally outperforms PMI on semantic similarity
tasks (Bullinaria and Levy, 2007), rather than im-
plicitly factorize a shifted PMI matrix (like SGNS),
LexVec explicitly factorizes the PPMI matrix.

This paper is organized as follows: First, we de-
scribe PPMI-SVD, GloVe, and SGNS (§2) before
introducing the proposed method, LexVec (§3), and
evaluating it on word similarity and analogy tasks
(§4). We conclude with an analysis of results and
discussion of future work.

We provide source code for the model at https:

//github.com/alexandres/lexvec.

2 Related Work

2.1 PPMI-SVD

Given a word w and a symmetric window of win
context words to the left and win to the right, the
co-occurrence matrix of elements Mwc is deﬁned as
the number of times a target word w and the context
word c co-occurred in the corpus within the window.
The PMI matrix is deﬁned as

P M Iwc = log

Mwc M∗∗
Mw∗ M∗c

(1)

where ’*’ represents the summation of the corre-
sponding index. As this matrix is unbounded in
the inferior limit, in most applications it is replaced
by its positive deﬁnite version, PPMI, where nega-
tive values are set to zero. The performance of the
PPMI matrix on word similarity tasks can be fur-
ther improved by using context-distribution smooth-
ing (Levy et al., 2015) and subsampling the cor-
pus (Mikolov et al., 2013b). As word embeddings
with lower dimensionality may improve efﬁciency
and generalization (Levy et al., 2015), the improved
PPMI∗ matrix can be factorized as a product of two
lower rank matrices.

P P M I

∗
wc ≃ Ww ˜W

⊤
c

(2)

where Ww and ˜Wc are d-dimensional row vectors
corresponding to vector embeddings for the target
and context words. Using the truncated SVD of
size d yields the factorization U ΣT ⊤ with the lowest
possible L2 error (Eckert and Young, 1936).

Levy et al. (2015) recommend using W = U Σp
as the word representations, as suggested by Bulli-
naria and Levy (2012), who borrowed the idea of
weighting singular values from the work of Caron
(2001) on Latent Semantic Analysis. Although
the optimal value of p is highly task-dependent
( ¨Osterlund et al., 2015), we set p = 0.5 as it has
been shown to perform well on the word similarity
and analogy tasks we use in our experiments (Levy
et al., 2015).

2.2 GloVe

GloVe (Pennington et al., 2014) factors the loga-
rithm of the co-occurrence matrix ˆM that considers
the position of the context words in the window. The

loss function for factorization is

1
2

=

LGloV e
wc

f ( ˆMwc)(Ww ˜W

⊤
c +bw +˜bc −log ˆMwc)2
(3)
where bw and ˜bc are bias terms, and f is a weighting
function deﬁned as

f (x) =

(x/xmax)β
1
(

if x < xmax
otherwise

(4)

W and ˜W are obtained by iterating over all non-zero
(w, c) cells in the co-occurrence matrix and mini-
mizing eq. (3) through SGD.

The weighting function (in eq.

(3)) penalizes
more heavily reconstruction error of frequent co-
occurrences,
improving on PPMI-SVD’s L2 loss,
which weights all reconstruction errors equally.
However, as it does not penalize reconstruction er-
rors for pairs with zero counts in the co-occurrence
matrix, no effort is made to scatter the vectors for
these pairs.

2.3 Skip-gram with Negative Sampling (SGNS)

SGNS (Mikolov et al., 2013b) trains a neural net-
work to predict the probability of observing a con-
text word c given a target word w, sliding a symmet-
ric window over a subsampled training corpus with
the window size being sampled uniformly from the
range [1, win]. Each observed (w, c) pair is com-
bined with k randomly sampled noise pairs (w, wi)
and used to calculate the loss function

LSGN S
wc

= log σ(Ww ˜Wc

⊤

)+

Ewi∼Pn(w) log σ(−Ww ˜W

⊤
wi)

(5)

k

i=1
X

where Pn(w) is the distribution from which noise
words wi are sampled.1 We refer to this routine
which SGNS uses for selecting (w, c) pairs by slid-
ing a context window over the corpus for loss calcu-
lation and SGD as window sampling.

SGNS is implicitly performing the weighted fac-
torization of a shifted PMI matrix (Levy and Gold-
berg, 2014). Window sampling ensures the fac-
torization weights frequent co-occurrences heavily,
but also takes into account negative co-occurrences,
thanks to negative sampling.

1Following Mikolov et al. (2013b) it is the unigram distribu-

tion raised to the 3/4 power.

3 LexVec

LexVec is based on the idea of factorizing the
PPMI matrix using a reconstruction loss function
that does not weight all errors equally, unlike
SVD, but instead penalizes errors of frequent co-
occurrences more heavily, while still treating nega-
tive co-occurrences, unlike GloVe. Moreover, given
that using PPMI results in better performance than
PMI on semantic tasks, we propose keeping the
SGNS weighting scheme by using window sampling
and negative sampling, but explicitly factorizing the
PPMI matrix rather than implicitly factorizing the
shifted PMI matrix. The LexVec loss function has
two terms

LexV ec
wc

L

=

(Ww ˜Wc

⊤ − P P M I

∗
wc)2

LexV ec
w

L

=

Ewi∼Pn(w)(Ww ˜Wwi

⊤ − P P M I

∗
wwi )2

1
2

1
2

k

X
i=1

(6)

(7)

We minimize eqs. (6) and (7) using two alternative
approaches:
Mini-Batch (MB): This variant executes gradient
descent in exactly the same way as SGNS. Every
time a pair (w, c) is observed by window sampling
and pairs (w, w1...k) drawn by negative sampling,
Ww, ˜Wc, and ˜Ww1...k are updated by gradient de-
scent on the sum of eq.(6) and eq.(7). The global
loss for this approach is

LLexV ec =

#(w, c) (LLexV ec

wc

+ LLexV ec
w

) (8)

X(w,c)

where #(w, c) is the number of times (w, c) is ob-
served in the subsampled corpus.
Stochastic (St): Every context window is extended
with k negative samples w1...k.
Iterative gradient
descent of eq. (6) is then run on pairs (w, cj ), for
j = 1, .., 2∗win and (w, ci), j = 1, .., k for each
window. The global loss for this approach is

LLexV ec′

=

#(w, c)LLexV ec

+

wc

X(w,c)
#(w)LLexV ec
w

w
X

(9)

If a pair (w, c) co-occurs frequently, #(w, c) will
weigh heavily in both eqs. (8) and (9), giving the
desired weighting for frequent co-occurrences. The
noise term, on the other hand, has corrections pro-
portional to #(w) and #(wi), for each pair (w, wi).
It produces corrections in pairs that due to fre-
quency should be in the corpus but are not observed,
therefore accounting automatically for negative co-
occurrences.

4 Materials

All models were trained on a dump of Wikipedia
from June 2015, split into sentences, with punctu-
ation removed, numbers converted to words, and
lower-cased. Words with less than 100 counts
were removed, resulting in a vocabulary of 302,203
words. All models generate embeddings of 300 di-
mensions.

The PPMI* matrix used by both PPMI-SVD and
LexVec was constructed using smoothing of α =
3/4 suggested in (Levy et al., 2015) and an un-
weighted window of size 2. A dirty subsampling
of the corpus is adopted for PPMI* and SGNS with
threshold of t = 10−5 (Mikolov et al., 2013b).2 Ad-
ditionally, SGNS uses 5 negative samples (Mikolov
et al., 2013b), a window of size 10 (Levy et al.,
2015), for 5 iterations with initial learning rate set
to the default 0.025. GloVe is run with a window of
size 10, xmax = 100, β = 3/4, for 50 iterations and
initial learning rate of 0.05 (Pennington et al., 2014).
In LexVec two window sampling alternatives are
compared: W SP P M I, which keeps the same ﬁxed
size win = 2 as used to create the P P M I ∗ ma-
trix; or W SSGN S, which adopts identical SGNS set-
tings (win = 10 with size randomization). We run
LexVec for 5 iterations over the training corpus.

All methods generate both word and context ma-
trices (W and ˜W ): W is used for SGNS, PPMI-SVD
and W + ˜W for GloVe (following Levy et al. (2015),
and W and W + ˜W for LexVec.

For evaluation, we use standard word similarity
and analogy tasks (Mikolov et al., 2013b; Levy et al.,
2014; Pennington et al., 2014; Levy et al., 2015). We
examine, in particular, if LexVec weighted PPMI∗
factorization outperforms SVD, GloVe (weighted

where #(w) is the number of times w is observed in
the subsampled corpus.

2Words with unigram relative frequency f > t are discarded

from the training corpus with probability pw = 1 −

pt/f .

Method
PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St. + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

WSim WRel MEN MTurk
.731
.719
.770
.770
.763
.748
.741
.768
.775
.745
.740

.627
.643
.675
.650
.655
.636
.628
.654
.654
.645
.640

.731
.736
.763
.755
.760
.741
.733
.755
.762
.734
.728

.617
.607
.670
.671
.671
.635
.622
.675
.673
.640
.628

RW SimLex-999 MC
.770
.303
.427
.725
.338
.400
.823
.339
.465
.824
.322
.455
.816
.336
.458
.827
.320
.456
.820
.338
.457
.824
.312
.448
.838
.339
.468
.814
.311
.447
.821
.339
.459

RG
.756
.774
.793
.830
.827
.820
.808
.827
.848
.802
.818

SCWS
.615
.573
.643
.623
.630
.632
.638
.626
.628
.624
.638

Table 1: Spearman rank correlation on word similarity tasks.

Method

PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

GSem
3CosAdd / 3CosMul
.460 / .498
.818 / .813
.773 / .777
.775 / .792
.794 / .807
.800 / .805
.787 / .782
.762 / .785
.792 / .809
.798 / .807
.779 / .778

GSyn
3CosAdd / 3CosMul
.445 / .455
.630 / .626
.642 / .644
.520 / .539
.543 / .555
.584 / .597
.597 / .613
.520 / .534
.536 / .553
.573 / .580
.600 / .614

MSR
3CosAdd / 3CosMul
.303 / .313
.539 / .547
.481 / .505
.371 / .413
.378 / .408
.421 / .457
.445 / .475
.349 / .386
.362 / .396
.399 / .435
.434 / .463

Table 2: Results on word analogy tasks, given as percent accuracy.

factorization of log ˆM ) and Skip-gram (implicit fac-
torization of the shifted PMI matrix), and compare
the stochastic and mini-batch approaches.

Word similarity tasks are:3 WS-353 Similarity
(WSim) and Relatedness (WRel) (Finkelstein et al.,
2001), MEN (Bruni et al., 2012), MTurk (Radin-
sky et al., 2011), RW (Luong et al., 2013), SimLex-
999 (Hill et al., 2015), MC (Miller and Charles,
1991), RG (Rubenstein and Goodenough, 1965),
and SCWS (Huang et al., 2012), calculated using
cosine. Word analogy tasks are: Google seman-
tic (GSem) and syntactic (GSyn) (Mikolov et al.,
2013a) and MSR syntactic analogy dataset (Mikolov
et al., 2013c), using 3CosAdd and 3CosM ul (Levy
et al., 2014).

5 Results

Results for word similarity and for the analogy tasks
are in tables 1 and 2, respectively. Compared with
PPMI-SVD, LexVec performs better in all tasks. As
they factorize the same P P M I ∗ matrix, it is the

3http://www.cs.cmu.edu/ mfaruqui/suite.html

loss weighting from window sampling that is an im-
provement over L2 loss. As expected, due to PPMI,
LexVec performs better than SGNS in several word
similarity tasks, but in addition it also does so on the
semantic analogy task, nearly approaching GloVe.
LexVec generally outperforms GloVe on word sim-
ilarity tasks, possibly due to the factorization of the
PPMI matrix and to window sampling’s weighting
of negative co-occurrences.

We believe LexVec fares well on semantic analo-
gies because its vector-space does a good job of pre-
serving semantics, as evidenced by its performance
on word similarity tasks. We believe the poor syn-
tactic performance is a result of the PPMI measure.
PPMI-SVD also struggled with syntactic analogies
more than any other task. Levy et al. (2015) ob-
tained similar results, and suggest that using posi-
tional contexts as done by Levy et al. (2014) might
help in recovering syntactic analogies.

In terms of conﬁgurations, WSSGN S performed
marginally better than WSP P M I. We hypothesize
it is simply because of the additional computation.

While W and (W + ˜W ) are roughly equivalent on
word similarity tasks, W is better for analogies.
This is inline with results for PPMI-SVD and SGNS
models (Levy et al., 2015). Both mini-batch and
stochastic approaches result in similar scores for all
tasks. For the same parameter k of negative sam-
ples, the mini-batch approach uses 2 ∗ winW SP P M I
times more negative samples than stochastic when
using W SP P M I, and winW SSGNS times more sam-
ples when using W SSGN S. Therefore, the stochas-
tic approach is more computationally efﬁcient while
delivering similar performance.

6 Conclusion and Future Work

In this paper, we introduced LexVec, a method
for low-rank, weighted factorization of the PPMI
matrix that generates distributed word representa-
tions, favoring low reconstruction error on frequent
co-occurrences, whilst accounting for negative co-
occurrences as well. This is in contrast with PPMI-
SVD, which does no weighting, and GloVe, which
only considers positive co-occurrences. Finally, its
PPMI factorization seems to better capture seman-
tics when compared to the shifted PMI factorization
of SGNS. As a result, it outperforms PPMI-SVD and
SGNS in a variety of word similarity and semantic
analogy tasks, and generally outperforms GloVe on
similarity tasks.

Future work will examine the use of positional
contexts for improving performance on syntactic
analogy tasks. Moreover, we will explore further the
hyper-parameter space to ﬁnd globally optimal val-
ues for LexVec, and will experiment with the factor-
ization of other matrices for developing alternative
word representations.

Acknowledgments

This work has been partly funded by CAPES and
by projects AIM-WEST (FAPERGS-INRIA 1706-
2551/13-7), CNPq 482520/2012-4, 312114/2015-0,
“Simpliﬁcac¸ ˜ao Textual de Express˜oes Complexas”,
sponsored by Samsung Eletrˆonica da Amazˆonia
Ltda. under the terms of Brazilian federal law No.
8.248/91.

References

Marco Baroni, Georgiana Dinu,

and Germ´an
Kruszewski. 2014. Don’t count, predict!
a
systematic comparison of context-counting vs.
context-predicting semantic vectors. In Proceed-
ings of the 52nd Annual Meeting of the Associ-
ation for Computational Linguistics. volume 1,
pages 238–247.

Elia Bruni, Gemma Boleda, Marco Baroni, and
Nam-Khanh Tran. 2012. Distributional seman-
In Proceedings of the 50th
tics in technicolor.
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 136–
145.

John A. Bullinaria and Joseph P. Levy. 2007. Ex-
tracting semantic representations from word co-
occurrence statistics: A computational study. Be-
havior research methods 39(3):510–526.

John A Bullinaria and Joseph P Levy. 2012. Ex-
tracting semantic representations from word co-
occurrence statistics: stop-lists, stemming, and
svd. Behavior research methods 44(3):890–907.

John Caron. 2001.

Experiments with lsa scor-
In Proceedings of
ing: Optimal rank and basis.
the SIAM Computational Information Retrieval
Workshop. pages 157–169.

Kenneth W. Church and Patrick Hanks. 1990. Word
association norms, mutual information, and lex-
icography. Computational Linguistics 16(1):22–
29.

Ronan Collobert,

Jason Weston, L´eon Bottou,
Michael Karlen, Koray Kavukcuoglu, and Pavel
Kuksa. 2011. Natural language processing (al-
The Journal of Machine
most) from scratch.
Learning Research 12:2493–2537.

C. Eckert and G. Young. 1936. The approximation
of one matrix by another of lower rank. Psych.
1:211–218.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2001. Placing search in context: The
concept revisited. In Proceedings of the 10th in-
ternational conference on World Wide Web. ACM,
pages 406–414.

George A. Miller and Walter G. Charles. 1991. Con-
textual correlates of semantic similarity. Lan-
guage and cognitive processes 6(1):1–28.

Arvid ¨Osterlund, David ¨Odling,

and Magnus
Sahlgren. 2015. Factorization of latent variables
in distributional semantic models.
In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, Lisbon, Portugal,
pages 227–231.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors
for word representation. Proceedings of the Em-
piricial Methods in Natural Language Processing
(EMNLP 2014) 12.

Kira Radinsky,

Eugene Agichtein,

Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
word at a time: computing word relatedness using
In Proceedings of
temporal semantic analysis.
the 20th international conference on World wide
web. ACM, pages 337–346.

Herbert Rubenstein and John B. Goodenough. 1965.
Contextual correlates of synonymy. Communica-
tions of the ACM 8(10):627–633.

Richard Socher, John Bauer, Christopher D Man-
ning, and Andrew Y Ng. 2013. Parsing with com-
positional vector grammars.
In ACL (1). pages
455–465.

Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010. Word representations: a simple and gen-
eral method for semi-supervised learning. In Pro-
ceedings of the 48th annual meeting of the asso-
ciation for computational linguistics. Association
for Computational Linguistics, pages 384–394.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
Simlex-999: Evaluating semantic models with
(genuine) similarity estimation. Computational
Linguistics .

Eric H. Huang, Richard Socher, Christopher D.
Manning, and Andrew Y. Ng. 2012.
Improving
word representations via global context and mul-
tiple word prototypes. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 873–
882.

Omer Levy and Yoav Goldberg. 2014. Neural word
embedding as implicit matrix factorization.
In
Advances in Neural Information Processing Sys-
tems. pages 2177–2185.

Omer Levy, Yoav Goldberg, and Ido Dagan. 2015.
Improving distributional similarity with lessons
learned from word embeddings.
Transactions
of the Association for Computational Linguistics
pages 211–225.

Omer Levy, Yoav Goldberg, and Israel Ramat-Gan.
2014. Linguistic regularities in sparse and explicit
word representations. CoNLL-2014 page 171.

Dekang Lin. 1998. Automatic retrieval and cluster-
ing of similar words.
In of the 36th and 17th ,
Volume 2. Montreal, Quebec, Canada, pages 768–
774.

Minh-Thang Luong, Richard Socher, and Christo-
pher D. Manning. 2013. Better word representa-
tions with recursive neural networks for morphol-
ogy. CoNLL-2013 104.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efﬁcient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781 .

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S.
Corrado, and Jeff Dean. 2013b. Distributed rep-
resentations of words and phrases and their com-
positionality. In Advances in Neural Information
Processing Systems. pages 3111–3119.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013c. Linguistic regularities in continuous space
word representations.
In HLT-NAACL. pages
746–751.

6
1
0
2
 
n
u
J
 
7
 
 
]
L
C
.
s
c
[
 
 
2
v
9
1
8
0
0
.
6
0
6
1
:
v
i
X
r
a

Matrix Factorization using Window Sampling and Negative Sampling
for Improved Word Representations∗

Alexandre Salle1 Marco Idiart2 Aline Villavicencio1
1 Institute of Informatics
2 Physics Department
Universidade Federal do Rio Grande do Sul
Porto Alegre, Brazil
{atsalle,avillavicencio}@inf.ufrgs.br, idiart@if.ufrgs.br

Abstract

In this paper, we propose LexVec, a new
method for generating distributed word repre-
sentations that uses low-rank, weighted factor-
ization of the Positive Point-wise Mutual In-
formation matrix via stochastic gradient de-
scent, employing a weighting scheme that as-
signs heavier penalties for errors on frequent
co-occurrences while still accounting for neg-
ative co-occurrence. Evaluation on word sim-
ilarity and analogy tasks shows that LexVec
matches and often outperforms state-of-the-art
methods on many of these tasks.

1 Introduction

Distributed word representations, or word embed-
dings, have been successfully used in many NLP
applications (Turian et al., 2010; Collobert et al.,
2011; Socher et al., 2013). Traditionally, word
representations have been obtained using count-
based methods (Baroni et al., 2014), where the co-
occurrence matrix is derived directly from corpus
counts (Lin, 1998) or using association measures
like Point-wise Mutual Information (PMI) (Church
and Hanks, 1990) and Positive PMI (PPMI) (Bulli-
naria and Levy, 2007; Levy et al., 2014).

Techniques for generating lower-rank representa-
tions have also been employed, such as PPMI-SVD
(Levy et al., 2015) and GloVe (Pennington et al.,
2014), both achieving state-of-the-art performance
on a variety of tasks.

∗This is a preprint of the paper that will be presented at
the 54th Annual Meeting of the Association for Computational
Linguistics.

Alternatively, vector-space models can be gener-
ated with predictive methods, which generally out-
perform the count-based methods (Baroni et al.,
2014), the most notable of which is Skip-gram with
Negative Sampling (SGNS, Mikolov et al. (2013b)),
which uses a neural network to generate embed-
dings. It implicitly factorizes a shifted PMI matrix,
and its performance has been linked to the weight-
ing of positive and negative co-occurrences (Levy
and Goldberg, 2014).

In this paper, we present Lexical Vectors
(LexVec), a method for factorizing PPMI matrices
that combines characteristics of all these methods.
On the one hand, it uses SGNS window sampling,
negative sampling, and stochastic gradient descent
(SGD) to minimize a loss function that weights fre-
quent co-occurrences heavily but also takes into ac-
count negative co-occurrence. However, since PPMI
generally outperforms PMI on semantic similarity
tasks (Bullinaria and Levy, 2007), rather than im-
plicitly factorize a shifted PMI matrix (like SGNS),
LexVec explicitly factorizes the PPMI matrix.

This paper is organized as follows: First, we de-
scribe PPMI-SVD, GloVe, and SGNS (§2) before
introducing the proposed method, LexVec (§3), and
evaluating it on word similarity and analogy tasks
(§4). We conclude with an analysis of results and
discussion of future work.

We provide source code for the model at https:

//github.com/alexandres/lexvec.

2 Related Work

2.1 PPMI-SVD

Given a word w and a symmetric window of win
context words to the left and win to the right, the
co-occurrence matrix of elements Mwc is deﬁned as
the number of times a target word w and the context
word c co-occurred in the corpus within the window.
The PMI matrix is deﬁned as

P M Iwc = log

Mwc M∗∗
Mw∗ M∗c

(1)

where ’*’ represents the summation of the corre-
sponding index. As this matrix is unbounded in
the inferior limit, in most applications it is replaced
by its positive deﬁnite version, PPMI, where nega-
tive values are set to zero. The performance of the
PPMI matrix on word similarity tasks can be fur-
ther improved by using context-distribution smooth-
ing (Levy et al., 2015) and subsampling the cor-
pus (Mikolov et al., 2013b). As word embeddings
with lower dimensionality may improve efﬁciency
and generalization (Levy et al., 2015), the improved
PPMI∗ matrix can be factorized as a product of two
lower rank matrices.

P P M I

∗
wc ≃ Ww ˜W

⊤
c

(2)

where Ww and ˜Wc are d-dimensional row vectors
corresponding to vector embeddings for the target
and context words. Using the truncated SVD of
size d yields the factorization U ΣT ⊤ with the lowest
possible L2 error (Eckert and Young, 1936).

Levy et al. (2015) recommend using W = U Σp
as the word representations, as suggested by Bulli-
naria and Levy (2012), who borrowed the idea of
weighting singular values from the work of Caron
(2001) on Latent Semantic Analysis. Although
the optimal value of p is highly task-dependent
( ¨Osterlund et al., 2015), we set p = 0.5 as it has
been shown to perform well on the word similarity
and analogy tasks we use in our experiments (Levy
et al., 2015).

2.2 GloVe

GloVe (Pennington et al., 2014) factors the loga-
rithm of the co-occurrence matrix ˆM that considers
the position of the context words in the window. The

loss function for factorization is

1
2

=

LGloV e
wc

f ( ˆMwc)(Ww ˜W

⊤
c +bw +˜bc −log ˆMwc)2
(3)
where bw and ˜bc are bias terms, and f is a weighting
function deﬁned as

f (x) =

(x/xmax)β
1
(

if x < xmax
otherwise

(4)

W and ˜W are obtained by iterating over all non-zero
(w, c) cells in the co-occurrence matrix and mini-
mizing eq. (3) through SGD.

The weighting function (in eq.

(3)) penalizes
more heavily reconstruction error of frequent co-
occurrences,
improving on PPMI-SVD’s L2 loss,
which weights all reconstruction errors equally.
However, as it does not penalize reconstruction er-
rors for pairs with zero counts in the co-occurrence
matrix, no effort is made to scatter the vectors for
these pairs.

2.3 Skip-gram with Negative Sampling (SGNS)

SGNS (Mikolov et al., 2013b) trains a neural net-
work to predict the probability of observing a con-
text word c given a target word w, sliding a symmet-
ric window over a subsampled training corpus with
the window size being sampled uniformly from the
range [1, win]. Each observed (w, c) pair is com-
bined with k randomly sampled noise pairs (w, wi)
and used to calculate the loss function

LSGN S
wc

= log σ(Ww ˜Wc

⊤

)+

Ewi∼Pn(w) log σ(−Ww ˜W

⊤
wi)

(5)

k

i=1
X

where Pn(w) is the distribution from which noise
words wi are sampled.1 We refer to this routine
which SGNS uses for selecting (w, c) pairs by slid-
ing a context window over the corpus for loss calcu-
lation and SGD as window sampling.

SGNS is implicitly performing the weighted fac-
torization of a shifted PMI matrix (Levy and Gold-
berg, 2014). Window sampling ensures the fac-
torization weights frequent co-occurrences heavily,
but also takes into account negative co-occurrences,
thanks to negative sampling.

1Following Mikolov et al. (2013b) it is the unigram distribu-

tion raised to the 3/4 power.

3 LexVec

LexVec is based on the idea of factorizing the
PPMI matrix using a reconstruction loss function
that does not weight all errors equally, unlike
SVD, but instead penalizes errors of frequent co-
occurrences more heavily, while still treating nega-
tive co-occurrences, unlike GloVe. Moreover, given
that using PPMI results in better performance than
PMI on semantic tasks, we propose keeping the
SGNS weighting scheme by using window sampling
and negative sampling, but explicitly factorizing the
PPMI matrix rather than implicitly factorizing the
shifted PMI matrix. The LexVec loss function has
two terms

LexV ec
wc

L

=

(Ww ˜Wc

⊤ − P P M I

∗
wc)2

LexV ec
w

L

=

Ewi∼Pn(w)(Ww ˜Wwi

⊤ − P P M I

∗
wwi )2

1
2

1
2

k

X
i=1

(6)

(7)

We minimize eqs. (6) and (7) using two alternative
approaches:
Mini-Batch (MB): This variant executes gradient
descent in exactly the same way as SGNS. Every
time a pair (w, c) is observed by window sampling
and pairs (w, w1...k) drawn by negative sampling,
Ww, ˜Wc, and ˜Ww1...k are updated by gradient de-
scent on the sum of eq.(6) and eq.(7). The global
loss for this approach is

LLexV ec =

#(w, c) (LLexV ec

wc

+ LLexV ec
w

) (8)

X(w,c)

where #(w, c) is the number of times (w, c) is ob-
served in the subsampled corpus.
Stochastic (St): Every context window is extended
with k negative samples w1...k.
Iterative gradient
descent of eq. (6) is then run on pairs (w, cj ), for
j = 1, .., 2∗win and (w, ci), j = 1, .., k for each
window. The global loss for this approach is

LLexV ec′

=

#(w, c)LLexV ec

+

wc

X(w,c)
#(w)LLexV ec
w

w
X

(9)

If a pair (w, c) co-occurs frequently, #(w, c) will
weigh heavily in both eqs. (8) and (9), giving the
desired weighting for frequent co-occurrences. The
noise term, on the other hand, has corrections pro-
portional to #(w) and #(wi), for each pair (w, wi).
It produces corrections in pairs that due to fre-
quency should be in the corpus but are not observed,
therefore accounting automatically for negative co-
occurrences.

4 Materials

All models were trained on a dump of Wikipedia
from June 2015, split into sentences, with punctu-
ation removed, numbers converted to words, and
lower-cased. Words with less than 100 counts
were removed, resulting in a vocabulary of 302,203
words. All models generate embeddings of 300 di-
mensions.

The PPMI* matrix used by both PPMI-SVD and
LexVec was constructed using smoothing of α =
3/4 suggested in (Levy et al., 2015) and an un-
weighted window of size 2. A dirty subsampling
of the corpus is adopted for PPMI* and SGNS with
threshold of t = 10−5 (Mikolov et al., 2013b).2 Ad-
ditionally, SGNS uses 5 negative samples (Mikolov
et al., 2013b), a window of size 10 (Levy et al.,
2015), for 5 iterations with initial learning rate set
to the default 0.025. GloVe is run with a window of
size 10, xmax = 100, β = 3/4, for 50 iterations and
initial learning rate of 0.05 (Pennington et al., 2014).
In LexVec two window sampling alternatives are
compared: W SP P M I, which keeps the same ﬁxed
size win = 2 as used to create the P P M I ∗ ma-
trix; or W SSGN S, which adopts identical SGNS set-
tings (win = 10 with size randomization). We run
LexVec for 5 iterations over the training corpus.

All methods generate both word and context ma-
trices (W and ˜W ): W is used for SGNS, PPMI-SVD
and W + ˜W for GloVe (following Levy et al. (2015),
and W and W + ˜W for LexVec.

For evaluation, we use standard word similarity
and analogy tasks (Mikolov et al., 2013b; Levy et al.,
2014; Pennington et al., 2014; Levy et al., 2015). We
examine, in particular, if LexVec weighted PPMI∗
factorization outperforms SVD, GloVe (weighted

where #(w) is the number of times w is observed in
the subsampled corpus.

2Words with unigram relative frequency f > t are discarded

from the training corpus with probability pw = 1 −

pt/f .

Method
PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St. + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

WSim WRel MEN MTurk
.731
.719
.770
.770
.763
.748
.741
.768
.775
.745
.740

.627
.643
.675
.650
.655
.636
.628
.654
.654
.645
.640

.731
.736
.763
.755
.760
.741
.733
.755
.762
.734
.728

.617
.607
.670
.671
.671
.635
.622
.675
.673
.640
.628

RW SimLex-999 MC
.770
.303
.427
.725
.338
.400
.823
.339
.465
.824
.322
.455
.816
.336
.458
.827
.320
.456
.820
.338
.457
.824
.312
.448
.838
.339
.468
.814
.311
.447
.821
.339
.459

RG
.756
.774
.793
.830
.827
.820
.808
.827
.848
.802
.818

SCWS
.615
.573
.643
.623
.630
.632
.638
.626
.628
.624
.638

Table 1: Spearman rank correlation on word similarity tasks.

Method

PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

GSem
3CosAdd / 3CosMul
.460 / .498
.818 / .813
.773 / .777
.775 / .792
.794 / .807
.800 / .805
.787 / .782
.762 / .785
.792 / .809
.798 / .807
.779 / .778

GSyn
3CosAdd / 3CosMul
.445 / .455
.630 / .626
.642 / .644
.520 / .539
.543 / .555
.584 / .597
.597 / .613
.520 / .534
.536 / .553
.573 / .580
.600 / .614

MSR
3CosAdd / 3CosMul
.303 / .313
.539 / .547
.481 / .505
.371 / .413
.378 / .408
.421 / .457
.445 / .475
.349 / .386
.362 / .396
.399 / .435
.434 / .463

Table 2: Results on word analogy tasks, given as percent accuracy.

factorization of log ˆM ) and Skip-gram (implicit fac-
torization of the shifted PMI matrix), and compare
the stochastic and mini-batch approaches.

Word similarity tasks are:3 WS-353 Similarity
(WSim) and Relatedness (WRel) (Finkelstein et al.,
2001), MEN (Bruni et al., 2012), MTurk (Radin-
sky et al., 2011), RW (Luong et al., 2013), SimLex-
999 (Hill et al., 2015), MC (Miller and Charles,
1991), RG (Rubenstein and Goodenough, 1965),
and SCWS (Huang et al., 2012), calculated using
cosine. Word analogy tasks are: Google seman-
tic (GSem) and syntactic (GSyn) (Mikolov et al.,
2013a) and MSR syntactic analogy dataset (Mikolov
et al., 2013c), using 3CosAdd and 3CosM ul (Levy
et al., 2014).

5 Results

Results for word similarity and for the analogy tasks
are in tables 1 and 2, respectively. Compared with
PPMI-SVD, LexVec performs better in all tasks. As
they factorize the same P P M I ∗ matrix, it is the

3http://www.cs.cmu.edu/ mfaruqui/suite.html

loss weighting from window sampling that is an im-
provement over L2 loss. As expected, due to PPMI,
LexVec performs better than SGNS in several word
similarity tasks, but in addition it also does so on the
semantic analogy task, nearly approaching GloVe.
LexVec generally outperforms GloVe on word sim-
ilarity tasks, possibly due to the factorization of the
PPMI matrix and to window sampling’s weighting
of negative co-occurrences.

We believe LexVec fares well on semantic analo-
gies because its vector-space does a good job of pre-
serving semantics, as evidenced by its performance
on word similarity tasks. We believe the poor syn-
tactic performance is a result of the PPMI measure.
PPMI-SVD also struggled with syntactic analogies
more than any other task. Levy et al. (2015) ob-
tained similar results, and suggest that using posi-
tional contexts as done by Levy et al. (2014) might
help in recovering syntactic analogies.

In terms of conﬁgurations, WSSGN S performed
marginally better than WSP P M I. We hypothesize
it is simply because of the additional computation.

While W and (W + ˜W ) are roughly equivalent on
word similarity tasks, W is better for analogies.
This is inline with results for PPMI-SVD and SGNS
models (Levy et al., 2015). Both mini-batch and
stochastic approaches result in similar scores for all
tasks. For the same parameter k of negative sam-
ples, the mini-batch approach uses 2 ∗ winW SP P M I
times more negative samples than stochastic when
using W SP P M I, and winW SSGNS times more sam-
ples when using W SSGN S. Therefore, the stochas-
tic approach is more computationally efﬁcient while
delivering similar performance.

6 Conclusion and Future Work

In this paper, we introduced LexVec, a method
for low-rank, weighted factorization of the PPMI
matrix that generates distributed word representa-
tions, favoring low reconstruction error on frequent
co-occurrences, whilst accounting for negative co-
occurrences as well. This is in contrast with PPMI-
SVD, which does no weighting, and GloVe, which
only considers positive co-occurrences. Finally, its
PPMI factorization seems to better capture seman-
tics when compared to the shifted PMI factorization
of SGNS. As a result, it outperforms PPMI-SVD and
SGNS in a variety of word similarity and semantic
analogy tasks, and generally outperforms GloVe on
similarity tasks.

Future work will examine the use of positional
contexts for improving performance on syntactic
analogy tasks. Moreover, we will explore further the
hyper-parameter space to ﬁnd globally optimal val-
ues for LexVec, and will experiment with the factor-
ization of other matrices for developing alternative
word representations.

Acknowledgments

This work has been partly funded by CAPES and
by projects AIM-WEST (FAPERGS-INRIA 1706-
2551/13-7), CNPq 482520/2012-4, 312114/2015-0,
“Simpliﬁcac¸ ˜ao Textual de Express˜oes Complexas”,
sponsored by Samsung Eletrˆonica da Amazˆonia
Ltda. under the terms of Brazilian federal law No.
8.248/91.

References

Marco Baroni, Georgiana Dinu,

and Germ´an
Kruszewski. 2014. Don’t count, predict!
a
systematic comparison of context-counting vs.
context-predicting semantic vectors. In Proceed-
ings of the 52nd Annual Meeting of the Associ-
ation for Computational Linguistics. volume 1,
pages 238–247.

Elia Bruni, Gemma Boleda, Marco Baroni, and
Nam-Khanh Tran. 2012. Distributional seman-
In Proceedings of the 50th
tics in technicolor.
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 136–
145.

John A. Bullinaria and Joseph P. Levy. 2007. Ex-
tracting semantic representations from word co-
occurrence statistics: A computational study. Be-
havior research methods 39(3):510–526.

John A Bullinaria and Joseph P Levy. 2012. Ex-
tracting semantic representations from word co-
occurrence statistics: stop-lists, stemming, and
svd. Behavior research methods 44(3):890–907.

John Caron. 2001.

Experiments with lsa scor-
In Proceedings of
ing: Optimal rank and basis.
the SIAM Computational Information Retrieval
Workshop. pages 157–169.

Kenneth W. Church and Patrick Hanks. 1990. Word
association norms, mutual information, and lex-
icography. Computational Linguistics 16(1):22–
29.

Ronan Collobert,

Jason Weston, L´eon Bottou,
Michael Karlen, Koray Kavukcuoglu, and Pavel
Kuksa. 2011. Natural language processing (al-
The Journal of Machine
most) from scratch.
Learning Research 12:2493–2537.

C. Eckert and G. Young. 1936. The approximation
of one matrix by another of lower rank. Psych.
1:211–218.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2001. Placing search in context: The
concept revisited. In Proceedings of the 10th in-
ternational conference on World Wide Web. ACM,
pages 406–414.

George A. Miller and Walter G. Charles. 1991. Con-
textual correlates of semantic similarity. Lan-
guage and cognitive processes 6(1):1–28.

Arvid ¨Osterlund, David ¨Odling,

and Magnus
Sahlgren. 2015. Factorization of latent variables
in distributional semantic models.
In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, Lisbon, Portugal,
pages 227–231.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors
for word representation. Proceedings of the Em-
piricial Methods in Natural Language Processing
(EMNLP 2014) 12.

Kira Radinsky,

Eugene Agichtein,

Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
word at a time: computing word relatedness using
In Proceedings of
temporal semantic analysis.
the 20th international conference on World wide
web. ACM, pages 337–346.

Herbert Rubenstein and John B. Goodenough. 1965.
Contextual correlates of synonymy. Communica-
tions of the ACM 8(10):627–633.

Richard Socher, John Bauer, Christopher D Man-
ning, and Andrew Y Ng. 2013. Parsing with com-
positional vector grammars.
In ACL (1). pages
455–465.

Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010. Word representations: a simple and gen-
eral method for semi-supervised learning. In Pro-
ceedings of the 48th annual meeting of the asso-
ciation for computational linguistics. Association
for Computational Linguistics, pages 384–394.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
Simlex-999: Evaluating semantic models with
(genuine) similarity estimation. Computational
Linguistics .

Eric H. Huang, Richard Socher, Christopher D.
Manning, and Andrew Y. Ng. 2012.
Improving
word representations via global context and mul-
tiple word prototypes. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 873–
882.

Omer Levy and Yoav Goldberg. 2014. Neural word
embedding as implicit matrix factorization.
In
Advances in Neural Information Processing Sys-
tems. pages 2177–2185.

Omer Levy, Yoav Goldberg, and Ido Dagan. 2015.
Improving distributional similarity with lessons
learned from word embeddings.
Transactions
of the Association for Computational Linguistics
pages 211–225.

Omer Levy, Yoav Goldberg, and Israel Ramat-Gan.
2014. Linguistic regularities in sparse and explicit
word representations. CoNLL-2014 page 171.

Dekang Lin. 1998. Automatic retrieval and cluster-
ing of similar words.
In of the 36th and 17th ,
Volume 2. Montreal, Quebec, Canada, pages 768–
774.

Minh-Thang Luong, Richard Socher, and Christo-
pher D. Manning. 2013. Better word representa-
tions with recursive neural networks for morphol-
ogy. CoNLL-2013 104.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efﬁcient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781 .

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S.
Corrado, and Jeff Dean. 2013b. Distributed rep-
resentations of words and phrases and their com-
positionality. In Advances in Neural Information
Processing Systems. pages 3111–3119.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013c. Linguistic regularities in continuous space
word representations.
In HLT-NAACL. pages
746–751.

6
1
0
2
 
n
u
J
 
7
 
 
]
L
C
.
s
c
[
 
 
2
v
9
1
8
0
0
.
6
0
6
1
:
v
i
X
r
a

Matrix Factorization using Window Sampling and Negative Sampling
for Improved Word Representations∗

Alexandre Salle1 Marco Idiart2 Aline Villavicencio1
1 Institute of Informatics
2 Physics Department
Universidade Federal do Rio Grande do Sul
Porto Alegre, Brazil
{atsalle,avillavicencio}@inf.ufrgs.br, idiart@if.ufrgs.br

Abstract

In this paper, we propose LexVec, a new
method for generating distributed word repre-
sentations that uses low-rank, weighted factor-
ization of the Positive Point-wise Mutual In-
formation matrix via stochastic gradient de-
scent, employing a weighting scheme that as-
signs heavier penalties for errors on frequent
co-occurrences while still accounting for neg-
ative co-occurrence. Evaluation on word sim-
ilarity and analogy tasks shows that LexVec
matches and often outperforms state-of-the-art
methods on many of these tasks.

1 Introduction

Distributed word representations, or word embed-
dings, have been successfully used in many NLP
applications (Turian et al., 2010; Collobert et al.,
2011; Socher et al., 2013). Traditionally, word
representations have been obtained using count-
based methods (Baroni et al., 2014), where the co-
occurrence matrix is derived directly from corpus
counts (Lin, 1998) or using association measures
like Point-wise Mutual Information (PMI) (Church
and Hanks, 1990) and Positive PMI (PPMI) (Bulli-
naria and Levy, 2007; Levy et al., 2014).

Techniques for generating lower-rank representa-
tions have also been employed, such as PPMI-SVD
(Levy et al., 2015) and GloVe (Pennington et al.,
2014), both achieving state-of-the-art performance
on a variety of tasks.

∗This is a preprint of the paper that will be presented at
the 54th Annual Meeting of the Association for Computational
Linguistics.

Alternatively, vector-space models can be gener-
ated with predictive methods, which generally out-
perform the count-based methods (Baroni et al.,
2014), the most notable of which is Skip-gram with
Negative Sampling (SGNS, Mikolov et al. (2013b)),
which uses a neural network to generate embed-
dings. It implicitly factorizes a shifted PMI matrix,
and its performance has been linked to the weight-
ing of positive and negative co-occurrences (Levy
and Goldberg, 2014).

In this paper, we present Lexical Vectors
(LexVec), a method for factorizing PPMI matrices
that combines characteristics of all these methods.
On the one hand, it uses SGNS window sampling,
negative sampling, and stochastic gradient descent
(SGD) to minimize a loss function that weights fre-
quent co-occurrences heavily but also takes into ac-
count negative co-occurrence. However, since PPMI
generally outperforms PMI on semantic similarity
tasks (Bullinaria and Levy, 2007), rather than im-
plicitly factorize a shifted PMI matrix (like SGNS),
LexVec explicitly factorizes the PPMI matrix.

This paper is organized as follows: First, we de-
scribe PPMI-SVD, GloVe, and SGNS (§2) before
introducing the proposed method, LexVec (§3), and
evaluating it on word similarity and analogy tasks
(§4). We conclude with an analysis of results and
discussion of future work.

We provide source code for the model at https:

//github.com/alexandres/lexvec.

2 Related Work

2.1 PPMI-SVD

Given a word w and a symmetric window of win
context words to the left and win to the right, the
co-occurrence matrix of elements Mwc is deﬁned as
the number of times a target word w and the context
word c co-occurred in the corpus within the window.
The PMI matrix is deﬁned as

P M Iwc = log

Mwc M∗∗
Mw∗ M∗c

(1)

where ’*’ represents the summation of the corre-
sponding index. As this matrix is unbounded in
the inferior limit, in most applications it is replaced
by its positive deﬁnite version, PPMI, where nega-
tive values are set to zero. The performance of the
PPMI matrix on word similarity tasks can be fur-
ther improved by using context-distribution smooth-
ing (Levy et al., 2015) and subsampling the cor-
pus (Mikolov et al., 2013b). As word embeddings
with lower dimensionality may improve efﬁciency
and generalization (Levy et al., 2015), the improved
PPMI∗ matrix can be factorized as a product of two
lower rank matrices.

P P M I

∗
wc ≃ Ww ˜W

⊤
c

(2)

where Ww and ˜Wc are d-dimensional row vectors
corresponding to vector embeddings for the target
and context words. Using the truncated SVD of
size d yields the factorization U ΣT ⊤ with the lowest
possible L2 error (Eckert and Young, 1936).

Levy et al. (2015) recommend using W = U Σp
as the word representations, as suggested by Bulli-
naria and Levy (2012), who borrowed the idea of
weighting singular values from the work of Caron
(2001) on Latent Semantic Analysis. Although
the optimal value of p is highly task-dependent
( ¨Osterlund et al., 2015), we set p = 0.5 as it has
been shown to perform well on the word similarity
and analogy tasks we use in our experiments (Levy
et al., 2015).

2.2 GloVe

GloVe (Pennington et al., 2014) factors the loga-
rithm of the co-occurrence matrix ˆM that considers
the position of the context words in the window. The

loss function for factorization is

1
2

=

LGloV e
wc

f ( ˆMwc)(Ww ˜W

⊤
c +bw +˜bc −log ˆMwc)2
(3)
where bw and ˜bc are bias terms, and f is a weighting
function deﬁned as

f (x) =

(x/xmax)β
1
(

if x < xmax
otherwise

(4)

W and ˜W are obtained by iterating over all non-zero
(w, c) cells in the co-occurrence matrix and mini-
mizing eq. (3) through SGD.

The weighting function (in eq.

(3)) penalizes
more heavily reconstruction error of frequent co-
occurrences,
improving on PPMI-SVD’s L2 loss,
which weights all reconstruction errors equally.
However, as it does not penalize reconstruction er-
rors for pairs with zero counts in the co-occurrence
matrix, no effort is made to scatter the vectors for
these pairs.

2.3 Skip-gram with Negative Sampling (SGNS)

SGNS (Mikolov et al., 2013b) trains a neural net-
work to predict the probability of observing a con-
text word c given a target word w, sliding a symmet-
ric window over a subsampled training corpus with
the window size being sampled uniformly from the
range [1, win]. Each observed (w, c) pair is com-
bined with k randomly sampled noise pairs (w, wi)
and used to calculate the loss function

LSGN S
wc

= log σ(Ww ˜Wc

⊤

)+

Ewi∼Pn(w) log σ(−Ww ˜W

⊤
wi)

(5)

k

i=1
X

where Pn(w) is the distribution from which noise
words wi are sampled.1 We refer to this routine
which SGNS uses for selecting (w, c) pairs by slid-
ing a context window over the corpus for loss calcu-
lation and SGD as window sampling.

SGNS is implicitly performing the weighted fac-
torization of a shifted PMI matrix (Levy and Gold-
berg, 2014). Window sampling ensures the fac-
torization weights frequent co-occurrences heavily,
but also takes into account negative co-occurrences,
thanks to negative sampling.

1Following Mikolov et al. (2013b) it is the unigram distribu-

tion raised to the 3/4 power.

3 LexVec

LexVec is based on the idea of factorizing the
PPMI matrix using a reconstruction loss function
that does not weight all errors equally, unlike
SVD, but instead penalizes errors of frequent co-
occurrences more heavily, while still treating nega-
tive co-occurrences, unlike GloVe. Moreover, given
that using PPMI results in better performance than
PMI on semantic tasks, we propose keeping the
SGNS weighting scheme by using window sampling
and negative sampling, but explicitly factorizing the
PPMI matrix rather than implicitly factorizing the
shifted PMI matrix. The LexVec loss function has
two terms

LexV ec
wc

L

=

(Ww ˜Wc

⊤ − P P M I

∗
wc)2

LexV ec
w

L

=

Ewi∼Pn(w)(Ww ˜Wwi

⊤ − P P M I

∗
wwi )2

1
2

1
2

k

X
i=1

(6)

(7)

We minimize eqs. (6) and (7) using two alternative
approaches:
Mini-Batch (MB): This variant executes gradient
descent in exactly the same way as SGNS. Every
time a pair (w, c) is observed by window sampling
and pairs (w, w1...k) drawn by negative sampling,
Ww, ˜Wc, and ˜Ww1...k are updated by gradient de-
scent on the sum of eq.(6) and eq.(7). The global
loss for this approach is

LLexV ec =

#(w, c) (LLexV ec

wc

+ LLexV ec
w

) (8)

X(w,c)

where #(w, c) is the number of times (w, c) is ob-
served in the subsampled corpus.
Stochastic (St): Every context window is extended
with k negative samples w1...k.
Iterative gradient
descent of eq. (6) is then run on pairs (w, cj ), for
j = 1, .., 2∗win and (w, ci), j = 1, .., k for each
window. The global loss for this approach is

LLexV ec′

=

#(w, c)LLexV ec

+

wc

X(w,c)
#(w)LLexV ec
w

w
X

(9)

If a pair (w, c) co-occurs frequently, #(w, c) will
weigh heavily in both eqs. (8) and (9), giving the
desired weighting for frequent co-occurrences. The
noise term, on the other hand, has corrections pro-
portional to #(w) and #(wi), for each pair (w, wi).
It produces corrections in pairs that due to fre-
quency should be in the corpus but are not observed,
therefore accounting automatically for negative co-
occurrences.

4 Materials

All models were trained on a dump of Wikipedia
from June 2015, split into sentences, with punctu-
ation removed, numbers converted to words, and
lower-cased. Words with less than 100 counts
were removed, resulting in a vocabulary of 302,203
words. All models generate embeddings of 300 di-
mensions.

The PPMI* matrix used by both PPMI-SVD and
LexVec was constructed using smoothing of α =
3/4 suggested in (Levy et al., 2015) and an un-
weighted window of size 2. A dirty subsampling
of the corpus is adopted for PPMI* and SGNS with
threshold of t = 10−5 (Mikolov et al., 2013b).2 Ad-
ditionally, SGNS uses 5 negative samples (Mikolov
et al., 2013b), a window of size 10 (Levy et al.,
2015), for 5 iterations with initial learning rate set
to the default 0.025. GloVe is run with a window of
size 10, xmax = 100, β = 3/4, for 50 iterations and
initial learning rate of 0.05 (Pennington et al., 2014).
In LexVec two window sampling alternatives are
compared: W SP P M I, which keeps the same ﬁxed
size win = 2 as used to create the P P M I ∗ ma-
trix; or W SSGN S, which adopts identical SGNS set-
tings (win = 10 with size randomization). We run
LexVec for 5 iterations over the training corpus.

All methods generate both word and context ma-
trices (W and ˜W ): W is used for SGNS, PPMI-SVD
and W + ˜W for GloVe (following Levy et al. (2015),
and W and W + ˜W for LexVec.

For evaluation, we use standard word similarity
and analogy tasks (Mikolov et al., 2013b; Levy et al.,
2014; Pennington et al., 2014; Levy et al., 2015). We
examine, in particular, if LexVec weighted PPMI∗
factorization outperforms SVD, GloVe (weighted

where #(w) is the number of times w is observed in
the subsampled corpus.

2Words with unigram relative frequency f > t are discarded

from the training corpus with probability pw = 1 −

pt/f .

Method
PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St. + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

WSim WRel MEN MTurk
.731
.719
.770
.770
.763
.748
.741
.768
.775
.745
.740

.731
.736
.763
.755
.760
.741
.733
.755
.762
.734
.728

.627
.643
.675
.650
.655
.636
.628
.654
.654
.645
.640

.617
.607
.670
.671
.671
.635
.622
.675
.673
.640
.628

RW SimLex-999 MC
.770
.303
.427
.725
.338
.400
.823
.339
.465
.824
.322
.455
.816
.336
.458
.827
.320
.456
.820
.338
.457
.824
.312
.448
.838
.339
.468
.814
.311
.447
.821
.339
.459

RG
.756
.774
.793
.830
.827
.820
.808
.827
.848
.802
.818

SCWS
.615
.573
.643
.623
.630
.632
.638
.626
.628
.624
.638

Table 1: Spearman rank correlation on word similarity tasks.

Method

PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

GSem
3CosAdd / 3CosMul
.460 / .498
.818 / .813
.773 / .777
.775 / .792
.794 / .807
.800 / .805
.787 / .782
.762 / .785
.792 / .809
.798 / .807
.779 / .778

GSyn
3CosAdd / 3CosMul
.445 / .455
.630 / .626
.642 / .644
.520 / .539
.543 / .555
.584 / .597
.597 / .613
.520 / .534
.536 / .553
.573 / .580
.600 / .614

MSR
3CosAdd / 3CosMul
.303 / .313
.539 / .547
.481 / .505
.371 / .413
.378 / .408
.421 / .457
.445 / .475
.349 / .386
.362 / .396
.399 / .435
.434 / .463

Table 2: Results on word analogy tasks, given as percent accuracy.

factorization of log ˆM ) and Skip-gram (implicit fac-
torization of the shifted PMI matrix), and compare
the stochastic and mini-batch approaches.

Word similarity tasks are:3 WS-353 Similarity
(WSim) and Relatedness (WRel) (Finkelstein et al.,
2001), MEN (Bruni et al., 2012), MTurk (Radin-
sky et al., 2011), RW (Luong et al., 2013), SimLex-
999 (Hill et al., 2015), MC (Miller and Charles,
1991), RG (Rubenstein and Goodenough, 1965),
and SCWS (Huang et al., 2012), calculated using
cosine. Word analogy tasks are: Google seman-
tic (GSem) and syntactic (GSyn) (Mikolov et al.,
2013a) and MSR syntactic analogy dataset (Mikolov
et al., 2013c), using 3CosAdd and 3CosM ul (Levy
et al., 2014).

5 Results

Results for word similarity and for the analogy tasks
are in tables 1 and 2, respectively. Compared with
PPMI-SVD, LexVec performs better in all tasks. As
they factorize the same P P M I ∗ matrix, it is the

3http://www.cs.cmu.edu/ mfaruqui/suite.html

loss weighting from window sampling that is an im-
provement over L2 loss. As expected, due to PPMI,
LexVec performs better than SGNS in several word
similarity tasks, but in addition it also does so on the
semantic analogy task, nearly approaching GloVe.
LexVec generally outperforms GloVe on word sim-
ilarity tasks, possibly due to the factorization of the
PPMI matrix and to window sampling’s weighting
of negative co-occurrences.

We believe LexVec fares well on semantic analo-
gies because its vector-space does a good job of pre-
serving semantics, as evidenced by its performance
on word similarity tasks. We believe the poor syn-
tactic performance is a result of the PPMI measure.
PPMI-SVD also struggled with syntactic analogies
more than any other task. Levy et al. (2015) ob-
tained similar results, and suggest that using posi-
tional contexts as done by Levy et al. (2014) might
help in recovering syntactic analogies.

In terms of conﬁgurations, WSSGN S performed
marginally better than WSP P M I. We hypothesize
it is simply because of the additional computation.

While W and (W + ˜W ) are roughly equivalent on
word similarity tasks, W is better for analogies.
This is inline with results for PPMI-SVD and SGNS
models (Levy et al., 2015). Both mini-batch and
stochastic approaches result in similar scores for all
tasks. For the same parameter k of negative sam-
ples, the mini-batch approach uses 2 ∗ winW SP P M I
times more negative samples than stochastic when
using W SP P M I, and winW SSGNS times more sam-
ples when using W SSGN S. Therefore, the stochas-
tic approach is more computationally efﬁcient while
delivering similar performance.

6 Conclusion and Future Work

In this paper, we introduced LexVec, a method
for low-rank, weighted factorization of the PPMI
matrix that generates distributed word representa-
tions, favoring low reconstruction error on frequent
co-occurrences, whilst accounting for negative co-
occurrences as well. This is in contrast with PPMI-
SVD, which does no weighting, and GloVe, which
only considers positive co-occurrences. Finally, its
PPMI factorization seems to better capture seman-
tics when compared to the shifted PMI factorization
of SGNS. As a result, it outperforms PPMI-SVD and
SGNS in a variety of word similarity and semantic
analogy tasks, and generally outperforms GloVe on
similarity tasks.

Future work will examine the use of positional
contexts for improving performance on syntactic
analogy tasks. Moreover, we will explore further the
hyper-parameter space to ﬁnd globally optimal val-
ues for LexVec, and will experiment with the factor-
ization of other matrices for developing alternative
word representations.

Acknowledgments

This work has been partly funded by CAPES and
by projects AIM-WEST (FAPERGS-INRIA 1706-
2551/13-7), CNPq 482520/2012-4, 312114/2015-0,
“Simpliﬁcac¸ ˜ao Textual de Express˜oes Complexas”,
sponsored by Samsung Eletrˆonica da Amazˆonia
Ltda. under the terms of Brazilian federal law No.
8.248/91.

References

Marco Baroni, Georgiana Dinu,

and Germ´an
Kruszewski. 2014. Don’t count, predict!
a
systematic comparison of context-counting vs.
context-predicting semantic vectors. In Proceed-
ings of the 52nd Annual Meeting of the Associ-
ation for Computational Linguistics. volume 1,
pages 238–247.

Elia Bruni, Gemma Boleda, Marco Baroni, and
Nam-Khanh Tran. 2012. Distributional seman-
In Proceedings of the 50th
tics in technicolor.
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 136–
145.

John A. Bullinaria and Joseph P. Levy. 2007. Ex-
tracting semantic representations from word co-
occurrence statistics: A computational study. Be-
havior research methods 39(3):510–526.

John A Bullinaria and Joseph P Levy. 2012. Ex-
tracting semantic representations from word co-
occurrence statistics: stop-lists, stemming, and
svd. Behavior research methods 44(3):890–907.

John Caron. 2001.

Experiments with lsa scor-
In Proceedings of
ing: Optimal rank and basis.
the SIAM Computational Information Retrieval
Workshop. pages 157–169.

Kenneth W. Church and Patrick Hanks. 1990. Word
association norms, mutual information, and lex-
icography. Computational Linguistics 16(1):22–
29.

Ronan Collobert,

Jason Weston, L´eon Bottou,
Michael Karlen, Koray Kavukcuoglu, and Pavel
Kuksa. 2011. Natural language processing (al-
The Journal of Machine
most) from scratch.
Learning Research 12:2493–2537.

C. Eckert and G. Young. 1936. The approximation
of one matrix by another of lower rank. Psych.
1:211–218.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2001. Placing search in context: The
concept revisited. In Proceedings of the 10th in-
ternational conference on World Wide Web. ACM,
pages 406–414.

George A. Miller and Walter G. Charles. 1991. Con-
textual correlates of semantic similarity. Lan-
guage and cognitive processes 6(1):1–28.

Arvid ¨Osterlund, David ¨Odling,

and Magnus
Sahlgren. 2015. Factorization of latent variables
in distributional semantic models.
In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, Lisbon, Portugal,
pages 227–231.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors
for word representation. Proceedings of the Em-
piricial Methods in Natural Language Processing
(EMNLP 2014) 12.

Kira Radinsky,

Eugene Agichtein,

Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
word at a time: computing word relatedness using
In Proceedings of
temporal semantic analysis.
the 20th international conference on World wide
web. ACM, pages 337–346.

Herbert Rubenstein and John B. Goodenough. 1965.
Contextual correlates of synonymy. Communica-
tions of the ACM 8(10):627–633.

Richard Socher, John Bauer, Christopher D Man-
ning, and Andrew Y Ng. 2013. Parsing with com-
positional vector grammars.
In ACL (1). pages
455–465.

Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010. Word representations: a simple and gen-
eral method for semi-supervised learning. In Pro-
ceedings of the 48th annual meeting of the asso-
ciation for computational linguistics. Association
for Computational Linguistics, pages 384–394.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
Simlex-999: Evaluating semantic models with
(genuine) similarity estimation. Computational
Linguistics .

Eric H. Huang, Richard Socher, Christopher D.
Manning, and Andrew Y. Ng. 2012.
Improving
word representations via global context and mul-
tiple word prototypes. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 873–
882.

Omer Levy and Yoav Goldberg. 2014. Neural word
embedding as implicit matrix factorization.
In
Advances in Neural Information Processing Sys-
tems. pages 2177–2185.

Omer Levy, Yoav Goldberg, and Ido Dagan. 2015.
Improving distributional similarity with lessons
learned from word embeddings.
Transactions
of the Association for Computational Linguistics
pages 211–225.

Omer Levy, Yoav Goldberg, and Israel Ramat-Gan.
2014. Linguistic regularities in sparse and explicit
word representations. CoNLL-2014 page 171.

Dekang Lin. 1998. Automatic retrieval and cluster-
ing of similar words.
In of the 36th and 17th ,
Volume 2. Montreal, Quebec, Canada, pages 768–
774.

Minh-Thang Luong, Richard Socher, and Christo-
pher D. Manning. 2013. Better word representa-
tions with recursive neural networks for morphol-
ogy. CoNLL-2013 104.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efﬁcient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781 .

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S.
Corrado, and Jeff Dean. 2013b. Distributed rep-
resentations of words and phrases and their com-
positionality. In Advances in Neural Information
Processing Systems. pages 3111–3119.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013c. Linguistic regularities in continuous space
word representations.
In HLT-NAACL. pages
746–751.

6
1
0
2
 
n
u
J
 
7
 
 
]
L
C
.
s
c
[
 
 
2
v
9
1
8
0
0
.
6
0
6
1
:
v
i
X
r
a

Matrix Factorization using Window Sampling and Negative Sampling
for Improved Word Representations∗

Alexandre Salle1 Marco Idiart2 Aline Villavicencio1
1 Institute of Informatics
2 Physics Department
Universidade Federal do Rio Grande do Sul
Porto Alegre, Brazil
{atsalle,avillavicencio}@inf.ufrgs.br, idiart@if.ufrgs.br

Abstract

In this paper, we propose LexVec, a new
method for generating distributed word repre-
sentations that uses low-rank, weighted factor-
ization of the Positive Point-wise Mutual In-
formation matrix via stochastic gradient de-
scent, employing a weighting scheme that as-
signs heavier penalties for errors on frequent
co-occurrences while still accounting for neg-
ative co-occurrence. Evaluation on word sim-
ilarity and analogy tasks shows that LexVec
matches and often outperforms state-of-the-art
methods on many of these tasks.

1 Introduction

Distributed word representations, or word embed-
dings, have been successfully used in many NLP
applications (Turian et al., 2010; Collobert et al.,
2011; Socher et al., 2013). Traditionally, word
representations have been obtained using count-
based methods (Baroni et al., 2014), where the co-
occurrence matrix is derived directly from corpus
counts (Lin, 1998) or using association measures
like Point-wise Mutual Information (PMI) (Church
and Hanks, 1990) and Positive PMI (PPMI) (Bulli-
naria and Levy, 2007; Levy et al., 2014).

Techniques for generating lower-rank representa-
tions have also been employed, such as PPMI-SVD
(Levy et al., 2015) and GloVe (Pennington et al.,
2014), both achieving state-of-the-art performance
on a variety of tasks.

∗This is a preprint of the paper that will be presented at
the 54th Annual Meeting of the Association for Computational
Linguistics.

Alternatively, vector-space models can be gener-
ated with predictive methods, which generally out-
perform the count-based methods (Baroni et al.,
2014), the most notable of which is Skip-gram with
Negative Sampling (SGNS, Mikolov et al. (2013b)),
which uses a neural network to generate embed-
dings. It implicitly factorizes a shifted PMI matrix,
and its performance has been linked to the weight-
ing of positive and negative co-occurrences (Levy
and Goldberg, 2014).

In this paper, we present Lexical Vectors
(LexVec), a method for factorizing PPMI matrices
that combines characteristics of all these methods.
On the one hand, it uses SGNS window sampling,
negative sampling, and stochastic gradient descent
(SGD) to minimize a loss function that weights fre-
quent co-occurrences heavily but also takes into ac-
count negative co-occurrence. However, since PPMI
generally outperforms PMI on semantic similarity
tasks (Bullinaria and Levy, 2007), rather than im-
plicitly factorize a shifted PMI matrix (like SGNS),
LexVec explicitly factorizes the PPMI matrix.

This paper is organized as follows: First, we de-
scribe PPMI-SVD, GloVe, and SGNS (§2) before
introducing the proposed method, LexVec (§3), and
evaluating it on word similarity and analogy tasks
(§4). We conclude with an analysis of results and
discussion of future work.

We provide source code for the model at https:

//github.com/alexandres/lexvec.

2 Related Work

2.1 PPMI-SVD

Given a word w and a symmetric window of win
context words to the left and win to the right, the
co-occurrence matrix of elements Mwc is deﬁned as
the number of times a target word w and the context
word c co-occurred in the corpus within the window.
The PMI matrix is deﬁned as

P M Iwc = log

Mwc M∗∗
Mw∗ M∗c

(1)

where ’*’ represents the summation of the corre-
sponding index. As this matrix is unbounded in
the inferior limit, in most applications it is replaced
by its positive deﬁnite version, PPMI, where nega-
tive values are set to zero. The performance of the
PPMI matrix on word similarity tasks can be fur-
ther improved by using context-distribution smooth-
ing (Levy et al., 2015) and subsampling the cor-
pus (Mikolov et al., 2013b). As word embeddings
with lower dimensionality may improve efﬁciency
and generalization (Levy et al., 2015), the improved
PPMI∗ matrix can be factorized as a product of two
lower rank matrices.

P P M I

∗
wc ≃ Ww ˜W

⊤
c

(2)

where Ww and ˜Wc are d-dimensional row vectors
corresponding to vector embeddings for the target
and context words. Using the truncated SVD of
size d yields the factorization U ΣT ⊤ with the lowest
possible L2 error (Eckert and Young, 1936).

Levy et al. (2015) recommend using W = U Σp
as the word representations, as suggested by Bulli-
naria and Levy (2012), who borrowed the idea of
weighting singular values from the work of Caron
(2001) on Latent Semantic Analysis. Although
the optimal value of p is highly task-dependent
( ¨Osterlund et al., 2015), we set p = 0.5 as it has
been shown to perform well on the word similarity
and analogy tasks we use in our experiments (Levy
et al., 2015).

2.2 GloVe

GloVe (Pennington et al., 2014) factors the loga-
rithm of the co-occurrence matrix ˆM that considers
the position of the context words in the window. The

loss function for factorization is

1
2

=

LGloV e
wc

f ( ˆMwc)(Ww ˜W

⊤
c +bw +˜bc −log ˆMwc)2
(3)
where bw and ˜bc are bias terms, and f is a weighting
function deﬁned as

f (x) =

(x/xmax)β
1
(

if x < xmax
otherwise

(4)

W and ˜W are obtained by iterating over all non-zero
(w, c) cells in the co-occurrence matrix and mini-
mizing eq. (3) through SGD.

The weighting function (in eq.

(3)) penalizes
more heavily reconstruction error of frequent co-
occurrences,
improving on PPMI-SVD’s L2 loss,
which weights all reconstruction errors equally.
However, as it does not penalize reconstruction er-
rors for pairs with zero counts in the co-occurrence
matrix, no effort is made to scatter the vectors for
these pairs.

2.3 Skip-gram with Negative Sampling (SGNS)

SGNS (Mikolov et al., 2013b) trains a neural net-
work to predict the probability of observing a con-
text word c given a target word w, sliding a symmet-
ric window over a subsampled training corpus with
the window size being sampled uniformly from the
range [1, win]. Each observed (w, c) pair is com-
bined with k randomly sampled noise pairs (w, wi)
and used to calculate the loss function

LSGN S
wc

= log σ(Ww ˜Wc

⊤

)+

Ewi∼Pn(w) log σ(−Ww ˜W

⊤
wi)

(5)

k

i=1
X

where Pn(w) is the distribution from which noise
words wi are sampled.1 We refer to this routine
which SGNS uses for selecting (w, c) pairs by slid-
ing a context window over the corpus for loss calcu-
lation and SGD as window sampling.

SGNS is implicitly performing the weighted fac-
torization of a shifted PMI matrix (Levy and Gold-
berg, 2014). Window sampling ensures the fac-
torization weights frequent co-occurrences heavily,
but also takes into account negative co-occurrences,
thanks to negative sampling.

1Following Mikolov et al. (2013b) it is the unigram distribu-

tion raised to the 3/4 power.

3 LexVec

LexVec is based on the idea of factorizing the
PPMI matrix using a reconstruction loss function
that does not weight all errors equally, unlike
SVD, but instead penalizes errors of frequent co-
occurrences more heavily, while still treating nega-
tive co-occurrences, unlike GloVe. Moreover, given
that using PPMI results in better performance than
PMI on semantic tasks, we propose keeping the
SGNS weighting scheme by using window sampling
and negative sampling, but explicitly factorizing the
PPMI matrix rather than implicitly factorizing the
shifted PMI matrix. The LexVec loss function has
two terms

LexV ec
wc

L

=

(Ww ˜Wc

⊤ − P P M I

∗
wc)2

LexV ec
w

L

=

Ewi∼Pn(w)(Ww ˜Wwi

⊤ − P P M I

∗
wwi )2

1
2

1
2

k

X
i=1

(6)

(7)

We minimize eqs. (6) and (7) using two alternative
approaches:
Mini-Batch (MB): This variant executes gradient
descent in exactly the same way as SGNS. Every
time a pair (w, c) is observed by window sampling
and pairs (w, w1...k) drawn by negative sampling,
Ww, ˜Wc, and ˜Ww1...k are updated by gradient de-
scent on the sum of eq.(6) and eq.(7). The global
loss for this approach is

LLexV ec =

#(w, c) (LLexV ec

wc

+ LLexV ec
w

) (8)

X(w,c)

where #(w, c) is the number of times (w, c) is ob-
served in the subsampled corpus.
Stochastic (St): Every context window is extended
with k negative samples w1...k.
Iterative gradient
descent of eq. (6) is then run on pairs (w, cj ), for
j = 1, .., 2∗win and (w, ci), j = 1, .., k for each
window. The global loss for this approach is

LLexV ec′

=

#(w, c)LLexV ec

+

wc

X(w,c)
#(w)LLexV ec
w

w
X

(9)

If a pair (w, c) co-occurs frequently, #(w, c) will
weigh heavily in both eqs. (8) and (9), giving the
desired weighting for frequent co-occurrences. The
noise term, on the other hand, has corrections pro-
portional to #(w) and #(wi), for each pair (w, wi).
It produces corrections in pairs that due to fre-
quency should be in the corpus but are not observed,
therefore accounting automatically for negative co-
occurrences.

4 Materials

All models were trained on a dump of Wikipedia
from June 2015, split into sentences, with punctu-
ation removed, numbers converted to words, and
lower-cased. Words with less than 100 counts
were removed, resulting in a vocabulary of 302,203
words. All models generate embeddings of 300 di-
mensions.

The PPMI* matrix used by both PPMI-SVD and
LexVec was constructed using smoothing of α =
3/4 suggested in (Levy et al., 2015) and an un-
weighted window of size 2. A dirty subsampling
of the corpus is adopted for PPMI* and SGNS with
threshold of t = 10−5 (Mikolov et al., 2013b).2 Ad-
ditionally, SGNS uses 5 negative samples (Mikolov
et al., 2013b), a window of size 10 (Levy et al.,
2015), for 5 iterations with initial learning rate set
to the default 0.025. GloVe is run with a window of
size 10, xmax = 100, β = 3/4, for 50 iterations and
initial learning rate of 0.05 (Pennington et al., 2014).
In LexVec two window sampling alternatives are
compared: W SP P M I, which keeps the same ﬁxed
size win = 2 as used to create the P P M I ∗ ma-
trix; or W SSGN S, which adopts identical SGNS set-
tings (win = 10 with size randomization). We run
LexVec for 5 iterations over the training corpus.

All methods generate both word and context ma-
trices (W and ˜W ): W is used for SGNS, PPMI-SVD
and W + ˜W for GloVe (following Levy et al. (2015),
and W and W + ˜W for LexVec.

For evaluation, we use standard word similarity
and analogy tasks (Mikolov et al., 2013b; Levy et al.,
2014; Pennington et al., 2014; Levy et al., 2015). We
examine, in particular, if LexVec weighted PPMI∗
factorization outperforms SVD, GloVe (weighted

where #(w) is the number of times w is observed in
the subsampled corpus.

2Words with unigram relative frequency f > t are discarded

from the training corpus with probability pw = 1 −

pt/f .

Method
PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St. + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

WSim WRel MEN MTurk
.731
.719
.770
.770
.763
.748
.741
.768
.775
.745
.740

.627
.643
.675
.650
.655
.636
.628
.654
.654
.645
.640

.731
.736
.763
.755
.760
.741
.733
.755
.762
.734
.728

.617
.607
.670
.671
.671
.635
.622
.675
.673
.640
.628

RW SimLex-999 MC
.770
.303
.427
.725
.338
.400
.823
.339
.465
.824
.322
.455
.816
.336
.458
.827
.320
.456
.820
.338
.457
.824
.312
.448
.838
.339
.468
.814
.311
.447
.821
.339
.459

RG
.756
.774
.793
.830
.827
.820
.808
.827
.848
.802
.818

SCWS
.615
.573
.643
.623
.630
.632
.638
.626
.628
.624
.638

Table 1: Spearman rank correlation on word similarity tasks.

Method

PPMI-SVD
GloVe
SGNS
LexVec + MB + W SP P M I + (W + ˜W )
LexVec + St + W SP P M I + (W + ˜W )
LexVec + MB + W SP P M I + W
LexVec + St. + W SP P M I + W
LexVec + MB + W SSGNS + (W + ˜W )
LexVec + St. + W SSGNS + (W + ˜W )
LexVec + MB + W SSGNS + W
LexVec + St. + W SSGNS + W

GSem
3CosAdd / 3CosMul
.460 / .498
.818 / .813
.773 / .777
.775 / .792
.794 / .807
.800 / .805
.787 / .782
.762 / .785
.792 / .809
.798 / .807
.779 / .778

GSyn
3CosAdd / 3CosMul
.445 / .455
.630 / .626
.642 / .644
.520 / .539
.543 / .555
.584 / .597
.597 / .613
.520 / .534
.536 / .553
.573 / .580
.600 / .614

MSR
3CosAdd / 3CosMul
.303 / .313
.539 / .547
.481 / .505
.371 / .413
.378 / .408
.421 / .457
.445 / .475
.349 / .386
.362 / .396
.399 / .435
.434 / .463

Table 2: Results on word analogy tasks, given as percent accuracy.

factorization of log ˆM ) and Skip-gram (implicit fac-
torization of the shifted PMI matrix), and compare
the stochastic and mini-batch approaches.

Word similarity tasks are:3 WS-353 Similarity
(WSim) and Relatedness (WRel) (Finkelstein et al.,
2001), MEN (Bruni et al., 2012), MTurk (Radin-
sky et al., 2011), RW (Luong et al., 2013), SimLex-
999 (Hill et al., 2015), MC (Miller and Charles,
1991), RG (Rubenstein and Goodenough, 1965),
and SCWS (Huang et al., 2012), calculated using
cosine. Word analogy tasks are: Google seman-
tic (GSem) and syntactic (GSyn) (Mikolov et al.,
2013a) and MSR syntactic analogy dataset (Mikolov
et al., 2013c), using 3CosAdd and 3CosM ul (Levy
et al., 2014).

5 Results

Results for word similarity and for the analogy tasks
are in tables 1 and 2, respectively. Compared with
PPMI-SVD, LexVec performs better in all tasks. As
they factorize the same P P M I ∗ matrix, it is the

3http://www.cs.cmu.edu/ mfaruqui/suite.html

loss weighting from window sampling that is an im-
provement over L2 loss. As expected, due to PPMI,
LexVec performs better than SGNS in several word
similarity tasks, but in addition it also does so on the
semantic analogy task, nearly approaching GloVe.
LexVec generally outperforms GloVe on word sim-
ilarity tasks, possibly due to the factorization of the
PPMI matrix and to window sampling’s weighting
of negative co-occurrences.

We believe LexVec fares well on semantic analo-
gies because its vector-space does a good job of pre-
serving semantics, as evidenced by its performance
on word similarity tasks. We believe the poor syn-
tactic performance is a result of the PPMI measure.
PPMI-SVD also struggled with syntactic analogies
more than any other task. Levy et al. (2015) ob-
tained similar results, and suggest that using posi-
tional contexts as done by Levy et al. (2014) might
help in recovering syntactic analogies.

In terms of conﬁgurations, WSSGN S performed
marginally better than WSP P M I. We hypothesize
it is simply because of the additional computation.

While W and (W + ˜W ) are roughly equivalent on
word similarity tasks, W is better for analogies.
This is inline with results for PPMI-SVD and SGNS
models (Levy et al., 2015). Both mini-batch and
stochastic approaches result in similar scores for all
tasks. For the same parameter k of negative sam-
ples, the mini-batch approach uses 2 ∗ winW SP P M I
times more negative samples than stochastic when
using W SP P M I, and winW SSGNS times more sam-
ples when using W SSGN S. Therefore, the stochas-
tic approach is more computationally efﬁcient while
delivering similar performance.

6 Conclusion and Future Work

In this paper, we introduced LexVec, a method
for low-rank, weighted factorization of the PPMI
matrix that generates distributed word representa-
tions, favoring low reconstruction error on frequent
co-occurrences, whilst accounting for negative co-
occurrences as well. This is in contrast with PPMI-
SVD, which does no weighting, and GloVe, which
only considers positive co-occurrences. Finally, its
PPMI factorization seems to better capture seman-
tics when compared to the shifted PMI factorization
of SGNS. As a result, it outperforms PPMI-SVD and
SGNS in a variety of word similarity and semantic
analogy tasks, and generally outperforms GloVe on
similarity tasks.

Future work will examine the use of positional
contexts for improving performance on syntactic
analogy tasks. Moreover, we will explore further the
hyper-parameter space to ﬁnd globally optimal val-
ues for LexVec, and will experiment with the factor-
ization of other matrices for developing alternative
word representations.

Acknowledgments

This work has been partly funded by CAPES and
by projects AIM-WEST (FAPERGS-INRIA 1706-
2551/13-7), CNPq 482520/2012-4, 312114/2015-0,
“Simpliﬁcac¸ ˜ao Textual de Express˜oes Complexas”,
sponsored by Samsung Eletrˆonica da Amazˆonia
Ltda. under the terms of Brazilian federal law No.
8.248/91.

References

Marco Baroni, Georgiana Dinu,

and Germ´an
Kruszewski. 2014. Don’t count, predict!
a
systematic comparison of context-counting vs.
context-predicting semantic vectors. In Proceed-
ings of the 52nd Annual Meeting of the Associ-
ation for Computational Linguistics. volume 1,
pages 238–247.

Elia Bruni, Gemma Boleda, Marco Baroni, and
Nam-Khanh Tran. 2012. Distributional seman-
In Proceedings of the 50th
tics in technicolor.
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 136–
145.

John A. Bullinaria and Joseph P. Levy. 2007. Ex-
tracting semantic representations from word co-
occurrence statistics: A computational study. Be-
havior research methods 39(3):510–526.

John A Bullinaria and Joseph P Levy. 2012. Ex-
tracting semantic representations from word co-
occurrence statistics: stop-lists, stemming, and
svd. Behavior research methods 44(3):890–907.

John Caron. 2001.

Experiments with lsa scor-
In Proceedings of
ing: Optimal rank and basis.
the SIAM Computational Information Retrieval
Workshop. pages 157–169.

Kenneth W. Church and Patrick Hanks. 1990. Word
association norms, mutual information, and lex-
icography. Computational Linguistics 16(1):22–
29.

Ronan Collobert,

Jason Weston, L´eon Bottou,
Michael Karlen, Koray Kavukcuoglu, and Pavel
Kuksa. 2011. Natural language processing (al-
The Journal of Machine
most) from scratch.
Learning Research 12:2493–2537.

C. Eckert and G. Young. 1936. The approximation
of one matrix by another of lower rank. Psych.
1:211–218.

Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Ey-
tan Ruppin. 2001. Placing search in context: The
concept revisited. In Proceedings of the 10th in-
ternational conference on World Wide Web. ACM,
pages 406–414.

George A. Miller and Walter G. Charles. 1991. Con-
textual correlates of semantic similarity. Lan-
guage and cognitive processes 6(1):1–28.

Arvid ¨Osterlund, David ¨Odling,

and Magnus
Sahlgren. 2015. Factorization of latent variables
in distributional semantic models.
In Proceed-
ings of the 2015 Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics, Lisbon, Portugal,
pages 227–231.

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors
for word representation. Proceedings of the Em-
piricial Methods in Natural Language Processing
(EMNLP 2014) 12.

Kira Radinsky,

Eugene Agichtein,

Evgeniy
Gabrilovich, and Shaul Markovitch. 2011. A
word at a time: computing word relatedness using
In Proceedings of
temporal semantic analysis.
the 20th international conference on World wide
web. ACM, pages 337–346.

Herbert Rubenstein and John B. Goodenough. 1965.
Contextual correlates of synonymy. Communica-
tions of the ACM 8(10):627–633.

Richard Socher, John Bauer, Christopher D Man-
ning, and Andrew Y Ng. 2013. Parsing with com-
positional vector grammars.
In ACL (1). pages
455–465.

Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010. Word representations: a simple and gen-
eral method for semi-supervised learning. In Pro-
ceedings of the 48th annual meeting of the asso-
ciation for computational linguistics. Association
for Computational Linguistics, pages 384–394.

Felix Hill, Roi Reichart, and Anna Korhonen. 2015.
Simlex-999: Evaluating semantic models with
(genuine) similarity estimation. Computational
Linguistics .

Eric H. Huang, Richard Socher, Christopher D.
Manning, and Andrew Y. Ng. 2012.
Improving
word representations via global context and mul-
tiple word prototypes. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics: Long Papers-Volume 1. Asso-
ciation for Computational Linguistics, pages 873–
882.

Omer Levy and Yoav Goldberg. 2014. Neural word
embedding as implicit matrix factorization.
In
Advances in Neural Information Processing Sys-
tems. pages 2177–2185.

Omer Levy, Yoav Goldberg, and Ido Dagan. 2015.
Improving distributional similarity with lessons
learned from word embeddings.
Transactions
of the Association for Computational Linguistics
pages 211–225.

Omer Levy, Yoav Goldberg, and Israel Ramat-Gan.
2014. Linguistic regularities in sparse and explicit
word representations. CoNLL-2014 page 171.

Dekang Lin. 1998. Automatic retrieval and cluster-
ing of similar words.
In of the 36th and 17th ,
Volume 2. Montreal, Quebec, Canada, pages 768–
774.

Minh-Thang Luong, Richard Socher, and Christo-
pher D. Manning. 2013. Better word representa-
tions with recursive neural networks for morphol-
ogy. CoNLL-2013 104.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
frey Dean. 2013a. Efﬁcient estimation of word
representations in vector space. arXiv preprint
arXiv:1301.3781 .

Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S.
Corrado, and Jeff Dean. 2013b. Distributed rep-
resentations of words and phrases and their com-
positionality. In Advances in Neural Information
Processing Systems. pages 3111–3119.

Tomas Mikolov, Wen-tau Yih, and Geoffrey Zweig.
2013c. Linguistic regularities in continuous space
word representations.
In HLT-NAACL. pages
746–751.

