Constrained Output Embeddings for End-to-End Code-Switching Speech
Recognition with Only Monolingual Data

Yerbolat Khassanov1, Haihua Xu2, Van Tung Pham1,2, Zhiping Zeng2, Eng Siong Chng1,2,
Chongjia Ni3 and Bin Ma3

1School of Computer Science and Engineering, Nanyang Technological University, Singapore
2Temasek Laboratories, Nanyang Technological University, Singapore
3Machine Intelligence Technology, Alibaba Group
{yerbolat002,haihuaxu,vantung001,zengzp,aseschng}@ntu.edu.sg,
{ni.chongjia,b.ma}@alibaba-inc.com

9
1
0
2
 
l
u
J
 
1
3
 
 
]
L
C
.
s
c
[
 
 
2
v
2
0
8
3
0
.
4
0
9
1
:
v
i
X
r
a

Abstract

The lack of code-switch training data is one of the major con-
cerns in the development of end-to-end code-switching auto-
matic speech recognition (ASR) models. In this work, we pro-
pose a method to train an improved end-to-end code-switching
ASR using only monolingual data. Our method encourages the
distributions of output token embeddings of monolingual lan-
guages to be similar, and hence, promotes the ASR model to
easily code-switch between languages. Speciﬁcally, we propose
to use Jensen-Shannon divergence and cosine distance based
constraints. The former will enforce output embeddings of
monolingual languages to possess similar distributions, while
the later simply brings the centroids of two distributions to be
close to each other. Experimental results demonstrate high ef-
fectiveness of the proposed method, yielding up to 4.5% abso-
lute mixed error rate improvement on Mandarin-English code-
switching ASR task.
Index Terms: code-switching, embeddings, Jensen-Shannon
divergence, cosine distance, speech recognition, end-to-end

1. Introduction

The code-switching (CS) is a practice of using more than one
language within a single discourse which poses a serious prob-
lem to many speech and language processing applications. Re-
cently, the end-to-end code-switching automatic speech recog-
nition (E2E-CS-ASR) gained increasing interest where impres-
sive improvements have been reported [1, 2, 3, 4]. The improve-
ments are mainly achieved for CS languages where sufﬁcient
amount of transcribed CS data is available such as Mandarin-
English [5]. Unfortunately, for the vast majority of other CS
languages the CS data remains too small or even non-existent.
Several attempts have been made to alleviate the CS data
scarcity problem. Notably, [6, 7] used semi-supervised ap-
proaches to utilize untranscribed CS speech data. On the other
hand, [2, 3, 4] employed transfer learning techniques where ad-
ditional monolingual speech corpora are either used for pre-
training or joint-training. On the account of increased train-
ing data, these approaches achieved signiﬁcant improvements.
However, all these approaches rely on the cross-lingual signal
imposed by some CS data or other linguistic resources such as
a word-aligned parallel corpus.

In this work, we aim to build an E2E-CS-ASR using only
monolingual data without any form of cross-lingual resource.
The only assumption we make is an availability of monolingual
speech corpus for each of the CS languages. This setup is im-
portant and common to many low-resource CS languages, but

has not received much research attention. Besides, it will serve
as a strong baseline performance that any system trained on CS
data should reach.

However, due to the absence of CS train data, the E2E-CS-
ASR model will fail to learn cross-lingual relations between
monolingual languages. Consequently, the output token embed-
dings of monolingual languages will diverge from each other,
and hence, prevent the E2E-CS-ASR model from switching be-
tween languages. Indeed, we examined the shared output token
embedding space learned by E2E-CS-ASR and observed that
output token embeddings of two monolingual languages are dif-
ferently distributed and located apart from each other (see Fig-
ure 3a). We hypothesize that the difference between output to-
ken embedding distributions restricts the E2E-CS-ASR model
from correctly recognizing CS utterances.

To address this problem, we propose to impose additional
constraints which will encourage output token embeddings of
monolingual languages to be similar. Speciﬁcally, we propose
to use Jensen-Shannon divergence and cosine distance based
constraints. The former will enforce output token embeddings
of monolingual languages to possess similar distributions, while
the later simply brings the centroids of two distributions to be
close to each other. In addition, the imposed constraints will
act as a regularization term to prevent overﬁtting. Our method
is inspired by [8, 9] where intermediate feature representations
of text and speech are forced to be close to each other. We
evaluated our method on Mandarin-English CS language pair
from the SEAME [5] corpus where we removed all CS utter-
ances from the training data. Experimental results demonstrate
high effectiveness of the proposed method, yielding up to 4.5%
absolute mixed error rate improvement.

The rest of the paper is organized as follows. In Section 2,
we review related works addressing the CS data scarcity prob-
lem.
In Section 3, we brieﬂy describe the baseline E2E-CS-
ASR model. In Section 4, we present the constrained output
embeddings method. Section 5 describes the experiment setup
and discusses the obtained results. Lastly, Section 6 concludes
the paper.

2. Related works

An early approach to build CS-ASR using only monolingual
data is so-called “multi-pass” system [10]. The multi-pass sys-
tem is based on traditional ASR and consists of three main steps.
First, the CS utterances are split into monolingual speech seg-
ments using the language boundary detection system. Next, ob-
tained segments are labeled into speciﬁc languages using the

language identiﬁcation system. Lastly, labeled segments are de-
coded using the corresponding monolingual ASR system. How-
ever, this approach is prone to error-propagation between dif-
ferent steps. Moreover, the language boundary detection and
language identiﬁcation tasks are considered difﬁcult.

More recently, the semi-supervised approaches have been
explored to circumvent the CS data scarcity problem. For in-
stance, [6] used their best CS-ASR to transcribe a raw CS
speech, the transcribed speech is then used to re-train the CS-
ASR. In a similar manner, [7] employed their best CS-ASR
to re-transcribe the poorly transcribed portion of the training
set and then use it to re-train the model. Although the semi-
supervised approaches are promising, they still require CS data
as well as other systems such as language identiﬁcation.

In the context of end-to-end ASR models, the transfer learn-
ing techniques are widely used to alleviate the CS data scarcity
problem. For example, [2, 3] used monolingual data to pre-
train the model followed by the ﬁne-tuning with CS data. On
the other hand, [4] used both CS and monolingual data for pre-
training followed by the standard ﬁne-tuning with the CS only
data. While being effective, the transfer learning based tech-
niques highly rely on the CS data.

Generating synthesized CS data using only monolingual
data has been also explored in [11, 12, 13, 14], however, they
only address the textual data scarcity problem.

3. Baseline E2E-CS-ASR

Figure 1 illustrates the baseline E2E-CS-ASR model based
on hybrid CTC/Attention architecture [15] which incorpo-
rates the advantages of both Connectionist Temporal Classiﬁ-
cation (CTC) model [16] and attention-based encoder-decoder
model [17]. Speciﬁcally, the CTC and attention-based de-
coder modules share a common encoder network and are jointly
trained.

Encoder. The shared encoder network takes a sequence
of T -length speech features x = (x1, . . . , xT ) and trans-
forms them into L-length high level representations h =
(h1, . . . , hL) where L < T . The encoder is modeled as a
deep convolutional neural network (CNN) based on the VGG
network [18] followed by several bidirectional long short-term
memory (BLSTM) layers.

h = BLSTM(CNN(x))

(1)

CTC module. The CTC sits on top of the encoder and
computes the posterior distribution PCTC(y|x) of N -length out-
put token sequence y = (y1, . . . , yN ). The CTC loss is deﬁned
as a negative log-likelihood of the ground truth sequences y∗:
LCTC = − log PCTC(y∗|x)

(2)

Attention-based decoder module. The attention-based
decoder computes the probability distribution PATT(y|x) over
the output token sequence y given the previously emitted to-
kens y<n and input feature sequence x using the chain rule:

αn = Attention(sn−1, αn−1, h)

cn =

αn,jhj

sn = LSTM(sn−1, cn, InputProj(yn−1))

P (yn|y<n, x) = Softmax(OutputProj(sn))

PATT(y|x) =

P (yn|y<n, x)

(3)

(4)

(5)
(6)

(7)

L
(cid:88)

j=1

(cid:89)

n

Figure 1: Hybrid CTC/Attention end-to-end ASR architecture
with constrained output token embeddings. The output token
embeddings are learned by the parametric matrix of linear out-
put projection layer (OutputProj).

(8)

(9)

where αn is an attention weight vector produced by Attention(·)
module, cn is a context vector which encapsulates the informa-
tion in the input speech features required to generate the next to-
ken, sn is a hidden state produced by unidirectional long short-
term memory (LSTM). InputProj(·) and OutputProj(·) are input
and output linear projection layers with learnable matrix param-
eters, respectively. The input and output learnable matrices hold
input and output embedding representations of tokens, respec-
tively. The loss function of attention-based decoder module is
computed using Eq. (7) as:

LATT = − log PATT(y∗|x)

Finally, the CTC and attention-based decoder modules are
jointly trained within multi-task learning (MTL) framework as
follows:

LMTL = λLCTC + (1 − λ)LATT

where λ controls the contribution of the losses.

Our proposed method will append additional constraint into
the MTL framework which will mainly impact the learnable
matrix parameter of OutputProj(·) layer in Eq. (6) as will be
explained in the following section.

4. Constrained output embeddings

In this work, we aim to build E2E-CS-ASR using only mono-
lingual data. This setup is essential for the vast majority of
CS languages for which CS data is non-existent. However,
an E2E-CS-ASR model trained on monolingual data will fail
to learn language switch-points, and hence, will perform sub-
optimally on input CS speech. We investigated the E2E-CS-
ASR model and found that the output token representations
of monolingual languages, modeled by linear projection layer
OutputProj(·), to be different and apart from each other (see
Figure 3a). We hypothesize that the difference between output
token distributions of monolingual languages restricts the E2E-
CS-ASR model from switching between languages.

To reduce the discrepancy between these distributions, we
propose to constrain output token embeddings using Jensen-
Shannon divergence (JSD) and cosine distance (CD). These
constraints will typically act as a cross-lingual signal source
which will force output token embedding representations of

Table 1: SEAME dataset statistics after removing the CS utter-
ances from the train set. ‘Man’ and ‘Eng’ refer to Mandarin
and English languages, respectively

# tokens
# utterances
(# CS utterances)
Duration

train

Eng

Man
∼216k ∼109k
17,925
21,476
(0)
(0)
11.8 hr
15.8 hr

testman

testeng

∼96k
6,531
(4,418)
7.5 hr

∼54k
5,321
(2,652)
3.9 hr

monolingual languages to be similar. Speciﬁcally, JSD will en-
force the output token embeddings of monolingual languages
to possess similar distributions. On the other hand, CD will en-
force the centroids of two distributions to be close to each other.
First, we assume that
learned output token embeddings of monolingual language pair
L1 and L2 follow a z-dimensional multivariate Gaussian distri-
bution:

Jensen-Shannon divergence.

L1 ∼ N ormal(µ1, Σ1)
L2 ∼ N ormal(µ2, Σ2)

(10)
(11)

The JSD between these distributions is then computed as:

LJSD =tr(Σ−1

1 Σ2 + Σ1Σ−1
2 )
1 + Σ−1
+ (µ1 − µ2)T (Σ−1

2 )(µ1 − µ2) − 2z

(12)

Lastly, we fuse the JSD constraint with the loss function of

E2E-CS-ASR using Eq. (9) as follows:

LMTL = λLCTC + (1 − λ)(αLATT + (1 − α)LJSD)

(13)

where α ∈ [0, 1] controls the importance of the constraint.

Cosine distance. We ﬁrst compute the centroid vectors C1
and C2 obtained by taking the mean of all output token embed-
dings of monolingual language pair L1 and L2, respectively.
The cosine distance between two centroids is then computed as
follows:

LCD = 1 −

C1 · C2
(cid:107)C1(cid:107) (cid:107)C2(cid:107)

(14)

The CD constraint is integrated into the loss function in a simi-
lar way as Eq. (13).

5. Experiment

5.1. Dataset

We evaluate our method on Mandarin-English CS language pair
from the SEAME [5] corpus (see Table 1). We used standard
data splitting1 on par with previous works [1, 7] which con-
sists of 3 sets: train, testman and testeng. To match the no CS
data scenario, where we assume that we only possess monolin-
gual data, we removed all CS utterances from the train set. The
testman and testeng sets were used for evaluation. Both evalu-
ation sets are gender balanced and consist of 10 speakers, but
the matrix2 language of speakers is different, i.e. Mandarin for
testman and English for testeng.

1https://github.com/zengzp0912/SEAME-dev-set
2The dominant language into which elements from the embedded

language are inserted.

5.2. E2E-CS-ASR model conﬁguration

We used ESPnet toolkit [19] to train our baseline E2E-CS-ASR
model. The encoder module consists of VGG network fol-
lowed by 6 BLSTM layers each with 512 units. The attention-
based decoder module consists of a single LSTM layer with
512 units and employs multi-headed hybrid attention mecha-
nism [20] with 4 heads. The CTC module consists of a single
linear layer with 512 units and its weight in Eq. (9) is set to
0.2. The network was optimized using Adadelta with gradient
clipping. During the decoding stage, the beam size was set to
30. The baseline model achieves 34.3% and 46.3% mixed error
rates (MER)3 on testman and testsge respectively, when trained
on entire SEAME train set including the CS utterances.

5.3. Results and analysis

The experiment results are shown in Table 2. We split the
test sets into monolingual and CS utterances to analyze the im-
pact of the proposed method on each of them. We ﬁrst report
the MER performance of a conventional ASR model built us-
ing Kaldi toolkit [21] (row 1), the model speciﬁcations can be
found in [7]. The MER performance of the baseline E2E-CS-
ASR model is shown in the second row. We followed the re-
cent trends [1, 2, 4] to obtain a much stronger baseline model.
Speciﬁcally, we applied speed perturbation (SP) based data aug-
mentation technique [22] and used byte pair encoding (BPE)
based subword units [23] to balance Mandarin and English to-
kens (rows 3 and 4). We tried different vocabulary sizes for
BPE and found 4k units to work best in our case.

Table 2: The MER (%) performance of different ASR models
built using monolingual data. The test sets are further split into
monolingual (mono) and code-switching (CS) utterances

No. Model

1
2
3
4
5
6
7

Kaldi
Baseline
+ SP

+ BPE
+ CD
+ JSD
+ CD

testman
CS
utts.
-
73.3
56.0
51.8
49.0
48.8
48.1

mono
utts.
-
57.7
39.4
38.1
34.4
34.9
34.0

all

39.1
70.6
53.2
49.5
46.3
46.3
45.6

testeng
CS
utts.
-
80.6
65.9
61.4
58.5
57.6
57.4

mono
utts.
-
73.7
54.2
52.9
47.2
47.8
47.2

all

45.2
78.3
62.2
58.9
55.1
54.6
54.4

The performance of models employing proposed CD and
JSD constraints are shown in rows 5 and 6, the interpolation
weights for CD and JSD are set to 0.9 and 0.97, respectively.
Both constraints gain considerable MER improvements. No-
tably, we found that CD constraint is more effective on monolin-
gual utterances, whereas JSD constraint is more effective on CS
utterances. To complement the advantages of both constraints,
we combined them as follows:

LMTL =λLCTC + (1 − λ)(αLATT+

(1 − α)(βLJSD + (1 − β)LCD))

(15)

where α and β are set to 0.05 and 0.9, respectively. The combi-
nation of two constraints signiﬁcantly improves the MER over
the strong baseline model by 3.9% and 4.5% on testman and
testeng, respectively (row 7). These results suggest that the pro-
posed method of constraining the output token embeddings is
effective.

3The term “mixed” refers to different token units used for English

(words) and Mandarin (characters).

5.3.1. Changing the interpolation weight

We repeat the experiment with different interpolation weights
for CD and JSD constraints (hyperparameter α in Eq. (13)) to
investigate its effect on MER performance. Figure 2 shows that
the proposed method consistently improves the MER over the
strong baseline model with SP and BPE. The best results are
achieved for interpolation weights in range 0.8-0.99.

Figure 2: The impact of CD and JSD constraint interpolation
weights on MER performance for testeng (red/top) and testman
(blue/bottom) sets.

(a) No constraint

(b) CD constraint

(c) JSD constraint

(d) CD & JSD constraints

Figure 3: PCA visualization of shared output token embedding
space without (a) and with (b,c,d) proposed constraints.

5.3.2. Visualization of shared output token embedding space

To gain insights from the effects of the proposed method on the
shared output embedding space, we visualize it using dimen-
sionality reduction technique based on the principal component
analysis (PCA). Figure 3 shows the shared output embedding
space without (3a) and with (3b, 3c, 3d) proposed constraints.
Note that the learned output token embeddings of monolingual
languages strongly diverge from each other when proposed con-
straints are not employed. Visualization of the shared output

embedding space conﬁrms that our method is effective at bind-
ing the output token embeddings of monolingual languages.

5.3.3. Applying language model

The state-of-the-art results in ASR are usually obtained by em-
ploying a language model (LM). To examine whether proposed
constraints are complementary with LM, we employed LM dur-
ing the decoding stage. In this experiment, we tried different
LM interpolation weights changed with a step size of 0.025 and
report the best results (see Table 3). The LM was trained on
the entire SEAME train set, including CS utterances, as a single
layer LSTM with 512 units and was integrated using shallow
fusion technique [24]. Obtained MER improvements show that
proposed constraints and LM complement each other. More-
over, the proposed method beneﬁts from the LM more than the
strong baseline model.

Table 3: The MER performance after applying the language
model during the decoding stages

Model

Decoder LM

Baseline

Baseline + CD & JSD

No
Yes
No
Yes

MER (%)

testman
49.5
49.0
45.6
45.0

testeng
58.9
58.6
54.4
53.7

6. Conclusions

In this work, we proposed a method to train improved E2E-
CS-ASR model using only monolingual data. Speciﬁcally, our
method constrains the output token embeddings of monolin-
gual languages to force them to be similar, and hence, en-
able E2E-CS-ASR to easily switch between languages. We ex-
amined Jensen-Shannon divergence and cosine distance based
constraints which are incorporated into the objective function
of the E2E-CS-ASR. We evaluated the proposed method on
Mandarin-English CS language pair from the SEAME corpus
where CS utterances were removed from the train set. The
proposed method outperforms the strong baseline model by a
large margin, i.e. absolute 3.9% and 4.5% MER improvements
on testman and testeng, respectively. The visualization of the
shared output embedding space conﬁrms the effectiveness of
the proposed method. In addition, our method is complemen-
tary with the language model where further MER improvement
is achieved. Importantly, all these improvements are achieved
without using any additional linguistic resources such as word-
aligned parallel corpus or language identiﬁcation system. We
believe that the proposed method can be easily adapted to other
scenarios and beneﬁt other CS language pairs.

For the future work, we plan to test the proposed method on
scenarios with a larger amount of monolingual data and exam-
ine its effectiveness on E2E-CS-ASR models trained using CS
data. We also plan to study the effects of the proposed method
in transfer learning approach where it will be used to pre-train
the model with external monolingual data.

7. Acknowledgements

This work is supported by the project of Alibaba-NTU Singa-
pore Joint Research Institute.

[17] D. Bahdanau, J. Chorowski, D. Serdyuk, P. Brakel, and Y. Ben-
gio, “End-to-end attention-based large vocabulary speech recog-
nition,” in IEEE International Conference on Acoustics, Speech
and Signal Processing, ICASSP, 2016, pp. 4945–4949.

[18] K. Simonyan and A. Zisserman, “Very deep convolutional
large-scale image recognition,” CoRR, vol.

networks
abs/1409.1556, 2014.

for

[19] S. Watanabe, T. Hori, S. Karita, T. Hayashi, J. Nishitoba, Y. Unno,
N. E. Y. Soplin, J. Heymann, M. Wiesner, N. Chen, A. Ren-
duchintala, and T. Ochiai, “Espnet: End-to-end speech processing
toolkit,” in 19th Annual Conference of the International Speech
Communication Association, INTERSPEECH, 2018, pp. 2207–
2211.

[20] J. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Bengio,
“Attention-based models for speech recognition,” in Advances in
Neural Information Processing Systems, NIPS, 2015, pp. 577–
585.

[21] D. Povey, A. Ghoshal, G. Boulianne, L. Burget, O. Glembek,
N. Goel, M. Hannemann, P. Motlicek, Y. Qian, P. Schwarz et al.,
“The Kaldi speech recognition toolkit,” IEEE Signal Processing
Society, Tech. Rep., 2011.

[22] T. Ko, V. Peddinti, D. Povey, and S. Khudanpur, “Audio aug-
mentation for speech recognition,” in 16th Annual Conference
of the International Speech Communication Association, INTER-
SPEECH, 2015, pp. 3586–3589.

[23] R. Sennrich, B. Haddow, and A. Birch, “Neural machine transla-
tion of rare words with subword units,” in 54th Annual Meeting
of the Association for Computational Linguistics, ACL, Volume 1:
Long Papers, 2016.

[24] S. Toshniwal, A. Kannan, C. Chiu, Y. Wu, T. N. Sainath, and
K. Livescu, “A comparison of techniques for language model in-
tegration in encoder-decoder speech recognition,” in IEEE Spoken
Language Technology Workshop, SLT, 2018, pp. 369–375.

8. References
[1] Z. Zeng, Y. Khassanov, V. T. Pham, H. Xu, E. S. Chng, and H. Li,
“On the end-to-end solution to mandarin-english code-switching
speech recognition,” in 20th Annual Conference of the Inter-
national Speech Communication Association, INTERSPEECH,
2019, in-press.

[2] N. Luo, D. Jiang, S. Zhao, C. Gong, W. Zou, and X. Li, “Towards
end-to-end code-switching speech recognition,” arXiv preprint
arXiv:1810.13091, 2018.

[3] K. Li, J. Li, G. Ye, R. Zhao, and Y. Gong, “Towards code-
switching asr for end-to-end ctc models,” in IEEE International
Conference on Acoustics, Speech and Signal Processing, ICASSP,
2019, pp. 6076–6080.

[4] C. Shan, C. Weng, G. Wang, D. Su, M. Luo, D. Yu,
and L. Xie, “Investigating end-to-end speech recognition for
mandarin-english code-switching,” in IEEE International Confer-
ence on Acoustics, Speech and Signal Processing, ICASSP, 2019,
pp. 6056–6060.

[5] D. Lyu, T. P. Tan, E. Chng, and H. Li, “SEAME: a mandarin-
english code-switching speech corpus in south-east asia,” in 11th
Annual Conference of the International Speech Communication
Association, INTERSPEECH, 2010, pp. 1986–1989.

[6] E. Yilmaz, M. McLaren, H. van den Heuvel, and D. A. van
Leeuwen, “Semi-supervised acoustic model training for speech
with code-switching,” Speech Communication, vol. 105, pp. 12–
22, 2018.

[7] P. Guo, H. Xu, L. Xie, and E. S. Chng, “Study of semi-
supervised approaches to improving english-mandarin code-
switching speech recognition,” in 19th Annual Conference of
the International Speech Communication Association, INTER-
SPEECH, 2018, pp. 1928–1932.

[8] S. Karita, S. Watanabe, T. Iwata, A. Ogawa, and M. Delcroix,
“Semi-supervised end-to-end speech recognition,” in 19th Annual
Conference of the International Speech Communication Associa-
tion, INTERSPEECH, 2018, pp. 2–6.

[9] J. Drexler and J. Glass, “Combining end-to-end and adversarial
training for low-resource speech recognition,” in IEEE Spoken
Language Technology Workshop, SLT, 2018, pp. 361–368.

[10] D. Lyu, R. Lyu, Y. Chiang, and C. Hsu, “Speech recognition
on code-switching among the chinese dialects,” in IEEE Inter-
national Conference on Acoustics Speech and Signal Processing,
ICASSP, 2006, pp. 1105–1108.

[11] A. Pratapa, G. Bhat, M. Choudhury, S. Sitaram, S. Dandapat, and
K. Bali, “Language modeling for code-mixing: The role of lin-
guistic theory based synthetic data,” in 56th Annual Meeting of
the Association for Computational Linguistics, ACL, Volume 1:
Long Papers, 2018, pp. 1543–1553.

[12] C. Chang, S. Chuang, and H. Lee, “Code-switching sentence gen-
eration by generative adversarial networks and its application to
data augmentation,” CoRR, vol. abs/1811.02356, 2018.

[13] G. I. Winata, A. Madotto, C. Wu, and P. Fung, “Learn to code-
switch: Data augmentation using copy mechanism on language
modeling,” CoRR, vol. abs/1810.10254, 2018.

[14] E. Yilmaz, H. van den Heuvel, and D. A. van Leeuwen, “Acous-
tic and textual data augmentation for improved ASR of code-
switching speech,” in 19th Annual Conference of the International
Speech Communication Association, INTERSPEECH, 2018, pp.
1933–1937.

[15] T. Hori, S. Watanabe, Y. Zhang, and W. Chan, “Advances in
joint CTC-Attention based end-to-end speech recognition with a
deep CNN encoder and RNN-LM,” in 18th Annual Conference
of the International Speech Communication Association, INTER-
SPEECH, 2017, pp. 949–953.

[16] A. Graves, S. Fern´andez, F. J. Gomez, and J. Schmidhuber,
“Connectionist temporal classiﬁcation: Labelling unsegmented
sequence data with recurrent neural networks,” in 23rd Interna-
tional Conference on Machine Learning, ICML, 2006, pp. 369–
376.

