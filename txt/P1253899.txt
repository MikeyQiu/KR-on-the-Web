DeblurGAN: Blind Motion Deblurring Using Conditional Adversarial Networks

Orest Kupyn1,3, Volodymyr Budzan1,3, Mykola Mykhailych1, Dmytro Mishkin2, Jiˇri Matas2
1 Ukrainian Catholic University, Lviv, Ukraine
{kupyn, budzan, mykhailych}@ucu.edu.ua

2 Visual Recognition Group, Center for Machine Perception, FEE, CTU in Prague
{mishkdmy, matas}@cmp.felk.cvut.cz
3 ELEKS Ltd.

8
1
0
2
 
r
p
A
 
3
 
 
]

V
C
.
s
c
[
 
 
4
v
4
6
0
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

We present DeblurGAN, an end-to-end learned method
for motion deblurring. The learning is based on a condi-
tional GAN and the content loss . DeblurGAN achieves
state-of-the art performance both in the structural similarity
measure and visual appearance. The quality of the deblur-
ring model is also evaluated in a novel way on a real-world
problem – object detection on (de-)blurred images. The
method is 5 times faster than the closest competitor – Deep-
Deblur [25]. We also introduce a novel method for gen-
erating synthetic motion blurred images from sharp ones,
allowing realistic dataset augmentation.

The model, code and the dataset are available at
https://github.com/KupynOrest/DeblurGAN

1. Introduction

This work is on blind motion deblurring of a single pho-
tograph. Signiﬁcant progress has been recently achieved
in related areas of image super-resolution [20] and in-
painting [45] by applying generative adversarial networks
(GANs) [10]. GANs are known for the ability to preserve
texture details in images, create solutions that are close to
the real image manifold and look perceptually convincing.
Inspired by recent work on image super-resolution [20] and
image-to-image translation by generative adversarial net-
works [16], we treat deblurring as a special case of such
image-to-image translation. We present DeblurGAN – an
approach based on conditional generative adversarial net-
works [24] and a multi-component loss function. Unlike
previous work we use Wasserstein GAN [2] with the gradi-
ent penalty [11] and perceptual loss [17]. This encourages
solutions which are perceptually hard to distinguish from
real sharp images and allows to restore ﬁner texture details
than if using traditional MSE or MAE as an optimization
target.

Figure 1: DeblurGAN helps object detection. YOLO [30]
detections on the blurred image (top), the DeblurGAN re-
stored (middle) and the sharp ground truth image from the
GoPro [25] dataset.

1

Figure 2: GoPro images [25] processed by DeblurGAN. Blurred – left, DeblurGAN – center, ground truth sharp – right.

We make three contributions. First, we propose a loss
and architecture which obtain state-of-the art results in mo-
tion deblurring, while being 5x faster than the fastest com-
petitor. Second, we present a method based on random
trajectories for generating a dataset for motion deblurring
training in an automated fashion from the set of sharp im-
age. We show that combining it with an existing dataset
for motion deblurring learning improves results compared
to training on real-world images only. Finally, we present a
novel dataset and method for evaluation of deblurring algo-
rithms based on how they improve object detection results.

2. Related work

2.1. Image Deblurring

The common formulation of non-uniform blur model is

the following:

IB = k(M ) ∗ IS + N,

(1)

where IB is a blurred image, k(M ) are unknown blur ker-
nels determined by motion ﬁeld M . IS is the sharp latent
image, ∗ denotes the convolution, N is an additive noise.
The family of deblurring problems is divided into two types:
blind and non-blind deblurring. Early work [37] mostly fo-
cused on non-blind deblurring, making an assumption that

the blur kernels k(M ) are known. Most rely on the classi-
cal Lucy-Richardson algorithm, Wiener or Tikhonov ﬁlter
to perform the deconvolution operation and obtain IS esti-
mate. Commonly the blur function is unknown, and blind
deblurring algorithms estimate both latent sharp image IS
and blur kernels k(M ). Finding a blur function for each
pixel is an ill-posed problem, and most of the existing algo-
rithms rely on heuristics, image statistics and assumptions
on the sources of the blur. Those family of methods ad-
dresses the blur caused by camera shake by considering blur
to be uniform across the image. Firstly, the camera motion
is estimated in terms of the induced blur kernel, and then
the effect is reversed by performing a deconvolution oper-
ation. Starting with the success of Fergus et al. [8], many
methods [44][42][28][3] has been developed over the last
ten years. Some of the methods are based on an iterative ap-
proach [8] [44], which improve the estimate of the motion
kernel and sharp image on each iteration by using paramet-
ric prior models. However, the running time, as well as the
stopping criterion, is a signiﬁcant problem for those kinds
of algorithms. Others use assumptions of a local linearity
of a blur function and simple heuristics to quickly estimate
the unknown kernel. These methods are fast but work well
on a small subset of images.

Recently, Whyte et al. [40] developed a novel algorithm

Figure 3: DeblurGAN generator architecture. DeblurGAN contains two strided convolution blocks with stride 1
2 , nine resid-
ual blocks [13] and two transposed convolution blocks. Each ResBlock consists of a convolution layer, instance normalization
layer, and ReLU activation.

for non-uniform blind deblurring based on a parametrized
geometric model of the blurring process in terms of the
rotational velocity of the camera during exposure. Simi-
larly Gupta et al. [12] made an assumption that the blur is
caused only by 3D camera movement. With the success
of deep learning, over the last few years, there appeared
some approaches based on convolutional neural networks
(CNNs). Sun et al. [36] use CNN to estimate blur ker-
nel, Chakrabarti [6] predicts complex Fourier coefﬁcients
of motion kernel to perform non-blind deblurring in Fourier
space whereas Gong [9] use fully convolutional network to
move for motion ﬂow estimation. All of these approaches
use CNN to estimate the unknown blur function. Recently,
a kernel-free end-to-end approaches by Noorozi [27] and
Nah [25] that uses multi-scale CNN to directly deblur the
image. Ramakrishnan et al. [29] use the combination of
pix2pix framework [16] and densely connected convolu-
tional networks [15] to perform blind kernel-free image
deblurring. Such methods are able to deal with different
sources of the blur.

2.2. Generative adversarial networks

The idea of generative adversarial networks, introduced
by Goodfellow et al. [10], is to deﬁne a game between two
competing networks: the discriminator and the generator.
The generator receives noise as an input and generates a
sample. A discriminator receives a real and generated sam-
ple and is trying to distinguish between them. The goal of
the generator is to fool the discriminator by generating per-
ceptually convincing samples that can not be distinguished
from the real one. The game between the generator G and
discriminator D is the minimax objective:

min
G

max
D

E
x(cid:118)Pr

[log(D(x))] + E

[log(1 − D(˜x))]

(2)

˜x(cid:118)Pg

where Pr is the data distribution and Pg is the model dis-
tribution, deﬁned by ˜x = G(z), z (cid:118) P (z), the input z
is a sample from a simple noise distribution. GANs are
known for its ability to generate samples of good percep-
tual quality, however, training of vanilla version suffer from

many problems such as mode collapse, vanishing gradi-
ents etc, as described in [33]. Minimizing the value func-
tion in GAN is equal to minimizing the Jensen-Shannon di-
vergence between the data and model distributions on x.
Arjovsky et al. [2] discuss the difﬁculties in GAN train-
ing caused by JS divergence approximation and propose
to use the Earth-Mover (also called Wasserstein-1) distance
W (q, p). The value function for WGAN is constructed us-
ing Kantorovich-Rubinstein duality [39]:

min
G

max
D∈D

E
x(cid:118)Pr

[D(x)] − E

[D(˜x)]

(3)

˜x(cid:118)Pg

where D is the set of 1−Lipschitz functions and Pg is once
again the model distribution The idea here is that critic value
approximates K · W (Pr, Pθ), where K is a Lipschitz con-
stant and W (Pr, Pθ) is a Wasserstein distance. In this set-
ting, a discriminator network is called critic and it approx-
imates the distance between the samples. To enforce Lips-
chitz constraint in WGAN Arjovsky et al. add weight clip-
ping to [−c, c]. Gulrajani et al. [11] propose to add a gradi-
ent penalty term instead:

λ E

˜x(cid:118)P˜x

[((cid:107)∇˜xD(˜x)(cid:107)2 − 1)2]

(4)

to the value function as an alternative way to enforce the
Lipschitz constraint. This approach is robust to the choice
of generator architecture and requires almost no hyperpa-
rameter tuning. This is crucial for image deblurring as it al-
lows to use novel lightweight neural network architectures
in contrast to standard Deep ResNet architectures, previ-
ously used for image deblurring [25].

2.3. Conditional adversarial networks

Generative Adversarial Networks have been applied to
different image-to-image translation problems, such as su-
per resolution [20], style transfer [22], product photo gen-
eration [5] and others. Isola et al. [16] provides a detailed
overview of those approaches and present conditional GAN
architecture also known as pix2pix. Unlike vanilla GAN,

cGAN learns a mapping from observed image x and ran-
Isola et al.
dom noise vector z, to y : G : x, z → y.
also put a condition on the discriminator and use U-net
architecture [31] for generator and Markovian discrimina-
tor which allows achieving perceptually superior results on
many tasks, including synthesizing photos from label maps,
reconstructing objects from edge maps, and colorizing im-
ages.

3. The proposed method

The goal is to recover sharp image IS given only a
blurred image IB as an input, so no information about the
blur kernel is provided. Debluring is done by the trained
CNN GθG , to which we refer as the Generator. For each
IB it estimates corresponding IS image. In addition, during
the training phase, we introduce critic the network DθD and
train both networks in an adversarial manner.

3.1. Loss function

We formulate the loss function as a combination of con-

tent and adversarial loss:

+

L = LGAN
(cid:124) (cid:123)(cid:122) (cid:125)
adv loss
(cid:124)

λ · LX
(cid:124) (cid:123)(cid:122) (cid:125)
content loss
(cid:125)

(cid:123)(cid:122)
total loss

(5)

where the λ equals to 100 in all experiments. Unlike Isola et
al. [16] we do not condition the discriminator as we do not
need to penalize mismatch between the input and output.
Adversarial loss Most of the papers related to conditional
GANs, use vanilla GAN objective as the loss [20][25] func-
tion. Recently [47] provides an alternative way of using
least aquare GAN [23] which is more stable and generates
higher quality results. We use WGAN-GP [11] as the critic
function, which is shown to be robust to the choice of gen-
erator architecture [2]. Our premilinary experiments with
different architectures conﬁrmed that ﬁndings and we are
able to use architecture much lighter than ResNet152 [25],
see next subsection. The loss is calculated as the following:

LGAN =

−DθD (GθG(I B))

(6)

N
(cid:88)

n=1

DeblurGAN trained without GAN component converges,
but produces smooth and blurry images.

Content loss. Two classical choices for ”content” loss
function are L1 or MAE loss, L2 or MSE loss on raw pix-
els. Using those functions as sole optimization target leads
to the blurry artifacts on generated images due to the pixel-
wise average of possible solutions in the pixel space [20].
Instead, we adopted recently proposed Perceptual loss [17].
Perceptual loss is a simple L2-loss, but based on the differ-
ence of the generated and target image CNN feature maps.
It is deﬁned as following:

Figure 4: DeblurGAN training. The generator network
takes the blurred image as input and produces the estimate
of the sharp image. The critic network takes the restored
and sharp images and outputs a distance between them. The
total loss consists of the WGAN loss from critic and the per-
ceptual loss [17]. The perceptual loss is the difference be-
tween the VGG-19 [34] conv3.3 feature maps of the sharp
and restored images. At test time, only the generator is kept.

LX =

1
Wi,j Hi,j

(φi,j(I S)x,y − φi,j(GθG (I B))x,y)2

Wi,j
(cid:88)

Hi,j
(cid:88)

x=1

y=1

where φi,j is the feature map obtained by the j-th convo-
lution (after activation) before the i-th maxpooling layer
within the VGG19 network, pretrained on ImageNet [7],
Wi,j and Hi,j are the dimensions of the feature maps. In
our work we use activations from V GG3,3 convolutional
layer. The activations of the deeper layers represents the
features of a higher abstraction [46][20]. The perceptual
loss focuses on restoring general content [16] [20] while ad-

Figure 5: Examples of generated camera motion trajectory and the blur kernel and the corresponding blurred images.

versarial loss focuses on restoring texture details. Deblur-
GAN trained without Perceptual loss or with simple MSE
on pixels instead doesn’t converge to meaningful state.

Additional regularization. We have also tried to add
TV regularization and model trained with it yields worse
performance – 27.9 vs. 28.7 w/o PSNR on GoPro dataset.

3.2. Network architecture

It
Generator CNN architecture is shown in Figure 3.
is similar to one proposed by Johnson et al. [17] for style
transfer task.
It contains two strided convolution blocks
with stride 1
2 , nine residual blocks [13] (ResBlocks) and
two transposed convolution blocks. Each ResBlock consists
of a convolution layer, instance normalization layer [38],
and ReLU [26] activation. Dropout [35] regularization
with a probability of 0.5 is added after the ﬁrst convolu-
tion layer in each ResBlock. In addition, we introduce the
global skip connection which we refer to as ResOut. CNN
learns a residual correction IR to the blurred image IB, so
IS = IB + IR. We ﬁnd that such formulation makes train-
ing faster and resulting model generalizes better. During
the training phase, we deﬁne a critic network DθD , which is
Wasserstein GAN [2] with gradient penalty [11], to which
we refer as WGAN-GP. The architecture of critic network
is identical to PatchGAN [16, 22]. All the convolutional
layers except the last are followed by InstanceNorm layer
and LeakyReLU [41] with α = 0.2.

4. Motion blur generation

There is no easy method to obtain image pairs of cor-
responding sharp and blurred images for training.A typical
approach to obtain image pairs for training is to use a high
frame-rate camera to simulate blur using average of sharp
It allows to create realistic
frames from video [27, 25].
blurred images but limits the image space only to scenes
present in taken videos and makes it complicated to scale
the dataset. Sun et al. [36] creates synthetically blurred im-
ages by convolving clean natural images with one out of 73
possible linear motion kernels, Xu et al. [43] also use lin-
ear motion kernels to create synthetically blurred images.

Figure 6: Top row: Blur kernels from real-world images
estimated by Fergus et al. [8]. Bottom row: Synthetically
generated kernels by our method. Our randomized method
can simulate wide variety of realistic blur kernels with dif-
ferent level of non-linearity.

Chakrabarti [6] creates blur kernel by sampling 6 random
points and ﬁtting a spline to them. We take a step further and
propose a method, which simulates more realistic and com-
plex blur kernels. We follow the idea described by Borac-
chi and Foi [4] of random trajectories generation. Then the
kernels are generated by applying sub-pixel interpolation to
the trajectory vector. Each trajectory vector is a complex
valued vector, which corresponds to the discrete positions
of an object following 2D random motion in a continuous
domain. Trajectory generation is done by Markov process,
summarized in Algorithm 1. Position of the next point of
the trajectory is randomly generated based on the previous
point velocity and position, gaussian perturbation, impulse
perturbation and deterministic inertial component.

5. Training Details

We implemented all of our models using PyTorch[1]
deep learning framework. The training was performed
on a single Maxwell GTX Titan-X GPU using three

Figure 7: Results on the GoPro test dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

Figure 8: Results on the Kohler dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

to which we re-
The ﬁrst model
different datasets.
fer as DeblurGANWILD was trained on a random crops
of size 256x256 from 1000 GoPro training dataset im-

ages [25] downscaled by a factor of two. The second one
DeblurGANSynth was trained on 256x256 patches from MS
COCO dataset blurred by method, presented in previous

Algorithm 1 Motion blur kernel generation.
Parameters:
M = 2000 – number of iterations,
Lmax = 60 – max length of the movement,
ps = 0.001 – probability of impulsive shake,
I – inertia term, uniform from (0,0.7),
pb – probability of big shake, uniform from (0,0.2),
pg – probability of gaussian shake, uniform from (0,0.7),
φ – initial angle, uniform from (0,2π),
x – trajectory vector.

1: procedure BLUR(Img, M, Lmax, ps)
v0 ← cos(φ) + sin(φ) ∗ i
2:
v ← vo ∗ Lmax/(M − 1)
3:
x = zeros(M, 1)
4:
for t = 1 to M − 1 do

if randn < pb ∗ ps then

nextDir ← 2 · v · ei∗(π+(randn−0.5)))

else:

nextDir ← 0

dv ← nextDir + ps ∗ (pg ∗ (randn + i ∗ randn) ∗

I ∗ x[t] ∗ (Lmax/(M − 1))
v ← v + dv
v ← (v/abs(v)) ∗ Lmax/(M − 1)
x[t + 1] ← x[t] + v

Kernel ← sub pixel interpolation(x)
Blurred image ← conv(Kernel, Img)
return Blurred image

5:
6:
7:
8:
9:

10:

11:
12:

13:

14:

15:
16:

Section. We also trained DeblurGANComb on a combina-
tion of synthetically blurred images and images taken in the
wild, where the ratio of synthetically generated images to
the images taken by a high frame-rate camera is 2:1. As
the models are fully convolutional and are trained on image
patches they can be applied to images of arbitrary size. For
optimization we follow the approach of
[2] and perform
5 gradient descent steps on DθD , then one step on GθG,
using Adam [18] as a solver. The learning rate is set ini-
tially to 10−4 for both generator and critic. After the ﬁrst
150 epochs we linearly decay the rate to zero over the next
150 epochs. At inference time we follow the idea of [16]
and apply both dropout and instance normalization. All the
models were trained with a batch size = 1, which showed
empirically better results on validation. The training phase
took 6 days for training one DeblurGAN network.

6. Experimental evaluation

6.1. GoPro Dataset

GoPro dataset[25] consists of 2103 pairs of blurred and
sharp images in 720p quality, taken from various scenes.
We compare the results of our models with state of the art
models [36], [25] on standard metrics and also show the

Table 1: Peak signal-to-noise ratio and the structural sim-
ilarity measure, mean over the GoPro test dataset of 1111
images. All models were tested on the linear image subset.
State-of-art results (∗) by Nah et al. [25] obtained on the
gamma subset.

Sun et al. Nah et al. Xu et al.

DeblurGAN

Metric

[36]

[25]

[44] WILD Synth Comb

24.6
PSNR
SSIM 0.842

28.3/29.1*
0.916

25.1
0.89

28.7
23.6
27.2
0.954 0.884 0.958

Time

20 min

4.33 s

13.41 s

0.85 s

running time of each algorithm on a single GPU. Results
are in Table1. DeblurGAN shows superior results in terms
of structured self-similarity, is close to state-of-the-art in
peak signal-to-noise-ratio and provides better looking re-
sults by visual inspection. In contrast to other neural mod-
els, our network does not use L2 distance in pixel space so
it is not directly optimized for PSNR metric. It can handle
blur caused by camera shake and object movement, does
not suffer from usual artifacts in kernel estimation methods
and at the same time has more than 6x fewer parameters
comparing to Multi-scale CNN , which heavily speeds up
the inference. Deblured images from test on GoPro dataset
are shown in Figure 7.

6.2. Kohler dataset

Kohler dataset [19] consists of 4 images blurred with 12
different kernels for each of them. This is a standard bench-
mark dataset for evaluation of blind deblurring algorithms.
The dataset is generated by recording and analyzing real
camera motion, which is played back on a robot platform
such that a sequence of sharp images is recorded sampling
the 6D camera motion trajectory. Results are in Table 2,
similar to GoPro evaluation.

6.3. Object Detection benchmark on YOLO

Object Detection is one of the most well-studied prob-
lems in computer vision with applications in different do-
mains from autonomous driving to security. During the last
few years approaches based on Deep Convolutional Neural
Networks showed state of the art performance comparing to
traditional methods. However, those networks are trained
on limited datasets and in real-world settings images are of-
ten degraded by different artifacts, including motion blur,
Similar to [21] and [32] we studied the inﬂuence of motion
blur on object detection and propose a new way to evalu-
ate the quality of deblurring algorithm based on results of
object detection on a pretrained YOLO [30] network.

For this, we constructed a dataset of sharp and blurred
street views by simulating camera shake using a high frame-

Table 2: Peak signal-to-noise ratio and structural similarity measure, mean on the Kohler dataset. Xu et al. [44] and Whyte et
al. [40] are non-CNN blind deblurring methods, whereas Sun et al. [36] and Nah et al. [25] use CNN.

Method

Sun et al. Nah et al. Xu et al. Whyte et al.

DeblurGAN

Metric

PSNR
SSIM

[36]

25.22
0.773

[25]

26.48
0.807

[44]

27.47
0.811

[40]

27.03
0.809

WILD Synth

Comb

26.10
0.816

25.67
0.792

25.86
0.802

(a) Blurred photo

(b) Nah et al. [25]

(c) DeblurGAN

(d) Sharp photo

Figure 9: YOLO object detection before and after deblurring

rate video camera. Following [14][25][27] we take a ran-
dom between 5 and 25 frames taken by 240fps camera and
compute the blurred version of a middle frame as an aver-
age of those frames. All the frames are gamma-corrected
with γ = 2.2 and then the inverse function is taken to ob-
tain the ﬁnal blurred frame. Overall, the dataset consists of
410 pairs of blurred and sharp images, taken from the streets
and parking places with different number and types of cars.
Blur source includes both camera shake and blur caused
by car movement. The dataset and supplementary code are
available online. Then sharp images are feed into the YOLO
network and the result after visual veriﬁcation is assigned as
ground truth. Then YOLO is run on blurred and recovered
versions of images and average recall and precision between
obtained results and ground truth are calculated. This ap-
proach corresponds to the quality of deblurring models on
real-life problems and correlates with the visual quality and
sharpness of the generated images, in contrast to standard
PSNR metric. The precision, in general, is higher on blurry
images as there are no sharp object boundaries and smaller
object are not detected as it shown in Figure 9.

Results are shown in Table 3. DeblurGAN signiﬁcantly

outperforms competitors in terms of recall and F1 score.

7. Conclusion

We described a kernel-free blind motion deblurring
learning approach and introduced DeblurGAN which is a
Conditional Adversarial Network that is optimized using a
multi-component loss function. In addition to this, we im-

Table 3: Results of YOLO [30] object detection on blurred
and restored photos using DeblurGAN and Nah et al. [25]
algorithms. Results on corresponding sharp images are con-
sidered ground truth. DeblurGAN has higher recall and F1
score than its competitors.

Method

prec.

recall

F1 score

no deblur
Nah et al. [25]

0.821
0.834
DeblurGAN WILD 0.764
0.801
DeblurGAN synth
0.671
DeblurGAN comb

0.437
0.552
0.631
0.517
0.742

0.570
0.665
0.691
0.628
0.704

plemented a new method for creating a realistic synthetic
motion blur able to model different blur sources. We in-
troduce a new benchmark and evaluation protocol based on
results of object detection and show that DeblurGAN sig-
niﬁcantly helps detection on blurred images.

8. Acknowledgements

The authors were supported by the ELEKS Ltd.,
ARVI Lab, Czech Science Foundation Project GACR
P103/12/G084, the Austrian Ministry for Transport, Inno-
vation and Technology, the Federal Ministry of Science,
Research and Economy, and the Province of Upper Austria
in the frame of the COMET center, the CTU student grant
SGS17/185/OHK3/3T/13. We thank Huaijin Chen for
ﬁnding the bug in peak-signal-to-noise ratio evaluation.

References

[1] PyTorch. http://pytorch.org. 5
[2] M. Arjovsky, S. Chintala, and L. Bottou. Wasserstein GAN.

ArXiv e-prints, Jan. 2017. 1, 3, 4, 5, 7

[3] S. D. Babacan, R. Molina, M. N. Do, and A. K. Katsaggelos.
Bayesian blind deconvolution with general sparse image pri-
ors. In European Conference on Computer Vision (ECCV),
Firenze, Italy, October 2012. Springer. 2

[4] G. Boracchi and A. Foi. Modeling the performance of im-
age restoration from motion blur. Image Processing, IEEE
Transactions on, 21(8):3502 –3517, aug. 2012. 5

[5] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised Pixel-Level Domain Adaptation with
Generative Adversarial Networks. ArXiv e-prints, Dec. 2016.
3

[6] A. Chakrabarti. A neural approach to blind motion deblur-
ring. In Lecture Notes in Computer Science (including sub-
series Lecture Notes in Artiﬁcial Intelligence and Lecture
Notes in Bioinformatics), 2016. 3, 5

[7] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009. 4

[8] R. Fergus, B. Singh, A. Hertzmann, S. T. Roweis, and W. T.
Freeman. Removing camera shake from a single photograph.
ACM Trans. Graph., 25(3):787–794, July 2006. 2, 5

[9] D. Gong, J. Yang, L. Liu, Y. Zhang, I. Reid, C. Shen, A. Van
Den Hengel, and Q. Shi. From Motion Blur to Motion Flow:
a Deep Learning Solution for Removing Heterogeneous Mo-
tion Blur. 2016. 3

[10] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Networks. June 2014. 1, 3

[11] I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and
Improved Training of Wasserstein GANs.

A. Courville.
ArXiv e-prints, Mar. 2017. 1, 3, 4, 5

[12] A. Gupta, N. Joshi, C. L. Zitnick, M. Cohen, and B. Curless.
Single image deblurring using motion density functions. In
Proceedings of the 11th European Conference on Computer
Vision: Part I, ECCV’10, pages 171–184, Berlin, Heidel-
berg, 2010. Springer-Verlag. 3

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015. 3, 5

[14] M. Hirsch, C. J. Schuler, S. Harmeling, and B. Scholkopf.
Fast removal of non-uniform camera shake. In Proceedings
of the 2011 International Conference on Computer Vision,
ICCV ’11, pages 463–470, Washington, DC, USA, 2011.
IEEE Computer Society. 8

[15] G. Huang, Z. Liu, L. van der Maaten, and K. Q. Wein-
berger. Densely connected convolutional networks. 2017
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2261–2269, 2017. 3

[16] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
arxiv,

translation with conditional adversarial networks.
2016. 1, 3, 4, 5, 7

[17] J. Johnson, A. Alahi, and L. Fei-Fei. Perceptual losses for
In European

real-time style transfer and super-resolution.
Conference on Computer Vision, 2016. 1, 4, 5

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014. 7

[19] R. K¨ohler, M. Hirsch, B. Mohler, B. Sch¨olkopf, and
S. Harmeling.
Recording and playback of camera
shake: Benchmarking blind deconvolution with a real-world
database. In Proceedings of the 12th European Conference
on Computer Vision - Volume Part VII, ECCV’12, pages 27–
40, Berlin, Heidelberg, 2012. Springer-Verlag. 7

[20] C. Ledig, L. Theis, F. Huszar, J. Caballero, A. Cunning-
ham, A. Acosta, A. Aitken, A. Tejani, J. Totz, Z. Wang, and
W. Shi. Photo-Realistic Single Image Super-Resolution Us-
ing a Generative Adversarial Network. ArXiv e-prints, Sept.
2016. 1, 3, 4

[21] B. Li, X. Peng, Z. Wang, J. Xu, and D. Feng. An All-in-
One Network for Dehazing and Beyond. ArXiv e-prints, July
2017. 7

[22] C. Li and M. Wand. Precomputed Real-Time Texture Syn-
thesis with Markovian Generative Adversarial Networks.
ArXiv e-prints, Apr. 2016. 3, 5

[23] X. Mao, Q. Li, H. Xie, R. Y. K. Lau, and Z. Wang.
Least squares generative adversarial networks, 2016. cite
arxiv:1611.04076. 4

[24] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. CoRR, abs/1411.1784, 2014. 1

[25] S. Nah, T. Hyun, K. Kyoung, and M. Lee. Deep Multi-scale
Convolutional Neural Network for Dynamic Scene Deblur-
ring. 2016. 1, 2, 3, 4, 5, 6, 7, 8

[26] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-
In International Conference

stricted boltzmann machines.
on Machine Learning (ICML), pages 807–814, 2010. 5
[27] M. Noroozi, P. Chandramouli, and P. Favaro. Motion De-

blurring in the Wild. 2017. 3, 5, 8

[28] D. Perrone and P. Favaro. Total variation blind deconvolu-
tion: The devil is in the details. In EEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), 2014. 2
[29] S. Ramakrishnan, S. Pachori, A. Gangopadhyay, and S. Ra-
man. Deep generative ﬁlter for motion deblurring. 2017
IEEE International Conference on Computer Vision Work-
shops (ICCVW), pages 2993–3000, 2017. 3

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
Only Look Once: Uniﬁed, Real-Time Object Detection.
ArXiv e-prints, June 2015. 1, 7, 8

[31] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional Networks for Biomedical Image Segmentation. ArXiv
e-prints, May 2015. 4

[32] M. S. M. Sajjadi, B. Sch¨olkopf, and M. Hirsch. Enhancenet:
Single image super-resolution through automated texture
synthesis. 2017 IEEE International Conference on Computer
Vision (ICCV), pages 4501–4510, 2017. 7

[33] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Rad-
ford, and X. Chen. Improved Techniques for Training GANs.
ArXiv e-prints, June 2016. 3

[34] K. Simonyan and A. Zisserman. Very Deep Convolutional
Networks for Large-Scale Image Recognition. ArXiv e-
prints, Sept. 2014. 4

[35] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: A simple way to prevent neural
networks from overﬁtting. J. Mach. Learn. Res., 15(1):1929–
1958, Jan. 2014. 5

[36] J. Sun, W. Cao, Z. Xu, and J. Ponce. Learning a Convo-
lutional Neural Network for Non-uniform Motion Blur Re-
moval. 2015. 3, 5, 7, 8

[37] R. Szeliski. Computer Vision: Algorithms and Applications.
Springer-Verlag New York, Inc., New York, NY, USA, 1st
edition, 2010. 2

[38] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky.

Instance
normalization: The missing ingredient for fast stylization.
CoRR, abs/1607.08022, 2016. 5

[39] C. Villani. Optimal Transport: Old and New. Grundlehren
der mathematischen Wissenschaften. Springer Berlin Hei-
delberg, 2008. 3

[40] O. Whyte, J. Sivic, A. Zisserman, and J. Ponce. Non-uniform
deblurring for shaken images. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
2010. 2, 8

[41] B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of
rectiﬁed activations in convolutional network. arXiv preprint
arXiv:1505.00853, 2015. 5

[42] L. Xu and J. Jia. Two-phase kernel estimation for robust
In Lecture Notes in Computer Science
motion deblurring.
(including subseries Lecture Notes in Artiﬁcial Intelligence
and Lecture Notes in Bioinformatics), 2010. 2

[43] L. Xu, J. S. J. Ren, C. Liu, and J. Jia. Deep convolutional
In Proceedings
neural network for image deconvolution.
of the 27th International Conference on Neural Information
Processing Systems - Volume 1, NIPS’14, pages 1790–1798,
Cambridge, MA, USA, 2014. MIT Press. 5

[44] L. Xu, S. Zheng, and J. Jia. Unnatural L0 Sparse Represen-

tation for Natural Image Deblurring. 2013. 2, 7, 8

[45] R. A. Yeh, C. Chen, T. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. CoRR, abs/1607.07539, 2016. 1

[46] M. D. Zeiler and R. Fergus. Visualizing and understanding
convolutional networks. CoRR, abs/1311.2901, 2013. 4
[47] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint arXiv:1703.10593, 2017. 4

DeblurGAN: Blind Motion Deblurring Using Conditional Adversarial Networks

Orest Kupyn1,3, Volodymyr Budzan1,3, Mykola Mykhailych1, Dmytro Mishkin2, Jiˇri Matas2
1 Ukrainian Catholic University, Lviv, Ukraine
{kupyn, budzan, mykhailych}@ucu.edu.ua

2 Visual Recognition Group, Center for Machine Perception, FEE, CTU in Prague
{mishkdmy, matas}@cmp.felk.cvut.cz
3 ELEKS Ltd.

8
1
0
2
 
r
p
A
 
3
 
 
]

V
C
.
s
c
[
 
 
4
v
4
6
0
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

We present DeblurGAN, an end-to-end learned method
for motion deblurring. The learning is based on a condi-
tional GAN and the content loss . DeblurGAN achieves
state-of-the art performance both in the structural similarity
measure and visual appearance. The quality of the deblur-
ring model is also evaluated in a novel way on a real-world
problem – object detection on (de-)blurred images. The
method is 5 times faster than the closest competitor – Deep-
Deblur [25]. We also introduce a novel method for gen-
erating synthetic motion blurred images from sharp ones,
allowing realistic dataset augmentation.

The model, code and the dataset are available at
https://github.com/KupynOrest/DeblurGAN

1. Introduction

This work is on blind motion deblurring of a single pho-
tograph. Signiﬁcant progress has been recently achieved
in related areas of image super-resolution [20] and in-
painting [45] by applying generative adversarial networks
(GANs) [10]. GANs are known for the ability to preserve
texture details in images, create solutions that are close to
the real image manifold and look perceptually convincing.
Inspired by recent work on image super-resolution [20] and
image-to-image translation by generative adversarial net-
works [16], we treat deblurring as a special case of such
image-to-image translation. We present DeblurGAN – an
approach based on conditional generative adversarial net-
works [24] and a multi-component loss function. Unlike
previous work we use Wasserstein GAN [2] with the gradi-
ent penalty [11] and perceptual loss [17]. This encourages
solutions which are perceptually hard to distinguish from
real sharp images and allows to restore ﬁner texture details
than if using traditional MSE or MAE as an optimization
target.

Figure 1: DeblurGAN helps object detection. YOLO [30]
detections on the blurred image (top), the DeblurGAN re-
stored (middle) and the sharp ground truth image from the
GoPro [25] dataset.

1

Figure 2: GoPro images [25] processed by DeblurGAN. Blurred – left, DeblurGAN – center, ground truth sharp – right.

We make three contributions. First, we propose a loss
and architecture which obtain state-of-the art results in mo-
tion deblurring, while being 5x faster than the fastest com-
petitor. Second, we present a method based on random
trajectories for generating a dataset for motion deblurring
training in an automated fashion from the set of sharp im-
age. We show that combining it with an existing dataset
for motion deblurring learning improves results compared
to training on real-world images only. Finally, we present a
novel dataset and method for evaluation of deblurring algo-
rithms based on how they improve object detection results.

2. Related work

2.1. Image Deblurring

The common formulation of non-uniform blur model is

the following:

IB = k(M ) ∗ IS + N,

(1)

where IB is a blurred image, k(M ) are unknown blur ker-
nels determined by motion ﬁeld M . IS is the sharp latent
image, ∗ denotes the convolution, N is an additive noise.
The family of deblurring problems is divided into two types:
blind and non-blind deblurring. Early work [37] mostly fo-
cused on non-blind deblurring, making an assumption that

the blur kernels k(M ) are known. Most rely on the classi-
cal Lucy-Richardson algorithm, Wiener or Tikhonov ﬁlter
to perform the deconvolution operation and obtain IS esti-
mate. Commonly the blur function is unknown, and blind
deblurring algorithms estimate both latent sharp image IS
and blur kernels k(M ). Finding a blur function for each
pixel is an ill-posed problem, and most of the existing algo-
rithms rely on heuristics, image statistics and assumptions
on the sources of the blur. Those family of methods ad-
dresses the blur caused by camera shake by considering blur
to be uniform across the image. Firstly, the camera motion
is estimated in terms of the induced blur kernel, and then
the effect is reversed by performing a deconvolution oper-
ation. Starting with the success of Fergus et al. [8], many
methods [44][42][28][3] has been developed over the last
ten years. Some of the methods are based on an iterative ap-
proach [8] [44], which improve the estimate of the motion
kernel and sharp image on each iteration by using paramet-
ric prior models. However, the running time, as well as the
stopping criterion, is a signiﬁcant problem for those kinds
of algorithms. Others use assumptions of a local linearity
of a blur function and simple heuristics to quickly estimate
the unknown kernel. These methods are fast but work well
on a small subset of images.

Recently, Whyte et al. [40] developed a novel algorithm

Figure 3: DeblurGAN generator architecture. DeblurGAN contains two strided convolution blocks with stride 1
2 , nine resid-
ual blocks [13] and two transposed convolution blocks. Each ResBlock consists of a convolution layer, instance normalization
layer, and ReLU activation.

for non-uniform blind deblurring based on a parametrized
geometric model of the blurring process in terms of the
rotational velocity of the camera during exposure. Simi-
larly Gupta et al. [12] made an assumption that the blur is
caused only by 3D camera movement. With the success
of deep learning, over the last few years, there appeared
some approaches based on convolutional neural networks
(CNNs). Sun et al. [36] use CNN to estimate blur ker-
nel, Chakrabarti [6] predicts complex Fourier coefﬁcients
of motion kernel to perform non-blind deblurring in Fourier
space whereas Gong [9] use fully convolutional network to
move for motion ﬂow estimation. All of these approaches
use CNN to estimate the unknown blur function. Recently,
a kernel-free end-to-end approaches by Noorozi [27] and
Nah [25] that uses multi-scale CNN to directly deblur the
image. Ramakrishnan et al. [29] use the combination of
pix2pix framework [16] and densely connected convolu-
tional networks [15] to perform blind kernel-free image
deblurring. Such methods are able to deal with different
sources of the blur.

2.2. Generative adversarial networks

The idea of generative adversarial networks, introduced
by Goodfellow et al. [10], is to deﬁne a game between two
competing networks: the discriminator and the generator.
The generator receives noise as an input and generates a
sample. A discriminator receives a real and generated sam-
ple and is trying to distinguish between them. The goal of
the generator is to fool the discriminator by generating per-
ceptually convincing samples that can not be distinguished
from the real one. The game between the generator G and
discriminator D is the minimax objective:

min
G

max
D

E
x(cid:118)Pr

[log(D(x))] + E

[log(1 − D(˜x))]

(2)

˜x(cid:118)Pg

where Pr is the data distribution and Pg is the model dis-
tribution, deﬁned by ˜x = G(z), z (cid:118) P (z), the input z
is a sample from a simple noise distribution. GANs are
known for its ability to generate samples of good percep-
tual quality, however, training of vanilla version suffer from

many problems such as mode collapse, vanishing gradi-
ents etc, as described in [33]. Minimizing the value func-
tion in GAN is equal to minimizing the Jensen-Shannon di-
vergence between the data and model distributions on x.
Arjovsky et al. [2] discuss the difﬁculties in GAN train-
ing caused by JS divergence approximation and propose
to use the Earth-Mover (also called Wasserstein-1) distance
W (q, p). The value function for WGAN is constructed us-
ing Kantorovich-Rubinstein duality [39]:

min
G

max
D∈D

E
x(cid:118)Pr

[D(x)] − E

[D(˜x)]

(3)

˜x(cid:118)Pg

where D is the set of 1−Lipschitz functions and Pg is once
again the model distribution The idea here is that critic value
approximates K · W (Pr, Pθ), where K is a Lipschitz con-
stant and W (Pr, Pθ) is a Wasserstein distance. In this set-
ting, a discriminator network is called critic and it approx-
imates the distance between the samples. To enforce Lips-
chitz constraint in WGAN Arjovsky et al. add weight clip-
ping to [−c, c]. Gulrajani et al. [11] propose to add a gradi-
ent penalty term instead:

λ E

˜x(cid:118)P˜x

[((cid:107)∇˜xD(˜x)(cid:107)2 − 1)2]

(4)

to the value function as an alternative way to enforce the
Lipschitz constraint. This approach is robust to the choice
of generator architecture and requires almost no hyperpa-
rameter tuning. This is crucial for image deblurring as it al-
lows to use novel lightweight neural network architectures
in contrast to standard Deep ResNet architectures, previ-
ously used for image deblurring [25].

2.3. Conditional adversarial networks

Generative Adversarial Networks have been applied to
different image-to-image translation problems, such as su-
per resolution [20], style transfer [22], product photo gen-
eration [5] and others. Isola et al. [16] provides a detailed
overview of those approaches and present conditional GAN
architecture also known as pix2pix. Unlike vanilla GAN,

cGAN learns a mapping from observed image x and ran-
Isola et al.
dom noise vector z, to y : G : x, z → y.
also put a condition on the discriminator and use U-net
architecture [31] for generator and Markovian discrimina-
tor which allows achieving perceptually superior results on
many tasks, including synthesizing photos from label maps,
reconstructing objects from edge maps, and colorizing im-
ages.

3. The proposed method

The goal is to recover sharp image IS given only a
blurred image IB as an input, so no information about the
blur kernel is provided. Debluring is done by the trained
CNN GθG , to which we refer as the Generator. For each
IB it estimates corresponding IS image. In addition, during
the training phase, we introduce critic the network DθD and
train both networks in an adversarial manner.

3.1. Loss function

We formulate the loss function as a combination of con-

tent and adversarial loss:

+

L = LGAN
(cid:124) (cid:123)(cid:122) (cid:125)
adv loss
(cid:124)

λ · LX
(cid:124) (cid:123)(cid:122) (cid:125)
content loss
(cid:125)

(cid:123)(cid:122)
total loss

(5)

where the λ equals to 100 in all experiments. Unlike Isola et
al. [16] we do not condition the discriminator as we do not
need to penalize mismatch between the input and output.
Adversarial loss Most of the papers related to conditional
GANs, use vanilla GAN objective as the loss [20][25] func-
tion. Recently [47] provides an alternative way of using
least aquare GAN [23] which is more stable and generates
higher quality results. We use WGAN-GP [11] as the critic
function, which is shown to be robust to the choice of gen-
erator architecture [2]. Our premilinary experiments with
different architectures conﬁrmed that ﬁndings and we are
able to use architecture much lighter than ResNet152 [25],
see next subsection. The loss is calculated as the following:

LGAN =

−DθD (GθG(I B))

(6)

N
(cid:88)

n=1

DeblurGAN trained without GAN component converges,
but produces smooth and blurry images.

Content loss. Two classical choices for ”content” loss
function are L1 or MAE loss, L2 or MSE loss on raw pix-
els. Using those functions as sole optimization target leads
to the blurry artifacts on generated images due to the pixel-
wise average of possible solutions in the pixel space [20].
Instead, we adopted recently proposed Perceptual loss [17].
Perceptual loss is a simple L2-loss, but based on the differ-
ence of the generated and target image CNN feature maps.
It is deﬁned as following:

Figure 4: DeblurGAN training. The generator network
takes the blurred image as input and produces the estimate
of the sharp image. The critic network takes the restored
and sharp images and outputs a distance between them. The
total loss consists of the WGAN loss from critic and the per-
ceptual loss [17]. The perceptual loss is the difference be-
tween the VGG-19 [34] conv3.3 feature maps of the sharp
and restored images. At test time, only the generator is kept.

LX =

1
Wi,j Hi,j

(φi,j(I S)x,y − φi,j(GθG (I B))x,y)2

Wi,j
(cid:88)

Hi,j
(cid:88)

x=1

y=1

where φi,j is the feature map obtained by the j-th convo-
lution (after activation) before the i-th maxpooling layer
within the VGG19 network, pretrained on ImageNet [7],
Wi,j and Hi,j are the dimensions of the feature maps. In
our work we use activations from V GG3,3 convolutional
layer. The activations of the deeper layers represents the
features of a higher abstraction [46][20]. The perceptual
loss focuses on restoring general content [16] [20] while ad-

Figure 5: Examples of generated camera motion trajectory and the blur kernel and the corresponding blurred images.

versarial loss focuses on restoring texture details. Deblur-
GAN trained without Perceptual loss or with simple MSE
on pixels instead doesn’t converge to meaningful state.

Additional regularization. We have also tried to add
TV regularization and model trained with it yields worse
performance – 27.9 vs. 28.7 w/o PSNR on GoPro dataset.

3.2. Network architecture

It
Generator CNN architecture is shown in Figure 3.
is similar to one proposed by Johnson et al. [17] for style
transfer task.
It contains two strided convolution blocks
with stride 1
2 , nine residual blocks [13] (ResBlocks) and
two transposed convolution blocks. Each ResBlock consists
of a convolution layer, instance normalization layer [38],
and ReLU [26] activation. Dropout [35] regularization
with a probability of 0.5 is added after the ﬁrst convolu-
tion layer in each ResBlock. In addition, we introduce the
global skip connection which we refer to as ResOut. CNN
learns a residual correction IR to the blurred image IB, so
IS = IB + IR. We ﬁnd that such formulation makes train-
ing faster and resulting model generalizes better. During
the training phase, we deﬁne a critic network DθD , which is
Wasserstein GAN [2] with gradient penalty [11], to which
we refer as WGAN-GP. The architecture of critic network
is identical to PatchGAN [16, 22]. All the convolutional
layers except the last are followed by InstanceNorm layer
and LeakyReLU [41] with α = 0.2.

4. Motion blur generation

There is no easy method to obtain image pairs of cor-
responding sharp and blurred images for training.A typical
approach to obtain image pairs for training is to use a high
frame-rate camera to simulate blur using average of sharp
It allows to create realistic
frames from video [27, 25].
blurred images but limits the image space only to scenes
present in taken videos and makes it complicated to scale
the dataset. Sun et al. [36] creates synthetically blurred im-
ages by convolving clean natural images with one out of 73
possible linear motion kernels, Xu et al. [43] also use lin-
ear motion kernels to create synthetically blurred images.

Figure 6: Top row: Blur kernels from real-world images
estimated by Fergus et al. [8]. Bottom row: Synthetically
generated kernels by our method. Our randomized method
can simulate wide variety of realistic blur kernels with dif-
ferent level of non-linearity.

Chakrabarti [6] creates blur kernel by sampling 6 random
points and ﬁtting a spline to them. We take a step further and
propose a method, which simulates more realistic and com-
plex blur kernels. We follow the idea described by Borac-
chi and Foi [4] of random trajectories generation. Then the
kernels are generated by applying sub-pixel interpolation to
the trajectory vector. Each trajectory vector is a complex
valued vector, which corresponds to the discrete positions
of an object following 2D random motion in a continuous
domain. Trajectory generation is done by Markov process,
summarized in Algorithm 1. Position of the next point of
the trajectory is randomly generated based on the previous
point velocity and position, gaussian perturbation, impulse
perturbation and deterministic inertial component.

5. Training Details

We implemented all of our models using PyTorch[1]
deep learning framework. The training was performed
on a single Maxwell GTX Titan-X GPU using three

Figure 7: Results on the GoPro test dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

Figure 8: Results on the Kohler dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

to which we re-
The ﬁrst model
different datasets.
fer as DeblurGANWILD was trained on a random crops
of size 256x256 from 1000 GoPro training dataset im-

ages [25] downscaled by a factor of two. The second one
DeblurGANSynth was trained on 256x256 patches from MS
COCO dataset blurred by method, presented in previous

Algorithm 1 Motion blur kernel generation.
Parameters:
M = 2000 – number of iterations,
Lmax = 60 – max length of the movement,
ps = 0.001 – probability of impulsive shake,
I – inertia term, uniform from (0,0.7),
pb – probability of big shake, uniform from (0,0.2),
pg – probability of gaussian shake, uniform from (0,0.7),
φ – initial angle, uniform from (0,2π),
x – trajectory vector.

1: procedure BLUR(Img, M, Lmax, ps)
v0 ← cos(φ) + sin(φ) ∗ i
2:
v ← vo ∗ Lmax/(M − 1)
3:
x = zeros(M, 1)
4:
for t = 1 to M − 1 do

if randn < pb ∗ ps then

nextDir ← 2 · v · ei∗(π+(randn−0.5)))

else:

nextDir ← 0

dv ← nextDir + ps ∗ (pg ∗ (randn + i ∗ randn) ∗

I ∗ x[t] ∗ (Lmax/(M − 1))
v ← v + dv
v ← (v/abs(v)) ∗ Lmax/(M − 1)
x[t + 1] ← x[t] + v

Kernel ← sub pixel interpolation(x)
Blurred image ← conv(Kernel, Img)
return Blurred image

5:
6:
7:
8:
9:

10:

11:
12:

13:

14:

15:
16:

Section. We also trained DeblurGANComb on a combina-
tion of synthetically blurred images and images taken in the
wild, where the ratio of synthetically generated images to
the images taken by a high frame-rate camera is 2:1. As
the models are fully convolutional and are trained on image
patches they can be applied to images of arbitrary size. For
optimization we follow the approach of
[2] and perform
5 gradient descent steps on DθD , then one step on GθG,
using Adam [18] as a solver. The learning rate is set ini-
tially to 10−4 for both generator and critic. After the ﬁrst
150 epochs we linearly decay the rate to zero over the next
150 epochs. At inference time we follow the idea of [16]
and apply both dropout and instance normalization. All the
models were trained with a batch size = 1, which showed
empirically better results on validation. The training phase
took 6 days for training one DeblurGAN network.

6. Experimental evaluation

6.1. GoPro Dataset

GoPro dataset[25] consists of 2103 pairs of blurred and
sharp images in 720p quality, taken from various scenes.
We compare the results of our models with state of the art
models [36], [25] on standard metrics and also show the

Table 1: Peak signal-to-noise ratio and the structural sim-
ilarity measure, mean over the GoPro test dataset of 1111
images. All models were tested on the linear image subset.
State-of-art results (∗) by Nah et al. [25] obtained on the
gamma subset.

Sun et al. Nah et al. Xu et al.

DeblurGAN

Metric

[36]

[25]

[44] WILD Synth Comb

24.6
PSNR
SSIM 0.842

28.3/29.1*
0.916

25.1
0.89

28.7
23.6
27.2
0.954 0.884 0.958

Time

20 min

4.33 s

13.41 s

0.85 s

running time of each algorithm on a single GPU. Results
are in Table1. DeblurGAN shows superior results in terms
of structured self-similarity, is close to state-of-the-art in
peak signal-to-noise-ratio and provides better looking re-
sults by visual inspection. In contrast to other neural mod-
els, our network does not use L2 distance in pixel space so
it is not directly optimized for PSNR metric. It can handle
blur caused by camera shake and object movement, does
not suffer from usual artifacts in kernel estimation methods
and at the same time has more than 6x fewer parameters
comparing to Multi-scale CNN , which heavily speeds up
the inference. Deblured images from test on GoPro dataset
are shown in Figure 7.

6.2. Kohler dataset

Kohler dataset [19] consists of 4 images blurred with 12
different kernels for each of them. This is a standard bench-
mark dataset for evaluation of blind deblurring algorithms.
The dataset is generated by recording and analyzing real
camera motion, which is played back on a robot platform
such that a sequence of sharp images is recorded sampling
the 6D camera motion trajectory. Results are in Table 2,
similar to GoPro evaluation.

6.3. Object Detection benchmark on YOLO

Object Detection is one of the most well-studied prob-
lems in computer vision with applications in different do-
mains from autonomous driving to security. During the last
few years approaches based on Deep Convolutional Neural
Networks showed state of the art performance comparing to
traditional methods. However, those networks are trained
on limited datasets and in real-world settings images are of-
ten degraded by different artifacts, including motion blur,
Similar to [21] and [32] we studied the inﬂuence of motion
blur on object detection and propose a new way to evalu-
ate the quality of deblurring algorithm based on results of
object detection on a pretrained YOLO [30] network.

For this, we constructed a dataset of sharp and blurred
street views by simulating camera shake using a high frame-

Table 2: Peak signal-to-noise ratio and structural similarity measure, mean on the Kohler dataset. Xu et al. [44] and Whyte et
al. [40] are non-CNN blind deblurring methods, whereas Sun et al. [36] and Nah et al. [25] use CNN.

Method

Sun et al. Nah et al. Xu et al. Whyte et al.

DeblurGAN

Metric

PSNR
SSIM

[36]

25.22
0.773

[25]

26.48
0.807

[44]

27.47
0.811

[40]

27.03
0.809

WILD Synth

Comb

26.10
0.816

25.67
0.792

25.86
0.802

(a) Blurred photo

(b) Nah et al. [25]

(c) DeblurGAN

(d) Sharp photo

Figure 9: YOLO object detection before and after deblurring

rate video camera. Following [14][25][27] we take a ran-
dom between 5 and 25 frames taken by 240fps camera and
compute the blurred version of a middle frame as an aver-
age of those frames. All the frames are gamma-corrected
with γ = 2.2 and then the inverse function is taken to ob-
tain the ﬁnal blurred frame. Overall, the dataset consists of
410 pairs of blurred and sharp images, taken from the streets
and parking places with different number and types of cars.
Blur source includes both camera shake and blur caused
by car movement. The dataset and supplementary code are
available online. Then sharp images are feed into the YOLO
network and the result after visual veriﬁcation is assigned as
ground truth. Then YOLO is run on blurred and recovered
versions of images and average recall and precision between
obtained results and ground truth are calculated. This ap-
proach corresponds to the quality of deblurring models on
real-life problems and correlates with the visual quality and
sharpness of the generated images, in contrast to standard
PSNR metric. The precision, in general, is higher on blurry
images as there are no sharp object boundaries and smaller
object are not detected as it shown in Figure 9.

Results are shown in Table 3. DeblurGAN signiﬁcantly

outperforms competitors in terms of recall and F1 score.

7. Conclusion

We described a kernel-free blind motion deblurring
learning approach and introduced DeblurGAN which is a
Conditional Adversarial Network that is optimized using a
multi-component loss function. In addition to this, we im-

Table 3: Results of YOLO [30] object detection on blurred
and restored photos using DeblurGAN and Nah et al. [25]
algorithms. Results on corresponding sharp images are con-
sidered ground truth. DeblurGAN has higher recall and F1
score than its competitors.

Method

prec.

recall

F1 score

no deblur
Nah et al. [25]

0.821
0.834
DeblurGAN WILD 0.764
0.801
DeblurGAN synth
0.671
DeblurGAN comb

0.437
0.552
0.631
0.517
0.742

0.570
0.665
0.691
0.628
0.704

plemented a new method for creating a realistic synthetic
motion blur able to model different blur sources. We in-
troduce a new benchmark and evaluation protocol based on
results of object detection and show that DeblurGAN sig-
niﬁcantly helps detection on blurred images.

8. Acknowledgements

The authors were supported by the ELEKS Ltd.,
ARVI Lab, Czech Science Foundation Project GACR
P103/12/G084, the Austrian Ministry for Transport, Inno-
vation and Technology, the Federal Ministry of Science,
Research and Economy, and the Province of Upper Austria
in the frame of the COMET center, the CTU student grant
SGS17/185/OHK3/3T/13. We thank Huaijin Chen for
ﬁnding the bug in peak-signal-to-noise ratio evaluation.

References

[1] PyTorch. http://pytorch.org. 5
[2] M. Arjovsky, S. Chintala, and L. Bottou. Wasserstein GAN.

ArXiv e-prints, Jan. 2017. 1, 3, 4, 5, 7

[3] S. D. Babacan, R. Molina, M. N. Do, and A. K. Katsaggelos.
Bayesian blind deconvolution with general sparse image pri-
ors. In European Conference on Computer Vision (ECCV),
Firenze, Italy, October 2012. Springer. 2

[4] G. Boracchi and A. Foi. Modeling the performance of im-
age restoration from motion blur. Image Processing, IEEE
Transactions on, 21(8):3502 –3517, aug. 2012. 5

[5] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised Pixel-Level Domain Adaptation with
Generative Adversarial Networks. ArXiv e-prints, Dec. 2016.
3

[6] A. Chakrabarti. A neural approach to blind motion deblur-
ring. In Lecture Notes in Computer Science (including sub-
series Lecture Notes in Artiﬁcial Intelligence and Lecture
Notes in Bioinformatics), 2016. 3, 5

[7] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009. 4

[8] R. Fergus, B. Singh, A. Hertzmann, S. T. Roweis, and W. T.
Freeman. Removing camera shake from a single photograph.
ACM Trans. Graph., 25(3):787–794, July 2006. 2, 5

[9] D. Gong, J. Yang, L. Liu, Y. Zhang, I. Reid, C. Shen, A. Van
Den Hengel, and Q. Shi. From Motion Blur to Motion Flow:
a Deep Learning Solution for Removing Heterogeneous Mo-
tion Blur. 2016. 3

[10] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Networks. June 2014. 1, 3

[11] I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and
Improved Training of Wasserstein GANs.

A. Courville.
ArXiv e-prints, Mar. 2017. 1, 3, 4, 5

[12] A. Gupta, N. Joshi, C. L. Zitnick, M. Cohen, and B. Curless.
Single image deblurring using motion density functions. In
Proceedings of the 11th European Conference on Computer
Vision: Part I, ECCV’10, pages 171–184, Berlin, Heidel-
berg, 2010. Springer-Verlag. 3

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015. 3, 5

[14] M. Hirsch, C. J. Schuler, S. Harmeling, and B. Scholkopf.
Fast removal of non-uniform camera shake. In Proceedings
of the 2011 International Conference on Computer Vision,
ICCV ’11, pages 463–470, Washington, DC, USA, 2011.
IEEE Computer Society. 8

[15] G. Huang, Z. Liu, L. van der Maaten, and K. Q. Wein-
berger. Densely connected convolutional networks. 2017
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2261–2269, 2017. 3

[16] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
arxiv,

translation with conditional adversarial networks.
2016. 1, 3, 4, 5, 7

[17] J. Johnson, A. Alahi, and L. Fei-Fei. Perceptual losses for
In European

real-time style transfer and super-resolution.
Conference on Computer Vision, 2016. 1, 4, 5

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014. 7

[19] R. K¨ohler, M. Hirsch, B. Mohler, B. Sch¨olkopf, and
S. Harmeling.
Recording and playback of camera
shake: Benchmarking blind deconvolution with a real-world
database. In Proceedings of the 12th European Conference
on Computer Vision - Volume Part VII, ECCV’12, pages 27–
40, Berlin, Heidelberg, 2012. Springer-Verlag. 7

[20] C. Ledig, L. Theis, F. Huszar, J. Caballero, A. Cunning-
ham, A. Acosta, A. Aitken, A. Tejani, J. Totz, Z. Wang, and
W. Shi. Photo-Realistic Single Image Super-Resolution Us-
ing a Generative Adversarial Network. ArXiv e-prints, Sept.
2016. 1, 3, 4

[21] B. Li, X. Peng, Z. Wang, J. Xu, and D. Feng. An All-in-
One Network for Dehazing and Beyond. ArXiv e-prints, July
2017. 7

[22] C. Li and M. Wand. Precomputed Real-Time Texture Syn-
thesis with Markovian Generative Adversarial Networks.
ArXiv e-prints, Apr. 2016. 3, 5

[23] X. Mao, Q. Li, H. Xie, R. Y. K. Lau, and Z. Wang.
Least squares generative adversarial networks, 2016. cite
arxiv:1611.04076. 4

[24] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. CoRR, abs/1411.1784, 2014. 1

[25] S. Nah, T. Hyun, K. Kyoung, and M. Lee. Deep Multi-scale
Convolutional Neural Network for Dynamic Scene Deblur-
ring. 2016. 1, 2, 3, 4, 5, 6, 7, 8

[26] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-
In International Conference

stricted boltzmann machines.
on Machine Learning (ICML), pages 807–814, 2010. 5
[27] M. Noroozi, P. Chandramouli, and P. Favaro. Motion De-

blurring in the Wild. 2017. 3, 5, 8

[28] D. Perrone and P. Favaro. Total variation blind deconvolu-
tion: The devil is in the details. In EEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), 2014. 2
[29] S. Ramakrishnan, S. Pachori, A. Gangopadhyay, and S. Ra-
man. Deep generative ﬁlter for motion deblurring. 2017
IEEE International Conference on Computer Vision Work-
shops (ICCVW), pages 2993–3000, 2017. 3

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
Only Look Once: Uniﬁed, Real-Time Object Detection.
ArXiv e-prints, June 2015. 1, 7, 8

[31] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional Networks for Biomedical Image Segmentation. ArXiv
e-prints, May 2015. 4

[32] M. S. M. Sajjadi, B. Sch¨olkopf, and M. Hirsch. Enhancenet:
Single image super-resolution through automated texture
synthesis. 2017 IEEE International Conference on Computer
Vision (ICCV), pages 4501–4510, 2017. 7

[33] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Rad-
ford, and X. Chen. Improved Techniques for Training GANs.
ArXiv e-prints, June 2016. 3

[34] K. Simonyan and A. Zisserman. Very Deep Convolutional
Networks for Large-Scale Image Recognition. ArXiv e-
prints, Sept. 2014. 4

[35] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: A simple way to prevent neural
networks from overﬁtting. J. Mach. Learn. Res., 15(1):1929–
1958, Jan. 2014. 5

[36] J. Sun, W. Cao, Z. Xu, and J. Ponce. Learning a Convo-
lutional Neural Network for Non-uniform Motion Blur Re-
moval. 2015. 3, 5, 7, 8

[37] R. Szeliski. Computer Vision: Algorithms and Applications.
Springer-Verlag New York, Inc., New York, NY, USA, 1st
edition, 2010. 2

[38] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky.

Instance
normalization: The missing ingredient for fast stylization.
CoRR, abs/1607.08022, 2016. 5

[39] C. Villani. Optimal Transport: Old and New. Grundlehren
der mathematischen Wissenschaften. Springer Berlin Hei-
delberg, 2008. 3

[40] O. Whyte, J. Sivic, A. Zisserman, and J. Ponce. Non-uniform
deblurring for shaken images. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
2010. 2, 8

[41] B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of
rectiﬁed activations in convolutional network. arXiv preprint
arXiv:1505.00853, 2015. 5

[42] L. Xu and J. Jia. Two-phase kernel estimation for robust
In Lecture Notes in Computer Science
motion deblurring.
(including subseries Lecture Notes in Artiﬁcial Intelligence
and Lecture Notes in Bioinformatics), 2010. 2

[43] L. Xu, J. S. J. Ren, C. Liu, and J. Jia. Deep convolutional
In Proceedings
neural network for image deconvolution.
of the 27th International Conference on Neural Information
Processing Systems - Volume 1, NIPS’14, pages 1790–1798,
Cambridge, MA, USA, 2014. MIT Press. 5

[44] L. Xu, S. Zheng, and J. Jia. Unnatural L0 Sparse Represen-

tation for Natural Image Deblurring. 2013. 2, 7, 8

[45] R. A. Yeh, C. Chen, T. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. CoRR, abs/1607.07539, 2016. 1

[46] M. D. Zeiler and R. Fergus. Visualizing and understanding
convolutional networks. CoRR, abs/1311.2901, 2013. 4
[47] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint arXiv:1703.10593, 2017. 4

DeblurGAN: Blind Motion Deblurring Using Conditional Adversarial Networks

Orest Kupyn1,3, Volodymyr Budzan1,3, Mykola Mykhailych1, Dmytro Mishkin2, Jiˇri Matas2
1 Ukrainian Catholic University, Lviv, Ukraine
{kupyn, budzan, mykhailych}@ucu.edu.ua

2 Visual Recognition Group, Center for Machine Perception, FEE, CTU in Prague
{mishkdmy, matas}@cmp.felk.cvut.cz
3 ELEKS Ltd.

8
1
0
2
 
r
p
A
 
3
 
 
]

V
C
.
s
c
[
 
 
4
v
4
6
0
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

We present DeblurGAN, an end-to-end learned method
for motion deblurring. The learning is based on a condi-
tional GAN and the content loss . DeblurGAN achieves
state-of-the art performance both in the structural similarity
measure and visual appearance. The quality of the deblur-
ring model is also evaluated in a novel way on a real-world
problem – object detection on (de-)blurred images. The
method is 5 times faster than the closest competitor – Deep-
Deblur [25]. We also introduce a novel method for gen-
erating synthetic motion blurred images from sharp ones,
allowing realistic dataset augmentation.

The model, code and the dataset are available at
https://github.com/KupynOrest/DeblurGAN

1. Introduction

This work is on blind motion deblurring of a single pho-
tograph. Signiﬁcant progress has been recently achieved
in related areas of image super-resolution [20] and in-
painting [45] by applying generative adversarial networks
(GANs) [10]. GANs are known for the ability to preserve
texture details in images, create solutions that are close to
the real image manifold and look perceptually convincing.
Inspired by recent work on image super-resolution [20] and
image-to-image translation by generative adversarial net-
works [16], we treat deblurring as a special case of such
image-to-image translation. We present DeblurGAN – an
approach based on conditional generative adversarial net-
works [24] and a multi-component loss function. Unlike
previous work we use Wasserstein GAN [2] with the gradi-
ent penalty [11] and perceptual loss [17]. This encourages
solutions which are perceptually hard to distinguish from
real sharp images and allows to restore ﬁner texture details
than if using traditional MSE or MAE as an optimization
target.

Figure 1: DeblurGAN helps object detection. YOLO [30]
detections on the blurred image (top), the DeblurGAN re-
stored (middle) and the sharp ground truth image from the
GoPro [25] dataset.

1

Figure 2: GoPro images [25] processed by DeblurGAN. Blurred – left, DeblurGAN – center, ground truth sharp – right.

We make three contributions. First, we propose a loss
and architecture which obtain state-of-the art results in mo-
tion deblurring, while being 5x faster than the fastest com-
petitor. Second, we present a method based on random
trajectories for generating a dataset for motion deblurring
training in an automated fashion from the set of sharp im-
age. We show that combining it with an existing dataset
for motion deblurring learning improves results compared
to training on real-world images only. Finally, we present a
novel dataset and method for evaluation of deblurring algo-
rithms based on how they improve object detection results.

2. Related work

2.1. Image Deblurring

The common formulation of non-uniform blur model is

the following:

IB = k(M ) ∗ IS + N,

(1)

where IB is a blurred image, k(M ) are unknown blur ker-
nels determined by motion ﬁeld M . IS is the sharp latent
image, ∗ denotes the convolution, N is an additive noise.
The family of deblurring problems is divided into two types:
blind and non-blind deblurring. Early work [37] mostly fo-
cused on non-blind deblurring, making an assumption that

the blur kernels k(M ) are known. Most rely on the classi-
cal Lucy-Richardson algorithm, Wiener or Tikhonov ﬁlter
to perform the deconvolution operation and obtain IS esti-
mate. Commonly the blur function is unknown, and blind
deblurring algorithms estimate both latent sharp image IS
and blur kernels k(M ). Finding a blur function for each
pixel is an ill-posed problem, and most of the existing algo-
rithms rely on heuristics, image statistics and assumptions
on the sources of the blur. Those family of methods ad-
dresses the blur caused by camera shake by considering blur
to be uniform across the image. Firstly, the camera motion
is estimated in terms of the induced blur kernel, and then
the effect is reversed by performing a deconvolution oper-
ation. Starting with the success of Fergus et al. [8], many
methods [44][42][28][3] has been developed over the last
ten years. Some of the methods are based on an iterative ap-
proach [8] [44], which improve the estimate of the motion
kernel and sharp image on each iteration by using paramet-
ric prior models. However, the running time, as well as the
stopping criterion, is a signiﬁcant problem for those kinds
of algorithms. Others use assumptions of a local linearity
of a blur function and simple heuristics to quickly estimate
the unknown kernel. These methods are fast but work well
on a small subset of images.

Recently, Whyte et al. [40] developed a novel algorithm

Figure 3: DeblurGAN generator architecture. DeblurGAN contains two strided convolution blocks with stride 1
2 , nine resid-
ual blocks [13] and two transposed convolution blocks. Each ResBlock consists of a convolution layer, instance normalization
layer, and ReLU activation.

for non-uniform blind deblurring based on a parametrized
geometric model of the blurring process in terms of the
rotational velocity of the camera during exposure. Simi-
larly Gupta et al. [12] made an assumption that the blur is
caused only by 3D camera movement. With the success
of deep learning, over the last few years, there appeared
some approaches based on convolutional neural networks
(CNNs). Sun et al. [36] use CNN to estimate blur ker-
nel, Chakrabarti [6] predicts complex Fourier coefﬁcients
of motion kernel to perform non-blind deblurring in Fourier
space whereas Gong [9] use fully convolutional network to
move for motion ﬂow estimation. All of these approaches
use CNN to estimate the unknown blur function. Recently,
a kernel-free end-to-end approaches by Noorozi [27] and
Nah [25] that uses multi-scale CNN to directly deblur the
image. Ramakrishnan et al. [29] use the combination of
pix2pix framework [16] and densely connected convolu-
tional networks [15] to perform blind kernel-free image
deblurring. Such methods are able to deal with different
sources of the blur.

2.2. Generative adversarial networks

The idea of generative adversarial networks, introduced
by Goodfellow et al. [10], is to deﬁne a game between two
competing networks: the discriminator and the generator.
The generator receives noise as an input and generates a
sample. A discriminator receives a real and generated sam-
ple and is trying to distinguish between them. The goal of
the generator is to fool the discriminator by generating per-
ceptually convincing samples that can not be distinguished
from the real one. The game between the generator G and
discriminator D is the minimax objective:

min
G

max
D

E
x(cid:118)Pr

[log(D(x))] + E

[log(1 − D(˜x))]

(2)

˜x(cid:118)Pg

where Pr is the data distribution and Pg is the model dis-
tribution, deﬁned by ˜x = G(z), z (cid:118) P (z), the input z
is a sample from a simple noise distribution. GANs are
known for its ability to generate samples of good percep-
tual quality, however, training of vanilla version suffer from

many problems such as mode collapse, vanishing gradi-
ents etc, as described in [33]. Minimizing the value func-
tion in GAN is equal to minimizing the Jensen-Shannon di-
vergence between the data and model distributions on x.
Arjovsky et al. [2] discuss the difﬁculties in GAN train-
ing caused by JS divergence approximation and propose
to use the Earth-Mover (also called Wasserstein-1) distance
W (q, p). The value function for WGAN is constructed us-
ing Kantorovich-Rubinstein duality [39]:

min
G

max
D∈D

E
x(cid:118)Pr

[D(x)] − E

[D(˜x)]

(3)

˜x(cid:118)Pg

where D is the set of 1−Lipschitz functions and Pg is once
again the model distribution The idea here is that critic value
approximates K · W (Pr, Pθ), where K is a Lipschitz con-
stant and W (Pr, Pθ) is a Wasserstein distance. In this set-
ting, a discriminator network is called critic and it approx-
imates the distance between the samples. To enforce Lips-
chitz constraint in WGAN Arjovsky et al. add weight clip-
ping to [−c, c]. Gulrajani et al. [11] propose to add a gradi-
ent penalty term instead:

λ E

˜x(cid:118)P˜x

[((cid:107)∇˜xD(˜x)(cid:107)2 − 1)2]

(4)

to the value function as an alternative way to enforce the
Lipschitz constraint. This approach is robust to the choice
of generator architecture and requires almost no hyperpa-
rameter tuning. This is crucial for image deblurring as it al-
lows to use novel lightweight neural network architectures
in contrast to standard Deep ResNet architectures, previ-
ously used for image deblurring [25].

2.3. Conditional adversarial networks

Generative Adversarial Networks have been applied to
different image-to-image translation problems, such as su-
per resolution [20], style transfer [22], product photo gen-
eration [5] and others. Isola et al. [16] provides a detailed
overview of those approaches and present conditional GAN
architecture also known as pix2pix. Unlike vanilla GAN,

cGAN learns a mapping from observed image x and ran-
Isola et al.
dom noise vector z, to y : G : x, z → y.
also put a condition on the discriminator and use U-net
architecture [31] for generator and Markovian discrimina-
tor which allows achieving perceptually superior results on
many tasks, including synthesizing photos from label maps,
reconstructing objects from edge maps, and colorizing im-
ages.

3. The proposed method

The goal is to recover sharp image IS given only a
blurred image IB as an input, so no information about the
blur kernel is provided. Debluring is done by the trained
CNN GθG , to which we refer as the Generator. For each
IB it estimates corresponding IS image. In addition, during
the training phase, we introduce critic the network DθD and
train both networks in an adversarial manner.

3.1. Loss function

We formulate the loss function as a combination of con-

tent and adversarial loss:

+

L = LGAN
(cid:124) (cid:123)(cid:122) (cid:125)
adv loss
(cid:124)

λ · LX
(cid:124) (cid:123)(cid:122) (cid:125)
content loss
(cid:125)

(cid:123)(cid:122)
total loss

(5)

where the λ equals to 100 in all experiments. Unlike Isola et
al. [16] we do not condition the discriminator as we do not
need to penalize mismatch between the input and output.
Adversarial loss Most of the papers related to conditional
GANs, use vanilla GAN objective as the loss [20][25] func-
tion. Recently [47] provides an alternative way of using
least aquare GAN [23] which is more stable and generates
higher quality results. We use WGAN-GP [11] as the critic
function, which is shown to be robust to the choice of gen-
erator architecture [2]. Our premilinary experiments with
different architectures conﬁrmed that ﬁndings and we are
able to use architecture much lighter than ResNet152 [25],
see next subsection. The loss is calculated as the following:

LGAN =

−DθD (GθG(I B))

(6)

N
(cid:88)

n=1

DeblurGAN trained without GAN component converges,
but produces smooth and blurry images.

Content loss. Two classical choices for ”content” loss
function are L1 or MAE loss, L2 or MSE loss on raw pix-
els. Using those functions as sole optimization target leads
to the blurry artifacts on generated images due to the pixel-
wise average of possible solutions in the pixel space [20].
Instead, we adopted recently proposed Perceptual loss [17].
Perceptual loss is a simple L2-loss, but based on the differ-
ence of the generated and target image CNN feature maps.
It is deﬁned as following:

Figure 4: DeblurGAN training. The generator network
takes the blurred image as input and produces the estimate
of the sharp image. The critic network takes the restored
and sharp images and outputs a distance between them. The
total loss consists of the WGAN loss from critic and the per-
ceptual loss [17]. The perceptual loss is the difference be-
tween the VGG-19 [34] conv3.3 feature maps of the sharp
and restored images. At test time, only the generator is kept.

LX =

1
Wi,j Hi,j

(φi,j(I S)x,y − φi,j(GθG (I B))x,y)2

Wi,j
(cid:88)

Hi,j
(cid:88)

x=1

y=1

where φi,j is the feature map obtained by the j-th convo-
lution (after activation) before the i-th maxpooling layer
within the VGG19 network, pretrained on ImageNet [7],
Wi,j and Hi,j are the dimensions of the feature maps. In
our work we use activations from V GG3,3 convolutional
layer. The activations of the deeper layers represents the
features of a higher abstraction [46][20]. The perceptual
loss focuses on restoring general content [16] [20] while ad-

Figure 5: Examples of generated camera motion trajectory and the blur kernel and the corresponding blurred images.

versarial loss focuses on restoring texture details. Deblur-
GAN trained without Perceptual loss or with simple MSE
on pixels instead doesn’t converge to meaningful state.

Additional regularization. We have also tried to add
TV regularization and model trained with it yields worse
performance – 27.9 vs. 28.7 w/o PSNR on GoPro dataset.

3.2. Network architecture

It
Generator CNN architecture is shown in Figure 3.
is similar to one proposed by Johnson et al. [17] for style
transfer task.
It contains two strided convolution blocks
with stride 1
2 , nine residual blocks [13] (ResBlocks) and
two transposed convolution blocks. Each ResBlock consists
of a convolution layer, instance normalization layer [38],
and ReLU [26] activation. Dropout [35] regularization
with a probability of 0.5 is added after the ﬁrst convolu-
tion layer in each ResBlock. In addition, we introduce the
global skip connection which we refer to as ResOut. CNN
learns a residual correction IR to the blurred image IB, so
IS = IB + IR. We ﬁnd that such formulation makes train-
ing faster and resulting model generalizes better. During
the training phase, we deﬁne a critic network DθD , which is
Wasserstein GAN [2] with gradient penalty [11], to which
we refer as WGAN-GP. The architecture of critic network
is identical to PatchGAN [16, 22]. All the convolutional
layers except the last are followed by InstanceNorm layer
and LeakyReLU [41] with α = 0.2.

4. Motion blur generation

There is no easy method to obtain image pairs of cor-
responding sharp and blurred images for training.A typical
approach to obtain image pairs for training is to use a high
frame-rate camera to simulate blur using average of sharp
It allows to create realistic
frames from video [27, 25].
blurred images but limits the image space only to scenes
present in taken videos and makes it complicated to scale
the dataset. Sun et al. [36] creates synthetically blurred im-
ages by convolving clean natural images with one out of 73
possible linear motion kernels, Xu et al. [43] also use lin-
ear motion kernels to create synthetically blurred images.

Figure 6: Top row: Blur kernels from real-world images
estimated by Fergus et al. [8]. Bottom row: Synthetically
generated kernels by our method. Our randomized method
can simulate wide variety of realistic blur kernels with dif-
ferent level of non-linearity.

Chakrabarti [6] creates blur kernel by sampling 6 random
points and ﬁtting a spline to them. We take a step further and
propose a method, which simulates more realistic and com-
plex blur kernels. We follow the idea described by Borac-
chi and Foi [4] of random trajectories generation. Then the
kernels are generated by applying sub-pixel interpolation to
the trajectory vector. Each trajectory vector is a complex
valued vector, which corresponds to the discrete positions
of an object following 2D random motion in a continuous
domain. Trajectory generation is done by Markov process,
summarized in Algorithm 1. Position of the next point of
the trajectory is randomly generated based on the previous
point velocity and position, gaussian perturbation, impulse
perturbation and deterministic inertial component.

5. Training Details

We implemented all of our models using PyTorch[1]
deep learning framework. The training was performed
on a single Maxwell GTX Titan-X GPU using three

Figure 7: Results on the GoPro test dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

Figure 8: Results on the Kohler dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

to which we re-
The ﬁrst model
different datasets.
fer as DeblurGANWILD was trained on a random crops
of size 256x256 from 1000 GoPro training dataset im-

ages [25] downscaled by a factor of two. The second one
DeblurGANSynth was trained on 256x256 patches from MS
COCO dataset blurred by method, presented in previous

Algorithm 1 Motion blur kernel generation.
Parameters:
M = 2000 – number of iterations,
Lmax = 60 – max length of the movement,
ps = 0.001 – probability of impulsive shake,
I – inertia term, uniform from (0,0.7),
pb – probability of big shake, uniform from (0,0.2),
pg – probability of gaussian shake, uniform from (0,0.7),
φ – initial angle, uniform from (0,2π),
x – trajectory vector.

1: procedure BLUR(Img, M, Lmax, ps)
v0 ← cos(φ) + sin(φ) ∗ i
2:
v ← vo ∗ Lmax/(M − 1)
3:
x = zeros(M, 1)
4:
for t = 1 to M − 1 do

if randn < pb ∗ ps then

nextDir ← 2 · v · ei∗(π+(randn−0.5)))

else:

nextDir ← 0

dv ← nextDir + ps ∗ (pg ∗ (randn + i ∗ randn) ∗

I ∗ x[t] ∗ (Lmax/(M − 1))
v ← v + dv
v ← (v/abs(v)) ∗ Lmax/(M − 1)
x[t + 1] ← x[t] + v

Kernel ← sub pixel interpolation(x)
Blurred image ← conv(Kernel, Img)
return Blurred image

5:
6:
7:
8:
9:

10:

11:
12:

13:

14:

15:
16:

Section. We also trained DeblurGANComb on a combina-
tion of synthetically blurred images and images taken in the
wild, where the ratio of synthetically generated images to
the images taken by a high frame-rate camera is 2:1. As
the models are fully convolutional and are trained on image
patches they can be applied to images of arbitrary size. For
optimization we follow the approach of
[2] and perform
5 gradient descent steps on DθD , then one step on GθG,
using Adam [18] as a solver. The learning rate is set ini-
tially to 10−4 for both generator and critic. After the ﬁrst
150 epochs we linearly decay the rate to zero over the next
150 epochs. At inference time we follow the idea of [16]
and apply both dropout and instance normalization. All the
models were trained with a batch size = 1, which showed
empirically better results on validation. The training phase
took 6 days for training one DeblurGAN network.

6. Experimental evaluation

6.1. GoPro Dataset

GoPro dataset[25] consists of 2103 pairs of blurred and
sharp images in 720p quality, taken from various scenes.
We compare the results of our models with state of the art
models [36], [25] on standard metrics and also show the

Table 1: Peak signal-to-noise ratio and the structural sim-
ilarity measure, mean over the GoPro test dataset of 1111
images. All models were tested on the linear image subset.
State-of-art results (∗) by Nah et al. [25] obtained on the
gamma subset.

Sun et al. Nah et al. Xu et al.

DeblurGAN

Metric

[36]

[25]

[44] WILD Synth Comb

24.6
PSNR
SSIM 0.842

28.3/29.1*
0.916

25.1
0.89

28.7
23.6
27.2
0.954 0.884 0.958

Time

20 min

4.33 s

13.41 s

0.85 s

running time of each algorithm on a single GPU. Results
are in Table1. DeblurGAN shows superior results in terms
of structured self-similarity, is close to state-of-the-art in
peak signal-to-noise-ratio and provides better looking re-
sults by visual inspection. In contrast to other neural mod-
els, our network does not use L2 distance in pixel space so
it is not directly optimized for PSNR metric. It can handle
blur caused by camera shake and object movement, does
not suffer from usual artifacts in kernel estimation methods
and at the same time has more than 6x fewer parameters
comparing to Multi-scale CNN , which heavily speeds up
the inference. Deblured images from test on GoPro dataset
are shown in Figure 7.

6.2. Kohler dataset

Kohler dataset [19] consists of 4 images blurred with 12
different kernels for each of them. This is a standard bench-
mark dataset for evaluation of blind deblurring algorithms.
The dataset is generated by recording and analyzing real
camera motion, which is played back on a robot platform
such that a sequence of sharp images is recorded sampling
the 6D camera motion trajectory. Results are in Table 2,
similar to GoPro evaluation.

6.3. Object Detection benchmark on YOLO

Object Detection is one of the most well-studied prob-
lems in computer vision with applications in different do-
mains from autonomous driving to security. During the last
few years approaches based on Deep Convolutional Neural
Networks showed state of the art performance comparing to
traditional methods. However, those networks are trained
on limited datasets and in real-world settings images are of-
ten degraded by different artifacts, including motion blur,
Similar to [21] and [32] we studied the inﬂuence of motion
blur on object detection and propose a new way to evalu-
ate the quality of deblurring algorithm based on results of
object detection on a pretrained YOLO [30] network.

For this, we constructed a dataset of sharp and blurred
street views by simulating camera shake using a high frame-

Table 2: Peak signal-to-noise ratio and structural similarity measure, mean on the Kohler dataset. Xu et al. [44] and Whyte et
al. [40] are non-CNN blind deblurring methods, whereas Sun et al. [36] and Nah et al. [25] use CNN.

Method

Sun et al. Nah et al. Xu et al. Whyte et al.

DeblurGAN

Metric

PSNR
SSIM

[36]

25.22
0.773

[25]

26.48
0.807

[44]

27.47
0.811

[40]

27.03
0.809

WILD Synth

Comb

26.10
0.816

25.67
0.792

25.86
0.802

(a) Blurred photo

(b) Nah et al. [25]

(c) DeblurGAN

(d) Sharp photo

Figure 9: YOLO object detection before and after deblurring

rate video camera. Following [14][25][27] we take a ran-
dom between 5 and 25 frames taken by 240fps camera and
compute the blurred version of a middle frame as an aver-
age of those frames. All the frames are gamma-corrected
with γ = 2.2 and then the inverse function is taken to ob-
tain the ﬁnal blurred frame. Overall, the dataset consists of
410 pairs of blurred and sharp images, taken from the streets
and parking places with different number and types of cars.
Blur source includes both camera shake and blur caused
by car movement. The dataset and supplementary code are
available online. Then sharp images are feed into the YOLO
network and the result after visual veriﬁcation is assigned as
ground truth. Then YOLO is run on blurred and recovered
versions of images and average recall and precision between
obtained results and ground truth are calculated. This ap-
proach corresponds to the quality of deblurring models on
real-life problems and correlates with the visual quality and
sharpness of the generated images, in contrast to standard
PSNR metric. The precision, in general, is higher on blurry
images as there are no sharp object boundaries and smaller
object are not detected as it shown in Figure 9.

Results are shown in Table 3. DeblurGAN signiﬁcantly

outperforms competitors in terms of recall and F1 score.

7. Conclusion

We described a kernel-free blind motion deblurring
learning approach and introduced DeblurGAN which is a
Conditional Adversarial Network that is optimized using a
multi-component loss function. In addition to this, we im-

Table 3: Results of YOLO [30] object detection on blurred
and restored photos using DeblurGAN and Nah et al. [25]
algorithms. Results on corresponding sharp images are con-
sidered ground truth. DeblurGAN has higher recall and F1
score than its competitors.

Method

prec.

recall

F1 score

no deblur
Nah et al. [25]

0.821
0.834
DeblurGAN WILD 0.764
0.801
DeblurGAN synth
0.671
DeblurGAN comb

0.437
0.552
0.631
0.517
0.742

0.570
0.665
0.691
0.628
0.704

plemented a new method for creating a realistic synthetic
motion blur able to model different blur sources. We in-
troduce a new benchmark and evaluation protocol based on
results of object detection and show that DeblurGAN sig-
niﬁcantly helps detection on blurred images.

8. Acknowledgements

The authors were supported by the ELEKS Ltd.,
ARVI Lab, Czech Science Foundation Project GACR
P103/12/G084, the Austrian Ministry for Transport, Inno-
vation and Technology, the Federal Ministry of Science,
Research and Economy, and the Province of Upper Austria
in the frame of the COMET center, the CTU student grant
SGS17/185/OHK3/3T/13. We thank Huaijin Chen for
ﬁnding the bug in peak-signal-to-noise ratio evaluation.

References

[1] PyTorch. http://pytorch.org. 5
[2] M. Arjovsky, S. Chintala, and L. Bottou. Wasserstein GAN.

ArXiv e-prints, Jan. 2017. 1, 3, 4, 5, 7

[3] S. D. Babacan, R. Molina, M. N. Do, and A. K. Katsaggelos.
Bayesian blind deconvolution with general sparse image pri-
ors. In European Conference on Computer Vision (ECCV),
Firenze, Italy, October 2012. Springer. 2

[4] G. Boracchi and A. Foi. Modeling the performance of im-
age restoration from motion blur. Image Processing, IEEE
Transactions on, 21(8):3502 –3517, aug. 2012. 5

[5] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised Pixel-Level Domain Adaptation with
Generative Adversarial Networks. ArXiv e-prints, Dec. 2016.
3

[6] A. Chakrabarti. A neural approach to blind motion deblur-
ring. In Lecture Notes in Computer Science (including sub-
series Lecture Notes in Artiﬁcial Intelligence and Lecture
Notes in Bioinformatics), 2016. 3, 5

[7] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009. 4

[8] R. Fergus, B. Singh, A. Hertzmann, S. T. Roweis, and W. T.
Freeman. Removing camera shake from a single photograph.
ACM Trans. Graph., 25(3):787–794, July 2006. 2, 5

[9] D. Gong, J. Yang, L. Liu, Y. Zhang, I. Reid, C. Shen, A. Van
Den Hengel, and Q. Shi. From Motion Blur to Motion Flow:
a Deep Learning Solution for Removing Heterogeneous Mo-
tion Blur. 2016. 3

[10] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Networks. June 2014. 1, 3

[11] I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and
Improved Training of Wasserstein GANs.

A. Courville.
ArXiv e-prints, Mar. 2017. 1, 3, 4, 5

[12] A. Gupta, N. Joshi, C. L. Zitnick, M. Cohen, and B. Curless.
Single image deblurring using motion density functions. In
Proceedings of the 11th European Conference on Computer
Vision: Part I, ECCV’10, pages 171–184, Berlin, Heidel-
berg, 2010. Springer-Verlag. 3

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015. 3, 5

[14] M. Hirsch, C. J. Schuler, S. Harmeling, and B. Scholkopf.
Fast removal of non-uniform camera shake. In Proceedings
of the 2011 International Conference on Computer Vision,
ICCV ’11, pages 463–470, Washington, DC, USA, 2011.
IEEE Computer Society. 8

[15] G. Huang, Z. Liu, L. van der Maaten, and K. Q. Wein-
berger. Densely connected convolutional networks. 2017
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2261–2269, 2017. 3

[16] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
arxiv,

translation with conditional adversarial networks.
2016. 1, 3, 4, 5, 7

[17] J. Johnson, A. Alahi, and L. Fei-Fei. Perceptual losses for
In European

real-time style transfer and super-resolution.
Conference on Computer Vision, 2016. 1, 4, 5

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014. 7

[19] R. K¨ohler, M. Hirsch, B. Mohler, B. Sch¨olkopf, and
S. Harmeling.
Recording and playback of camera
shake: Benchmarking blind deconvolution with a real-world
database. In Proceedings of the 12th European Conference
on Computer Vision - Volume Part VII, ECCV’12, pages 27–
40, Berlin, Heidelberg, 2012. Springer-Verlag. 7

[20] C. Ledig, L. Theis, F. Huszar, J. Caballero, A. Cunning-
ham, A. Acosta, A. Aitken, A. Tejani, J. Totz, Z. Wang, and
W. Shi. Photo-Realistic Single Image Super-Resolution Us-
ing a Generative Adversarial Network. ArXiv e-prints, Sept.
2016. 1, 3, 4

[21] B. Li, X. Peng, Z. Wang, J. Xu, and D. Feng. An All-in-
One Network for Dehazing and Beyond. ArXiv e-prints, July
2017. 7

[22] C. Li and M. Wand. Precomputed Real-Time Texture Syn-
thesis with Markovian Generative Adversarial Networks.
ArXiv e-prints, Apr. 2016. 3, 5

[23] X. Mao, Q. Li, H. Xie, R. Y. K. Lau, and Z. Wang.
Least squares generative adversarial networks, 2016. cite
arxiv:1611.04076. 4

[24] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. CoRR, abs/1411.1784, 2014. 1

[25] S. Nah, T. Hyun, K. Kyoung, and M. Lee. Deep Multi-scale
Convolutional Neural Network for Dynamic Scene Deblur-
ring. 2016. 1, 2, 3, 4, 5, 6, 7, 8

[26] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-
In International Conference

stricted boltzmann machines.
on Machine Learning (ICML), pages 807–814, 2010. 5
[27] M. Noroozi, P. Chandramouli, and P. Favaro. Motion De-

blurring in the Wild. 2017. 3, 5, 8

[28] D. Perrone and P. Favaro. Total variation blind deconvolu-
tion: The devil is in the details. In EEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), 2014. 2
[29] S. Ramakrishnan, S. Pachori, A. Gangopadhyay, and S. Ra-
man. Deep generative ﬁlter for motion deblurring. 2017
IEEE International Conference on Computer Vision Work-
shops (ICCVW), pages 2993–3000, 2017. 3

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
Only Look Once: Uniﬁed, Real-Time Object Detection.
ArXiv e-prints, June 2015. 1, 7, 8

[31] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional Networks for Biomedical Image Segmentation. ArXiv
e-prints, May 2015. 4

[32] M. S. M. Sajjadi, B. Sch¨olkopf, and M. Hirsch. Enhancenet:
Single image super-resolution through automated texture
synthesis. 2017 IEEE International Conference on Computer
Vision (ICCV), pages 4501–4510, 2017. 7

[33] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Rad-
ford, and X. Chen. Improved Techniques for Training GANs.
ArXiv e-prints, June 2016. 3

[34] K. Simonyan and A. Zisserman. Very Deep Convolutional
Networks for Large-Scale Image Recognition. ArXiv e-
prints, Sept. 2014. 4

[35] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: A simple way to prevent neural
networks from overﬁtting. J. Mach. Learn. Res., 15(1):1929–
1958, Jan. 2014. 5

[36] J. Sun, W. Cao, Z. Xu, and J. Ponce. Learning a Convo-
lutional Neural Network for Non-uniform Motion Blur Re-
moval. 2015. 3, 5, 7, 8

[37] R. Szeliski. Computer Vision: Algorithms and Applications.
Springer-Verlag New York, Inc., New York, NY, USA, 1st
edition, 2010. 2

[38] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky.

Instance
normalization: The missing ingredient for fast stylization.
CoRR, abs/1607.08022, 2016. 5

[39] C. Villani. Optimal Transport: Old and New. Grundlehren
der mathematischen Wissenschaften. Springer Berlin Hei-
delberg, 2008. 3

[40] O. Whyte, J. Sivic, A. Zisserman, and J. Ponce. Non-uniform
deblurring for shaken images. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
2010. 2, 8

[41] B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of
rectiﬁed activations in convolutional network. arXiv preprint
arXiv:1505.00853, 2015. 5

[42] L. Xu and J. Jia. Two-phase kernel estimation for robust
In Lecture Notes in Computer Science
motion deblurring.
(including subseries Lecture Notes in Artiﬁcial Intelligence
and Lecture Notes in Bioinformatics), 2010. 2

[43] L. Xu, J. S. J. Ren, C. Liu, and J. Jia. Deep convolutional
In Proceedings
neural network for image deconvolution.
of the 27th International Conference on Neural Information
Processing Systems - Volume 1, NIPS’14, pages 1790–1798,
Cambridge, MA, USA, 2014. MIT Press. 5

[44] L. Xu, S. Zheng, and J. Jia. Unnatural L0 Sparse Represen-

tation for Natural Image Deblurring. 2013. 2, 7, 8

[45] R. A. Yeh, C. Chen, T. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. CoRR, abs/1607.07539, 2016. 1

[46] M. D. Zeiler and R. Fergus. Visualizing and understanding
convolutional networks. CoRR, abs/1311.2901, 2013. 4
[47] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint arXiv:1703.10593, 2017. 4

DeblurGAN: Blind Motion Deblurring Using Conditional Adversarial Networks

Orest Kupyn1,3, Volodymyr Budzan1,3, Mykola Mykhailych1, Dmytro Mishkin2, Jiˇri Matas2
1 Ukrainian Catholic University, Lviv, Ukraine
{kupyn, budzan, mykhailych}@ucu.edu.ua

2 Visual Recognition Group, Center for Machine Perception, FEE, CTU in Prague
{mishkdmy, matas}@cmp.felk.cvut.cz
3 ELEKS Ltd.

8
1
0
2
 
r
p
A
 
3
 
 
]

V
C
.
s
c
[
 
 
4
v
4
6
0
7
0
.
1
1
7
1
:
v
i
X
r
a

Abstract

We present DeblurGAN, an end-to-end learned method
for motion deblurring. The learning is based on a condi-
tional GAN and the content loss . DeblurGAN achieves
state-of-the art performance both in the structural similarity
measure and visual appearance. The quality of the deblur-
ring model is also evaluated in a novel way on a real-world
problem – object detection on (de-)blurred images. The
method is 5 times faster than the closest competitor – Deep-
Deblur [25]. We also introduce a novel method for gen-
erating synthetic motion blurred images from sharp ones,
allowing realistic dataset augmentation.

The model, code and the dataset are available at
https://github.com/KupynOrest/DeblurGAN

1. Introduction

This work is on blind motion deblurring of a single pho-
tograph. Signiﬁcant progress has been recently achieved
in related areas of image super-resolution [20] and in-
painting [45] by applying generative adversarial networks
(GANs) [10]. GANs are known for the ability to preserve
texture details in images, create solutions that are close to
the real image manifold and look perceptually convincing.
Inspired by recent work on image super-resolution [20] and
image-to-image translation by generative adversarial net-
works [16], we treat deblurring as a special case of such
image-to-image translation. We present DeblurGAN – an
approach based on conditional generative adversarial net-
works [24] and a multi-component loss function. Unlike
previous work we use Wasserstein GAN [2] with the gradi-
ent penalty [11] and perceptual loss [17]. This encourages
solutions which are perceptually hard to distinguish from
real sharp images and allows to restore ﬁner texture details
than if using traditional MSE or MAE as an optimization
target.

Figure 1: DeblurGAN helps object detection. YOLO [30]
detections on the blurred image (top), the DeblurGAN re-
stored (middle) and the sharp ground truth image from the
GoPro [25] dataset.

1

Figure 2: GoPro images [25] processed by DeblurGAN. Blurred – left, DeblurGAN – center, ground truth sharp – right.

We make three contributions. First, we propose a loss
and architecture which obtain state-of-the art results in mo-
tion deblurring, while being 5x faster than the fastest com-
petitor. Second, we present a method based on random
trajectories for generating a dataset for motion deblurring
training in an automated fashion from the set of sharp im-
age. We show that combining it with an existing dataset
for motion deblurring learning improves results compared
to training on real-world images only. Finally, we present a
novel dataset and method for evaluation of deblurring algo-
rithms based on how they improve object detection results.

2. Related work

2.1. Image Deblurring

The common formulation of non-uniform blur model is

the following:

IB = k(M ) ∗ IS + N,

(1)

where IB is a blurred image, k(M ) are unknown blur ker-
nels determined by motion ﬁeld M . IS is the sharp latent
image, ∗ denotes the convolution, N is an additive noise.
The family of deblurring problems is divided into two types:
blind and non-blind deblurring. Early work [37] mostly fo-
cused on non-blind deblurring, making an assumption that

the blur kernels k(M ) are known. Most rely on the classi-
cal Lucy-Richardson algorithm, Wiener or Tikhonov ﬁlter
to perform the deconvolution operation and obtain IS esti-
mate. Commonly the blur function is unknown, and blind
deblurring algorithms estimate both latent sharp image IS
and blur kernels k(M ). Finding a blur function for each
pixel is an ill-posed problem, and most of the existing algo-
rithms rely on heuristics, image statistics and assumptions
on the sources of the blur. Those family of methods ad-
dresses the blur caused by camera shake by considering blur
to be uniform across the image. Firstly, the camera motion
is estimated in terms of the induced blur kernel, and then
the effect is reversed by performing a deconvolution oper-
ation. Starting with the success of Fergus et al. [8], many
methods [44][42][28][3] has been developed over the last
ten years. Some of the methods are based on an iterative ap-
proach [8] [44], which improve the estimate of the motion
kernel and sharp image on each iteration by using paramet-
ric prior models. However, the running time, as well as the
stopping criterion, is a signiﬁcant problem for those kinds
of algorithms. Others use assumptions of a local linearity
of a blur function and simple heuristics to quickly estimate
the unknown kernel. These methods are fast but work well
on a small subset of images.

Recently, Whyte et al. [40] developed a novel algorithm

Figure 3: DeblurGAN generator architecture. DeblurGAN contains two strided convolution blocks with stride 1
2 , nine resid-
ual blocks [13] and two transposed convolution blocks. Each ResBlock consists of a convolution layer, instance normalization
layer, and ReLU activation.

for non-uniform blind deblurring based on a parametrized
geometric model of the blurring process in terms of the
rotational velocity of the camera during exposure. Simi-
larly Gupta et al. [12] made an assumption that the blur is
caused only by 3D camera movement. With the success
of deep learning, over the last few years, there appeared
some approaches based on convolutional neural networks
(CNNs). Sun et al. [36] use CNN to estimate blur ker-
nel, Chakrabarti [6] predicts complex Fourier coefﬁcients
of motion kernel to perform non-blind deblurring in Fourier
space whereas Gong [9] use fully convolutional network to
move for motion ﬂow estimation. All of these approaches
use CNN to estimate the unknown blur function. Recently,
a kernel-free end-to-end approaches by Noorozi [27] and
Nah [25] that uses multi-scale CNN to directly deblur the
image. Ramakrishnan et al. [29] use the combination of
pix2pix framework [16] and densely connected convolu-
tional networks [15] to perform blind kernel-free image
deblurring. Such methods are able to deal with different
sources of the blur.

2.2. Generative adversarial networks

The idea of generative adversarial networks, introduced
by Goodfellow et al. [10], is to deﬁne a game between two
competing networks: the discriminator and the generator.
The generator receives noise as an input and generates a
sample. A discriminator receives a real and generated sam-
ple and is trying to distinguish between them. The goal of
the generator is to fool the discriminator by generating per-
ceptually convincing samples that can not be distinguished
from the real one. The game between the generator G and
discriminator D is the minimax objective:

min
G

max
D

E
x(cid:118)Pr

[log(D(x))] + E

[log(1 − D(˜x))]

(2)

˜x(cid:118)Pg

where Pr is the data distribution and Pg is the model dis-
tribution, deﬁned by ˜x = G(z), z (cid:118) P (z), the input z
is a sample from a simple noise distribution. GANs are
known for its ability to generate samples of good percep-
tual quality, however, training of vanilla version suffer from

many problems such as mode collapse, vanishing gradi-
ents etc, as described in [33]. Minimizing the value func-
tion in GAN is equal to minimizing the Jensen-Shannon di-
vergence between the data and model distributions on x.
Arjovsky et al. [2] discuss the difﬁculties in GAN train-
ing caused by JS divergence approximation and propose
to use the Earth-Mover (also called Wasserstein-1) distance
W (q, p). The value function for WGAN is constructed us-
ing Kantorovich-Rubinstein duality [39]:

min
G

max
D∈D

E
x(cid:118)Pr

[D(x)] − E

[D(˜x)]

(3)

˜x(cid:118)Pg

where D is the set of 1−Lipschitz functions and Pg is once
again the model distribution The idea here is that critic value
approximates K · W (Pr, Pθ), where K is a Lipschitz con-
stant and W (Pr, Pθ) is a Wasserstein distance. In this set-
ting, a discriminator network is called critic and it approx-
imates the distance between the samples. To enforce Lips-
chitz constraint in WGAN Arjovsky et al. add weight clip-
ping to [−c, c]. Gulrajani et al. [11] propose to add a gradi-
ent penalty term instead:

λ E

˜x(cid:118)P˜x

[((cid:107)∇˜xD(˜x)(cid:107)2 − 1)2]

(4)

to the value function as an alternative way to enforce the
Lipschitz constraint. This approach is robust to the choice
of generator architecture and requires almost no hyperpa-
rameter tuning. This is crucial for image deblurring as it al-
lows to use novel lightweight neural network architectures
in contrast to standard Deep ResNet architectures, previ-
ously used for image deblurring [25].

2.3. Conditional adversarial networks

Generative Adversarial Networks have been applied to
different image-to-image translation problems, such as su-
per resolution [20], style transfer [22], product photo gen-
eration [5] and others. Isola et al. [16] provides a detailed
overview of those approaches and present conditional GAN
architecture also known as pix2pix. Unlike vanilla GAN,

cGAN learns a mapping from observed image x and ran-
Isola et al.
dom noise vector z, to y : G : x, z → y.
also put a condition on the discriminator and use U-net
architecture [31] for generator and Markovian discrimina-
tor which allows achieving perceptually superior results on
many tasks, including synthesizing photos from label maps,
reconstructing objects from edge maps, and colorizing im-
ages.

3. The proposed method

The goal is to recover sharp image IS given only a
blurred image IB as an input, so no information about the
blur kernel is provided. Debluring is done by the trained
CNN GθG , to which we refer as the Generator. For each
IB it estimates corresponding IS image. In addition, during
the training phase, we introduce critic the network DθD and
train both networks in an adversarial manner.

3.1. Loss function

We formulate the loss function as a combination of con-

tent and adversarial loss:

+

L = LGAN
(cid:124) (cid:123)(cid:122) (cid:125)
adv loss
(cid:124)

λ · LX
(cid:124) (cid:123)(cid:122) (cid:125)
content loss
(cid:125)

(cid:123)(cid:122)
total loss

(5)

where the λ equals to 100 in all experiments. Unlike Isola et
al. [16] we do not condition the discriminator as we do not
need to penalize mismatch between the input and output.
Adversarial loss Most of the papers related to conditional
GANs, use vanilla GAN objective as the loss [20][25] func-
tion. Recently [47] provides an alternative way of using
least aquare GAN [23] which is more stable and generates
higher quality results. We use WGAN-GP [11] as the critic
function, which is shown to be robust to the choice of gen-
erator architecture [2]. Our premilinary experiments with
different architectures conﬁrmed that ﬁndings and we are
able to use architecture much lighter than ResNet152 [25],
see next subsection. The loss is calculated as the following:

LGAN =

−DθD (GθG(I B))

(6)

N
(cid:88)

n=1

DeblurGAN trained without GAN component converges,
but produces smooth and blurry images.

Content loss. Two classical choices for ”content” loss
function are L1 or MAE loss, L2 or MSE loss on raw pix-
els. Using those functions as sole optimization target leads
to the blurry artifacts on generated images due to the pixel-
wise average of possible solutions in the pixel space [20].
Instead, we adopted recently proposed Perceptual loss [17].
Perceptual loss is a simple L2-loss, but based on the differ-
ence of the generated and target image CNN feature maps.
It is deﬁned as following:

Figure 4: DeblurGAN training. The generator network
takes the blurred image as input and produces the estimate
of the sharp image. The critic network takes the restored
and sharp images and outputs a distance between them. The
total loss consists of the WGAN loss from critic and the per-
ceptual loss [17]. The perceptual loss is the difference be-
tween the VGG-19 [34] conv3.3 feature maps of the sharp
and restored images. At test time, only the generator is kept.

LX =

1
Wi,j Hi,j

(φi,j(I S)x,y − φi,j(GθG (I B))x,y)2

Wi,j
(cid:88)

Hi,j
(cid:88)

x=1

y=1

where φi,j is the feature map obtained by the j-th convo-
lution (after activation) before the i-th maxpooling layer
within the VGG19 network, pretrained on ImageNet [7],
Wi,j and Hi,j are the dimensions of the feature maps. In
our work we use activations from V GG3,3 convolutional
layer. The activations of the deeper layers represents the
features of a higher abstraction [46][20]. The perceptual
loss focuses on restoring general content [16] [20] while ad-

Figure 5: Examples of generated camera motion trajectory and the blur kernel and the corresponding blurred images.

versarial loss focuses on restoring texture details. Deblur-
GAN trained without Perceptual loss or with simple MSE
on pixels instead doesn’t converge to meaningful state.

Additional regularization. We have also tried to add
TV regularization and model trained with it yields worse
performance – 27.9 vs. 28.7 w/o PSNR on GoPro dataset.

3.2. Network architecture

It
Generator CNN architecture is shown in Figure 3.
is similar to one proposed by Johnson et al. [17] for style
transfer task.
It contains two strided convolution blocks
with stride 1
2 , nine residual blocks [13] (ResBlocks) and
two transposed convolution blocks. Each ResBlock consists
of a convolution layer, instance normalization layer [38],
and ReLU [26] activation. Dropout [35] regularization
with a probability of 0.5 is added after the ﬁrst convolu-
tion layer in each ResBlock. In addition, we introduce the
global skip connection which we refer to as ResOut. CNN
learns a residual correction IR to the blurred image IB, so
IS = IB + IR. We ﬁnd that such formulation makes train-
ing faster and resulting model generalizes better. During
the training phase, we deﬁne a critic network DθD , which is
Wasserstein GAN [2] with gradient penalty [11], to which
we refer as WGAN-GP. The architecture of critic network
is identical to PatchGAN [16, 22]. All the convolutional
layers except the last are followed by InstanceNorm layer
and LeakyReLU [41] with α = 0.2.

4. Motion blur generation

There is no easy method to obtain image pairs of cor-
responding sharp and blurred images for training.A typical
approach to obtain image pairs for training is to use a high
frame-rate camera to simulate blur using average of sharp
It allows to create realistic
frames from video [27, 25].
blurred images but limits the image space only to scenes
present in taken videos and makes it complicated to scale
the dataset. Sun et al. [36] creates synthetically blurred im-
ages by convolving clean natural images with one out of 73
possible linear motion kernels, Xu et al. [43] also use lin-
ear motion kernels to create synthetically blurred images.

Figure 6: Top row: Blur kernels from real-world images
estimated by Fergus et al. [8]. Bottom row: Synthetically
generated kernels by our method. Our randomized method
can simulate wide variety of realistic blur kernels with dif-
ferent level of non-linearity.

Chakrabarti [6] creates blur kernel by sampling 6 random
points and ﬁtting a spline to them. We take a step further and
propose a method, which simulates more realistic and com-
plex blur kernels. We follow the idea described by Borac-
chi and Foi [4] of random trajectories generation. Then the
kernels are generated by applying sub-pixel interpolation to
the trajectory vector. Each trajectory vector is a complex
valued vector, which corresponds to the discrete positions
of an object following 2D random motion in a continuous
domain. Trajectory generation is done by Markov process,
summarized in Algorithm 1. Position of the next point of
the trajectory is randomly generated based on the previous
point velocity and position, gaussian perturbation, impulse
perturbation and deterministic inertial component.

5. Training Details

We implemented all of our models using PyTorch[1]
deep learning framework. The training was performed
on a single Maxwell GTX Titan-X GPU using three

Figure 7: Results on the GoPro test dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

Figure 8: Results on the Kohler dataset. From left to right: blurred photo, Nah et al. [25], DeblurGAN.

to which we re-
The ﬁrst model
different datasets.
fer as DeblurGANWILD was trained on a random crops
of size 256x256 from 1000 GoPro training dataset im-

ages [25] downscaled by a factor of two. The second one
DeblurGANSynth was trained on 256x256 patches from MS
COCO dataset blurred by method, presented in previous

Algorithm 1 Motion blur kernel generation.
Parameters:
M = 2000 – number of iterations,
Lmax = 60 – max length of the movement,
ps = 0.001 – probability of impulsive shake,
I – inertia term, uniform from (0,0.7),
pb – probability of big shake, uniform from (0,0.2),
pg – probability of gaussian shake, uniform from (0,0.7),
φ – initial angle, uniform from (0,2π),
x – trajectory vector.

1: procedure BLUR(Img, M, Lmax, ps)
v0 ← cos(φ) + sin(φ) ∗ i
2:
v ← vo ∗ Lmax/(M − 1)
3:
x = zeros(M, 1)
4:
for t = 1 to M − 1 do

if randn < pb ∗ ps then

nextDir ← 2 · v · ei∗(π+(randn−0.5)))

else:

nextDir ← 0

dv ← nextDir + ps ∗ (pg ∗ (randn + i ∗ randn) ∗

I ∗ x[t] ∗ (Lmax/(M − 1))
v ← v + dv
v ← (v/abs(v)) ∗ Lmax/(M − 1)
x[t + 1] ← x[t] + v

Kernel ← sub pixel interpolation(x)
Blurred image ← conv(Kernel, Img)
return Blurred image

5:
6:
7:
8:
9:

10:

11:
12:

13:

14:

15:
16:

Section. We also trained DeblurGANComb on a combina-
tion of synthetically blurred images and images taken in the
wild, where the ratio of synthetically generated images to
the images taken by a high frame-rate camera is 2:1. As
the models are fully convolutional and are trained on image
patches they can be applied to images of arbitrary size. For
optimization we follow the approach of
[2] and perform
5 gradient descent steps on DθD , then one step on GθG,
using Adam [18] as a solver. The learning rate is set ini-
tially to 10−4 for both generator and critic. After the ﬁrst
150 epochs we linearly decay the rate to zero over the next
150 epochs. At inference time we follow the idea of [16]
and apply both dropout and instance normalization. All the
models were trained with a batch size = 1, which showed
empirically better results on validation. The training phase
took 6 days for training one DeblurGAN network.

6. Experimental evaluation

6.1. GoPro Dataset

GoPro dataset[25] consists of 2103 pairs of blurred and
sharp images in 720p quality, taken from various scenes.
We compare the results of our models with state of the art
models [36], [25] on standard metrics and also show the

Table 1: Peak signal-to-noise ratio and the structural sim-
ilarity measure, mean over the GoPro test dataset of 1111
images. All models were tested on the linear image subset.
State-of-art results (∗) by Nah et al. [25] obtained on the
gamma subset.

Sun et al. Nah et al. Xu et al.

DeblurGAN

Metric

[36]

[25]

[44] WILD Synth Comb

24.6
PSNR
SSIM 0.842

28.3/29.1*
0.916

25.1
0.89

28.7
23.6
27.2
0.954 0.884 0.958

Time

20 min

4.33 s

13.41 s

0.85 s

running time of each algorithm on a single GPU. Results
are in Table1. DeblurGAN shows superior results in terms
of structured self-similarity, is close to state-of-the-art in
peak signal-to-noise-ratio and provides better looking re-
sults by visual inspection. In contrast to other neural mod-
els, our network does not use L2 distance in pixel space so
it is not directly optimized for PSNR metric. It can handle
blur caused by camera shake and object movement, does
not suffer from usual artifacts in kernel estimation methods
and at the same time has more than 6x fewer parameters
comparing to Multi-scale CNN , which heavily speeds up
the inference. Deblured images from test on GoPro dataset
are shown in Figure 7.

6.2. Kohler dataset

Kohler dataset [19] consists of 4 images blurred with 12
different kernels for each of them. This is a standard bench-
mark dataset for evaluation of blind deblurring algorithms.
The dataset is generated by recording and analyzing real
camera motion, which is played back on a robot platform
such that a sequence of sharp images is recorded sampling
the 6D camera motion trajectory. Results are in Table 2,
similar to GoPro evaluation.

6.3. Object Detection benchmark on YOLO

Object Detection is one of the most well-studied prob-
lems in computer vision with applications in different do-
mains from autonomous driving to security. During the last
few years approaches based on Deep Convolutional Neural
Networks showed state of the art performance comparing to
traditional methods. However, those networks are trained
on limited datasets and in real-world settings images are of-
ten degraded by different artifacts, including motion blur,
Similar to [21] and [32] we studied the inﬂuence of motion
blur on object detection and propose a new way to evalu-
ate the quality of deblurring algorithm based on results of
object detection on a pretrained YOLO [30] network.

For this, we constructed a dataset of sharp and blurred
street views by simulating camera shake using a high frame-

Table 2: Peak signal-to-noise ratio and structural similarity measure, mean on the Kohler dataset. Xu et al. [44] and Whyte et
al. [40] are non-CNN blind deblurring methods, whereas Sun et al. [36] and Nah et al. [25] use CNN.

Method

Sun et al. Nah et al. Xu et al. Whyte et al.

DeblurGAN

Metric

PSNR
SSIM

[36]

25.22
0.773

[25]

26.48
0.807

[44]

27.47
0.811

[40]

27.03
0.809

WILD Synth

Comb

26.10
0.816

25.67
0.792

25.86
0.802

(a) Blurred photo

(b) Nah et al. [25]

(c) DeblurGAN

(d) Sharp photo

Figure 9: YOLO object detection before and after deblurring

rate video camera. Following [14][25][27] we take a ran-
dom between 5 and 25 frames taken by 240fps camera and
compute the blurred version of a middle frame as an aver-
age of those frames. All the frames are gamma-corrected
with γ = 2.2 and then the inverse function is taken to ob-
tain the ﬁnal blurred frame. Overall, the dataset consists of
410 pairs of blurred and sharp images, taken from the streets
and parking places with different number and types of cars.
Blur source includes both camera shake and blur caused
by car movement. The dataset and supplementary code are
available online. Then sharp images are feed into the YOLO
network and the result after visual veriﬁcation is assigned as
ground truth. Then YOLO is run on blurred and recovered
versions of images and average recall and precision between
obtained results and ground truth are calculated. This ap-
proach corresponds to the quality of deblurring models on
real-life problems and correlates with the visual quality and
sharpness of the generated images, in contrast to standard
PSNR metric. The precision, in general, is higher on blurry
images as there are no sharp object boundaries and smaller
object are not detected as it shown in Figure 9.

Results are shown in Table 3. DeblurGAN signiﬁcantly

outperforms competitors in terms of recall and F1 score.

7. Conclusion

We described a kernel-free blind motion deblurring
learning approach and introduced DeblurGAN which is a
Conditional Adversarial Network that is optimized using a
multi-component loss function. In addition to this, we im-

Table 3: Results of YOLO [30] object detection on blurred
and restored photos using DeblurGAN and Nah et al. [25]
algorithms. Results on corresponding sharp images are con-
sidered ground truth. DeblurGAN has higher recall and F1
score than its competitors.

Method

prec.

recall

F1 score

no deblur
Nah et al. [25]

0.821
0.834
DeblurGAN WILD 0.764
0.801
DeblurGAN synth
0.671
DeblurGAN comb

0.437
0.552
0.631
0.517
0.742

0.570
0.665
0.691
0.628
0.704

plemented a new method for creating a realistic synthetic
motion blur able to model different blur sources. We in-
troduce a new benchmark and evaluation protocol based on
results of object detection and show that DeblurGAN sig-
niﬁcantly helps detection on blurred images.

8. Acknowledgements

The authors were supported by the ELEKS Ltd.,
ARVI Lab, Czech Science Foundation Project GACR
P103/12/G084, the Austrian Ministry for Transport, Inno-
vation and Technology, the Federal Ministry of Science,
Research and Economy, and the Province of Upper Austria
in the frame of the COMET center, the CTU student grant
SGS17/185/OHK3/3T/13. We thank Huaijin Chen for
ﬁnding the bug in peak-signal-to-noise ratio evaluation.

References

[1] PyTorch. http://pytorch.org. 5
[2] M. Arjovsky, S. Chintala, and L. Bottou. Wasserstein GAN.

ArXiv e-prints, Jan. 2017. 1, 3, 4, 5, 7

[3] S. D. Babacan, R. Molina, M. N. Do, and A. K. Katsaggelos.
Bayesian blind deconvolution with general sparse image pri-
ors. In European Conference on Computer Vision (ECCV),
Firenze, Italy, October 2012. Springer. 2

[4] G. Boracchi and A. Foi. Modeling the performance of im-
age restoration from motion blur. Image Processing, IEEE
Transactions on, 21(8):3502 –3517, aug. 2012. 5

[5] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised Pixel-Level Domain Adaptation with
Generative Adversarial Networks. ArXiv e-prints, Dec. 2016.
3

[6] A. Chakrabarti. A neural approach to blind motion deblur-
ring. In Lecture Notes in Computer Science (including sub-
series Lecture Notes in Artiﬁcial Intelligence and Lecture
Notes in Bioinformatics), 2016. 3, 5

[7] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009. 4

[8] R. Fergus, B. Singh, A. Hertzmann, S. T. Roweis, and W. T.
Freeman. Removing camera shake from a single photograph.
ACM Trans. Graph., 25(3):787–794, July 2006. 2, 5

[9] D. Gong, J. Yang, L. Liu, Y. Zhang, I. Reid, C. Shen, A. Van
Den Hengel, and Q. Shi. From Motion Blur to Motion Flow:
a Deep Learning Solution for Removing Heterogeneous Mo-
tion Blur. 2016. 3

[10] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Networks. June 2014. 1, 3

[11] I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and
Improved Training of Wasserstein GANs.

A. Courville.
ArXiv e-prints, Mar. 2017. 1, 3, 4, 5

[12] A. Gupta, N. Joshi, C. L. Zitnick, M. Cohen, and B. Curless.
Single image deblurring using motion density functions. In
Proceedings of the 11th European Conference on Computer
Vision: Part I, ECCV’10, pages 171–184, Berlin, Heidel-
berg, 2010. Springer-Verlag. 3

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. arXiv preprint arXiv:1512.03385,
2015. 3, 5

[14] M. Hirsch, C. J. Schuler, S. Harmeling, and B. Scholkopf.
Fast removal of non-uniform camera shake. In Proceedings
of the 2011 International Conference on Computer Vision,
ICCV ’11, pages 463–470, Washington, DC, USA, 2011.
IEEE Computer Society. 8

[15] G. Huang, Z. Liu, L. van der Maaten, and K. Q. Wein-
berger. Densely connected convolutional networks. 2017
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 2261–2269, 2017. 3

[16] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
arxiv,

translation with conditional adversarial networks.
2016. 1, 3, 4, 5, 7

[17] J. Johnson, A. Alahi, and L. Fei-Fei. Perceptual losses for
In European

real-time style transfer and super-resolution.
Conference on Computer Vision, 2016. 1, 4, 5

[18] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014. 7

[19] R. K¨ohler, M. Hirsch, B. Mohler, B. Sch¨olkopf, and
S. Harmeling.
Recording and playback of camera
shake: Benchmarking blind deconvolution with a real-world
database. In Proceedings of the 12th European Conference
on Computer Vision - Volume Part VII, ECCV’12, pages 27–
40, Berlin, Heidelberg, 2012. Springer-Verlag. 7

[20] C. Ledig, L. Theis, F. Huszar, J. Caballero, A. Cunning-
ham, A. Acosta, A. Aitken, A. Tejani, J. Totz, Z. Wang, and
W. Shi. Photo-Realistic Single Image Super-Resolution Us-
ing a Generative Adversarial Network. ArXiv e-prints, Sept.
2016. 1, 3, 4

[21] B. Li, X. Peng, Z. Wang, J. Xu, and D. Feng. An All-in-
One Network for Dehazing and Beyond. ArXiv e-prints, July
2017. 7

[22] C. Li and M. Wand. Precomputed Real-Time Texture Syn-
thesis with Markovian Generative Adversarial Networks.
ArXiv e-prints, Apr. 2016. 3, 5

[23] X. Mao, Q. Li, H. Xie, R. Y. K. Lau, and Z. Wang.
Least squares generative adversarial networks, 2016. cite
arxiv:1611.04076. 4

[24] M. Mirza and S. Osindero. Conditional generative adversar-

ial nets. CoRR, abs/1411.1784, 2014. 1

[25] S. Nah, T. Hyun, K. Kyoung, and M. Lee. Deep Multi-scale
Convolutional Neural Network for Dynamic Scene Deblur-
ring. 2016. 1, 2, 3, 4, 5, 6, 7, 8

[26] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-
In International Conference

stricted boltzmann machines.
on Machine Learning (ICML), pages 807–814, 2010. 5
[27] M. Noroozi, P. Chandramouli, and P. Favaro. Motion De-

blurring in the Wild. 2017. 3, 5, 8

[28] D. Perrone and P. Favaro. Total variation blind deconvolu-
tion: The devil is in the details. In EEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), 2014. 2
[29] S. Ramakrishnan, S. Pachori, A. Gangopadhyay, and S. Ra-
man. Deep generative ﬁlter for motion deblurring. 2017
IEEE International Conference on Computer Vision Work-
shops (ICCVW), pages 2993–3000, 2017. 3

[30] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
Only Look Once: Uniﬁed, Real-Time Object Detection.
ArXiv e-prints, June 2015. 1, 7, 8

[31] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional Networks for Biomedical Image Segmentation. ArXiv
e-prints, May 2015. 4

[32] M. S. M. Sajjadi, B. Sch¨olkopf, and M. Hirsch. Enhancenet:
Single image super-resolution through automated texture
synthesis. 2017 IEEE International Conference on Computer
Vision (ICCV), pages 4501–4510, 2017. 7

[33] T. Salimans, I. Goodfellow, W. Zaremba, V. Cheung, A. Rad-
ford, and X. Chen. Improved Techniques for Training GANs.
ArXiv e-prints, June 2016. 3

[34] K. Simonyan and A. Zisserman. Very Deep Convolutional
Networks for Large-Scale Image Recognition. ArXiv e-
prints, Sept. 2014. 4

[35] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: A simple way to prevent neural
networks from overﬁtting. J. Mach. Learn. Res., 15(1):1929–
1958, Jan. 2014. 5

[36] J. Sun, W. Cao, Z. Xu, and J. Ponce. Learning a Convo-
lutional Neural Network for Non-uniform Motion Blur Re-
moval. 2015. 3, 5, 7, 8

[37] R. Szeliski. Computer Vision: Algorithms and Applications.
Springer-Verlag New York, Inc., New York, NY, USA, 1st
edition, 2010. 2

[38] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky.

Instance
normalization: The missing ingredient for fast stylization.
CoRR, abs/1607.08022, 2016. 5

[39] C. Villani. Optimal Transport: Old and New. Grundlehren
der mathematischen Wissenschaften. Springer Berlin Hei-
delberg, 2008. 3

[40] O. Whyte, J. Sivic, A. Zisserman, and J. Ponce. Non-uniform
deblurring for shaken images. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
2010. 2, 8

[41] B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of
rectiﬁed activations in convolutional network. arXiv preprint
arXiv:1505.00853, 2015. 5

[42] L. Xu and J. Jia. Two-phase kernel estimation for robust
In Lecture Notes in Computer Science
motion deblurring.
(including subseries Lecture Notes in Artiﬁcial Intelligence
and Lecture Notes in Bioinformatics), 2010. 2

[43] L. Xu, J. S. J. Ren, C. Liu, and J. Jia. Deep convolutional
In Proceedings
neural network for image deconvolution.
of the 27th International Conference on Neural Information
Processing Systems - Volume 1, NIPS’14, pages 1790–1798,
Cambridge, MA, USA, 2014. MIT Press. 5

[44] L. Xu, S. Zheng, and J. Jia. Unnatural L0 Sparse Represen-

tation for Natural Image Deblurring. 2013. 2, 7, 8

[45] R. A. Yeh, C. Chen, T. Lim, M. Hasegawa-Johnson, and
M. N. Do. Semantic image inpainting with perceptual and
contextual losses. CoRR, abs/1607.07539, 2016. 1

[46] M. D. Zeiler and R. Fergus. Visualizing and understanding
convolutional networks. CoRR, abs/1311.2901, 2013. 4
[47] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint arXiv:1703.10593, 2017. 4

