Cross Modal Distillation for Supervision Transfer

Saurabh Gupta

Judy Hoffman
University of California, Berkeley
{sgupta, jhoffman, malik}@eecs.berkeley.edu

Jitendra Malik

5
1
0
2
 
v
o
N
 
5
2
 
 
]

V
C
.
s
c
[
 
 
2
v
8
4
4
0
0
.
7
0
5
1
:
v
i
X
r
a

Abstract

In this work we propose a technique that transfers su-
pervision between images from different modalities. We use
learned representations from a large labeled modality as
a supervisory signal for training representations for a new
unlabeled paired modality. Our method enables learning
of rich representations for unlabeled modalities and can
be used as a pre-training procedure for new modalities
with limited labeled data. We show experimental results
where we transfer supervision from labeled RGB images
to unlabeled depth and optical ﬂow images and demon-
strate large improvements for both these cross modal su-
pervision transfers. Code, data and pretrained models
are available at https://github.com/s-gupta/
fast-rcnn/tree/distillation.

1. Introduction

Current paradigms for recognition in computer vision in-
volve learning a generic feature representation on a large
dataset of labeled images, and then specializing or ﬁnetun-
ing the learned generic feature representation for the spe-
ciﬁc task at hand. Successful examples of this paradigm
include almost all state-of-the-art systems: object detection
[13], semantic segmentation [36], object segmentation [19],
and pose estimation [49], which start from generic features
that are learned on the ImageNet dataset [6] using over a
million labeled images and specialize them for each of the
different tasks. Several different architectures for learning
these generic feature representations have been proposed
over the years [31, 44, 3], but all of these rely on the avail-
ability of a large dataset of labeled images to learn feature
representations.

The question we ask in this work is, what is the analogue
of this paradigm for images from modalities which do not
have such large amounts of labeled data? There are a large
number of image modalities beyond RGB images which are
dominant in computer vision, for example depth images
coming from a Microsoft Kinect, infra-red images from
thermal sensors, aerial images from satellites and drones,

Figure 1: Architecture for supervision transfer: We train a
CNN model for a new image modality (like depth images), by
teaching the network to reproduce the mid-level semantic repre-
sentations learned from a well labeled image modality (such as
RGB images) for modalities for which there are paired images.

LIDAR point clouds from laser scanners, or even images
of intermediate representations output from current vision
systems e.g. optical ﬂow and stereo images. The number
of labeled images from such modalities are at least a few
orders of magnitude smaller than the RGB image datasets
used for learning features, which raises the question: do we
need similar large scale annotation efforts to learn generic
features for images from each such different modality?

We answer this question in this paper and propose a tech-
nique to transfer learned representations from one modal-
ity to another. Our technique uses ‘paired’ images from
the two modalities and utilizes the mid-level representations
from the labeled modality to supervise learning representa-
tions on the paired un-labeled modality. We call our scheme
supervision transfer and show that our learned representa-
tions perform well on standard tasks like object detection.
We also show that our technique leads to learning useful
feature hierarchies in the unlabeled modality, which can be
improved further with ﬁnetuning, and are still complemen-
tary to representations in the source modality.

As a motivating example, consider the case of depth im-
ages. While the largest labeled RGB dataset, ImageNet [6]
consists of over a million labeled images, the size of most
existing labeled depth datasets is of the order of a few thou-
sands [42, 46, 26]. At the same time there are a large num-
ber of unlabeled RGB and depth image pairs. Our technique
leverages this large set of unlabeled paired images to trans-

1

fer the ImageNet supervision on RGB images to depth im-
ages. Our technique is illustrated in Figure 1. We use a con-
volutional neural network that has been trained on labeled
images in the ImageNet dataset [6], and use the mid-level
representation learned by these CNNs as a supervisory sig-
nal to train a CNN on depth images. Our technique for trans-
ferring supervision results in improvements in performance
for the end task of object detection on the NYUD2 dataset,
where we improve the state-of-the-art from 34.2% to 41.7%
when using just the depth image and from 46.2% to 49.1%
when using both RGB and depth images together. We report
similar improvements for the task of simultaneous detection
and segmentation [19] and also show how supervision trans-
fer can be used for a zero-shot transfer of object detectors
trained on RGB images to detectors that can run on depth
images.

Though we show detailed experimental results for su-
pervision transfer from RGB to depth images, our technique
is equally applicable to images from other paired modali-
ties. To demonstrate this, we show additional transfer re-
sults from RGB images to optical ﬂow images where we
improve mean average precision for action detection on the
JHMDB dataset [27] from 31.7% to 35.7% when using just
the optical ﬂow image and no supervised pre-training.

Our technique is reminiscent of the distillation idea from
Hinton et al. [22] (and its recent FitNets extension [39]).
Hinton et al. [22] extended the model compression idea
from Bucilua et al. [2] to what they call ‘distillation’ and
showed how large models trained on large labeled datasets
can be compressed by using the soft outputs from the large
model as targets for a much smaller model operating on
the same modality. Our work here is a generalization of
this idea, and a) allows for transfer of supervision at arbi-
trary semantic levels, and b) additionally enables transfer of
supervision between different modalities using paired im-
ages. More importantly, our work here allows us to extend
the success of recent deep CNN architectures to new imag-
ing modalities without having to collect large scale labeled
datasets necessary for training deep CNNs.

2. Related Work

There has been a large body of work on transferring
knowledge between different visual domains, belonging to
the same modality. Initial work [32, 15, 1, 8, 24] studied the
problem in context of shallow image representations. While
[32, 15] sought to learn transformations between well la-
beled source and sparsely labeled target domains, Aytar et
al. [1] use the source models as a parameter regularizer for
target models, [8, 24] combine these two approaches into a
single joint optimization problem. Chopra et al. [4] intro-
duced one of the ﬁrst deep architectures for visual adapta-
tion by replicating feature extraction for each domain and
producing intermediate interpolated domains, while Ghi-

fary et al. [11] showed a single layer neural net could be
used to learn the feature transformation between simple do-
main shifts.

More recently, with the introduction of supervised CNN
models by Krizhevsky et al. [31], the community has been
moving towards a generic set of features which can be spe-
cialized to speciﬁc tasks and domains at hand [7, 13, 12,
40, 23] and traditional visual adaptation techniques can be
used in conjunction with such features [25]. More recently,
unsupervised domain adaptation techniques have been in-
troduced which learn to adapt deep representations so as
to minimize the discrepancy between the source and target
distributions [50, 10, 37].

All these lines of work study and solve the problem
of domain adaptation within the same modality.
In con-
trast, our work here tackles the problem of domain adap-
tation across different modalities. Most methods for intra-
modality domain adaptation described above start from an
initial set of features on the target domain, and a priori
it is unclear how this can be done when moving across
modalities, limiting the applicability of aforementioned ap-
proaches to our problem. This cross-model transfer prob-
lem has received much less attention. Notable among those
include [5, 38, 48, 45, 9]. While [5, 48] hallucinate modali-
ties during training time, [38, 45, 9] focus on the problem of
jointly embedding or learning representations from multiple
modalities into a shared feature space to improve learning
[38] or enabling zero-shot learning[45, 9]. Our work here
instead transfers high quality representations learned from
a large set of labeled images of one modality to completely
unlabeled images from a new modality, thus leading to a
generic feature representations on the new modalities which
we show are useful for a variety of tasks.

3. Supervision Transfer

Let us assume we have a modality Md with unlabeled
data, Dd for which we would like to train a rich representa-
tion. We will do so by transferring information from a sepa-
rate modality, Ms, which has a large labeled set of images,
Ds, and a corresponding K layered rich representation. We
assume this rich representation is layered although our pro-
posed method will work equally well for non-layered rep-
resentations. We use convolutional neural networks as our
layered rich representation.

Ms,Ds

We denote this

i ∈ [1 . . . K]}. φi

image representation as Φ =
{φi
is the ith layer represen-
Ms,Ds
tation for modality Ms which has been trained on labeled
images from dataset Ds, and it maps an input image from
modality Ms to a feature vector in Rni.
Ms,Ds

: Ms (cid:55)→ Rni
(1)
Feature vectors from consecutive layers in such layered
representations are related to one another by simple opera-
tions like non-linearities, convolutions, pooling, normaliza-

φi

2

Ms,Ds

Ms,Ds

(x) = max(0, φ1

tions and dot products (for example layer 2 features may be
related to layer 1 features using a simple non-linearity like
max with 0: φ2
(x))). Some
of these operations like convolutions and dot products have
free parameters. We denote such parameters associated with
operation at layer i by wi
s. The structure of such architec-
tures (the sequence of operations, and the size of representa-
tions at each layer, etc.) is hand designed or validated using
performance on an end task. Such validation can be done
on a small set of annotated images. Estimating the model
parameters wi
s is much more difﬁcult. The number of these
parameters for most reasonable image models can easily go
up to a few millions. Heretofore, state-of-the-art models
require discriminative learning of these parameters using a
large labeled training set.

d

Now suppose we want to learn a rich representation for
images from modality Md, for which we do not have ac-
cess to a large dataset of labeled images. We assume we
have already hand designed an appropriate architecture Ψ =
{ψi
∀i ∈ [1 . . . L]}. The task then is to effectively learn
the parameters associated with various operations in the ar-
chitecture, without having access to a large set of annotated
images for modality Md. As before, we denote these pa-
rameters to be learned by W [1...L]

d ∀i ∈ [1 . . . L]}

= {wi

Md

In addition to Ds, let us assume that we have access to
a large dataset of un-annotated paired images from modal-
ities Ms and Md. We denote this dataset by Us,d. By
paired images we mean a set of images of the same scene
in two different modalities. Our proposed scheme for train-
ing rich representations for images of modality Md is to
learn the representation Ψ such that the image representa-
tion ψL
D(Id) for image Id matches the image representation
φi∗
(Is) for its image pair Is in modality Ms for some
Ms,Ds
chosen and ﬁxed layer i∗ ∈ [1 . . . K]. We measure the simi-
larity between the representations using an appropriate loss
function f (for example, euclidean loss). Note that the rep-
resentations ψi∗
and φL
may not have the same dimen-
Ms
sions. In such cases we embed features ψL
into a space
with the same dimension as φi∗
using an appropriate sim-
Ms
ple transformation function t (for example a linear or afﬁne
function).
min
W [1...L]
d

(Id)(cid:1) , φi∗

t (cid:0)ψL

Ms,Ds

(Is)

(cid:88)

(2)

Md

Md

Md

(cid:16)

(cid:17)

f

(Is,Id)∈Us,d

We call this process supervision transfer from layer i∗ in Φ
of modality Ms to layer L in Ψ of modality Md.

The recent distillation method from Hinton et al. [22] is
a speciﬁc instantiation of this general method, where a) they
focus on the speciﬁc case when the two modalities Ms and
Md are the same and b) the supervision transfer happens at
the very last prediction layer, instead of an arbitrary internal
layer in representation Φ.

Our experiments in Section 4 demonstrate that this pro-
posed method for transfer of supervision is a) effective at

learning good feature hierarchies, b) these hierarchies can
be improved further with ﬁnetuning, and c) the resulting
representation can be complementary to the representation
in the source modality Ms if the modalities permit.

4. Experiments

In this section we present experimental results for the
NYUD2 dataset where we use color and depth images as
the paired modalities, and on the JHMDB video dataset for
which we use the RGB and optical ﬂow frames as the two
modalities.

Our general experimental framework consists of two
steps. The ﬁrst step is supervision transfer as proposed in
Section 3, and the second step is to assess the quality of
the transferred representation by using it for a downstream
task. For both of the datasets we study, we consider the
domain of RGB images as Ms for which there is a large
dataset of labeled images Ds in the form of ImageNet [6],
and treat depth and optical ﬂow respectively as Md. These
choices for Ms and Md are of particular practical signif-
icance, given the lack of large labeled datasets for depth
images and optical ﬂow, at the same time, the abundant
availability of paired images coming from RGB-D sensors
(for example Microsoft Kinect) and videos on the Internet
respectively.

For our layered image representation models, we use
convolutional neural networks (CNNs) [33, 31]. These net-
works have been shown to be very effective for a variety
of image understanding tasks [7]. We experiment with the
network architectures from Krizhevsky et al. [31] (denoted
AlexNet), Simonyan and Zisserman [44] (denoted VGG),
and use the models pre-trained on ImageNet [6] from the
Caffe [28] Model Zoo.

We use an architecture similar to [31] for the layered rep-
resentations for depth and ﬂow images. We do this in order
to be able to compare to past works which learn features on
depth and ﬂow images [17, 14]. Validating different CNN
architectures for depth and ﬂow images is a worthwhile sci-
entiﬁc endeavor, which has not been undertaken so far, pri-
marily because of lack of large scale labeled datasets for
these modalities. Our work here provides a method to cir-
cumvent the need for a large labeled dataset for these and
other image modalities, and will naturally enable exploring
this question in the future, however we do not delve in this
question in the current work.

We next describe our design choices for which layers to
transfer supervision between, and the speciﬁcation of the
loss function f and the transformation function t. We ex-
perimented with what layer to use for transferring supervi-
sion, and found transer at mid-level layers works best, and
use the last convolutional layer pool5 for all experiments
in the paper. Such a choice also resonates well with obser-
vations from [34] that lower layers in CNNs are modality

3

Does supervision transfer work?

How good is the transferred representation by itself?

Are the representations complementary?

Exp. 1A no init

22.7

Exp. 2A copy from RGB (ft fc only)

19.8

Exp. 3A [RGB]: RGB network on

22.3

Exp. 1B copy from RGB

Exp. 1C supervision transfer
AlexNet → AlexNet

Exp. 1D supervision transfer
AlexNet ∗ → AlexNet

25.1

29.7

Exp. 2B supervision transfer (ft fc only)
AlexNet ∗ → AlexNet

Exp. 2C supervision transfer (ft fc only)
VGG ∗ → AlexNet

RGB images AlexNet

30.0

Exp. 3B [RGB] + copy from RGB

33.8

32.2

Exp. 3C [RGB] + supervision transfer

35.6

AlexNet ∗ → AlexNet

30.5

Exp. 2D supervision transfer

33.6

VGG ∗ → AlexNet

Exp. 3D [RGB]+ supervision transfer
VGG ∗ → AlexNet

37.0

Table 1: We evaluate different aspects of our supervision transfer scheme on the object detection task on the NYUD2 val set using the
mAP metric. Left column demonstrates that our scheme for pre-training is better than alternatives like no pre-training, and copying over
weights from RGB networks. The middle column demonstrates that our technique leads to transfer of mid-level semantic features which by
themselves are highly discriminative, and that improving the quality of the supervisory network translated to improvements in the learned
features. Finally, the right column demonstrates that the learned features on the depth images are still complementary to the features on the
RGB image they were supervised with.

speciﬁc (and thus harder to transfer across modalities) and
visualizations from [13] that neurons in mid-level layers are
semantic and respond to parts of objects. Transferring at
pool5 also has the computational beneﬁt that training can
be efﬁciently done in a fully convolutional manner over the
whole image.

For the function f , we use L2 distance between the fea-
ture vectors, f (x, y) = (cid:107)x − y(cid:107)2
2. We also tried f (x, y) =
1(y > τ ) · log p(x) + 1(y ≤ τ ) · log(1 − p(x)) (where
p(x) = eαx
1+eαx , 1(x) is the indicator function), for some
reasonable choices of α and τ but that resulted in worse per-
formance in initial experiments and we did not experiment
with it further.

Finally, the choice of the function t varies with differ-
ent pairs of networks. As noted above, we train using a
fully convolutional architecture. This requires the spatial
resolution of the two layers i∗ in Φ and L in Ψ to be sim-
ilar, which is trivially true if the architectures Φ and Ψ are
the same. When they are not (for example when we trans-
fer from VGG net to AlexNet), we adjust the padding in the
AlexNet to obtain the same spatial resolution at pool5 layer.
This apart, we introduce an adaptation layer comprising
of 1 × 1 convolutions followed by ReLU to map from the
representation at layer L in Ψ to layer i∗ in Φ. This accounts
for difference in the number of neurons (for example when
adapting from VGG to AlexNet), or even when the number of
neurons are the same, allows for domain speciﬁc ﬁtting. For
VGG to AlexNet transfer we also needed to introduce a scal-
ing layer to make the average norm of features comparable
between the two networks.

4.1. Transfer to Depth Images

We ﬁrst demonstrate how we transfer supervision from
color images to depth images as obtained from a range sen-
sor like the Microsoft Kinect. As described above, we do
this set of experiments on the NYUD2 dataset [41] and show
results on the task of object detection and instance segmen-

tation [17]. The NYUD2 dataset consists of 1449 paired
RGB and D images. These images come from 464 different
scenes and were hand selected from the full video sequence
while ensuring ensure diverse scene content [41]. The full
video sequence that comes with the dataset has over 400K
RGB-D frames, we use 10K of these frame pairs for super-
vision transfer.

In all our experiments we report numbers on the standard
val and test splits that come with the dataset [41, 17]. Im-
ages in these splits have been selected while ensuring that
all frames belonging to the same scene are contained en-
tirely in exactly one split. We additionally made sure only
frames from the corresponding training split were used for
supervision transfer.

The downstream task that we study here is that of object
detection. We follow the experimental setup from Gupta et
al. [17] for object detection and study the 19 category object
detection problem, and use mean average precision (mAP)
to measure performance.

Baseline Detection Model We use the model from
Gupta et al. [17] for object detection. Their method builds
off R-CNN [13]. In our initial experiments we adapted their
model to the more recent Fast R-CNN framework [12]. We
summarize our key ﬁndings here. First, [17] trained the ﬁ-
nal detector on both RGB and D features jointly. We found
training independent models all the way and then simply
averaging the class scores before the SoftMax performed
better. While this is counter-intuitive, we feel it is plausible
given limited amount of training data. Second, [17] use fea-
tures from the fc6 layer and observed worse performance
when using fc7 representation; in our framework where we
are training completely independent detectors for the two
modalities, using fc7 representation is better than using
fc6 representation. Finally, using bounding box regression
boosts performance. Here we simply average the predicted
regression target from the detectors on the two modalities.
All this analysis helped us boost the mean AP on the test

4

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

Figure 2: Visualization of learned ﬁlters (best viewed in color): (a) visualizes ﬁlters learned on RGB images from ImageNet data by
AlexNet. (b) shows these ﬁlters after the ﬁnetuning on HHA images, and hardly anything changes visually. (c) shows HHA image ﬁlters
from our pre-training scheme, which are much different from ones that are learned on RGB images. (d) shows HHA image ﬁlters learned
without any pre-training. (e) shows optical ﬂow ﬁlters learned by [14]. Note that they initialize these ﬁlters from RGB ﬁlters and these
also do not change much over their initial RGB ﬁlters. (f) shows ﬁlters we learn on optical ﬂow images, which are again very different
from ﬁlters learned on RGB or HHA images. (g) shows image patches corresponding to highest scoring activations for two neurons in
the RGB CNN. (h) shows HHA image patches corresponding to highest scoring activations of the same neuron in the supervision transfer
depth CNN. (i) shows the corresponding RGB image patch for these depth image patches for ease of visualization.

set from 38.80% as reported by [17, 16] to 44.39%, us-
ing the same CNN network and supervision. This already
is the state-of-the-art result on this dataset and we use this
as a baseline for the rest of our experiments. We denote
this model as ‘[17] + Fast R-CNN’. We followed the default
setup for training Fast R-CNN, 40K iterations, base learning
rate of 0.001 and stepping it down by a factor of 10 after
every 30K iterations, except that we ﬁnetune all the layers,
and use 688px length for the shorter image side. We used
RGB-D box proposals from [17] for all experiments.

Note that Gupta et al. [17] embed depth images into a
geocentric embedding which they call HHA (HHA encodes
horizontal disparity, height above ground and angle with
gravity) and use the AlexNet architecture to learn HHA fea-
tures and copy over the weights from the RGB CNN that was
trained for 1000 way classiﬁcation [31] on ImageNet [6] to
initialize this network. All through this paper, we stick with
using HHA embedding1 to represent the input depth images,
and their network architecture, and show how our proposed
supervision transfer scheme improves performances over
their technique for initialization. We summarize our vari-
ous transfer experiments below:

Does supervision transfer work? The ﬁrst question we
investigate is if we are able to transfer supervision to a new
modality. To understand this we conducted the following
three experiments:

1. no init (1A): randomly initialize the depth network us-
ing weight distributions typically used for training on Ima-
geNet and simply train this network for the ﬁnal task. While

1We use the term depth and HHA interchangeably.

training this network we train for 100K iterations, start with
a learning rate on 0.01 and step it down by a factor of 10
every 30K iterations.

2. copy from RGB (1B): copy weights from a RGB net-
work that was trained on ImageNet. This is same as the
scheme proposed in [17]. This network is then trained us-
ing the standard Fast R-CNN settings.

3. supervision transfer (1C): train layers conv1 through
pool5 from random initialization using the supervision
transfer scheme as proposed in Section 3, on the 5K paired
RGB and D images from the video sequence from NYUD2
for scenes contained in the training set. We then plug in
these trained layers along with randomly initialized fc6,
fc7 and classiﬁer layers for training with Fast R-CNN. We
report the results in Table 1. We see that ‘copy from RGB’
surprisingly does better than ‘no init’, which is consistent
with what Gupta et al. report in [17], but our scheme for
supervision transfer outperforms both these baselines by a
large margin pushing up mean AP from 25.1% to 29.7%.
We also experimented with using a RGB network Ψ that
has been adapted for object detection on this dataset for
supervising the transfer (1D) and found that this boosted
performance further from 29.7% to 30.5% (1D in Table 1,
AlexNet∗ indicates RGB AlexNet that has been adapted for
detection on the dataset). We use this scheme for all subse-
quent experiments.

Visualizations. We visualize the ﬁlters from the ﬁrst
layer for these different schemes of transfer in Figure 2(a-f),
and observe that our training scheme learns reasonable ﬁl-
ters and ﬁnd that these ﬁlters are of different nature than ﬁl-

5

AP r at 0.5

AP r at 0.7

modality RGB Arch. D Arch. AP r at 0.5 AP r at 0.7

val

RGB
D

fc7

26.3

28.4

+pool2+conv4

+pool2+conv4

29.8

31.5

fc7

14.8

17.4

18.3

19.6

Table 2: Region detection average precision AP r on NYUD2
val set: Performance on NYUD2 val set where we observe similar
boosts in performance when using hyper-column transform with
our learned feature hierarchies (learned using supervision transfer
on depth images) as obtained with more standard feature hierar-
chies learned on ImageNet on RGB images.

ters learned on RGB images. In contrast, note that schemes
which initialize depth CNNs with RGB CNNs weights, ﬁlters
in the ﬁrst layer change very little. We also visualize patches
giving high activations for neurons paired across RGB and
D images Figure 2(g-i). High scoring patches from RGB
CNN (AlexNet in this case), correspond to parts of object (g),
high scoring patches from the depth CNN also corresponds
to parts of the same object class (h and i).

How good is the transferred representation by itself?
The next question we ask is if our supervision transfer
scheme transfers good representations or does it only pro-
vide a good initialization for feature learning. To answer
this question, we conducted the following experiments:

1. Quality of transferred pool5 representation (2A,
2B): The ﬁrst experiment was to evaluate the quality of the
transferred pool5 representation. To do this, we froze the
network parameters for layers conv1 through pool5 to be
those learned during the transfer process, and only learn pa-
rameters in fc6, fc7 and classiﬁer layers during Fast R-CNN
training (2B ‘supervision transfer adapted (ft fc only)’).
We see that there is only a moderate degradation in perfor-
mance for our learned features from 30.5% (1D) to 30.0%
(2B) indicating that the features learned on depth images at
pool5 are discriminative by themselves. In contrast, when
freezing weights when copying from ImageNet (2A), per-
formance degrades signiﬁcantly to 19.8%.

2. Improved transfer using better supervising net-
work Φ (2C, 2D): The second experiment investigated if
performance improves as we improve the quality of the su-
pervising network. To do this, we transferred supervision
from VGG net instead of AlexNet (2C) 2. VGG net has been
shown to be better than AlexNet for a variety of vision tasks.
As before we report performance when freezing parameters
till pool5 (2C), and learning all the way (2D). We see that
using a better supervising net results in learning better fea-
tures for depth images: when the representation is frozen till
pool5 we see performance improves from 30.0% to 32.2%,
and when we ﬁnetune all the layers performance goes up to
33.6% as compared to 30.5% for AlexNet.

2To transfer from VGG to AlexNet, we use 150K transfer iterations
instead of 100K. Running longer helps for VGG to AlexNet transfer by
1.5% and much less (about 0.5%) for AlexNet to AlexNet transfer.

test

[20]

[20]

AlexNet
RGB + D AlexNet AlexNet
Our (supervision transfer) RGB + D AlexNet AlexNet

Gupta et al. [16]

RGB

-

Our (supervision transfer) RGB + D

RGB

VGG
VGG

-

AlexNet

23.4

37.5

40.5

31.0

42.1

13.4

21.8

25.4

17.7

26.9

Table 3: Region detection average precision AP r on NYUD2
test set.

Is the learned representation complementary to the
representation on the source modality? The next ques-
tion we ask is if the representation learned on the depth im-
ages complementary to the representation on the RGB im-
ages from which it was learned. To answer this question
we look at the performance when using both the modali-
ties together. We do this the same way that we describe for
the baseline model and simply average the category scores
and regression targets from the RGB and D detectors. Ta-
ble 1(right) reports our ﬁndings. Just using RGB images
(3A) gives us a performance of 22.3%. Combining this
with the HHA network as initialized using the scheme from
Gupta et al. [17] (3B) boosts performance to 33.8%. Ini-
tializing the HHA network using our proposed supervision
transfer scheme when transferring from AlexNet∗ to AlexNet
(3C) gives us 35.6% and when transferring from VGG∗ to
AlexNet (3D) gives us 37.0%. These results show that the
representations are still complementary and using the two
together can help the ﬁnal performance.

Does supervision transfer lead to meaningful inter-
mediate layer representations? The next questions we in-
vestigate is if the intermediate layers learned in the target
domain Md through supervision transfer carry useful infor-
mation. [30] hypothesize that information from intermedi-
ate layers in such hierarchies carry information which may
be useful for ﬁne grained tasks. Jones and Malik [29] and
Weber and Malik [51] and in more recent work Hariharan et
al. [20] and Long et al. [36] operationalize this and demon-
strate improvements for ﬁne grained tasks like correspon-
dence estimation and segmentation. Here we investigate if
the representations learned using supervision transfer also
share this property. To test this, we follow the hyper-column
architecture from Hariharan et al. [20] and study the task of
simultaneous detection and segmentation (SDS) [19] and
investigate if the use of hyper-columns with our trained net-
works results in similar improvements as obtained when
using more traditionally trained CNNs. We report the re-
sults in Table 2. On the NYUD2 dataset, the hyper-column
transform improves AP r from 26.3% to 29.8% when using
AlexNet for RGB images. We follow the same experimen-
tal setup as proposed in [18], and ﬁx the CNN parameters
(to a network that was ﬁnetuned for detection on NYUD2
dataset) and only learn the classiﬁer parameters and use fea-
tures from pool2 and conv4 layers in addition to fc7 for

6

pool1 pool2 conv3 conv4 pool5

24.4

28.4

30.6

29.9

30.5

fc6

29.7

fc7

27.7

conv3 + fc7

31.3

Table 4: Mean AP on NYUD2 val set as a function of layer
used for supervision transfer.

Train on MS COCO and adapt to NYUD2 using supervision transfer

Train on NYUD2

bed

chair

sink

sofa

table

tv

toilet

mean

51.6

RGB
D
RGB + D 60.2

59.4

26.6

27.1

35.3

25.1

23.8

27.5

43.1

32.2

48.2

14.4

13.0

16.5

12.9

13.6

17.1

57.5

43.8

58.1

33.0

30.4

37.6

mean

35.7

45.0

54.4

ﬁgure ground prediction. When doing the same for our su-
pervision transfer network we observe a similar boost in
performance from 28.4% to 31.5% when using the hyper-
column transform. This indicates that models trained using
supervision transfer not only learn good representations at
the point of supervision transfer (pool5 in this case), but
also in the intermediate layers of the network.

How does performance vary as the transfer point is
changed? We now study how performance varies as we
vary the layer used for supervision transfer. We stick to the
same experimental setup as used for Exp. 1D in Table 1,
and conduct supervision transfer at different layers of the
network. Layers above the transfer point are initialized ran-
domly and learned during detector training. For transfer-
ring features from layers 1 to 5, we use fully convolutional
training as before. But when transferring fc6 and fc7 fea-
tures we compute them over bounding box proposals (we
use RGB-D MCG bounding box proposals [17]) using Spa-
tial Pyramid Pooling on conv5 [21, 12].

We report the obtained AP on the NYUD2 val set in Ta-
ble 4. We see performance is poor when transferring at
lower layers (pool1 and pool2). Transfer at layers conv3,
conv4, pool5 works comparably, but performance deteri-
orates when moving to further higher layers (fc6 and fc7).
This validates our choice for using an intermediate layer
as a transfer point. We believe the drop in performance at
higher layers is an artifact of the amount of data used for
supervision transfer. With a richer and more diverse dataset
of paired images we expect transfer at higher layers to work
similar or better than transfer at mid-layers.

We also conducted some initial experiments with using
multiple transfer points. When transferring at conv3 and
fc7 we observe performance improves over transferring at
either layer alone, indicating learning is facilitated when su-
pervision is closer to parameters being learned. We defer
exploration of other choices in this space for future work.

Is input representation in the form of HHA images
still important? Given our tool for training CNNs on depth
images, we can now investigate the question whether hand
engineering the input representation is still important. We
conduct an experiment in exactly the same settings as Exp.
1D except that we work with disparity images (replicated to
have 3 channels) instead of HHA images. This gives a mAP
of 29.2% as compared to 30.5% for the HHA images. The
difference in performance is smaller than what [17] reports
but still exists, which suggests that encoding information
into geocentric channels through the HHA embedding is still
useful [17].

Table 5: Adapting RGB object detectors to RGB-D images: We
transfer object detectors trained on RGB images (on MS COCO
dataset) to RGB-D images in the NYUD2 dataset, without using
any annotations on depth images. We do this by learning a model
on depth images using supervision transfer and then use the RGB
object detector trained on the representation learned on depth im-
ages. We report detection AP(%) on NYUD2 test set. These trans-
ferred detectors work well on depth images even without using
any annotations on depth images. Combining predictions from the
RGB and depth image improves performance further.

to train a network Γlower

Applications to zero-shot detection on depth im-
ages. Supervision transfer can be used to transfer detectors
trained on RGB images to depth images. We do this by the
following steps. We ﬁrst train detectors on RGB images.
We then split the network into two parts at an appropriate
and Γupper
mid-level point to obtain two networks Γlower
.
We then use the lower domain speciﬁc part of the network
Γlower
on depth images to gen-
rgb
d
erate the same representation as the RGB network Γlower
.
This is done using the same supervision transfer procedure
as before on a set of unlabeled paired RGB-D images. We
then construct a ‘franken’ network with the lower domain
speciﬁc part coming from Γlower
and the upper more se-
mantic network coming from Γupper
. We then simply use
the output of this franken network on depth images to obtain
zero-shot object detection output.

rgb

rgb

rgb

rgb

d

More speciﬁcally, we use Fast R-CNN with AlexNet CNN
to train object detectors on the MS COCO dataset [35]. We
then split the network right after the convolutional layers
pool5, and train a network on depth images to predict the
same pool5 features as this network on unlabeled RGB-
D images from the NYUD2 dataset (using frames from the
trainval video sequences). We study all 7 object categories
that are shared between MS COCO and NYUD2 datasets, and
report the performance in Table 5. We observe our zero-shot
scheme for transferring detectors across modalities works
rather well, and results in good performance. While the
RGB detector trained on MS COCO obtains a mean AP of
33.0% on these categories, our zero-shot detector on D im-
ages performs comparably and has a mean AP of 30.4%.
Note that in doing so we have not used any annotations from
the NYUD2 dataset (RGB or D images). Furthermore, com-
bining predictions from RGB and D object detectors results
in boost over just using the detector on the RGB image giv-
ing a performance of 37.6%. Performance when training
detectors using annotations from the NYUD2 dataset (last
column in Table 5) is obviously much higher.

Performance on test set. Finally, we report the perfor-

7

method

modality RGB Arch. D Arch. mean

Fast R-CNN [12]
Fast R-CNN [12]

RGB
RGB

AlexNet
VGG

-

-

Gupta et al. [16]

Gupta et al. [17]

RGB + D AlexNet AlexNet
RGB + D AlexNet AlexNet
Gupta et al. [17] + Fast R-CNN RGB + D AlexNet AlexNet
RGB + D AlexNet AlexNet

Our (supervision transfer)

Gupta et al. [17] + Fast R-CNN RGB + D
RGB + D

Our (supervision transfer)

VGG
VGG

Gupta et al. [17] + Fast R-CNN

Our (supervision transfer)

D
D

-

-

AlexNet
AlexNet

AlexNet
AlexNet

27.8

38.8

38.8

41.2

44.4

47.1

46.2

49.1

34.2

41.7

Table 6: Object detection mean AP(%) on NYUD2 test set: We
compare our performance against several state-of-the-art methods.
RGB Arch. and D Arch. refers to the CNN architecture used by
the detector. We see when using just the depth image, our method
is able to improve performance from 34.2% to 41.7%. When
used in addition to features from the RGB image, our learned
features improve performance from 44.4% to 47.1% (when using
AlexNet RGB features) and from 46.2% to 49.1% (when using
VGG RGB features) over past methods for learning features from
depth images. We see improvements across almost all categories,
performance on individual categories is tabulated in supplemen-
tary material.

mance of our best performing supervision transfer scheme
(VGG ∗ → AlexNet) on the test set in Table 6. When used
with AlexNet for obtaining color features, we obtain a ﬁnal
performance of 47.1% which is about 2.7% higher than the
current state-of-the-art on this task (Gupta et al. [17] Fast
R-CNN). We see similar improvements when using VGG for
obtaining color features (46.2% to 49.1%). The improve-
ment when using just the depth image is much larger, 41.7%
for our ﬁnal model as compared to 34.2% for the baseline
model which amounts to a 22% relative improvement. Note
that in obtaining these performance improvements we are
using exactly the same CNN architecture and amount of la-
beled data. We also report performance on the SDS task in
Table 3 and obtain state-of-the-art performance of 40.5% as
compared to previous best 37.5% [16] when using AlexNet,
using VGG CNN for the RGB image improves performance
further to 42.1%.

Training Time. Finally, we report the amount of time
it takes to learn a model using supervision transfer. For
AlexNet to AlexNet supervision transfer we trained for 100K
iterations which took a total of 2.5 hours on a NVIDIA k40
GPU. This is a many orders of magnitude faster than train-
ing models from random initialization on ImageNet scale
data using class labels.

4.2. Transfer to Flow Images

We now report our experiments for transferring supervi-
sion to optical ﬂow images. We consider the end task of

RGB

[14]

[14] + [12]

optical ﬂow

[14]
Sup PreTr

[14] + [12] Random Init
Sup PreTr

No PreTr

Our
Sup Transfer

mean AP

27.0

32.0

24.3

38.4

31.7

35.7

Table 7: Action Detection AP(%) on the JHMDB test set: We
report action detection performance on the test set of JHMDB us-
ing RGB or ﬂow images. Right part of the table compares our
method supervision transfer against the baseline of random initial-
ization, and the ceiling using fully supervised pre-training method
from [14]. Our method reaches more than half the way towards
fully supervised pre-training.

action detection on the JHMDB dataset. The task is to detect
people doing actions like catch, clap, pick, run, sit
in frames of a video. Performance is measured in terms of
mean average precision as in the standard PASCAL VOC
object detection task and what we used for the NYUD2 ex-
periments in Section 4.1.

A popular technique for getting better performance at
such tasks on video data is to additionally use features com-
puted on the optical ﬂow between the current frame and the
next frame [43, 14], and we use our supervision transfer
scheme to learn features for optical ﬂow images in this con-
text.

Detection model For JHMDB we use the experimental
setup from Gkioxari and Malik [14] and study the 21 class
task. Here again, Gkioxari and Malik build off of R-CNN
and we ﬁrst adapt their system to use Fast R-CNN, and ob-
serve similar boosts in performance as for NYUD2 when go-
ing from R-CNN to Fast R-CNN framework (Table 7, full ta-
ble with per class performance is in the supplementary ma-
terial). We denote this model as [14]+[12]. We attribute this
large difference in performance to a) bounding box regres-
sion and b) number of iterations used for training.

Supervision transfer performance We use the videos
from UCF 101 dataset [47] for our pre-training. Note that
we do not use any labels provided with the UCF 101 dataset,
and simply use the videos as a source of paired RGB and
ﬂow images. We take 5 frames from each of the 9K videos
in the train1 set. We report performance on JHMDB test set
in Table 7. Note that JHMDB has 3 splits and as in past
work, we report the AP averaged across these 3 splits.

We report performance for three different schemes for
initializing the ﬂow model: a) Random Init (No PreTr)
when the ﬂow network is initialized randomly using the
weight initialization scheme used for training a RGB model
on ImageNet, b) Supervised Pre-training ([14]+[12] Sup
PreTr) on ﬂow images from UCF 101 for the task of
video classiﬁcation starting from RGB weights as done by
Gkioxari and Malik [14] and c) supervision transfer (Our
Sup Transfer) from an RGB model to train optical ﬂow
model as per our proposed method. We see that our scheme
for supervision transfer improves performance from 31.7%
achieved when using random initialization to 35.7%, which

8

is more than half way towards what fully supervised pre-
training can achieve (38.4%), thereby illustrating the efﬁ-
cacy of our adaptation scheme.

Conclusion We have presented an algorithm for trans-
fer of learned representations from a well labeled modal-
ity to new unlabeled modalities using unlabeled paired
images from the two modalities.
This enables us to
learn rich representations on unlabeled modalities and ob-
tain large boosts in performance. We believe the ad-
vances presented in this paper will allow us to effectively
use new modalities for obtaining better performance on
standard vision tasks. Code, data and pretrained mod-
els are available at https://github.com/s-gupta/
fast-rcnn/tree/distillation.

Acknowledgments:
The authors would like to thank
Georgia Gkioxari for sharing her wisdom and experimental
setup for the UCF 101 and JHMDB datasets. This work was
supported by ONR SMARTS MURI N00014-09-1-1051,
a Berkeley Graduate Fellowship, a Google Fellowship in
Computer Vision and a NSF Graduate Research Fellowship.
We gratefully acknowledge NVIDIA corporation for the do-
nation of Tesla and Titan GPUs used for this research.

References

[1] Y. Aytar and A. Zisserman. Tabula rasa: Model transfer for

object category detection. In ICCV, 2011. 2

[2] C. Bucilua, R. Caruana, and A. Niculescu-Mizil. Model

compression. In ACM SIGKDD, 2006. 2

[3] K. Chatﬁeld, K. Simonyan, A. Vedaldi, and A. Zisserman.
Return of the devil in the details: Delving deep into convo-
lutional nets. In BMVC, 2014. 1

[4] S. Chopra, S. Balakrishnan, and R. Gopalan. DLID: Deep
learning for domain adaptation by interpolating between do-
mains. In ICML Workshop on Challenges in Representation
Learning, 2013. 2

[5] C. M. Christoudias, R. Urtasun, M. Salzmann, and T. Dar-
rell. Learning to recognize objects from unseen modalities.
In Computer Vision–ECCV 2010, pages 677–691. Springer,
2010. 2

[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. ImageNet: A large-scale hierarchical image database.
In CVPR, 2009. 1, 2, 3, 5

[7] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,
E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti-
vation feature for generic visual recognition. In ICML, 2014.
2, 3

[8] L. Duan, D. Xu, and I. W. Tsang. Learning with augmented
In ICML,

features for heterogeneous domain adaptation.
2012. 2

[9] A. Frome, G. S. Corrado, J. Shlens, S. Bengio, J. Dean,
T. Mikolov, et al. Devise: A deep visual-semantic embed-
ding model. In NIPS, 2013. 2

[10] Y. Ganin and V. Lempitsky. Unsupervised Domain Adapta-
tion by Backpropagation. ArXiv e-prints, Sept. 2014. 2

[11] M. Ghifary, W. B. Kleijn, and M. Zhang.

Domain
adaptive neural networks for object recognition. CoRR,
abs/1409.6041, 2014. 2

[12] R. Girshick. Fast R-CNN. In ICCV, 2015. 2, 4, 7, 8, 14
[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 1, 2, 4

[14] G. Gkioxari and J. Malik. Finding action tubes. In CVPR,

2015. 3, 5, 8, 14

[15] B. Gong, Y. Shi, F. Sha, and K. Grauman. Geodesic ﬂow
kernel for unsupervised domain adaptation. In CVPR, 2012.
2

[16] S. Gupta, P. Arbel´aez, R. Girshick, and J. Malik. Aligning
3D models to RGB-D images of cluttered scenes. In CVPR,
2015. 4, 6, 8, 13, 14

[17] S. Gupta, R. Girshick, P. Arbel´aez, and J. Malik. Learning
rich features from RGB-D images for object detection and
segmentation. In ECCV, 2014. 3, 4, 5, 6, 7, 8, 14

[18] B. Hariharan. Beyond Bounding Boxes: Precise Localiza-
tion of Objects in Images. PhD thesis, EECS Department,
University of California, Berkeley, Aug 2015. 6

[19] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul-
taneous detection and segmentation. In ECCV, 2014. 1, 2,
6

[20] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Hyper-
columns for object segmentation and ﬁne-grained localiza-
tion. In CVPR, 2015. 6, 13

[21] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling
in deep convolutional networks for visual recognition.
In
ECCV, 2014. 7

[22] G. E. Hinton, O. Vinyals, and J. Dean. Distilling the knowl-
In NIPS 2014 Deep Learning

edge in a neural network.
Workshop, 2014. 2, 3

[23] J. Hoffman, S. Guadarrama, E. Tzeng, R. Hu, J. Donahue,
R. Girshick, T. Darrell, and K. Saenko. LSDA: Large scale
detection through adaptation. In NIPS, 2014. 2

[24] J. Hoffman, E. Rodner, J. Donahue, K. Saenko, and T. Dar-
rell. Efﬁcient learning of domain-invariant image represen-
tations. In ICLR, 2013. 2

[25] J. Hoffman, E. Tzeng, J. Donahue, , Y. Jia, K. Saenko, and
T. Darrell. One-shot learning of supervised deep convolu-
tional models. In arXiv 1312.6204; presented at ICLR Work-
shop, 2014. 2

[26] A. Janoch, S. Karayev, Y. Jia, J. T. Barron, M. Fritz,
K. Saenko, and T. Darrell. A category-level 3D object
In Consumer Depth
dataset: Putting the kinect to work.
Cameras for Computer Vision. 2013. 1

[27] H. Jhuang, J. Gall, S. Zufﬁ, C. Schmid, and M. J. Black.
Towards understanding action recognition. In ICCV, 2013. 2
Caffe: An open source convolutional archi-
http://caffe.

[28] Y. Jia.

tecture for fast feature embedding.
berkeleyvision.org/, 2013. 3

[29] D. G. Jones and J. Malik. Determining three-dimensional
shape from orientation and spatial frequency disparities. In
ECCV, 1992. 6

[30] J. J. Koenderink and A. J. van Doorn. Representation of lo-
cal geometry in the visual system. Biological cybernetics,
55(6):367–375, 1987. 6

9

[31] A. Krizhevsky, I. Sutskever, and G. Hinton. ImageNet clas-
siﬁcation with deep convolutional neural networks. In NIPS,
2012. 1, 2, 3, 5

[32] B. Kulis, K. Saenko, and T. Darrell. What you saw is not
what you get: Domain adaptation using asymmetric kernel
transforms. In CVPR, 2011. 2

[33] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1989. 3

[34] K. Lenc and A. Vedaldi. Understanding image representa-
tions by measuring their equivariance and equivalence.
In
CVPR, 2015. 3

[35] T. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon objects in context. In ECCV, 2014. 7

[36] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional

networks for semantic segmentation. In CVPR, 2015. 1, 6

[37] M. Long and J. Wang. Learning transferable features with
deep adaptation networks. CoRR, abs/1502.02791, 2015. 2
[38] J. Ngiam, A. Khosla, M. Kim, J. Nam, H. Lee, and A. Y.
Ng. Multimodal deep learning. In Proceedings of the 28th
International Conference on Machine Learning (ICML-11),
pages 689–696, 2011. 2

[39] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta,
and Y. Bengio. Fitnets: Hints for thin deep nets. arXiv
preprint arXiv:1412.6550, 2014. 2

[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,
and Y. LeCun. Overfeat: Integrated recognition, localization

and detection using convolutional networks. In ICLR, 2014.
2

[41] N. Silberman, D. Hoiem, P. Kohli, and R. Fergus.

Indoor
segmentation and support inference from RGBD images. In
ECCV, 2012. 4

[42] N. Silberman, D. Sontag, and R. Fergus. Instance segmenta-
tion of indoor scenes using a coverage loss. In ECCV, 2014.
1

[43] K. Simonyan and A. Zisserman. Two-stream convolutional
networks for action recognition in videos. In NIPS, 2014. 8
[44] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1, 3

[45] R. Socher, M. Ganjoo, C. D. Manning, and A. Ng. Zero-shot
learning through cross-modal transfer. In NIPS, 2013. 2
[46] S. Song, S. P. Lichtenberg, and J. Xiao. Sun rgb-d: A rgb-d
scene understanding benchmark suite. In CVPR, 2015. 1
[47] K. Soomro, A. R. Zamir, and M. Shah. Ucf101: A dataset of
101 human action classes from videos in the wild. In CRCV-
TR-12-01, 2012. 8

[48] N. Srivastava and R. Salakhutdinov. Multimodal learning

with deep boltzmann machines. JMRL, 2014. 2

[49] S. Tulsiani and J. Malik. Viewpoints and keypoints.

In

CVPR, 2015. 1

[50] E. Tzeng, J. Hoffman, N. Zhang, K. Saenko, and T. Darrell.
Deep domain confusion: Maximizing for domain invariance.
CoRR, abs/1412.3474, 2014. 2

[51] J. Weber and J. Malik. Robust computation of optical ﬂow
in a multi-scale differential framework. IJCV, 1995. 6

10

A. Supplementary Material

B. Document Changelog

1. Per category average precision: We report per cate-
gory numbers for summary tables on test sets in the main
paper.

2. Sample Detection and SDS output: We show sam-
ple detections and SDS output for the categories we
study. We sample 18 detections uniformly from the top k
(= 0.75× number of instances) detections for each cat-
egory: bed (Figure 3), chair (Figure 4), sofa (Figure 5),
toilet (Figure 6), table (Figure 7).

v1 Initial version

v2 Major changes: additional discussion of multi-modal
literature, visualization of neural activations in Figure 2(g-
i), additional experiments about quality of intermediate lay-
ers, performance as a function of transfer point, utility of
HHA embedding over disparity images, zero-shot detection
on depth images. Minor edits all over the text.

11

Figure 3: Sample detections and segmentation masks for bed on NYUD2 test set.

Figure 4: Sample detections and segmentation masks for chair on NYUD2 test set.

Figure 5: Sample detections and segmentation masks for sofa on NYUD2 test set.

12

Figure 6: Sample detections and segmentation masks for toilet on NYUD2 test set.

Figure 7: Sample detections and segmentation masks for table on NYUD2 test set.

d
o
h
t
e
m

y
t
i
l
a
d
o
m

B
G
R

.

h
c
r
A

.

h
c
r
A
D

c
i
r
t
e
m

[20]

RGB

AlexNet

AP r 0.5
RGB + D AlexNet AlexNet AP r 0.5
Gupta et al. [16]
Our (supervision transfer) RGB + D AlexNet AlexNet AP r 0.5
AP r 0.5
AlexNet AP r 0.5

Our (supervision transfer) RGB + D

VGG
VGG

RGB

[20]

-

-

[20]

RGB

AlexNet

AP r 0.7
RGB + D AlexNet AlexNet AP r 0.7
Gupta et al. [16]
Our (supervision transfer) RGB + D AlexNet AlexNet AP r 0.7
AP r 0.7
AlexNet AP r 0.7

Our (supervision transfer) RGB + D

VGG
VGG

RGB

[20]

-

-

b
u
t

h
t
a
b

8.9

42.0

31.5

17.5

42.2

5.9

13.8

13.3

6.6

13.0

d
e
b

45.2

65.1

68.7

59.5

69.5

28.6

46.0

50.6

35.7

56.1

f
l
e
h
s

k
o
o
b

12.6

12.7

22.3

10.7

18.3

2.8

2.4

5.3

0.4

6.9

r
i
a
h
c

20.6

42.0

39.6

32.7

45.1

6.6

17.3

15.9

9.4

r
e
t
n
u
o
c

24.3

42.1

43.3

28.3

41.9

6.0

15.0

14.2

7.2

17.9

14.8

x
o
b

1.4

5.1

4.0

2.6

5.3

0.6

3.0

1.3

1.6

2.5

k
s
e
d

r
o
o
d

4.2

9.5

11.2

5.8

10.7

1.2

2.6

2.6

1.1

4.3

19.3

20.5

25.1

22.4

29.1

9.6

9.9

15.6

16.5

18.6

r
e
s
s
e
r
d

27.2

38.0

52.1

42.2

55.2

16.8

25.8

50.0

29.3

51.7

e
g
a
b
r
a
g

n
i
b

20.1

50.3

42.5

32.9

48.1

15.8

45.4

34.0

29.1

36.2

p
m
a
l

26.2

32.8

45.0

34.3

45.1

8.4

6.9

14.0

11.3

16.2

r
o
t
i
n
o
m

39.2

54.5

61.8

54.5

62.3

16.1

37.5

36.4

33.3

42.2

t
h
g
i
n

d
n
a
t
s

21.3

38.2

47.5

26.7

46.9

17.1

24.3

33.8

19.5

32.3

w
o
l
l
i
p

23.7

42.0

41.3

28.9

42.0

15.5

25.5

26.3

19.9

26.9

k
n
i
s

a
f
o
s

27.6

39.4

48.5

36.1

46.0

11.9

19.6

20.8

17.2

20.4

25.2

46.6

49.7

38.3

54.8

12.9

27.9

27.7

17.9

32.5

e
l
b
a
t

8.2

14.8

18.1

9.6

17.2

1.8

7.6

6.9

1.7

6.3

n
o
i
s
i
v
e
l
e
t

35.3

48.0

49.5

44.1

49.0

33.7

44.9

44.9

35.7

44.4

t
e
l
i
o
t

54.3

68.4

68.4

62.5

71.1

44.0

38.7

68.4

43.4

68.7

n
a
e
m

23.4

37.5

40.5

31.0

42.1

13.4

21.8

25.4

17.7

26.9

Table 8: Region Detection AP r (%) on NYUD2 test set: We report per class AP r for the SDS experiments in Table 3 in the main paper.

13

Fast R-CNN [12]
Fast R-CNN [12]

Gupta et al. [17]

Gupta et al. [16]

method

modality RGB Arch. D Arch. b

b
u
t

h
t
a

d
e
b

f
l
e
h
s

k
o
o
b

x
o
b

r
i
a
h
c

r
e
t
n
u
o
c

k
s
e
d

r
o
o
d

r
e
s
s
e
r
d

e
g
a
b
r
a
g

n
i
b

p
m
a
l

r
o
t
i
n
o
m

t
h
g
i
n

d
n
a
t
s

w
o
l
l
i
p

k
n
i
s

a
f
o
s

e
l
b
a
t

t
e
l
i
o
t

n
a
e
m

n
o
i
s
i
v

e
l
e
t

RGB
RGB

AlexNet
VGG

-

-

7.9

51.2 37.0

1.5

31.3 35.4

9.4

22.4 28.9 19.3 31.0 35.9 24.1 26.4 24.6 39.7 16.6 32.9 53.5 27.8

37.4 69.1 47.0

2.9 44.4 48.6 11.5 28.7 43.1 33.6 32.9 50.9 32.6 34.4 39.0 50.3 24.5 44.1 61.5 38.8

RGB + D AlexNet AlexNet 36.4 70.8 35.1
RGB + D AlexNet AlexNet 39.4 73.6 38.4

3.6

47.3 46.8 14.9 23.3 38.6 43.9 37.6 52.7 40.7 42.4 43.5 51.6 22.0 38.0 47.7 38.8

5.9 50.1 47.3 14.6 24.4 42.9 51.5 36.2 52.1 41.5 42.9 42.6 54.6 25.4 48.6 50.2 41.2

Gupta et al. [17] + Fast R-CNN RGB + D AlexNet AlexNet 37.1 78.3 48.5 3.3

45.3 54.6 21.9 28.5 48.6 41.9 42.5 60.6 49.2 43.7 40.2 62.1 29.2 44.3 63.6 44.4

Our (supervision transfer)

RGB + D AlexNet AlexNet 45.6 78.7 48.5

4.3

50.5 57.8 21.4 29.6 54.0 41.6 45.4 61.2 57.9 47.3 48.9 63.2 29.5 50.0 60.1 47.1

Gupta et al. [17] + Fast R-CNN RGB + D
RGB + D

Our (supervision transfer)

VGG
VGG

AlexNet 47.2 80.4 52.8 4.2
AlexNet 50.6 81.0 52.6

49.7 53.0 22.4 33.7 52.1 44.4 39.2 64.6 47.5 45.1 42.1 63.2 31.4 42.1 63.0 46.2

5.4 53.0 56.1 20.9 34.6 57.9 46.2 42.5 62.9 54.7 49.1 50.0 65.9 31.9 50.1 68.0 49.1

Gupta et al. [17] + Fast R-CNN

Our (supervision transfer)

D
D

-

-

AlexNet 28.8 79.1 30.3
AlexNet 31.2 80.7 38.6

1.5

42.6 42.7 17.2 13.4 31.6 23.7 29.9 40.2 36.2 40.5 23.4 59.9 26.4 24.9 58.3 34.2

2.5 52.2 52.2 17.2 18.2 50.8 35.1 37.4 51.3 50.5 43.4 41.0 63.5 29.3 37.4 59.8 41.7

Table 9: Object Detection AP(%) on NYUD2 test set: We compare our performance against several state-of-the-art methods. RGB Arch.
and D Arch. refers to the CNN architecture used by the detector. We see when using just the depth image, our method is able to improve
performance from 34.2% to 41.7%. When used in addition to features from the RGB image, our learned features improve performance
from 44.4% to 47.1% (when using AlexNet RGB features) and from 46.2% to 49.1% (when using VGG RGB features) over past methods
for learning features from depth images. Analogous to summary Table 6 in the main paper.

r
i
a
h

h
s
u
r
Supervision modality b

h
c
t
a
c

p
a
l
c

b
m

i
l
c

s
r
i
a
t
s

f
l
o
g

p
m
u
j

k
c
i
p

r
u
o
p

p
u
l
l
u
p

h
s
u
p

n
u
r

l
l
a
b
t
o
o
h
s

w
o
b
t
o
o
h
s

n
u
g
t
o
o
h
s

d
n
a
t
s

t
i
s

l
l
a
b
e
s
a
b

g
n
i
w
s

w
o
r
h
t

k
l
a
w

e
v
a
w

n
a
e
m

method

Gkioxari et al. [14]

Gkioxari et al. [14]+Fast R-CNN

RGB 47.2 35.2 30.1 23.9 84.4

2.2

10.6 20.7 79.7 78.7 25.2 14.4

8.7

45.3 34.2 11.7 13.3 39.0 19.1 23.9 23.9 32.0

RGB 55.8 25.5 25.1 24.0 77.5

1.9

5.3

21.4 68.6 71.0 15.4

6.3

4.6

41.1 28.0

9.4

8.2

19.9 17.8 29.2 11.5 27.0

Gkioxari et al. [14]

Sup. PreTr.

32.3

5.0

35.6 30.1 58.0

7.8

2.6

16.4 55.0 72.3

8.5

6.1

3.9

47.8

7.3

24.9 26.3 36.3

4.5

22.1

7.6

24.3

Gkioxari et al. [14]+Fast R-CNN Sup. PreTr.

54.9 17.0 52.5 56.5 81.2 15.0 10.9 28.9 72.7 86.6 20.4 17.5 10.2 61.9 25.5 31.4 42.4 53.8 10.9 38.6 17.3 38.4

no init

No PreTr.

44.3 11.0 42.8 38.7 76.1 10.6

23.1 62.1 84.0 15.4

9.6

60.0 22.8 29.6 26.8 43.5 10.7 30.8

9.8

31.7

Our (supervision transfer)

Sup. Transfer

54.6 17.7 45.1 54.9 80.3 14.6

28.2 69.3 84.8 19.9 15.6

49.6 29.4 29.5 28.4 49.5 11.6 36.3 13.0 35.7

ﬂow

ﬂow

ﬂow

ﬂow

6.8

7.2

Table 10: Action Detection AP(%) on the JHMDB test set: We report action detection performance on the test set of JHMDB using
RGB or ﬂow images. Bottom part of the table, compares our method supervision transfer against the baseline of random initialization,
and the ceiling using fully supervised pre-training method from [14]. Our method reaches more than half the way towards fully supervised
pre-training. Analogous to Table 7 in the main paper.

l
l
a
b

k
c
i
k

6.6

9.7

14

Cross Modal Distillation for Supervision Transfer

Saurabh Gupta

Judy Hoffman
University of California, Berkeley
{sgupta, jhoffman, malik}@eecs.berkeley.edu

Jitendra Malik

5
1
0
2
 
v
o
N
 
5
2
 
 
]

V
C
.
s
c
[
 
 
2
v
8
4
4
0
0
.
7
0
5
1
:
v
i
X
r
a

Abstract

In this work we propose a technique that transfers su-
pervision between images from different modalities. We use
learned representations from a large labeled modality as
a supervisory signal for training representations for a new
unlabeled paired modality. Our method enables learning
of rich representations for unlabeled modalities and can
be used as a pre-training procedure for new modalities
with limited labeled data. We show experimental results
where we transfer supervision from labeled RGB images
to unlabeled depth and optical ﬂow images and demon-
strate large improvements for both these cross modal su-
pervision transfers. Code, data and pretrained models
are available at https://github.com/s-gupta/
fast-rcnn/tree/distillation.

1. Introduction

Current paradigms for recognition in computer vision in-
volve learning a generic feature representation on a large
dataset of labeled images, and then specializing or ﬁnetun-
ing the learned generic feature representation for the spe-
ciﬁc task at hand. Successful examples of this paradigm
include almost all state-of-the-art systems: object detection
[13], semantic segmentation [36], object segmentation [19],
and pose estimation [49], which start from generic features
that are learned on the ImageNet dataset [6] using over a
million labeled images and specialize them for each of the
different tasks. Several different architectures for learning
these generic feature representations have been proposed
over the years [31, 44, 3], but all of these rely on the avail-
ability of a large dataset of labeled images to learn feature
representations.

The question we ask in this work is, what is the analogue
of this paradigm for images from modalities which do not
have such large amounts of labeled data? There are a large
number of image modalities beyond RGB images which are
dominant in computer vision, for example depth images
coming from a Microsoft Kinect, infra-red images from
thermal sensors, aerial images from satellites and drones,

Figure 1: Architecture for supervision transfer: We train a
CNN model for a new image modality (like depth images), by
teaching the network to reproduce the mid-level semantic repre-
sentations learned from a well labeled image modality (such as
RGB images) for modalities for which there are paired images.

LIDAR point clouds from laser scanners, or even images
of intermediate representations output from current vision
systems e.g. optical ﬂow and stereo images. The number
of labeled images from such modalities are at least a few
orders of magnitude smaller than the RGB image datasets
used for learning features, which raises the question: do we
need similar large scale annotation efforts to learn generic
features for images from each such different modality?

We answer this question in this paper and propose a tech-
nique to transfer learned representations from one modal-
ity to another. Our technique uses ‘paired’ images from
the two modalities and utilizes the mid-level representations
from the labeled modality to supervise learning representa-
tions on the paired un-labeled modality. We call our scheme
supervision transfer and show that our learned representa-
tions perform well on standard tasks like object detection.
We also show that our technique leads to learning useful
feature hierarchies in the unlabeled modality, which can be
improved further with ﬁnetuning, and are still complemen-
tary to representations in the source modality.

As a motivating example, consider the case of depth im-
ages. While the largest labeled RGB dataset, ImageNet [6]
consists of over a million labeled images, the size of most
existing labeled depth datasets is of the order of a few thou-
sands [42, 46, 26]. At the same time there are a large num-
ber of unlabeled RGB and depth image pairs. Our technique
leverages this large set of unlabeled paired images to trans-

1

fer the ImageNet supervision on RGB images to depth im-
ages. Our technique is illustrated in Figure 1. We use a con-
volutional neural network that has been trained on labeled
images in the ImageNet dataset [6], and use the mid-level
representation learned by these CNNs as a supervisory sig-
nal to train a CNN on depth images. Our technique for trans-
ferring supervision results in improvements in performance
for the end task of object detection on the NYUD2 dataset,
where we improve the state-of-the-art from 34.2% to 41.7%
when using just the depth image and from 46.2% to 49.1%
when using both RGB and depth images together. We report
similar improvements for the task of simultaneous detection
and segmentation [19] and also show how supervision trans-
fer can be used for a zero-shot transfer of object detectors
trained on RGB images to detectors that can run on depth
images.

Though we show detailed experimental results for su-
pervision transfer from RGB to depth images, our technique
is equally applicable to images from other paired modali-
ties. To demonstrate this, we show additional transfer re-
sults from RGB images to optical ﬂow images where we
improve mean average precision for action detection on the
JHMDB dataset [27] from 31.7% to 35.7% when using just
the optical ﬂow image and no supervised pre-training.

Our technique is reminiscent of the distillation idea from
Hinton et al. [22] (and its recent FitNets extension [39]).
Hinton et al. [22] extended the model compression idea
from Bucilua et al. [2] to what they call ‘distillation’ and
showed how large models trained on large labeled datasets
can be compressed by using the soft outputs from the large
model as targets for a much smaller model operating on
the same modality. Our work here is a generalization of
this idea, and a) allows for transfer of supervision at arbi-
trary semantic levels, and b) additionally enables transfer of
supervision between different modalities using paired im-
ages. More importantly, our work here allows us to extend
the success of recent deep CNN architectures to new imag-
ing modalities without having to collect large scale labeled
datasets necessary for training deep CNNs.

2. Related Work

There has been a large body of work on transferring
knowledge between different visual domains, belonging to
the same modality. Initial work [32, 15, 1, 8, 24] studied the
problem in context of shallow image representations. While
[32, 15] sought to learn transformations between well la-
beled source and sparsely labeled target domains, Aytar et
al. [1] use the source models as a parameter regularizer for
target models, [8, 24] combine these two approaches into a
single joint optimization problem. Chopra et al. [4] intro-
duced one of the ﬁrst deep architectures for visual adapta-
tion by replicating feature extraction for each domain and
producing intermediate interpolated domains, while Ghi-

fary et al. [11] showed a single layer neural net could be
used to learn the feature transformation between simple do-
main shifts.

More recently, with the introduction of supervised CNN
models by Krizhevsky et al. [31], the community has been
moving towards a generic set of features which can be spe-
cialized to speciﬁc tasks and domains at hand [7, 13, 12,
40, 23] and traditional visual adaptation techniques can be
used in conjunction with such features [25]. More recently,
unsupervised domain adaptation techniques have been in-
troduced which learn to adapt deep representations so as
to minimize the discrepancy between the source and target
distributions [50, 10, 37].

All these lines of work study and solve the problem
of domain adaptation within the same modality.
In con-
trast, our work here tackles the problem of domain adap-
tation across different modalities. Most methods for intra-
modality domain adaptation described above start from an
initial set of features on the target domain, and a priori
it is unclear how this can be done when moving across
modalities, limiting the applicability of aforementioned ap-
proaches to our problem. This cross-model transfer prob-
lem has received much less attention. Notable among those
include [5, 38, 48, 45, 9]. While [5, 48] hallucinate modali-
ties during training time, [38, 45, 9] focus on the problem of
jointly embedding or learning representations from multiple
modalities into a shared feature space to improve learning
[38] or enabling zero-shot learning[45, 9]. Our work here
instead transfers high quality representations learned from
a large set of labeled images of one modality to completely
unlabeled images from a new modality, thus leading to a
generic feature representations on the new modalities which
we show are useful for a variety of tasks.

3. Supervision Transfer

Let us assume we have a modality Md with unlabeled
data, Dd for which we would like to train a rich representa-
tion. We will do so by transferring information from a sepa-
rate modality, Ms, which has a large labeled set of images,
Ds, and a corresponding K layered rich representation. We
assume this rich representation is layered although our pro-
posed method will work equally well for non-layered rep-
resentations. We use convolutional neural networks as our
layered rich representation.

Ms,Ds

We denote this

i ∈ [1 . . . K]}. φi

image representation as Φ =
{φi
is the ith layer represen-
Ms,Ds
tation for modality Ms which has been trained on labeled
images from dataset Ds, and it maps an input image from
modality Ms to a feature vector in Rni.
Ms,Ds

: Ms (cid:55)→ Rni
(1)
Feature vectors from consecutive layers in such layered
representations are related to one another by simple opera-
tions like non-linearities, convolutions, pooling, normaliza-

φi

2

Ms,Ds

Ms,Ds

(x) = max(0, φ1

tions and dot products (for example layer 2 features may be
related to layer 1 features using a simple non-linearity like
max with 0: φ2
(x))). Some
of these operations like convolutions and dot products have
free parameters. We denote such parameters associated with
operation at layer i by wi
s. The structure of such architec-
tures (the sequence of operations, and the size of representa-
tions at each layer, etc.) is hand designed or validated using
performance on an end task. Such validation can be done
on a small set of annotated images. Estimating the model
parameters wi
s is much more difﬁcult. The number of these
parameters for most reasonable image models can easily go
up to a few millions. Heretofore, state-of-the-art models
require discriminative learning of these parameters using a
large labeled training set.

d

Now suppose we want to learn a rich representation for
images from modality Md, for which we do not have ac-
cess to a large dataset of labeled images. We assume we
have already hand designed an appropriate architecture Ψ =
{ψi
∀i ∈ [1 . . . L]}. The task then is to effectively learn
the parameters associated with various operations in the ar-
chitecture, without having access to a large set of annotated
images for modality Md. As before, we denote these pa-
rameters to be learned by W [1...L]

d ∀i ∈ [1 . . . L]}

= {wi

Md

In addition to Ds, let us assume that we have access to
a large dataset of un-annotated paired images from modal-
ities Ms and Md. We denote this dataset by Us,d. By
paired images we mean a set of images of the same scene
in two different modalities. Our proposed scheme for train-
ing rich representations for images of modality Md is to
learn the representation Ψ such that the image representa-
tion ψL
D(Id) for image Id matches the image representation
φi∗
(Is) for its image pair Is in modality Ms for some
Ms,Ds
chosen and ﬁxed layer i∗ ∈ [1 . . . K]. We measure the simi-
larity between the representations using an appropriate loss
function f (for example, euclidean loss). Note that the rep-
resentations ψi∗
and φL
may not have the same dimen-
Ms
sions. In such cases we embed features ψL
into a space
with the same dimension as φi∗
using an appropriate sim-
Ms
ple transformation function t (for example a linear or afﬁne
function).
min
W [1...L]
d

(Id)(cid:1) , φi∗

t (cid:0)ψL

Ms,Ds

(Is)

(cid:88)

(2)

Md

Md

Md

(cid:16)

(cid:17)

f

(Is,Id)∈Us,d

We call this process supervision transfer from layer i∗ in Φ
of modality Ms to layer L in Ψ of modality Md.

The recent distillation method from Hinton et al. [22] is
a speciﬁc instantiation of this general method, where a) they
focus on the speciﬁc case when the two modalities Ms and
Md are the same and b) the supervision transfer happens at
the very last prediction layer, instead of an arbitrary internal
layer in representation Φ.

Our experiments in Section 4 demonstrate that this pro-
posed method for transfer of supervision is a) effective at

learning good feature hierarchies, b) these hierarchies can
be improved further with ﬁnetuning, and c) the resulting
representation can be complementary to the representation
in the source modality Ms if the modalities permit.

4. Experiments

In this section we present experimental results for the
NYUD2 dataset where we use color and depth images as
the paired modalities, and on the JHMDB video dataset for
which we use the RGB and optical ﬂow frames as the two
modalities.

Our general experimental framework consists of two
steps. The ﬁrst step is supervision transfer as proposed in
Section 3, and the second step is to assess the quality of
the transferred representation by using it for a downstream
task. For both of the datasets we study, we consider the
domain of RGB images as Ms for which there is a large
dataset of labeled images Ds in the form of ImageNet [6],
and treat depth and optical ﬂow respectively as Md. These
choices for Ms and Md are of particular practical signif-
icance, given the lack of large labeled datasets for depth
images and optical ﬂow, at the same time, the abundant
availability of paired images coming from RGB-D sensors
(for example Microsoft Kinect) and videos on the Internet
respectively.

For our layered image representation models, we use
convolutional neural networks (CNNs) [33, 31]. These net-
works have been shown to be very effective for a variety
of image understanding tasks [7]. We experiment with the
network architectures from Krizhevsky et al. [31] (denoted
AlexNet), Simonyan and Zisserman [44] (denoted VGG),
and use the models pre-trained on ImageNet [6] from the
Caffe [28] Model Zoo.

We use an architecture similar to [31] for the layered rep-
resentations for depth and ﬂow images. We do this in order
to be able to compare to past works which learn features on
depth and ﬂow images [17, 14]. Validating different CNN
architectures for depth and ﬂow images is a worthwhile sci-
entiﬁc endeavor, which has not been undertaken so far, pri-
marily because of lack of large scale labeled datasets for
these modalities. Our work here provides a method to cir-
cumvent the need for a large labeled dataset for these and
other image modalities, and will naturally enable exploring
this question in the future, however we do not delve in this
question in the current work.

We next describe our design choices for which layers to
transfer supervision between, and the speciﬁcation of the
loss function f and the transformation function t. We ex-
perimented with what layer to use for transferring supervi-
sion, and found transer at mid-level layers works best, and
use the last convolutional layer pool5 for all experiments
in the paper. Such a choice also resonates well with obser-
vations from [34] that lower layers in CNNs are modality

3

Does supervision transfer work?

How good is the transferred representation by itself?

Are the representations complementary?

Exp. 1A no init

22.7

Exp. 2A copy from RGB (ft fc only)

19.8

Exp. 3A [RGB]: RGB network on

22.3

Exp. 1B copy from RGB

Exp. 1C supervision transfer
AlexNet → AlexNet

Exp. 1D supervision transfer
AlexNet ∗ → AlexNet

25.1

29.7

Exp. 2B supervision transfer (ft fc only)
AlexNet ∗ → AlexNet

Exp. 2C supervision transfer (ft fc only)
VGG ∗ → AlexNet

RGB images AlexNet

30.0

Exp. 3B [RGB] + copy from RGB

33.8

32.2

Exp. 3C [RGB] + supervision transfer

35.6

AlexNet ∗ → AlexNet

30.5

Exp. 2D supervision transfer

33.6

VGG ∗ → AlexNet

Exp. 3D [RGB]+ supervision transfer
VGG ∗ → AlexNet

37.0

Table 1: We evaluate different aspects of our supervision transfer scheme on the object detection task on the NYUD2 val set using the
mAP metric. Left column demonstrates that our scheme for pre-training is better than alternatives like no pre-training, and copying over
weights from RGB networks. The middle column demonstrates that our technique leads to transfer of mid-level semantic features which by
themselves are highly discriminative, and that improving the quality of the supervisory network translated to improvements in the learned
features. Finally, the right column demonstrates that the learned features on the depth images are still complementary to the features on the
RGB image they were supervised with.

speciﬁc (and thus harder to transfer across modalities) and
visualizations from [13] that neurons in mid-level layers are
semantic and respond to parts of objects. Transferring at
pool5 also has the computational beneﬁt that training can
be efﬁciently done in a fully convolutional manner over the
whole image.

For the function f , we use L2 distance between the fea-
ture vectors, f (x, y) = (cid:107)x − y(cid:107)2
2. We also tried f (x, y) =
1(y > τ ) · log p(x) + 1(y ≤ τ ) · log(1 − p(x)) (where
p(x) = eαx
1+eαx , 1(x) is the indicator function), for some
reasonable choices of α and τ but that resulted in worse per-
formance in initial experiments and we did not experiment
with it further.

Finally, the choice of the function t varies with differ-
ent pairs of networks. As noted above, we train using a
fully convolutional architecture. This requires the spatial
resolution of the two layers i∗ in Φ and L in Ψ to be sim-
ilar, which is trivially true if the architectures Φ and Ψ are
the same. When they are not (for example when we trans-
fer from VGG net to AlexNet), we adjust the padding in the
AlexNet to obtain the same spatial resolution at pool5 layer.
This apart, we introduce an adaptation layer comprising
of 1 × 1 convolutions followed by ReLU to map from the
representation at layer L in Ψ to layer i∗ in Φ. This accounts
for difference in the number of neurons (for example when
adapting from VGG to AlexNet), or even when the number of
neurons are the same, allows for domain speciﬁc ﬁtting. For
VGG to AlexNet transfer we also needed to introduce a scal-
ing layer to make the average norm of features comparable
between the two networks.

4.1. Transfer to Depth Images

We ﬁrst demonstrate how we transfer supervision from
color images to depth images as obtained from a range sen-
sor like the Microsoft Kinect. As described above, we do
this set of experiments on the NYUD2 dataset [41] and show
results on the task of object detection and instance segmen-

tation [17]. The NYUD2 dataset consists of 1449 paired
RGB and D images. These images come from 464 different
scenes and were hand selected from the full video sequence
while ensuring ensure diverse scene content [41]. The full
video sequence that comes with the dataset has over 400K
RGB-D frames, we use 10K of these frame pairs for super-
vision transfer.

In all our experiments we report numbers on the standard
val and test splits that come with the dataset [41, 17]. Im-
ages in these splits have been selected while ensuring that
all frames belonging to the same scene are contained en-
tirely in exactly one split. We additionally made sure only
frames from the corresponding training split were used for
supervision transfer.

The downstream task that we study here is that of object
detection. We follow the experimental setup from Gupta et
al. [17] for object detection and study the 19 category object
detection problem, and use mean average precision (mAP)
to measure performance.

Baseline Detection Model We use the model from
Gupta et al. [17] for object detection. Their method builds
off R-CNN [13]. In our initial experiments we adapted their
model to the more recent Fast R-CNN framework [12]. We
summarize our key ﬁndings here. First, [17] trained the ﬁ-
nal detector on both RGB and D features jointly. We found
training independent models all the way and then simply
averaging the class scores before the SoftMax performed
better. While this is counter-intuitive, we feel it is plausible
given limited amount of training data. Second, [17] use fea-
tures from the fc6 layer and observed worse performance
when using fc7 representation; in our framework where we
are training completely independent detectors for the two
modalities, using fc7 representation is better than using
fc6 representation. Finally, using bounding box regression
boosts performance. Here we simply average the predicted
regression target from the detectors on the two modalities.
All this analysis helped us boost the mean AP on the test

4

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

Figure 2: Visualization of learned ﬁlters (best viewed in color): (a) visualizes ﬁlters learned on RGB images from ImageNet data by
AlexNet. (b) shows these ﬁlters after the ﬁnetuning on HHA images, and hardly anything changes visually. (c) shows HHA image ﬁlters
from our pre-training scheme, which are much different from ones that are learned on RGB images. (d) shows HHA image ﬁlters learned
without any pre-training. (e) shows optical ﬂow ﬁlters learned by [14]. Note that they initialize these ﬁlters from RGB ﬁlters and these
also do not change much over their initial RGB ﬁlters. (f) shows ﬁlters we learn on optical ﬂow images, which are again very different
from ﬁlters learned on RGB or HHA images. (g) shows image patches corresponding to highest scoring activations for two neurons in
the RGB CNN. (h) shows HHA image patches corresponding to highest scoring activations of the same neuron in the supervision transfer
depth CNN. (i) shows the corresponding RGB image patch for these depth image patches for ease of visualization.

set from 38.80% as reported by [17, 16] to 44.39%, us-
ing the same CNN network and supervision. This already
is the state-of-the-art result on this dataset and we use this
as a baseline for the rest of our experiments. We denote
this model as ‘[17] + Fast R-CNN’. We followed the default
setup for training Fast R-CNN, 40K iterations, base learning
rate of 0.001 and stepping it down by a factor of 10 after
every 30K iterations, except that we ﬁnetune all the layers,
and use 688px length for the shorter image side. We used
RGB-D box proposals from [17] for all experiments.

Note that Gupta et al. [17] embed depth images into a
geocentric embedding which they call HHA (HHA encodes
horizontal disparity, height above ground and angle with
gravity) and use the AlexNet architecture to learn HHA fea-
tures and copy over the weights from the RGB CNN that was
trained for 1000 way classiﬁcation [31] on ImageNet [6] to
initialize this network. All through this paper, we stick with
using HHA embedding1 to represent the input depth images,
and their network architecture, and show how our proposed
supervision transfer scheme improves performances over
their technique for initialization. We summarize our vari-
ous transfer experiments below:

Does supervision transfer work? The ﬁrst question we
investigate is if we are able to transfer supervision to a new
modality. To understand this we conducted the following
three experiments:

1. no init (1A): randomly initialize the depth network us-
ing weight distributions typically used for training on Ima-
geNet and simply train this network for the ﬁnal task. While

1We use the term depth and HHA interchangeably.

training this network we train for 100K iterations, start with
a learning rate on 0.01 and step it down by a factor of 10
every 30K iterations.

2. copy from RGB (1B): copy weights from a RGB net-
work that was trained on ImageNet. This is same as the
scheme proposed in [17]. This network is then trained us-
ing the standard Fast R-CNN settings.

3. supervision transfer (1C): train layers conv1 through
pool5 from random initialization using the supervision
transfer scheme as proposed in Section 3, on the 5K paired
RGB and D images from the video sequence from NYUD2
for scenes contained in the training set. We then plug in
these trained layers along with randomly initialized fc6,
fc7 and classiﬁer layers for training with Fast R-CNN. We
report the results in Table 1. We see that ‘copy from RGB’
surprisingly does better than ‘no init’, which is consistent
with what Gupta et al. report in [17], but our scheme for
supervision transfer outperforms both these baselines by a
large margin pushing up mean AP from 25.1% to 29.7%.
We also experimented with using a RGB network Ψ that
has been adapted for object detection on this dataset for
supervising the transfer (1D) and found that this boosted
performance further from 29.7% to 30.5% (1D in Table 1,
AlexNet∗ indicates RGB AlexNet that has been adapted for
detection on the dataset). We use this scheme for all subse-
quent experiments.

Visualizations. We visualize the ﬁlters from the ﬁrst
layer for these different schemes of transfer in Figure 2(a-f),
and observe that our training scheme learns reasonable ﬁl-
ters and ﬁnd that these ﬁlters are of different nature than ﬁl-

5

AP r at 0.5

AP r at 0.7

modality RGB Arch. D Arch. AP r at 0.5 AP r at 0.7

val

RGB
D

fc7

26.3

28.4

+pool2+conv4

+pool2+conv4

29.8

31.5

fc7

14.8

17.4

18.3

19.6

Table 2: Region detection average precision AP r on NYUD2
val set: Performance on NYUD2 val set where we observe similar
boosts in performance when using hyper-column transform with
our learned feature hierarchies (learned using supervision transfer
on depth images) as obtained with more standard feature hierar-
chies learned on ImageNet on RGB images.

ters learned on RGB images. In contrast, note that schemes
which initialize depth CNNs with RGB CNNs weights, ﬁlters
in the ﬁrst layer change very little. We also visualize patches
giving high activations for neurons paired across RGB and
D images Figure 2(g-i). High scoring patches from RGB
CNN (AlexNet in this case), correspond to parts of object (g),
high scoring patches from the depth CNN also corresponds
to parts of the same object class (h and i).

How good is the transferred representation by itself?
The next question we ask is if our supervision transfer
scheme transfers good representations or does it only pro-
vide a good initialization for feature learning. To answer
this question, we conducted the following experiments:

1. Quality of transferred pool5 representation (2A,
2B): The ﬁrst experiment was to evaluate the quality of the
transferred pool5 representation. To do this, we froze the
network parameters for layers conv1 through pool5 to be
those learned during the transfer process, and only learn pa-
rameters in fc6, fc7 and classiﬁer layers during Fast R-CNN
training (2B ‘supervision transfer adapted (ft fc only)’).
We see that there is only a moderate degradation in perfor-
mance for our learned features from 30.5% (1D) to 30.0%
(2B) indicating that the features learned on depth images at
pool5 are discriminative by themselves. In contrast, when
freezing weights when copying from ImageNet (2A), per-
formance degrades signiﬁcantly to 19.8%.

2. Improved transfer using better supervising net-
work Φ (2C, 2D): The second experiment investigated if
performance improves as we improve the quality of the su-
pervising network. To do this, we transferred supervision
from VGG net instead of AlexNet (2C) 2. VGG net has been
shown to be better than AlexNet for a variety of vision tasks.
As before we report performance when freezing parameters
till pool5 (2C), and learning all the way (2D). We see that
using a better supervising net results in learning better fea-
tures for depth images: when the representation is frozen till
pool5 we see performance improves from 30.0% to 32.2%,
and when we ﬁnetune all the layers performance goes up to
33.6% as compared to 30.5% for AlexNet.

2To transfer from VGG to AlexNet, we use 150K transfer iterations
instead of 100K. Running longer helps for VGG to AlexNet transfer by
1.5% and much less (about 0.5%) for AlexNet to AlexNet transfer.

test

[20]

[20]

AlexNet
RGB + D AlexNet AlexNet
Our (supervision transfer) RGB + D AlexNet AlexNet

Gupta et al. [16]

RGB

-

Our (supervision transfer) RGB + D

RGB

VGG
VGG

-

AlexNet

23.4

37.5

40.5

31.0

42.1

13.4

21.8

25.4

17.7

26.9

Table 3: Region detection average precision AP r on NYUD2
test set.

Is the learned representation complementary to the
representation on the source modality? The next ques-
tion we ask is if the representation learned on the depth im-
ages complementary to the representation on the RGB im-
ages from which it was learned. To answer this question
we look at the performance when using both the modali-
ties together. We do this the same way that we describe for
the baseline model and simply average the category scores
and regression targets from the RGB and D detectors. Ta-
ble 1(right) reports our ﬁndings. Just using RGB images
(3A) gives us a performance of 22.3%. Combining this
with the HHA network as initialized using the scheme from
Gupta et al. [17] (3B) boosts performance to 33.8%. Ini-
tializing the HHA network using our proposed supervision
transfer scheme when transferring from AlexNet∗ to AlexNet
(3C) gives us 35.6% and when transferring from VGG∗ to
AlexNet (3D) gives us 37.0%. These results show that the
representations are still complementary and using the two
together can help the ﬁnal performance.

Does supervision transfer lead to meaningful inter-
mediate layer representations? The next questions we in-
vestigate is if the intermediate layers learned in the target
domain Md through supervision transfer carry useful infor-
mation. [30] hypothesize that information from intermedi-
ate layers in such hierarchies carry information which may
be useful for ﬁne grained tasks. Jones and Malik [29] and
Weber and Malik [51] and in more recent work Hariharan et
al. [20] and Long et al. [36] operationalize this and demon-
strate improvements for ﬁne grained tasks like correspon-
dence estimation and segmentation. Here we investigate if
the representations learned using supervision transfer also
share this property. To test this, we follow the hyper-column
architecture from Hariharan et al. [20] and study the task of
simultaneous detection and segmentation (SDS) [19] and
investigate if the use of hyper-columns with our trained net-
works results in similar improvements as obtained when
using more traditionally trained CNNs. We report the re-
sults in Table 2. On the NYUD2 dataset, the hyper-column
transform improves AP r from 26.3% to 29.8% when using
AlexNet for RGB images. We follow the same experimen-
tal setup as proposed in [18], and ﬁx the CNN parameters
(to a network that was ﬁnetuned for detection on NYUD2
dataset) and only learn the classiﬁer parameters and use fea-
tures from pool2 and conv4 layers in addition to fc7 for

6

pool1 pool2 conv3 conv4 pool5

24.4

28.4

30.6

29.9

30.5

fc6

29.7

fc7

27.7

conv3 + fc7

31.3

Table 4: Mean AP on NYUD2 val set as a function of layer
used for supervision transfer.

Train on MS COCO and adapt to NYUD2 using supervision transfer

Train on NYUD2

bed

chair

sink

sofa

table

tv

toilet

mean

51.6

RGB
D
RGB + D 60.2

59.4

26.6

27.1

35.3

25.1

23.8

27.5

43.1

32.2

48.2

14.4

13.0

16.5

12.9

13.6

17.1

57.5

43.8

58.1

33.0

30.4

37.6

mean

35.7

45.0

54.4

ﬁgure ground prediction. When doing the same for our su-
pervision transfer network we observe a similar boost in
performance from 28.4% to 31.5% when using the hyper-
column transform. This indicates that models trained using
supervision transfer not only learn good representations at
the point of supervision transfer (pool5 in this case), but
also in the intermediate layers of the network.

How does performance vary as the transfer point is
changed? We now study how performance varies as we
vary the layer used for supervision transfer. We stick to the
same experimental setup as used for Exp. 1D in Table 1,
and conduct supervision transfer at different layers of the
network. Layers above the transfer point are initialized ran-
domly and learned during detector training. For transfer-
ring features from layers 1 to 5, we use fully convolutional
training as before. But when transferring fc6 and fc7 fea-
tures we compute them over bounding box proposals (we
use RGB-D MCG bounding box proposals [17]) using Spa-
tial Pyramid Pooling on conv5 [21, 12].

We report the obtained AP on the NYUD2 val set in Ta-
ble 4. We see performance is poor when transferring at
lower layers (pool1 and pool2). Transfer at layers conv3,
conv4, pool5 works comparably, but performance deteri-
orates when moving to further higher layers (fc6 and fc7).
This validates our choice for using an intermediate layer
as a transfer point. We believe the drop in performance at
higher layers is an artifact of the amount of data used for
supervision transfer. With a richer and more diverse dataset
of paired images we expect transfer at higher layers to work
similar or better than transfer at mid-layers.

We also conducted some initial experiments with using
multiple transfer points. When transferring at conv3 and
fc7 we observe performance improves over transferring at
either layer alone, indicating learning is facilitated when su-
pervision is closer to parameters being learned. We defer
exploration of other choices in this space for future work.

Is input representation in the form of HHA images
still important? Given our tool for training CNNs on depth
images, we can now investigate the question whether hand
engineering the input representation is still important. We
conduct an experiment in exactly the same settings as Exp.
1D except that we work with disparity images (replicated to
have 3 channels) instead of HHA images. This gives a mAP
of 29.2% as compared to 30.5% for the HHA images. The
difference in performance is smaller than what [17] reports
but still exists, which suggests that encoding information
into geocentric channels through the HHA embedding is still
useful [17].

Table 5: Adapting RGB object detectors to RGB-D images: We
transfer object detectors trained on RGB images (on MS COCO
dataset) to RGB-D images in the NYUD2 dataset, without using
any annotations on depth images. We do this by learning a model
on depth images using supervision transfer and then use the RGB
object detector trained on the representation learned on depth im-
ages. We report detection AP(%) on NYUD2 test set. These trans-
ferred detectors work well on depth images even without using
any annotations on depth images. Combining predictions from the
RGB and depth image improves performance further.

to train a network Γlower

Applications to zero-shot detection on depth im-
ages. Supervision transfer can be used to transfer detectors
trained on RGB images to depth images. We do this by the
following steps. We ﬁrst train detectors on RGB images.
We then split the network into two parts at an appropriate
and Γupper
mid-level point to obtain two networks Γlower
.
We then use the lower domain speciﬁc part of the network
Γlower
on depth images to gen-
rgb
d
erate the same representation as the RGB network Γlower
.
This is done using the same supervision transfer procedure
as before on a set of unlabeled paired RGB-D images. We
then construct a ‘franken’ network with the lower domain
speciﬁc part coming from Γlower
and the upper more se-
mantic network coming from Γupper
. We then simply use
the output of this franken network on depth images to obtain
zero-shot object detection output.

rgb

rgb

rgb

rgb

d

More speciﬁcally, we use Fast R-CNN with AlexNet CNN
to train object detectors on the MS COCO dataset [35]. We
then split the network right after the convolutional layers
pool5, and train a network on depth images to predict the
same pool5 features as this network on unlabeled RGB-
D images from the NYUD2 dataset (using frames from the
trainval video sequences). We study all 7 object categories
that are shared between MS COCO and NYUD2 datasets, and
report the performance in Table 5. We observe our zero-shot
scheme for transferring detectors across modalities works
rather well, and results in good performance. While the
RGB detector trained on MS COCO obtains a mean AP of
33.0% on these categories, our zero-shot detector on D im-
ages performs comparably and has a mean AP of 30.4%.
Note that in doing so we have not used any annotations from
the NYUD2 dataset (RGB or D images). Furthermore, com-
bining predictions from RGB and D object detectors results
in boost over just using the detector on the RGB image giv-
ing a performance of 37.6%. Performance when training
detectors using annotations from the NYUD2 dataset (last
column in Table 5) is obviously much higher.

Performance on test set. Finally, we report the perfor-

7

method

modality RGB Arch. D Arch. mean

Fast R-CNN [12]
Fast R-CNN [12]

RGB
RGB

AlexNet
VGG

-

-

Gupta et al. [16]

Gupta et al. [17]

RGB + D AlexNet AlexNet
RGB + D AlexNet AlexNet
Gupta et al. [17] + Fast R-CNN RGB + D AlexNet AlexNet
RGB + D AlexNet AlexNet

Our (supervision transfer)

Gupta et al. [17] + Fast R-CNN RGB + D
RGB + D

Our (supervision transfer)

VGG
VGG

Gupta et al. [17] + Fast R-CNN

Our (supervision transfer)

D
D

-

-

AlexNet
AlexNet

AlexNet
AlexNet

27.8

38.8

38.8

41.2

44.4

47.1

46.2

49.1

34.2

41.7

Table 6: Object detection mean AP(%) on NYUD2 test set: We
compare our performance against several state-of-the-art methods.
RGB Arch. and D Arch. refers to the CNN architecture used by
the detector. We see when using just the depth image, our method
is able to improve performance from 34.2% to 41.7%. When
used in addition to features from the RGB image, our learned
features improve performance from 44.4% to 47.1% (when using
AlexNet RGB features) and from 46.2% to 49.1% (when using
VGG RGB features) over past methods for learning features from
depth images. We see improvements across almost all categories,
performance on individual categories is tabulated in supplemen-
tary material.

mance of our best performing supervision transfer scheme
(VGG ∗ → AlexNet) on the test set in Table 6. When used
with AlexNet for obtaining color features, we obtain a ﬁnal
performance of 47.1% which is about 2.7% higher than the
current state-of-the-art on this task (Gupta et al. [17] Fast
R-CNN). We see similar improvements when using VGG for
obtaining color features (46.2% to 49.1%). The improve-
ment when using just the depth image is much larger, 41.7%
for our ﬁnal model as compared to 34.2% for the baseline
model which amounts to a 22% relative improvement. Note
that in obtaining these performance improvements we are
using exactly the same CNN architecture and amount of la-
beled data. We also report performance on the SDS task in
Table 3 and obtain state-of-the-art performance of 40.5% as
compared to previous best 37.5% [16] when using AlexNet,
using VGG CNN for the RGB image improves performance
further to 42.1%.

Training Time. Finally, we report the amount of time
it takes to learn a model using supervision transfer. For
AlexNet to AlexNet supervision transfer we trained for 100K
iterations which took a total of 2.5 hours on a NVIDIA k40
GPU. This is a many orders of magnitude faster than train-
ing models from random initialization on ImageNet scale
data using class labels.

4.2. Transfer to Flow Images

We now report our experiments for transferring supervi-
sion to optical ﬂow images. We consider the end task of

RGB

[14]

[14] + [12]

optical ﬂow

[14]
Sup PreTr

[14] + [12] Random Init
Sup PreTr

No PreTr

Our
Sup Transfer

mean AP

27.0

32.0

24.3

38.4

31.7

35.7

Table 7: Action Detection AP(%) on the JHMDB test set: We
report action detection performance on the test set of JHMDB us-
ing RGB or ﬂow images. Right part of the table compares our
method supervision transfer against the baseline of random initial-
ization, and the ceiling using fully supervised pre-training method
from [14]. Our method reaches more than half the way towards
fully supervised pre-training.

action detection on the JHMDB dataset. The task is to detect
people doing actions like catch, clap, pick, run, sit
in frames of a video. Performance is measured in terms of
mean average precision as in the standard PASCAL VOC
object detection task and what we used for the NYUD2 ex-
periments in Section 4.1.

A popular technique for getting better performance at
such tasks on video data is to additionally use features com-
puted on the optical ﬂow between the current frame and the
next frame [43, 14], and we use our supervision transfer
scheme to learn features for optical ﬂow images in this con-
text.

Detection model For JHMDB we use the experimental
setup from Gkioxari and Malik [14] and study the 21 class
task. Here again, Gkioxari and Malik build off of R-CNN
and we ﬁrst adapt their system to use Fast R-CNN, and ob-
serve similar boosts in performance as for NYUD2 when go-
ing from R-CNN to Fast R-CNN framework (Table 7, full ta-
ble with per class performance is in the supplementary ma-
terial). We denote this model as [14]+[12]. We attribute this
large difference in performance to a) bounding box regres-
sion and b) number of iterations used for training.

Supervision transfer performance We use the videos
from UCF 101 dataset [47] for our pre-training. Note that
we do not use any labels provided with the UCF 101 dataset,
and simply use the videos as a source of paired RGB and
ﬂow images. We take 5 frames from each of the 9K videos
in the train1 set. We report performance on JHMDB test set
in Table 7. Note that JHMDB has 3 splits and as in past
work, we report the AP averaged across these 3 splits.

We report performance for three different schemes for
initializing the ﬂow model: a) Random Init (No PreTr)
when the ﬂow network is initialized randomly using the
weight initialization scheme used for training a RGB model
on ImageNet, b) Supervised Pre-training ([14]+[12] Sup
PreTr) on ﬂow images from UCF 101 for the task of
video classiﬁcation starting from RGB weights as done by
Gkioxari and Malik [14] and c) supervision transfer (Our
Sup Transfer) from an RGB model to train optical ﬂow
model as per our proposed method. We see that our scheme
for supervision transfer improves performance from 31.7%
achieved when using random initialization to 35.7%, which

8

is more than half way towards what fully supervised pre-
training can achieve (38.4%), thereby illustrating the efﬁ-
cacy of our adaptation scheme.

Conclusion We have presented an algorithm for trans-
fer of learned representations from a well labeled modal-
ity to new unlabeled modalities using unlabeled paired
images from the two modalities.
This enables us to
learn rich representations on unlabeled modalities and ob-
tain large boosts in performance. We believe the ad-
vances presented in this paper will allow us to effectively
use new modalities for obtaining better performance on
standard vision tasks. Code, data and pretrained mod-
els are available at https://github.com/s-gupta/
fast-rcnn/tree/distillation.

Acknowledgments:
The authors would like to thank
Georgia Gkioxari for sharing her wisdom and experimental
setup for the UCF 101 and JHMDB datasets. This work was
supported by ONR SMARTS MURI N00014-09-1-1051,
a Berkeley Graduate Fellowship, a Google Fellowship in
Computer Vision and a NSF Graduate Research Fellowship.
We gratefully acknowledge NVIDIA corporation for the do-
nation of Tesla and Titan GPUs used for this research.

References

[1] Y. Aytar and A. Zisserman. Tabula rasa: Model transfer for

object category detection. In ICCV, 2011. 2

[2] C. Bucilua, R. Caruana, and A. Niculescu-Mizil. Model

compression. In ACM SIGKDD, 2006. 2

[3] K. Chatﬁeld, K. Simonyan, A. Vedaldi, and A. Zisserman.
Return of the devil in the details: Delving deep into convo-
lutional nets. In BMVC, 2014. 1

[4] S. Chopra, S. Balakrishnan, and R. Gopalan. DLID: Deep
learning for domain adaptation by interpolating between do-
mains. In ICML Workshop on Challenges in Representation
Learning, 2013. 2

[5] C. M. Christoudias, R. Urtasun, M. Salzmann, and T. Dar-
rell. Learning to recognize objects from unseen modalities.
In Computer Vision–ECCV 2010, pages 677–691. Springer,
2010. 2

[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. ImageNet: A large-scale hierarchical image database.
In CVPR, 2009. 1, 2, 3, 5

[7] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang,
E. Tzeng, and T. Darrell. Decaf: A deep convolutional acti-
vation feature for generic visual recognition. In ICML, 2014.
2, 3

[8] L. Duan, D. Xu, and I. W. Tsang. Learning with augmented
In ICML,

features for heterogeneous domain adaptation.
2012. 2

[9] A. Frome, G. S. Corrado, J. Shlens, S. Bengio, J. Dean,
T. Mikolov, et al. Devise: A deep visual-semantic embed-
ding model. In NIPS, 2013. 2

[10] Y. Ganin and V. Lempitsky. Unsupervised Domain Adapta-
tion by Backpropagation. ArXiv e-prints, Sept. 2014. 2

[11] M. Ghifary, W. B. Kleijn, and M. Zhang.

Domain
adaptive neural networks for object recognition. CoRR,
abs/1409.6041, 2014. 2

[12] R. Girshick. Fast R-CNN. In ICCV, 2015. 2, 4, 7, 8, 14
[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 1, 2, 4

[14] G. Gkioxari and J. Malik. Finding action tubes. In CVPR,

2015. 3, 5, 8, 14

[15] B. Gong, Y. Shi, F. Sha, and K. Grauman. Geodesic ﬂow
kernel for unsupervised domain adaptation. In CVPR, 2012.
2

[16] S. Gupta, P. Arbel´aez, R. Girshick, and J. Malik. Aligning
3D models to RGB-D images of cluttered scenes. In CVPR,
2015. 4, 6, 8, 13, 14

[17] S. Gupta, R. Girshick, P. Arbel´aez, and J. Malik. Learning
rich features from RGB-D images for object detection and
segmentation. In ECCV, 2014. 3, 4, 5, 6, 7, 8, 14

[18] B. Hariharan. Beyond Bounding Boxes: Precise Localiza-
tion of Objects in Images. PhD thesis, EECS Department,
University of California, Berkeley, Aug 2015. 6

[19] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul-
taneous detection and segmentation. In ECCV, 2014. 1, 2,
6

[20] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Hyper-
columns for object segmentation and ﬁne-grained localiza-
tion. In CVPR, 2015. 6, 13

[21] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling
in deep convolutional networks for visual recognition.
In
ECCV, 2014. 7

[22] G. E. Hinton, O. Vinyals, and J. Dean. Distilling the knowl-
In NIPS 2014 Deep Learning

edge in a neural network.
Workshop, 2014. 2, 3

[23] J. Hoffman, S. Guadarrama, E. Tzeng, R. Hu, J. Donahue,
R. Girshick, T. Darrell, and K. Saenko. LSDA: Large scale
detection through adaptation. In NIPS, 2014. 2

[24] J. Hoffman, E. Rodner, J. Donahue, K. Saenko, and T. Dar-
rell. Efﬁcient learning of domain-invariant image represen-
tations. In ICLR, 2013. 2

[25] J. Hoffman, E. Tzeng, J. Donahue, , Y. Jia, K. Saenko, and
T. Darrell. One-shot learning of supervised deep convolu-
tional models. In arXiv 1312.6204; presented at ICLR Work-
shop, 2014. 2

[26] A. Janoch, S. Karayev, Y. Jia, J. T. Barron, M. Fritz,
K. Saenko, and T. Darrell. A category-level 3D object
In Consumer Depth
dataset: Putting the kinect to work.
Cameras for Computer Vision. 2013. 1

[27] H. Jhuang, J. Gall, S. Zufﬁ, C. Schmid, and M. J. Black.
Towards understanding action recognition. In ICCV, 2013. 2
Caffe: An open source convolutional archi-
http://caffe.

[28] Y. Jia.

tecture for fast feature embedding.
berkeleyvision.org/, 2013. 3

[29] D. G. Jones and J. Malik. Determining three-dimensional
shape from orientation and spatial frequency disparities. In
ECCV, 1992. 6

[30] J. J. Koenderink and A. J. van Doorn. Representation of lo-
cal geometry in the visual system. Biological cybernetics,
55(6):367–375, 1987. 6

9

[31] A. Krizhevsky, I. Sutskever, and G. Hinton. ImageNet clas-
siﬁcation with deep convolutional neural networks. In NIPS,
2012. 1, 2, 3, 5

[32] B. Kulis, K. Saenko, and T. Darrell. What you saw is not
what you get: Domain adaptation using asymmetric kernel
transforms. In CVPR, 2011. 2

[33] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1989. 3

[34] K. Lenc and A. Vedaldi. Understanding image representa-
tions by measuring their equivariance and equivalence.
In
CVPR, 2015. 3

[35] T. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft COCO: Com-
mon objects in context. In ECCV, 2014. 7

[36] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional

networks for semantic segmentation. In CVPR, 2015. 1, 6

[37] M. Long and J. Wang. Learning transferable features with
deep adaptation networks. CoRR, abs/1502.02791, 2015. 2
[38] J. Ngiam, A. Khosla, M. Kim, J. Nam, H. Lee, and A. Y.
Ng. Multimodal deep learning. In Proceedings of the 28th
International Conference on Machine Learning (ICML-11),
pages 689–696, 2011. 2

[39] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta,
and Y. Bengio. Fitnets: Hints for thin deep nets. arXiv
preprint arXiv:1412.6550, 2014. 2

[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus,
and Y. LeCun. Overfeat: Integrated recognition, localization

and detection using convolutional networks. In ICLR, 2014.
2

[41] N. Silberman, D. Hoiem, P. Kohli, and R. Fergus.

Indoor
segmentation and support inference from RGBD images. In
ECCV, 2012. 4

[42] N. Silberman, D. Sontag, and R. Fergus. Instance segmenta-
tion of indoor scenes using a coverage loss. In ECCV, 2014.
1

[43] K. Simonyan and A. Zisserman. Two-stream convolutional
networks for action recognition in videos. In NIPS, 2014. 8
[44] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1, 3

[45] R. Socher, M. Ganjoo, C. D. Manning, and A. Ng. Zero-shot
learning through cross-modal transfer. In NIPS, 2013. 2
[46] S. Song, S. P. Lichtenberg, and J. Xiao. Sun rgb-d: A rgb-d
scene understanding benchmark suite. In CVPR, 2015. 1
[47] K. Soomro, A. R. Zamir, and M. Shah. Ucf101: A dataset of
101 human action classes from videos in the wild. In CRCV-
TR-12-01, 2012. 8

[48] N. Srivastava and R. Salakhutdinov. Multimodal learning

with deep boltzmann machines. JMRL, 2014. 2

[49] S. Tulsiani and J. Malik. Viewpoints and keypoints.

In

CVPR, 2015. 1

[50] E. Tzeng, J. Hoffman, N. Zhang, K. Saenko, and T. Darrell.
Deep domain confusion: Maximizing for domain invariance.
CoRR, abs/1412.3474, 2014. 2

[51] J. Weber and J. Malik. Robust computation of optical ﬂow
in a multi-scale differential framework. IJCV, 1995. 6

10

A. Supplementary Material

B. Document Changelog

1. Per category average precision: We report per cate-
gory numbers for summary tables on test sets in the main
paper.

2. Sample Detection and SDS output: We show sam-
ple detections and SDS output for the categories we
study. We sample 18 detections uniformly from the top k
(= 0.75× number of instances) detections for each cat-
egory: bed (Figure 3), chair (Figure 4), sofa (Figure 5),
toilet (Figure 6), table (Figure 7).

v1 Initial version

v2 Major changes: additional discussion of multi-modal
literature, visualization of neural activations in Figure 2(g-
i), additional experiments about quality of intermediate lay-
ers, performance as a function of transfer point, utility of
HHA embedding over disparity images, zero-shot detection
on depth images. Minor edits all over the text.

11

Figure 3: Sample detections and segmentation masks for bed on NYUD2 test set.

Figure 4: Sample detections and segmentation masks for chair on NYUD2 test set.

Figure 5: Sample detections and segmentation masks for sofa on NYUD2 test set.

12

Figure 6: Sample detections and segmentation masks for toilet on NYUD2 test set.

Figure 7: Sample detections and segmentation masks for table on NYUD2 test set.

d
o
h
t
e
m

y
t
i
l
a
d
o
m

B
G
R

.

h
c
r
A

.

h
c
r
A
D

c
i
r
t
e
m

[20]

RGB

AlexNet

AP r 0.5
RGB + D AlexNet AlexNet AP r 0.5
Gupta et al. [16]
Our (supervision transfer) RGB + D AlexNet AlexNet AP r 0.5
AP r 0.5
AlexNet AP r 0.5

Our (supervision transfer) RGB + D

VGG
VGG

RGB

[20]

-

-

[20]

RGB

AlexNet

AP r 0.7
RGB + D AlexNet AlexNet AP r 0.7
Gupta et al. [16]
Our (supervision transfer) RGB + D AlexNet AlexNet AP r 0.7
AP r 0.7
AlexNet AP r 0.7

Our (supervision transfer) RGB + D

VGG
VGG

RGB

[20]

-

-

b
u
t

h
t
a
b

8.9

42.0

31.5

17.5

42.2

5.9

13.8

13.3

6.6

13.0

d
e
b

45.2

65.1

68.7

59.5

69.5

28.6

46.0

50.6

35.7

56.1

f
l
e
h
s

k
o
o
b

12.6

12.7

22.3

10.7

18.3

2.8

2.4

5.3

0.4

6.9

r
i
a
h
c

20.6

42.0

39.6

32.7

45.1

6.6

17.3

15.9

9.4

r
e
t
n
u
o
c

24.3

42.1

43.3

28.3

41.9

6.0

15.0

14.2

7.2

17.9

14.8

x
o
b

1.4

5.1

4.0

2.6

5.3

0.6

3.0

1.3

1.6

2.5

k
s
e
d

r
o
o
d

4.2

9.5

11.2

5.8

10.7

1.2

2.6

2.6

1.1

4.3

19.3

20.5

25.1

22.4

29.1

9.6

9.9

15.6

16.5

18.6

r
e
s
s
e
r
d

27.2

38.0

52.1

42.2

55.2

16.8

25.8

50.0

29.3

51.7

e
g
a
b
r
a
g

n
i
b

20.1

50.3

42.5

32.9

48.1

15.8

45.4

34.0

29.1

36.2

p
m
a
l

26.2

32.8

45.0

34.3

45.1

8.4

6.9

14.0

11.3

16.2

r
o
t
i
n
o
m

39.2

54.5

61.8

54.5

62.3

16.1

37.5

36.4

33.3

42.2

t
h
g
i
n

d
n
a
t
s

21.3

38.2

47.5

26.7

46.9

17.1

24.3

33.8

19.5

32.3

w
o
l
l
i
p

23.7

42.0

41.3

28.9

42.0

15.5

25.5

26.3

19.9

26.9

k
n
i
s

a
f
o
s

27.6

39.4

48.5

36.1

46.0

11.9

19.6

20.8

17.2

20.4

25.2

46.6

49.7

38.3

54.8

12.9

27.9

27.7

17.9

32.5

e
l
b
a
t

8.2

14.8

18.1

9.6

17.2

1.8

7.6

6.9

1.7

6.3

n
o
i
s
i
v
e
l
e
t

35.3

48.0

49.5

44.1

49.0

33.7

44.9

44.9

35.7

44.4

t
e
l
i
o
t

54.3

68.4

68.4

62.5

71.1

44.0

38.7

68.4

43.4

68.7

n
a
e
m

23.4

37.5

40.5

31.0

42.1

13.4

21.8

25.4

17.7

26.9

Table 8: Region Detection AP r (%) on NYUD2 test set: We report per class AP r for the SDS experiments in Table 3 in the main paper.

13

Fast R-CNN [12]
Fast R-CNN [12]

Gupta et al. [17]

Gupta et al. [16]

method

modality RGB Arch. D Arch. b

b
u
t

h
t
a

d
e
b

f
l
e
h
s

k
o
o
b

x
o
b

r
i
a
h
c

r
e
t
n
u
o
c

k
s
e
d

r
o
o
d

r
e
s
s
e
r
d

e
g
a
b
r
a
g

n
i
b

p
m
a
l

r
o
t
i
n
o
m

t
h
g
i
n

d
n
a
t
s

w
o
l
l
i
p

k
n
i
s

a
f
o
s

e
l
b
a
t

t
e
l
i
o
t

n
a
e
m

n
o
i
s
i
v

e
l
e
t

RGB
RGB

AlexNet
VGG

-

-

7.9

51.2 37.0

1.5

31.3 35.4

9.4

22.4 28.9 19.3 31.0 35.9 24.1 26.4 24.6 39.7 16.6 32.9 53.5 27.8

37.4 69.1 47.0

2.9 44.4 48.6 11.5 28.7 43.1 33.6 32.9 50.9 32.6 34.4 39.0 50.3 24.5 44.1 61.5 38.8

RGB + D AlexNet AlexNet 36.4 70.8 35.1
RGB + D AlexNet AlexNet 39.4 73.6 38.4

3.6

47.3 46.8 14.9 23.3 38.6 43.9 37.6 52.7 40.7 42.4 43.5 51.6 22.0 38.0 47.7 38.8

5.9 50.1 47.3 14.6 24.4 42.9 51.5 36.2 52.1 41.5 42.9 42.6 54.6 25.4 48.6 50.2 41.2

Gupta et al. [17] + Fast R-CNN RGB + D AlexNet AlexNet 37.1 78.3 48.5 3.3

45.3 54.6 21.9 28.5 48.6 41.9 42.5 60.6 49.2 43.7 40.2 62.1 29.2 44.3 63.6 44.4

Our (supervision transfer)

RGB + D AlexNet AlexNet 45.6 78.7 48.5

4.3

50.5 57.8 21.4 29.6 54.0 41.6 45.4 61.2 57.9 47.3 48.9 63.2 29.5 50.0 60.1 47.1

Gupta et al. [17] + Fast R-CNN RGB + D
RGB + D

Our (supervision transfer)

VGG
VGG

AlexNet 47.2 80.4 52.8 4.2
AlexNet 50.6 81.0 52.6

49.7 53.0 22.4 33.7 52.1 44.4 39.2 64.6 47.5 45.1 42.1 63.2 31.4 42.1 63.0 46.2

5.4 53.0 56.1 20.9 34.6 57.9 46.2 42.5 62.9 54.7 49.1 50.0 65.9 31.9 50.1 68.0 49.1

Gupta et al. [17] + Fast R-CNN

Our (supervision transfer)

D
D

-

-

AlexNet 28.8 79.1 30.3
AlexNet 31.2 80.7 38.6

1.5

42.6 42.7 17.2 13.4 31.6 23.7 29.9 40.2 36.2 40.5 23.4 59.9 26.4 24.9 58.3 34.2

2.5 52.2 52.2 17.2 18.2 50.8 35.1 37.4 51.3 50.5 43.4 41.0 63.5 29.3 37.4 59.8 41.7

Table 9: Object Detection AP(%) on NYUD2 test set: We compare our performance against several state-of-the-art methods. RGB Arch.
and D Arch. refers to the CNN architecture used by the detector. We see when using just the depth image, our method is able to improve
performance from 34.2% to 41.7%. When used in addition to features from the RGB image, our learned features improve performance
from 44.4% to 47.1% (when using AlexNet RGB features) and from 46.2% to 49.1% (when using VGG RGB features) over past methods
for learning features from depth images. Analogous to summary Table 6 in the main paper.

r
i
a
h

h
s
u
r
Supervision modality b

h
c
t
a
c

p
a
l
c

b
m

i
l
c

s
r
i
a
t
s

f
l
o
g

p
m
u
j

k
c
i
p

r
u
o
p

p
u
l
l
u
p

h
s
u
p

n
u
r

l
l
a
b
t
o
o
h
s

w
o
b
t
o
o
h
s

n
u
g
t
o
o
h
s

d
n
a
t
s

t
i
s

l
l
a
b
e
s
a
b

g
n
i
w
s

w
o
r
h
t

k
l
a
w

e
v
a
w

n
a
e
m

method

Gkioxari et al. [14]

Gkioxari et al. [14]+Fast R-CNN

RGB 47.2 35.2 30.1 23.9 84.4

2.2

10.6 20.7 79.7 78.7 25.2 14.4

8.7

45.3 34.2 11.7 13.3 39.0 19.1 23.9 23.9 32.0

RGB 55.8 25.5 25.1 24.0 77.5

1.9

5.3

21.4 68.6 71.0 15.4

6.3

4.6

41.1 28.0

9.4

8.2

19.9 17.8 29.2 11.5 27.0

Gkioxari et al. [14]

Sup. PreTr.

32.3

5.0

35.6 30.1 58.0

7.8

2.6

16.4 55.0 72.3

8.5

6.1

3.9

47.8

7.3

24.9 26.3 36.3

4.5

22.1

7.6

24.3

Gkioxari et al. [14]+Fast R-CNN Sup. PreTr.

54.9 17.0 52.5 56.5 81.2 15.0 10.9 28.9 72.7 86.6 20.4 17.5 10.2 61.9 25.5 31.4 42.4 53.8 10.9 38.6 17.3 38.4

no init

No PreTr.

44.3 11.0 42.8 38.7 76.1 10.6

23.1 62.1 84.0 15.4

9.6

60.0 22.8 29.6 26.8 43.5 10.7 30.8

9.8

31.7

Our (supervision transfer)

Sup. Transfer

54.6 17.7 45.1 54.9 80.3 14.6

28.2 69.3 84.8 19.9 15.6

49.6 29.4 29.5 28.4 49.5 11.6 36.3 13.0 35.7

ﬂow

ﬂow

ﬂow

ﬂow

6.8

7.2

Table 10: Action Detection AP(%) on the JHMDB test set: We report action detection performance on the test set of JHMDB using
RGB or ﬂow images. Bottom part of the table, compares our method supervision transfer against the baseline of random initialization,
and the ceiling using fully supervised pre-training method from [14]. Our method reaches more than half the way towards fully supervised
pre-training. Analogous to Table 7 in the main paper.

l
l
a
b

k
c
i
k

6.6

9.7

14

