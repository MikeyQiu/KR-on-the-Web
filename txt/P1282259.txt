FuseMODNet: Real-Time Camera and LiDAR based
Moving Object Detection for robust low-light Autonomous Driving

Hazem Rashed1, Mohamed Ramzy2, Victor Vaquero3, Ahmad El Sallab1,
Ganesh Sistu4 and Senthil Yogamani4
1Valeo R&D, Egypt

2 Cairo University

3Institut de Rob`otica i Inform`atica Industrial, (CSIC-UPC), Spain

4Valeo Vision Systems, Ireland

firstname.lastname@valeo.com, mohamed.ibrahim98@eng-st.cu.edu.eg, vvaquero@iri.upc.edu

9
1
0
2
 
v
o
N
 
1
2
 
 
]

V
C
.
s
c
[
 
 
3
v
5
9
3
5
0
.
0
1
9
1
:
v
i
X
r
a

Abstract

Moving object detection is a critical task for autonomous
vehicles. As dynamic objects represent higher collision
risk than static ones, our own ego-trajectories have to be
planned attending to the future states of the moving ele-
ments of the scene. Motion can be perceived using temporal
information such as optical ﬂow. Conventional optical ﬂow
computation is based on camera sensors only, which makes
it prone to failure in conditions with low illumination. On
the other hand, LiDAR sensors are independent of illumi-
nation, as they measure the time-of-ﬂight of their own emit-
ted lasers. In this work, we propose a robust and real-time
CNN architecture for Moving Object Detection (MOD) un-
der low-light conditions by capturing motion information
from both camera and LiDAR sensors. We demonstrate
the impact of our algorithm on KITTI dataset where we
simulate a low-light environment creating a novel dataset
“Dark-KITTI”. We obtain a 10.1% relative improvement on
Dark-KITTI, and a 4.25% improvement on standard KITTI
relative to our baselines. The proposed algorithm runs at 18
fps on a standard desktop GPU using 256 × 1224 resolution
images.

1. Introduction

Autonomous Driving (AD) scenarios are considered
very complex environments as they are highly dynamic con-
taining multiple object classes that move at different speeds
in diverse directions [12, 11]. For an autonomous vehi-
cle, it is critical to fully understand the motion model of
each of the surrounding elements as well as to be able to
plan the ego-trajectories based on the future states of these
objects, therefore avoiding collision risks. There are two
types of motion in a typical autonomous driving scene, i.e.
the one of the surrounding obstacles and the motion of the
ego-vehicle. Due to the movement of the camera reference

Figure 1: Proposed Network Architecture

itself, it is challenging to successfully classify the surround-
ing objects as moving or static, because even static objects
will be perceived as moving. Motion segmentation implies
two tasks that are performed jointly. The ﬁrst one focuses
on object selection, in which objects of speciﬁc interesting
classes are highlighted such as pedestrians or vehicles. The
second one focuses on motion classiﬁcation, in which a bi-
nary classiﬁer predicts whether the observed object is dy-
namic or static.

Modern vehicles are equipped with various sensors to
be able to fully perceive the surrounding environment, each
one having its advantages and disadvantages. For instance,
ultrasonic sensors provide good performance of depth mea-
surement for close obstacles but they lack semantic infor-
mation and perform poorly for far objects. Camera sen-
sors instead, provide rich color information from which
scene semantics can be extracted however, they lack of
depth information and rely on scene illumination, being the
performance of any camera-based perception tasks highly
degraded in bad illumination conditions such as at night

scenes. On the other hand, LiDAR sensors provide accu-
rate depth and geometric information of the environment,
although they generate big and sparse point clouds that may
suppose a computational bottleneck. Nevertheless, unlike
camera sensors, LiDARs rely on the Time of Flight (ToF)
concept and therefore they can perform much better under
low illumination or light changing conditions.

Data fusion has been proven to provide improved perfor-
mance in various tasks such as [27, 32, 14]. In this work,
we focus on fusing Camera and LiDAR information for the
purpose of moving objects detection. Our proposed archi-
tecture attempts to capture rich motion information from
both camera and LiDAR sensors which is combined with
scene semantics from the camera images. To summarize,
the contributions of this work include:

• We extend the publicly available KittiMoSeg [32]
dataset almost x10 times, expanding from 1300 frames
only to a new amount of 12919 images. The dataset
is available at https://sites.google.com/
view/fusemodnet

• We create the new Dark-KITTI dataset to simulate low

illumination autonomous driving environments.

• We propose a novel CNN architecture for MOD fusing
both RGB and LiDAR information. Our implementa-
tion performs on real-time, and therefore is suitable for
time-critical applications such as autonomous driving.
for
maximum performance as well as study motion
representations for both RGB frames and LiDAR
points clouds.

• We analyze different

fusion methodologies

The rest of the paper is organized as follows: a review of
the related work is presented in Section 2. Our methodol-
ogy including the dataset preparation and the used network
architectures is detailed in Section 3. Experimental setup
and ﬁnal results are illustrated in Section 4. Finally, Section
5 concludes the paper.

2. Related Work

Motion Segmentation using Camera sensor: Classical
approaches have been proposed for moving objects detec-
tion based on geometrical understanding of the scene such
as [25] which was used to estimate objects motion masks.
Wehrwein et al.
[38] introduced assumptions about the
camera motion model to model the background motion in
terms of homography. This approach cannot be used in
autonomous driving application due to the errors arising
from the limited assumptions such as camera translations.
Classical methods provide poor performance compared to
deep learning methods in addition to high complexity due
to complicated pipelines used. For instance, Menze et al.
[25] running time is 50 minutes per frame which makes it
impossible for usage in a real-time application such as the

autonomous driving. Deep learning algorithms are becom-
ing successful beyond object detection [30] for applications
like visual SLAM [26], depth estimation [17], soiling de-
tection [33] but it is still relatively less explored for MOD
task.

Jain et. al.[14] proposed a method to exploit optical ﬂow
for generic foreground segmentation. This work is designed
for generic object segmentation and does not focus on clas-
siﬁcations of objects as Moving or Static. Drayer et. al.[6]
proposed a video segmentation algorithm that is based on
R-CNN detection. The approach is not practical as well
for autonomous driving application due to its complexity
where it runs on image in 8 seconds. Siam et al. [32, 29]
explored motion segmentation using deep network architec-
tures, however these networks rely only on camera RGB
images which is prone to failure in low illumination condi-
tions. FisheyeMODNet [39] extends MODNet for ﬁsheye
camera images using WoodScape dataset [40].

Motion Segmentation using LiDAR sensor: Most of
LiDAR-based methods that have been used for motion seg-
mentation problem were based on clustering methods such
as [4] which predicts the points motion by methods such as
RANSAC, and then clustering takes place for object-level
perception. Vaquero et al. [34] initially clustered vehicles
points and then performed motion segmentation on the ob-
jects after matching the objects through sequential frames.
Deep Learning has been utilized in various methods for ob-
ject detection on point clouds. In [18] 3D convolution is
used over the point cloud to obtain the vehicles bounding
boxes. Other methods project the 3D points on 2D images
to make use of 2D convolutions on the image 2D space [19].
None of these methods are able to segment moving objects
from static ones. Recent work [5] learns movable and non-
movable objects from two input lidar scans. This method
uses implicit learning for motion information through two
sequential lidar scans and does not utilize the color informa-
tion from camera sensor, which motivates our work towards
fusion of both camera and LiDAR sensors.

Fusion: Fusion has been explored through classical and
deep learning methods, and it has proven to be very im-
portant for many tasks. The most common way for mul-
timodal fusion using classical approaches is Kalman ﬁlter
[15] and its variants. CNNs have been exploited as well for
multimodal fusion where they generally provide improved
performance over Kalman ﬁlters at the cost of complexity.
Deep fusion has been explored for the task of semantic seg-
mentation [27, 28, 9] using fusion between RGB images and
optical ﬂow and depth. Several methods have been visited
to fuse camera and LiDAR sensors for various tasks such
as [24] which implemented an algorithm for 3D semantic
segmentation. Pedestrian detection has been improved sig-
niﬁcantly using fusion between RGB images and infrared
maps [16, 20, 37]. Modern vehicles are usually equipped

with various sensors to perceive the environment which we
propose to leverage using a deep fusion network.

3. Methodology

In this section we discuss dataset preparation, and the

proposed architecture for our experiments.

3.1. Dataset Preparation

Our proposed method fuses color images with motion
signals obtained from different sensors to generate motion
masks as output.
In this section we describe the inputs
preparation and outputs of our architecture.

Annotations Generation: In order to train our deep model
for maximum generalization on the motion segmentation
task, we need motion masks annotations from a large
There is huge limitation in publicly
driving dataset.
available datasets regarding moving objects detection.
[32] provides 1300 images only with weak
Siam et al.
annotation for MOD task. Valada et al.
[36] provides
255 annotated frames only on KITTI dataset, and 3475
annotated frames on Cityscapes [3] dataset. Cityscapes
does not have LiDAR point clouds, and therefore will not
be helpful for our low-light purposes. Behley et al.
[1]
provides MOD annotations for 3D point clouds only, but
not for dense pixels. We therefore build our own Motion
Object Detection dataset. For that, we adopt the method
in [32] to generate motion masks from KITTI in order
to extend the KittiMoSeg dataset.
Initially, we project
the existing 3D bounding boxes from 3D LiDAR frame
to 2D pixel coordinate system, as use the given tracking
information to compute velocity vectors for each of the
surrounding objects in 3D space. In addition, we use GPS
readings to compute the ego-vehicle velocity vector for the
camera sensor where the difference between both velocities
is calculated and compared to a threshold for classifying
the objects as moving or static. Finally, MaskRCNN [10]
segmentation masks are used for reﬁning the obtained
output masks. We applied this approach on KITTI-raw
frames which have corresponding LiDAR points clouds
and tracklets information, obtaining a dataset with a total
number of 12919 frames which we split into 80% for
training and 20% for testing.

Color Signal: Our objective is to develop a complete
system for moving object detection to work robustly under
any illumination condition. For that purpose we require
to evaluate our algorithm, in addition to conventional AD
scenes, into other more challenging low illumination envi-
ronments where camera-only based systems would fail due
to the lack of textured information. As far as we know, there
exists no dataset providing low-illumination or night scenes
in addition to the information needed to generate our MOD

Figure 2: An example of our different night generation
methods, Top to Bottom: Input KITTI Image, Neural Style
Transfer [21], CycleGAN[43], UNIT[22]

annotation. For that reason, we make use of the Image-to-
Image translation technique of [22] to generate dark images
from the KITTI dataset that mimic night AD scenes. To
be able to generate dark realistic frames, we trained UNIT
[22] network using 2000 KITTI[8] images and 2000 night
images from [41]. Figure 2 shows a sample of our newly
generated dataset which we call Dark-KITTI. It comprises
of 12919 night images corresponding to KITTI-raw frames.
Other approaches such as [44, 21] have been attempted
to simulate Dark-KITTI images, however we found [22]
to be more realistic as illustrated in the ﬁnal row of Figure 2.

Motion Signal: The key input for moving object detection
that we give to our system is the motion information ob-
tained from the scene.
In order to build an illumination-
independent system, we intend to perceive motion from
both camera and LiDAR sensors. Motion can be either im-
plicitly learned from temporally sequential frames, or pro-
vided explicitly to the system through an input motion map,
as for example optical ﬂow maps. For obtaining motion
from LiDAR information, we leverage a recent approach
[35] that learns to model optical ﬂow maps from LiDAR
point clouds. Using this approach, we have the advantage
of understanding motion of the surrounding scene even in
In
darkness because LiDAR is illumination independent.
addition to these optical ﬂow maps from LiDAR which
we term as “lidarFlow”, we generate image-based optical
ﬂow using the FlowNet [13] algorithm over RGB images
which we term as “rgbFlow”. There is a signiﬁcant degrada-
tion on rgbFlow when it is generated from the Dark-KITTI
dataset compared to standard KITTI frames, which is ex-

pected given that rgbFlow is illumination-dependent.

In our experiments, we prove that both lidarFlow and rg-
bFlow are complementary to each other and that the inclu-
sion of LiDAR-based motion signals signiﬁcantly improve
MOD results. In order to align our images with the output
from [35], we crop the upper part of the dataset frames to
be 256x1224 which has no impact on MOD because the
moving objects are in the lower part of the image. Fig-
ure 3 shows a sample of our generated Dark-KITTI dataset
along with the corresponding optical ﬂow maps generated
from [13, 35]. It can be observed that RgbFlow using high-
illumination images during day provide high intensity mo-
tion vectors. However, there exists some distortions such as
the ones due to shadow on the ground as illustrated on the
3rd row in Figure 3, where shadow pixels are perceived as
moving pixels and also combined with the moving pixels
from the cars. For low-illumination rgbFlow in the fourth
row, it can be appreciated that it is hard for image-based
optical ﬂow algorithms to compute motion vectors in bad
lighting conditions, obtaining more distortions in the output
ﬂow map. On the other hand, lidarFlow in the ﬁnal row pro-
vides improved optical ﬂow in such challenging conditions
where there are less distortions than rgbFlow at night, and
no shadow-based distortion because LiDAR does not cap-
ture color textures. Yet, due to the sparsity of the LiDAR
point clouds which increases with further objects, motion
of far objects is modelled with difﬁculty compared to ﬂow
maps from dense RGB images.

3.2. Network Architecture

In this section, we detail our baseline architectures, and

the different implemented fusion approaches.

Baseline Architecture: We set our baseline based on
[7], which presents an encoder-decoder schema. Our en-
coder is responsible of extracting features before the upsam-
pling phase done by the decoder and is based on [42], which
uses point-wise group convolutions and channel shufﬂing.
This in turn reduces computation cost at a high accuracy
level which is perfect for a real-time application such as
needed on autonomous driving systems. Our decoder is
based on [23] which is composed of three deconvolution
layers that provide the ﬁnal output image size. This ap-
proach has the advantage of low complexity as well as pro-
vides a lightweight network architecture able to ﬁt on au-
tonomous driving embedded platforms. Detailed analysis of
efﬁcient design techniques for segmentation is discussed in
[31, 2]. Two classes are used to train the network, i.e, Mov-
ing and Non-Moving. In addition to the static objects, back-
ground pixels are considered as Non-Moving, therefore the
number of static pixels exceeds the number of moving pix-
els. Weighted cross-entropy is used to overcome this class
imbalance problem. We make use of this architecture to

Figure 3: Sample from our Dark-KITTI dataset and the cor-
responding optical ﬂow images. Top to Bottom: KITTI
image; Dark-KITTI image; rgbFlow from KITTI image us-
ing FlowNet[13]; degraded rgbFlow on Dark-KITTI image;
lidarFlow[35] obtained just using LiDAR information.

evaluate a baseline performance using RGB images only.

Early Fusion: Early-Fusion is referred to as data-fusion
where fusion is done on the data level before any feature
extraction. The same baseline network architecture is uti-
lized in this case, however the input data is concatenated at
the very beginning. This architecture has the advantage of
low-complexity compared to Mid-Fusion approach, as the
number of weights is kept similar to the baseline architec-
ture being the main difference on the input layer only.

Mid Fusion: Mid-Fusion refers to feature-level-fusion
where features are extracted from each input separately us-
ing an encoder that is exclusive to each input. Fusion is
done by concatenating feature maps that are generated from
each stream before upsampling in the decoder. This archi-
tecture provides the best fusion performance, however it has
higher cost than early-fusion as the number of weights in the
encoder part is doubled.

Hybrid Fusion: This architecture makes use of both
early and mid-Fusion. We use it in various experiments as
illustrated in Table 1, in an attempt to maximize the beneﬁt
of the input modalities while avoiding too much complex-
ity for the model at hand. For instance, we fuse 4 inputs,
i.e, RGB, rgbFlow, lidarFlow, LiDAR depth through early-
fusion in one branch between RGB and rgbFlow, and early-
fusion in another branch for LiDAR depth and lidarFlow.
The output of both branches is fused through Mid-Fusion.

Figure 4: Top: Baseline architecture based on [7]. Bottom: Proposed fusion architecture.

Proposed Architecture: We aim at ﬁnding the best
schema to combine RGB images, rgbFlow and lidarFlow.
For that purpose, we construct a three-stream mid-Fusion
network which has three encoders for RGB, rgbFlow and
lidarFlow separately. We evaluate this approach on KITTI
and Dark-KITTI datasets, where results demonstrate the im-
proved performance on both datasets as detailed in section
4.2.

4. Experiments

4.1. Experimental Setup

In all our experiments, ShufﬂeSeg [7] model was used
with pretrained ShufﬂeNet encoder on Cityscapes dataset
for Semantic Segmentation. For the decoder part, FCN8s
decoder has been utilized with randomly initialized weights.
L2 regularization with weight decay rate of 5e−4 and Batch

Normalization are incorporated. We trained all our mod-
els End-To-End with weighted binary cross-entropy loss for
200 epochs and batch size 6. Adam optimizer is used with
learning rate of 1e−4. For inputs with number n of channels
lower than 3, we discarded the difference of depth from the
ﬁlters of the ﬁrst convolutional layer. For the rest of inputs,
we increased the depth of the ﬁlters by the ﬁrst n channels
of the single ﬁlter to match the ﬁrst layer with the new input
shape, initializing the corresponding weights randomly.

4.2. Experimental Results

We provide a table of quantitative results for both day
and night images evaluated on KITTI and Dark-KITTI
datasets. Qualitative evaluation on both datasets is illus-
trated in Figure 5.

Table 1 demonstrates our results using mean IoU met-
ric for both moving and background class and IoU for the

moving objects, in addition to class-wise IoU for “Moving”
class. We refer to early-fusion by “x” while “+” denotes
mid-fusion where both of them together imply hybrid fu-
sion. RGB-only experiments serve as a baseline for compar-
ative purpose where we evaluate our network architecture to
segment moving objects using color information only with-
out either explicit or implicit motion signal for the network.
Signiﬁcant improvement for 13% in moving class IoU has
been observed after fusion with optical ﬂow, which is con-
sistent with previous conclusions in [32, 29]. We attempt
to minimize complexity through early-fusion architecture
as we focus on real-time architecture for autonomous driv-
ing. However it is found that early-fusion architecture only
(RGB x rgbFlow) is not capable of extracting the required
features compared to Mid-Fusion which is consistent with
other literature such as [27, 4]. Thus we continue our ex-
periments using Mid or Hybrid fusion. Mid-Fusion exper-
iment with rgbFlow (RGB + rgbFlow) serves as a compar-
ison baseline as well because our motivation is to evaluate
the augmentation of motion information from LiDAR sen-
sor. (RGB + lidarFlow) shows improved performance over
RGB-only, however overall accuracy is still below (RGB +
rgbFlow).

Nevertheless, we argue that both lidarFlow and rgbFlow
are complementary to each other where rgbFlow beneﬁts
from dense color information which is helpful to understand
motion for far objects, however illumination plays a great
role in the quality of optical ﬂow from RGB images. On
the other hand, lidarFlow might not provide the best mo-
tion estimate of far objects due to increased sparsity when
the objects are far away, however, it is illumination inde-
pendent due to relying on TOF concept which is perfect for
low illumination scenes motion estimation. Our approach
is proven experimentally through the (RGB + rgbFlow +
lidarFlow) experiment where we obtain absolute improve-
ment of 4% and relative improvement of 10% in IoU over
(RGB + rgbFlow). We attempt to fuse optical ﬂow informa-
tion before feature extraction through hybrid-fusion (RGB
+ (rgbFlow x lidarFlow)), in addition to experimentation
of leveraging depth points through a two stream approach
(RGB x rgbFlow) + (LiDAR x lidarFlow). LidarFlow aug-
mentation shows improvement in results over the baseline
(RGB + rgbFlow) which proves our approach. However,
our three-stream approach gives the network more ﬂexibil-
ity to combine features from each input for maximum accu-
racy.

Implicit motion learning has been explored in (RGB time
t x RGB time t+1) + (LiDAR depth t x LiDAR depth t+1)
where the network is expected to learn motion implicitly
without optical ﬂow computation. An improvement is ob-
served compared to RGB-only baseline however we obtain
degradation in performance compared to explicit motion
learning, and this is expected because the network learns

Table 1: Quantitative results on KITTI and Dark-KITTI.
“+” refers to Mid-Fusion. “x” refers to Early-Fusion. Both
together refer to Hybrid-Fusion.

Type

mIoU Moving IoU

Dark-KITTI

RGB-only
RGB + rgbFlow
RGB x rgbFlow
RGB + lidarFlow
(RGB time t x RGB time t+1) +
(LiDAR depth t x LiDAR depth t+1)
(RGB x rgbFlow) + (LiDAR depth x
lidarFlow)
RGB + (rgbFlow x lidarFlow)
RGB + rgbFlow + lidarFlow

KITTI

RGB-only
RGB + rgbFlow
RGB + lidarFlow
(RGB time t x RGB time t+1) +
(LiDAR depth t x LiDAR depth t+1)
RGB + (rgbFlow x lidarFlow)
RGB + rgbFlow + lidarFlow

62.6
69.2
61.68
68.7

26.5
39.5
24.86
38.5

66.26

33.83

69.92

40.93

69.8
71.2

65.6
74.24
70.27

40.75
43.5

32.7
49.36
41.64

66.68

34.67

72.21
75.3

45.45
51.46

Table 2: Comparison between the tested architectures for
MOD task. Frame per second (fps) is used as a metric to
evaluate real-time performance. Evaluation is performed on
256x1224 resolution images on Titan X Pascal GPU.

Type

Baseline architecture
Two-Stream Mid-Fusion architecture
Three-Stream proposed Mid-Fusion architecture

fps
40
25
18

to model motion vectors implicitly in addition to its origi-
nal task which is MOD. We evaluate our approach on KITTI
dataset, and we show that lidarFlow augmentation improves
accuracy of moving objects even in high-illumination im-
ages where 2% improvement in IoU is observed compared
to camera-only solution. These results demonstrate that our
approach is beneﬁcial for motion segmentation task regard-
less of illumination parameter which was a drawback in the
previous literature.

Figure 5 demonstrates our results obtained in Table 1.
The ﬁrst column shows results of our algorithm on KITTI
dataset and the second one reports Dark-KITTI results. The
input RGB images are shown in the ﬁrst row. The second
row shows the input optical ﬂow maps of KITTI and Dark-
KITTI. The third row shows lidarFlow map and ground
truth. Fourth row reports results of MOD using only color
information as an input. It is shown that the network only
learned to segment the cars and not the moving cars as
shown in both KITTI and Dark-KITTI results. Some of

(a)

(c)

(e)

(g)

(i)

(k)

(m)

(b)

(d)

(f)

(h)

(j)

(l)

(n)

Figure 5: Qualitative comparison of our algorithm on KITTI and Dark-KITTI datasets. First column shows inputs and results
on KITTI while second shows results on Dark-KITTI. (a),(b) show the input RGB images. (c),(d) show rgbFlow. (e) shows
lidarFlow. (f) shows Ground Truth. (g),(h) show output using RGB-only. (i),(j) show output of (RGB + rgbFlow). (k),(l)
show output of (RGB + lidarFlow). (m),(n) show output of (RGB + rgbFlow + lidarFlow).

the parked cars are not segmented because it might be im-
plicitly learned that cars in that position are not interesting.
However, this is not based on motion information, and this
is expected because there is no motion information given to
the algorithm either explicitly or implicitly.

In Dark-KITTI, only two vehicles are segmented be-
cause of low illumination where it is even hard to segment
them using human eyes. Fusion with optical ﬂow in the
ﬁfth row has improved results signiﬁcantly on both datasets
however, there are too many false positives in Dark-KITTI
dataset as in (h) due to inaccurate optical ﬂow because of
low illumination of the scene. The sixth row shows re-
sults of fusion of color information from camera and mo-
tion information from LiDAR. Results show improved per-
formance over (RGB + rgbFlow) especially on Dark-KITTI
dataset. This is due to illumination independent optical ﬂow
from lidarFlow [35]. However, far objects are still not cap-

tured correctly due to increased sparsity with far objects.
The seventh row demonstrate the results of our proposed ar-
chitecture which combines color information, motion infor-
mation from both camera and LiDAR sensors. Results show
the beneﬁt of fusion where the network was able to max-
imize accuracy from both sensors and segment the scene
moving objects.

Figure 6 shows an example of failure of our algorithm
where it is shown that output without augmentation of li-
darFlow in a high-illumination image is slightly better than
using lidarFlow. In this sample, the ego-vehicle is static,
and there is only one car that is moving in the scene as il-
lustrated in ground truth. The rgbFlow obtained during day
which is shown in (c) provides maximum accuracy when
it is fused with RGB as illustrated in (i). Due to inaccu-
rate motion map obtained from LiDAR which is shown in
(e), some distortions took place when this input was fused

(a)

(c)

(e)

(g)

(i)

(k)

(m)

(b)

(d)

(f)

(h)

(j)

(l)

(n)

Figure 6: Qualitative comparison of our algorithm on KITTI and Dark-KITTI datasets. First column shows inputs and results
on KITTI while second shows results on Dark-KITTI. (a),(b) show the input RGB images. (c),(d) show rgbFlow. (e) shows
lidarFlow. (f) shows Ground Truth. (g),(h) show output using RGB-only. (i),(j) show output of (RGB + rgbFlow). (k),(l)
show output of (RGB + lidarFlow). (m),(n) show output of (RGB + rgbFlow + lidarFlow).

with rgbFlow. This is illustrated in (m) compared to (i).
However, the distortion is minimal where the network is
still able to learn motion mask correctly even with noisy li-
darFlow. Moreover, overall moving IoU has improved with
2% after augmentation of lidarFlow with rgbFlow for high-
illumination images as illustrated in Table 1. On the other
hand, for Dark-KITTI dataset, the fusion with the noisy li-
darFlow improves performance of low-illumination images
as illustrated in (n) compared to (j) which provides that our
algorithm is illumination independent and works perfectly
in all lighting conditions. Table 2 shows real-time evalu-
ation performance of our algorithm. Our proposed model
runs 18 fps which is suitable for real-time application such
as the autonomous driving. The results are reported using
images of resolution 256x1224 on Titan X Pascal GPU.

5. Conclusions

We explored the impact of leveraging LiDAR sensor for
understanding scene motion for MOD especially for low-
illumination autonomous driving conditions. We created
our own dataset Dark-KITTI to evaluate our algorithm in
low-light conditions by extending the public MOD dataset
[32]. We constructed different fusion algorithms to empiri-
cally study best fusion methodology. We proposed a novel
architecture that fuses color signal with motion information
that is captured from both camera and LiDAR sensors. Our
model is evaluated on both night and day images and we ob-
tain improved performance in both of them. The proposed
architecture is designed for real-time performance for au-
tonomous driving application where our most complex al-
gorithm runs at 18 fps. We hope that this study encourages
further research in construction of better fusion networks.

References

[1] J. Behley, M. Garbade, A. Milioto, J. Quenzel, S. Behnke,
C. Stachniss, and J. Gall. SemanticKITTI: A Dataset for Se-
mantic Scene Understanding of LiDAR Sequences. In Proc.
of the IEEE/CVF International Conf. on Computer Vision
(ICCV), 2019. 3

[2] A. Briot, P. Viswanath, and S. Yogamani. Analysis of efﬁ-
cient cnn design techniques for semantic segmentation. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition Workshops, pages 663–672, 2018.
4

[3] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), pages 3213–3223, 2016. 3
[4] A. Dewan, T. Caselitz, G. D. Tipaldi, and W. Burgard.
Motion-based detection and tracking in 3d lidar scans.
In
2016 IEEE International Conference on Robotics and Au-
tomation (ICRA), pages 4508–4513. IEEE, 2016. 2, 6
[5] A. Dewan, G. L. Oliveira, and W. Burgard. Deep semantic
classiﬁcation for 3d lidar data. In 2017 IEEE/RSJ Interna-
tional Conference on Intelligent Robots and Systems (IROS),
pages 3544–3549. IEEE, 2017. 2

[6] B. Drayer and T. Brox. Object detection, tracking, and mo-
tion segmentation for object-level video segmentation. arXiv
preprint arXiv:1608.03066, 2016. 2

[7] M. Gamal, M. Siam, and M. Abdel-Razek. ShufﬂeSeg:
Real-time semantic segmentation network. arXiv preprint
arXiv:1803.03816, 2018. 4, 5

[8] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for Au-
tonomous Driving? The KITTI Vision Benchmark Suite.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), 2012. 3

[9] C. Hazirbas, L. Ma, C. Domokos, and D. Cremers. Fusenet:
Incorporating depth into semantic segmentation via fusion-
In Asian conference on computer
based cnn architecture.
vision, pages 213–228. Springer, 2016. 2

[10] K. He, G. Gkioxari, P. Doll´ar, and R. B. Girshick. Mask
r-cnn. 2017 IEEE International Conference on Computer
Vision (ICCV), pages 2980–2988, 2017. 3

[11] M. Heimberger, J. Horgan, C. Hughes, J. McDonald, and
S. Yogamani. Computer vision in automated parking sys-
Image and
tems: Design, implementation and challenges.
Vision Computing, 68:88–101, 2017. 1

[12] J. Horgan, C. Hughes, J. McDonald, and S. Yogamani.
Vision-based driver assistance systems: Survey, taxonomy
In 2015 IEEE 18th International Confer-
and advances.
ence on Intelligent Transportation Systems, pages 2032–
2039. IEEE, 2015. 1

[13] E. Ilg, N. Mayer, T. Saikia, M. Keuper, A. Dosovitskiy, and
T. Brox. Flownet 2.0: Evolution of optical ﬂow estimation
with deep networks. 2017 IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pages 1647–1655,
2016. 3, 4

[14] S. D. Jain, B. Xiong, and K. Grauman. Fusionseg: Learning
to combine motion and appearance for fully automatic seg-

mentation of generic objects in videos. In 2017 IEEE con-
ference on computer vision and pattern recognition (CVPR),
pages 2117–2126. IEEE, 2017. 2

[15] R. E. Kalman. A new approach to linear ﬁltering and predic-
tion problems. Journal of basic Engineering, 82(1):35–45,
1960. 2

[16] D. Konig, M. Adam, C. Jarvers, G. Layher, H. Neumann, and
M. Teutsch. Fully convolutional region proposal networks
In Proceedings of the
for multispectral person detection.
IEEE Conference on Computer Vision and Pattern Recog-
nition Workshops, pages 49–56, 2017. 2

[17] V. R. Kumar, S. Milz, C. Witt, M. Simon, K. Amende, J. Pet-
zold, S. Yogamani, and T. Pech. Monocular ﬁsheye camera
depth estimation using sparse lidar supervision. In 2018 21st
International Conference on Intelligent Transportation Sys-
tems (ITSC), pages 2853–2858. IEEE, 2018. 2

[18] B. Li. 3d fully convolutional network for vehicle detection
in point cloud. In 2017 IEEE/RSJ International Conference
on Intelligent Robots and Systems (IROS), pages 1513–1518.
IEEE, 2017. 2

[19] B. Li, T. Zhang, and T. Xia. Vehicle detection from 3d
arXiv preprint

lidar using fully convolutional network.
arXiv:1608.07916, 2016. 2

[20] C. Li, D. Song, R. Tong, and M. Tang. Illumination-aware
faster r-cnn for robust multispectral pedestrian detection.
Pattern Recognition, 85:161–171, 2019. 2

[21] Y. Li, M.-Y. Liu, X. Li, M.-H. Yang, and J. Kautz. A closed-
In Pro-
form solution to photorealistic image stylization.
ceedings of the European Conference on Computer Vision
(ECCV), pages 453–468, 2018. 3

[22] M.-Y. Liu, T. Breuel, and J. Kautz. Unsupervised image-to-
image translation networks. In Advances in neural informa-
tion processing systems, pages 700–708, 2017. 3

[23] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3431–3440, 2015. 4

[24] K. E. Madawy, H. Rashed, A. E. Sallab, O. Nasr, H. Kamel,
and S. Yogamani. Rgb and lidar fusion based 3d semantic
segmentation for autonomous driving, 2019. 2

[25] M. Menze and A. Geiger. Object scene ﬂow for autonomous
vehicles. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, pages 3061–3070,
2015. 2

[26] S. Milz, G. Arbeiter, C. Witt, B. Abdallah, and S. Yogamani.
Visual slam for automated driving: Exploring the applica-
In Proceedings of the IEEE Con-
tions of deep learning.
ference on Computer Vision and Pattern Recognition Work-
shops, pages 247–257, 2018. 2

[27] H. Rashed, A. El Sallab, S. Yogamani, and M. ElHelw. Mo-
tion and depth augmented semantic segmentation for au-
tonomous navigation. In Proceedings of the IEEE Confer-
ence on Computer Vision and Pattern Recognition Work-
shops, pages 0–0, 2019. 2, 6

[28] H. Rashed, S. Yogamani, A. E. Sallab, P. Kr´ızek, and M. El-
Helw. Optical ﬂow augmented semantic segmentation net-
works for automated driving. In VISIGRAPP, 2019. 2

[42] X. Zhang, X. Zhou, M. Lin, and J. Sun. Shufﬂenet: An ex-
tremely efﬁcient convolutional neural network for mobile de-
vices. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 6848–6856, 2018. 4

[43] J. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired Image-to-
Image Translation Using Cycle-Consistent Adversarial Net-
works. In IEEE International Conference on Computer Vi-
sion, ICCV 2017, Venice, Italy, October 22-29, 2017, pages
2242–2251, 2017. 3

[44] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. In Computer Vision (ICCV), 2017 IEEE International
Conference on, 2017. 3

[29] M. Siam, S. Eikerdawy, M. Gamal, M. Abdel-Razek,
M. Jagersand, and H. Zhang. Real-time segmentation with
In 2018 IEEE/RSJ In-
appearance, motion and geometry.
ternational Conference on Intelligent Robots and Systems
(IROS), pages 5793–5800. IEEE, 2018. 2, 6

[30] M. Siam, S. Elkerdawy, M. Jagersand, and S. Yogamani.
Deep semantic segmentation for automated driving: Taxon-
In 2017 IEEE 20th Inter-
omy, roadmap and challenges.
national Conference on Intelligent Transportation Systems
(ITSC), pages 1–8. IEEE, 2017. 2

[31] M. Siam, M. Gamal, M. Abdel-Razek, S. Yogamani, and
M. Jagersand. Rtseg: Real-time semantic segmentation com-
parative study. In 2018 25th IEEE International Conference
on Image Processing (ICIP), pages 1603–1607. IEEE, 2018.
4

[32] M. Siam, H. Mahgoub, M. Zahran, S. Yogamani, M. Jager-
sand, and A. El-Sallab. ModNET: Moving object detection
network with motion and appearance for autonomous driv-
ing. arXiv preprint arXiv:1709.04821, 2017. 2, 3, 6, 8
[33] M. Uricar, P. Krizek, G. Sistu, and S. Yogamani. Soil-
ingnet: Soiling detection on automotive surround-view cam-
eras. arXiv preprint arXiv:1905.01492, 2019. 2

[34] V. Vaquero, I. del Pino, F. Moreno-Noguer, J. Sola, A. San-
feliu, and J. Andrade-Cetto. Deconvolutional networks for
point-cloud vehicle detection and tracking in driving sce-
In 2017 European Conference on Mobile Robots
narios.
(ECMR), pages 1–7. IEEE, 2017. 2

[35] V. Vaquero, A. Sanfeliu, and F. Moreno-Noguer. Halluci-
nating dense optical ﬂow from sparse lidar for autonomous
vehicles. In 2018 24th International Conference on Pattern
Recognition (ICPR), pages 1959–1964. IEEE, 2018. 3, 4, 7
[36] J. Vertens, A. Valada, and W. Burgard. Smsnet: Semantic
motion segmentation using deep convolutional neural net-
In Proceedings of the IEEE International Confer-
works.
ence on Intelligent Robots and Systems (IROS), Vancouver,
Canada, 2017. 3

[37] J. Wagner, V. Fischer, M. Herman, and S. Behnke. Multi-
spectral pedestrian detection using deep fusion convolutional
neural networks. In ESANN, 2016. 2

[38] S. Wehrwein and R. Szeliski. Video segmentation with back-
In BMVC, volume 245, page 246,

ground motion models.
2017. 2

[39] M. Yahiaoui, H. Rashed, L. Mariotti, G. Sistu, I. Clancy,
L. Yahiaoui, V. R. Kumar, and S. Yogamani. Fisheyemodnet:
Moving object detection on surround-view cameras for au-
tonomous driving. arXiv preprint arXiv:1908.11789, 2019.
2

[40] S. Yogamani, C. Hughes, J. Horgan, G. Sistu, P. Varley,
D. O’Dea, M. Uˇriˇc´aˇr, S. Milz, M. Simon, K. Amende,
C. Witt, H. Rashed, S. Chennupati, S. Nayak, S. Mansoor,
X. Perroton, and P. Perez. : A multi-task, multi-camera ﬁsh-
eye dataset for autonomous driving. CoRR, abs/1905.01489,
2019. To appear in ICCV 2019. 2

[41] F. Yu, W. Xian, Y. Chen, F. Liu, M. Liao, V. Madha-
van, and T. Darrell. Bdd100k: A diverse driving video
database with scalable annotation tooling. arXiv preprint
arXiv:1805.04687, 2018. 3

