Tree-Structured Policy based Progressive Reinforcement Learning
for Temporally Language Grounding in Video

Jie Wu1, Guanbin Li1∗, Si Liu2, Liang Lin1,3
1 Sun Yat-sen University 2 Beihang University, 3 DarkMatter AI Research.
wujie23@mail2.sysu.edu.cn, liguanbin@mail.sysu.edu.cn, liusi@buaa.edu.cn, linliang@ieee.org

0
2
0
2
 
n
a
J
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
0
8
6
6
0
.
1
0
0
2
:
v
i
X
r
a

Abstract

Temporally language grounding in untrimmed videos is a
newly-raised task in video understanding. Most of the ex-
isting methods suffer from inferior efﬁciency, lacking inter-
pretability, and deviating from the human perception mech-
anism. Inspired by human’s coarse-to-ﬁne decision-making
paradigm, we formulate a novel Tree-Structured Policy based
Progressive Reinforcement Learning (TSP-PRL) framework
to sequentially regulate the temporal boundary by an itera-
tive reﬁnement process. The semantic concepts are explicitly
represented as the branches in the policy, which contributes
to efﬁciently decomposing complex policies into an inter-
pretable primitive action. Progressive reinforcement learn-
ing provides correct credit assignment via two task-oriented
rewards that encourage mutual promotion within the tree-
structured policy. We extensively evaluate TSP-PRL on the
Charades-STA and ActivityNet datasets, and experimental re-
sults show that TSP-PRL achieves competitive performance
over existing state-of-the-art methods.

Introduction
We focus on the task of temporally language grounding in
a video, whose goal is to determine the temporal bound-
ary of the segments in the untrimmed video that corre-
sponds to the given sentence statement. Most of the exist-
ing competitive approaches (Anne Hendricks et al. 2017;
Gao et al. 2017; Liu et al. 2018; Ge et al. 2019; Xu et al.
2019) are based on extensive temporal sliding windows to
slide over the entire video or rank all possible clip-sentence
pairs to obtain the grounding results. However, these sliding
window based methods suffer from inferior efﬁciency and
deviate from the human perception mechanism. When hu-
mans locate an interval window associated with a sentence

∗Corresponding author is Guanbin Li. This work was supported
in part by the National Key Research and Development Program of
China under Grant No. 2018YFC0830103, in part by the National
Natural Science Foundation of China under Grant No.61976250
and No.61876177, in part by the National High Level Talents Spe-
cial Support Plan (Ten Thousand Talents Program). This work
was also supported by sponsored by CCF-Tencent Open Research
Fund (CCF-Tencent IAGR20190106).
Copyright c(cid:13) 2020, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

description in a video, they tend to assume an initial tem-
poral interval ﬁrst, and achieve precise time boundary local-
ization through cross-modal semantic matching analysis and
sequential boundary adjustment (e.g., scaling or shifting).

Looking deep into human’s thinking paradigm (Mancas
et al. 2016), people usually deduce a coarse-to-ﬁne deliber-
ation process to render a more reasonable and interpretable
decision in daily life. Namely, people will ﬁrst roughly de-
termine the selection range before making a decision, then
choose the best one among the coarse alternatives. This top-
down coarse-to-ﬁne deliberation has been explored in the
task of machine translation, text summarization and so on
(Xia et al. 2017). Intuitively, embedding this mode of think-
ing into our task can efﬁciently decompose complex action
policies, reduce the number of search steps while increas-
ing the search space, and obtain more impressive results in
a more reasonable way. To this end, we formulate a Tree-
Structured Policy based Progressive Reinforcement Learn-
ing framework (TSP-PRL) to imitate human’s coarse-to-ﬁne
decision-making scheme. The tree-structured policy in TSP-
PRL consists of root policy and leaf policy, which respec-
tively correspond to the process of coarse and ﬁne decision-
making stage. And a more reasonable primitive action is pro-
posed via these two-stages selection. The primitive actions
are divided into ﬁve classes related to semantic concepts ac-
cording to the moving distance and directions: scale varia-
tion, markedly left shift, markedly right shift, marginally left
adjustment and marginally right adjustment. The above se-
mantic concepts are explicitly represented as the branches
into the tree-structured policy, which contributes to efﬁ-
ciently decomposing complex policies into an interpretable
primitive action. In the reasoning stage, the root policy ﬁrst
roughly estimates the high-level semantic branch that can re-
duce the semantic gap to the most extent. Then the leaf pol-
icy reasons a reﬁned primitive action based on the selected
branch to optimize the boundary. We depict an example of
how TSP-PRL addresses the task in Figure 1. As can be seen
in the ﬁgure, the agent ﬁrst markedly right shift the bound-
ary to eliminate the semantic gap. Then it resorts to scale
contraction and marginally adjustment to obtain an accurate
boundary.

The tree-structured policy is optimized via progressive re-

Figure 1: An example showing how TSP-PRL addresses the task in an iterative reﬁnement manner. A more interpretable
primitive action is proposed by the tree-structured policy, which consists of root policy and leaf policy to imitate human’s
coarse-to-ﬁne decision-making scheme.

inforcement learning, which determines the selected single
policy (root policy or leaf policy) in the current iteration
while stabilizing the training process. The task-oriented re-
ward settings in PRL manages to provide correct credit as-
signment and optimize the root policy and leaf policy mutu-
ally and progressively. Concretely, the external environment
provides rewards for each leaf strategy and the root strat-
egy does not interact directly with the environment. PRL
measures the reward for the root policy from two items: 1)
the intrinsic reward for the selection of high-level semantic
branch; 2) the extrinsic reward that reﬂects how the subse-
quent action executed by the selected semantic branch inﬂu-
ences the environment.

Extensive experiments on Charades-STA (Sigurdsson et
al. 2016; Gao et al. 2017) and ActivityNet (Krishna et
al. 2017) datasets prove that TSP-PRL achieves competi-
tive performance over existing leading and baseline meth-
ods on both datasets. The experimental results also demon-
strate that the proposed approach can (i) efﬁciently improve
the ability to discover complex policies which can hardly
be learned by ﬂat policy; (ii) provide more comprehensive
assessment and appropriate credit assignment to optimize
the tree-structured policy progressively; and (iii) determine
a more accurate stop signal at an iterative process. The
source code as well as the trained models have been released
at https://github.com/WuJie1010/TSP-PRL.

Related work

Temporally Language Grounding in Video. Temporally
language grounding in the video is a challenging task which
requires both language and video understanding and needs
to model the ﬁne-grained interactions between the verbal
and visual modalities. Gao et al. (Gao et al. 2017) proposed a
cross-modal temporal regression localizer (CTRL) to jointly

model language query and video clips, which adopts slid-
ing windows over the entire video to obtain the grounding
results. Hendricks et al.(Anne Hendricks et al. 2017) de-
signed a moment context network (MCN) to measure the
distance between visual features and sentence embedding in
a shared space, ranking all possible clip-sentence pairs to lo-
cate the best segments. However, the above approaches are
either inefﬁcient or inﬂexible since they carry out overlap-
ping sliding window matching or exhaustive search. Chen et
al. (Chen et al. 2018a) designed a dynamic single-stream
deep architecture to incorporate the evolving ﬁne-grained
frame-by-word interactions across video-sentence modali-
ties. This model performs efﬁciently, which only needs to
process the video sequence in one single pass. Zhang et al.
(Zhang et al. 2019) exploited graph-structured moment re-
lations to model temporal structures and improve moment
representation explicitly. He et al. (He et al. 2019) ﬁrst in-
troduced the reinforcement learning paradigm into this task
and treated it as a sequential decision-making task. Inspired
by human’s coarse-to-ﬁne decision-making paradigm, we
construct a tree-structured policy to reason a series of in-
terpretable actions and regulate the boundary in an iterative
reﬁnement manner.
Reinforcement Learning. Recently, reinforcement learning
(RL) technique (Williams 1992) has been successfully popu-
larized to learn task-speciﬁc policies in various image/video-
based AI tasks. These tasks can be generally formulated as a
sequential process that executes a series of actions to ﬁnish
the corresponding objective. In the task of multi-label im-
age recognition, Chen et al. (Chen et al. 2018b) proposed
a recurrent attentional reinforcement learning method to it-
eratively discover a sequence of attentional and informative
regions. Shi et al.(Shi et al. 2019) implemented deep rein-
forcement learning and developed a novel attention-aware
face hallucination framework to generate a high-resolution

Figure 2: The overall pipeline of the proposed TSP-PRL framework. The agent receives the state from the environment (video
clips) and estimates a primitive action via tree-structured policy. The action selection is depicted by a switch (cid:40) over the
interface ⊥ in the tree-structured policy. The alignment network will predict a conﬁdence score to determine when to stop.

face image from a low-resolution input. Wu et al. (Wu et
al. 2019a) designed a new content sensitive and global dis-
criminative reward function to encourage generating more
concrete and discriminative image descriptions. In the video
domain, RL has been widely used in temporal action local-
ization (Yeung et al. 2016) and video recognition (Wu et al.
2019b). In this paper, we design a progressive RL approach
to train the tree-structured policy, and the task-oriented re-
ward settings contribute to optimizing the root policy and
leaf policy mutually and stably.

The Proposed Approach
Markov Decision Process Formulation
In this work, we cast the temporally language grounding
task as a Markov Decision Process (MDP), which is repre-
sented by states s ∈ S, action tuple (cid:10)ar, al(cid:11), and transition
function T : (s, (cid:10)ar, al(cid:11)) → s(cid:48). ar and al denote the ac-
tion proposed by root policy and leaf policy, respectively.
The overall pipeline of the proposed Tree-Structured Pol-
icy based Progressive Reinforcement Learning (TSP-PRL)
framework is depicted in Figure 2.
State. A video is ﬁrstly decomposed into consecutive video
units (Gao et al. 2017) and each video unit is used to extract
unit-level feature through the feature extractor ϕv (Tran et
al. 2015; Wang et al. 2016). Then the model resorts to uni-
formly sampling strategy to extract ten unit-level features
from the entire video, which are concatenated as the global
video representation V g. For the sentence query L, the skip-
thought encoder ϕs (Kiros et al. 2015) is utilized to generate
the language representation E = ϕs(L). When the agent in-
teracts with the environment, the above features are retained.
At each time step, the action executed by the agent will
change the boundary and obtain a reﬁned video clip. The
model samples ten unit-level features inside the boundary
and concatenate these features as the current video feature
V c
t−1, t = 1, 2, ..., Tmax. We explicitly involve the normal-
ized boundary Lt−1 = [ls
t−1] into the state feature (He
et al. 2019), where ls
t−1 denote the start point and

t−1, le
t−1 and le

end point respectively. Then the gated-attention (Chaplot et
al. 2018) mechanism is applied to gain multi-modal fusion
representation of verbal and visual modalities:
t = σ(E) (cid:12) V g, AEC
t = σ(E) (cid:12) Lt−1,

t = σ(E) (cid:12) V c

AEG

AEL

t−1,

(1)

where σ denotes the sigmoid activation function and (cid:12) is
the Hadamard product. The above gated attention features
are concatenated and fed into a fully-connected layer φ to
obtain the state representation st:

st = φ(AEG

t

, AEC
t

, AEL
t

)

(2)

An additional GRU (Cho et al. 2014) layer is adopted to
process the state features before feeding them into the tree-
structured policy, which manages to develop high-level tem-
poral abstractions and lead to a more generalizable model.
Hierarchical Action Space. In our work, the boundary
movement is based on the clip-level and each boundary con-
sists of a series of video clips. All primitive actions can be
divided into ﬁve classes related to semantic concepts ac-
cording to the moving distance and directions, which re-
sults in a hierarchical action space on the whole. These se-
mantic concepts are explicitly represented as the branches
into the tree-structured policy, resulting in ﬁve high-level se-
mantic branches to contain all primitive actions in this task:
scale variation, markedly left shift, markedly right shift,
marginally left adjustment and marginally right adjustment.
i) The scale variation branch contains four primitive actions:
extending/shortening ξ times w.r.t center point. ξ is set to
1.2 or 1.5; 2) Three actions are included in the markedly
left shift branch: shifting start point/end point/start & end
point backward ν. ν is ﬁxed to N/10, where N denotes the
number of the clip of the entire video; 3) The actions in the
markedly right shift branch is symmetry with the markedly
left shift: shifting start point/end point/start & end point for-
ward ν; 4) Except for the moving scale, the actions in the
marginally left adjustment branch is similar to the markedly
left shift branch: shifting start point/end point/start & end

point backward Z frame; The size of Z is constrained by
the video lengths; 5) The marginally right adjustment branch
also involves three primitive actions: shifting start point/end
point/start & end point forward Z frame.
Tree-Structured Policy. One of our key ideas is that the
agent needs to understand the environmental state well and
reason a more interpretable primitive action. Inspired by hu-
man’s coarse-to-ﬁne decision-making paradigm, we design
a tree-structured policy to decompose complex action poli-
cies and propose a more reasonable primitive action via two-
stages selection, instead of using a ﬂat policy that maps the
state feature to action directly (He et al. 2019). As shown
in the right half of Figure 2, the tree-structured policy con-
sists of a root policy and a leaf policy at each time step. The
root policy πr(ar
t |st) decides which semantic branch will
be primarily relied on. The leaf policy πl(al
t ) consists
of ﬁve sub-policies, which corresponds to ﬁve high-level se-
mantic branches. The selected semantic branch will reason
a reﬁned primitive action via the corresponding sub-policy.
The root policy aims to learn to invoke the correct sub-policy
from the leaf policy in the following different situations: (1)
The scaling policy should be selected when the scale of pre-
dicted boundary is quite mismatched with the ground-truth
boundary; (2) When the predicted boundary is far from the
ground-truth boundary, the agent should execute the left or
right shift policy; (3) The primitive action should be sam-
pled from the left or right adjust policy when most of the
two boundaries intersect but with some deviation. At each
time step, the tree-structured policy ﬁrst samples ar
t from
root policy πr to decide the semantic branch:
t ∼ πr(ar
ar
(3)
And a primitive action is sampled from the leaf policy πl
related to the selected semantic branch:
t ).

t ∼ πl(al
al

t|st, ar

t|st, ar

t |st).

(4)

Tree-Structured Policy based Progressive
Reinforcement Learning
Rewards. Temporal IoU is adopted to measure the align-
ment degree between the predicted boundary [ls, le] and
ground-truth boundary [gs, ge]:

Ut =

min (ge, le
max (ge, le

t ) − max (gs, ls
t )
t ) − min (gs, ls
t )

.

(5)

The reward setting for this task should provide correct
credit assignment, encouraging the agent to take fewer steps
to obtain accurate grounding results. We deﬁne two task-
oriented reward functions to select an accurate high-level
semantic branch and the corresponding primitive action, re-
spectively. The ﬁrst reward rl
t is the leaf reward, which re-
veals the inﬂuence of the primitive actions al
t to the current
environment. It can be directly obtained in the environment
through temporal IoU. We explicitly provide higher leaf re-
ward when the primitive action attempts to obtain better
grounding results and the temporal IoU is higher than 0.5:

rl
t =





ζ + Ut Ut > Ut−1; Ut > 0.5
Ut > Ut−1; Ut ≤ 0.5
ζ
−ζ/10 Ut−1 ≥ Ut ≥ 0
−ζ

otherwise

where ζ is a factor that determines the degree of reward.

The second reward is the root reward rr

t , which should
be determined deliberately since the action executed by root
policy does not interact with the environment directly. To
provide comprehensive assessment and correct credit as-
signment, rr
t is deﬁned to include two items: 1) the intrin-
sic reward term that represents the direct impact of ar
t for
semantic branch selection and 2) the extrinsic reward term
reﬂects the indirect inﬂuence of the subsequent primitive ac-
tion executed by the selected branch for the environment.
In order to estimate how well the root policy chooses the
high-level semantic branch, the model traverses through all
possible branches and reasons the corresponding primitive
actions to the environment, which results in ﬁve different
IoU. The max IoU among these ﬁve IoU is deﬁned as U max
.
Then the root reward rr

t is designed as follow:

t

rr
t =






ζ
(cid:124)(cid:123)(cid:122)(cid:125)
intrinsic reward item
Ut − U max
(cid:124)
(cid:123)(cid:122)
(cid:125)
intrinsic reward item

t

+ Ut − Ut−1
(cid:125)

(cid:123)(cid:122)
extrinsic reward item

(cid:124)

+ Ut − Ut−1
(cid:125)

(cid:123)(cid:122)
extrinsic reward item

(cid:124)

Ut = U max

t

otherwise

,

(7)

where U0 denotes the temporal IoU between initial bound-
ary and the ground-truth boundary. The diagram of how the
root reward and leaf reward are obtained in the framework is
depicted in Figure 3.
Progressive Reinforcement Learning. Progressive Rein-
forcement Learning (PRL) is designed on the basis of the
advantage actor-critic (A2C) (Sutton and Barto 2018) al-
gorithm to optimize the overall framework. Policy function
πr(ar
t ) estimate the probability distribu-
tion over possible actions in the corresponding action space.
These two policies are separate and each is equipped with
a value approximator V r(st) and V l(st, ar
t ), which is de-
signed to compute a scalar estimate of reward for the corre-
sponding policy.

t |st) and πl(al

t|st, ar

Starting from the initial boundary, the agent invokes
the tree-structured policy iteratively in the interaction pro-
cess. We depict how the tree-structured policy works iter-
atively in Figure 3. From the ﬁgure, we can observe that
the agent samples actions from root policy and leaf pol-
icy consecutively at each time step. The action will trig-
ger a new state, which is fed into the tree-structured pol-
icy to execute the next actions. Given a trajectory in an
episode Γ = {(cid:104)st, πr(·|st), ar
t(cid:105), t =
{1, · · · , Tmax}}, PRL algorithm maximizes the objective of
root policy Lroot(θπr ) and leaf policy Lleaf (θπl ):

t , πl(·|st, ar

t ), al

t , rr

t, rl

Lroot(θπr ) = −

[logπr(ar

t |st)(Rr

t − V r(st))

(8)

M
(cid:88)

Tmax(cid:88)

1
M

m=1

+ αH(πr(ar

t=1
t |st))],

M
(cid:88)

Tmax(cid:88)

1
M

m=1

+ αH(πl(al

t=1
t|st, ar

t ))],

Lleaf (θπl ) = −

[logπl(al

t|st, ar

t )(Rl

t − V l(st, ar

t ))

,

(6)

(9)
where M denotes the size of a mini-batch and Tmax is
the max time step in an episode. Rr
t −

t − V r(st) and Rl

Figure 3: An illustration of how the tree-structured policy works iteratively. The solid blue line represents how the root reward
and leaf reward are obtained from the proposed framework.

V l(st, ar
t ) denote the advantage functions in the A2C set-
ting. H() is the entropy of policy networks and the hyper-
parameters α controls the strength of entropy regularization
term, which is introduced to increase the diversity of actions.
θπr and θπl are the parameters of the policy networks. Here,
the model only back-propagates the gradient for the selected
sub-policy in leaf policy. The reward of the following-up
steps should be traced back to the current step since it is a
sequential decision-making problem. The accumulated root
reward function Rr
t is computed as follows:

Rr

t =

(cid:26)rr
t + γV r(st)
t + γRr
rr

t+1

t = Tmax
t = 1, 2, ..., Tmax − 1

,

(10)

where γ is a constant discount factor and the accumulated
leaf reward Rl
t is obtained in a similar way. In order to op-
timize the value network to provide an estimation of the ex-
pected sum of rewards, we minimize the squared difference
between the accumulated reward and the estimated value,
and minimize the value loss:

Lroot(θV r ) =

(Rr

t − V r(st))2,

Lleaf (θV l ) =

(Rl

t − V l(st, ar

t ))2

m=1

t=1
where θV r and θV l are the parameters of the value networks.
Optimizing the root and leaf policies will simultaneously
lead to the unstable training procedure. To avoid this, we de-
sign a progressive reinforcement learning (PRL) optimiza-
tion procedure: for each set of K iterations, PRL keeps one
policy ﬁxed and only trains the other policy. When reaching
K iterations, it switches the policy that is trained. The tree-
structured policy based progressive reinforcement learning
can be summarized as:

ψ = (cid:98)

(cid:99) mod 2,

i
K

Ltree =ψ × [Lroot(θπr ) + Lroot(θV r )]

+(1 − ψ) × [Lleaf (θπl ) + Lleaf (θV l)],
where ψ is a binary variable indicating the selection of the
training policy. i denotes the number of iterations in the en-
tire training process. (cid:98)(cid:99) is the lower bound integer of the

(11)

(12)

(13)

M
(cid:88)

Tmax(cid:88)

m=1

t=1

M
(cid:88)

Tmax(cid:88)

1
M

1
M

division operation and mod is the modulo function. These
two policies promote each other mutually, as leaf policy pro-
vides accurate intrinsic rewards for root policy while the root
policy selects the appropriate high-level semantic branch for
further reﬁnement of the leaf policy. The better leaf policy
is, the more accurate intrinsic rewards will be provided. The
more accurate the upper branch policy is selected, the bet-
ter the leaf policy can be optimized. This progressive opti-
mization ensures the agent to obtain a stable and outstand-
ing performance in the RL setting. During testing, the tree-
structured policy takes the best actions tuple (cid:10)ar, al(cid:11) at each
time step iteratively to obtain the ﬁnal boundary.
Alignment Network for Stop Signal. Traditional reinforce-
ment learning approaches often include stop signal as an ad-
ditional action into the action space. Nevertheless, we de-
sign an alignment network to predict a conﬁdence score Ct
for enabling the agent to have the idea of when to stop. The
optimization of the alignment network can be treated as an
auxiliary supervision task since the temporal IoU can explic-
itly provide ground-truth information for conﬁdence score.
This network is optimized by minimizing the binary cross-
entropy loss between Ut−1 and Ct:

Lalign =

[Ut−1 log σ(Ct)+(1−Ut−1) log(1−σ(Ct))].

1
M

M
(cid:88)

Tmax(cid:88)

m=1

t=1

(14)
During testing, the agent will interact with the environment
by Tmax steps and obtain a series of Ct. Then the agent gets
the maximum of Ct, which indicates that the alignment net-
work considers Ut−1 has a maximal temporal IoU. So t − 1
is the termination step. The alignment network is optimized
in the whole training procedure. The overall loss function in
the proposed framework is summarized as:

L = Ltree + λLalign.

(15)

where λ is a weighting parameter to achieve a tradeoff be-
tween two types of loss.

Experiments
Datasets and Evaluation Metrics
Datasets. The models are evaluated on two widely used
datasets: Charades-STA (Gao et al. 2017) and ActivityNet

Paradigm

SL

RL

Feature
C3D
C3D
C3D
C3D
C3D
C3D
C3D
C3D
I3D

Baseline
MCN (Anne Hendricks et al. 2017), ICCV 2017
CTRL (Gao et al. 2017), ICCV 2017
ACRN (Liu et al. 2018), SIGIR 2018
TGN (Chen et al. 2018a), EMNLP 2018
MAC (Ge et al. 2019), WACV 2019
SAP (Chen and Jiang 2019), AAAI 2019
QSPN (Xu et al. 2019), AAAI 2019
ABLR (Yuan, Mei, and Zhu 2019), AAAI 2019
MAN (Zhang et al. 2019), CVPR 2019

Charades-STA (Gao et al. 2017)
IoU@0.5 MIoU
IoU@0.7
18.77
4.44
-
8.89
26.97
9.65
-
-
29.01
12.23
28.56
13.36
-
15.80
-
-
-
22.72

13.66
23.63
26.74
-
29.39
27.42
35.60
-
46.53

ActivityNet (Krishna et al. 2017)
IoU@0.3 MIoU
IoU@0.5
15.99
10.17
21.04
14.36
24.49
16.53
-
28.47
-
-
-
-
-
27.70
36.99
36.79
-
-

22.07
29.10
31.75
45.51
-
-
45.30
55.67
-

C3D
C3D
C3D
C3D
Two-Stream
Two-Stream

SM-RL (Wang, Huang, and Wang 2019), CVPR 2019
TripNet (Hahn et al. 2019), CVPRW 2019
RWM (He et al. 2019), AAAI 2019
TSP-PRL (Ours)
RWM (He et al. 2019), AAAI 2019
TSP-PRL (Ours)

11.17
14.50
13.74
17.69
17.72
24.73

24.36
36.61
34.12
37.39
37.23
45.30

32.22
-
35.09
37.22
36.29
40.93

-
32.19
34.91
38.76
-
-

-
48.42
53.00
56.08
-
-

-
-
36.25
39.21
-
-

Table 1: The comparison performance (in %) with state-of-the-art methods. The approaches in the ﬁrst group are supervised
learning (SL) based approaches and methods of the second group are reinforcement learning (RL) based approaches. “-” indi-
cates that the corresponding values are not available.

(Krishna et al. 2017). Gao et al. (Gao et al. 2017) extended
the original Charades dataset (Sigurdsson et al. 2016) to gen-
erate sentence-clip annotations and created the Charades-
STA dataset, which comprises 12,408 sentence-clip pairs for
training, and 3,720 for testing. The average duration of the
videos is 29.8 seconds and the described temporally anno-
tated clips are 8 seconds long on average. ActivityNet (Kr-
ishna et al. 2017) contains 37,421 and 17,505 video-sentence
pairs for training and testing. The videos in ActivityNet are
2 minutes long on average and the described temporally an-
notated clips are 36 seconds long on average. ActivityNet
dataset is introduced to validate the robustness of the pro-
posed algorithm toward longer and more diverse videos.
Evaluation Metrics. Following previous works (Gao et al.
2017; Yuan, Mei, and Zhu 2019), we adopt two metrics to
evaluate the model for this task. “IoU@ (cid:15)” means the per-
centage of the sentence queries which have temporal IoU
larger than (cid:15). “MIoU” denotes the average IoU for all the
sentence queries.

Implementation Details
The initial boundary is set to L0 = [N/4; 3N/4], where N
denotes the clips numbers of the video. N/4 and 3N/4 de-
note the start and end clip indices of the boundary respec-
tively. The parameters Z is set to 16 and 80 respectively
for Charades-STA and ActivityNet Datasets. We utilize two
mainstream structures of action classiﬁers (i.e., C3D (Tran et
al. 2015) and Two-Stream (Wang et al. 2016)) for video fea-
ture extraction on Charades-STA dataset. For ActivityNet,
we merely employ C3D model to verify the general applica-
bility of the proposed approach. The size of the hidden state
in GRU is set to 1024. In the training stage of TSP-PRL,
the batch size is set to 16 and the learning rate is 0.001 with
Adam optimizer. The factor ζ is ﬁxed to 1 in the reward set-
tings. The hyper-parameters α, γ and λ is ﬁxed to 0.1, 0.4
and 1 receptively. For all experiments in this paper, we use
K = 200 in TSP-PRL. Tmax is set to 20 to achieve the best

trade off between accuracy and efﬁciency in the procedure
of training and testing.

Experimental Results

Comparison with the state-of-the-art algorithms.
In
this subsection, we compare TSP-PRL with 12 existing
state-of-the-art methods on the Charades-STA and Activi-
tyNet datasets in Table 1. We re-implement ACRN (Liu et
al. 2018), MAC (Ge et al. 2019) and RWM (He et al. 2019)
and show their performance results in our experiments. The
results of other approaches are taken from their paper. The
well-performing methods, such as QSPN (Xu et al. 2019),
ABLR (Yuan, Mei, and Zhu 2019) and MAN (Zhang et al.
2019) all delve deep into the multi-modal features repre-
sentation and fusion between the verbal and visual modal-
ities. Our approach focuses more on localization optimiza-
tion, and it is complementary to the above-mentioned fea-
ture modeling methods actually. On the one hand, TSP-
PRL consistently outperforms these state-of-the-art meth-
ods, w.r.t all metrics with C3D feature. For example, our
method improves IoU@0.7 by 1.89% compared with the
previous best (Xu et al. 2019) on the Charades-STA. For
ActivityNet, the MIoU of TSP-PRL achieves the compar-
ative enhancement over ABLR by 6.0%. MAN (Zhang et
al. 2019) employs stronger I3D (Carreira and Zisserman
2017) to extract video features and obtain outstanding per-
formance. Our method with the Two-Stream feature man-
ages to improve IoU@0.7 from 22.72% to 24,73% on the
Charades-STA. On the other hand, TSP-PRL manages to
obtain more ﬂexible boundary, avoiding exhaustive sliding
window searching compared with the supervised learning-
based (SL) methods. SL methods are easy to suffer from
overﬁtting and address this task like a black-box that lack
of interpretability. While TSP-PRL contributes to achieving
more efﬁcient, impressive and heuristic grounding results.

(a) “Ours w/o TSP-10” with T grows

(b) “Ours-10” with T grows

(c) “Ours w/o TSP-10” with IoU increases

(d) “Ours-10” with IoU increases

Figure 4: The proportion curve of the selected semantic branch as time step (T ) grows and IoU increases. Correspondence
between line color and semantic branch: 1) red : scale branch; 2) orange: left shift branch; 3) yellow: right shift branch; 4) dark
blue: left adjust branch; 5) light blue: right adjust branch. Best viewed in color.

Datasets
Metrics
Ours w/o TSP-10
Ours w/o TSP-20
Ours w/o TSP-30
Ours w/o IR
Ours w/o ER
Ours w/o AN
Ours-10
Ours-20
Ours-30

Charades-STA

ActivityNet

IoU@0.7
17.13
20.67
22.40
20.35
23.18
19.03
22.85
24.73
24.75

IoU@0.5
38.06
41.31
43.38
40.64
44.41
39.78
44.24
45.30
45.45

IoU@0.5
32.09
34.39
35.32
35.03
37.20
33.89
37.53
38.76
38.82

IoU@0.3
49.35
51.96
52.77
52.64
55.78
51.03
55.17
56.08
56.02

Table 2: Comparison of the metrics (in %) of the proposed
approach and four variants of our approach. “-j” denotes
that we set the max episode lengths to j during testing.

Ablative Study

As shown in Table 2, we perform extensive ablation stud-
ies and demonstrate the effects of several essential compo-
nents in our framework. The Charades-STA dataset adopts
the Two-stream based feature and the ActivityNet dataset
uses the C3D based feature.
Analysis of Tree-Structured Policy. To validate the signiﬁ-
cance of the tree-structured policy, we design the ﬂat policy
(denote as “Ours w/o TSP”) that removes the tree-structured
policy in our approach and directly maps state feature into
a primitive action. As shown in Table 2, ﬂat policy declines
IoU@0.7 to 17.13%, 20.67%, and 22.40% at each level of
Tmax, with a decrease of 5.72%, 4.06%, and 2.35% when
compared with our approach. Furthermore, it’s performance
suffers from a signiﬁcant drop as Tmax decreases, which re-
veals that the ﬂat policy relies heavily on the episode lengths
to obtain better results. However, our approach manages to
achieve outstanding performance with fewer steps.

In order to further explore whether the tree-structured pol-
icy can better perceive environment state and decompose
complex policies, we summarize the proportion of the se-
lected high-level semantic branch at each time step and IoU
interval (0.05 for each interval). The percentage curves of
two models (“Ours w/o TSP-10” and “Ours-10”) are de-
picted in Figure 4. We can observe that the ﬂat policy tends
to choose the adjust based branches all the time and is not
sensitive to the time step and IoU. However, our approach

manages to select the shift based branches at ﬁrst few steps
to reduce the semantic gap faster. When the IoU increases or
time step grows, the adjust based branches gradually domi-
nant to regulate the boundary ﬁnely. Figure 4 clearly shows
that tree-structured policy contributes to efﬁciently improv-
ing the ability to discover complex policies which can not be
learned by ﬂat policies. To sum up, it is more intuitive and
heuristic to employ the tree-structured policy, which can sig-
niﬁcantly reduce the search space and provide efﬁcient and
impressive grounding results.
Analysis of Root Reward. To delve deep into the signiﬁ-
cance of each term in the root reward, we design two vari-
ants that simply remove the intrinsic reward item (denotes as
“Ours w/o IR”) and extrinsic reward item (denotes as “Ours
w/o ER”) in the deﬁnition of the root reward. As shown in
Table 2, removing the intrinsic reward term leads to an no-
ticeable drop in performance. It indicates that the extrinsic
reward item can not well reﬂect the quality of the root policy
since this term is more relevant to the selected leaf policy.
“Ours w/o ER” obtains 44.41% and 37.20% on IoU@0.5
on two datasets respectively, but it is still inferior to our ap-
proach. Taking into account the direct impact (intrinsic re-
ward) and indirect impact (extrinsic reward) simultaneously,
our approach contributes to providing accurate credit assign-
ment and obtaining a more impressive result.
Analysis of Stop Signal. To demonstrate the effectiveness
of the alignment network for stop signal, we design a vari-
ant (denote as “Ours w/o AN”) that removes the alignment
network and directly includes the stop signal as an additional
action into the root policy. The baseline assigns the agent a
small negative reward in proportion with the step numbers.
As shown in Table 2, “Ours w/o AN” gets a less prominent
performance, which may be due to the fact that it is difﬁ-
cult to deﬁne an appropriate reward function for the stop
signal in this task. However, our approach manages to learn
the stop information with stronger supervision information
via the alignment network, and it signiﬁcantly increases the
performance of all metrics by a large margin.

Conclusions

We formulate a novel Tree-Structured Policy based Pro-
gressive Reinforcement Learning (TSP-PRL) approach to
address the task of temporally language grounding in

untrimmed videos. The tree-structured policy is invoked at
each time step to reason a series of more robust primitive ac-
tions, which can sequentially regulate the temporal bound-
ary via an iterative reﬁnement process. The tree-structured
policy is optimized by a progressive reinforcement learning
paradigm, which contributes to providing the task-oriented
reward setting for correct credit assignment and optimizing
the overall policy mutually and progressively. Extensive ex-
periments show that our approach achieves competitive per-
formance over state-of-the-art methods on the widely used
Charades-STA and ActivityNet datasets.

References
[Anne Hendricks et al. 2017] Anne Hendricks, L.; Wang, O.;
Shechtman, E.; Sivic, J.; Darrell, T.; and Russell, B. 2017. Lo-
calizing moments in video with natural language. In Proceedings
of the IEEE International Conference on Computer Vision, 5803–
5812.

[Carreira and Zisserman 2017] Carreira, J., and Zisserman, A.
2017. Quo vadis, action recognition? a new model and the kinet-
ics dataset. In proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, 6299–6308.

[Chaplot et al. 2018] Chaplot, D. S.; Sathyendra, K. M.; Pa-
sumarthi, R. K.; Rajagopal, D.; and Salakhutdinov, R. 2018. Gated-
attention architectures for task-oriented language grounding.
In
Proceedings of the AAAI Conference on Artiﬁcial Intelligence.

[Chen and Jiang 2019] Chen, S., and Jiang, Y.-G. 2019. Semantic
proposal for activity localization in videos via sentence query. In
Proceedings of the AAAI Conference on Artiﬁcial Intelligence.

[Chen et al. 2018a] Chen, J.; Chen, X.; Ma, L.; Jie, Z.; and Chua,
T.-S. 2018a. Temporally grounding natural sentence in video. In
Proceedings of the 2018 Conference on Empirical Methods in Nat-
ural Language Processing, 162–171.

[Chen et al. 2018b] Chen, T.; Wang, Z.; Li, G.; and Lin, L. 2018b.
Recurrent attentional reinforcement learning for multi-label image
recognition. In Thirty-Second AAAI Conference on Artiﬁcial Intel-
ligence.

[Cho et al. 2014] Cho, K.; Van Merri¨enboer, B.; Gulcehre, C.; Bah-
danau, D.; Bougares, F.; Schwenk, H.; and Bengio, Y. 2014. Learn-
ing phrase representations using rnn encoder-decoder for statistical
machine translation. arXiv preprint arXiv:1406.1078.

[Gao et al. 2017] Gao, J.; Sun, C.; Yang, Z.; and Nevatia, R. 2017.
In Pro-
Tall: Temporal activity localization via language query.
ceedings of the IEEE International Conference on Computer Vi-
sion, 5267–5275.

[Ge et al. 2019] Ge, R.; Gao, J.; Chen, K.; and Nevatia, R. 2019.
Mac: Mining activity concepts for language-based temporal local-
ization. In IEEE Winter Conference on Applications of Computer
Vision, 245–253. IEEE.

[Hahn et al. 2019] Hahn, M.; Kadav, A.; Rehg, J. M.; and Graf,
H. P. 2019. Tripping through time: Efﬁcient localization of ac-
tivities in videos. arXiv preprint arXiv:1904.09936.

[He et al. 2019] He, D.; Zhao, X.; Huang, J.; Li, F.; Liu, X.; and
Wen, S. 2019. Read, watch, and move: Reinforcement learning for
temporally grounding natural language descriptions in videos. In
Proceedings of the AAAI Conference on Artiﬁcial Intelligence.

[Krishna et al. 2017] Krishna, R.; Hata, K.; Ren, F.; Fei-Fei, L.; and
Carlos Niebles, J. 2017. Dense-captioning events in videos.
In
Proceedings of the IEEE International Conference on Computer
Vision, 706–715.

[Liu et al. 2018] Liu, M.; Wang, X.; Nie, L.; He, X.; Chen, B.; and
Chua, T.-S. 2018. Attentive moment retrieval in videos. In The 41st
International ACM SIGIR Conference on Research & Development
in Information Retrieval, 15–24. ACM.

[Mancas et al. 2016] Mancas, M.; Ferrera, V. P.; Riche, N.; and Tay-
lor, J. G. 2016. From Human Attention to Computational Attention,
volume 2. Springer.

[Shi et al. 2019] Shi, Y.; Guanbin, L.; Cao, Q.; Wang, K.; and Lin,
L. 2019. Face hallucination by attentive sequence optimization
with reinforcement learning. IEEE transactions on pattern analysis
and machine intelligence.

[Sigurdsson et al. 2016] Sigurdsson, G. A.; Varol, G.; Wang, X.;
Farhadi, A.; Laptev, I.; and Gupta, A. 2016. Hollywood in homes:
Crowdsourcing data collection for activity understanding. In Euro-
pean Conference on Computer Vision, 510–526. Springer.

[Sutton and Barto 2018] Sutton, R. S., and Barto, A. G. 2018. Re-

inforcement learning: An introduction. MIT press.

[Tran et al. 2015] Tran, D.; Bourdev, L.; Fergus, R.; Torresani, L.;
and Paluri, M. 2015. Learning spatiotemporal features with 3d
convolutional networks. In Proceedings of the IEEE international
conference on computer vision, 4489–4497.

[Wang et al. 2016] Wang, L.; Xiong, Y.; Wang, Z.; Qiao, Y.; Lin,
D.; Tang, X.; and Van Gool, L. 2016. Temporal segment networks:
Towards good practices for deep action recognition. In European
conference on computer vision, 20–36. Springer.

[Wang, Huang, and Wang 2019] Wang, W.; Huang, Y.; and Wang,
L. 2019. Language-driven temporal activity localization: A se-
mantic matching reinforcement learning model. In Proceedings of
the IEEE Conference on Computer Vision and Pattern Recognition,
334–343.

[Williams 1992] Williams, R. J. 1992. Simple statistical gradient-
following algorithms for connectionist reinforcement learning. In
Reinforcement Learning. Springer. 5–32.

[Wu et al. 2019a] Wu, J.; Chen, T.; Wu, H.; Yang, Z.; Wang, Q.; and
Lin, L. 2019a. Concrete image captioning by integrating content
sensitive and global discriminative objective. In 2019 IEEE Inter-
national Conference on Multimedia and Expo (ICME), 1306–1311.
IEEE.

[Wu et al. 2019b] Wu, W.; He, D.; Tan, X.; Chen, S.; and Wen, S.
2019b. Multi-agent reinforcement learning based frame sampling
for effective untrimmed video recognition. In Proceedings of the
IEEE International Conference on Computer Vision, 6222–6231.
[Xia et al. 2017] Xia, Y.; Tian, F.; Wu, L.; Lin, J.; Qin, T.; Yu, N.;
and Liu, T.-Y. 2017. Deliberation networks: Sequence generation
In Guyon, I.; Luxburg, U. V.; Ben-
beyond one-pass decoding.
gio, S.; Wallach, H.; Fergus, R.; Vishwanathan, S.; and Garnett,
R., eds., Advances in Neural Information Processing Systems 30.
Curran Associates, Inc. 1784–1794.

[Xu et al. 2019] Xu, H.; He, K.; Sigal, L.; Sclaroff, S.; and Saenko,
K. 2019. Multilevel language and vision integration for text-to-
clip retrieval. In Proceedings of the AAAI Conference on Artiﬁcial
Intelligence, volume 2, 7.

[Kiros et al. 2015] Kiros, R.; Zhu, Y.; Salakhutdinov, R. R.; Zemel,
R.; Urtasun, R.; Torralba, A.; and Fidler, S. 2015. Skip-thought
In Advances in neural information processing systems,
vectors.
3294–3302.

[Yeung et al. 2016] Yeung, S.; Russakovsky, O.; Mori, G.; and Fei-
Fei, L. 2016. End-to-end learning of action detection from frame
In Proceedings of the IEEE Conference on
glimpses in videos.
Computer Vision and Pattern Recognition, 2678–2687.

[Yuan, Mei, and Zhu 2019] Yuan, Y.; Mei, T.; and Zhu, W. 2019. To
ﬁnd where you talk: Temporal sentence localization in video with
In Proceedings of the AAAI
attention based location regression.
Conference on Artiﬁcial Intelligence.

[Zhang et al. 2019] Zhang, D.; Dai, X.; Wang, X.; Wang, Y.-F.; and
Davis, L. S. 2019. Man: Moment alignment network for natural
language moment retrieval via iterative graph adjustment. In Pro-
ceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, 1247–1257.

