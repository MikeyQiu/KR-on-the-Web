SUBMITTED TO JOURNAL ,

2019

1

Relation Graph Network for 3D Object Detection in
Point Clouds

Mingtao Feng, Syed Zulqarnain Gilani, Yaonan Wang, Liang Zhang and Ajmal Mian

9
1
0
2
 
v
o
N
 
0
3
 
 
]

V
C
.
s
c
[
 
 
1
v
2
0
2
0
0
.
2
1
9
1
:
v
i
X
r
a

Abstract—Convolutional Neural Networks

(CNNs) have
emerged as a powerful strategy for most object detection tasks on
2D images. However, their power has not been fully realised for
detecting 3D objects in point clouds directly without converting
them to regular grids. Existing state-of-art 3D object detection
methods aim to recognize 3D objects individually without ex-
ploiting their relationships during learning or inference. In this
paper, we ﬁrst propose a strategy that associates the predictions of
direction vectors and pseudo geometric centers together leading
to a win-win solution for 3D bounding box candidates regression.
Secondly, we propose point attention pooling to extract uniform
appearance features for each 3D object proposal, beneﬁting
from the learned direction features, semantic features and spa-
tial coordinates of the object points. Finally, the appearance
features are used together with the position features to build
3D object-object relationship graphs for all proposals to model
their co-existence. We explore the effect of relation graphs on
proposals’ appearance features enhancement under supervised
and unsupervised settings. The proposed relation graph network
consists of a 3D object proposal generation module and a 3D
relation module, makes it an end-to-end trainable network for
detecting 3D object in point clouds. Experiments on challenging
benchmarks ( SunRGB-D [1] and ScanNet [2] datasets ) of 3D
point clouds show that our algorithm can perform better than
the existing state-of-the-art methods.

Index Terms—3D object detection, point cloud, relation graph

network, deep learning.

I. INTRODUCTION

W ITH the widespread availability of 3D scanning de-

vices, depth sensors and light ﬁeld cameras [3], [4], 3D
point cloud data is being increasingly used in many different
application domains such as robotics, autonomous driving, city
planning, infrastructure maintenance etc. Accurate detection
of 3D objects in point clouds is a central problem for mobile
agents to automatically avoid obstacles, plan a route and inter-
act with objects. Converting point clouds to canonical forms
such as depth images, multiple views or voxels have been
popular approaches to subsequently process the 3D data with
Convolutional Neural Networks (CNNs). However, applying
CNNs directly on the raw xyz coordinates of the point cloud
for 3D object detection has not been widely studied. Progress

M. Feng and Y. Wang are with the College of Electrical and Infor-
mation Engineering, Hunan University, Changsha 410082, China (email:
mintfeng@hnu.edu.cn; yaonan@hnu.edu.cn).

L. Zhang is with the School of Software, Xidian University, Xian 710071,

China (email: liangzhang@xidian.edu.cn).

S.Z. Gilani and A. Mian are with the Department of Computer Science and
Software Engineering, The University of Western Australia, Perth, Crawley,
WA 6009, Australia (e-mail: zulqarnain.gilani, ajmal.mian@uwa.edu.au). S.Z.
Gilani is also with the School of Science, Edith Cowan University, Joondalup,
6027, Australia (e-mail: s.gilani@ecu.edu.au)

Manuscript received ***, 2019; revised ***, 2019.

in 3D object detection lags far behind its 2D counterpart
due to the irregular and sparse nature of 3D point clouds.
Recently, PointNet [5] and PointNet++ [6] were proposed to
directly process raw point clouds without converting them
to a canonical form. These methods split the input scene
into overlapping blocks to avoid the expensive computation
and memory cost associated with the huge amounts of data.
Unfortunately, this step adversely effects the detection of 3D
objects when it is necessary to consider the global scene
context.

A straightforward idea is to take inspiration from 2D object
detection frameworks to guide the design of 3D methods. For
example, Generative Shape Proposal Network [7] extends the
classic 2D-based detector Mask R-CNN [8] to 3D. It provides
an analysis-by-synthesis strategy to generate a large number of
3D object proposals by reconstructing the shapes followed by
proposal reﬁnement and instance identiﬁcation in point clouds.
Nonetheless, GSPN [7] is a dense proposal-based method
and relies on two-stage training, which is computationally
expensive. More recently, simpler and more efﬁcient 2D object
detectors have been proposed
[9], [10], [11], [12]. Zhou
et al. [9] represent a 2D object as a single pixel located at
the center of its bounding box, and regress the parameters
(e.g., dimension, orientation, object size) of each bounding box
directly from features of the center pixel. 2D object detection
is thus transformed to a standard keypoint detection problem.
Inspired from the above approach, we extend the 2D ob-
ject detection scheme and propose an algorithm for accurate
geometric center estimation and 3D bounding box regression
over 3D point clouds. Speciﬁcally, we ﬁrst introduce a strategy
that jointly predicts the pseudo geometric centers and direction
vectors leading to a win-win solution for 3D bounding box
candidate regression. A challenge in this cases is that unlike
is surrounded
2D images, where the object’s center pixel
by other pixels,
the geometric centers of 3D objects are
generally in an empty space1 far from points on the object’s
surface. Moreover, 3D objects in cluttered scenes are usually
scanned partially and are noisy. Given the semantic features
of points, it is difﬁcult to regress offset values directly that
measure the distance from the object surface points to their
geometric centers. Inaccurate prediction of pseudo centers will
induce error in the downstream 3D bounding box generator.
to learn more discriminative features from the
Therefore,
object surface points and to compute the center position more
accurately is the key to regress 3D bounding box candidates.
Different from [13], we predict pseudo centers that are close

1For example, the center of a sphere is far from the surface of the sphere.

SUBMITTED TO JOURNAL ,

2019

2

to the geometric center of the object and assign each surface
point a direction vector that points to the geometric center.
The magnitude and direction of these vectors collaborate to
further boosts the accuracy of 3D bounding box candidates.

Regressing 3D bounding boxes often results in duplicate
candidates. A straightforward but naive approach to remove
the duplicates is to use 3D Non-Maximum Suppression (NMS)
with an Intersection over Union (IoU) threshold. However, an
intuitive idea is to exploit the relationship between different
objects in the scene. For example, a chair is often close to
the desk and a computer is often placed on a desk. This
relationship has been exploited in many 2D object recognition
algorithms [14], [15], [16], [17], [18] and is easy to model
since related objects are close to each other in images. How-
ever, 3D object-object relationships are difﬁcult to model since
objects belonging to different categories in cluttered 3D scenes
are at arbitrary distances from each other, and their number
and sizes are also different.

We propose an effective 3D relation module that builds a
3D object-object relation graph between 3D bounding box
candidates for feature enhancement to achieve accurate object
detection. Inspired by [14], we introduce a point attention
pooling method to extract uniform appearance features for
each 3D proposal which are used together with the position
features to deﬁne nodes of the relation graphs. Since objects
in the cluttered scenes are randomly placed and densely
connected, (e.g., the seat part of a chair may be under a
table) one 3D proposal often contains parts from different
objects. Our proposed point attention pooling method exploits
the information obtained from 3D proposals by modelling se-
mantic, spacial and direction relationships of the interior points
simultaneously. This plays an important role in specifying the
intra-object pull forces and the inter-object push forces. The
above relation graphs are inserted into the main framework
and are learned in an unsupervised manner by minimizing the
task speciﬁc losses, like the 3D bounding box regression loss,
cross entropy loss and direction feature loss.

To sum up, our contributions include: (1) A framework
for 3D object detection that directly exploits the raw xyz
point cloud, is single stage and end-to-end trainable. (2) An
optimization method which jointly uses the pseudo geometric
centers and direction vectors for 3D bounding box candidate
estimation. (3) A point attention pooling method to extract uni-
form appearance features for each 3D proposal using semantic
features, pseudo geometric centers and direction vectors. (4)
Constructing a relation graph that exploits the 3D object-
object relationships to represent the appearance and position
relationship between 3D objects. This enhances the appearance
features of each 3D proposal and boosts the performance
of 3D bounding box regression. We explore the effects of
supervised 3D relation graph and multi-graph patterns on
3D relationship reasoning. Experiments are performed on
the benchmark SunRGB-D [1] and ScanNet [2] datasets and
achieve state-of-the-art results. We also conduct a series of
ablation studies to demonstrate the effectiveness of verious
modules of our proposed method.

II. RELATED WORK

2D Object Detection Methods: 2D object detection in im-
ages is a fundamental problem in computer vision and has been
an active area of research for several decades [19]. Numerous
methods have been proposed covering different approaches to
the problem of generic 2D object detection. Some of these
methods can also provide inspirations for 3D object detection
in point clouds. Region proposal driven detectors such as
RCNN [20] enumerate object location from region proposals
at the ﬁrst stage, then classify the proposals and reﬁne them at
the second stage. Hence, such methods are slow and require a
huge amount of storage. This motivated a series of innovations
in this area leading to a number of improved detection methods
such as Fast-RCNN [21], SPPNet [22], Faster RCNN [23],
RFCN [24], Mask RCNN [8], Light Head RFCN [25] etc.

One-stage detection strategies were introduced which skip
the region proposal generation step and directly predict class
scores and 2D bounding box offsets from the input images
with a single network. Several attempts were made to improve
the performance of one-stage detectors, e.g., DetectorNet [26],
OverFeat [27], YOLO [28] and SSD [29].

Recently, some interesting methods building on robust key-
point estimation networks have been proposed for 2D object
detection [9], [10], [11], [12], [30]. These methods are the
inspiration for our proposed 3D bounding box candidates gen-
eration method. Specially, Zhou et al. [9] represent objects by
the center pixel of their 2D bounding box. The object centers
are obtained by selecting peaks in the heat map generated
by feeding the input image to a fully convolutional network.
The center keypoint/pixel based 2D object detection methods
heavily rely on the heat map and peak pixel estimation whereas
it is difﬁcult to generate such heat maps for 3D point clouds.
We address this problem by designing a strategy that uses
pseudo geometric centers and direction vectors to represent
3D objects, and then regress the 3D bounding box candidates.
3D Object Detection Methods: The most common ap-
proach for 3D object detection in a point cloud is to project the
point cloud to 2D images for 3D bounding box regression [31],
[32], [33]. Point clouds are also sometimes represented by
voxel grids for 3D object detection. Zhou et al. [34] divide a
full LiDAR point cloud scene into equally spaced 3D voxels
and propose a voxel feature encoding layer to learn features for
each voxel. Yang et al. [35] encode each voxel as occupancy
and predict oriented 2D bounding boxes in birds eye view of
LiDAR data. PointPillars [36] organize LiDAR point clouds in
vertical columns and then detect 3D objects using a standard
2D convolutional detection framework.

To avoid voxels and the associated computational cost, Qi
et al. [37] proposed a framework to directly process raw point
clouds and then predict 3D bounding boxes based on points
within the frustum proposals. However, their algorithm heavily
relies on 2D object detection. Moreover, PointRCNN [38]
generates 3D bounding box proposals via foreground point
segmentation in the ﬁrst stage, and then learns better local
spatial features for box reﬁnement. These methods are de-
signed for 3D object detection in point cloud data obtained
from LiDAR sensors. However, LiDAR data is very sparse

SUBMITTED TO JOURNAL ,

2019

3

Fig. 1. Pipeline of our proposed method for 3D object detection in point cloud. The ﬁrst part is a 3D object proposal generation module to generate 3D
bounding box candidates from the raw point cloud using PointNet++[6] backbone. The second part is a 3D relation module which contains point attention
pooling and 3D object-object relation graph network. The point attention pooling converts the points’ features contained in each proposal into uniform vectors,
and the 3D object-object relation graph is used to perform relational reasoning on multi graphs or supervised graph which is build on the ﬁxed proposal
features. Then the 3D NMS post-processing step is used to pick high quality 3D bounding boxes.

and there are no cross-connections between different objects
that are naturally separate in the 3D space.

III. PROPOSED APPROACH

VoteNet [13] detects 3D objects in cluttered scenes via a
combination of deep point set networks and Hough voting.
However, VoteNet is unstable when it comes to voting for
the geometric center a partially scanned 3D object. Yang et
al. [39] extracted a global feature vector through an existing
ignores
backbone to regress the 3D bounding boxes that
small objects and heavily relies on the instance segmentation
label. Our proposed 3D bounding box candidates prediction
branch is completely different from them as we associate
the direction vectors and pseudo geometrical centers for 3D
proposal regression.

Networks for Direct Point Cloud Processing. Learning
geometric features directly from point clouds becomes even
more essential when color information in unavailable e.g. in
LiDARs. Qi et al. [5] proposed PointNet that learns point level
features directly from sparse and unordered 3D points. All 3D
points are passed through a set of Multi-Layer Perceptrons
(MLP) independently and then aggregated to form global
features using max-pooling. PointNet achieves promising per-
formance on point cloud classiﬁcation and segmentation tasks.
The basic PointNet framework has since been extended by
many researchers [40], [6], [41], [42], [43], [44], [45]. Re-
cently, Duan et al. [46] proposed a structural network archi-
tecture for point clouds that takes the contextual information
into account. Similarly, Wang et al. [41] designed a graph
convolution kernel that selectively focuses on the most related
parts of point clouds and captures the structural features for
semantic segmentation. Among these methods, PointNet++ [6]
is the most commonly used hierarchical framework and is
often chosen as the base feature extraction unit for different
point cloud related tasks. PointNet++ extracts global features
from neighborhood points within a ball query radius, where
each local point is processed separately by an MLP. In this
work, we use PointNet++ [6] as the backbone architecture for
point-level feature learning.

A. Overview

Figure 1 shows our framework comprising two parts, one
part directly processes the raw points to generate 3D bounding
box candidates while the other part builds the 3D object-
object relation graphs to enhance the appearance features of
the proposals for more accurate 3D bounding box regression.
Finally, a 3D non-maximum suppression (NMS) is used to
remove the duplicate candidates and obtain the ﬁnal 3D
bounding boxes.

Given a N × 3 point cloud, we ﬁrst subsample it and learn
deep features from it using the PointNet++[6]. The output
is a subset of M points of size M × (D1 + 3), where D1
is the dimension of learned features. Each subsampled point
passes through an MLP with fully connected layers, ReLU and
batch normalization and generates a pseudo center, a semantic
feature and a direction vector independently. This process
enables each sampled point on the object surface to have a
direction vector pointing to the geometric center and produces
a pseudo center point that is close to the geometric center of
the object. To accomplish this task, we propose a direction
loss and a cross entropy loss of Ksem classes to supervise the
network. The pseudo centers, semantic features and direction
vectors are then processed to generate Kc 3D bounding box
candidates. Based on the direction features and semantic
features, we extract uniform appearance features from internal
points of each positive proposal using our proposed point
attention pooling method. Later, graph convolution networks
are used to perform relational reasoning on graph which are
built on the appearance and position features. Multi graphs and
supervised graph methods are used to enhance the performance
of the graph network. Next, the output of graph network is
used to enhance the appearance features of the proposals and
regress Kc accurate 3D bounding boxes. Finally, the 3D NMS
picks highest quality 3D bounding boxes to output the detected
K objects. In the following Sections, we give details of the
individual modules of our method.

SUBMITTED TO JOURNAL ,

2019

4

B. 3D Object Proposal Generation

Inspired by VoteNet [13] we ﬁrst search for the geometric
centers of the objects in each semantic class. However, our
work signiﬁcantly differs from VoteNet [13] as we propose a
new direction loss function to supervise the learning process of
the MLP network, obtain the pseudo centers that are close to
the geometric center of object and assign each sampled point
a direction vector that points to the geometric center of object.
1) Direction feature learning: Given an unordered point
cloud P0 = {p1, p2, . . . , pN } with pi ∈ Rd0 , where N is the
total number of points and d0 is the feature dimension of each
point. We use xyz values of the point cloud only i.e. d0 = 3.
An entire 3D scene often contains millions of 3D points
which are densely sampled on objects that are close to the
sensor and sparsely sampled on far objects. Processing these
points simultaneously is computationally expensive. There-
fore, we subsample the scene to M points (M << N ) to
represent the entire scene. Instead of randomly subsampling
the point cloud, we leverage the recently proposed Point-
Net++ [6] for point feature learning due to its efﬁciency and
demonstrated success on tasks ranging from point cloud clas-
siﬁcation, point cloud semantic segmentation to point cloud
generation [5], [41], [44]. The backbone feature learning net-
work has several Set Abstraction (SA) and Feature Propagation
(FP) layers with skip connections, which output a subset of
the input points with 3D coordinates (x, y, z) and an enriched
d1-dimensional feature vector. The backbone network extracts
local point features and selects the most discriminative points
within a spherical region. The output M points are denoted
by P1 ∈ RM ×(d1+3).

Next, we learn direction vectors pointing to the ground truth
geometric center and generate pseudo centers that will be close
to the ground truth geometric center for the sampled points
P1. Inspired by the concept of center pixels estimation in 2D
object detection [9], we regress a 3D bounding box using the
predicted pesudo centers and direction vectors jointly. For a
set of sampled points P1 = {pi}M
i=1, where pi = [gi; fi] with

Fig. 2. Visualization of the direction vectors and pseudo centers. In order
to make them easier to distinguish, we select a part of the predicted direction
vectors (green arrows) and pseudo centers (blue points) in one point cloud
scene and show them in the adjacent two chairs respectively. For better view,
we used the color information of the original point cloud, which is not input
to our network.

gi ∈ R3 and fi ∈ Rd1 , we train a shared MLP network
with fully connected layers, ReLU and batch normalization.
The network takes pi and inputs and outputs the Euclidean
i ∈ R3 and their corresponding feature
space coordinates g(cid:48)
i ∈ Rd1 such that the pseudo centers generated from the
f (cid:48)
point pi are denoted as p(cid:48)
i, f (cid:48)
i=1. The MLP
network also outputs a normalized direction feature vi ∈ R3
for each object surface point. We deﬁne the vector to be the
one pointing towards the ground truth geometric center of
each object. The direction feature can describe the inter-object
relationship accurately without being affected by other objects.
To learn the pseudo center and direction feature, we deﬁne the
direction loss as follows:

1 = {p(cid:48)

i = [g(cid:48)

i ], P (cid:48)

i}M

Ldir =

1
Mspo

(cid:32)

(cid:88)

Bi

i

((cid:107)g(cid:48)

i − g∗

i (cid:107) − vi · vi

∗)

(1)

(cid:33)

where g∗
is the ground truth geometric center of the 3D
i
bounding box of each object, gi is the point on an object
surface, Bi indicates whether or not a seed point pi is on an
object surface, Mspo is the total number of points on an object
∗ is the ground truth normalized direction feature
surface and vi
which points towards the geometric center, vi

∗ = gi−g∗
i
i (cid:107)
(cid:107)gi−g∗

Compared to regressing the pseudo centers directly from
point semantic features [13], optimizing the direction fea-
tures and the pseudo centers jointly distributes the estimated
pseudo-centers around the geometric center more uniformly.
Moreover, the proposed direction loss function generates more
discriminate semantic features for points on the object surface
in the MLP network and provides more accurate regional
information for subsequent proposal region feature extraction.
For illustration purposes, Figure 2 shows the direction vectors
(green arrows) and pseudo centers (blue points) generated on
surface points of two adjacent chairs in one point cloud scene
respectively. We can see that the direction vectors belonging
to the same chair are oriented towards their geometric center,
so that different objects can mutually repel each other while
different regions belonging to the same object are attracted
to each other. Moreover, the pseudo centers cluster at the
geometric center of the object providing a basis for the
regression of the 3D bounding box candidates together with
the direction vectors.

2) Proposal Candidates Aggregation: For a 3D point cloud
1 ∈ R3+d1 , which
scene, there are a set of pseudo centers P (cid:48)
create canonical “meeting points” for context aggregation
from different parts of each object. Similar to VoteNet [13],
we sample and cluster these pseudo centers, then aggregate
semantic features together with the direction vectors of their
corresponding surface points to predict Kc 3D bounding box
candidates for all objects and classify them with objectness
scores and semantic scores. Each proposal
is represented
by a ﬁxed vector with an objectness score, bounding box
parameters Kb × C ( C represents center, heading and scale
parametrized as in [37]) and semantic classiﬁcation scores.
Refer to the loss function part III-D for more details on the
parameters.

SUBMITTED TO JOURNAL ,

2019

5

Fig. 3. The architecture of proposed point attention pooling branch. Given a 3D bounding box candidate, although the sampled internal points may belong to
different objects (desk and chair), we extract the main appearance features of the proposal by separately learning the semantic hsem and spatial interactions
hspa because the direction vectors can distinguish the points belonging to different objects. Finally, we extract a ﬁxed appearance feature for each proposal
by concatenation, transformation and element wise sum. Colors in this ﬁgure have been used to aid a better display.

C. 3D Object-Object Relation Graphs

There is always some relationship between proposals in
a 3D scene. We exploit
these relationships to enrich the
representation of the proposals. However, the modelling of cor-
relation between the proposals faces three primary challenges.
First, the points in each region are sparse, varied in number
and non-uniformly distributed in space. However, we need to
extract ﬁxed dimension appearance features to represent each
region, to be used as nodes of the relation graph and play an
important role in graph convolution operations. Second, apart
from the appearance features, we also need to explore the
3D spatial location interaction between different proposals in
order to have sufﬁcient representation capabilities to form the
graph nodes. Third, the relationship among proposals is not
well deﬁned. Hence, we learn the relationships using multiple
graphs or supervised graphs where a center mass loss function
is used to guide the relationship learning process.

1) Point Attention Pooling: In a typical 2D object detec-
tion pipeline, Region Of Interest (ROI) pooling [21] or ROI
Align [23] are used to extract uniform features of each region
proposal. However, since the points within a 3D bounding box
candidate are usually unordered and sparse, straightforward
extension of 2D ROI pooling to point clouds is not possible.
We propose a new method named point attention pooling to
extract compact features for each 3D bounding box candidate,
as shown in Figure 3.

For each proposal, a naive way would be to apply Point-
Net++ [6] to the interior points without considering their
inner interactions and output a uniform feature. However,
such an approach does not exploit the semantic information.
Instead, our point attention pooling method exploits proposal
information by modelling semantic,
location and direction
relationship of the interior points simultaneously, which plays
an important role in indicating intra-object pull forces and
inter-object push forces. Our point attention pooling follows
two steps. Firstly, we randomly choose NR interior points for
each proposal with their semantic features s ∈ Rd1 , spatial
coordinates and direction vectors as initial features. When
the number of points in a 3D bounding box is less than

NR, we repeat the interior points until we get the predeﬁned
number of points. To make the model robust under geometrical
transformations, we move the 3D points of each proposal
to their mean spatial location. The canonical locations are
concatenated with the directional vectors to represent spatial
features l ∈ R6 of points within the proposal. In the second
step, we explore the semantic and spatial interactions between
points pi and pj. Both semantic features s and spatial features l
of interior points play critical roles in interaction learning. For
example, repetitive object patterns are exploited by semantic
features while the linkage relationship is captured by spatial
features. Therefore, we deﬁne point attention between the
ith point and others by jointly learning semantic and spatial
interactions:

R =

h (hsem (si, sj) , hspa (li, lj))

(2)

1
NR

(cid:88)

j

where both i and j are the indices of interior points, h, hsem
and hspa are functions, and R ∈ R1×d2 is the learned appear-
ance feature for each proposal. The pairwise function hsem
and hspa aim to exploit the semantic and spatial relationship
between pi and pj respectively, and then h fuses the two
relationships followed by an element wise sum for all pj.
Figure 3 shows an illustration of the proposed point attention
pooling layer, which aims to learn appearance features of
the proposal region. Let ds and dl be the feature dimensions
after the hsem and hspa, the number of parameters for point
attention pooling are:

O(pooling) = Kc(d2 + ds + dl)

(3)

2) Appearance and Position Relationship: As described
above, a series of 3D bounding box candidates are regressed by
the pseudo points and direction vectors. Since the 3D scenes
are composed of point clouds which are sparse, unordered and
usually represent partial objects, the estimated pseudo points
will have great uncertainty and can introduce relatively large
errors in the regressed 3D bounding box candidates. Once we
obtain the uniform appearance features for each 3D bounding
box candidate, we explore a method to enhance the features

SUBMITTED TO JOURNAL ,

2019

6

Fig. 4. Overview of our proposed 3D Object-Object Relation Graph. We ﬁrst extract uniform appearance features for all the 3D bounding box candidates
and use them together with position features to build relation graphs. Next, graph convolutions are conducted to perform relation reasoning. The output of
all graphs are fused with the appearance features to regress more accurate 3D bounding boxes. Note that we use only xyz geometric point cloud data for
learning and inference. The RGB values are shown only for better visualization.

within each proposal region. Inspired by the recent success of
relation reasoning and graph neural networks for videos [15],
2D object detection [14] and Natural Language Processing
(NLP) tasks [47], we use the 3D object-object relation graph
structure to explicitly model pairwise relationship information
for enhancing the 3D proposal features. To obtain sufﬁcient
representational power that captures the underlying relation-
ship between different proposals, both appearance features
and position features are considered. Moreover, we note that
appearance and position relationships have different effects on
the relation graphs. We further investigate this empirically in
the ablation study i.e. section IV-C.

Formally, a relation graph is deﬁned as G = (V, α) where
V is the set of nodes and α is the set of edges. The nodes in
our graph correspond to Kc 3D bounding box candidates and
are denoted as (Rm, Um), where Rm and Um are appearance
features and position features of the m-th proposal respec-
tively. We construct the graph G ∈ RKc×Kc to represent pair
wise relationship among the proposals where the relationship
value αmn indicates the relative importance of the proposal n
to proposal m.

Given an input set of Kc proposals {(Rm, Um)}Kc

m=1, the
relationship feature Fm of all proposals with respect to the
m-th proposal is computed as,

Fm =

αmn(WrRn)

(4)

(cid:88)

n

where αmn is the relationship value between the m-th and
n-th proposals. The output is a weighted sum of appearance
features from other proposals, linearly transformed by Wr.
In our experiment, we adopt the following function to deﬁne
relation value,

αmn = sof tmax

(cid:32)

mn · exp(αA
αP
αP

mn)
mn · exp(αA

Kc

mn)

(cid:80)

(cid:33)

(5)

to 1. For the appearance relationship, we use dot-product to
compute relationship value between two proposals,

αA

mn =

(W 1

a Rm)T (W 2
√
da

a Rn)

(6)

√

where da is transformed feature dimension of the appearance
da works as a normalization factor.
features Rm and Rn, and
For position relationship, the features Um = (Lm, Sm)
represent both the spatial location and geometric structure
of each 3D bounding box candidate. The spatial
location
Lm is represented by the center point of each bounding
box while the geometric structure Sm is represented by the
parameters of each bounding box. Inspired by [15], [48],
we investigate two methods to exploit position features for
considering the position relationship between proposals: (a)
3D position mask. Similar to the image convolution operation
where pixels within a local range contribute more to the
reference pixel, we assume that proposals from local entities
are more important than the proposals from distant entities.
Based on the spatial distance between proposals, we deﬁne a
threshold δ to ﬁlter out distant proposals. Therefore, we set
αP
mn to zero for two proposals whose distance is above the
threshold. Mathematically,

αP

mn = ReLU (Wp (ε(Um, Un)|D(Lm, Ln) ≤ δ))

(7)

where D(Lm, Ln) denotes the Euclidean distance between
center points of two proposals and δ is the distance threshold
which is a hyper-parameter. The position features are em-
bedded in a high-dimensional representation [47] by ε. The
feature dimension after embedding is dp. We then transform
the embedded features into a scalar by weight vector Wp,
followed by ReLU activation. (b)3D position encoding. Al-
ternatively, we can use all the proposals to compute their
position relationship with the reference proposal. Similar to
Equation (7), the distance threshold is ignored and the rest is
retained, as shown below.

where αA
mn denotes the appearance relationship between two
proposals and the position relationship is computed by αP
mn.
We normalize each relation graph node using softmax function
so that the sum of all the relationships for one node is equal

αP

mn = ReLU (Wpε(Um, Un))

(8)

Each relationship function in Equation (4) is parametrized
a and Wp. Recall that d2 is the

by matrices Wr, W 1

a , W 2

SUBMITTED TO JOURNAL ,

2019

7

dimension of the input appearance feature R. The number of
parameters for one relationship module is

they are in similar scales with λ1 = 0.4, λ2 = 1, λ3 = 0.2,
and λ4 = 0.1 when we use supervised graph model or λ4 = 0.

O(relation) = Kcdp + da(2d2 + Kc) + d2
2

(9)

3) Multiple Graphs vs Graph Supervision: Since the 3D
object-object relationship among proposals is not well deﬁned
and a single relation graph typically focuses on a speciﬁc
interaction information between proposals, we extend the
single relation graph into multiple graphs to capture com-
plex relationship information. That is, we build the graphs
G = (cid:0)G1, G2, . . . , GNg (cid:1) on the same proposals set, where Ng
is the number of graphs. Every graph Gi is computed as in
Equation (4), but with unshared weights. Building multiple
relation graphs allows the model to jointly attend to different
types of relationships between proposals. Finally, a multi-
relation graph module aggregates the total Ng relationship
features and augments the input appearance features,

Rm = Rm + Sum{F 1

m, . . . , F Ng
m }

(10)

We supervise each graph by giving pseudo ground truth
graph weights to learn more accurate relationships. The un-
supervised graph weights are learned by minimizing the task
speciﬁc total loss which contains 3D bounding box regression
loss, cross entropy loss, direction feature loss etc. We must
construct ground truth labels in matrix form to supervise the
learning of G without the need for relationship annotations in
the raw point cloud. Our approach is inspired from [49]. We
want our attention weights to focus on relationships between
different objects. Hence, for each entry αT
mn of the ground
truth relationship label matrix αT , we assign αT
mn = 1 only
when: (1) 3D object m and 3D object n overlap with the
ground truth 3D bounding boxes of two different objects with
IOU ≥ 0.15 and (2) their category labels are different.

Lsup = − (1 − M )2 log(M )
(11)
where M = (cid:80) sof tmax(G)(cid:12)GT is the center of mass. When
minimizing this loss, we would like G to have high relation
weights at those entries where αT
mn = 1, and low relation
weights elsewhere.

As shown in Figure 4, the appearance features are ﬁrst
extracted from 3D bounding box candidates and then used
with the position features to build relation graphs. Graph
convolution is then used to perform relation reasoning. The
outputs of all graphs are then fused with the appearance
features to regress more accurate 3D bounding boxes. We
use the multiple graphs and graph supervision methods to
explore which one is more beneﬁcial to the establishment of
relationships between different proposals. Their performance
is discussed in the ablation study IV-C.

D. Loss Function

Our complete network can be trained in an end-to-end
manner with a multi-task loss including a directional loss,
an objectness loss, a 3D bounding box estimation loss and
a semantic classiﬁcation loss. We weigh the losses such that

Ltotal = Ldir + λ1Lobj + λ2Lbox + λ3Lsem + λ4Lsup (12)

The direction regression loss Ldir is deﬁned in Equation 1
and discussed in detail in Section III-B. Note that the SUN
RGB-D [1] dataset does not provide instance segmentation
annotations. Therefore, we compute the ground truth object
centers as the centers of the 3D bounding boxes and consider
any point inside a ground truth bounding box as an object
point. Similar to [13], we keep a set of up to three ground
truth votes, and consider the minimum distance between the
predicted vote and any ground truth vote in the set during vote
regression on this point. For ScanNet [2], we consider any
point sampled from instance mesh vertices as an object point
and compute the ground truth object center as 3D bounding
box center.

The objectness loss Lobj is a cross-entropy loss for two
classes (positive and negative proposals) while the semantic
classiﬁcation loss is the cross-entropy loss for C classes. We
follow [13], [37] in deﬁning the box loss, which comprises the
center regression, heading estimation and size estimation sub-
losses. Speciﬁcally, Lbox = Lc−reg + 0.1Lh−cls + Lh−reg +
0.1Ls−cls+Ls−reg, where Lc−reg is the loss for the box center
regression, Lh−cls and Lh−reg are losses for heading angle
estimation while Ls−cls and Ls−reg are losses for bounding
box size regression. The dimension of the output of the last
layer is 2 + 6 + 2N H + 4N S + N C channels, where the ﬁrst
2 channels are for objectness classiﬁcation, the 6 channels are
for pseudo center and directional vector regression, N H is the
number of heading bins, N S is the number of size templates
and N C is the number of semantic classes. We use the robust
L1 smooth loss in all regressions for the box loss. Both the
box and semantic losses are only computed on positive vote
clusters and normalized by the number of positive clusters.

E. Comparison to 2D Visual Relationships

The

classic

detection

2D object

approaches,

e.g.,
RCNN [20], Fast-RCNN [21] and Faster RCNN [23],
only use features within the proposals to reﬁne the bounding
boxes. The surrounding and long term information is not
considered which is also important for 2D object detection.
Santoro et al. [50] introduced a relation networks augmented
method on visual question answering between different
objects and achieved performance superior human annotators.
Hu et al. [14] proposed an object relation module to learn
the relationships between different proposals which captures
the 2D appearance and location relations simultaneously, and
evaluated the effectiveness of inserting the modelled relations
in the RCNN based detection framework. Wu et al. [15]
used actor relation graphs to learning the relation information
between multi person for recognizing group activity, which
achieved signiﬁcant gain on group activity recognition
accuracy. Moreover, many works also showed that modelling
relation information are useful for action recognition [51],
[52], [53]. These image based relation models mostly rely

SUBMITTED TO JOURNAL ,

2019

8

on the extraction of regions of interest (RoI) features where
regular pooling methods can be used, and the deﬁnition of
location relation generally use the center point of each 2D
bounding box since the 2D objects in an image are interlaced
and occluded. Although these methods are instructive for
our 3D relationships learning for object detection in point
cloud, they can not be used directly. Therefore, we design
a completely new approach to establish interaction model
between 3D objects.

In 3D point cloud scenes, objects of various sizes are
randomly placed in space, often occluding each other and with
dense object-to-object connections. Qi et al. [13] proposed
a VoteNet which detects 3D objects from the raw point
clouds without splitting the scene into overlapped cubes.
VoteNet regresses the 3D bounding boxes for all 3D objects
using voting, sampling and clustering. However, calculating
the pseudo centers directly from the sparse and unordered
points on object surface is an unstable approach and will
the regression of 3D bounding boxes from pseudo
affect
centers. Yi et al. [7] introduced a generative shape proposal
network (GSPN) for 3D instance segmentation which takes
an analysis-by-synthesis strategy to generate 3D proposals for
all instances where the shape proposal generation is just an
intermediate process. Similar to GSPN [7], Yang et al. [39]
segment the instances in 3D point cloud scene by regressing
3D bounding boxes for all instances. The proposed 3D-BoNet
extracts a global feature vector through an existing backbone
to regress the 3D bounding boxes, which ignores small objects.
Moreover, the GSPN [7] and 3D-BoNet [39] heavily rely on
the point level mask labels. Note that all these methods do
not consider the relationships between the surrounding objects
and semantic information in the global 3D space. Unlike the
above frameworks, we propose the relation graph network to
detect 3D objects in point cloud scenes. We regress the 3D
bounding box candidates through the predicted pseudo centers
and direction vectors jointly, where these two features can
take advantage of each other to further boost the accuracy of
3D bounding box candidates. We also build the 3D object-
object relation graph module using appearance features and
position features to learn the interactions between different
3D proposals for 3D bounding box reﬁnement. Furthermore,
we explore multi graphs and supervised graph strategies to
drive relation modules that learn stronger relationships.

IV. EXPERIMENTS AND DISCUSSION

We ﬁrst introduce two widely-used 3D object detection
benchmarks and the implementation details of our method
and then present a series of ablation studies to analyse the
efﬁcacy of the proposed units in our model. We also compare
the performance of our method with the state of art. Finally,
we show visualizations of our learned 3D object-object relation
graph and present the 3D object detection results.

A. Dataset

All experiments are performed on the publicly available
SunRGB-D [1] and ScanNet [2] datasets. The SunRGB-D [1]
dataset contains 10,335 RGB-D images with dense annotations

in both 2D and 3D for all object classes. We split it into a
train set of 7,000 scenes and a validation set of 3,335 scenes.
For our purpose, we reconstruct point cloud scenes from the
depth images using camera calibration parameters, where each
object is annotated by a 3D bounding box presented by center
coordinates, orientations and dimensions.

The ScanNet [2] dataset contains 1,513 scans of about 707
unique real-world environments. A ground truth instance level
semantic label is assigned to each reconstructed 3D surface
mesh. We split the data into a train set of 1200 scans and a
validation set of 3,335 scans. We sample points from vertices
of the 3D surface mesh and compute 3D bounding box of each
instance following the method proposed by [54].

Following [55], [13], we augment

the training data by
randomly ﬂipping each point cloud scene along the X-axis
and Y -axis in camera coordinates, randomly rotating around
the Z-axis by an angle selected uniformly between [−30◦, 30◦]
and globally scaling between [0.9, 1.1]. We follow the standard
protocols for performance evaluation.

The SunRGB-D [1] and ScanNet [2] datasets are mainly
indoor scenes where the objects are densely interlaced and
randomly placed. A 3D bounding box may contain one object
and partial areas from other objects in some cases. Limited by
the RGB-D sensors, the SunRGB-D [1] has partial scans and
the reconstructed point cloud scenes are noisy. These condi-
tions make it challenging to detect 3D objects directly from
point clouds. Compared to the SunRGB-D [1], ScanNet [2]
contains more complete objects.

B. Implementation Details

Our 3D object detection architecture contains a 3D proposal
generation module and a 3D relationship module followed
by 3D NMS post-processing. In the ﬁrst stage, we randomly
sample N = 20K points from each reconstructed point cloud
scene of SunRGB-D [1] and N = 35K points from the
3D scans of ScanNet [2].The 3D object proposal generation
module is based on PointNet++ [6] with four Set Abstrac-
tion (SA) layers for learning local features and two Feature
Propagation (FP) layers for upsampling. The receptive radius
of the SA layers are 0.2, 0.4, 0.8 and 1.2 in meters, the
number of the subsampled points are 2048, 1024, 512 and
256 respectively. The output size of PointNet++ is 1024×259,
where M = 1024 is the number of sub-sampled points and
259 is the feature dimension (the last 3 channels are for 3D
coordinates). The data is then fed to an MLP and the size of
outputs are 1024×259, 1024×259 and 1024×262 respectively,
the last 6 channels are for 3D coordinates of pseudo centers
and direction vector of sampled M points. After sampling
and clustering, a total of Kc = 256 3D bounding boxes are
generated.

In the second stage, we extract a ﬁxed dimensional appear-
ance feature Rm = 1 × 256 for constructing the 3D object-
object relation graph. We arbitrarily set the distance threshold
δ to 1
z), where dx, dy and dz are
the xyz-axis limits of each 3D scene. We set NR = 128,
d2 = 256, ds = 64, dl = 32, dp = 256 and da = 256.

4 of the

x + d2

y + d2

(d2

(cid:113)

SUBMITTED TO JOURNAL ,

2019

9

TABLE I
EXPLORING THE EFFECT OF DIRECTION FEATURES. EVALUATION METRIC
IS MEAN AVERAGE PRECISION (MAP) WITH 3D BOUNDING BOX IOU
THRESHOLD 0.25 AS PROPOSED BY [1].

Method

Base model

Base model + Direction features (ours)

mAP@0.25

57.2

57.9

TABLE II
ANALYSING THE EFFECT OF THE PROPOSED POINT POOLING ATTENTION
METHOD. WE COMPARE THE POINT ATTENTION POOLING WITH SA
LAYER [6], FEATURE AVERAGE AND FEATURE MAXIMUM. WE ALSO
EVALUATE THE EFFECT OF DIRECTION FEATURES ON POINT ATTENTION
POOLING METHOD.

Methods

SA layer [6]
Feature average
Feature maximum

Point attention pooling w/o direction features
Point attention pooling (ours)

mAP@0.25

58.6
58.0
57.6

58.9
59.2

In SUN RGB-D: N H = 12, N S = N C = 10, in ScanNet:
N H = 12, N S = N C = 18.

We train the entire network end to end from scratch with
an Adam optimizer, batch size 6 and initial learning rate of
0.001. The learning rate is decreased by a factor of 10 after 100
and 160 epochs. We train the network on two NVIDIA GTX
TitanX GPUs in the PyTorch framework. Our network is able
to take point clouds of entire scenes and generate proposals
in one forward pass.

C. Ablation Studies

We conduct four groups of ablation experiments on the
SunRGB-D [1] dataset. We select this dataset as it contains
partial and noisy scans thereby making our task more chal-
lenging.

1) Effect of Direction Features: To simplify the experi-
ments and get more intuitive result, we build a concise base
framework that only contains the 3D proposal generation mod-
ule and 3D NMS post-processing. Hence, the total loss func-
tion of the base model are deﬁned as Ltotal = L(cid:48)
dir +λ1Lobj +
λ2Lbox + λ3Lsem, where λ1 = 0.5, λ2 = 1 and λ3 = 0.1, the
dir = 1
direction loss function L(cid:48)
i (cid:107), which
Mspo
only contains the distance norm between the sampled points
on object surface and their corresponding object geometric
center. In contrast to L(cid:48)
dir, we use the proposed direction
loss function Ldir, as deﬁned in Equation (1), which also
generates a direction vector for each object surface point
while regressing a pseudo center for them. The settings of
PointNet++ remain the same as the original network.

i − g∗

i (cid:107)g(cid:48)

Bi

(cid:80)

As shown in Table I, using the proposed loss function results
the direction
in improved performance which means that
features improve pseudo center estimation and 3D bounding
boxes regression.

2) Point Attention Pooling: To extract appearance features
from each 3D bounding box candidate for relation graph con-
struction, we propose a point attention pooling method to make

Fig. 5. Comparing the affect of varying number of graphs on 3D object
detection performance keeping the other settings of our framework unchanged.

TABLE III
EXPLORING THE EFFECT OF 3D OBJECT-OBJECT RELATION GRAPH ON 3D
OBJECT DETECTION. WE MAINLY CONSIDER TWO FACTORS, I.E., THE
NUMBER OF RELATION GRAPHS AND SUPERVISED RELATION GRAPH.

Methods

mAP@0.25

w/o graph
1 graph w/o supervision
1 graph w/ supervision

3 graphs w/o supervision

57.9
58.3
58.5

59.2

use of the interactions of the interior points. In this section, we
explore the efﬁcacy of point attention pooling as compared to
set abstraction (SA) layer [6], feature average or feature max.
Feature average and feature maximum methods are connected
to the MLP and their outputs are one dimensional features
of the same size as our proposed method. We use these four
methods to extract proposal features and then use them as
appearance features to build relation graph. The other settings
of our proposed framework remain the same as the original
network.

From Table II we can see that the point attention pooling
method achieves the best performance. We observe that the
feature average and feature maximum methods do not perform
as good because they extract proposal region features by
simply computing the mean and extreme values respectively.
Since objects in the scenes of SunRGB-D [1] dataset are
randomly placed and densely connected, e.g., the seat part
of a chair may be under a table, a 3D bounding box candidate
often contains parts from different objects. Therefore, it is
necessary to fully gather the points of the same object and
learn the semantic and geometric information associated with
them when extracting proposal region features. In the last two
rows of Table II, we can see that direction features on the
point attention pooling does provide some improvement. Our
interpretation is that the direction vectors make points of the

TABLE IV
COMPARISON ON THE EFFECT OF APPEARANCE AND POSITION FEATURES.

Method

mAP@0.25

w/o appearance features
w/o position features
w/ appearance features (w/ 3D postion mask)
w/ appearance features (w/ 3D position encoding)

57.5
58.4
58.9
59.2

SUBMITTED TO JOURNAL ,

2019

10

same object attract each other, and points of different objects
repulse each other.

3) 3D Object-object Relation Graph: We now perform

ablation studies on the following three key parameters:

(a) Number of relation graphs: As shown in Figure 5, using
more relation graphs (while keeping everything else constant)
steadily improves the accuracy of 3D object detection up to
three graphs after which there is a gradual drop in accuracy.
Therefore, we use three graphs in the remaining experiments
unless otherwise mentioned. One might intuitively think that
the 3D object detection accuracy will continue to improve
with increasing number of graphs but practically,
this is
not the case. The relationships between different objects are
learned by building graphs using ﬁxed size proposal region
features, which enhances the features of each region to return
more accurate 3D bounding boxes. The relationships between
different objects in most scenes of SunRGB-D [1] dataset are
not particularly complicated, and although augmentation is
performed, the training data is limited to only 7000 scenes.
When the number of graphs increases, the number of model
parameters also increases leading to over-ﬁtting.

(b) Supervised relation graph: To examine the supervised
graph strategy for 3D object detection, we choose a baseline
model with 1 graph only and an improved model with 1 graph
supervised by the center of mass loss. All other settings of the
framework were kept ﬁxed during this experiment. The results
are given in Table III, and indicate that the supervised graph
method is indeed better than that unsupervised case. In addi-
tion, we observe that the 3 graphs model without supervision
is better than the 1 graph model with supervision. The center
mass loss function allows the network to directly learn the
relationships between different objects that are predeﬁned by
us. In the absence of supervision, the relationship coefﬁcients
between different objects are indirectly learned in conjunction
with the task speciﬁc loss function. The detection results
depend more on the size of the training data and the design
of the network structure. Detection result of the supervised 1
graph model is worse than the 3 graphs model because we
only provide one ﬁxed prior situation which can only reﬂect
one relationship case between different objects. Although the
3 graphs model is supervised by the task speciﬁc loss function,
it has enough parameter space to explore the relationships
between different objects and hence works the best. Therefore,
in the remaining experiments, we use a 3 graphs model without
supervision unless stated otherwise.

(c) Usage of appearance and position features: We ﬁrstly
study the effect of appearance features on modelling the
3D object-object relation graphs abstracted by our proposed
point attention pooling method. We build a single framework
without using appearance features to build the relation graphs.
The results are listed in the ﬁrst and third rows of Table IV,
it
is obvious that explicitly modelling the relation graphs
between different objects using appearance features improves
performance. Next, we study the effect of position features
on modelling the relation graphs, which are deﬁned by the
distance mask and distance encoding. From the last three
the position features
rows of Table IV, we observe that
yield improvement for 3D object detection accuracy, and the

distance mask performs better than the distance encoding.
The appearance features extracted from each proposal region
play an important role in the process of building relation
graphs, which is used to represent 3D bounding box candidates
discriminatively. The use of appearance features determines
whether the relation graphs can learn the relationships between
different objects and enhance the features of each proposal
region. Due to the complexity of spatial distribution within
the scenes, the introduction of position features also better
establishes the spatial relationships between different objects.
Thus, in all our experiments, we apply the appearance and
position features together to build relation graphs unless stated
otherwise.

D. Complexity

We use the following values for the parameters in Equations
(3) and (9), Kc = 256, d2 = 256, ds = 64, dl = 32, dp = 256,
da = 256. When Ng = 3, our proposed point attention pooling
method has about 0.09 million parameters and the relation
graphs module has about 0.9 million parameters. Table VIII
shows that the complexity of our proposed network is much
lower than F-PointNet [37] and 3D-SIS [54], but a little more
than VoteNet [13]. The base model indicates the most simple
pipeline that does not include the point attention pooling and
3D object-object relation graph, and is similar to VoteNet [13].
We can see that the increase in model complexity brought by
our complete framework is relatively small compared to the
entire detection architecture.

E. Comparison with the State of the Art Methods

We ﬁrst evaluate our method on SunRGB-D dataset i.e. ten
common 3D object categories. Note that we do not use the
color information of point clouds in our model. We report the
average precision (AP) with an IoU threshold 0.25 as the eval-
uation metric. As shown in Table V, our method performs bet-
ter than the state-of-the-art approaches. The results of baseline
methods are taken from the original papers for fair comparison.
Particularly, the Deep sliding Shapes (DSS) [56] and COG [57]
are both voxel based detectors which combine RGB and 3D
coordinate information for detection and classiﬁcation. 2D-
driven [58] and F-PointNet [37] rely on the 2D object detectors
in the projected images with RGB and 3D coordinate infor-
mation. VoteNet [13] only uses raw point cloud as input with
3D coordinate information. Note that our method outperforms
DSS [56], COG [57], 2D-driven [58] and F-PointNet [37] by at
least 5.2% mAP@0.25 even though they use dual modalities.
Our method also outperforms VoteNet [13]. Furthermore, our
method provides the best results on 6/10 classes, even on
objects with partially missing data (e.g., chair and nightstand),
and achieves higher accuracy than VoteNet [13] on categories
such as bathtub, bookshelf, desk and sofa, mainly because our
3D bounding box candidate regression strategy is more stable.
Table VI shows results on the ScanNet dataset with indi-
vidual accuracies on the 18 categories. Table VII shows the
overall accuracy. Particularly, 3D-SIS [54] uses 3D CNN to
detect objects which combines 3D coordinates and multi-views
to improve performance. We choose two cases (5 views and

SUBMITTED TO JOURNAL ,

2019

11

TABLE V
QUANTITATIVE COMPARISON OF 3D OBJECT DETECTION IN POINT CLOUD ON SUNRGB-D [1] DATASET. EVALUATION METRIC IS MEAN AVERAGE
PRECISION (MAP) WITH 3D BOUNDING BOX IOU THRESHOLD 0.25 AS PROPOSED BY [1].

Methods

Input

mAP@0.25

bathtub

bed

bookshelf

chair

desk

dresser

nightstand

table

toilet

DSS [56]
COG [57]
2D-driven [58]
F-PointNet [37]
VoteNet [13]

Ours

RGB+Points
RGB+Points
RGB+Points
RGB+Points
Points only

Points only

42.1
47.6
45.1
54.0
57.7

59.2

44.2
58.3
43.5
43.3
74.4

75.2

78.8
63.7
64.5
81.1
83.0

83.7

11.9
31.8
31.4
33.3
28.8

31.2

61.2
62.2
48.3
64.2
75.3

76

20.5
45.2
27.9
24.7
22.0

28.1

6.4
15.5
25.9
32.0
29.8

29.4

15.4
27.4
41.9
58.1
62.2

62.8

sofa

53.5
51.0
50.4
61.1
64.0

66.5

50.3
51.3
37.0
51.1
47.3

48

78.9
70.1
80.4
90.9
90.1

91

TABLE VI
3D OBJECT DETECTION SCORES PER CATEGORY ON THE SCANNET [2] DATASET IN TERMS OF THE MAP@0.25 AND MAP@0.5 IOU RESPECTIVELY.

Method

mAP@0.25

cab

bed

chair

sofa

tabl

door wind bkshf pic

cntr

desk

curt

fridg showr

toil

sink

bath ofurn

3D-SIS 5views[54]
3D-SIS points[54]
VoteNet[13]

40.23
25.36
46.8

10.0 46.93 14.06 53.76 35.96 87.60 42.98 84.3
19.76 69.71 66.15 71.81 36.06 30.64 10.88 27.34 0.0
16.2
12.75 63.14 65.98 46.33 26.91 7.95
6.92 33.34 2.47 10.42 12.17 74.51 22.86 58.66 7.05
0.0
29.96 82.87 78.66 76.32 53.1 29.64 23.57 33.59 2.37 36.92 57.76 33.71 33.68 45.14 86.98 37.96 79.77 19.58

2.79

2.3

48.5

31.08 83.1 85.86 77.5 56.27 30.55 25.1 34.84 4.09 38.5 59.11 35.32 33.7 46.29 88.6 40.27

82

20.9

Ours

Method

3D-SIS 5views[54]
3D-SIS points[54]
VoteNet[13]

Ours

22.53
14.6
24.7

26.0

mAP@0.5

cab

bed

chair

sofa

tabl

door wind bkshf pic

cntr

desk

curt

fridg showr

toil

sink

bath ofurn

5.73 50.28 52.59 55.43 21.96 10.88
5.06 42.19 50.11 31.75 15.12 1.38
6.42 71.26 45.14 50.19 31.88 6.15

13.18 0.0
0.0
1.44

23.62 2.61 24.54 0.82 71.79 8.94 56.40 6.87
0.0
0.0
56.75 8.68 28.52 2.55
13.66
4.04 22.32 0.08 5.14 21.32 9.36 14.27 7.75 65.56 16.5 62.86 3.53

0.0
0.0

2.63

0.0

3.0

7.39 72.42 49.84 51.8

33.5

6.97

5.73 23.11 0.15 5.94 24.91 10.2 14.95 8.09 67.79 17.16 63.74 4.17

TABLE VII
QUANTITATIVE COMPARISON OF 3D OBJECT DETECTION IN POINT CLOUD
ON SCANNET [2] DATASET. EVALUATION METRIC IS MEAN AVERAGE
PRECISION (MAP) WITH 3D BOUNDING BOX IOU THRESHOLD 0.25 AND
0.5.

Methods

Input

mAP@0.25

mAP@0.5

DSS [56]
MRCNN [54], [8]
F-PointNet [37]
GSPN [7]
3D-SIS [54]
3D-SIS [54]
VoteNet [13]

RGB+Points
RGB+Points
RGB+Points
RGB+Points
5 views+Points
Points only
Points only

Ours

Points only

15.2
17.3
19.8
30.6
40.2
25.4
46.8

48.5

6.8
10.5
10.8
17.7
22.5
14.6
24.7

26.0

TABLE VIII
COMPARISON OF THE MODEL SIZE FOR DIFFERENT METHODS.

Methods

Model Size

F-PointNet [37]
3D-SIS [54]
VoteNet [13]

Our base model
Ours

47.0M
19.7M
11.2M

11.25M
12.1M

3D coordinates, 3D coordinates only) as the inputs of 3D-
SIS for comparison. MRCNN [54], [8] directly projects the
2D proposals from Mask-RCNN [8] on 3D point clouds to
estimate the 3D bounding boxes. GSPN [7] uses the Mask-
RCNN based framework and PointNet++ [6] backbone to
generate 3D object proposals which is supervised by the
instance segmentation labels. As summarized in Table VI, our

method performs better than 3D-SIS [54] and VoteNet [13]
on 15/18 classes, and achieves higher accuracy on categories
such as chair, table and desk, where the interactions between
these objects are complex. For categories with small geometric
variations such as door and sink, our method does not achieve
the previous
the best scores. Our method outperforms all
state-of-the-art methods even though it uses only the 3D
information.

F. Model Visualization and Qualitative Results

We show visualizations of a group of 3D bounding box
candidates, the relation graph and the ﬁnal output generated
by our model in Figure 6. We show only one of the three
graphs. In Figure 6 (b) (c), we show only four 3D bounding
box candidates per object with higher accuracy. For example,
for the candidates of oven, we use oven 1, oven 2, oven 3
and oven 4 to represent them. The Figure 6(c) is one of the
corresponding learned 3 graphs from candidates in Figure 6(b).
In order to highlight objects with strong relationships in Fig-
ure 6(c), we only show the relationship between the candidate
numbered 1 and all other candidates numbered 1 for the long
distance relationships, and we show the relationship between
all four candidates of an object for the local relationships.
The darker the color of the square in Figure 6(c), the stronger
the relationship. We can see that there are usually strong
interactions between the four candidates of one object, but
the long distance relationship between different objects only
occasionally exists. For example, there is a weak relationship
between the microwave and the cabinet, but the relationships
between table and other objects have not been learned. One
explanation is that a table is not necessary found in kitchen

SUBMITTED TO JOURNAL ,

2019

12

the whiteboard because it does not have complex geometric
information and requires color information to be recognized.
The whiteboard also does not have a strong relationship with
the surrounding objects. Moreover, the desk is successfully
detected because its appearance features can self-reinforce
with the information of the surrounding chairs. In the second
scene, if only a small part of a chair is scanned, our method
can not detect it because too few points do not provide enough
information to regress the 3D bounding box. Our method
detects the computer that is not in the ground truth. In the
third scene, our approach correctly detects more chairs than the
annotations given in the ground truth since the partial scanned
objects use the information from the surrounding chairs to
predict its 3D bounding boxes.

Detecting thin objects seems to be a limitation of our
method. In the scenes of ScanNet [2], our method has large
errors on very thin objects like window, laptop, and small box,
and misses the wardrobe embedded in the wall. Most of these
errors occur because we we do not use color information.

V. CONCLUSION

We proposed a relation graph network for 3D object detec-
tion in point clouds. Our network jointly learns the pseudo
centers and direction vectors from the sampled points on the
object surface, which are used to regress 3D bounding box
candidates. We introduced a point attention pooling method
to adaptively extract uniform and accurate appearance features
for each 3D proposal, which beneﬁt from the direction and
semantic interactions of interior points. Equipped with the uni-
form appearance and position features, we built a 3D object-
object relation graph to consider the relationships between
all 3D proposals. Finally, we exploit the multi graphs and
supervised graph strategies to improve the performance of
relation graph. Experiments on two challenging benchmark
datasets show that our method quantitatively and qualitatively
obtains better performance than existing state-of-the-art in 3D
object detection.

ACKNOWLEDGMENT

This work was supported in part by National Natural
Science Foundation of China under Grant 61573134, Grant
61973106 and in part by the Australian Research Council
under Grant DP190102443. Thank Yifeng Zhang and Tingt-
ing Yang from Hunan University for helping with baseline
experiments setup.

REFERENCES

[1] S. Song, S. P. Lichtenberg, and J. Xiao, “Sun rgb-d: A rgb-d scene
understanding benchmark suite,” in Proceedings of the IEEE conference
on computer vision and pattern recognition, 2015, pp. 567–576.

[2] A. Dai, A. X. Chang, M. Savva, M. Halber, T. Funkhouser, and
M. Nießner, “Scannet: Richly-annotated 3d reconstructions of indoor
scenes,” in Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017, pp. 5828–5839.

[3] M. Feng, Y. Wang, J. Liu, L. Zhang, H. F. Zaki, and A. Mian,
“Benchmark data set and method for depth estimation from light ﬁeld
images,” IEEE Transactions on Image Processing, vol. 27, no. 7, pp.
3586–3598, 2018.

Fig. 6. Visualization of learned relation graph on one scene of SunRGB-
D [1]. (a) RGB image (for better view). (b) 3D bounding box candidates
generated by our 3D proposal generation module. (c) One learned relation
graph. (d) The ﬁnal output. (e) Ground truth. The color information of point
cloud is only used for better display.

scenes, hence, its relationship with other objects is difﬁcult to
establish.

We show examples of our detection results on SunRGB-
D [1] and ScanNet [2] dataset
in Figure 7. We select 5
challenging scenes which contain partially scanned objects,
size changes, occlusions, contact connections, dense place-
ment, and a wide variety of relationships that are difﬁcult
to establish. In the ﬁrst scene of SunRGB-D dataset [1], our
method successfully detect most of the objects, although some
objects have a slight deviation from the ground truth, such
as curtain and chairs. We can see that our method ignores

SUBMITTED TO JOURNAL ,

2019

13

Fig. 7. Qualitative results of 3D object detection in point cloud, the ﬁrst three rows are scenes of SunRGB-D [1] and the last row is scenes of ScanNet [2]
dataset. We use the RGB image and color information of point cloud only for better visualization.

[4] M. Feng, S. Zulqarnain Gilani, Y. Wang, and A. Mian, “3d face
reconstruction from light ﬁeld images: A model-free approach,” in
Proceedings of the European Conference on Computer Vision (ECCV),
2018, pp. 501–518.

[5] C. R. Qi, H. Su, K. Mo, and L. J. Guibas, “Pointnet: Deep learning on
point sets for 3d classiﬁcation and segmentation,” Proceedings of the
IEEE Conference on Computer Vision and Pattern Recognition, vol. 1,
no. 2, p. 4, 2017.

[6] C. R. Qi, L. Yi, H. Su, and L. J. Guibas, “Pointnet++: Deep hierarchical
feature learning on point sets in a metric space,” in Advances in Neural
Information Processing Systems, 2017, pp. 5099–5108.

[7] L. Yi, W. Zhao, H. Wang, M. Sung, and L. J. Guibas, “Gspn: Generative
shape proposal network for 3d instance segmentation in point cloud,” in

Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2019, pp. 3947–3956.

[8] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick, “Mask r-cnn,” in
Proceedings of the IEEE international conference on computer vision,
2017, pp. 2961–2969.

[9] X. Zhou, D. Wang, and P. Kr¨ahenb¨uhl, “Objects as points,” arXiv

preprint arXiv:1904.07850, 2019.

[10] K. Duan, S. Bai, H. Qi, Q. Huang, and Q. Tian, “Centernet: Keypoint

triplets for object detection,” arXiv preprint arXiv:1904.08189, 2019.

[11] Z. Tian, C. Shen, H. Chen, and T. He, “Fcos: Fully convolutional one-
stage object detection,” arXiv preprint arXiv:1904.01355, 2019.
[12] T. Kong, F. Sun, H. Liu, Y. Jiang, and J. Shi, “Foveabox: Beyond anchor-

based object detector,” arXiv preprint arXiv:1904.03797, 2019.

SUBMITTED TO JOURNAL ,

2019

14

[13] C. R. Qi, O. Litany, K. He, and L. J. Guibas, “Deep hough voting for 3d
object detection in point clouds,” Proceedings of the IEEE Conference
on Computer Vision, 2019.

[14] H. Hu, J. Gu, Z. Zhang, J. Dai, and Y. Wei, “Relation networks for
object detection,” in Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, 2018, pp. 3588–3597.

[15] J. Wu, L. Wang, L. Wang, J. Guo, and G. Wu, “Learning actor relation
graphs for group activity recognition,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, 2019, pp.
9964–9974.

[16] G. Wang, K. Wang, and L. Lin, “Adaptively connected neural networks,”
in The IEEE Conference on Computer Vision and Pattern Recognition
(CVPR), June 2019.

[17] W.-H. Li, F.-T. Hong, and W.-S. Zheng, “Learning to learn relation for
important people detection in still images,” in The IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), June 2019.

[18] J. Choe and H. Shim, “Attention-based dropout

layer for weakly
supervised object localization,” in Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 2019, pp. 2219–2228.

[19] L. Liu, W. Ouyang, X. Wang, P. Fieguth, J. Chen, X. Liu, and
M. Pietik¨ainen, “Deep learning for generic object detection: A survey,”
arXiv preprint arXiv:1809.02165, 2018.

[20] R. Girshick, J. Donahue, T. Darrell, and J. Malik, “Rich feature
hierarchies for accurate object detection and semantic segmentation,”
in Proceedings of the IEEE conference on computer vision and pattern
recognition, 2014, pp. 580–587.

[21] R. Girshick, “Fast r-cnn,” in Proceedings of the IEEE international

conference on computer vision, 2015, pp. 1440–1448.

[22] K. He, X. Zhang, S. Ren, and J. Sun, “Spatial pyramid pooling in deep
convolutional networks for visual recognition,” IEEE transactions on
pattern analysis and machine intelligence, vol. 37, no. 9, pp. 1904–1916,
2015.

[23] S. Ren, K. He, R. Girshick, and J. Sun, “Faster r-cnn: Towards real-time
object detection with region proposal networks,” IEEE Transactions on
Pattern Analysis and Machine Intelligence, vol. 39, no. 6, pp. 1137–
1149, 2016.

[24] J. Dai, Y. Li, K. He, and J. Sun, “R-fcn: Object detection via region-
based fully convolutional networks,” in Advances in neural information
processing systems, 2016, pp. 379–387.

[25] Z. Li, C. Peng, G. Yu, X. Zhang, Y. Deng, and J. Sun, “Light-head

r-cnn: In defense of two-stage object detector,” 2018.

[26] C. Szegedy, A. Toshev, and D. Erhan, “Deep neural networks for object
detection,” in Advances in neural information processing systems, 2013,
pp. 2553–2561.

[27] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. Le-
cun, “Overfeat: Integrated recognition, localization and detection us-
ing convolutional networks,” in International Conference on Learning
Representations, 2014.

[28] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi, “You only look
once: Uniﬁed, real-time object detection,” in Proceedings of the IEEE
conference on computer vision and pattern recognition, 2016, pp. 779–
788.

[29] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y. Fu, and A. C.
Berg, “Ssd: Single shot multibox detector,” in European conference on
computer vision, 2016, pp. 21–37.

[30] X. Zhou, J. Zhuo, and P. Krahenbuhl, “Bottom-up object detection
by grouping extreme and center points,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, 2019, pp.
850–859.

[31] X. Chen, H. Ma, J. Wan, B. Li, and T. Xia, “Multi-view 3d object
detection network for autonomous driving,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, 2017, pp.
1907–1915.

[32] B. Wu, A. Wan, X. Yue, and K. Keutzer, “Squeezeseg: Convolutional
neural nets with recurrent crf for real-time road-object segmentation
from 3d lidar point cloud,” in 2018 IEEE International Conference on
Robotics and Automation (ICRA).

IEEE, 2018, pp. 1887–1893.

[33] G. Yang, Y. Cui, S. Belongie, and B. Hariharan, “Learning single-view
3d reconstruction with limited pose supervision,” in Proceedings of the
European Conference on Computer Vision (ECCV), 2018, pp. 86–101.
[34] Y. Zhou and O. Tuzel, “Voxelnet: End-to-end learning for point cloud
based 3d object detection,” in Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2018, pp. 4490–4499.
[35] B. Yang, W. Luo, and R. Urtasun, “Pixor: Real-time 3d object detection
from point clouds,” in Proceedings of the IEEE conference on Computer
Vision and Pattern Recognition, 2018, pp. 7652–7660.

[36] A. H. Lang, S. Vora, H. Caesar, L. Zhou, J. Yang, and O. Beijbom,
“Pointpillars: Fast encoders for object detection from point clouds,” in
Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2019, pp. 12 697–12 705.

[37] C. R. Qi, W. Liu, C. Wu, H. Su, and L. J. Guibas, “Frustum pointnets
for 3d object detection from rgb-d data,” Proceedings of the IEEE
Conference on Computer Vision, 2018.

[38] S. Shi, X. Wang, and H. Li, “Pointrcnn: 3d object proposal generation
and detection from point cloud,” in Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 2019, pp. 770–779.
[39] B. Yang, J. Wang, R. Clark, Q. Hu, S. Wang, A. Markham, and
N. Trigoni, “Learning object bounding boxes for 3d instance segmenta-
tion on point clouds,” arXiv preprint arXiv:1906.01140, 2019.

[40] F. Engelmann, T. Kontogianni, A. Hermans, and B. Leibe, “Exploring
spatial context for 3d semantic segmentation of point clouds,” in
Proceedings of the IEEE International Conference on Computer Vision,
2017, pp. 716–724.

[41] Y. Wang, Y. Sun, Z. Liu, S. E. Sarma, M. M. Bronstein, and J. M.
Solomon, “Dynamic graph cnn for learning on point clouds,” ACM
Transactions on Graphics, 2019.

[42] C. Wang, B. Samari, and K. Siddiqi, “Local spectral graph convolu-
tion for point set feature learning,” in Proceedings of the European
Conference on Computer Vision (ECCV), 2018, pp. 52–66.

[43] M. Simonovsky and N. Komodakis, “Dynamic edge-conditioned ﬁlters
in convolutional neural networks on graphs,” in Proceedings of the IEEE
conference on computer vision and pattern recognition, 2017, pp. 3693–
3702.

[44] Y. Li, R. Bu, M. Sun, W. Wu, X. Di, and B. Chen, “Pointcnn: Con-
volution on x-transformed points,” in Advances in Neural Information
Processing Systems, 2018, pp. 820–830.

[45] Q. Huang, W. Wang, and U. Neumann, “Recurrent slice networks for 3d
segmentation of point clouds,” in Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 2018, pp. 2626–2635.

[46] Y. Duan, Y. Zheng, J. Lu, J. Zhou, and Q. Tian, “Structural relational
reasoning of point clouds,” in Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2019, pp. 949–958.

[47] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez,
Ł. Kaiser, and I. Polosukhin, “Attention is all you need,” in Advances
in neural information processing systems, 2017, pp. 5998–6008.
[48] Y. Chen, M. Rohrbach, Z. Yan, Y. Shuicheng, J. Feng, and Y. Kalantidis,
“Graph-based global reasoning networks,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, 2019, pp. 433–
442.

[49] W. Chu, S. Babak, K. Vladimir, C. Siddhartha, and S. Kaleem, “Fan:

Focused attention networks,” arXiv preprint arXiv:1905.11498, 2019.

[50] A. Santoro, D. Raposo, D. G. Barrett, M. Malinowski, R. Pascanu,
P. Battaglia, and T. Lillicrap, “A simple neural network module for
information processing
relational reasoning,” in Advances in neural
systems, 2017, pp. 4967–4976.

[51] X. Wang, R. Girshick, A. Gupta, and K. He, “Non-local neural net-
works,” in Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2018, pp. 7794–7803.

[52] C. Sun, A. Shrivastava, C. Vondrick, K. Murphy, R. Sukthankar, and
C. Schmid, “Actor-centric relation network,” in Proceedings of the
European Conference on Computer Vision (ECCV), 2018, pp. 318–334.
[53] C.-Y. Ma, A. Kadav, I. Melvin, Z. Kira, G. AlRegib, and H. Peter Graf,
“Attend and interact: Higher-order object interactions for video under-
standing,” in Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2018, pp. 6790–6800.

[54] J. Hou, A. Dai, and M. Nießner, “3d-sis: 3d semantic instance seg-
mentation of rgb-d scans,” in Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2019, pp. 4421–4430.
[55] Z. Yang, Y. Sun, S. Liu, X. Shen, and J. Jia, “Std: Sparse-to-dense 3d
object detector for point cloud,” Proceedings of the IEEE Conference
on Computer Vision, 2019.

[56] S. Song and J. Xiao, “Deep sliding shapes for amodal 3d object detection
in rgb-d images,” in Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, 2016, pp. 808–816.

[57] Z. Ren and E. B. Sudderth, “Three-dimensional object detection and
layout prediction using clouds of oriented gradients,” in Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition,
2016, pp. 1525–1533.

[58] J. Lahoud and B. Ghanem, “2d-driven 3d object detection in rgb-
d images,” in Proceedings of the IEEE International Conference on
Computer Vision, 2017, pp. 4622–4630.

