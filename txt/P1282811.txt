6
1
0
2
 
c
e
D
 
9
1
 
 
]
E
N
.
s
c
[
 
 
1
v
2
1
2
6
0
.
2
1
6
1
:
v
i
X
r
a

Under review as a conference paper at ICLR 2017

A RECURRENT NEURAL NETWORK WITHOUT CHAOS

Thomas Laurent
Department of Mathematics
Loyola Marymount University
Los Angeles, CA 90045, USA
tlaurent@lmu.edu

James von Brecht
Department of Mathematics
California State University, Long Beach
Long Beach, CA 90840, USA
james.vonbrecht@csulb.edu

ABSTRACT

We introduce an exceptionally simple gated recurrent neural network (RNN) that
achieves performance comparable to well-known gated architectures, such as
LSTMs and GRUs, on the word-level language modeling task. We prove that our
model has simple, predicable and non-chaotic dynamics. This stands in stark con-
trast to more standard gated architectures, whose underlying dynamical systems
exhibit chaotic behavior.

1

INTRODUCTION

Gated recurrent neural networks, such as the Long Short Term Memory network (LSTM) introduced
by Hochreiter & Schmidhuber (1997) and the Gated Recurrent Unit (GRU) proposed by Cho et al.
(2014), prove highly effective for machine learning tasks that involve sequential data. We propose
an exceptionally simple variant of these gated architectures. The basic model takes the form

ht = θt (cid:12) tanh(ht−1) + ηt (cid:12) tanh(W xt),

where (cid:12) stands for the Hadamard product. The horizontal/forget gate (i.e. θt) and the vertical/input
gate (i.e. ηt) take the usual form used in most gated RNN architectures. Speciﬁcally

θt := σ (Uθht−1 + Vθxt + bθ)

and

ηt := σ (Uηht−1 + Vηxt + bη)

where σ(x) := (1 + e−x)−1 denotes the logistic sigmoid function. The network (1)–(2) has quite
intuitive dynamics. Suppose the data xt present the model with a sequence

(1)

(2)

(3)

(W xt)(i) =

(cid:26)10
0

if t = T
otherwise,

where (W xt)(i) stands for the ith component of the vector W xt. In other words we consider an
input sequence xt for which the learned ith feature (W xt)(i) remains off except at time T . When
initialized from h0 = 0, the corresponding response of the network to this “impulse” in the ith
feature is

ht(i) ≈

0
ηT
αt
with αt a sequence that relaxes toward zero. The forget gate θt control the rate of this relaxation.
Thus ht(i) activates when presented with a strong ith feature, and then relaxes toward zero until
the data present the network once again with strong ith feature. Overall this leads to a dynamically
simple model, in which the activation patterns in the hidden states of the network have a clear cause
and predictable subsequent behavior.

if t < T
if t = T
if t > T

(4)






Dynamics of this sort do not occur in other RNN models. Instead, the three most popular recurrent
neural network architectures, namely the vanilla RNN, the LSTM and the GRU, have complex,
irregular, and unpredictable dynamics. Even in the absence of input data, these networks can give
rise to chaotic dynamical systems. In other words, when presented with null input data the activation
patterns in their hidden states do not necessarily follow a predictable path. The proposed network
(1)–(2) has rather dull and minimalist dynamics in comparison; its only attractor is the zero state,

1

Under review as a conference paper at ICLR 2017

and so it stands at the polar-opposite end of the spectrum from chaotic systems. Perhaps surprisingly,
at least in the light of this comparison, the proposed network (1) performs as well as LSTMs and
GRUs on the word level language modeling task. We therefore conclude that the ability of an RNN
to form chaotic temporal dynamics, in the sense we describe in Section 2, cannot explain its success
on word-level language modeling tasks.

In the next section, we review the phenomenon of chaos in RNNs via both synthetic examples and
trained models. We also prove a precise, quantiﬁed description of the dynamical picture (3)–(4) for
the proposed network. In particular, we show that the dynamical system induced by the proposed
network is never chaotic, and for this reason we refer to it as a Chaos-Free Network (CFN). The
ﬁnal section provides a series of experiments that demonstrate that CFN achieve results comparable
to LSTM on the word-level language modeling task. All together, these observations show that
an architecture as simple as (1)–(2) can achieve performance comparable to the more dynamically
complex LSTM.

2 CHAOS IN RECURRENT NEURAL NETWORKS

The study of RNNs from a dynamical systems point-of-view has brought fruitful insights into
generic features of RNNs (Sussillo & Barak, 2013; Pascanu et al., 2013). We shall pursue a brief
investigation of CFN, LSTM and GRU networks using this formalism, as it allows us to identify
key distinctions between them. Recall that for a given mapping Φ : Rd (cid:55)→ Rd, a given initial time
t0 ∈ N and a given initial state u0 ∈ Rd, a simple repeated iteration of the mapping Φ

ut+1 = Φ(ut)
ut0 = u0

t > t0,
t = t0,

deﬁnes a discrete-time dynamical system. The index t ∈ N represents the current time, while the
point ut ∈ Rd represents the current state of the system. The set of all visited states O+(u0) :=
{ut0, ut0+1, . . . , ut0+n, . . .} deﬁnes the forward trajectory or forward orbit through u0. An attractor
for the dynamical system is a set that is invariant (any trajectory that starts in the set remains in
the set) and that attracts all trajectories that start sufﬁciently close to it. The attractors of chaotic
dynamical systems are often fractal sets, and for this reason they are referred to as strange attractors.

Most RNNs generically take the functional form

ut = Ψ(ut−1, W1xt, W2xt, . . . , Wkxt),
(5)
where xt denotes the tth input data point. For example, in the case of the CFN (1)–(2), we have
W1 = W , W2 = Vθ and W3 = Vη. To gain insight into the underlying design of the architecture of
an RNN, it proves usefull to consider how trajectories behave when they are not inﬂuenced by any
external input. This lead us to consider the dynamical system

ut = Φ(ut−1)

Φ(u) := Ψ(u, 0, 0, . . . , 0),

(6)

which we refer to as the dynamical system induced by the recurrent neural network. The time-
invariant system (6) is much more tractable than (5), and it offers a mean to investigate the inner
working of a given architecture; it separates the inﬂuence of input data xt, which can produce
essentially any possible response, from the model itself. Studying trajectories that are not inﬂuenced
by external data will give us an indication on the ability of a given RNN to generate complex and
sophisticated trajectories by its own. As we shall see shortly, the dynamical system induced by a
CFN has excessively simple and predictable trajectories: all of them converge to the zero state. In
other words, its only attractor is the zero state. This is in sharp contrast with the dynamical systems
induced by LSTM or GRU, who can exhibit chaotic behaviors and have strange attractors.

The learned parameters Wj in (5) describe how data inﬂuence the evolution of hidden states at each
time step. From a modeling perspective, (6) would occur in the scenario where a trained RNN has
learned a weak coupling between a speciﬁc data point xt0 and the hidden state at that time, in the
sense that the data inﬂuence is small and so all Wjxt0 ≈ 0 nearly vanish. The hidden state then
transitions according to ut0 ≈ Ψ(ut0−1, 0, 0, . . . , 0) = Φ(ut0−1).
We refer to Bertschinger & Natschl¨ager (2004) for a study of the chaotic behavior of a simpliﬁed
vanilla RNN with a speciﬁc statistical model, namely an i.i.d. Bernoulli process, for the input data as
well as a speciﬁc statistical model, namely i.i.d. Gaussian, for the weights of the recurrence matrix.

2

Under review as a conference paper at ICLR 2017

Figure 1: Strange attractor of a 2-unit LSTM. Successive zooms (from left to right) reveal the self-
repeating, fractal nature of the attractor. Colored boxes depict zooming regions.

2.1 CHAOTIC BEHAVIOR OF LSTM AND GRU IN THE ABSENCE OF INPUT DATA

In this subsection we brieﬂy show that LSTM and GRU, in the absence of input data, can lead to
dynamical systems ut = Φ(ut−1) that are chaotic in the classical sense of the term (Strogatz, 2014).
Figure 1 depicts the strange attractor of the dynamical system:
(cid:21)
(cid:20)o (cid:12) tanh (f (cid:12) c + i (cid:12) g)
f (cid:12) c + i (cid:12) g

u (cid:55)→ Φ(u) =

ut =

(7)

(cid:21)

f := σ(Wf h + bf )

o := σ(Woh + bo)

g := tanh(Wgh + bg)

(8)

(cid:20)ht
ct
i := σ(Wih + bi)

induced by a two-unit LSTM with weight matrices
(cid:21)
(cid:20)−1 −4
−3 −2

(cid:20) 4
1
−9 −7

Wo =

Wi =

(cid:21)

Wf =

(cid:21)

(cid:20)−2

6
0 −6

Wg =

(cid:21)
(cid:20)−1 −6
6 −9

(9)

and zero bias for the model parameters. These weights were randomly generated from a normal
distribution with standard deviation 5 and then rounded to the nearest integer. Figure 1(a) was
obtained by choosing an initial state u0 = (h0, c0) uniformly at random in [0, 1]2 × [0, 1]2 and
plotting the h-component of the iterates ut = (ht, ct) for t between 103 and 105 (so this ﬁgure
should be regarded as a two dimensional projection of a four dimensional attractor, which explain
its tangled appearance). Most trajectories starting in [0, 1]2 × [0, 1]2 converge toward the depicted
attractor. The resemblance between this attractor and classical strange attractors such as the H´enon
attractor is striking (see Figure 5 in the appendix for a depiction of the H´enon attractor). Successive
zooms on the branch of the LSTM attractor from Figure 1(a) reveal its fractal nature. Figure 1(b) is
an enlargement of the red box in Figure 1(a), and Figure 1(c) is an enlargement of the magenta box
in Figure 1(b). We see that the structure repeats itself as we zoom in.

The most practical consequence of chaos is that the long-term behavior of their forward orbits can
exhibit a high degree of sensitivity to the initial states u0. Figure 2 provides an example of such
behavior for the dynamical system (7)–(9). An initial condition u0 was drawn uniformly at random
in [0, 1]2 × [0, 1]2. We then computed 100, 000 small amplitude perturbations ˆu0 of u0 by adding a
small random number drawn uniformly from [−10−7, 10−7] to each component. We then iterated
(7)–(9) for 200 steps and plotted the h-component of the ﬁnal state ˆu200 for each of the 100, 000
trials on Figure 2(a). The collection of these 100, 000 ﬁnal states essentially ﬁlls out the entire
attractor, despite the fact that their initial conditions are highly localized (i.e. at distance of no more
than 10−7) around a ﬁxed point. In other words, the time t = 200 map of the dynamical system
will map a small neighborhood around a ﬁxed initial condition u0 to the entire attractor. Figure 2(b)
additionally illustrates this sensitivity to initial conditions for points on the attractor itself. We take
an initial condition u0 on the attractor and perturb it by 10−7 to a nearby initial condition ˆu0. We
then plot the distance (cid:107)ˆut − ut(cid:107) between the two corresponding trajectories for the ﬁrst 200 time
steps. After an initial phase of agreement, the trajectories strongly diverge.

The synthetic example (7)–(9) illustrates the potentially chaotic nature of the LSTM architecture.
We now show that chaotic behavior occurs for trained models as well, and not just for synthetically
generated instances. We take the parameter values of an LSTM with 228 hidden units trained on the

3

Under review as a conference paper at ICLR 2017

(a) Final state ˆu200 for 105 trials

(b) Distance (cid:107)ˆut − ut(cid:107) between 2 trajectories

Figure 2: (a): A small neighborhood around a ﬁxed initial condition u0, after 200 iterations, is
mapped to the entire attractor. (b): Two trajectories starting starting within 10−7 of one another
strongly diverge after 50 steps.

(a) No input data

(b) With input data

Figure 3: 228-unit LSTM trained on Penn Treebank. (a): In the absence of input data, the system
is chaotic and nearby trajectories diverge. (b): In the presence of input data, the system is mostly
driven by the external input. Trajectories starting far apart converge.

Penn Treebank corpus without dropout (c.f. the experimental section for the precise procedure). We
then set all data inputs xt to zero and run the corresponding induced dynamical system. Two trajec-
tories starting from nearby initial conditions u0 and ˆu0 were computed (as before ˆu0 was obtained
by adding to each components of u0 a small random number drawn uniformly from [−10−7, 10−7]).
Figure 3(a) plots the ﬁrst component h(1) of the hidden state for both trajectories over the ﬁrst
1600 time steps. After an initial phase of agreement, the forward trajectories O+(u0) and O+(ˆu0)
strongly diverge. We also see that both trajectories exhibit the typical aperiodic behavior that char-
acterizes chaotic systems. If the inputs xt do not vanish, but come from actual word-level data, then
the behavior is very different. The LSTM is now no longer an autonomous system whose dynamics
are driven by its hidden states, but a time dependent system whose dynamics are mostly driven by
the external inputs. Figure 3(b) shows the ﬁrst component h(1) of the hidden states of two trajecto-
ries that start with initial conditions u0 and ˆu0 that are far apart. The sensitivity to initial condition
disappears, and instead the trajectories converge toward each other after about 70 steps. The mem-
ory of this initial difference is lost. Overall these experiments indicate that a trained LSTM, when it
is not driven by external inputs, can be chaotic. In the presence of input data, the LSTM becomes a
forced system whose dynamics are dominated by external forcing.

Like LSTM networks, GRU can also lead to dynamical systems that are chaotic and they can also
have strange attractors. The depiction of such an attractor, in the case of a two-unit GRU, is provided
in Figure 6 of the appendix.

2.2 CHAOS-FREE BEHAVIOR OF THE CFN

The dynamical behavior of the CFN is dramatically different from that of the LSTM. In this sub-
section we start by showing that the hidden states of the CFN activate and relax toward zero in a
predictable fashion in response to input data. On one hand, this shows that the CFN cannot produce
non-trivial dynamics without some inﬂuence from data. On the other, this leads to an interpretable
model; any non-trivial activations in the hidden states of a CFN have a clear cause emanating from

4

Under review as a conference paper at ICLR 2017

data-driven activation. This follows from a precise, quantiﬁed description of the intuitive picture
(3)–(4) sketched in the introduction.

We begin with the following simple estimate that sheds light on how the hidden states of the CFN
activate and then relax toward the origin.
Lemma 1. For any T, k > 0 we have

|hT +k(i)| ≤ Θk |hT (i)| +

(cid:18)

H
1 − Θ

max
T ≤t≤T +k

|(W xt)(i)|

(cid:19)

where Θ and H are the maximum values of the ith components of the θ and η gate in the time
interval [T, T + k], that is:

Θ = max

θt(i) and H = max

ηt(i).

T ≤t≤T +k

T ≤t≤T +k

This estimate shows that if during a time interval [T1, T2] one of

(i) the embedded inputs W xt have weak ith feature (i.e. maxT ≤t≤T +k |(W xt)(i)| is small),
(ii) or the input gates ηt have their ith component close to zero (i.e. H is small),

occurs then the ith component of the hidden state ht will relaxes toward zero at a rate that depends
on the value of the ith component the the forget gate. Overall this leads to the following simple
picture: ht(i) activates when presented with an embedded input W xt with strong ith feature, and
then relaxes toward zero until the data present the network once again with strong ith feature. The
strength of the activation and the decay rate are controlled by the ith component of the input and
forget gates. The proof of Lemma 1 is elementary —
Proof of Lemma 1. Using the non-expansivity of the hyperbolic tangent, i.e. | tanh(x)| ≤ |x|, and
the triangle inequality, we obtain from (1)

|ht(i)| ≤ Θ |ht−1(i)| + H max

|(W xt)(i)|

T ≤t≤T +k

whenever t is in the interval [T, T + k]. Iterating this inequality and summing the geometric series
then gives

|hT +k(i)| ≤ Θk|hT (i)| +

(cid:19)

(cid:18) 1 − Θk
1 − Θ

H max

T ≤t≤T +k

|(W xt)(i)|

from which we easily conclude.

We now turn toward the analysis of the long-term behavior of the the dynamical system

ut = ht,

u (cid:55)→ Φ(u) := σ (Uθu + bθ) (cid:12) tanh(u).

(10)

induced by a CFN. The following lemma shows that the only attractor of this dynamical system is
the zero state.
Lemma 2. Starting from any initial state u0, the trajectory O+(u0) will eventually converge to the
zero state. That is, limt→+∞ ut = 0 regardless of the the initial state u0.

Proof. From the deﬁnition of Φ we clearly have that the sequence deﬁned by ut+1 = Φ(ut) satisﬁes
−1 < ut(i) < 1 for all t and all i. Since the sequence ut is bounded, so is the sequence vt :=
Uθut + bθ. That is there exists a ﬁnite C > 0 such that (Uθut)(i) + bθ(i) < C for all t and i. Using
the non-expansivity of the hyperbolic tangent, we then obtain that |ut(i)| ≤ σ(C)|ut−1(i)|, for all t
and all i. We conclude by noting that 0 < σ(C) < 1.

Lemma 2 remains true for a multi-layer CFN, that is, a CFN in which the ﬁrst layer is deﬁned by (1)
and the subsequent layers 2 ≤ (cid:96) ≤ L are deﬁned by:

t−1) + η((cid:96))
Assume that W xt = 0 for all t > T , then an extension of the arguments contained in the proof of
the two previous lemmas shows that

t (cid:12) tanh(W ((cid:96))h((cid:96)−1)

t (cid:12) tanh(h((cid:96))

t = θ((cid:96))
h((cid:96))

).

t

|h((cid:96))

T +k| ≤ C(1 + k)((cid:96)−1)Θk

(11)

5

Under review as a conference paper at ICLR 2017

where 0 < Θ < 1 is the maximal values for the input gates involved in layer 1 to (cid:96) of the network,
and C > 0 is some constant depending only on the norms (cid:107)W (j)(cid:107)∞ of the matrices and the sizes
|h(j)
T | of the initial conditions at all previous 1 ≤ j ≤ (cid:96) levels. Estimate (11) shows that Lemma 2
remains true for multi-layer architectures.

(a) First layer

(b) Second layer

Figure 4: A 2-layer, 224-unit CFN trained on Penn Treebank. All inputs xt are zero after t = 1000,
i.e. the time-point indicated by the dashed line. At left: plot of the 10 “slowest” units of the ﬁrst
layer. At right: plot of the 10 slowest units of the second layer. The second layer retains information
much longer than the ﬁrst layer.

Inequality (11) shows that higher levels (i.e. larger (cid:96)) decay more slowly, and remain non-trivial,
while earlier levels (i.e. smaller (cid:96)) decay more quickly. We illustrate this behavior computationally
with a simple experiment. We take a 2-layer, 224-unit CFN network trained on Penn Treebank and
feed it the following input data: The ﬁrst 1000 inputs xt are the ﬁrst 1000 words of the test set of
Penn Treebank; All subsequent inputs are zero. In other words, xt = 0 if t > 1000. For each of the
two layers we then select the 10 units that decay the slowest after t > 1000 and plot them on Figure
4. The ﬁrst layer retains information for about 10 to 20 time steps, whereas the second layer retains
information for about 100 steps. This experiment conforms with the analysis (11), and indicates
that adding a third or fourth layer would potentially allow a multi-layer CFN architecture to retain
information for even longer periods.

3 EXPERIMENTS

In this section we show that despite its simplicity, the CFN network achieves performance compa-
rable to the much more complex LSTM network on the word level language modeling task. We
use two datasets for these experiments, namely the Penn Treebank corpus (Marcus et al., 1993)
and the Text8 corpus (Mikolov et al., 2014). We consider both one-layer and two-layer CFNs and
LSTMs for our experiments. We train both CFN and LSTM networks in a similar fashion and al-
ways compare models that use the same number of parameters. We compare their performance with
and without dropout, and show that in both cases they obtain similar results. We also provide results
published in Mikolov et al. (2014), Jozefowicz et al. (2015) and Sukhbaatar et al. (2015) for the sake
of comparison.

For concreteness, the exact implementation for the two-layer architecture of our model is

t

, p)

t (cid:12) tanh(h(1)

h(0)
t = W (0)xt
t = Drop(h(0)
ˆh(0)
h(1)
t = θ(1)
t = Drop(h(1)
ˆh(1)
h(2)
t = θ(2)
ˆh(2)
t = Drop(h(2)
t
yt = LogSoftmax(W (3)ˆh(2)

t (cid:12) tanh(h(2)

, p)

, p)

t

t−1) + η(1)

t (cid:12) tanh(W (1)ˆh(0)
t )

t−1) + η(2)

t (cid:12) tanh(W (2)ˆh(1)
t )

t + b)

6

(12)

Under review as a conference paper at ICLR 2017

Table 1: Experiments on Penn Treebank without dropout.

Model
Vanilla RNN
GRU
LSTM
LSTM (1 layer)
CFN (2 layers)

Size
5M parameters
5M parameters
5M parameters
5M parameters
5M parameters

Training
Jozefowicz et al. (2015)
Jozefowicz et al. (2015)
Jozefowicz et al. (2015)
Trained by us
Trained by us

Val. perp.
-
-
-
108.4
109.3

Test perp.
122.9
108.2
109.7
105.1
106.3

Table 2: Experiments on Text8 without dropout

Model
Vanilla RNN
SCRN
LSTM
MemN2N
LSTM (2 layers)
CFN (2 layers)

Size
500 hidden units
500 hidden units
500 hidden units
500 hidden units
46.4M parameters
46.4M parameters

Training
Mikolov et al. (2014)
Mikolov et al. (2014)
Mikolov et al. (2014)
Sukhbaatar et al. (2015)
Trained by us
Trained by us

Perp. on development set
184
161
156
147
139.9
142.0

where Drop(z, p) denotes the dropout operator with a probability p of setting components in z to
zero. We compute the gates according to

(cid:16)

θ((cid:96))
t

:= σ

where

t−1 + V ((cid:96))
U ((cid:96))
˜h((cid:96))
θ
t−1 = Drop(h((cid:96))
˜h((cid:96))

θ

˜h((cid:96)−1)
t

+ bθ

(cid:17)

(cid:16)

and η((cid:96))

t

:= σ

U ((cid:96))
η
= Drop(h((cid:96)−1)

t

˜h((cid:96)−1)
t

, q),

t−1, q)

and

˜h((cid:96))
t−1 + V ((cid:96))

η

˜h((cid:96)−1)
t

+ bη

(cid:17)

and thus the model has two dropout hyperparameters. The parameter p controls the amount of
dropout between layers; the parameter q controls the amount of dropout inside each gate. We use a
similar dropout strategy for the LSTM, in that all sigmoid gates f, o and i receive the same amount
q of dropout.

To train the CFN and LSTM networks, we use a simple online steepest descent algorithm. We update
the weights w via

(13)

(14)

(15)

w(k+1) = w(k) − lr · (cid:126)p where

(cid:126)p =

∇wL
(cid:107)∇wL(cid:107)2

,

and ∇wL denotes the approximate gradient of the loss with respect to the weights as estimated
from a certain number of presented examples. We use the usual backpropagation through time
approximation when estimating the gradient: we unroll the net T steps in the past and neglect longer
dependencies. In all experiments, the CFN and LSTM networks are unrolled for T = 35 steps and
we take minibatches of size 20. In the case of an exact gradient, the update (15) simply corresponds
to making a step of length lr in the direction of steepest descent. As all search directions (cid:126)p have
Euclidean norm (cid:107)(cid:126)p(cid:107)2 = 1, we perform no gradient clipping during training.

We initialize all the weights in the CFN, except for the bias of the gates, uniformly at random in
[−0.07, 0.07]. We initialize the bias bθ and bη of the gates to 1 and −1, respectively, so that at the
beginning of the training

θt ≈ σ(1) ≈ 0.73

and

ηt ≈ σ(−1) ≈ 0.23.

We initialize the weights of the LSTM in exactly the same way; the bias for the forget and input
gate are initialized to 1 and −1, and all the other weights are initialized uniformly in [−0.07, 0.07].
This initialization scheme favors the ﬂow of information in the horizontal direction. The importance
of a careful initialization of the forget gate was ﬁrst pointed out in Gers et al. (2000) and further
emphasized in Jozefowicz et al. (2015). Finally, we initialize all hidden states to zero for both
models.

Dataset Construction. The Penn Treebank Corpus has 1 million words and a vocabulary size of
10,000. We used the code from Zaremba et al. (2014) to construct and split the dataset into a training
set (929K words), a validation set (73K words) and a test set (82K words). The Text8 corpus has 100
million characters and a vocabulary size of 44,000. We used the script from Mikolov et al. (2014) to

7

Under review as a conference paper at ICLR 2017

Table 3: Experiments on Penn Treebank with dropout.

Model
Vanilla RNN
GRU
LSTM
LSTM (2 layers)
CFN (2 layers)
LSTM (2 layers)
CFN (2 layers)

Size
20M parameters
20M parameters
20M parameters
20M parameters
20M parameters
50M parameters
50M parameters

Training
Jozefowicz et al. (2015)
Jozefowicz et al. (2015)
Jozefowicz et al. (2015)
Trained by us
Trained by us
Trained by us
Trained by us

Val. perp.
103.0
95.5
83.3
78.4
79.7
75.9
77.0

Test perp.
97.7
91.7
78.8
74.3
74.9
71.8
72.2

construct and split the dataset into a training set (ﬁrst 99M characters) and a development set (last
1M characters).

Experiments without Dropout. Tables 1 and 2 provide a comparison of various recurrent network
architectures without dropout evaluated on the Penn Treebank corpus and the Text8 corpus. The last
two rows of each table provide results for LSTM and CFN networks trained and initialized in the
manner described above. We have tried both one and two layer architectures, and reported only the
best result. The learning rate schedules used for each network are described in the appendix.

We also report results published in Jozefowicz et al. (2015) were a vanilla RNN, a GRU and an
LSTM network were trained on Penn Treebank, each of them having 5 million parameters (only
the test perplexity was reported). Finally we report results published in Mikolov et al. (2014) and
Sukhbaatar et al. (2015) where various networks are trained on Text8. Of these four networks, only
the LSTM network from Mikolov et al. (2014) has the same number of parameters than the CFN
and LSTM networks we trained (46.4M parameters). The vanilla RNN, Structurally Constrained
Recurrent Network (SCRN) and End-To-End Memory Network (MemN2N) all have 500 units, but
less than 46.4M parameters. We nonetheless indicate their performance in Table 2 to provide some
context.

Experiments with Dropout. Table 3 provides a comparison of various recurrent network archi-
tectures with dropout evaluated on the Penn Treebank corpus. The ﬁrst three rows report results
published in (Jozefowicz et al., 2015) and the last four rows provide results for LSTM and CFN
networks trained and initialized with the strategy previously described. The dropout rate p and q are
chosen as follows: For the experiments with 20M parameters, we set p = 55% and q = 45% for the
CFN and p = 60% and q = 40% for the LSTM; For the experiments with 50M parameters, we set
p = 65% and q = 55% for the CFN and p = 70% and q = 50% for the LSTM.

4 CONCLUSION

Despite its simple dynamics, the CFN obtains results that compare well against LSTM networks
and GRUs on word-level language modeling. This indicates that it might be possible, in general, to
build RNNs that perform well while avoiding the intricate, uninterpretable and potentially chaotic
dynamics that can occur in LSTMs and GRUs. Of course, it remains to be seen if dynamically
simple RNNs such as the proposed CFN can perform well on a wide variety of tasks, potentially
requiring longer term dependencies than the one needed for word level language modeling. The
experiments presented in Section 2 indicate a plausible path forward — activations in the higher
layers of a multi-layer CFN decay at a slower rate than the activations in the lower layers. In theory,
complexity and long-term dependencies can therefore be captured using a more “feed-forward”
approach (i.e. stacking layers) rather than relying on the intricate and hard to interpret dynamics of
an LSTM or a GRU.

Overall, the CFN is a simple model and it therefore has the potential of being mathematically well-
understood. In particular, Section 2 reveals that the dynamics of its hidden states are inherently more
interpretable than those of an LSTM. The mathematical analysis here provides a few key insights
into the network, in both the presence and absence of input data, but obviously more work is needed
before a complete picture can emerge. We hope that this investigation opens up new avenues of
inquiry, and that such an understanding will drive subsequent improvements.

8

Under review as a conference paper at ICLR 2017

REFERENCES

Nils Bertschinger and Thomas Natschl¨ager. Real-time computation at the edge of chaos in recurrent

neural networks. Neural computation, 16(7):1413–1436, 2004.

Kyunghyun Cho, Bart Van Merri¨enboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Hol-
ger Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder
for statistical machine translation. arXiv preprint arXiv:1406.1078, 2014.

Felix A Gers, J¨urgen Schmidhuber, and Fred Cummins. Learning to forget: Continual prediction

with lstm. Neural computation, 12(10):2451–2471, 2000.

Michel H´enon. A two-dimensional mapping with a strange attractor. Communications in Mathe-

matical Physics, 50(1):69–77, 1976.

Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory. Neural computation, 9(8):

1735–1780, 1997.

Rafal Jozefowicz, Wojciech Zaremba, and Ilya Sutskever. An empirical exploration of recurrent net-
work architectures. In Proceedings of the 32nd International Conference on Machine Learning,
2015.

Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated

corpus of english: The penn treebank. Computational linguistics, 19(2):313–330, 1993.

Tomas Mikolov, Armand Joulin, Sumit Chopra, Michael Mathieu, and Marc’Aurelio Ranzato.
Learning longer memory in recurrent neural networks. arXiv preprint arXiv:1412.7753, 2014.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difﬁculty of training recurrent neural

networks. ICML (3), 28:1310–1318, 2013.

Steven H Strogatz. Nonlinear dynamics and chaos: with applications to physics, biology, chemistry,

and engineering. Westview press, 2014.

Sainbayar Sukhbaatar, Jason Weston, Rob Fergus, et al. End-to-end memory networks. In Advances

in neural information processing systems, pp. 2440–2448, 2015.

David Sussillo and Omri Barak. Opening the black box:

low-dimensional dynamics in high-

dimensional recurrent neural networks. Neural computation, 25(3):626–649, 2013.

Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization.

arXiv preprint arXiv:1409.2329, 2014.

9

Under review as a conference paper at ICLR 2017

APPENDIX

Strange attractor of the H´enon map. For the sake of comparison, we provide in Figure 5 a depic-
tion of a well-known strange attractor (the H´enon attractor) arising from a discrete-time dynamical
system. We generate these pictures by reproducing the numerical experiments from H´enon (1976).
The discrete dynamical system considered here is the two dimensional map

xt+1 = yt + 1 − ax2
t ,

yt+1 = bxt,

with parameters set to a = 1.4 and b = 0.3. We obtain Figure 5(a) by choosing the initial state
(x0, y0) = (0, 0) and plotting the iterates (xt, yt) for t between 103 and 105. All trajectories starting
close to the origin at time t = 0 converge toward the depicted attractor. Successive zooms on the
branch of the attractor reveal its fractal nature. The structure repeats in a fashion remarkably similar
to the 2-unit LSTM in Section 2.

Figure 5: Strange attractor of the H´enon map. From left to right: The H´enon attractor, enlargement
of the red box, enlargement of the magenta box.

Strange attractor of a 2-unit GRU. As with LSTMs, the GRU gated architecture can induce a
chaotic dynamical system. Figure 6 depicts the strange attractor of the dynamical system

ut = ht,

u (cid:55)→ Φ(u) := (1 − z) (cid:12) u + z (cid:12) tanh (U (r (cid:12) u))
z := σ (Wzu + bz)

r := σ (Wru + br) ,

induced by a two-dimensional GRU, with weight matrices

Wz =

(cid:21)
(cid:20)0 1
1 1

Wr =

(cid:20)0
1

(cid:21)

1
0

U =

(cid:21)

(cid:20)−5 −8
5
8

and zero bias for the model parameters. Here also successive zooms on the branch of the attractor
reveal its fractal nature. As in the LSTM, the forward trajectories of this dynamical system exhibit
a high degree of sensitivity to initial states.

Figure 6: Strange attractor of a two-unit GRU. Successive zooms reveal the fractal nature of the
attractor.

10

Under review as a conference paper at ICLR 2017

Network sizes and learning rate schedules used in the experiments. In the Penn Treebank ex-
periment without dropout (Table 1), the CFN network has two hidden layers of 224 units each for
a total of 5 million parameters. The LSTM has one hidden layer with 228 units for a total of 5
million parameters as well. We also tried a two-layer LSTM with 5 million parameters but the result
was worse (test perplexity of 110.6) and we did not report it in the table. For the Text8 experiments
(Table 2), the LSTM has two hidden layers with 481 hidden units for a total 46.4 million parameters.
We also tried a one-layer LSTM with 46.4 million parameters but the result was worse (perplexity
of 140.8). The CFN has two hidden layers with 495 units each, for a total of 46.4 million parameters
as well.

For both experiments without dropout (Table 1 and 2), we used a simple and aggressive learning
rate schedule: at each epoch, lr is divided by 3. For the CFN the initial learning rate was chosen to
be lr0 = 5.5 for PTB and lr0 = 5 for Text8. For the LSTM we chose lr0 = 7 for PTB and lr0 = 5
for Text8.

In the Penn Treebank experiment with dropout (Table 3), the CFN with 20M parameters has two
hidden layers of 731 units each and the LSTM with 20M parameters trained by us has two hidden
layers of 655 units each. We also tried a one-layer LSTM with 20M parameters and it led to similar
but slightly worse results than the two-layer architecture. For both network, the learning rate was
divided by 1.1 each time the validation perplexity did not decrease by at least 1%. The initial
learning rate were chosen to be lr0 = 7 for the CFN and lr0 = 5 for the LSTM.

11

