DUGMA: Dynamic Uncertainty-Based Gaussian Mixture Alignment

Can Pu
can.pu@ed.ac.uk

Nanbo Li
nanbo.li@ed.ac.uk

Radim Tylecek
rtylecek@inf.ed.ac.uk

Robert B. Fisher
rbf@inf.ed.ac.uk
School of Informatics, University of Edinburgh

(a) Before registration

(b) After registration

8
1
0
2
 
g
u
A
 
2
 
 
]

V
C
.
s
c
[
 
 
2
v
6
2
4
7
0
.
3
0
8
1
:
v
i
X
r
a

Abstract

Accurately registering point clouds from a cheap low-
resolution sensor is a challenging task. Existing rigid reg-
istration methods failed to use the physical 3D uncertainty
distribution of each point from a real sensor in the dynamic
It is mainly because the uncertainty
alignment process.
model for a point is static and invariant and it is hard to
describe the change of these physical uncertainty models in
different views. Additionally, the existing Gaussian mixture
alignment architecture cannot efﬁciently implement these
dynamic changes.

This paper proposes a simple architecture combining er-
ror estimation from sample covariances and dynamic global
probability alignment using the convolution of uncertainty-
based Gaussian Mixture Models (GMM). Firstly, we pro-
pose an efﬁcient way to describe the change of each 3D
uncertainty model, which represents the structure of the
point cloud better. Unlike the invariant GMM (representing
a ﬁxed point cloud) in traditional Gaussian mixture align-
ment, we use two uncertainty-based GMMs that change and
interact with each other in each iteration. In order to have
a wider basin of convergence than other local algorithms,
we design a more robust energy function by convolving efﬁ-
ciently the two GMMs over the whole 3D space.

Tens of thousands of trials have been conducted on hun-
dreds of models from multiple datasets to demonstrate the
proposed method’s superior performance compared with
the current state-of-the-art methods. All the materials in-
cluding our code are available from https://github.
com/Canpu999/DUGMA.

(c) After registration (texture mapped)

Figure 1: In this work, DUGMA incorporates the 3D un-
certainty distribution of each 3D point from a sensor into
a dynamic Gaussian mixture alignment system. The ﬁgure
shows a critical example of aligning two noisy and partial
3D scans with many outliers and different densities from
two real low-resolution scanners using our algorithm.

1. Introduction

With recent improvements in depth sensing devices and
algorithms, 3D point clouds are more accessible to re-
searchers. However, using an expensive high-precision 3D
scanner to get accurate and large-scale 3D point clouds is

still not popular. Accurate alignment of noisy and partial
point clouds with many outliers from cheap low-resolution
sensors is still a core technique in various ﬁelds, such as
computer vision, robotics, virtual and augmented reality.

Finding the accurate transformation between two noisy
rigid point clouds is generally hard: true point-to-point cor-
respondences seldom exist, which limits the accuracy of the

1

methods based on ICP [29, 32, 23, 1, 5, 12, 21]. As for
the methods based on local descriptors [16, 30, 22, 25],
coarse points tend to cause inaccurate local descriptors to
mismatch with each other. Also, the variable density (dis-
tant areas have a lower point cloud density) will make
them unstable. Aligning probabilistic models can effec-
tively mitigate the problems above. Thus, many researchers
have been exploring different kinds of probabilistic mod-
els [24, 3, 31, 15, 19, 26] to represent the real surface struc-
ture.

However, as far as we can tell, no one has incorporated
the physical 3D uncertainty distribution information for
each point from a real sensor into the probabilistic model,
which allows describing the real surface structure more ac-
curately. The challenges mainly lie in two parts: the ﬁrst is
how to get the real uncertainty distribution information from
the real sensors. In the recent years, an increasing number
of researchers have been investigating how to estimate the
uncertainty of the acquired data for different sensors, such
as the Kinect sensor [20], the time of ﬂight sensor [7], the
structure from motion sensor [10] and the stereo vision sen-
sor [18]. These suggest using physical noise models for
each point to represent their individual occurrence proba-
bility in 3D space. The second challenge is how to use
physical uncertainty information for each point from each
speciﬁc view in the registration process. Speciﬁcally, if
we use a Gaussian function with a covariance to represent
the uncertainty of one point in the 3D space, the covari-
ance should change with each different coordinate system
in each iteration. Thus, the registration process is dynamic.
Moreover, the use of the covariance estimated from differ-
ent viewpoints leads to position estimates that are compat-
ible with each physical covariance. After that, we build a
bridge to make two point clouds interact with each other by
sharing information, which is obviously different from tra-
ditional Gaussian mixture alignment [15, 4]. The GMM of
the ﬁxed point cloud in their methods is invariant and can’t
share their state with the GMM of the moving point cloud,
reducing the registration accuracy and also making the us-
age of physical uncertainty models unavailable.

In this paper, we propose a simple architecture com-
bining error estimation from sample covariances and dual
dynamic global probability alignment using the convolu-
tion of uncertainty-based GMMs from point clouds in the
whole 3D space. Firstly, we propose an effective way to
describe the change of each 3D uncertainty model in the
dynamic registration process, which represents the struc-
ture of the point cloud much better. Unlike the invari-
ant GMM (representing the ﬁxed point cloud) in traditional
Gaussian mixture alignment, we use a dynamic uncertainty-
based GMM for each point set, which interact in each it-
eration. To be less susceptible to local minima, we de-
ﬁne a more robust energy function by convolving the two

dynamic GMMs over the whole 3D space rather than use
time-consuming optimization methods, such as branch and
bound [29, 4, 24]. The proposed dual dynamic uncertainty-
based GMM’s alignment can be optimized efﬁciently by
the EM algorithm [8, 2], which experimentally shows a
wider basin of convergence than other local algorithms. A
new empirical approximation will be proposed to reduce the
amount of calculation drastically.

The rest of this paper is organized as the following. In
Section 2, key previous registration algorithms will be re-
viewed brieﬂy and also recent advances of the methods for
estimating the uncertainty of the acquired data from differ-
ent sensors.
In Section 3, the dynamic uncertainty-based
Gaussian mixture alignment theory is presented. In Section
4, tens of thousands of trials have been conducted on mul-
tiple real datasets through simulation, which is more sys-
tematic testing than that done for the compared algorithms.
Also, we show real application tests with most recent and
advanced algorithms. Our accuracy improvement comes
from the following key contributions:

Key contributions:
1) Incorporation of the invariant 3D uncertainty distribu-
tion information (represented by a Gaussian function with a
physical covariance) into the dynamic registration;

2) A bridge to make the two point clouds interact with
each other by creating a novel point proximity weight term;
3) A more robust energy function and efﬁcient approxi-
mation to the optimization step that greatly reduces compu-
tational complexity.

2. Related Work

In 1992, Besl and McKay [1] ﬁrst introduced the Iter-
ative Closest Point (ICP) algorithm to compute the rigid
transformation between two point clouds by minimizing the
Euclidean distance between the corresponding points. Since
then, a large number of variants have been proposed and the
reader could be directed to the survey [21]. To enhance
robustness to noise, Segal et al. proposed Generalized-
ICP [23] in 2009, which considered the probability distri-
bution of each point but was still based on binary correpon-
dence search. To be robust to occlusion and small partial
overlap, researchers [32] built bilateral correspondence us-
ing bidirectional distances. To widen the convergence zone,
GO-ICP [29] used a branch-and-bound method to avoid get-
ting stuck in local minima. Exact point-to-point correspon-
dences seldom exist and the correspondence deﬁnition (two
points have the minimum distance rather than are in the
same place) is coarse, which makes it hard for the ICP fam-
ily to achieve accurate results.

The second class of the alignment approaches is feature-
based methods, which ﬁrst extract and match local descrip-
tors (e.g. FPFH [22], SHOT [25]) from two point clouds and
then estimate the relative pose using random sampling [22],

2

RANSAC [11], Hough transforms [27], etc. Recently, Zeng
et al. [30] used a siamese neural network to learn a local
patch descriptor in a volumetric grid to establish the cor-
respondences between two point clouds. Similarly, Elbaz
et al. [9] used a deep neural network auto-encoder to en-
code local 3D geometric structures instead of traditional de-
scriptors. Lei et al. [16] proposed a fast descriptor based on
eigenvalues and normals computed from multiple scales to
extract the local structure of the point clouds and then recov-
ered the transformation from matches. However, they are
sensitive to noisy point clouds. Additionally, the density of
the point cloud inﬂuences the extraction of local descriptors
and even makes them completely break down if the density
is too low.

Aligning probabilistic models which represent the struc-
ture of the point cloud can efﬁciently mitigate the prob-
lems above. Our method belongs to this class. One key
factor to an accurate and robust registration is the data
representation used. Since 2003, many approaches based
on a variety of probabilistic models have been explored
to represent the structure of the point cloud such as Ro-
bust Point Matching [6], Kernel Correlation [26], Coherent
Point Drift [19]. In 2011, GMMREG [15] used two Gaus-
sian mixture models with the same isotropic covariances for
each point and minimized the L2 distance between the two
GMMs to get the transformation. The GMM which repre-
sented the ﬁxed point cloud was regarded as invariant and
thus could not receive the current registration state from the
other point cloud. In 2014, Zhou et al. [31] proposed to use
the Student’s-t mixture model to represent the point cloud in
the registration algorithm. In 2015, Campbell et al. [3] used
a Support Vector Machine to learn and construct SVGM
(a GMM with non-uniform weights) to represent the point
cloud. In the next year, Campbell et al. used SVGM [3]
and the architecture in GMMREG [15] to get the globally-
optimal transformation using a branch and bound approach
in order not to be vulnerable to local minimum. Recently,
Straub et al. [24] used a Dirichlet process Gaussian mix-
ture (DP-GMM) and a Dirichlet process von Mises-Fisher
mixture (DP-vMF-MM) to represent the geometric infor-
mation of the point cloud. The mathematical probabilistic
model used to represent the point cloud has become con-
siderably complex. Nevertheless, we will use the physical
3D uncertainty distribution from real sensors to construct
a simple uncertainty-based GMM to represent the structure
of the point cloud, which will ﬁt the real surface geometry
better.

The acquisition of a physical 3D uncertainty distribution
for each point from a real sensor is a difﬁcult task. With the
development of different depth sensors, more effective un-
certainty estimation methods for various sensors have been
designed.
In 2012, Nguyen et al. [20] used the distance
and angle between the Kinect sensor and observed surface

In
to estimate both axial and lateral noise distributions.
2013, Engel et al. [10] used the geometric disparity error
and photometric disparity error for the structure from mo-
tion sensor to estimate 3D point error. Recently, many re-
searchers [7, 18] have estimated the uncertainty for the ToF
(Time of Flight) sensor based on the physical properties of
the sensor (eg. the IR frequency). Meanwhile, [18] devel-
oped an empirical uncertainty model for the stereo vision
sensor based on the relationship between the local cost and
global cost.

In summary, there are previously developed methods for
both robust rigid point cloud registration and modelling the
3D uncertainty distribution of the points in a 3D point cloud.
This paper improves registration accuracy and robustness
using an approach that combines these two themes and re-
designs a dynamic Gaussian mixture alignment system us-
ing invariant 3D uncertainty information from each point
cloud.

3. Methodology

First we introduce the change of 3D uncertainty distri-
bution, then build a bidirectional dynamic bridge between
the two point clouds, and ﬁnally introduce the framework
of our math model. Table 1 lists some of the symbols and
their notations.

Table 1: Symbols & Notations

Symbol
X, Y
D
N, M
xn
ym
Σxn, Σym
I
0

Notation
Two point clouds
Dimensionality of the point clouds
Number of points in X, Y point cloud
One point in X point cloud
One point in Y point cloud
Covariance for point xn and ym
Identity matrix
Column vector of all zeros

3.1. Change of 3D Uncertainty Distribution

We will use a Gaussian function with a covariance to
represent the distribution of one point in 3D space. The
speciﬁc covariance for each point represents the physical
3D uncertainty distribution for that point from a real sensor.
(1) If a point with covariance Σorig has been rotated by

R, then Σ will be Σ = RΣorigR(cid:48).

(2) A scaling factor for the covariance of a point is pro-
portional to the average minimum distance σ between two
point clouds to ensure that the probability of all the points
in the other point cloud will not become too small when the
two point clouds are far away from each other. See Algo-
rithm 1.

3

3.2. Dynamic Gaussian Mixture Alignment

The Gaussian function gxn (τ ) of the point xn predicts
the probability that xn appears at the position τ in its own
coordinate system. Based on Gaussian weights around each
point, we will deﬁne a probability-like function that not
only depends on the distribution of the point (represented
by isotropic or anisotropic covariance) but also whether a
possible corresponding point cpxn in the other point cloud
is nearby. We model the presence of a corresponding point
by a weight function wxn (τ, cpxn ) that has signiﬁcant value
only when a potential corresponding point cpxn from point
cloud Y is near the position τ . A similar deﬁnition holds
for gym (τ ), wym(τ, cpym ). Thus either point cloud can re-
ceive and send current state information from or to the other
point cloud bi-directionally to evaluate the current registra-
tion quality.

In the analysis below, we assume the Y point cloud has
been already transformed from the initial point cloud Y0 by
rotation R and translation t (which then become the domain
for the optimization of the evaluation function). The prod-
uct gxn (τ )gym (τ ) represents xn, ym appearing at the same
position τ in the same coordinate system. Thus, it encodes
the underlying prior knowledge, ie. xn, ym are possible cor-
responding points from two point clouds. In other words,
any two points from the ﬁxed and moving point cloud can
be a corresponding pair in our system and the likelihood
depends on the probability of correspondence that xn, yn
appear at the same position τ , which is different from soft
assignment [13] in essence.

3.3. The description of our model

Based on the previous discussion, we design the

uncertainty-based GMM as follows:

GI,0

X (τ ) =

wxn (τ, cpxn )gxn (τ ),

GR,t

Y (τ ) =

wym(τ, cpym )gym (τ ),

N
(cid:88)

n=1

M
(cid:88)

m=1

where the gaussian kernels are given by

gxn (τ ) =

gym (τ ) =

1
(cid:112)(2π)D|Σxn |
1
(cid:112)(2π)D|Σym |

e− 1

2 (τ −xn)T Σ−1
xn

(τ −xn)

e− 1

2 (τ −ym)T Σ−1
ym

(τ −ym)

wxn (τ, cpxn ) = e− 1
wym(τ, cpym ) = e− 1

2 (cpxn −τ )T Σ−1
xn

(cpxn −τ )

2 (cpym −τ )T Σ−1
ym

(cpym −τ )

Σym = RΣym0R(cid:48) , |Σym| = |RΣym0R(cid:48)| = |Σym0| due
to |R| = 1. Σ−1
R(cid:48) due to
ym
RR(cid:48) = I. At all times, xn = xn0 and Σxn = Σxn0. Each
point has its own covariance.

= (RΣym0 R(cid:48))−1 = RΣ−1
ym0

Integrating the product of the two dynamic GMMs (rep-
resenting the overlapping effect of the two point clouds)
over the whole 3D space, as we shall show in our experi-
ments, makes the energy function more robust, accurate and
have a wider convergence basin compared with [19, 15, 4].
We now formulate the optimization over rotation R and
translation t as an EM-like process. First, an energy func-
tion is deﬁned as the following
(cid:90)

E =

P (τ ) log (cid:2)GI,0

X (τ )GR,t

Y (τ )(cid:3) dτ,

(7)

where τ integrates over all the domain of the point clouds;
P (τ ) is the probability that there is a point at the position τ .
We design it as the sum of the probability that all the possi-
ble corresponding pairs appear at the position τ in

P (τ ) =

P (τ, xi, yj) =

gxi (τ )gyj (τ ). (8)

N
(cid:88)

M
(cid:88)

i=1

j=1

N
(cid:88)

M
(cid:88)

i=1

j=1

Equation (7) can be rewritten as

(cid:90)

E =

P (τ ) log (cid:2)

N
(cid:88)

M
(cid:88)

i=1

j=1

F R,t(τ, xi, yj)(cid:3) dτ,

(9)

with a combined term

F R,t(τ, xi, yj) = wxi(τ, cpxi)gxi(τ )wyj (τ, cpyj )gyj (τ ).
(10)
By the deﬁnitions above, the weight term wxi(τ, cpxi) is
nearly zero when point xi is far from any point in {yj}.
This allows us to avoid having to compute correspondences
by using all yj in place of cpxi (and similarly for cpyj ) and
simplify F R,t with

˜F (τ, xi, yj) = wxi(τ, yj)gxi(τ )wyj (τ, xi)gyj (τ ).

(11)

We maximize Equation (9) to get the estimated rotation
and translation by minimizing its negative. We adopt the
EM algorithm [8, 2] to solve for R, t.
Its main idea is:
guess the values of the parameters ﬁrstly in the last itera-
tion (denoted by ‘old’) and calculate the posteriori proba-
bility P old(xi, yj|τ ) using Bayes’ theorem then, which cor-
responds to the expectation stage. After that, minimize the
expectation of the negative log-likelihood function L to ﬁnd
the parameters in the current iteration (denoted by ‘new’),
which corresponds to the maximization stage. Thus, we get

GI,0
X (τ ) denotes the GMM from the ﬁxed point cloud X and
GR,t
Y (τ ) represents the GMM from the moving point cloud
Y after rotation R and translation t. Thus ym = Rym0 + t,

L = −

(cid:90) N
(cid:88)

M
(cid:88)

i=1

j=1

B(τ, xi, yj) log( ˜F new(τ, xi, yj)) dτ, (12)

B(τ, xi, yj) = P (τ ) P old(xi, yj | τ ). (13)

(1)

(2)

(3)

(4)

(5)

(6)

4

N
(cid:88)

M
(cid:88)

(cid:88)

˜L =

i=1

j=1

τ ∈{xi,yj }

P old(τ, xi, yj) M ahnew(τ, xi, yj).

4.1. Simulation

Expanding the last sum and uniting like terms we get

(16)

Neglecting the constant term and using P (τ ) ≈ P old(τ ),

we simplify the target function to

L =

N
(cid:88)

M
(cid:88)

(cid:90)

i=1

j=1

P old(τ, xi, yj) M ahnew(τ, xi, yj) dτ,

where a term similar to Mahalanobis distance is obtained:

M ahnew(τ, xi, yj) =

(τ − xi)T (Σ−1
xi

+ Σ−1
yj

)(τ − xi)

+

(τ − yj)T (Σ−1
xi

+ Σ−1
yj

)(τ − yj).

1
2
1
2

(14)

(15)

justify below,

As we will
there is no real bene-
ﬁt
to integrate the whole 3D space, because the val-
ues of the Gaussian functions are only signiﬁcant near
In fact, because most val-
the data points themselves.
ues are quite low, we approximate the integral by a sum
at only the data points to speed up the algorithm drasti-
cally (unlike [4]). Thus we need evaluate only each term
P old(τ, xi, yj)M ahnew(τ, xi, yj) at the positions of xi and
yj, which will reduce the time complexity greatly to only
O(M N ). Applying this simpliﬁcation, the approximated
energy function becomes

C old

i,j · (yj − xi)T (Σ−1
xi

+ Σ−1
yj

)(yj − xi), (17)

˜L =

N
(cid:88)

M
(cid:88)

i=1

j=1

where

i,j =(2π)−D|Σxi|− 1
C old
2 (yj −xi)T Σ−1
xi

(cid:0)e− 1

2 |Σyj |− 1

2

(yj −xi) + e− 1

2 (xi−yj )T Σ−1
yj

(18)
(xi−yj )(cid:1).

The xi, yj, Σxi and Σyj in C old
i,j are from the previous it-
eration. We then minimize Equation (17) over the rotation
R and translation t domain, using interior point optimiza-
tion [28] as summarized in Algorithm 1.

4. Experiments

We implemented our algorithm using Matlab and Cuda
C++. We ran all the algorithms on a laptop with In-
tel Core i7-7820HK processor (quad-core, 8MB cache, up
to 4.4GHZ) and NVidia Geforce GTX 1080 with 8GB
GDDR5X. To test the accuracy and robustness of our al-
gorithm, our proposed method is compared with relevant
recent algorithms from the top journals and conferences:

5

Algorithm 1 DUGMA Point Cloud Registration.
Input: Two point clouds X, Y and their covariances
Σx, Σy, initial transformation R = I, t = 0.

1: EM-like optimization, repeat until convergence:
2: procedure E-STEP
Y ← RY + t
3:
σ ← 1
4:
M
Σy ← σ RΣyR(cid:48)
5:
C old
6:

j=1 dmin(yj, X)

i,j ← compute Eq. (18)

(cid:80)M

(cid:46) Update Y, σ, Σy, C old
i,j

(cid:46) Minimum distance

7: procedure M-STEP
8:
9:

Use interior point algorithm to solve Eq. (17):
(R, t) ← arg minR,t ˜L

(cid:46) Solve for R,t

CPD [19], GMMREG [15], BDICP [32], GOICP [29],
GOGMA [4], 3DMATCH [30]1, FDCP [16]2. All the code
is directly from the authors. We did not compare ours with
[9] because we could not get our re-implemented algorithm
to work well based on their partial released code. The Stan-
ford 3D Scanning Repository [17] and our new 3D dataset
have been used to do performance comparison of the algo-
rithms. After that, 30 real scenes with ground truth from
multiple Kinect sensors in our new dataset3 have been used
to show the approach works on par or better in a real appli-
cation compared with the rest.

To synthesize the two point clouds to register, we ran-
domly choose a model from the datasets above for two
point clouds ﬁrstly. Then a different random large segment
of each point cloud is removed completely to simulate oc-
clusion. After that, the two occluded models are sampled
differently, which simulates the resolution of different sen-
sors in real scenarios. Also, different anisotropic Gaussian
noise with random standard deviations and zero mean has
been added to each point to simulate the complex noise in
real environments resulting from known and unknown fac-
tors. The variances of all the noise on each axis have been
stored in the covariances accurately. Next, outliers have
been added into both point clouds to simulate outliers ac-
quired by the sensors. Finally, an initial rigid transformation
is applied to the moving point cloud.

The experiments are divided into four groups given the
four inﬂuence factors or variables: noise, outliers, occlu-
sion, and initial rotation.
In each group of experiments,
one controlled variable will be changed and the values of
the other variables will be picked randomly from a default
range. The experiment is conducted 3 times at each con-
trolled value for each of 100 shapes with a random pertur-

1We only compared ours with 3DMATCH in the Kinect data applica-

tion with their pre-trained weights.

2FDCP has compared their results with [24] so we neglected [24].
3https://github.com/Canpu999/DUGMA

(a) Bunny

(b) Armadillo

(c) Drill

(d) Pole

(e) Court

(f) Garden

Figure 2: six example 3D models, (a)(b)(c) from Stanford 3D Scanning Repository, (d)(e)(f) from our new dataset

(a) Model

(b) Sampling rate 85%

(c) Occlusion 10%

(d) Outliers 200

(e) Noise standard devia-
tion=0.1

(f) Initial rotation angle
in x,y,z=(0°,30°,30°)

Figure 3: Different inﬂuences from various factors.

Algorithm 2 Controlled and random variables process. For
each method, 14700 trials have been done.

Noise standard
deviation

bation each time, see Algorithm 2. The maximum itera-
tion value for all is 100. For FDCP, we set gridStep=1.5
and Rho=0.1 to make it robust to different densities. For
GOGMA we set the scale parameter for SVM (0.5,0.5) to
limit GOGMA’s running time to around 100 seconds per
registration. For GOICP, Mean Squared Error (MSE) con-
vergence threshold MSEThresh=0.2. The rest of the pa-
rameters share default values in their open code.
We use ||tgt − test||F , ||I − RgtR−1

est||F [14] to esti-
mate the quality of the registration, where Rgt, tgt are the
ground truth and Rest, test are estimated results respec-
tively and || • ||F is the Frobenius norm.

for shape := 1 to 100 do

1: for controlled variable := start by step to end do
2:
3:
4:

Produce data with controlled and random

for instance := 1 to 3 do

5:
6:
7:

variable

Do registeration (different algorithms)
Calculate the registration error

From the Stanford 3D Scanning Repository (50) and our
new dataset (50) we got 100 models from various views
of different objects and scenes. Each was downsampled to
about 1000 points with different densities. Figure 2 shows

6

6 example models from different scenes and objects.

We apply different effects to simulate the real factors in
the real environment. Figure 3 shows examples of the ef-
fects. In our experiment, the sampling rate is set to 90%
and 85% for the ﬁxed and moving point cloud, respectively.
Table 2 gives speciﬁc information about the parameters.

Table 2: Range for random and controlled factors

Factor
Initial rotation
Outliers

Occlusion

random range
[-20°, 20°]
[0, 500] that
is, [0, ≈33%]
[0, 0.2] × ra-
dius of point
cloud
[0, 15%]

controlled range
[-60°, 60°]; step=8°
[0, 2000] that is, [0,
≈67%]; step=200
[0, 0.3] × radius
of
cloud;
point
step=0.03
[0, 30%]; step=0.03

Figure 4 shows one successful registration in a real gar-
den. After registration, we could see the hedges and trees
overlap well although there is a big patch of occlusion in
both two point clouds, many outliers and noise.

When the initial rotation angle value is the controlled
variable, it ranges from [-60°, 60°], with an 8° step. In the
experiments, the speciﬁc rotation angle around each axis
is chosen as 0 or the initial rotation angle value randomly.
Figure 5 shows that beyond -40°or 40°, the proposed algo-

Figure 4: A successful registration in a real garden.

rithm breaks down because the iteration count exceeds the
maximum. But within [-40°, 40°], our algorithm is much
more stable and accurate compared with the rest. In Fig-
ures 5,6,7,8, ‘Time’ refers to the average running time per
registration. If rotation and translation error is below 0.2
and 0.1 respectively in a trial, the trial is a success (third
plot). When occlusion rate is the controlled variable, Figure

Figure 6: Occlusion Experiment

Figure 7: Outlier Experiment

Figure 5: Rotation Experiment

4.2. Real data from multiple Kinect sensors

6 shows within 25%, the proposed algorithm performs well.
Judging that GOGMA needs much more time (about
1000 sec for a trial) to achieve a much better performance
and behaved poorly in the experiments above, we will ne-
glect GOGMA in the remaining noise and outlier experi-
ments but later compare the proposed algorithm with it in
the small dataset registration experiment.

When outliers are the controlled variable, we use covari-
ances generated in the same manner as the true data points.
Figure 7 shows the proposed algorithm has superior perfor-
mance again. When the noise level is the controlled vari-
able, Figure 8 shows robust and accurate performance com-
pared with the rest.

The simulation experiments above show our algorithm
works well with very accurate covariance estimates. In the
real case, it is hard to get very accurate covariance esti-
mates. In this real application, we estimate an inaccurate
covariance for each 3D point from a Kinect sensor to test
our algorithm. We design the uncertainty of each valid 3D
point acquired by the Kinect sensor based on the depth value
d and the angle α between the camera and the normal of the
surface [20].

U (α, d) = exp[w1(1 − cos α) + w2d]

(19)

We use w1 = 1.6658 and w2 = 0.2776 by letting
U (π/3, 0) = U (0, 3) = 2.2. The number 2.2 is set man-

7

Table 3: Experiment Results for the Real Application

Method

Error
Mean
(R)
0.05

CPD
Gmmreg -
-
BDICP
GOICP
-
GOGMA 0.04
3dmatch 0.08
0.06
FDCP
0.04
Ours

Error
Std
(R)
0.03
-
-
-
0.03
0.04
0.02
0.03

Error
Mean
(t)
0.03
-
-
-
0.03
0.04
0.04
0.04

Error
Std
(t)
0.01
-
-
-
0.02
0.02
0.01
0.02

Suc.
rate

Time
s/trial

-
-
-

50% 42.0
0
0
0
93% 1125
23% 6.6
40% 8.2
96% 163

other 2D point clouds with 100 different shapes (face, um-
brella, computer etc.) to test our sensitivity to shapes. We
have used 100*5 2D models from Gatorbait100 database
with 5 different densities to test our sensitivity to density.
All the results are equally robust. We have also tested our
method without any uncertainty information and replaced
each covariance matrix with an identity matrix. The re-
sults show our method with uncertainty information is bet-
ter than that without uncertainty and both are better than
the other comparison algorithms. For more details, see
our supplementary materials https://github.com/
Canpu999/DUGMA.

5. Conclusion

The proposed algorithm is simpler and more effective
than the previous algorithms. We incorporated the 3D un-
certainty distribution into a simple dynamic Gaussian mix-
ture alignment. The obvious difference between our algo-
rithm and the previous ones is that it needs covariances at
each point as input, which requires error models of how to
estimate the real covariance for each kind of sensor. All the
experiments we have done show that the proposed method
is very robust and accurate and works well. In the future, we
will only use the points from set Y in the neighbourhood of
xi to approximate all the points in set Y in Equation (17) to
reduce the time complexity to O(N ).

6. ACKNOWLEDGMENTS

The research is funded by TrimBot2020 project [Grant
Agreement No. 688007] in the European Union Horizon
2020 programme. We thank Dylan Campbell ([4, 3]), Andy
Zeng [30], Huan Lei [16], Jihua Zhu [32] for providing help
when we did the comparison experiments. We thank Dylan
Campbell, Marcelo Saval-Calvo for giving us good advice
on this paper.

Figure 8: Noise Experiment

ually and the algorithm works well if that number is in the
range [1,10] (known by our experiments). Then we simply
multiplied the uncertainty and the identity matrix to esti-
mate a coarse covariance for each point. Future work will
explore more accurate real covariances to represent the 3D
uncertainty distribution.

We tested our algorithm using two point clouds from two
Kinect sensors. The ground truth of the rotation and trans-
lation between the two Kinect sensors is known by calibra-
tion. Figure 1 (a), (b) show the scene before and after reg-
istration using our algorithm. Figure 1 (c) adds the colour
texture information into the two registered point clouds.

In the experiment, the two point clouds have been down-
sampled to ∼4K points or so using the grid average method.
The downsampling was small from ∼20K to ∼4K (rather
than 640*480 to ∼4K): the Kinect scan was cropped to
the ﬁxed scenes. Then we applied the same initial rota-
tion to all the algorithms and reduced the scale parameter
for SVM (0.08, 0.08) in GOGMA and MSEThresh=0.001
in GOICP to make them get their best performance. Here
we present results from 30 scenes in our new dataset. We
calculated the error and running time based on only suc-
cessful registrations (rotation and translation error is below
0.2 and 0.1). After all the algorithms have converged, our
successful rate (most important) ranks ﬁrst (96%). The es-
timated mean rotation of our algorithm (0.04) is lowest, see
Table 3. Otherwise, our algorithm is about 7 times faster
than GOGMA whose success rate (93%) ranks second.

4.3. Additional Experiments

We have also done 14700 similar trials using 100 2D ﬁsh
models from the Gatorbait1004 database and have used the

4http://www.rvg.ua.es/graphs/dataset01.html

8

References

[1] P. J. Besl, N. D. McKay, et al. A method for registration
of 3-d shapes. IEEE Transactions on pattern analysis and
machine intelligence, 14(2):239–256, 1992. 2

[2] C. M. Bishop. Neural networks for pattern recognition. Ox-

ford university press, 1995. 2, 4

[3] D. Campbell and L. Petersson. An adaptive data represen-
tation for robust point-set registration and merging. In Pro-
ceedings of the IEEE International Conference on Computer
Vision, pages 4292–4300, 2015. 2, 3, 8

[4] D. Campbell and L. Petersson. Gogma: Globally-optimal
In Proceedings of the IEEE
gaussian mixture alignment.
Conference on Computer Vision and Pattern Recognition,
pages 5685–5694, 2016. 2, 4, 5, 8

[5] D. Chetverikov, D. Svirko, D. Stepanov, and P. Krsek. The
trimmed iterative closest point algorithm. In Pattern Recog-
nition, 2002. Proceedings. 16th International Conference on,
volume 3, pages 545–548. IEEE, 2002. 2

[6] H. Chui and A. Rangarajan. A new point matching algo-
rithm for non-rigid registration. Computer Vision and Image
Understanding, 89(2):114–141, 2003. 3

[7] C. Dal Mutto, P. Zanuttigh, and G. M. Cortelazzo. Proba-
bilistic tof and stereo data fusion based on mixed pixels mea-
surement models. IEEE transactions on pattern analysis and
machine intelligence, 37(11):2260–2272, 2015. 2, 3

[8] A. P. Dempster, N. M. Laird, and D. B. Rubin. Maximum
likelihood from incomplete data via the em algorithm. Jour-
nal of the royal statistical society. Series B (methodological),
pages 1–38, 1977. 2, 4

[9] G. Elbaz, T. Avraham, and A. Fischer. 3d point cloud reg-
istration for localization using a deep neural network auto-
encoder. In CVPR, 2017. 3, 5

[10] J. Engel, J. Sturm, and D. Cremers. Semi-dense visual odom-
In Proceedings of the IEEE
etry for a monocular camera.
international conference on computer vision, pages 1449–
1456, 2013. 2, 3

[11] M. A. Fischler and R. C. Bolles. Random sample consen-
sus: a paradigm for model ﬁtting with applications to image
analysis and automated cartography. Communications of the
ACM, 24(6):381–395, 1981. 2

[12] A. W. Fitzgibbon. Robust registration of 2d and 3d point sets.

Image and Vision Computing, 21(13):1145–1153, 2003. 2

[13] S. Gold, C.-P. Lu, A. Rangarajan, S. Pappu, and E. Mjol-
sness. New algorithms for 2d and 3d point matching: Pose
estimation and correspondence. In Advances in Neural In-
formation Processing Systems, pages 957–964, 1995. 4
[14] D. Q. Huynh. Metrics for 3d rotations: Comparison and
Journal of Mathematical Imaging and Vision,

analysis.
35(2):155–164, 2009. 6

[15] B. Jian and B. C. Vemuri. Robust point set registration us-
ing gaussian mixture models. IEEE Transactions on Pattern
Analysis and Machine Intelligence, 33(8):1633–1645, 2011.
2, 3, 4, 5

[16] H. Lei, G. Jiang, and L. Quan. Fast descriptors and corre-
spondence propagation for robust global point cloud regis-
tration. IEEE Transactions on Image Processing, 2017. 2, 3,
5, 8

9

[17] M. Levoy, J. Gerth, B. Curless, and K. Pull. The stanford
3d scanning repository. URL http://www-graphics. stanford.
edu/data/3dscanrep, 2005. 5

[18] G. Marin, P. Zanuttigh, and S. Mattoccia. Reliable fusion
of tof and stereo depth driven by conﬁdence measures.
In
European Conference on Computer Vision, pages 386–401.
Springer, 2016. 2, 3

[19] A. Myronenko and X. Song. Point set registration: Coher-
IEEE transactions on pattern analysis and

ent point drift.
machine intelligence, 32(12):2262–2275, 2010. 2, 3, 4, 5
[20] C. V. Nguyen, S. Izadi, and D. Lovell. Modeling kinect sen-
sor noise for improved 3d reconstruction and tracking. In 3D
Imaging, Modeling, Processing, Visualization and Transmis-
sion (3DIMPVT), 2012 Second International Conference on,
pages 524–530. IEEE, 2012. 2, 3, 7

[21] F. Pomerleau, F. Colas, R. Siegwart, and S. Magnenat. Com-
paring icp variants on real-world data sets. Autonomous
Robots, 34(3):133–148, 2013. 2

[22] R. B. Rusu, N. Blodow, and M. Beetz. Fast point feature
In Robotics and Au-
histograms (fpfh) for 3d registration.
tomation, 2009. ICRA’09. IEEE International Conference
on, pages 3212–3217. IEEE, 2009. 2

[23] A. Segal, D. Haehnel, and S. Thrun. Generalized-icp.

In
Robotics: science and systems, volume 2, page 435, 2009. 2
[24] J. Straub, T. Campbell, J. P. How, and J. W. Fisher, III. Ef-
ﬁcient global point cloud alignment using bayesian nonpara-
metric mixtures. In The IEEE Conference on Computer Vi-
sion and Pattern Recognition (CVPR), July 2017. 2, 3, 5
[25] F. Tombari, S. Salti, and L. Di Stefano. Unique signatures of
histograms for local surface description. In European con-
ference on computer vision, pages 356–369. Springer, 2010.
2

[26] Y. Tsin and T. Kanade. A correlation-based approach to ro-
bust point set registration. In European conference on com-
puter vision, pages 558–569. Springer, 2004. 2, 3

[27] O. J. Woodford, M.-T. Pham, A. Maki, F. Perbet, and
B. Stenger. Demisting the hough transform for 3d shape
recognition and registration. International Journal of Com-
puter Vision, 106(3):332–341, 2014. 2

[28] S. J. Wright. Primal-dual interior-point methods. SIAM,

1997. 5

[29] J. Yang, H. Li, D. Campbell, and Y. Jia. Go-ICP: a glob-
ally optimal solution to 3D ICP point-set registration. IEEE
transactions on pattern analysis and machine intelligence,
38(11):2241–2254, 2016. 2, 5

[30] A. Zeng, S. Song, M. Nießner, M. Fisher, J. Xiao, and
T. Funkhouser. 3dmatch: Learning local geometric descrip-
In CVPR, 2017. 2, 3, 5,
tors from rgb-d reconstructions.
8

[31] Z. Zhou, J. Zheng, Y. Dai, Z. Zhou, and S. Chen. Robust non-
rigid point set registration using student’s-t mixture model.
PloS one, 9(3):e91381, 2014. 2, 3

[32] J. Zhu, D. Wang, X. Bai, H. Lu, C. Jin, and Z. Li. Reg-
istration of point clouds based on the ratio of bidirectional
In 3D Vision (3DV), 2016 Fourth International
distances.
Conference on, pages 102–107. IEEE, 2016. 2, 5, 8

