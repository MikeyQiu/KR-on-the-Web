Soft Rasterizer: Differentiable Rendering for
Unsupervised Single-View Mesh Reconstruction

Shichen Liu1,2, Weikai Chen1, Tianye Li1,2, and Hao Li1,2,3

1USC Institute for Creative Technologies
2University of Southern California
3Pinscreen

{lshichen, wechen, tli}@ict.usc.edu

hao@hao-li.com

9
1
0
2
 
n
a
J
 
3
2
 
 
]

V
C
.
s
c
[
 
 
2
v
7
6
5
5
0
.
1
0
9
1
:
v
i
X
r
a

Abstract

Rendering is the process of generating 2D images from
3D assets, simulated in a virtual environment, typically with
a graphics pipeline. By inverting such renderer, one can
think of a learning approach to predict a 3D shape from
an input image. However, standard rendering pipelines
involve a fundamental discretization step called rasteriza-
tion, which prevents the rendering process to be differen-
tiable, hence able to be learned. We present the ﬁrst non-
parametric and truly differentiable rasterizer based on sil-
houettes. Our method enables unsupervised learning for
high-quality 3D mesh reconstruction from a single image.
We call our framework “soft rasterizer” as it provides an
accurate soft approximation of the standard rasterizer. The
key idea is to fuse the probabilistic contributions of all mesh
triangles with respect to the rendered pixels. When com-
bined with a mesh generator in a deep neural network, our
soft rasterizer is able to generate an approximated silhou-
ette of the generated polygon mesh in the forward pass. The
rendering loss is back-propagated to supervise the mesh
generation without the need of 3D training data. Experi-
mental results demonstrate that our approach signiﬁcantly
outperforms the state-of-the-art unsupervised techniques,
both quantitatively and qualitatively. We also show that
our soft rasterizer can achieve comparable results to the
cutting-edge supervised learning method [49] and in vari-
ous cases even better ones, especially for real-world data.

1. Introduction

We live in a complex three-dimensional world, consist-
ing of limitless 3D shapes of objects and matter, and yet, our
observations are only 2D projections of this world. One of
the fundamental goals in computer vision, dating back to the

4321

R
(cid:48) (below).

Figure 1: Our differentiable Soft Rasterizer
(upper) can
render mesh silhouette that faithfully approximates that
generated by a standard rasterizer
(cid:48) renders a
pixel as solid once it is covered by a projected triangle, lead-
ing to a discrete and non-differentiable process. We propose
to approximate the rasterized triangles
with a “soft”
D(cid:48)i}
{
based on signed distance
continuous representation
Di}
{
ﬁeld. We further fuse
with a differentiable aggregate
Di}
{
), which is essentially a logical or operator, so
function
(
·
A
that the entire framework is differentiable.

R

R

sixties [40], has been to build a computational system that
can understand and reconstruct any 3D scenes, structures,
and objects given a picture. Early attempts for single-view
3D modeling relied on hand-designed priors [28] or statisti-
cal models that describe the image formation process [30].
Later approaches include data-driven techniques that learn
models from a collection of 3D data sets [14, 41].

Recent advancements of deep learning have shown that
the computational gap between 2D images and scene anal-
ysis is closing for a wide range of end-to-end tasks using
supervised learning, such as image recognition [13], object
detection [37] and segmentation [24], etc. However, extend-

(a) Synthetic Image

(b) Our reconstruction

(c) Real image

(d) Our reconstruction

Figure 2: Example reconstruction results using our approach on testing synthetic image and real image.

ing the paradigm of supervised learning for 3D inference is
non trivial, due to the limited availability of 3D assets com-
pared to 2D images, as well as the complexity of rendering
all possibilities w.r.t. shape, texture, lighting exhaustively.
Consequentially, the ability to learn 3D deep models suc-
cessfully without ground-truth supervision can lead to un-
precedented possibilities for the general task of single-view
3D reconstruction tasks.

The key to unsupervised 3D inference is to ﬁnd a way to
relate the changes of non-domain speciﬁc 3D model param-
eters (e.g., geometry, illumination, material properties, etc)
with those in the observed image. Differentiable rendering
relates the derivatives of pixel intensities with the properties
of the virtual object such that a 3D inference problem can
be formulated by a gradient-based optimization without the
need of supervised learning.

However, the rendering procedure is not differentiable in
conventional graphics pipelines. In particular a 3D object is
projected onto the 2D screen through a discretization step
called rasterization, which is not differentiable, while the
model projection itself is.

To enable unsupervised training for image-based recon-
struction, a large body of work [39, 46, 45, 22, 9] have sug-
gested various ways of approximating the rendering gradi-
ent computation in the backward pass. Most of the prior
frameworks are designed for domain-speciﬁc purpose and
remain difﬁcult to handle more general cases. Recently,
Kato et al. [19] have introduced the ﬁrst general-purpose
neural mesh renderer based on deep learning. In [19], they
approximate the rasterization gradient with a hand-designed
function which response is piecewise linear with respect to
the displacement of vertices. While promising results were
shown, the proposed linear function is too simpliﬁed to fully
model the nonlinearity of a real rasterizer. Furthermore,
their framework only approximates the backward gradient
computation while directly using the standard rasterizer in
the forward pass. The inconsistency between the forward
and backward propagations makes it difﬁcult to fully ex-
ploit the effectiveness of the rendering layer.

To address these issues, we propose the ﬁrst truly differ-
entiable rasterizer which is able to faithfully approximate
the discrete rasterization in the forward pass of a deep neu-
ral network. Given a polygon mesh, our rasterizer can di-
rectly generate an approximated silhouette of the input un-

der a given view (Figure 1 upper). Our network is only
trained with multi-view silhouettes. The difference between
our rendered result and the true silhouette can be back prop-
agated to the mesh generator, enabling unsupervised learn-
ing without 3D training data. At test time, our approach can
reconstruct a high-quality 3D mesh from a single image.

The key insight of our work is that we show how to for-
mulate the deterministic sampling operation of a rasterizer
as a probabilistic procedure. While the standard rasterizer
directly picks the color of the closest triangle in the view-
ing direction (Figure 1 below), we propose that all trian-
gles have contributions to each rendered pixel with a cer-
tain probability. In particular, triangles which are closer to
the projected pixels in screen space are more likely to be
sampled from that pixel. To this end, we approximate the
probabilistic contribution of each triangle face to the ren-
dered pixels as a normalized distance ﬁeld computed on
the image plane (Figure 1 upper). By passing the collected
distance ﬁeld to a differentiable aggregate function
),
·
which simulates the logical or operator, our rasterizer can
directly generate an approximated silhouette of the mesh.
We call our framework Soft Rasterizer (SoftRas) as it is a
soft approximation of the standard rasterizer.

(
A

SoftRas itself does not involve any trainable parame-
ters and thus can serve as a ﬂexible module for other ap-
plications. In addition, as we target for mesh reconstruc-
tion, our approach is able to generate higher quality re-
sults with much lower computational cost compared to tech-
niques with voxel or point cloud based representations. Fig-
ure 2 shows examples of our model reconstructing a chair
and ﬁghter aircraft from a single image. We also show
that our approach signiﬁcantly outperforms existing unsu-
pervised methods w.r.t. quantitative and qualitative mea-
sures. Furthermore, our experimental results indicate that
our method can achieve comparable and in certain cases,
even superior results to supervised solutions [49], indicat-
ing the effectiveness of the soft rasterizer framework.

2. Related Work

Differentiable Renderer. The standpoint of viewing vi-
sion problems as inverse graphics has been investigated
since the very beginning of the ﬁeld [3, 54, 34]. Through
inverting the rendering progress, inverse graphics aims to
infer the object shape, illumination and reﬂectance from an

image. To relate the changes in the observed image with
that in the 3D model parameters, there are a number of ex-
isting techniques utilizing the derivatives of rendering.

Gkioulekas et al. [11] build a material dictionary and
propose a direct optimization framework to invert volumet-
ric scattering using stochastic gradient descent.
In [10],
researchers present an analytical formulation between the
measurements and internal scattering parameters which en-
ables a derivative-based optimization. Though the gradients
are leveraged for solving the inverse problems, these ap-
proaches are limited to speciﬁc light transporting problems.
Mansinghka et al. [29] propose a general inverse rendering
technique by using a probabilistic graphics model to infer
scene parameters from observations. More recently, Loper
and Black [27] further introduce OpenDR, an approximate
differentiable renderer which can be incorporated into prob-
abilistic programming framework to obtain derivatives with
respect to the model parameters.

With the recent surge of convolutional neural network,
there is an increasing popularity to consider rendering
derivatives in a deep learning framework.
In particular,
many learning-based techniques [57, 26, 39, 46, 45, 6, 22,
33, 9] have incorporated a differentiable rendering layer
to enable an end-to-end architecture for 3D reconstruction
and material inference in an unsupervised manner. How-
ever, these rendering layers are usually designed for spe-
cial purpose and thus cannot be generalized to more general
cases. Nalbach et al. [31] propose a general deep shading
network which learns the direct mapping from a variety of
deferred shading buffers to corresponding shaded images.
Rezende et al. [38] pioneer in unsupervised 3D structure
generation from a single image using a differentiable ren-
derer. Later, a differentiable rendering pipeline specialized
for mesh reconstruction was proposed by Kato et al. [19] to
approximate the gradient of pixel intensity with respect to
mesh vertices. By using [19], Kanazawa et al. [18] strive to
reconstruct category-speciﬁc mesh from image collections
without relying on 3D ground-truth models. Apart from
rasterization-based rendering, Li et al. [23] introduce a dif-
ferentiable ray tracer to realize secondary rendering effects
in a deep neural network.

In this paper, we focus on exploring a general differen-
tiable framework for rasterization-based rendering. Unlike
Neural 3D Mesh Renderer [19], which approximates the
discrete rasterization operation with a straightforward linear
function, our approach is capable to provide the estimation
of rendering derivative with signiﬁcantly higher accuracy.

Single-view 3D reconstruction.
Image based 3D recon-
struction is a long-standing problem in computer vision.
Single image based reconstruction problem is especially
challenging due to the mismatch between the scarcity of in-
put and the redundancy of the plausible solutions. Recent

advances in machine learning address this issue by learn-
ing the priors of 3D properties, such as shape, reﬂectance
or illumination [2, 4, 44] to reduce the searching space.
Before the advent of differentiable renderer, a majority of
prior works use supervised deep learning approaches, which
seek to learn the nonlinear mapping between the input im-
age and 3D model parameters [47, 52, 55, 42, 49] from la-
beled ground-truth data. To simplify the learning problem,
some works reconstruct 3D shape via predicting interme-
diate 2.5D representations, such as depth map [43, 7, 25],
visual hull [32], implicit ﬁeld [15], displacement map [16]
or normal map [1, 36, 50]. When considering reconstruct-
ing 3D shape, voxel-based representation has received most
attention [51, 56, 48] due to its simplicity of regular struc-
ture and compatibility with convolutional neural network.
However, volumetric representation is constrained by its
resolution due to the data sparsity and high computational
cost. Hence, recent progress on supervised learning has ex-
plored the avenue of reconstructing mesh [49, 12, 35] or
point cloud [8] directly from a single image.

Comparing to supervised learning, unsupervised 3D re-
construction is becoming increasingly important as collect-
ing ground-truth 3D models is much more difﬁcult than la-
beling 2D images. Perspective transformer nets [53] pro-
pose an encoder-decoder network which learns 3D shape
from silhouette images in an unsupervised fashion. The key
to their approach is adding a projection transformation as
a self-supervised loss for regularizing the voxel generation.
Though our geometry reconstruction is also based on sil-
houette images, we use mesh representation which is much
more computational efﬁcient and can reconstruct geometry
with much higher precision compared to the volumetric rep-
resentation in [53].

3. Soft Rasterizer

The main obstacle that impedes the standard graphics
renderer from being differentiable is the discrete sampling
operation, which is also named rasterization, that converts
a continuous vector graphics into a raster image.
In par-
ticular, after projecting the mesh triangles onto the screen
space, standard rasterization technique ﬁlls each pixel with
the color from the nearest triangle which covers that pixel.
However, the color intensity of an image is the result of
complex interplay between a variety of factors, including
the lighting condition, viewing direction, reﬂectance prop-
erty and the intrinsic texture of the rendered object, most
of which are entirely independent from the 3D shape of the
target object. Though one can infer ﬁne surface details from
the shading cues, special care has to be taken to decompose
shading from the reﬂectance layers. Therefore, leveraging
color information for 3D geometry reconstruction may un-
necessarily complicate the problem especially when the tar-
get object only consists of smooth surfaces. As a pioneering

attempt for reconstructing general objects, our work only
focuses on synthesizing silhouettes, which are solely deter-
mined by the 3D geometry of the object.

(a) ground truth

(b) σ = 0.01

(c) σ = 0.03

Figure 3: Example probability maps of a single triangle. (a):
deﬁnition of pixel-to-triangle distance; (b) and (c): proba-
bility maps generated with different σ.

Unlike color image, the silhouette image is a binary
mask where a pixel is labeled as solid as long as it is cov-
ered by any triangle. To differentiate such discrete opera-
tion, we propose to formulate it as a probabilistic procedure.
In particular, instead of viewing sampling as a determinis-
tic event, we assume that each triangle face can potentially
cover a speciﬁc pixel with certain probability. Such proba-
bility distribution is highly related with the distance d(i, j)
between the speciﬁed pixel pi and the triangle fj (Figure 3).
The closer pi is to the center of fj, the more likely pi is cov-
ered by fj. Towards this end, we encode the probabilistic
“contribution” of triangle fj to all image pixels in the form
of probability map, which is denoted as Dj. The value at
the i-th pixel of Dj encodes the probability of fj covers
the corresponding pixel in the ﬁnal rendered image. After
of all triangles are obtained, we
the probability maps
Dj}
{
approximate the rasterization result by fusing
with a
Dj}
{
). We describe
specially-designed aggregation function
(
·
A
the details of computing probability maps
and aggre-
Dj}
{
) in the following sections.
gation function

(
·
A
3.1. Probability Map Computation

×

The probability map Dj of each face fj has the same res-
w) with the output silhouette image ˆS. As dis-
olution (h
cussed before, when computing Dj, the region that is closer
to the triangle center, especially those enclosed by fj, shall
receive higher weight in a properly designed probability dis-
tribution. In contrast, the probability intensity of the pixels
that are outside fj should drop fast as their distance to fj
increases. It is easy to observe that such probability distri-
bution is closely related to the distance ﬁeld with respect to
the boundary of the triangle fj. To this end, we propose the
formulation of Dj as follows:

Di
j = sigmoid(δij ·

d2(i, j)
σ

),

(1)

where Di

j is the probability value at the i-th pixel pi

(scan line order) of Dj; d(i, j) returns the shortest distance
from pi to the edges of fj (see Figure 3(a)); σ is a posi-
tive hyperparameter that controls the sharpness of the prob-
ability distribution while δij is a signed indicator whose re-
sponse depends on the relative position between pi and fj:

δij =

(cid:40)

+1
1

−

fj

if pi ∈
otherwise.

Intuitively, by using the sigmoid function, Equation 1
generates a normalized output staying within the interval
(0, 1). In addition, the introduction of the signed indicator
maps pixels inside and outside fj to the probability distri-
bution of (0.5, 1) and (0, 0.5) respectively. Figure 3 shows
Dj of a particular triangle with different conﬁgurations of
σ. As shown in the results, smaller σ leads to sharper prob-
ability distribution while larger σ tends to generate more
blurry outcome. As σ
0, the resulting probability ﬁeld
→
converges to the exact silhouette of the triangle.

It is worth noting that before computing the pixel-to-
triangle distance d(i, j), we ﬁrst normalize the pixel coordi-
nates into [
1, 1]. This helps factor out the bias introduced
by different image resolutions. Though it is possible to di-
rectly use d(i, j) in the computation of Dj, in practice, we
found d2(i, j) works better as it introduces a sharper distri-
bution of the probability ﬁeld.

−

3.2. Aggregate Function

As the probability map Dj of each triangle face is com-
puted in an independent manner, there remains a key step
to aggregate them to obtain the ﬁnal rendering result. To
achieve this goal, we ﬁrst analyze the working principal of
standard rendering pipeline. The standard rasterizer synthe-
sizes silhouette image by following a strict logical or opera-
tion. In particular, a pixel that is covered by any triangle on
the image plane will be rendered as the interior of the object
in the output silhouette image. As our proposed probabil-
ity formulation has emphasized the inner pixels enclosed by
each triangle with higher weight – their probability values
are closer to 1 – we approximate the logical or operator by
proposing the following aggregation function:

ˆSi =

(
{
A

Dj}

) = 1

N
(cid:89)

−

j

Di

j),

(1

−

(2)

where ˆSi represents the i-th pixel in the ﬁnal silhouette
image and N is the number of total mesh triangles. Intu-
j whose value is 1, then ˆSi
itively, when there exists a Di
will be marked as 1 regardless the probability value of other
probability maps at this pixel location. On the other hand,
ˆSj will receive 0 only when all

are zeros.

Di
j}
{

Figure 4: Our pipeline for unsupervised single-image 3D mesh reconstruction: (1) mesh generator
x and outputs the displacement vector
SoftRas layer
function

takes an input image
(x), which is added to a template model to obtain the reconstructed mesh M ; (2)
transforms triangles in M into probability maps and computes soft silhouette ˆS using the aggregation

). IoU loss is then applied to minimize the discrepancy between ˆS and ground truth S.
(
·
A

R

G

G

10−

Figure 4 demonstrates the generated silhouette using our
5. As shown in the re-
soft rasterizer with σ = 3
×
sult, SoftRas is able to faithfully approximate the ground-
truth silhouette without losing ﬁne details. However, un-
like the standard rasterizer, which includes discrete non-
differentiable operations, our SoftRas is entirely differen-
tiable thanks to its continuous deﬁnition.

4. Unsupervised Mesh Reconstruction

To demonstrate the effectiveness of the proposed soft
rasterizer, we incorporate it into a simple mesh generator for
the task of image-based 3D reconstruction. In particular, we
propose an end-to-end deep learning framework that takes
a single color image x as input and reconstructs its corre-
sponding 3D mesh model M without requiring the cam-
era parameters. As illustrated in the framework overview
in Figure 4, our system mainly consists of two parts: one
mesh generator that deforms a template sphere mesh to the
desired 3D model and a soft rasterizer layer that renders the
silhouette image of the reconstructed mesh.

4.1. Mesh Generator

Inspired by the state-of-the-art mesh learning approaches
[19, 49], we leverage a similar idea of synthesizing 3D
model by deforming a template mesh. To validate the per-
formance of our proposed soft rasterizer, we employ an
encoder-decoder architecture which is nearly identical to
that of [19]. In particular, the mesh generator consumes a 4-
channel color image, in which the last channel speciﬁes the
object’s silhouette mask, and predicts per-vertex displace-
ment vectors that deform the template mesh to the desired
shape. We use the same template mesh – a sphere model –
with Neural 3D Mesh Renderer [19].

The training of our network does not require any 3D
ground truth. Speciﬁcally, our network is only trained with
multi-view silhouettes of the objects collected in the train-
ing set. Thanks to the differentiability of soft rasterizer, the
learning of mesh generator is directly supervised by the ren-
dering loss computed from the difference between the ren-

dered and the ground-truth silhouettes.

Losses. As object silhouette is represented in the form of
binary mask, to evaluate the accuracy of our prediction,
we adopt the intersection over union (IoU) loss
LIoU for
a proper measurement. In addition, to enforce the genera-
tor produces smooth and appealing results, we impose two
additional geometry regularizer to constrain the property of
output shape. We provide the details of losses as follows.

IoU Loss. We denote ˆS and S as the binary masks of
the reconstructed and ground-truth silhouette respectively
be the operators that performs element-
and deﬁne
wise product and sum respectively. Therefore our IoU loss
can be represented as:

and

⊗

⊕

(3)

LIoU = 1

−

ˆS
||
S

⊗

S
ˆS

||1
⊗

S

||1

ˆS
||

−

⊕
Laplacian Loss. A simple IoU loss only focuses on push-
ing the mesh projection to be consistent with the true silhou-
ette but could lead to strongly deformed mesh due to the pri-
ority to favor local consistency. To prevent the vertices from
moving too freely, we add a Laplacian term to regularize the
geometry. Let M be the output triangular mesh with n ver-
M is denoted as vi = (xi, yi, zi). We
tices. Each vertex i
ﬁrst deﬁne the laplacian coordinate for vi as the difference
between the coordinates of vi and the center of mass of its
N (i) vj. The
immediate neighbors: δi = vi −
laplacian loss is deﬁned as:

1
N (i)

(cid:80)
j

∈

∈

||

||

Llap =

(cid:88)

i

2
2

δi||
||

(4)

Flattening Loss. In addition to laplacian loss, we also
employ a ﬂattening loss [19] to encourage adjacent trian-
gle faces to have similar normal directions. Empirically, we
found the introduced ﬂattening loss can further smooth the
surface and prevent self-intersections. To calculate the ﬂat-
tening loss, we set θi to be the angle between the faces that
have the common edge ei. Therefore, the ﬂattening loss can
be deﬁned as:

Figure 5: 3D mesh reconstruction from a single image. From left to right, we show input image, ground truth, the results of
our method (SoftRas), Neural Mesh Renderer [19] and Pixel2mesh [49], all visualized from 2 different views. Along with
the results, we also visualize scan-to-mesh distances measured from ground truth to reconstructed mesh.

Category
retrieval [53]
voxel-based [53]
N3MR [19]
SoftRas (ours)
Category
retrieval [53]
voxel-based [53]
N3MR [19]
SoftRas (ours)

Airplane
0.5564
0.5556
0.6172
0.6419
Loudspeaker
0.4600
0.5868
0.6536
0.6654

Bench
0.4875
0.4924
0.4998
0.5080
Riﬂe
0.5133
0.5987
0.6322
0.6811

Dresser
0.5713
0.6823
0.7143
0.7116
Sofa
0.5314
0.6221
0.6735
0.6878

Car
0.6519
0.7123
0.7095
0.7697
Table
0.3097
0.4938
0.4829
0.4487

Chair
0.3512
0.4494
0.4990
0.5270
Phone
0.6696
0.7504
0.7777
0.7895

Display
0.3958
0.5395
0.5831
0.6156
Vessel
0.4078
0.5507
0.5645
0.5953

Lamp
0.2905
0.4223
0.4126
0.4628

Mean
0.4766
0.5736
0.6015
0.6234

Table 1: Comparison of mean IoU with other unsupervised 3D reconstruction methods on 13 categories of ShapeNet datasets.

Lf l =

(cid:88)

θi

ei

∈

(cos θi + 1)2

(5)

where

Lf l will reach its minimum value if all adjacent
faces stay on the same plane. The ﬁnal loss is a weighted
sum of the three particular losses:

the image loss. Thanks to the proposed differentiable ras-
terizer, we are able to recover both 3D geometry and the
accompanied vertex color in an end-to-end manner. In par-
ticular, we leverage the l2 loss to measure the difference
between the projection of recovered colorful mesh and the
input image. We show the results of colorized reconstruc-
tion in Section 5.2.

=

LIoU + λ

Llap + µ

Lf l

L

5. Experiments

(6)

Color Reconstruction. Unlike vertex position, the vertex
color can naturally receive gradients back propagated from

In this section, we perform an extensive evaluation on
our framework. We ﬁrst provide the details of our experi-
mental setups and then demonstrate a variety of results and
ablation studies. We also include video result and more vi-

sual evaluations in the supplemental materials. The code
and data will be released upon publication.

5.1. Experimental Setup

Datasets. We use the dataset provided by [19]. In partic-
ular, the dataset contains 13 categories of objects belonging
to ShapeNet [5], a large-scale 3D model collection contain-
ing about 50k unique meshes from 55 categories. Each ob-
ject is rendered with 24 different views with image resolu-
tion of 64
64. To ensure fair comparison, we employ the
same train/validate/test split as in [19, 53].

×

Evaluation Metrics. For quantitative evaluation, we
adopt the standard reconstruction metric, 3D intersection
over union (IoU), to compare with baseline methods. On
the other hand, we agree with Pixel2Mesh [49] that the com-
monly used metric may not be able to thoroughly reﬂect the
quality of geometry reconstruction, such as smoothness and
continuity of the surface. Therefore, we wish to emphasize
the importance of visual quality, which is important in real
applications.

×

Implementation Details. We use similar mesh gener-
ation network with [19], which is implemented as an
encoder-decoder architecture. The encoder netowrk con-
sists of 3 convolutional layers with kernel size of 5
5 and
channels of 64, 128, 256, followed by 3 fully connected
layers with hidden layer size of 1024 and 1024.
In par-
ticular, we apply batch normalization [17] and ReLU ac-
tivation [21] after each convolutional layer. The decoder
transforms a 512-dimensional latent code into a displace-
ment vector of length 1926 (coordinates of 642 vertices) by
using 3 fully connected layers with hidden size of 1024 and
2048. Our network is trained with Adam optimizer [20]
with α = 0.0001, β1 = 0.9 and β2 = 0.999. In our imple-
5 (Equation 1), λ = 0.01
mentation, we set σ = 3
and µ = 0.001 (Equation 6) across all experiments unless
otherwise speciﬁed. We train the network with batch size of
64 with multi-view inputs and implement it using PyTorch1.
The code and data will be released upon publication.

10−

×

5.2. Qualitative Results

Single-view Mesh Reconstruction. We compare the
qualitative results of our approach with that of the state-
of-the-art supervised [49] and unsupervised [19] mesh re-
construction approaches in Figure 5. Though Neural 3D
Mesh Renderer (N3MR) [19] is able to recover the rough
shape, the mesh surface is discontinuous and suffers from
a considerable amount of self intersections.
In contrast,
our method can faithfully reconstruct ﬁne details of the ob-
ject, such as the empennage and engines of airplane and

1https://pytorch.org/

(a) Input image

(b) Reconstruction results

Figure 6: Results of colorized mesh reconstruction.

the barrel of riﬂe, while ensuring smoothness of the gen-
erated surface. Though trained in an entirely unsupervised
manner, our approach achieves comparable results with the
supervised method Pixel2Mesh [49]. For objects that are
not genus-0, e.g. the bench in the second row of Figure 5,
Pixel2Mesh generates better results than ours (see the arm-
rest). The reason is that as our method can only generate
genus-0 surface, synthesizing the armrest will lead to large
2D IoU loss. In contrast, Pixel2Mesh employs 3D Chamfer
distance as loss metric which could strongly penalize the
missing of armrest in the reconstructed model. However,
in some cases, our approach can generate even smoother
and sharper results than that of [49], e.g the lamp base, the
engine of airplane and the riﬂe. Scan-to-mesh distance vi-
sualization also shows our results achieve comparable ac-
curacy, in terms of tightness between reconstructed meshes
and ground truth.

Color Reconstruction. Our method is also capable to re-
cover per-vertex color of the generated mesh based on the
input image. Figure 6 presents the colorized reconstruction
from a single image. Though the resolution of the input
image is rather low (64
64), our approach is still able to
achieve sharp reconstruction and accurately restore the de-
tailed vertex colors, e.g. the blue color of the airplane tail.

×

5.3. Quantitative Evaluations

We show the comparisons on 3D IoU score with different
approaches. Table 1 lists the statistics for all categories. As
seen in Table 1, our mean score surpasses the state-of-the-
art N3MR by more than 2.1%. In addition, our approach
also achieves the top accuracy for most of the categories.
Our score for the table category is slightly worse than PTN
[53] and N3MR. The main reason is that most of our recon-
structed tables contain a 30° embossment over the main ﬂat
surface (see Figure 8 (b)). We found all training images are
rendered from the viewpoints at 30° on the axis of elevation.
This would lead to an ambiguity of the intended structure as
our reconstructed model in fact can generate silhouette that
matches the input image well. We provide an ablation anal-

ysis in Section 5.4 to further validate our model with more
comprehensive training views.

(a) Input image

(b) w/o Lf l

(c) w/o Llap

(d) Full model

Figure 7: Ablation study of different loss terms.

5.4. Ablation Study

In this section, we conduct controlled experiments to val-

idate the importance of different components.

Llap and

Loss Terms. We ﬁrst investigate the inﬂuence of the two
Lf l, that regularize the geometry property
losses,
of the generated mesh models. Figure 7 shows the results
of selectively dropping one of the losses. As seen from the
Llap would lead
comparisons, removing the Laplacian loss
to less smooth surface, e.g. the head of airplane, or even dis-
continuities, e.g. the hole in the bench seat. Dropping off
the ﬂattening loss
Lf l would severely impairs the smooth-
ness of surface and causes intersecting geometry, e.g.
the
bench back and the tail part of airplane. However, when the
losses are both present, our full model does not suffer from
any of the problems, indicating both of the components are
necessary for our ﬁnal performance.

(a) Input image

(b) 24 views

(c) 120 views (d) Ground Truth

Figure 8: Comparison of results reconstructed from differ-
ent numbers of training views. With more training views,
our approach can achieve reconstruction with signiﬁcantly
higher accuracy.

(a) Input image (b) Pixel2Mesh

(c) SoftRas (ours)

Figure 9: Comparisons of 3D reconstruction from real im-
ages. Our results are shown in two different views.

Training with More Views. As discussed in Section 5.3,
the existing dataset only contains limited biased views, re-
sulting in a large degree of ambiguity in the reconstructed
models. To evaluate the full capability of our model, we ren-
der the existing models with more comprehensive views. In
particular, the new training images are rendered from 120
viewpoints, sampled from 5 elevation and 24 azimuth an-
gles. As shown in Figure 8, by training with more views,
our model is capable to generate results much closer to the
ground truth.
In particular, the embossment of the table
model has been completely removed in the new results, in-
dicating the effectiveness of the silhouette supervision ob-
tained from our SoftRas layer.

Reconstruction from Real Image. We further eval-
uate our approach on real
images and compare with
Pixel2Mesh [49]. Here we employ the model trained on 120
views as proposed in experiment above. As demonstrated in
Figure 2 (right) and Figure 9, though only trained on syn-
thetic data, our model generalizes well to real images in
novel views with faithful reconstruction of ﬁne details, e.g.
the tail ﬁns of the ﬁghter aircraft. While for most examples,
our unsupervised approach produces comparable results to
the supervised method, Pixel2Mesh, we found many cases
where our technique can signiﬁcantly outperform theirs, es-
pecially for real world images (see Figure 9 (b) and (c)).

6. Discussion and Future Work

In this paper, we have presented the ﬁrst non-parametric
differentiable rasterizer (SoftRas) that enables unsupervised
learning for high-quality mesh reconstruction from a single
image. We demonstrate that it is possible to properly ap-
proximate the forward pass of the discrete rasterization with
a differentiable framework. While many previous works
like N3MR [19] seek to provide approximated gradient in
the backward propagation but using standard rasterizer in
the forward pass, we believe that the consistency between
the forward and backward propagations is the key to achieve
In addition, we found that proper
superior performance.
choice of regularizers plays an important role for producing
visually appealing geometry. Experiments have shown that

our unsupervised approach achieves comparable and in cer-
tain cases, even better results to state-of-the-art supervised
solutions.

Limitations and future work. As SoftRas only provides
silhouette based supervision, ambiguity may arise in our re-
construction when only limited views are available. Such
ambiguity is pronounced when there exists a large planar
surface in the object (Figure 8(b)). However, it is possi-
ble to resolve this issue by training our model with more
comprehensive views (Figure 8(c)). It would be an interest-
ing future avenue to study the gradient of pixel colors with
respect to mesh vertices such that the shading cues can be
considered for reconstruction.

Acknowledgements

This work was supported in part by the ONR YIP grant
N00014-17-S-FO14, the CONIX Research Center, one of
six centers in JUMP, a Semiconductor Research Corpora-
tion (SRC) program sponsored by DARPA, the Andrew and
Erna Viterbi Early Career Chair, the U.S. Army Research
Laboratory (ARL) under contract number W911NF-14-D-
0005, Adobe, and Sony. The content of the information
does not necessarily reﬂect the position or the policy of
the Government, and no ofﬁcial endorsement should be in-
ferred.

References

[1] A. Bansal, B. Russell, and A. Gupta. Marr revisited: 2d-3d
alignment via surface normal prediction. In Proceedings of
the IEEE conference on computer vision and pattern recog-
nition, pages 5965–5974, 2016.

[2] J. T. Barron and J. Malik. Shape, illumination, and re-
ﬂectance from shading. IEEE transactions on pattern anal-
ysis and machine intelligence, 37(8):1670–1687, 2015.
[3] B. G. Baumgart. Geometric modeling for computer vision.
Technical report, STANFORD UNIV CA DEPT OF COM-
PUTER SCIENCE, 1974.

[4] V. Blanz and T. Vetter. A morphable model for the synthesis
of 3d faces. In Proceedings of the 26th annual conference on
Computer graphics and interactive techniques, pages 187–
194. ACM Press/Addison-Wesley Publishing Co., 1999.
[5] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015.

[6] V. Deschaintre, M. Aittala, F. Durand, G. Drettakis, and
A. Bousseau. Single-image svbrdf capture with a rendering-
aware deep network. ACM Transactions on Graphics (TOG),
37(4):128, 2018.

[7] D. Eigen and R. Fergus. Predicting depth, surface normals
and semantic labels with a common multi-scale convolu-
tional architecture. In Proceedings of the IEEE International
Conference on Computer Vision, pages 2650–2658, 2015.
[8] H. Fan, H. Su, and L. J. Guibas. A point set generation net-
In
work for 3d object reconstruction from a single image.
CVPR, volume 2, page 6, 2017.

[9] K. Genova, F. Cole, A. Maschinot, A. Sarna, D. Vlasic, and
W. T. Freeman. Unsupervised training for 3d morphable

In Proceedings of the IEEE Conference
model regression.
on Computer Vision and Pattern Recognition, pages 8377–
8386, 2018.

[10] I. Gkioulekas, A. Levin, and T. Zickler. An evaluation of
computational imaging techniques for heterogeneous inverse
In European Conference on Computer Vision,
scattering.
pages 685–701. Springer, 2016.

[11] I. Gkioulekas, S. Zhao, K. Bala, T. Zickler, and A. Levin.
Inverse volume rendering with material dictionaries. ACM
Transactions on Graphics (TOG), 32(6):162, 2013.

[12] T. Groueix, M. Fisher, V. G. Kim, B. Russell, and M. Aubry.
AtlasNet: A Papier-Mˆach´e Approach to Learning 3D Sur-
face Generation. In Proceedings IEEE Conf. on Computer
Vision and Pattern Recognition (CVPR), 2018.

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016.

[14] D. Hoiem, A. A. Efros, and M. Hebert. Automatic photo
pop-up. In ACM transactions on graphics (TOG), volume 24,
pages 577–584. ACM, 2005.

[15] Z. Huang, T. Li, W. Chen, Y. Zhao, J. Xing, C. LeGendre,
L. Luo, C. Ma, and H. Li. Deep volumetric video from very
sparse multi-view performance capture. In European Con-
ference on Computer Vision, pages 351–369. Springer, 2018.
[16] L. Huynh, W. Chen, S. Saito, J. Xing, K. Nagano, A. Jones,
P. Debevec, and H. Li. Mesoscopic facial geometry infer-
In Proceedings of the
ence using deep neural networks.
IEEE Conference on Computer Vision and Pattern Recog-
nition, pages 8407–8416, 2018.

[17] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015.

[18] A. Kanazawa, S. Tulsiani, A. A. Efros, and J. Malik. Learn-
ing category-speciﬁc mesh reconstruction from image col-
lections. arXiv preprint arXiv:1803.07549, 2018.

[19] H. Kato, Y. Ushiku, and T. Harada. Neural 3d mesh renderer.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3907–3916, 2018.

[20] D. P. Kingma and J. Ba. Adam: A method for stochastic
optimization. arXiv preprint arXiv:1412.6980, 2014.

[21] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
classiﬁcation with deep convolutional neural networks.
In
Advances in neural information processing systems, pages
1097–1105, 2012.

[22] A. Kundu, Y. Li, and J. M. Rehg. 3d-rcnn: Instance-level
In Pro-
3d object reconstruction via render-and-compare.
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 3559–3568, 2018.

[23] T.-M. Li, M. Aittala, F. Durand, and J. Lehtinen. Dif-
ferentiable monte carlo ray tracing through edge sampling.
ACM Trans. Graph. (Proc. SIGGRAPH Asia), 37(6):222:1–
222:11, 2018.

[24] G. Lin, C. Shen, A. Van Den Hengel, and I. Reid. Efﬁ-
cient piecewise training of deep structured models for se-
In Proceedings of the IEEE Confer-
mantic segmentation.
ence on Computer Vision and Pattern Recognition, pages
3194–3203, 2016.

[25] F. Liu, C. Shen, G. Lin, and I. D. Reid. Learning depth from
single monocular images using deep convolutional neural
ﬁelds. IEEE Trans. Pattern Anal. Mach. Intell., 38(10):2024–
2039, 2016.

[26] G. Liu, D. Ceylan, E. Yumer, J. Yang, and J.-M. Lien. Ma-
terial editing using a physically based rendering network. In
Computer Vision (ICCV), 2017 IEEE International Confer-
ence on, pages 2280–2288. IEEE, 2017.

[27] M. M. Loper and M. J. Black. Opendr: An approximate dif-
ferentiable renderer. In European Conference on Computer
Vision, pages 154–169. Springer, 2014.

[28] D. G. Lowe. Three-dimensional object recognition from
intelligence,

Artiﬁcial

images.

single two-dimensional
31(3):355–395, 1987.

[29] V. K. Mansinghka, T. D. Kulkarni, Y. N. Perov, and J. Tenen-
baum. Approximate bayesian image interpretation using
generative probabilistic graphics programs. In Advances in
Neural Information Processing Systems, pages 1520–1528,
2013.

[30] D. Marr. Vision: A computational investigation into the hu-
man representation and processing of visual information. mit
press. Cambridge, Massachusetts, 1982.

[31] O. Nalbach, E. Arabadzhiyska, D. Mehta, H.-P. Seidel, and
T. Ritschel. Deep shading: convolutional neural networks
for screen space shading. In Computer graphics forum, vol-
ume 36, pages 65–78. Wiley Online Library, 2017.

[32] R. Natsume, S. Saito, Z. Huang, W. Chen, C. Ma, H. Li,
and S. Morishima. Siclope: Silhouette-based clothed people.
arXiv preprint arXiv:1901.00049, 2018.

[33] T. Nguyen-Phuoc, C. Li, S. Balaban, and Y. Yang. Render-
net: A deep convolutional network for differentiable render-
ing from 3d shapes. arXiv preprint arXiv:1806.06575, 2018.
[34] G. Patow and X. Pueyo. A survey of inverse rendering prob-
lems. In Computer graphics forum, volume 22, pages 663–
687. Wiley Online Library, 2003.

[35] A. Pumarola, A. Agudo, L. Porzi, A. Sanfeliu, V. Lepetit, and
F. Moreno-Noguer. Geometry-aware network for non-rigid
shape prediction from a single view. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 4681–4690, 2018.

[36] X. Qi, R. Liao, Z. Liu, R. Urtasun, and J. Jia. Geonet: Ge-
ometric neural network for joint depth and surface normal
estimation. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, pages 283–291, 2018.
[37] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015.

[38] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances in Neural Information
Processing Systems, pages 4996–5004, 2016.

[39] E. Richardson, M. Sela, R. Or-El, and R. Kimmel. Learning
detailed face reconstruction from a single image. In Com-
puter Vision and Pattern Recognition (CVPR), 2017 IEEE
Conference on, pages 5553–5562. IEEE, 2017.

[40] L. G. Roberts. Machine perception of three-dimensional
solids. PhD thesis, Massachusetts Institute of Technology,
1963.

[41] A. Saxena, M. Sun, and A. Y. Ng. Make3d: Learning 3d
scene structure from a single still image. IEEE transactions
on pattern analysis and machine intelligence, 31(5):824–
840, 2009.

[42] S. Sengupta, A. Kanazawa, C. D. Castillo, and D. W. Ja-
cobs. Sfsnet: learning shape, reﬂectance and illuminance of
In Proceedings of the IEEE Conference
faces in the wild.
on Computer Vision and Pattern Recognition (CVPR), pages
6296–6305, 2018.

[43] E. Shelhamer, J. T. Barron, and T. Darrell. Scene intrin-
sics and depth from a single image. In Proceedings of the
IEEE International Conference on Computer Vision Work-
shops, pages 37–44, 2015.

[44] J. Shi, Y. Dong, H. Su, and X. Y. Stella. Learning non-
In
lambertian object intrinsics across shapenet categories.
Computer Vision and Pattern Recognition (CVPR), 2017
IEEE Conference on, pages 5844–5853. IEEE, 2017.
[45] A. Tewari, M. Zollh¨ofer, P. Garrido, F. Bernard, H. Kim,
P. P´erez, and C. Theobalt. Self-supervised multi-level face
model learning for monocular reconstruction at over 250 hz.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 2549–2559, 2018.

[46] A. Tewari, M. Zollh¨ofer, H. Kim, P. Garrido, F. Bernard,
P. P´erez, and C. Theobalt. Mofa: Model-based deep convo-
lutional face autoencoder for unsupervised monocular recon-
In The IEEE International Conference on Com-
struction.
puter Vision (ICCV), volume 2, page 5, 2017.

[47] L. Tran and X. Liu. Nonlinear 3d face morphable model.

arXiv preprint arXiv:1804.03786, 2018.

[48] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In CVPR, volume 1, page 3, 2017.

[49] N. Wang, Y. Zhang, Z. Li, Y. Fu, W. Liu, and Y.-G. Jiang.
Pixel2mesh: Generating 3d mesh models from single rgb im-
ages. In ECCV, 2018.

[50] X. Wang, D. Fouhey, and A. Gupta. Designing deep net-
works for surface normal estimation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 539–547, 2015.

[51] J. Wu, Y. Wang, T. Xue, X. Sun, B. Freeman, and J. Tenen-
baum. Marrnet: 3d shape reconstruction via 2.5 d sketches.
In Advances in neural information processing systems, pages
540–550, 2017.

[52] S. Yamaguchi, S. Saito, K. Nagano, Y. Zhao, W. Chen,
K. Olszewski, S. Morishima, and H. Li. High-ﬁdelity facial
reﬂectance and geometry inference from an unconstrained
image. ACM Transactions on Graphics (TOG), 37(4):162,
2018.

[53] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016.
[54] Y. Yu, P. Debevec, J. Malik, and T. Hawkins.

Inverse
global illumination: Recovering reﬂectance models of real
In Proceedings of the 26th an-
scenes from photographs.
nual conference on Computer graphics and interactive tech-
niques, pages 215–224. ACM Press/Addison-Wesley Pub-
lishing Co., 1999.

[55] Y. Zhou, L. Hu, J. Xing, W. Chen, H.-W. Kung, X. Tong, and
H. Li. Single-view hair reconstruction using convolutional
neural networks. arXiv preprint arXiv:1806.07467, 2018.

[56] R. Zhu, H. K. Galoogahi, C. Wang, and S. Lucey. Rethinking
reprojection: Closing the loop for pose-aware shape recon-
struction from a single image. In Computer Vision (ICCV),
2017 IEEE International Conference on, pages 57–65. IEEE,
2017.

[57] J. Zienkiewicz, A. Davison, and S. Leutenegger. Real-time
In Intel-
height map fusion using differentiable rendering.
ligent Robots and Systems (IROS), 2016 IEEE/RSJ Interna-
tional Conference on, pages 4280–4287. IEEE, 2016.

