Online Deep Learning: Learning Deep Neural Networks on the Fly

Doyen Sahoo, Quang Pham, Jing Lu, Steven C.H. Hoi
School of Information Systems, Singapore Management Univeristy
{doyens,hqpham,jing.lu.2014,chhoi}@smu.edu.sg

Abstract

Deep Neural Networks (DNNs) are typically trained by back-
propagation in a batch learning setting, which requires the
entire training data to be made available prior to the learn-
ing task. This is not scalable for many real-world scenarios
where new data arrives sequentially in a stream form. We
aim to address an open challenge of “Online Deep Learn-
ing” (ODL) for learning DNNs on the ﬂy in an online setting.
Unlike traditional online learning that often optimizes some
convex objective function with respect to a shallow model
(e.g., a linear/kernel-based hypothesis), ODL is signiﬁcantly
more challenging since the optimization of the DNN ob-
jective function is non-convex, and regular backpropagation
does not work well in practice, especially for online learning
settings. In this paper, we present a new online deep learning
framework that attempts to tackle the challenges by learning
DNN models of adaptive depth from a sequence of training
data in an online learning setting. In particular, we propose a
novel Hedge Backpropagation (HBP) method for online up-
dating the parameters of DNN effectively, and validate the ef-
ﬁcacy of our method on large-scale data sets, including both
stationary and concept drifting scenarios.

Introduction
Recent years have witnessed tremendous success of deep
learning techniques in a wide range of applications (LeCun,
Bengio, and Hinton 2015; Bengio, Courville, and Vincent
2013; Bengio, Goodfellow, and Courville 2015; Krizhevsky,
Sutskever, and Hinton 2012; He et al. 2016). Learning Deep
Neural Networks (DNN) faces many challenges, including
(but not limited to) vanishing gradient, diminishing fea-
ture reuse (Srivastava, Greff, and Schmidhuber 2015), sad-
dle points (and local minima) (Choromanska et al. 2015;
Dauphin et al. 2014), immense number of parameters to
be tuned, internal covariate shift during training (Ioffe and
Szegedy 2015), difﬁculties in choosing a good regularizer,
choosing hyperparameters, etc. Despite many promising ad-
vances (Nair and Hinton 2010; Ioffe and Szegedy 2015;
He et al. 2016; Srivastava, Greff, and Schmidhuber 2015),
etc., which are designed to address speciﬁc problems for op-
timizing deep neural networks, most of these existing ap-
proaches assume that the DNN models are trained in a batch
learning setting which requires the entire training data set to

be made available prior to the learning task. This is not pos-
sible for many real world tasks where data arrives sequen-
tially in a stream, and may be too large to be stored in mem-
ory. Moreover, the data may exhibit concept drift (Gama et
al. 2014). Thus, a more desired option is to learn the models
in an online setting.

Unlike batch learning, online learning (Zinkevich 2003;
Cesa-Bianchi and Lugosi 2006) represents a class of learn-
ing algorithms that learn to optimize predictive models over
a stream of data instances sequentially. The on-the-ﬂy learn-
ing makes online learning highly scalable and memory ef-
ﬁcient. However, most existing online learning algorithms
are designed to learn shallow models (e.g., linear or ker-
nel methods (Crammer et al. 2006; Kivinen, Smola, and
Williamson 2004; Hoi et al. 2013)) with online convex op-
timization, which cannot learn complex nonlinear functions
in complicated application scenarios.

In this work, we attempt to bridge the gap between online
learning and deep learning by addressing the open problem
of “Online Deep Learning” (ODL) — how to learn Deep
Neural Networks (DNNs) from data streams in an online
setting. A possible way to do ODL is to put the process of
training DNNs online by directly applying a standard Back-
propagation training on only a single instance at each online
round. Such an approach is simple but falls short due to some
critical limitations in practice. One key challenge is how to
choose a proper model capacity (e.g., depth of the network)
before starting to learn the DNN online. If the model is
too complex (e.g., very deep networks), the learning process
will converge too slowly (vanishing gradient and diminish-
ing feature reuse), thus losing the desired property of online
learning. On the other extreme, if the model is too simple,
the learning capacity will be too restricted, and without the
power of depth, it would be difﬁcult to learn complex pat-
terns. In batch learning literature, a common way to address
this issue is to do model selection on validation data. Unfor-
tunately, it is not realistic to have validation data in online
settings, and is thus infeasible to apply traditional model se-
lection in online learning scenarios. In this work, we present
a novel framework for online deep learning, which is able to
learn DNN models from data streams sequentially, and more
importantly, is able to adapt its model capacity from simple
to complex over time, nicely combining the merits of both
online learning and deep learning.

We aim to devise an online learning algorithm that is able
to start with a shallow network that enjoys fast convergence;
then gradually switch to a deeper model (meanwhile shar-
ing certain knowledge with the shallow ones) automatically
when more data has been received to learn more complex
hypotheses, and effectively improve online predictive per-
formance by adapting the capacity of DNNs. To achieve this,
we need to address questions such as: when to change the
capacity of network? how to change the capacity of the net-
work? and how to do both in an online setting? We design
an elegant solution to do all this in a uniﬁed framework in
a data-driven manner. We ﬁrst amend the existing DNN ar-
chitecture by attaching every hidden layer representation to
an output classiﬁer. Then, instead of using a standard Back-
propagation, we propose a novel Hedge Backpropagation
method, which evaluates the online performance of every
output classiﬁer at each online round, and extends the Back-
propagation algorithm to train the DNNs online by exploit-
ing the classiﬁers of different depths with the Hedge algo-
rithm (Freund and Schapire 1997). This allows us to train
DNNs of adaptive capacity meanwhile enabling knowledge
sharing between shallow and deep networks.

Related Work

Online Learning
Online Learning represents a family of scalable and efﬁcient
algorithms that learn to update models from data streams se-
quentially (Cesa-Bianchi and Lugosi 2006; Shalev-Shwartz
2007; Hoi, Wang, and Zhao 2014; Wu et al. 2017). Many
techniques are based on maximum-margin classiﬁcation,
from Perceptron (Rosenblatt 1958) to Online Gradient De-
scent (Zinkevich 2003), Passive Aggressive (PA) algorithms
(Crammer et al. 2006), Conﬁdence-Weighted (CW) Algo-
rithms, (Dredze, Crammer, and Pereira 2008) etc. These are
primarily designed to learn linear models. Online Learning
with kernels (Kivinen, Smola, and Williamson 2004) offered
a solution for online learning with nonlinear models. These
methods received substantial interest from the community,
and models of higher capacity such as Online Multiple Ker-
nel Learning were developed (Jin, Hoi, and Yang 2010;
Hoi et al. 2013; Sahoo, Hoi, and Li 2014; Lu et al. 2015b;
Sahoo, Hoi, and Zhao 2016). While these models learn non-
linearity, they are still shallow. Moreover, deciding the num-
ber and type of kernels is non-trivial; and these methods are
not explicitly designed to learn a feature representation.

Online Learning can be directly applied to DNNs (”online
backpropagation”) but they suffer from convergence issues,
such as vanishing gradient and diminishing feature reuse.
Moreover, the optimal depth to be used for the network is
usually unknown, and cannot be validated easily in the on-
line setting. Further, networks of different depth would be
suitable for different number of instances to be processed,
e.g., for small number of instances - a quick convergence
would be of high priority, and thus shallow networks would
be preferred, whereas, for a large number of instances, the
long run performance would be enhanced by using a deeper
network. This makes model architecture selection very chal-
lenging. There have been attempts at making deep learning

compatible with online learning (Zhou, Sohn, and Lee 2012;
Lee et al. 2016) and (Lee et al. 2017). However, they operate
via a sliding window approach with a (mini)batch training
stage, making them unsuitable for a streaming data setting.

Deep Learning

Due to the difﬁculty in training deep networks, there has
been a large body of emerging works adopting the princi-
ple of ”shallow to deep”. This is similar to the principle we
adopt in our work. This approach exploits the intuition that
shallow models converge faster than deeper models, and this
idea has been executed in several ways. Some approaches
do this explicitly by Growing of Networks via the function
preservation principle (Chen, Goodfellow, and Shlens 2016;
Wei et al. 2016), where the (student) network of higher ca-
pacity is guaranteed to be at least as good as the shallower
(teacher) network. Other approaches perform this more im-
plicitly by modifying the network architecture and objective
functions to enable the network to allow the input to ﬂow
through the network, and slowly adapt to deep represen-
tation learning, e.g., Highway Nets(Srivastava, Greff, and
Schmidhuber 2015), Residual Nets(He et al. 2016), Stochas-
tic Depth Networks (Huang et al. 2016) and Fractal Nets
(Larsson, Maire, and Shakhnarovich 2016).

However, they are all designed to optimize the loss func-
tion based on the output obtained from the deepest layer.
Despite the improved batch convergence, they cannot yield
good online performances (particularly for the instances ob-
served in early part of the stream), as the inference made by
the deepest layer requires substantial time for convergence.
For the online setting, such existing deep learning tech-
niques could be trivially beaten by a very shallow network.
Deeply Supervised Nets (Lee et al. 2015), shares a similar
architecture as ours, which uses companion objectives at ev-
ery layer to address vanishing gradient and to learn more dis-
criminative features at shallow layers. However, the weights
of companions are set heuristically, where the primary goal
is to optimize the classiﬁcation performance based on fea-
tures learnt by the deepest hidden layer, making it suitable
only for batch settings, which suffers from the same draw-
backs as others.

Recent years have also witnessed efforts in learning the
architecture of the neural networks (Srinivas and Babu 2015;
Alvarez and Salzmann 2016), which incorporate architec-
ture hyperparameters into the optimization objective. Start-
ing from an overcomplete network, they use regularizers that
help in eliminating neurons from the network. For example,
(Alvarez and Salzmann 2016) use a group sparsity regular-
ization to reduce the width of the network. (Zoph and Le
2016) use reinforcement learning to search for the optimal
architecture. Our proposed technique is related to these in
the sense that we use an overcomplete network, and auto-
matically adapt the effective depth of the network to learn
an appropriate capacity network based on the data. Unlike
other model selection techniques which work only in the
batch learning setting, our method is designed for the online
learning setting.

Online Deep Learning

Problem Setting
Without loss of generality, consider an online classiﬁcation
task. The goal of online deep learning is to learn a func-
tion F : Rd → RC based on a sequence of training ex-
amples D = {(x1, y1), . . . , (xT , yT )}, that arrive sequen-
tially, where xt ∈ Rd is a d-dimensional instance repre-
senting the features and yt ∈ {0, 1}C is the class label as-
signed to xt and C is the number of classes. The prediction
is denoted by ˆyt, and the performance of the learnt functions
are usually evaluated based on the cumulative prediction er-
I( ˆyt(cid:54)=yt), where I is the indicator func-
ror: (cid:15)T = 1
T
tion resulting in 1 if the condition is true, and 0 otherwise.
To minimize the classiﬁcation error over the sequence of T
instances, a loss function (e.g., squared loss, cross-entropy,
etc.) is often chosen for minimization. In every online itera-
tion, when an instance xt is observed, and the model makes
a prediction, the environment then reveals the ground truth
of the class label, and ﬁnally the learner makes an update to
the model (e.g., using online gradient descent).

(cid:80)T

t=1

Backpropagation: Preliminaries and Limitations
For typical online learning algorithms, the prediction func-
tion F is either a linear or kernel-based model. In the case
of Deep Neural Networks (DNN), it is a set of stacked lin-
ear transformations, each followed by a nonlinear activation.
Given an input x ∈ Rd, the prediction function of DNN with
L hidden layers (h(1), . . . , h(L)) is recursively given by:

F(x) = softmax(W (L+1)h(L)) where
h(l) = σ(W (l)h(l−1))

∀l = 1, . . . , L; h(0) = x

where σ is an activation function, e.g., sigmoid, tanh,
ReLU, etc. This equation represents a feedforward step of
a neural network. The hidden layers h(l) are the feature rep-
resentations learnt during the training procedure. To train a
model with such a conﬁguration, we use the cross-entropy
loss function denoted by L(F(x), y). We aim to estimate
the optimal model parameters Wi for i = 1, . . . (L + 1) by
applying Online Gradient Descent (OGD) on this loss func-
tion. Following the online learning setting, the update of the
model in each iteration by OGD is given by:

W (l)

t+1 ← W (l)

t − η∇W (l)

t

L(F(xt), yt) ∀l = 1, . . . , L + 1

where η is the learning rate. Using backpropagation, the
chain rule of differentiation is applied to compute the gra-
dient of the loss with respect to W (l) for l ≤ L.

Unfortunately, using such a model for an online learn-
ing (i.e. Online Backpropagation) task faces several issues
with convergence. Most notably: (i) For such models, a ﬁxed
depth of the neural network has to be decided a priori, and
this cannot be changed during the training process. This
is problematic, as determining the depth is a difﬁcult task.
Moreover, in an online setting, different depths may be suit-
able for a different number of instances to be processed, e.g.
because of convergence reasons, shallow networks maybe

preferred for small number of instances, and deeper net-
works for large number of instances. Our aim is to exploit
the fast convergence of shallow networks at the initial stages,
and the power of deep representation at a later stage; (ii) van-
ishing gradient is well noted problem that slows down learn-
ing. This is even more critical in an online setting, where
the model needs to make predictions and learn simultane-
ously; (iii) diminishing feature reuse, according to which
many useful features are lost in the feedforward stage of the
prediction. This is very critical for online learning, where it
is imperative to quickly ﬁnd the important features, to avoid
poor performance for the initial training instances.

To address these issues, we design a training scheme for
Online Deep Learning through a Hedging strategy: Hedge
Backpropagation (HBP). Speciﬁcally, HBP uses an over-
complete network, and automatically decides how and when
to adapt the depth of the network in an online manner.

Figure 1: Online Deep Learning framework using Hedge
Backpropagation (HBP). Blue lines represent feedforward
ﬂow for computing hidden layer features. Orange lines in-
dicate softmax output followed by the hedging combination
at prediction time. Green lines indicate the online updating
ﬂows with the hedge backpropagation approach.

Hedge Backpropagation (HBP)
Figure 1 illustrates the online deep learning framework, for
training DNNs using Hedge Backpropagation.

Consider a deep neural network with L hidden layers (i.e.
the maximum capacity of the network that can be learnt is
one with L hidden layers), the prediction function for the
proposed Hedged Deep Neural Network is given by:

F(x) =

α(l)f (l) where

(1)

L
(cid:88)

l=0

f (l) = softmax(h(l)Θ(l)), ∀l = 0, . . . , L
h(l) = σ(W (l)h(l−1)), ∀l = 1, . . . , L
h(0) = x

Here we have designed a new architecture, and introduced
two sets of new parameters Θ(l) (parameters for f (l)) and α,
that have to be learnt. Unlike the original network, in which
the ﬁnal prediction is given by a classiﬁer using the feature
representation h(L), here the prediction is weighted combi-
nation of classiﬁers learnt using the feature representations

from h(0), . . . , h(L). Each classiﬁer f (l) is parameterized by
Θ(l). Note that there are a total of L + 1 classiﬁers. The ﬁnal
prediction of this model is a weighted combination of the
predictions of all classiﬁers, where the weight of each clas-
siﬁer is denoted by α(l), and the loss suffered by the model
is L(F(x), y) = (cid:80)L
l=0 α(l)L(f (l)(x), y). During the online
learning procedure, we need to learn α(l), Θ(l) and W (l).

We propose to learn α(l) using the Hedge Algorithm (Fre-
und and Schapire 1997). At the ﬁrst iteration, all weights α
are uniformly distributed, i.e., α(l) = 1
L+1 , l = 0, . . . , L. At
(l).
every iteration, the classiﬁer f (l) makes a prediction ˆyt
When the ground truth is revealed, the classiﬁer’s weight is
updated based on the loss suffered by the classiﬁer as:

α(l)
t+1 ← α(l)

t βL(f (l)(x),y)
where β ∈ (0, 1) is the discount rate parameter, and
L(f (l)(x), y) ∈ (0, 1) (Freund and Schapire 1997). Thus,
a classiﬁer’s weight is discounted by a factor of βL(f (l)(x),y)
in every iteration. At the end of every round, the weights α
are normalized such that (cid:80)
l α(l)
Learning the parameters Θ(l) for all the classiﬁers can be
done via online gradient descent (Zinkevich 2003), where
the input to the lth classiﬁer is h(l). This is similar to the up-
date of the weights of the output layer in the original feed-
forward networks. This update is given by:

t = 1.

t

t

(2)

Θ(l)

L(f (l), yt)

L(F(xt, yt))

t+1 ← Θ(l)
= Θ(l)

t − η∇Θ(l)
t − ηα(l)∇Θ(l)
Updating the feature representation parameters W (l) is
more tricky. Unlike the original backpropagation scheme,
where the error derivatives are backpropagated from the out-
put layer, here, the error derivatives are backpropagated from
every classiﬁer f (l). Thus, using the adaptive loss function
L(F(x), y) = (cid:80)L
l=0 α(l)L(f (l)(x), y) and applying OGD
rule, the update rule for W (l) is given by:

W (l)

t+1 ← W (l)

t − η

α(j)∇W (l) L(f (j), yt)

(3)

L
(cid:88)

j=l

where ∇W (l)L(f (j), yt) is computed via backpropagation
from error derivatives of f (j). Note that the summation (in
the gradient term) starts at j = l because the shallower clas-
siﬁers do not depend on W (l) for making predictions. In ef-
fect, we are computing the gradient of the ﬁnal prediction
with respect to the backpropagated derivatives of a predic-
tor at every depth weighted by α(l) (which is an indicator of
the performance of the classiﬁer). Hedge enjoys a regret of
RT ≤
T ln N , where N is the number of experts (Freund
and Schapire 1999), which in our case is the network depth.
This gives an effective model selection approach to adapt to
the optimal network depth automatically online.

√

Based on the intuition that shallower models tend to con-
verge faster than deeper models (Chen, Goodfellow, and
Shlens 2016; Larsson, Maire, and Shakhnarovich 2016;

(cid:16)

Gulcehre et al. 2016), using a hedging strategy would lower
α weights of deeper classiﬁers to a very small value (due
to poor initial performance as compared to shallower clas-
siﬁers), which would affect the update in Eq. (3), and re-
sult in deeper classiﬁers having slow learning. To alleviate
this, we introduce a smoothing parameter s ∈ (0, 1) which
is used to set a minimum weight for each classiﬁer. After the
weight update of the classiﬁers in each iteration, the weights
α(l), s
are set as: α(l) ← max
This maintains a min-
L
imum weight for a classiﬁer of every depth and helps us
achieve a tradeoff between exploration and exploitation. s
encourages all classiﬁers at every depth to affect the back-
prop update (exploring high capacity deep classiﬁers, and
enabling deep classiﬁers to perform as good as shallow
ones), while hedging the model exploits the best perform-
ing classiﬁer. Similar strategies have been used in Multi-
arm bandit setting, and online learning with expert advice
to trade off exploration and exploitation (Auer et al. 2002;
Hoi et al. 2013). Algorithm 1 outlines ODL using HBP.

(cid:17)

Algorithm 1 Online Deep Learning (ODL) using HBP
INPUTS: Discounting Parameter: β ∈ (0, 1);
Learning rate Parameter: η; Smoothing Parameter: s
Initialize: F(x) = DNN with L hidden layers and L + 1
classiﬁers f (l), ∀l = 0, . . . , L; α(l) = 1

L+1 , ∀l = 0, . . . , L

for t = 1,. . . ,T do

as per Eq. (1)

t

t f (l)

l=0 α(l)

Receive instance: xt
Predict ˆyt = Ft(xt) = (cid:80)L
Reveal true value yt
Set L(l)
t = L(f (l)
Update Θ(l)
Update W (l)
Update α(l)
Smoothing α(l)

t (xt), yt), ∀l, . . . , L;
t+1, ∀l = 0, . . . , L as per Eq. (2);
t+1, ∀l = 1, . . . , L as per Eq. (3);
t+1 = α(l)

, ∀l = 0, . . . , L;

t

t+1, s

t βL(l)
t+1 = max(α(l)
α(l)
t+1
Zt

t+1 =

Normalize α(l)

where Zt =

L ), ∀l = 0, . . . , L ;

L
(cid:80)
l=0

α(l)
t+1

end for

Discussion
HBP has the following properties: (i) it identiﬁes a neu-
ral network of an appropriate depth based on the perfor-
mance of the classiﬁer at that depth. This is a form of On-
line Learning with Expert Advice,(Cesa-Bianchi and Lu-
gosi 2006), where the experts are DNNs of varying depth,
making the DNN robust to depth. (ii) it offers a good ini-
tialization for deeper networks, which are encouraged to
match the performance of shallower networks (if unable to
beat them). This facilitates knowledge transfer from shallow
to deeper networks ((Chen, Goodfellow, and Shlens 2016;
Wei et al. 2016)), thus simulating student-teacher learning;
(iii) it makes the learning robust to vanishing gradient and
diminishing feature reuse by using a multi-depth architec-
ture where gradients are backpropagated from shallower
classiﬁers, and the low level features are used for the ﬁ-

nal prediction (by hedge weighted prediction); (iv) it can
be viewed as an ensemble of multi-depth networks which
are competing and collaborating to improve the ﬁnal predic-
tion performance. The competition is induced by Hedging ,
whereas the collaboration is induced by sharing feature rep-
resentations; (v) This allows our algorithms to continuously
learn and adapt as and when it sees more data, enabling
a form of life-long learning (Lee et al. 2016); (vi) In con-
cept drifting scenarios (Gama et al. 2014), traditional online
backpropagation would suffer from slow convergence for
deep networks (when the concepts would change), whereas,
HBP is able to adapt quickly due to hedging; and (vii) While
HBP could be trivially adapted to Convolutional Networks
for computer vision tasks, these tasks typically have many
classes with few instances per class, which makes it hard to
obtain good results in just one-pass through the data (on-
line setting). Thus our focus is on pure online settings where
a large number of instances arrive in a stream and exhibit
complex nonlinear patterns.

Experiments

Datasets
We consider several large scale datasets. Higgs and Susy are
Physics datasets from UCI repository. For Higgs, we sam-
pled 5 million instances. We generated 5 million instances
from Inﬁnite MNIST generator (Loosli, Canu, and Bottou
2007). We also evaluated on 3 synthetic datasets. The ﬁrst
(Syn8) is generated from a randomly initialized DNN com-
prising 8-hidden layers (of width 100 each). The other two
are concept drift datasets CD1 and CD2. In CD1, 2 concepts
(C1 and C2), appear in the form C1-C2-C1, with each seg-
ment comprising a third of the data stream. Both C1 and C2
were generated from a 8-hidden layer network. CD2 has 3
concepts with C1-C2-C3, where C1 and C3 are generated
from a 8-hidden layer network, and C2 from a shallower 6-
hidden layer network. Other details are in Table 1.

Data
Higgs
Susy
i-mnist
Syn8
CD1
CD2

Table 1: Datasets
#Instances
5m
5m
5m
5m
4.5m
4.5m

#Features
28
18
784
50
50
50

Type
Stationary
Stationary
Stationary
Stationary
Concept Drift
Concept Drift

Limitations of traditional Online BP: Difﬁculty in
Depth Selection prior to Training
First we demonstrate the difﬁculty of DNN model selection
in the online setting. We compare the error rate of DNNs of
varying depth, in different segments of the data. All mod-
els were trained online, and we evaluate their performance
in different windows (or stages) of the learning process. See
Table 2. In the ﬁrst 0.5% of the data, the shallowest network
obtains the best performance indicating faster convergence
- which would indicate that we should use the shallow net-
work for the task. In the segment from [10-15]%, a 4-layer

DNN seems to have the best performance in most cases. And
in the segment from [60-80]% of the data, an 8-layer net-
work gives a better performance. This indicates that deeper
networks took a longer time to converge, but at a later stage
gave a better performance. Looking at the ﬁnal error, it does
not give us conclusive evidence of what depth of network
would be the most suitable. Furthermore, if the datastream
had more instances, a deeper network may have given an
overall better performance. This demonstrates the difﬁculty
in model selection for learning DNNs online, where typical
validation techniques are ineffective. Ideally we want to ex-
ploit the convergence of the shallow DNNs in the beginning
and the power of deeper representations later.

Baselines
We aim to learn a 20 layer DNN in the online setting, with
100 units in each hidden layer. As baselines, we learn the 20
layer network online using OGD (Online Backpropagation),
OGD Momentum, OGD Nesterov, and Highway Networks.
Since a 20 layer network would be very difﬁcult to learn
in the online setting, we also compare the performance of
shallower networks — DNNs with fewer layers (2,3,4,8,16),
trained using Online BP. We used ReLU Activation, and a
ﬁxed learning rate of 0.01 (chosen, as it gave the best ﬁ-
nal error rate for all DNN-based baselines). For momentum
techniques, a ﬁxed learning rate of 0.001 was used, and we
ﬁnetuned the momentum parameter to obtain the best perfor-
mance for the baselines. For HBP, we attached a classiﬁer to
each of the 19 hidden layers (and not directly to the input).
This gave 19 classiﬁers each with depth from 2, . . . , 20. We
set β = 0.99 and the smoothing parameter s = 0.2. Im-
plementation was in Keras (Chollet 2015). We also com-
pared with representative state of the art linear online learn-
ing algorithms (OGD, Adaptive Regularization of Weights
(AROW), Soft-Conﬁdence Weighted Learning (SCW) (Hoi,
Wang, and Zhao 2014)) and kernel online learning algo-
rithms (Fourier Online Gradient Descent (FOGD) and Nys-
trom Online Gradient Descent (NOGD)(Lu et al. 2015a)) .

Evaluation of Online Deep Learning Algorithms
The ﬁnal cumulative error obtained by all the baselines
and the proposed HBP technique can be seen in Table 3.
First, traditional online learning algorithms (linear and ker-
nel) have relatively poor performance on complex datasets.
Next, in learning with a 20-layer network, the convergence
is slow, resulting in poor overall performance. While second
order methods utilizing momentum and highway networks
are able to offer some advantage over simple Online Gradi-
ent Descent, they can be easily beaten by a relatively shal-
lower networks in the online setting. We observed before
that relatively shallower networks could give a competitive
performance in the online setting, but lacked the ability to
exploit the power of depth at a later stage. In contrast, HBP
enjoyed the best of both worlds, by allowing for faster con-
vergence initially, and making use of the power of depth at
a later stage. This way HBP was able to do automatic model
selection online, enjoying merits of both shallow and deep
networks, and this resulted in HBP outperforming all the
DNNs of different depths, in terms of online performance.

Table 2: Online error rate of DNNs of varying Depth. All models were trained online t = 1, . . . , T . We evaluate the performance
in different segments of the data. L is the number of layers in the DNN.

Final Cumulative Error
Syn8
Susy
Higgs
0.3936
0.2016
0.2724
0.3920
0.2014
0.2688
0.2682
0.3936
0.2016
0.4025
0.2037
0.2731

Segment [0-0.5]% Error
Syn8
Higgs
Susy
0.4269
0.2152
0.3584
0.4339
0.2197
0.3721
0.4522
0.2218
0.3808
0.4721
0.2312
0.4550

Segment [10-15]% Error
Syn8
Susy
Higgs
0.2029
0.4002
0.2797
0.3989
0.2030
0.2775
0.4018
0.2036
0.2794
0.4121
0.2050
0.2831

Segment [60-80]% Error
Syn8
Susy
Higgs
0.3901
0.2004
0.2668
0.3876
0.2004
0.2617
0.1997
0.2613
0.3888
0.3923
0.2027
0.2642

L
3
4
8
16

It should be noted that the optimal depth for DNN is not
known before the learning process, and even then HBP out-
performs all DNNs at any depth.

In Figure 2, we can see the convergence behavior of all the
algorithms on the stationary as well as concept drift datasets.
In the stationary datasets, HBP shows consistent outperfor-
mance over all the baselines. The only exception is in the
very initial stages of the online learning phase, where shal-
lower baselines are able to outperform HBP. This is not sur-
prising, as HBP has many more parameters to learn. How-
ever, HBP is able to quickly outperform the shallow net-
works. The performance of HBP in concept drifting sce-
narios demonstrates its ability to adapt to the change fairly
quickly, enabling usage of DNNs in the concept drifting sce-
narios. Looking at the performance of simple 20-layer (and
16-layer) networks on concept drifting data, we can see dif-
ﬁculty in utilizing deep representation for such scenarios.

Adapting the Effective Depth of the DNN
In this section we look at the weight distribution learnt by
HBP over time. We analyse the mean weight distribution in
different segments of the Online Learning phase in Figure
3. In the initial phase (ﬁrst 0.5%), the maximum weight has
gone to the shallowest classiﬁer (with just one hidden layer).
In the second phase (10-15%), slightly deeper classiﬁers
(classiﬁers with 4-5 layers) have picked up some weight,
and in the third segment (60-80%), even deeper classiﬁers
have gotten more weight (classiﬁers with 5-7 layers). The
shallow and the very deep classiﬁers receive little weight in
the last segment showing HBPs ability to perform model se-
lection. Few classiﬁers having similar depth indicates that
the intermediate features learnt are themselves of discrimi-
natory nature, which are being used by the deeper classiﬁers
to potentially learn better features.

Performance in Different Learning Stages
We evaluate HBP performance in different segments of the
data to see how the proposed HBP algorithm performed as
compared to the DNNs of different depth in different stages
of learning. In Figure 4, we can see, HBP matches (and even
beats) the performance of the best depth network in both
the beginning and at a later stage of the training phase. This
shows its ability to exploit faster convergence of shallow net-
works in the beginning, and power of deep representation
towards the end. Not only is it able to do automatic model
selection, but also it is able to offer a good initialization for
the deeper representation, so that the depth of the network
can be exploited sooner, thus beating a DNN of every depth.

(a) Error in 10-15% of
data

(b) Error in 60-80% of
data

Figure 4: Error Rate in different segments of the Data. Red
represents HBP using a 20-layer network. Blue are OGD
using DNN with layers = 2,3,4,8, 16 and 20.

Robustness to Depth of Base-Network
We evaluate HBP performance with varying depth of the
base network. We consider 12, 16, 20, and a 30-layer DNNs
trained using HBP and compare their performance on Higgs
against simple Online BP. See Table 4 for the results, where
the performance variation with depth does not signiﬁcantly
alter HBPs performance, while for simple Online BP, signif-
icant increase in depth hurts the learning process.

Table 4: Robustness of HBP to depth of the base network
compared to traditional DNN

Depth
Online BP
HBP

12
0.2692
0.2609

16
0.2731
0.2613

20
0.2868
0.2615

30
0.4770
0.2620

Conclusion
We identiﬁed several issues which prevented existing DNNs
from being used in an online setting, which meant that they
could not be used for streaming data, and necessarily re-
quired storage of the entire data in memory. These issues
arose from difﬁculty in model selection (appropriate depth
DNN), and convergence difﬁculties from vanishing gradi-
ent and diminishing feature reuse. We used the ”shallow
to deep” principle, and designed Hedge Backpropagation,
which enabled the usage of Deep Neural Networks in an on-
line setting. HBP used a hedging strategy to make predic-
tions with multiple outputs from different hidden layers of
the network, and the backpropagation algorithm was modi-
ﬁed to allow for knowledge sharing among the deeper and
shallower networks. This approach automatically identiﬁed
how and when to modify the effective network capacity in a
data-drive manner, based on the observed data complexity.
We validated the proposed method through extensive exper-
iments on large datasets.

Linear OL

Kernel OL

DNNs

Table 3: Final Online Cumulative Error Rate obtained by the algorithms. Best performance is in bold.
Model

Method
OGD
AROW
SCW
FOGD
NOGD
OGD (Online BP)
OGD (Online BP)
OGD (Online BP)
OGD (Online BP)
OGD (Online BP)
OGD (Online BP)
OGD+Momentum
OGD+Nesterov
Highway
Hedge BP (proposed)

Layers Higgs
0.3620
0.3630
0.3530
0.2973
0.3488
0.2938
0.2724
0.2688
0.2682
0.2731
0.2868
0.2711
0.2711
0.2736
0.2615

1
1
1
2
2
2
3
4
8
16
20
20
20
20
20

Susy
0.2160
0.2160
0.2140
0.2021
0.2045
0.2028
0.2016
0.2014
0.2016
0.2037
0.2064
0.2012
0.2076
0.2019
0.2003

i-mnist
0.1230
0.1250
0.1230
0.0495
0.1045
0.0199
0.0190
0.0196
0.0219
0.0232
0.0274
0.0310
0.0247
0.0241
0.0156

Syn8
0.4070
0.4050
0.4050
0.3962
0.4146
0.3976
0.3936
0.3920
0.3936
0.4025
0.4472
0.4062
0.3942
0.4313
0.3896

CD1
0.4360
0.4340
0.4340
0.4329
0.4455
0.4146
0.4115
0.4110
0.4145
0.4204
0.4928
0.4312
0.4191
0.4928
0.4079

CD2
0.4270
0.4250
0.4250
0.4193
0.4356
0.3797
0.3772
0.3766
0.3829
0.3939
0.4925
0.3897
0.3917
0.4925
0.3739

(a) HIGGS

(b) SUSY

(c) Inf-MNIST (i-mnist)

(d) SYN8

(e) Concept Drift 1 (CD1)

(f) Concept Drift 2 (CD2)

Figure 2: Convergence behavior of DNNs in Online Setting on stationary and concept drifting data.

(a) First 0.5% of Data

(b) 10-15% of Data

(c) 60-80% of Data

Figure 3: Evolution of weight distribution of the classiﬁers over time using HBP on HIGGS dataset.

2013.

https://

2015. Keras.

References
[Alvarez and Salzmann 2016] Alvarez, J. M., and Salzmann,
M. 2016. Learning the number of neurons in deep networks.
In NIPS.
[Auer et al. 2002] Auer, P.; Cesa-Bianchi, N.; Freund, Y.;
and Schapire, R. E. 2002. The nonstochastic multiarmed
bandit problem. SIAM Journal on Computing 32(1):48–77.
[Bengio, Courville, and Vincent 2013] Bengio,
Y.;
Representation
Courville, A.; and Vincent, P.
IEEE trans-
learning: A review and new perspectives.
actions on pattern analysis and machine intelligence
35(8):1798–1828.
[Bengio, Goodfellow, and Courville 2015] Bengio,
Y.;
Goodfellow, I. J.; and Courville, A. 2015. Deep learning.
An MIT Press book in preparation. Draft chapters available
at http://www. iro. umontreal. ca/ bengioy/dlbook.
[Cesa-Bianchi and Lugosi 2006] Cesa-Bianchi, N., and Lu-
gosi, G. 2006. Prediction, learning, and games. Cambridge
University Press.
[Chen, Goodfellow, and Shlens 2016] Chen, T.; Goodfellow,
I.; and Shlens, J. 2016. Net2net: Accelerating learning via
knowledge transfer. ICLR.
[Chollet 2015] Chollet, F.
github.com/fchollet/keras.
[Choromanska et al. 2015] Choromanska, A.; Henaff, M.;
Mathieu, M.; Arous, G.; and LeCun, Y. 2015. The loss
surfaces of multilayer networks. In AISTATS.
[Crammer et al. 2006] Crammer, K.; Dekel, O.; Keshet, J.;
Shalev-Shwartz, S.; and Singer, Y. 2006. Online passive-
aggressive algorithms. JMLR.
[Dauphin et al. 2014] Dauphin, Y.; Pascanu, R.; Gulcehre,
C.; Cho, K.; Ganguli, S.; and Bengio, Y. 2014. Identifying
and attacking the saddle point problem in high-dimensional
non-convex optimization. In NIPS.
[Dredze, Crammer, and Pereira 2008] Dredze, M.; Cram-
mer, K.; and Pereira, F. 2008. Conﬁdence-weighted linear
classiﬁcation. In ICML.
[Freund and Schapire 1997] Freund, Y., and Schapire, R.
1997. A decision-theoretic generalization of on-line learn-
ing and an application to boosting. Journal of computer and
system sciences.
[Freund and Schapire 1999] Freund, Y., and Schapire, R.
1999. Adaptive game playing using multiplicative weights.
Games and Economic Behavior.
[Gama et al. 2014] Gama, J.; Zliobaite, I.; Bifet, A.; Pech-
enizkiy, M.; and Bouchachia, A. 2014. A survey on concept
drift adaptation. ACM Computing Surveys (CSUR) 46(4):44.
[Gulcehre et al. 2016] Gulcehre, C.; Moczulski, M.; Visin,
F.; and Bengio, Y. 2016. Mollifying networks. preprint
arXiv:1608.04980.
[He et al. 2016] He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016.
Deep residual learning for image recognition. CVPR.
[Hoi et al. 2013] Hoi, S.; Jin, R.; Zhao, P.; and Yang, T. 2013.
Online multiple kernel classiﬁcation. Machine Learning.

2015.

[Hoi, Wang, and Zhao 2014] Hoi, S.; Wang, J.; and Zhao, P.
2014. Libol: A library for online learning algorithms. JMLR.
[Huang et al. 2016] Huang, G.; Sun, Y.; Liu, Z.; Sedra, D.;
and Weinberger, K. 2016. Deep networks with stochastic
depth. arXiv preprint arXiv:1603.09382.
[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015.
Batch normalization: Accelerating deep network train-
arXiv preprint
ing by reducing internal covariate shift.
arXiv:1502.03167.
[Jin, Hoi, and Yang 2010] Jin, R.; Hoi, S.; and Yang, T.
2010. Online multiple kernel learning: Algorithms and mis-
In Algorithmic Learning Theory. Springer
take bounds.
Berlin Heidelberg.
[Kivinen, Smola, and Williamson 2004] Kivinen, J.; Smola,
A.; and Williamson, R. 2004. Online learning with kernels.
IEEE TSP 52(8):2165–2176.
[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.;
Sutskever, I.; and Hinton, G. E. 2012. Imagenet classiﬁca-
tion with deep convolutional neural networks. In Advances
in neural information processing systems, 1097–1105.
[Larsson, Maire, and Shakhnarovich 2016] Larsson,
G.;
Maire, M.; and Shakhnarovich, G. 2016. Fractalnet: Ultra-
arXiv preprint
deep neural networks without residuals.
arXiv:1605.07648.
[LeCun, Bengio, and Hinton 2015] LeCun, Y.; Bengio, Y.;
Nature
and Hinton, G.
521(7553):436–444.
[Lee et al. 2015] Lee, C.-Y.; Xie, S.; Gallagher, P.; Zhang, Z.;
In AISTATS,
and Tu, Z. 2015. Deeply-supervised nets.
volume 2, 6.
[Lee et al. 2016] Lee, S.-W.; Lee, C.-Y.; Kwak, D.-H.; Kim,
J.; Kim, J.; and Zhang, B.-T. 2016. Dual-memory deep
learning architectures for lifelong learning of everyday hu-
man behaviors. In IJCAI, 1669–1675.
[Lee et al. 2017] Lee, J.; Yun, J.; Hwang, S.; and Yang, E.
2017. Lifelong learning with dynamically expandable net-
works. arXiv preprint arXiv:1708.01547.
[Loosli, Canu, and Bottou 2007] Loosli, G.; Canu, S.; and
Bottou, L. 2007. Training invariant support vector machines
using selective sampling. Large scale kernel machines 301–
320.
[Lu et al. 2015a] Lu, J.; Hoi, S.; Wang, J.; Zhao, P.; and Liu,
Z. 2015a. Large scale online kernel learning. J. Mach.
Learn. Res.
[Lu et al. 2015b] Lu, J.; Hoi, S. C.; Sahoo, D.; and Zhao,
P. 2015b. Budget online multiple kernel learning. arXiv
preprint arXiv:1511.04813.
[Nair and Hinton 2010] Nair, V., and Hinton, G. E. 2010.
Rectiﬁed linear units improve restricted boltzmann ma-
chines. In Proceedings of the 27th International Conference
on Machine Learning (ICML-10), 807–814.
[Rosenblatt 1958] Rosenblatt, F. 1958. The perceptron: a
probabilistic model for information storage and organization
in the brain. Psychological review 65(6):386.

Deep learning.

2015. Training
In Advances in neural information

[Sahoo, Hoi, and Li 2014] Sahoo, D.; Hoi, S.; and Li, B.
2014. Online multiple kernel regression. In ACM SIGKDD.
[Sahoo, Hoi, and Zhao 2016] Sahoo, D.; Hoi, S.; and Zhao,
P. 2016. Cost sensitive online multiple kernel classiﬁcation.
In Asian Conference on Machine Learning, 65–80.
[Shalev-Shwartz 2007] Shalev-Shwartz, S. 2007. Online
learning: Theory, algorithms, and applications.
[Srinivas and Babu 2015] Srinivas, S., and Babu, R. V. 2015.
Learning neural network architectures using backpropaga-
tion. arXiv preprint arXiv:1511.05497.
[Srivastava, Greff, and Schmidhuber 2015] Srivastava,
R. K.; Greff, K.; and Schmidhuber, J.
very deep networks.
processing systems, 2377–2385.
[Wei et al. 2016] Wei, T.; Wang, C.; Rui, R.; and Chen, C. W.
2016. Network morphism. ICML.
[Wu et al. 2017] Wu, Y.; Hoi, S. C.; Liu, C.; Lu, J.; Sahoo,
D.; and Yu, N. 2017. Sol: A library for scalable online
learning algorithms. Neurocomputing.
[Zhou, Sohn, and Lee 2012] Zhou, G.; Sohn, K.; and Lee, H.
2012. Online incremental feature learning with denoising
autoencoders. AISTATS 1001:48109.
[Zinkevich 2003] Zinkevich, M. 2003. Online convex pro-
gramming and generalized inﬁnitesimal gradient ascent.
[Zoph and Le 2016] Zoph, B., and Le, Q. V. 2016. Neu-
ral architecture search with reinforcement learning. arXiv
preprint arXiv:1611.01578.

