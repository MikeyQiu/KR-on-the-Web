SSH: Single Stage Headless Face Detector

Mahyar Najibi*

Pouya Samangouei* Rama Chellappa
University of Maryland

Larry S. Davis

najibi@cs.umd.edu

{pouya,rama,lsd}@umiacs.umd.edu

7
1
0
2
 
t
c
O
 
8
1
 
 
]

V
C
.
s
c
[
 
 
3
v
9
7
9
3
0
.
8
0
7
1
:
v
i
X
r
a

Abstract

We introduce the Single Stage Headless (SSH) face de-
tector. Unlike two stage proposal-classiﬁcation detectors,
SSH detects faces in a single stage directly from the early
convolutional layers in a classiﬁcation network. SSH is
headless. That is, it is able to achieve state-of-the-art re-
sults while removing the “head” of its underlying classiﬁca-
tion network – i.e. all fully connected layers in the VGG-16
which contains a large number of parameters. Addition-
ally, instead of relying on an image pyramid to detect faces
with various scales, SSH is scale-invariant by design. We
simultaneously detect faces with different scales in a sin-
gle forward pass of the network, but from different layers.
These properties make SSH fast and light-weight. Surpris-
ingly, with a headless VGG-16, SSH beats the ResNet-101-
based state-of-the-art on the WIDER dataset. Even though,
unlike the current state-of-the-art, SSH does not use an im-
age pyramid and is 5X faster. Moreover, if an image pyra-
mid is deployed, our light-weight network achieves state-
of-the-art on all subsets of the WIDER dataset, improv-
ing the AP by 2.5%. SSH also reaches state-of-the-art re-
sults on the FDDB and Pascal-Faces datasets while using a
small input size, leading to a runtime of 50 ms/image on a
GPU. The code is available at https://github.com/
mahyarnajibi/SSH.

1. Introduction

Face detection is a crucial step in various problems in-
volving veriﬁcation, identiﬁcation, expression analysis, etc.
From the Viola-Jones [29] detector to recent work by Hu
et al. [7], the performance of face detectors has been im-
proved dramatically. However, detecting small faces is still
considered a challenging task. The recent introduction of
the WIDER face dataset [35], containing a large number
of small faces, exposed the performance gap between hu-
mans and current face detectors. The problem becomes
more challenging when the speed and memory efﬁciency
of the detectors are taken into account. The best perform-

*Authors contributed equally

Figure 1: SSH detects various face sizes in a single CNN
forward pass and without employing an image pyramid in
∼ 0.1 second for an image with size 800 × 1200 on a GPU.

ing face detectors are usually slow and have high memory
foot-prints (e.g. [7] takes more than 1 second to process an
image, see Section 4.5) partly due to the huge number of
parameters as well as the way robustness to scale or incor-
poration of context are addressed.

State-of-the-art CNN-based detectors convert

image
classiﬁcation networks into two-stage detection systems
[4, 24]. In the ﬁrst stage, early convolutional feature maps
are used to propose a set of candidate object boxes. In the
second stage, the remaining layers of the classiﬁcation net-
works (e.g. fc6~8 in VGG-16 [26]), which we refer to as the
network “head”, are deployed to extract local features for
these candidates and classify them. The head in the classiﬁ-
cation networks can be computationally expensive (e.g. the
network head contains ∼ 120M parameters in VGG-16 and
∼ 12M parameters in ResNet-101). Moreover, in the two
stage detectors, the computation must be performed for all
proposed candidate boxes.

Very recently, Hu et al. [7] showed state-of-the-art re-
sults on the WIDER face detection benchmark by using a
similar approach to the Region Proposal Networks (RPN)
[24] to directly detect faces. Robustness to input scale is
achieved by introducing an image pyramid as an integral

part of the method. However, it involves processing an in-
put pyramid with an up-sampling scale up to 5000 pixels per
side and passing each level to a very deep network which
increased inference time.

In this paper, we introduce the Single Stage Headless
(SSH) face detector. SSH performs detection in a single
stage. Like RPN [24], the early feature maps in a classiﬁ-
cation network are used to regress a set of predeﬁned an-
chors towards faces. However, unlike two-stage detectors,
the ﬁnal classiﬁcation takes place together with regressing
the anchors. SSH is headless. It is able to achieve state-
of-the-art results while removing the head of its underlying
network (i.e. all fully connected layers in VGG-16), leading
to a light-weight detector. Finally, SSH is scale-invariant
by design.
Instead of relying on an external multi-scale
pyramid as input, inspired by [14], SSH detects faces from
various depths of the underlying network. This is achieved
by placing an efﬁcient convolutional detection module on
top of the layers with different strides, each of which is
trained for an appropriate range of face scales. Surpris-
ingly, SSH based on a headless VGG-16, not only outper-
forms the best-reported VGG-16 by a large margin but also
beats the current ResNet-101-based state-of-the-art method
on the WIDER face detection dataset. Unlike the current
state-of-the-art, SSH does not deploy an input pyramid and
If an input pyramid is used with SSH
is 5 times faster.
as well, our light-weight VGG-16-based detector outper-
forms the best reported ResNet-101 [7] on all three subsets
of the WIDER dataset and improves the mean average pre-
cision by 4% and 2.5% on the validation and the test set
respectively. SSH also achieves state-of-the-art results on
the FDDB and Pascal-Faces datasets with a relatively small
input size, leading to a runtime of 50 ms/image.

The rest of the paper is organized as follows. Section 2
provides an overview of the related works. Section 3 intro-
duces the proposed method. Section 4 presents the experi-
ments and Section 5 concludes the paper.

2. Related Works

2.1. Face Detection

Prior to the re-emergence of convolutional neural net-
works (CNN), different machine learning algorithms were
developed to improve face detection performance [29, 39,
10, 11, 18, 2, 31]. However, following the success of these
networks in classiﬁcation tasks [9], they were applied to
detection as well [6]. Face detectors based on CNNs sig-
niﬁcantly closed the performance gap between human and
artiﬁcial detectors [12, 33, 32, 38, 7]. However, the intro-
duction of the challenging WIDER dataset [35], containing
a large number of small faces, re-highlighted this gap. To
improve performance, CMS-RCNN [38] changed the Faster
R-CNN object detector [24] to incorporate context informa-

tion. Very recently, Hu et al. proposed a face detection
method based on proposal networks which achieves state-
of-the-art results on this dataset [7]. However, in addition
to skip connections, an input pyramid is processed by re-
scaling the image to different sizes, leading to slow detec-
In contrast, SSH is able to process multiple
tion speeds.
face scales simultaneously in a single forward pass of the
network, which reduces inference time noticeably.

2.2. Single Stage Detectors and Proposal Networks

The idea of detecting and localizing objects in a single
stage has been previously studied for general object detec-
tion. SSD [16] and YOLO [23] perform detection and classi-
ﬁcation simultaneously by classifying a ﬁxed grid of boxes
and regressing them towards objects. G-CNN [19] mod-
els detection as a piece-wise regression problem and itera-
tively pushes an initial multi-scale grid of boxes towards ob-
jects while classifying them. However, current state-of-the-
art methods on the challenging MS-COCO object detection
benchmark are based on two-stage detectors[15]. SSH is a
single stage detector; it detects faces directly from the early
convolutional layers without requiring a proposal stage.

Although SSH is a detector, it is more similar to the ob-
ject proposal algorithms which are used as the ﬁrst stage in
detection pipelines. These algorithms generally regress a
ﬁxed set of anchors towards objects and assign an object-
ness score to each of them. MultiBox [28] deploys cluster-
ing to deﬁne anchors. RPN [24], on the other hand, deﬁnes
anchors as a dense grid of boxes with various scales and as-
pect ratios, centered at every location in the input feature
map. SSH uses similar strategies, but to localize and at the
same time detect, faces.

2.3. Scale Invariance and Context Modeling

Being scale invariant is important for detecting faces in
unconstrained settings. For generic object detection, [1, 36]
deploy feature maps of earlier convolutional layers to de-
tect small objects. Recently, [14] used skip connections
in the same way as [17] and employed multiple shared
RPN and classiﬁer heads from different convolutional lay-
ers. For face detection, CMS-RCNN [38] used the same
idea as [1, 36] and added skip connections to the Faster
RCNN [24]. [7] creates a pyramid of images and processes
each separately to detect faces of different sizes. In con-
trast, SSH is capable of detecting faces at different scales
in a single forward pass of the network without creating an
image pyramid. We employ skip connections in a similar
fashion as [17, 14], and train three detection modules jointly
from the convolutional layers with different strides to detect
small, medium, and large faces.

In two stage object detectors, context is usually modeled
by enlarging the window around proposals [36]. [1] mod-
els context by deploying a recurrent neural network. For

face detection, CMS-RCNN [38] utilizes a larger window
with the cost of duplicating the classiﬁcation head. This in-
creases the memory requirement as well as detection time.
SSH uses simple convolutional layers to achieve the same
larger window effect, leading to more efﬁcient context mod-
eling.

3. Proposed Method

SSH is designed to decrease inference time, have a low
memory foot-print, and be scale-invariant. SSH is a single-
stage detector; i.e. instead of dividing the detection task into
bounding box proposal and classiﬁcation, it performs clas-
siﬁcation together with localization from the global infor-
mation extracted from the convolutional layers. We empiri-
cally show that in this way, SSH can remove the “head” of
its underlying network while achieving state-of-the-art face
detection accuracy. Moreover, SSH is scale-invariant by de-
sign and can incorporate context efﬁciently.

3.1. General Architecture

Figure 2 shows the general architecture of SSH. It is a
fully convolutional network which localizes and classiﬁes
faces early on by adding a detection module on top of fea-
ture maps with strides of 8, 16, and 32, depicted as M1,
M2, and M3 respectively. The detection module consists
of a convolutional binary classiﬁer and a regressor for de-
tecting faces and localizing them respectively.

To solve the localization sub-problem, as in [28, 24, 19],
SSH regresses a set of predeﬁned bounding boxes called an-
chors, to the ground-truth faces. We employ a similar strat-
egy to the RPN [24] to form the anchor set. We deﬁne the
anchors in a dense overlapping sliding window fashion. At
each sliding window location, K anchors are deﬁned which
have the same center as that window and different scales.
However, unlike RPN, we only consider anchors with as-
pect ratio of one to reduce the number of anchor boxes. We
noticed in our experiments that having various aspect ratios
does not have a noticeable impact on face detection preci-
sion. More formally, if the feature map connected to the
detection module Mi has a size of Wi × Hi, there would
be Wi × Hi × Ki anchors with aspect ratio one and scales
{S1

i , S2
For the detection module, a set of convolutional layers
are deployed to extract features for face detection and lo-
calization as depicted in Figure 3. This includes a simple
context module to increase the effective receptive ﬁeld as
discussed in section 3.3. The number of output channels
of the context module, (i.e. “X” in Figures 3 and 4) is set
to 128 for detection module M1 and 256 for modules M2
and M3. Finally, two convolutional layers perform bound-
ing box regression and classiﬁcation. At each convolution
location in Mi, the classiﬁer decides whether the windows
at the ﬁlter’s center and corresponding to each of the scales

i , . . . SKi

i }.

i }K

{Sk
k=1 contains a face. A 1 × 1 convolutional layer with
2 × K output channels is used as the classiﬁer. For the re-
gressor branch, another 1×1 convolutional layer with 4×K
output channels is deployed. At each location during the
convolution, the regressor predicts the required change in
scale and translation to match each of the positive anchors
to faces.

3.2. Scale-Invariance Design

In unconstrained settings, faces in images have varying
scales. Although forming a multi-scale input pyramid and
performing several forward passes during inference, as in
[7], makes it possible to detect faces with different scales, it
is slow. In contrast, SSH detects large and small faces simul-
taneously in a single forward pass of the network. Inspired
by [14], we detect faces from three different convolutional
layers of our network using detection modules M1, M2,
and M3. These modules have strides of 8, 16, and 32 and
are designed to detect small, medium, and large faces re-
spectively.

More precisely, the detection module M2 performs de-
tection from the conv5-3 layer in VGG-16. Although it is
possible to place the detection module M1 directly on top
of conv4-3, we use the feature map fusion which was previ-
ously deployed for semantic segmentation [17], and generic
object detection [14]. However, to decrease the memory
consumption of the model, the number of channels in the
feature map is reduced from 512 to 128 using 1 × 1 con-
volutions. The conv5-3 feature maps are up-sampled and
summed up with the conv4-3 features, followed by a 3 × 3
convolutional layer. We used bilinear up-sampling in the
fusion process. For detecting larger faces, a max-pooling
layer with stride of 2 is added on top of the conv5-3 layer
to increase its stride to 32. The detection module M3 is
placed on top of this newly added layer.

During the training phase, each detection module Mi
is trained to detect faces from a target scale range as dis-
cussed in 3.4. During inference, the predicted boxes from
the different scales are joined together followed by Non-
Maximum Suppression (NMS) to form the ﬁnal detections.

3.3. Context Module

In two-stage detectors, it is common to incorporate con-
text by enlarging the window around the candidate propos-
als. SSH mimics this strategy by means of simple convo-
lutional layers. Figure 4 shows the context layers which
are integrated into the detection modules. Since anchors are
classiﬁed and regressed in a convolutional manner, applying
a larger ﬁlter resembles increasing the window size around
proposals in a two-stage detector. To this end, we use 5 × 5
and 7 × 7 ﬁlters in our context module. Modeling the con-
text in this way increases the receptive ﬁeld proportional to
the stride of the corresponding layer and as a result the tar-

Figure 2: The network architecture of SSH.

Figure 3: SSH detection module.

Figure 4: SSH context module.

3.4.1 Loss function

get scale of each detection module. To reduce the number
of parameters, we use a similar approach as [27] and deploy
sequential 3×3 ﬁlters instead of larger convolutional ﬁlters.
The number of output channels of the detection module (i.e.
“X” in Figure 4) is set to 128 for M1 and 256 for modules
M2 and M3. It should be noted that our detection mod-
ule together with its context ﬁlters uses fewer of parameters
compared to the module deployed for proposal generation
in [24]. Although, more efﬁcient, we empirically found that
the context module improves the mean average precision on
the WIDER validation dataset by more than half a percent.

3.4. Training

We use stochastic gradient descent with momentum and
weight decay for training the network. As discussed in sec-
tion 3.2, we place three detection modules on layers with
different strides to detect faces with different scales. Con-
sequently, our network has three multi-task losses for the
classiﬁcation and regression branches in each of these mod-
ules as discussed in Section 3.4.1. To specialize each of
the three detection modules for a speciﬁc range of scales,

we only back-propagate the loss for the anchors which are
assigned to faces in the corresponding range. This is im-
plemented by distributing the anchors based on their size
to these three modules (i.e. smaller anchors are assigned to
M1 compared to M2, and M3). An anchor is assigned to
a ground-truth face if and only if it has a higher IoU than
0.5. This is in contrast to the methods based on Faster R-
CNN which assign to each ground-truth at least one anchor
with the highest IoU. Thus, we do not back-propagate the
loss through the network for ground-truth faces inconsistent
with the anchor sizes of a module.

SSH has a multi-task loss. This loss can be formulated as
follows:

(cid:88)

(cid:88)

1
N c
k

k

i∈Ak

(cid:96)c(pi, gi)+

(cid:88)

(cid:88)

λ

1
N r
k

k

i∈Ak

I(gi = 1)(cid:96)r(bi, ti)

(1)

where (cid:96)c is the face classiﬁcation loss. We use standard
multinomial logistic loss as (cid:96)c. The index k goes over the
SSH detection modules M = {Mk}K
1 and Ak represents
the set of anchors deﬁned in Mk. The predicted category
for the i’th anchor in Mk and its assigned ground-truth la-
bel are denoted as pi and gi respectively. As discussed in
Section 3.2, an anchor is assigned to a ground-truth bound-
ing box if and only if it has an IoU greater than a threshold
(i.e. 0.5). As in [24], negative labels are assigned to anchors
with IoU less than a predeﬁned threshold (i.e. 0.3) with any
ground-truth bounding box. N c
k is the number of anchors
in module Mk which participate in the classiﬁcation loss
computation.

(cid:96)r represents the bounding box regression loss. Fol-
lowing [6, 5, 24], we parameterize the regression space

with a log-space shift in the box dimensions and a scale-
invariant translation and use smooth (cid:96)1 loss as (cid:96)r. In this
parametrized space, pi represents the predicted four di-
mensional translation and scale shift and ti is its assigned
ground-truth regression target for the i’th anchor in mod-
ule Mk. I(.) is the indicator function that limits the re-
gression loss only to the positively assigned anchors, and
N r

I(gi = 1).

k = (cid:80)

i∈Ak

3.5. Online hard negative and positive mining

We use online negative and positive mining (OHEM) for
training SSH as described in [25]. However, OHEM is ap-
plied to each of the detection modules (Mk) separately.
That is, for each module Mk, we select the negative an-
chors with the highest scores and the positive anchors with
the lowest scores with respect to the weights of the net-
work at that iteration to form our mini-batch. Also, since
the number of negative anchors is more than the positives,
following [4], 25% of the mini-batch is reserved for the pos-
itive anchors. As empirically shown in Section 4.8, OHEM
has an important role in the success of SSH which removes
the fully connected layers out of the VGG-16 network.

4. Experiments

4.1. Experimental Setup

All models are trained on 4 GPUs in parallel using
stochastic gradient descent. We use a mini-batch of 4
images. Our networks are ﬁne-tuned for 21K iterations
starting from a pre-trained ImageNet classiﬁcation network.
Following [4], we ﬁx the initial convolutions up to conv3-1.
The learning rate is initially set to 0.004 and drops by a fac-
tor of 10 after 18K iterations. We set momentum to 0.9, and
weight decay to 5e−4. Anchors with IoU> 0.5 are assigned
to positive class and anchors which have an IoU< 0.3 with
all ground-truth faces are assigned to the background class.
For anchor generation, we use scales {1, 2} in M1, {4, 8}
in M2, and {16, 32} in M3 with a base anchor size of 16
pixels. All anchors have aspect ratio of one. During train-
ing, 256 detections per module is selected for each image.
During inference, each module outputs 1000 best scoring
anchors as detections and NMS with a threshold of 0.3 is
performed on the outputs of all modules together.

4.2. Datasets

WIDER dataset[35]: This dataset contains 32, 203 im-
ages with 393, 703 annotated faces, 158, 989 of which are
in the train set, 39, 496 in the validation set and the rest are
in the test set. The validation and test set are divided into
“easy”, “medium”, and “hard” subsets cumulatively (i.e. the
“hard” set contains all images). This is one of the most chal-
lenging public face datasets mainly due to the wide variety
of face scales and occlusion. We train all models on the

Table 1: Comparison of SSH with top performing methods on the
validation set of the WIDER dataset.

Method
CMS-RCNN [38]
HR(VGG-16)+Pyramid [7]
HR(ResNet-101)+Pyramid [7]
SSH(VGG-16)
SSH(VGG-16)+Pyramid

easy medium hard
62.9
87.4
89.9
74.9
84.4
86.2
80.6
91.0
92.5
81.4
90.7
91.9
84.5
92.1
93.1

train set of the WIDER dataset and evaluate on the valida-
tion and test sets. Ablation studies are performed on the the
validation set (i.e. “hard” subset).

FDDB[8]: FDDB contains 2845 images and 5171 anno-

tated faces. We use this dataset only for testing.

Pascal Faces[30]: Pascal Faces is a subset of the Pascal
VOC dataset [3] and contains 851 images annotated for face
detection. We use this dataset only to evaluate our method.

4.3. WIDER Dataset Result

We compare SSH with HR [7], CMS-RCNN [38], Mul-
titask Cascade CNN [37], LDCF [20], Faceness [34], and
Multiscale Cascade CNN [35]. When reporting SSH with-
out an image pyramid, we rescale the shortest side of
the image up to 1200 pixels while keeping the largest
side below 1600 pixels without changing the aspect ratio.
SSH+Pyramid is our method when we apply SSH to a pyra-
mid of input images. Like HR, a four level image pyramid
is deployed. To form the pyramid, the image is ﬁrst scaled
to have a shortest side of up to 800 pixels and the longest
side less than 1200 pixels. Then, we scale the image to have
min sizes of 500, 800, 1200, and 1600 pixels in the pyramid.
All modules detect faces on all pyramid levels, except M3
which is not applied to the largest level.

Table 1 compares SSH with best performing methods on
the WIDER validation set. SSH without using an image
pyramid and based on the VGG-16 network outperforms
the VGG-16 version of HR by 5.7%, 6.3%, and 6.5% in
“easy”, “medium”, and “hard” subsets respectively. Sur-
prisingly, SSH also outperforms HR based on ResNet-101
on the whole dataset (i.e. “hard” subset) by 0.8.
In con-
trast HR deploys an image pyramid. Using an image pyra-
mid, SSH based on a light VGG-16 model, outperforms the
ResNet-101 version of HR by a large margin, increasing the
state-of-the-art on this dataset by ∼ 4%.

The precision-recall curves on the test set is presented in
Figure 5. We submitted the detections of SSH with an im-
age pyramid only once for evaluation. As can be seen, SSH
based on a headless VGG-16, outperforms the prior meth-
ods on all subsets, increasing the state-of-the-art by 2.5%.

4.4. FDDB and Pascal Faces Results

In these datasets, we resize the shortest side of the input
to 400 pixels while keeping the larger side less than 800 pix-

(a) Easy

(b) Medium

(c) Hard

Figure 5: Comparison among the methods on the test set of WIDER face detection benchmark.

(a) FDDB discrete score.

(b) FDDB continuous score.

(c) Pascal-Faces.

Figure 6: Comparison among the methods on FDDB and Pascal-Faces datasets. (*Note that unlike SSH, HR-ER is also
trained on the FDDB dataset in a 10-Fold Cross Validation fashion.)

els, leading to an inference time of less than 50 ms/image.
We compare SSH with HR[7], HR-ER[7], Conv3D[13],
Faceness[34], Faster R-CNN(VGG-16)[24], MTCNN[37],
DP2MFD[21], and Headhunter[18]. Figures 6a and 6b
show the ROC curves with respect to the discrete and con-
tinuous measures on the FDDB dataset respectively.

It should be noted that HR-ER also uses FDDB as a train-
ing data in a 10-fold cross validation fashion. Moreover,
HR-ER and Conv3D both generate ellipses to decrease the
localization error. In contrast, SSH does not use FDDB for
training, and is evaluated on this dataset out-of-the-box by
generating bounding boxes. However, as can be seen, SSH
outperforms all other methods with respect to the discrete
score. Compare to HR, SSH improved the results by 5.6%
and 1.1% with respect to the continuous and discrete scores.
We also compare SSH with Faster R-CNN(VGG-
16)[24], HyperFace[22], Headhunter[18],
and Face-
ness[34] on the Pascal-Faces dataset. As shown in Figure
6c, SSH achieves state-of-the-art results on this dataset.

Table 2: SSH inference time with respect to different input sizes.

Max Size
Time

400 × 800
48 ms

600 × 1000
74 ms

800 × 1200
107 ms

1200 × 1600
182 ms

tion set. Timing are performed on a NVIDIA Quadro P6000
GPU. In column with max size m × M , the shortest side
of the images are resized to “m” pixels while keeping the
longest side less than “M ” pixels. As shown in section 4.3,
and 4.4, SSH outperforms HR on all datasets without an im-
age pyramid. On WIDER we resize the image to the last
column and as a result detection takes 182 ms/image. In
contrast, HR has a runtime of 1010 ms/image, more than
5X slower. As mentioned in Section 4.4, a maximum input
size of 400 × 800 is enough for SSH to achieve state-of-the-
art performance on FDDB and Pascal-Faces, with a detec-
tion time of 48 ms/image. If an image pyramid is used, the
runtime would be dominated by the largest scale.

4.5. Timing

4.6. Ablation study: Scale-invariant design

SSH performs face detection in a single stage while re-
moving all fully-connected layers from the VGG-16 net-
work. This makes SSH an efﬁcient detection algorithm.
Table 2 shows the inference time with respect to different
input sizes. We report average time on the WIDER valida-

As discussed in Section 3.2, SSH uses each of its detec-
tions modules, {Mi}3
i=1, to detect faces in a certain range
of scales from layers with different strides. To better under-
stand the impact of these design choices, we compare the
results of SSH with and without multiple detection mod-

(a) Effect of multi-scale design.

(b) Effect of OHEM.

(c) Effect of feature fusion.

(d) Effect of increasing #anchors.

Figure 7: Ablation studies. All experiments are reported on the Wider Validation set.

Table 3: The effect of input size on average precision.

Max Size
AP

600 × 1000
68.6

800 × 1200
78.4

1200 × 1600
81.4

1400 × 1800
81.0

ules. That is, we remove {M1, M3} and only detect faces
with M2 from conv5-3 in VGG-16. However, for fair com-
parison, all anchor scales in {M1, M3} are moved to M2
(i.e. we use ∪3
i=1Si in M2). Other parameters remain the
same. We refer to this simpler method as ”SSH-OnlyM2”.
As shown in Figure 7a, by removing the multiple detection
modules from SSH, the AP signiﬁcantly drops by ∼ 12.8%
on the hard subset which contains smaller faces. Although
SSH does not deploy the expensive head of its underlying
network, results suggest that having independent simple de-
tection modules from different layers of the network is an
effective strategy for scale-invariance.

4.7. Ablation study: The effect of input size

The input size can affect face detection precision, espe-
cially for small faces. Table 3 shows the AP of SSH on
the WIDER validation set when it is trained and evaluated
with different input sizes. Even at a maximum input size of
800 × 1200, SSH outperforms HR-VGG16, which up-scales
images up to 5000 pixels, by 3.5%, showing the effective-
ness of our scale-invariant design for detecting small faces.

4.8. Ablation study: The effect of OHEM

As discussed in Section 3.5, we apply hard negative and
positive mining (OHEM) to select anchors for each of our
detection modules. To show its role, we train SSH, with
and without OHEM. All other factors are the same. Figure
7b shows the results. Clearly, OHEM is important for the
success of our light-weight detection method which does
not use the pre-trained head of the VGG-16 network.

4.9. Ablation study: The effect of feature fusion

In SSH, to form the input features for detection mod-
ule M1, the outputs of conv4-3 and conv5-3 are fused to-
gether. Figure 7c, shows the effectiveness of this design
choice. Although it does not have a noticeable computa-

tional overhead, as illustrated, it improves the AP on the
WIDER validation set.

4.10. Ablation study: Selection of anchor scales

As mentioned in Section 4.1, SSH uses S1 = {1, 2},
S2 = {4, 8}, S3 = {16, 32} as anchor scale sets. Fig-
ure 7d compares SSH with its slight variant which uses
S1 = {0.25, 0.5, 1, 2, 3}, S2 = {4, 6, 8, 10, 12}, S3 =
{16, 20, 24, 28, 32}. Although using a ﬁner scale set leads
to a slower inference, it also reduces the AP due to the in-
crease in the number of False Positives.

4.11. Qualitative Results

Figure 8 shows some qualitative results on the Wider val-
idation set. The colors encode the score of the classiﬁer.
Green and blue represent score 1.0 and 0.5 respectively.

5. Conclusion

We introduced the SSH detector, a fast and lightweight
face detector that, unlike two-stage proposal/classiﬁcation
approaches, detects faces in a single stage. SSH localizes
and detects faces simultaneously from the early convolu-
tional layers in a classiﬁcation network. SSH is able to
achieve state-of-the-art results without using the “head” of
its underlying classiﬁcation network (i.e. fc layers in VGG-
16). Moreover, instead of processing an input pyramid,
SSH is designed to be scale-invariant while detecting dif-
ferent face scales in a single forward pass of the network.
SSH achieves state-of-the-art performance on the challeng-
ing WIDER dataset as well as FDDB and Pascal-Faces
while reducing the detection time considerably.

the Director of National

Acknowledgement This research is based upon work sup-
ported by the Ofﬁce of
Intelli-
gence (ODNI), Intelligence Advanced Research Projects Activity
(IARPA), via IARPA R&D Contract No. 2014-14071600012. The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the ofﬁ-
cial policies or endorsements, either expressed or implied, of the
ODNI, IARPA, or the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for Governmental
purposes notwithstanding any copyright annotation thereon.

Figure 8: Qualitative results of SSH on the validation set of the WIDER dataset. Green and blue represent a classiﬁcation
score of 1.0 and 0.5 respectively.

References

[1] S. Bell, C. Lawrence Zitnick, K. Bala, and R. Girshick.
Inside-outside net: Detecting objects in context with skip
pooling and recurrent neural networks. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2874–2883, 2016. 2

[2] D. Chen, S. Ren, Y. Wei, X. Cao, and J. Sun. Joint cascade
In European Conference on

face detection and alignment.
Computer Vision, pages 109–122. Springer, 2014. 2

[3] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-
lenge. International journal of computer vision, 88(2):303–
338, 2010. 5

[4] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 1, 5

[5] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 4

[6] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
In Proceedings of the IEEE conference on
segmentation.
computer vision and pattern recognition, pages 580–587,
2014. 2, 4

[7] P. Hu and D. Ramanan. Finding tiny faces. Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 1, 2, 3, 5, 6

[8] V. Jain and E. G. Learned-Miller. Fddb: A benchmark for
face detection in unconstrained settings. UMass Amherst
Technical Report, 2010. 5

[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[10] H. Li, G. Hua, Z. Lin, J. Brandt, and J. Yang. Probabilis-
tic elastic part model for unsupervised face detector adapta-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 793–800, 2013. 2

[11] H. Li, Z. Lin, J. Brandt, X. Shen, and G. Hua. Efﬁcient
boosted exemplar-based face detection. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1843–1850, 2014. 2

[12] H. Li, Z. Lin, X. Shen, J. Brandt, and G. Hua. A convolu-
tional neural network cascade for face detection. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5325–5334, 2015. 2

[13] Y. Li, B. Sun, T. Wu, and Y. Wang. face detection with end-
to-end integration of a convnet and a 3d model. In European
Conference on Computer Vision, pages 420–436. Springer,
2016. 6

[14] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017. 2, 3

[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-

mon objects in context. In European Conference on Com-
puter Vision, pages 740–755. Springer, 2014. 2

[16] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In European Conference on Computer Vision, pages 21–37.
Springer, 2016. 2

[17] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3431–3440, 2015. 2, 3

[18] M. Mathias, R. Benenson, M. Pedersoli, and L. Van Gool.
Face detection without bells and whistles. In European Con-
ference on Computer Vision, pages 720–735. Springer, 2014.
2, 6

[19] M. Najibi, M. Rastegari, and L. S. Davis. G-cnn: an iterative
grid based object detector. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2369–2377, 2016. 2, 3

[20] E. Ohn-Bar and M. M. Trivedi. To boost or not to boost? on
the limits of boosted trees for object detection. 23rd Interna-
tional Conference on Pattern Recognition, 2016. 5

[21] R. Ranjan, V. M. Patel, and R. Chellappa. A deep pyramid
In 7th Interna-
deformable part model for face detection.
tional Conference on Biometrics Theory, Applications and
Systems (BTAS), pages 1–8. IEEE, 2015. 6

[22] R. Ranjan, V. M. Patel, and R. Chellappa. Hyperface: A deep
multi-task learning framework for face detection, landmark
localization, pose estimation, and gender recognition. arXiv
preprint arXiv:1603.01249, 2016. 6

[23] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 779–788, 2016. 2

[24] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 1, 2, 3, 4, 6

[25] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 761–769, 2016. 5

[26] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1

[27] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 1–9, 2015. 4

[28] C. Szegedy, S. Reed, D. Erhan, D. Anguelov, and S. Ioffe.
arXiv preprint

Scalable, high-quality object detection.
arXiv:1412.1441, 2014. 2, 3

[29] P. Viola and M. Jones. Rapid object detection using a boosted
cascade of simple features. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, vol-
ume 1, pages I–I. IEEE, 2001. 1, 2

[30] J. Yan, X. Zhang, Z. Lei, and S. Z. Li.

Face detec-
Image and Vision Computing,

tion by structural models.
32(10):790–799, 2014. 5

[31] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Aggregate channel fea-
In IEEE International
tures for multi-view face detection.
Joint Conference on Biometrics (IJCB), pages 1–8. IEEE,
2014. 2

[32] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Convolutional channel
features. In Proceedings of the IEEE international confer-
ence on computer vision, pages 82–90, 2015. 2

[33] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 2

[34] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 5, 6

[35] S. Yang, P. Luo, C.-C. Loy, and X. Tang. Wider face: A
face detection benchmark. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
5525–5533, 2016. 1, 2, 5

[36] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. arXiv preprint arXiv:1604.02135, 2016. 2
[37] K. Zhang, Z. Zhang, Z. Li, and Y. Qiao. Joint face detection
and alignment using multitask cascaded convolutional net-
works. IEEE Signal Processing Letters, 23(10):1499–1503,
2016. 5, 6

[38] C. Zhu, Y. Zheng, K. Luu, and M. Savvides. Cms-rcnn: con-
textual multi-scale region-based cnn for unconstrained face
detection. pages 57–79, 2017. 2, 3, 5

[39] X. Zhu and D. Ramanan. Face detection, pose estimation,
and landmark localization in the wild. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2879–2886. IEEE, 2012. 2

SSH: Single Stage Headless Face Detector

Mahyar Najibi*

Pouya Samangouei* Rama Chellappa
University of Maryland

Larry S. Davis

najibi@cs.umd.edu

{pouya,rama,lsd}@umiacs.umd.edu

7
1
0
2
 
t
c
O
 
8
1
 
 
]

V
C
.
s
c
[
 
 
3
v
9
7
9
3
0
.
8
0
7
1
:
v
i
X
r
a

Abstract

We introduce the Single Stage Headless (SSH) face de-
tector. Unlike two stage proposal-classiﬁcation detectors,
SSH detects faces in a single stage directly from the early
convolutional layers in a classiﬁcation network. SSH is
headless. That is, it is able to achieve state-of-the-art re-
sults while removing the “head” of its underlying classiﬁca-
tion network – i.e. all fully connected layers in the VGG-16
which contains a large number of parameters. Addition-
ally, instead of relying on an image pyramid to detect faces
with various scales, SSH is scale-invariant by design. We
simultaneously detect faces with different scales in a sin-
gle forward pass of the network, but from different layers.
These properties make SSH fast and light-weight. Surpris-
ingly, with a headless VGG-16, SSH beats the ResNet-101-
based state-of-the-art on the WIDER dataset. Even though,
unlike the current state-of-the-art, SSH does not use an im-
age pyramid and is 5X faster. Moreover, if an image pyra-
mid is deployed, our light-weight network achieves state-
of-the-art on all subsets of the WIDER dataset, improv-
ing the AP by 2.5%. SSH also reaches state-of-the-art re-
sults on the FDDB and Pascal-Faces datasets while using a
small input size, leading to a runtime of 50 ms/image on a
GPU. The code is available at https://github.com/
mahyarnajibi/SSH.

1. Introduction

Face detection is a crucial step in various problems in-
volving veriﬁcation, identiﬁcation, expression analysis, etc.
From the Viola-Jones [29] detector to recent work by Hu
et al. [7], the performance of face detectors has been im-
proved dramatically. However, detecting small faces is still
considered a challenging task. The recent introduction of
the WIDER face dataset [35], containing a large number
of small faces, exposed the performance gap between hu-
mans and current face detectors. The problem becomes
more challenging when the speed and memory efﬁciency
of the detectors are taken into account. The best perform-

*Authors contributed equally

Figure 1: SSH detects various face sizes in a single CNN
forward pass and without employing an image pyramid in
∼ 0.1 second for an image with size 800 × 1200 on a GPU.

ing face detectors are usually slow and have high memory
foot-prints (e.g. [7] takes more than 1 second to process an
image, see Section 4.5) partly due to the huge number of
parameters as well as the way robustness to scale or incor-
poration of context are addressed.

State-of-the-art CNN-based detectors convert

image
classiﬁcation networks into two-stage detection systems
[4, 24]. In the ﬁrst stage, early convolutional feature maps
are used to propose a set of candidate object boxes. In the
second stage, the remaining layers of the classiﬁcation net-
works (e.g. fc6~8 in VGG-16 [26]), which we refer to as the
network “head”, are deployed to extract local features for
these candidates and classify them. The head in the classiﬁ-
cation networks can be computationally expensive (e.g. the
network head contains ∼ 120M parameters in VGG-16 and
∼ 12M parameters in ResNet-101). Moreover, in the two
stage detectors, the computation must be performed for all
proposed candidate boxes.

Very recently, Hu et al. [7] showed state-of-the-art re-
sults on the WIDER face detection benchmark by using a
similar approach to the Region Proposal Networks (RPN)
[24] to directly detect faces. Robustness to input scale is
achieved by introducing an image pyramid as an integral

part of the method. However, it involves processing an in-
put pyramid with an up-sampling scale up to 5000 pixels per
side and passing each level to a very deep network which
increased inference time.

In this paper, we introduce the Single Stage Headless
(SSH) face detector. SSH performs detection in a single
stage. Like RPN [24], the early feature maps in a classiﬁ-
cation network are used to regress a set of predeﬁned an-
chors towards faces. However, unlike two-stage detectors,
the ﬁnal classiﬁcation takes place together with regressing
the anchors. SSH is headless. It is able to achieve state-
of-the-art results while removing the head of its underlying
network (i.e. all fully connected layers in VGG-16), leading
to a light-weight detector. Finally, SSH is scale-invariant
by design.
Instead of relying on an external multi-scale
pyramid as input, inspired by [14], SSH detects faces from
various depths of the underlying network. This is achieved
by placing an efﬁcient convolutional detection module on
top of the layers with different strides, each of which is
trained for an appropriate range of face scales. Surpris-
ingly, SSH based on a headless VGG-16, not only outper-
forms the best-reported VGG-16 by a large margin but also
beats the current ResNet-101-based state-of-the-art method
on the WIDER face detection dataset. Unlike the current
state-of-the-art, SSH does not deploy an input pyramid and
If an input pyramid is used with SSH
is 5 times faster.
as well, our light-weight VGG-16-based detector outper-
forms the best reported ResNet-101 [7] on all three subsets
of the WIDER dataset and improves the mean average pre-
cision by 4% and 2.5% on the validation and the test set
respectively. SSH also achieves state-of-the-art results on
the FDDB and Pascal-Faces datasets with a relatively small
input size, leading to a runtime of 50 ms/image.

The rest of the paper is organized as follows. Section 2
provides an overview of the related works. Section 3 intro-
duces the proposed method. Section 4 presents the experi-
ments and Section 5 concludes the paper.

2. Related Works

2.1. Face Detection

Prior to the re-emergence of convolutional neural net-
works (CNN), different machine learning algorithms were
developed to improve face detection performance [29, 39,
10, 11, 18, 2, 31]. However, following the success of these
networks in classiﬁcation tasks [9], they were applied to
detection as well [6]. Face detectors based on CNNs sig-
niﬁcantly closed the performance gap between human and
artiﬁcial detectors [12, 33, 32, 38, 7]. However, the intro-
duction of the challenging WIDER dataset [35], containing
a large number of small faces, re-highlighted this gap. To
improve performance, CMS-RCNN [38] changed the Faster
R-CNN object detector [24] to incorporate context informa-

tion. Very recently, Hu et al. proposed a face detection
method based on proposal networks which achieves state-
of-the-art results on this dataset [7]. However, in addition
to skip connections, an input pyramid is processed by re-
scaling the image to different sizes, leading to slow detec-
In contrast, SSH is able to process multiple
tion speeds.
face scales simultaneously in a single forward pass of the
network, which reduces inference time noticeably.

2.2. Single Stage Detectors and Proposal Networks

The idea of detecting and localizing objects in a single
stage has been previously studied for general object detec-
tion. SSD [16] and YOLO [23] perform detection and classi-
ﬁcation simultaneously by classifying a ﬁxed grid of boxes
and regressing them towards objects. G-CNN [19] mod-
els detection as a piece-wise regression problem and itera-
tively pushes an initial multi-scale grid of boxes towards ob-
jects while classifying them. However, current state-of-the-
art methods on the challenging MS-COCO object detection
benchmark are based on two-stage detectors[15]. SSH is a
single stage detector; it detects faces directly from the early
convolutional layers without requiring a proposal stage.

Although SSH is a detector, it is more similar to the ob-
ject proposal algorithms which are used as the ﬁrst stage in
detection pipelines. These algorithms generally regress a
ﬁxed set of anchors towards objects and assign an object-
ness score to each of them. MultiBox [28] deploys cluster-
ing to deﬁne anchors. RPN [24], on the other hand, deﬁnes
anchors as a dense grid of boxes with various scales and as-
pect ratios, centered at every location in the input feature
map. SSH uses similar strategies, but to localize and at the
same time detect, faces.

2.3. Scale Invariance and Context Modeling

Being scale invariant is important for detecting faces in
unconstrained settings. For generic object detection, [1, 36]
deploy feature maps of earlier convolutional layers to de-
tect small objects. Recently, [14] used skip connections
in the same way as [17] and employed multiple shared
RPN and classiﬁer heads from different convolutional lay-
ers. For face detection, CMS-RCNN [38] used the same
idea as [1, 36] and added skip connections to the Faster
RCNN [24]. [7] creates a pyramid of images and processes
each separately to detect faces of different sizes. In con-
trast, SSH is capable of detecting faces at different scales
in a single forward pass of the network without creating an
image pyramid. We employ skip connections in a similar
fashion as [17, 14], and train three detection modules jointly
from the convolutional layers with different strides to detect
small, medium, and large faces.

In two stage object detectors, context is usually modeled
by enlarging the window around proposals [36]. [1] mod-
els context by deploying a recurrent neural network. For

face detection, CMS-RCNN [38] utilizes a larger window
with the cost of duplicating the classiﬁcation head. This in-
creases the memory requirement as well as detection time.
SSH uses simple convolutional layers to achieve the same
larger window effect, leading to more efﬁcient context mod-
eling.

3. Proposed Method

SSH is designed to decrease inference time, have a low
memory foot-print, and be scale-invariant. SSH is a single-
stage detector; i.e. instead of dividing the detection task into
bounding box proposal and classiﬁcation, it performs clas-
siﬁcation together with localization from the global infor-
mation extracted from the convolutional layers. We empiri-
cally show that in this way, SSH can remove the “head” of
its underlying network while achieving state-of-the-art face
detection accuracy. Moreover, SSH is scale-invariant by de-
sign and can incorporate context efﬁciently.

3.1. General Architecture

Figure 2 shows the general architecture of SSH. It is a
fully convolutional network which localizes and classiﬁes
faces early on by adding a detection module on top of fea-
ture maps with strides of 8, 16, and 32, depicted as M1,
M2, and M3 respectively. The detection module consists
of a convolutional binary classiﬁer and a regressor for de-
tecting faces and localizing them respectively.

To solve the localization sub-problem, as in [28, 24, 19],
SSH regresses a set of predeﬁned bounding boxes called an-
chors, to the ground-truth faces. We employ a similar strat-
egy to the RPN [24] to form the anchor set. We deﬁne the
anchors in a dense overlapping sliding window fashion. At
each sliding window location, K anchors are deﬁned which
have the same center as that window and different scales.
However, unlike RPN, we only consider anchors with as-
pect ratio of one to reduce the number of anchor boxes. We
noticed in our experiments that having various aspect ratios
does not have a noticeable impact on face detection preci-
sion. More formally, if the feature map connected to the
detection module Mi has a size of Wi × Hi, there would
be Wi × Hi × Ki anchors with aspect ratio one and scales
{S1

i , S2
For the detection module, a set of convolutional layers
are deployed to extract features for face detection and lo-
calization as depicted in Figure 3. This includes a simple
context module to increase the effective receptive ﬁeld as
discussed in section 3.3. The number of output channels
of the context module, (i.e. “X” in Figures 3 and 4) is set
to 128 for detection module M1 and 256 for modules M2
and M3. Finally, two convolutional layers perform bound-
ing box regression and classiﬁcation. At each convolution
location in Mi, the classiﬁer decides whether the windows
at the ﬁlter’s center and corresponding to each of the scales

i , . . . SKi

i }.

i }K

{Sk
k=1 contains a face. A 1 × 1 convolutional layer with
2 × K output channels is used as the classiﬁer. For the re-
gressor branch, another 1×1 convolutional layer with 4×K
output channels is deployed. At each location during the
convolution, the regressor predicts the required change in
scale and translation to match each of the positive anchors
to faces.

3.2. Scale-Invariance Design

In unconstrained settings, faces in images have varying
scales. Although forming a multi-scale input pyramid and
performing several forward passes during inference, as in
[7], makes it possible to detect faces with different scales, it
is slow. In contrast, SSH detects large and small faces simul-
taneously in a single forward pass of the network. Inspired
by [14], we detect faces from three different convolutional
layers of our network using detection modules M1, M2,
and M3. These modules have strides of 8, 16, and 32 and
are designed to detect small, medium, and large faces re-
spectively.

More precisely, the detection module M2 performs de-
tection from the conv5-3 layer in VGG-16. Although it is
possible to place the detection module M1 directly on top
of conv4-3, we use the feature map fusion which was previ-
ously deployed for semantic segmentation [17], and generic
object detection [14]. However, to decrease the memory
consumption of the model, the number of channels in the
feature map is reduced from 512 to 128 using 1 × 1 con-
volutions. The conv5-3 feature maps are up-sampled and
summed up with the conv4-3 features, followed by a 3 × 3
convolutional layer. We used bilinear up-sampling in the
fusion process. For detecting larger faces, a max-pooling
layer with stride of 2 is added on top of the conv5-3 layer
to increase its stride to 32. The detection module M3 is
placed on top of this newly added layer.

During the training phase, each detection module Mi
is trained to detect faces from a target scale range as dis-
cussed in 3.4. During inference, the predicted boxes from
the different scales are joined together followed by Non-
Maximum Suppression (NMS) to form the ﬁnal detections.

3.3. Context Module

In two-stage detectors, it is common to incorporate con-
text by enlarging the window around the candidate propos-
als. SSH mimics this strategy by means of simple convo-
lutional layers. Figure 4 shows the context layers which
are integrated into the detection modules. Since anchors are
classiﬁed and regressed in a convolutional manner, applying
a larger ﬁlter resembles increasing the window size around
proposals in a two-stage detector. To this end, we use 5 × 5
and 7 × 7 ﬁlters in our context module. Modeling the con-
text in this way increases the receptive ﬁeld proportional to
the stride of the corresponding layer and as a result the tar-

Figure 2: The network architecture of SSH.

Figure 3: SSH detection module.

Figure 4: SSH context module.

3.4.1 Loss function

get scale of each detection module. To reduce the number
of parameters, we use a similar approach as [27] and deploy
sequential 3×3 ﬁlters instead of larger convolutional ﬁlters.
The number of output channels of the detection module (i.e.
“X” in Figure 4) is set to 128 for M1 and 256 for modules
M2 and M3. It should be noted that our detection mod-
ule together with its context ﬁlters uses fewer of parameters
compared to the module deployed for proposal generation
in [24]. Although, more efﬁcient, we empirically found that
the context module improves the mean average precision on
the WIDER validation dataset by more than half a percent.

3.4. Training

We use stochastic gradient descent with momentum and
weight decay for training the network. As discussed in sec-
tion 3.2, we place three detection modules on layers with
different strides to detect faces with different scales. Con-
sequently, our network has three multi-task losses for the
classiﬁcation and regression branches in each of these mod-
ules as discussed in Section 3.4.1. To specialize each of
the three detection modules for a speciﬁc range of scales,

we only back-propagate the loss for the anchors which are
assigned to faces in the corresponding range. This is im-
plemented by distributing the anchors based on their size
to these three modules (i.e. smaller anchors are assigned to
M1 compared to M2, and M3). An anchor is assigned to
a ground-truth face if and only if it has a higher IoU than
0.5. This is in contrast to the methods based on Faster R-
CNN which assign to each ground-truth at least one anchor
with the highest IoU. Thus, we do not back-propagate the
loss through the network for ground-truth faces inconsistent
with the anchor sizes of a module.

SSH has a multi-task loss. This loss can be formulated as
follows:

(cid:88)

(cid:88)

1
N c
k

k

i∈Ak

(cid:96)c(pi, gi)+

(cid:88)

(cid:88)

λ

1
N r
k

k

i∈Ak

I(gi = 1)(cid:96)r(bi, ti)

(1)

where (cid:96)c is the face classiﬁcation loss. We use standard
multinomial logistic loss as (cid:96)c. The index k goes over the
SSH detection modules M = {Mk}K
1 and Ak represents
the set of anchors deﬁned in Mk. The predicted category
for the i’th anchor in Mk and its assigned ground-truth la-
bel are denoted as pi and gi respectively. As discussed in
Section 3.2, an anchor is assigned to a ground-truth bound-
ing box if and only if it has an IoU greater than a threshold
(i.e. 0.5). As in [24], negative labels are assigned to anchors
with IoU less than a predeﬁned threshold (i.e. 0.3) with any
ground-truth bounding box. N c
k is the number of anchors
in module Mk which participate in the classiﬁcation loss
computation.

(cid:96)r represents the bounding box regression loss. Fol-
lowing [6, 5, 24], we parameterize the regression space

with a log-space shift in the box dimensions and a scale-
invariant translation and use smooth (cid:96)1 loss as (cid:96)r. In this
parametrized space, pi represents the predicted four di-
mensional translation and scale shift and ti is its assigned
ground-truth regression target for the i’th anchor in mod-
ule Mk. I(.) is the indicator function that limits the re-
gression loss only to the positively assigned anchors, and
N r

I(gi = 1).

k = (cid:80)

i∈Ak

3.5. Online hard negative and positive mining

We use online negative and positive mining (OHEM) for
training SSH as described in [25]. However, OHEM is ap-
plied to each of the detection modules (Mk) separately.
That is, for each module Mk, we select the negative an-
chors with the highest scores and the positive anchors with
the lowest scores with respect to the weights of the net-
work at that iteration to form our mini-batch. Also, since
the number of negative anchors is more than the positives,
following [4], 25% of the mini-batch is reserved for the pos-
itive anchors. As empirically shown in Section 4.8, OHEM
has an important role in the success of SSH which removes
the fully connected layers out of the VGG-16 network.

4. Experiments

4.1. Experimental Setup

All models are trained on 4 GPUs in parallel using
stochastic gradient descent. We use a mini-batch of 4
images. Our networks are ﬁne-tuned for 21K iterations
starting from a pre-trained ImageNet classiﬁcation network.
Following [4], we ﬁx the initial convolutions up to conv3-1.
The learning rate is initially set to 0.004 and drops by a fac-
tor of 10 after 18K iterations. We set momentum to 0.9, and
weight decay to 5e−4. Anchors with IoU> 0.5 are assigned
to positive class and anchors which have an IoU< 0.3 with
all ground-truth faces are assigned to the background class.
For anchor generation, we use scales {1, 2} in M1, {4, 8}
in M2, and {16, 32} in M3 with a base anchor size of 16
pixels. All anchors have aspect ratio of one. During train-
ing, 256 detections per module is selected for each image.
During inference, each module outputs 1000 best scoring
anchors as detections and NMS with a threshold of 0.3 is
performed on the outputs of all modules together.

4.2. Datasets

WIDER dataset[35]: This dataset contains 32, 203 im-
ages with 393, 703 annotated faces, 158, 989 of which are
in the train set, 39, 496 in the validation set and the rest are
in the test set. The validation and test set are divided into
“easy”, “medium”, and “hard” subsets cumulatively (i.e. the
“hard” set contains all images). This is one of the most chal-
lenging public face datasets mainly due to the wide variety
of face scales and occlusion. We train all models on the

Table 1: Comparison of SSH with top performing methods on the
validation set of the WIDER dataset.

Method
CMS-RCNN [38]
HR(VGG-16)+Pyramid [7]
HR(ResNet-101)+Pyramid [7]
SSH(VGG-16)
SSH(VGG-16)+Pyramid

easy medium hard
62.9
87.4
89.9
74.9
84.4
86.2
80.6
91.0
92.5
81.4
90.7
91.9
84.5
92.1
93.1

train set of the WIDER dataset and evaluate on the valida-
tion and test sets. Ablation studies are performed on the the
validation set (i.e. “hard” subset).

FDDB[8]: FDDB contains 2845 images and 5171 anno-

tated faces. We use this dataset only for testing.

Pascal Faces[30]: Pascal Faces is a subset of the Pascal
VOC dataset [3] and contains 851 images annotated for face
detection. We use this dataset only to evaluate our method.

4.3. WIDER Dataset Result

We compare SSH with HR [7], CMS-RCNN [38], Mul-
titask Cascade CNN [37], LDCF [20], Faceness [34], and
Multiscale Cascade CNN [35]. When reporting SSH with-
out an image pyramid, we rescale the shortest side of
the image up to 1200 pixels while keeping the largest
side below 1600 pixels without changing the aspect ratio.
SSH+Pyramid is our method when we apply SSH to a pyra-
mid of input images. Like HR, a four level image pyramid
is deployed. To form the pyramid, the image is ﬁrst scaled
to have a shortest side of up to 800 pixels and the longest
side less than 1200 pixels. Then, we scale the image to have
min sizes of 500, 800, 1200, and 1600 pixels in the pyramid.
All modules detect faces on all pyramid levels, except M3
which is not applied to the largest level.

Table 1 compares SSH with best performing methods on
the WIDER validation set. SSH without using an image
pyramid and based on the VGG-16 network outperforms
the VGG-16 version of HR by 5.7%, 6.3%, and 6.5% in
“easy”, “medium”, and “hard” subsets respectively. Sur-
prisingly, SSH also outperforms HR based on ResNet-101
on the whole dataset (i.e. “hard” subset) by 0.8.
In con-
trast HR deploys an image pyramid. Using an image pyra-
mid, SSH based on a light VGG-16 model, outperforms the
ResNet-101 version of HR by a large margin, increasing the
state-of-the-art on this dataset by ∼ 4%.

The precision-recall curves on the test set is presented in
Figure 5. We submitted the detections of SSH with an im-
age pyramid only once for evaluation. As can be seen, SSH
based on a headless VGG-16, outperforms the prior meth-
ods on all subsets, increasing the state-of-the-art by 2.5%.

4.4. FDDB and Pascal Faces Results

In these datasets, we resize the shortest side of the input
to 400 pixels while keeping the larger side less than 800 pix-

(a) Easy

(b) Medium

(c) Hard

Figure 5: Comparison among the methods on the test set of WIDER face detection benchmark.

(a) FDDB discrete score.

(b) FDDB continuous score.

(c) Pascal-Faces.

Figure 6: Comparison among the methods on FDDB and Pascal-Faces datasets. (*Note that unlike SSH, HR-ER is also
trained on the FDDB dataset in a 10-Fold Cross Validation fashion.)

els, leading to an inference time of less than 50 ms/image.
We compare SSH with HR[7], HR-ER[7], Conv3D[13],
Faceness[34], Faster R-CNN(VGG-16)[24], MTCNN[37],
DP2MFD[21], and Headhunter[18]. Figures 6a and 6b
show the ROC curves with respect to the discrete and con-
tinuous measures on the FDDB dataset respectively.

It should be noted that HR-ER also uses FDDB as a train-
ing data in a 10-fold cross validation fashion. Moreover,
HR-ER and Conv3D both generate ellipses to decrease the
localization error. In contrast, SSH does not use FDDB for
training, and is evaluated on this dataset out-of-the-box by
generating bounding boxes. However, as can be seen, SSH
outperforms all other methods with respect to the discrete
score. Compare to HR, SSH improved the results by 5.6%
and 1.1% with respect to the continuous and discrete scores.
We also compare SSH with Faster R-CNN(VGG-
16)[24], HyperFace[22], Headhunter[18],
and Face-
ness[34] on the Pascal-Faces dataset. As shown in Figure
6c, SSH achieves state-of-the-art results on this dataset.

Table 2: SSH inference time with respect to different input sizes.

Max Size
Time

400 × 800
48 ms

600 × 1000
74 ms

800 × 1200
107 ms

1200 × 1600
182 ms

tion set. Timing are performed on a NVIDIA Quadro P6000
GPU. In column with max size m × M , the shortest side
of the images are resized to “m” pixels while keeping the
longest side less than “M ” pixels. As shown in section 4.3,
and 4.4, SSH outperforms HR on all datasets without an im-
age pyramid. On WIDER we resize the image to the last
column and as a result detection takes 182 ms/image. In
contrast, HR has a runtime of 1010 ms/image, more than
5X slower. As mentioned in Section 4.4, a maximum input
size of 400 × 800 is enough for SSH to achieve state-of-the-
art performance on FDDB and Pascal-Faces, with a detec-
tion time of 48 ms/image. If an image pyramid is used, the
runtime would be dominated by the largest scale.

4.5. Timing

4.6. Ablation study: Scale-invariant design

SSH performs face detection in a single stage while re-
moving all fully-connected layers from the VGG-16 net-
work. This makes SSH an efﬁcient detection algorithm.
Table 2 shows the inference time with respect to different
input sizes. We report average time on the WIDER valida-

As discussed in Section 3.2, SSH uses each of its detec-
tions modules, {Mi}3
i=1, to detect faces in a certain range
of scales from layers with different strides. To better under-
stand the impact of these design choices, we compare the
results of SSH with and without multiple detection mod-

(a) Effect of multi-scale design.

(b) Effect of OHEM.

(c) Effect of feature fusion.

(d) Effect of increasing #anchors.

Figure 7: Ablation studies. All experiments are reported on the Wider Validation set.

Table 3: The effect of input size on average precision.

Max Size
AP

600 × 1000
68.6

800 × 1200
78.4

1200 × 1600
81.4

1400 × 1800
81.0

ules. That is, we remove {M1, M3} and only detect faces
with M2 from conv5-3 in VGG-16. However, for fair com-
parison, all anchor scales in {M1, M3} are moved to M2
(i.e. we use ∪3
i=1Si in M2). Other parameters remain the
same. We refer to this simpler method as ”SSH-OnlyM2”.
As shown in Figure 7a, by removing the multiple detection
modules from SSH, the AP signiﬁcantly drops by ∼ 12.8%
on the hard subset which contains smaller faces. Although
SSH does not deploy the expensive head of its underlying
network, results suggest that having independent simple de-
tection modules from different layers of the network is an
effective strategy for scale-invariance.

4.7. Ablation study: The effect of input size

The input size can affect face detection precision, espe-
cially for small faces. Table 3 shows the AP of SSH on
the WIDER validation set when it is trained and evaluated
with different input sizes. Even at a maximum input size of
800 × 1200, SSH outperforms HR-VGG16, which up-scales
images up to 5000 pixels, by 3.5%, showing the effective-
ness of our scale-invariant design for detecting small faces.

4.8. Ablation study: The effect of OHEM

As discussed in Section 3.5, we apply hard negative and
positive mining (OHEM) to select anchors for each of our
detection modules. To show its role, we train SSH, with
and without OHEM. All other factors are the same. Figure
7b shows the results. Clearly, OHEM is important for the
success of our light-weight detection method which does
not use the pre-trained head of the VGG-16 network.

4.9. Ablation study: The effect of feature fusion

In SSH, to form the input features for detection mod-
ule M1, the outputs of conv4-3 and conv5-3 are fused to-
gether. Figure 7c, shows the effectiveness of this design
choice. Although it does not have a noticeable computa-

tional overhead, as illustrated, it improves the AP on the
WIDER validation set.

4.10. Ablation study: Selection of anchor scales

As mentioned in Section 4.1, SSH uses S1 = {1, 2},
S2 = {4, 8}, S3 = {16, 32} as anchor scale sets. Fig-
ure 7d compares SSH with its slight variant which uses
S1 = {0.25, 0.5, 1, 2, 3}, S2 = {4, 6, 8, 10, 12}, S3 =
{16, 20, 24, 28, 32}. Although using a ﬁner scale set leads
to a slower inference, it also reduces the AP due to the in-
crease in the number of False Positives.

4.11. Qualitative Results

Figure 8 shows some qualitative results on the Wider val-
idation set. The colors encode the score of the classiﬁer.
Green and blue represent score 1.0 and 0.5 respectively.

5. Conclusion

We introduced the SSH detector, a fast and lightweight
face detector that, unlike two-stage proposal/classiﬁcation
approaches, detects faces in a single stage. SSH localizes
and detects faces simultaneously from the early convolu-
tional layers in a classiﬁcation network. SSH is able to
achieve state-of-the-art results without using the “head” of
its underlying classiﬁcation network (i.e. fc layers in VGG-
16). Moreover, instead of processing an input pyramid,
SSH is designed to be scale-invariant while detecting dif-
ferent face scales in a single forward pass of the network.
SSH achieves state-of-the-art performance on the challeng-
ing WIDER dataset as well as FDDB and Pascal-Faces
while reducing the detection time considerably.

the Director of National

Acknowledgement This research is based upon work sup-
ported by the Ofﬁce of
Intelli-
gence (ODNI), Intelligence Advanced Research Projects Activity
(IARPA), via IARPA R&D Contract No. 2014-14071600012. The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the ofﬁ-
cial policies or endorsements, either expressed or implied, of the
ODNI, IARPA, or the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for Governmental
purposes notwithstanding any copyright annotation thereon.

Figure 8: Qualitative results of SSH on the validation set of the WIDER dataset. Green and blue represent a classiﬁcation
score of 1.0 and 0.5 respectively.

References

[1] S. Bell, C. Lawrence Zitnick, K. Bala, and R. Girshick.
Inside-outside net: Detecting objects in context with skip
pooling and recurrent neural networks. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2874–2883, 2016. 2

[2] D. Chen, S. Ren, Y. Wei, X. Cao, and J. Sun. Joint cascade
In European Conference on

face detection and alignment.
Computer Vision, pages 109–122. Springer, 2014. 2

[3] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-
lenge. International journal of computer vision, 88(2):303–
338, 2010. 5

[4] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 1, 5

[5] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 4

[6] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
In Proceedings of the IEEE conference on
segmentation.
computer vision and pattern recognition, pages 580–587,
2014. 2, 4

[7] P. Hu and D. Ramanan. Finding tiny faces. Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 1, 2, 3, 5, 6

[8] V. Jain and E. G. Learned-Miller. Fddb: A benchmark for
face detection in unconstrained settings. UMass Amherst
Technical Report, 2010. 5

[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[10] H. Li, G. Hua, Z. Lin, J. Brandt, and J. Yang. Probabilis-
tic elastic part model for unsupervised face detector adapta-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 793–800, 2013. 2

[11] H. Li, Z. Lin, J. Brandt, X. Shen, and G. Hua. Efﬁcient
boosted exemplar-based face detection. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1843–1850, 2014. 2

[12] H. Li, Z. Lin, X. Shen, J. Brandt, and G. Hua. A convolu-
tional neural network cascade for face detection. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5325–5334, 2015. 2

[13] Y. Li, B. Sun, T. Wu, and Y. Wang. face detection with end-
to-end integration of a convnet and a 3d model. In European
Conference on Computer Vision, pages 420–436. Springer,
2016. 6

[14] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017. 2, 3

[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-

mon objects in context. In European Conference on Com-
puter Vision, pages 740–755. Springer, 2014. 2

[16] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In European Conference on Computer Vision, pages 21–37.
Springer, 2016. 2

[17] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3431–3440, 2015. 2, 3

[18] M. Mathias, R. Benenson, M. Pedersoli, and L. Van Gool.
Face detection without bells and whistles. In European Con-
ference on Computer Vision, pages 720–735. Springer, 2014.
2, 6

[19] M. Najibi, M. Rastegari, and L. S. Davis. G-cnn: an iterative
grid based object detector. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2369–2377, 2016. 2, 3

[20] E. Ohn-Bar and M. M. Trivedi. To boost or not to boost? on
the limits of boosted trees for object detection. 23rd Interna-
tional Conference on Pattern Recognition, 2016. 5

[21] R. Ranjan, V. M. Patel, and R. Chellappa. A deep pyramid
In 7th Interna-
deformable part model for face detection.
tional Conference on Biometrics Theory, Applications and
Systems (BTAS), pages 1–8. IEEE, 2015. 6

[22] R. Ranjan, V. M. Patel, and R. Chellappa. Hyperface: A deep
multi-task learning framework for face detection, landmark
localization, pose estimation, and gender recognition. arXiv
preprint arXiv:1603.01249, 2016. 6

[23] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 779–788, 2016. 2

[24] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 1, 2, 3, 4, 6

[25] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 761–769, 2016. 5

[26] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1

[27] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 1–9, 2015. 4

[28] C. Szegedy, S. Reed, D. Erhan, D. Anguelov, and S. Ioffe.
arXiv preprint

Scalable, high-quality object detection.
arXiv:1412.1441, 2014. 2, 3

[29] P. Viola and M. Jones. Rapid object detection using a boosted
cascade of simple features. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, vol-
ume 1, pages I–I. IEEE, 2001. 1, 2

[30] J. Yan, X. Zhang, Z. Lei, and S. Z. Li.

Face detec-
Image and Vision Computing,

tion by structural models.
32(10):790–799, 2014. 5

[31] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Aggregate channel fea-
In IEEE International
tures for multi-view face detection.
Joint Conference on Biometrics (IJCB), pages 1–8. IEEE,
2014. 2

[32] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Convolutional channel
features. In Proceedings of the IEEE international confer-
ence on computer vision, pages 82–90, 2015. 2

[33] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 2

[34] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 5, 6

[35] S. Yang, P. Luo, C.-C. Loy, and X. Tang. Wider face: A
face detection benchmark. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
5525–5533, 2016. 1, 2, 5

[36] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. arXiv preprint arXiv:1604.02135, 2016. 2
[37] K. Zhang, Z. Zhang, Z. Li, and Y. Qiao. Joint face detection
and alignment using multitask cascaded convolutional net-
works. IEEE Signal Processing Letters, 23(10):1499–1503,
2016. 5, 6

[38] C. Zhu, Y. Zheng, K. Luu, and M. Savvides. Cms-rcnn: con-
textual multi-scale region-based cnn for unconstrained face
detection. pages 57–79, 2017. 2, 3, 5

[39] X. Zhu and D. Ramanan. Face detection, pose estimation,
and landmark localization in the wild. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2879–2886. IEEE, 2012. 2

SSH: Single Stage Headless Face Detector

Mahyar Najibi*

Pouya Samangouei* Rama Chellappa
University of Maryland

Larry S. Davis

najibi@cs.umd.edu

{pouya,rama,lsd}@umiacs.umd.edu

7
1
0
2
 
t
c
O
 
8
1
 
 
]

V
C
.
s
c
[
 
 
3
v
9
7
9
3
0
.
8
0
7
1
:
v
i
X
r
a

Abstract

We introduce the Single Stage Headless (SSH) face de-
tector. Unlike two stage proposal-classiﬁcation detectors,
SSH detects faces in a single stage directly from the early
convolutional layers in a classiﬁcation network. SSH is
headless. That is, it is able to achieve state-of-the-art re-
sults while removing the “head” of its underlying classiﬁca-
tion network – i.e. all fully connected layers in the VGG-16
which contains a large number of parameters. Addition-
ally, instead of relying on an image pyramid to detect faces
with various scales, SSH is scale-invariant by design. We
simultaneously detect faces with different scales in a sin-
gle forward pass of the network, but from different layers.
These properties make SSH fast and light-weight. Surpris-
ingly, with a headless VGG-16, SSH beats the ResNet-101-
based state-of-the-art on the WIDER dataset. Even though,
unlike the current state-of-the-art, SSH does not use an im-
age pyramid and is 5X faster. Moreover, if an image pyra-
mid is deployed, our light-weight network achieves state-
of-the-art on all subsets of the WIDER dataset, improv-
ing the AP by 2.5%. SSH also reaches state-of-the-art re-
sults on the FDDB and Pascal-Faces datasets while using a
small input size, leading to a runtime of 50 ms/image on a
GPU. The code is available at https://github.com/
mahyarnajibi/SSH.

1. Introduction

Face detection is a crucial step in various problems in-
volving veriﬁcation, identiﬁcation, expression analysis, etc.
From the Viola-Jones [29] detector to recent work by Hu
et al. [7], the performance of face detectors has been im-
proved dramatically. However, detecting small faces is still
considered a challenging task. The recent introduction of
the WIDER face dataset [35], containing a large number
of small faces, exposed the performance gap between hu-
mans and current face detectors. The problem becomes
more challenging when the speed and memory efﬁciency
of the detectors are taken into account. The best perform-

*Authors contributed equally

Figure 1: SSH detects various face sizes in a single CNN
forward pass and without employing an image pyramid in
∼ 0.1 second for an image with size 800 × 1200 on a GPU.

ing face detectors are usually slow and have high memory
foot-prints (e.g. [7] takes more than 1 second to process an
image, see Section 4.5) partly due to the huge number of
parameters as well as the way robustness to scale or incor-
poration of context are addressed.

State-of-the-art CNN-based detectors convert

image
classiﬁcation networks into two-stage detection systems
[4, 24]. In the ﬁrst stage, early convolutional feature maps
are used to propose a set of candidate object boxes. In the
second stage, the remaining layers of the classiﬁcation net-
works (e.g. fc6~8 in VGG-16 [26]), which we refer to as the
network “head”, are deployed to extract local features for
these candidates and classify them. The head in the classiﬁ-
cation networks can be computationally expensive (e.g. the
network head contains ∼ 120M parameters in VGG-16 and
∼ 12M parameters in ResNet-101). Moreover, in the two
stage detectors, the computation must be performed for all
proposed candidate boxes.

Very recently, Hu et al. [7] showed state-of-the-art re-
sults on the WIDER face detection benchmark by using a
similar approach to the Region Proposal Networks (RPN)
[24] to directly detect faces. Robustness to input scale is
achieved by introducing an image pyramid as an integral

part of the method. However, it involves processing an in-
put pyramid with an up-sampling scale up to 5000 pixels per
side and passing each level to a very deep network which
increased inference time.

In this paper, we introduce the Single Stage Headless
(SSH) face detector. SSH performs detection in a single
stage. Like RPN [24], the early feature maps in a classiﬁ-
cation network are used to regress a set of predeﬁned an-
chors towards faces. However, unlike two-stage detectors,
the ﬁnal classiﬁcation takes place together with regressing
the anchors. SSH is headless. It is able to achieve state-
of-the-art results while removing the head of its underlying
network (i.e. all fully connected layers in VGG-16), leading
to a light-weight detector. Finally, SSH is scale-invariant
by design.
Instead of relying on an external multi-scale
pyramid as input, inspired by [14], SSH detects faces from
various depths of the underlying network. This is achieved
by placing an efﬁcient convolutional detection module on
top of the layers with different strides, each of which is
trained for an appropriate range of face scales. Surpris-
ingly, SSH based on a headless VGG-16, not only outper-
forms the best-reported VGG-16 by a large margin but also
beats the current ResNet-101-based state-of-the-art method
on the WIDER face detection dataset. Unlike the current
state-of-the-art, SSH does not deploy an input pyramid and
If an input pyramid is used with SSH
is 5 times faster.
as well, our light-weight VGG-16-based detector outper-
forms the best reported ResNet-101 [7] on all three subsets
of the WIDER dataset and improves the mean average pre-
cision by 4% and 2.5% on the validation and the test set
respectively. SSH also achieves state-of-the-art results on
the FDDB and Pascal-Faces datasets with a relatively small
input size, leading to a runtime of 50 ms/image.

The rest of the paper is organized as follows. Section 2
provides an overview of the related works. Section 3 intro-
duces the proposed method. Section 4 presents the experi-
ments and Section 5 concludes the paper.

2. Related Works

2.1. Face Detection

Prior to the re-emergence of convolutional neural net-
works (CNN), different machine learning algorithms were
developed to improve face detection performance [29, 39,
10, 11, 18, 2, 31]. However, following the success of these
networks in classiﬁcation tasks [9], they were applied to
detection as well [6]. Face detectors based on CNNs sig-
niﬁcantly closed the performance gap between human and
artiﬁcial detectors [12, 33, 32, 38, 7]. However, the intro-
duction of the challenging WIDER dataset [35], containing
a large number of small faces, re-highlighted this gap. To
improve performance, CMS-RCNN [38] changed the Faster
R-CNN object detector [24] to incorporate context informa-

tion. Very recently, Hu et al. proposed a face detection
method based on proposal networks which achieves state-
of-the-art results on this dataset [7]. However, in addition
to skip connections, an input pyramid is processed by re-
scaling the image to different sizes, leading to slow detec-
In contrast, SSH is able to process multiple
tion speeds.
face scales simultaneously in a single forward pass of the
network, which reduces inference time noticeably.

2.2. Single Stage Detectors and Proposal Networks

The idea of detecting and localizing objects in a single
stage has been previously studied for general object detec-
tion. SSD [16] and YOLO [23] perform detection and classi-
ﬁcation simultaneously by classifying a ﬁxed grid of boxes
and regressing them towards objects. G-CNN [19] mod-
els detection as a piece-wise regression problem and itera-
tively pushes an initial multi-scale grid of boxes towards ob-
jects while classifying them. However, current state-of-the-
art methods on the challenging MS-COCO object detection
benchmark are based on two-stage detectors[15]. SSH is a
single stage detector; it detects faces directly from the early
convolutional layers without requiring a proposal stage.

Although SSH is a detector, it is more similar to the ob-
ject proposal algorithms which are used as the ﬁrst stage in
detection pipelines. These algorithms generally regress a
ﬁxed set of anchors towards objects and assign an object-
ness score to each of them. MultiBox [28] deploys cluster-
ing to deﬁne anchors. RPN [24], on the other hand, deﬁnes
anchors as a dense grid of boxes with various scales and as-
pect ratios, centered at every location in the input feature
map. SSH uses similar strategies, but to localize and at the
same time detect, faces.

2.3. Scale Invariance and Context Modeling

Being scale invariant is important for detecting faces in
unconstrained settings. For generic object detection, [1, 36]
deploy feature maps of earlier convolutional layers to de-
tect small objects. Recently, [14] used skip connections
in the same way as [17] and employed multiple shared
RPN and classiﬁer heads from different convolutional lay-
ers. For face detection, CMS-RCNN [38] used the same
idea as [1, 36] and added skip connections to the Faster
RCNN [24]. [7] creates a pyramid of images and processes
each separately to detect faces of different sizes. In con-
trast, SSH is capable of detecting faces at different scales
in a single forward pass of the network without creating an
image pyramid. We employ skip connections in a similar
fashion as [17, 14], and train three detection modules jointly
from the convolutional layers with different strides to detect
small, medium, and large faces.

In two stage object detectors, context is usually modeled
by enlarging the window around proposals [36]. [1] mod-
els context by deploying a recurrent neural network. For

face detection, CMS-RCNN [38] utilizes a larger window
with the cost of duplicating the classiﬁcation head. This in-
creases the memory requirement as well as detection time.
SSH uses simple convolutional layers to achieve the same
larger window effect, leading to more efﬁcient context mod-
eling.

3. Proposed Method

SSH is designed to decrease inference time, have a low
memory foot-print, and be scale-invariant. SSH is a single-
stage detector; i.e. instead of dividing the detection task into
bounding box proposal and classiﬁcation, it performs clas-
siﬁcation together with localization from the global infor-
mation extracted from the convolutional layers. We empiri-
cally show that in this way, SSH can remove the “head” of
its underlying network while achieving state-of-the-art face
detection accuracy. Moreover, SSH is scale-invariant by de-
sign and can incorporate context efﬁciently.

3.1. General Architecture

Figure 2 shows the general architecture of SSH. It is a
fully convolutional network which localizes and classiﬁes
faces early on by adding a detection module on top of fea-
ture maps with strides of 8, 16, and 32, depicted as M1,
M2, and M3 respectively. The detection module consists
of a convolutional binary classiﬁer and a regressor for de-
tecting faces and localizing them respectively.

To solve the localization sub-problem, as in [28, 24, 19],
SSH regresses a set of predeﬁned bounding boxes called an-
chors, to the ground-truth faces. We employ a similar strat-
egy to the RPN [24] to form the anchor set. We deﬁne the
anchors in a dense overlapping sliding window fashion. At
each sliding window location, K anchors are deﬁned which
have the same center as that window and different scales.
However, unlike RPN, we only consider anchors with as-
pect ratio of one to reduce the number of anchor boxes. We
noticed in our experiments that having various aspect ratios
does not have a noticeable impact on face detection preci-
sion. More formally, if the feature map connected to the
detection module Mi has a size of Wi × Hi, there would
be Wi × Hi × Ki anchors with aspect ratio one and scales
{S1

i , S2
For the detection module, a set of convolutional layers
are deployed to extract features for face detection and lo-
calization as depicted in Figure 3. This includes a simple
context module to increase the effective receptive ﬁeld as
discussed in section 3.3. The number of output channels
of the context module, (i.e. “X” in Figures 3 and 4) is set
to 128 for detection module M1 and 256 for modules M2
and M3. Finally, two convolutional layers perform bound-
ing box regression and classiﬁcation. At each convolution
location in Mi, the classiﬁer decides whether the windows
at the ﬁlter’s center and corresponding to each of the scales

i , . . . SKi

i }.

i }K

{Sk
k=1 contains a face. A 1 × 1 convolutional layer with
2 × K output channels is used as the classiﬁer. For the re-
gressor branch, another 1×1 convolutional layer with 4×K
output channels is deployed. At each location during the
convolution, the regressor predicts the required change in
scale and translation to match each of the positive anchors
to faces.

3.2. Scale-Invariance Design

In unconstrained settings, faces in images have varying
scales. Although forming a multi-scale input pyramid and
performing several forward passes during inference, as in
[7], makes it possible to detect faces with different scales, it
is slow. In contrast, SSH detects large and small faces simul-
taneously in a single forward pass of the network. Inspired
by [14], we detect faces from three different convolutional
layers of our network using detection modules M1, M2,
and M3. These modules have strides of 8, 16, and 32 and
are designed to detect small, medium, and large faces re-
spectively.

More precisely, the detection module M2 performs de-
tection from the conv5-3 layer in VGG-16. Although it is
possible to place the detection module M1 directly on top
of conv4-3, we use the feature map fusion which was previ-
ously deployed for semantic segmentation [17], and generic
object detection [14]. However, to decrease the memory
consumption of the model, the number of channels in the
feature map is reduced from 512 to 128 using 1 × 1 con-
volutions. The conv5-3 feature maps are up-sampled and
summed up with the conv4-3 features, followed by a 3 × 3
convolutional layer. We used bilinear up-sampling in the
fusion process. For detecting larger faces, a max-pooling
layer with stride of 2 is added on top of the conv5-3 layer
to increase its stride to 32. The detection module M3 is
placed on top of this newly added layer.

During the training phase, each detection module Mi
is trained to detect faces from a target scale range as dis-
cussed in 3.4. During inference, the predicted boxes from
the different scales are joined together followed by Non-
Maximum Suppression (NMS) to form the ﬁnal detections.

3.3. Context Module

In two-stage detectors, it is common to incorporate con-
text by enlarging the window around the candidate propos-
als. SSH mimics this strategy by means of simple convo-
lutional layers. Figure 4 shows the context layers which
are integrated into the detection modules. Since anchors are
classiﬁed and regressed in a convolutional manner, applying
a larger ﬁlter resembles increasing the window size around
proposals in a two-stage detector. To this end, we use 5 × 5
and 7 × 7 ﬁlters in our context module. Modeling the con-
text in this way increases the receptive ﬁeld proportional to
the stride of the corresponding layer and as a result the tar-

Figure 2: The network architecture of SSH.

Figure 3: SSH detection module.

Figure 4: SSH context module.

3.4.1 Loss function

get scale of each detection module. To reduce the number
of parameters, we use a similar approach as [27] and deploy
sequential 3×3 ﬁlters instead of larger convolutional ﬁlters.
The number of output channels of the detection module (i.e.
“X” in Figure 4) is set to 128 for M1 and 256 for modules
M2 and M3. It should be noted that our detection mod-
ule together with its context ﬁlters uses fewer of parameters
compared to the module deployed for proposal generation
in [24]. Although, more efﬁcient, we empirically found that
the context module improves the mean average precision on
the WIDER validation dataset by more than half a percent.

3.4. Training

We use stochastic gradient descent with momentum and
weight decay for training the network. As discussed in sec-
tion 3.2, we place three detection modules on layers with
different strides to detect faces with different scales. Con-
sequently, our network has three multi-task losses for the
classiﬁcation and regression branches in each of these mod-
ules as discussed in Section 3.4.1. To specialize each of
the three detection modules for a speciﬁc range of scales,

we only back-propagate the loss for the anchors which are
assigned to faces in the corresponding range. This is im-
plemented by distributing the anchors based on their size
to these three modules (i.e. smaller anchors are assigned to
M1 compared to M2, and M3). An anchor is assigned to
a ground-truth face if and only if it has a higher IoU than
0.5. This is in contrast to the methods based on Faster R-
CNN which assign to each ground-truth at least one anchor
with the highest IoU. Thus, we do not back-propagate the
loss through the network for ground-truth faces inconsistent
with the anchor sizes of a module.

SSH has a multi-task loss. This loss can be formulated as
follows:

(cid:88)

(cid:88)

1
N c
k

k

i∈Ak

(cid:96)c(pi, gi)+

(cid:88)

(cid:88)

λ

1
N r
k

k

i∈Ak

I(gi = 1)(cid:96)r(bi, ti)

(1)

where (cid:96)c is the face classiﬁcation loss. We use standard
multinomial logistic loss as (cid:96)c. The index k goes over the
SSH detection modules M = {Mk}K
1 and Ak represents
the set of anchors deﬁned in Mk. The predicted category
for the i’th anchor in Mk and its assigned ground-truth la-
bel are denoted as pi and gi respectively. As discussed in
Section 3.2, an anchor is assigned to a ground-truth bound-
ing box if and only if it has an IoU greater than a threshold
(i.e. 0.5). As in [24], negative labels are assigned to anchors
with IoU less than a predeﬁned threshold (i.e. 0.3) with any
ground-truth bounding box. N c
k is the number of anchors
in module Mk which participate in the classiﬁcation loss
computation.

(cid:96)r represents the bounding box regression loss. Fol-
lowing [6, 5, 24], we parameterize the regression space

with a log-space shift in the box dimensions and a scale-
invariant translation and use smooth (cid:96)1 loss as (cid:96)r. In this
parametrized space, pi represents the predicted four di-
mensional translation and scale shift and ti is its assigned
ground-truth regression target for the i’th anchor in mod-
ule Mk. I(.) is the indicator function that limits the re-
gression loss only to the positively assigned anchors, and
N r

I(gi = 1).

k = (cid:80)

i∈Ak

3.5. Online hard negative and positive mining

We use online negative and positive mining (OHEM) for
training SSH as described in [25]. However, OHEM is ap-
plied to each of the detection modules (Mk) separately.
That is, for each module Mk, we select the negative an-
chors with the highest scores and the positive anchors with
the lowest scores with respect to the weights of the net-
work at that iteration to form our mini-batch. Also, since
the number of negative anchors is more than the positives,
following [4], 25% of the mini-batch is reserved for the pos-
itive anchors. As empirically shown in Section 4.8, OHEM
has an important role in the success of SSH which removes
the fully connected layers out of the VGG-16 network.

4. Experiments

4.1. Experimental Setup

All models are trained on 4 GPUs in parallel using
stochastic gradient descent. We use a mini-batch of 4
images. Our networks are ﬁne-tuned for 21K iterations
starting from a pre-trained ImageNet classiﬁcation network.
Following [4], we ﬁx the initial convolutions up to conv3-1.
The learning rate is initially set to 0.004 and drops by a fac-
tor of 10 after 18K iterations. We set momentum to 0.9, and
weight decay to 5e−4. Anchors with IoU> 0.5 are assigned
to positive class and anchors which have an IoU< 0.3 with
all ground-truth faces are assigned to the background class.
For anchor generation, we use scales {1, 2} in M1, {4, 8}
in M2, and {16, 32} in M3 with a base anchor size of 16
pixels. All anchors have aspect ratio of one. During train-
ing, 256 detections per module is selected for each image.
During inference, each module outputs 1000 best scoring
anchors as detections and NMS with a threshold of 0.3 is
performed on the outputs of all modules together.

4.2. Datasets

WIDER dataset[35]: This dataset contains 32, 203 im-
ages with 393, 703 annotated faces, 158, 989 of which are
in the train set, 39, 496 in the validation set and the rest are
in the test set. The validation and test set are divided into
“easy”, “medium”, and “hard” subsets cumulatively (i.e. the
“hard” set contains all images). This is one of the most chal-
lenging public face datasets mainly due to the wide variety
of face scales and occlusion. We train all models on the

Table 1: Comparison of SSH with top performing methods on the
validation set of the WIDER dataset.

Method
CMS-RCNN [38]
HR(VGG-16)+Pyramid [7]
HR(ResNet-101)+Pyramid [7]
SSH(VGG-16)
SSH(VGG-16)+Pyramid

easy medium hard
62.9
87.4
89.9
74.9
84.4
86.2
80.6
91.0
92.5
81.4
90.7
91.9
84.5
92.1
93.1

train set of the WIDER dataset and evaluate on the valida-
tion and test sets. Ablation studies are performed on the the
validation set (i.e. “hard” subset).

FDDB[8]: FDDB contains 2845 images and 5171 anno-

tated faces. We use this dataset only for testing.

Pascal Faces[30]: Pascal Faces is a subset of the Pascal
VOC dataset [3] and contains 851 images annotated for face
detection. We use this dataset only to evaluate our method.

4.3. WIDER Dataset Result

We compare SSH with HR [7], CMS-RCNN [38], Mul-
titask Cascade CNN [37], LDCF [20], Faceness [34], and
Multiscale Cascade CNN [35]. When reporting SSH with-
out an image pyramid, we rescale the shortest side of
the image up to 1200 pixels while keeping the largest
side below 1600 pixels without changing the aspect ratio.
SSH+Pyramid is our method when we apply SSH to a pyra-
mid of input images. Like HR, a four level image pyramid
is deployed. To form the pyramid, the image is ﬁrst scaled
to have a shortest side of up to 800 pixels and the longest
side less than 1200 pixels. Then, we scale the image to have
min sizes of 500, 800, 1200, and 1600 pixels in the pyramid.
All modules detect faces on all pyramid levels, except M3
which is not applied to the largest level.

Table 1 compares SSH with best performing methods on
the WIDER validation set. SSH without using an image
pyramid and based on the VGG-16 network outperforms
the VGG-16 version of HR by 5.7%, 6.3%, and 6.5% in
“easy”, “medium”, and “hard” subsets respectively. Sur-
prisingly, SSH also outperforms HR based on ResNet-101
on the whole dataset (i.e. “hard” subset) by 0.8.
In con-
trast HR deploys an image pyramid. Using an image pyra-
mid, SSH based on a light VGG-16 model, outperforms the
ResNet-101 version of HR by a large margin, increasing the
state-of-the-art on this dataset by ∼ 4%.

The precision-recall curves on the test set is presented in
Figure 5. We submitted the detections of SSH with an im-
age pyramid only once for evaluation. As can be seen, SSH
based on a headless VGG-16, outperforms the prior meth-
ods on all subsets, increasing the state-of-the-art by 2.5%.

4.4. FDDB and Pascal Faces Results

In these datasets, we resize the shortest side of the input
to 400 pixels while keeping the larger side less than 800 pix-

(a) Easy

(b) Medium

(c) Hard

Figure 5: Comparison among the methods on the test set of WIDER face detection benchmark.

(a) FDDB discrete score.

(b) FDDB continuous score.

(c) Pascal-Faces.

Figure 6: Comparison among the methods on FDDB and Pascal-Faces datasets. (*Note that unlike SSH, HR-ER is also
trained on the FDDB dataset in a 10-Fold Cross Validation fashion.)

els, leading to an inference time of less than 50 ms/image.
We compare SSH with HR[7], HR-ER[7], Conv3D[13],
Faceness[34], Faster R-CNN(VGG-16)[24], MTCNN[37],
DP2MFD[21], and Headhunter[18]. Figures 6a and 6b
show the ROC curves with respect to the discrete and con-
tinuous measures on the FDDB dataset respectively.

It should be noted that HR-ER also uses FDDB as a train-
ing data in a 10-fold cross validation fashion. Moreover,
HR-ER and Conv3D both generate ellipses to decrease the
localization error. In contrast, SSH does not use FDDB for
training, and is evaluated on this dataset out-of-the-box by
generating bounding boxes. However, as can be seen, SSH
outperforms all other methods with respect to the discrete
score. Compare to HR, SSH improved the results by 5.6%
and 1.1% with respect to the continuous and discrete scores.
We also compare SSH with Faster R-CNN(VGG-
16)[24], HyperFace[22], Headhunter[18],
and Face-
ness[34] on the Pascal-Faces dataset. As shown in Figure
6c, SSH achieves state-of-the-art results on this dataset.

Table 2: SSH inference time with respect to different input sizes.

Max Size
Time

400 × 800
48 ms

600 × 1000
74 ms

800 × 1200
107 ms

1200 × 1600
182 ms

tion set. Timing are performed on a NVIDIA Quadro P6000
GPU. In column with max size m × M , the shortest side
of the images are resized to “m” pixels while keeping the
longest side less than “M ” pixels. As shown in section 4.3,
and 4.4, SSH outperforms HR on all datasets without an im-
age pyramid. On WIDER we resize the image to the last
column and as a result detection takes 182 ms/image. In
contrast, HR has a runtime of 1010 ms/image, more than
5X slower. As mentioned in Section 4.4, a maximum input
size of 400 × 800 is enough for SSH to achieve state-of-the-
art performance on FDDB and Pascal-Faces, with a detec-
tion time of 48 ms/image. If an image pyramid is used, the
runtime would be dominated by the largest scale.

4.5. Timing

4.6. Ablation study: Scale-invariant design

SSH performs face detection in a single stage while re-
moving all fully-connected layers from the VGG-16 net-
work. This makes SSH an efﬁcient detection algorithm.
Table 2 shows the inference time with respect to different
input sizes. We report average time on the WIDER valida-

As discussed in Section 3.2, SSH uses each of its detec-
tions modules, {Mi}3
i=1, to detect faces in a certain range
of scales from layers with different strides. To better under-
stand the impact of these design choices, we compare the
results of SSH with and without multiple detection mod-

(a) Effect of multi-scale design.

(b) Effect of OHEM.

(c) Effect of feature fusion.

(d) Effect of increasing #anchors.

Figure 7: Ablation studies. All experiments are reported on the Wider Validation set.

Table 3: The effect of input size on average precision.

Max Size
AP

600 × 1000
68.6

800 × 1200
78.4

1200 × 1600
81.4

1400 × 1800
81.0

ules. That is, we remove {M1, M3} and only detect faces
with M2 from conv5-3 in VGG-16. However, for fair com-
parison, all anchor scales in {M1, M3} are moved to M2
(i.e. we use ∪3
i=1Si in M2). Other parameters remain the
same. We refer to this simpler method as ”SSH-OnlyM2”.
As shown in Figure 7a, by removing the multiple detection
modules from SSH, the AP signiﬁcantly drops by ∼ 12.8%
on the hard subset which contains smaller faces. Although
SSH does not deploy the expensive head of its underlying
network, results suggest that having independent simple de-
tection modules from different layers of the network is an
effective strategy for scale-invariance.

4.7. Ablation study: The effect of input size

The input size can affect face detection precision, espe-
cially for small faces. Table 3 shows the AP of SSH on
the WIDER validation set when it is trained and evaluated
with different input sizes. Even at a maximum input size of
800 × 1200, SSH outperforms HR-VGG16, which up-scales
images up to 5000 pixels, by 3.5%, showing the effective-
ness of our scale-invariant design for detecting small faces.

4.8. Ablation study: The effect of OHEM

As discussed in Section 3.5, we apply hard negative and
positive mining (OHEM) to select anchors for each of our
detection modules. To show its role, we train SSH, with
and without OHEM. All other factors are the same. Figure
7b shows the results. Clearly, OHEM is important for the
success of our light-weight detection method which does
not use the pre-trained head of the VGG-16 network.

4.9. Ablation study: The effect of feature fusion

In SSH, to form the input features for detection mod-
ule M1, the outputs of conv4-3 and conv5-3 are fused to-
gether. Figure 7c, shows the effectiveness of this design
choice. Although it does not have a noticeable computa-

tional overhead, as illustrated, it improves the AP on the
WIDER validation set.

4.10. Ablation study: Selection of anchor scales

As mentioned in Section 4.1, SSH uses S1 = {1, 2},
S2 = {4, 8}, S3 = {16, 32} as anchor scale sets. Fig-
ure 7d compares SSH with its slight variant which uses
S1 = {0.25, 0.5, 1, 2, 3}, S2 = {4, 6, 8, 10, 12}, S3 =
{16, 20, 24, 28, 32}. Although using a ﬁner scale set leads
to a slower inference, it also reduces the AP due to the in-
crease in the number of False Positives.

4.11. Qualitative Results

Figure 8 shows some qualitative results on the Wider val-
idation set. The colors encode the score of the classiﬁer.
Green and blue represent score 1.0 and 0.5 respectively.

5. Conclusion

We introduced the SSH detector, a fast and lightweight
face detector that, unlike two-stage proposal/classiﬁcation
approaches, detects faces in a single stage. SSH localizes
and detects faces simultaneously from the early convolu-
tional layers in a classiﬁcation network. SSH is able to
achieve state-of-the-art results without using the “head” of
its underlying classiﬁcation network (i.e. fc layers in VGG-
16). Moreover, instead of processing an input pyramid,
SSH is designed to be scale-invariant while detecting dif-
ferent face scales in a single forward pass of the network.
SSH achieves state-of-the-art performance on the challeng-
ing WIDER dataset as well as FDDB and Pascal-Faces
while reducing the detection time considerably.

the Director of National

Acknowledgement This research is based upon work sup-
ported by the Ofﬁce of
Intelli-
gence (ODNI), Intelligence Advanced Research Projects Activity
(IARPA), via IARPA R&D Contract No. 2014-14071600012. The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the ofﬁ-
cial policies or endorsements, either expressed or implied, of the
ODNI, IARPA, or the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for Governmental
purposes notwithstanding any copyright annotation thereon.

Figure 8: Qualitative results of SSH on the validation set of the WIDER dataset. Green and blue represent a classiﬁcation
score of 1.0 and 0.5 respectively.

References

[1] S. Bell, C. Lawrence Zitnick, K. Bala, and R. Girshick.
Inside-outside net: Detecting objects in context with skip
pooling and recurrent neural networks. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2874–2883, 2016. 2

[2] D. Chen, S. Ren, Y. Wei, X. Cao, and J. Sun. Joint cascade
In European Conference on

face detection and alignment.
Computer Vision, pages 109–122. Springer, 2014. 2

[3] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-
lenge. International journal of computer vision, 88(2):303–
338, 2010. 5

[4] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 1, 5

[5] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 4

[6] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
In Proceedings of the IEEE conference on
segmentation.
computer vision and pattern recognition, pages 580–587,
2014. 2, 4

[7] P. Hu and D. Ramanan. Finding tiny faces. Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 1, 2, 3, 5, 6

[8] V. Jain and E. G. Learned-Miller. Fddb: A benchmark for
face detection in unconstrained settings. UMass Amherst
Technical Report, 2010. 5

[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[10] H. Li, G. Hua, Z. Lin, J. Brandt, and J. Yang. Probabilis-
tic elastic part model for unsupervised face detector adapta-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 793–800, 2013. 2

[11] H. Li, Z. Lin, J. Brandt, X. Shen, and G. Hua. Efﬁcient
boosted exemplar-based face detection. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1843–1850, 2014. 2

[12] H. Li, Z. Lin, X. Shen, J. Brandt, and G. Hua. A convolu-
tional neural network cascade for face detection. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5325–5334, 2015. 2

[13] Y. Li, B. Sun, T. Wu, and Y. Wang. face detection with end-
to-end integration of a convnet and a 3d model. In European
Conference on Computer Vision, pages 420–436. Springer,
2016. 6

[14] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017. 2, 3

[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-

mon objects in context. In European Conference on Com-
puter Vision, pages 740–755. Springer, 2014. 2

[16] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In European Conference on Computer Vision, pages 21–37.
Springer, 2016. 2

[17] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3431–3440, 2015. 2, 3

[18] M. Mathias, R. Benenson, M. Pedersoli, and L. Van Gool.
Face detection without bells and whistles. In European Con-
ference on Computer Vision, pages 720–735. Springer, 2014.
2, 6

[19] M. Najibi, M. Rastegari, and L. S. Davis. G-cnn: an iterative
grid based object detector. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2369–2377, 2016. 2, 3

[20] E. Ohn-Bar and M. M. Trivedi. To boost or not to boost? on
the limits of boosted trees for object detection. 23rd Interna-
tional Conference on Pattern Recognition, 2016. 5

[21] R. Ranjan, V. M. Patel, and R. Chellappa. A deep pyramid
In 7th Interna-
deformable part model for face detection.
tional Conference on Biometrics Theory, Applications and
Systems (BTAS), pages 1–8. IEEE, 2015. 6

[22] R. Ranjan, V. M. Patel, and R. Chellappa. Hyperface: A deep
multi-task learning framework for face detection, landmark
localization, pose estimation, and gender recognition. arXiv
preprint arXiv:1603.01249, 2016. 6

[23] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 779–788, 2016. 2

[24] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 1, 2, 3, 4, 6

[25] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 761–769, 2016. 5

[26] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1

[27] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 1–9, 2015. 4

[28] C. Szegedy, S. Reed, D. Erhan, D. Anguelov, and S. Ioffe.
arXiv preprint

Scalable, high-quality object detection.
arXiv:1412.1441, 2014. 2, 3

[29] P. Viola and M. Jones. Rapid object detection using a boosted
cascade of simple features. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, vol-
ume 1, pages I–I. IEEE, 2001. 1, 2

[30] J. Yan, X. Zhang, Z. Lei, and S. Z. Li.

Face detec-
Image and Vision Computing,

tion by structural models.
32(10):790–799, 2014. 5

[31] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Aggregate channel fea-
In IEEE International
tures for multi-view face detection.
Joint Conference on Biometrics (IJCB), pages 1–8. IEEE,
2014. 2

[32] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Convolutional channel
features. In Proceedings of the IEEE international confer-
ence on computer vision, pages 82–90, 2015. 2

[33] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 2

[34] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 5, 6

[35] S. Yang, P. Luo, C.-C. Loy, and X. Tang. Wider face: A
face detection benchmark. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
5525–5533, 2016. 1, 2, 5

[36] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. arXiv preprint arXiv:1604.02135, 2016. 2
[37] K. Zhang, Z. Zhang, Z. Li, and Y. Qiao. Joint face detection
and alignment using multitask cascaded convolutional net-
works. IEEE Signal Processing Letters, 23(10):1499–1503,
2016. 5, 6

[38] C. Zhu, Y. Zheng, K. Luu, and M. Savvides. Cms-rcnn: con-
textual multi-scale region-based cnn for unconstrained face
detection. pages 57–79, 2017. 2, 3, 5

[39] X. Zhu and D. Ramanan. Face detection, pose estimation,
and landmark localization in the wild. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2879–2886. IEEE, 2012. 2

SSH: Single Stage Headless Face Detector

Mahyar Najibi*

Pouya Samangouei* Rama Chellappa
University of Maryland

Larry S. Davis

najibi@cs.umd.edu

{pouya,rama,lsd}@umiacs.umd.edu

7
1
0
2
 
t
c
O
 
8
1
 
 
]

V
C
.
s
c
[
 
 
3
v
9
7
9
3
0
.
8
0
7
1
:
v
i
X
r
a

Abstract

We introduce the Single Stage Headless (SSH) face de-
tector. Unlike two stage proposal-classiﬁcation detectors,
SSH detects faces in a single stage directly from the early
convolutional layers in a classiﬁcation network. SSH is
headless. That is, it is able to achieve state-of-the-art re-
sults while removing the “head” of its underlying classiﬁca-
tion network – i.e. all fully connected layers in the VGG-16
which contains a large number of parameters. Addition-
ally, instead of relying on an image pyramid to detect faces
with various scales, SSH is scale-invariant by design. We
simultaneously detect faces with different scales in a sin-
gle forward pass of the network, but from different layers.
These properties make SSH fast and light-weight. Surpris-
ingly, with a headless VGG-16, SSH beats the ResNet-101-
based state-of-the-art on the WIDER dataset. Even though,
unlike the current state-of-the-art, SSH does not use an im-
age pyramid and is 5X faster. Moreover, if an image pyra-
mid is deployed, our light-weight network achieves state-
of-the-art on all subsets of the WIDER dataset, improv-
ing the AP by 2.5%. SSH also reaches state-of-the-art re-
sults on the FDDB and Pascal-Faces datasets while using a
small input size, leading to a runtime of 50 ms/image on a
GPU. The code is available at https://github.com/
mahyarnajibi/SSH.

1. Introduction

Face detection is a crucial step in various problems in-
volving veriﬁcation, identiﬁcation, expression analysis, etc.
From the Viola-Jones [29] detector to recent work by Hu
et al. [7], the performance of face detectors has been im-
proved dramatically. However, detecting small faces is still
considered a challenging task. The recent introduction of
the WIDER face dataset [35], containing a large number
of small faces, exposed the performance gap between hu-
mans and current face detectors. The problem becomes
more challenging when the speed and memory efﬁciency
of the detectors are taken into account. The best perform-

*Authors contributed equally

Figure 1: SSH detects various face sizes in a single CNN
forward pass and without employing an image pyramid in
∼ 0.1 second for an image with size 800 × 1200 on a GPU.

ing face detectors are usually slow and have high memory
foot-prints (e.g. [7] takes more than 1 second to process an
image, see Section 4.5) partly due to the huge number of
parameters as well as the way robustness to scale or incor-
poration of context are addressed.

State-of-the-art CNN-based detectors convert

image
classiﬁcation networks into two-stage detection systems
[4, 24]. In the ﬁrst stage, early convolutional feature maps
are used to propose a set of candidate object boxes. In the
second stage, the remaining layers of the classiﬁcation net-
works (e.g. fc6~8 in VGG-16 [26]), which we refer to as the
network “head”, are deployed to extract local features for
these candidates and classify them. The head in the classiﬁ-
cation networks can be computationally expensive (e.g. the
network head contains ∼ 120M parameters in VGG-16 and
∼ 12M parameters in ResNet-101). Moreover, in the two
stage detectors, the computation must be performed for all
proposed candidate boxes.

Very recently, Hu et al. [7] showed state-of-the-art re-
sults on the WIDER face detection benchmark by using a
similar approach to the Region Proposal Networks (RPN)
[24] to directly detect faces. Robustness to input scale is
achieved by introducing an image pyramid as an integral

part of the method. However, it involves processing an in-
put pyramid with an up-sampling scale up to 5000 pixels per
side and passing each level to a very deep network which
increased inference time.

In this paper, we introduce the Single Stage Headless
(SSH) face detector. SSH performs detection in a single
stage. Like RPN [24], the early feature maps in a classiﬁ-
cation network are used to regress a set of predeﬁned an-
chors towards faces. However, unlike two-stage detectors,
the ﬁnal classiﬁcation takes place together with regressing
the anchors. SSH is headless. It is able to achieve state-
of-the-art results while removing the head of its underlying
network (i.e. all fully connected layers in VGG-16), leading
to a light-weight detector. Finally, SSH is scale-invariant
by design.
Instead of relying on an external multi-scale
pyramid as input, inspired by [14], SSH detects faces from
various depths of the underlying network. This is achieved
by placing an efﬁcient convolutional detection module on
top of the layers with different strides, each of which is
trained for an appropriate range of face scales. Surpris-
ingly, SSH based on a headless VGG-16, not only outper-
forms the best-reported VGG-16 by a large margin but also
beats the current ResNet-101-based state-of-the-art method
on the WIDER face detection dataset. Unlike the current
state-of-the-art, SSH does not deploy an input pyramid and
If an input pyramid is used with SSH
is 5 times faster.
as well, our light-weight VGG-16-based detector outper-
forms the best reported ResNet-101 [7] on all three subsets
of the WIDER dataset and improves the mean average pre-
cision by 4% and 2.5% on the validation and the test set
respectively. SSH also achieves state-of-the-art results on
the FDDB and Pascal-Faces datasets with a relatively small
input size, leading to a runtime of 50 ms/image.

The rest of the paper is organized as follows. Section 2
provides an overview of the related works. Section 3 intro-
duces the proposed method. Section 4 presents the experi-
ments and Section 5 concludes the paper.

2. Related Works

2.1. Face Detection

Prior to the re-emergence of convolutional neural net-
works (CNN), different machine learning algorithms were
developed to improve face detection performance [29, 39,
10, 11, 18, 2, 31]. However, following the success of these
networks in classiﬁcation tasks [9], they were applied to
detection as well [6]. Face detectors based on CNNs sig-
niﬁcantly closed the performance gap between human and
artiﬁcial detectors [12, 33, 32, 38, 7]. However, the intro-
duction of the challenging WIDER dataset [35], containing
a large number of small faces, re-highlighted this gap. To
improve performance, CMS-RCNN [38] changed the Faster
R-CNN object detector [24] to incorporate context informa-

tion. Very recently, Hu et al. proposed a face detection
method based on proposal networks which achieves state-
of-the-art results on this dataset [7]. However, in addition
to skip connections, an input pyramid is processed by re-
scaling the image to different sizes, leading to slow detec-
In contrast, SSH is able to process multiple
tion speeds.
face scales simultaneously in a single forward pass of the
network, which reduces inference time noticeably.

2.2. Single Stage Detectors and Proposal Networks

The idea of detecting and localizing objects in a single
stage has been previously studied for general object detec-
tion. SSD [16] and YOLO [23] perform detection and classi-
ﬁcation simultaneously by classifying a ﬁxed grid of boxes
and regressing them towards objects. G-CNN [19] mod-
els detection as a piece-wise regression problem and itera-
tively pushes an initial multi-scale grid of boxes towards ob-
jects while classifying them. However, current state-of-the-
art methods on the challenging MS-COCO object detection
benchmark are based on two-stage detectors[15]. SSH is a
single stage detector; it detects faces directly from the early
convolutional layers without requiring a proposal stage.

Although SSH is a detector, it is more similar to the ob-
ject proposal algorithms which are used as the ﬁrst stage in
detection pipelines. These algorithms generally regress a
ﬁxed set of anchors towards objects and assign an object-
ness score to each of them. MultiBox [28] deploys cluster-
ing to deﬁne anchors. RPN [24], on the other hand, deﬁnes
anchors as a dense grid of boxes with various scales and as-
pect ratios, centered at every location in the input feature
map. SSH uses similar strategies, but to localize and at the
same time detect, faces.

2.3. Scale Invariance and Context Modeling

Being scale invariant is important for detecting faces in
unconstrained settings. For generic object detection, [1, 36]
deploy feature maps of earlier convolutional layers to de-
tect small objects. Recently, [14] used skip connections
in the same way as [17] and employed multiple shared
RPN and classiﬁer heads from different convolutional lay-
ers. For face detection, CMS-RCNN [38] used the same
idea as [1, 36] and added skip connections to the Faster
RCNN [24]. [7] creates a pyramid of images and processes
each separately to detect faces of different sizes. In con-
trast, SSH is capable of detecting faces at different scales
in a single forward pass of the network without creating an
image pyramid. We employ skip connections in a similar
fashion as [17, 14], and train three detection modules jointly
from the convolutional layers with different strides to detect
small, medium, and large faces.

In two stage object detectors, context is usually modeled
by enlarging the window around proposals [36]. [1] mod-
els context by deploying a recurrent neural network. For

face detection, CMS-RCNN [38] utilizes a larger window
with the cost of duplicating the classiﬁcation head. This in-
creases the memory requirement as well as detection time.
SSH uses simple convolutional layers to achieve the same
larger window effect, leading to more efﬁcient context mod-
eling.

3. Proposed Method

SSH is designed to decrease inference time, have a low
memory foot-print, and be scale-invariant. SSH is a single-
stage detector; i.e. instead of dividing the detection task into
bounding box proposal and classiﬁcation, it performs clas-
siﬁcation together with localization from the global infor-
mation extracted from the convolutional layers. We empiri-
cally show that in this way, SSH can remove the “head” of
its underlying network while achieving state-of-the-art face
detection accuracy. Moreover, SSH is scale-invariant by de-
sign and can incorporate context efﬁciently.

3.1. General Architecture

Figure 2 shows the general architecture of SSH. It is a
fully convolutional network which localizes and classiﬁes
faces early on by adding a detection module on top of fea-
ture maps with strides of 8, 16, and 32, depicted as M1,
M2, and M3 respectively. The detection module consists
of a convolutional binary classiﬁer and a regressor for de-
tecting faces and localizing them respectively.

To solve the localization sub-problem, as in [28, 24, 19],
SSH regresses a set of predeﬁned bounding boxes called an-
chors, to the ground-truth faces. We employ a similar strat-
egy to the RPN [24] to form the anchor set. We deﬁne the
anchors in a dense overlapping sliding window fashion. At
each sliding window location, K anchors are deﬁned which
have the same center as that window and different scales.
However, unlike RPN, we only consider anchors with as-
pect ratio of one to reduce the number of anchor boxes. We
noticed in our experiments that having various aspect ratios
does not have a noticeable impact on face detection preci-
sion. More formally, if the feature map connected to the
detection module Mi has a size of Wi × Hi, there would
be Wi × Hi × Ki anchors with aspect ratio one and scales
{S1

i , S2
For the detection module, a set of convolutional layers
are deployed to extract features for face detection and lo-
calization as depicted in Figure 3. This includes a simple
context module to increase the effective receptive ﬁeld as
discussed in section 3.3. The number of output channels
of the context module, (i.e. “X” in Figures 3 and 4) is set
to 128 for detection module M1 and 256 for modules M2
and M3. Finally, two convolutional layers perform bound-
ing box regression and classiﬁcation. At each convolution
location in Mi, the classiﬁer decides whether the windows
at the ﬁlter’s center and corresponding to each of the scales

i , . . . SKi

i }.

i }K

{Sk
k=1 contains a face. A 1 × 1 convolutional layer with
2 × K output channels is used as the classiﬁer. For the re-
gressor branch, another 1×1 convolutional layer with 4×K
output channels is deployed. At each location during the
convolution, the regressor predicts the required change in
scale and translation to match each of the positive anchors
to faces.

3.2. Scale-Invariance Design

In unconstrained settings, faces in images have varying
scales. Although forming a multi-scale input pyramid and
performing several forward passes during inference, as in
[7], makes it possible to detect faces with different scales, it
is slow. In contrast, SSH detects large and small faces simul-
taneously in a single forward pass of the network. Inspired
by [14], we detect faces from three different convolutional
layers of our network using detection modules M1, M2,
and M3. These modules have strides of 8, 16, and 32 and
are designed to detect small, medium, and large faces re-
spectively.

More precisely, the detection module M2 performs de-
tection from the conv5-3 layer in VGG-16. Although it is
possible to place the detection module M1 directly on top
of conv4-3, we use the feature map fusion which was previ-
ously deployed for semantic segmentation [17], and generic
object detection [14]. However, to decrease the memory
consumption of the model, the number of channels in the
feature map is reduced from 512 to 128 using 1 × 1 con-
volutions. The conv5-3 feature maps are up-sampled and
summed up with the conv4-3 features, followed by a 3 × 3
convolutional layer. We used bilinear up-sampling in the
fusion process. For detecting larger faces, a max-pooling
layer with stride of 2 is added on top of the conv5-3 layer
to increase its stride to 32. The detection module M3 is
placed on top of this newly added layer.

During the training phase, each detection module Mi
is trained to detect faces from a target scale range as dis-
cussed in 3.4. During inference, the predicted boxes from
the different scales are joined together followed by Non-
Maximum Suppression (NMS) to form the ﬁnal detections.

3.3. Context Module

In two-stage detectors, it is common to incorporate con-
text by enlarging the window around the candidate propos-
als. SSH mimics this strategy by means of simple convo-
lutional layers. Figure 4 shows the context layers which
are integrated into the detection modules. Since anchors are
classiﬁed and regressed in a convolutional manner, applying
a larger ﬁlter resembles increasing the window size around
proposals in a two-stage detector. To this end, we use 5 × 5
and 7 × 7 ﬁlters in our context module. Modeling the con-
text in this way increases the receptive ﬁeld proportional to
the stride of the corresponding layer and as a result the tar-

Figure 2: The network architecture of SSH.

Figure 3: SSH detection module.

Figure 4: SSH context module.

3.4.1 Loss function

get scale of each detection module. To reduce the number
of parameters, we use a similar approach as [27] and deploy
sequential 3×3 ﬁlters instead of larger convolutional ﬁlters.
The number of output channels of the detection module (i.e.
“X” in Figure 4) is set to 128 for M1 and 256 for modules
M2 and M3. It should be noted that our detection mod-
ule together with its context ﬁlters uses fewer of parameters
compared to the module deployed for proposal generation
in [24]. Although, more efﬁcient, we empirically found that
the context module improves the mean average precision on
the WIDER validation dataset by more than half a percent.

3.4. Training

We use stochastic gradient descent with momentum and
weight decay for training the network. As discussed in sec-
tion 3.2, we place three detection modules on layers with
different strides to detect faces with different scales. Con-
sequently, our network has three multi-task losses for the
classiﬁcation and regression branches in each of these mod-
ules as discussed in Section 3.4.1. To specialize each of
the three detection modules for a speciﬁc range of scales,

we only back-propagate the loss for the anchors which are
assigned to faces in the corresponding range. This is im-
plemented by distributing the anchors based on their size
to these three modules (i.e. smaller anchors are assigned to
M1 compared to M2, and M3). An anchor is assigned to
a ground-truth face if and only if it has a higher IoU than
0.5. This is in contrast to the methods based on Faster R-
CNN which assign to each ground-truth at least one anchor
with the highest IoU. Thus, we do not back-propagate the
loss through the network for ground-truth faces inconsistent
with the anchor sizes of a module.

SSH has a multi-task loss. This loss can be formulated as
follows:

(cid:88)

(cid:88)

1
N c
k

k

i∈Ak

(cid:96)c(pi, gi)+

(cid:88)

(cid:88)

λ

1
N r
k

k

i∈Ak

I(gi = 1)(cid:96)r(bi, ti)

(1)

where (cid:96)c is the face classiﬁcation loss. We use standard
multinomial logistic loss as (cid:96)c. The index k goes over the
SSH detection modules M = {Mk}K
1 and Ak represents
the set of anchors deﬁned in Mk. The predicted category
for the i’th anchor in Mk and its assigned ground-truth la-
bel are denoted as pi and gi respectively. As discussed in
Section 3.2, an anchor is assigned to a ground-truth bound-
ing box if and only if it has an IoU greater than a threshold
(i.e. 0.5). As in [24], negative labels are assigned to anchors
with IoU less than a predeﬁned threshold (i.e. 0.3) with any
ground-truth bounding box. N c
k is the number of anchors
in module Mk which participate in the classiﬁcation loss
computation.

(cid:96)r represents the bounding box regression loss. Fol-
lowing [6, 5, 24], we parameterize the regression space

with a log-space shift in the box dimensions and a scale-
invariant translation and use smooth (cid:96)1 loss as (cid:96)r. In this
parametrized space, pi represents the predicted four di-
mensional translation and scale shift and ti is its assigned
ground-truth regression target for the i’th anchor in mod-
ule Mk. I(.) is the indicator function that limits the re-
gression loss only to the positively assigned anchors, and
N r

I(gi = 1).

k = (cid:80)

i∈Ak

3.5. Online hard negative and positive mining

We use online negative and positive mining (OHEM) for
training SSH as described in [25]. However, OHEM is ap-
plied to each of the detection modules (Mk) separately.
That is, for each module Mk, we select the negative an-
chors with the highest scores and the positive anchors with
the lowest scores with respect to the weights of the net-
work at that iteration to form our mini-batch. Also, since
the number of negative anchors is more than the positives,
following [4], 25% of the mini-batch is reserved for the pos-
itive anchors. As empirically shown in Section 4.8, OHEM
has an important role in the success of SSH which removes
the fully connected layers out of the VGG-16 network.

4. Experiments

4.1. Experimental Setup

All models are trained on 4 GPUs in parallel using
stochastic gradient descent. We use a mini-batch of 4
images. Our networks are ﬁne-tuned for 21K iterations
starting from a pre-trained ImageNet classiﬁcation network.
Following [4], we ﬁx the initial convolutions up to conv3-1.
The learning rate is initially set to 0.004 and drops by a fac-
tor of 10 after 18K iterations. We set momentum to 0.9, and
weight decay to 5e−4. Anchors with IoU> 0.5 are assigned
to positive class and anchors which have an IoU< 0.3 with
all ground-truth faces are assigned to the background class.
For anchor generation, we use scales {1, 2} in M1, {4, 8}
in M2, and {16, 32} in M3 with a base anchor size of 16
pixels. All anchors have aspect ratio of one. During train-
ing, 256 detections per module is selected for each image.
During inference, each module outputs 1000 best scoring
anchors as detections and NMS with a threshold of 0.3 is
performed on the outputs of all modules together.

4.2. Datasets

WIDER dataset[35]: This dataset contains 32, 203 im-
ages with 393, 703 annotated faces, 158, 989 of which are
in the train set, 39, 496 in the validation set and the rest are
in the test set. The validation and test set are divided into
“easy”, “medium”, and “hard” subsets cumulatively (i.e. the
“hard” set contains all images). This is one of the most chal-
lenging public face datasets mainly due to the wide variety
of face scales and occlusion. We train all models on the

Table 1: Comparison of SSH with top performing methods on the
validation set of the WIDER dataset.

Method
CMS-RCNN [38]
HR(VGG-16)+Pyramid [7]
HR(ResNet-101)+Pyramid [7]
SSH(VGG-16)
SSH(VGG-16)+Pyramid

easy medium hard
62.9
87.4
89.9
74.9
84.4
86.2
80.6
91.0
92.5
81.4
90.7
91.9
84.5
92.1
93.1

train set of the WIDER dataset and evaluate on the valida-
tion and test sets. Ablation studies are performed on the the
validation set (i.e. “hard” subset).

FDDB[8]: FDDB contains 2845 images and 5171 anno-

tated faces. We use this dataset only for testing.

Pascal Faces[30]: Pascal Faces is a subset of the Pascal
VOC dataset [3] and contains 851 images annotated for face
detection. We use this dataset only to evaluate our method.

4.3. WIDER Dataset Result

We compare SSH with HR [7], CMS-RCNN [38], Mul-
titask Cascade CNN [37], LDCF [20], Faceness [34], and
Multiscale Cascade CNN [35]. When reporting SSH with-
out an image pyramid, we rescale the shortest side of
the image up to 1200 pixels while keeping the largest
side below 1600 pixels without changing the aspect ratio.
SSH+Pyramid is our method when we apply SSH to a pyra-
mid of input images. Like HR, a four level image pyramid
is deployed. To form the pyramid, the image is ﬁrst scaled
to have a shortest side of up to 800 pixels and the longest
side less than 1200 pixels. Then, we scale the image to have
min sizes of 500, 800, 1200, and 1600 pixels in the pyramid.
All modules detect faces on all pyramid levels, except M3
which is not applied to the largest level.

Table 1 compares SSH with best performing methods on
the WIDER validation set. SSH without using an image
pyramid and based on the VGG-16 network outperforms
the VGG-16 version of HR by 5.7%, 6.3%, and 6.5% in
“easy”, “medium”, and “hard” subsets respectively. Sur-
prisingly, SSH also outperforms HR based on ResNet-101
on the whole dataset (i.e. “hard” subset) by 0.8.
In con-
trast HR deploys an image pyramid. Using an image pyra-
mid, SSH based on a light VGG-16 model, outperforms the
ResNet-101 version of HR by a large margin, increasing the
state-of-the-art on this dataset by ∼ 4%.

The precision-recall curves on the test set is presented in
Figure 5. We submitted the detections of SSH with an im-
age pyramid only once for evaluation. As can be seen, SSH
based on a headless VGG-16, outperforms the prior meth-
ods on all subsets, increasing the state-of-the-art by 2.5%.

4.4. FDDB and Pascal Faces Results

In these datasets, we resize the shortest side of the input
to 400 pixels while keeping the larger side less than 800 pix-

(a) Easy

(b) Medium

(c) Hard

Figure 5: Comparison among the methods on the test set of WIDER face detection benchmark.

(a) FDDB discrete score.

(b) FDDB continuous score.

(c) Pascal-Faces.

Figure 6: Comparison among the methods on FDDB and Pascal-Faces datasets. (*Note that unlike SSH, HR-ER is also
trained on the FDDB dataset in a 10-Fold Cross Validation fashion.)

els, leading to an inference time of less than 50 ms/image.
We compare SSH with HR[7], HR-ER[7], Conv3D[13],
Faceness[34], Faster R-CNN(VGG-16)[24], MTCNN[37],
DP2MFD[21], and Headhunter[18]. Figures 6a and 6b
show the ROC curves with respect to the discrete and con-
tinuous measures on the FDDB dataset respectively.

It should be noted that HR-ER also uses FDDB as a train-
ing data in a 10-fold cross validation fashion. Moreover,
HR-ER and Conv3D both generate ellipses to decrease the
localization error. In contrast, SSH does not use FDDB for
training, and is evaluated on this dataset out-of-the-box by
generating bounding boxes. However, as can be seen, SSH
outperforms all other methods with respect to the discrete
score. Compare to HR, SSH improved the results by 5.6%
and 1.1% with respect to the continuous and discrete scores.
We also compare SSH with Faster R-CNN(VGG-
16)[24], HyperFace[22], Headhunter[18],
and Face-
ness[34] on the Pascal-Faces dataset. As shown in Figure
6c, SSH achieves state-of-the-art results on this dataset.

Table 2: SSH inference time with respect to different input sizes.

Max Size
Time

400 × 800
48 ms

600 × 1000
74 ms

800 × 1200
107 ms

1200 × 1600
182 ms

tion set. Timing are performed on a NVIDIA Quadro P6000
GPU. In column with max size m × M , the shortest side
of the images are resized to “m” pixels while keeping the
longest side less than “M ” pixels. As shown in section 4.3,
and 4.4, SSH outperforms HR on all datasets without an im-
age pyramid. On WIDER we resize the image to the last
column and as a result detection takes 182 ms/image. In
contrast, HR has a runtime of 1010 ms/image, more than
5X slower. As mentioned in Section 4.4, a maximum input
size of 400 × 800 is enough for SSH to achieve state-of-the-
art performance on FDDB and Pascal-Faces, with a detec-
tion time of 48 ms/image. If an image pyramid is used, the
runtime would be dominated by the largest scale.

4.5. Timing

4.6. Ablation study: Scale-invariant design

SSH performs face detection in a single stage while re-
moving all fully-connected layers from the VGG-16 net-
work. This makes SSH an efﬁcient detection algorithm.
Table 2 shows the inference time with respect to different
input sizes. We report average time on the WIDER valida-

As discussed in Section 3.2, SSH uses each of its detec-
tions modules, {Mi}3
i=1, to detect faces in a certain range
of scales from layers with different strides. To better under-
stand the impact of these design choices, we compare the
results of SSH with and without multiple detection mod-

(a) Effect of multi-scale design.

(b) Effect of OHEM.

(c) Effect of feature fusion.

(d) Effect of increasing #anchors.

Figure 7: Ablation studies. All experiments are reported on the Wider Validation set.

Table 3: The effect of input size on average precision.

Max Size
AP

600 × 1000
68.6

800 × 1200
78.4

1200 × 1600
81.4

1400 × 1800
81.0

ules. That is, we remove {M1, M3} and only detect faces
with M2 from conv5-3 in VGG-16. However, for fair com-
parison, all anchor scales in {M1, M3} are moved to M2
(i.e. we use ∪3
i=1Si in M2). Other parameters remain the
same. We refer to this simpler method as ”SSH-OnlyM2”.
As shown in Figure 7a, by removing the multiple detection
modules from SSH, the AP signiﬁcantly drops by ∼ 12.8%
on the hard subset which contains smaller faces. Although
SSH does not deploy the expensive head of its underlying
network, results suggest that having independent simple de-
tection modules from different layers of the network is an
effective strategy for scale-invariance.

4.7. Ablation study: The effect of input size

The input size can affect face detection precision, espe-
cially for small faces. Table 3 shows the AP of SSH on
the WIDER validation set when it is trained and evaluated
with different input sizes. Even at a maximum input size of
800 × 1200, SSH outperforms HR-VGG16, which up-scales
images up to 5000 pixels, by 3.5%, showing the effective-
ness of our scale-invariant design for detecting small faces.

4.8. Ablation study: The effect of OHEM

As discussed in Section 3.5, we apply hard negative and
positive mining (OHEM) to select anchors for each of our
detection modules. To show its role, we train SSH, with
and without OHEM. All other factors are the same. Figure
7b shows the results. Clearly, OHEM is important for the
success of our light-weight detection method which does
not use the pre-trained head of the VGG-16 network.

4.9. Ablation study: The effect of feature fusion

In SSH, to form the input features for detection mod-
ule M1, the outputs of conv4-3 and conv5-3 are fused to-
gether. Figure 7c, shows the effectiveness of this design
choice. Although it does not have a noticeable computa-

tional overhead, as illustrated, it improves the AP on the
WIDER validation set.

4.10. Ablation study: Selection of anchor scales

As mentioned in Section 4.1, SSH uses S1 = {1, 2},
S2 = {4, 8}, S3 = {16, 32} as anchor scale sets. Fig-
ure 7d compares SSH with its slight variant which uses
S1 = {0.25, 0.5, 1, 2, 3}, S2 = {4, 6, 8, 10, 12}, S3 =
{16, 20, 24, 28, 32}. Although using a ﬁner scale set leads
to a slower inference, it also reduces the AP due to the in-
crease in the number of False Positives.

4.11. Qualitative Results

Figure 8 shows some qualitative results on the Wider val-
idation set. The colors encode the score of the classiﬁer.
Green and blue represent score 1.0 and 0.5 respectively.

5. Conclusion

We introduced the SSH detector, a fast and lightweight
face detector that, unlike two-stage proposal/classiﬁcation
approaches, detects faces in a single stage. SSH localizes
and detects faces simultaneously from the early convolu-
tional layers in a classiﬁcation network. SSH is able to
achieve state-of-the-art results without using the “head” of
its underlying classiﬁcation network (i.e. fc layers in VGG-
16). Moreover, instead of processing an input pyramid,
SSH is designed to be scale-invariant while detecting dif-
ferent face scales in a single forward pass of the network.
SSH achieves state-of-the-art performance on the challeng-
ing WIDER dataset as well as FDDB and Pascal-Faces
while reducing the detection time considerably.

the Director of National

Acknowledgement This research is based upon work sup-
ported by the Ofﬁce of
Intelli-
gence (ODNI), Intelligence Advanced Research Projects Activity
(IARPA), via IARPA R&D Contract No. 2014-14071600012. The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the ofﬁ-
cial policies or endorsements, either expressed or implied, of the
ODNI, IARPA, or the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for Governmental
purposes notwithstanding any copyright annotation thereon.

Figure 8: Qualitative results of SSH on the validation set of the WIDER dataset. Green and blue represent a classiﬁcation
score of 1.0 and 0.5 respectively.

References

[1] S. Bell, C. Lawrence Zitnick, K. Bala, and R. Girshick.
Inside-outside net: Detecting objects in context with skip
pooling and recurrent neural networks. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2874–2883, 2016. 2

[2] D. Chen, S. Ren, Y. Wei, X. Cao, and J. Sun. Joint cascade
In European Conference on

face detection and alignment.
Computer Vision, pages 109–122. Springer, 2014. 2

[3] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-
lenge. International journal of computer vision, 88(2):303–
338, 2010. 5

[4] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 1, 5

[5] R. Girshick. Fast r-cnn. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 1440–1448,
2015. 4

[6] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
In Proceedings of the IEEE conference on
segmentation.
computer vision and pattern recognition, pages 580–587,
2014. 2, 4

[7] P. Hu and D. Ramanan. Finding tiny faces. Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 1, 2, 3, 5, 6

[8] V. Jain and E. G. Learned-Miller. Fddb: A benchmark for
face detection in unconstrained settings. UMass Amherst
Technical Report, 2010. 5

[9] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[10] H. Li, G. Hua, Z. Lin, J. Brandt, and J. Yang. Probabilis-
tic elastic part model for unsupervised face detector adapta-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 793–800, 2013. 2

[11] H. Li, Z. Lin, J. Brandt, X. Shen, and G. Hua. Efﬁcient
boosted exemplar-based face detection. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1843–1850, 2014. 2

[12] H. Li, Z. Lin, X. Shen, J. Brandt, and G. Hua. A convolu-
tional neural network cascade for face detection. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5325–5334, 2015. 2

[13] Y. Li, B. Sun, T. Wu, and Y. Wang. face detection with end-
to-end integration of a convnet and a 3d model. In European
Conference on Computer Vision, pages 420–436. Springer,
2016. 6

[14] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017. 2, 3

[15] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-

mon objects in context. In European Conference on Com-
puter Vision, pages 740–755. Springer, 2014. 2

[16] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In European Conference on Computer Vision, pages 21–37.
Springer, 2016. 2

[17] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3431–3440, 2015. 2, 3

[18] M. Mathias, R. Benenson, M. Pedersoli, and L. Van Gool.
Face detection without bells and whistles. In European Con-
ference on Computer Vision, pages 720–735. Springer, 2014.
2, 6

[19] M. Najibi, M. Rastegari, and L. S. Davis. G-cnn: an iterative
grid based object detector. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2369–2377, 2016. 2, 3

[20] E. Ohn-Bar and M. M. Trivedi. To boost or not to boost? on
the limits of boosted trees for object detection. 23rd Interna-
tional Conference on Pattern Recognition, 2016. 5

[21] R. Ranjan, V. M. Patel, and R. Chellappa. A deep pyramid
In 7th Interna-
deformable part model for face detection.
tional Conference on Biometrics Theory, Applications and
Systems (BTAS), pages 1–8. IEEE, 2015. 6

[22] R. Ranjan, V. M. Patel, and R. Chellappa. Hyperface: A deep
multi-task learning framework for face detection, landmark
localization, pose estimation, and gender recognition. arXiv
preprint arXiv:1603.01249, 2016. 6

[23] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 779–788, 2016. 2

[24] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 1, 2, 3, 4, 6

[25] A. Shrivastava, A. Gupta, and R. Girshick. Training region-
based object detectors with online hard example mining. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 761–769, 2016. 5

[26] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 1

[27] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 1–9, 2015. 4

[28] C. Szegedy, S. Reed, D. Erhan, D. Anguelov, and S. Ioffe.
arXiv preprint

Scalable, high-quality object detection.
arXiv:1412.1441, 2014. 2, 3

[29] P. Viola and M. Jones. Rapid object detection using a boosted
cascade of simple features. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, vol-
ume 1, pages I–I. IEEE, 2001. 1, 2

[30] J. Yan, X. Zhang, Z. Lei, and S. Z. Li.

Face detec-
Image and Vision Computing,

tion by structural models.
32(10):790–799, 2014. 5

[31] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Aggregate channel fea-
In IEEE International
tures for multi-view face detection.
Joint Conference on Biometrics (IJCB), pages 1–8. IEEE,
2014. 2

[32] B. Yang, J. Yan, Z. Lei, and S. Z. Li. Convolutional channel
features. In Proceedings of the IEEE international confer-
ence on computer vision, pages 82–90, 2015. 2

[33] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 2

[34] S. Yang, P. Luo, C.-C. Loy, and X. Tang. From facial parts
responses to face detection: A deep learning approach. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 3676–3684, 2015. 5, 6

[35] S. Yang, P. Luo, C.-C. Loy, and X. Tang. Wider face: A
face detection benchmark. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
5525–5533, 2016. 1, 2, 5

[36] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. O. Pinheiro, S. Gross,
S. Chintala, and P. Doll´ar. A multipath network for object
detection. arXiv preprint arXiv:1604.02135, 2016. 2
[37] K. Zhang, Z. Zhang, Z. Li, and Y. Qiao. Joint face detection
and alignment using multitask cascaded convolutional net-
works. IEEE Signal Processing Letters, 23(10):1499–1503,
2016. 5, 6

[38] C. Zhu, Y. Zheng, K. Luu, and M. Savvides. Cms-rcnn: con-
textual multi-scale region-based cnn for unconstrained face
detection. pages 57–79, 2017. 2, 3, 5

[39] X. Zhu and D. Ramanan. Face detection, pose estimation,
and landmark localization in the wild. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2879–2886. IEEE, 2012. 2

