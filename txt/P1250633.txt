The Fine Line between Linguistic Generalization and Failure in
Seq2Seq-Attention Models

Noah Weber∗, Leena Shekhar∗, Niranjan Balasubramanian
Stony Brook University, NY
{nwweber, lshekhar, niranjan}@cs.stonybrook.edu

8
1
0
2
 
y
a
M
 
8
 
 
]
L
C
.
s
c
[
 
 
2
v
5
4
4
1
0
.
5
0
8
1
:
v
i
X
r
a

Abstract

Seq2Seq based neural architectures have be-
come the go-to architecture to apply to se-
quence to sequence language tasks. Despite
their excellent performance on these tasks, re-
cent work has noted that these models usually
do not fully capture the linguistic structure re-
quired to generalize beyond the dense sections
of the data distribution (Ettinger et al., 2017),
and as such, are likely to fail on samples from
the tail end of the distribution (such as inputs
that are noisy (Belinkov and Bisk, 2018) or of
different lengths (Bentivogli et al., 2016)). In
this paper, we look at a model’s ability to gen-
eralize on a simple symbol rewriting task with
a clearly deﬁned structure. We ﬁnd that the
model’s ability to generalize this structure be-
yond the training distribution depends greatly
on the chosen random seed, even when per-
formance on the standard test set remains the
same. This suggests that a model’s ability to
capture generalizable structure is highly sensi-
tive. Moreover, this sensitivity may not be ap-
parent when evaluating it on standard test sets.

1

Introduction

It is well known that language has certain struc-
tural properties which allows natural language
speakers to make “inﬁnite use of ﬁnite means”
(Chomsky, 1965). This structure allows us to gen-
eralize beyond the typical machine learning deﬁni-
tion of generalization (Valiant, 1984) (which con-
siders performance on the distribution that gener-
ated the training set), permitting the understand-
ing of any utterance sharing the same structure, re-
gardless of probability. For example, sentences of
length 100 typically do not appear in natural text
or speech (our personal ’training set’), but can be
understood regardless due to their structure. We

refer to this notion as linguistic generalization 1.

Many problems in NLP are treated as sequence
to sequence tasks with solutions built on seq2seq-
attention based models. While these models per-
form very well on standard datasets and also ap-
pear to capture some linguistic structure (McCoy
et al., 2018; Belinkov et al., 2017; Linzen et al.,
typically
they also can be quite brittle,
2016),
breaking on uncharacteristic inputs (Lake and Ba-
roni, 2018; Belinkov and Bisk, 2018), indicating
that the extent of linguistic generalization these
models achieve is still somewhat lacking.

Due to the high capacity of these models, it
is not unreasonable to expect them to learn some
structure from the data. However, learning struc-
ture is not a sufﬁcient condition to achieving lin-
guistic generalization. If this structure is to be us-
able on data outside the training distribution, the
model must learn the structure without addition-
ally learning (overﬁtting on) patterns speciﬁc to
the training data. One may hope, given the right
hyperparameter conﬁguration and regularization,
that a model converges to a solution that captures
the reusable structure without overﬁtting too much
on the training set. While this solution exists in
theory, in practice, it may be difﬁcult to ﬁnd.

In this work, we look at the feasibility of train-
ing and tuning seq2seq-attention models towards
a solution that generalizes in this linguistic sense.
In particular, we train models on a symbol replace-
ment task with a well deﬁned generalizable struc-
ture. The task is simple enough that all models
achieve near perfect accuracy on the standard test
set, i.e., where the inputs are drawn from the same
distribution as that of the training set. We then test
these models for linguistic generalization by creat-
ing test sets of uncharacteristic inputs, i.e., inputs
that are not typical in the training distribution but

1From here on, mentions of generalization refer to the lin-

∗*These authors contributed equally to this work.

guistic kind.

still solvable given that the generalizable structure
was learned. Our results indicate that generaliza-
tion is highly sensitive2; such that even changes
in the random seed can drastically affect the abil-
ity to generalize. This dependence on an element
that is not (or ideally should not be) a hyperparam-
eter suggests that the line between generalization
and failure is quite ﬁne, and may not be feasible to
reach simply by hyperparameter tuning alone.

LSTM Layers
WE/LSTM size
Attention
Batch size
Optimizer
LR
Max gradient norm
Dropout
Initialization

1
32
Bilinear
64
SGD
0.125
5
0.1
Uniform(-0.1, 0.1)

Table 1: Model details.

2 Generalization in a Symbol Rewriting

3 Model and Training Details

Task

Real world NLP tasks are complex, and as such,
it can be difﬁcult to precisely deﬁne what a model
should and should not learn during training. As
done in previous work (Lake and Baroni, 2018;
Rodriguez and Wiles, 1998), we ease analysis by
looking at a simple formal task. The task is set up
to mimic (albeit, in an oversimpliﬁed manner) the
input-output symbol alignments and local syntac-
tic properties that models must learn in many natu-
ral language tasks, such as translation, tagging and
summarization.

The task is deﬁned over sequences of symbols,
{x1, ...xn|xi ∈ X}, where X is the input alphabet.
Each symbol x ∈ X is uniquely associated with
its own output alphabet Yx. Output is created by
taking each individual symbol xi in the sequence
and rewriting it as any sequence of k symbols from
Yxi. To do the task, the model must learn align-
ments between the input and output symbols, and
preserve the simple local syntactic conditions (ev-
ery group of k symbols must come from the same
input alphabet Yx).
As an example,

let X = {A, B}, YA =
{a1, a2, a3}, YB = {b1, b2, b3}, and k = 3.
Each ai and bi has 2 possible values, ai1 or
ai2 and bi1 or bi2 respectively. Thus, mapping
an input symbol to 48 (8 ∗ 3!) possible permu-
tations. A possible valid output for the input
AB is a21a32a11b32b11b22. Note that such valid
strings are selected at random when generating the
dataset. We allow this stochasticity in the outputs
in order to prevent the model from resorting to
pure memorization. For our task, |X| = 40 and
each xi has a corresponding output alphabet Yxi
of size 16.

2The sensitivity of generalization is also hinted at in Mc-
Coy et al. (2018) who additionally note performance varia-
tions across initializations

The models we use are single layer, unidirec-
tional, seq2seq LSTMs (Hochreiter and Schmid-
huber, 1997) with bilinear attention (Luong et al.,
2015) and trained with vanilla SGD. To determine
the epoch to stop training at, we create a valida-
tion set of 2000 samples with the same character-
istics as the training set, i.e., of length 5-10 with
no repeated symbols. Training is stopped once ac-
curacy3 on the validation set either decreases or
remains unchanged. The size of the hidden state
and embeddings were chosen such that they were
as small as possible without reducing validation
accuracy, giving a size of 32.

Tuning hyperparameters is often done on a vali-
dation set drawn from the same distribution as the
training set (as opposed to validating on data from
a different distribution) which motivated our initial
decision to use a validation set of characteristic in-
puts to decide the epoch to stop at. However, we
noticed only small variation in the validation per-
formance upon using different learning rates and
dropout probabilities (where dropout was applied
to the input and output layers). In order to ﬁne tune
these parameters to avoid extreme overﬁtting, we
created another validation set consisting of 5000
samples of ”uncharacteristic” inputs, i.e., inputs
with repeated symbols and varying from length 3-
12. These two hyperparameter values were set to
0.125 and 0.1, respectively, according to the per-
formance on this validation set, averaged across a
set of randomly chosen random seeds. All other
hyperparameters were also decided using this val-
idation set. Further training details are listed in
Table 1.

4 Experiments

To generalize to any input sequence, a model
must: (1) learn the generalizable structure - the

3We compute accuracy as # times the model produced a valid output

.

# samples

Seed
2787
5740
10000
14932
28897
30468

Standard
99.88
99.86
99.86
99.73
99.87
99.87

Repeat
94.65
45.70
98.55
87.05
99.85
86.35

Short
42.05
56.55
32.80
42.20
47.40
96.35

Long
23.05
97.60
0.15
29.75
1.40
12.90

Table 3: Accuracy % on the test sets for selected
runs out of 50 with different random seeds.

Mean
Std.
Min.
Max.

Standard
99.85
0.03
99.73
99.88

Repeat
86.67
13.39
45.70
99.85

Short
64.36
18.61
32.80
96.35

Long
32.09
20.63
0.15
97.60

Table 4: Accuracy % summarized across all 50
runs with different random seeds.

The distribution of model accuracy measured at
instance level on the four test sets across all the
50 seeds is given in Figure 1. All models perform
above 99% on the standard set, with a deviation
well below 0.1. However, the deviation on the
other two sets is much larger, ranging from 13.39
for the repeat set to 20.63 for the long set. In gen-
eral, the model performs better on the repeat set
than on the short and long sets. Performance on
the short and long sets is not always bad, some
seeds giving performances of above 95% for either
the short or long set. Ideally, we would like a seed
which performs good on all the test sets; however,
this seems hard to obtain. The highest average per-
formance across the non standard test sets for any
seed was 79.52%. Learning to generalize for both
the repeated and longer inputs seems even harder,
with the Pearson correlation between performance
on the repeat and long sets being -0.71.

We provide the summary statistics across all 50
runs (50 different random seeds) in Table 4, which
gives the mean, standard deviation, minimum, and
maximum accuracies across all random seeds. We
additionally provide a sample of performances for
some individual random seeds in Table 3, with
the highest and lowest accuracies in each column
highlighted.

6 Related Work

Elman (1991) provides one of the earliest works
investigating the ability of RNNs to capture prop-
erties of language necessary for generalization.
Further work explored how RNNs can learn con-

Figure 1: Accuracy % distribution across 50 runs
with different random seeds on the four test sets.

Size
Src Length
Tgt Length

Standard
2k
5-10
15-30

Repeat
2k
5-10
15-30

Short
2k
1-4
3-12

Long
2k
11-15
33-45

5 Results

Table 2: Details about the four test sets used in our
experiments.

alignments between input and output alphabets,
and (2) not learn any dependencies among input
symbols or sequence length. To test the extent to
which (2) is met, we train seq2seq-attention mod-
els with 100,000 randomly generated samples with
inputs uniformly generated with lengths 5-10 and
no input symbol appearing more than once in a
single sample.
If the model learned alignments
without picking up other dependencies among in-
put symbols or input lengths then the resulting
model should have little problem in handling in-
puts with repeated symbols or different lengths,
despite never seeing such strings.

For evaluation we trained 50 different models
with the same conﬁguration, chosen with a valida-
tion set, but with different random seeds. We cre-
ated 4 different test sets, each with 2000 randomly
generated samples. The ﬁrst test set consists of
samples that are characteristic of the training set,
having lengths 5-10 and no repeats (Standard).
The second set tests the model’s ability to gener-
alize to repeated symbols in the input (Repeat).
The third and fourth sets test its ability to general-
ize to different input lengths, strings of length 1-4
(Short) and 11-15 (Long) respectively. Table 2
provides further information on the 4 different test
sets.

text free languages (Wiles and Elman, 1995; Ro-
driguez and Wiles, 1998) as well some con-
text sensitive languages (Gers and Schmidhuber,
2001). Recent work has moved outside the for-
mal language space, with experiments that indi-
cate RNNs may capture the hierarchical structure
of natural language syntax, despite not having any
hierarchical bias built in the model or the data
(McCoy et al., 2018; Gulordava et al., 2018).

Though these models appear to capture system-
atic structure necessary for generalization, how
they do so is often extremely counter intuitive
(Williams et al., 2018; Bernardy and Lappin,
2017). Lake and Baroni (2018) has questioned the
systematicity with which these models learn. The
same work also makes similar observations about
the difﬁculty of generalizing to longer length
strings. Despite the difﬁculty models have gen-
eralized to longer length strings; they note that the
model only needs to see a relatively small amount
of longer length strings during training in order to
generalize (up to the length of the longest string
shown in training).

Our experiments indicate that the ﬁnal model’s
ability to generalize is highly dependent on the
random seed.
In should be noted however that
the random seed has an effect on several compo-
nents of the training process, most notably, the ex-
act initialization of the network and the order in
which training samples are shown. Though the
exact value of the initialization likely plays a fac-
tor, recent work by Liska et al. (2018) gives evi-
dence that the order training data is presented may
play an equally large part in determining whether
a model achieves generalization.

7 Conclusions

The variability in generalization on uncharacteris-
tic inputs (and thus, the extent of linguistic gener-
alization) given different random seeds is alarm-
ing, particularly given the fact that the standard
test set performance remains mostly the same re-
gardless. The task presented here was easy and
simple to analyze, however, future work may be
done on natural language tasks.
If these prop-
erties hold it might indicate that a new evalua-
tion paradigm for NLP should be pushed; one that
emphasizes performance on uncharacteristic (but
structurally sound) inputs in addition to the data
typically seen in training.

Acknowledgements

This work is supported in part by the National Sci-
ence Foundation under Grant IIS-1617969.

References

Yonatan Belinkov and Yonatan Bisk. 2018. Synthetic
and natural noise both break neural machine trans-
lation. 6th International Conference on Learning
Representations .

Yonatan Belinkov, Nadir Durrani, Fahim Dalvi, Hassan
Sajjad, and James Glass. 2017. What do neural ma-
chine translation models learn about morphology?
In Proceedings of the 55th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers). Association for Computational Lin-
guistics, pages 861–872.

Luisa Bentivogli, Arianna Bisazza, Mauro Cettolo, and
Marcello Federico. 2016. Neural versus phrase-
based machine translation quality: a case study. In
Proceedings of the 2016 Conference on Empirical
Methods in Natural Language Processing. Associa-
tion for Computational Linguistics, pages 257–267.

Jean-Philippe Bernardy and Shalom Lappin. 2017. Us-
ing deep neural networks to learn syntactic agree-
ment. LiLT (Linguistic Issues in Language Technol-
ogy) 15.

Noam Chomsky. 1965. Aspects of the Theory of Syn-

tax. The MIT Press, Cambridge.

Jeffrey L Elman. 1991. Distributed representations,
simple recurrent networks, and grammatical struc-
ture. Machine learning 7(2-3):195–225.

Allyson Ettinger, Sudha Rao, Hal Daum III, and
Emily M Bender. 2017. Towards linguistically gen-
eralizable nlp systems: A workshop and shared task.
In Proceedings of the First Workshop on Building
Linguistically Generalizable NLP Systems.

F. A. Gers and E. Schmidhuber. 2001. Lstm recur-
rent networks learn simple context-free and context-
sensitive languages. IEEE Transactions on Neural
Networks 12(6):1333–1340.

Kristina Gulordava, Piotr Bojanowski, Edouard Grave,
Tal Linzen, and Marco Baroni. 2018.
Color-
less green recurrent networks dream hierarchically.
NAACL .

Sepp Hochreiter and J¨urgen Schmidhuber. 1997. Long
short-term memory. Neural Comput. 9(8):1735–
1780.

Brenden Lake and Marco Baroni. 2018. Still not sys-
tematic after all these years: On the compositional
skills of sequence-to-sequence recurrent networks.
ICLR 2018 .

Tal Linzen, Emmanuel Dupoux, and Yoav Goldberg.
2016. Assessing the ability of lstms to learn syntax-
sensitive dependencies. TACL 4:521–535.

Adam Liska, German Kruszewski, and Marco Baroni.
2018. Memorize or generalize? searching for a
compositional rnn in a haystack .

Thang Luong, Hieu Pham, and Christopher D. Man-
ning. 2015. Effective approaches to attention-based
neural machine translation. In EMNLP. The Asso-
ciation for Computational Linguistics, pages 1412–
1421.

R. Thomas McCoy, Robert Frank, and Tal Linzen.
2018. Revisiting the poverty of the stimulus: hier-
archical generalization without a hierarchical bias in
recurrent neural networks. CoRR abs/1802.09091.

Paul Rodriguez and Janet Wiles. 1998. Recurrent
neural networks can learn to implement symbol-
sensitive counting. In Advances in Neural Informa-
tion Processing Systems. pages 87–93.

L. G. Valiant. 1984. A theory of the learnable. Com-

mun. ACM 27(11):1134–1142.

Janet Wiles and Jeff Elman. 1995. Learning to count
without a counter: A case study of dynamics and ac-
In Pro-
tivation landscapes in recurrent networks.
ceedings of the seventeenth annual conference of
the cognitive science society. MIT Press Cambridge,
MA, s 482, page 487.

Adina Williams, Andrew Drozdov, and Samuel R.
Bowman. 2018. Do latent tree learning models iden-
Transac-
tify meaningful structure in sentences?
tions of the ACL (TACL) abs/1709.01121.

