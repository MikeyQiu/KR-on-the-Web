7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
1
v
2
4
4
8
0
.
1
1
7
1
:
v
i
X
r
a

From Monte Carlo to Las Vegas:
Improving Restricted Boltzmann Machine Training Through Stopping Sets

Pedro H. P. Savarese
Toyota Technological Institute at Chicago
Chicago, IL, 60637
savarese@ttic.edu

Mayank Kakodkar
Department of Computer Science
Purdue University
West Lafayette, IN, 47903
mkakodkar@purdue.edu

Bruno Ribeiro
Department of Computer Science
Purdue University
West Lafayette, IN, 47903
ribeiro@cs.purdue.edu

Abstract

We propose a Las Vegas transformation of Markov Chain
Monte Carlo (MCMC) estimators of Restricted Boltzmann
Machines (RBMs). We denote our approach Markov Chain
Las Vegas (MCLV). MCLV gives statistical guarantees in ex-
change for random running times. MCLV uses a stopping
set built from the training data and has maximum number of
Markov chain steps K (referred as MCLV-K). We present
a MCLV-K gradient estimator (LVS-K) for RBMs and ex-
plore the correspondence and differences between LVS-K and
Contrastive Divergence (CD-K), with LVS-K signiﬁcantly
outperforming CD-K training RBMs over the MNIST dataset,
indicating MCLV to be a promising direction in learning gen-
erative models.

Introduction
Despite the signiﬁcant recent advances in training discrim-
inative neural network models, training generative mod-
els has proven more elusive. As with most neural net-
work training methods, algorithms for training Restricted
Boltzmann Machines (RBMs) (Hinton 2002; Hinton 2012;
Smolensky 1986), a class of energy-based generative neural
network models, are unreasonably effective. Though, some
argue, not yet effective enough for modern applications. In
this work we seek to better understand and improve the train-
ing of RBMs.

RBM is a family of energy-based models with probability
distribution over a state vector x = (v, h) (assumed discrete
nV (e.g. an image) and binary latent
w.l.o.g.), v
}
nH ,
variables h

0, 1

∈ {
∈ {

0, 1
}
p(x; W) =

1
Z(W)

e−E(x;W),

(1)

where Z(W) = (cid:80)
ﬁnite mean, E[Z(W)] <
function given by

∞

x e−E(x;W) is a partition function with
, and E(x; W) is an energy

(cid:16)

E

x = (v, h); W = (W(cid:48), b, a)

(cid:17)

=

vTW(cid:48)h

bTv

aTh.

−

−

−

RBMs proved highly successful in many tasks, such as data
generation (Hinton 2002; Hinton, Osindero, and Teh 2006;

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Hinton 2012) and as a pre-training step for feedforward neu-
ral networks (Salakhutdinov and Hinton 2009), among others
(see Bengio and Delalleau (2009) and Erhan et al. (2010)).
As computing Z(W) directly is intractable for large state
spaces, Markov Chain Monte Carlo (MCMC) methods are
widely used to compute statistics of these models (includ-
ing estimating the gradient ∂p(x; W)/∂W). MCMC works
by running a Markov chain (MC) Φ(W) with steady state
p(x; W) to equilibrium. Metropolis-Hastings and Gibbs sam-
pling are two general such approaches.

However, in the real world, one is expected to run the
MC Φ(W) for only K steps, returning a state x
ˆπ(K),
“approximately sampled” from the Markov chain’s true steady
state distribution p(x; W). Starting from a random state, K
needs to be quite large for this method to work.

∼

Contrastive Divergence (CD-K) (Hinton 2002; Hinton
2012), improves this procedure by starting the MC from the
visible states of the training data. Empirically, CD-K works
tremendously well to train RBMs with few hidden units (nH
small) even for K as low as K = 1 (Carreira-Perpi˜n´an and
Hinton 2005; Hinton 2002; Hinton 2012).

For high-dimensional RBMs, CD-K is less efﬁcient
and the reason is conjectured to be the longer mixing
times (Sutskever and Tieleman 2010), although concrete evi-
dence is anecdotal as mixing times are hard to assess in high
dimensions. While not the main focus of our paper, armed
with our techniques, we will further empirically explore pos-
sible reasons for this high-dimensional difﬁculty.

A Las Vegas transformation of RBM training. The main
focus of this paper is to recast MCMC estimation of RBMs
as a Markov chain algorithm with stopping sets obtained
from the training data. The size of the stopping set is a hyper-
parameter that can be dynamically adapted during training
based on computational trade-offs.

In standard RBM training using MCMC, the MC stops
after a predeﬁned number of K steps. In our approach, the
MCMC can also stop if it reaches one of the states in the
stopping set. Thus, MCMC running times are random (and
are, in average, shorter than K). This approach is closer to a
Las Vegas algorithm than a Monte Carlo algorithm: we aim
to get perfect samples of a quantity with an algorithm that
has random running times. We denote this approach Markov
Chain Las Vegas with K maximum steps (MCLV-K).

We show that, by dynamically adapting K, MCLV-K can
ﬁnd unbiased estimates of the direction of the RBM gradient.
Moreover, in contrast to standard MCMC, MCLV-K has an
extra piece of information: whether or not the stopping set
has been reached. We show that this knowledge provides
novel ways to estimate gradients and partition functions of
energy-based models.

And perhaps, one of the most interesting observations in
this paper comes from the correspondence between CD-K
and MCLV-K. MCLV-1 is quite similar to CD-1 except for
is a set of stopping states
an added
S
2, MCLV-K is distinct from
deﬁned later. Clearly, for K
≥
CD-K, as the MC of MCLV-K may stop before performing
all K steps.

-stopped ﬂag, where

S

Analyzing CD-K through our Las Vegas transformation, it
is clear that CD-K has an unintended inspection paradox bias
that can be corrected to further improve the RBM learning.
Using the reached-stopping-set ﬂag of MCLV-K, we design
a new gradient estimator, denoted Las Vegas Slope (LVS),
that empirically gives signiﬁcantly better parameter estimates
than standard CD-1 and CD-10 over the MNIST dataset
according to the model’s likelihood. MNIST is used in our
experiments due to the long history of RBM development
over this dataset.

Contributions. We claim the following contributions: (1)
We introduce Markov Chain Las Vegas (MCLV-K). We show
MCLV-K gives ﬁnite-sample unbiased and asymptotically
consistent estimates of a variety of statistics of RBMs; fur-
ther, we give two convergence bounds. We also show how to
theoretically and empirically reduce the MCLV-K random
running times using the training examples. (2) We show how
MCLV-K can be used to design new ways to train Restricted
Boltzmann Machines; we use MCLV-K to propose a novel
RBM gradient estimator, Las Vegas Slope (LVS), which our
empirical results show (for K
) improves pa-
}
rameter estimates of RBM over CD-1 and CD-10, over the
MNIST dataset.

1, 3, 10

∈ {

MCLV-K Estimation with Statistical
Guarantees
In what follows we introduce some of the deﬁnitions used
throughout our paper. We introduce the concept of a tour (a
MC which returns to the same state) and show that the return
probability can be increased by collapsing a set of stopping
states into a single state in Deﬁnition 1. The MC stops when it
either reaches K steps or one of the states in the stopping set.
Corollary 1 describes how this collapsing can be performed
while preserving the statistical properties of the MC.

Theorem 1 introduces the MCLV-K estimator (that, among
others, can estimate the partition function) and proves it is
consistent, giving error bounds. And Theorem 2 shows that
this estimator is also ﬁnite-running-time unbiased. The ﬁrst
results provides unbiased estimates of the partition function,
and generalize these unbiased estimates to a broad family of
functions.

The reader only interested in RBM gradient estimates can
safely skip to the next section on training RBMs, after reading

the preliminaries and the deﬁnition of the RBM stopping sets.

∈

∈

×

V , and a hidden vector h

Preliminaries. We deﬁne state x = (v, h) to consist of a
visible vector, v
H, where H
and V are the set of all hidden and visible states, respectively.
Let Φ(W) be an irreducible Markov chain with steady state
p(x; W) over the states Ω := V
H. A MC is irreducible
if all states communicate, which is trivially true for RBMs
since the co-domain of the logistic function is (0, 1) for any
input in R. If the Markov chain Φ(W) starts in equilibrium
(or runs until equilibrium), the next transition gives us one
independent sample x from the steady state p(x; W). The
N
n=1 denotes the N visible examples of the training
set
data. We often use (
), to denote that the statement
), as in g(
·
·
over g is true for any valid input value.
RBMs can be trained by optimizing its parameters W in
order to maximize the likelihood of the training data. Taking
partial derivatives with respect to the weights results in a
surprisingly simple update rule for W:

vn

{

}

1
N

=

n=1

(cid:88)

h∈H

N
(cid:88)

∂ log((cid:80)

h p(x = (vn, h); W))

∂W

(cid:16) 1
N

N
(cid:88)

n=1

p(h
|

vn; W)vnhT

(cid:88)

p((v, h); W)vhT (cid:17)

−

v∈V

=

1
N

N
(cid:88)

n=1

vnEW[h
vn]T
|

−

EW[vhT ],

(2)

where the l.h.s. term of eq. (2) (also called positive statis-
tics) is easily calculated from the training data. However, the
r.h.s. term of eq. (2) (negative statistics) corresponds to the
gradient of the partition function Z(W), which is generally
intractable to compute. More speciﬁcally, computing E[vhT ]
requires collecting model statistics p(v, h), either by running
the MCMC Markov chain Φ(W) to equilibrium from any
starting state or by direct computation of the expected value
if we know the partition function Z(W).

If the Markov chain Φ(W) is not run until equilibrium the
gradient estimates have an unknown bias. In what follows we
use Markov chain tours to take care of this bias.

Tours and Stopping Sets. Deﬁne a tour to be a sequence
of ξ steps of the Markov chain (X(1), . . . , X(ξ)) s.t. the state
of the (ξ + 1)-st step is the same as the starting state, i.e.,
X(1) = X(ξ + 1). Let Ξ(r) = (X(r)(1), . . . , X(r)(ξ(r)))
denote the r-th tour, r
1. The strong Markov property
= r, the sequences Ξ(r) are independent
guarantees that if s
of Ξ(s). This independence guarantees that both Ξ(r) and Ξ(s)
are sample paths obtained from the equilibrium distribution
of the Markov chain. We will later use this property to obtain
unbiased estimators of the partition function.

≥

However, as is, tours are not a practical concept for RBMs
because in such a large state space Ω, the tour is unlikely
to return to the same starting state. We will, however, use a

Markov chain property common to Metropolis-Hastings and
Gibbs sampling Markov chains to signiﬁcantly increase the
probability of return by collapsing a large number of states
into a single state.

RBM stopping set. Our stopping set
S
(m)
N =
den states from the training data,
vn
hn
{
ten we will use m = 1, but we can change the size of
by changing m. The stopping set contains all hidden states in

uses sampled hid-
h(1)
n , . . . , h(m)
:
H
{
N
n=1 is the training data. Of-
}
(m)
N

vn; W)
, where
}

p(h
|

H

∼

n

H

(m)
N and all possible visible states
(m)
HN =
S

(cid:91)

h∈H(m)

N ,v∈V

(v, h)
}
{

,

(3)

H

H

S ⊂

v; W) is the conditional probability of h given v
and p(h
|
using model parameters W. Most of our theoretical results
apply to any stopping set that is a proper subset of the state
(m)
Ω. In practice, note that we do not store
space,
HN in
S
(m)
N in memory, as reaching a
memory, rather we only keep
(m)
hidden state in
N is enough to guarantee we need to stop.
This requires only O(mN ) space, where N is the number of
training observations.
Deﬁnition 1 (Stopping-set-Collapsed MC). Consider an ar-
bitrary stopping set
Ω. A state-collapsed MC is a trans-
formation of MC Φ(W) with state space Ω, into a new MC
Φ(cid:48)(W) with state space Ω(cid:48) = Ω
, where S is a new
S
}
\S ∪ {
. The transition
state formed by collapsing all the states in
probabilities between states Ω(cid:48)
Ω are the same as in Φ(W).
The transition probabilities from S to states in Ω(cid:48)

S ⊂

are

∩

S

S
}

\{

(cid:80)

y∈S e−E(y;W)pΦ(y, x)
,
S
ZS (W)
}
y∈S e−E(y;W), and pa indicates the

Ω(cid:48)

\{

∈

x

∀

,

where ZS (W) = (cid:80)
probability transition matrix of MC a.

The transitions from states Ω(cid:48)

pΦ(cid:48)(x, S) =

S
}

\{
pΦ(x, y),

to state S are

x

∀

∈

Ω(cid:48)

.

S
}

\{

(cid:88)

y∈S

pΦ(cid:48)(S, x) =

It is important to distinguish the MC in Deﬁnition 1
from general MC state aggregation methods such as
lumpability (Buchholz 1994) and interactive aggregation-
disaggregation methods (Stewart 1994). In the following
corollary, we see that the MC in Deﬁnition 1 affects the
steady state, unlike general MC aggregation methods that
leave the steady state undisturbed. Thankfully, later we will
be able to correct the distortion imposed by Deﬁnition 1
because we know the steady state distribution of the states
inside
Corollary 1 (Simulating Φ(cid:48)(W) from Φ(W)). For any MC
Φ(W) resulting from standard Gibbs sampling or Metropolis-
Hastings (MH) MCMCs, we can cheaply simulate the transi-
tions in and out of S of Def inition 1 by: (a) pΦ(cid:48)(S, x),
with
we ﬁrst sample a state y with replacement from
probability e−E(y;W)/ZS(W) and then perform a transi-
tion pΦ(y, x); (b) pΦ(cid:48)(x, S) is also simulated by performing

up to a normalizing constant.

S

S

a transition pΦ(x, y), and stopping the MC if y
simulated Φ(cid:48)(W) is ergodic and time-reversible.

∈ S

. The

The proof is in the appendix. It follows from the fact that
Φ(W) is the MC of Gibbs sampling and MH and, thus, time-
reversible (Aldous and Fill 2002). Time reversibility imposes
a set of necessary and sufﬁcient conditions in the form of
detailed balance equations (Gallager 2013, Theorem 6.5.2). A
little algebra shows that the sampling procedure in Corollary 1
using Φ(W) is stochastically equivalent to Φ(cid:48)(W).

S

MCLV-K Estimator
Following Corollary 1, a tour starts by sampling the initial
tour state x and stopping when the tour reaches the stopping
. We now want to truncate all return times of tours
set
greater than some value K
1, i.e., we will only observe the
≥
complete r-th tour (x, X(r)(2), . . . , X(r)(ξ(r))) if ξ(r)
K.
Otherwise, we observe only the ﬁrst K states of the tour:
(x, X(r)(2), . . . , X(r)(K)). The
-stopped ﬂag for tour r is
true if ξ(r)
Lemma 1 (Perfect sampling of tours). Let

K, otherwise it is false.

≤

≤

S

(x, X(i)(2), . . . , X(i)(k))
{

k =
C
be a set of tours of length k
S
≤
according to some distribution.
Then, there exists a distribution Gk such that the random

i
}
K, with x sampled from

variables

k

G

≡ {

g(σ) :

σ

∀

k
∈ C

}

are i.i.d. samples of Gk, with g deﬁned over the appropriate
σ-algebra (e.g., k RBM states) with

(cid:107)
Moreover, if we perform M tours, these tours ﬁnish in ﬁnite
M
time and
r=1 is an i.i.d. sequence with a well-deﬁned
}
probability distribution p(ξ(·) = k).

.
≤ ∞

ξ(r)
{

)
1
(cid:107)

g(
·

The Las Vegas parallel is observed when we notice that
any MCMC metric can be perfectly sampled from the tours.
The tour lengths are sampled from a distribution p(ξ(·) = k).
And, for any given tour length k, the metric of interest g is
perfectly sampled from Gk. The maximum tour length K
only cuts off the tail of p(ξ(·) = k) beyond k > K, which
allows us to bound the sampling error.
Theorem 1 (MCLV-K RBM Estimator). Let p(x; W),
E(x; W), and Z(W) be as described in eq.(1). Let

F (W, f ) = Z(W)

f (x)p(x; W),

(4)

(cid:88)

x∈Ω

Rn, n

1,

≥

∞

, and

1 <
(cid:107)

1 is the l1
where f : Ω
)
f (
·
(cid:107)
→
norm. Let Φ(W) be a time-reversible MC with state space Ω
and steady state distribution
Ω be
p(x; W)
{
a proper subset of the states of Φ(W).

(cid:107) · (cid:107)
x∈Ω. Let
}
with probability e−E(x(cid:48);W)/ZS (W) and
let (X(r)(1) = x(cid:48), X(r)(2), . . . , X(r)(ξ(r))) be a sequence
of discrete states of the r-th
-stopped tour, where we stop the
tour if one of two conditions are met: (a) we have reached K
steps, or (b) when we reach any state in

, i.e., X(r)(ξ +1)

Sample x(cid:48)

S ⊂

∈ S

S

. Then, for R

∈
be the set of ﬁnished tours
K steps, (as deﬁned in Corollary 1). For the sake

1 tours, let

(R)
k
C

≥

S

S
in k

≤

of simplicity, we henceforth refer to
estimator

simply as

k. The

C

ˆF (K,R)(W, f ) =

e−E(y;W)

(R)
k
C
(cid:88)

1

(cid:80)K

(cid:88)

k=1 |C

k

|

y∈S

k
(cid:88)

f (X(h))

(5)

K
(cid:88)

×

k=1

(X(1),X(2),...,X(k))∈Ck

h=1

−

1.
(cid:107)

(E[ξ]

(cid:80)K−1

·
f (x)

supx∈Ω (cid:107)

is an estimate of F (W, f ) in eq. (4) with a bias upper
bounded by B
k=1 p(ξ > k)), where p(ξ > k)
is the probability that a tour has length greater than k and
B

≥
Theorem 1 gives a basic estimator from the MCMC tours.
The gradient estimates will be explicitly derived in the next
section. In our experiments we show how to estimate p(ξ >
k). For the partition function and gradient estimates, it is
also trivial to obtain a bound on B using the RBM weights
W (Bengio and Delalleau 2009).
Theorem 2 (Geometrically Decaying Tour Length Tails).
Let p(ξ > k) be the probability that a tour has length
greater than k. If there exists a constant (cid:15) > 0 s.t.
(cid:15) then, there exists 0 < α < 1,
inf x∈Ω\S
log p(ξ > k) = k log α + o(k), i.e., ξ has a geometrically
decaying tail.

y∈S pΦ(x, y)

(cid:80)

≥

Theorem 2 shows conditions of a geometric decay in the
tail of p(ξ > k). And in practice it means that tours cannot be
“heavy tail” long and, thus, making the bound in Theorem 1
tighter.

MCLV-K Finite-Sample Unbiasedness
In what follows we dynamically increase K until the MC
reaches a state in the stopping set.

The following theorem shows that this procedure gives

unbiased estimates of F (W, f ).
Theorem 3 (Unbiased Partition-scaled Function Estimates
by Dynamic Adaptation of K). Consider the estimator in
Theorem 1 and let us dynamically grow K (denoted Kdyn)
until the MC reaches a stopping state in
1
tours,

. Then, for R

≥

S

E[ ˆF (Kdyn,R)(W, f )] = F (W, f ),
(6)
is an unbiased estimator and the estimator is consistent,
i.e., almost surely limR→∞ ˆF (Kdyn,R)(W, f ) = F (W, f ),
and Kdyn is ﬁnite.

(cid:15)

p

(cid:17)

≤

Moreover, for (cid:15) > 0,
(cid:16)(cid:13)
ˆF (Kdyn,R)(W, f )
(cid:13)
(cid:13)

F (W, f )

αR,ZS (W),

(ZS (W))2δ + 1

−
the number of

(cid:13)
(cid:13)
(cid:13)1 ≥
tours, αR,ZS (W) =
where, R is
(cid:16) (Z(W))2
B2
1 is an upper
supx∈Ω (cid:107)
(cid:15)2R
bound on the absolute value of f (
) over the state space Ω,
·
δ is the spectral gap of the transition probability matrix of
Φ(W).
Corollary 2 (Unbiased Partition Function Estimation). Let
f1(x) = 1, then

f (x)
(cid:107)

, B

≥

(cid:17)

E[ ˆF (Kdyn,R)(W, f1)] = Z(W),

Training Restricted Boltzmann Machines

In what follows we explore the connections between MCLV-
K and learning RBMs using MCMC methods. First, we
show how MCLV-K can provide a ﬁnite-sample unbiased
and asymptotically consistent estimate of the direction of the
RBM gradient.

MCLV-K Gradient Estimates

In what follows we will provide an estimate of the gradient
of the negative log-likelihood of RBMs using MCLV-K. Our
gradient will have a scaling factor but the gradient direction
is the same as the original gradient:

Z =

W

∇

L

Z(W)
ZS (W)

(cid:32)

1
N

N
(cid:88)

n=1

vT
n

EW[h
vn]
|

−

EW[vTh]

.

(cid:33)

The scaling Z(W)/ZS (W) is constant given W. In our
current implementation, we use Corollary 2 to estimate
Z(W)/ZS (W) and divide the gradient by it, compensat-
ing for the scaling at essentially no computational or memory
cost.

Corollary 3 (LVS-K: The Las Vegas Slope Estimator). Let
, x, the tour (x, X(r)(2), . . . , X(r)(ξ(r))), R, K,
Φ(W),
and
k be as deﬁned in Theorem 1. Then, for a learning rate
C
η > 0,

S

(cid:92)
W
L

∇

LVS(K, R) = η

(cid:32)

(cid:98)E[ξ]
N

N
(cid:88)

n=1

∂E(xn; W)
∂W

(cid:80)K

(cid:80)

k=1

(X(1),...,X(k))∈Ck

i=1

(cid:80)k

∂E(X(r)(k);W)
∂W

−

(cid:80)K

k=1 |C

k

|

(7)

(cid:33)
,

is a consistent (K, R
gradient in eq.(2), where (cid:98)E[ξ] =
expectation of the tour lengths.

→ ∞

) estimator of the energy-model
is the empirical

(cid:80)K
(cid:80)K

k=1 |Ck|k
k=1 |Ck|

Moreover, the contribution of a tour of length k to the

negative statistics of the gradient is proportional to

P [ξ = k]

k

E[∂E( ˜Xk; W)/∂W],

·

·

where ˜Xk is a random state of a tour of length k. If the
Markov chain Φ(W) satisﬁes the conditions of Theorem 2,
k = e−O(k), so that extremely long tours do
then P [ξ = k]
not inﬂuence the gradient.

·

Corollary 4 (Unbiased Gradient Direction Estimator:
LVS-Kdyn). Consider the estimator in Corollary 3 and let us
dynamically grow K (denoted Kdyn) until the MC reaches a
stopping state in

. Then,

S
(cid:104) (cid:92)
W
L
∇

E

(cid:105)
LVS(Kdyn, R)

∝ ∇

W

L

Z,

is an unbiased estimate of the RBM gradient direction.

The proofs of the two above corollaries follow directly

is an unbiased estimator of the partition function.

from Theorems 1 and 3, respectively.

Correspondence and Differences Between LVS-K
and CD-K

In this section we explore a correspondence between LVS-K
(proposed in Corollary 3) and CD-K to train RBMs. We will
also emphasize some differences that will give us some new
insights into CD-K. The correspondence is as follows: (a)
N
i=1; (b) the
consider a mini-batch of training examples
}
(m)
HN , described in eq.(3); (c) the number of
stopping set is
S
tours R of LVS-K is the number of training examples in the
mini-batch N , i.e., R = N .

vi
{

−

One can readily verify that the Gibbs sampling updates
of LVS-K and CD-K are similar except for the following
(m)
key differences: (i) LVS-K starts at a state x of
HN with
S
probability proportional to exp(
E(x; W)), CD-K starts
uniformly over the training examples. Thus, the negative
phase of LVS-K tends to push the model away from unbal-
anced probabilities over the training examples. (ii) at every
Markov chain step, LVS-K stops early if it has reached a
(m)
HN , while CD-K will always perform all K steps.
state in
S
(iii) the gradient estimates of LVS-K use only the completed
tours, while CD-K uses all tours; (iv) the gradient estimates
of LVS-K use all states visited by the MC during a tour,
while CD-K uses only the last visited state.

A long sequence of states visited by the CD-K Gibbs
sampler can be broken up into tours if the stopping state
contains only the starting state. Figure 1 illustrates three
MCMC runs starting at visible states representing “7”, “3”,
and “4”, broken up into tours whenever the starting hidden
state is sampled again. Starting from visible state “7”, CD-K
ignores the completed tour Tour 1, which LVS-K uses for
its gradient estimate; and CD-K proceeds to use the state in
the middle of Tour A for its gradient estimate. CD-K also
uses a state in the incomplete Tour 2, which LVS-K ignores
as incomplete. Finally, CD-K ignores Tour 3 and proceeds
to use the state in the beginning of Tour B for its gradient
estimate.

≥

This means that, for K

2, CD-K is more likely to sam-
ple states from longer tour than shorter tours. This bias is
the inspection paradox (Wilson 1983). Interestingly, this bias
makes CD-K, K
2, signiﬁcantly different from CD-1,
which has no such bias. Note that LVS-K has the opposite
bias: it ignores tours longer than K; the bias of LVS is mea-
surable (Theorem 1) if we can estimate the average tour
length.

≥

Figure 1: CD-k bias towards longer tours for k

2;

≥

|

∗

H

W

W
|

Computational Complexity
In this section we give the time and space complexities of
LVS-K and CD-K. Let
denote the number of elements
nH and nX = nV + nH . In terms of space,
in W, = nV
(m)
LVS-K needs O(N m nX ) space to store the
N which is
m times the requirement for CD-K. At every epoch, LVS-K
samples a stopping set, which involves a matrix multipli-
cation followed by algebraic operations over a matrix. The
matrix multiplication which takes O(N m
) upper bounds
|
the time. Computing the free energies of the hidden state also
takes the same time. Adding the states of the stopping set
to a heap for easier sampling takes O(N m) time and allows
us to sample starting states for the tours in O(N log(N m)).
Every Gibbs step is again bounded by the time taken for ma-
trix multiplication which takes a total of O(N
K) time.
Checking stopping set membership takes O(N KnX ) amor-
tized time assuming that standard algorithms used by hash
sets, e.g. MD5, take O(nX ) time to evaluate. Computing the
gradient and updating W takes O(N

Therefore LVS-K takes O(N KnX + N m

|
+
|
(m + K)) time, compared to CD-
W
N K
|
≡
K which takes O(N K
O(K),
W
∴ the asymptotic complexity of CD-K and LVS-K are the
same.

). In the general case m

) time.

W
|

W
|

O(N

W

W

)
|

∈

|

|

|

|

|

|

|

Related Work
AIS, MC changes, and CD-K extensions. Annealed Im-
portance Sampling (AIS) (Neal 2005; Neal 2001) uses two
distinct Markov transitions kernels and has been applied by
Salakhutdinov and Murray (Salakhutdinov and Murray 2008)
to obtain unbiased estimates of the partition function of an
RBM. Like AIS, the Russian roulette pseudo-marginal likeli-
hood is also a Markov chain modiﬁcation to sample from the
steady state distribution (Lyne et al. 2015). These modiﬁca-
tions cannot be readily applied to the original RBM Markov
chain, nor they provide insights into the learning process.
MCLV-K is a new tool that can be used from visual inspec-
tion of convergence to proposing new gradient estimators, as
seen in our empirical results.

RBMs are powerful models (Mont´ufar and Morton 2015)
and the analysis of CD-K has a long history (Hinton 2012).
A few past studies have focused on how CD-K learns
well RBMs (Carreira-Perpi˜n´an and Hinton 2005; Yuille
2005), have some ﬁxable issues learning RBMs (Schulz,
M¨uller, and Behnke 2010; Fischer and Igel 2014; Prats,
Romero Merino, and Castrillejo 2014), may approximate
some objective function (Hinton 2002), or do not approx-
imate any objective function (Bengio and Delalleau 2009;
Sutskever and Tieleman 2010). Orthogonally, Persistent Con-
trastive Divergence (PCD) (Tieleman 2008) improves CD-
K in some problems by using the starting state of the CD-
K Markov chain as the end state of the previous training
epoch (simulating a single sample path, assuming the MC
does not change much between epochs, which is not always
true (Schulz, M¨uller, and Behnke 2010)). Clearly, PCD could
be adapted as a MCLV method, which we see as future work.
The presence of training data is key to the practicality of
MCLV. Without training data, obtaining error bounds with

MCLV can be prohibitively expensive. In the worst-case,
there is no polynomial time algorithm that can estimate the
probabilities of an RBM model within a constant factor (Long
=NP. But most real-world
and Servedio 2010), assuming P
machine learning problems are supposed to be much easier
than general MCMC results would have us believe. We are
given a good hint of what should be a larger number of high-
probability states in the steady state: the states containing the
training examples. Unfortunately, vanilla MCMC methods
do not incorporate this extra information to speed up conver-
gence in a principled way. We believe the lessons learned in
this paper will be invaluable to design new classes of Markov
chain methods tailored to machine learning applications.

Las Vegas algorithms for Markov chain sampling. Per-
fect Sampling (Corcoran and Tweedie 2002; Fill 1997; Fill
et al. 2000; Propp and Wilson 1996; Propp and Wilson 1998;
Wilson 2000) is an example of a Las Vegas algorithm for
MCMC applications. Unfortunately, energy-based models
can easily reach trillions of states while perfect sampling
methods rarely scale well unless some speciﬁc MC structure
can be exploited. We are unaware of clever CFTP construc-
tions for arbitrary energy-based models.

Mykland et al. (Mykland, Tierney, and Yu 1995) with a few
follow-up works ﬁrst proposed the use of regeneration in the
context of MCMC to estimate mixing times, however these
techniques are mostly of theoretical interest (Baxendale 2005;
Gilks, Roberts, and Sahu 1998; Hobert et al. 2002; Roberts
and Tweedie 1999) rather than of practical utility for energy-
based models. Path coupling is another alternative to estimate
mixing times (Bubley and Dyer 1997). More recently, path
coupling was used to develop a theory of Ricci curvature
for Markov chains (Ollivier 2009). The connections between
Ricci curvature estimation and MCLV-K are worth exploring
in future work.

×

Empirical Results
Our experiments use the MNIST dataset, which consists of
70,000 images of digits ranging from 0 to 9, each image hav-
ing 28
28 pixels (a total of 784 pixels per image), divided
into 55,000 training examples and 15,000 test examples. We
use this dataset for historical reasons. MNIST is arguably
the most extensively studied dataset in RBM training, e.g.
(Hinton 2002; Hinton 2012; Hinton, Osindero, and Teh 2006;
Carreira-Perpi˜n´an and Hinton 2005; Salakhutdinov and Hin-
ton 2009; Tieleman 2008; Bengio and Delalleau 2009). Our
goal is to show that MCLV-K is able to give new insights
into RBM training (and improved performance) even in a
studied-to-death dataset such as MNIST. The experimental
details of our empirical results are presented in the appendix.
We use LVS-1 to train the RBM model used in the following
experiments (CD-K tends to give very high probability to a
few examples in the training data). We observe little differ-
ence between LVS-1, LVS-3, and LVS-10 (for reasons that
will be clear soon).

RBM learning. Our ﬁrst set of empirical results com-
pares LVS-K, K
and

1, 3, 10

1, 10

, CD-K, K
}

∈ {

}

∈ {

}

∈ {

1, 10

PCD-K, K
by training an RBM using stochas-
tic gradient descent, where the gradient estimates are com-
puted using the respective methods. We train RBMs with
nH = 32 hidden neurons for a total of 100 epochs (inclu-
sive of 15 warm-up epochs of CD-1 for LVS-K), using a
learning rate of 0.1 which decays according to a Robbins-
Monro schedule. Weight decay and momentum were not
used. The initial W weights are sampled uniformly from
U
, where nV and nH denote the num-
ber of visible and hidden neurons, respectively. Hidden biases
are initialized as zero, while visible biases are initialized as
log(pi/(1
pi)) (Hinton 2012), where pi is the empirical
probability of feature i being active.

(cid:16) −0.1
√

0.1√

nV +nH

nV +nH

−

(cid:17)

,

The small number of hidden units is to enable us to eval-
uate the true performance: we compute the exact partition
function of the trained RBM and calculate the average log-
likelihood 1
n=1 log p(vn). All results are means calcu-
N
lated from 10 executions. In all LVS-K experiments we use
m = 1, for simplicity. The negative log-likelihood of LVS-K,
PCD-K and CD-K are presented in Table 1.

(cid:80)N

Subsequently, in order to compare our results with those
presented in Tieleman (2008), we train RBMs with nH = 25
and initial learning rates between 10−4 and 1. We observe
that larger learning rates (10−1 to 1) are more appropriate for
LVS-K, resulting in faster convergence and increased perfor-
mance. Small rates (e.g. 10−4) cause tours to rarely ﬁnish,
severely slowing down the training. On the other hand, CD-K
and PCD-K fail to converge with learning rates slightly larger
than 10−2. The results for this experiment, along with the
best learning rates for each method, are presented in Table 2.
In conclusion, LVS-K drastically (and paired t-test sig-
niﬁcantly) outperforms CD-K and PCD-K w.r.t. the log-
likelihood in all settings, even LVS-1 performs signiﬁcantly
better than PCD-10. However we were unable to reproduce
130 for PCD achieved by Tieleman
the likelihood of
(2008).

≈ −

Method
CD-1
CD-10
PCD-1
PCD-10
LVS-1
LVS-10
LVS-3

Training
-167.3 (2.7)
-154.3 (3.3)
-153.0 (4.9)
-139.3 (3.2)
-134.0 (1.0)
-133.3 (1.0)
-133.7 (0.8)

Testing
-166.6 (2.8)
-153.4 (3.3)
-152.1 (4.7)
-138.5 (3.3)
-133.3 (1.0)
-132.6 (1.0)
-132.9 (0.7)

Table 1: (Higher is better) Average log-likelihood on the
MNIST dataset using a RBM with 32 hidden neurons. Results
are means over 10 executions after 100 epochs.

Tours lengths and stopping state. We now analyze the
tour lengths as a function of: (a) nH , the number of hid-
den units, and (b) the size of the stopping set
, where
(m)
NH is built from the training data as deﬁned in eq.(3). Note
S
that the r-th tour ends at state X(r)(ξ) = (cid:0)v(r)(ξ), h(r)(ξ)(cid:1)
whenever X(r)(ξ + 1)
NH , and that the stopping criteria

(m)
NH |

|S

∈ S

Method Learning Rate
CD-1
0.01
CD-10
0.01
PCD-1
0.01
PCD-10
0.01
0.1
LVS-1
0.1
LVS-10
0.1
LVS-3

Training
-169.8 (2.6)
-156.4 (0.5)
-147.8 (0.5)
-147.4 (0.5)
-138.3 (1.3)
-138.1 (1.1)
-138.2 (1.0)

Testing
-169.0 (2.6)
-155.6 (0.5)
-147.0 (0.5)
-146.7 (0.5)
-137.5 (1.4)
-137.4 (1.2)
-137.5 (1.1)

Table 2: (Higher is better) Average log-likelihood on the
MNIST dataset using a RBM with 25 hidden neurons. Re-
sults are means over 10 executions after 100 epochs, using
appropriate learning rates for each method.

only truly depends on h(r)(ξ + 1) since
possible visible states.

(m)
NH contains all
S

Figure 2a shows the CCDF of the tour lengths for differ-
ent values of nH . Most tours are extremely short for RBMs
with few hidden neurons (for nH = 16, more than 99% have
length one), but signiﬁcantly increase as we increase nH with
a very heavy tail. Thus, it is expected that we see little differ-
ence between LVS-1, LVS-3, and LVS-10. Moreover, these
heavy tails likely causes strong inspection-paradox biases for
CD-K in high-dimensional RBMs.

Most importantly, Figure 2a shows that tours either return
within one step or are unlikely to return for a very long time.
A closer inspection at these one-step tours, shows that over
99% of the cases have the hidden state being the starting state.
Thus, it seems that RBMs (even with few hidden neurons) are
just memorizing the training data, not learning how to gener-
ate new digits. We conjecture, however, that if our training
could force the tours to stop at distinct hidden states, and
requires the tours to be possibly longer (but not too-long),
the RBM might be taught how to generate new digits.

∈ {

1, 4, 7
}

Using nH = 32 hidden neurons, Figure 2b shows the
probability that a tour takes more than k steps, as we in-
crease the number of stopping states by setting the values of
(m)
m
NH . We see that the probability of tours
S
ﬁnishing in a single step increases as we add more states
to the stopping state. Thus, increasing the stopping set size
can signiﬁcantly shorten the tours, which in turn improves
the estimates of MCLV-K and LVS-K, and is an avenue to
ameliorate MCMC issues in high-dimensional RBMs.

in

Distribution modes of the learned RBM. Overall, we
may want to ask which digits (pictures) the model is learning
to reproduce well.

Figure 2c shows the length of the tours split by the type of
digit starting the tour. Note that the RBM seems to learn well
digits that are more consistent across the training data (e.g.,
numbers one and six) and have more trouble with digits that
have more variability (e.g., numbers four and eight).

As a visual inspection, Figure 3 shows the next visible
states of extremely short (length = 1) and long (unﬁnished
after 99,999 steps) tours, for nH = 32 hidden neurons. There
is a clear relation between long tours and not-so-common
examples in the training data. The ﬁrst and third rows show

(a)

(b)

(c)

H
Figure 2: (a) Tour lengths CCDF for nH = log2 |
| ∈
16, 20, 32, 64
for LVS-1; (b) Tour lengths CCDF variation
{
}
for LVS-10 with nH = 32, using larger Stopping Sets; (c)
Comparison of frequencies of short and long tours starting
from labeled states on a trained RBM

the training examples; the next row shows their ﬁrst visible
state after one Gibbs sampling step. Note that the majority of
the training examples are easy-to-recognize digits, with still
recognizable digits after sampling.

The second part of Figure 3 shows the training example
and ﬁrst visible samples of long tours. Note that the long
tours tend to be digits that are either thicker (rarer in the
data), or come in a not-so-standard shape than the digits in
the ﬁrst row. Note that in half of the examples, their ﬁrst
Gibbs samples are not too similar to the original digit. This
shows that the model is having trouble learning these less
standard digits. That long tours tend to start in odd-looking-
examples, should help us better understand and avoid fantasy
particles (visible states v
V that are not characteristic of
the dataset but have high probability nonetheless (Tieleman
2008)).

∈

Estimating the partition function. We use MCLV-
to estimate the partition function Z(W) =
Kdyn

Figure 3: Visible states of tours for nH = 32 neurons. The ﬁrst and
third rows of each image show the visible states from the training
data, whereas the second and fourth show the next visible state
obtained through Gibbs Sampling

from the time reversibility of Φ(W). Thus, all states x
†
Ω(cid:48)
in Φ(W): p(x; W).

∈
in Φ(cid:48)(W) have the same steady state distribution as

\{

S

}

(a) Short Tours

(b) Long Tours

(cid:80)

(cid:80)
h e−E((v,h);W) as speciﬁed in Corollary 2 using an
v
RBM with nH = 32, so that we can easily compute the true
partition function for comparison. We note that computing
ZS (W) is fast as it is in the order of the number of training
examples (as stated earlier).

Following Corollary 2, we estimate Z(W) with
ˆF (Kdyn,R)(W, f1), with f1(x) = 1. The average tour length
in this example is estimated to be close to one (see Figure
1). Thus, ˆF (Kdyn,R)(W, f1)
10100 in
≈
this example. In fact, ˆF (Kdyn,R)(W, f1) and the true partition
function Z(W) report the same value up to nearly machine
precision (10-th decimal place).

ZS (W) = 1.46

×

Conclusions
This paper proposes a Las Vegas transformation of Markov
Chain Monte Carlo (MCMC) for RBMs, denoted Markov
Chain Las Vegas (MCLV). MCLV gives statistical guarantees
in exchange for random running times. Our empirical results
show MCLV-K is a powerful tool to learn and understand
RBMs, with a gradient estimator LVS-K that can better ﬁt
RBMs to the MNIST dataset than standard MCMC methods
such as Contrastive Divergence (CD-K).

Appendix

Proof of Corollary 1
Proof. Collapse the states of
into a single state S to form
S
a state-collapsed MC Φ(cid:48)(W), with transition probabilities
given by Deﬁnition 1. Let (S, X(·)(2), . . . , X(·)(ξ(·))) be
a sequence of discrete states of the r-th tour of the state-
collapsed MC Φ(cid:48)(W). Note that S is the renewal state of the
tour Ξ(·), i.e., X(·)(1) = S.
reversibility

that
p(x; W)pΦ(x, y) = p(y; W)pΦ(y, x), where pa in-
dicates the probability transition matrix of MC a. Let
ZS(W) = (cid:80)
y∈S e−E(y;W). We now show that Φ(cid:48)(W) is
time-reversible using the fact that the steady state distribution
of Φ(W) is known up to a constant factor. Thus, we
“guess” the steady state distribution in Φ(cid:48)(W) of S as

of Φ(W)

implies

time

The

p(S; W) = ZS(W)/Z(W) and verify that, because
is a
proper subset of Ω, the balance equations of Φ(cid:48)(W) are time
reversible:

S

p(S; W)pΦ(cid:48)(S, x) :=

ZS(W)
Z(W)

(cid:88)

y∈S

e−E(y;W)
ZS(W)

pΦ(y, x)

p(y; W)pΦ(y, x)

p(x; W)pΦ(x, y)

see†

=

=

(cid:88)

y∈S
(cid:88)

y∈S

= p(x; W)pΦ(cid:48)(x, S),

Proof of Lemma 1
Lemma (Perfect sampling of tours). Let

(x, X(i)(2), . . . , X(i)(k))

k =
C
be a set of tours of length k
S
≤
according to some distribution.
Then, there exists a distribution Gk such that the random

i
}
K, with x sampled from

{

variables

∀

σ

G

k :=

k
∈ C

g(σ) :
{

(8)
are i.i.d. samples of Gk, with g deﬁned over the appropriate
σ-algebra (e.g., k RBM states) with

(cid:107)
Moreover, if we perform M tours, these tours ﬁnish in ﬁnite
M
time and
r=1 is an i.i.d. sequence with a well-deﬁned
}
probability distribution p(ξ(·) = k).

.
≤ ∞

ξ(r)
{

)
1
(cid:107)

g(
·

}

Proof. Consider an inﬁnite run of the MCMC Φ(cid:48)(W):
X(1), X(2), . . ., starting at state X(1) = S. Divide this inﬁ-
nite run into tours, the longest segments of consecutive states
that start at state S but do not contain S in any other states
in the segment. Let ξ(r) be the length of the r-th tour. Be-
cause Φ(cid:48)(W) is an irreducible Markov chain, it is positive
recurrent (Gallager 2013, Theorem 6.3.8), and we can use
Kac’s theorem (Meyn and Tweedie 2012, Theorem 10.2.2)
to assert that E[ξ(·)] <
∞
almost surely (i.e., except for a set of measure zero). Deﬁne
Rr+1 = Rr + ξ(r+1), with R0 = 0. Deﬁne

, which also implies ξ(·) <

∞

k =

G

g(X(Rr−1), . . . , X(Rr
{

−

1)) :

r = 1, . . . , M, ξ(r) = k

,

}

with M > 1. By the strong Markov property, there exists a
distribution Gk such that
k is an iid sequence from Gk. Note
M
that
r=1 is also iid. Further, note that by Corollary 1
}
we can equivalently consider the MC Φ(W), starting at state
x sampled from the stopping set
, which concludes the
proof.

ξ(r)
{

S

G

Proof of Theorems 1 and 3
Proof. For simplicity, in what follows we combine the proofs
of Theorems 1 and 3, specializing on each case when nec-
0, Rr+1 = Rr + ξ(r+1) and for
essary. Deﬁne for all r

≥

≥

0, N (t) = argmaxr 1{Rr−1<t}, with R0 = 0. N (t)
r≥1 are
}

t
counts how many of the tours in the sequence
needed to add up to the largest number smaller than t. Let
Rr(cid:88)

ξ(r)
{

Y (r)
K = 1
{

ξ(r)

K

}

≤

f (X(r)(t

Rr−1)).

−

t=Rr−1+1

By Lemma 1, both
quences. Also, even in the case K

Y (r)
K }
{

r≥1 and

Y (·)
E[
K (cid:107)
(cid:107)

1]

E[sup
x

ξ(·)

f (x)
(cid:107)
(cid:107)

r≥1 are iid se-
}

ξ(r)
{
,
→ ∞
1] = E[ξ(·)] sup

f (x)
(cid:107)

1

x (cid:107)

≤
<

,
∞

as by deﬁnition
∞
∞
(see Lemma 1). The Renewal-Reward Theorem (Br´emaud
2013, Theorem 4.2) yields, r

and we know E[ξ(·)] <

f (
·
(cid:107)

1 <

)
(cid:107)

1

(cid:80)N (t)

r=1 Y (r)
t

K

=

lim
t→∞

≥

E

(cid:104)
1{ξ(·)≤K}

(cid:80)ξ(·)

k=1 f (X(·)(k))

E[ξ(·)]

(cid:105)

.

(9)

Note that,
(cid:80)N (t)

r=1 Y (r)
t

K

=

1{ξ(N (t(cid:48) ))≤K}

(cid:80)RN (t)

t(cid:48)=1 f (X(N (t(cid:48)))(t(cid:48)
t

−

RN (t(cid:48))−1))

(cid:80)RN (t)

t(cid:48)=1 1{ξ(N (t(cid:48) ))≤K}f (X(N (t(cid:48)))(t(cid:48)

RN (t(cid:48))−1))

−

=

RN (t)

RN (t)
t

.

·

RN (t)
t

= 1, as by deﬁnition
ξ(N (t)+1)
t

Most importantly, limt→∞
RN (t)+ξ(N (t)+1) > t, and limt→∞
= 0, otherwise
an inﬁnitely large ξ(N (t)+1) would have non-zero measure,
contradicting E[ξ(N (t)+1)] <
r=1 Y (r)
t
(cid:80)RN (t)
t(cid:48)=1 1{ξ(N (t(cid:48)))≤K}f (X(N (t(cid:48)))(t(cid:48)

. This yields,

RN (t(cid:48))−1))

lim
t→∞

(cid:80)N (t)

∞

K

−

.

= lim
t→∞

RN (t)

RN (t)
t(cid:48)=1

(Theorem 3) The case of Kdyn: As Kdyn is ﬁnite almost
surely (see proof of Lemma 1), it makes the condition
1{ξ(N (t(cid:48) ))≤Kdyn} := 1. Note that the sequence
−
RN (t(cid:48))−1)
is just a single sample path of our MC
}
starting at state x(cid:48), taking RN (t) steps. As our MC is irre-
ducible and time-reversible, there is solution and the solution
is unique (Gallager 2013, Theorem 6.3.8), and thus we can
use the ergodic theorem to show
(cid:80)RN (t)

X(N (t(cid:48)))(t(cid:48)

{

lim
t→∞

t(cid:48)=1 f (X(N (t(cid:48)))(t(cid:48)
RN (t)

−

RN (t(cid:48))−1))

=

f (x)p(x; W),

(cid:88)

x

and substituting the above equation in (9), yields

E





ξ(·)
(cid:88)

k=1

f (X(·)(k))


 = E[ξ(·)]

(cid:88)

x

f (x)p(x; W),

r

1.

≥

(10)
Finally, by Kac’s theorem (Meyn and Tweedie 2012, Theo-
rem 10.2.2),

E[ξ(·)] =

1
p(x(cid:48); W)

=

Z(W)
e−E(x(cid:48);W)

,

(11)

as p(x(cid:48); W) is the steady state probability of visiting state
x(cid:48). Replacing (11) into (10) and multiplying it by e−E(x(cid:48);W)
on both sides concludes the unbiasedness proof. Thus, if
ˆF (Kdyn)
(W, f ) denotes the estimator ˆF in eq.(5) applied to
r
only a single tour r = 1, . . . , R. Then, E[F (Kdyn)
(W, f )] =
F (Kdyn)
F (W, f ) and the sequence
r≥1 is trivially
r
{
}
iid by the strong Markov property. This iid sequence guaran-
tees the following convergence properties.

r
(W, f )

k=1

∂E(X(r)(k);W)
∂W

Error bound: Note that (cid:80)ξ(r)

is upper
bounded by ξ(r)B. As Φ(W) is time-reversible, it is equiva-
lent to a random walk on a weighted graph. Thus, Lemma 2(i)
of Avrachenkov et al. (Avrachenkov, Ribeiro, and Sreedharan
2016) applies with Z(W) = 2dtot, ZS (W) = dSn , and we
have

var( ˆF (Kdyn)
1

(W))

B2 (cid:0)(Z(W))2/(ZS (W)δ) + 1(cid:1) .

By the strong Markov property the tours are independent,
thus, var( ˆF (Kdyn,R)(W)) = var( ˆF (Kdyn)
(W))/R by the Bi-
enaym´e formula. And we have already shown that the es-
timate of ˆF (Kdyn)
(W) is unbiased. Finally, we obtain the
bound through the application of Chebyshev’s inequality.

1

1

≤

case

of K: From above,
(Theorem 1) The
ˆF (Kdyn,R)(W, f ) is an unbiased estimate of F (W, f ).
The remaining of the proof is straightforward. The tours are
independent. Thus E[ ˆF (K,R)(W)] = E[ ˆF (K,1)(W)]. Note
that

K−1
(cid:88)

E[ξ(·)]

−

kP [ξ(·) = k] =

kP [ξ(·) = k],

∞
(cid:88)

k=1

and as B upper bounds
E[ ˆF (Kdyn,1)(W)
(cid:80)K−1
(E[ξ(·)]

k=1 kP [ξ(·) = k])

k=K
)
f (
1,
(cid:107)
·
ˆF (K,R)(W)]
can
B.

−

(cid:107)

−

·

then the bias
at most

be

Theorem 2
Proof of Theorem 2. Note that the condition

inf
x∈Ω\S

(cid:88)

y∈S

pΦ(x, y)

(cid:15)

≥

ensures that the MC Φ(cid:48)(W) satisﬁes Doeblin’s condition, and
therefore Φ(cid:48)(W) is geometrically ergodic with convergence
rate (1
(cid:15)) (Stroock 1995, pp. 30). Finally, by Kendall’s theo-
rem (Meyn and Tweedie 2012, Theorem 15.1.1), a geometric
ergodicity and a geometric decay in the tail of the return time
distribution are equivalent conditions.

−

Proof of Corollary 3
Proof. An unbiased estimate of
Z for one tour is ob-
tained from F (Kdyn,R)(W, f ) in eq. (6) of Theorem 3 with
(cid:80)N
f (y) = 1
∂W . Averaging the gra-
N
dient of each tour over R
1 tours gives the desired re-
sult.

∂W −
≥

L
∂E(y;W)

∂E(xn;W)

n=1

∇

W

Source Code
Our source code and detailed results are hosted at
https://github.com/PurdueMINDS/MCLV-RBM.

References
[Aldous and Fill 2002] Aldous, D., and Fill, J. 2002. Reversible

markov chains and random walks on graphs.

[Avrachenkov, Ribeiro, and Sreedharan 2016] Avrachenkov,

K.;
Ribeiro, B.; and Sreedharan, J. K. 2016. Inference in OSNs via
Lightweight Partial Crawls. In SIGMETRICS.

[Baxendale 2005] Baxendale, P. H. 2005. Renewal theory and com-
putable convergence rates for geometrically ergodic Markov chains.
Ann. Appl. Probab.
[Bengio and Delalleau 2009] Bengio, Y., and Delalleau, O. 2009.
Justifying and Generalizing Contrastive Divergence. Neural Com-
putation.

[Br´emaud 2013] Br´emaud, P. 2013. Markov chains: Gibbs ﬁelds,

Monte Carlo simulation, and queues. Springer.

[Bubley and Dyer 1997] Bubley, R., and Dyer, M. 1997. Path cou-
pling: A technique for proving rapid mixing in Markov chains. In
FOCS.
[Buchholz 1994] Buchholz, P. 1994. Exact and ordinary lumpability

in ﬁnite markov chains. Journal of Applied Probability.

[Carreira-Perpi˜n´an and Hinton 2005] Carreira-Perpi˜n´an, M. A., and
In

Hinton, G. E. 2005. On Contrastive Divergence Learning.
AISTATS.
[Corcoran and Tweedie 2002] Corcoran, J., and Tweedie, R. 2002.
Perfect sampling from independent Metropolis-Hastings chains. J.
Stat. Plan. Inference.

[Erhan et al. 2010] Erhan, D.; Bengio, Y.; Courville, A.; Manzagol,
P.-A.; Vincent, P.; and Bengio, S. 2010. Why does unsupervised
pre-training help deep learning? JMLR.

[Fill et al. 2000] Fill, J. A.; Machida, M.; Murdoch, D. J.; and Rosen-
thal, J. S. 2000. Extension of Fill’s perfect rejection sampling
algorithm to general chains. RSA.

[Fill 1997] Fill, J. A. 1997. An interruptible algorithm for perfect

sampling via markov chains. In STOC.

[Fischer and Igel 2014] Fischer, A., and Igel, C. 2014. Training
restricted Boltzmann machines: An introduction. Pattern Recognit.
[Gallager 2013] Gallager, R. G. 2013. Stochastic processes: theory

for applications. Cambridge University Press.

[Gilks, Roberts, and Sahu 1998] Gilks, W. R.; Roberts, G. O.; and
Sahu, S. K. 1998. Adaptive Markov Chain Monte Carlo through
Regeneration. J. AMSTAT.

[Hinton, Osindero, and Teh 2006] Hinton, G. E.; Osindero, S.; and
Teh, Y.-W. 2006. A fast learning algorithm for deep belief nets.
Neural Computation.

[Hinton 2002] Hinton, G. E. 2002. Training products of experts by

minimizing contrastive divergence. Neural Computation.

[Hinton 2012] Hinton, G. E. 2012. A Practical Guide to Training
Restricted Boltzmann Machines. In Neural networks: Tricks of the
trade. Springer.

[Hobert et al. 2002] Hobert, J. P.; Jones, G. L.; Presnell, B.; and
Rosenthal, J. S. 2002. On the applicability of regenerative simula-
tion in Markov chain Monte Carlo. Biometrika (4).

[Long and Servedio 2010] Long, P. M., and Servedio, R. 2010. Re-
stricted boltzmann machines are hard to approximately evaluate or
simulate. In ICML.

[Lyne et al. 2015] Lyne, A.-M.; Girolami, M.; Atchad´e, Y.; Strath-
mann, H.; Simpson, D.; et al. 2015. On Russian roulette estimates
for Bayesian inference with doubly-intractable likelihoods. Statisti-
cal science.

[Meyn and Tweedie 2012] Meyn, S. P., and Tweedie, R. L. 2012.

Markov chains and stochastic stability. Springer.

[Mont´ufar and Morton 2015] Mont´ufar, G., and Morton, J. 2015.

Discrete restricted boltzmann machines. JMLR.

[Mykland, Tierney, and Yu 1995] Mykland, P.; Tierney, L.; and Yu,
B. 1995. Regeneration in Markov chain samplers. J. AMSTAT
(429).

[Neal 2001] Neal, R. M. 2001. Annealed Importance Sampling.

Statistics and Computing 11(2):125–139.

[Neal 2005] Neal, R. M. 2005. Estimating Ratios of Normaliz-
ing Constants using Linked Importance Sampling. arXiv preprint
math/0511216.

[Ollivier 2009] Ollivier, Y. 2009. Ricci curvature of Markov chains

on metric spaces. J. Funct. Anal.

[Prats, Romero Merino, and Castrillejo 2014] Prats, D. B.; Romero
Merino, E.; and Castrillejo, F. M. 2014. Stopping Criteria in
Contrastive Divergence: Alternatives to the Reconstruction Error.
In ICML.

[Propp and Wilson 1996] Propp, J. G., and Wilson, D. B. 1996.
Exact sampling with coupled markov chains and applications to
statistical mechanics. RSA.

[Propp and Wilson 1998] Propp, J. G., and Wilson, D. B. 1998. How
to get a perfectly random sample from a generic markov chain and
generate a random spanning tree of a directed graph. Journal of
Algorithms.
[Roberts and Tweedie 1999] Roberts, G. O., and Tweedie, R. L.
1999. Bounds on regeneration times and convergence rates for
Markov chains. Stoch. Process. their Appl.

[Salakhutdinov and Hinton 2009] Salakhutdinov, R., and Hinton, G.

2009. Deep Boltzmann Machines. JMLR.

[Salakhutdinov and Murray 2008] Salakhutdinov, R., and Murray, I.
In

2008. On the quantitative analysis of deep belief networks.
ICML.

[Schulz, M¨uller, and Behnke 2010] Schulz, H.; M¨uller, A.; and
Behnke, S. 2010. Investigating Convergence of Restricted Boltz-
mann Machine Learning. In NIPS.

[Smolensky 1986] Smolensky, P. 1986. Information processing in
dynamical systems: Foundations of harmony theory, tech. rep. dtic.
[Stewart 1994] Stewart, W. J. 1994. Introduction to the numerical

solutions of Markov chains. Princeton Univ. Press.

[Stroock 1995] Stroock, D. 1995. An introduction to Markov pro-

cesses. Springer.

[Sutskever and Tieleman 2010] Sutskever, I., and Tieleman, T. 2010.
On the Convergence Properties of Contrastive Divergence. In AIS-
TATS.
[Tieleman 2008] Tieleman, T. 2008. Training restricted Boltzmann
machines using approximations to the likelihood gradient. In ICML.
[Wilson 1983] Wilson, J. R. 1983. The inspection paradox in

renewal-reward processes. Operations Research Letters.

[Wilson 2000] Wilson, D. B. 2000. Layered multishift coupling for
use in perfect sampling algorithms (with a primer on cftp). Monte
Carlo Methods.

[Yuille 2005] Yuille, A. 2005. The Convergence of Contrastive

Divergences. In NIPS.

7
1
0
2
 
v
o
N
 
2
2
 
 
]

G
L
.
s
c
[
 
 
1
v
2
4
4
8
0
.
1
1
7
1
:
v
i
X
r
a

From Monte Carlo to Las Vegas:
Improving Restricted Boltzmann Machine Training Through Stopping Sets

Pedro H. P. Savarese
Toyota Technological Institute at Chicago
Chicago, IL, 60637
savarese@ttic.edu

Mayank Kakodkar
Department of Computer Science
Purdue University
West Lafayette, IN, 47903
mkakodkar@purdue.edu

Bruno Ribeiro
Department of Computer Science
Purdue University
West Lafayette, IN, 47903
ribeiro@cs.purdue.edu

Abstract

We propose a Las Vegas transformation of Markov Chain
Monte Carlo (MCMC) estimators of Restricted Boltzmann
Machines (RBMs). We denote our approach Markov Chain
Las Vegas (MCLV). MCLV gives statistical guarantees in ex-
change for random running times. MCLV uses a stopping
set built from the training data and has maximum number of
Markov chain steps K (referred as MCLV-K). We present
a MCLV-K gradient estimator (LVS-K) for RBMs and ex-
plore the correspondence and differences between LVS-K and
Contrastive Divergence (CD-K), with LVS-K signiﬁcantly
outperforming CD-K training RBMs over the MNIST dataset,
indicating MCLV to be a promising direction in learning gen-
erative models.

Introduction
Despite the signiﬁcant recent advances in training discrim-
inative neural network models, training generative mod-
els has proven more elusive. As with most neural net-
work training methods, algorithms for training Restricted
Boltzmann Machines (RBMs) (Hinton 2002; Hinton 2012;
Smolensky 1986), a class of energy-based generative neural
network models, are unreasonably effective. Though, some
argue, not yet effective enough for modern applications. In
this work we seek to better understand and improve the train-
ing of RBMs.

RBM is a family of energy-based models with probability
distribution over a state vector x = (v, h) (assumed discrete
nV (e.g. an image) and binary latent
w.l.o.g.), v
}
nH ,
variables h

0, 1

∈ {
∈ {

0, 1
}
p(x; W) =

1
Z(W)

e−E(x;W),

(1)

where Z(W) = (cid:80)
ﬁnite mean, E[Z(W)] <
function given by

∞

x e−E(x;W) is a partition function with
, and E(x; W) is an energy

(cid:16)

E

x = (v, h); W = (W(cid:48), b, a)

(cid:17)

=

vTW(cid:48)h

bTv

aTh.

−

−

−

RBMs proved highly successful in many tasks, such as data
generation (Hinton 2002; Hinton, Osindero, and Teh 2006;

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Hinton 2012) and as a pre-training step for feedforward neu-
ral networks (Salakhutdinov and Hinton 2009), among others
(see Bengio and Delalleau (2009) and Erhan et al. (2010)).
As computing Z(W) directly is intractable for large state
spaces, Markov Chain Monte Carlo (MCMC) methods are
widely used to compute statistics of these models (includ-
ing estimating the gradient ∂p(x; W)/∂W). MCMC works
by running a Markov chain (MC) Φ(W) with steady state
p(x; W) to equilibrium. Metropolis-Hastings and Gibbs sam-
pling are two general such approaches.

However, in the real world, one is expected to run the
MC Φ(W) for only K steps, returning a state x
ˆπ(K),
“approximately sampled” from the Markov chain’s true steady
state distribution p(x; W). Starting from a random state, K
needs to be quite large for this method to work.

∼

Contrastive Divergence (CD-K) (Hinton 2002; Hinton
2012), improves this procedure by starting the MC from the
visible states of the training data. Empirically, CD-K works
tremendously well to train RBMs with few hidden units (nH
small) even for K as low as K = 1 (Carreira-Perpi˜n´an and
Hinton 2005; Hinton 2002; Hinton 2012).

For high-dimensional RBMs, CD-K is less efﬁcient
and the reason is conjectured to be the longer mixing
times (Sutskever and Tieleman 2010), although concrete evi-
dence is anecdotal as mixing times are hard to assess in high
dimensions. While not the main focus of our paper, armed
with our techniques, we will further empirically explore pos-
sible reasons for this high-dimensional difﬁculty.

A Las Vegas transformation of RBM training. The main
focus of this paper is to recast MCMC estimation of RBMs
as a Markov chain algorithm with stopping sets obtained
from the training data. The size of the stopping set is a hyper-
parameter that can be dynamically adapted during training
based on computational trade-offs.

In standard RBM training using MCMC, the MC stops
after a predeﬁned number of K steps. In our approach, the
MCMC can also stop if it reaches one of the states in the
stopping set. Thus, MCMC running times are random (and
are, in average, shorter than K). This approach is closer to a
Las Vegas algorithm than a Monte Carlo algorithm: we aim
to get perfect samples of a quantity with an algorithm that
has random running times. We denote this approach Markov
Chain Las Vegas with K maximum steps (MCLV-K).

We show that, by dynamically adapting K, MCLV-K can
ﬁnd unbiased estimates of the direction of the RBM gradient.
Moreover, in contrast to standard MCMC, MCLV-K has an
extra piece of information: whether or not the stopping set
has been reached. We show that this knowledge provides
novel ways to estimate gradients and partition functions of
energy-based models.

And perhaps, one of the most interesting observations in
this paper comes from the correspondence between CD-K
and MCLV-K. MCLV-1 is quite similar to CD-1 except for
is a set of stopping states
an added
S
2, MCLV-K is distinct from
deﬁned later. Clearly, for K
≥
CD-K, as the MC of MCLV-K may stop before performing
all K steps.

-stopped ﬂag, where

S

Analyzing CD-K through our Las Vegas transformation, it
is clear that CD-K has an unintended inspection paradox bias
that can be corrected to further improve the RBM learning.
Using the reached-stopping-set ﬂag of MCLV-K, we design
a new gradient estimator, denoted Las Vegas Slope (LVS),
that empirically gives signiﬁcantly better parameter estimates
than standard CD-1 and CD-10 over the MNIST dataset
according to the model’s likelihood. MNIST is used in our
experiments due to the long history of RBM development
over this dataset.

Contributions. We claim the following contributions: (1)
We introduce Markov Chain Las Vegas (MCLV-K). We show
MCLV-K gives ﬁnite-sample unbiased and asymptotically
consistent estimates of a variety of statistics of RBMs; fur-
ther, we give two convergence bounds. We also show how to
theoretically and empirically reduce the MCLV-K random
running times using the training examples. (2) We show how
MCLV-K can be used to design new ways to train Restricted
Boltzmann Machines; we use MCLV-K to propose a novel
RBM gradient estimator, Las Vegas Slope (LVS), which our
empirical results show (for K
) improves pa-
}
rameter estimates of RBM over CD-1 and CD-10, over the
MNIST dataset.

1, 3, 10

∈ {

MCLV-K Estimation with Statistical
Guarantees
In what follows we introduce some of the deﬁnitions used
throughout our paper. We introduce the concept of a tour (a
MC which returns to the same state) and show that the return
probability can be increased by collapsing a set of stopping
states into a single state in Deﬁnition 1. The MC stops when it
either reaches K steps or one of the states in the stopping set.
Corollary 1 describes how this collapsing can be performed
while preserving the statistical properties of the MC.

Theorem 1 introduces the MCLV-K estimator (that, among
others, can estimate the partition function) and proves it is
consistent, giving error bounds. And Theorem 2 shows that
this estimator is also ﬁnite-running-time unbiased. The ﬁrst
results provides unbiased estimates of the partition function,
and generalize these unbiased estimates to a broad family of
functions.

The reader only interested in RBM gradient estimates can
safely skip to the next section on training RBMs, after reading

the preliminaries and the deﬁnition of the RBM stopping sets.

∈

∈

×

V , and a hidden vector h

Preliminaries. We deﬁne state x = (v, h) to consist of a
visible vector, v
H, where H
and V are the set of all hidden and visible states, respectively.
Let Φ(W) be an irreducible Markov chain with steady state
p(x; W) over the states Ω := V
H. A MC is irreducible
if all states communicate, which is trivially true for RBMs
since the co-domain of the logistic function is (0, 1) for any
input in R. If the Markov chain Φ(W) starts in equilibrium
(or runs until equilibrium), the next transition gives us one
independent sample x from the steady state p(x; W). The
N
n=1 denotes the N visible examples of the training
set
data. We often use (
), to denote that the statement
), as in g(
·
·
over g is true for any valid input value.
RBMs can be trained by optimizing its parameters W in
order to maximize the likelihood of the training data. Taking
partial derivatives with respect to the weights results in a
surprisingly simple update rule for W:

vn

{

}

1
N

=

n=1

(cid:88)

h∈H

N
(cid:88)

∂ log((cid:80)

h p(x = (vn, h); W))

∂W

(cid:16) 1
N

N
(cid:88)

n=1

p(h
|

vn; W)vnhT

(cid:88)

p((v, h); W)vhT (cid:17)

−

v∈V

=

1
N

N
(cid:88)

n=1

vnEW[h
vn]T
|

−

EW[vhT ],

(2)

where the l.h.s. term of eq. (2) (also called positive statis-
tics) is easily calculated from the training data. However, the
r.h.s. term of eq. (2) (negative statistics) corresponds to the
gradient of the partition function Z(W), which is generally
intractable to compute. More speciﬁcally, computing E[vhT ]
requires collecting model statistics p(v, h), either by running
the MCMC Markov chain Φ(W) to equilibrium from any
starting state or by direct computation of the expected value
if we know the partition function Z(W).

If the Markov chain Φ(W) is not run until equilibrium the
gradient estimates have an unknown bias. In what follows we
use Markov chain tours to take care of this bias.

Tours and Stopping Sets. Deﬁne a tour to be a sequence
of ξ steps of the Markov chain (X(1), . . . , X(ξ)) s.t. the state
of the (ξ + 1)-st step is the same as the starting state, i.e.,
X(1) = X(ξ + 1). Let Ξ(r) = (X(r)(1), . . . , X(r)(ξ(r)))
denote the r-th tour, r
1. The strong Markov property
= r, the sequences Ξ(r) are independent
guarantees that if s
of Ξ(s). This independence guarantees that both Ξ(r) and Ξ(s)
are sample paths obtained from the equilibrium distribution
of the Markov chain. We will later use this property to obtain
unbiased estimators of the partition function.

≥

However, as is, tours are not a practical concept for RBMs
because in such a large state space Ω, the tour is unlikely
to return to the same starting state. We will, however, use a

Markov chain property common to Metropolis-Hastings and
Gibbs sampling Markov chains to signiﬁcantly increase the
probability of return by collapsing a large number of states
into a single state.

RBM stopping set. Our stopping set
S
(m)
N =
den states from the training data,
vn
hn
{
ten we will use m = 1, but we can change the size of
by changing m. The stopping set contains all hidden states in

uses sampled hid-
h(1)
n , . . . , h(m)
:
H
{
N
n=1 is the training data. Of-
}
(m)
N

vn; W)
, where
}

p(h
|

H

∼

n

H

(m)
N and all possible visible states
(m)
HN =
S

(cid:91)

h∈H(m)

N ,v∈V

(v, h)
}
{

,

(3)

H

H

S ⊂

v; W) is the conditional probability of h given v
and p(h
|
using model parameters W. Most of our theoretical results
apply to any stopping set that is a proper subset of the state
(m)
Ω. In practice, note that we do not store
space,
HN in
S
(m)
N in memory, as reaching a
memory, rather we only keep
(m)
hidden state in
N is enough to guarantee we need to stop.
This requires only O(mN ) space, where N is the number of
training observations.
Deﬁnition 1 (Stopping-set-Collapsed MC). Consider an ar-
bitrary stopping set
Ω. A state-collapsed MC is a trans-
formation of MC Φ(W) with state space Ω, into a new MC
Φ(cid:48)(W) with state space Ω(cid:48) = Ω
, where S is a new
S
}
\S ∪ {
. The transition
state formed by collapsing all the states in
probabilities between states Ω(cid:48)
Ω are the same as in Φ(W).
The transition probabilities from S to states in Ω(cid:48)

S ⊂

are

∩

S

S
}

\{

(cid:80)

y∈S e−E(y;W)pΦ(y, x)
,
S
ZS (W)
}
y∈S e−E(y;W), and pa indicates the

Ω(cid:48)

\{

∈

x

∀

,

where ZS (W) = (cid:80)
probability transition matrix of MC a.

The transitions from states Ω(cid:48)

pΦ(cid:48)(x, S) =

S
}

\{
pΦ(x, y),

to state S are

x

∀

∈

Ω(cid:48)

.

S
}

\{

(cid:88)

y∈S

pΦ(cid:48)(S, x) =

It is important to distinguish the MC in Deﬁnition 1
from general MC state aggregation methods such as
lumpability (Buchholz 1994) and interactive aggregation-
disaggregation methods (Stewart 1994). In the following
corollary, we see that the MC in Deﬁnition 1 affects the
steady state, unlike general MC aggregation methods that
leave the steady state undisturbed. Thankfully, later we will
be able to correct the distortion imposed by Deﬁnition 1
because we know the steady state distribution of the states
inside
Corollary 1 (Simulating Φ(cid:48)(W) from Φ(W)). For any MC
Φ(W) resulting from standard Gibbs sampling or Metropolis-
Hastings (MH) MCMCs, we can cheaply simulate the transi-
tions in and out of S of Def inition 1 by: (a) pΦ(cid:48)(S, x),
with
we ﬁrst sample a state y with replacement from
probability e−E(y;W)/ZS(W) and then perform a transi-
tion pΦ(y, x); (b) pΦ(cid:48)(x, S) is also simulated by performing

up to a normalizing constant.

S

S

a transition pΦ(x, y), and stopping the MC if y
simulated Φ(cid:48)(W) is ergodic and time-reversible.

∈ S

. The

The proof is in the appendix. It follows from the fact that
Φ(W) is the MC of Gibbs sampling and MH and, thus, time-
reversible (Aldous and Fill 2002). Time reversibility imposes
a set of necessary and sufﬁcient conditions in the form of
detailed balance equations (Gallager 2013, Theorem 6.5.2). A
little algebra shows that the sampling procedure in Corollary 1
using Φ(W) is stochastically equivalent to Φ(cid:48)(W).

S

MCLV-K Estimator
Following Corollary 1, a tour starts by sampling the initial
tour state x and stopping when the tour reaches the stopping
. We now want to truncate all return times of tours
set
greater than some value K
1, i.e., we will only observe the
≥
complete r-th tour (x, X(r)(2), . . . , X(r)(ξ(r))) if ξ(r)
K.
Otherwise, we observe only the ﬁrst K states of the tour:
(x, X(r)(2), . . . , X(r)(K)). The
-stopped ﬂag for tour r is
true if ξ(r)
Lemma 1 (Perfect sampling of tours). Let

K, otherwise it is false.

≤

≤

S

(x, X(i)(2), . . . , X(i)(k))
{

k =
C
be a set of tours of length k
S
≤
according to some distribution.
Then, there exists a distribution Gk such that the random

i
}
K, with x sampled from

variables

k

G

≡ {

g(σ) :

σ

∀

k
∈ C

}

are i.i.d. samples of Gk, with g deﬁned over the appropriate
σ-algebra (e.g., k RBM states) with

(cid:107)
Moreover, if we perform M tours, these tours ﬁnish in ﬁnite
M
time and
r=1 is an i.i.d. sequence with a well-deﬁned
}
probability distribution p(ξ(·) = k).

.
≤ ∞

ξ(r)
{

)
1
(cid:107)

g(
·

The Las Vegas parallel is observed when we notice that
any MCMC metric can be perfectly sampled from the tours.
The tour lengths are sampled from a distribution p(ξ(·) = k).
And, for any given tour length k, the metric of interest g is
perfectly sampled from Gk. The maximum tour length K
only cuts off the tail of p(ξ(·) = k) beyond k > K, which
allows us to bound the sampling error.
Theorem 1 (MCLV-K RBM Estimator). Let p(x; W),
E(x; W), and Z(W) be as described in eq.(1). Let

F (W, f ) = Z(W)

f (x)p(x; W),

(4)

(cid:88)

x∈Ω

Rn, n

1,

≥

∞

, and

1 <
(cid:107)

1 is the l1
where f : Ω
)
f (
·
(cid:107)
→
norm. Let Φ(W) be a time-reversible MC with state space Ω
and steady state distribution
Ω be
p(x; W)
{
a proper subset of the states of Φ(W).

(cid:107) · (cid:107)
x∈Ω. Let
}
with probability e−E(x(cid:48);W)/ZS (W) and
let (X(r)(1) = x(cid:48), X(r)(2), . . . , X(r)(ξ(r))) be a sequence
of discrete states of the r-th
-stopped tour, where we stop the
tour if one of two conditions are met: (a) we have reached K
steps, or (b) when we reach any state in

, i.e., X(r)(ξ +1)

Sample x(cid:48)

S ⊂

∈ S

S

. Then, for R

∈
be the set of ﬁnished tours
K steps, (as deﬁned in Corollary 1). For the sake

1 tours, let

(R)
k
C

≥

S

S
in k

≤

of simplicity, we henceforth refer to
estimator

simply as

k. The

C

ˆF (K,R)(W, f ) =

e−E(y;W)

(R)
k
C
(cid:88)

1

(cid:80)K

(cid:88)

k=1 |C

k

|

y∈S

k
(cid:88)

f (X(h))

(5)

K
(cid:88)

×

k=1

(X(1),X(2),...,X(k))∈Ck

h=1

−

1.
(cid:107)

(E[ξ]

(cid:80)K−1

·
f (x)

supx∈Ω (cid:107)

is an estimate of F (W, f ) in eq. (4) with a bias upper
bounded by B
k=1 p(ξ > k)), where p(ξ > k)
is the probability that a tour has length greater than k and
B

≥
Theorem 1 gives a basic estimator from the MCMC tours.
The gradient estimates will be explicitly derived in the next
section. In our experiments we show how to estimate p(ξ >
k). For the partition function and gradient estimates, it is
also trivial to obtain a bound on B using the RBM weights
W (Bengio and Delalleau 2009).
Theorem 2 (Geometrically Decaying Tour Length Tails).
Let p(ξ > k) be the probability that a tour has length
greater than k. If there exists a constant (cid:15) > 0 s.t.
(cid:15) then, there exists 0 < α < 1,
inf x∈Ω\S
log p(ξ > k) = k log α + o(k), i.e., ξ has a geometrically
decaying tail.

y∈S pΦ(x, y)

(cid:80)

≥

Theorem 2 shows conditions of a geometric decay in the
tail of p(ξ > k). And in practice it means that tours cannot be
“heavy tail” long and, thus, making the bound in Theorem 1
tighter.

MCLV-K Finite-Sample Unbiasedness
In what follows we dynamically increase K until the MC
reaches a state in the stopping set.

The following theorem shows that this procedure gives

unbiased estimates of F (W, f ).
Theorem 3 (Unbiased Partition-scaled Function Estimates
by Dynamic Adaptation of K). Consider the estimator in
Theorem 1 and let us dynamically grow K (denoted Kdyn)
until the MC reaches a stopping state in
1
tours,

. Then, for R

≥

S

E[ ˆF (Kdyn,R)(W, f )] = F (W, f ),
(6)
is an unbiased estimator and the estimator is consistent,
i.e., almost surely limR→∞ ˆF (Kdyn,R)(W, f ) = F (W, f ),
and Kdyn is ﬁnite.

(cid:15)

p

(cid:17)

≤

Moreover, for (cid:15) > 0,
(cid:16)(cid:13)
ˆF (Kdyn,R)(W, f )
(cid:13)
(cid:13)

F (W, f )

αR,ZS (W),

(ZS (W))2δ + 1

−
the number of

(cid:13)
(cid:13)
(cid:13)1 ≥
tours, αR,ZS (W) =
where, R is
(cid:16) (Z(W))2
B2
1 is an upper
supx∈Ω (cid:107)
(cid:15)2R
bound on the absolute value of f (
) over the state space Ω,
·
δ is the spectral gap of the transition probability matrix of
Φ(W).
Corollary 2 (Unbiased Partition Function Estimation). Let
f1(x) = 1, then

f (x)
(cid:107)

, B

≥

(cid:17)

E[ ˆF (Kdyn,R)(W, f1)] = Z(W),

Training Restricted Boltzmann Machines

In what follows we explore the connections between MCLV-
K and learning RBMs using MCMC methods. First, we
show how MCLV-K can provide a ﬁnite-sample unbiased
and asymptotically consistent estimate of the direction of the
RBM gradient.

MCLV-K Gradient Estimates

In what follows we will provide an estimate of the gradient
of the negative log-likelihood of RBMs using MCLV-K. Our
gradient will have a scaling factor but the gradient direction
is the same as the original gradient:

Z =

W

∇

L

Z(W)
ZS (W)

(cid:32)

1
N

N
(cid:88)

n=1

vT
n

EW[h
vn]
|

−

EW[vTh]

.

(cid:33)

The scaling Z(W)/ZS (W) is constant given W. In our
current implementation, we use Corollary 2 to estimate
Z(W)/ZS (W) and divide the gradient by it, compensat-
ing for the scaling at essentially no computational or memory
cost.

Corollary 3 (LVS-K: The Las Vegas Slope Estimator). Let
, x, the tour (x, X(r)(2), . . . , X(r)(ξ(r))), R, K,
Φ(W),
and
k be as deﬁned in Theorem 1. Then, for a learning rate
C
η > 0,

S

(cid:92)
W
L

∇

LVS(K, R) = η

(cid:32)

(cid:98)E[ξ]
N

N
(cid:88)

n=1

∂E(xn; W)
∂W

(cid:80)K

(cid:80)

k=1

(X(1),...,X(k))∈Ck

i=1

(cid:80)k

∂E(X(r)(k);W)
∂W

−

(cid:80)K

k=1 |C

k

|

(7)

(cid:33)
,

is a consistent (K, R
gradient in eq.(2), where (cid:98)E[ξ] =
expectation of the tour lengths.

→ ∞

) estimator of the energy-model
is the empirical

(cid:80)K
(cid:80)K

k=1 |Ck|k
k=1 |Ck|

Moreover, the contribution of a tour of length k to the

negative statistics of the gradient is proportional to

P [ξ = k]

k

E[∂E( ˜Xk; W)/∂W],

·

·

where ˜Xk is a random state of a tour of length k. If the
Markov chain Φ(W) satisﬁes the conditions of Theorem 2,
k = e−O(k), so that extremely long tours do
then P [ξ = k]
not inﬂuence the gradient.

·

Corollary 4 (Unbiased Gradient Direction Estimator:
LVS-Kdyn). Consider the estimator in Corollary 3 and let us
dynamically grow K (denoted Kdyn) until the MC reaches a
stopping state in

. Then,

S
(cid:104) (cid:92)
W
L
∇

E

(cid:105)
LVS(Kdyn, R)

∝ ∇

W

L

Z,

is an unbiased estimate of the RBM gradient direction.

The proofs of the two above corollaries follow directly

is an unbiased estimator of the partition function.

from Theorems 1 and 3, respectively.

Correspondence and Differences Between LVS-K
and CD-K

In this section we explore a correspondence between LVS-K
(proposed in Corollary 3) and CD-K to train RBMs. We will
also emphasize some differences that will give us some new
insights into CD-K. The correspondence is as follows: (a)
N
i=1; (b) the
consider a mini-batch of training examples
}
(m)
HN , described in eq.(3); (c) the number of
stopping set is
S
tours R of LVS-K is the number of training examples in the
mini-batch N , i.e., R = N .

vi
{

−

One can readily verify that the Gibbs sampling updates
of LVS-K and CD-K are similar except for the following
(m)
key differences: (i) LVS-K starts at a state x of
HN with
S
probability proportional to exp(
E(x; W)), CD-K starts
uniformly over the training examples. Thus, the negative
phase of LVS-K tends to push the model away from unbal-
anced probabilities over the training examples. (ii) at every
Markov chain step, LVS-K stops early if it has reached a
(m)
HN , while CD-K will always perform all K steps.
state in
S
(iii) the gradient estimates of LVS-K use only the completed
tours, while CD-K uses all tours; (iv) the gradient estimates
of LVS-K use all states visited by the MC during a tour,
while CD-K uses only the last visited state.

A long sequence of states visited by the CD-K Gibbs
sampler can be broken up into tours if the stopping state
contains only the starting state. Figure 1 illustrates three
MCMC runs starting at visible states representing “7”, “3”,
and “4”, broken up into tours whenever the starting hidden
state is sampled again. Starting from visible state “7”, CD-K
ignores the completed tour Tour 1, which LVS-K uses for
its gradient estimate; and CD-K proceeds to use the state in
the middle of Tour A for its gradient estimate. CD-K also
uses a state in the incomplete Tour 2, which LVS-K ignores
as incomplete. Finally, CD-K ignores Tour 3 and proceeds
to use the state in the beginning of Tour B for its gradient
estimate.

≥

This means that, for K

2, CD-K is more likely to sam-
ple states from longer tour than shorter tours. This bias is
the inspection paradox (Wilson 1983). Interestingly, this bias
makes CD-K, K
2, signiﬁcantly different from CD-1,
which has no such bias. Note that LVS-K has the opposite
bias: it ignores tours longer than K; the bias of LVS is mea-
surable (Theorem 1) if we can estimate the average tour
length.

≥

Figure 1: CD-k bias towards longer tours for k

2;

≥

|

∗

H

W

W
|

Computational Complexity
In this section we give the time and space complexities of
LVS-K and CD-K. Let
denote the number of elements
nH and nX = nV + nH . In terms of space,
in W, = nV
(m)
LVS-K needs O(N m nX ) space to store the
N which is
m times the requirement for CD-K. At every epoch, LVS-K
samples a stopping set, which involves a matrix multipli-
cation followed by algebraic operations over a matrix. The
matrix multiplication which takes O(N m
) upper bounds
|
the time. Computing the free energies of the hidden state also
takes the same time. Adding the states of the stopping set
to a heap for easier sampling takes O(N m) time and allows
us to sample starting states for the tours in O(N log(N m)).
Every Gibbs step is again bounded by the time taken for ma-
trix multiplication which takes a total of O(N
K) time.
Checking stopping set membership takes O(N KnX ) amor-
tized time assuming that standard algorithms used by hash
sets, e.g. MD5, take O(nX ) time to evaluate. Computing the
gradient and updating W takes O(N

Therefore LVS-K takes O(N KnX + N m

|
+
|
(m + K)) time, compared to CD-
W
N K
|
≡
K which takes O(N K
O(K),
W
∴ the asymptotic complexity of CD-K and LVS-K are the
same.

). In the general case m

) time.

W
|

W
|

O(N

W

W

)
|

∈

|

|

|

|

|

|

|

Related Work
AIS, MC changes, and CD-K extensions. Annealed Im-
portance Sampling (AIS) (Neal 2005; Neal 2001) uses two
distinct Markov transitions kernels and has been applied by
Salakhutdinov and Murray (Salakhutdinov and Murray 2008)
to obtain unbiased estimates of the partition function of an
RBM. Like AIS, the Russian roulette pseudo-marginal likeli-
hood is also a Markov chain modiﬁcation to sample from the
steady state distribution (Lyne et al. 2015). These modiﬁca-
tions cannot be readily applied to the original RBM Markov
chain, nor they provide insights into the learning process.
MCLV-K is a new tool that can be used from visual inspec-
tion of convergence to proposing new gradient estimators, as
seen in our empirical results.

RBMs are powerful models (Mont´ufar and Morton 2015)
and the analysis of CD-K has a long history (Hinton 2012).
A few past studies have focused on how CD-K learns
well RBMs (Carreira-Perpi˜n´an and Hinton 2005; Yuille
2005), have some ﬁxable issues learning RBMs (Schulz,
M¨uller, and Behnke 2010; Fischer and Igel 2014; Prats,
Romero Merino, and Castrillejo 2014), may approximate
some objective function (Hinton 2002), or do not approx-
imate any objective function (Bengio and Delalleau 2009;
Sutskever and Tieleman 2010). Orthogonally, Persistent Con-
trastive Divergence (PCD) (Tieleman 2008) improves CD-
K in some problems by using the starting state of the CD-
K Markov chain as the end state of the previous training
epoch (simulating a single sample path, assuming the MC
does not change much between epochs, which is not always
true (Schulz, M¨uller, and Behnke 2010)). Clearly, PCD could
be adapted as a MCLV method, which we see as future work.
The presence of training data is key to the practicality of
MCLV. Without training data, obtaining error bounds with

MCLV can be prohibitively expensive. In the worst-case,
there is no polynomial time algorithm that can estimate the
probabilities of an RBM model within a constant factor (Long
=NP. But most real-world
and Servedio 2010), assuming P
machine learning problems are supposed to be much easier
than general MCMC results would have us believe. We are
given a good hint of what should be a larger number of high-
probability states in the steady state: the states containing the
training examples. Unfortunately, vanilla MCMC methods
do not incorporate this extra information to speed up conver-
gence in a principled way. We believe the lessons learned in
this paper will be invaluable to design new classes of Markov
chain methods tailored to machine learning applications.

Las Vegas algorithms for Markov chain sampling. Per-
fect Sampling (Corcoran and Tweedie 2002; Fill 1997; Fill
et al. 2000; Propp and Wilson 1996; Propp and Wilson 1998;
Wilson 2000) is an example of a Las Vegas algorithm for
MCMC applications. Unfortunately, energy-based models
can easily reach trillions of states while perfect sampling
methods rarely scale well unless some speciﬁc MC structure
can be exploited. We are unaware of clever CFTP construc-
tions for arbitrary energy-based models.

Mykland et al. (Mykland, Tierney, and Yu 1995) with a few
follow-up works ﬁrst proposed the use of regeneration in the
context of MCMC to estimate mixing times, however these
techniques are mostly of theoretical interest (Baxendale 2005;
Gilks, Roberts, and Sahu 1998; Hobert et al. 2002; Roberts
and Tweedie 1999) rather than of practical utility for energy-
based models. Path coupling is another alternative to estimate
mixing times (Bubley and Dyer 1997). More recently, path
coupling was used to develop a theory of Ricci curvature
for Markov chains (Ollivier 2009). The connections between
Ricci curvature estimation and MCLV-K are worth exploring
in future work.

×

Empirical Results
Our experiments use the MNIST dataset, which consists of
70,000 images of digits ranging from 0 to 9, each image hav-
ing 28
28 pixels (a total of 784 pixels per image), divided
into 55,000 training examples and 15,000 test examples. We
use this dataset for historical reasons. MNIST is arguably
the most extensively studied dataset in RBM training, e.g.
(Hinton 2002; Hinton 2012; Hinton, Osindero, and Teh 2006;
Carreira-Perpi˜n´an and Hinton 2005; Salakhutdinov and Hin-
ton 2009; Tieleman 2008; Bengio and Delalleau 2009). Our
goal is to show that MCLV-K is able to give new insights
into RBM training (and improved performance) even in a
studied-to-death dataset such as MNIST. The experimental
details of our empirical results are presented in the appendix.
We use LVS-1 to train the RBM model used in the following
experiments (CD-K tends to give very high probability to a
few examples in the training data). We observe little differ-
ence between LVS-1, LVS-3, and LVS-10 (for reasons that
will be clear soon).

RBM learning. Our ﬁrst set of empirical results com-
pares LVS-K, K
and

1, 3, 10

1, 10

, CD-K, K
}

∈ {

}

∈ {

}

∈ {

1, 10

PCD-K, K
by training an RBM using stochas-
tic gradient descent, where the gradient estimates are com-
puted using the respective methods. We train RBMs with
nH = 32 hidden neurons for a total of 100 epochs (inclu-
sive of 15 warm-up epochs of CD-1 for LVS-K), using a
learning rate of 0.1 which decays according to a Robbins-
Monro schedule. Weight decay and momentum were not
used. The initial W weights are sampled uniformly from
U
, where nV and nH denote the num-
ber of visible and hidden neurons, respectively. Hidden biases
are initialized as zero, while visible biases are initialized as
log(pi/(1
pi)) (Hinton 2012), where pi is the empirical
probability of feature i being active.

(cid:16) −0.1
√

0.1√

nV +nH

nV +nH

−

(cid:17)

,

The small number of hidden units is to enable us to eval-
uate the true performance: we compute the exact partition
function of the trained RBM and calculate the average log-
likelihood 1
n=1 log p(vn). All results are means calcu-
N
lated from 10 executions. In all LVS-K experiments we use
m = 1, for simplicity. The negative log-likelihood of LVS-K,
PCD-K and CD-K are presented in Table 1.

(cid:80)N

Subsequently, in order to compare our results with those
presented in Tieleman (2008), we train RBMs with nH = 25
and initial learning rates between 10−4 and 1. We observe
that larger learning rates (10−1 to 1) are more appropriate for
LVS-K, resulting in faster convergence and increased perfor-
mance. Small rates (e.g. 10−4) cause tours to rarely ﬁnish,
severely slowing down the training. On the other hand, CD-K
and PCD-K fail to converge with learning rates slightly larger
than 10−2. The results for this experiment, along with the
best learning rates for each method, are presented in Table 2.
In conclusion, LVS-K drastically (and paired t-test sig-
niﬁcantly) outperforms CD-K and PCD-K w.r.t. the log-
likelihood in all settings, even LVS-1 performs signiﬁcantly
better than PCD-10. However we were unable to reproduce
130 for PCD achieved by Tieleman
the likelihood of
(2008).

≈ −

Method
CD-1
CD-10
PCD-1
PCD-10
LVS-1
LVS-10
LVS-3

Training
-167.3 (2.7)
-154.3 (3.3)
-153.0 (4.9)
-139.3 (3.2)
-134.0 (1.0)
-133.3 (1.0)
-133.7 (0.8)

Testing
-166.6 (2.8)
-153.4 (3.3)
-152.1 (4.7)
-138.5 (3.3)
-133.3 (1.0)
-132.6 (1.0)
-132.9 (0.7)

Table 1: (Higher is better) Average log-likelihood on the
MNIST dataset using a RBM with 32 hidden neurons. Results
are means over 10 executions after 100 epochs.

Tours lengths and stopping state. We now analyze the
tour lengths as a function of: (a) nH , the number of hid-
den units, and (b) the size of the stopping set
, where
(m)
NH is built from the training data as deﬁned in eq.(3). Note
S
that the r-th tour ends at state X(r)(ξ) = (cid:0)v(r)(ξ), h(r)(ξ)(cid:1)
whenever X(r)(ξ + 1)
NH , and that the stopping criteria

(m)
NH |

|S

∈ S

Method Learning Rate
CD-1
0.01
CD-10
0.01
PCD-1
0.01
PCD-10
0.01
0.1
LVS-1
0.1
LVS-10
0.1
LVS-3

Training
-169.8 (2.6)
-156.4 (0.5)
-147.8 (0.5)
-147.4 (0.5)
-138.3 (1.3)
-138.1 (1.1)
-138.2 (1.0)

Testing
-169.0 (2.6)
-155.6 (0.5)
-147.0 (0.5)
-146.7 (0.5)
-137.5 (1.4)
-137.4 (1.2)
-137.5 (1.1)

Table 2: (Higher is better) Average log-likelihood on the
MNIST dataset using a RBM with 25 hidden neurons. Re-
sults are means over 10 executions after 100 epochs, using
appropriate learning rates for each method.

only truly depends on h(r)(ξ + 1) since
possible visible states.

(m)
NH contains all
S

Figure 2a shows the CCDF of the tour lengths for differ-
ent values of nH . Most tours are extremely short for RBMs
with few hidden neurons (for nH = 16, more than 99% have
length one), but signiﬁcantly increase as we increase nH with
a very heavy tail. Thus, it is expected that we see little differ-
ence between LVS-1, LVS-3, and LVS-10. Moreover, these
heavy tails likely causes strong inspection-paradox biases for
CD-K in high-dimensional RBMs.

Most importantly, Figure 2a shows that tours either return
within one step or are unlikely to return for a very long time.
A closer inspection at these one-step tours, shows that over
99% of the cases have the hidden state being the starting state.
Thus, it seems that RBMs (even with few hidden neurons) are
just memorizing the training data, not learning how to gener-
ate new digits. We conjecture, however, that if our training
could force the tours to stop at distinct hidden states, and
requires the tours to be possibly longer (but not too-long),
the RBM might be taught how to generate new digits.

∈ {

1, 4, 7
}

Using nH = 32 hidden neurons, Figure 2b shows the
probability that a tour takes more than k steps, as we in-
crease the number of stopping states by setting the values of
(m)
m
NH . We see that the probability of tours
S
ﬁnishing in a single step increases as we add more states
to the stopping state. Thus, increasing the stopping set size
can signiﬁcantly shorten the tours, which in turn improves
the estimates of MCLV-K and LVS-K, and is an avenue to
ameliorate MCMC issues in high-dimensional RBMs.

in

Distribution modes of the learned RBM. Overall, we
may want to ask which digits (pictures) the model is learning
to reproduce well.

Figure 2c shows the length of the tours split by the type of
digit starting the tour. Note that the RBM seems to learn well
digits that are more consistent across the training data (e.g.,
numbers one and six) and have more trouble with digits that
have more variability (e.g., numbers four and eight).

As a visual inspection, Figure 3 shows the next visible
states of extremely short (length = 1) and long (unﬁnished
after 99,999 steps) tours, for nH = 32 hidden neurons. There
is a clear relation between long tours and not-so-common
examples in the training data. The ﬁrst and third rows show

(a)

(b)

(c)

H
Figure 2: (a) Tour lengths CCDF for nH = log2 |
| ∈
16, 20, 32, 64
for LVS-1; (b) Tour lengths CCDF variation
{
}
for LVS-10 with nH = 32, using larger Stopping Sets; (c)
Comparison of frequencies of short and long tours starting
from labeled states on a trained RBM

the training examples; the next row shows their ﬁrst visible
state after one Gibbs sampling step. Note that the majority of
the training examples are easy-to-recognize digits, with still
recognizable digits after sampling.

The second part of Figure 3 shows the training example
and ﬁrst visible samples of long tours. Note that the long
tours tend to be digits that are either thicker (rarer in the
data), or come in a not-so-standard shape than the digits in
the ﬁrst row. Note that in half of the examples, their ﬁrst
Gibbs samples are not too similar to the original digit. This
shows that the model is having trouble learning these less
standard digits. That long tours tend to start in odd-looking-
examples, should help us better understand and avoid fantasy
particles (visible states v
V that are not characteristic of
the dataset but have high probability nonetheless (Tieleman
2008)).

∈

Estimating the partition function. We use MCLV-
to estimate the partition function Z(W) =
Kdyn

Figure 3: Visible states of tours for nH = 32 neurons. The ﬁrst and
third rows of each image show the visible states from the training
data, whereas the second and fourth show the next visible state
obtained through Gibbs Sampling

from the time reversibility of Φ(W). Thus, all states x
†
Ω(cid:48)
in Φ(W): p(x; W).

∈
in Φ(cid:48)(W) have the same steady state distribution as

\{

S

}

(a) Short Tours

(b) Long Tours

(cid:80)

(cid:80)
h e−E((v,h);W) as speciﬁed in Corollary 2 using an
v
RBM with nH = 32, so that we can easily compute the true
partition function for comparison. We note that computing
ZS (W) is fast as it is in the order of the number of training
examples (as stated earlier).

Following Corollary 2, we estimate Z(W) with
ˆF (Kdyn,R)(W, f1), with f1(x) = 1. The average tour length
in this example is estimated to be close to one (see Figure
1). Thus, ˆF (Kdyn,R)(W, f1)
10100 in
≈
this example. In fact, ˆF (Kdyn,R)(W, f1) and the true partition
function Z(W) report the same value up to nearly machine
precision (10-th decimal place).

ZS (W) = 1.46

×

Conclusions
This paper proposes a Las Vegas transformation of Markov
Chain Monte Carlo (MCMC) for RBMs, denoted Markov
Chain Las Vegas (MCLV). MCLV gives statistical guarantees
in exchange for random running times. Our empirical results
show MCLV-K is a powerful tool to learn and understand
RBMs, with a gradient estimator LVS-K that can better ﬁt
RBMs to the MNIST dataset than standard MCMC methods
such as Contrastive Divergence (CD-K).

Appendix

Proof of Corollary 1
Proof. Collapse the states of
into a single state S to form
S
a state-collapsed MC Φ(cid:48)(W), with transition probabilities
given by Deﬁnition 1. Let (S, X(·)(2), . . . , X(·)(ξ(·))) be
a sequence of discrete states of the r-th tour of the state-
collapsed MC Φ(cid:48)(W). Note that S is the renewal state of the
tour Ξ(·), i.e., X(·)(1) = S.
reversibility

that
p(x; W)pΦ(x, y) = p(y; W)pΦ(y, x), where pa in-
dicates the probability transition matrix of MC a. Let
ZS(W) = (cid:80)
y∈S e−E(y;W). We now show that Φ(cid:48)(W) is
time-reversible using the fact that the steady state distribution
of Φ(W) is known up to a constant factor. Thus, we
“guess” the steady state distribution in Φ(cid:48)(W) of S as

of Φ(W)

implies

time

The

p(S; W) = ZS(W)/Z(W) and verify that, because
is a
proper subset of Ω, the balance equations of Φ(cid:48)(W) are time
reversible:

S

p(S; W)pΦ(cid:48)(S, x) :=

ZS(W)
Z(W)

(cid:88)

y∈S

e−E(y;W)
ZS(W)

pΦ(y, x)

p(y; W)pΦ(y, x)

p(x; W)pΦ(x, y)

see†

=

=

(cid:88)

y∈S
(cid:88)

y∈S

= p(x; W)pΦ(cid:48)(x, S),

Proof of Lemma 1
Lemma (Perfect sampling of tours). Let

(x, X(i)(2), . . . , X(i)(k))

k =
C
be a set of tours of length k
S
≤
according to some distribution.
Then, there exists a distribution Gk such that the random

i
}
K, with x sampled from

{

variables

∀

σ

G

k :=

k
∈ C

g(σ) :
{

(8)
are i.i.d. samples of Gk, with g deﬁned over the appropriate
σ-algebra (e.g., k RBM states) with

(cid:107)
Moreover, if we perform M tours, these tours ﬁnish in ﬁnite
M
time and
r=1 is an i.i.d. sequence with a well-deﬁned
}
probability distribution p(ξ(·) = k).

.
≤ ∞

ξ(r)
{

)
1
(cid:107)

g(
·

}

Proof. Consider an inﬁnite run of the MCMC Φ(cid:48)(W):
X(1), X(2), . . ., starting at state X(1) = S. Divide this inﬁ-
nite run into tours, the longest segments of consecutive states
that start at state S but do not contain S in any other states
in the segment. Let ξ(r) be the length of the r-th tour. Be-
cause Φ(cid:48)(W) is an irreducible Markov chain, it is positive
recurrent (Gallager 2013, Theorem 6.3.8), and we can use
Kac’s theorem (Meyn and Tweedie 2012, Theorem 10.2.2)
to assert that E[ξ(·)] <
∞
almost surely (i.e., except for a set of measure zero). Deﬁne
Rr+1 = Rr + ξ(r+1), with R0 = 0. Deﬁne

, which also implies ξ(·) <

∞

k =

G

g(X(Rr−1), . . . , X(Rr
{

−

1)) :

r = 1, . . . , M, ξ(r) = k

,

}

with M > 1. By the strong Markov property, there exists a
distribution Gk such that
k is an iid sequence from Gk. Note
M
that
r=1 is also iid. Further, note that by Corollary 1
}
we can equivalently consider the MC Φ(W), starting at state
x sampled from the stopping set
, which concludes the
proof.

ξ(r)
{

S

G

Proof of Theorems 1 and 3
Proof. For simplicity, in what follows we combine the proofs
of Theorems 1 and 3, specializing on each case when nec-
0, Rr+1 = Rr + ξ(r+1) and for
essary. Deﬁne for all r

≥

≥

0, N (t) = argmaxr 1{Rr−1<t}, with R0 = 0. N (t)
r≥1 are
}

t
counts how many of the tours in the sequence
needed to add up to the largest number smaller than t. Let
Rr(cid:88)

ξ(r)
{

Y (r)
K = 1
{

ξ(r)

K

}

≤

f (X(r)(t

Rr−1)).

−

t=Rr−1+1

By Lemma 1, both
quences. Also, even in the case K

Y (r)
K }
{

r≥1 and

Y (·)
E[
K (cid:107)
(cid:107)

1]

E[sup
x

ξ(·)

f (x)
(cid:107)
(cid:107)

r≥1 are iid se-
}

ξ(r)
{
,
→ ∞
1] = E[ξ(·)] sup

f (x)
(cid:107)

1

x (cid:107)

≤
<

,
∞

as by deﬁnition
∞
∞
(see Lemma 1). The Renewal-Reward Theorem (Br´emaud
2013, Theorem 4.2) yields, r

and we know E[ξ(·)] <

f (
·
(cid:107)

1 <

)
(cid:107)

1

(cid:80)N (t)

r=1 Y (r)
t

K

=

lim
t→∞

≥

E

(cid:104)
1{ξ(·)≤K}

(cid:80)ξ(·)

k=1 f (X(·)(k))

E[ξ(·)]

(cid:105)

.

(9)

Note that,
(cid:80)N (t)

r=1 Y (r)
t

K

=

1{ξ(N (t(cid:48) ))≤K}

(cid:80)RN (t)

t(cid:48)=1 f (X(N (t(cid:48)))(t(cid:48)
t

−

RN (t(cid:48))−1))

(cid:80)RN (t)

t(cid:48)=1 1{ξ(N (t(cid:48) ))≤K}f (X(N (t(cid:48)))(t(cid:48)

RN (t(cid:48))−1))

−

=

RN (t)

RN (t)
t

.

·

RN (t)
t

= 1, as by deﬁnition
ξ(N (t)+1)
t

Most importantly, limt→∞
RN (t)+ξ(N (t)+1) > t, and limt→∞
= 0, otherwise
an inﬁnitely large ξ(N (t)+1) would have non-zero measure,
contradicting E[ξ(N (t)+1)] <
r=1 Y (r)
t
(cid:80)RN (t)
t(cid:48)=1 1{ξ(N (t(cid:48)))≤K}f (X(N (t(cid:48)))(t(cid:48)

. This yields,

RN (t(cid:48))−1))

lim
t→∞

(cid:80)N (t)

∞

K

−

.

= lim
t→∞

RN (t)

RN (t)
t(cid:48)=1

(Theorem 3) The case of Kdyn: As Kdyn is ﬁnite almost
surely (see proof of Lemma 1), it makes the condition
1{ξ(N (t(cid:48) ))≤Kdyn} := 1. Note that the sequence
−
RN (t(cid:48))−1)
is just a single sample path of our MC
}
starting at state x(cid:48), taking RN (t) steps. As our MC is irre-
ducible and time-reversible, there is solution and the solution
is unique (Gallager 2013, Theorem 6.3.8), and thus we can
use the ergodic theorem to show
(cid:80)RN (t)

X(N (t(cid:48)))(t(cid:48)

{

lim
t→∞

t(cid:48)=1 f (X(N (t(cid:48)))(t(cid:48)
RN (t)

−

RN (t(cid:48))−1))

=

f (x)p(x; W),

(cid:88)

x

and substituting the above equation in (9), yields

E





ξ(·)
(cid:88)

k=1

f (X(·)(k))


 = E[ξ(·)]

(cid:88)

x

f (x)p(x; W),

r

1.

≥

(10)
Finally, by Kac’s theorem (Meyn and Tweedie 2012, Theo-
rem 10.2.2),

E[ξ(·)] =

1
p(x(cid:48); W)

=

Z(W)
e−E(x(cid:48);W)

,

(11)

as p(x(cid:48); W) is the steady state probability of visiting state
x(cid:48). Replacing (11) into (10) and multiplying it by e−E(x(cid:48);W)
on both sides concludes the unbiasedness proof. Thus, if
ˆF (Kdyn)
(W, f ) denotes the estimator ˆF in eq.(5) applied to
r
only a single tour r = 1, . . . , R. Then, E[F (Kdyn)
(W, f )] =
F (Kdyn)
F (W, f ) and the sequence
r≥1 is trivially
r
{
}
iid by the strong Markov property. This iid sequence guaran-
tees the following convergence properties.

r
(W, f )

k=1

∂E(X(r)(k);W)
∂W

Error bound: Note that (cid:80)ξ(r)

is upper
bounded by ξ(r)B. As Φ(W) is time-reversible, it is equiva-
lent to a random walk on a weighted graph. Thus, Lemma 2(i)
of Avrachenkov et al. (Avrachenkov, Ribeiro, and Sreedharan
2016) applies with Z(W) = 2dtot, ZS (W) = dSn , and we
have

var( ˆF (Kdyn)
1

(W))

B2 (cid:0)(Z(W))2/(ZS (W)δ) + 1(cid:1) .

By the strong Markov property the tours are independent,
thus, var( ˆF (Kdyn,R)(W)) = var( ˆF (Kdyn)
(W))/R by the Bi-
enaym´e formula. And we have already shown that the es-
timate of ˆF (Kdyn)
(W) is unbiased. Finally, we obtain the
bound through the application of Chebyshev’s inequality.

1

1

≤

case

of K: From above,
(Theorem 1) The
ˆF (Kdyn,R)(W, f ) is an unbiased estimate of F (W, f ).
The remaining of the proof is straightforward. The tours are
independent. Thus E[ ˆF (K,R)(W)] = E[ ˆF (K,1)(W)]. Note
that

K−1
(cid:88)

E[ξ(·)]

−

kP [ξ(·) = k] =

kP [ξ(·) = k],

∞
(cid:88)

k=1

and as B upper bounds
E[ ˆF (Kdyn,1)(W)
(cid:80)K−1
(E[ξ(·)]

k=1 kP [ξ(·) = k])

k=K
)
f (
1,
(cid:107)
·
ˆF (K,R)(W)]
can
B.

−

(cid:107)

−

·

then the bias
at most

be

Theorem 2
Proof of Theorem 2. Note that the condition

inf
x∈Ω\S

(cid:88)

y∈S

pΦ(x, y)

(cid:15)

≥

ensures that the MC Φ(cid:48)(W) satisﬁes Doeblin’s condition, and
therefore Φ(cid:48)(W) is geometrically ergodic with convergence
rate (1
(cid:15)) (Stroock 1995, pp. 30). Finally, by Kendall’s theo-
rem (Meyn and Tweedie 2012, Theorem 15.1.1), a geometric
ergodicity and a geometric decay in the tail of the return time
distribution are equivalent conditions.

−

Proof of Corollary 3
Proof. An unbiased estimate of
Z for one tour is ob-
tained from F (Kdyn,R)(W, f ) in eq. (6) of Theorem 3 with
(cid:80)N
f (y) = 1
∂W . Averaging the gra-
N
dient of each tour over R
1 tours gives the desired re-
sult.

∂W −
≥

L
∂E(y;W)

∂E(xn;W)

n=1

∇

W

Source Code
Our source code and detailed results are hosted at
https://github.com/PurdueMINDS/MCLV-RBM.

References
[Aldous and Fill 2002] Aldous, D., and Fill, J. 2002. Reversible

markov chains and random walks on graphs.

[Avrachenkov, Ribeiro, and Sreedharan 2016] Avrachenkov,

K.;
Ribeiro, B.; and Sreedharan, J. K. 2016. Inference in OSNs via
Lightweight Partial Crawls. In SIGMETRICS.

[Baxendale 2005] Baxendale, P. H. 2005. Renewal theory and com-
putable convergence rates for geometrically ergodic Markov chains.
Ann. Appl. Probab.
[Bengio and Delalleau 2009] Bengio, Y., and Delalleau, O. 2009.
Justifying and Generalizing Contrastive Divergence. Neural Com-
putation.

[Br´emaud 2013] Br´emaud, P. 2013. Markov chains: Gibbs ﬁelds,

Monte Carlo simulation, and queues. Springer.

[Bubley and Dyer 1997] Bubley, R., and Dyer, M. 1997. Path cou-
pling: A technique for proving rapid mixing in Markov chains. In
FOCS.
[Buchholz 1994] Buchholz, P. 1994. Exact and ordinary lumpability

in ﬁnite markov chains. Journal of Applied Probability.

[Carreira-Perpi˜n´an and Hinton 2005] Carreira-Perpi˜n´an, M. A., and
In

Hinton, G. E. 2005. On Contrastive Divergence Learning.
AISTATS.
[Corcoran and Tweedie 2002] Corcoran, J., and Tweedie, R. 2002.
Perfect sampling from independent Metropolis-Hastings chains. J.
Stat. Plan. Inference.

[Erhan et al. 2010] Erhan, D.; Bengio, Y.; Courville, A.; Manzagol,
P.-A.; Vincent, P.; and Bengio, S. 2010. Why does unsupervised
pre-training help deep learning? JMLR.

[Fill et al. 2000] Fill, J. A.; Machida, M.; Murdoch, D. J.; and Rosen-
thal, J. S. 2000. Extension of Fill’s perfect rejection sampling
algorithm to general chains. RSA.

[Fill 1997] Fill, J. A. 1997. An interruptible algorithm for perfect

sampling via markov chains. In STOC.

[Fischer and Igel 2014] Fischer, A., and Igel, C. 2014. Training
restricted Boltzmann machines: An introduction. Pattern Recognit.
[Gallager 2013] Gallager, R. G. 2013. Stochastic processes: theory

for applications. Cambridge University Press.

[Gilks, Roberts, and Sahu 1998] Gilks, W. R.; Roberts, G. O.; and
Sahu, S. K. 1998. Adaptive Markov Chain Monte Carlo through
Regeneration. J. AMSTAT.

[Hinton, Osindero, and Teh 2006] Hinton, G. E.; Osindero, S.; and
Teh, Y.-W. 2006. A fast learning algorithm for deep belief nets.
Neural Computation.

[Hinton 2002] Hinton, G. E. 2002. Training products of experts by

minimizing contrastive divergence. Neural Computation.

[Hinton 2012] Hinton, G. E. 2012. A Practical Guide to Training
Restricted Boltzmann Machines. In Neural networks: Tricks of the
trade. Springer.

[Hobert et al. 2002] Hobert, J. P.; Jones, G. L.; Presnell, B.; and
Rosenthal, J. S. 2002. On the applicability of regenerative simula-
tion in Markov chain Monte Carlo. Biometrika (4).

[Long and Servedio 2010] Long, P. M., and Servedio, R. 2010. Re-
stricted boltzmann machines are hard to approximately evaluate or
simulate. In ICML.

[Lyne et al. 2015] Lyne, A.-M.; Girolami, M.; Atchad´e, Y.; Strath-
mann, H.; Simpson, D.; et al. 2015. On Russian roulette estimates
for Bayesian inference with doubly-intractable likelihoods. Statisti-
cal science.

[Meyn and Tweedie 2012] Meyn, S. P., and Tweedie, R. L. 2012.

Markov chains and stochastic stability. Springer.

[Mont´ufar and Morton 2015] Mont´ufar, G., and Morton, J. 2015.

Discrete restricted boltzmann machines. JMLR.

[Mykland, Tierney, and Yu 1995] Mykland, P.; Tierney, L.; and Yu,
B. 1995. Regeneration in Markov chain samplers. J. AMSTAT
(429).

[Neal 2001] Neal, R. M. 2001. Annealed Importance Sampling.

Statistics and Computing 11(2):125–139.

[Neal 2005] Neal, R. M. 2005. Estimating Ratios of Normaliz-
ing Constants using Linked Importance Sampling. arXiv preprint
math/0511216.

[Ollivier 2009] Ollivier, Y. 2009. Ricci curvature of Markov chains

on metric spaces. J. Funct. Anal.

[Prats, Romero Merino, and Castrillejo 2014] Prats, D. B.; Romero
Merino, E.; and Castrillejo, F. M. 2014. Stopping Criteria in
Contrastive Divergence: Alternatives to the Reconstruction Error.
In ICML.

[Propp and Wilson 1996] Propp, J. G., and Wilson, D. B. 1996.
Exact sampling with coupled markov chains and applications to
statistical mechanics. RSA.

[Propp and Wilson 1998] Propp, J. G., and Wilson, D. B. 1998. How
to get a perfectly random sample from a generic markov chain and
generate a random spanning tree of a directed graph. Journal of
Algorithms.
[Roberts and Tweedie 1999] Roberts, G. O., and Tweedie, R. L.
1999. Bounds on regeneration times and convergence rates for
Markov chains. Stoch. Process. their Appl.

[Salakhutdinov and Hinton 2009] Salakhutdinov, R., and Hinton, G.

2009. Deep Boltzmann Machines. JMLR.

[Salakhutdinov and Murray 2008] Salakhutdinov, R., and Murray, I.
In

2008. On the quantitative analysis of deep belief networks.
ICML.

[Schulz, M¨uller, and Behnke 2010] Schulz, H.; M¨uller, A.; and
Behnke, S. 2010. Investigating Convergence of Restricted Boltz-
mann Machine Learning. In NIPS.

[Smolensky 1986] Smolensky, P. 1986. Information processing in
dynamical systems: Foundations of harmony theory, tech. rep. dtic.
[Stewart 1994] Stewart, W. J. 1994. Introduction to the numerical

solutions of Markov chains. Princeton Univ. Press.

[Stroock 1995] Stroock, D. 1995. An introduction to Markov pro-

cesses. Springer.

[Sutskever and Tieleman 2010] Sutskever, I., and Tieleman, T. 2010.
On the Convergence Properties of Contrastive Divergence. In AIS-
TATS.
[Tieleman 2008] Tieleman, T. 2008. Training restricted Boltzmann
machines using approximations to the likelihood gradient. In ICML.
[Wilson 1983] Wilson, J. R. 1983. The inspection paradox in

renewal-reward processes. Operations Research Letters.

[Wilson 2000] Wilson, D. B. 2000. Layered multishift coupling for
use in perfect sampling algorithms (with a primer on cftp). Monte
Carlo Methods.

[Yuille 2005] Yuille, A. 2005. The Convergence of Contrastive

Divergences. In NIPS.

