Deep Semantic Role Labeling with Self-Attention

Zhixing Tan1, Mingxuan Wang2, Jun Xie2, Yidong Chen1, Xiaodong Shi1∗
1School of Information Science and Engineering, Xiamen University, Xiamen, China
2Mobile Internet Group, Tencent Technology Co., Ltd, Beijing, China
playinf@stu.xmu.edu.cn,
{xuanswang, stiffxie}@tencent.com,
{ydchen, mandel}@xmu.edu.cn

7
1
0
2
 
c
e
D
 
5
 
 
]
L
C
.
s
c
[
 
 
1
v
6
8
5
1
0
.
2
1
7
1
:
v
i
X
r
a

Abstract

Semantic Role Labeling (SRL) is believed to be a crucial step
towards natural language understanding and has been widely
studied. Recent years, end-to-end SRL with recurrent neu-
ral networks (RNN) has gained increasing attention. How-
ever, it remains a major challenge for RNNs to handle struc-
tural information and long range dependencies. In this pa-
per, we present a simple and effective architecture for SRL
which aims to address these problems. Our model is based
on self-attention which can directly capture the relationships
between two tokens regardless of their distance. Our sin-
gle model achieves F1 = 83.4 on the CoNLL-2005 shared
task dataset and F1 = 82.7 on the CoNLL-2012 shared task
dataset, which outperforms the previous state-of-the-art re-
sults by 1.8 and 1.0 F1 score respectively. Besides, our model
is computationally efﬁcient, and the parsing speed is 50K to-
kens per second on a single Titan X GPU.

Introduction
Semantic Role Labeling is a shallow semantic parsing task,
whose goal is to determine essentially “who did what to
whom”, “when” and “where”. Semantic roles indicate the
basic event properties and relations among relevant entities
in the sentence and provide an intermediate level of semantic
representation thus beneﬁting many NLP applications, such
as Information Extraction (Bastianelli et al. 2013), Question
Answering (Surdeanu et al. 2003; Moschitti, Morarescu, and
Harabagiu 2003; Dan and Lapata 2007), Machine Trans-
lation (Knight and Luk 1994; Uefﬁng, Haffari, and Sarkar
2007; Wu and Fung 2009) and Multi-document Abstractive
Summarization (Genest and Lapalme 2011).

Semantic roles are closely related to syntax. Therefore,
traditional SRL approaches rely heavily on the syntactic
structure of a sentence, which brings intrinsic complex-
ity and restrains these systems to be domain speciﬁc. Re-
cently, end-to-end models for SRL without syntactic inputs
achieved promising results on this task (Zhou and Xu 2015;
Marcheggiani, Frolov, and Titov 2017; He et al. 2017).
As the pioneering work, Zhou and Xu (2015) introduced
a stacked long short-term memory network (LSTM) and

achieved the state-of-the-art results. He et al., (2017) re-
ported further improvements by using deep highway bidirec-
tional LSTMs with constrained decoding. These successes
involving end-to-end models reveal the potential ability of
LSTMs for handling the underlying syntactic structure of
the sentences.

Despite recent successes, these RNN-based models have
limitations. RNNs treat each sentence as a sequence of
words and recursively compose each word with its previ-
ous hidden state. The recurrent connections make RNNs
applicable for sequential prediction tasks with arbitrary
length, however, there still remain several challenges in
practice. The ﬁrst one is related to memory compression
problem (Cheng, Dong, and Lapata 2016). As the entire his-
tory is encoded into a single ﬁxed-size vector, the model
requires larger memory capacity to store information for
longer sentences. The unbalanced way of dealing with se-
quential information leads the network performing poorly
on long sentences while wasting memory on shorter ones.
The second one is concerned with the inherent structure of
sentences. RNNs lack a way to tackle the tree-structure of
the inputs. The sequential way to process the inputs remains
the network depth-in-time, and the number of nonlinearities
depends on the time-steps.

To address these problems above, we present a deep atten-
tional neural network (DEEPATT) for the task of SRL1. Our
models rely on the self-attention mechanism which directly
draws the global dependencies of the inputs. In contrast to
RNNs, a major advantage of self-attention is that it con-
ducts direct connections between two arbitrary tokens in a
sentence. Therefore, distant elements can interact with each
other by shorter paths (O(1) v.s. O(n)), which allows unim-
peded information ﬂow through the network. Self-attention
also provides a more ﬂexible way to select, represent and
synthesize the information of the inputs and is complemen-
tary to RNN based models. Along with self-attention, DEEP-
ATT comes with three variants which uses recurrent (RNN),
convolutional (CNN) and feed-forward (FFN) neural net-
work to further enhance the representations.

Although DEEPATT is fairly simple, it gives remarkable
empirical results. Our single model outperforms the previ-

∗ Corresponding author.

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

XMUNLP/Tagger

1Our source code is available at https://github.com/

ous state-of-the-art systems on the CoNLL-2005 shared task
dataset and the CoNLL-2012 shared task dataset by 1.8 and
1.0 F1 score respectively. It is also worth mentioning that
on the out-of-domain dataset, we achieve an improvement
upon the previous end-to-end approach (He et al. 2017) by
2.0 F1 score. The feed-forward variant of DEEPATT allows
signiﬁcantly more parallelization, and the parsing speed is
50K tokens per second on a single Titan X GPU.

Semantic Role Labeling
Given a sentence, the goal of SRL is to identify and clas-
sify the arguments of each target verb into semantic roles.
For example, for the sentence “Marry borrowed a book from
John last week.” and the target verb borrowed, SRL yields
the following outputs:

[ARG0 Marry ] [V borrowed ] [ARG1 a book ]
[ARG2 from John ] [AM-TMP last week ].

Here ARG0 represents the borrower, ARG1 represents
the thing borrowed, ARG2 represents the entity borrowed
from, AM-TMP is an adjunct indicating the timing of the
action and V represents the verb.

Generally, semantic role labeling consists of two steps:
identifying and classifying arguments. The former step
involves assigning either a semantic argument or non-
argument for a given predicate, while the latter includes la-
beling a speciﬁc semantic role for the identiﬁed argument.
It is also common to prune obvious non-candidates before
the ﬁrst step and to apply post-processing procedure to ﬁx
inconsistent predictions after the second step. Finally, a dy-
namic programming algorithm is often applied to ﬁnd the
global optimum solution for this typical sequence labeling
problem at the inference stage.

In this paper, we treat SRL as a BIO tagging problem. Our
approach is extremely simple. As illustrated in Figure 1, the
original utterances and the corresponding predicate masks
are ﬁrst projected into real-value vectors, namely embed-
dings, which are fed to the next layer. After that, we design
a deep attentional neural network which takes the embed-
dings as the inputs to capture the nested structures of the
sentence and the latent dependency relationships among the
labels. On the inference stage, only the topmost outputs of
attention sub-layer are taken to a logistic regression layer to
make the ﬁnal decision 2.

Deep Attentional Neural Network for SRL
In this section, we will describe DEEPATT in detail. The
main component of our deep network consists of N iden-
tical layers. Each layer contains a nonlinear sub-layer fol-
lowed by an attentional sub-layer. The topmost layer is the
softmax classiﬁcation layer.

Self-Attention
Self-attention or intra-attention, is a special case of atten-
tion mechanism that only requires a single sequence to

2In case of BIO violations, we simply treat the argument of the

B tags as the argument of the whole span.

Figure 1: An illustration of our deep attentional neural
network. Original utterances and corresponding predicate
masks are taken as the only inputs for our deep model. For
example, love is the predicate and marked as 1, while other
words are marked as 0.

compute its representation. Self-attention has been success-
fully applied to many tasks, including reading comprehen-
sion, abstractive summarization, textual entailment, learning
task-independent sentence representations, machine transla-
tion and language understanding (Cheng, Dong, and Lapata
2016; Parikh et al. 2016; Lin et al. 2017; Paulus, Xiong, and
Socher 2017; Vaswani et al. 2017; Shen et al. 2017).

In this paper, we adopt the multi-head attention formula-
tion by Vaswani et al. (2017). Figure 2 depicts the compu-
tation graph of multi-head attention mechanism. The cen-
ter of the graph is the scaled dot-product attention, which is
a variant of dot-product (multiplicative) attention (Luong,
Pham, and Manning 2015). Compared with the standard
additive attention mechanism (Bahdanau, Cho, and Bengio
2014) which is implemented using a one layer feed-forward
neural network, the dot-product attention utilizes matrix pro-
duction which allows faster computation. Given a matrix of
n query vectors Q ∈ Rn×d, keys K ∈ Rn×d and values
V ∈ Rn×d, the scaled dot-product attention computes the
attention scores based on the following equation:

Attention(Q, K, V) = softmax(

)V

(1)

QKT
√
d

where d is the number of hidden units of our network.

The multi-head attention mechanism ﬁrst maps the matrix
of input vectors X ∈ Rt×d to queries, keys and values ma-
trices by using different linear projections. Then h parallel
heads are employed to focus on different part of channels

Figure 2: The computation graph of multi-head self-attention mechanism. All heads can be computed in parallel using highly
optimized matrix multiplication codes.

i ∈ Rn×d/h, WK

of the value vectors. Formally, for the i-th head, we denote
the learned linear maps by WQ
i ∈ Rn×d/h
i ∈ Rn×d/h, which correspond to queries, keys and
and WV
values respectively. Then the scaled dot-product attention is
used to compute the relevance between queries and keys,
and to output mixed representations. The mathematical for-
mulation is shown below:

Mi = Attention(QWQ

i , KWK

i , VWV
i )

(2)

Finally, all the vectors produced by parallel heads are con-
catenated together to form a single vector. Again, a linear
map is used to mix different channels from different heads:

M = Concat(M1, . . . , Mh)
Y = MW

(3)
(4)

where M ∈ Rn×d and W ∈ Rd×d.

The self-attention mechanism has many appealing aspects
compared with RNNs or CNNs. Firstly, the distance be-
tween any input and output positions is 1, whereas in RNNs
it can be n. Unlike CNNs, self-attention is not limited to
ﬁxed window sizes. Secondly, the attention mechanism uses
weighted sum to produce output vectors. As a result, the gra-
dient propagations are much easier than RNNs or CNNs. Fi-
nally, the dot-product attention is highly parallel. In contrast,
RNNs are hard to parallelize owing to its recursive compu-
tation.

Nonlinear Sub-Layers

The successes of neural networks root in its highly ﬂexible
nonlinear transformations. Since attention mechanism uses
weighted sum to generate output vectors, its representational
power is limited. To further increase the expressive power of
our attentional network, we employ a nonlinear sub-layer to
transform the inputs from the bottom layers. In this paper,
we explore three kinds of nonlinear sub-layers, namely re-
current, convolutional and feed-forward sub-layers.

Recurrent Sub-Layer We use bidirectional LSTMs to
build our recurrent sub-layer. Given a sequence of input vec-
tors {xt}, two LSTMs process the inputs in opposite direc-
tions. To maintain the same dimension between inputs and
outputs, we use the sum operation to combine two represen-

tations:

−→
h t = LSTM(xt,
←−
h t = LSTM(xt,
−→
h t +

←−
h t

yt =

−→
h t−1)
←−
h t+1)

(5)

(6)

(7)

Convolutional Sub-Layer For convolutional sub-layer,
we use the Gated Linear Unit (GLU) proposed by Dauphin
et al. (2016). Compared with the standard convolutional neu-
ral network, GLU is much easier to learn and achieves im-
pressive results on both language modeling and machine
translation task (Dauphin et al. 2016; Gehring et al. 2017).
Given two ﬁlters W ∈ Rk×d×d and V ∈ Rk×d×d, the out-
put activations of GLU are computed as follows:

GLU(X) = (X ∗ W) (cid:12) σ(X ∗ V)

(8)

The ﬁlter width k is set to 3 in all our experiments.

Feed-forward Sub-Layer The feed-forward sub-layer is
quite simple. It consists of two linear layers with hidden
ReLU nonlinearity (Nair and Hinton 2010) in the middle.
Formally, we have the following equation:

FFN(X) = ReLU(XW1)W2
(9)
where W1 ∈ Rd×hf and W2 ∈ Rhf ×d are trainable ma-
trices. Unless otherwise noted, we set hf = 800 in all our
experiments.

Deep Topology
Previous works pointed out that deep topology is essen-
tial to achieve good performance (Zhou and Xu 2015;
He et al. 2017). In this work, we use the residual connec-
tions proposed by He et al. (2016) to ease the training of our
deep attentional neural network. Speciﬁcally, the output Y
of each sub-layer is computed by the following equation:

Y = X + Sub-Layer(X)

(10)

We then apply layer normalization (Ba, Kiros, and Hinton
2016) after the residual connection to stabilize the activa-
tions of deep neural network.

Position Encoding
The attention mechanism itself cannot distinguish between
different positions. So it is crucial to encode positions of

each input words. There are various ways to encode posi-
tions, and the simplest one is to use an additional position
embedding. In this work, we try the timing signal approach
proposed by Vaswani et al. (2017), which is formulated as
follows:

timing(t, 2i) = sin(t/100002i/d)
timing(t, 2i + 1) = cos(t/100002i/d)
(12)
The timing signals are simply added to the input embed-
dings. Unlike the position embedding approach, this ap-
proach does not introduce additional parameters.

(11)

Pipeline
The ﬁrst step of using neural networks to process symbolic
data is to represent them by distributed vectors, also called
embeddings (Bengio et al. 2003). We take the very original
utterances and the corresponding predicate masks m as the
input features. mt is set to 1 if the corresponding word is a
predicate, or 0 if not.

Formally, in SRL task, we have a word vocabulary V
and mask vocabulary C = {0, 1}. Given a word sequence
{x1, x2, . . . , xT } and a mask sequence {m1, m2, ..., mT },
each word xt ∈ V and its corresponding predicate mask
mt ∈ C are projected into real-valued vectors e(xt) and
e(mt) through the corresponding lookup table layer, respec-
tively. The two embeddings are then concatenated together
as the output feature maps of the lookup table layers. For-
mally speaking, we have xt = [e(wt), e(mt)].

We then build our deep attentional neural network to learn
the sequential and structural information of a given sentence
based on the feature maps from the lookup table layer. Fi-
nally, we take the outputs of the topmost attention sub-layer
as inputs to make the ﬁnal predictions.

Since there are dependencies between semantic labels,
most previous neural network models introduced a transition
model for measuring the probability of jumping between the
labels. Different from these works, we perform SRL as a
typical classiﬁcation problem. Latent dependency informa-
tion is embedded in the topmost attention sub-layer learned
by our deep models. This approach is simpler and easier to
implement compared to previous works.

Formally, given an input sequence x = {x1, x2, . . . , xn},
the log-likelihood of the corresponding correct label se-
quence y = {y1, y2, . . . , yn} is
n
(cid:88)

log p(y|x; θ) =

log p(yt|x; θ).

(13)

t=1
Our model predict the corresponding label yt based on the
representation ht produced by the topmost attention sub-
layer of DEEPATT:

p(yt|x; θ) = p(yt|ht; θ)

(14)

= softmax(Woht)T δyt,

(15)
Where Wo is the softmax matrix and δyt
is Kronecker
delta with a dimension for each output symbol, so
softmax(Woht)T δyt is exactly the yt’th element of the dis-
tribution deﬁned by the softmax. Our training objective is to
maximize the log probabilities of the correct output labels
given the input sequence over the entire training set.

Experiments
We report our empirical studies of DEEPATT on the two
commonly used datasets from the CoNLL-2005 shared task
and the CoNLL-2012 shared task.

Datasets
The CoNLL-2005 dataset takes section 2-21 of the Wall
Street Journal (WSJ) corpus as training set, and section 24
as development set. The test set consists of section 23 of
the WSJ corpus as well as 3 sections from the Brown cor-
pus (Carreras and M`arquez 2005). The CoNLL-2012 dataset
is extracted from the OntoNotes v5.0 corpus. The descrip-
tion and separation of training, development and test set can
be found in Pardhan et al. (2013).

Model Setup
Initialization We initialize the weights of all sub-layers
as random orthogonal matrices. For other parameters, we
initialize them by sampling each element from a Gaussian
distribution with mean 0 and variance 1√
. The embedding
d
layer can be initialized randomly or using pre-trained word
embeddings. We will discuss the impact of pre-training in
the analysis subsection.3

Settings and Regularization The settings of our models
are described as follows. The dimension of word embed-
dings and predicate mask embeddings is set to 100 and the
number of hidden layers is set to 10. We set the number
of hidden units d to 200. The number of heads h is set to
8. We apply dropout (Srivastava et al. 2014) to prevent the
networks from over-ﬁtting. Dropout layers are added before
residual connections with a keep probability of 0.8. Dropout
is also applied before the attention softmax layer and the
feed-froward ReLU hidden layer, and the keep probabili-
ties are set to 0.9. We also employ label smoothing tech-
nique (Szegedy et al. 2016) with a smoothing value of 0.1
during training.

Learning Parameter optimization is performed using
stochastic gradient descent. We adopt Adadelta (Zeiler
2012) ((cid:15) = 106 and ρ = 0.95) as the optimizer. To avoid
exploding gradients problem, we clip the norm of gradi-
ents with a predeﬁned threshold 1.0 (Pascanu et al. 2013).
Each SGD contains a mini-batch of approximately 4096 to-
kens for the CoNLL-2005 dataset and 8192 tokens for the
CoNLL-2012 dataset. The learning rate is initialized to 1.0.
After training 400k steps, we halve the learning rate every
100K steps. We train all models for 600K steps. For DEEP-
ATT with FFN sub-layers, the whole training stage takes
about two days to ﬁnish on a single Titan X GPU, which is
2.5 times faster than the previous approach (He et al. 2017).

Results
In Table 1 and 2, we give the comparisons of DEEPATT with
previous approaches. On the CoNLL-2005 dataset, the sin-

3To be strictly comparable to previous work, we use the same

vocabularies and pre-trained embeddings as He et al.(2017).

Model

He et al. (Ensemble) (2017)
He et al. (Single) (2017)
Zhou and Xu (2015)
FitzGerald et al. (Struct., Ensemble) (2015)
T¨ackstr¨om et al. (Struct.) (2015)
Toutanova et al. (Ensemble) (2008)
Punyakanok et al. (Ensemble) (2008)
DEEPATT (RNN)
DEEPATT (CNN)
DEEPATT (FFN)
DEEPATT (FFN, Ensemble)

Development

WSJ Test

Brown Test

Combined

P
83.1
81.6
79.7
81.2
81.2
-
80.1
81.2
82.1
82.6
84.3

R
82.4
81.6
79.4
76.7
76.2
-
74.8
82.3
82.8
83.6
84.9

F1
82.7
81.6
79.6
78.9
78.6
78.6
77.4
81.8
82.4
83.1
84.6

Comp.
64.1
62.3
-
55.1
54.4
58.7
50.7
62.4
63.6
65.2
67.3

P
85.0
83.1
82.9
82.5
82.3
81.9
82.3
83.5
83.6
84.5
85.9

R
84.3
83.0
82.8
78.2
77.6
78.8
76.8
84.0
83.9
85.2
86.3

F1
84.6
83.1
82.8
80.3
79.9
80.3
79.4
83.7
83.8
84.8
86.1

Comp.
66.5
64.3
-
57.3
56.0
60.1
53.8
65.2
65.4
66.4
69.0

P
74.9
72.8
70.7
74.5
74.3
-
73.4
72.5
72.8
73.5
74.6

R
72.4
71.4
68.2
70.0
68.6
-
62.9
73.4
72.7
74.6
75.0

F1
73.6
72.1
69.4
72.2
71.3
68.8
67.8
72.9
72.7
74.1
74.8

Comp.
46.5
44.8
-
41.3
39.8
40.8
32.3
44.7
45.9
48.4
48.6

F1
83.2
81.6
81.1
-
-
-
77.9
82.3
82.3
83.4
84.6

Table 1: Comparison with previous methods on the CoNLL-2005 dataset. We report the results in terms of precision (P),
recall (R), F1 and percentage of completely correct predicates (Comp.). Our single and ensemble model lead to substantial
improvements over the previous state-of-the-art results.

Model

He et al. (Ensemble) (2017)
He et al. (Single) (2017)
Zhou and Xu (2015)
FitzGerald et al. (Struct., Ensemble) (2015)
T¨ackstr¨om et al. (Struct., Ensemble) (2015)
Pradhan et al.(Revised) (2013)
DEEPATT (RNN)
DEEPATT (CNN)
DEEPATT (FFN)
DEEPATT (FFN, Ensemble)

Development

Test

P
83.5
81.7
-
81.0
80.5
-
81.0
80.1
82.2
83.6

R
83.2
81.4
-
78.5
77.8
-
82.3
82.5
83.6
84.7

F1
83.4
81.5
81.1
79.7
79.1
-
81.6
81.3
82.9
84.1

Comp.
67.5
64.6
-
60.9
60.1
-
64.6
65.0
66.7
68.7

P
83.5
81.8
-
81.2
80.6
78.5
80.9
79.8
81.9
83.3

R
83.3
81.6
-
79.0
78.2
76.6
82.2
82.6
83.6
84.5

F1
83.4
81.7
81.3
80.1
79.4
77.5
81.5
81.2
82.7
83.9

Comp.
68.5
66.0
-
62.6
61.8
55.8
65.7
66.1
67.5
69.3

Table 2: Experimental results on the CoNLL-2012 dataset. The metrics are the same as above. Again, our model achieves the
state-of-the-art performance.

gle model of DEEPATT with RNN, CNN and FFN nonlinear
sub-layers achieves an F1 score of 82.3, 82.3 and 83.4 re-
spectively. The FFN variant outperforms previous best per-
formance by 1.8 F1 score. Remarkably, we get 74.1 F1 score
on the out-of-domain dataset, which outperforms the previ-
ous state-of-the-art system by 2.0 F1 score. On the CoNLL-
2012 dataset, the single model of FFN variant also outper-
forms the previous state-of-the-art by 1.0 F1 score. When
ensembling 5 models with FFN nonlinear sub-layers, our
approach achieves an F1 score of 84.6 and 83.9 on the two
datasets respectively, which has an absolute improvement of
1.4 and 0.5 over the previous state-of-the-art. These results
are consistent with our intuition that the self-attention layers
is helpful to capture structural information and long distance
dependencies.

Nonlinearity
#
FFN
1
FFN
2
FFN
3
FFN
4
FFN
5
FFN
6
FFN
7
FFN
8
FFN
9
10
FFN
11 None

CoNLL-2005 Dataset

Embedding Width Depth
PE
GloVe
Timing
GloVe
Timing
GloVe
Timing
GloVe
Timing
GloVe
Timing
GloVe
Timing
GloVe
Timing
Random
Timing
None
GloVe
Embedding GloVe
GloVe
Timing

200
200
200
200
200
400
600
200
200
200
200

10
4
6
8
12
10
10
10
10
10
10

F1
83.1
79.9
82.0
82.8
83.0
83.2
83.4
79.6
20.0
79.4
79.9

Table 3: Detailed results on the CoNLL-2005 development
set. PE denotes the way to encoding word positions. GloVe
refers to the GloVe embedding pre-trained on 6B tokens.

Analysis

In this subsection, we discuss the main factors that inﬂuence
our results. We analyze the experimental results on the de-
velopment set of CoNLL-2005 dataset.

model only achieves 79.9 F1 score. Increasing depth con-
sistently improves the performance on the development set,
and our best model consists of 10 layers. For DEEPATT with
12 layers, we observe a slightly performance drop of 0.1 F1.

Model Depth Previous works (Zhou and Xu 2015; He et
al. 2017) show that model depth is the key to the success of
end-to-end SRL approach. Our observations also coincide
with previous works. Rows 1-5 of Table 3 show the effects of
different number of layers. For DEEPATT with 4 layers, our

Model Width We also conduct experiments with different
model widths. We increase the number of hidden units from
200 to 400 and 400 to 600 as listed in rows 1, 6 and 7 of
Table 3, and the corresponding hidden size hf of FFN sub-
layers is increased to 1600 and 2400 respectively. Increas-

Decoding
Argmax Decoding
Constrained Decoding

F1
83.1
83.0

Speed
50K
17K

Table 4: Comparison between argmax decoding and con-
strained decoding on top of our model.

ing model widths improves the F1 slightly, and the model
with 600 hidden units achieves an F1 of 83.4. However, the
training and parsing speed are slower as a result of larger
parameter counts.

Word Embedding Previous works found that the per-
formance can be improved by pre-training the word em-
beddings on large unlabeled data (Collobert et al. 2011;
Zhou and Xu 2015). We use the GloVe (Pennington, Socher,
and Manning 2014) embeddings pre-trained on Wikipedia
and Gigaword. The embeddings are used to initialize our
networks, but are not ﬁxed during training. Rows 1 and 8
of Table 3 show the effects of additional pre-trained embed-
dings. When using pre-trained GloVe embeddings, the F1
score increases from 79.6 to 83.1.

Position Encoding From rows 1, 9 and 10 of Table 3 we
can see that the position encoding plays an important role
in the success of DEEPATT. Without position encoding, the
DEEPATT with FFN sub-layers only achieves 20.0 F1 score
on the CoNLL-2005 development set. When using position
embedding approach, the F1 score boosts to 79.4. The tim-
ing approach is surprisingly effective, which outperforms
the position embedding approach by 3.7 F1 score.

Nonlinear Sub-Layers DEEPATT requires nonlinear sub-
layers to enhance its expressive power. Row 11 of Table 3
shows the performance of DEEPATT without nonlinear sub-
layers. We can see that the performance of 10 layered DEEP-
ATT without nonlinear sub-layers only matches the 4 lay-
ered DEEPATT with FFN sub-layers, which indicates that
the nonlinear sub-layers are the essential components of our
attentional networks.

Constrained Decoding Table 4 show the effects of con-
strained decoding (He et al. 2017) on top of DEEPATT with
FFN sub-layers. We observe a slightly performance drop
when using constrained decoding. Moreover, adding con-
strained decoding slow down the decoding speed signiﬁ-
cantly. For DEEPATT, it is powerful enough to capture the
relationships among labels.

Detailed Scores We list the detailed performance on fre-
quent labels in Table 5. The results of the previous state-
of-the-art (He et al. 2017) are also shown for comparison.
Compared with He et al. (2017), our model shows improve-
ment on all labels except AM-PNC, where He’s model per-
forms better. Table 6 shows the results of identifying and
classifying semantic roles. Our model improves the previ-
ous state-of-the-art on both identifying correct spans as well

Label

A0
A1
A2
A3
AM-ADV
AM-DIR
AM-LOC
AM-MNR
AM-PNC
AM-TMP
Overall

He et al. (2017)

DEEPATT

Precision Recall
90.7
84.6
72.7
63.2
60.6
38.9
58.3
57.0
64.2
85.7
82.4

89.6
84.2
73.6
76.6
64.8
48.3
59.8
70.4
65.8
80.5
83.1

F1
90.2
84.4
73.2
69.2
62.6
43.1
59.0
63.0
65.0
83.0
82.7

Precision Recall
91.9
86.9
77.0
73.7
64.5
47.2
61.9
62.0
60.5
87.9
84.9

91.0
86.2
75.0
77.1
69.5
54.8
62.5
70.4
65.3
81.7
84.3

F1
91.4
86.6
76.0
75.3
66.9
50.8
62.2
65.9
62.8
84.7
84.6

Table 5: Detailed scores on the development set of CoNLL-
2005 dataset. We also list
the previous state-of-the-art
model (He et al. 2017) for comparison.

Model
He et al. (2017)
DEEPATT

Constituents
91.87
91.92

Semantic Roles
87.10
88.88

Table 6: Comparison with the previous work on identifying
and classifying semantic roles. We list the percentage of cor-
rectly identiﬁed spans as well as the percentage of correctly
classiﬁed semantic roles given the gold spans.

as correctly classifying them into semantic roles. However,
the majority of improvements come from classifying seman-
tic roles. This indicates that ﬁnding the right constituents re-
mains a bottleneck of our model.

LOC MNR

pred./gold
A0
A1
A2
A3
ADV
DIR
LOC
MNR
PNC
TMP

A0
-
76
10
0
0
0
10
0
0
3

A1
48
-
37
0
0
0
10
0
0
2

A2
12
35
-
5
0
2
10
22
10
2

A3
7
0
42
-
0
0
7
28
7
7

ADV
0
7
15
0
-
0
11
26
0
38

DIR
0
16
33
0
0
-
16
0
0
33

0
19
28
0
9
9
-
4
4
23

PNC
7
30
38
7
15
0
0
0
-
0

TMP
0
0
0
0
58
0
8
33
0
-

0
2
35
2
26
2
15
-
2
13

Table 7: Confusion matrix for labeling errors. Each cell
shows the percentage of predicted labels for each gold la-
bel.

Labeling Confusion Table 7 shows a confusion matrix of
our model for the most frequent labels. We only consider
predicted arguments that match gold span boundaries. Com-
pared with the previous work (He et al. 2017), our model still
confuses ARG2 with AM-DIR, AM-LOC and AM-MNR,
but to a lesser extent. This indicates that our model has some
advantages on such difﬁcult adjunct distinction (Kingsbury,
Palmer, and Marcus 2002).

Related work
SRL Gildea and Jurafsky (2002) developed the ﬁrst au-
tomatic semantic role labeling system based on FrameNet.
Since then the task has received a tremendous amount of at-
tention. The focus of traditional approaches is devising ap-
propriate feature templates to describe the latent structure
of utterances. Pradhan et al. (2005); Surdeanu et al. (2003);

Palmer, Gildea, and Xue (2010) explored the syntactic fea-
tures for capturing the overall sentence structure. Combi-
nation of different syntactic parsers was also proposed to
avoid prediction risk which was introduced by Surdeanu et
al. (2003); Koomen et al. (2005); Pradhan et al. (2013).

Beyond these traditional methods above, Collobert et
al. (2011) proposed a convolutional neural network for SRL
to reduce the feature engineering. The pioneering work on
building an end-to-end system was proposed by Zhou and
Xu (2015), who applied an 8 layered LSTM model which
outperformed the previous state-of-the-art system. He et
al.(2017) improved further with highway LSTMs and con-
strained decoding. They used simpliﬁed input and output
layers compared with Zhou and Xu (2015). Marcheggiani,
Frolov, Titov (2017) also proposed a bidirectional LSTM
based model. Without using any syntactic information, their
approach achieved the state-of-the-art result on the CoNLL-
2009 dataset.

Our method differs from them signiﬁcantly. We choose
self-attention as the key component in our architecture in-
stead of LSTMs. Like He et al. (2017), our system take the
very original utterances and predicate masks as the inputs
without context windows. At the inference stage, we apply
argmax decoding approach on top of a simple logistic re-
gression while Zhou and Xu (2015) chose a CRF approach
and He et al. (2017) chose constrained decoding. This ap-
proach is much simpler and faster than the previous ap-
proaches.

Self-Attention Self-attention have been successfully used
in several tasks. Cheng, Dong, and Lapata (2016) used
LSTMs and self-attention to facilitate the task of machine
reading. Parikh et al. (2016) utilized self-attention to the
task of natural language inference. Lin et al. (2017) pro-
posed self-attentive sentence embedding and applied them to
author proﬁling, sentiment analysis and textual entailment.
Paulus, Xiong, and Socher (2017) combined reinforcement
learning and self-attention to capture the long distance de-
pendencies nature of abstractive summarization. Vaswani et
al. (2017) applied self-attention to neural machine transla-
tion and achieved the state-of-the-art results. Very recently,
Shen et al. (2017) applied self-attention to language under-
standing task and achieved the state-of-the-art on various
datasets. Our work follows this line to apply self-attention
for learning long distance dependencies. Our experiments
also show the effectiveness of self-attention mechanism on
the sequence labeling task.

Conclusion

We proposed a deep attentional neural network for the task
of semantic role labeling. We trained our SRL models with a
depth of 10 and evaluated them on the CoNLL-2005 shared
task dataset and the CoNLL-2012 shared task dataset. Our
experimental results indicate that our models substantially
improve SRL performances, leading to the new state-of-the-
art.

Acknowledgements
This work was done while the ﬁrst author’s intern-
ship at Tencent Technology. This work is supported by
the Natural Science Foundation of China (Grant No.
61573294, 61303082, 61672440), the Ph.D. Programs Foun-
dation of Ministry of Education of China (Grant No.
20130121110040), the Foundation of the State Language
Commission of China (Grant No. WT135-10) and the Nat-
ural Science Foundation of Fujian Province (Grant No.
2016J05161). We also thank the anonymous reviews for
their valuable suggestions.

References
Ba, J. L.; Kiros, J. R.; and Hinton, G. E. 2016. Layer nor-
malization. arXiv preprint arXiv:1607.06450.
Bahdanau, D.; Cho, K.; and Bengio, Y. 2014. Neural ma-
chine translation by jointly learning to align and translate.
arXiv preprint arXiv:1409.0473.
Bastianelli, E.; Castellucci, G.; Croce, D.; and Basili, R.
2013. Textual inference and meaning representation in hu-
man robot interaction. In Proceedings of the Joint Sympo-
sium on Semantic Processing. Textual Inference and Struc-
tures in Corpora, 65–69.
Bengio, Y.; Ducharme, R.; Vincent, P.; and Janvin, C. 2003.
A neural probabilistic language model. Journal of Machine
Learning Research 3:1137–1155.
Carreras, X., and M`arquez, L. 2005.
Introduction to the
CoNLL-2005 shared task: Semantic role labeling. In Pro-
ceedings of the Ninth Conference on Computational Natural
Language Learning, 152–164.
Cheng, J.; Dong, L.; and Lapata, M. 2016. Long short-
term memory-networks for machine reading. arXiv preprint
arXiv:1601.06733.
Collobert, R.; Weston,
J.; Bottou, L.; Karlen, M.;
Kavukcuoglu, K.; and Kuksa, P. 2011. Natural language pro-
cessing (almost) from scratch. Journal of Marchine Learn-
ing Research 2493–2537.
Dan, S., and Lapata, M. 2007. Using semantic roles to im-
prove question answering. In Proceedings of the Joint Con-
ference on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learning.
Dauphin, Y. N.; Fan, A.; Auli, M.; and Grangier, D. 2016.
Language modeling with gated convolutional networks.
arXiv preprint arXiv:1612.08083.
FitzGerald, N.; T¨ackstr¨om, O.; Ganchev, K.; and Das, D.
2015. Semantic role labeling with neural network factors.
In Proceedings of the Conference on Empirical Methods on
Natural Language Processing.
Gehring, J.; Auli, M.; Grangier, D.; Yarats, D.; and Dauphin,
Y. N. 2017. Convolutional sequence to sequence learning.
arXiv preprint arXiv:1705.03122.
Genest, P.-E., and Lapalme, G. 2011. Framework for ab-
stractive summarization using text-to-text generation.
In
Proceedings of the Workshop on Monolingual Text-To-Text
Generation, 64–73. Association for Computational Linguis-
tics.

Gildea, D., and Jurafsky, D. 2002. Automatic labeling of
semantic roles. Computational linguistics 28(3):245–288.
He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016. Deep resid-
In Proceedings of the
ual learning for image recognition.
IEEE conference on computer vision and pattern recogni-
tion, 770–778.
He, L.; Lee, K.; Lewis, M.; and Zettlemoyer, L. 2017. Deep
semantic role labeling: What works and whats next. In Pro-
ceedings of the Annual Meeting of the Association for Com-
putational Linguistics.
Kingsbury, P.; Palmer, M.; and Marcus, M. 2002. Adding
semantic annotation to the penn treebank. In Proceedins of
the human language technology conference.
Knight, K., and Luk, S. K. 1994. Building a large-scale
In AAAI, vol-
knowledge base for machine translation.
ume 94, 773–778.
Koomen, P.; Punyakanok, V.; Roth, D.; and Yih, W.-t. 2005.
Generalized inference with multiple semantic role labeling
systems. In Proceedings of the 9th Conference on Compu-
tational Natural Language Learning, 181–184.
Lin, Z.; Feng, M.; Santos, C. N. d.; Yu, M.; Xiang, B.; Zhou,
B.; and Bengio, Y. 2017. A structured self-attentive sentence
embedding. arXiv preprint arXiv:1703.03130.
Luong, M.-T.; Pham, H.; and Manning, C. D. 2015. Effec-
tive approaches to attention-based neural machine transla-
tion. arXiv preprint arXiv:1508.04025.
2017. A
Marcheggiani, D.; Frolov, A.; and Titov, I.
for
simple and accurate syntax-agnostic neural model
dependency-based semantic role labeling. arXiv preprint
arXiv:1701.02593.
Moschitti, A.; Morarescu, P.; and Harabagiu, S. M. 2003.
Open domain information extraction via automatic semantic
labeling. In FLAIRS Conference’03, 397–401.
Nair, V., and Hinton, G. E. 2010. Rectiﬁed linear units im-
prove restricted boltzmann machines. In Proceedings of the
27th international conference on machine learning (ICML-
10), 807–814.
Palmer, M.; Gildea, D.; and Xue, N. 2010. Semantic Role
Labeling. Synthesis Lectures on Human Language Technol-
ogy Series. Morgan and Claypool.
Parikh, A. P.; T¨ackstr¨om, O.; Das, D.; and Uszkoreit, J.
2016. A decomposable attention model for natural language
inference. arXiv preprint arXiv:1606.01933.
Pascanu, R.; Gulcehre, C.; Cho, K.; and Bengio, Y. 2013.
How to construct deep recurrent neural networks. arXiv
preprint arXiv:1312.6026.
Paulus, R.; Xiong, C.; and Socher, R. 2017. A deep rein-
forced model for abstractive summarization. arXiv preprint
arXiv:1705.04304.
Pennington, J.; Socher, R.; and Manning, C. D. 2014. Glove:
Global vectors for word representation. In Proceedings of
the Conference on Empirical Methods on Natural Language
Processing, 1532–1543.
Pradhan, S.; Hacioglu, K.; Ward, W.; Martin, J. H.; and Ju-
rafsky, D. 2005. Semantic role chunking combining comple-

mentary syntactic views. In Proceedings of the 9th Confer-
ence on Computational Natural Language Learning, 217–
220.
Pradhan, S.; Moschitti, A.; Xue, N.; Ng, H. T.; Bj¨orkelund,
A.; Uryupina, O.; Zhang, Y.; and Zhong, Z. 2013. Towards
robust linguistic analysis using ontonotes. In Proceedings of
the Seventeenth Conference on Computational Natural Lan-
guage Learning, 143–152.
Punyakanok, V.; Roth, D.; and tau Yih, W. 2008. The im-
portance of syntactic parsing and inference in semantic role
labeling. Computational linguistics 6(9).
Shen, T.; Zhou, T.; Long, G.; Jiang, J.; Pan, S.; and
Zhang, C. 2017. Disan: Directional self-attention network
arXiv preprint
for rnn/cnn-free language understanding.
arXiv:1709.04696.
Srivastava, N.; Hinton, G. E.; Krizhevsky, A.; Sutskever, I.;
and Salakhutdinov, R. 2014. Dropout: a simple way to pre-
vent neural networks from overﬁtting. Journal of machine
learning research 15(1):1929–1958.
Surdeanu, M.; Harabagiu, S.; Williams, J.; and Aarseth, P.
2003. Using predicate-argument structures for information
extraction. In Proceedings of the 41st Annual Meeting on
Association for Computational Linguistics, 8–15.
Szegedy, C.; Vanhoucke, V.; Ioffe, S.; Shlens, J.; and Wojna,
Z. 2016. Rethinking the inception architecture for computer
vision. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, 2818–2826.
T¨ackstr¨om, O.; Ganchev, K.; and Das, D. 2015. Efﬁcient
inference and structured learning for semantic role labeling.
Transactions of the Association for Computational Linguis-
tics 3:29–41.
Toutanova, K.; Haghighi, A.; and Manning, C. D. 2008.
A global joint model for semantic role labeling. Computa-
tional Linguistics 34:161–191.
Uefﬁng, N.; Haffari, G.; and Sarkar, A. 2007. Transductive
learning for statistical machine translation. In Proceedings
of the 45th Annual Meeting of the Association of Computa-
tional Linguistics, 25–32.
Vaswani, A.; Shazeer, N.; Parmar, N.; Uszkoreit, J.; Jones,
L.; Gomez, A. N.; Kaiser, L.; and Polosukhin, I. 2017. At-
tention is all you need. arXiv preprint arXiv:1706.03762.
Wu, D., and Fung, P. 2009. Semantic roles for smt: a hy-
brid two-pass model. In Proceedings of Human Language
Technologies, 13–16. Association for Computational Lin-
guistics.
Zeiler, M. D. 2012. Adadelta: an adaptive learning rate
method. arXiv preprint arXiv:1212.5701.
Zhou, J., and Xu, W. 2015. End-to-end learning of semantic
role labeling using recurrent neural networks. In Proceed-
ings of the Annual Meeting of the Association for Computa-
tional Linguistics.

