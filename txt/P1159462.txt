8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

−

≤

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

−

−

≤

≤

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

−

≤

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

−

≤

≤

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

≤

−

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

≤

−

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

≤

−

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

≤

−

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

−

≤

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

≤

−

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

8
1
0
2
 
v
o
N
 
2
 
 
]

G
L
.
s
c
[
 
 
3
v
6
8
0
4
0
.
2
1
7
1
:
v
i
X
r
a

PacGAN: The power of two samples in generative adversarial
networks

Zinan Lin†, Ashish Khetan‡, Giulia Fanti†, Sewoong Oh‡∗
†Carnegie Mellon University, ‡University of Illinois at Urbana-Champaign

Abstract

Generative adversarial networks (GANs) are innovative techniques for learning generative
models of complex data distributions from samples. Despite remarkable recent improvements
in generating realistic images, one of their major shortcomings is the fact that in practice, they
tend to produce samples with little diversity, even when trained on diverse datasets. This phe-
nomenon, known as mode collapse, has been the main focus of several recent advances in GANs.
Yet there is little understanding of why mode collapse happens and why recently proposed ap-
proaches are able to mitigate mode collapse. We propose a principled approach to handling
mode collapse, which we call packing. The main idea is to modify the discriminator to make
decisions based on multiple samples from the same class, either real or artiﬁcially generated. We
borrow analysis tools from binary hypothesis testing—in particular the seminal result of Black-
well [6]—to prove a fundamental connection between packing and mode collapse. We show that
packing naturally penalizes generators with mode collapse, thereby favoring generator distribu-
tions with less mode collapse during the training process. Numerical experiments on benchmark
datasets suggests that packing provides signiﬁcant improvements in practice as well.

1

Introduction

Generative adversarial networks (GANs) are an innovative technique for training generative models
to produce realistic examples from a data distribution [19]. Suppose we are given N i.i.d. samples
X1, . . . , XN from an unknown probability distribution P over some high-dimensional space Rp (e.g.,
images). The goal of generative modeling is to learn a model that enables us to produce samples
from P that are not in the training data. Classical approaches to this problem typically search
over a parametric family (e.g., a Gaussian mixture), and ﬁt parameters to maximize the likelihood
of the observed data. Such likelihood-based methods suﬀer from the curse of dimensionality in
real-world datasets, such as images. Deep neural network-based generative models were proposed
to cope with this problem [32, 22, 19]. However, these modern generative models can be diﬃcult
to train, in large part because it is challenging to evaluate their likelihoods. Generative adversarial
networks made a breakthrough in training such models, with an innovative training method that
uses a minimax formulation whose solution is approximated by iteratively training two competing
neural networks—hence the name “adversarial networks”.

∗Author emails are zinanl@andrew.cmu.edu, khetan2@illinois.edu, gfanti@andrew.cmu.edu, and swoh@illinois.edu.
This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by
National Science Foundation grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported
by NSF award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC).

1

GANs have attracted a great deal of interest recently. They are able to generate realistic, crisp,
and original examples of images [19, 13] and text [73]. This is useful in image and video processing
(e.g. frame prediction [71], image super-resolution [36], and image-to-image translation [25]), as
well as dialogue systems or chatbots—applications where one may need realistic but artiﬁcially
generated data. Further, they implicitly learn a latent, low-dimensional representation of arbitrary
high-dimensional data. Such embeddings have been hugely successful in the area of natural lan-
guage processing (e.g. word2vec [47]). GANs have the potential to provide such an unsupervised
solution to learning representations that capture semantics of the domain to arbitrary data struc-
tures and applications. This can be used in various applications, such as image manipulation [31]
and defending against adversarial examples [23].

Primer on GANs. Neural-network-based generative models are trained to map a (typically
Rd from a standard distribution (e.g. spherical Gaussian)
lower dimensional) random variable Z
to a domain of interest, like images. In this context, a generator is a function G : Rd
Rp, which
In unsupervised
is chosen from a rich class of parametric functions like deep neural networks.
generative modeling, one of the goals is to train the parameters of such a generator from unlabelled
training data drawn independently from some real world dataset (such as celebrity faces in CelebA
[43] or natural images from CIFAR-100 [34]), in order to produce examples that are realistic but
diﬀerent from the training data.

→

∈

A breakthrough in training such generative models was achieved by the innovative idea of GANs
[19]. GANs train two neural networks: one for the generator G(Z) and the other for a discriminator
D(X). These two neural networks play a dynamic minimax game against each other. An analogy
provides the intuition behind this idea. The generator is acting as a forger trying to make fake
coins (i.e., samples), and the discriminator is trying to detect which coins are fake and which are
real. If these two parties are allowed to play against each other long enough, eventually both will
become good. In particular, the generator will learn to produce coins that are indistinguishable
from real coins (but preferably diﬀerent from the training coins he was given).

Concretely, we search for (the parameters of) neural networks G and D that optimize the

following type of minimax objective:

G∗

arg min

∈
= arg min

G

G

max
D
max
D

V (G, D)
EX∼P [log(D(X))] + EZ∼PZ [log(1

D(G(Z)))] ,

(1)

−

where P is the distribution of the real data, and PZ is the distribution of the input code vector Z.
Here D is a function that tries to distinguish between real data and generated samples, whereas G is
the mapping from the latent space to the data space. Critically, [19] shows that the global optimum
of (1) is achieved if and only if P = Q, where Q is the generated distribution of G(Z). We refer
to Section 4 for a detailed discussion of this minimax formulation. The solution to the minimax
problem (1) can be approximated by iteratively training two “competing” neural networks, the
generator G and discriminator D. Each model can be updated individually by backpropagating
the gradient of the loss function to each model’s parameters.

Mode Collapse in GANs. One major challenge in training GAN is a phenomenon known
as mode collapse, which collectively refers to the lack of diversity in generated samples. One
manifestation of mode collapse is the observation that GANs commonly miss some of the modes

2

when trained on multimodal distributions. For instance, when trained on hand-written digits with
ten modes, the generator might fail to produce some of the digits [60]. Similarly, in tasks that
translate a caption into an image, generators have been shown to generate series of nearly-identical
images [56]. Mode collapse is believed to be related to the training instability of GANs—another
major challenge in GANs.

Several approaches have been proposed to ﬁght mode collapse, e.g. [14, 15, 63, 60, 46, 9, 59, 51].
We discuss prior work on mode collapse in detail in Section 6. Proposed solutions rely on modiﬁed
architectures [14, 15, 63, 60], loss functions [9, 1], and optimization algorithms [46]. Although
each of these proposed methods is empirically shown to help mitigate mode collapse, it is not well
understood how the proposed changes relate to mode collapse. Previously-proposed heuristics fall
short of providing rigorous explanations on why they achieve empirical gains, especially when those
gains are sensitive to architecture hyperparameters.

Our Contributions.
In this work, we examine GANs through the lens of binary hypothesis
testing. By viewing the discriminator as performing a binary hypothesis test on samples (i.e.,
whether they were drawn from distribution P or Q), we can apply insights from classical hypothesis
testing literature to the analysis of GANs. In particular, this hypothesis-testing viewpoint provides
a fresh perspective and understanding of GANs that leads to the following contributions:

1. The ﬁrst contribution is conceptual: we propose a formal mathematical deﬁnition of mode
collapse that abstracts away the geometric properties of the underlying data distributions
(see Section 4.1). This deﬁnition is closely related to the notions of false alarm and missed
detection in binary hypothesis testing (see Section 4.3). Given this deﬁnition, we provide a
new interpretation of the pair of distributions (P, Q) as a two-dimensional region called the
mode collapse region, where P is the true data distribution and Q the generated one. The
mode collapse region provides new insights on how to reason about the relationship between
those two distributions (see Section 4.1).

2. The second contribution is analytical: through the lens of hypothesis testing and mode col-
lapse regions, we show that if the discriminator is allowed to see samples from the m-th order
product distributions P m and Qm instead of the usual target distribution P and generator
distribution Q, then the corresponding loss when training the generator naturally penal-
izes generator distributions with strong mode collapse (see Section 4.2). Hence, a generator
trained with this type of discriminator will be encouraged to choose a distribution that ex-
hibits less mode collapse. The region interpretation of mode collapse and corresponding data
processing inequalities provide the analysis tools that allows us to prove strong and sharp
results with simple proofs (see Section 5). This follows a long tradition in information theory
literature (e.g. [64, 12, 10, 75, 70, 42, 26, 27, 28]) where operational interpretations of mutual
information and corresponding data processing inequalities have given rise to simple proofs
of strong technical results.

3. The third contribution is algorithmic: based on the insights from the region interpretation
of mode collapse, we propose a new GAN framework to mitigate mode collapse, which we
call PacGAN. PacGAN can be applied to any existing GAN, and it requires only a small
modiﬁcation to the discriminator architecture (see Section 2). The key idea is to pass m
“packed” or concatenated samples to the discriminator, which are jointly classiﬁed as either

3

real or generated. This allows the discriminator to do binary hypothesis testing based on
the product distributions (P m, Qm), which naturally penalizes mode collapse (as we show in
Section 4.2). We demonstrate on benchmark datasets that PacGAN signiﬁcantly improves
upon competing approaches in mitigating mode collapse (see Section 3). Further, unlike
existing approaches on jointly using multiple samples, e.g. [60], PacGAN requires no hyper
parameter tuning and incurs only a slight overhead in the architecture.

Outline. This paper is structured as follows: we present the PacGAN framework in Section 2, and
evaluate it empirically according to the metrics and experiments proposed in prior work (Section
3). In Section 4, we propose a new deﬁnition of mode collapse, and provide analyses showing that
PacGAN mitigates mode collapse. The proofs of the main results are provided in Section 5. Finally,
we describe in greater detail the related work on GANs in general and mode collapse in particular
in Section 6.

2 PacGAN: A novel framework for mitigating mode collapse

We propose a new framework for mitigating mode collapse in GANs. We start with an arbitrary
existing GAN1, which is typically deﬁned by a generator architecture, a discriminator architecture,
and a loss function. Let us call this triplet the mother architecture.

The PacGAN framework maintains the same generator architecture and loss function as the
mother architecture, and makes a slight change only to the discriminator. That is, instead of using a
discriminator D(X) that maps a single (either from real data or from the generator) to a (soft) label,
we use an augmented discriminator D(X1, X2, . . . , Xm) that maps m samples, jointly coming from
either real data or the generator, to a single (soft) label. These m samples are drawn independently
from the same distribution—either real (jointly labelled as Y = 1) or generated (jointly labelled
as Y = 0). We refer to the concatenation of samples with the same label as packing, the resulting
concatenated discriminator as a packed discriminator, and the number m of concatenated samples
as the degree of packing. We call this approach a framework instead of an architecture, because
the proposed approach of packing can be applied to any existing GAN, using any architecture and
any loss function, as long as it uses a discriminator of the form D(X) that classiﬁes a single input
sample.

We propose the nomenclature “Pac(X)(m)” where (X) is the name of the mother architecture,
and (m) is an integer that refers to how many samples are packed together as an input to the
discriminator. For example, if we take an original GAN and feed the discriminator three packed
samples as input, we call this “PacGAN3”. If we take the celebrated DCGAN [55] and feed the
discriminator four packed samples as input, we call this “PacDCGAN4”. When we refer to the
generic principle of packing, we use PacGAN without an subsequent integer.

How to pack a discriminator. Note that there are many ways to change the discriminator
architecture to accept packed input samples. We propose to keep all hidden layers of the discrim-
inator exactly the same as the mother architecture, and only increase the number of nodes in the
input layer by a factor of m. For example, in Figure 1, suppose we start with a mother architecture
in which the discriminator is a fully-connected feed-forward network. Here, each sample X lies in

1For a list of some popular GANs, we refer to the GAN zoo: https://github.com/hindupuravinash/the-gan-zoo

4

Figure 1: PacGAN(m) augments the input layer by a factor of m. The number of edges between
the ﬁrst two layers are increased accordingly to preserve the connectivity of the mother architecture
(typically fully-connected). Packed samples are fed to the input layer in a concatenated fashion;
the grid-patterned nodes represent input nodes for the second input sample.

a space of dimension p = 2, so the input layer has two nodes. Now, under PacGAN2, we would
multiply the size of the input layer by the packing degree (in this case, two), and the connections
to the ﬁrst hidden layer would be adjusted so that the ﬁrst two layers remain fully-connected, as
in the mother architecture. The grid-patterned nodes in Figure 1 represent input nodes for the
second sample.

Similarly, when packing a DCGAN, which uses convolutional neural networks for both the
generator and the discriminator, we simply stack the images into a tensor of depth m. For instance,
the discriminator for PacDCGAN5 on the MNIST dataset of handwritten images [35] would take
28 pixels.
an input of size 28
Only the input layer and the number of weights in the corresponding ﬁrst convolutional layer will
increase in depth by a factor of ﬁve. By modifying only the input dimension and ﬁxing the number
of hidden and output nodes in the discriminator, we can focus purely on the eﬀects of packing in
our numerical experiments in Section 3.

5, since each individual black-and-white MNIST image is 28

28

×

×

×

How to train a packed discriminator. Just as in standard GANs, we train the packed dis-
criminator with a bag of samples from the real data and the generator. However, each minibatch
in the stochastic gradient descent now consists of packed samples. Each packed sample is of the
form (X1, X2, . . . , Xm, Y ), where the label is Y = 1 for real data and Y = 0 for generated data,
and the m independent samples from either class are jointly treated as a single, higher-dimensional
feature (X1, . . . , Xm). The discriminator learns to classify m packed samples jointly. Intuitively,
packing helps the discriminator detect mode collapse because lack of diversity is more obvious in a
set of samples than in a single sample. Fundamentally, packing allows the discriminator to observe
samples from product distributions, which highlight mode collapse more clearly than unmodiﬁed
data and generator distributions. We make this statement precise in Section 4.

Notice that the computational overhead of PacGAN training is marginal, since only the input
layer of the discriminator gains new parameters. Furthermore, we keep all training hyperparame-
ters identical to the mother architecture, including the stochastic gradient descent minibatch size,
weight decay, learning rate, and the number of training epochs. This is in contrast with other
approaches for mitigating mode collapse that require signiﬁcant computational overhead and/or
delicate hyperparameter selection [15, 14, 60, 63, 46].

5

Computational complexity. The exact computational complexity overhead of PacGAN (com-
pared to GANs) is architecture-dependent, but can be computed in a straightforward manner. For
example, consider a discriminator with w fully-connected layers, each containing g nodes. Since the
discriminator has a binary output, the (w + 1)th layer has a single node, and is fully connected to
the previous layer. We seek the computational complexity of a single minibatch parameter update,
where each minibatch contains r samples. Backpropagation in such a network is dominated by the
matrix-vector multiplication in each hidden layer, which has complexity O(g2) per input sample,
assuming a naive implementation. Hence the overall minibatch update complexity is O(rwg2). Now
suppose the input layer is expanded by a factor of m. If we keep the same number of minibatch
elements, the per-minibatch cost grows to O((w + m)rg2). We ﬁnd that in practice, even m = 2 or
m = 3 give good results.

3 Experiments

On standard benchmark datasets, we compare PacGAN to several baseline GAN architectures, some
of which are explicitly proposed to mitigate mode collapse: GAN [19], minibatch discrimination
(MD) [60], DCGAN [55], VEEGAN [63], Unrolled GANs [46], and ALI [15]. We also implicitly com-
pare against BIGAN [14], which is conceptually identical to ALI. To isolate the eﬀects of packing,
we make minimal choices in the architecture and hyperparameters of our packing implementation.
For each experiment, we evaluate packing by taking a standard, baseline GAN implementation that
was not designed to prevent mode collapse, and adding packing in the discriminator. In particular,
our goal for this section is to reproduce experiments from existing literature, apply the packing
framework to the simplest GAN among those in the baseline, and showcase how packing aﬀects the
performance. All of our experiments are available at https://github.com/fjxmlzn/PacGAN, and
were run with support from [69, 54].

Metrics. For consistency with prior work, we measure several previously-used metrics. On
datasets with clear, known modes (e.g., Gaussian mixtures, labelled datasets), prior papers have
counted the number of modes that are produced by a generator [14, 46, 63]. In labelled datasets,
this number can be evaluated using a third-party trained classiﬁer that classiﬁes the generated
samples [63]. In Gaussian Mixture Models (GMMs), for example in [63], a mode is considered lost
if there is no sample in the generated test data within x standard deviations from the center of
that mode. In [63], x is set to be three for 2D-ring and 2D-grid. A second metric used in [63]
is the number of high-quality samples, which is the proportion of the samples that are within x
standard deviation from the center of a mode. Finally, the reverse Kullback-Leibler divergence over
the modes has been used to measure the quality of mode collapse as follows. Each of the generated
test samples is assigned to its closest mode; this induces an empirical, discrete distribution with an
alphabet size equal to the number of observed modes in the generated samples. A similar induced
discrete distribution is computed from the real data samples. The reverse KL divergence between
the induced distribution from generated samples and the induced distribution from the real sam-
ples is used as a metric. Each of these three metrics has shortcomings—for example, the number
of observed modes does not account for class imbalance among generated modes, and all of these
metrics only work for datasets with known modes. Deﬁning an appropriate metric for evaluating
GANs is an active research topic [66, 72, 61].

6

1, . . . , 8
}
4 + 2i,
−

−

Datasets. We use a number of synthetic and real datasets for our experiments, all of which have
been studied or proposed in prior work. The 2D-ring [63] is a mixture of eight two-dimensional
spherical Gaussians with means (cos((2π/8)i), sin((2π/8)i)) and variances 10−4 in each dimension
. The 2D-grid [63] is a mixture of 25 two-dimensional spherical Gaussians with
for i
∈ {
means (

4 + 2j) and variances 0.0025 in each dimension for i, j

.

To examine real data, we use the MNIST dataset [35], which consists of 70,000 images of
28 pixels. Unmodiﬁed, this dataset has 10 modes, one for each digit.
handwritten digits, each 28
As done in Mode-regularized GANs [9], Unrolled GANs [46], and VEEGAN [63], we augment the
number of modes by stacking the images. That is, we generate a new dataset of 128,000 images,
in which each image consists of three randomly-selected MNIST images that are stacked into a
10 modes.
28
We refer to this as the stacked MNIST dataset.

3 image in RGB. This new dataset has (with high probability) 1000 = 10

28

10

×

×

×

×

×

Finally, we include experiments on the CelebA dataset, which is a collection of 200,000 facial
images of celebrities [44]. We use the aligned and cropped version, in which images are 218x178
pixels. Although CelebA images are annotated with features (e.g. ‘eyeglasses’, ‘wearing hat’), we
do not use these labels in our experiments.

0, 1, 2, 3, 4
}

∈ {

3.1 Synthetic data experiments

Our ﬁrst experiment evaluates the number of modes and the number of high-quality samples for
the 2D-ring and the 2D-grid. Results are reported in Table 1. The ﬁrst two rows are the GAN
baseline and ALI, respectively, followed by PacGAN with a packing factor of 2, 3, and 4. The hyper-
parameters, network architecture, and loss function for GAN and ALI are exactly reproduced from
ALI’s code2. All PacGANs are directly modiﬁed from an existing GAN implementation, without
any further hyper-parameter tuning. The details are described below.

Target distribution

GAN

PacGAN2

Figure 2: Scatter plot of the 2D samples from the true distribution (left) of 2D-grid and the learned
generators using GAN (middle) and PacGAN2 (right). PacGAN2 captures all of the 25 modes.

Architecture and hyper-parameters. All of the GANs in this experiment use the same gener-
ator architecture. There are four hidden layers, each of which has 400 units with ReLU activation,

2https://github.com/IshmaelBelghazi/ALI

7

trained with batch normalization [24]. The input noise is a two dimensional spherical Gaussian
with zero mean and unit variance. All of the GANs in this experiment use the same discriminator,
except that the input dimension is diﬀerent. The discriminator has three hidden layers, with 200
units per hidden layer. The hidden layers use LinearMaxout with 5 maxout pieces, and no batch
normalization is used in the discriminator. In addition to a generator and discriminator, ALI also
has a third component, called an encoder ; we only used the encoder to evaluate ALI, but did not
include the encoder in our PacGANs. MD’s discriminator is the same as GAN’s discriminator,
except that a minibatch discrimination layer is added before the output layer. The implementation
of minibatch discrimination layer in this and all following experiments is based on the standard
implementation3.

We train each GAN with 100,000 total samples, and a mini-batch size of 100 samples; training
is run for 400 epochs. The discriminator’s loss function is log(1 + exp(
D(real data))) + log(1 +
exp(D(generated data))). The generator’s loss function is log(1 + exp(D(real data))) + log(1 +
exp(
D(generated data))). Adam [30] stochastic gradient descent is applied with the generator
weights and the discriminator weights updated once per mini-batch. At testing, we use 2500
samples from the learned generator for evaluation. Each metric is evaluated and averaged over 10
trials.

−

−

GAN [19]
ALI [15]
Minibatch Disc. [60]
PacGAN2 (ours)
PacGAN3 (ours)
PacGAN4 (ours)

2D-ring
Modes high quality
samples

reverse KL

reverse KL

2D-grid

Modes high quality
samples

(Max 8)
0.5
6.3
0.3
6.6
0.8
4.3
0.1
7.9
0.1
7.8
0.1
7.8

±
±
±
±
±
±

98.2
97.6
36.6
95.6
97.7
95.9

±
±
±
±
±
±

0.2 % 0.45
0.4 % 0.36
8.8 % 1.93
2.0 % 0.07
0.3 % 0.10
1.4 % 0.07

0.09
0.04
0.11
0.03
0.02
0.02

±
±
±
±
±
±

(Max 25)
0.8
17.3
0.4
24.1
0.5
23.8
0.7
23.8
0.4
24.6
0.2
24.8

±
±
±
±
±
±

94.8
95.7
79.9
91.3
94.2
93.6

±
±
±
±
±
±

0.7 % 0.70
0.6 % 0.14
3.2 % 0.17
0.8 % 0.13
0.4 % 0.06
0.6 % 0.04

0.07
0.03
0.03
0.04
0.02
0.01

±
±
±
±
±
±

Table 1: Two measures of mode collapse proposed in [63] for two synthetic mixtures of Gaussians:
number of modes captured by the generator and percentage of high quality samples, as well as
reverse KL. Our results are averaged over 10 trials shown with the standard error. We note that 2
trials of MD in 2D-ring dataset cover no mode, which makes reverse KL intractable. This reverse
KL entry is averaged over the other 8 trails.

Results. Table 1 shows that PacGAN outperforms or matches the baseline schemes in all three
metrics. On the 2D grid dataset, increasing the packing degree m appears to increase the average
number of modes recovered, as expected. On the 2D ring dataset, PacGAN2 is able to recover
almost all the modes, so further packing seems to provide little extra beneﬁt. The beneﬁts of
packing can be evaluated by comparing the GAN in the ﬁrst row (which is the mother architecture)
and PacGANs in the last rows. The simple change of packing the mother architecture appears to
make a signiﬁcant diﬀerence in performance, and the overhead associated with implementing these
changes is minimal compared to the baselines [15, 46, 63].

3https://github.com/openai/improved-gan

8

Note that maximizing the number of high-quality samples is not necessarily indicative of a
good generative model. First, we expect some fraction of probability mass to lie outside the “high-
quality” boundary, and that fraction increases with the dimensionality of the dataset. For reference,
we ﬁnd empirically that the expected fraction of high-quality samples in the true data distribution
for the 2D ring and grid are both 98.9%, which corresponds to the theoretical ratio for a single
2D Gaussian. These values are higher than the fractions found by PacGAN, indicating room for
improvement. However, a generative model could output 100% high-quality points by learning very
few modes (as reported in [63]).

We also observe that in terms of mode coverage MD performs well in 2D-grid dataset but badly
in 2D-ring dataset, even with completely the same architecture. This suggests that MD is sensitive
In terms of high quality samples, MD performs even worse than GAN
to experiment settings.
baseline in both datasets.

We wish to highlight that our goal is not to compete with the baselines of ALI or other state-of-
the-art methods, but to showcase the improvement that can be obtained with packing. In this spirit,
we can easily apply our framework to other baselines and test “PacALI”, “PacUnrolledGAN”, and
“PacVEEGAN”. In fact, we expect that most GAN architectures can be packed to improve sample
quality. However, for these benchmark tests, we see that packing the simplest GAN is suﬃcient.

3.1.1 The eﬀect of parameter size: 2D Grid

The way we implement packing introduces a potential confounding variable: the number of pa-
rameters in the discriminator. That is, our packed architectures have more discriminator nodes
(and hence more discriminator parameters) than the mother architecture, which could artiﬁcially
inﬂate our experimental results by giving the discriminator greater capacity. Our next experiment
aims to compare this eﬀect to the eﬀect of packing, again on the 2D grid dataset. We evalu-
ate three metrics—fraction of high-quality samples, number of modes recovered, and reverse KL
divergence—for ALI, GAN, MD and PacGAN, while varying the number of total parameters in
each architecture (discriminator and encoder if one exists).

Architecture and hyper-parameters. Compared to the previous experiment, this experiment
introduces only one architectural diﬀerence, which stems from varying the number of total param-
eters. We keep the generators and encoders (if one exists) identical across experiments, and vary
only the number of total parameters in the discriminator. Recall that in our previous 2D Grid
In this experiment, we keep the input and
experiment, there were 200 nodes per hidden layer.
output layers identical to our previous experiment, but alter the number of nodes per hidden layer
in the discriminator. For each experimental setting, each hidden layer of the discriminator has the
. This hidden layer size
same number of hidden nodes, drawn from the set
}
determines the total number of parameters in the architecture, so each GAN variant is evaluated
for ﬁve diﬀerent parameter counts. There may be more sophisticated ways to evaluate the eﬀects
of discriminator and encoder size; our approach only captures the eﬀect of hidden layer width.

50, 100, 150, 200, 250

{

Results. Figures 3, 4, and 5 show the high-quality samples, reverse KL-divergence, and number
of modes recovered, respectively. The horizontal axis in each ﬁgure captures the total number of
parameters in the discriminator and encoder (only ALI has an encoder, which is counted toward
its parameter budget). Each data point is averaged over 10 trials, as before.

9

Parameter Count

Parameter Count

Parameter Count

Figure 3: High-quality samples
(out of 1, higher is better)

Figure 4: Modes
(max 25, higher is better)

recovered

Figure 5: Reverse KL diver-
gence (lower is better)

We make a few observations: ﬁrst, the number of parameters seems to have a small eﬀect on
the evaluated metrics. Despite varying the number of parameters by an order of magnitude, we
do not see signiﬁcant evidence of the metrics improving with the number of parameters, for any
architecture. This suggests that the advantages of PacGAN and ALI compared to GAN do not stem
from having more parameters. Our second observation is that packing seems to signiﬁcantly increase
the number of modes recovered and the reverse KL divergence; there is a distinct improvement from
GAN to PacGAN2 to PacGAN3 to PacGAN4. These eﬀects are expected, as both metrics (modes
recovered and reverse KL divergence) are proxies for mode collapse. Along these metrics, ALI
seems to perform similarly to PacGAN2. Third, packing does not appear to aﬀect the fraction of
high-quality samples. One explanation may be that improving diversity does not necessary improve
sample quality. We want to highlight that the standard error of these experiments is large; more
trials are needed, but these preliminary results suggest that the beneﬁts of packing do not primarily
stem from having more parameters in the discriminator. For MD, the metrics ﬁrst improve and then
degrade with the number of parameters. We suspect that this may because MD is very sensitive
to experiment settings, as the same architecture of MD has very diﬀerent performance on 2d-grid
and 2d-ring dataset (Table 1).

3.2 Stacked MNIST experiment

In our next experiments, we evaluate mode collapse on the stacked MNIST dataset (described at
the beginning of Section 3). These experiments are direct comparisons to analogous experiments
in VEEGAN [63] and Unrolled GANs [46]. For these evaluations, we generate samples from the
generator. Each of the three channels in each sample is classiﬁed by a pre-trained third-party
MNIST classiﬁer, and the resulting three digits determine which of the 1, 000 modes the sample
belongs to. We measure the number of modes captured, as well as the KL divergence between the
generated distribution over modes and the expected true one (i.e., a uniform distribution over the
1,000 modes).

3.2.1 VEEGAN [63] experiment

In this experiment, we replicate Table 2 from [63], which measured the number of observed modes
in a generator trained on the stacked MNIST dataset, as well as the KL divergence of the generated
mode distribution.

10

Target distribution

DCGAN

PacDCGAN2

Figure 6: True distribution (left), DCGAN generated samples (middle), and PacDCGAN2 gener-
ated samples (right) from the stacked-MNIST dataset show PacDCGAN2 captures more diversity
while producing sharper images.

Hyperparameters. For this experiment, we train each GAN on 128,000 samples, with a mini-
batch size of 64. The generator’s loss function is
log(D(generated data)), and the discriminator’s
−
loss function is -log(D(real data))-log(1-D(generated data)). We update the generator parameters
twice and the discriminator parameters once in each mini-batch, and train the networks over 50
epochs. For testing, we generate 26,000 samples, and evaluate the empirical KL divergence and
number of modes covered. Finally, we average these values over 10 runs of the entire pipeline.

Architecture.
In line with prior work [63], we used a DCGAN-like architecture for these exper-
iments, which is based on the code at https://github.com/carpedm20/DCGAN-tensorflow. In
particular, the generator and discriminator architectures are as follows:

Generator:

∼

U (

1, 1)100

number of outputs
layer
100
Input: z
−
Fully connected
2*2*512
Transposed Convolution 4*4*256
Transposed Convolution 7*7*128
Transposed Convolution 14*14*64
Transposed Convolution 28*28*3

5*5
5*5
5*5
5*5

Discriminator (for PacDCGANm):

kernel size

stride BN activation function

Yes ReLU
Yes ReLU
Yes ReLU
Yes ReLU
Tanh

2
2
2
2

11

∼

layer
Input: x
Convolution
Convolution
Convolution
Convolution
Fully connected

number of outputs

kernel size

stride BN activation function

data or Gm 28*28*(3*m)
pm

14*14*64
7*7*128
4*4*256
2*2*512
1

5*5
5*5
5*5
5*5

2
2
2
2

LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Yes LeakyReLU
Sigmoid

MD uses the same architecture as GAN, except that a minibatch discrimination layer is added

before the output layer of discriminator.

Results. Results are shown in Table 2. The ﬁrst four rows are copied directly from [63]. The last
three rows are computed using a basic DCGAN, with packing in the discriminator. We ﬁnd that
packing gives good mode coverage, reaching all 1,000 modes in every trial. Given a DCGAN that
can capture at most 99 modes on average (our mother architecture), the principle of packing, which
is a small change in the architecture, is able to improve performance to capture all 1,000 modes.
Again we see that packing the simplest DCGAN is suﬃcient to fully capture all the modes in this
benchmark tests, and we do not pursue packing more complex baseline architectures. Existing
approaches to mitigate mode collapse, such as ALI, Unrolled GANs, VEEGAN, and MD are not
able to capture as many modes. We also observe that MD is very unstable throughout training,
which makes it capture even less modes than GAN. One factor that contributes to MD’s instability
may be that MD requires too many parameters. The number of discriminator parameters in MD
is 47,976,773, whereas GAN has 4,310,401 and PacGAN4 only needs 4,324,801.

DCGAN [55]
ALI [15]
Unrolled GAN [46]
VEEGAN [63]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

Stacked MNIST

Modes (Max 1000)
99.0
16.0
48.7
150.0
7.67
6.46
0.00
0.00
0.00

24.5
78.9
1000.0
1000.0
1000.0

±
±
±
±
±

KL
3.40
5.40
4.32
2.95
0.418
0.127
0.003
0.003
0.005

5.49
4.50
0.06
0.06
0.07

±
±
±
±
±

Table 2: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number
of modes captured by the generator and reverse KL divergence over the generated mode distribu-
tion. The DCGAN, PacDCGAN, and MD results are averaged over 10 trials, with standard error
reported.

Note that other classes of GANs may also be able to learn most or all of the modes if tuned
properly. For example, [46] reports that regular GANs can learn all 1,000 modes even without
unrolling if the discriminator is large enough, and if the discriminator is half the size of the generator,

12

unrolled GANs recover up to 82% of the modes when the unrolling parameter is increased to 10.
To explore this eﬀect, we conduct further experiments on unrolled GANs in Section 3.2.2.

3.2.2 Unrolled GAN [46] experiment

This experiment is designed to replicate Table 1 from Unrolled GANs [46]. Unrolled GANs exploit
the observation that iteratively updating discriminator and generator model parameters can con-
tribute to training instability. To mitigate this, they update model parameters by computing the
loss function’s gradient with respect to k
1 sequential discriminator updates, where k is called
the unrolling parameter. [46] reports that unrolling improves mode collapse as k increases, at the
expense of greater training complexity.

≥

Unlike Section 3.2.1, which reported a single metric for unrolled GANs, this experiment studies
the eﬀect of the unrolling parameter and the discriminator size on the number of modes learned
by a generator. The key diﬀerences between these trials and the unrolled GAN row in Table 2 are
four: (1) the unrolling parameters are diﬀerent, (2) the discriminator sizes are diﬀerent, (3) the
generator and discriminator architectures are chosen according to Appendix E in [46], and (4) the
total training time was 5x as long as [46]. PacDCGAN uses the same generators and discriminators
(except for input layer) as unrolled GAN in each experiment. MD uses the same architecture,
except that a minibatch discrimination layer is added before the output layer of discriminator.

Results. Our results are reported in Table 3. The ﬁrst four rows are copied from [46]. As
before, we ﬁnd that packing seems to increase the number of modes covered. Additionally, in both
experiments, PacDCGAN ﬁnds more modes on average than Unrolled GANs with k = 10, with
lower reverse KL divergences between the mode distributions. This suggests that packing has a
more pronounced eﬀect than unrolling.

We see that compared with PacGAN, MD has worse metrics in D=1/4G setting but has similar
metrics in D=1/2G setting. In addition, we should note that MD requires much more discriminator
parameters: 747 for PacGAN4 and 1,226,317 for MD in D=1/4G setting; 2,213 for PacGAN4 and
2,458,533 for MD in D=1/2G setting.

3.3 CelebA experiment

In this experiment, we measure the diversity of images generated from the celebA dataset as
proposed by Arora et al. [4]. They suggest measuring the diversity by estimating the probability of
collision in a ﬁnite batch of images sampled from the generator. If there exists at least one pair of
near-duplicate images in the batch it is declared to have a collision. To detect collision in a batch
of samples, they select the 20 closest pairs from it according to the Euclidean distance in pixel
space, and then visually identify if any of them would be considered duplicates by humans. For
visual identiﬁcation, we take majority vote of three human reviewers for each batch of samples. To
estimate the probability we repeat the experiment 20 times.

We use DCGAN- unconditional, with JSD objective as described in [55] as the base archi-
tecture. We perform the experiment for diﬀerent sizes of the discriminator while ﬁxing the other
hyper-parameters. The DCGAN [55] uses 4 CNN layers with the number of output channels of each
1, 2, 4, 8. Thus the discriminator size is proportional to dim2. Table 4 shows prob-
layer being dim
.
16, 32, 64, 80
ability of collision in a batch of size 1024 for DCGAN and PacDCGAN2 for dim
}
Packing signiﬁcantly improves diversity of samples. If the size of the discriminator is small, then

∈ {

×

13

DCGAN [55]
Unrolled GAN, 1 step [46]
Unrolled GAN, 5 steps [46]
Unrolled GAN, 10 steps [46]
Minibatch Discrimination [60]
DCGAN (our implementation)
PacDCGAN2 (ours)
PacDCGAN3 (ours)
PacDCGAN4 (ours)

D is 1/4 size of G

D is 1/2 size of G

Modes (Max 1000)
20.73
30.6
34.75
65.4
63.30
236.4
74.67
327.2
59.02
264.1
17.56
78.5
32.99
484.5
32.18
601.3
29.00
667.4

±
±
±
±
±
±
±
±
±

KL
0.42
0.14
0.43
0.46
0.30
0.19
0.22
0.17
0.15

5.99
5.91
4.67
4.66
3.32
5.21
2.61
2.00
1.81

±
±
±
±
±
±
±
±
±

Modes (Max 1000)
140.9
628.0
55.77
523.6
44.98
732.0
37.91
817.4
67.46
837.1
34.59
487.7
15.92
840.7
12.10
866.6
25.50
820.2

±
±
±
±
±
±
±
±
±

KL
0.75
0.26
0.09
0.12
0.25
0.15
0.05
0.04
0.14

2.58
2.44
1.66
1.43
0.84
2.24
1.00
0.90
1.15

±
±
±
±
±
±
±
±
±

Table 3: Modes covered and KL divergence for unrolled GANs and MD as compared to PacDCGANs
for various unrolling parameters, discriminator sizes, and the degree of packing. The DCGAN and
PacDCGAN results are averaged over 50 trials, with standard error reported. The MD results are
averaged over 10 trials, with standard error reported.

packing also improves quality of the samples. Figure 7 shows samples generated from DCGAN
and PacDCGAN2 for dim = 16. We note that DCGAN and PacDCGAN2 use approximately same
number of parameters, 273K and 274K respectively.

discriminator size

d2
4 d2
16 d2
25 d2

probability of collision
DCGAN PacDCGAN2
0.33
0
0
0.17

1
0.42
0.86
0.65

Table 4: Probability of at least one pair of near-duplicate images being present in a batch of
1024 images generated from DCGAN and PacDCGAN2 on celebA dataset show that PacDCGAN2
generates more diverse images.

3.4 WGAN experiment

To verify that our packing idea can also work on Wasserstein loss, we compare WGAN with PacW-
GAN on stacked MNIST dataset. The experiment setting follows VEEGAN setting in Section
3.2.1, except: (1) remove all batch normalization layers in discriminator, and remove the sigmoid
activation in the output layer of discriminator; (2) use WGAN-GP loss instead of JSD loss; and
(3) to showcase the diﬀerence between WGAN and PacGAN, we use smaller generators and dis-
criminators. Speciﬁcally, the number of feature maps in each layer of discriminator and generator
is a quarter of what used in Appendix 3.2.1. Table 5 shows that PacWGANs discover more modes
and achieves smaller KL divergence than WGAN. This suggests that the idea of packing improves
mode collapse on GANs trained with Wasserstein distance loss as well.

14

DCGAN

PacDCGAN2

Figure 7: CelebA samples generated from DCGAN (left) and PacDCGAN2 (right) show PacDC-
GAN2 generates more diverse and sharper images.

WGAN [1]
PacWGAN2 (ours)
PacWGAN3 (ours)
PacWGAN4 (ours)

314.3
927.6
948.7
965.7

Stacked MNIST
Modes
38.54
22.19
21.43
19.07

2.44
0.59
0.50
0.42

±
±
±
±

±
±
±
±

KL
0.170
0.108
0.089
0.094

Table 5: Two measures of mode collapse proposed in [63] for the stacked MNIST dataset: number of
modes captured by the generator and reverse KL divergence over the generated mode distribution.
All results are averaged over 10 trials, with standard error reported.

4 Theoretical analyses of PacGAN

In this section, we propose a formal and natural mathematical deﬁnition of mode collapse, which
abstracts away domain-speciﬁc details (e.g. images vs. time series). For a target distribution P
and a generator distribution Q, this deﬁnition describes mode collapse through a two-dimensional
representation of the pair (P, Q) as a region, which is motivated by the ROC (Receiver Operating
Characteristic) curve representation of a binary hypothesis testing or a binary classiﬁcation.

Mode collapse is a phenomenon commonly reported in the GAN literature [18, 56, 68, 48, 4],
which can refer to two distinct concepts: (i) the generative model loses some modes that are
present in the samples of the target distribution. For example, despite being trained on a dataset
of animal pictures that includes lizards, the model never generates images of lizards. (ii) Two
distant points in the code vector Z are mapped to the same or similar points in the sample space
X. For instance, two distant latent vectors z1 and z2 map to the same picture of a lizard [18].
Although these phenomena are diﬀerent, and either one can occur without the other, they are
generally not explicitly distinguished in the literature, and it has been suggested that the latter
may cause the former [18]. In this paper, we focus on the former notion, as it does not depend
on how the generator maps a code vector Z to the sample X, and only focuses on the quality of
the samples generated. In other words, we assume here that two generative models with the same
marginal distribution over the generated samples should not be treated diﬀerently based on how

15

random code vectors are mapped to the data sample space. The second notion of mode collapse
would diﬀerentiate two such architectures, and is beyond the scope of this work. The proposed
region representation relies purely on the properties of the generated samples, and not on the
generator’s mapping between the latent and sample spaces.

We analyze how the proposed idea of packing changes the training of the generator. We view
the discriminator’s role as providing a surrogate for a desired loss to be minimized—surrogate in the
sense that the actual desired losses, such as Jensen-Shannon divergence or total variation distances,
cannot be computed exactly and need to be estimated. Consider the standard GAN discriminator
with a cross-entropy loss:

min
G

max
D

(cid:124)

EX∼P [log(D(X))] + EG(Z)∼Q[log(1

D(G(Z)))]

,

(cid:39) dKL

(cid:0)P (cid:107) P +Q

2

(cid:123)(cid:122)
(cid:1)+dKL

(cid:0)Q(cid:107) P +Q

2

−
(cid:1)+log(1/4)

(cid:125)

(2)

∼

where the maximization is over the family of discriminators (or the discriminator weights, if the
family is a neural network of a ﬁxed architecture), the minimization is over the family of generators,
and X is drawn from the distribution P of the real data, Z is drawn from the distribution of the code
vector, typically a low-dimensional Gaussian, and we denote the resulting generator distribution
as G(Z)
Q. The role of the discriminator under this GAN scenario is to provide the generator
with an approximation (or a surrogate) of a loss, which in the case of cross entropy loss turns
out to be the Jensen-Shannon divergence (up to a scaling and shift by a constant), deﬁned as
dJS(P, Q) (cid:44) (1/2) dKL(P
) is the Kullback-
Leibler divergence. This follows from the fact that, if we search for the maximizing discriminator
over the space of all functions, the maximizer turns out to be D(X) = P (X)/(P (X) + Q(X)) [19].
In practice, we search over some parametric family of discriminators, and we can only compute
sample average of the losses. This provides an approximation of the Jensen-Shannon divergence
between P and Q. The outer minimization over the generator tries to generate samples such that
they are close to the real data in this (approximate) Jensen-Shannon divergence, which is one
measure of how close the true distribution P and the generator distribution Q are.

(P + Q)/2), where dKL(
·
(cid:107)

(P + Q)/2) + (1/2) dKL(Q

(cid:107)

In this section, we show a fundamental connection between the principle of packing and mode
collapse in GAN. We provide a complete understanding of how packing changes the loss as seen
by the generator, by focusing on (as we did to derive the Jensen-Shnnon divergence above) (a) the
optimal discriminator over a family of all measurable functions; (b) the population expectation;
and (c) the 0-1 loss function of the form:

max
D

EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))]

−

subject to

D(X)

0, 1

.

}

∈ {

The ﬁrst assumption allows us to bypass the speciﬁc architecture of the discriminator used, which is
common when analyzing neural network based discriminators (e.g. [7, 8]). The second assumption
can be potentially relaxed and the standard ﬁnite sample analysis can be applied to provide bounds
similar to those in our main results in Theorems 3, 4, and 5. The last assumption gives a loss of
the total variation distance dTV(P, Q) (cid:44) supS⊆X {
. This follows
from the fact that (e.g. [18]),

over the domain

Q(S)
}

P (S)

−

X

sup
D

(cid:8)EX∼P [I(D(X))] + EG(Z)∼Q[1

I(D(G(Z)))](cid:9) = sup
S

−

(cid:8)P (S) + 1

Q(S)(cid:9)

−

= 1 + dTV(P, Q) .

16

This discriminator provides (an approximation of) the total variation distance, and the generator
tries to minimize the total variation distance dTV(P, Q). The reason we make this assumption
is primarily for clarity and analytical tractability: total variation distance highlights the eﬀect of
packing in a way that is cleaner and easier to understand than if we were to analyze Jensen-Shannon
divergence. We discuss this point in more detail in Section 4.2. In sum, these three assumptions
allow us to focus purely on the impact of packing on the mode collapse of resulting discriminator.
We want to understand how this 0-1 loss, as provided by such a discriminator, changes with the
degree of packing m. As packed discriminators see m packed samples, each drawn i.i.d. from one
joint class (i.e. either real or generated), we can consider these packed samples as a single sample
that is drawn from the product distribution: P m for real and Qm for generated. The resulting loss
provided by the packed discriminator is therefore dTV(P m, Qm).

We ﬁrst provide a formal mathematical deﬁnition of mode collapse in Section 4.1, which leads
to a two-dimensional representation of any pair of distributions (P, Q) as a mode-collapse region.
This region representation provides not only conceptual clarity regarding mode collapse, but also
proof techniques that are essential to proving our main results on the fundamental connections
between the strength of mode collapse in a pair (P, Q) and the loss dTV(P m, Qm) seen by a packed
discriminator (Section 4.2). The proofs of these results are provided in Section 5. In Section 4.3, we
show that the proposed mode collapse region is equivalent to the ROC curve for binary hypothesis
testing. This allows us to use powerful mathematical techniques from binary hypothesis testing
including the data processing inequality and the reverse data processing inequalities.

4.1 Mathematical deﬁnition of mode collapse as a two-dimensional region

Although no formal and agreed-upon deﬁnition of mode collapse exists in the GAN literature,
mode collapse is declared for a multimodal target distribution P if the generator Q assigns a
signiﬁcantly smaller probability density in the regions surrounding a particular subset of modes.
One major challenge in addressing such a mode collapse is that it involves the geometry of P :
there is no standard partitioning of the domain respecting the modular topology of P , and even
heuristic partitions are typically computationally intractable in high dimensions. Hence, we drop
this geometric constraint, and introduce a purely analytical deﬁnition.

Deﬁnition 1. A target distribution P and a generator Q exhibit (ε, δ)-mode collapse for some
such that P (S)
0

1 if there exists a set S

δ and Q(S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

This deﬁnition provides a formal measure of mode collapse for a target P and a generator Q;
intuitively, larger δ and smaller ε indicate more severe mode collapse. That is, if a large portion of
the target P (S)
ε, then we
declare (ε, δ)-mode collapse.

is missing in the generator Q(S)

δ in some set S in the domain

≥

≤

X

A key observation is that two pairs of distributions can have the same total variation distance
while exhibiting very diﬀerent mode collapse patterns. To see this, consider a toy example in
Figure 8, with a uniform target distribution P = U ([0, 1]) over [0, 1]. Now consider all generators
at a ﬁxed total variation distance of 0.2 from P . We compare the intensity of mode collapse
for two extreme cases of such generators. Q1 = U ([0.2, 1]) is uniform over [0.2, 1] and Q2 =
0.6U ([0, 0.5]) + 1.4U ([0.5, 1]) is a mixture of two uniform distributions, as shown in Figure 8. They
are designed to have the same total variations distance, i.e. dTV(P, Q1) = dTV(P, Q2) = 0.2, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.2] is lost, whereas Q2
captures a more balanced deviation from P .

17

Deﬁnition 1 captures the fact that Q1 has more mode collapse than Q2, since the pair (P, Q1)
exhibits (ε = 0, δ = 0.2)-mode collapse, whereas the pair (P, Q2) exhibits only (ε = 0.12, δ = 0.2)-
mode collapse, for the same value of δ = 0.2. However, the appropriate way to precisely represent
mode collapse (as we deﬁne it) is to visualize it through a two-dimensional region we call the mode
collapse region. For a given pair (P, Q), the corresponding mode collapse region
(P, Q) is deﬁned
as the convex hull of the region of points (ε, δ) such that (P, Q) exhibit (ε, δ)-mode collapse, as
shown in Figure 8.

R

(P, Q) (cid:44) conv(cid:0) (cid:8) (ε, δ) (cid:12)

(cid:12) δ > ε and (P, Q) has (ε, δ)-mode collapse (cid:9) (cid:1) ,

R
where conv(
) denotes the convex hull. This deﬁnition of region is fundamental in the sense that it
·
is a suﬃcient statistic that captures the relations between P and Q for the purpose of hypothesis
testing. This assertion is made precise in Section 4.3 by making a strong connection between
the mode collapse region and the type I and type II errors in binary hypothesis testing. That
connection allows us to prove a sharp result on how the loss, as seen by the discriminator, evolves
under PacGAN in Section 5. For now, we can use this region representation of a given target-
generator pair to detect the strength of mode collapse occurring for a given generator.

(3)

Typically, we are interested in the presence of mode collapse with a small ε and a much larger
δ; this corresponds to a sharply-increasing slope near the origin (0, 0) in the mode collapse region.
For example, the middle panel in Figure 8 depicts the mode collapse region (shaded in gray) for
a pair of distributions (P, Q1) that exhibit signiﬁcant mode collapse; notice the sharply-increasing
slope at (0, 0) of the upper boundary of the shaded grey region (in this example the slope is in fact
inﬁnite). The right panel in Figure 8 illustrates the same region for a pair of distributions (P, Q2)
that do not exhibit strong mode collapse, resulting a region with a much gentler slope at (0, 0) of
the upper boundary of the shaded grey region.

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Figure 8: A formal deﬁnition of (ε, δ)-mode collapse and its accompanying region representation
captures the intensity of mode collapse for generators Q1 with mode collapse and Q2 which does
not have mode collapse, for a toy example distributions P , Q1, and Q2 shown on the left. The
region of (ε, δ)-mode collapse that is achievable is shown in grey.

Similarly, if the generator assigns a large probability mass compared to the target distribution

on a subset, we call it a mode augmentation, and give a formal deﬁnition below.

18

Deﬁnition 2. A pair of a target distribution P and a generator Q has an (ε, δ)-mode augmentation
for some 0

1 if there exists a set S

such that Q(S)

δ and P (S)

ε < δ

ε.

≤

≤

⊆ X

≥

≤

Note that we distinguish mode collapse and augmentation strictly here, for analytical purposes.
In GAN literature, both collapse and augmentation contribute to the observed “mode collapse”
phenomenon, which loosely refers to the lack of diversity in the generated samples.

4.2 Evolution of the region under product distributions

The toy example generators Q1 and Q2 from Figure 8 could not be distinguished using only their
total variation distances from P , despite exhibiting very diﬀerent mode collapse properties. This
suggests that the original GAN (with 0-1 loss) may be vulnerable to mode collapse. We prove
in Theorem 4 that a discriminator that packs multiple samples together can better distinguish
mode-collapsing generators. Intuitively, m packed samples are equivalent to a single sample drawn
from the product distributions P m and Qm. We show in this section that there is a fundamental
connection between the strength of mode collapse of (P, Q) and the loss as seen by the packed
discriminator dTV(P m, Qm).

(P m, Qm

Intuition via toy examples. Concretely, consider the example from the previous section and
recall that P m denote the product distribution resulting from packing together m independent
samples from P . Figure 9 illustrates how the mode collapse region evolves over m, the degree
1 ) of a mode-collapsing
of packing. This evolution highlights a key insight: the region
(P m, Qm
2 ) of a non-mode-
generator expands much faster as m increases compared to the region
collapsing generator. This implies that the total variation distance of (P, Q1) increases more rapidly
as we pack more samples, compared to (P, Q2). This follows from the fact that the total variation
distance between P and the generator can be determined directly from the upper boundary of
the mode collapse region (see Section 4.3.2 for the precise relation). In particular, a larger mode
collapse region implies a larger total variation distance between P and the generator, which is made
precise in Section 4.3.2. The total variation distances dTV(P m, Qm
2 ), which were
explicitly chosen to be equal at m = 1 in our example, grow farther apart with increasing m,
as illustrated in the right ﬁgure below. This implies that if we use a packed discriminator, the
mode-collapsing generator Q1 will be heavily penalized for having a larger loss, compared to the
non-mode-collapsing Q2.

1 ) and dTV(P m, Qm

R

R

Evolution of total variation distances. In order to generalize the intuition from the above
toy examples, we ﬁrst analyze how the total variation evolves for the set of all pairs (P, Q) that
have the same total variation distance τ when unpacked (i.e., when m = 1). The solutions to the
following optimization problems give the desired upper and lower bounds, respectively, on total
variation distance for any distribution pair in this set with a packing degree of m:

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(4)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ ,

where the maximization and minimization are over all probability measures P and Q. We give the
exact solution in Theorem 3, which is illustrated pictorially in Figure 10 (left).

19

δ

(P m, Qm
1 )

R

δ

(P m, Qm
2 )

R

Total variation distance

dTV(P m, Qm
1 )
dTV(P m, Qm
2 )

ε

ε

degree of packing m

Figure 9: Evolution of the mode collapse region over the degree of packing m for the two toy
examples from Figure 8. The region of the mode-collapsing generator Q1 expands faster than the
non-mode-collapsing generator Q2 when discriminator inputs are packed (at m = 1 these examples
have the same TV distances). This causes a discriminator to penalize mode collapse as desired.

(5)

(6)

(7)

Theorem 3. For all 0
is 1

(1

τ

≤

≤

τ )m, and the solution to the minimization in (4) is

1 and a positive integer m, the solution to the maximization in (4)

−

−

L(τ, m) (cid:44)

min
0≤α≤1−τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α)m and Qinner(α, τ )m are the m-th order product distributions of binary random
variables distributed as

Pinner(α) = (cid:2)1
Qinner(α, τ ) = (cid:2)1

α, α(cid:3) ,
α

−

τ, α + τ (cid:3) .

−

−
Although this is a simple statement that can be proved in several diﬀerent ways, we introduce
in Section 5 a novel geometric proof technique that critically relies on the proposed mode collapse
region. This particular technique will allow us to generalize the proof to more complex problems
involving mode collapse in Theorem 4, for which other techniques do not generalize. Note that the
claim in Theorem 3 has nothing to do with mode collapse. Still, the mode collapse region deﬁnition
(used here purely as a proof technique) provides a novel technique that seamlessly generalizes to
prove more complex statements in the following.

For any given value of τ and m, the bounds in Theorem 3 are easy to evaluate numerically,
as shown below in the left panel of Figure 10. Within this achievable range, some subset of pairs
(P, Q) have rapidly increasing total variation, occupying the upper part of the region (shown in
red, middle panel of Figure 10), and some subset of pairs (P, Q) have slowly increasing total
variation, occupying the lower part as shown in blue in the right panel in Figure 10. In particular,
(P m, Qm) is
the evolution of the mode-collapse region of a pair of m-th power distributions
fundamentally connected to the strength of mode collapse in the original pair (P, Q). This means
that for a mode-collapsed pair (P, Q1), the mth-power distribution will exhibit a diﬀerent total
variation distance evolution than a non-mode-collapsed pair (P, Q2). As such, these two pairs can
be distinguished by a packed discriminator. Making such a claim precise for a broad class of mode-
collapsing and non-mode-collapsing generators is challenging, as it depends on the target P and the
generator Q, each of which can be a complex high dimensional distribution, like natural images.

R

20

The proposed region interpretation, endowed with the hypothesis testing interpretation and the
data processing inequalities that come with it, is critical:
it enables the abstraction of technical
details and provides a simple and tight proof based on geometric techniques on two-dimensional
regions.

(0.00, 0.1)-mode collapse

no (0.07, 0.1)-mode collapse

dTV(P m, Qm)

degree of packing m

degree of packing m

degree of packing m

Figure 10: The range of dTV(P m, Qm) achievable by pairs with dTV(P, Q) = τ , for a choice of
τ = 0.11, deﬁned by the solutions of the optimization (4) provided in Theorem 3 (left panel).
The range of dTV(P m, Qm) achievable by those pairs that also have (ε = 0.00, δ = 0.1)-mode
collapse (middle panel). A similar range achievable by pairs of distributions that do not have
(ε = 0.07, δ = 0.1)-mode collapse or (ε = 0.07, δ = 0.1)-mode augmentation (right panel). Pairs
(P, Q) with strong mode collapse occupy the top region (near the upper bound) and the pairs with
weak mode collapse occupy the bottom region (near the lower bound).

Evolution of total variation distances with mode collapse. We analyze how the total
variation evolves for the set of all pairs (P, Q) that have the same total variations distances τ when
unpacked, with m = 1, and have (ε, δ)-mode collapse for some 0
1. The solution of the
following optimization problem gives the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(8)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) has (ε, δ)-mode collapse

(P, Q) has (ε, δ)-mode collapse ,

−

ε by deﬁnition, and when τ < δ

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse constraint is deﬁned in Deﬁnition 1. (ε, δ)-mode collapsing pairs have total variation at
least δ
ε, the feasible set of the above optimization is empty.
Otherwise, the next theorem establishes that mode-collapsing pairs occupy the upper part of the
total variation region; that is, total variation increases rapidly as we pack more samples together
(Figure 10, middle panel). One implication is that distribution pairs (P, Q) at the top of the total
variation evolution region are those with the strongest mode collapse. Another implication is that
a pair (P, Q) with strong mode collapse (i.e., with larger δ and smaller ε in the constraint) will be
penalized more under packing, and hence a generator minimizing an approximation of dTV(P m, Qm)
will be unlikely to select a distribution that exhibits such strong mode collapse.

−

21

Theorem 4. For all 0
the maximization in (8) is 1

≤

ε < δ

≤
(1

L1(ε, δ, τ, m) (cid:44) min

1 and a positive integer m, if 1

τ

δ

ε then the solution to

−

−
(cid:110)

τ )m, and the solution to the minimization in (8) is
Pinner1(δ, α)m, Qinner1(ε, α, τ )m (cid:17)

dTV

(cid:16)

,

≥

≥

−

min
0≤α≤1− τ δ
δ−ε

min

1− τ δ

δ−ε ≤α≤1−τ

(cid:16)

Pinner2(α)m, Qinner2(α, τ )m (cid:17) (cid:111)

,

dTV

(9)

where Pinner1(δ, α)m, Qinner1(ε, α, τ )m, Pinner2(α)m, and Qinner2(α, τ )m are the m-th order product
distributions of discrete random variables distributed as

Pinner1(δ, α) = (cid:2)δ, 1
Qinner1(ε, α, τ ) = (cid:2)ε, 1
Pinner2(α) = (cid:2)1
Qinner2(α, τ ) = (cid:2)1

δ, α(cid:3) ,
α
τ
−
−
α, α(cid:3) ,
α

τ, α + τ (cid:3) .

−

−

−

−

α

ε, α + τ (cid:3) ,

(10)

(11)

(12)

(13)

−
ε, then the optimization in (8) has no solution and the feasible set is an empty set.

−

If τ < δ

−

A proof of this theorem is provided in Section 5.2, which critically relies on the proposed mode
collapse region representation of the pair (P, Q), and the celebrated result by Blackwell from [6].
The solutions in Theorem 4 can be numerically evaluated for any given choices of (ε, δ, τ ) as we
show in Figure 11.

Analogous results to the above theorem can be shown for pairs (P, Q) that exhibit ((cid:15), δ) mode
augmentation (as opposed to mode collapse). These results are omitted for brevity, but the results
and analysis are straightforward extensions of the proofs for mode collapse. This holds because
total variation distance is a metric, and therefore symmetric.

Evolution of total variation distances without mode collapse. We next analyze how the
total variation evolves for the set of all pairs (P, Q) that have the same total variations distances
τ when unpacked, with m = 1, and do not have (ε, δ)-mode collapse for some 0
1.
Because of the symmetry of the total variation distance, mode augmentation in Deﬁnition 2 is
equally damaging as mode collapse, when it comes to how fast total variation distances evolve.
Hence, we characterize this evolution for those family of pairs of distributions that do not have
either mode collapse or augmentation. The solution of the following optimization problem gives
the desired range of total variation distances:

ε < δ

≤

≤

min
P,Q

dTV(P m, Qm)

max
P,Q

dTV(P m, Qm)

(14)

subject to dTV(P, Q) = τ

subject to dTV(P, Q) = τ

(P, Q) does not have (ε, δ)-mode

(P, Q) does not have (ε, δ)-mode

collapse or augmentation

collapse or augmentation ,

where the maximization and minimization are over all probability measures P and Q, and the mode
collapse and augmentation constraints are deﬁned in Deﬁnitions 1 and 2, respectively.

It is not possible to have dTV(P, Q) > (δ

1, and satisfy the mode collapse
and mode augmentation constraints (see Section 5.3 for a proof). Similarly, it is not possible to

ε)/(δ +ε) and δ +ε

−

≤

22

(0.00, 0.1)-mode collapse

(0.01, 0.1)-mode collapse

(0.02, 0.1)-mode collapse

(0.03, 0.1)-mode collapse

(0.04, 0.1)-mode collapse

(0.05, 0.1)-mode collapse

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 11: The evolution of total variation distance over the packing degree m for mode collapsing
pairs is shown as a red band. The upper and lower boundaries of the red band is deﬁned by the
optimization 8 and computed using Theorem 4. For a ﬁxed dTV(P, Q) = τ = 0.11 and (ε, δ = 0.1)-
mode collapse, we show the evolution with diﬀerent choices of ε
.
0.00, 0.01, 0.02, 0.03, 0.04, 0.05
}
The black solid lines show the maximum/minimum total variation in the optimization problem
(4) as a reference. The family of pairs (P, Q) with stronger mode collapse (i.e. smaller ε in the
constraint), occupy a smaller region at the top with higher total variation under packing, and hence
is more penalized when training the generator.

∈ {

δ

δ

{

−

−

−

−

−

−
(δ

ε)
}

ε) and δ + ε

−
ε)/(δ + ε), (δ

. On the other hand, when τ

1, and satisfy the constraints. Hence, the feasible
have dTV(P, Q) > (δ
ε)/(2
≥
set is empty when τ > max
ε,
ε)/(2
no pairs with total variation distance τ can have (ε, δ)-mode collapse. In this case, the optimization
reduces to the simpler one in (4) with no mode collapse constraints. Non-trivial solution exists in
the middle regime, i.e. δ
. The lower bound
}
for this regime, given in equation (18), is the same as the lower bound in (5), except it optimizes
over a diﬀerent range of α values. For a wide range of parameters ε, δ, and τ , those lower bounds
will be the same, and even if they diﬀer for some parameters, they diﬀer slightly. This implies that
the pairs (P, Q) with weak mode collapse will occupy the bottom part of the evolution of the total
variation distances (see Figure 10 right panel), and also will be penalized less under packing. Hence
a generator minimizing (approximate) dTV(P m, Qm) is likely to generate distributions with weak
mode collapse.

ε)/(δ + ε), (δ

(δ
{

ε)/(2

max

ε)

−

≤

≤

≤

−

−

−

−

−

ε

δ

δ

τ

Theorem 5. For all 0
and the minimum of (14) are the same as those of the optimization (4) provided in Theorem 3.

1 and a positive integer m, if 0

ε, then the maximum

τ < δ

ε < δ

≤

≤

≤

−

23

If δ + ε

1 and δ

≤

ε

τ

−

≤

≤

(δ

−

U1((cid:15), δ, τ, m) (cid:44)

max
α+β≤1−τ, ετ

δ−ε ≤α,β

ε)/(δ + ε) then the solution to the maximization in (14) is

(cid:16)

Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m (cid:17)

dTV

, (15)

where Pouter1(ε, δ, α, β, τ )m and Qouter1(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter1(ε, δ, α, β, τ ) =

(cid:104) α(δ−ε)−ετ
α−ε

,

α(α+τ −δ)
α−ε

, 1

Qouter1(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104)

τ

α

−

−
β(β+τ −δ)
β−ε

−
,

(cid:105)
β, β, 0
(cid:105)

β(δ−ε)−ετ
β−ε

.

, and

The solution to the minimization in (14) is

L2(τ, m) (cid:44)

min
δ−ε ≤α≤1− δτ

ετ

δ−ε

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If δ + ε > 1 and δ

ε

τ

(δ

ε)/(2

δ

−

≤

≤

−

−

U2((cid:15), δ, τ, m) (cid:44)

max

α+β≤1−τ, (1−δ)τ

δ−ε ≤α,β

−
(cid:16)

ε) then the solution to the maximization in (14) is
Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m (cid:17)

, (19)

dTV

where Pouter2(ε, δ, α, β, τ )m and Qouter2(ε, δ, α, β, τ )m are the m-th order product distributions of
discrete random variables distributed as

Pouter2(ε, δ, α, β, τ ) =

Qouter2(ε, δ, α, β, τ ) =

0, α, 1

τ

α

β,

−

−

−

(cid:104) α(δ−ε)−(1−δ)τ
α−(1−δ)

,

(cid:104)

α(α+τ −(1−ε))
α−(1−δ)

, 1

τ

−

β(β+τ −(1−ε))
β−(1−δ)

α

(cid:105)
β, β, 0
(cid:105)

−
β(δ−ε)−(1−δ)τ
β−(1−δ)

−
,

.

, and

(20)

The solution to the minimization in (14) is

(16)

(17)

(18)

(21)

(22)

L3(τ, m) (cid:44)

min
δ−ε ≤α≤1− (1−ε)τ

δ−ε

(1−δ)τ

(cid:16)

Pinner(α)m, Qinner(α, τ )m (cid:17)

,

dTV

where Pinner(α) and Qinner(α, τ ) are deﬁned as in Theorem 3.

If τ > max

(δ

ε)/(δ + ε), (δ

ε)/(2

δ

−
and the feasible set is an empty set.

−

{

−

−

ε)
}

, then the optimization in (14) has no solution

A proof of this theorem is provided in Section 5.3, which also critically relies on the proposed
mode collapse region representation of the pair (P, Q) and the celebrated result by Blackwell from
[6]. The solutions in Theorem 5 can be numerically evaluated for any given choices of (ε, δ, τ ) as
we show in Figure 12.

The beneﬁt of packing degree m. We give a practitioner the choice of the degree m of packing,
namely how many samples to jointly pack together. There is a natural trade-oﬀ between computa-
tional complexity (which increases gracefully with m) and the additional distinguishability, which

24

No ((cid:15), δ) mode collapse or augmentation

((cid:15), δ) = (0.03, 0.1)

((cid:15), δ) = (0.04, 0.1)

((cid:15), δ) = (0.05, 0.1)

((cid:15), δ) = (0.06, 0.1)

((cid:15), δ) = (0.07, 0.1)

((cid:15), δ) = (0.08, 0.1)

dTV(P m, Qm)

dTV(P m, Qm)

m

m

m

Figure 12: The evolution of total variation distance over the packing degree m for pairs with
no mode collapse/augmentation is shown as a blue band, as deﬁned by the optimization (14)
and computed using Theorem 5. For a ﬁxed dTV(P, Q) = τ = 0.11 and the lack of (ε, δ =
0.1)-mode collapse/augmentation constraints, we show the evolution with diﬀerent choices of ε

∈
. The black solid lines show the maximum/minimum total variation
0.03, 0.04, 0.05, 0.06, 0.07, 0.08
{
}
in the optimization (4) as a reference. The family of pairs (P, Q) with weaker mode collapse
(i.e. larger ε in the constraint), occupies a smaller region at the bottom with smaller total variation
under packing, and hence is less penalized when training the generator.

we illustrate via an example. Consider the goal of diﬀerentiating two families of target-generator
pairs, one with mode collapse and one without:

H0(ε, δ, τ ) (cid:44)
H1(ε, δ, τ ) (cid:44)

(P, Q)
{
(P, Q)
{

(P, Q) without (ε, δ)-mode collapse or augmentation, and dTV(P, Q) = τ
|
(P, Q) with (ε, δ)-mode collapse and dTV(P, Q) = τ
|

}

.

,

}
(23)

As both families have the same total variation distances, they cannot be distinguished by an un-
packed discriminator. However, a packed discriminator that uses m samples jointly can diﬀerentiate
those two classes and even separate them entirely for a certain choices of parameters, as illustrated
in Figure 13. In red, we show the achievable dTV(P m, Qm) for H1(ε = 0.02, δ = 0.1, τ = 0.11) (the
bounds in Theorem (4)). In blue is shown a similar region for H0(ε = 0.05, δ = 0.1, τ = 0.11) (the
bounds in Theorem (5)). Although the two families are strictly separated (one with ε = 0.02 and
another with ε = 0.05), a non-packed discriminator cannot diﬀerentiate those two families as the
total variation is the same for both. However, as you pack mode samples, the packed discriminator
5,
becomes more powerful in diﬀerentiating the two hypothesized families. For instance, for m

≥

25

the total variation distance completely separates the two families.

In general, the overlap between those regions depends on the speciﬁc choice of parameters, but
the overall trend is universal: packing separates generators with mode collapse from those without.
Further, as the degree of packing increases, a packed discriminator increasingly penalizes generators
with mode collapse and rewards generators that exhibit less mode collapse. Even if we consider
complementary sets H0 and H1 with the same ε and δ (such that the union covers the whole space
of pairs of (P, Q) with the same total variation distance), the least penalized pairs will be those
with least mode collapse, which fall within the blue region of the bottom right panel in Figure 12.
This is consistent with the empirical observations in Tables 1 and 3, where increasing the degree of
packing captures more modes.

dTV(P m, Qm)

Figure 13: Evolution of achievable total variation distances dTV(P m, Qm) over packing size m for
two families of the target-generator pairs H0(0.05, 0.1, 0.11) and H1(0.02, 0.1, 0.11). The mode-
collapsing H1 is penalized signiﬁcantly by the discriminator (only with m > 1) and the two families
can be strictly separated with packing for m > 5.

Jensen-Shannon divergence. Our theoretical analysis focused on 0-1 loss, as our current analysis
technique gives exact solutions to the optimization problems (4), (8), and (14) if the metric is total
variation distance. This follows from the fact that we can provide tight inner and outer regions
to the family of mode collapse regions
(P, Q) that have the same total variation distances as
dTV(P, Q) as shown in Section 5.

R

In practice, 0-1 loss is never used, as it is not diﬀerentiable. A popular choice of a loss function
is the cross entropy loss in (2), which gives a metric of Jensen-Shannon (JS) divergence, as shown
in the beginning of Section 4. However, the same proof techniques used to show Theorems 4 and 5
give loose bounds on JS divergence. In particular, this gap prevents us from sharply characterizing
the full eﬀect of packing degree m on the JS divergence of a pair of distributions. Nonetheless, we
ﬁnd that empirically, packing seems to reduce mode collapse even under a cross entropy loss. It is
an interesting open question to ﬁnd solutions to the optimization problems (4), (8), and (14), when
the metric is the (more common) Jensen-Shannon divergence.

m

26

Although our proposed analysis technique does not provide a tight analysis for JS divergence,
we can still analyze a toy example similar to the one in Section 4.2. Consider a toy example with a
uniform target distribution P = U ([0, 1]) over [0, 1], a mode collapsing generator Q1 = U ([0.4, 1]),
and a non mode collapsing generator Q2 = 0.285 U ([0, 0.77815]) + 3.479 U ([0.77815, 1]). They are
designed to have the same Jensen-Shannon divergence, i.e. dJS(P, Q1) = dJS(P, Q2) = 0.1639, but
Q1 exhibits an extreme mode collapse as the whole probability mass in [0, 0.4] is lost, whereas
Q2 captures a more balanced deviation from P . Figure 14 shows that the mode collapsing Q1
have large JS divergence (and hence penalized more) under packing, compared to the non mode
collapsing Q2.

Jensen-Shannon divergence
dJS(P m, Qm
1 )
dJS(P m, Qm
2 )

degree of packing m

Figure 14: Jensen-Shannon divergence increases faster as a function of packing degree m for a mode
collapsing generator Q1, compared to a non mode collapsing generator Q2.

4.3 Operational interpretation of mode collapse via hypothesis testing region

So far, all the deﬁnitions and theoretical results have been explained without explicitly using
the mode collapse region. The main contribution of introducing the region deﬁnition is that it
provides a new proof technique based on the geometric properties of these two-dimensional regions.
Concretely, we show that the proposed mode collapse region is equivalent to a similar notion in
binary hypothesis testing. This allows us to bring powerful mathematical tools from this mature
area in statistics and information theory—in particular, the data processing inequalities originating
from the seminal work of Blackwell [6]. We make this connection precise, which gives insights on
how to interpret the mode collapse region, and list the properties and techniques which dramatically
simplify the proof, while providing the tight results in Section 5.

4.3.1 Equivalence between the mode collapse region and the ROC curve

There is a simple one-to-one correspondence between mode collapse region as we deﬁne it in Section
4.1 (e.g. Figure 8) and the ROC curve studied in binary hypothesis testing. In the classical testing
context, there are two hypotheses, h = 0 or h = 1, and we make observations via some stochastic
experiment in which our observations depend on the hypothesis. Let X denote this observation. One
way to visualize such an experiment is using a two-dimensional region deﬁned by the corresponding

27

type I and type II errors. This was, for example, used to prove strong composition theorems in the
context of diﬀerential privacy in [28], and subsequently to identify the optimal diﬀerentially private
mechanisms under local privacy [26] and multi-party communications [27]. Concretely, an ROC
curve of a binary hypothesis testing is obtained by plotting the largest achievable true positive rate
(TPR), i.e. 1
type II error, on the vertical axis
against the false positive rate (FPR), i.e probability of false alarm or equivalently type I error, on
the horizontal axis.

probability of missed detection, or equivalently 1

−

−

We can map this binary hypothesis testing setup directly to the GAN context. Suppose the
null hypothesis h = 0 denotes observations being drawn from the generated distribution Q, and
the alternate hypothesis h = 1 denotes observations being drawn from the true distribution P .
Given a sample X from this experiment, suppose we make a decision on whether the sample
came from P or Q based on a rejection region Sreject, such that we reject the null hypothesis
Sreject. FPR (i.e. Type I error) is when the null hypothesis is true but rejected, which
if X
happens with P(X
h = 0), and TPR (i.e. 1-type II error) is when the null hypothesis is
|
false and rejected, which happens with P(X
h = 1). Sweeping through the achievable
|
pairs (P(X
h = 1), P(X
h = 0)) for all possible rejection sets, this deﬁnes a
|
|
two dimensional convex region that we call hypothesis testing region. The upper boundary of this
convex set is the ROC curve. An example of ROC curves for the two toy examples (P, Q1) and
(P, Q2) from Figure 8 are shown below in Figure 15.

Sreject

Sreject

Sreject

Sreject

∈

∈

∈

∈

∈

In deﬁning the region, we allow stochastic decisions, such that if a point (x, y) and another
point (x(cid:48), y(cid:48)) are achievable TPR and FPR, then any convex combination of those points are also
achievable by randomly choosing between those two rejection sets. Hence, the resulting hypothesis
testing region is always a convex set by deﬁnition. We also show only the region above the 45-degree
line passing through (0, 0) and (1, 1), as the other region is symmetric and redundant. For a given
pair (P, Q), there is a very simple relation between its mode collapse region and hypothesis testing
region.

Remark 6 (Equivalence). For a pair of target P and generator Q, the hypothesis testing region is
the same as the mode collapse region.

Sreject

This follows immediately from the deﬁnition of mode collapse region in Deﬁnition 1. If there
exists a set S such that P (S) = δ and Q(S) = ε, then for the choice of Sreject = S in the binary
hypothesis testing, then the point (P(X
h = 1) = δ) in the
hypothesis testing region is achievable. The converse is also true, in the case we make deterministic
decisions on Sreject. As the mode collapse region is deﬁned as a convex hull of all achievable points,
the points in the hypothesis testing region that require randomized decisions can also be covered.
For example, the hypothesis testing regions of the toy examples from Figure 8 are shown below
in Figure 15. This simple relation allows us to tap into the rich analysis tools known for hypothesis
testing regions and ROC curves. We list such properties of mode collapse regions derived from this
relation in the next section. The proof of all the remarks follow from the equivalence to binary
hypothesis testing and corresponding existing results from [6] and [28].

h = 0) = ε, P(X
|

Sreject

∈

∈

|

4.3.2 Properties of the mode collapse region

Given the equivalence between the mode collapse region and the binary hypothesis testing region,
several important properties follow as corollaries. First, the hypothesis testing region is a suﬃcient

28

Mode collapse region for (P, Q1)

Mode collapse region for (P, Q2)

δ

(P, Q1)

R

δ

(P, Q2)

R

ε

ε

Hypothesis testing region for (P, Q1)

Hypothesis testing region for (P, Q2)

True Positive Rate

True Positive Rate

False Positive Rate (FPR)

False Positive Rate (FPR)

Figure 15: The hypothesis testing region of (P, Q) (bottom row) is the same as the mode collapse
region (top row). We omit the region below the y = x axis in the hypothesis testing region as it is
symmetric. The regions for mode collapsing toy example in Figure 8 (P, Q1) are shown on the left
and the regions for the non mode collapsing example (P, Q2) are shown on the right.

statistic for the purpose of binary hypothesis testing from a pair of distributions (P, Q). This
implies, among other things, that all f -divergences can be derived from the region. In particular,
for the purpose of GAN with 0-1 loss, we can deﬁne total variation as a geometric property of the
region, which is crucial to proving our main results.

Remark 7 (Total variation distance). The total variation distance between P and Q is the inter-
section between the vertical axis and the tangent line to the upper boundary of
(P, Q) that has a
slope of one, as shown in Figure 16.

R

This follows from the equivalence of the mode collapse region (Remark 6) and the hypothesis
testing region. This geometric deﬁnition of total variation allows us to enumerate over all pairs
(P, Q) that have the same total variation τ in our proof, via enumerating over all regions that touch
the line that has a unit slope and a shift τ (see Figure 17).

The major strength of the region perspective, as originally studied by Blackwell [6], is in pro-
viding a comparison of stochastic experiments. In our GAN context, consider comparing two pairs
of target distributions and generators (P, Q) and (P (cid:48), Q(cid:48)) as follows. First, a hypothesis h is drawn,
choosing whether to produce samples from the true distribution, in which case we say h = 1, or

29

slope = 1

δ

(P, Q2)

R

(cid:126)
(cid:119)
dTV(P, Q2)
(cid:127)

ε

Figure 16: Total variation distance is one among many properties of (P, Q2) that can be directly
read oﬀ of the region

(P, Q).

R

to produce samples from the generator, in which case we say h = 0. Conditioned on this hy-
pothesis h, we use X to denote a random variable that is drawn from the ﬁrst pair (P, Q) such
0) = Q(x). Similarly, we use X (cid:48) to denote a random sample
that fX|h(x
1) = P (x) and fX|h(x
|
|
0) = Q(cid:48)(x). Note that the conditional
1) = P (cid:48)(x) and fX (cid:48)|h(x
from the second pair, where fX (cid:48)|h(x
|
|
distributions are well-deﬁned for both X and X (cid:48), but there is no coupling deﬁned between them.
Suppose h is independently drawn from the uniform distribution.

Deﬁnition 8. For a given coupling between X and X (cid:48), we say X dominates X (cid:48) if they form a
Markov chain h–X–X (cid:48).

The data processing inequality in the following remark shows that if we further process the output
samples from the pair (P, Q) then the further processed samples can only have less mode collapse.
Processing output of stochastic experiments has the eﬀect of smoothing out the distributions, and
mode collapse, which corresponds to a peak in the pair of distributions, are smoothed out in the
processing down the Markov chain.

Remark 9 (Data processing inequality). The following data processing inequality holds for the
mode collapse region. For two coupled target-generator pairs (P, Q) and (P (cid:48), Q(cid:48)), if X dominates
another pair X (cid:48), then

⊆ R
This is expected, and follows directly from the equivalence of the mode collapse region (Remark
6) and the hypothesis testing region, and corresponding data processing inequality of hypothesis
testing region in [28]. What is perhaps surprising is that the reverse is also true.

R

(P (cid:48), Q(cid:48))

(P, Q) .

Remark 10 (Reverse data processing inequality). The following reverse data processing inequality
holds for the mode collapse region. For two paired marginal distributions X and X (cid:48), if

then there exists a coupling of the random samples from X and X (cid:48) such that X dominates X (cid:48),
i.e. they form a Markov chain h–X–X (cid:48).

(P (cid:48), Q(cid:48))

R

⊆ R

(P, Q) ,

30

This follows from the equivalence between the mode collapse region and the hypothesis testing
region (Remark 6) and Blackwell’s celebrated result on comparisons of stochastic experiments [6]
(see [28] for a simpler version of the statement). This region interpretation, and the accompanying
(reverse) data processing inequality, abstracts away all the details about P and Q, enabling us to
use geometric analysis tools to prove our results. In proving our main results, we will mainly rely
on the following remark, which is the corollary of the Remarks 9 and 10.

Remark 11. For all positive integers m, the dominance of regions are preserved under taking m-th
order product distributions, i.e. if

((P (cid:48))m, (Q(cid:48))m)

(P, Q), then

(P m, Qm).

(P (cid:48), Q(cid:48))

R

⊆ R

R

⊆ R

5 Proofs of the main results

In this section, we showcase how the region interpretation provides a new proof technique that is
simple and tight. This transforms the measure-theoretic problem into a geometric one in a simple
2D compact plane, facilitating the proof of otherwise-challenging results.

5.1 Proof of Theorem 3

Note that although the original optimization (4) has nothing to do with mode collapse, we use
the mode collapse region to represent the pairs (P, Q) to be optimized over. This allows us to use
simple geometric techniques to enumerate over all possible pairs (P, Q) that have the same total
variation distance τ .

δ

Figure 17: For any pair (P, Q) with total variation distance τ , there exists an α such that the
corresponding region

(P, Q) is sandwiched between

inner(α, τ ) and

outer(τ ).

R

R

R

(P, Q) that is tangent to the blue line in Figure 17. Let us denote a point where

By Remark 7, all pairs (P, Q) that have total variation τ must have a mode collapse region
(P, Q) meets
τ ]. Then,
outer:

R
the blue line by the point (1
for any such (P, Q), we can sandwich the region

α) in the 2D plane, parametrized by α

(P, Q) between two regions

τ, 1

−

−

−

α

R
[0, 1
∈
−
inner and
R

R

inner(α, τ )

R

⊆ R

outer(τ ) ,

⊆ R

(24)

ε

R

(P, Q)

31

which are illustrated in Figure 18. Now, we wish to understand how these inner and outer regions
evolve under product distributions. This endeavor is complicated by the fact that there can be
inﬁnite pairs of distributions that have the same region
(P, Q). However, note that if two pairs
(P (cid:48), Q(cid:48)), then their product distributions will
of distributions have the same region
((P (cid:48))m, (Q(cid:48))m). As such, we can focus on the simplest,
also have the same region
canonical pair of distributions, whose support set has the minimum cardinality over all pairs of
distributions with region

R
(P m, Qm) =

(P, Q) =

(P, Q).

R

R

R

R

For a given α, we denote the pairs of canonical distributions achieving these exact inner and
outer regions as in Figure 18:
let (Pinner(α), Qinner(α, τ )) be as deﬁned in (6) and (7), and let
(Pouter(τ ), Qouter(τ )) be deﬁned as below. Since the outer region has three sides (except for the
universal 45-degree line), we only need alphabet size of three to ﬁnd the canonical probability
distributions corresponding to the outer region. By the same reasoning, the inner region requires
only a binary alphabet. Precise probability mass functions on these discrete alphabets can be found
easily from the shape of the regions and the equivalence to the hypothesis testing region explained
in Section 4.3.

R

δ

δ

ε

ε

R

Figure 18: Canonical pairs of distributions corresponding to

inner(α, τ ) and

outer(τ ).

R

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (24) that for any (P, Q) there exists an α such that

(Pinner(α)m, Qinner(α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(25)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1−τ

dTV(Pinner(α)m, Qinner(α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .(26)

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1
is nonzero only on one of the pairs, which gives dTV(P m
τ )m. For the lower
bound, writing out the total variation gives L(τ, m) in (5). This ﬁnishes the proof of Theorem 3.

outer, Qm

outer) = 1

(1

−

−

−

32

5.2 Proof of Theorem 4

R
∈

(P, Q) meets the blue line by the point (1
[0, 1

In optimization (8), we consider only those pairs with (ε, δ)-mode collapse.
It is simple to see
that the outer bound does not change. We only need a new inner bound. Let us denote a point
α) in the 2D plane, parametrized
where
by α
ε)) for now, and treat the case
when α is larger separately, as the analyses are similar but require a diﬀerent canonical pair of
distributions (P, Q) for the inner bound. The additional constraint that (P, Q) has (ε, δ)-mode
collapse translates into a geometric constraint that we need to consider all regions
(P, Q) that
include the orange solid circle at point (ε, δ). Then, for any such (P, Q), we can sandwich the region

−
τ ]. We consider the case where α < 1

τ, 1
−
(τ δ/(δ

−
−

R

−

−

α

(P, Q) between two regions

inner1 and

outer:

R

R

R

inner1(ε, δ, α, τ )

R

(P, Q)

⊆ R

⊆ R

outer(τ ) ,

(27)

δ

Figure 19: For any pair (P, Q) with (ε, δ)-mode collapse, the corresponding region
sandwiched between

inner1(ε, δ, α, τ ) and

outer(τ ).

R

(P, Q) is

R

R

Let (Pinner1(δ, α), Qinner1(ε, α, τ )) deﬁned in (10) and (11), and (Pouter(τ ), Qouter(τ )) deﬁned in
Section 5.1 denote the pairs of canonical distributions achieving the inner and outer regions exactly
as shown in Figure 20. By the preservation of dominance under product distributions in Remark
11, it follows from the dominance in (27) that for any (P, Q) there exists an α such that

(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

(P m, Qm)

(Pouter(τ )m, Qouter(τ )m) .

(28)

R

⊆ R

⊆ R

Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

min
0≤α≤1− τ δ
δ−ε

dTV(Pinner1(δ, α)m, Qinner1(ε, δ, α, τ )m)

dTV(P m, Qm)

dTV(Pouter(τ )m, Qouter(τ )m) .

≤

≤

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
τ )m
power of those canonical pairs of distributions. For the upper bound, all mass except for (1

(29)

−

ε

33

δ

δ

ε

ε

Figure 20: Canonical pairs of distributions corresponding to

inner(ε, δ, τ, α) and

outer(τ ).

R

R

outer, Qm
is nonzero only on one of the pairs, which gives dTV(P m
bound, writing out the total variation gives L1(ε, δ, τ, m) in (9).

outer) = 1

(1

−

−

τ )m. For the lower

−

−

(τ δ/(δ

For α > 1

ε)), we need to consider a diﬀerent class of canonical distributions for the
inner2(α, τ ) and corresponding canonical distributions
inner region, shown below. The inner region
Pinner2(α) and Qinner2(α, τ ) deﬁned in (12) and (13) are shown below. We take the smaller one
between the total variation distance resulting from these two cases. Note that α
τ by
deﬁnition. This ﬁnishes the proof of Theorem 4.

R

≤

−

1

δ

ε

34

Figure 21: When α > 1
to

−
inner(ε, δ, τ, α) for the mode-collapsing scenario H1(ε, δ, τ ).

−

(τ δ/(δ

ε)), this shows a canonical pair of distributions corresponding

R

5.3 Proof of Theorem 5

When τ < δ
optimization of (14) reduces to that of (4) without any mode collapse constraints.

ε, all pairs (P, Q) with dTV(P, Q) = τ cannot have (ε, δ)-mode collapse, and the

−

≤

When δ + ε

1 and τ > (δ

(P, Q) can touch the 45-degree line
at τ as shown below, and the feasible set is empty. This follows from the fact that a triangle region
ε)/(δ + ε).
passing through both (ε, δ) and (1
Note that no (ε, δ) mode augmentation constraint translates into the region not including the

ε) will have a total variation distance of (δ

ε)/(δ + ε), no convex region

δ, 1

R

−

−

−

−

−

−

δ, 1

point (1
ε). We can see easily from Figure 22 that any total variation beyond that will
require violating either the no-mode-collapse constraint or the no-mode-augmentation constraint.
ε), the feasible set is also empty. These two can
Similarly, when δ + ε > 1 and τ > (δ
δ
be uniﬁed as τ > max

ε)/(δ + ε), (δ

δ
−
ε)/(2

ε)/(2

(δ

−

.

−
−

ε)
}

−

{

−
when ε + δ

−
1

≤

when ε + δ > 1

≤

1 and τ = (δ

τ )/2 : (1 + τ )/2 = ε : δ), a
Figure 22: When δ + ε
−
triangle mode collapse region that touches both points (ε, δ) and (1
ε) at two of its edges
also touches the 45-degree line with a τ shift at a vertex (left). When δ + ε > 1, the same
ε)). Hence, if
happens when τ = (δ
τ > max
, then the triangle region that does not include both
(δ
{
orange points cannot touch the blue 45-degree line.

τ )/2 : (1 + τ )/2 = (1

ε) (i.e. (1
δ

ε)/(δ + ε) (i.e. (1

ε)/(δ + ε), (δ

δ
−
ε)/(2

−
−

δ) : (1

ε)
}

ε)/(2

δ, 1

−

−

−

−

−

−

−

−

−

−

≤

Suppose δ + ε

1, and consider the intermediate regime when δ

ε)/(δ + ε).
In optimization (14), we consider only those pairs with no (ε, δ)-mode collapse or (ε, δ)-mode
augmentation. It is simple to see that the inner bound does not change from optimization in (4).
α(cid:48)) in the 2D
Let us denote a point where
R
−
plane, parametrized by α(cid:48)
(α(cid:48), τ ) deﬁned in Figure 18 works in this case also.
[0, 1
We only need a new outer bound.

(P, Q) meets the blue line by the point (1

τ ]. The

τ, 1

α(cid:48)

R

(δ

−

−

≤

≤

−

−

−

∈

ε

τ

We construct an outer bound region, according to the following rule. We ﬁt a hexagon where
one edge is the 45-degree line passing through the origin, one edge is the vertical axis, one edge
is the horizontal line passing through (1, 1), one edge is the 45-degree line with shift τ shown in
blue in Figure 23, and the remaining two edges include the two orange points, respectively, at (ε, δ)
and (1
(P, Q) satisfying the constraints in (14), there exists at least one
ε). For any
R
−
(P, Q). We parametrize the hexagon by α and β, where (α, τ + α)
such hexagon that includes
R
denotes the left-most point where the hexagon meets the blue line, and (1
β) denotes
the right-most point where the hexagon meets the blue line.

β, 1

δ, 1

−

−

−

−

τ

The additional constraint that (P, Q) has no (ε, δ)-mode collapse or (ε, δ)-mode augmentation
(P, Q) that does not
ε). Then, for any such (P, Q), we can

translates into a geometric constraint that we need to consider all regions
include the orange solid circle at point (ε, δ) and (1
sandwich the region

(P, Q) between two regions

δ, 1
−
−
inner and

outer1:

R

R

R

R

R

inner(α(cid:48), τ )

(P, Q)

⊆ R

⊆ R

outrer1(ε, δ, α, β, τ ) ,

(30)

35

where

inner(α, τ ) is deﬁned as in Figure 18.

R

δ

δ

ε

ε

Figure 23: For any pair (P, Q) with no (ε, δ)-mode collapse or no (ε, δ)-mode augmentation, the
corresponding region
outer1(ε, δ, α, β, τ ) (left). A
canonical pair of distributions corresponding to

outer1(ε, δ, α, β, τ ) (middle and right).

(P, Q) is sandwiched between

inner(α(cid:48), τ ) and

R

R

R

R

Let (Pinner(α(cid:48)), Qinner(α(cid:48), τ )) deﬁned in (6) and (7), and (Pouter1(ε, δ, α, β, τ ), Qouter1(ε, δ, α, β, τ ))
denote the pairs of canonical distributions achieving the inner and outer regions exactly as shown
in Figure 23.

By the preservation of dominance under product distributions in Remark 11, it follows from

the dominance in (30) that for any (P, Q) there exist α(cid:48), α, and β such that

(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

(P m, Qm)

(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .(31)

R
Due to the data processing inequality of mode collapse region in Remark 10, it follows that domi-
nance of region implies dominance of total variation distances:

⊆ R

⊆ R

min
δ−ε ≤α(cid:48)≤1− τ δ

ετ

δ−ε

dTV(Pinner(α(cid:48))m, Qinner(α(cid:48), τ )m)

dTV(P m, Qm)

≤
dTV(Pouter1(ε, δ, α, β, τ )m, Qouter1(ε, δ, α, β, τ )m) .

max

≤

α,β≥ ετ

δ−ε ,α+β≤1−τ

(32)

The RHS and LHS of the above inequalities can be completely characterized by taking the m-th
power of those canonical pairs of distributions, and then taking the respective minimum over α(cid:48)
and maximum over α and β. For the upper bound, this gives U1((cid:15), δ, τ, m) in (15), and for the
lower bound this gives L2(τ, m) in (18).

Now, suppose δ+ε > 1, and consider the intermediate regime when δ

ε

τ

≤
outer2(ε, δ, α, δ, τ ) as the role of (ε, δ) and (1

−

≤

We have a diﬀerent outer bound
switched. A similar analysis gives

R

(δ

ε)/(2
−
δ, 1

δ

ε).
−
−
ε) have

−

−

dTV(P m, Qm)

max

≤

α,β≥ (1−δ)τ

δ−ε ,α+β≤1−τ

dTV(Pouter2(ε, δ, α, β, τ )m, Qouter2(ε, δ, α, β, τ )m) ,

(33)

36

where the canonical distributions are shown in Figure 24 and deﬁned in (20) and (21). This gives
U2((cid:15), δ, τ, m) in (19). For the lower bound we only need to change the range of α we minimize over,
which gives L3(τ, m) in (22).

δ

ε

R

Figure 24: A canonical pair of distributions corresponding to

outer2(ε, δ, α, β, τ ).

6 Related work

The idea of packing arises naturally by revisiting the formulation of GANs, in a slightly diﬀerent
way from how GANs are commonly explained in the literature. Recall that a neural-network-based
generator Gw : Rd
Rd with a simple distribution (such as uniform over the
unit hypercube or Gaussian) to the desired target distribution P in target domain Rp. The target
n
distribution P is not known, but only observed via n i.i.d. samples
i=1. Training the weights
n
w of the generator Gw is of a fundamental interest: given
i=1, how do we train the generator
weights w such that the distribution of Gw(Z) is close to the (unknown) distribution P ?

Rp maps noise Z

Xi
{

Xi
{

→

∈

}

}

This question is aﬀected by two important properties of neural-network-based generators: (a)
evaluating exact likelihoods is diﬃcult, but sampling from the learned distribution is easy; and (b)
it is straightforward to evaluate the Jacobian matrix JG(Zj) of this vector-valued function with
respect to the weights w with back-propagation. This has led to a natural iterative strategy of
m
j=1), called a discriminator or
the following type: at each iteration t, choose a function D(
}
{
˜Xj (cid:44) G(Zj)
m
j=1 are
a critic, which measures how far (in distribution) the generated samples
}
Rp provides
n
i=1. The gradient of this function
from the target samples
local information about which direction each sample ˜Xj should be moved to in order for the set of
m
j=1 to be jointly closer to the target. This can be used to update the weights of the
samples
generator according to a standard gradient descent step:

m
j=1)
}

D(
{

Xj
{

Xi
{

{
˜Xj

˜Xj

˜Xj

∇

∈

}

}

w(t) = w(t−1)

˜Xj

∇

D(
{

}

˜Xj

m
j=1) JG(Zj) ,

αt

−

m
(cid:88)

j=1

(34)

where JG(Zj)

Rp×d is the Jacobian of the generator function Gw(

∈

) with respect to the weights
·

37

}

w evaluated at Zj, and αt is the step size. The main challenge is in designing the right function
˜Xj
m
j=1), to achieve the goal of training a generator that produces realistic samples.
D(
{
This framework, although presented in a diﬀerent language, was introduced in the seminal
paper of Goodfellow et al. in [19], where a breakthrough in training generative models is achieved
by introducing the concept of generative adversarial networks. A particularly innovative choice of
discriminator is proposed, based on (a) the intuition of two competing parties playing a minimax
game, and (b) on the successes of deep neural networks in training classiﬁers. Concretely, the
R with weights
proposed discriminator D(
θ. With the right choice of an objective function, this can be trained to provide an estimator of
the Jensen-Shannon divergence: dJS(P, Q) (cid:44) (1/2) dKL(P
(P + Q)/2).
This has the desired property of (approximately) measuring how close the samples generated from
distribution Gw(Z)

j=1) is implemented as a neural network Dθ : Rp
m

Q are to the real distribution P . Precisely, [19] proposed using

(P + Q)/2) + (1/2) dKL(Q
(cid:107)
(cid:107)

˜Xj
{

→

}

∼

D(
{

˜Xj

m
j=1) =
}

log(1

Dθ∗( ˜Xj)) ,

−

1
m

m
(cid:88)

j=1

where the neural network weight θ∗ is the optimal solution trained on the target samples
and additional fresh generated samples
choice of the objective function is the standard cross entropy:

n
i=1
m+n
j=m+1, typically of the same size n. The proposed

Xi
{

˜Xj

}

{

}

θ∗

arg max

θ

∈

1
n

n
(cid:88)

i=1

log(Dθ(Xi)) +

1
n

m+n
(cid:88)

j=m+1

log(1

Dθ( ˜Xj)) .

−

(35)

(36)

˜Xj
m
j=1) is decomposed as a summation over m
Notice that in the formulation of (35), D(
{
functions, each involving only a single sample. Such a decomposition is not necessary, and leads
m
j=1)
to a natural question: is there any gain in training GANs with general discriminator D(
involving multiple samples jointly? We answer this question in the aﬃrmative, with both numerical
experiments showing signiﬁcant gain in mitigating mode collapse and theoretical analyses showing
a fundamental connection between using samples jointly and mode collapse.

˜Xj
{

}

}

We note that there is a family of GANs whose discriminators take pairs of images [65, 37, 5],
albeit for very diﬀerent reasons. These discriminators perform two-sample tests based on maximum
mean discrepancy (MMD) by ﬁnding a kernel function, which naturally takes a pair of images as
input. It is unknown if MMD-based GANs help in mitigating mode collapse, either theoretically
or empirically. We believe this question is outside the scope of this paper, and poses an interesting
future research direction. In the remainder of this section, we describe related work in this space,
and how it relates to our packed interpretation of GANs.

6.1 Challenges in training GANs

The literature on GANs has documented three primary, closely-related challenges: (i) they are
unstable to train, (ii) they are challenging to evaluate, and (iii) they exhibit mode collapse (more
broadly, they do not generalize). Much research has emerged in recent years addressing these
challenges. Our work explicitly addresses the challenge (iii). We give a brief overview of the
related work on each of these challenges, and its relation to our work.

38

Training instability. GANs’ alternating generator and discriminator updates can lead to sig-
niﬁcant instability during training. This instability manifests itself as oscillating values of the loss
function that exceed variations caused by minibatch processing [18]. Such variability makes it chal-
lenging to evaluate when training has converged, let alone which model one should choose among
those obtained throughout the training process. This phenomenon is believed to arise because
in practice, the learned distribution and the true distribution lie on disjoint manifolds in a high-
dimensional space [1]. As such, the discriminator can often learn to perfectly distinguish generated
and real samples. On real data, the discriminator (correctly) learns to output ‘1’, and vice versa
on generated data. This is believed in GAN literature to cause the generator loss function to have
a negligible gradient, leading to unstable parameter updates. In our work, we do not explicitly
tackle instability; our theoretical results assume an optimal discriminator and inﬁnite data sam-
ples. However, a better understanding of instability is of both practical and theoretical interest,
albeit orthogonal to the question of packing.

Fundamentally, it is not well-understood why training instability occurs. In [38], Li et al. take
a step towards theoretically understanding GAN training dynamics, suggesting that optimization
techniques are partially responsible for instability.
[38] shows that for a toy distribution model
(i.e., a Gaussian mixture), GANs using optimal discriminators are able to learn the underlying
distribution, whereas ﬁrst-order optimization methods exhibit oscillatory dynamics. Empirically,
this observation seems to hold even with improved GAN optimization techniques, such as unrolled
GANs [46], despite recent work showing that gradient-descent-based optimization of GANs is locally
stable [50].

Building on this intuition, several papers have proposed methods for mitigating instability,
generally taking one of two approaches. The ﬁrst relies on changing the optimization objective
function. Regular GANs optimize the Jensen-Shannon divergence between the true distribution
and the learned one [19]. Jensen-Shannon divergence can behave poorly in regions where the two
distributions have nonoverlapping support [1], so other works have proposed alternative distance
metrics, including Wasserstein distance [1], f-divergences [53, 52], asymmetric KL divergences [51],
kernel maximum mean discrepancy for two-sample testing [37], and neural network distance [2].
In practice, challenges can arise from trying to approximate these distance metrics; for instance,
[1] uses the Kantorovich-Rubinstein dual to compute the Wasserstein-1 distance, which requires
optimization over the set of 1-Lipschitz functions. This constraint is approximated in [1] by clipping
the critic weights, which can lead to artiﬁcially stunted critic functions—a fact that was later tackled
by using gradient regularization in WGAN-GP [20]. In a similar vein, [39] altered the objective
function by transforming the discriminator optimization into its dual form, which improves stability
as we have only minimizations in both the outer and inner optimizations.

Another method of changing the objective function is to introduce regularization. In a sense, the
fact that generators and discriminators are not trained to completion in practice is a simple form
of regularization [19]. Recently, other innovative choices for regularizations have been proposed,
including weight clipping [1], gradient regularization [20, 45, 50], Tikhonov regularizer for training-
with-noise [58], adding noise to the gradient [21], and spectral-norm regularization [49].

A conceptually diﬀerent approach for improving training stability is to propose architectural
changes that empirically improve training stability. For example, Salimans et al. proposed a num-
ber of heuristic tricks for improving the training of GANs, including minibatch discrimination,
reference batch normalization, and feature mapping [60]. Our work most closely resembles mini-
batch discrimination from [60], which also inputs multiple images to the discriminator. We provide

39

a detailed comparison between this proposed minibatch discriminator and ours later in this section.

Evaluation Techniques. Generative models (including GANs) are notoriously diﬃcult to eval-
uate. Ideally, one would measure the distance between the true distribution and the learned one.
However, typical generative models can only produce samples from a learned distribution, and on
real datasets, the true distribution is often unknown. As such, prior work on GANs has used a
number of heuristic evaluation techniques.

The most common evaluation technique is visual inspection. Many papers produce a collection
of generated images, and compare them to the underlying dataset [19, 55, 18], or ask annotators to
evaluate the realism of generated images [60]. This approach can be augmented by interpolating
between two points in the latent space and illustrating that the GAN produces a semantically
meaningful interpolation between the generated images [15]. This approach is useful to the extent
that some GANs produce visually unrealistic images, but it is expensive, unreliable, and it does
not help identify generalization problems [66]. The most common attempt to estimate the visual
quality of an image is the inception score, which describes how precisely a classiﬁer can classify
generated images, thereby implicitly capturing some measure of image quality [60]; this has become
a de facto evaluation technique for GANs trained on realistic data [60, 17, 20, 49].

Another common approach involves estimating the likelihood of a holdout set of test data under
the learned distributions. The learned distribution is estimated using a standard kernel density
estimator (KDE)[72]. However, KDEs are known to have poor performance in high dimensions,
and in practice, the error in KDE is often larger than the distance between real and learned
distributions [72]. Hence, it is unclear how meaningful such estimates are. One proposed approach
uses annealed importance sampling (AIS) instead of KDE to estimate log-likelihoods [72], with
signiﬁcantly increased accuracy levels.

An increasing number of papers are using classiﬁcation-based evaluation metrics. Naively, GANs
trained on labelled datasets can pass their outputs through a pre-trained classiﬁer. The classiﬁer
outputs indicate which modes are represented in the generated samples [15, 60, 63]. This is useful
for measuring the ﬁrst type of mode collapse (missing modes), but it cannot reveal the second type
(partial collapse within a mode). To provide a more nuanced view of the problem, [61] recently
proposed a more general classiﬁcation-based evaluation metric, in which they train a classiﬁer on
generated data and real data, and observe diﬀerences in classiﬁer performance on a holdout set of
test data. While this approach does not directly evaluate partial mode collapse, it is more likely to
implicitly measure it by producing weaker classiﬁers when trained on generated data. On datasets
that are not labelled, some papers have relied on human classiﬁcation, asking human annotators
to ‘discriminate’ whether an image is real or generated [13].

In a recent work in [57], it was empirically shown that Gaussian mixture models (GMM) can also
generates realistic samples if trained eﬃciently, although the images are not as sharp as GAN gen-
erated samples. However, trained GMMs do not suﬀer from mode collapse, capture the underlying
distribution more faithfully, and provide interpretable representation of the statistical structures.
One of the main contribution is a new evaluation technique. The domain of the samples is parti-
tioned into bins in a data dependent manner on the training data. The histograms of the training
data and the generated data on the bins are compared to give a measure on how close those two
distributions are.

40

Mode Collapse/Generalization. Mode collapse collectively refer to the phenomenon of lack
of divergence in the generated samples. This includes trained generators assigning low probability
mass to signiﬁcant subsets of the data distribution’s support, and hence losing some modes. This
also includes the phenomenon of trained generators mapping two latent vectors that are far apart
to the same or similar data samples. Mode collapse is a byproduct of poor generalization—i.e., the
generator does not learn the true data distribution; this phenomenon is a topic of recent interest
[2, 4]. Prior work has observed two types of mode collapse: entire modes from the input data are
missing from the generated data (e.g., in a dataset of animal pictures, lizards never appear), or
the generator only creates images within a subset of a particular mode (e.g., lizards appear, but
only lizards that are a particular shade of green) [18, 68, 4, 14, 46, 56]. These phenomena are not
well-understood, but a number of explanatory hypotheses have been proposed:

1. The objective function is ill-suited to the problem [1], potentially causing distributions that

exhibit mode collapse to be local minima in the optimization objective function.

2. Weak discriminators cannot detect mode collapse, either due to low capacity or a poorly-

chosen architecture [46, 60, 2, 38].

3. The maximin solution to the GAN game is not the same as the minimax solution [18].

The impact and interactions of these hypotheses are not well-understood, but we show in this
paper that a packed discriminator can signiﬁcantly reduce mode collapse, both theoretically and in
practice. In particular, the method of packing is simple, and leads to clean theoretical analyses. We
compare the proposed approach of packing to three main approaches in the literature for mitigating
mode collapse:

(1) Joint Architectures. The most common approach to address mode collapse involves an
encoder-decoder architecture, in which the GAN learns an encoding G−1(X) from the data space
to a lower-dimensional latent space, on top of the usual decoding G(Z) from the latent space to
the data space. Examples include bidirectional GANs [15], adversarially learned inference (ALI)
[14], and VEEGAN [63]. These joint architectures feed both the latent and the high-dimensional
for the generated data and
representation of each data point into the discriminator:
(G−1(Xi), Xi)
In contrast, classical GANs use only the decoder, and feed
{
}
only high-dimensional representations into the discriminator. Empirically, training these compo-
nents jointly seems to improve the GAN performance overall, while also producing useful feature
vectors that can be fed into downstream tasks like classiﬁcation. Nonetheless, we ﬁnd experimen-
tally that using the same generator architectures and discriminator architectures, packing captures
more modes than these joint architectures, with signiﬁcantly less overhead in the architecture and
computation. Indeed, recent work shows theoretically that encoder-decoder architectures may be
fundamentally unable to prevent mode collapse [3].

(Zi, G(Zi))
}

for the real data.

{

(2) Augmented Discriminators. Several papers have observed that discriminators lose discrimi-
native power by observing only one (unlabeled) data sample at a time [18, 60]. A natural solution
for labelled datasets is to provide the discriminator with image labels. This has been found to work
well in practice [9], though it does not generalize to unlabelled data. A more general technique is
minibatch discrimination [60]. Like our proposed packing architecture, minibatch discrimination
feeds an array of data samples to the discriminator. However, unlike packing, minibatch discrimina-
tion proposed in [60] is complicated both computationally and conceptually, and highly sensitive to
the delicate hyper-parameter choices. At a high level, the main idea in minibatch discrimination is

41

to give the discriminator some side information coming from a minibatch, and use it together with
each of the individual examples in the minibatch to classify each sample. The proposed complex
architecture to achieve this goal is as follows.

Let f (Xi) denote a vector of (latent) features for input Xi produced by some intermediate
layer in the discriminator. A tensor T is learned such that the tensor product T [I, I, f (Xi)] gives
a latent matrix representation Mi of the input Xi. The notation T [I, I, f (Xi)] indicates a tensor
to matrix linear mapping, where you take the third dimension and apply a vector f (Xi). The
L1 distance across the rows of the Mi’s are computed for each pair of latent matrices in the
minibatch to give a measure cb(Xi, Xj) = exp(
L1)). This minibatch layer outputs
−
o(Xi)b = (cid:80)n
j=1 cb(Xi, Xj). This is concatenated with the original latent feature f (Xi) to be passed
through the upper layers of the discriminator architecture. While the two approaches start from
a similar intuition that batching or packing multiple samples gives stronger discriminator, the
proposed architectures are completely diﬀerent. PacGAN is easier to implement, quantitatively
shows strong performance in experiments, and is principled: our theoretical analysis rigorously
shows that packing is a principled way to use multiple samples at the discriminator.

Mj,b

Mi,b

−(cid:107)

(cid:107)

More recently, a breakthrough in training GANs was achieved in [29]. By progressively training
GANs of increasing resolutions, the authors were able to train, for the ﬁrst time, on high quality
CelebA datasets with size 1024
1024. This produces by far the most realistic looking faces. One
of the main innovations in the paper is to compute a new feature “minibatch std” that intuitively
captures how diverse the minibatch is, and to append it to the rest of your features for the discrim-
inator to see. This is a much simpler way of capturing minibatch statistics, that resolves the issue
of sensitivity to hyperparameter tuning of the original minibatch idea of [60].

×

(3) Optimization-based solutions. Another potential source of mode collapse is imperfect op-
timization algorithms. Exact optimization of the GAN minimax objective function is computa-
tionally intractable, so GANs typically use iterative parameter updates between the generator and
discriminator: for instance, we update the generator parameters through k1 gradient descent steps,
followed by k2 discriminator parameter updates. Recent work has studied the eﬀects of this com-
promise, showing that iterative updates can lead to non-convergence in certain settings [38]—a
worse problem than mode collapse. Unrolled GANs [46] propose a middle ground, in which the
optimization takes k (usually ﬁve) gradient steps into account when computing gradients. These
unrolled gradients aﬀect the generator parameter updates by better predicting how the discrim-
inator will respond. This approach is conjectured to spread out the generated samples, making
it harder for the discriminator to distinguish real and generated data. The primary drawback of
this approach is computational cost; packing achieves better empirical performance with smaller
computational overhead and training complexity.

6.1.1 Theoretical Understanding of Generalization

In parallel with eﬀorts to reduce mode collapse, there has been work on fundamentally understand-
ing the generalization properties of GANs. Our work is implicitly related to generalization in that
packing allows GAN training to converge to distributions that are closer to the true underlying dis-
tribution, in the sense of exhibiting less ((cid:15), δ)-mode collapse. However, we do not explicitly analyze
the baseline generalization properties of existing GANs. Arora et al. made a breakthrough on this
front in [2]. Recall that typical assumption in theoretical analyses are: (a) inﬁnite samples, which
allow us to work with population expectations, and (b) inﬁnite expressive power at the discrimina-

42

tor. [2] addresses both of these assumptions in the following way: ﬁrst, to show that existing losses
(such as Wasserstein loss [1] and cross entropy loss [19]) do not generalize, [2] relaxes both (a) and
(b). Under this quite general setting, a GAN is trained on these typical choices of losses with a
target distribution of a spherical Gaussian. Then, using a discriminator with enough expressive
power, the training loss will converge to its maximum, which is proven to be strictly bounded away
from zero for this Gaussian example. The implication of this analysis is that a perfect generator
with inﬁnite expressive power still will not be able to generate the target Gaussian distribution, as
it is penalized severely in the empirical loss deﬁned by the training samples. This observation leads
to the second contribution of the paper, where a proper distance is deﬁned, called neural network
divergence, which takes into account the ﬁnite expressive power of neural networks. It is shown
that the neural network divergence has much better generalization properties than Jensen-Shannon
divergence or Wasserstein distance. This implies that this new neural network distance can better
capture how the GAN performs for a speciﬁc choice of loss function.

Liu et al. study the eﬀects of discriminator family with ﬁnite expressive power and the distri-
butional convergence properties of various choices of the loss functions in [40]. It is shown that
the restricted expressive power of the discriminator (including the popular neural-network-based
discriminators) have the eﬀect of encouraging moment-matching conditions to be satisﬁed. Fur-
ther, it is shown that for a broad class of loss functions, convergence in the loss function implies
distributional weak convergence, which generalizes known convergence results of [62, 1]. This work
does not consider the ﬁnite-data regime of [2]. A more ﬁne-grained theoretical characterization of
the distribution induced by the optimal generator is provided in [41]. This is achieved by analyzing
a restricted version of f-GAN and showing that the learned distribution is a solution to a mixture
of maximum likelihood and method of moments.

Finally, Feizi et al. address the eﬀect of generator and discriminator architectures for a simpler
case of learning a single Gaussian distribution in [16]. By connecting the loss function to supervised
learning, the generalization performance of a simple LQG-GAN is analyzed where the generator
is linear, the loss is quadratic, and the data is coming from a Gaussian distribution. An interest-
ing connection between principal component analysis and the optimal generator of this particular
GAN is made. The sample complexity of this problem is shown to be linear in the dimension, if
the discriminator is constrained to be quadratic, where as for general discriminators the sample
complexity can be much larger.

7 Discussion

In this work, we propose a packing framework that theoretically and empirically mitigates mode
collapse with low overhead. Our analysis leads to several interesting open questions, including how
to apply these analysis techniques to more general classes of loss functions such as Jensen-Shannon
divergence and Wasserstein distances. This will complete the understanding of the superiority
of our approach observed in experiments with JS divergence in Section 3 and with Wasserstein
distance in Section 3.4. Another important question is what packing architecture to use. For
instance, a framework that provides permutation invariance may give better results such as graph
neural networks [11, 67, 33] or deep sets [74].

43

Acknowledgement

The authors would like to thank Sreeram Kannan and Alex Dimakis for the initial discussions that
lead to the inception of the packing idea, and Vyas Sekar for valuable discussions about GANs. We
thank Srivastava Akash, Luke Metz, Tu Nguyen, and Yingyu Liang for providing insights and/or
the implementation details on their proposed architectures for VEEGAN [63], Unrolled GAN [46],
D2GAN [51], and MIX+GAN [2].

This work is supported by NSF awards CNS-1527754, CCF-1553452, and CCF-1705007, and
RI-1815535 and Google Faculty Research Award. This work used the Extreme Science and En-
gineering Discovery Environment (XSEDE), which is supported by National Science Foundation
grant number OCI-1053575. Speciﬁcally, it used the Bridges system, which is supported by NSF
award number ACI-1445606, at the Pittsburgh Supercomputing Center (PSC). This work is par-
tially supported by the generous research credits on AWS cloud computing resources from Amazon.

References

arXiv:1701.07875, 2017.

[1] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. arXiv preprint

[2] Sanjeev Arora, Rong Ge, Yingyu Liang, Tengyu Ma, and Yi Zhang. Generalization and
equilibrium in generative adversarial nets (GANs). arXiv preprint arXiv:1703.00573, 2017.

[3] Sanjeev Arora, Andrej Risteski, and Yi Zhang. Theoretical limitations of encoder-decoder gan

architectures. arXiv preprint arXiv:1711.02651, 2017.

[4] Sanjeev Arora and Yi Zhang. Do gans actually learn the distribution? an empirical study.

arXiv preprint arXiv:1706.08224, 2017.

[5] Miko(cid:32)laj Bi´nkowski, Dougal J Sutherland, Michael Arbel, and Arthur Gretton. Demystifying

mmd gans. arXiv preprint arXiv:1801.01401, 2018.

[6] David Blackwell. Equivalent comparisons of experiments. The Annals of Mathematical Statis-

tics, 24(2):265–272, 1953.

[7] Ashish Bora, Ajil Jalal, Eric Price, and Alexandros G Dimakis. Compressed sensing using

generative models. arXiv preprint arXiv:1703.03208, 2017.

[8] Ashish Bora, Eric Price, and Alexandros G. Dimakis. Ambientgan: Generative models from
lossy measurements. In International Conference on Learning Representations (ICLR), 2018.

[9] Tong Che, Yanran Li, Athul Paul Jacob, Yoshua Bengio, and Wenjie Li. Mode regularized

generative adversarial networks. arXiv preprint arXiv:1612.02136, 2016.

[10] Thomas M Cover and A Thomas. Determinant inequalities via information theory. SIAM

journal on Matrix Analysis and Applications, 9(3):384–392, 1988.

[11] Micha¨el Deﬀerrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks
on graphs with fast localized spectral ﬁltering. In Advances in Neural Information Processing
Systems, pages 3844–3852, 2016.

44

[12] Amir Dembo, Thomas M Cover, and Joy A Thomas. Information theoretic inequalities. In-

formation Theory, IEEE Transactions on, 37(6):1501–1518, 1991.

[13] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep generative image models using
In Advances in neural information processing

a laplacian pyramid of adversarial networks.
systems, pages 1486–1494, 2015.

[14] Jeﬀ Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial feature learning. arXiv

preprint arXiv:1605.09782, 2016.

[15] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier
arXiv preprint

Adversarially learned inference.

Mastropietro, and Aaron Courville.
arXiv:1606.00704, 2016.

[16] Soheil Feizi, Changho Suh, Fei Xia, and David Tse. Understanding gans: the lqg setting.

arXiv preprint arXiv:1710.10793, 2017.

[17] Chelsea Finn, Paul Christiano, Pieter Abbeel, and Sergey Levine. A connection between gen-
erative adversarial networks, inverse reinforcement learning, and energy-based models. arXiv
preprint arXiv:1611.03852, 2016.

[18] Ian Goodfellow. Nips 2016 tutorial: Generative adversarial networks.

arXiv preprint

arXiv:1701.00160, 2016.

[19] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil
In Advances in

Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets.
neural information processing systems, pages 2672–2680, 2014.

[20] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville.

Improved training of Wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.

[21] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochre-
iter. Gans trained by a two time-scale update rule converge to a local nash equilibrium. In
Advances in Neural Information Processing Systems 30, pages 6629–6640. 2017.

[22] Geoﬀrey Hinton. A practical guide to training restricted boltzmann machines. Momentum,

9(1):926, 2010.

[23] Andrew Ilyas, Ajil Jalal, Eirini Asteri, Constantinos Daskalakis, and Alexandros G Dimakis.
The robust manifold defense: Adversarial training using generative models. arXiv preprint
arXiv:1712.09196, 2017.

[24] Sergey Ioﬀe and Christian Szegedy. Batch normalization: Accelerating deep network training
by reducing internal covariate shift. In International Conference on Machine Learning, pages
448–456, 2015.

[25] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation

with conditional adversarial networks. arXiv preprint arXiv:1611.07004, 2016.

45

[26] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Extremal mechanisms for local diﬀeren-
tial privacy. In Advances in Neural Information Processing Systems (NIPS), pages 2879–2887,
2014.

[27] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. Secure multi-party diﬀerential privacy.

In Advances in Neural Information Processing Systems (NIPS), 2015.

[28] Peter Kairouz, Sewoong Oh, and Pramod Viswanath. The composition theorem for diﬀerential

privacy. IEEE Transactions on Information Theory, 63(6):4037–4049, June 2017.

[29] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen. Progressive growing of GANs

for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196, 2017.

[30] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

[31] Diederik P Kingma and Prafulla Dhariwal. Glow: Generative ﬂow with invertible 1x1 convo-

lutions. arXiv preprint arXiv:1807.03039, 2018.

[32] Diederik P Kingma and Max Welling. Auto-encoding variational bayes.

arXiv preprint

arXiv:1312.6114, 2013.

[33] Thomas N Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907, 2016.

[34] Alex Krizhevsky and Geoﬀrey Hinton. Learning multiple layers of features from tiny images.

[35] Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/,

2009.

1998.

[36] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Ale-
jandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, and Zehan Wang. Photo-
realistic single image super-resolution using a generative adversarial network. arXiv preprint
arXiv:1609.04802, 2016.

[37] Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnabas Poczos. Mmd
In Advances in Neural

gan: Towards deeper understanding of moment matching network.
Information Processing Systems 30, pages 2200–2210. 2017.

[38] Jerry Li, Aleksander Madry, John Peebles, and Ludwig Schmidt. Towards understanding the

dynamics of generative adversarial networks. arXiv preprint arXiv:1706.09884, 2017.

[39] Yujia Li, Alexander Schwing, Kuan-Chieh Wang, and Richard Zemel. Dualing gans. In Ad-

vances in Neural Information Processing Systems 30, pages 5611–5621. 2017.

[40] Shuang Liu, Olivier Bousquet, and Kamalika Chaudhuri. Approximation and convergence

properties of generative adversarial learning. arXiv preprint arXiv:1705.08991, 2017.

[41] Shuang Liu and Kamalika Chaudhuri. The inductive bias of restricted f-gans. arXiv preprint

arXiv:1809.04542, 2018.

46

[42] Tie Liu and Pramod Viswanath. An extremal

inequality motivated by multiterminal
information-theoretic problems. Information Theory, IEEE Transactions on, 53(5):1839–1851,
2007.

[43] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in
the wild. In Proceedings of the IEEE International Conference on Computer Vision, pages
3730–3738, 2015.

[44] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the

wild. In Proceedings of International Conference on Computer Vision (ICCV), 2015.

[45] Lars Mescheder, Sebastian Nowozin, and Andreas Geiger. The numerics of gans. In Advances

in Neural Information Processing Systems 30, pages 1823–1833. 2017.

[46] Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. arXiv preprint arXiv:1611.02163, 2016.

[47] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeﬀ Dean. Distributed repre-
sentations of words and phrases and their compositionality. In Advances in neural information
processing systems, pages 3111–3119, 2013.

[48] Kyle Mills and Isaac Tamblyn. Phase space sampling and operator conﬁdence with generative

adversarial networks. arXiv preprint arXiv:1710.08053, 2017.

[49] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normaliza-
tion for generative adversarial networks. In International Conference on Learning Represen-
tations (ICLR), 2018.

[50] Vaishnavh Nagarajan and J. Zico Kolter. Gradient descent gan optimization is locally stable. In
I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
editors, Advances in Neural Information Processing Systems 30, pages 5591–5600. 2017.

[51] Tu Nguyen, Trung Le, Hung Vu, and Dinh Phung. Dual discriminator generative adversarial

nets. In Advances in Neural Information Processing Systems, pages 2667–2677, 2017.

[52] Richard Nock, Zac Cranko, Aditya K Menon, Lizhen Qu, and Robert C Williamson. f-gans in
an information geometric nutshell. In Advances in Neural Information Processing Systems 30,
pages 456–464. 2017.

[53] Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural sam-
plers using variational divergence minimization. In Advances in Neural Information Processing
Systems, pages 271–279, 2016.

[54] Nicholas A Nystrom, Michael J Levine, Ralph Z Roskies, and J Scott. Bridges: a uniquely ﬂex-
ible hpc resource for new communities and data analytics. In Proceedings of the 2015 XSEDE
Conference: Scientiﬁc Advancements Enabled by Enhanced Cyberinfrastructure, page 30. ACM,
2015.

[55] Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with

deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.

47

[56] Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak
Lee. Generative adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016.

[57] Eitan Richardson and Yair Weiss. On gans and gmms. arXiv preprint arXiv:1805.12462, 2018.

[58] Kevin Roth, Aurelien Lucchi, Sebastian Nowozin, and Thomas Hofmann. Stabilizing training
of generative adversarial networks through regularization. In Advances in Neural Information
Processing Systems, pages 2015–2025, 2017.

[59] Yunus Saatci and Andrew Wilson. Bayesian gans. In Advances in Neural Information Pro-

cessing Systems, pages 3624–3633, 2017.

[60] Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.
Improved techniques for training gans. In Advances in Neural Information Processing Systems,
pages 2234–2242, 2016.

[61] Shibani Santurkar, Ludwig Schmidt, and Aleksander Madry. A classiﬁcation-based perspective

on GAN distributions. arXiv preprint arXiv:1711.00970, 2017.

[62] Bharath K Sriperumbudur, Arthur Gretton, Kenji Fukumizu, Bernhard Sch¨olkopf, and
Gert RG Lanckriet. Hilbert space embeddings and metrics on probability measures. Jour-
nal of Machine Learning Research, 11(Apr):1517–1561, 2010.

[63] Akash Srivastava, Lazar Valkov, Chris Russell, Michael Gutmann, and Charles Sutton. Vee-
gan: Reducing mode collapse in gans using implicit variational learning. arXiv preprint
arXiv:1705.07761, 2017.

[64] AJ Stam. Some inequalities satisﬁed by the quantities of information of ﬁsher and shannon.

Information and Control, 2(2):101–112, 1959.

[65] Dougal J Sutherland, Hsiao-Yu Tung, Heiko Strathmann, Soumyajit De, Aaditya Ramdas,
Alex Smola, and Arthur Gretton. Generative models and model criticism via optimized max-
imum mean discrepancy. arXiv preprint arXiv:1611.04488, 2016.

[66] Lucas Theis, A¨aron van den Oord, and Matthias Bethge. A note on the evaluation of generative

models. arXiv preprint arXiv:1511.01844, 2015.

[67] Kiran K Thekumparampil, Chong Wang, Sewoong Oh, and Li-Jia Li. Attention-based graph

neural network for semi-supervised learning. arXiv preprint arXiv:1803.03735, 2018.

[68] Ilya Tolstikhin, Sylvain Gelly, Olivier Bousquet, Carl-Johann Simon-Gabriel, and Bernhard
Sch¨olkopf. Adagan: Boosting generative models. arXiv preprint arXiv:1701.02386, 2017.

[69] John Towns, Timothy Cockerill, Maytal Dahan, Ian Foster, Kelly Gaither, Andrew Grimshaw,
Victor Hazlewood, Scott Lathrop, Dave Lifka, Gregory D Peterson, et al. Xsede: accelerating
scientiﬁc discovery. Computing in Science & Engineering, 16(5):62–74, 2014.

[70] Sergio Verd´u and Dongning Guo. A simple proof of the entropy-power inequality.

IEEE

Transactions on Information Theory, 52(5):2165–2166, 2006.

48

[71] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Generating videos with scene dy-
namics. In Advances in Neural Information Processing Systems 29, pages 613–621. 2016.

[72] Yuhuai Wu, Yuri Burda, Ruslan Salakhutdinov, and Roger Grosse. On the quantitative analysis

of decoder-based generative models. arXiv preprint arXiv:1611.04273, 2016.

[73] Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial

nets with policy gradient. In AAAI, pages 2852–2858, 2017.

[74] Manzil Zaheer, Satwik Kottur, Siamak Ravanbakhsh, Barnabas Poczos, Ruslan R Salakhut-
In Advances in Neural Information Processing

dinov, and Alexander J Smola. Deep sets.
Systems, pages 3391–3401, 2017.

[75] Ram Zamir. A proof of the ﬁsher information inequality via a data processing argument.

Information Theory, IEEE Transactions on, 44(3):1246–1250, 1998.

49

