Generating Narrative Text in a Switching Dynamical System

Noah Weber 3,1, Leena Shekhar 1∗, Heeyoung Kwon1
Niranjan Balasubramanian1, Nathanael Chambers 2
1Stony Brook University
{lshekhar,heekwon,niranjan}@cs.stonybrook.edu
2United States Naval Academy
nchamber@usna.edu
3Johns Hopkins University
nweber6@jhu.edu

Abstract

Early work on narrative modeling used explicit
plans and goals to generate stories, but the lan-
guage generation itself was restricted and in-
ﬂexible. Modern methods use language mod-
els for more robust generation, but often lack
an explicit representation of the scaffolding
and dynamics that guide a coherent narrative.
This paper introduces a new model that inte-
grates explicit narrative structure with neural
language models, formalizing narrative model-
ing as a Switching Linear Dynamical System
(SLDS). A SLDS is a dynamical system in
which the latent dynamics of the system (i.e.
how the state vector transforms over time) is
controlled by top-level discrete switching vari-
ables. The switching variables represent nar-
rative structure (e.g., sentiment or discourse
states), while the latent state vector encodes
information on the current state of the narra-
tive. This probabilistic formulation allows us
to control generation, and can be learned in
a semi-supervised fashion using both labeled
and unlabeled data. Additionally, we derive a
Gibbs sampler for our model that can “ﬁll in”
arbitrary parts of the narrative, guided by the
switching variables. Our ﬁlled-in (English lan-
guage) narratives outperform several baselines
on both automatic and human evaluations.

1

Introduction

A narrative is a textualized sequence of events
that serves as a coherent outline for an actual
story (Prince, 2003). Effective narratives are typ-
ically built on top of higher level narrative scaf-
folds1 which specify at an abstract level how the
story should evolve along different dimensions.
Examples of these scaffolds include descriptions
of the emotional trajectory of a story (Vonnegut,

∗Author now at Microsoft
1We use the term scaffold as an umbrella term to cover

many types of plans and structures that underlie stories.

Tom didn’t know why his internet speed was so slow.

Tom wasn’t sure what to do with his computer.

He thought he would ﬁx it himself.

Tom was surprisingly good.

Tom was happy to be surﬁng the internet again

Table 1: A sample ﬁlled in narrative generated by our
SLDS model given the ﬁrst and last sentences as input
(grayed out), the middle 3 sentences are imputed by our
model (bold).

1981; Reagan et al., 2016), the goals of characters
throughout the story (Meehan, 1977; Turner, 1993),
or the abstract types of events that may occur (Mar-
tin et al., 2018). The parts of a scaffold are generic,
and can be reused across stories.

To be better utilized in creating or describing a
particular instance of a story, each element in the
scaffold should be associated with a description
of how it changes some property of the particular
story state (e.g, how to transition a story state from
positive to negative sentiment). We refer to these
transitions as narrative dynamics.

Prior work on automatic narrative generation has
a rich history of modeling both narrative scaffolds
and narrative dynamics (Meehan, 1977; Lebowitz,
1985; Turner, 1993; Riedl and Young, 2006, 2010a).
The modeling of both narrative scaffold and dy-
namics often imbued these systems with a greater
degree of control for the user in generating sto-
ries, allowing users to ﬂexibly specify desired out-
comes or plot points (or more generally, the state
of the narrative) that should be achieved at cer-
tain sections of the story. Though successful in
this regard, this success has only been realized in
closed domains, where the narrative scaffolds can
be speciﬁed in a limited ontology and the dynam-
ics operations can be written by hand (such as e.g.
the action schemata of Riedl and Young (2010a)).

0
2
0
2
 
r
p
A
 
8
 
 
]
L
C
.
s
c
[
 
 
1
v
2
6
7
3
0
.
4
0
0
2
:
v
i
X
r
a

Neural generation has since helped scale to open
domains (Roemmele and Gordon, 2015; Khalifa
et al., 2017) but not with the same level of con-
trol over the narrative. Several recent works have
looked at adding the narrative scaffolding compo-
nent back into neural text generating systems (Fan
et al., 2018; Martin et al., 2018; Yao et al., 2019;
Xu et al., 2018). These systems however still do
not utilize an explicit model of narrative dynamics,
and are thus restricted in the controllability aspect.

Building controllable methods with modern lan-
guage generation requires mechanisms that can
meet the targets set by the narrative scaffold as well
as the constraints on the narrative dynamics. For
instance, suppose we want to generate stories con-
strained to meet speciﬁed goals, such as being con-
strained to start and end with speciﬁed sentences
(such as those given in the narrative in Table 1).
While conditioning on a scaffold alone can help
generate intervening sentences, it does not guaran-
tee that these intervening sentences transition in
a natural way that cohesively leads into the last
sentence. Modeling the dynamics of a narrative
separately may allow the system to infer an opti-
mal path through the narrative in order to reach
the speciﬁed goal. This is analogous to how plan-
based generation systems used search algorithms
over narrative actions to generate a feasible path to
a goal (Riedl and Young, 2010a).

In this work, we show how the insight of model-
ing the structure of a narrative along with general
purpose dynamics can be combined with modern
neural network based language models. We do this
by explicitly modeling the narrative state with a
latent vector, and modeling how this state trans-
forms over time as a Switching Linear Dynamical
System (SLDS). We show how this formulation
neatly captures the concepts of narrative dynam-
ics and scaffolds in a way compatible with current
neural generation systems, and demonstrate how
the model can ﬂexibly be used both for standard
language modeling and controlled generation of
narratives. Under our model, the task of “ﬁlling
in” a narrative conditioned on arbitrarily speciﬁed
sections can be recast as sampling from a speciﬁc
class of conditional probability distributions. We
show how this distribution can be sampled from
via Gibbs sampling, permitting our model to ﬂex-
ibly “ﬁll in” arbitrary parts of a narrative without
being trained to do so. We evaluate our model
with both human evaluation and several automatic

measures2 and show that our model outperforms
several strong baselines. Model code is available. 3

2 A Switching Dynamical System for

Narrative Generation

In this section, we give a brief overview of Switch-
ing Dynamical systems and how they can be used
to capture both a scaffold of the narrative as well as
the narrative dynamics. We then describe in detail
the components of our model and its relation to
existing models.

2.1 Narrative Dynamics in a Dynamical

System

The speciﬁcs of the narrative (characters, setting,
etc.), will differ between stories, but as Propp
(1928) notes, the way they transition to the next
point in the narrative (what we refer to as “narrative
dynamics”) is often shared. Let’s say that, as done
often, we represent the ‘narrative speciﬁcs’ at time
step4 i with a latent vector Zi. A natural way to
explicitly model how this state evolves over time
that ﬁts with the above observation is as a Linear
Dynamical System:

Zi+1 = AZi + (cid:15) ; (cid:15) ∼ N (0, Σ)

Where A is a matrix, shared across all narratives,
and Σ is a noise term that takes into consideration
idiosyncrasies different narratives will have5. The
fact that the shared transition matrix A is linear
means that narratives will have linearly analogous
trajectories through time, despite having different
details (comparable to stories with different settings
but matching structures such as Ran/King Lear,
Ulysses/Odyssey, etc). Of course, the fatal ﬂaw of
the model is that it assumes there exists only one
transition matrix, and thus only one possible way
to transition through a narrative!

2.2 Narrative Scaffolds as Switching

Variables

A more ﬁtting model would thus be a Switching
Linear Dynamical System (Ackerson and Fu, 1970;
Chang and Athans, 1978; Murphy, 1998). In an

2Evaluation in this paper is done on English text data
3github.com/StonyBrookNLP/SLDS-Stories
4In our case, we take each sentence in the narrative to
be a different timestep. Different levels of granularity for a
timestep may be more beﬁtting for other domains.

5Note that a bias term may also be added here (we do this
in our implementation). We leave the bias off here for clarity

SLDS, we assume there exists a set of K differ-
ent sets of dynamics, {(A1, Σ1), ...(AK, ΣK)}. At
time step i + 1, one of these sets of dynamics is
used. The one used depends on the value of a dis-
crete variable at time step i + 1 called the switching
variable, Si+1 ∈ {1, ...K}:

Zi+1 = ASi+1Zi + (cid:15) ; (cid:15) ∼ N (0, ΣSi+1)

There is a switching variable Si associated with
each time step. The switching variable value it-
self evolves over time by a prior Markov process,
P (Si+1|Si)6. This top level chain of switching
variables thus forms our narrative scaffold, indi-
cating what transitions we must go through in the
narrative, with the dynamics matrices indicating
how they transition.

2.3 Narrative Scaffold - Emotional

Trajectory

What the switching variables actually represent can
be chosen by the user. Straightforward narrative
scaffolds include event sequences (Martin et al.,
2018), keywords (Yao et al., 2019), or latent tem-
plate ids (Wiseman et al., 2018). More complex
but potentially more informative scaffolds may be
created using concepts such as story grammar non-
terminals (Lakoff, 1972; Thorndyke, 1977), or char-
acter action taken throughout a story (Riedl and
Young, 2010b).

In our work, we use the sentiment trajectory of
the narrative as the scaffold. That is, each Si for
a sentence indicates the overall coarse sentiment
of the sentence (Positive, Negative, or Neutral).
Though simple, the overall sentiment trajectory
of a narrative is important in deﬁning the high
level ‘shape’ of a narrative often shared among
different narratives (Vonnegut, 1981; Reagan et al.,
2016). Furthermore, sentiment trajectory has been
shown to be fairly useful in story understanding
tasks (Chaturvedi et al., 2017; Liu et al., 2018). We
discuss in the conclusion future directions for using
different types of scaffolds.

2.4 The Full Model

The ﬁnal component of the model is a conditional
language model that generates sentence i condi-
tioned on the current Zi, and all previous sen-
tences, X:i. Generation continues until an <eos>

6Other ways to formulate this transformation are also pos-
sible (Barber, 2006; Linderman et al., 2016). The Markov
assumption is a common one and we use it here for simplicity.

is reached. This conditional language model may
be parameterized as desired, but in this work, we
parameterize it as an RNN neural network language
model.

Figure 1: SLDS Generative model-Si is a discrete state
(sentiment of a sentence in a multi-sentence narrative ).
Zi is a continuous latent vector that is conditioned on
to generate the ith sentence in the narrative , Xi. The
dynamics of the narrative are completely captured in
the dynamical system controlling the latent vector Z.
How to transition from Zi to Zi+1 is determined by the
state variable Si+1. Arrows from Xi to Xi+2 have been
left out for clarity.

The graphical model for our SLDS is pictured
in Figure 1. The model consists of three sets of
variables: (1) Switching variables S1, ..., SN , (2)
Latent state variables Z1, ..., ZN capturing the de-
tails of the narrative at sentence i, (3) The sentences
themselves X1, ...XN , where each sentence Xi has
ni words, xi
ni. The joint over all variables
factorizes as below into the following components
(X:i stands for all sentence before Xi):

1, ...xi

N
(cid:89)

i

N
(cid:89)

P (S, Z, X) = (

)
P (Xi|Zi, X:i)
(cid:124)
(cid:125)
(cid:123)(cid:122)
(cid:184)

N
(cid:89)
(

i

)(
P (Zi|Zi−1, Si)
(cid:124)
(cid:125)
(cid:123)(cid:122)
(cid:183)

i

)
P (Si|Si−1)
(cid:124)
(cid:125)
(cid:123)(cid:122)
(cid:182)

(cid:182) Narrative Scaffold Planner: The factor
P (Si|Si−1) is a transition matrix, which we cal-
culate via count based statistics from training. It is
fed in as prior knowledge and ﬁxed.
(cid:183) Narrative Dynamics Network: The factor
P (Zi|Zi−1, Si) is determined like a switching lin-
ear dynamical system:

Zi = ASiZi−1 + BSi(cid:15), ; (cid:15) ∼ N (0, I)

which is equivalent to drawing Zi from a Nor-
mal distribution with mean ASiZi−1 and variance
BSiBT
Si

.

(cid:184) Conditional Language model: The factor
P (Xi|Zi, X:i) is parameterized by an RNN lan-
guage model conditioned on the latent Zi.

3 Learning and Posterior Inference

Due to the conditionals parameterized by neural
networks we use amortized variational inference
in a manner similar to Variational AutoEncoders
(Kingma and Welling, 2013), both to learn an ap-
proximate posterior q(S, Z|X) and to learn the gen-
erative model parameters by maximizing a lower
bound on the data likelihood (ELBO). We assume
that the approximate posterior factorizes as follows:

q(S, Z|X) =

N
(cid:89)

(

i

N
(cid:89)

i

q(Si|X))(

q(Zi|Zi−1, Si, X:i, Xi))

Like in VAEs, computing these individual factors
is done through a parameterized function called the
inference or recognition network whose parame-
ters are trained jointly with the generative model.
In our case there are two forms for the factors in
our posterior: (1) The ﬁrst form, q(Si|X) = qSi
is parameterized by a classiﬁer that takes in the
set of sentences X and outputs a categorical dis-
(2) The
tribution over the switching variables.
second form, q(Zi|Zi−1, Si, X:i, Xi) = qZi
is
realized by functions fµ(Zi−1, Si, X:i, Xi) and
fσ(Zi−1, Si, X:i, Xi) that output the mean and
variance, respectively, of a Gaussian over Zi.

Borrowing terminology from VAEs, the approxi-
mate posterior (the factors given above) act as an
‘encoder’, while the generative model from the pre-
vious section can be seen as the ‘decoder’. This
type of training has been previously used in (Krish-
nan et al., 2015, 2017; Fraccaro et al., 2016, 2017;
Karl et al., 2016).

3.1 Lower bound formula & exact training

algorithm

As mentioned previously, we optimize all parame-
ters (including the variational factor functions) by
optimizing a lower bound on the data likelihood.
The model may be trained either with supervision
labels for the switching states (in our case, senti-
ment labels) or without supervised labels.

If one is training without the sentiment labels,
then the lower bound on the marginal likelihood
(and thus our optimization objective) may be writ-
ten as follows:

L = ES1,..SN ∼qSi

M −

(cid:34)

N
(cid:88)

(cid:35)
KL(qSi||p(Si|Si−1))

i

(cid:104) N
(cid:88)

i

where, M = EZ1,..ZN ∼qZi

(log p(Xi|Zi)

− KL(qZi||p(Zi|Zi−1, Si)))

(cid:105)

The derivation for this objective is identical to that
found in (Krishnan et al., 2017; Fraccaro et al.,
2016), and simply relies on using properties of iter-
ated expectations. All expectations are estimated
with Monte Carlo samples.

If training with the sentiment labels S1, ..., SN ,
then the objective is similar (but without the sam-
pling of the switching states), and is augmented
with an additional supervision objective as done in
Kingma et al. (2014):

LS = M +

qSi

N
(cid:88)

i

Final training procedure for a single narrative is:

1. For each sentence (starting from the ﬁrst),
sample the switching state Si from q(Si|X).

2. For each sentence (starting from the ﬁrst),
sample the latent Zi from q(Zi|Si, Zi−1, X).

3. Evaluate the data likelihood and KL term(s)

with these samples.

4. Take the gradients of the objective function
w.r.t. all parameters, using the reparameteriza-
tion trick for qZi (Kingma and Welling, 2013)
or the Gumbel-Softmax7 trick for qSi (Jang
et al.), and optimize.

4

Interpolations via Gibbs Sampling

One of the beneﬁts of probabilistic formulation is
the possibility (if an inference procedure can be
found) of generating narratives with speciﬁc con-
straints, where the constraints may be speciﬁed as
clamped variables in the model. In this section, we
show how narratives may be generated conditioned

7We use the soft variant of Gumbel-Softmax. Rather than
forcing a hard choice for Si, we directly use the Gumbel-
Softmax output and combine the transition matrices via a
convex combination

on arbitrary bits and pieces of the narrative already
ﬁlled in, using approximate Gibbs sampling. This
allows one to, for example, interpolate a narrative
given the ﬁrst and the last sentence (similar to how
earlier story generation systems were able to gener-
ate with a given end goal in mind). Some examples
of these interpolations generated by our system can
be found in Table 3. We give the equations and
summarize the algorithm in the next sections.

4.1 Conditionals for Gibbs Sampling

For our Gibbs sampling algorithm we give the nar-
rative scaffold (switching variables), S1, ..., ST ∈
S and a set of observed sentences, X+. This may
be any set of sentences (the ﬁrst and last, just
the second sentence, etc) as inputs to the system.
We wish to ﬁnd values for the unobserved sen-
tences in set X− by sampling from the distribution
P (X−, Z1, ..., ZT |S, X+). We perform this sam-
pling via Gibbs sampling. Two different forms of
conditionals need to be derived to do Gibbs sam-
pling. One over some Zi conditioned on everything
else, and one over some Xi conditioned on every-
thing else.

By using the d-separation properties of the graph,
and substituting the true posterior over Zi with
our approximate posterior q, we can show the ﬁrst
distribution is approximately proportional to 8

P (Zi|Zi−1, Zi+1, Si, Si+1, Xi, Xi−1)
∝ P (Zi+1|Si+1, Zi)P (Zi|Zi−1, Si, Xi, Xi−1)
≈ P (Zi+1|Si+1, Zi)q(Zi|Zi−1, Si, Xi, Xi−1)

The last line is the product between a Gaussian
density over Zi+1 and Zi, respectively. With some
algebraic manipulations, one can show the last line
is proportional to a single Gaussian PDF over Zi:

NZi+1(ASi+1Zi, ΣSi+1)NZi(fµ(·), fσ(·))

(1)

∝ NZi(µ∗, Σ∗) where,

Σ∗ =(cid:0)AT
µ∗ =ΣT
∗

Si+1Σ−1
Si+1
(cid:0)Zi+1Σ−1
Si+1

ASi+1 + fσ(·)−1(cid:1)−1

ASi+1 + fµ(·)T fσ(·)−1(cid:1)T

To ﬁnd the second conditional, one can use the
d-separation properties of the graph to ﬁnd that it
is proportional to:

P (Xi|Zi, Zi+1, Si, Si+1, X:i, Xi+1)
∝ P (Xi+1|X:i, Xi, Zi+1)P (Xi|X:i, Zi)

8See the Supplemental Material for a full detailed deriva-

tion of the conditionals in this section

These two distributions are simply factors of our
conditional language model, and both terms can
thus be evaluated easily.
In theory, one could
use this fact to sample the original conditional via
Metropolis-Hastings 9. Unfortunately, we found
this approach to be much too slow for practical
purposes. We observed that the simple heuristic of
deterministically assigning Xi to be the greedy de-
coded output of the conditional language model
P (Xi|X:i, Zi) works well, as evidenced by the
empirical results. We leave it for future work to
research different conditional language model pa-
rameterizations that allow easy sampling from this
conditional10

4.2 Gibbs Sampling Interpolation Overview

The variables in the Gibbs sampler are ﬁrst ini-
tialized using some heuristics (see Supplemental
Materials for details). After initialization, perform-
ing the interpolations with Gibbs sampling follows
the below two step process:

• For each Zi, sample a value Z(cid:48) from equation

(1) and set Zi to Z(cid:48).

• For each Xi in X−, ﬁnd a new value for Xi by
running greedy decoding using the conditional
language model.

5 Training Details

5.1 Dataset and Preprocessing

We use the ROCStories corpora introduced in
Mostafazadeh et al. (2016). It contains 98,159 short
commonsense stories in English as training, and
1,570 stories for validation and test each. Each
story in the dataset has ﬁve-sentences and captures
causal and temporal commonsense relations. We
limit our vocabulary size to 16,983 based on a per-
word frequency cutoff set to 5. For sentiment tags,
we automatically tag the entirety of the corpus with
the rule based sentiment tagger, Vader (Hutto and
Gilbert, 2014), and bucket the polarity scores of
Vader into three tags: neutral, negative, and posi-
tive. These tags form the label set of the S variables
in our SLDS model. We tokenize the stories with

9MH sampling has also been used for story generation in

Harrison et al. (2017), albeit in a different fashion

10One possibility is to use ‘orderless’ pretrained Trans-
former models such as BERT(Devlin et al., 2018), in which it
has been shown possible to sample from the Gibbs conditional
(Wang and Cho, 2019)

Spacy tokenizer11. Each sentences in the input nar-
rative has an <eos> tag except for the S2S model
discussed below.

6 Evaluations

5.2 Switching Linear Dynamical System

(SLDS)

SLDS has RNN encoder and decoder networks
with single layer GRU cells of hidden size 1024.
Model uses an embedding size of 300. We train
the model using Adam optimizer with the defaults
used by PyTorch. We stop training the models
when the validation loss does not decrease for 3
consecutive epochs. Training details remain same
as above unless otherwise mentioned.

5.3 Baselines

• Language Model (LM): We train a two layer
recurrent neural language model with GRU
cells of hidden size 512.

• Sequence-to-Sequence Attention Model
(S2S): We train a two layer neural sequence
to sequence model equipped with bi-linear
attention function with GRU cells of hidden
size 512. Sentiments tags for a narrative (1
for each sentence) are given as input to the
model and the corresponding sentences are
concatenated together as the output with only
one <eos> tag at the end. This model is
trained with a 0.1 dropout. This model is
comparable to the static model of (Yao et al.,
2019), and other recent works employing a
notion of scaffolding into neural generation
(albeit adapted for our setting).

• Linear Dynamical System (LDS): We also
train a linear dynamical system as discussed
in Section 2.1 as one of our baselines for fair
comparisons. Apart from having just a sin-
gle transition matrix this model has the same
architectural details as SLDS.

• Semi-Supervised SLDS (SLDS-X%): To
gauge the usability of semi-supervision, we
also train semi-supervised SLDS models with
varying amount of labelled sentiment tags
unlike the original model which uses 100%
tagged data. We refer to these as SLDS-X%,
where X is the % labelled data used for train-
ing: 1%, 10%, 25%, and 50%.

11spacy 2.1.4

As described above, our model is able to perform
narrative interpolations via an approximate Gibbs
sampling procedure. At the core of our evaluations
is thus a ﬁll-in-the-sentences task. We provide 1 or
2 sentences, and require the model to generate the
rest of the narrative . We evaluate this via automatic
evaluations as well as with crowd-sourced human
evaluations. We also report perplexity to evaluate
the models’ ability to ﬁt the data. Lastly, we look
at whether the transitions learned by the SLDS
models capture what they are intended to capture:
does using the transition matrix associated with a
sentiment tag (positive/negative/neutral) lead to a
generated sentence with that sentiment?

6.1 Generating the Interpolations

For the SLDS models, the interpolations are gen-
erated via the Gibbs sampling algorithm described
earlier. In all experiments for the SLDS models we
draw 50 samples (including burn in samples) and
output the interpolation that maximizes the proba-
bility of the given sentence(s). Since the baselines
do not have the means for doing interpolations,
we simulate ‘interpolations’ for the baselines; we
draw 1000 samples using top k (with k=15) trun-
cated sampling (conditioned on the given initial
sentences, if available). We then output the sample
that maximizes the probability of the clamped sen-
tences around which we are interpolating the others.
We allow the S2S access to the gold sentiment tags.
To give a lower bound on the performance of the
SLDS model, we do not provide it with gold tags.
We instead provide the SLDS model with the semi-
noisy tags that are output from q(Si|X).12

6.2 Automatic Evaluation of Interpolations

We automatically evaluate on four different types
of interpolations (where different combinations of
sentences are removed and the model is forced to
regenerate them), We evaluate the generations with
the ROUGE (Lin, 2004)13 and METEOR (Banerjee
and Lavie, 2005) metrics14 using the true sentences
as targets. Table 2 shows the automatic evalua-
tion results from interpolations using our proposed

12Note that missing sentences, X, are used only for com-

puting these noisy tags

pyrouge/0.1.3.

13Pyrouge package at pypi.python.org/pypi/

14E2E NLG Challenge scoring scripts at https://

github.com/tuetschek/e2e-metrics.

# Sent(s) Metric SLDS SLDS-1 SLDS-10 SLDS-25 SLDS-50

S2S

LM LDS

2nd

4th

1st + 2nd

3rd + 4th

R1
R2
RL
M

R1
R2
RL
M

R1
R2
RL
M

R1
R2
RL
M

17.60
2.43
16.43
6.35

16.98
2.20
15.20
6.33

15.40
1.79
14.63
5.34

23.35
3.77
21.56
8.28

19.36
3.46
17.76
6.84

17.90
2.61
16.21
7.11

16.04
1.65
15.15
5.27

23.59
3.35
21.49
8.26

20.46
3.86
19.03
6.98

18.64
2.74
16.69
6.92

16.11
1.97
15.23
5.40

23.57
3.76
21.87
8.22

20.92
4.10
19.45
7.15

18.14
2.29
16.08
6.53

16.33
2.17
15.47
5.44

23.65
3.58
21.88
8.12

19.55
3.43
17.87
6.94

19.39
3.23
17.43
7.18

16.27
1.83
15.27
5.42

23.60
3.93
21.67
8.29

18.79
3.14
17.39
7.11

15.38
1.97
13.90
5.84

18.91
2.62
17.89
6.81

20.68
2.51
18.87
7.51

18.30
2.83
16.68
6.76

14.03
1.40
12.64
5.61

17.38
2.03
16.48
6.07

20.01
1.91
18.28
7.26

17.33
2.31
15.97
6.13

17.06
2.31
15.24
6.89

14.32
1.47
13.41
4.80

21.66
2.94
20.04
7.87

Table 2: F1 scores for ROUGE-1, 2, and L and METEOR (M) (default mode score) for randomly sampled 500
stories from the test set. #Sents(s) column represents the “ﬁll in” sentence(s) that the models generated using Gibbs
sampling. Our SLDS models pick the best of 50 samples, the baselines models pick the best of 1000 samples

models and baselines. The #Sent(s) column indi-
cates which sentence(s) were removed, and then
regenerated by the model. We gave the baselines a
slight edge over SLDS because they pick the best
out of 1000 samples while SLDS is only out of
50. The SLDS models see their largest gain over
the baseline models when at least the ﬁrst sentence
is given as an input. The baseline models do bet-
ter when the ﬁrst and second sentence need to be
imputed. This is likely due to the fact that hav-
ing access to the earlier sentences allows a better
initialization for the Gibbs sampler. Surprisingly,
the semi-supervised variants of the SLDS models
achieve higher scores. The reasons for this is dis-
cussed below in the Perplexity section.

6.3 Human Evaluation of Interpolations

6.3.1 Annotation Scheme

As automatic evaluation metrics are not sufﬁcient
to assess the quality of any creative task such as
narrative generation, we measure the quality of
the generations through human evaluation of 200
stories on the Amazon Mechanical Turk platform.
We provided Turkers with two generated narratives
from two different models, each with ﬁve sentences.
The ﬁrst and last sentences were fed to each model
as input, and the middle three sentences were gen-

erated. Each pair of narratives is graded by 3 users
each with two tasks: (1) to rank on a scale of 0-3
each of the sentences except the ﬁrst one on the
basis of its coherency with the previous sentence(s)
and (2) compare and rank the two narratives based
on their overall coherency, ie how well the story
connects the starting/ending sentences.

6.3.2 Human Evaluation Results

Table 4 reports the result of human evaluations of
SLDS and baseline generations. We can observe
that people preferred narratives generated by SLDS
over the ones generated by baseline models (LM
and S2S) as they found the former model more co-
herent, which is an important criteria for narrative
generation. 51.3% of the time SLDS generates
better narratives than the LM model while LM in
turn does it only 35.0% of the times. 13.7% of the
generations end up in tie. The mean sentence level
coherence score for SLDS is around 12.5% larger
than that of the LM, with a slightly lower standard
deviation. We see similar results when compared
against the S2S model.

6.4 Language Modeling Perplexity Score

As our models are essentially language models, we
evaluated their per-sentence negative log-likelihood

Yesterday I was at the mall shopping.
Suddenly, a man in a mask appeared.
The man was walking around and he was gone.
He had to call me to help me get out of the store.
I heard on the news that night they sent the UNK to prison.

I had a bad relationship with my girlfriend.
She was very upset and told me she was pregnant.
Rachel told her family and it was very difﬁcult.
They all cried.
They agreed that on the whole, it was good news.

Ed was playing baseball in his yard.
He was running down the hill.
His ball was coming towards him.
It was very scary!
Ed was scared.

Last week I had an idea.
I was so nervous that I decided to make a presentation.
I soon found it hard to come up with new ideas.
I didn’t think it would be so hard.
But then, an idea came to me and I was back on track.

Ben has always wanted to learn how to play the piano
His parent bought him one.
Ben enrolls in a piano class with a local tutor.
Ben practiced every day.
He gets better with every lesson.

Tim was always on his bike during the summer.
He had a lot of fun.
One day he decided to cut his bike down.
He hit a rock and fell off the bike and hit a tree.
He broke his arm.

Table 3: Sample interpolations from Gibbs sampling. Grayed out lines are provided as input and bold sentences
are generated by SLDS.

System Sent Coh. (0-3) Best Story

LM
SLDS

S2S
SLDS

1.68 ± 1.01
1.89 ± 0.96

1.67 ± 1.00
1.87 ± 0.97

35.0%
51.3%

35.1%
51.9%

Table 4: Human evaluation scores for ﬁlled-in narrative
generation. Humans judged sentence coherence and
chose which model ﬁlled in the most coherent narrative
overall (13.7% and 13% tie for LM and S2S).

and per-word perplexity scores15, which can be
viewed as an indirect measure of how well a sys-
tem works as a generative model of narrative text.
For the SLDS and LDS models these scores are ap-
proximations, an upper bound (the negative of the
ELBO) to the actual values. For the other two mod-
els the scores are exact. A good model should as-
sign low perplexity scores to its test set. In Table 5
SLDS achieves the lowest scores, implying that it is
able to model the data distribution well. In Table 6
we also calculate the perplexity scores for the semi-
supervised SLDS models to assess the effectiveness
of semi-supervised training. Surprisingly, the mod-
els with less supervision scored better in terms of
perplexity. One possibility for this might be the use
of the soft Gumbel-Softmax in the semi-supervised
models. The soft Gumbel-Softmax variant does
not commit to using a single transition matrix at
each time step (instead linearly combining them,
weighted by the Softmax weights). This fact may
permit the model greater ﬂexibility in ﬁtting the
training data. While this leads to better scores in

15Note that since S2S appends the eos token only at the
end, its per-sentence NLL is slightly lower than that of LM.

metrics such as perplexity or BLEU, it does leads
to transitions that are worse in capturing the prop-
erties they should be capturing, as we shall see in
the next section.

System

NLL

PPL

LM
S2S
LDS
SLDS

196.30
192.25
≤186.24
≤182.17

35.41
43.36
29.49
27.39

Table 5: NLL and PPL scores on the test set. Lower is
better for both the metrics. Variance in NLL calculation
is in the order of 10−3.

System

NLL

PPL

SLDS-1% ≤177.60
SLDS-10% ≤178.81
SLDS-25% ≤181.11
SLDS-50% ≤185.07
≤182.17
SLDS

25.19
25.77
26.87
28.88
27.39

Table 6: Approximate NLL and PPL scores for SLDS
and semi-supervised SLDS on the test set.

6.5 Evaluation of Transition Dynamics

One matter of interest is whether or not the tran-
sitions are capturing what they are supposed to
capture, appropriate sentiment. Since we used the
sentiment tagger Vader for training tags, we again
utilize it to evaluate whether using transitions of a
certain sentiment actually leads the model to pro-
duce outputs with the given sentiment. To perform
this evaluation, we give as input to our models
(and the S2S baseline) the sentiment tags for a

sentence and allow it to generate a sentence con-
ditioned on these sentiment tags. We then tag the
generated sentences with Vader and see if the sen-
timent tags match the originals. We calculate the
F1 score across all sentiment tags and report the
macro average. In Table 7 we see that having labels
is incredibly important for meaningful transitions.
There is a large drop in F1 as the amount of labels
given to the model is decreased. The SLDS model
that is trained with 100% of the labels performs a
little better than even S2S, despite not having direct
access to the sentiment labels (SLDS only uses the
sentiment labels to decide which transition to use
while the S2S model uses attention directly on the
sentiment labels).

System

Macro F1

S2S
95.8
SLDS-1% 50.2 ± 1.1
SLDS-10% 51.4 ± 1.1
SLDS-25% 58.7 ± 0.4
SLDS-50% 74.6 ± 0.1
96.1 ± 0.0
SLDS

Table 7: Macro F1 scores on sentiment classiﬁcation
task. Results for SLDS and SLDS-X% are averaged
over 5 runs.

7 Related Work

Story/narrative generation has a rich history in the
ﬁeld of AI. Many early systems were based on
structured formalisms for describing common nar-
rative structures (Lakoff, 1972; Thorndyke, 1977;
Meehan, 1977), many being inspired by the initial
work of (Propp, 1928). There has been a swath of
recent work that has looked to add some semblance
of a ‘narrative scaffold’ back into generation meth-
ods (Fan et al., 2018; Martin et al., 2018; Yao et al.,
2019; Xu et al., 2018). Many of these methods
work as conditional LMs (conditioned directly on
the scaffold). This line of work may be combined
with our formalization as well, by conditioning
the generation on the switching state as well, as
done in the model of Barber (2006). Recent work
by Tambwekar et al. (2019) has similar goals to
ours in permitting more controlability in genera-
tion systems, developing a RL-based system that
allows users to specify an end goal for a story (by
specifying the event class that is desired to appear
at the end). Their work differs from ours in that
it does not deal with text directly, modeling only

the sequences of events in the narrative. It may
be possible to utilize this model as the scaffolding
component in our model (utilizing their RL pol-
icy for the scaffold planner, rather than the simple
Markovian distribution used here).

8 Conclusion and Future Work

In this paper, we formulated the problem of narra-
tive generation as a switching dynamical system.
We showed how this formulation captures notions
important in narrative generation, such as narrative
dynamics and scaffolds. We developed an approxi-
mate Gibbs sampling algorithm for the model that
permits the system to generate interpolations con-
ditioned on arbitrary parts of the narrative, and
evaluated these interpolations using both human
and automatic evaluations. Though in this work
we used sentiment tags for our scaffolds/switching
variables, future work may look at utilizing differ-
ent kinds of information to guide the generation of
narratives. Utilizing the main predicate of a sen-
tence as a scaffold would be a logical next step, and
may prove more informative then the sentiment tra-
jectory. A scaffold such as this can take on many
more possible values then a sentiment tag, and as
such, it may prove difﬁcult to assign a set of dynam-
ics to each value. Another avenue for future work
would deal with this possible problem. One poten-
tial solution could be to associate each switching
variable value with a (learned) vector in a probabil-
ity simplex, and use this vector to combine a small
set of “primitive” dynamics matrices in order to get
that value’s associated set of dynamics.

References

G Ackerson and K Fu. 1970. On state estimation in
switching environments. IEEE Transactions on Au-
tomatic Control, 15(1):10–17.

Satanjeev Banerjee and Alon Lavie. 2005. METEOR:
An automatic metric for MT evaluation with im-
proved correlation with human judgments. In ACL
Workshop.

David Barber. 2006.

Expectation correction for
smoothed inference in switching linear dynamical
Journal of Machine Learning Research,
systems.
7(Nov):2515–2540.

C. B. Chang and M. Athans. 1978. State estimation for
IEEE
discrete systems with switching parameters.
Transactions on Aerospace and Electronic Systems,
AES-14(3):418–425.

Snigdha Chaturvedi, Haoruo Peng, and Dan Roth.
2017. Story comprehension for predicting what hap-
pens next. In EMNLP 2017, pages 1603–1614.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. CoRR, abs/1810.04805.

Angela Fan, Mike Lewis, and Yann Dauphin. 2018. Hi-
erarchical neural story generation. In ACL 2018.

Chin-Yew Lin. 2004. Rouge: A package for automatic

evaluation of summaries. In ACL 2004.

Scott W Linderman, Andrew C Miller, Ryan P Adams,
David M Blei, Liam Paninski, and Matthew J John-
son. 2016. Recurrent switching linear dynamical
systems. AISTATS.

Fei Liu, Trevor Cohn, and Timothy Baldwin. 2018.
Narrative modeling with memory chains and seman-
tic supervision. ACL.

Marco Fraccaro, Simon Kamronn, Ulrich Paquet, and
Ole Winther. 2017. A disentangled recognition and
nonlinear dynamics model for unsupervised learn-
ing. In NeurIPS 2017.

Lara J. Martin, Prithviraj Ammanabrolu, William Han-
cock, Shruti Singh, Brent Harrison, and Mark O.
Riedl. 2018. Event representations for automated
story generation with deep neural nets. AAAI.

Marco Fraccaro, Søren Kaae Sønderby, Ulrich Paquet,
and Ole Winther. 2016. Sequential neural models
with stochastic layers. In NeurIPS 2016.

Brent Harrison, Christopher Purdy, and Mark O Riedl.
2017.
Toward automated story generation with
markov chain monte carlo methods and deep neural
networks. In AIIDE.

Clayton J Hutto and Eric Gilbert. 2014. Vader: A parsi-
monious rule-based model for sentiment analysis of
social media text. In AAAI conference on weblogs
and social media.

Eric Jang, Shixiang Gu, and Ben Poole. Categorical
In ICLR

reparameterization with gumbel-softmax.
2017.

Maximilian Karl, Maximilian S¨olch, Justin Bayer, and
Patrick van der Smagt. 2016. Deep variational bayes
ﬁlters: Unsupervised learning of state space models
from raw data. CoRR.

Ahmed Khalifa, Gabriella AB Barros, and Julian
arXiv preprint

Deeptingle.

Togelius. 2017.
arXiv:1705.03557.

Diederik P Kingma and Max Welling. 2013. Auto-
arXiv preprint

encoding variational bayes.
arXiv:1312.6114.

Durk P Kingma, Shakir Mohamed, Danilo Jimenez
Rezende, and Max Welling. 2014. Semi-supervised
learning with deep generative models. In NeurIPS
2014.

Rahul G. Krishnan, Uri Shalit, and David Sontag. 2015.

Deep kalman ﬁlters. CoRR.

Rahul G. Krishnan, Uri Shalit, and David Sontag. 2017.
Structured inference networks for nonlinear state
space models. In AAAI 2017.

George Lakoff. 1972. Structural complexity in fairy

tales.

James R. Meehan. 1977. Tale-spin, an interactive pro-
gram that writes stories. In IJCAI, pages 91–98.

Nasrin Mostafazadeh, Nathanael Chambers, Xiaodong
He, Devi Parikh, Dhruv Batra, Lucy Vanderwende,
Pushmeet Kohli, and James F. Allen. 2016. A cor-
pus and cloze evaluation for deeper understanding
of commonsense stories. In HLT-NAACL.

Kevin P Murphy. 1998. Switching kalman ﬁlters.

Gerald Prince. 2003. A dictionary of narratology.

Vladimir Propp. 1928. Morphology of the Folktale.

Andrew J Reagan, Lewis Mitchell, Dilan Kiley,
Christopher M Danforth, and Peter Sheridan Dodds.
2016. The emotional arcs of stories are dominated
by six basic shapes. EPJ Data Science, 5(1):31.

Mark O. Riedl and R. Michael Young. 2006. Story
planning as exploratory creativity: Techniques for
expanding the narrative search space. New Genera-
tion Computing, 24(3):303–323.

Mark O. Riedl and Robert Michael Young. 2010a. Nar-
rative planning: Balancing plot and character. J. Ar-
tif. Intell. Res., 39:217–268.

Mark O. Riedl and Robert Michael Young. 2010b. Nar-
rative planning: Balancing plot and character. J. Ar-
tif. Intell. Res., 39:217–268.

Melissa Roemmele and Andrew S Gordon. 2015. Cre-
In Interna-
ative help: a story writing assistant.
tional Conference on Interactive Digital Storytelling,
pages 81–92. Springer.

Pradyumna Tambwekar, Murtaza Dhuliawala, Ani-
mesh Mehta, Lara J Martin, Brent Harrison, and
Mark O Riedl. 2019. Controllable neural story gen-
eration via reinforcement learning. IJCAI.

Perry W Thorndyke. 1977. Cognitive structures in
comprehension and memory of narrative discourse.
Cognitive psychology, 9(1):77–110.

Michael Lebowitz. 1985. Story-telling as planning and

Scott R. Turner. 1993. Minstrel: A Computer Model of

learning. Poetics, 14(6):483–502.

Creativity and Storytelling. Ph.D. thesis.

Turkers. We ﬁnd that, in a broader context, 16
stories out of 20 are not good enough in terms of
connecting the ending with the previous sentences.
Also, in 14 out of 20 stories, mild off-topic sen-
tences are introduced, which are aligned with the
main topic of the story but not along with local co-
herency (i.e. the previous and the next sentences).
When considering a narrower context, or sentence
level, we conﬁrm that only 9 out of 60 generated
sentences are ungrammatical, so they fail to deliver
their meaning.

C Initializing the Gibbs Sampler

Initializing Z : We ﬁrst initialize the Z variables
in the sampler. This is done as follows: The Z vari-
ables are initialized in increasing order. If sentence
Xi is provided as input, then we sample from the
approximate posterior qZ in order to initialize Zi. If
Xi is missing, then we sample using the dynamics
distribution, P (Zi|Zi−1, Si). Since we initialize in
increasing order, we are guaranteed to have Zi−1.

Initializing X : We next initialize the missing
text. Initializing the missing text Xi is simply done
by greedy decoding from the language model con-
ditioned on Zi, and previous sentences.

D More Generated Outputs

Below in Table 8 we provide more outputs from
our system.

Kurt Vonnegut. 1981. Palm Sunday. Rosetta Books.

Alex Wang and Kyunghyun Cho. 2019. Bert has a
mouth, and it must speak: Bert as a markov random
ﬁeld language model. Arxiv.

Sam Wiseman, Stuart M Shieber, and Alexander M
Rush. 2018. Learning neural templates for text gen-
eration. EMNLP.

Jingjing Xu, Yi Zhang, Qi Zeng, Xuancheng Ren, Xi-
aoyan Cai, and Xu Sun. 2018. A skeleton-based
model for promoting coherence among sentences in
narrative story generation. EMNLP.

Lili Yao, Nanyun Peng, Ralph M. Weischedel, Kevin
Knight, Dongyan Zhao, and Rui Yan. 2019. Plan-
and-write: Towards better automatic storytelling.
AAAI, abs/1811.05701.

A Gibbs Sampling Derivation

P (Zi|Zi−1, Zi+1, Si, Si+1, Xi, Xi−1)
∝ P (Zi+1, Si+1|Zi−1, Zi+1, Si, Si+1, Xi, Xi−1, Zi)
∗ P (Zi|Zi−1, Si, Xi, Xi−1)
≈ P (Zi+1, Si+1|Zi−1, Si, Si+1, Xi, Xi−1, Zi)
∗ Q(Zi|Zi−1, Si, Xi, Xi−1)
= P (Zi+1|Si+1, Zi−1, Si, Si+1, Xi, Xi−1, Zi)
∗ P (Si+1|Si)Q(Zi|Zi−1, Si, Xi, Xi−1)
∝ P (Zi+1|Si+1, Zi−1, Si, Si+1, Xi, Xi−1, Zi)
∗ Q(Zi|Zi−1, Si, Xi, Xi−1)
= P (Zi+1|Si+1, Zi)Q(Zi|Zi−1, Si, Xi, Xi−1)
= NZi+1(ASi+1Zi, ΣSi+1)NZi(fµ(·), fσ(·))

The rest can be derived by taking the PDFs of the
two Gaussian densities above, getting rid of con-
stants that don’t depend on Zi, multiplying them
together, and completing the square to obtain the
numerator of a Gaussian over Zi (such that Zi ap-
pears nowhere else in the equation). This numera-
tor can then be multiplied by the normalizing con-
stant (that does not depend on Zi) to obtain exactly
a Gaussian pdf with the mean and variance as given
below:

NZi+1(ASi+1Zi, ΣSi+1)NZi(fµ(·), fσ(·))

∝ NZi(µ∗, Σ∗) where,

Σ∗ =(cid:0)AT
µ∗ =ΣT
∗

Si+1Σ−1
Si+1
(cid:0)Zi+1Σ−1
Si+1

ASi+1 + fσ(·)−1(cid:1)−1

ASi+1 + fµ(·)T fσ(·)−1(cid:1)T

B Manual Error Analysis of Generations

We evaluate the quality of sentences of 20 gen-
erated narratives are not considered coherent by

My roomate made ﬁsh for dinner last night.
It was very difﬁcult to get out of the house.
The next day we went to the store and complained.
The manager told me the food was terrible.
I suggested he apply for the cook’s position where I worked. His family were waiting for him at the airport.

Mark has been working hard all week.
He calls his boss to let him know he does not know.
Finally, they gave him leave to visit his family.
He got on the plane really excited.

Billy really needed help with his test.
He decided to pull an all nighter.
The next day, he was ready to go to school.
On the day of the test he arrived.
Billy failed the test.

Susie entered the school.
She walked into the classroom.
She explained to her teachers about her mistake.
All of them believed her and said she could turn it in a day late.
Thankfully, later that day she saw it was right where she had left it.

Dorothy had just turned ninety years old on Friday.
Her parents were coming to visit.
Friends and family came from all around.
On the day of the trip, she hugged her parents.
She had a wonderful day visiting with friends and family!

Yesterday my friend and I got into a ﬁght.
The argument was about to ﬁght and we lost our temper.
My friend and I fought for the ﬁght and we went to the hospital.
The doctor was very nice and we were okay.
I’m having her over for tea later this week.

Sally is a writer.
Her writing is not great.
She wrote a story about her life.
The story was very bad.
Sally failed in her efforts to complete the assignment.

Tom rolled his wagon
His dad was driving down the hill.
He accidentally hit the wagon.
Tom’s dad ﬂipped over the handlebars.
Tom’s dad was not helpful ever.

Table 8: Sample interpolations from Gibbs sampling. Grayed out lines are provided as input and bold sentences
are generated by SLDS.

