CASCADED CNN-RESBILSTM-CTC: AN END-TO-END ACOUSTIC MODEL FOR SPEECH
RECOGNITION

Xinpei Zhou, Jiwei Li, Xi Zhou∗

Cloudwalk Technology, Shanghai, P.R.China

8
1
0
2
 
t
c
O
 
0
3
 
 
]
S
A
.
s
s
e
e
[
 
 
2
v
1
0
0
2
1
.
0
1
8
1
:
v
i
X
r
a

ABSTRACT

Automatic speech recognition (ASR) tasks are resolved by
end-to-end deep learning models, which beneﬁts us by less
preparation of raw data, and easier transformation between
languages. We propose a novel end-to-end deep learning
model architecture namely cascaded CNN-resBiLSTM-CTC.
In the proposed model, we add residual blocks in BiLSTM
layers to extract sophisticated phoneme and semantic infor-
mation together, and apply cascaded structure to pay more
attention mining information of hard negative samples. By
applying both simple Fast Fourier Transform (FFT) tech-
nique and n-gram language model (LM) rescoring method,
we manage to achieve word error rate (WER) of 3.41% on
LibriSpeech test clean corpora. Furthermore, we propose a
new batch-varied method to speed up the training process in
length-varied tasks, which result in 25% less training time.

Index Terms— automatic speech recognition, cascaded,

resBiLSTM, training speed

1. INTRODUCTION AND BACKGROUND

In the past decades, automatic speech recognition (ASR) tasks
have been a major problem for scientists to tackle with. In
the ﬁrst decade of the new century, traditional MFCC-GMM-
HMM models [1] had been the most popular pipeline to re-
solve ASR tasks. However, word error rate (WER) of this
structure had remained above 20%, which was highly unac-
ceptable in real industry. With the booming development of
deep learning in the recent 5 years, end-to-end deep learning
model was ﬁrst raised by Graves [2] in 2014, and signiﬁcantly
improved by Amodei [3] afterwards.

This paper is inspired by Amodei [3]. Our main contribu-
tions in this paper to automatic speech recognition tasks in-
clude introducing the resBiLSTM(residual bidirectional long
short-term memory) structure to replace the normal BiLSTM
structure, a novel cascaded hard negative mining structure,
and a more efﬁcient training method. Furthermore, our model
architecture can be easily transformed from English to any
other languages (e.g. Mandarin, Spanish, France) as long as
the corresponding vocabulary dictionary is provided.

∗{zhouxinpei,lijiwei,zhouxi}@cloudwalk.cn

In this paper, we focus on designing an end-to-end deep
learning acoustic model, it is more suitable and reasonable
to use simple and computational friendly pre-processing
and post-processing methods. Thus, Fast Fourier Transform
(FFT) (pre-processing) and n-gram language model (LM)
(post-processing) are applied in our structure, though Xiong
[4] and Liu [5] showed RNN-LM outperforms n-gram LM.

The structure of this paper is as follows. We start from the
introduction on the recent related work on end-to-end ASR
tasks in Section 2. Section 3 details the model architecture
and improvements compared with the previous work. Then
Section 4 comes up with the data preparation, experiment re-
sults, comparisons with other state-of-art end-to-end models,
and relevant analysis. Section 5 draws the conclusions and
ideas on how to move forward in next steps.

2. RELATED WORK

In 2012, deep neural network (DNN) has taken advantages of
increasing calculating powers, bigger training data, and bet-
ter understanding on the models, has become more and more
popular. DNN models proposed by Dahl [6] and Hinton [7]
in 2012 signiﬁcantly lower the error rate of SwitchBoard con-
versation data set for nearly 30% compared with past MFCC-
GMM-HMM models.

Based on those DNN models, end-to-end ASR models
showed compelling results later in 2014. Connectionist Tem-
poral classiﬁcation (CTC) loss function proposed by Graves
[8] had began to be applied by Graves [2], Hannun [9], and
Maas [10] since 2014. CTC loss function gets rid of extract-
ing phoneme information and making sentence alignment,
which further improves the result compared with other DNN
models without CTC. However, CTC is still unsatisfactory
on homophone words judgment (e.g. brake and break). Thus,
a subsequent LM rescoring mechanism was introduced later.
Hannun [9] and Amodei [3] applied the tuned parameters
between acoustic model, language model and sentence length
to alleviate the CTC issues when decoding the sentence. Liu
[5] also proposed alternative way called lattice rescoring by
training a RNN-LM.

As we intend to compare the results with existing mod-
els on the same data sets, we restrict the usage of raw train-
ing data. Since data augmentation has been proven beneﬁcial

to speech recognition tasks [11], common data augmentation
methods are applied to increase the versatility of data, such as
speed perturbation (0.9x-1.1x) and noise disturbance.

3. METHODOLOGY

The whole system mainly consists of three parts: an extractor,
an interpreter, and a corrector. The extractor extracts features
from raw audio clips to spectrum. The interpreter interprets
the spectrum into English words (Mandarin characters). The
corrector corrects any grammar and spelling errors given by
the interpreter to meaningful and complete sentences.

Original raw audio clips are sliced into 20ms window
(frame), with a sliding window of 10ms. For an audio clip
with x seconds, we have N = (cid:98)(1000x − 20)/10(cid:99) frames.
For each frame, we use FFT to convert each frame into spec-
trum information with 161 features. N ∗ 161 features are
formalized and sent to the interpreter, which will be illus-
trated in Section 3.1. Other highlights of our model will be
introduced in Section 3.2 to Section 3.5.

Fig. 1. Illustration of detailed acoustic model architecture.

3.1. CNN-resBiLSTM-CTC acoustic model architecture

Fig. 1 show the detailed architecture of our CNN-resBiLSTM-
CTC acoustic model. First several layers are normal CNN
layers, which focus on extracting the phonemic informa-
tion. Kernel size and stride size of each CNN layer are
listed in each block in Fig. 1. Followed by CNN layers is
a set of resBiLSTM layers. Our resBiLSTM layer consists
of a shortcut that adds up the original information from the
beginning of the layer and the information after BiLSTM.
resBiLSTM layer is illustrated in the middle gray box in
Fig. 1. Residual structure provides a fast ﬂow path after the
CNN layers, which allows the information extracted by CNN
to be perceived by all LSTM layers, even the deepest lay-
ers. This structure allows the deeper LSTM layers to learn
more sophisticated information by combining the phoneme
and semantic information together, rather than learning the
semantic information solely. Since without residual block,
the phoneme information can be very hard to be passed to
the deeper layers. The reason of using a BiLSTM structure
is to get both forward and backward information within a
sentence, as the word in a English sentence can be logically
related either with previous or subsequent words. Then, one
fully connected layer and one softmax layer are added after
the resBiLSTM layers. Lastly, the whole network is trained
via CTC loss function [6].

Suppose the length of the input sequence is t, and qct
t
denotes the softmax probability of outputting label ct, where
ct ∈ {a, b, c, ..., z, blank, space, punctuations} at frame t.
Denote c = (c1, ..., ct) as the CTC path of a sequence and
θ(y) is the set of all possible CTC paths that can be mapped
to sentence y. Therefore, the CTC loss Lctc is deﬁned as in
(1) and (2):

pctc(y|x) =

pctc(c|x) =

(cid:88)

c∈θ(y)

(cid:88)

T
(cid:89)

qct
t

c∈θ(y)

t=1

Lctc = −ln(pctc(y|x)).

(1)

(2)

3.2. Cascaded structure and hard negative mining

Cascaded CNN model has been proved successfully on com-
puter vision tasks. Li [12] applied the idea on face detection
and Sun [13] made progress on facial point detection. We
hold the idea that cascaded models can also be transfered to
CNN-RNN combined models.

After training on the original data set until converge, we
make inference on the training set again using the converged
model. Then, we inference the audio clips in testing set with
the converged model via beam-search and select the samples
for the second-stage via cascaded structure. Pseudo-code be-
low shows the detailed methods we use. We apply almost the
same procedure on training set again to select the wrong sam-
ples for second-stage, except we don’t use language model
here.

Algorithm 1: Beam search and cascaded structure

3.3. Varied batch size and length sorting

for audio xi with Ti time stamps do
top N candidates set S = {}
for tin1, 2, 3, ..., Ti do

Calculate, select top N qct
From k*N probabilities, select top N
collections s1, ..., sN and update S

t given sk in S

end
select top 10 probability collections from C
if pctc(s1|x)/len(s1) > thres then

goto cascaded model

combine with LM, select the best one

else

end

end

We ﬁgure out 43% utterances are not being recognized
correctly using trained acoustic model solely. In order to ﬁnd
the speciﬁc differences between wrong samples and all sam-
ples, we compare them on the following attributes in Table 1:
average word length, average speaking speed, and each char-
acter’s appearance rate.

Among all characters, k is the most biased one (3.41%
difference), which still distributes insigniﬁcantly different.
Similarly, the speaking speed differs insigniﬁcantly, implying
unnecessity of altering stride size in CNN layers to capture
different spectrum and phoneme information in the second-
stage. However, the average word length increases by 11.0%
on wrong samples. As the word length increases, highly
semantic correlated words are even more distant. Belinkov
[14] shows deeper resBiLSTM layers contributes more on
capturing semantic information, we increases the number
of layers from 7 to 13 in the second-stage cascaded model
that focus on those wrong samples. Since training samples
decrease for 43% in second-stage, we decrease the model
size accordingly to accommodate this change and modify the
hidden node size to 512. Since the cascaded structure focuses
on solving semantic issues of longer sentences, rather than
phoneme problems. Also, considered that we use the same
2-layer CNN structure in both stages, we use the trained CNN
weights from the ﬁrst-stage model directly and start training
second-stage model from there.

Table 1. Statistics of wrong and all samples.

Attributes
Avg. length (words/sen)
Avg. speed (chars/sec)
Appearance rate of e (%)
Appearance rate of l (%)
Appearance rate of k (%)

Wrong
13.64
14.55
10.24
3.32
0.65

All
12.30
14.39
10.31
3.30
0.63

Diff.
+11.0%
+1.11%
-0.64%
+0.69%
+3.41%

Since the lengths of audio clips vary, training with mini-
batches would inevitably introduce zero padding to make
sentence alignment. However, padded zeroes are useless in
training and could cause gradient vanishing problems while
training LSTM structure is very subtle. To wipe off this extra
issue, we want to minimize the number of padded zeroes.
First, we could sort the training audio clips in ascending or-
der and each mini-batch takes sorted consecutive k samples.
Therefore, the difference between shortest and longest time-
stamp would be smallest in each mini-batch, which result in
least padded zeroes. Second, Amodei [3] use the same batch
size throughout the experiment, which would cause waste of
memory usage. In LibriSpeech training set, the longest time-
stamp could be 10 times longer than the smallest time-stamp.
In order to prevent out-of-memory issue, we need to stick to
batch size that suits the last mini-batch if we set the batch
size consistently. However, this would cause nearly 90% of
the memory wasted when training the ﬁrst several batches.
We come up with a solution by adjusting the batch size ac-
cordingly with its longest batch time-stamp, by computing
the ratio of the longest length in each batch. When setting
biggest batch size to 5 times bigger than the smallest batch
size, we increase the utility of GPU memory usage for up
to 25%. In the mean time, the training time for each epoch
decreases 24.9% from 24500 seconds to 18400 seconds.

3.4. Decoding with external n-gram language model

The language model training corpora is available1 online,
which contains 14500 public domain books with more than
41 million sentences. We eliminate sentences that contains
any words appear less 100 times in the corpora, and keep 39
million sentences. We take advantage of KenLM [15] to build
3-gram, and 5-gram language models respectively. Language
models are used to re-score the decoded sentences.

3.5. Hyper-parameters tuning

When we do inference, the result given by acoustic model
(AM) is paired with the n-gram LM mentioned in Section 3.4.
We use the beam search [16] to derive the transcription t with
minimum S(t), where

S(t) = log(pAM (t|x)) + α log(pLM (t))

(3)

, and α is the hyper-parameter to be tuned. We randomly
select 50 numbers in [0, 5] of α. If we deﬁne WER = f (α),
This is a convex function, and WER reaches global minimum
at α = 2.0. However, α reaches different global minimum for
different AM or LM models. One has to re-tune the hyper-
parameter after changing either AM or LM.

1http://openslr.org/11/

4. RESULTS AND ANALYSIS

All experiments are carried out on a 8-GPU Nvidia 1080Ti
server on LibriSpeech data sets, containing 960-hour read-
ing audio clips with 281241 utterances. Training process
takes 4.5 days without cascaded structure and extra 1.5 days
with cascaded structure. We exclude audio clips longer than
21 seconds to speed up training process, which causes only
0.019% data loss. Minimal batch size is set at 48 on 7-layer
resBiLSTM structure with 1024 hidden nodes each. All mod-
els are training for 20 epochs and early termination is applied.
Learning rates are set to 5 ∗ 10−4, 5 ∗ 10−5, 5 ∗ 10−6 in the
ﬁrst 10 epochs, next 5 epochs and ﬁnal 5 epochs respectively.
Momentum = 0.99 and stochastic gradient descent with
Adam are ﬁxed. When testing, beam search width is set to
be 300. Different LM size are applied in the experiment, we
report no-gram, 3-gram, and 5-gram results respectively. We
conduct experiments with and without the second-stage cas-
caded model and residual block to justify their improvements.
Hard samples with pAM > 0.5 are selected into second-
stage cascaded model. 840/2620, 1031/2939, 860/2703, and
1002/2864 hard samples are selected from test-clean, test-
other, dev-clean, and dev-other data sets respectively.

Table 2. WERs on different structure settings and LM size.

AM
strcuture
7(Baseline, BL)
7
7
13
BL+13-cascade
BL+residual
BL+both

LM
size
5
3
0
5
5
5
5

Test

Dev

clean
3.85
4.10
5.64
3.97
3.81
3.45
3.41

other
12.48
12.61
16.79
12.68
12.27
11.01
10.65

clean
3.77
3.89
5.47
3.83
3.75
3.43
3.39

other
11.62
11.77
16.43
11.96
11.48
10.72
10.45

Our baseline setting has 7-layer BiLSTM and 5-gram LM.
As language model size increases, WER drops accordingly.
We add a cascaded structure with 13-layer BiLSTM with 512
hidden nodes each to the baseline settings, WER drops from
3.85% to 3.81%. Enhancement on adding residual block is
signiﬁcant, WER drops from 3.85% to 3.45%. If we combine
both cascaded structure and residual block together, WER fur-
ther drops to 3.41%. To prove that the better performance of
second-level cascaded structure is not related to the deeper
LSTM layers, we conduct an experiment using all training
samples with 13-layer resBiLSTM structure only. Result is
even worse than the cascaded structure (3.97% vs 3.81%).

To investigate the effect of cascaded structure, we further
examine the performance of different models on the hard sam-
ples solely as cascaded models do not contribute to those easy
samples. Take test-clean data set as an example,we compare
the performances in Table 3. Average length for hard samples
is 24.91 words/sentence while the average is only 20.07 for all

Table 3. Comparison on all/hard samples of test-clean data.

AM
structure
7(BL)
13
+cascade
+residual
+both

LM
size
5
5
5
5
5

All
(Errors)
3.85(2024)
3.97(2089)
3.81(2001)
3.45(1815)
3.41(1792)

Hard
(Errors)
6.29(1316)
6.38(1335)
6.18(1293)
5.64(1179)
5.53(1156)

Wrong
hard/all
65.0%
63.9%
64.6%
65.0%
64.5%

Table 4. Results on different end-to-end model structures.

Model
(# parameters)
Baidu DS2 (109M)[3]
ESPnet (134M)[17]
I-Attention [18]
Residual (119M)
Both (174M)

Test

Dev

clean
5.15
4.0
3.82
3.45
3.41

other
12.73
12.8
12.76
11.01
10.65

clean
-
3.9
3.54
3.43
3.39

other
-
11.8
11.52
10.72
10.45

samples. Cascaded structure decreases WERs on wrong sam-
ples for 0.11% in both cases (6.29%/6.18%, 5.64%/5.53%).
Residual block performs better on both data sets compared
with cascaded structure. However, the relative increment on
hard samples is slightly worse than cascaded structure (65.0%
vs 64.6%), which proves cascaded models do have positive
impact on hard samples. Another notable ﬁnding is that 13-
layer single-stage structure performs better on hard samples
out of all samples relatively (63.9% vs 65.0%), however, it
performs worse absolutely compared to the baseline.

We compare our results with other end-to-end models in
Table 4. We get better result with roughly the same amount
of parameters using residual block. By adding cascaded struc-
ture, we further increase our performance.

5. CONCLUSION

This paper enhances the performances based on the work pro-
posed by Amodei [3]. By adding residual network struc-
ture in LSTM layers to extract more abstract and sophisti-
cated phoneme and semantic information, adding cascaded
model structure to categorize hard samples better, and propos-
ing new methods to speed up training process, we reach state-
of-art result on LibriSpeech corpora.

Based on the achievements we have gained, we need to fo-
cus on training an end-to-end AM+LM model using the same
corpora as current training structure actually causes informa-
tion loss when combining independent AM and LM parts.
Another potential enhancement might be ameliorating RNN
structure, such as adding frame skipping structure to capture
more semantic information. Also, our team is planning to ap-
ply the same structure on self-collected Chinese data soon.

[10] Andrew Maas, Ziang Xie, Dan Jurafsky, and Andrew
Ng,
“Lexicon-free conversational speech recognition
with neural networks,” in Proceedings of the 2015 Con-
ference of the North American Chapter of the Associa-
tion for Computational Linguistics: Human Language
Technologies, 2015, pp. 345–354.

[11] M. J. F. Gales, A. Ragni, H. Aldamarki, and C. Gau-
tier, “Support vector machines for noise robust asr,” in
Automatic Speech Recognition & Understanding, 2009.
ASRU 2009. IEEE Workshop on, 2010, pp. 205–210.

[12] Haoxiang Li, Zhe Lin, Xiaohui Shen, Jonathan Brandt,
and Gang Hua, “A convolutional neural network cas-
cade for face detection,” in Computer Vision and Pattern
Recognition, 2015, pp. 5325–5334.

[13] Yi Sun, Xiaogang Wang, and Xiaoou Tang, “Deep con-
volutional network cascade for facial point detection,”
in IEEE Conference on Computer Vision and Pattern
Recognition, 2013, pp. 3476–3483.

[14] Yonatan Belinkov and James Glass, “Analyzing hidden
representations in end-to-end automatic speech recogni-
tion systems,” 2017.

[15] Kenneth Heaﬁeld, “Kenlm: faster and smaller language
model queries,” in The Workshop on Statistical Machine
Translation, 2011, pp. 187–197.

[16] Awni Y Hannun, Andrew L Maas, Daniel Jurafsky, and
Andrew Y Ng, “First-pass large vocabulary continuous
speech recognition using bi-directional recurrent dnns,”
Computer Science, 2014.

[17] Tomoki Hayashi, Shinji Watanabe, Suyoun Kim,
Takaaki Hori, and John R. Hershey, “Espnet: end-to-end
speech processing toolkit,” https://github.com/
espnet/espnet/pull/407/commits/, 2018.

[18] Albert Zeyer, Kazuki Irie, Ralf Schl¨uter, and Her-
“Improved training of end-to-end atten-
arXiv preprint

mann Ney,
tion models for speech recognition,”
arXiv:1805.03294, 2018.

6. REFERENCES

[1] George E. Dahl, Dong Yu, Li Deng, and Alex Acero,
“Large vocabulary continuous speech recognition with
context-dependent dbn-hmms,” in IEEE International
Conference on Acoustics, Speech and Signal Process-
ing, 2011, pp. 4688–4691.

[2] Alex Graves and Navdeep Jaitly, “Towards end-to-end
speech recognition with recurrent neural networks,” in
International Conference on Machine Learning, 2014,
pp. 1764–1772.

[3] Dario Amodei, Sundaram Ananthanarayanan, Rishita
Anubhai, Jingliang Bai, Eric Battenberg, Carl Case,
Jared Casper, Bryan Catanzaro, Qiang Cheng, Guoliang
Chen, et al., “Deep speech 2: End-to-end speech recog-
nition in english and mandarin,” in International Con-
ference on Machine Learning, 2016, pp. 173–182.

[4] W Xiong, J Droppo, X Huang, F Seide, M Seltzer,
A Stolcke, D Yu, and G Zweig, “Achieving human par-
ity in conversational speech recognition,” IEEE/ACM
Transactions on Audio Speech & Language Processing,
vol. PP, no. 99, 2016.

[5] X. Liu, Y. Wang, X. Chen, M. J. F. Gales, and P. C.
Woodland, “Efﬁcient lattice rescoring using recurrent
neural network language models,” in IEEE International
Conference on Acoustics, Speech and Signal Process-
ing, 2014, pp. 4908–4912.

[6] G. E. Dahl and A. Acero,

“Context-dependent
pre-trained deep neural networks for large-vocabulary
IEEE Transactions on Audio
speech recognition,”
Speech & Language Processing, vol. 20, no. 1, pp. 30–
42, 2012.

[7] Geoffrey Hinton, Li Deng, Dong Yu, George E. Dahl,
Abdelrahman Mohamed, Navdeep Jaitly, Andrew Se-
nior, Vincent Vanhoucke, Patrick Nguyen, and Tara N.
Sainath, “Deep neural networks for acoustic modeling
in speech recognition: The shared views of four research
groups,” IEEE Signal Processing Magazine, vol. 29, no.
6, pp. 82–97, 2012.

[8] Alex Graves and Faustino Gomez,

“Connectionist
temporal classiﬁcation:labelling unsegmented sequence
data with recurrent neural networks,” in International
Conference on Machine Learning, 2006, pp. 369–376.

[9] Awni Hannun, Carl Case, Jared Casper, Bryan Catan-
zaro, Greg Diamos, Erich Elsen, Ryan Prenger, San-
jeev Satheesh, Shubho Sengupta, and Adam Coates,
“Deep speech: Scaling up end-to-end speech recogni-
tion,” Computer Science, 2014.

