Multi-rendezvous Spacecraft Trajectory
Optimization with Beam P-ACO

Lu´ıs F. Sim˜oes1, Dario Izzo2, Evert Haasdijk1, and A. E. Eiben1

1 Vrije Universiteit Amsterdam, The Netherlands
2 European Space Agency, ESTEC, The Netherlands
{luis.simoes,e.haasdijk,a.e.eiben}@vu.nl,dario.izzo@esa.int

7
1
0
2
 
r
p
A
 
3
 
 
]
E
N
.
s
c
[
 
 
1
v
2
0
7
0
0
.
4
0
7
1
:
v
i
X
r
a

Abstract. The design of spacecraft trajectories for missions visiting multiple celestial bodies is here framed
as a multi-objective bilevel optimization problem. A comparative study is performed to assess the perfor-
mance of diﬀerent Beam Search algorithms at tackling the combinatorial problem of ﬁnding the ideal
sequence of bodies. Special focus is placed on the development of a new hybridization between Beam
Search and the Population-based Ant Colony Optimization algorithm. An experimental evaluation shows
all algorithms achieving exceptional performance on a hard benchmark problem. It is found that a prop-
erly tuned deterministic Beam Search always outperforms the remaining variants. Beam P-ACO, however,
demonstrates lower parameter sensitivity, while oﬀering superior worst-case performance. Being an anytime
algorithm, it is then found to be the preferable choice for certain practical applications.

Keywords: Beam Search, Ant Colony Optimization, P-ACO, Bilevel optimization, Multi-objective opti-
mization, Spacecraft trajectories.

1 Introduction

The design of multi-rendezvous spacecraft trajectories poses a considerable challenge to aerospace engineers. This
is due, in part, to the combinatorial nature of the problem that emerges with the increase in number of bodies
to visit along a mission (e.g., planets, moons, asteroids). The complexity of the task stems from an interplay of
multiple factors under optimization, including: the decision of which of the bodies of interest to visit, the order
in which they are to be visited, and the design of the actual trajectory arcs to take the spacecraft between them.
Maximization of such a mission’s scientiﬁc return may demand for as many bodies to be visited as possible,
in the shortest possible amount of time, while consuming the lowest possible amount of propellant mass. The
underlying optimization problem can be seen as a variant of the well known Traveling Salesman Problem (TSP),
with nodes corresponding to the celestial bodies under consideration, and edge weights a function of the costs
(time and mass) to propel the spacecraft between them. These costs vary as bodies move in space along their
trajectories, but also as a function of the spacecraft’s state: a lighter spacecraft that has already shed some of
its mass is simpler to maneuver.

As evidence into the complexity, and relevance, of the above described problems, consider the following:
since 2005, the aerospace engineering community has periodically organized GTOC, the Global Trajectory Op-
timization Competition [1]. In it, diﬀerent groups have taken turns at creating “nearly-impossible” problems
of interplanetary trajectory design to pose to the community. Of the 8 competitions organized to date, 4 were
multiple-asteroid rendezvous problems of the kind considered here, and 3 others were multiple ﬂy-by problems
posing similar combinatorial optimization challenges.

In [19], a multi-objective Beam Search algorithm is described, and applied to a low-thrust model of the
GTOC7 problem. In this research, we propose a series of extensions to it. First, we provide an improved orbital
phasing indicator, and a procedure to create from it a probability distribution over candidate bodies to extend
missions with. Second, we hybridize the Beam Search procedure with the well known Ant Colony Optimization
algorithm [7]. We conclude by evaluating the resulting algorithms on a Lambert model of the GTOC5 problem
[11]. Two main research questions are investigated in this paper:

1. Can the randomization of Beam Search, via probabilistic branching choices, improve performance?
2. Does the pheromone-based positive reinforcement of sequences lead to improved performance?

This paper is organized as follows: in Sec. 2 we list related work in the combinatorial optimization of spacecraft
trajectories. Sec. 3 describes the Beam Search algorithm, and the proposed randomized variants. In Sec. 4 we
describe the GTOC5 problem used in our experiments, and in Sec. 5 the interfacing between it and the search
algorithms. Sec. 6 reports on an experimental evaluation, and Sec. 7 discusses its results. Conclusions are drawn
in Sec. 8.

Code available at https://github.com/lfsimoes/beam_paco__gtoc5.

2

L.F. Sim˜oes et al.

2 Related work

Beam Search [2,28] has emerged as the de facto standard approach to tackle the combinatorial optimization
sub-problems present in most GTOC competitions. Though at times called by other names, it is common to ﬁnd
the general architecture of a tree search that has its computational cost bounded via the selection of a limited
number of nodes to branch at each depth-level (non-selected nodes at that depth being immediately discarded).
We can ﬁnd examples of such algorithms in the winning solutions to GTOC4 [10], GTOC5 [24], and in the second
ranked solution to GTOC7 [19], which the present research builds on. The Lazy Race Tree Search described in
[20], which at the time presented the best known solution to the GTOC6 problem, can also be seen as a Beam
Search variant. In it, the “beam” is composed of all nodes, possibly originating from diﬀerent tree depths, that
fall within a given mission time window. The most promising nodes in that sliding window are branched, and
the remaining ones discarded.

Evolutionary Algorithms have been explored as an alternative to solve combinatorial problems in mission
analysis. In the GTOC5 problem considered here, for instance, [21] and [9] used Genetic Algorithms with “hidden
genes”, to evolve chromosomes encoding asteroid sequences. These approaches were however outperformed in
the GTOC5 competition by tree-based approaches. In [18] an evolutionary approach is described for designing
debris removal missions. In this highly dynamic trajectory problem, the Inver-over Genetic Algorithm was found
to provide competitive solutions to those constructed by diﬀerent approaches.

Ant Colony Optimization (ACO) [7] was used by some teams in the GTOC competitions over the years. How-
ever, to our knowledge, no scientiﬁc publication has been produced to date with the details of such deployment.
The most successful use of ACO in a GTOC competition was possibly that by the NASA/JPL team, winners of
GTOC7. According to the GTOC portal [1], a “very competitive solution was found by JPL using an Ant Colony
Optimization approach. Eventually a diﬀerent solution turned out to be better and was thus submitted”1. Other
applications of ACO algorithms to optimize the sequences of bodies to visit along a spacecraft’s trajectory can
be found in [5,4,26]. In them, the test problems over which algorithms are evaluated have few bodies to select
from (
5 bodies. In contrast, sequences of up to 17 asteroids are assembled
10), and the found sequences visit
here, from a database of 7075 available asteroids.

≈

≈

A hybridization of Beam Search and ACO was previously presented in [3]. A diﬀerent hybridization is
introduced here, “Beam P-ACO”, that diﬀers mainly in the ACO variant under use, and in being a multi-
objective algorithm.

3 Beam Search

Beam Search [2,28] is a tree search algorithm where computational cost is bounded by employing heuristics
that allow for non-promising solutions under construction to be discarded. It can be executed as a variant of
depth-ﬁrst or breadth-ﬁrst search. When operating as a variant of breadth-ﬁrst search, as is done here, Beam
Search traverses the tree one depth-level at a time. From all the solutions generated at one level, only a limited
subset (the so called “beam”) will be selected for carrying over to the next level. An evaluation of solutions’
quality determines whether they are included in the beam, or instead permanently discarded from the search.
The size of the beam is designated as the “beam width”, and is here represented as bw. The extension of partial
solutions in the beam can be performed towards all possible successor nodes, or instead towards only a limited
number, enabling further control over the search’s computational cost. A “branching factor” parameter, here
represented as bf , indicates that each solution in the beam will be extended only towards bf successor nodes,
chosen as a function of how good the solutions they lead to are estimated to be.

∗

In summary, at one level of the tree, each of the beam’s bw solutions will be expanded towards bf new nodes,
resulting in bw
bf new partial solutions. These are then evaluated, and the bw best of those will become the
beam that is carried over to the next tree level. The search process is therefore driven by two heuristics: 1) hs,
which evaluates partial solutions (a path down from the tree’s root node), and 2) he, which evaluates candidate
successor nodes for extending solutions with. The more accurately these heuristics point to the complete optimal
solution, the more successful the search will be. Beam Search being an “incomplete” search algorithm however,
the identiﬁcation of the globally optimal solution is not guaranteed [28].

3.1 Multi-objective heuristics

The ﬁrst extension we introduce to the conventional Beam Search framework is the addition of multi-objective
heuristics. That is, either hs, or he (or both) will evaluate partial solutions or candidate extensions, respectively,

1 The NASA/JPL team’s GTOC7 submission report and workshop slides, containing details of their ACO deployment,

can be found in the GTOC portal [1].

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

3

according to multiple objectives. In such a scenario, it is then necessary to employ techniques that will allow for
the ranking of alternatives, or probabilistic selection among them, that take into account the multiple evaluations.
In our current implementation, hs evaluates partial solutions according to multiple objectives, while the
evaluation of candidate extensions by he remains single-objective. Beam Search must then be able to select
at each tree level the best bw solutions from among the newly generated extensions. To that end, we employ
a Pareto dominance approach. Speciﬁcally, we apply non-dominated sorting [6] to the pool of extensions, and
include in the beam as many of the best Pareto fronts as needed to reach the beam size bw. That process will
most likely lead to a ﬁnal Pareto front whose full inclusion in the beam would exceed bw. A tie-breaker criterion
must then be deﬁned to determine which of those (equally good) solutions to keep, and which to discard (see
Sec. 5.3).

3.2 Probabilistic branching

In the “Stochastic Beam” algorithm, the beam’s construction remains deterministic, but the branching stage
will now be subjected to probabilistic decisions. Given a solution in the beam, with a probability q0 it will be
extended towards the bf nodes with best he evaluation. With a probability of 1
q0, the choice of bf nodes will
instead be a biased sampling without replacement, proportional to he. Note that through a parameter setting
of q0 = 1 the algorithm reverts to the previously described (deterministic) Beam Search.

−

Beam Search will always converge to the same solution, given the same root node. Stochastic Beam however,
can be executed multiple times, and possibly converge to diﬀerent solutions in each run. These solutions may
outperform those found by Beam Search, by including links to nodes that Beam Search incorrectly prunes, due to
ranking above the bf threshold. Non-determinism therefore provides a degree of robustness against imperfections
in the he heuristic.

3.3 Hybridization with Ant Colony Optimization

A hybridization of Beam Search with Ant Colony Optimization brings two mains changes to the algorithmic
framework: 1) multiple tree searches are now performed, in consecutive runs designated as “generations”, and 2)
positive feedback takes place, in the form of “pheromones” that change the he heuristic evaluation of candidate
successor nodes, therefore biasing the dynamics of tree searches in subsequent generations.

Of the many ACO variants in existence, we chose to hybridize with the Population-based Ant Colony Opti-
mization algorithm (P-ACO), introduced in [13,14,15,12]. A detailed analysis in [23] found it to be “competitive
to the state-of-the-art ACO algorithms with the advantage of ﬁnding good solution quality in a shorter com-
putation time”. Also, a recent thorough benchmarking of a high number of approaches to solve the Traveling
Salesman Problem found P-ACO to be the best of the tested global optimization algorithms, as well as the best
overall algorithm when seeded and hybridized with local search [27].

In “Beam P-ACO”, a partial solution at node i, with available successors S evaluates the quality of extending

towards node j by

(cid:48)
e(i, j) =
h

τ (i, j)αhe(i, j)β
s∈S τ (i, s)αhe(i, s)β

(cid:80)

where τ is the pheromone concentration along an edge, and he (known as η in the common ACO notation) is
the problem-speciﬁc heuristic. The weighting factors α and β determine the relative contributions of pheromone
and heuristic values to the branching decision. As in the previously described Stochastic Beam algorithm, with
e evaluation, while with a probability
a probability q0 the solution is extended towards the bf nodes with best h
of 1
e. A setting of α = 0
would result in all pheromone information being ignored, and Beam P-ACO would then revert to the Stochastic
Beam algorithm.

q0, that choice is instead a biased sampling without replacement proportional to h

−

(cid:48)

(cid:48)

The pheromone concentration τ along an edge takes in P-ACO discrete values in a given range [τinit, τmax].
We deﬁne these parameters as τinit = 1/(n
1) and τmax = 1, where n is the total number of nodes. This
implements the convention from [14] of having the row/column sum of initial pheromone values be 1 (assuming
a problem where revisits are disallowed, and the diagonal of the pheromone matrix is therefore 0). Given the
τinit)/k
pheromone range, and k, the maximum size of a population of top solutions, we can deﬁne τ∆ = (τmax
as the pheromone increment deposited in an edge by a solution in the population that follows it along its path. If
l solutions in the population include the edge (i, j), its pheromone concentration will then be τ (i, j) = τinit +lτ∆.

−

−

3.4 Pareto elitism

To complete the deﬁnition of Beam P-ACO, a population update model must be deﬁned, a model that handles
multi-objective evaluations produced by the hs heuristic. We propose here a variation of the method deﬁned in

4

L.F. Sim˜oes et al.

[15, Sec. 3.1]. An archive will collect the set of non-dominated solutions found so far. At the end of each tree
search, the best found solutions are merged into it. After updating the archive, the population that deﬁnes the
pheromone matrix is reset.

In standard P-ACO [13], the population is implemented as a FIFO-queue (each generation’s best solution
enters the population, possibly displacing the oldest solution it contains so as not to exceed the population size
k). We propose here instead to have one FIFO-queue per each of the problem’s n nodes, each with a size limit
of k. When resetting the population, all FIFO-queues are emptied. Then, solutions in the archive are shuﬄed,
and one by one, they are added to the population (of edges). Each edge (i, j) in those solutions will result in j
being added to the ith FIFO-queue. The ith FIFO-queue then directly maps to the ith row of the pheromone
matrix, and its contents deﬁne which nodes do pheromones most bias a solution at node i to branch towards.

If solutions visit all n nodes, as is the case in many problems (e.g., TSP), this process will result in only the
last k solutions of the shuﬄed archive adding pheromones to the population. A random unbiased sampling of k
archive solutions would then be suﬃcient. However, in problems where solutions include only some of the nodes
(such as here in the GTOC5 problem, where n = 7075, but a solution will visit < 20 nodes), only small amounts
of pheromone would be deposited, and plenty of information in the archive would be ignored. By following in
such problems the process described above, the pheromone matrix may now receive contributions from more
than k solutions, while still only receiving
k contributions at the level of each individual node. This way, in
the limit, all solutions in the archive may end up depositing pheromones.

≤

4 The GTOC5 trajectory design problem

The trajectory design problem posed in the 5th edition of the Global Trajectory Optimization Competition
(GTOC5) is used as benchmark in the current research. The full problem speciﬁcation can be found in [11]. The
problem dataset, along with additional information related to this edition of the competition, can be found in
the GTOC portal [1]. Our current work makes use of the problem model developed by the competition’s 4th
ranked team [21].

In the GTOC5 problem, a spacecraft leaves the Earth at some point along an 11-year time-window, to embark
on a 15 year (max.) mission of asteroid exploration. The spacecraft starts with a mass of 4000 kg, of which 3500
are reserved for propellant mass, and the scientiﬁc equipment used at asteroids. A total of 7075 asteroids are
available as possible targets to visit along the mission. The exploration of a single asteroid is carried out in
two stages. First, the spacecraft must rendezvous (match position and velocity) with the asteroid, and leave
there a 40 kg scientiﬁc payload. Later in the mission, the spacecraft performs a ﬂy-by of the asteroid, and sends
a 1 kg “penetrator” towards it. Upon impact, this penetrator would release a cloud of debris, that would be
investigated by the payload left there. Partial scores are given for the rendezvous and ﬂy-by maneuvers. An
asteroid on which both are performed contributes 1 point to the full score. In the problem models developed
by most teams, including the one used here, the problem is simpliﬁed by having an asteroid’s ﬂy-by maneuver
performed immediately after its rendezvous: the spacecraft departs the asteroid, moves some distance away, and
then accelerates back towards it. Under this simpliﬁcation, a trajectory that manages to complete all pairs of
maneuvers on a given sequence of m asteroids will score m points.

GTOC5 was won by a team from NASA/JPL with a score 18 trajectory [24]. In contrast, the model being used
here, with the initial trajectory conditions listed in Sec. 6.1, has only ever allowed the discovery of trajectories
with at most a score 16. Nevertheless, for the goal of evaluating the performance of algorithms that solve the
combinatorial part of the problem (ﬁnding the asteroid sequence that enables the greatest possible score), the
used model is perfectly suitable.

5 Bilevel optimization of GTOC5 trajectories

The design of GTOC5 trajectories is here tackled as a multi-objective bilevel optimization problem [25]. At an
upper level, optimization seeks to identify a good subset of asteroids, and the order in which they are to be
visited. At a lower level, each chosen pair of asteroids triggers an optimization of the trajectory leg that takes the
spacecraft between them. This section details how the diﬀerent Beam Search variants are employed for solving
the upper-level combinatorial problem, and how the lower-level process optimizes transfer legs.

5.1 Orbital phasing indicators as heuristic estimators

The problem of assembling an eﬃcient heuristic able to help select possible asteroid targets is crucial and very
diﬃcult at the same time. The ground truth (i.e. the optimal ∆V cost obtained optimizing the transfer leg) is far

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

5

|

−

1,

A

A

xt

xs

2, ∆T ) =

, where x = (cid:2) 1
|

too expensive to be be computed for all possible asteroid targets and for all states encountered along the search.
A solution to this problem was recently proposed via the development of so-called orbital phasing indicators [19].
These essentially allow to introduce for each epoch ts a metric over the set of all possible asteroids, a metric that
can, in turn, be used to detect asteroid neighborhoods eﬃciently. It was shown in [19] how the orbital indicator,
∆T r(ts)(cid:3) and r(ts) and v(ts) correspond
deﬁned as do(
to the asteroid ephemeris, positively correlates to some extent to the ground truth (i.e. the asteroids that are
actually easy to reach via an orbital transfer). It essentially considers a snapshot at ts of the asteroid population
and, using a zero order approximation for the dynamics, predicts what asteroids are the closest in terms of
transfer ∆V . As such, it is bound to neglect the known state of the asteroid population at the arrival time tt,
which seems as a loss of available information. A simple modiﬁcation to the orbital indicator, though, allows
to account for the ﬁnal asteroid geometry and thus to improve the overall correlation to the ground truth. In
essence, one can consider the orbital indicator backward in time, starting from the arrival asteroid, to get a new
indicator (note that asteroid velocities will have to have their sign inverted). The average between the two, i.e.
the orbital indicator and the backward orbital indicator, is what we use here and call improved orbital indicator,
deﬁned as do(cid:48)(

∆T r(ts) + v(ts), 1

xs

xt

1,

|

−

, where
|

A

A

2, ∆T ) =
(cid:20) 1
∆T

x =

r(ts) + v(ts),

r(ts),

r(tt + ∆T )

v(tt + ∆T ),

1
∆T

1
∆T

−

(cid:21)
r(tt + ∆T )

1
∆T

i,

A

A

i, we compute do(cid:48)(

For every node i being branched during the search, to which corresponds a trajectory presently at asteroid
j, ∆T ) for all of the problem’s n nodes, assuming a reference transfer time of ∆T = 125
A
p(i, j)/n)γ, where p(i, j)
days. From it we build a probability distribution over successor nodes as he(i, j) = (1
j, ∆T ) among all estimated costs. This results in a selection probability
is the rank in
that decays exponentially with increasing rank, at a rate tuned through γ. A setting of γ = 50 is used in this
problem. There is then a
84%
among the 250 best. Finally, the problem disallows revisits to asteroids. So, for any node i, he(i, j) = 0 if j was
already visited at any previous point.

30% chance of branching towards an asteroid ranked among the 50 best, and

0, . . . , n
{

of do(cid:48)(

1
}

A

A

−

≈

−

≈

i,

5.2 Optimization of transfer legs

During the tree search, branching a partial solution into a given node triggers an optimization process. Its end
result will be the deﬁnition of the transfer leg that allows the spacecraft to rendezvous with the corresponding
asteroid. Adding the new leg extends the mission’s trajectory, which can then be reevaluated by the hs heuristic.
In the approach followed here, only the trajectory’s rendezvous legs need to be optimized. The cost estimates
for self-ﬂy-by legs are instead approximated by a linear acceleration model [21, Sec. 3].

≈

Each transfer will have a duration in a set time window of [60, 500] days. A grid of 50 evenly spaced values
deﬁnes the candidate transfer times, ∆T (
9 days separation between grid points). For each ∆T , we employ
PyKEP’s [16]2 multiple revolution Lambert solver [17,19] to design a trajectory arc having that exact duration.
If multiple revolution solutions exist for a given ∆T , the one with lowest ∆V is chosen. Two constraints are
imposed: 1) ∆T should exceed the parabolic time of ﬂight given by Barker’s equation3, and 2) the leg’s maximum
acceleration should be < 90% of the maximum supported by the spacecraft. These constraints lead many transfers
to have no feasible solution, for any ∆T (the targeted asteroid is simply unreachable). From all ∆T points in the
grid that do have a feasible solution, the one with lowest ∆V is chosen to deﬁne the new rendezvous leg. In this
approach, the optimization of one leg then equates to ﬁnding the solutions to at most 50 Lambert’s problems.
Note that this ﬁnal ∆V cost is the ground-truth to the do(cid:48) indicator described in the previous section, from
which he is deﬁned. Note also that we take here a greedy choice of ∆T , imposing in that way a transfer leg upon
the combinatorial search problem that might in the long term be sub-optimal with respect to its own goals.

5.3 Trajectory evaluation, ranking, and selection

Trajectories are evaluated by hs with respect to three criteria: 1) the mission’s score, 2) the total mass required
for propellant, and scientiﬁc equipment left at asteroids, and 3) the total time of ﬂight. The ideal mission will
have the greatest possible score, while requiring the lowest possible amounts of mass and time.

As mentioned in Sec. 3.1, a Pareto dominance approach [6] is used for handling the multiple objectives.
However, in this problem mass and time evaluations are only fairly comparable among trajectories that share
the same score. As such, ranking a set of trajectories involves 1) binning trajectories according to their score, and

2 http://esa.github.io/pykep/
3 Legs failing this check are immediately discarded, saving computation time that would otherwise be spent generating

Lambert arcs with excessive ∆V .

6

L.F. Sim˜oes et al.

2) applying non-dominated sorting [6] over the mass and time costs of trajectories within each bin. Identifying
the top trajectories in a given set takes place by iterating through bins in descending order of score, gradually
extracting their Pareto fronts. If only a subset of a Pareto front’s trajectories is required, those with lowest mass
cost are favored.

In a tree search, this process is applied at each depth-level to construct the beam with the best bw of the
newly extended solutions. Before that, however, hs is used for pruning nodes corresponding to missions that
require > 3500 kg, or > 15 years. Should that result in an empty pool of extended solutions, or the pool
otherwise be empty because no feasible transfer legs were found, the tree search has then reached its ﬁnal level
and is terminated. The beam of solutions carried over from the previous tree level will then be its ﬁnal output.
In Beam P-ACO, this signals the end of a generation. The contents of that ﬁnal beam are then merged with
the archive of non-dominated solutions found so far. By applying the previously described ranking process, the
archive will always be a Pareto front of trajectories that all share the maximum score reached to date. Beam
P-ACO will at this point refresh pheromones. Note that the combinatorial problem is asymmetric: an edge (i, j)
present in a good solution is not predictive of an edge (j, i) being likely to lead to good solutions. As such, an
(i, j) edge in an archived solution only results in pheromones along the (i, j) direction.

6 Experimental evaluation

An experimental evaluation was carried out to assess the performance of the diﬀerent Beam Search variants,
using the GTOC5 problem as a test case. Performance is here evaluated in terms of multiple criteria. Primarily,
we care about search algorithms that enable the consistent discovery of asteroid sequences having the greatest
possible length (score). Among equally scored missions, we care for the best possible coverage of the Pareto front
of mass and time costs required to achieve such score. Finally, these considerations must be traded-oﬀ against
the computational cost to obtain such solutions.

6.1 Setup

We adopt as measure of computational cost the number of trajectory legs optimized throughout the search.
This is in practice the main performance bottleneck, especially if instead of a Lambert model one were to use a
low-thrust one. A threshold of 100000 optimized legs was used as stopping criterion.

The performance of deterministic Beam Search was evaluated over a dense grid of settings for the beam width
(bw) and branching factor (bf ) parameters. In total, 118 diﬀerent setups were evaluated, all having upfront an
estimated cost of
100000 optimized legs required in order to complete execution at tree depth 16, where
missions reach and fully score the 16th asteroid (see Fig. 1). Being a deterministic algorithm, only a single run
was executed per setup.

≤

Stochastic Beam and Beam P-ACO were evaluated under the 5 diﬀerent conﬁgurations of bf and bw high-
lighted in red in Fig. 1. Being stochastic algorithms, 100 independent runs were performed per setup. Determin-
istic branching decisions were taken with a probability of q0 = 0.5 (q0 = 1 in Beam Search). In Beam P-ACO,
(cid:48)
pheromone and heuristic values contributed equally to the h
e heuristic: α = β = 1.0 (in the other Beam Search
variants, implicitly α = 0.0). Pheromone concentrations were limited to at most k = 3 contributions to each
node.

All tree searches reported here had the same root node. Its initial conditions were originally obtained during
the GTOC5 competition through a time-optimal low-thrust optimization of the launch leg, as described in [21,
Sec. 2] and exempliﬁed in [16, Sec. 6.1]. After applying the linear model to deﬁne the self-ﬂy-by leg, the initial
state is then a trajectory that has already scored 1 point at asteroid 2001 GP2 (id: 1712), and is ready to depart
from it at epoch 59325.360 MJD, having already expended 253.518 kg and 198.155 days from the total budgets.

6.2 Results

The results obtained in the experimental evaluation are shown in Figures 1–4. Analyses into the quality of
solutions found in a run consider their hs evaluations, in particular, the extent to which they minimize mass
and time costs. Though missions of score 17 were found in these experiments, they were only rarely found, and
furthermore only a single distinct mission was ever found with that score. Therefore, analyses into the quality of
solutions found consider exclusively the score 16 missions found in runs. Speciﬁcally, we evaluate the Pareto fronts
of score 16 missions found, and measure their coverage of the objective space using the hypervolume indicator
[29] – a measure of the total area of objective space dominated by points in the Pareto front. A reference point
of 3500 kg and 15 years is used in all hypervolume calculations, corresponding to the limits set forth in the

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

7

Fig. 1. Beam Search results from the parameter sweep over beam width (bw) and branching factor (bf ) conﬁgurations
(118 setups in total, with costs below the threshold of 100000 optimized trajectory legs). Darker is better. Highlighted in
red: conﬁgurations used in the Stochastic Beam and Beam P-ACO experiments.

problem speciﬁcation. Runs that do not ﬁnd any score 16 mission, and therefore have an empty Pareto front,
have a hypervolume of 0.0.

≈

Parameter sweep of Beam Search conﬁgurations: the results from these experiments are shown in
Fig. 1. Fig. 1(a) shows the highest score reached among the missions designed in each run. Fig. 1(b) shows the
hypervolume of the Pareto front of mass and time costs in score 16 missions found in each run. Fig. 1(c) shows
the prevalence of unfeasible solutions in the continuous search spaces of asteroid transfers. In the setups that
23% of the attempted asteroid transfers had a feasible solution.
reached score 17, for instance, on average only
Quantity of top solutions: Fig. 2 shows the results from the evaluation of the quantity of score 16 or
17 solutions found by each algorithm over time. Only distinct trajectories count here to a run’s totals – two
trajectories are equal if their asteroid sequence is exactly the same. The three plots shown correspond, from
left to right, to the results from Beam Search, Stochastic Beam, and Beam P-ACO. Fig. 2(a) shows one curve
for each of Beam Search’s 118 evaluated setups. The algorithm being deterministic, each curve depicts also
one single run. Overlaid in this plot is the Pareto front of cost-beneﬁt trade-oﬀs attainable through diﬀerent
parameter settings: it shows the minimum number of trajectory legs that need to be optimized to obtain diﬀerent
amounts of top scoring trajectories. This Pareto front is replicated in the other two plots to allow a performance
comparison between the deterministic and randomized Beam Search variants. The “hooks” shape seen, especially
in Fig. 2(a), results from the way Beam Search operates: most of its execution time is spent gradually descending
through the tree, level by level. Eventually, the search reaches depth 15, at which point each branching event
possibly leads to a score 16 solution being found. Hence, the sudden explosion in the total count. The plots for
Stochastic Beam and Beam P-ACO also display this eﬀect, but in them values are averaged over 100 runs, and
consecutive tree searches (generations) are chained together.

Quality of top solutions: Figures 3 and 4 show the results from the evaluation of the quality of score 16
solutions found by each algorithm over time. Fig. 3 is structured in the same way as Fig. 2, so the description
made above for it also applies here. Fig. 3 shows how the total dominated area of objective space (hypervolume)
grows over time, as new score 16 trajectories are found and enter the Pareto front. Fig. 4 takes a closer look at
the setup bw = 20, bf = 125, over which both randomized Beam Search algorithms are seen in Fig. 3 reaching
median performance (out of the ﬁve evaluated setups). The plots shown are Empirical Attainment Functions
(EAFs) [8], which depict the likelihood of objective space vectors being dominated (or matched) in an algorithm’s
run. It aggregates into one visualization the ﬁnal Pareto fronts of score 16 trajectories found across all 100 runs.
In Fig. 4(a–b), the boundaries of the shaded areas show the 0.25, 0.5 and 0.75 “attainment surfaces”. In other
words, the areas having at least 25, 50 or 75% chance of being attained (dominated or matched) by points in a
run’s ﬁnal Pareto front. Fig. 4(c) takes the diﬀerence between the EAFs for Beam P-ACO and Stochastic Beam,
and shows how they compare in terms of likelihood to attain diﬀerent areas of objective space, making clear the
extent to which Beam P-ACO outperforms Stochastic Beam. The Pareto front with greatest hypervolume found
by deterministic Beam Search is shown for reference.

7 Analysis & discussion

Conceptually, we showed in this research a formal equivalence between four combinatorial optimization algo-
rithms: Beam Search, Stochastic Beam, Beam P-ACO, and P-ACO. We demonstrated how they can all be
implemented in the same algorithm, and made accessible through minor parameter changes.

A surprising result, that validates the introduced phasing indicator, as well as the baseline multi-objective
Beam Search algorithm employed here, was the discovery of a score 17 mission (17 asteroids visited, and fully

8

L.F. Sim˜oes et al.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 2. Quantity of top solutions: cumulative number of distinct trajectories of score 16 or 17 found over time. Note the
change of scale in the vertical axis.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 3. Quality of top solutions: growth of the dominated area of objective space over time (hypervolume of the Pareto
front of score 16 trajectories found so far).

investigated). Searches over this model of the GTOC5 problem, using these same initial conditions, had previously
only reached a maximum score of 16 [21]. Furthermore, those searches, employing a Branch & Prune tree search
algorithm, took days to complete during the GTOC5 competition. The Beam Search variants under consideration
could all ﬁnd that single score 17 mission in runs lasting 10 to 20 minutes. Pure P-ACO is the exception here,
having never surpassed a score 15 in our experiments (with a bf = 1, the high chance of an asteroid transfer’s
optimization problem not having a feasible solution greatly limits performance).

The ﬁrst research question in Sec. 1 called for a demonstration of examples where randomized Beam Search
variants would outperform the deterministic approach. If we evaluate in terms of mean performance, then, as we
can see from Figures 2–3, the current experimental evaluation could not ﬁnd any such cases. At all computational
cost thresholds we can ﬁnd deterministic setups outperforming both of the randomized Beam Search variants,
both in the quantity of score 16 solutions found, and in their quality. The deterministic algorithm was tuned to
a considerably greater extent than the randomized ones (118 setups, against only 5), so it is possible that we
are presenting a skewed view of each algorithm’s capabilities. Alternatively, it may be that the speciﬁc problem
we consider here is so resource-constrained, that the construction of long asteroid sequences actually demands
for greedy branching decisions to be taken at every single step. In such a case, the search will not beneﬁt from
the greater tolerance for local sub-optimality present in the randomized Beam Search variants.

The second research question in Sec. 1 considers how the addition of feedback (pheromones) in Beam P-ACO
changes performance, by comparison with Stochastic Beam, where search proceeds along multiple independent
generations with no feedback between them. Figures 2–4 show a clear positive eﬀect of feedback on performance,
both in the quantity and quality of top solutions found. This eﬀect is seen to be larger the smaller the branching
factor is. In other words, the greater the branching factor, the likelier it is for good solutions to be identiﬁed in
a single generation, and thus the lower the beneﬁt from feedback.

An identical comparison between randomized Beam Search variants, with and without pheromone updates,
can be found in [3, Sec. 6.2] (for a diﬀerent hybrid algorithm, and diﬀerent problems). There, pheromones are also
found to improve performance, though in small amounts. The current research goes beyond the analysis in [3] by
uncovering the inverse relationship between branching factor and beneﬁt from pheromones, and in demonstrating
the superior performance of deterministic Beam Search over the randomized variants, given proper tuning.

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

9

(a) Stochastic Beam

(b) Beam P-ACO

(c) Performance diﬀerence

Fig. 4. Empirical Attainment Functions: probabilities of objective space vectors being dominated (or matched) in an
algorithm’s run. The darker a region is, the likelier it is that in a run a solution will be found that dominates it. Considers
the Pareto fronts of score 16 trajectories found up to the 100000 optimized legs threshold.

Overall, an apt description of the behaviours displayed by the randomized algorithms is that they approximate
the performance of deterministic Beam Search setups that use larger beam widths and branching factors –
probabilistic branching eﬀectively picks a subset of the successor nodes that deterministic Beam Search with
larger branching factors would follow. The eventual success or failure of a run will then depend on how well those
decisions align with those a better informed algorithm would take. This can be seen on display in Fig. 4. There,
we see that in the extreme a randomized Beam Search run can closely approximate the Pareto front of score 16
trajectories found by an “optimally” tuned deterministic Beam Search (with a bf = 125, less than half of the
bf = 275 needed in the deterministic setting). However, it can also fail to ﬁnd a single score 16 trajectory: 7 of
the 100 runs in Fig. 4(a), and 4 in Fig. 4(b) could only reach a score 15, thus ending in this analysis with a min.
hypervolume of 0.0. Overall, the median hypervolume of 52.75 reached by Beam P-ACO in Fig. 4(b) is higher
than that reached in
60% of the 118 deterministic Beam Search setups, and also higher than that reached in
50% of the 32 deterministic setups that had equal or larger beam width and branching factors.

≈

In a real setting, in the preliminary design phase, missions would be constructed not from a single set of initial
conditions, as done here, but from a great number of them, possibly numbering in the thousands. Being anytime
algorithms, the randomized Beam Search variants investigated here can be employed in a racing approach [22],
with multiple tree searches being executed in parallel. Computational eﬀort would then be dynamically allocated
across searches, as a function of the growing statistical evidence as to which searches lead to better missions.
In such a setting, the randomized Beam search variants would be preferable choices, over the deterministic
algorithm.

8 Conclusion

We considered here a hard real-world problem of spacecraft trajectory design, featuring an interplay of combi-
natorial and (constrained) continuous optimization sub-problems, dealing at diﬀerent levels with uncertain and
multi-objective quality functions. In this challenging domain, we investigated a number of extensions to Beam
Search, the traditionally used approach to solve such problems. We provided an improved orbital phasing indi-
cator, and its transformation into a probability distribution over candidate bodies to extend missions with. We
then hybridized the search process with the well known Ant Colony Optimization algorithm, and investigated
the behaviours of the resulting randomized Beam Search variants. We found them to have lower sensitivity to
the beam width and branching factor parameter settings, while oﬀering in each generation a partially-informed
approximation to the behaviours of deterministic setups running at higher computational costs.

Acknowledgment

References

& Sons, Inc. (1987)

Lu´ıs F. Sim˜oes was supported by FCT (Minist´erio da Ciˆencia e Tecnologia) Fellowship SFRH/BD/84381/2012.

1. Global Trajectory Optimization Competition portal, http://sophia.estec.esa.int/gtoc_portal/
2. Bisiani, R.: Beam search. In: Shapiro, S.C. (ed.) Encyclopedia of Artiﬁcial Intelligence, vol. 1, pp. 56–58. John Wiley

10

L.F. Sim˜oes et al.

3. Blum, C.: Beam-ACO–Hybridizing ant colony optimization with beam search: an application to open shop scheduling.

Computers & Operations Research 32(6), 1565–1591 (2005)

4. Ceriotti, M., Vasile, M.: Automated multigravity assist trajectory planning with a modiﬁed ant colony algorithm.

Journal of Aerospace Computing, Information, and Communication 7(9), 261–293 (2010)

5. Ceriotti, M., Vasile, M.: MGA trajectory planning with an ACO-inspired algorithm. Acta Astronautica 67(9–10),

6. Deb, K.: Multi-Objective Optimization using Evolutionary Algorithms. John Wiley & Sons, Inc., Chichester, England

1202–1217 (2010)

(2001)

7. Dorigo, M., St¨utzle, T.: Ant Colony Optimization. A Bradford Book, MIT Press, Cambridge, MA (2004)
8. Grunert da Fonseca, V., Fonseca, C.M., Hall, A.O.: Inferential performance assessment of stochastic optimisers and
the attainment function. In: Zitzler, E., Thiele, L., Deb, K., Coello Coello, C.A., Corne, D. (eds.) Evolutionary
Multi-Criterion Optimization: First International Conference, EMO 2001, pp. 213–225. Springer, Berlin, Heidelberg
(2001)

9. Gad, A.H.: Space trajectories optimization using variable-chromosome-length genetic algorithms. Ph.D. thesis, Michi-

gan Technological University (2011)

10. Grigoriev, I.S., Zapletin, M.P.: Choosing promising sequences of asteroids. Automation and Remote Control 74(8),

11. Grigoriev, I.S., Zapletin, M.P.: GTOC5: Problem statement and notes on solution veriﬁcation. Acta Futura 8, 9–19

1284–1296 (2013)

(2014)

12. Guntsch, M.: Ant algorithms in stochastic and multi-criteria environments. Ph.D. thesis, Karlsruher Institut f¨ur

Technologie (2004), http://d-nb.info/1013929756

13. Guntsch, M., Middendorf, M.: A Population Based Approach for ACO. In: Cagnoni, S., Gottlieb, J., Hart, E.,
Middendorf, M., Raidl, G.R. (eds.) Applications of Evolutionary Computing: EvoWorkshops 2002: EvoCOP, EvoIASP,
EvoSTIM/EvoPLAN. pp. 72–81. Springer, Berlin, Heidelberg (2002)

14. Guntsch, M., Middendorf, M.: Applying Population Based ACO to Dynamic Optimization Problems. In: Dorigo, M.,
Di Caro, G., Sampels, M. (eds.) Ant Algorithms: Third International Workshop, ANTS 2002. pp. 111–122. Springer,
Berlin, Heidelberg (2002)

15. Guntsch, M., Middendorf, M.: Solving Multi-criteria Optimization Problems with Population-Based ACO. In: Fon-
seca, C.M., Fleming, P.J., Zitzler, E., Thiele, L., Deb, K. (eds.) Evolutionary Multi-Criterion Optimization: Second
International Conference, EMO 2003. pp. 464–478. Springer, Berlin, Heidelberg (2003)

16. Izzo, D.: PyGMO and PyKEP: Open Source Tools for Massively Parallel Optimization in Astrodynamics (the case
of interplanetary trajectory optimization). In: 5th International Conference on Astrodynamics Tools and Techniques
(ICATT) (2012)

17. Izzo, D.: Revisiting Lambert’s problem. Celestial Mechanics and Dynamical Astronomy 121(1), 1–15 (2015)
18. Izzo, D., Getzner, I., Hennes, D., Sim˜oes, L.F.: Evolving Solutions to TSP Variants for Active Space Debris Removal.
In: Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation. pp. 1207–1214. ACM
(2015)

19. Izzo, D., Hennes, D., Sim˜oes, L.F., M¨artens, M.: Designing complex interplanetary trajectories for the global trajectory
optimization competitions. In: Fasano, G., Pint´er, J.D. (eds.) Space Engineering: Modeling and Optimization with
Case Studies, pp. 151–176. Springer (2016)

20. Izzo, D., Sim˜oes, L.F., M¨artens, M., de Croon, G.C.H.E., Heritier, A., Yam, C.H.: Search for a Grand Tour of the
Jupiter Galilean Moons. In: Genetic and Evolutionary Computation Conference (GECCO 2013). pp. 1301–1308. ACM
(2013)

21. Izzo, D., Sim˜oes, L.F., Yam, C.H., Biscani, F., Di Lorenzo, D., Addis, B., Cassioli, A.: GTOC5: Results from the

European Space Agency and University of Florence. Acta Futura 8, 45–55 (2014)

22. Maron, O., Moore, A.W.: The racing algorithm: Model selection for lazy learners. In: Aha, D.W. (ed.) Lazy Learning,

pp. 193–225. Springer Netherlands (1997)

23. Oliveira, S., Hussin, M.S., St¨utzle, T., Roli, A., Dorigo, M.: A Detailed Analysis of the Population-Based Ant Colony

Optimization Algorithm for the TSP and the QAP. Tech. Rep. TR/IRIDIA/2011-006, IRIDIA (Feb 2011)

24. Petropoulos, A.E., Bonﬁglio, E.P., Grebow, D.J., Lam, T., Parker, J.S., Arrieta, J., Landau, D.F., Anderson, R.L.,
Gustafson, E.D., Whiﬀen, G.J., Finlayson, P.A., Sims, J.A.: GTOC5: Results from the Jet Propulsion Laboratory.
Acta Futura 8, 21–27 (2014)

25. Sinha, A., Malo, P., Deb, K.: Evolutionary bilevel optimization: An introduction and recent advances. In: Bechikh,
S., Datta, R., Gupta, A. (eds.) Recent Advances in Evolutionary Multi-objective Optimization, pp. 71–103. Springer
(2017)

26. Stuart, J.R., Howell, K.C., Wilson, R.S.: Design of end-to-end trojan asteroid rendezvous tours incorporating scientiﬁc

value. Journal of Spacecraft and Rockets 53(2), 278–288 (2016)

27. Weise, T., Chiong, R., L¨assig, J., Tang, K., Tsutsui, S., Chen, W., Michalewicz, Z., Yao, X.: Benchmarking optimiza-
tion algorithms: An open source framework for the traveling salesman problem. IEEE Computational Intelligence
Magazine 9(3), 40–52 (2014)

28. Wilt, C.M., Thayer, J.T., Ruml, W.: A comparison of greedy search algorithms. In: Proceedings of the Third Annual

Symposium on Combinatorial Search (SOCS-10). pp. 129–136 (2010)

29. Zitzler, E., Thiele, L., Laumanns, M., Fonseca, C.M., Grunert da Fonseca, V.: Performance assessment of multiob-
jective optimizers: an analysis and review. IEEE Transactions on Evolutionary Computation 7(2), 117–132 (2003)

Multi-rendezvous Spacecraft Trajectory
Optimization with Beam P-ACO

Lu´ıs F. Sim˜oes1, Dario Izzo2, Evert Haasdijk1, and A. E. Eiben1

1 Vrije Universiteit Amsterdam, The Netherlands
2 European Space Agency, ESTEC, The Netherlands
{luis.simoes,e.haasdijk,a.e.eiben}@vu.nl,dario.izzo@esa.int

7
1
0
2
 
r
p
A
 
3
 
 
]
E
N
.
s
c
[
 
 
1
v
2
0
7
0
0
.
4
0
7
1
:
v
i
X
r
a

Abstract. The design of spacecraft trajectories for missions visiting multiple celestial bodies is here framed
as a multi-objective bilevel optimization problem. A comparative study is performed to assess the perfor-
mance of diﬀerent Beam Search algorithms at tackling the combinatorial problem of ﬁnding the ideal
sequence of bodies. Special focus is placed on the development of a new hybridization between Beam
Search and the Population-based Ant Colony Optimization algorithm. An experimental evaluation shows
all algorithms achieving exceptional performance on a hard benchmark problem. It is found that a prop-
erly tuned deterministic Beam Search always outperforms the remaining variants. Beam P-ACO, however,
demonstrates lower parameter sensitivity, while oﬀering superior worst-case performance. Being an anytime
algorithm, it is then found to be the preferable choice for certain practical applications.

Keywords: Beam Search, Ant Colony Optimization, P-ACO, Bilevel optimization, Multi-objective opti-
mization, Spacecraft trajectories.

1 Introduction

The design of multi-rendezvous spacecraft trajectories poses a considerable challenge to aerospace engineers. This
is due, in part, to the combinatorial nature of the problem that emerges with the increase in number of bodies
to visit along a mission (e.g., planets, moons, asteroids). The complexity of the task stems from an interplay of
multiple factors under optimization, including: the decision of which of the bodies of interest to visit, the order
in which they are to be visited, and the design of the actual trajectory arcs to take the spacecraft between them.
Maximization of such a mission’s scientiﬁc return may demand for as many bodies to be visited as possible,
in the shortest possible amount of time, while consuming the lowest possible amount of propellant mass. The
underlying optimization problem can be seen as a variant of the well known Traveling Salesman Problem (TSP),
with nodes corresponding to the celestial bodies under consideration, and edge weights a function of the costs
(time and mass) to propel the spacecraft between them. These costs vary as bodies move in space along their
trajectories, but also as a function of the spacecraft’s state: a lighter spacecraft that has already shed some of
its mass is simpler to maneuver.

As evidence into the complexity, and relevance, of the above described problems, consider the following:
since 2005, the aerospace engineering community has periodically organized GTOC, the Global Trajectory Op-
timization Competition [1]. In it, diﬀerent groups have taken turns at creating “nearly-impossible” problems
of interplanetary trajectory design to pose to the community. Of the 8 competitions organized to date, 4 were
multiple-asteroid rendezvous problems of the kind considered here, and 3 others were multiple ﬂy-by problems
posing similar combinatorial optimization challenges.

In [19], a multi-objective Beam Search algorithm is described, and applied to a low-thrust model of the
GTOC7 problem. In this research, we propose a series of extensions to it. First, we provide an improved orbital
phasing indicator, and a procedure to create from it a probability distribution over candidate bodies to extend
missions with. Second, we hybridize the Beam Search procedure with the well known Ant Colony Optimization
algorithm [7]. We conclude by evaluating the resulting algorithms on a Lambert model of the GTOC5 problem
[11]. Two main research questions are investigated in this paper:

1. Can the randomization of Beam Search, via probabilistic branching choices, improve performance?
2. Does the pheromone-based positive reinforcement of sequences lead to improved performance?

This paper is organized as follows: in Sec. 2 we list related work in the combinatorial optimization of spacecraft
trajectories. Sec. 3 describes the Beam Search algorithm, and the proposed randomized variants. In Sec. 4 we
describe the GTOC5 problem used in our experiments, and in Sec. 5 the interfacing between it and the search
algorithms. Sec. 6 reports on an experimental evaluation, and Sec. 7 discusses its results. Conclusions are drawn
in Sec. 8.

Code available at https://github.com/lfsimoes/beam_paco__gtoc5.

2

L.F. Sim˜oes et al.

2 Related work

Beam Search [2,28] has emerged as the de facto standard approach to tackle the combinatorial optimization
sub-problems present in most GTOC competitions. Though at times called by other names, it is common to ﬁnd
the general architecture of a tree search that has its computational cost bounded via the selection of a limited
number of nodes to branch at each depth-level (non-selected nodes at that depth being immediately discarded).
We can ﬁnd examples of such algorithms in the winning solutions to GTOC4 [10], GTOC5 [24], and in the second
ranked solution to GTOC7 [19], which the present research builds on. The Lazy Race Tree Search described in
[20], which at the time presented the best known solution to the GTOC6 problem, can also be seen as a Beam
Search variant. In it, the “beam” is composed of all nodes, possibly originating from diﬀerent tree depths, that
fall within a given mission time window. The most promising nodes in that sliding window are branched, and
the remaining ones discarded.

Evolutionary Algorithms have been explored as an alternative to solve combinatorial problems in mission
analysis. In the GTOC5 problem considered here, for instance, [21] and [9] used Genetic Algorithms with “hidden
genes”, to evolve chromosomes encoding asteroid sequences. These approaches were however outperformed in
the GTOC5 competition by tree-based approaches. In [18] an evolutionary approach is described for designing
debris removal missions. In this highly dynamic trajectory problem, the Inver-over Genetic Algorithm was found
to provide competitive solutions to those constructed by diﬀerent approaches.

Ant Colony Optimization (ACO) [7] was used by some teams in the GTOC competitions over the years. How-
ever, to our knowledge, no scientiﬁc publication has been produced to date with the details of such deployment.
The most successful use of ACO in a GTOC competition was possibly that by the NASA/JPL team, winners of
GTOC7. According to the GTOC portal [1], a “very competitive solution was found by JPL using an Ant Colony
Optimization approach. Eventually a diﬀerent solution turned out to be better and was thus submitted”1. Other
applications of ACO algorithms to optimize the sequences of bodies to visit along a spacecraft’s trajectory can
be found in [5,4,26]. In them, the test problems over which algorithms are evaluated have few bodies to select
from (
5 bodies. In contrast, sequences of up to 17 asteroids are assembled
10), and the found sequences visit
here, from a database of 7075 available asteroids.

≈

≈

A hybridization of Beam Search and ACO was previously presented in [3]. A diﬀerent hybridization is
introduced here, “Beam P-ACO”, that diﬀers mainly in the ACO variant under use, and in being a multi-
objective algorithm.

3 Beam Search

Beam Search [2,28] is a tree search algorithm where computational cost is bounded by employing heuristics
that allow for non-promising solutions under construction to be discarded. It can be executed as a variant of
depth-ﬁrst or breadth-ﬁrst search. When operating as a variant of breadth-ﬁrst search, as is done here, Beam
Search traverses the tree one depth-level at a time. From all the solutions generated at one level, only a limited
subset (the so called “beam”) will be selected for carrying over to the next level. An evaluation of solutions’
quality determines whether they are included in the beam, or instead permanently discarded from the search.
The size of the beam is designated as the “beam width”, and is here represented as bw. The extension of partial
solutions in the beam can be performed towards all possible successor nodes, or instead towards only a limited
number, enabling further control over the search’s computational cost. A “branching factor” parameter, here
represented as bf , indicates that each solution in the beam will be extended only towards bf successor nodes,
chosen as a function of how good the solutions they lead to are estimated to be.

∗

In summary, at one level of the tree, each of the beam’s bw solutions will be expanded towards bf new nodes,
resulting in bw
bf new partial solutions. These are then evaluated, and the bw best of those will become the
beam that is carried over to the next tree level. The search process is therefore driven by two heuristics: 1) hs,
which evaluates partial solutions (a path down from the tree’s root node), and 2) he, which evaluates candidate
successor nodes for extending solutions with. The more accurately these heuristics point to the complete optimal
solution, the more successful the search will be. Beam Search being an “incomplete” search algorithm however,
the identiﬁcation of the globally optimal solution is not guaranteed [28].

3.1 Multi-objective heuristics

The ﬁrst extension we introduce to the conventional Beam Search framework is the addition of multi-objective
heuristics. That is, either hs, or he (or both) will evaluate partial solutions or candidate extensions, respectively,

1 The NASA/JPL team’s GTOC7 submission report and workshop slides, containing details of their ACO deployment,

can be found in the GTOC portal [1].

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

3

according to multiple objectives. In such a scenario, it is then necessary to employ techniques that will allow for
the ranking of alternatives, or probabilistic selection among them, that take into account the multiple evaluations.
In our current implementation, hs evaluates partial solutions according to multiple objectives, while the
evaluation of candidate extensions by he remains single-objective. Beam Search must then be able to select
at each tree level the best bw solutions from among the newly generated extensions. To that end, we employ
a Pareto dominance approach. Speciﬁcally, we apply non-dominated sorting [6] to the pool of extensions, and
include in the beam as many of the best Pareto fronts as needed to reach the beam size bw. That process will
most likely lead to a ﬁnal Pareto front whose full inclusion in the beam would exceed bw. A tie-breaker criterion
must then be deﬁned to determine which of those (equally good) solutions to keep, and which to discard (see
Sec. 5.3).

3.2 Probabilistic branching

In the “Stochastic Beam” algorithm, the beam’s construction remains deterministic, but the branching stage
will now be subjected to probabilistic decisions. Given a solution in the beam, with a probability q0 it will be
extended towards the bf nodes with best he evaluation. With a probability of 1
q0, the choice of bf nodes will
instead be a biased sampling without replacement, proportional to he. Note that through a parameter setting
of q0 = 1 the algorithm reverts to the previously described (deterministic) Beam Search.

−

Beam Search will always converge to the same solution, given the same root node. Stochastic Beam however,
can be executed multiple times, and possibly converge to diﬀerent solutions in each run. These solutions may
outperform those found by Beam Search, by including links to nodes that Beam Search incorrectly prunes, due to
ranking above the bf threshold. Non-determinism therefore provides a degree of robustness against imperfections
in the he heuristic.

3.3 Hybridization with Ant Colony Optimization

A hybridization of Beam Search with Ant Colony Optimization brings two mains changes to the algorithmic
framework: 1) multiple tree searches are now performed, in consecutive runs designated as “generations”, and 2)
positive feedback takes place, in the form of “pheromones” that change the he heuristic evaluation of candidate
successor nodes, therefore biasing the dynamics of tree searches in subsequent generations.

Of the many ACO variants in existence, we chose to hybridize with the Population-based Ant Colony Opti-
mization algorithm (P-ACO), introduced in [13,14,15,12]. A detailed analysis in [23] found it to be “competitive
to the state-of-the-art ACO algorithms with the advantage of ﬁnding good solution quality in a shorter com-
putation time”. Also, a recent thorough benchmarking of a high number of approaches to solve the Traveling
Salesman Problem found P-ACO to be the best of the tested global optimization algorithms, as well as the best
overall algorithm when seeded and hybridized with local search [27].

In “Beam P-ACO”, a partial solution at node i, with available successors S evaluates the quality of extending

towards node j by

(cid:48)
e(i, j) =
h

τ (i, j)αhe(i, j)β
s∈S τ (i, s)αhe(i, s)β

(cid:80)

where τ is the pheromone concentration along an edge, and he (known as η in the common ACO notation) is
the problem-speciﬁc heuristic. The weighting factors α and β determine the relative contributions of pheromone
and heuristic values to the branching decision. As in the previously described Stochastic Beam algorithm, with
e evaluation, while with a probability
a probability q0 the solution is extended towards the bf nodes with best h
of 1
e. A setting of α = 0
would result in all pheromone information being ignored, and Beam P-ACO would then revert to the Stochastic
Beam algorithm.

q0, that choice is instead a biased sampling without replacement proportional to h

−

(cid:48)

(cid:48)

The pheromone concentration τ along an edge takes in P-ACO discrete values in a given range [τinit, τmax].
We deﬁne these parameters as τinit = 1/(n
1) and τmax = 1, where n is the total number of nodes. This
implements the convention from [14] of having the row/column sum of initial pheromone values be 1 (assuming
a problem where revisits are disallowed, and the diagonal of the pheromone matrix is therefore 0). Given the
τinit)/k
pheromone range, and k, the maximum size of a population of top solutions, we can deﬁne τ∆ = (τmax
as the pheromone increment deposited in an edge by a solution in the population that follows it along its path. If
l solutions in the population include the edge (i, j), its pheromone concentration will then be τ (i, j) = τinit +lτ∆.

−

−

3.4 Pareto elitism

To complete the deﬁnition of Beam P-ACO, a population update model must be deﬁned, a model that handles
multi-objective evaluations produced by the hs heuristic. We propose here a variation of the method deﬁned in

4

L.F. Sim˜oes et al.

[15, Sec. 3.1]. An archive will collect the set of non-dominated solutions found so far. At the end of each tree
search, the best found solutions are merged into it. After updating the archive, the population that deﬁnes the
pheromone matrix is reset.

In standard P-ACO [13], the population is implemented as a FIFO-queue (each generation’s best solution
enters the population, possibly displacing the oldest solution it contains so as not to exceed the population size
k). We propose here instead to have one FIFO-queue per each of the problem’s n nodes, each with a size limit
of k. When resetting the population, all FIFO-queues are emptied. Then, solutions in the archive are shuﬄed,
and one by one, they are added to the population (of edges). Each edge (i, j) in those solutions will result in j
being added to the ith FIFO-queue. The ith FIFO-queue then directly maps to the ith row of the pheromone
matrix, and its contents deﬁne which nodes do pheromones most bias a solution at node i to branch towards.

If solutions visit all n nodes, as is the case in many problems (e.g., TSP), this process will result in only the
last k solutions of the shuﬄed archive adding pheromones to the population. A random unbiased sampling of k
archive solutions would then be suﬃcient. However, in problems where solutions include only some of the nodes
(such as here in the GTOC5 problem, where n = 7075, but a solution will visit < 20 nodes), only small amounts
of pheromone would be deposited, and plenty of information in the archive would be ignored. By following in
such problems the process described above, the pheromone matrix may now receive contributions from more
than k solutions, while still only receiving
k contributions at the level of each individual node. This way, in
the limit, all solutions in the archive may end up depositing pheromones.

≤

4 The GTOC5 trajectory design problem

The trajectory design problem posed in the 5th edition of the Global Trajectory Optimization Competition
(GTOC5) is used as benchmark in the current research. The full problem speciﬁcation can be found in [11]. The
problem dataset, along with additional information related to this edition of the competition, can be found in
the GTOC portal [1]. Our current work makes use of the problem model developed by the competition’s 4th
ranked team [21].

In the GTOC5 problem, a spacecraft leaves the Earth at some point along an 11-year time-window, to embark
on a 15 year (max.) mission of asteroid exploration. The spacecraft starts with a mass of 4000 kg, of which 3500
are reserved for propellant mass, and the scientiﬁc equipment used at asteroids. A total of 7075 asteroids are
available as possible targets to visit along the mission. The exploration of a single asteroid is carried out in
two stages. First, the spacecraft must rendezvous (match position and velocity) with the asteroid, and leave
there a 40 kg scientiﬁc payload. Later in the mission, the spacecraft performs a ﬂy-by of the asteroid, and sends
a 1 kg “penetrator” towards it. Upon impact, this penetrator would release a cloud of debris, that would be
investigated by the payload left there. Partial scores are given for the rendezvous and ﬂy-by maneuvers. An
asteroid on which both are performed contributes 1 point to the full score. In the problem models developed
by most teams, including the one used here, the problem is simpliﬁed by having an asteroid’s ﬂy-by maneuver
performed immediately after its rendezvous: the spacecraft departs the asteroid, moves some distance away, and
then accelerates back towards it. Under this simpliﬁcation, a trajectory that manages to complete all pairs of
maneuvers on a given sequence of m asteroids will score m points.

GTOC5 was won by a team from NASA/JPL with a score 18 trajectory [24]. In contrast, the model being used
here, with the initial trajectory conditions listed in Sec. 6.1, has only ever allowed the discovery of trajectories
with at most a score 16. Nevertheless, for the goal of evaluating the performance of algorithms that solve the
combinatorial part of the problem (ﬁnding the asteroid sequence that enables the greatest possible score), the
used model is perfectly suitable.

5 Bilevel optimization of GTOC5 trajectories

The design of GTOC5 trajectories is here tackled as a multi-objective bilevel optimization problem [25]. At an
upper level, optimization seeks to identify a good subset of asteroids, and the order in which they are to be
visited. At a lower level, each chosen pair of asteroids triggers an optimization of the trajectory leg that takes the
spacecraft between them. This section details how the diﬀerent Beam Search variants are employed for solving
the upper-level combinatorial problem, and how the lower-level process optimizes transfer legs.

5.1 Orbital phasing indicators as heuristic estimators

The problem of assembling an eﬃcient heuristic able to help select possible asteroid targets is crucial and very
diﬃcult at the same time. The ground truth (i.e. the optimal ∆V cost obtained optimizing the transfer leg) is far

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

5

|

−

1,

A

A

xt

xs

2, ∆T ) =

, where x = (cid:2) 1
|

too expensive to be be computed for all possible asteroid targets and for all states encountered along the search.
A solution to this problem was recently proposed via the development of so-called orbital phasing indicators [19].
These essentially allow to introduce for each epoch ts a metric over the set of all possible asteroids, a metric that
can, in turn, be used to detect asteroid neighborhoods eﬃciently. It was shown in [19] how the orbital indicator,
∆T r(ts)(cid:3) and r(ts) and v(ts) correspond
deﬁned as do(
to the asteroid ephemeris, positively correlates to some extent to the ground truth (i.e. the asteroids that are
actually easy to reach via an orbital transfer). It essentially considers a snapshot at ts of the asteroid population
and, using a zero order approximation for the dynamics, predicts what asteroids are the closest in terms of
transfer ∆V . As such, it is bound to neglect the known state of the asteroid population at the arrival time tt,
which seems as a loss of available information. A simple modiﬁcation to the orbital indicator, though, allows
to account for the ﬁnal asteroid geometry and thus to improve the overall correlation to the ground truth. In
essence, one can consider the orbital indicator backward in time, starting from the arrival asteroid, to get a new
indicator (note that asteroid velocities will have to have their sign inverted). The average between the two, i.e.
the orbital indicator and the backward orbital indicator, is what we use here and call improved orbital indicator,
deﬁned as do(cid:48)(

∆T r(ts) + v(ts), 1

xs

xt

1,

|

−

, where
|

A

A

2, ∆T ) =
(cid:20) 1
∆T

x =

r(ts) + v(ts),

r(ts),

r(tt + ∆T )

v(tt + ∆T ),

1
∆T

1
∆T

−

(cid:21)
r(tt + ∆T )

1
∆T

i,

A

A

i, we compute do(cid:48)(

For every node i being branched during the search, to which corresponds a trajectory presently at asteroid
j, ∆T ) for all of the problem’s n nodes, assuming a reference transfer time of ∆T = 125
A
p(i, j)/n)γ, where p(i, j)
days. From it we build a probability distribution over successor nodes as he(i, j) = (1
j, ∆T ) among all estimated costs. This results in a selection probability
is the rank in
that decays exponentially with increasing rank, at a rate tuned through γ. A setting of γ = 50 is used in this
problem. There is then a
84%
among the 250 best. Finally, the problem disallows revisits to asteroids. So, for any node i, he(i, j) = 0 if j was
already visited at any previous point.

30% chance of branching towards an asteroid ranked among the 50 best, and

0, . . . , n
{

of do(cid:48)(

1
}

A

A

−

≈

−

≈

i,

5.2 Optimization of transfer legs

During the tree search, branching a partial solution into a given node triggers an optimization process. Its end
result will be the deﬁnition of the transfer leg that allows the spacecraft to rendezvous with the corresponding
asteroid. Adding the new leg extends the mission’s trajectory, which can then be reevaluated by the hs heuristic.
In the approach followed here, only the trajectory’s rendezvous legs need to be optimized. The cost estimates
for self-ﬂy-by legs are instead approximated by a linear acceleration model [21, Sec. 3].

≈

Each transfer will have a duration in a set time window of [60, 500] days. A grid of 50 evenly spaced values
deﬁnes the candidate transfer times, ∆T (
9 days separation between grid points). For each ∆T , we employ
PyKEP’s [16]2 multiple revolution Lambert solver [17,19] to design a trajectory arc having that exact duration.
If multiple revolution solutions exist for a given ∆T , the one with lowest ∆V is chosen. Two constraints are
imposed: 1) ∆T should exceed the parabolic time of ﬂight given by Barker’s equation3, and 2) the leg’s maximum
acceleration should be < 90% of the maximum supported by the spacecraft. These constraints lead many transfers
to have no feasible solution, for any ∆T (the targeted asteroid is simply unreachable). From all ∆T points in the
grid that do have a feasible solution, the one with lowest ∆V is chosen to deﬁne the new rendezvous leg. In this
approach, the optimization of one leg then equates to ﬁnding the solutions to at most 50 Lambert’s problems.
Note that this ﬁnal ∆V cost is the ground-truth to the do(cid:48) indicator described in the previous section, from
which he is deﬁned. Note also that we take here a greedy choice of ∆T , imposing in that way a transfer leg upon
the combinatorial search problem that might in the long term be sub-optimal with respect to its own goals.

5.3 Trajectory evaluation, ranking, and selection

Trajectories are evaluated by hs with respect to three criteria: 1) the mission’s score, 2) the total mass required
for propellant, and scientiﬁc equipment left at asteroids, and 3) the total time of ﬂight. The ideal mission will
have the greatest possible score, while requiring the lowest possible amounts of mass and time.

As mentioned in Sec. 3.1, a Pareto dominance approach [6] is used for handling the multiple objectives.
However, in this problem mass and time evaluations are only fairly comparable among trajectories that share
the same score. As such, ranking a set of trajectories involves 1) binning trajectories according to their score, and

2 http://esa.github.io/pykep/
3 Legs failing this check are immediately discarded, saving computation time that would otherwise be spent generating

Lambert arcs with excessive ∆V .

6

L.F. Sim˜oes et al.

2) applying non-dominated sorting [6] over the mass and time costs of trajectories within each bin. Identifying
the top trajectories in a given set takes place by iterating through bins in descending order of score, gradually
extracting their Pareto fronts. If only a subset of a Pareto front’s trajectories is required, those with lowest mass
cost are favored.

In a tree search, this process is applied at each depth-level to construct the beam with the best bw of the
newly extended solutions. Before that, however, hs is used for pruning nodes corresponding to missions that
require > 3500 kg, or > 15 years. Should that result in an empty pool of extended solutions, or the pool
otherwise be empty because no feasible transfer legs were found, the tree search has then reached its ﬁnal level
and is terminated. The beam of solutions carried over from the previous tree level will then be its ﬁnal output.
In Beam P-ACO, this signals the end of a generation. The contents of that ﬁnal beam are then merged with
the archive of non-dominated solutions found so far. By applying the previously described ranking process, the
archive will always be a Pareto front of trajectories that all share the maximum score reached to date. Beam
P-ACO will at this point refresh pheromones. Note that the combinatorial problem is asymmetric: an edge (i, j)
present in a good solution is not predictive of an edge (j, i) being likely to lead to good solutions. As such, an
(i, j) edge in an archived solution only results in pheromones along the (i, j) direction.

6 Experimental evaluation

An experimental evaluation was carried out to assess the performance of the diﬀerent Beam Search variants,
using the GTOC5 problem as a test case. Performance is here evaluated in terms of multiple criteria. Primarily,
we care about search algorithms that enable the consistent discovery of asteroid sequences having the greatest
possible length (score). Among equally scored missions, we care for the best possible coverage of the Pareto front
of mass and time costs required to achieve such score. Finally, these considerations must be traded-oﬀ against
the computational cost to obtain such solutions.

6.1 Setup

We adopt as measure of computational cost the number of trajectory legs optimized throughout the search.
This is in practice the main performance bottleneck, especially if instead of a Lambert model one were to use a
low-thrust one. A threshold of 100000 optimized legs was used as stopping criterion.

The performance of deterministic Beam Search was evaluated over a dense grid of settings for the beam width
(bw) and branching factor (bf ) parameters. In total, 118 diﬀerent setups were evaluated, all having upfront an
estimated cost of
100000 optimized legs required in order to complete execution at tree depth 16, where
missions reach and fully score the 16th asteroid (see Fig. 1). Being a deterministic algorithm, only a single run
was executed per setup.

≤

Stochastic Beam and Beam P-ACO were evaluated under the 5 diﬀerent conﬁgurations of bf and bw high-
lighted in red in Fig. 1. Being stochastic algorithms, 100 independent runs were performed per setup. Determin-
istic branching decisions were taken with a probability of q0 = 0.5 (q0 = 1 in Beam Search). In Beam P-ACO,
(cid:48)
pheromone and heuristic values contributed equally to the h
e heuristic: α = β = 1.0 (in the other Beam Search
variants, implicitly α = 0.0). Pheromone concentrations were limited to at most k = 3 contributions to each
node.

All tree searches reported here had the same root node. Its initial conditions were originally obtained during
the GTOC5 competition through a time-optimal low-thrust optimization of the launch leg, as described in [21,
Sec. 2] and exempliﬁed in [16, Sec. 6.1]. After applying the linear model to deﬁne the self-ﬂy-by leg, the initial
state is then a trajectory that has already scored 1 point at asteroid 2001 GP2 (id: 1712), and is ready to depart
from it at epoch 59325.360 MJD, having already expended 253.518 kg and 198.155 days from the total budgets.

6.2 Results

The results obtained in the experimental evaluation are shown in Figures 1–4. Analyses into the quality of
solutions found in a run consider their hs evaluations, in particular, the extent to which they minimize mass
and time costs. Though missions of score 17 were found in these experiments, they were only rarely found, and
furthermore only a single distinct mission was ever found with that score. Therefore, analyses into the quality of
solutions found consider exclusively the score 16 missions found in runs. Speciﬁcally, we evaluate the Pareto fronts
of score 16 missions found, and measure their coverage of the objective space using the hypervolume indicator
[29] – a measure of the total area of objective space dominated by points in the Pareto front. A reference point
of 3500 kg and 15 years is used in all hypervolume calculations, corresponding to the limits set forth in the

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

7

Fig. 1. Beam Search results from the parameter sweep over beam width (bw) and branching factor (bf ) conﬁgurations
(118 setups in total, with costs below the threshold of 100000 optimized trajectory legs). Darker is better. Highlighted in
red: conﬁgurations used in the Stochastic Beam and Beam P-ACO experiments.

problem speciﬁcation. Runs that do not ﬁnd any score 16 mission, and therefore have an empty Pareto front,
have a hypervolume of 0.0.

≈

Parameter sweep of Beam Search conﬁgurations: the results from these experiments are shown in
Fig. 1. Fig. 1(a) shows the highest score reached among the missions designed in each run. Fig. 1(b) shows the
hypervolume of the Pareto front of mass and time costs in score 16 missions found in each run. Fig. 1(c) shows
the prevalence of unfeasible solutions in the continuous search spaces of asteroid transfers. In the setups that
23% of the attempted asteroid transfers had a feasible solution.
reached score 17, for instance, on average only
Quantity of top solutions: Fig. 2 shows the results from the evaluation of the quantity of score 16 or
17 solutions found by each algorithm over time. Only distinct trajectories count here to a run’s totals – two
trajectories are equal if their asteroid sequence is exactly the same. The three plots shown correspond, from
left to right, to the results from Beam Search, Stochastic Beam, and Beam P-ACO. Fig. 2(a) shows one curve
for each of Beam Search’s 118 evaluated setups. The algorithm being deterministic, each curve depicts also
one single run. Overlaid in this plot is the Pareto front of cost-beneﬁt trade-oﬀs attainable through diﬀerent
parameter settings: it shows the minimum number of trajectory legs that need to be optimized to obtain diﬀerent
amounts of top scoring trajectories. This Pareto front is replicated in the other two plots to allow a performance
comparison between the deterministic and randomized Beam Search variants. The “hooks” shape seen, especially
in Fig. 2(a), results from the way Beam Search operates: most of its execution time is spent gradually descending
through the tree, level by level. Eventually, the search reaches depth 15, at which point each branching event
possibly leads to a score 16 solution being found. Hence, the sudden explosion in the total count. The plots for
Stochastic Beam and Beam P-ACO also display this eﬀect, but in them values are averaged over 100 runs, and
consecutive tree searches (generations) are chained together.

Quality of top solutions: Figures 3 and 4 show the results from the evaluation of the quality of score 16
solutions found by each algorithm over time. Fig. 3 is structured in the same way as Fig. 2, so the description
made above for it also applies here. Fig. 3 shows how the total dominated area of objective space (hypervolume)
grows over time, as new score 16 trajectories are found and enter the Pareto front. Fig. 4 takes a closer look at
the setup bw = 20, bf = 125, over which both randomized Beam Search algorithms are seen in Fig. 3 reaching
median performance (out of the ﬁve evaluated setups). The plots shown are Empirical Attainment Functions
(EAFs) [8], which depict the likelihood of objective space vectors being dominated (or matched) in an algorithm’s
run. It aggregates into one visualization the ﬁnal Pareto fronts of score 16 trajectories found across all 100 runs.
In Fig. 4(a–b), the boundaries of the shaded areas show the 0.25, 0.5 and 0.75 “attainment surfaces”. In other
words, the areas having at least 25, 50 or 75% chance of being attained (dominated or matched) by points in a
run’s ﬁnal Pareto front. Fig. 4(c) takes the diﬀerence between the EAFs for Beam P-ACO and Stochastic Beam,
and shows how they compare in terms of likelihood to attain diﬀerent areas of objective space, making clear the
extent to which Beam P-ACO outperforms Stochastic Beam. The Pareto front with greatest hypervolume found
by deterministic Beam Search is shown for reference.

7 Analysis & discussion

Conceptually, we showed in this research a formal equivalence between four combinatorial optimization algo-
rithms: Beam Search, Stochastic Beam, Beam P-ACO, and P-ACO. We demonstrated how they can all be
implemented in the same algorithm, and made accessible through minor parameter changes.

A surprising result, that validates the introduced phasing indicator, as well as the baseline multi-objective
Beam Search algorithm employed here, was the discovery of a score 17 mission (17 asteroids visited, and fully

8

L.F. Sim˜oes et al.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 2. Quantity of top solutions: cumulative number of distinct trajectories of score 16 or 17 found over time. Note the
change of scale in the vertical axis.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 3. Quality of top solutions: growth of the dominated area of objective space over time (hypervolume of the Pareto
front of score 16 trajectories found so far).

investigated). Searches over this model of the GTOC5 problem, using these same initial conditions, had previously
only reached a maximum score of 16 [21]. Furthermore, those searches, employing a Branch & Prune tree search
algorithm, took days to complete during the GTOC5 competition. The Beam Search variants under consideration
could all ﬁnd that single score 17 mission in runs lasting 10 to 20 minutes. Pure P-ACO is the exception here,
having never surpassed a score 15 in our experiments (with a bf = 1, the high chance of an asteroid transfer’s
optimization problem not having a feasible solution greatly limits performance).

The ﬁrst research question in Sec. 1 called for a demonstration of examples where randomized Beam Search
variants would outperform the deterministic approach. If we evaluate in terms of mean performance, then, as we
can see from Figures 2–3, the current experimental evaluation could not ﬁnd any such cases. At all computational
cost thresholds we can ﬁnd deterministic setups outperforming both of the randomized Beam Search variants,
both in the quantity of score 16 solutions found, and in their quality. The deterministic algorithm was tuned to
a considerably greater extent than the randomized ones (118 setups, against only 5), so it is possible that we
are presenting a skewed view of each algorithm’s capabilities. Alternatively, it may be that the speciﬁc problem
we consider here is so resource-constrained, that the construction of long asteroid sequences actually demands
for greedy branching decisions to be taken at every single step. In such a case, the search will not beneﬁt from
the greater tolerance for local sub-optimality present in the randomized Beam Search variants.

The second research question in Sec. 1 considers how the addition of feedback (pheromones) in Beam P-ACO
changes performance, by comparison with Stochastic Beam, where search proceeds along multiple independent
generations with no feedback between them. Figures 2–4 show a clear positive eﬀect of feedback on performance,
both in the quantity and quality of top solutions found. This eﬀect is seen to be larger the smaller the branching
factor is. In other words, the greater the branching factor, the likelier it is for good solutions to be identiﬁed in
a single generation, and thus the lower the beneﬁt from feedback.

An identical comparison between randomized Beam Search variants, with and without pheromone updates,
can be found in [3, Sec. 6.2] (for a diﬀerent hybrid algorithm, and diﬀerent problems). There, pheromones are also
found to improve performance, though in small amounts. The current research goes beyond the analysis in [3] by
uncovering the inverse relationship between branching factor and beneﬁt from pheromones, and in demonstrating
the superior performance of deterministic Beam Search over the randomized variants, given proper tuning.

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

9

(a) Stochastic Beam

(b) Beam P-ACO

(c) Performance diﬀerence

Fig. 4. Empirical Attainment Functions: probabilities of objective space vectors being dominated (or matched) in an
algorithm’s run. The darker a region is, the likelier it is that in a run a solution will be found that dominates it. Considers
the Pareto fronts of score 16 trajectories found up to the 100000 optimized legs threshold.

Overall, an apt description of the behaviours displayed by the randomized algorithms is that they approximate
the performance of deterministic Beam Search setups that use larger beam widths and branching factors –
probabilistic branching eﬀectively picks a subset of the successor nodes that deterministic Beam Search with
larger branching factors would follow. The eventual success or failure of a run will then depend on how well those
decisions align with those a better informed algorithm would take. This can be seen on display in Fig. 4. There,
we see that in the extreme a randomized Beam Search run can closely approximate the Pareto front of score 16
trajectories found by an “optimally” tuned deterministic Beam Search (with a bf = 125, less than half of the
bf = 275 needed in the deterministic setting). However, it can also fail to ﬁnd a single score 16 trajectory: 7 of
the 100 runs in Fig. 4(a), and 4 in Fig. 4(b) could only reach a score 15, thus ending in this analysis with a min.
hypervolume of 0.0. Overall, the median hypervolume of 52.75 reached by Beam P-ACO in Fig. 4(b) is higher
than that reached in
60% of the 118 deterministic Beam Search setups, and also higher than that reached in
50% of the 32 deterministic setups that had equal or larger beam width and branching factors.

≈

In a real setting, in the preliminary design phase, missions would be constructed not from a single set of initial
conditions, as done here, but from a great number of them, possibly numbering in the thousands. Being anytime
algorithms, the randomized Beam Search variants investigated here can be employed in a racing approach [22],
with multiple tree searches being executed in parallel. Computational eﬀort would then be dynamically allocated
across searches, as a function of the growing statistical evidence as to which searches lead to better missions.
In such a setting, the randomized Beam search variants would be preferable choices, over the deterministic
algorithm.

8 Conclusion

We considered here a hard real-world problem of spacecraft trajectory design, featuring an interplay of combi-
natorial and (constrained) continuous optimization sub-problems, dealing at diﬀerent levels with uncertain and
multi-objective quality functions. In this challenging domain, we investigated a number of extensions to Beam
Search, the traditionally used approach to solve such problems. We provided an improved orbital phasing indi-
cator, and its transformation into a probability distribution over candidate bodies to extend missions with. We
then hybridized the search process with the well known Ant Colony Optimization algorithm, and investigated
the behaviours of the resulting randomized Beam Search variants. We found them to have lower sensitivity to
the beam width and branching factor parameter settings, while oﬀering in each generation a partially-informed
approximation to the behaviours of deterministic setups running at higher computational costs.

Acknowledgment

References

& Sons, Inc. (1987)

Lu´ıs F. Sim˜oes was supported by FCT (Minist´erio da Ciˆencia e Tecnologia) Fellowship SFRH/BD/84381/2012.

1. Global Trajectory Optimization Competition portal, http://sophia.estec.esa.int/gtoc_portal/
2. Bisiani, R.: Beam search. In: Shapiro, S.C. (ed.) Encyclopedia of Artiﬁcial Intelligence, vol. 1, pp. 56–58. John Wiley

10

L.F. Sim˜oes et al.

3. Blum, C.: Beam-ACO–Hybridizing ant colony optimization with beam search: an application to open shop scheduling.

Computers & Operations Research 32(6), 1565–1591 (2005)

4. Ceriotti, M., Vasile, M.: Automated multigravity assist trajectory planning with a modiﬁed ant colony algorithm.

Journal of Aerospace Computing, Information, and Communication 7(9), 261–293 (2010)

5. Ceriotti, M., Vasile, M.: MGA trajectory planning with an ACO-inspired algorithm. Acta Astronautica 67(9–10),

6. Deb, K.: Multi-Objective Optimization using Evolutionary Algorithms. John Wiley & Sons, Inc., Chichester, England

1202–1217 (2010)

(2001)

7. Dorigo, M., St¨utzle, T.: Ant Colony Optimization. A Bradford Book, MIT Press, Cambridge, MA (2004)
8. Grunert da Fonseca, V., Fonseca, C.M., Hall, A.O.: Inferential performance assessment of stochastic optimisers and
the attainment function. In: Zitzler, E., Thiele, L., Deb, K., Coello Coello, C.A., Corne, D. (eds.) Evolutionary
Multi-Criterion Optimization: First International Conference, EMO 2001, pp. 213–225. Springer, Berlin, Heidelberg
(2001)

9. Gad, A.H.: Space trajectories optimization using variable-chromosome-length genetic algorithms. Ph.D. thesis, Michi-

gan Technological University (2011)

10. Grigoriev, I.S., Zapletin, M.P.: Choosing promising sequences of asteroids. Automation and Remote Control 74(8),

11. Grigoriev, I.S., Zapletin, M.P.: GTOC5: Problem statement and notes on solution veriﬁcation. Acta Futura 8, 9–19

1284–1296 (2013)

(2014)

12. Guntsch, M.: Ant algorithms in stochastic and multi-criteria environments. Ph.D. thesis, Karlsruher Institut f¨ur

Technologie (2004), http://d-nb.info/1013929756

13. Guntsch, M., Middendorf, M.: A Population Based Approach for ACO. In: Cagnoni, S., Gottlieb, J., Hart, E.,
Middendorf, M., Raidl, G.R. (eds.) Applications of Evolutionary Computing: EvoWorkshops 2002: EvoCOP, EvoIASP,
EvoSTIM/EvoPLAN. pp. 72–81. Springer, Berlin, Heidelberg (2002)

14. Guntsch, M., Middendorf, M.: Applying Population Based ACO to Dynamic Optimization Problems. In: Dorigo, M.,
Di Caro, G., Sampels, M. (eds.) Ant Algorithms: Third International Workshop, ANTS 2002. pp. 111–122. Springer,
Berlin, Heidelberg (2002)

15. Guntsch, M., Middendorf, M.: Solving Multi-criteria Optimization Problems with Population-Based ACO. In: Fon-
seca, C.M., Fleming, P.J., Zitzler, E., Thiele, L., Deb, K. (eds.) Evolutionary Multi-Criterion Optimization: Second
International Conference, EMO 2003. pp. 464–478. Springer, Berlin, Heidelberg (2003)

16. Izzo, D.: PyGMO and PyKEP: Open Source Tools for Massively Parallel Optimization in Astrodynamics (the case
of interplanetary trajectory optimization). In: 5th International Conference on Astrodynamics Tools and Techniques
(ICATT) (2012)

17. Izzo, D.: Revisiting Lambert’s problem. Celestial Mechanics and Dynamical Astronomy 121(1), 1–15 (2015)
18. Izzo, D., Getzner, I., Hennes, D., Sim˜oes, L.F.: Evolving Solutions to TSP Variants for Active Space Debris Removal.
In: Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation. pp. 1207–1214. ACM
(2015)

19. Izzo, D., Hennes, D., Sim˜oes, L.F., M¨artens, M.: Designing complex interplanetary trajectories for the global trajectory
optimization competitions. In: Fasano, G., Pint´er, J.D. (eds.) Space Engineering: Modeling and Optimization with
Case Studies, pp. 151–176. Springer (2016)

20. Izzo, D., Sim˜oes, L.F., M¨artens, M., de Croon, G.C.H.E., Heritier, A., Yam, C.H.: Search for a Grand Tour of the
Jupiter Galilean Moons. In: Genetic and Evolutionary Computation Conference (GECCO 2013). pp. 1301–1308. ACM
(2013)

21. Izzo, D., Sim˜oes, L.F., Yam, C.H., Biscani, F., Di Lorenzo, D., Addis, B., Cassioli, A.: GTOC5: Results from the

European Space Agency and University of Florence. Acta Futura 8, 45–55 (2014)

22. Maron, O., Moore, A.W.: The racing algorithm: Model selection for lazy learners. In: Aha, D.W. (ed.) Lazy Learning,

pp. 193–225. Springer Netherlands (1997)

23. Oliveira, S., Hussin, M.S., St¨utzle, T., Roli, A., Dorigo, M.: A Detailed Analysis of the Population-Based Ant Colony

Optimization Algorithm for the TSP and the QAP. Tech. Rep. TR/IRIDIA/2011-006, IRIDIA (Feb 2011)

24. Petropoulos, A.E., Bonﬁglio, E.P., Grebow, D.J., Lam, T., Parker, J.S., Arrieta, J., Landau, D.F., Anderson, R.L.,
Gustafson, E.D., Whiﬀen, G.J., Finlayson, P.A., Sims, J.A.: GTOC5: Results from the Jet Propulsion Laboratory.
Acta Futura 8, 21–27 (2014)

25. Sinha, A., Malo, P., Deb, K.: Evolutionary bilevel optimization: An introduction and recent advances. In: Bechikh,
S., Datta, R., Gupta, A. (eds.) Recent Advances in Evolutionary Multi-objective Optimization, pp. 71–103. Springer
(2017)

26. Stuart, J.R., Howell, K.C., Wilson, R.S.: Design of end-to-end trojan asteroid rendezvous tours incorporating scientiﬁc

value. Journal of Spacecraft and Rockets 53(2), 278–288 (2016)

27. Weise, T., Chiong, R., L¨assig, J., Tang, K., Tsutsui, S., Chen, W., Michalewicz, Z., Yao, X.: Benchmarking optimiza-
tion algorithms: An open source framework for the traveling salesman problem. IEEE Computational Intelligence
Magazine 9(3), 40–52 (2014)

28. Wilt, C.M., Thayer, J.T., Ruml, W.: A comparison of greedy search algorithms. In: Proceedings of the Third Annual

Symposium on Combinatorial Search (SOCS-10). pp. 129–136 (2010)

29. Zitzler, E., Thiele, L., Laumanns, M., Fonseca, C.M., Grunert da Fonseca, V.: Performance assessment of multiob-
jective optimizers: an analysis and review. IEEE Transactions on Evolutionary Computation 7(2), 117–132 (2003)

Multi-rendezvous Spacecraft Trajectory
Optimization with Beam P-ACO

Lu´ıs F. Sim˜oes1, Dario Izzo2, Evert Haasdijk1, and A. E. Eiben1

1 Vrije Universiteit Amsterdam, The Netherlands
2 European Space Agency, ESTEC, The Netherlands
{luis.simoes,e.haasdijk,a.e.eiben}@vu.nl,dario.izzo@esa.int

7
1
0
2
 
r
p
A
 
3
 
 
]
E
N
.
s
c
[
 
 
1
v
2
0
7
0
0
.
4
0
7
1
:
v
i
X
r
a

Abstract. The design of spacecraft trajectories for missions visiting multiple celestial bodies is here framed
as a multi-objective bilevel optimization problem. A comparative study is performed to assess the perfor-
mance of diﬀerent Beam Search algorithms at tackling the combinatorial problem of ﬁnding the ideal
sequence of bodies. Special focus is placed on the development of a new hybridization between Beam
Search and the Population-based Ant Colony Optimization algorithm. An experimental evaluation shows
all algorithms achieving exceptional performance on a hard benchmark problem. It is found that a prop-
erly tuned deterministic Beam Search always outperforms the remaining variants. Beam P-ACO, however,
demonstrates lower parameter sensitivity, while oﬀering superior worst-case performance. Being an anytime
algorithm, it is then found to be the preferable choice for certain practical applications.

Keywords: Beam Search, Ant Colony Optimization, P-ACO, Bilevel optimization, Multi-objective opti-
mization, Spacecraft trajectories.

1 Introduction

The design of multi-rendezvous spacecraft trajectories poses a considerable challenge to aerospace engineers. This
is due, in part, to the combinatorial nature of the problem that emerges with the increase in number of bodies
to visit along a mission (e.g., planets, moons, asteroids). The complexity of the task stems from an interplay of
multiple factors under optimization, including: the decision of which of the bodies of interest to visit, the order
in which they are to be visited, and the design of the actual trajectory arcs to take the spacecraft between them.
Maximization of such a mission’s scientiﬁc return may demand for as many bodies to be visited as possible,
in the shortest possible amount of time, while consuming the lowest possible amount of propellant mass. The
underlying optimization problem can be seen as a variant of the well known Traveling Salesman Problem (TSP),
with nodes corresponding to the celestial bodies under consideration, and edge weights a function of the costs
(time and mass) to propel the spacecraft between them. These costs vary as bodies move in space along their
trajectories, but also as a function of the spacecraft’s state: a lighter spacecraft that has already shed some of
its mass is simpler to maneuver.

As evidence into the complexity, and relevance, of the above described problems, consider the following:
since 2005, the aerospace engineering community has periodically organized GTOC, the Global Trajectory Op-
timization Competition [1]. In it, diﬀerent groups have taken turns at creating “nearly-impossible” problems
of interplanetary trajectory design to pose to the community. Of the 8 competitions organized to date, 4 were
multiple-asteroid rendezvous problems of the kind considered here, and 3 others were multiple ﬂy-by problems
posing similar combinatorial optimization challenges.

In [19], a multi-objective Beam Search algorithm is described, and applied to a low-thrust model of the
GTOC7 problem. In this research, we propose a series of extensions to it. First, we provide an improved orbital
phasing indicator, and a procedure to create from it a probability distribution over candidate bodies to extend
missions with. Second, we hybridize the Beam Search procedure with the well known Ant Colony Optimization
algorithm [7]. We conclude by evaluating the resulting algorithms on a Lambert model of the GTOC5 problem
[11]. Two main research questions are investigated in this paper:

1. Can the randomization of Beam Search, via probabilistic branching choices, improve performance?
2. Does the pheromone-based positive reinforcement of sequences lead to improved performance?

This paper is organized as follows: in Sec. 2 we list related work in the combinatorial optimization of spacecraft
trajectories. Sec. 3 describes the Beam Search algorithm, and the proposed randomized variants. In Sec. 4 we
describe the GTOC5 problem used in our experiments, and in Sec. 5 the interfacing between it and the search
algorithms. Sec. 6 reports on an experimental evaluation, and Sec. 7 discusses its results. Conclusions are drawn
in Sec. 8.

Code available at https://github.com/lfsimoes/beam_paco__gtoc5.

2

L.F. Sim˜oes et al.

2 Related work

Beam Search [2,28] has emerged as the de facto standard approach to tackle the combinatorial optimization
sub-problems present in most GTOC competitions. Though at times called by other names, it is common to ﬁnd
the general architecture of a tree search that has its computational cost bounded via the selection of a limited
number of nodes to branch at each depth-level (non-selected nodes at that depth being immediately discarded).
We can ﬁnd examples of such algorithms in the winning solutions to GTOC4 [10], GTOC5 [24], and in the second
ranked solution to GTOC7 [19], which the present research builds on. The Lazy Race Tree Search described in
[20], which at the time presented the best known solution to the GTOC6 problem, can also be seen as a Beam
Search variant. In it, the “beam” is composed of all nodes, possibly originating from diﬀerent tree depths, that
fall within a given mission time window. The most promising nodes in that sliding window are branched, and
the remaining ones discarded.

Evolutionary Algorithms have been explored as an alternative to solve combinatorial problems in mission
analysis. In the GTOC5 problem considered here, for instance, [21] and [9] used Genetic Algorithms with “hidden
genes”, to evolve chromosomes encoding asteroid sequences. These approaches were however outperformed in
the GTOC5 competition by tree-based approaches. In [18] an evolutionary approach is described for designing
debris removal missions. In this highly dynamic trajectory problem, the Inver-over Genetic Algorithm was found
to provide competitive solutions to those constructed by diﬀerent approaches.

Ant Colony Optimization (ACO) [7] was used by some teams in the GTOC competitions over the years. How-
ever, to our knowledge, no scientiﬁc publication has been produced to date with the details of such deployment.
The most successful use of ACO in a GTOC competition was possibly that by the NASA/JPL team, winners of
GTOC7. According to the GTOC portal [1], a “very competitive solution was found by JPL using an Ant Colony
Optimization approach. Eventually a diﬀerent solution turned out to be better and was thus submitted”1. Other
applications of ACO algorithms to optimize the sequences of bodies to visit along a spacecraft’s trajectory can
be found in [5,4,26]. In them, the test problems over which algorithms are evaluated have few bodies to select
from (
5 bodies. In contrast, sequences of up to 17 asteroids are assembled
10), and the found sequences visit
here, from a database of 7075 available asteroids.

≈

≈

A hybridization of Beam Search and ACO was previously presented in [3]. A diﬀerent hybridization is
introduced here, “Beam P-ACO”, that diﬀers mainly in the ACO variant under use, and in being a multi-
objective algorithm.

3 Beam Search

Beam Search [2,28] is a tree search algorithm where computational cost is bounded by employing heuristics
that allow for non-promising solutions under construction to be discarded. It can be executed as a variant of
depth-ﬁrst or breadth-ﬁrst search. When operating as a variant of breadth-ﬁrst search, as is done here, Beam
Search traverses the tree one depth-level at a time. From all the solutions generated at one level, only a limited
subset (the so called “beam”) will be selected for carrying over to the next level. An evaluation of solutions’
quality determines whether they are included in the beam, or instead permanently discarded from the search.
The size of the beam is designated as the “beam width”, and is here represented as bw. The extension of partial
solutions in the beam can be performed towards all possible successor nodes, or instead towards only a limited
number, enabling further control over the search’s computational cost. A “branching factor” parameter, here
represented as bf , indicates that each solution in the beam will be extended only towards bf successor nodes,
chosen as a function of how good the solutions they lead to are estimated to be.

∗

In summary, at one level of the tree, each of the beam’s bw solutions will be expanded towards bf new nodes,
resulting in bw
bf new partial solutions. These are then evaluated, and the bw best of those will become the
beam that is carried over to the next tree level. The search process is therefore driven by two heuristics: 1) hs,
which evaluates partial solutions (a path down from the tree’s root node), and 2) he, which evaluates candidate
successor nodes for extending solutions with. The more accurately these heuristics point to the complete optimal
solution, the more successful the search will be. Beam Search being an “incomplete” search algorithm however,
the identiﬁcation of the globally optimal solution is not guaranteed [28].

3.1 Multi-objective heuristics

The ﬁrst extension we introduce to the conventional Beam Search framework is the addition of multi-objective
heuristics. That is, either hs, or he (or both) will evaluate partial solutions or candidate extensions, respectively,

1 The NASA/JPL team’s GTOC7 submission report and workshop slides, containing details of their ACO deployment,

can be found in the GTOC portal [1].

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

3

according to multiple objectives. In such a scenario, it is then necessary to employ techniques that will allow for
the ranking of alternatives, or probabilistic selection among them, that take into account the multiple evaluations.
In our current implementation, hs evaluates partial solutions according to multiple objectives, while the
evaluation of candidate extensions by he remains single-objective. Beam Search must then be able to select
at each tree level the best bw solutions from among the newly generated extensions. To that end, we employ
a Pareto dominance approach. Speciﬁcally, we apply non-dominated sorting [6] to the pool of extensions, and
include in the beam as many of the best Pareto fronts as needed to reach the beam size bw. That process will
most likely lead to a ﬁnal Pareto front whose full inclusion in the beam would exceed bw. A tie-breaker criterion
must then be deﬁned to determine which of those (equally good) solutions to keep, and which to discard (see
Sec. 5.3).

3.2 Probabilistic branching

In the “Stochastic Beam” algorithm, the beam’s construction remains deterministic, but the branching stage
will now be subjected to probabilistic decisions. Given a solution in the beam, with a probability q0 it will be
extended towards the bf nodes with best he evaluation. With a probability of 1
q0, the choice of bf nodes will
instead be a biased sampling without replacement, proportional to he. Note that through a parameter setting
of q0 = 1 the algorithm reverts to the previously described (deterministic) Beam Search.

−

Beam Search will always converge to the same solution, given the same root node. Stochastic Beam however,
can be executed multiple times, and possibly converge to diﬀerent solutions in each run. These solutions may
outperform those found by Beam Search, by including links to nodes that Beam Search incorrectly prunes, due to
ranking above the bf threshold. Non-determinism therefore provides a degree of robustness against imperfections
in the he heuristic.

3.3 Hybridization with Ant Colony Optimization

A hybridization of Beam Search with Ant Colony Optimization brings two mains changes to the algorithmic
framework: 1) multiple tree searches are now performed, in consecutive runs designated as “generations”, and 2)
positive feedback takes place, in the form of “pheromones” that change the he heuristic evaluation of candidate
successor nodes, therefore biasing the dynamics of tree searches in subsequent generations.

Of the many ACO variants in existence, we chose to hybridize with the Population-based Ant Colony Opti-
mization algorithm (P-ACO), introduced in [13,14,15,12]. A detailed analysis in [23] found it to be “competitive
to the state-of-the-art ACO algorithms with the advantage of ﬁnding good solution quality in a shorter com-
putation time”. Also, a recent thorough benchmarking of a high number of approaches to solve the Traveling
Salesman Problem found P-ACO to be the best of the tested global optimization algorithms, as well as the best
overall algorithm when seeded and hybridized with local search [27].

In “Beam P-ACO”, a partial solution at node i, with available successors S evaluates the quality of extending

towards node j by

(cid:48)
e(i, j) =
h

τ (i, j)αhe(i, j)β
s∈S τ (i, s)αhe(i, s)β

(cid:80)

where τ is the pheromone concentration along an edge, and he (known as η in the common ACO notation) is
the problem-speciﬁc heuristic. The weighting factors α and β determine the relative contributions of pheromone
and heuristic values to the branching decision. As in the previously described Stochastic Beam algorithm, with
e evaluation, while with a probability
a probability q0 the solution is extended towards the bf nodes with best h
of 1
e. A setting of α = 0
would result in all pheromone information being ignored, and Beam P-ACO would then revert to the Stochastic
Beam algorithm.

q0, that choice is instead a biased sampling without replacement proportional to h

−

(cid:48)

(cid:48)

The pheromone concentration τ along an edge takes in P-ACO discrete values in a given range [τinit, τmax].
We deﬁne these parameters as τinit = 1/(n
1) and τmax = 1, where n is the total number of nodes. This
implements the convention from [14] of having the row/column sum of initial pheromone values be 1 (assuming
a problem where revisits are disallowed, and the diagonal of the pheromone matrix is therefore 0). Given the
τinit)/k
pheromone range, and k, the maximum size of a population of top solutions, we can deﬁne τ∆ = (τmax
as the pheromone increment deposited in an edge by a solution in the population that follows it along its path. If
l solutions in the population include the edge (i, j), its pheromone concentration will then be τ (i, j) = τinit +lτ∆.

−

−

3.4 Pareto elitism

To complete the deﬁnition of Beam P-ACO, a population update model must be deﬁned, a model that handles
multi-objective evaluations produced by the hs heuristic. We propose here a variation of the method deﬁned in

4

L.F. Sim˜oes et al.

[15, Sec. 3.1]. An archive will collect the set of non-dominated solutions found so far. At the end of each tree
search, the best found solutions are merged into it. After updating the archive, the population that deﬁnes the
pheromone matrix is reset.

In standard P-ACO [13], the population is implemented as a FIFO-queue (each generation’s best solution
enters the population, possibly displacing the oldest solution it contains so as not to exceed the population size
k). We propose here instead to have one FIFO-queue per each of the problem’s n nodes, each with a size limit
of k. When resetting the population, all FIFO-queues are emptied. Then, solutions in the archive are shuﬄed,
and one by one, they are added to the population (of edges). Each edge (i, j) in those solutions will result in j
being added to the ith FIFO-queue. The ith FIFO-queue then directly maps to the ith row of the pheromone
matrix, and its contents deﬁne which nodes do pheromones most bias a solution at node i to branch towards.

If solutions visit all n nodes, as is the case in many problems (e.g., TSP), this process will result in only the
last k solutions of the shuﬄed archive adding pheromones to the population. A random unbiased sampling of k
archive solutions would then be suﬃcient. However, in problems where solutions include only some of the nodes
(such as here in the GTOC5 problem, where n = 7075, but a solution will visit < 20 nodes), only small amounts
of pheromone would be deposited, and plenty of information in the archive would be ignored. By following in
such problems the process described above, the pheromone matrix may now receive contributions from more
than k solutions, while still only receiving
k contributions at the level of each individual node. This way, in
the limit, all solutions in the archive may end up depositing pheromones.

≤

4 The GTOC5 trajectory design problem

The trajectory design problem posed in the 5th edition of the Global Trajectory Optimization Competition
(GTOC5) is used as benchmark in the current research. The full problem speciﬁcation can be found in [11]. The
problem dataset, along with additional information related to this edition of the competition, can be found in
the GTOC portal [1]. Our current work makes use of the problem model developed by the competition’s 4th
ranked team [21].

In the GTOC5 problem, a spacecraft leaves the Earth at some point along an 11-year time-window, to embark
on a 15 year (max.) mission of asteroid exploration. The spacecraft starts with a mass of 4000 kg, of which 3500
are reserved for propellant mass, and the scientiﬁc equipment used at asteroids. A total of 7075 asteroids are
available as possible targets to visit along the mission. The exploration of a single asteroid is carried out in
two stages. First, the spacecraft must rendezvous (match position and velocity) with the asteroid, and leave
there a 40 kg scientiﬁc payload. Later in the mission, the spacecraft performs a ﬂy-by of the asteroid, and sends
a 1 kg “penetrator” towards it. Upon impact, this penetrator would release a cloud of debris, that would be
investigated by the payload left there. Partial scores are given for the rendezvous and ﬂy-by maneuvers. An
asteroid on which both are performed contributes 1 point to the full score. In the problem models developed
by most teams, including the one used here, the problem is simpliﬁed by having an asteroid’s ﬂy-by maneuver
performed immediately after its rendezvous: the spacecraft departs the asteroid, moves some distance away, and
then accelerates back towards it. Under this simpliﬁcation, a trajectory that manages to complete all pairs of
maneuvers on a given sequence of m asteroids will score m points.

GTOC5 was won by a team from NASA/JPL with a score 18 trajectory [24]. In contrast, the model being used
here, with the initial trajectory conditions listed in Sec. 6.1, has only ever allowed the discovery of trajectories
with at most a score 16. Nevertheless, for the goal of evaluating the performance of algorithms that solve the
combinatorial part of the problem (ﬁnding the asteroid sequence that enables the greatest possible score), the
used model is perfectly suitable.

5 Bilevel optimization of GTOC5 trajectories

The design of GTOC5 trajectories is here tackled as a multi-objective bilevel optimization problem [25]. At an
upper level, optimization seeks to identify a good subset of asteroids, and the order in which they are to be
visited. At a lower level, each chosen pair of asteroids triggers an optimization of the trajectory leg that takes the
spacecraft between them. This section details how the diﬀerent Beam Search variants are employed for solving
the upper-level combinatorial problem, and how the lower-level process optimizes transfer legs.

5.1 Orbital phasing indicators as heuristic estimators

The problem of assembling an eﬃcient heuristic able to help select possible asteroid targets is crucial and very
diﬃcult at the same time. The ground truth (i.e. the optimal ∆V cost obtained optimizing the transfer leg) is far

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

5

|

−

1,

A

A

xt

xs

2, ∆T ) =

, where x = (cid:2) 1
|

too expensive to be be computed for all possible asteroid targets and for all states encountered along the search.
A solution to this problem was recently proposed via the development of so-called orbital phasing indicators [19].
These essentially allow to introduce for each epoch ts a metric over the set of all possible asteroids, a metric that
can, in turn, be used to detect asteroid neighborhoods eﬃciently. It was shown in [19] how the orbital indicator,
∆T r(ts)(cid:3) and r(ts) and v(ts) correspond
deﬁned as do(
to the asteroid ephemeris, positively correlates to some extent to the ground truth (i.e. the asteroids that are
actually easy to reach via an orbital transfer). It essentially considers a snapshot at ts of the asteroid population
and, using a zero order approximation for the dynamics, predicts what asteroids are the closest in terms of
transfer ∆V . As such, it is bound to neglect the known state of the asteroid population at the arrival time tt,
which seems as a loss of available information. A simple modiﬁcation to the orbital indicator, though, allows
to account for the ﬁnal asteroid geometry and thus to improve the overall correlation to the ground truth. In
essence, one can consider the orbital indicator backward in time, starting from the arrival asteroid, to get a new
indicator (note that asteroid velocities will have to have their sign inverted). The average between the two, i.e.
the orbital indicator and the backward orbital indicator, is what we use here and call improved orbital indicator,
deﬁned as do(cid:48)(

∆T r(ts) + v(ts), 1

xs

xt

1,

|

−

, where
|

A

A

2, ∆T ) =
(cid:20) 1
∆T

x =

r(ts) + v(ts),

r(ts),

r(tt + ∆T )

v(tt + ∆T ),

1
∆T

1
∆T

−

(cid:21)
r(tt + ∆T )

1
∆T

i,

A

A

i, we compute do(cid:48)(

For every node i being branched during the search, to which corresponds a trajectory presently at asteroid
j, ∆T ) for all of the problem’s n nodes, assuming a reference transfer time of ∆T = 125
A
p(i, j)/n)γ, where p(i, j)
days. From it we build a probability distribution over successor nodes as he(i, j) = (1
j, ∆T ) among all estimated costs. This results in a selection probability
is the rank in
that decays exponentially with increasing rank, at a rate tuned through γ. A setting of γ = 50 is used in this
problem. There is then a
84%
among the 250 best. Finally, the problem disallows revisits to asteroids. So, for any node i, he(i, j) = 0 if j was
already visited at any previous point.

30% chance of branching towards an asteroid ranked among the 50 best, and

0, . . . , n
{

of do(cid:48)(

1
}

A

A

−

≈

−

≈

i,

5.2 Optimization of transfer legs

During the tree search, branching a partial solution into a given node triggers an optimization process. Its end
result will be the deﬁnition of the transfer leg that allows the spacecraft to rendezvous with the corresponding
asteroid. Adding the new leg extends the mission’s trajectory, which can then be reevaluated by the hs heuristic.
In the approach followed here, only the trajectory’s rendezvous legs need to be optimized. The cost estimates
for self-ﬂy-by legs are instead approximated by a linear acceleration model [21, Sec. 3].

≈

Each transfer will have a duration in a set time window of [60, 500] days. A grid of 50 evenly spaced values
deﬁnes the candidate transfer times, ∆T (
9 days separation between grid points). For each ∆T , we employ
PyKEP’s [16]2 multiple revolution Lambert solver [17,19] to design a trajectory arc having that exact duration.
If multiple revolution solutions exist for a given ∆T , the one with lowest ∆V is chosen. Two constraints are
imposed: 1) ∆T should exceed the parabolic time of ﬂight given by Barker’s equation3, and 2) the leg’s maximum
acceleration should be < 90% of the maximum supported by the spacecraft. These constraints lead many transfers
to have no feasible solution, for any ∆T (the targeted asteroid is simply unreachable). From all ∆T points in the
grid that do have a feasible solution, the one with lowest ∆V is chosen to deﬁne the new rendezvous leg. In this
approach, the optimization of one leg then equates to ﬁnding the solutions to at most 50 Lambert’s problems.
Note that this ﬁnal ∆V cost is the ground-truth to the do(cid:48) indicator described in the previous section, from
which he is deﬁned. Note also that we take here a greedy choice of ∆T , imposing in that way a transfer leg upon
the combinatorial search problem that might in the long term be sub-optimal with respect to its own goals.

5.3 Trajectory evaluation, ranking, and selection

Trajectories are evaluated by hs with respect to three criteria: 1) the mission’s score, 2) the total mass required
for propellant, and scientiﬁc equipment left at asteroids, and 3) the total time of ﬂight. The ideal mission will
have the greatest possible score, while requiring the lowest possible amounts of mass and time.

As mentioned in Sec. 3.1, a Pareto dominance approach [6] is used for handling the multiple objectives.
However, in this problem mass and time evaluations are only fairly comparable among trajectories that share
the same score. As such, ranking a set of trajectories involves 1) binning trajectories according to their score, and

2 http://esa.github.io/pykep/
3 Legs failing this check are immediately discarded, saving computation time that would otherwise be spent generating

Lambert arcs with excessive ∆V .

6

L.F. Sim˜oes et al.

2) applying non-dominated sorting [6] over the mass and time costs of trajectories within each bin. Identifying
the top trajectories in a given set takes place by iterating through bins in descending order of score, gradually
extracting their Pareto fronts. If only a subset of a Pareto front’s trajectories is required, those with lowest mass
cost are favored.

In a tree search, this process is applied at each depth-level to construct the beam with the best bw of the
newly extended solutions. Before that, however, hs is used for pruning nodes corresponding to missions that
require > 3500 kg, or > 15 years. Should that result in an empty pool of extended solutions, or the pool
otherwise be empty because no feasible transfer legs were found, the tree search has then reached its ﬁnal level
and is terminated. The beam of solutions carried over from the previous tree level will then be its ﬁnal output.
In Beam P-ACO, this signals the end of a generation. The contents of that ﬁnal beam are then merged with
the archive of non-dominated solutions found so far. By applying the previously described ranking process, the
archive will always be a Pareto front of trajectories that all share the maximum score reached to date. Beam
P-ACO will at this point refresh pheromones. Note that the combinatorial problem is asymmetric: an edge (i, j)
present in a good solution is not predictive of an edge (j, i) being likely to lead to good solutions. As such, an
(i, j) edge in an archived solution only results in pheromones along the (i, j) direction.

6 Experimental evaluation

An experimental evaluation was carried out to assess the performance of the diﬀerent Beam Search variants,
using the GTOC5 problem as a test case. Performance is here evaluated in terms of multiple criteria. Primarily,
we care about search algorithms that enable the consistent discovery of asteroid sequences having the greatest
possible length (score). Among equally scored missions, we care for the best possible coverage of the Pareto front
of mass and time costs required to achieve such score. Finally, these considerations must be traded-oﬀ against
the computational cost to obtain such solutions.

6.1 Setup

We adopt as measure of computational cost the number of trajectory legs optimized throughout the search.
This is in practice the main performance bottleneck, especially if instead of a Lambert model one were to use a
low-thrust one. A threshold of 100000 optimized legs was used as stopping criterion.

The performance of deterministic Beam Search was evaluated over a dense grid of settings for the beam width
(bw) and branching factor (bf ) parameters. In total, 118 diﬀerent setups were evaluated, all having upfront an
estimated cost of
100000 optimized legs required in order to complete execution at tree depth 16, where
missions reach and fully score the 16th asteroid (see Fig. 1). Being a deterministic algorithm, only a single run
was executed per setup.

≤

Stochastic Beam and Beam P-ACO were evaluated under the 5 diﬀerent conﬁgurations of bf and bw high-
lighted in red in Fig. 1. Being stochastic algorithms, 100 independent runs were performed per setup. Determin-
istic branching decisions were taken with a probability of q0 = 0.5 (q0 = 1 in Beam Search). In Beam P-ACO,
(cid:48)
pheromone and heuristic values contributed equally to the h
e heuristic: α = β = 1.0 (in the other Beam Search
variants, implicitly α = 0.0). Pheromone concentrations were limited to at most k = 3 contributions to each
node.

All tree searches reported here had the same root node. Its initial conditions were originally obtained during
the GTOC5 competition through a time-optimal low-thrust optimization of the launch leg, as described in [21,
Sec. 2] and exempliﬁed in [16, Sec. 6.1]. After applying the linear model to deﬁne the self-ﬂy-by leg, the initial
state is then a trajectory that has already scored 1 point at asteroid 2001 GP2 (id: 1712), and is ready to depart
from it at epoch 59325.360 MJD, having already expended 253.518 kg and 198.155 days from the total budgets.

6.2 Results

The results obtained in the experimental evaluation are shown in Figures 1–4. Analyses into the quality of
solutions found in a run consider their hs evaluations, in particular, the extent to which they minimize mass
and time costs. Though missions of score 17 were found in these experiments, they were only rarely found, and
furthermore only a single distinct mission was ever found with that score. Therefore, analyses into the quality of
solutions found consider exclusively the score 16 missions found in runs. Speciﬁcally, we evaluate the Pareto fronts
of score 16 missions found, and measure their coverage of the objective space using the hypervolume indicator
[29] – a measure of the total area of objective space dominated by points in the Pareto front. A reference point
of 3500 kg and 15 years is used in all hypervolume calculations, corresponding to the limits set forth in the

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

7

Fig. 1. Beam Search results from the parameter sweep over beam width (bw) and branching factor (bf ) conﬁgurations
(118 setups in total, with costs below the threshold of 100000 optimized trajectory legs). Darker is better. Highlighted in
red: conﬁgurations used in the Stochastic Beam and Beam P-ACO experiments.

problem speciﬁcation. Runs that do not ﬁnd any score 16 mission, and therefore have an empty Pareto front,
have a hypervolume of 0.0.

≈

Parameter sweep of Beam Search conﬁgurations: the results from these experiments are shown in
Fig. 1. Fig. 1(a) shows the highest score reached among the missions designed in each run. Fig. 1(b) shows the
hypervolume of the Pareto front of mass and time costs in score 16 missions found in each run. Fig. 1(c) shows
the prevalence of unfeasible solutions in the continuous search spaces of asteroid transfers. In the setups that
23% of the attempted asteroid transfers had a feasible solution.
reached score 17, for instance, on average only
Quantity of top solutions: Fig. 2 shows the results from the evaluation of the quantity of score 16 or
17 solutions found by each algorithm over time. Only distinct trajectories count here to a run’s totals – two
trajectories are equal if their asteroid sequence is exactly the same. The three plots shown correspond, from
left to right, to the results from Beam Search, Stochastic Beam, and Beam P-ACO. Fig. 2(a) shows one curve
for each of Beam Search’s 118 evaluated setups. The algorithm being deterministic, each curve depicts also
one single run. Overlaid in this plot is the Pareto front of cost-beneﬁt trade-oﬀs attainable through diﬀerent
parameter settings: it shows the minimum number of trajectory legs that need to be optimized to obtain diﬀerent
amounts of top scoring trajectories. This Pareto front is replicated in the other two plots to allow a performance
comparison between the deterministic and randomized Beam Search variants. The “hooks” shape seen, especially
in Fig. 2(a), results from the way Beam Search operates: most of its execution time is spent gradually descending
through the tree, level by level. Eventually, the search reaches depth 15, at which point each branching event
possibly leads to a score 16 solution being found. Hence, the sudden explosion in the total count. The plots for
Stochastic Beam and Beam P-ACO also display this eﬀect, but in them values are averaged over 100 runs, and
consecutive tree searches (generations) are chained together.

Quality of top solutions: Figures 3 and 4 show the results from the evaluation of the quality of score 16
solutions found by each algorithm over time. Fig. 3 is structured in the same way as Fig. 2, so the description
made above for it also applies here. Fig. 3 shows how the total dominated area of objective space (hypervolume)
grows over time, as new score 16 trajectories are found and enter the Pareto front. Fig. 4 takes a closer look at
the setup bw = 20, bf = 125, over which both randomized Beam Search algorithms are seen in Fig. 3 reaching
median performance (out of the ﬁve evaluated setups). The plots shown are Empirical Attainment Functions
(EAFs) [8], which depict the likelihood of objective space vectors being dominated (or matched) in an algorithm’s
run. It aggregates into one visualization the ﬁnal Pareto fronts of score 16 trajectories found across all 100 runs.
In Fig. 4(a–b), the boundaries of the shaded areas show the 0.25, 0.5 and 0.75 “attainment surfaces”. In other
words, the areas having at least 25, 50 or 75% chance of being attained (dominated or matched) by points in a
run’s ﬁnal Pareto front. Fig. 4(c) takes the diﬀerence between the EAFs for Beam P-ACO and Stochastic Beam,
and shows how they compare in terms of likelihood to attain diﬀerent areas of objective space, making clear the
extent to which Beam P-ACO outperforms Stochastic Beam. The Pareto front with greatest hypervolume found
by deterministic Beam Search is shown for reference.

7 Analysis & discussion

Conceptually, we showed in this research a formal equivalence between four combinatorial optimization algo-
rithms: Beam Search, Stochastic Beam, Beam P-ACO, and P-ACO. We demonstrated how they can all be
implemented in the same algorithm, and made accessible through minor parameter changes.

A surprising result, that validates the introduced phasing indicator, as well as the baseline multi-objective
Beam Search algorithm employed here, was the discovery of a score 17 mission (17 asteroids visited, and fully

8

L.F. Sim˜oes et al.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 2. Quantity of top solutions: cumulative number of distinct trajectories of score 16 or 17 found over time. Note the
change of scale in the vertical axis.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 3. Quality of top solutions: growth of the dominated area of objective space over time (hypervolume of the Pareto
front of score 16 trajectories found so far).

investigated). Searches over this model of the GTOC5 problem, using these same initial conditions, had previously
only reached a maximum score of 16 [21]. Furthermore, those searches, employing a Branch & Prune tree search
algorithm, took days to complete during the GTOC5 competition. The Beam Search variants under consideration
could all ﬁnd that single score 17 mission in runs lasting 10 to 20 minutes. Pure P-ACO is the exception here,
having never surpassed a score 15 in our experiments (with a bf = 1, the high chance of an asteroid transfer’s
optimization problem not having a feasible solution greatly limits performance).

The ﬁrst research question in Sec. 1 called for a demonstration of examples where randomized Beam Search
variants would outperform the deterministic approach. If we evaluate in terms of mean performance, then, as we
can see from Figures 2–3, the current experimental evaluation could not ﬁnd any such cases. At all computational
cost thresholds we can ﬁnd deterministic setups outperforming both of the randomized Beam Search variants,
both in the quantity of score 16 solutions found, and in their quality. The deterministic algorithm was tuned to
a considerably greater extent than the randomized ones (118 setups, against only 5), so it is possible that we
are presenting a skewed view of each algorithm’s capabilities. Alternatively, it may be that the speciﬁc problem
we consider here is so resource-constrained, that the construction of long asteroid sequences actually demands
for greedy branching decisions to be taken at every single step. In such a case, the search will not beneﬁt from
the greater tolerance for local sub-optimality present in the randomized Beam Search variants.

The second research question in Sec. 1 considers how the addition of feedback (pheromones) in Beam P-ACO
changes performance, by comparison with Stochastic Beam, where search proceeds along multiple independent
generations with no feedback between them. Figures 2–4 show a clear positive eﬀect of feedback on performance,
both in the quantity and quality of top solutions found. This eﬀect is seen to be larger the smaller the branching
factor is. In other words, the greater the branching factor, the likelier it is for good solutions to be identiﬁed in
a single generation, and thus the lower the beneﬁt from feedback.

An identical comparison between randomized Beam Search variants, with and without pheromone updates,
can be found in [3, Sec. 6.2] (for a diﬀerent hybrid algorithm, and diﬀerent problems). There, pheromones are also
found to improve performance, though in small amounts. The current research goes beyond the analysis in [3] by
uncovering the inverse relationship between branching factor and beneﬁt from pheromones, and in demonstrating
the superior performance of deterministic Beam Search over the randomized variants, given proper tuning.

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

9

(a) Stochastic Beam

(b) Beam P-ACO

(c) Performance diﬀerence

Fig. 4. Empirical Attainment Functions: probabilities of objective space vectors being dominated (or matched) in an
algorithm’s run. The darker a region is, the likelier it is that in a run a solution will be found that dominates it. Considers
the Pareto fronts of score 16 trajectories found up to the 100000 optimized legs threshold.

Overall, an apt description of the behaviours displayed by the randomized algorithms is that they approximate
the performance of deterministic Beam Search setups that use larger beam widths and branching factors –
probabilistic branching eﬀectively picks a subset of the successor nodes that deterministic Beam Search with
larger branching factors would follow. The eventual success or failure of a run will then depend on how well those
decisions align with those a better informed algorithm would take. This can be seen on display in Fig. 4. There,
we see that in the extreme a randomized Beam Search run can closely approximate the Pareto front of score 16
trajectories found by an “optimally” tuned deterministic Beam Search (with a bf = 125, less than half of the
bf = 275 needed in the deterministic setting). However, it can also fail to ﬁnd a single score 16 trajectory: 7 of
the 100 runs in Fig. 4(a), and 4 in Fig. 4(b) could only reach a score 15, thus ending in this analysis with a min.
hypervolume of 0.0. Overall, the median hypervolume of 52.75 reached by Beam P-ACO in Fig. 4(b) is higher
than that reached in
60% of the 118 deterministic Beam Search setups, and also higher than that reached in
50% of the 32 deterministic setups that had equal or larger beam width and branching factors.

≈

In a real setting, in the preliminary design phase, missions would be constructed not from a single set of initial
conditions, as done here, but from a great number of them, possibly numbering in the thousands. Being anytime
algorithms, the randomized Beam Search variants investigated here can be employed in a racing approach [22],
with multiple tree searches being executed in parallel. Computational eﬀort would then be dynamically allocated
across searches, as a function of the growing statistical evidence as to which searches lead to better missions.
In such a setting, the randomized Beam search variants would be preferable choices, over the deterministic
algorithm.

8 Conclusion

We considered here a hard real-world problem of spacecraft trajectory design, featuring an interplay of combi-
natorial and (constrained) continuous optimization sub-problems, dealing at diﬀerent levels with uncertain and
multi-objective quality functions. In this challenging domain, we investigated a number of extensions to Beam
Search, the traditionally used approach to solve such problems. We provided an improved orbital phasing indi-
cator, and its transformation into a probability distribution over candidate bodies to extend missions with. We
then hybridized the search process with the well known Ant Colony Optimization algorithm, and investigated
the behaviours of the resulting randomized Beam Search variants. We found them to have lower sensitivity to
the beam width and branching factor parameter settings, while oﬀering in each generation a partially-informed
approximation to the behaviours of deterministic setups running at higher computational costs.

Acknowledgment

References

& Sons, Inc. (1987)

Lu´ıs F. Sim˜oes was supported by FCT (Minist´erio da Ciˆencia e Tecnologia) Fellowship SFRH/BD/84381/2012.

1. Global Trajectory Optimization Competition portal, http://sophia.estec.esa.int/gtoc_portal/
2. Bisiani, R.: Beam search. In: Shapiro, S.C. (ed.) Encyclopedia of Artiﬁcial Intelligence, vol. 1, pp. 56–58. John Wiley

10

L.F. Sim˜oes et al.

3. Blum, C.: Beam-ACO–Hybridizing ant colony optimization with beam search: an application to open shop scheduling.

Computers & Operations Research 32(6), 1565–1591 (2005)

4. Ceriotti, M., Vasile, M.: Automated multigravity assist trajectory planning with a modiﬁed ant colony algorithm.

Journal of Aerospace Computing, Information, and Communication 7(9), 261–293 (2010)

5. Ceriotti, M., Vasile, M.: MGA trajectory planning with an ACO-inspired algorithm. Acta Astronautica 67(9–10),

6. Deb, K.: Multi-Objective Optimization using Evolutionary Algorithms. John Wiley & Sons, Inc., Chichester, England

1202–1217 (2010)

(2001)

7. Dorigo, M., St¨utzle, T.: Ant Colony Optimization. A Bradford Book, MIT Press, Cambridge, MA (2004)
8. Grunert da Fonseca, V., Fonseca, C.M., Hall, A.O.: Inferential performance assessment of stochastic optimisers and
the attainment function. In: Zitzler, E., Thiele, L., Deb, K., Coello Coello, C.A., Corne, D. (eds.) Evolutionary
Multi-Criterion Optimization: First International Conference, EMO 2001, pp. 213–225. Springer, Berlin, Heidelberg
(2001)

9. Gad, A.H.: Space trajectories optimization using variable-chromosome-length genetic algorithms. Ph.D. thesis, Michi-

gan Technological University (2011)

10. Grigoriev, I.S., Zapletin, M.P.: Choosing promising sequences of asteroids. Automation and Remote Control 74(8),

11. Grigoriev, I.S., Zapletin, M.P.: GTOC5: Problem statement and notes on solution veriﬁcation. Acta Futura 8, 9–19

1284–1296 (2013)

(2014)

12. Guntsch, M.: Ant algorithms in stochastic and multi-criteria environments. Ph.D. thesis, Karlsruher Institut f¨ur

Technologie (2004), http://d-nb.info/1013929756

13. Guntsch, M., Middendorf, M.: A Population Based Approach for ACO. In: Cagnoni, S., Gottlieb, J., Hart, E.,
Middendorf, M., Raidl, G.R. (eds.) Applications of Evolutionary Computing: EvoWorkshops 2002: EvoCOP, EvoIASP,
EvoSTIM/EvoPLAN. pp. 72–81. Springer, Berlin, Heidelberg (2002)

14. Guntsch, M., Middendorf, M.: Applying Population Based ACO to Dynamic Optimization Problems. In: Dorigo, M.,
Di Caro, G., Sampels, M. (eds.) Ant Algorithms: Third International Workshop, ANTS 2002. pp. 111–122. Springer,
Berlin, Heidelberg (2002)

15. Guntsch, M., Middendorf, M.: Solving Multi-criteria Optimization Problems with Population-Based ACO. In: Fon-
seca, C.M., Fleming, P.J., Zitzler, E., Thiele, L., Deb, K. (eds.) Evolutionary Multi-Criterion Optimization: Second
International Conference, EMO 2003. pp. 464–478. Springer, Berlin, Heidelberg (2003)

16. Izzo, D.: PyGMO and PyKEP: Open Source Tools for Massively Parallel Optimization in Astrodynamics (the case
of interplanetary trajectory optimization). In: 5th International Conference on Astrodynamics Tools and Techniques
(ICATT) (2012)

17. Izzo, D.: Revisiting Lambert’s problem. Celestial Mechanics and Dynamical Astronomy 121(1), 1–15 (2015)
18. Izzo, D., Getzner, I., Hennes, D., Sim˜oes, L.F.: Evolving Solutions to TSP Variants for Active Space Debris Removal.
In: Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation. pp. 1207–1214. ACM
(2015)

19. Izzo, D., Hennes, D., Sim˜oes, L.F., M¨artens, M.: Designing complex interplanetary trajectories for the global trajectory
optimization competitions. In: Fasano, G., Pint´er, J.D. (eds.) Space Engineering: Modeling and Optimization with
Case Studies, pp. 151–176. Springer (2016)

20. Izzo, D., Sim˜oes, L.F., M¨artens, M., de Croon, G.C.H.E., Heritier, A., Yam, C.H.: Search for a Grand Tour of the
Jupiter Galilean Moons. In: Genetic and Evolutionary Computation Conference (GECCO 2013). pp. 1301–1308. ACM
(2013)

21. Izzo, D., Sim˜oes, L.F., Yam, C.H., Biscani, F., Di Lorenzo, D., Addis, B., Cassioli, A.: GTOC5: Results from the

European Space Agency and University of Florence. Acta Futura 8, 45–55 (2014)

22. Maron, O., Moore, A.W.: The racing algorithm: Model selection for lazy learners. In: Aha, D.W. (ed.) Lazy Learning,

pp. 193–225. Springer Netherlands (1997)

23. Oliveira, S., Hussin, M.S., St¨utzle, T., Roli, A., Dorigo, M.: A Detailed Analysis of the Population-Based Ant Colony

Optimization Algorithm for the TSP and the QAP. Tech. Rep. TR/IRIDIA/2011-006, IRIDIA (Feb 2011)

24. Petropoulos, A.E., Bonﬁglio, E.P., Grebow, D.J., Lam, T., Parker, J.S., Arrieta, J., Landau, D.F., Anderson, R.L.,
Gustafson, E.D., Whiﬀen, G.J., Finlayson, P.A., Sims, J.A.: GTOC5: Results from the Jet Propulsion Laboratory.
Acta Futura 8, 21–27 (2014)

25. Sinha, A., Malo, P., Deb, K.: Evolutionary bilevel optimization: An introduction and recent advances. In: Bechikh,
S., Datta, R., Gupta, A. (eds.) Recent Advances in Evolutionary Multi-objective Optimization, pp. 71–103. Springer
(2017)

26. Stuart, J.R., Howell, K.C., Wilson, R.S.: Design of end-to-end trojan asteroid rendezvous tours incorporating scientiﬁc

value. Journal of Spacecraft and Rockets 53(2), 278–288 (2016)

27. Weise, T., Chiong, R., L¨assig, J., Tang, K., Tsutsui, S., Chen, W., Michalewicz, Z., Yao, X.: Benchmarking optimiza-
tion algorithms: An open source framework for the traveling salesman problem. IEEE Computational Intelligence
Magazine 9(3), 40–52 (2014)

28. Wilt, C.M., Thayer, J.T., Ruml, W.: A comparison of greedy search algorithms. In: Proceedings of the Third Annual

Symposium on Combinatorial Search (SOCS-10). pp. 129–136 (2010)

29. Zitzler, E., Thiele, L., Laumanns, M., Fonseca, C.M., Grunert da Fonseca, V.: Performance assessment of multiob-
jective optimizers: an analysis and review. IEEE Transactions on Evolutionary Computation 7(2), 117–132 (2003)

Multi-rendezvous Spacecraft Trajectory
Optimization with Beam P-ACO

Lu´ıs F. Sim˜oes1, Dario Izzo2, Evert Haasdijk1, and A. E. Eiben1

1 Vrije Universiteit Amsterdam, The Netherlands
2 European Space Agency, ESTEC, The Netherlands
{luis.simoes,e.haasdijk,a.e.eiben}@vu.nl,dario.izzo@esa.int

7
1
0
2
 
r
p
A
 
3
 
 
]
E
N
.
s
c
[
 
 
1
v
2
0
7
0
0
.
4
0
7
1
:
v
i
X
r
a

Abstract. The design of spacecraft trajectories for missions visiting multiple celestial bodies is here framed
as a multi-objective bilevel optimization problem. A comparative study is performed to assess the perfor-
mance of diﬀerent Beam Search algorithms at tackling the combinatorial problem of ﬁnding the ideal
sequence of bodies. Special focus is placed on the development of a new hybridization between Beam
Search and the Population-based Ant Colony Optimization algorithm. An experimental evaluation shows
all algorithms achieving exceptional performance on a hard benchmark problem. It is found that a prop-
erly tuned deterministic Beam Search always outperforms the remaining variants. Beam P-ACO, however,
demonstrates lower parameter sensitivity, while oﬀering superior worst-case performance. Being an anytime
algorithm, it is then found to be the preferable choice for certain practical applications.

Keywords: Beam Search, Ant Colony Optimization, P-ACO, Bilevel optimization, Multi-objective opti-
mization, Spacecraft trajectories.

1 Introduction

The design of multi-rendezvous spacecraft trajectories poses a considerable challenge to aerospace engineers. This
is due, in part, to the combinatorial nature of the problem that emerges with the increase in number of bodies
to visit along a mission (e.g., planets, moons, asteroids). The complexity of the task stems from an interplay of
multiple factors under optimization, including: the decision of which of the bodies of interest to visit, the order
in which they are to be visited, and the design of the actual trajectory arcs to take the spacecraft between them.
Maximization of such a mission’s scientiﬁc return may demand for as many bodies to be visited as possible,
in the shortest possible amount of time, while consuming the lowest possible amount of propellant mass. The
underlying optimization problem can be seen as a variant of the well known Traveling Salesman Problem (TSP),
with nodes corresponding to the celestial bodies under consideration, and edge weights a function of the costs
(time and mass) to propel the spacecraft between them. These costs vary as bodies move in space along their
trajectories, but also as a function of the spacecraft’s state: a lighter spacecraft that has already shed some of
its mass is simpler to maneuver.

As evidence into the complexity, and relevance, of the above described problems, consider the following:
since 2005, the aerospace engineering community has periodically organized GTOC, the Global Trajectory Op-
timization Competition [1]. In it, diﬀerent groups have taken turns at creating “nearly-impossible” problems
of interplanetary trajectory design to pose to the community. Of the 8 competitions organized to date, 4 were
multiple-asteroid rendezvous problems of the kind considered here, and 3 others were multiple ﬂy-by problems
posing similar combinatorial optimization challenges.

In [19], a multi-objective Beam Search algorithm is described, and applied to a low-thrust model of the
GTOC7 problem. In this research, we propose a series of extensions to it. First, we provide an improved orbital
phasing indicator, and a procedure to create from it a probability distribution over candidate bodies to extend
missions with. Second, we hybridize the Beam Search procedure with the well known Ant Colony Optimization
algorithm [7]. We conclude by evaluating the resulting algorithms on a Lambert model of the GTOC5 problem
[11]. Two main research questions are investigated in this paper:

1. Can the randomization of Beam Search, via probabilistic branching choices, improve performance?
2. Does the pheromone-based positive reinforcement of sequences lead to improved performance?

This paper is organized as follows: in Sec. 2 we list related work in the combinatorial optimization of spacecraft
trajectories. Sec. 3 describes the Beam Search algorithm, and the proposed randomized variants. In Sec. 4 we
describe the GTOC5 problem used in our experiments, and in Sec. 5 the interfacing between it and the search
algorithms. Sec. 6 reports on an experimental evaluation, and Sec. 7 discusses its results. Conclusions are drawn
in Sec. 8.

Code available at https://github.com/lfsimoes/beam_paco__gtoc5.

2

L.F. Sim˜oes et al.

2 Related work

Beam Search [2,28] has emerged as the de facto standard approach to tackle the combinatorial optimization
sub-problems present in most GTOC competitions. Though at times called by other names, it is common to ﬁnd
the general architecture of a tree search that has its computational cost bounded via the selection of a limited
number of nodes to branch at each depth-level (non-selected nodes at that depth being immediately discarded).
We can ﬁnd examples of such algorithms in the winning solutions to GTOC4 [10], GTOC5 [24], and in the second
ranked solution to GTOC7 [19], which the present research builds on. The Lazy Race Tree Search described in
[20], which at the time presented the best known solution to the GTOC6 problem, can also be seen as a Beam
Search variant. In it, the “beam” is composed of all nodes, possibly originating from diﬀerent tree depths, that
fall within a given mission time window. The most promising nodes in that sliding window are branched, and
the remaining ones discarded.

Evolutionary Algorithms have been explored as an alternative to solve combinatorial problems in mission
analysis. In the GTOC5 problem considered here, for instance, [21] and [9] used Genetic Algorithms with “hidden
genes”, to evolve chromosomes encoding asteroid sequences. These approaches were however outperformed in
the GTOC5 competition by tree-based approaches. In [18] an evolutionary approach is described for designing
debris removal missions. In this highly dynamic trajectory problem, the Inver-over Genetic Algorithm was found
to provide competitive solutions to those constructed by diﬀerent approaches.

Ant Colony Optimization (ACO) [7] was used by some teams in the GTOC competitions over the years. How-
ever, to our knowledge, no scientiﬁc publication has been produced to date with the details of such deployment.
The most successful use of ACO in a GTOC competition was possibly that by the NASA/JPL team, winners of
GTOC7. According to the GTOC portal [1], a “very competitive solution was found by JPL using an Ant Colony
Optimization approach. Eventually a diﬀerent solution turned out to be better and was thus submitted”1. Other
applications of ACO algorithms to optimize the sequences of bodies to visit along a spacecraft’s trajectory can
be found in [5,4,26]. In them, the test problems over which algorithms are evaluated have few bodies to select
from (
5 bodies. In contrast, sequences of up to 17 asteroids are assembled
10), and the found sequences visit
here, from a database of 7075 available asteroids.

≈

≈

A hybridization of Beam Search and ACO was previously presented in [3]. A diﬀerent hybridization is
introduced here, “Beam P-ACO”, that diﬀers mainly in the ACO variant under use, and in being a multi-
objective algorithm.

3 Beam Search

Beam Search [2,28] is a tree search algorithm where computational cost is bounded by employing heuristics
that allow for non-promising solutions under construction to be discarded. It can be executed as a variant of
depth-ﬁrst or breadth-ﬁrst search. When operating as a variant of breadth-ﬁrst search, as is done here, Beam
Search traverses the tree one depth-level at a time. From all the solutions generated at one level, only a limited
subset (the so called “beam”) will be selected for carrying over to the next level. An evaluation of solutions’
quality determines whether they are included in the beam, or instead permanently discarded from the search.
The size of the beam is designated as the “beam width”, and is here represented as bw. The extension of partial
solutions in the beam can be performed towards all possible successor nodes, or instead towards only a limited
number, enabling further control over the search’s computational cost. A “branching factor” parameter, here
represented as bf , indicates that each solution in the beam will be extended only towards bf successor nodes,
chosen as a function of how good the solutions they lead to are estimated to be.

∗

In summary, at one level of the tree, each of the beam’s bw solutions will be expanded towards bf new nodes,
resulting in bw
bf new partial solutions. These are then evaluated, and the bw best of those will become the
beam that is carried over to the next tree level. The search process is therefore driven by two heuristics: 1) hs,
which evaluates partial solutions (a path down from the tree’s root node), and 2) he, which evaluates candidate
successor nodes for extending solutions with. The more accurately these heuristics point to the complete optimal
solution, the more successful the search will be. Beam Search being an “incomplete” search algorithm however,
the identiﬁcation of the globally optimal solution is not guaranteed [28].

3.1 Multi-objective heuristics

The ﬁrst extension we introduce to the conventional Beam Search framework is the addition of multi-objective
heuristics. That is, either hs, or he (or both) will evaluate partial solutions or candidate extensions, respectively,

1 The NASA/JPL team’s GTOC7 submission report and workshop slides, containing details of their ACO deployment,

can be found in the GTOC portal [1].

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

3

according to multiple objectives. In such a scenario, it is then necessary to employ techniques that will allow for
the ranking of alternatives, or probabilistic selection among them, that take into account the multiple evaluations.
In our current implementation, hs evaluates partial solutions according to multiple objectives, while the
evaluation of candidate extensions by he remains single-objective. Beam Search must then be able to select
at each tree level the best bw solutions from among the newly generated extensions. To that end, we employ
a Pareto dominance approach. Speciﬁcally, we apply non-dominated sorting [6] to the pool of extensions, and
include in the beam as many of the best Pareto fronts as needed to reach the beam size bw. That process will
most likely lead to a ﬁnal Pareto front whose full inclusion in the beam would exceed bw. A tie-breaker criterion
must then be deﬁned to determine which of those (equally good) solutions to keep, and which to discard (see
Sec. 5.3).

3.2 Probabilistic branching

In the “Stochastic Beam” algorithm, the beam’s construction remains deterministic, but the branching stage
will now be subjected to probabilistic decisions. Given a solution in the beam, with a probability q0 it will be
extended towards the bf nodes with best he evaluation. With a probability of 1
q0, the choice of bf nodes will
instead be a biased sampling without replacement, proportional to he. Note that through a parameter setting
of q0 = 1 the algorithm reverts to the previously described (deterministic) Beam Search.

−

Beam Search will always converge to the same solution, given the same root node. Stochastic Beam however,
can be executed multiple times, and possibly converge to diﬀerent solutions in each run. These solutions may
outperform those found by Beam Search, by including links to nodes that Beam Search incorrectly prunes, due to
ranking above the bf threshold. Non-determinism therefore provides a degree of robustness against imperfections
in the he heuristic.

3.3 Hybridization with Ant Colony Optimization

A hybridization of Beam Search with Ant Colony Optimization brings two mains changes to the algorithmic
framework: 1) multiple tree searches are now performed, in consecutive runs designated as “generations”, and 2)
positive feedback takes place, in the form of “pheromones” that change the he heuristic evaluation of candidate
successor nodes, therefore biasing the dynamics of tree searches in subsequent generations.

Of the many ACO variants in existence, we chose to hybridize with the Population-based Ant Colony Opti-
mization algorithm (P-ACO), introduced in [13,14,15,12]. A detailed analysis in [23] found it to be “competitive
to the state-of-the-art ACO algorithms with the advantage of ﬁnding good solution quality in a shorter com-
putation time”. Also, a recent thorough benchmarking of a high number of approaches to solve the Traveling
Salesman Problem found P-ACO to be the best of the tested global optimization algorithms, as well as the best
overall algorithm when seeded and hybridized with local search [27].

In “Beam P-ACO”, a partial solution at node i, with available successors S evaluates the quality of extending

towards node j by

(cid:48)
e(i, j) =
h

τ (i, j)αhe(i, j)β
s∈S τ (i, s)αhe(i, s)β

(cid:80)

where τ is the pheromone concentration along an edge, and he (known as η in the common ACO notation) is
the problem-speciﬁc heuristic. The weighting factors α and β determine the relative contributions of pheromone
and heuristic values to the branching decision. As in the previously described Stochastic Beam algorithm, with
e evaluation, while with a probability
a probability q0 the solution is extended towards the bf nodes with best h
of 1
e. A setting of α = 0
would result in all pheromone information being ignored, and Beam P-ACO would then revert to the Stochastic
Beam algorithm.

q0, that choice is instead a biased sampling without replacement proportional to h

−

(cid:48)

(cid:48)

The pheromone concentration τ along an edge takes in P-ACO discrete values in a given range [τinit, τmax].
We deﬁne these parameters as τinit = 1/(n
1) and τmax = 1, where n is the total number of nodes. This
implements the convention from [14] of having the row/column sum of initial pheromone values be 1 (assuming
a problem where revisits are disallowed, and the diagonal of the pheromone matrix is therefore 0). Given the
τinit)/k
pheromone range, and k, the maximum size of a population of top solutions, we can deﬁne τ∆ = (τmax
as the pheromone increment deposited in an edge by a solution in the population that follows it along its path. If
l solutions in the population include the edge (i, j), its pheromone concentration will then be τ (i, j) = τinit +lτ∆.

−

−

3.4 Pareto elitism

To complete the deﬁnition of Beam P-ACO, a population update model must be deﬁned, a model that handles
multi-objective evaluations produced by the hs heuristic. We propose here a variation of the method deﬁned in

4

L.F. Sim˜oes et al.

[15, Sec. 3.1]. An archive will collect the set of non-dominated solutions found so far. At the end of each tree
search, the best found solutions are merged into it. After updating the archive, the population that deﬁnes the
pheromone matrix is reset.

In standard P-ACO [13], the population is implemented as a FIFO-queue (each generation’s best solution
enters the population, possibly displacing the oldest solution it contains so as not to exceed the population size
k). We propose here instead to have one FIFO-queue per each of the problem’s n nodes, each with a size limit
of k. When resetting the population, all FIFO-queues are emptied. Then, solutions in the archive are shuﬄed,
and one by one, they are added to the population (of edges). Each edge (i, j) in those solutions will result in j
being added to the ith FIFO-queue. The ith FIFO-queue then directly maps to the ith row of the pheromone
matrix, and its contents deﬁne which nodes do pheromones most bias a solution at node i to branch towards.

If solutions visit all n nodes, as is the case in many problems (e.g., TSP), this process will result in only the
last k solutions of the shuﬄed archive adding pheromones to the population. A random unbiased sampling of k
archive solutions would then be suﬃcient. However, in problems where solutions include only some of the nodes
(such as here in the GTOC5 problem, where n = 7075, but a solution will visit < 20 nodes), only small amounts
of pheromone would be deposited, and plenty of information in the archive would be ignored. By following in
such problems the process described above, the pheromone matrix may now receive contributions from more
than k solutions, while still only receiving
k contributions at the level of each individual node. This way, in
the limit, all solutions in the archive may end up depositing pheromones.

≤

4 The GTOC5 trajectory design problem

The trajectory design problem posed in the 5th edition of the Global Trajectory Optimization Competition
(GTOC5) is used as benchmark in the current research. The full problem speciﬁcation can be found in [11]. The
problem dataset, along with additional information related to this edition of the competition, can be found in
the GTOC portal [1]. Our current work makes use of the problem model developed by the competition’s 4th
ranked team [21].

In the GTOC5 problem, a spacecraft leaves the Earth at some point along an 11-year time-window, to embark
on a 15 year (max.) mission of asteroid exploration. The spacecraft starts with a mass of 4000 kg, of which 3500
are reserved for propellant mass, and the scientiﬁc equipment used at asteroids. A total of 7075 asteroids are
available as possible targets to visit along the mission. The exploration of a single asteroid is carried out in
two stages. First, the spacecraft must rendezvous (match position and velocity) with the asteroid, and leave
there a 40 kg scientiﬁc payload. Later in the mission, the spacecraft performs a ﬂy-by of the asteroid, and sends
a 1 kg “penetrator” towards it. Upon impact, this penetrator would release a cloud of debris, that would be
investigated by the payload left there. Partial scores are given for the rendezvous and ﬂy-by maneuvers. An
asteroid on which both are performed contributes 1 point to the full score. In the problem models developed
by most teams, including the one used here, the problem is simpliﬁed by having an asteroid’s ﬂy-by maneuver
performed immediately after its rendezvous: the spacecraft departs the asteroid, moves some distance away, and
then accelerates back towards it. Under this simpliﬁcation, a trajectory that manages to complete all pairs of
maneuvers on a given sequence of m asteroids will score m points.

GTOC5 was won by a team from NASA/JPL with a score 18 trajectory [24]. In contrast, the model being used
here, with the initial trajectory conditions listed in Sec. 6.1, has only ever allowed the discovery of trajectories
with at most a score 16. Nevertheless, for the goal of evaluating the performance of algorithms that solve the
combinatorial part of the problem (ﬁnding the asteroid sequence that enables the greatest possible score), the
used model is perfectly suitable.

5 Bilevel optimization of GTOC5 trajectories

The design of GTOC5 trajectories is here tackled as a multi-objective bilevel optimization problem [25]. At an
upper level, optimization seeks to identify a good subset of asteroids, and the order in which they are to be
visited. At a lower level, each chosen pair of asteroids triggers an optimization of the trajectory leg that takes the
spacecraft between them. This section details how the diﬀerent Beam Search variants are employed for solving
the upper-level combinatorial problem, and how the lower-level process optimizes transfer legs.

5.1 Orbital phasing indicators as heuristic estimators

The problem of assembling an eﬃcient heuristic able to help select possible asteroid targets is crucial and very
diﬃcult at the same time. The ground truth (i.e. the optimal ∆V cost obtained optimizing the transfer leg) is far

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

5

|

−

1,

A

A

xt

xs

2, ∆T ) =

, where x = (cid:2) 1
|

too expensive to be be computed for all possible asteroid targets and for all states encountered along the search.
A solution to this problem was recently proposed via the development of so-called orbital phasing indicators [19].
These essentially allow to introduce for each epoch ts a metric over the set of all possible asteroids, a metric that
can, in turn, be used to detect asteroid neighborhoods eﬃciently. It was shown in [19] how the orbital indicator,
∆T r(ts)(cid:3) and r(ts) and v(ts) correspond
deﬁned as do(
to the asteroid ephemeris, positively correlates to some extent to the ground truth (i.e. the asteroids that are
actually easy to reach via an orbital transfer). It essentially considers a snapshot at ts of the asteroid population
and, using a zero order approximation for the dynamics, predicts what asteroids are the closest in terms of
transfer ∆V . As such, it is bound to neglect the known state of the asteroid population at the arrival time tt,
which seems as a loss of available information. A simple modiﬁcation to the orbital indicator, though, allows
to account for the ﬁnal asteroid geometry and thus to improve the overall correlation to the ground truth. In
essence, one can consider the orbital indicator backward in time, starting from the arrival asteroid, to get a new
indicator (note that asteroid velocities will have to have their sign inverted). The average between the two, i.e.
the orbital indicator and the backward orbital indicator, is what we use here and call improved orbital indicator,
deﬁned as do(cid:48)(

∆T r(ts) + v(ts), 1

xs

xt

1,

|

−

, where
|

A

A

2, ∆T ) =
(cid:20) 1
∆T

x =

r(ts) + v(ts),

r(ts),

r(tt + ∆T )

v(tt + ∆T ),

1
∆T

1
∆T

−

(cid:21)
r(tt + ∆T )

1
∆T

i,

A

A

i, we compute do(cid:48)(

For every node i being branched during the search, to which corresponds a trajectory presently at asteroid
j, ∆T ) for all of the problem’s n nodes, assuming a reference transfer time of ∆T = 125
A
p(i, j)/n)γ, where p(i, j)
days. From it we build a probability distribution over successor nodes as he(i, j) = (1
j, ∆T ) among all estimated costs. This results in a selection probability
is the rank in
that decays exponentially with increasing rank, at a rate tuned through γ. A setting of γ = 50 is used in this
problem. There is then a
84%
among the 250 best. Finally, the problem disallows revisits to asteroids. So, for any node i, he(i, j) = 0 if j was
already visited at any previous point.

30% chance of branching towards an asteroid ranked among the 50 best, and

0, . . . , n
{

of do(cid:48)(

1
}

A

A

−

≈

−

≈

i,

5.2 Optimization of transfer legs

During the tree search, branching a partial solution into a given node triggers an optimization process. Its end
result will be the deﬁnition of the transfer leg that allows the spacecraft to rendezvous with the corresponding
asteroid. Adding the new leg extends the mission’s trajectory, which can then be reevaluated by the hs heuristic.
In the approach followed here, only the trajectory’s rendezvous legs need to be optimized. The cost estimates
for self-ﬂy-by legs are instead approximated by a linear acceleration model [21, Sec. 3].

≈

Each transfer will have a duration in a set time window of [60, 500] days. A grid of 50 evenly spaced values
deﬁnes the candidate transfer times, ∆T (
9 days separation between grid points). For each ∆T , we employ
PyKEP’s [16]2 multiple revolution Lambert solver [17,19] to design a trajectory arc having that exact duration.
If multiple revolution solutions exist for a given ∆T , the one with lowest ∆V is chosen. Two constraints are
imposed: 1) ∆T should exceed the parabolic time of ﬂight given by Barker’s equation3, and 2) the leg’s maximum
acceleration should be < 90% of the maximum supported by the spacecraft. These constraints lead many transfers
to have no feasible solution, for any ∆T (the targeted asteroid is simply unreachable). From all ∆T points in the
grid that do have a feasible solution, the one with lowest ∆V is chosen to deﬁne the new rendezvous leg. In this
approach, the optimization of one leg then equates to ﬁnding the solutions to at most 50 Lambert’s problems.
Note that this ﬁnal ∆V cost is the ground-truth to the do(cid:48) indicator described in the previous section, from
which he is deﬁned. Note also that we take here a greedy choice of ∆T , imposing in that way a transfer leg upon
the combinatorial search problem that might in the long term be sub-optimal with respect to its own goals.

5.3 Trajectory evaluation, ranking, and selection

Trajectories are evaluated by hs with respect to three criteria: 1) the mission’s score, 2) the total mass required
for propellant, and scientiﬁc equipment left at asteroids, and 3) the total time of ﬂight. The ideal mission will
have the greatest possible score, while requiring the lowest possible amounts of mass and time.

As mentioned in Sec. 3.1, a Pareto dominance approach [6] is used for handling the multiple objectives.
However, in this problem mass and time evaluations are only fairly comparable among trajectories that share
the same score. As such, ranking a set of trajectories involves 1) binning trajectories according to their score, and

2 http://esa.github.io/pykep/
3 Legs failing this check are immediately discarded, saving computation time that would otherwise be spent generating

Lambert arcs with excessive ∆V .

6

L.F. Sim˜oes et al.

2) applying non-dominated sorting [6] over the mass and time costs of trajectories within each bin. Identifying
the top trajectories in a given set takes place by iterating through bins in descending order of score, gradually
extracting their Pareto fronts. If only a subset of a Pareto front’s trajectories is required, those with lowest mass
cost are favored.

In a tree search, this process is applied at each depth-level to construct the beam with the best bw of the
newly extended solutions. Before that, however, hs is used for pruning nodes corresponding to missions that
require > 3500 kg, or > 15 years. Should that result in an empty pool of extended solutions, or the pool
otherwise be empty because no feasible transfer legs were found, the tree search has then reached its ﬁnal level
and is terminated. The beam of solutions carried over from the previous tree level will then be its ﬁnal output.
In Beam P-ACO, this signals the end of a generation. The contents of that ﬁnal beam are then merged with
the archive of non-dominated solutions found so far. By applying the previously described ranking process, the
archive will always be a Pareto front of trajectories that all share the maximum score reached to date. Beam
P-ACO will at this point refresh pheromones. Note that the combinatorial problem is asymmetric: an edge (i, j)
present in a good solution is not predictive of an edge (j, i) being likely to lead to good solutions. As such, an
(i, j) edge in an archived solution only results in pheromones along the (i, j) direction.

6 Experimental evaluation

An experimental evaluation was carried out to assess the performance of the diﬀerent Beam Search variants,
using the GTOC5 problem as a test case. Performance is here evaluated in terms of multiple criteria. Primarily,
we care about search algorithms that enable the consistent discovery of asteroid sequences having the greatest
possible length (score). Among equally scored missions, we care for the best possible coverage of the Pareto front
of mass and time costs required to achieve such score. Finally, these considerations must be traded-oﬀ against
the computational cost to obtain such solutions.

6.1 Setup

We adopt as measure of computational cost the number of trajectory legs optimized throughout the search.
This is in practice the main performance bottleneck, especially if instead of a Lambert model one were to use a
low-thrust one. A threshold of 100000 optimized legs was used as stopping criterion.

The performance of deterministic Beam Search was evaluated over a dense grid of settings for the beam width
(bw) and branching factor (bf ) parameters. In total, 118 diﬀerent setups were evaluated, all having upfront an
estimated cost of
100000 optimized legs required in order to complete execution at tree depth 16, where
missions reach and fully score the 16th asteroid (see Fig. 1). Being a deterministic algorithm, only a single run
was executed per setup.

≤

Stochastic Beam and Beam P-ACO were evaluated under the 5 diﬀerent conﬁgurations of bf and bw high-
lighted in red in Fig. 1. Being stochastic algorithms, 100 independent runs were performed per setup. Determin-
istic branching decisions were taken with a probability of q0 = 0.5 (q0 = 1 in Beam Search). In Beam P-ACO,
(cid:48)
pheromone and heuristic values contributed equally to the h
e heuristic: α = β = 1.0 (in the other Beam Search
variants, implicitly α = 0.0). Pheromone concentrations were limited to at most k = 3 contributions to each
node.

All tree searches reported here had the same root node. Its initial conditions were originally obtained during
the GTOC5 competition through a time-optimal low-thrust optimization of the launch leg, as described in [21,
Sec. 2] and exempliﬁed in [16, Sec. 6.1]. After applying the linear model to deﬁne the self-ﬂy-by leg, the initial
state is then a trajectory that has already scored 1 point at asteroid 2001 GP2 (id: 1712), and is ready to depart
from it at epoch 59325.360 MJD, having already expended 253.518 kg and 198.155 days from the total budgets.

6.2 Results

The results obtained in the experimental evaluation are shown in Figures 1–4. Analyses into the quality of
solutions found in a run consider their hs evaluations, in particular, the extent to which they minimize mass
and time costs. Though missions of score 17 were found in these experiments, they were only rarely found, and
furthermore only a single distinct mission was ever found with that score. Therefore, analyses into the quality of
solutions found consider exclusively the score 16 missions found in runs. Speciﬁcally, we evaluate the Pareto fronts
of score 16 missions found, and measure their coverage of the objective space using the hypervolume indicator
[29] – a measure of the total area of objective space dominated by points in the Pareto front. A reference point
of 3500 kg and 15 years is used in all hypervolume calculations, corresponding to the limits set forth in the

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

7

Fig. 1. Beam Search results from the parameter sweep over beam width (bw) and branching factor (bf ) conﬁgurations
(118 setups in total, with costs below the threshold of 100000 optimized trajectory legs). Darker is better. Highlighted in
red: conﬁgurations used in the Stochastic Beam and Beam P-ACO experiments.

problem speciﬁcation. Runs that do not ﬁnd any score 16 mission, and therefore have an empty Pareto front,
have a hypervolume of 0.0.

≈

Parameter sweep of Beam Search conﬁgurations: the results from these experiments are shown in
Fig. 1. Fig. 1(a) shows the highest score reached among the missions designed in each run. Fig. 1(b) shows the
hypervolume of the Pareto front of mass and time costs in score 16 missions found in each run. Fig. 1(c) shows
the prevalence of unfeasible solutions in the continuous search spaces of asteroid transfers. In the setups that
23% of the attempted asteroid transfers had a feasible solution.
reached score 17, for instance, on average only
Quantity of top solutions: Fig. 2 shows the results from the evaluation of the quantity of score 16 or
17 solutions found by each algorithm over time. Only distinct trajectories count here to a run’s totals – two
trajectories are equal if their asteroid sequence is exactly the same. The three plots shown correspond, from
left to right, to the results from Beam Search, Stochastic Beam, and Beam P-ACO. Fig. 2(a) shows one curve
for each of Beam Search’s 118 evaluated setups. The algorithm being deterministic, each curve depicts also
one single run. Overlaid in this plot is the Pareto front of cost-beneﬁt trade-oﬀs attainable through diﬀerent
parameter settings: it shows the minimum number of trajectory legs that need to be optimized to obtain diﬀerent
amounts of top scoring trajectories. This Pareto front is replicated in the other two plots to allow a performance
comparison between the deterministic and randomized Beam Search variants. The “hooks” shape seen, especially
in Fig. 2(a), results from the way Beam Search operates: most of its execution time is spent gradually descending
through the tree, level by level. Eventually, the search reaches depth 15, at which point each branching event
possibly leads to a score 16 solution being found. Hence, the sudden explosion in the total count. The plots for
Stochastic Beam and Beam P-ACO also display this eﬀect, but in them values are averaged over 100 runs, and
consecutive tree searches (generations) are chained together.

Quality of top solutions: Figures 3 and 4 show the results from the evaluation of the quality of score 16
solutions found by each algorithm over time. Fig. 3 is structured in the same way as Fig. 2, so the description
made above for it also applies here. Fig. 3 shows how the total dominated area of objective space (hypervolume)
grows over time, as new score 16 trajectories are found and enter the Pareto front. Fig. 4 takes a closer look at
the setup bw = 20, bf = 125, over which both randomized Beam Search algorithms are seen in Fig. 3 reaching
median performance (out of the ﬁve evaluated setups). The plots shown are Empirical Attainment Functions
(EAFs) [8], which depict the likelihood of objective space vectors being dominated (or matched) in an algorithm’s
run. It aggregates into one visualization the ﬁnal Pareto fronts of score 16 trajectories found across all 100 runs.
In Fig. 4(a–b), the boundaries of the shaded areas show the 0.25, 0.5 and 0.75 “attainment surfaces”. In other
words, the areas having at least 25, 50 or 75% chance of being attained (dominated or matched) by points in a
run’s ﬁnal Pareto front. Fig. 4(c) takes the diﬀerence between the EAFs for Beam P-ACO and Stochastic Beam,
and shows how they compare in terms of likelihood to attain diﬀerent areas of objective space, making clear the
extent to which Beam P-ACO outperforms Stochastic Beam. The Pareto front with greatest hypervolume found
by deterministic Beam Search is shown for reference.

7 Analysis & discussion

Conceptually, we showed in this research a formal equivalence between four combinatorial optimization algo-
rithms: Beam Search, Stochastic Beam, Beam P-ACO, and P-ACO. We demonstrated how they can all be
implemented in the same algorithm, and made accessible through minor parameter changes.

A surprising result, that validates the introduced phasing indicator, as well as the baseline multi-objective
Beam Search algorithm employed here, was the discovery of a score 17 mission (17 asteroids visited, and fully

8

L.F. Sim˜oes et al.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 2. Quantity of top solutions: cumulative number of distinct trajectories of score 16 or 17 found over time. Note the
change of scale in the vertical axis.

(a) Beam Search

(b) Stochastic Beam

(c) Beam P-ACO

Fig. 3. Quality of top solutions: growth of the dominated area of objective space over time (hypervolume of the Pareto
front of score 16 trajectories found so far).

investigated). Searches over this model of the GTOC5 problem, using these same initial conditions, had previously
only reached a maximum score of 16 [21]. Furthermore, those searches, employing a Branch & Prune tree search
algorithm, took days to complete during the GTOC5 competition. The Beam Search variants under consideration
could all ﬁnd that single score 17 mission in runs lasting 10 to 20 minutes. Pure P-ACO is the exception here,
having never surpassed a score 15 in our experiments (with a bf = 1, the high chance of an asteroid transfer’s
optimization problem not having a feasible solution greatly limits performance).

The ﬁrst research question in Sec. 1 called for a demonstration of examples where randomized Beam Search
variants would outperform the deterministic approach. If we evaluate in terms of mean performance, then, as we
can see from Figures 2–3, the current experimental evaluation could not ﬁnd any such cases. At all computational
cost thresholds we can ﬁnd deterministic setups outperforming both of the randomized Beam Search variants,
both in the quantity of score 16 solutions found, and in their quality. The deterministic algorithm was tuned to
a considerably greater extent than the randomized ones (118 setups, against only 5), so it is possible that we
are presenting a skewed view of each algorithm’s capabilities. Alternatively, it may be that the speciﬁc problem
we consider here is so resource-constrained, that the construction of long asteroid sequences actually demands
for greedy branching decisions to be taken at every single step. In such a case, the search will not beneﬁt from
the greater tolerance for local sub-optimality present in the randomized Beam Search variants.

The second research question in Sec. 1 considers how the addition of feedback (pheromones) in Beam P-ACO
changes performance, by comparison with Stochastic Beam, where search proceeds along multiple independent
generations with no feedback between them. Figures 2–4 show a clear positive eﬀect of feedback on performance,
both in the quantity and quality of top solutions found. This eﬀect is seen to be larger the smaller the branching
factor is. In other words, the greater the branching factor, the likelier it is for good solutions to be identiﬁed in
a single generation, and thus the lower the beneﬁt from feedback.

An identical comparison between randomized Beam Search variants, with and without pheromone updates,
can be found in [3, Sec. 6.2] (for a diﬀerent hybrid algorithm, and diﬀerent problems). There, pheromones are also
found to improve performance, though in small amounts. The current research goes beyond the analysis in [3] by
uncovering the inverse relationship between branching factor and beneﬁt from pheromones, and in demonstrating
the superior performance of deterministic Beam Search over the randomized variants, given proper tuning.

Multi-rendezvous Spacecraft Trajectory Optimization with Beam P-ACO

9

(a) Stochastic Beam

(b) Beam P-ACO

(c) Performance diﬀerence

Fig. 4. Empirical Attainment Functions: probabilities of objective space vectors being dominated (or matched) in an
algorithm’s run. The darker a region is, the likelier it is that in a run a solution will be found that dominates it. Considers
the Pareto fronts of score 16 trajectories found up to the 100000 optimized legs threshold.

Overall, an apt description of the behaviours displayed by the randomized algorithms is that they approximate
the performance of deterministic Beam Search setups that use larger beam widths and branching factors –
probabilistic branching eﬀectively picks a subset of the successor nodes that deterministic Beam Search with
larger branching factors would follow. The eventual success or failure of a run will then depend on how well those
decisions align with those a better informed algorithm would take. This can be seen on display in Fig. 4. There,
we see that in the extreme a randomized Beam Search run can closely approximate the Pareto front of score 16
trajectories found by an “optimally” tuned deterministic Beam Search (with a bf = 125, less than half of the
bf = 275 needed in the deterministic setting). However, it can also fail to ﬁnd a single score 16 trajectory: 7 of
the 100 runs in Fig. 4(a), and 4 in Fig. 4(b) could only reach a score 15, thus ending in this analysis with a min.
hypervolume of 0.0. Overall, the median hypervolume of 52.75 reached by Beam P-ACO in Fig. 4(b) is higher
than that reached in
60% of the 118 deterministic Beam Search setups, and also higher than that reached in
50% of the 32 deterministic setups that had equal or larger beam width and branching factors.

≈

In a real setting, in the preliminary design phase, missions would be constructed not from a single set of initial
conditions, as done here, but from a great number of them, possibly numbering in the thousands. Being anytime
algorithms, the randomized Beam Search variants investigated here can be employed in a racing approach [22],
with multiple tree searches being executed in parallel. Computational eﬀort would then be dynamically allocated
across searches, as a function of the growing statistical evidence as to which searches lead to better missions.
In such a setting, the randomized Beam search variants would be preferable choices, over the deterministic
algorithm.

8 Conclusion

We considered here a hard real-world problem of spacecraft trajectory design, featuring an interplay of combi-
natorial and (constrained) continuous optimization sub-problems, dealing at diﬀerent levels with uncertain and
multi-objective quality functions. In this challenging domain, we investigated a number of extensions to Beam
Search, the traditionally used approach to solve such problems. We provided an improved orbital phasing indi-
cator, and its transformation into a probability distribution over candidate bodies to extend missions with. We
then hybridized the search process with the well known Ant Colony Optimization algorithm, and investigated
the behaviours of the resulting randomized Beam Search variants. We found them to have lower sensitivity to
the beam width and branching factor parameter settings, while oﬀering in each generation a partially-informed
approximation to the behaviours of deterministic setups running at higher computational costs.

Acknowledgment

References

& Sons, Inc. (1987)

Lu´ıs F. Sim˜oes was supported by FCT (Minist´erio da Ciˆencia e Tecnologia) Fellowship SFRH/BD/84381/2012.

1. Global Trajectory Optimization Competition portal, http://sophia.estec.esa.int/gtoc_portal/
2. Bisiani, R.: Beam search. In: Shapiro, S.C. (ed.) Encyclopedia of Artiﬁcial Intelligence, vol. 1, pp. 56–58. John Wiley

10

L.F. Sim˜oes et al.

3. Blum, C.: Beam-ACO–Hybridizing ant colony optimization with beam search: an application to open shop scheduling.

Computers & Operations Research 32(6), 1565–1591 (2005)

4. Ceriotti, M., Vasile, M.: Automated multigravity assist trajectory planning with a modiﬁed ant colony algorithm.

Journal of Aerospace Computing, Information, and Communication 7(9), 261–293 (2010)

5. Ceriotti, M., Vasile, M.: MGA trajectory planning with an ACO-inspired algorithm. Acta Astronautica 67(9–10),

6. Deb, K.: Multi-Objective Optimization using Evolutionary Algorithms. John Wiley & Sons, Inc., Chichester, England

1202–1217 (2010)

(2001)

7. Dorigo, M., St¨utzle, T.: Ant Colony Optimization. A Bradford Book, MIT Press, Cambridge, MA (2004)
8. Grunert da Fonseca, V., Fonseca, C.M., Hall, A.O.: Inferential performance assessment of stochastic optimisers and
the attainment function. In: Zitzler, E., Thiele, L., Deb, K., Coello Coello, C.A., Corne, D. (eds.) Evolutionary
Multi-Criterion Optimization: First International Conference, EMO 2001, pp. 213–225. Springer, Berlin, Heidelberg
(2001)

9. Gad, A.H.: Space trajectories optimization using variable-chromosome-length genetic algorithms. Ph.D. thesis, Michi-

gan Technological University (2011)

10. Grigoriev, I.S., Zapletin, M.P.: Choosing promising sequences of asteroids. Automation and Remote Control 74(8),

11. Grigoriev, I.S., Zapletin, M.P.: GTOC5: Problem statement and notes on solution veriﬁcation. Acta Futura 8, 9–19

1284–1296 (2013)

(2014)

12. Guntsch, M.: Ant algorithms in stochastic and multi-criteria environments. Ph.D. thesis, Karlsruher Institut f¨ur

Technologie (2004), http://d-nb.info/1013929756

13. Guntsch, M., Middendorf, M.: A Population Based Approach for ACO. In: Cagnoni, S., Gottlieb, J., Hart, E.,
Middendorf, M., Raidl, G.R. (eds.) Applications of Evolutionary Computing: EvoWorkshops 2002: EvoCOP, EvoIASP,
EvoSTIM/EvoPLAN. pp. 72–81. Springer, Berlin, Heidelberg (2002)

14. Guntsch, M., Middendorf, M.: Applying Population Based ACO to Dynamic Optimization Problems. In: Dorigo, M.,
Di Caro, G., Sampels, M. (eds.) Ant Algorithms: Third International Workshop, ANTS 2002. pp. 111–122. Springer,
Berlin, Heidelberg (2002)

15. Guntsch, M., Middendorf, M.: Solving Multi-criteria Optimization Problems with Population-Based ACO. In: Fon-
seca, C.M., Fleming, P.J., Zitzler, E., Thiele, L., Deb, K. (eds.) Evolutionary Multi-Criterion Optimization: Second
International Conference, EMO 2003. pp. 464–478. Springer, Berlin, Heidelberg (2003)

16. Izzo, D.: PyGMO and PyKEP: Open Source Tools for Massively Parallel Optimization in Astrodynamics (the case
of interplanetary trajectory optimization). In: 5th International Conference on Astrodynamics Tools and Techniques
(ICATT) (2012)

17. Izzo, D.: Revisiting Lambert’s problem. Celestial Mechanics and Dynamical Astronomy 121(1), 1–15 (2015)
18. Izzo, D., Getzner, I., Hennes, D., Sim˜oes, L.F.: Evolving Solutions to TSP Variants for Active Space Debris Removal.
In: Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation. pp. 1207–1214. ACM
(2015)

19. Izzo, D., Hennes, D., Sim˜oes, L.F., M¨artens, M.: Designing complex interplanetary trajectories for the global trajectory
optimization competitions. In: Fasano, G., Pint´er, J.D. (eds.) Space Engineering: Modeling and Optimization with
Case Studies, pp. 151–176. Springer (2016)

20. Izzo, D., Sim˜oes, L.F., M¨artens, M., de Croon, G.C.H.E., Heritier, A., Yam, C.H.: Search for a Grand Tour of the
Jupiter Galilean Moons. In: Genetic and Evolutionary Computation Conference (GECCO 2013). pp. 1301–1308. ACM
(2013)

21. Izzo, D., Sim˜oes, L.F., Yam, C.H., Biscani, F., Di Lorenzo, D., Addis, B., Cassioli, A.: GTOC5: Results from the

European Space Agency and University of Florence. Acta Futura 8, 45–55 (2014)

22. Maron, O., Moore, A.W.: The racing algorithm: Model selection for lazy learners. In: Aha, D.W. (ed.) Lazy Learning,

pp. 193–225. Springer Netherlands (1997)

23. Oliveira, S., Hussin, M.S., St¨utzle, T., Roli, A., Dorigo, M.: A Detailed Analysis of the Population-Based Ant Colony

Optimization Algorithm for the TSP and the QAP. Tech. Rep. TR/IRIDIA/2011-006, IRIDIA (Feb 2011)

24. Petropoulos, A.E., Bonﬁglio, E.P., Grebow, D.J., Lam, T., Parker, J.S., Arrieta, J., Landau, D.F., Anderson, R.L.,
Gustafson, E.D., Whiﬀen, G.J., Finlayson, P.A., Sims, J.A.: GTOC5: Results from the Jet Propulsion Laboratory.
Acta Futura 8, 21–27 (2014)

25. Sinha, A., Malo, P., Deb, K.: Evolutionary bilevel optimization: An introduction and recent advances. In: Bechikh,
S., Datta, R., Gupta, A. (eds.) Recent Advances in Evolutionary Multi-objective Optimization, pp. 71–103. Springer
(2017)

26. Stuart, J.R., Howell, K.C., Wilson, R.S.: Design of end-to-end trojan asteroid rendezvous tours incorporating scientiﬁc

value. Journal of Spacecraft and Rockets 53(2), 278–288 (2016)

27. Weise, T., Chiong, R., L¨assig, J., Tang, K., Tsutsui, S., Chen, W., Michalewicz, Z., Yao, X.: Benchmarking optimiza-
tion algorithms: An open source framework for the traveling salesman problem. IEEE Computational Intelligence
Magazine 9(3), 40–52 (2014)

28. Wilt, C.M., Thayer, J.T., Ruml, W.: A comparison of greedy search algorithms. In: Proceedings of the Third Annual

Symposium on Combinatorial Search (SOCS-10). pp. 129–136 (2010)

29. Zitzler, E., Thiele, L., Laumanns, M., Fonseca, C.M., Grunert da Fonseca, V.: Performance assessment of multiob-
jective optimizers: an analysis and review. IEEE Transactions on Evolutionary Computation 7(2), 117–132 (2003)

