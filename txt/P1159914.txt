5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

5
1
0
2
 
v
o
N
 
5
2
 
 
]
I

A
.
s
c
[
 
 
1
v
9
9
0
8
0
.
1
1
5
1
:
v
i
X
r
a

Strategic Dialogue Management via Deep
Reinforcement Learning

Heriberto Cuay´ahuitl
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
hc213@hw.ac.uk

Simon Keizer
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
s.keizer@hw.ac.uk

Oliver Lemon
Interaction Lab
Department of Computer Science
Heriot-Watt University
Edinburgh
o.lemon@hw.ac.uk

Abstract

Artiﬁcially intelligent agents equipped with strategic skills that can negotiate dur-
ing their interactions with other natural or artiﬁcial agents are still underdeveloped.
This paper describes a successful application of Deep Reinforcement Learning
(DRL) for training intelligent agents with strategic conversational skills, in a sit-
uated dialogue setting. Previous studies have modelled the behaviour of strate-
gic agents using supervised learning and traditional reinforcement learning tech-
niques, the latter using tabular representations or learning with linear function ap-
proximation. In this study, we apply DRL with a high-dimensional state space to
the strategic board game of Settlers of Catan—where players can offer resources in
exchange for others and they can also reply to offers made by other players. Our
experimental results report that the DRL-based learnt policies signiﬁcantly out-
performed several baselines including random, rule-based, and supervised-based
behaviours. The DRL-based policy has a 53% win rate versus 3 automated players
(‘bots’), whereas a supervised player trained on a dialogue corpus in this setting
achieved only 27%, versus the same 3 bots. This result supports the claim that
DRL is a promising framework for training dialogue systems, and strategic agents
with negotiation abilities.

1

Introduction

Artiﬁcially intelligent agents can require strategic conversational skills to negotiate during their
interactions with other natural or artiﬁcial agents, e.g. “A: I will give/tell you X if you give/tell me
Y?, B: Okay”. While typical conversations of artiﬁcial agents assume cooperative behaviour from
partner conversants, strategic conversation does not assume full cooperation during the interaction
between agents [2]. Throughout this paper, we will use a strategic card-trading board game to
illustrate our approach. Board games with trading aspects aim not only at entertaining people,
but also at training them with trading skills. Popular board games of this kind include Last Will,
Settlers of Catan, and Power Grid, among others [20]. While these games can be played between
humans, they can also be played between computers and humans. The trading behaviours of AI
agents in computer games are usually based on carefully tuned rules [33], search algorithms such

1

as Monte-Carlo tree search [31, 9], and reinforcement learning with tabular representations [12, 11]
or linear function approximation [26, 25]. However, the application of reinforcement learning is
not trivial due to the complexity of the problem, e.g. large state-action spaces exhibited in strategic
conversations. On the one hand, unique situations in the interaction can be described by a large
number of variables (e.g. game board and resources available) so that enumerating them would result
in very large state spaces. On the other hand, the action space can also be large due to the wide range
of unique negotiations (e.g. givable and receivable resources). While one can aim for optimising the
interaction via compression of the search space, it is usually not clear what features to incorporate
in the state representation. This is a strong motivation for applying deep reinforcement learning for
dialogue management, as ﬁrst proposed by (anon citation), so that the agent can simultaneously learn
its feature representation and policy. In this paper, we present an application of deep reinforcement
learning to learning trading dialogue for the game of Settlers of Catan.

Our scenario for strategic conversation is the game of Settlers of Catan, where players take the role
of settlers on the ﬁctitious island of Catan—see Figure 1(left). The board game consists of 19 hexes
randomly connected: 3 hills, 3 mountains, 4 forests, 4 pastures, 4 ﬁelds and 1 desert. In this island,
hills produce clay, mountains produce ore, pastures produce sheep, ﬁelds produce wheat, forests
produce wood, and the desert produces nothing. In our setting, four players attempt to settle on
the island by building settlements and cities connected by roads. To build, players need speciﬁc
resource cards, for example: a road requires clay and wood; a settlement requires clay, sheep, wheat
and wood; a city requires three clay cards and two wheat cards; and a development card requires clay,
sheep and wheat. Each player gets points for example by building a settlement (1 point) or a city (2
points), or by obtaining victory point cards (1 point each). A game consists of a sequence of turns,
and each game turn starts with the roll of a die that can make the players obtain resources (depending
on the number rolled and resources on the board). The player in turn can trade resources with the
bank or through dialogue with other players, and can make use of available resources to build roads,
settlements or cities. This game is highly strategic because players often face decisions about when
to trade, what resources to request, and what resources to give away—which are inﬂuenced by what
they need to build. A player can extend build-ups on locations connected to existing pieces, i.e.
road, settlement or city, and all settlements and cities must be separated by at least 2 roads. The ﬁrst
player to win 10 victory points wins and all others lose.1

In this paper, we extend previous work on strategic conversation that has applied supervised or
reinforcement learning in that we simultaneously learn the feature representation and dialogue policy
by using Deep Reinforcement Learning (DRL). We compare our learnt policies against random,
rule-based and supervised baselines, and show that the DRL-based agents perform signiﬁcantly
better than the baselines.

2 Background

A Reinforcement Learning (RL) agent learns its behaviour from interaction with an environment
and the physical or virtual agents within it, where situations are mapped to actions by maximizing
a long-term reward signal [29, 30]. An RL agent is typically characterized by: (i) a ﬁnite or inﬁnite
set of states S = {si}; (ii) a ﬁnite or inﬁnite set of actions A = {aj}; (iii) a stochastic state
transition function T (s, a, s(cid:48)) that speciﬁes the next state s(cid:48) given the current state s and action a;
(iv) a reward function R(s, a, s(cid:48)) that speciﬁes the reward given to the agent for choosing action a
when the environment makes a transition from state s to state s(cid:48); and (v) a policy π : S → A that
deﬁnes a mapping from states to actions. The goal of an RL agent is to select actions by maximising
its cumulative discounted reward deﬁned as Q∗(s, a) = maxπ E[rt + γrt+1 + γ2rt+1 + ...|st =
s, at = a, π], where function Q∗ represents the maximum sum of rewards rt discounted by factor
γ at each time step. While the RL agent takes actions with probability P r(a|s) during training, it
takes the best actions maxa P r(a|s) at test time.

To induce the Q function above we use Deep Reinforcement Learning as in [22], which approx-
imates Q∗ using a multilayer convolutional neural network. The Q function of a DRL agent is
parameterised as Q(s, a; θi), where θi are the parameters (weights) of the neural net at iteration
i. More speciﬁcally, training a DRL agent requires a dataset of experiences D = {e1, ...eN }
(also referred to as ‘experience replay memory’), where every experience is described as a tuple

1www.catan.com/service/game-rules

2

et = (st, at, rt, st+1). Inducing the Q function consists in applying Q-learning updates over mini-
batches of experience M B = {(s, a, r, s(cid:48)) ∼ U (D)} drawn uniformly at random from the full
dataset D.

iteration i

function Li(θi) =
A Q-learning update at
(cid:2)(r + γ maxa(cid:48) Q(s(cid:48), a(cid:48); θi) − Q(s, a; θi))2(cid:3), where θi are the parameters of the neural net at
EM B
iteration i, and θi are the target parameters of the neural net at iteration i. The latter are only up-
dated every C steps. This process is implemented in the learning algorithm Deep Q-Learning with
Experience Replay described in [22].

thus deﬁned as

the loss

is

3 Policy Learning for Strategic Interaction

Our approach for strategic interaction optimises two tasks jointly: learning to offer and learning to
reply to offers. In addition, our approach learns from constrained search spaces rather than uncon-
strained ones, resulting in quicker learning and also in learning from only legal (allowed) decisions.

3.1 Learning to offer and to reply

A strategic agent has to offer a trade to its opponent agents (or players). In the case of the game of
Settlers of Catan, an example trading offer is I will give anyone sheep for clay. Several things can
be observed from this simple example. First, note that this offer may include multiple givable and
receivable resources. Second, note that the offer is addressed to all opponents (as opposed to one
opponent in particular, which could also be possible). Third, note that not all offers are allowed at a
particular point in the game – they depend on the particular state of the game and resources available
to the player for trading. The goal of the agent is to learn to make legal offers that will yield the
largest pay-off in the long run.

A strategic agent also has to reply to trading offers made by an opponent. In the case of the game of
Settlers of Catan, the responses can be narrowed down to (a) accepting the offer, (b) rejecting it, or
(c) replying with a counteroffer (e.g. I want two sheep for one clay). Note that this set of responses
is available at any point in the game once there is an offer made by any agent (or player). Similarly
to the task above, the goal of the agent is to learn to choose a response that will yield the largest
pay-off in the long run.

While one can aim for optimising only one of the tasks above, a joint optimisation of the these two
tasks equips an automatic trading agent with more completeness. To do that, given an environment
state space S = {si}, trading negotiations Ao, and responses Ar, the goal of a strategic learning
agent consists of inducing an optimal policy so that action selection can be deﬁned as π∗(s) =
arg max Q∗
a∈{Ao∪Ar}(s, a), where the Q function is estimated as described in the previous section,
Ao is the set of trading negotiations in turn, and Ar is the set of responses.

3.2 Deep Learning from constrained action sets

While the behaviour of a strategic agent can be trained as described above, using deep learning with
large action sets can be prohibitively expensive in terms of computation time. Our solution to this
limitation consists in learning from constrained action sets rather than whole and static action sets.
We distinguish two action sets, an action set Ar which contains responses to trading negotiations
and remains static, and an action set Ao which contains those trading negotiations that are valid
at any given point in the game (i.e. which the player is able to make due to the resources that
they hold). We refer to the latter action set as ¯Ao, which contains a dynamic set | ¯Ao| ≤ |Ao| of
trading negotiations available according to the game state and available resources (e.g. the agent
would not offer a particular resource if it does not have it). Thus, we reformulate the goal of a
strategic learning agent as inducing an optimal policy so that action selection can be deﬁned as
π∗(s) = arg max Q∗
a∈ ¯Ao∪Ar (s, a), where the Q function is still estimated as described in Section 2,
¯Ao is the constrained set of trading negotiations in turn (i.e. legal offers), and Ar is the set of
responses. Note that the size of ¯Ao will vary depending on the game state.

3

In this section we apply the approach above to conversational agents that learn to offer and to reply
in the game of Settlers of Catan.

4 Experiments and Results

4.1 Experimental Setting

Figure 1: Integrated system of the Deep Reinforcement Learning (DRL) agent for strategic interac-
tion. (left) GUI of the board game “Settlers of Catan” [33]. (right) Multilayer neural network of the
DRL agent–see text for details.

4.1.1 Integrated learning environment

Figure 1(left) shows our integrated learning environment. On the left-hand side, the JSettlers bench-
mark framework [33] receives an action (trading offer or response) and outputs the next game state
and numerical reward. On the right-hand side, a Deep Reinforcement Learning (DRL) agent re-
ceives the state and reward, updates its policy during learning, and outputs an action following its
learnt policy. Our integrated system is based on a multi-threaded implementation, where each player
makes use of a synchronised thread. In addition, this system runs under a client-server architecture,
where the learning agent acts as the ‘server’ and the game acts as the ‘client’. They communicate
by exchanging messages, where the server tells the client the action to execute, and the client tells
the server the game state and reward observed. Our DRL agents are based on the ConvNetJS tool
[15], which implements the algorithm ‘Deep Q-Learning with experience replay’ proposed by [22].
We extended this tool to support multi-threaded and client-server processing with constrained search
spaces.2

4.1.2 Characterisation of the learning agent

The state space S = {si} of our learning agent includes 160 non-binary features that describe the
game board and the available resources. Table 1 describes the state variables that represent the input
nodes, which we normalise to the range [0..1]. These features represent a high-dimensional state
space—only approachable via reinforcement learning with function approximation.

2The code of this substantial extension with an illustrative dialogue system is available at the following link:

https://github.com/cuayahuitl/SimpleDS

4

Num.
1
1
1
1
1
19
54

Feature
hasClay
hasOre
hasSheep
hasWheat
hasWood
hexes
nodes

Domain
{0...10}
{0...10}
{0...10}
{0...10}
{0...10}
{0...5}
{0...4}

80

edges

{0...2}

Description
Number of clay units available
Number of ore units available
Number of sheep units available
Number of wheat units available
Number of wood units available
Type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood
Where builds are located: 0=no settlement or city,
1 and 2=opponent builds, 3 and 4=agent builds
Where roads are located:
0=no road in given edge, 1=opponent road, 2=agent road
On type of resource: 0=desert,1=clay,2=ore, 3=sheep,4=wheat,5=wood

1
1

robber
turns

{0...5}
{0..100} Number of turns of the game so far

Table 1: Feature set (size=160) of the DRL agent for trading in the game of Settlers of Catan

The action space A = {ai} of our learning agents includes 70 actions for offering trading negotia-
tions3 and 3 actions4 for replying to offers from opponents. Notice that our offer actions only make
use of up to two givable resources and only one receivable resource is considered.

The state transition function of our agents is based on the game itself using the JSettlers framework
[33]. In addition, our strategic interactions were carried out at the semantic level rather than at the
word level, for example: S4C is a higher-level representation of “I will give you sheep for clay”.
Furthermore, our trained agents were active only during the selection of trading offers and reply to
offers, the functionality of the rest of the game was based on the JSettlers framework.

The reward function of our agent is based on the game points provided by the JSettlers framework,
but we make a distinction between reply actions and offer actions. This is due to the fact that
we consider reply actions as high-level actions, and offer actions as lower-level ones. Our reward
function is deﬁned as:

r =

(cid:26) GainedP oints × wgp if GainedP oints > 0

T otalP oints × wtp otherwise,

where GainedP oints=points at time t minus the points at time t − 1, and T otalP oints refers to the
accumulated number of points of the trained agent during the game. We used the following weights
for reply actions: {wgp = 1, wtp = 0.1}, and the following for offer actions: {wgp = 0.1, wtp =
0.01}.

The model architecture consists of a fully-connected multilayer neural network with 160 nodes in
the input layer (see Table 1), 50 nodes in the ﬁrst hidden layer, 50 nodes in the second hidden layer,
and 73 nodes (action set) in the output layer. The hidden layers use RELU (Rectiﬁed Linear Units)
activation functions to normalise their weights, see [23] for details. Finally, the learning parameters
are as follows: experience replay size=30K, discount factor=0.7, minimum epsilon=0.05, learning
rate=0.001, and batch size=64. A comprehensive analysis comparing multiple state representations,
action sets, reward functions and learning parameters is left for future work.

4.2 Experimental Results

We use the following baselines to compare our trained strategic agents, where we only switch the
trading offers and reply behaviours—the remaining behaviour of the game remains constant and is
provided by the JSettlers framework:

3Trading negotiation actions, where C=clay, O=ore, S=sheep, W =wheat, and D = wood: C4D, C4O,
C4S, C4W, CC4D, CC4O, CC4S, CC4W, CD4O, CD4S, CD4W, CO4D, CO4S, CO4W, CS4D, CS4O, CS4W,
CW4D, CW4O, CW4S, D4C, D4O, D4S, D4W, DD4C, DD4O, DD4S, DD4W, O4C, O4D, O4S, O4W, OD4C,
OD4S, OD4W, OO4C, OO4D, OO4S, OO4W, OS4C, OS4D, OS4W, OW4C, OW4D, OW4S, S4C, S4D, S4O,
S4W, SD4C, SD4O, SD4W, SS4C, SS4D, SS4O, SS4W, SW4C, SW4D, SW4O, W4C, W4D, W4O, W4S,
WD4C, WD4O, WD4S, WW4C, WW4D, WW4O, WW4S. Example trade: C4D=clay for wood.

4Reply actions: accept, reject and counteroffer

5

Comparison
between Agents
1 Ran vs. 3 Heu
1 Ran vs. 3 Sup
1 Heu vs. 3 Ran
1 Heu vs. 3 Heu
1 Sup vs. 3 Ran
1 Sup vs. 3 Heu
1 DRLran vs. 3 Ran
1 DRLran vs. 3 Heu
1 DRLran vs. 3 Sup
1 DRLheu vs. 3 Ran
1 DRLheu vs. 3 Heu
1 DRLheu vs. 3 Sup
1 DRLsup vs. 3 Ran
1 DRLsup vs. 3 Heu
1 DRLsup vs. 3 Sup

Winning Victory Offers
Points Made
Rate(%)
133.72
2.58
00.01
143.19
00.01
2.74
41.63
10.15
98.46
25.24
149.74
6.46
45.61
10.13
97.30
27.36
144.53
6.48
38.52
10.16
98.31
144.82
8.06
49.49
154.00
39.64
7.51
38.54
10.17
98.23
53.36
146.84
8.22
157.28
41.97
7.65
38.26
10.15
98.52
150.62
8.14
50.29
41.58
156.37
7.64

Successful
Offers
122.69
131.28
18.19
140.17
19.89
134.72
17.08
137.13
146.18
16.98
139.12
149.26
16.80
142.66
147.90

Total
Trades
140.58
150.97
167.12
282.33
175.38
269.64
203.19
353.98
364.64
194.68
343.29
355.88
193.31
348.14
356.27

Pieces
Built
1.76
2.31
13.81
8.48
13.84
8.44
13.98
11.04
10.36
13.85
11.37
10.59
13.81
11.31
10.70

Cards
Bought
0.73
0.73
0.24
0.29
0.24
0.30
0.22
0.27
0.29
0.23
0.27
0.30
0.23
0.28
0.30

Turns
p/Game
56.35
57.98
45.59
62.25
47.97
62.26
45.34
62.72
62.62
44.35
61.46
62.04
43.88
62.59
62.73

Table 2: Evaluation results comparing Deep Reinforcement Learners (DRL) vs. 3 baseline traders
(random, heuristic, supervised). Columns 2-7, show average results—of the player at the most left—
over 10K test games. Notation: DRLran=DRL agent trained vs. random behaviour, DRLheu=DRL
agent trained vs. heuristic opponents, and DRLsup=DRL agent trained vs. supervised opponents.

• Ran: This agent chooses trading negotiation offers randomly, and replies to offers from opponents
also in a random fashion. Although this is a weak baseline, we use it to analyse the impact of
policies trained (and tested) against random behaviour.

• Heu: This agent chooses trading negotiation offers and replies to offers from opponents as dic-

tated by the heuristic bots included in the JSettlers framework5, see [34, 13] for details.

(cid:81)

• Sup: This agent chooses trading negotiation offers using a random forest classiﬁer [3, 14],
and replies to offers from opponents using the heuristic behaviour above. This agent was
trained from 32 games played between 56 different human players—labelled by multiple annota-
tors. We compute the probability distribution of a human-like trade as P (givable|evidence) =
1
b∈B Pb(givable|evidence), where givable refers to the class prediction (in our case, the
Z
givable resource), evidence refers to observed features6, Pb(.|.) is the posterior distribution of
the bth tree, and Z is a normalisation constant [4]. This classiﬁer used 100 decision trees. As-
suming that Y is a set of givables at a particular point in time in the game, extracting the most
human-like trading offer (givable y∗) given collected evidence (context of the game), is deﬁned as
y∗ = arg maxy∈Y P r(y|evidence). The classiﬁcation accuracy of this statistical classiﬁer was
65.7%—according to a 10-fold cross-validation evaluation [5, 6].

We trained three DRL agents against random, heuristic and supervised opponents—see Figure 2,
which used 500K training experiences (around 2000 games each learning curve). We evaluate the
learnt policies according to a cross-evaluation using the following metrics in terms of averages
per game (using 10 thousand test games per comparison): win-rate, victory points, (successful)
offers, total trades, pieces built, cards bought, and number of turns. Our observations of the cross-
evaluation, reported in Table 2, are as follows:

1. The DRL agents acquire very competitive strategic behaviour in comparison to the other types
of agents—they simply win substantially more than their opponents. While random behaviour
is easy to beat with over 98% win-rate, the DRL agents achieve over 50% of win-rate against
heuristic opponents and over 40% against supervised opponents. These results substantially out-
perform the heuristic and supervised agents which achieve less than 30% of win-rate (at p < 0.05
according to a two-tailed Wilcoxon-Signed Rank Test).

5The baseline trading agent referred to as ‘heuristic’ included the following parameters, see [13]:

TRY N BEST BUILD PLANS:0, FAVOUR DEV CARDS:-5.

6Evidence: Number of resources available, number of builds (roads, settlements and cities), and the resource

received.

6

Figure 2: Learning curves of Deep Reinforcement Learners (DRLs) against random, heuristic
and supervised opponents. It can be observed that DRL agents can learn from different types of
opponents—even from randomly behaving ones.

2. The DRL agents outperform the baselines not just in win-rates but also in other metrics such as
average victory points, pieces built and total trades. The latter is more prominent, for example,
while the heuristic and supervised agents achieve between 270 to 280 trades per game, the DRL
agents compared against heuristic and supervised agents achieve between 340 and 360 trades.
This means that the DRL agents tend to trade more than their opponents, i.e. they accept more
offered trading negotiations. These differences suggest that knowing when to accept, reject or
counter offer a trading negotiation is crucial for winning.

3. Training a DRL agent in the environment where it will be tested is better than training and testing
across environments. For example, DRLheu versus heuristic behaviour is better (53.4% win-
rate) than DRLsup versus heuristic behaviour (50.3% win-rate). However, our results report that
DRL agents trained using randomly behaving opponents are almost as good as those trained with
stronger opponents. This suggests that DRL agents for strategic interaction can be also be trained
without highly skilled opponents, presumably by tracking their rewards over time.

4. The DRL agents ﬁnd the supervised agent harder to beat. This is because the supervised agent
is the strongest baseline, which achieves the best winning rate of the baseline agents. It can be
noted that the DRL agents versus supervised behaviour make more offers and trade more than

7

the DRL agents versus heuristic behaviour. We can infer from this result that knowing when to
offer and when to trade seem crucial for better winning rates.

5. The fact that the agent with random behaviour hardly wins any games, suggests that sequential

decision-making in this strategic game is far from trivial.

In summary, strategic dialogue agents trained with deep reinforcement learning have the potential
to acquire highly competitive behaviour, not just from training against strong opponents but even
from opponents with random behaviour. This result may help to reduce the resources (heuristics or
labelled data) required for training future strategic agents.

5 Related Work

Reinforcement learning applied to strategic interaction includes the following. [32] proposes re-
inforcement learning with multilayer neural networks for training an agent to play the game of
Backgammon. He ﬁnds that agents trained with such an approach are able to match and even beat
human performance. [26] proposes hierarchical reinforcement learning for automatic decision mak-
ing on object-placing and trading actions in the game of Settlers of Catan. He incorporates built-
in knowledge for learning the behaviours of the game quicker, and ﬁnds that the combination of
learned and built-in knowledge is able to beat human players. [11] used reinforcement learning in
non-cooperative dialogue, and focus on a small 2-player trading problem with 3 resource types, but
without using any real human dialogue data. This work showed that explicit manipulation moves
(e.g. “I really need sheep”) can be used to win when playing against adversaries who are gullible
(i.e. they believe such statements) but also against adversaries who can detect manipulation and can
punish the player for being manipulative [10]. More recently, [16] designed an MDP model for se-
lecting trade offers, trained and evaluated within the full jSettlers environment (4 players, 5 resource
types). In comparison to the DRL model, it had a much more restricted state-action space, leading
to signiﬁcant, but more modest improvements over supervised learning and hand-coded baselines.

Other related work has been carried out in the context of automated non-cooperative dialogue sys-
tems, where an agent may act to satisfy its own goals rather than those of other participants [12]. The
game-theoretic underpinnings of non-cooperative behaviour have also been investigated [1]. Such
automated agents are of interest when trying to persuade, argue, or debate, or in the area of believable
characters in video games and educational simulations [12, 28]. Another arena in which strategic
conversational behaviour has been investigated is negotiation [35], where hiding information (and
even outright lying) can be advantageous.

Recent work on deep learning applied to games include the following. [19] train a deep convo-
lutional network for the game of Go, but it is trained in a supervised fashion rather than trained
to maximise a long-term reward as in this work. A closely related work to ours is a DRL agent
for text-based games [24]. Their states are based on words, their policies are induced using game-
based rewards, and their actions are based on directions such as ‘go east/west/south/north’. Another
closely related work to ours is DRL agents trained to play ATARI games [21]. Their states are based
on pixels from down-sampled images, their policies make use of game-based rewards, and their
actions are based on joystick movements. In contrast to these previous works which are based on
navigation commands, our agents are use trading dialogue moves (e.g. ‘I will give you ore and sheep
for clay’, or ‘I accept/decline your offer’), which are essential behaviours for strategic interaction.

This paper extends the recent work above on training strategic agents using reinforcement learning,
which have either used small state-action spaces or focused on navigation commands rather than
negotiation dialogue. The learning agents described in this paper use a high dimensional state repre-
sentation (160 non-binary features) and a fairly large action space (73 actions) for learning strategic
non-cooperative dialogue behaviour. To our knowledge, our results report the highest winning rates
reported to date in the game of Settlers of Catan, see [13, 16, 9]. The comprehensive evaluation
reported in the previous section is evidence to argue that deep reinforcement learning is a promising
framework for training strategic interactive agents.

8

6 Concluding Remarks

The contribution of this paper is the ﬁrst application of Deep Reinforcement Learning (DRL) to
optimising the behaviour of strategic conversational agents. Our learning agents are able to: (i)
discover what trading negotiations to offer, (ii) discover when to accept, reject, or counteroffer;
(iii) discover strategic behaviours based on constrained action sets—i.e. action selection from legal
actions rather than from all of them; and (iv) learn highly competitive behaviour against different
types of opponents. All of this is supported by a comprehensive evaluation of three DRL agents
trained against three baselines (random, heuristic and supervised), which are analysed from a cross-
evaluation perspective. Our experimental results report that all DRL agents substantially outperform
all the baseline agents. Our results are evidence to argue that DRL is a promising framework for
training the behaviour of complex strategic interactive agents.

Future work can for example carry out similar evaluations as above in other strategic environments,
and can also extend the abilities of the agents with other strategic features [18] and forms of learn-
ing [7, 27].
In addition, a comparison of different model architectures, training parameters and
reward functions can be explored in future work. Last but not least, given that our learning agents
trade at the semantic level, they can be extended with language understanding/generation abilities to
communicate verbally [17, 8].

Funding from the European Research Council (ERC) project “STAC: Strategic Conversation” no.
269427 is gratefully acknowledged, see http://www.irit.fr/STAC/. Funding from the
ESPRC, project EP/M01553X/1 “BABBLE” is gratefully acknowledged, see https://sites.
google.com/site/hwinteractionlab/babble.

Acknowledgments

References

[1] N. Asher and A. Lascarides. Commitments, beliefs and intentions in dialogue. In Proc. of SemDial, 2008.

[2] N. Asher and A. Lascarides. Strategic conversation. Semantics and Pragmatics, 6(2):1–62, 2013.

[3] L. Breiman. Random forests. Machine Learning, 45(1), 2001.

[4] A. Criminisi, J. Shotton, and E. Konukoglu. Decision forests: A uniﬁed framework for classiﬁcation,
regression, density estimation, manifold learning and semi-supervised learning. Foundations and Trends
in Computer Graphics and Vision, 7(2-3), 2012.

[5] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning to trade in strategic board games. In IJCAI Workshop

on Computer Games (IJCAI-CGW), 2015.

[6] H. Cuay´ahuitl, S. Keizer, and O. Lemon. Learning trading negotiations using manually and automatically

labelled data. In International Conference on Tools with Artiﬁcial Intelligence (ICTAI), 2015.

[7] H. Cuay´ahuitl, M. van Otterlo, N. Dethlefs, and L. Frommberger. Machine learning for interactive systems
and robots: A brief introduction. In Proceedings of the 2nd Workshop on Machine Learning for Interactive
Systems: Bridging the Gap Between Perception, Action and Communication, MLIS ’13, New York, NY,
USA, 2013. ACM.

[8] N. Dethlefs and H. Cuay´ahuitl. Hierarchical reinforcement learning for situated natural language genera-

tion. Natural Language Engineering, 21, 5 2015.

[9] M. S. Dobre and A. Lascarides. Online learning and mining human play in complex games. In IEEE

Conference on Computational Intelligence and Games, CIG, 2015.

[10] I. Efstathiou and O. Lemon. Learning to manage risk in non-cooperative dialogues. In SemDial, 2014.

[11] I. Efstathiou and O. Lemon. Learning non-cooperative dialogue behaviours. In SIGDIAL, 2014.

[12] K. Georgila and D. Traum. Reinforcement learning of argumentation dialogue policies in negotiation. In

Proc. of INTERSPEECH, 2011.

[13] M. Guhe and A. Lascarides. Game strategies for The Settlers of Catan. In 2014 IEEE Conference on

Computational Intelligence and Games, CIG, 2014.

[14] T. Hastie, R. Tibshirani, and J. Friedman. The elements of statistical learning: data mining, inference and

prediction. Springer, 2 edition, 2009.

9

[15] A.

Karpathy.

ConvNetJS:

Javascript

library

for

deep

learning.

http://cs.stanford.edu/people/karpathy/convnetjs/, 2015.

[16] S. Keizer, H. Cuay´ahuitl, and O. Lemon. Learning Trade Negotiation Policies in Strategic Conversation.

In Workshop on the Semantics and Pragmatics of Dialogue: goDIAL, 2015.

[17] O. Lemon. Adaptive Natural Language Generation in Dialogue using Reinforcement Learning. In Proc.

[18] R. Lin and S. Kraus. Can automated agents proﬁciently negotiate with humans? Commun. ACM, 53(1),

SEMDIAL, 2008.

Jan. 2010.

[19] C. J. Maddison, A. Huang, I. Sutskever, and D. Silver. Move evaluation in go using deep convolutional

neural networks. CoRR, abs/1412.6564, 2014.

[20] M. McFarlin.

10

great

board

games

for

traders.

Futures Magazine,

2013.

http://www.futuresmag.com/2013/10/02/10-great-board-games-for-traders.

[21] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller. Playing

atari with deep reinforcement learning. In NIPS Deep Learning Workshop. 2013.

[22] V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller,
A. K. Fidjeland, G. Ostrovski, S. Petersen, C. Beattie, A. Sadik, I. Antonoglou, H. King, D. Kumaran,
D. Wierstra, S. Legg, and D. Hassabis. Human-level control through deep reinforcement learning. Nature,
518(7540):529–533, 02 2015.

[23] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted Boltzmann machines. In Proceedings

of the 27th International Conference on Machine Learning (ICML), pages 807–814, 2010.

[24] K. Narasimhan, T. Kulkarni, and R. Barzilay. Language understanding for text-based games using deep
reinforcement learning. In Proceedings of the 2015 Conference on Empirical Methods in Natural Lan-
guage Processing, September 2015.

[25] A. Papangelis and K. Georgila. Reinforcement Learning of Multi-Issue Negotiation Dialogue Policies. In

Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGdial), 2015.

[26] M. Pfeiffer. Reinforcement learning of strategies for settlers of catan. In International Conference on

Computer Games: Artiﬁcial Intelligence, Design and Education, 2004.

[27] O. Pietquin and M. Lopez. Machine learning for interactive systems: Challenges and future trends. In

Proceedings of the Workshop Affect, Compagnon Artiﬁciel (WACAI), 2014.

[28] J. Shim and R. Arkin. A Taxonomy of Robot Deception and its Beneﬁts in HRI. In Proc. IEEE Systems,

Man, and Cybernetics Conference, 2013.

[29] R. Sutton and A. Barto. Reinforcement Learning: An Introduction. MIT Press, 1998.

[30] C. Szepesv´ari. Algorithms for Reinforcement Learning. Morgan and Claypool Publishers, 2010.

[31] I. Szita, G. Chaslot, and P. Spronck. Monte-carlo tree search in settlers of catan. In Proceedings of the

12th International Conference on Advances in Computer Games, ACG’09, 2010.

[32] G. Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3), 1995.

[33] R. Thomas and K. J. Hammond. Java Settlers: a research environment for studying multi-agent negotia-

tion. In Intelligent User Interfaces (IUI), pages 240–240, 2002.

[34] R. S. Thomas. Real-time decision making for adversarial environments using a plan-based heuristic. PhD

thesis, Northwestern University, 2003.

[35] D. Traum. Extended abstract: Computational models of non-cooperative dialogue. In Proc. of SIGdial

Workshop on Discourse and Dialogue, 2008.

10

