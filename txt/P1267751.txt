Transformable Bottleneck Networks

Kyle Olszewski13∗, Sergey Tulyakov2, Oliver Woodford2, Hao Li134, and Linjie Luo5∗
1University of Southern California, 2Snap Inc., 3USC ICT, 4Pinscreen Inc., 5ByteDance Inc.

9
1
0
2
 
g
u
A
 
6
2
 
 
]

V
C
.
s
c
[
 
 
5
v
8
5
4
6
0
.
4
0
9
1
:
v
i
X
r
a

Abstract

We propose a novel approach to performing ﬁne-grained
3D manipulation of image content via a convolutional neu-
ral network, which we call the Transformable Bottleneck
Network (TBN). It applies given spatial transformations
directly to a volumetric bottleneck within our encoder-
bottleneck-decoder architecture. Multi-view supervision
encourages the network to learn to spatially disentangle the
feature space within the bottleneck. The resulting spatial
structure can be manipulated with arbitrary spatial trans-
formations. We demonstrate the efﬁcacy of TBNs for novel
view synthesis, achieving state-of-the-art results on a chal-
lenging benchmark. We demonstrate that the bottlenecks
produced by networks trained for this task contain meaning-
ful spatial structure that allows us to intuitively perform a
variety of image manipulations in 3D, well beyond the rigid
transformations seen during training. These manipulations
include non-uniform scaling, non-rigid warping, and com-
bining content from different images. Finally, we extract
explicit 3D structure from the bottleneck, performing im-
pressive 3D reconstruction from a single input image. 1

1. Introduction

Inferring and manipulating the 3D structure of an image
is a challenging task, but one that enables many exciting ap-
plications. By rigidly transforming this structure, one can
synthesize novel views of the content. More general trans-
formations can be used to perform tasks such as warping or
exaggerating features of an object, or fusing components of
different objects. Convolutional Neural Networks (CNNs)
have shown impressive results on various 2D image synthe-
sis and manipulation tasks, but specifying such ﬁne-grained
and varied 3D manipulations of the image content, while
achieving high-quality synthesis results, remains difﬁcult.

Several approaches to providing transformation param-
eters as an input to, and applying such transformations
within, a network have been explored. A common approach
is to pass spatial transformation parameters as an explicit
input vector to the network [34], optionally with a decoder

∗This work was performed while the author was at Snap Inc.
1Code and data for

this project are available on our website:

https://github.com/kyleolsz/TB-Networks

Figure 1: Applications of TBNs. A Transformable Bottleneck
Network uses one or more images (column 1; here, 4 randomly
sampled views) to encode volumetric bottlenecks (columns 2 & 3),
which are explicitly transformed into and aggregated in an output
view coordinate frame. Transformed bottlenecks are then decoded
to synthesize state-of-the-art novel views (columns 5 & 6), as well
as reconstruct 3D geometry (column 4). Fine-grained and non-
rigid transformations, as well as combinations, can be applied in
3D, allowing creative manipulations (bottom row) that were never
used during training. Images shown are samples of real results.

trained to perform a speciﬁc set of transformations [3, 33].
Other approaches include altering the input by augmenting
it with auxiliary channels deﬁning the desired spatial trans-
formation [23], or constructing a renderable representation
that is spatially transformed prior to rendering [21, 35].

We propose a novel approach: directly applying the spa-
tial transformations to a volumetric bottleneck within an
encoder-bottleneck-decoder network architecture. We call
these Transformable Bottleneck Networks (TBNs). The net-
work learns that these 3D transformations correspond to
transformations between source and target images.

There are several advantages to this approach. Firstly,
supervising on multi-view datasets encourages the network
to infer spatial structure—it learns to spatially disentangle
the feature space within the bottleneck. Consequently, even
when training a network using only rigid transformations
corresponding to viewpoint changes, we can manipulate the
network output at test time with arbitrary spatial transfor-
mations (see Figs. 1 & 6). The operations enabled by these

1

transformations thus include not only rotation and transla-
tion, but also effects such as non-uniform 3D scaling and
global or local non-rigid warping. Additionally, bottleneck
representations of multiple inputs can be transformed into,
and combined in, the same coordinate frame, allowing them
to be aggregated naturally in feature space. This can re-
solve ambiguities present in a representation from a single
image. While similar to ideas in Spatial Transformer Net-
works (STN) [15, 20] and a 3D reconstruction method [29]
deriving from it, a key distinction of our approach is that the
spatial transformations are input to our network, as opposed
to inferred by the network. It is precisely this difference that
enables TBNs to make such diverse manipulations.

We highlight the power of this approach by applying it
to novel view synthesis (NVS). NVS is a challenging task,
requiring non-trivial 3D understanding from one or more
images in order to predict corresponding images from new
viewpoints. This allows us to demonstrate both the ability
of a TBN to naturally spatially disentangle features within
a 3D bottleneck volume, and the beneﬁts that this confers.
We compare to leading NVS methods [33, 45, 32, 25], on
images from the ShapeNet dataset [1], and attain state-of-
the-art results on both L1 and SSIM metrics (see Table 1,
and Figs. 1 & 3a). We present additional qualitative results
on a synthetic human performance dataset. We also train a
simple voxel occupancy classiﬁer on image segmentations
(i.e. without 3D supervision), and use it to demonstrate ac-
curate 3D reconstructions from a single image. Finally, we
provide qualitative examples of how this bottleneck struc-
ture allows us to perform realistic, varied and creative image
manipulation in 3D (Figs. 1 & 6).

In summary, the main contributions of this work are:
• A novel, transformable bottleneck framework that al-
lows CNNs to perform spatial transformations for
highly controllable image synthesis.

• A state-of-the-art NVS system using TBNs.
• A method for extracting high-quality 3D structure
from this bottleneck, constructed from a single image.
• The ability to perform realistic, varied and creative 3D

image manipulation.

2. Related work

We now review works related to the TBN, in the areas of
image and novel view synthesis, and volumetric reconstruc-
tion2 and rendering.

2.1. Image and novel view synthesis

Many exciting advances in image synthesis and manip-
ulation have emerged recently that enable the application
of speciﬁc styles or attributes. Early approaches generated
natural images using samples from a chosen distribution us-

2Image to depth map [6, 19], 3D mesh [11, 14, 38], point cloud [4] and
surfel primitive [8] approaches also exist, but are outside the scope of our
discussion.

ing a generative adversarial (GAN) training scheme [7, 27].
Conditional methods then provided the ability to change the
style of an input image to another style [13, 22]. Initially
such trained networks could only handle one style [46];
more recent works now allow multiple attribute changes us-
ing a single network, by learning to disentangle these at-
tributes from the training images [18, 34, 47].

Novel view synthesis generates an image from a new,
user-speciﬁed viewpoint, given one or more images of a
scene from known viewpoints. We focus on methods that,
like ours, can synthesize novel views from a single input im-
age. This is a highly ill-posed problem, requiring strong 3D
understanding and disentanglement of viewpoint and ob-
ject shape from the input image. Since the seminal work
of Hoiem et al. [12], methods have sought to develop more
expressive models to address general NVS. Early CNN so-
lutions regressed output pixel color in the new view [33, 44]
directly from the input image. Some works disentangle their
representations [34, 44], separating pose from object [44]
or face identity [34]. Zhou et al. [45] introduced a ﬂow pre-
diction formulation, inferring an output to input pixel map-
ping instead, to which an explicit occlusion detection and
inpainting module [25] and generalization to an arbitrary
number of input images [32] have been added. Eslami et
al. [3] developed a latent representation that can be aggre-
gated to combine inputs, showing good results on synthetic
geometric scenes.

A drawback of all these approaches is that they condi-
tion their networks to perform the transformation, limiting
the transformations that can be applied to those that have
been learned. Most recently, methods have been proposed
to generate explicit representations of geometry and appear-
ance that are transformed and rendered using standard ren-
dering pipelines [21, 35]. While these representations can
be rendered from arbitrary viewpoints, they are based on
planar representations and are therefore not able to capture
realistic shape, especially when rendered from side views.
Our TBN approach allows us to perform ﬁne-grained and
varied, even non-rigid, 3D manipulations in the bottleneck
volume, synthesizing them into realistic novel views. Here,
the manipulations are applied manually. However, recent
work [39] proposes a learned network for deforming ob-
jects arbitrarily (parameterized by an input shape), an idea
that complements our framework.

2.2. Volumetric reconstruction and rendering

Several recent methods reconstruct an explicit occu-
pancy volume from a single image [2, 5, 16, 29, 36, 42, 41,
43], some of which are trained using only supervision from
2D images [29, 36, 43]. Yan et al. [43] max-pool occupancy
along image rays to produce segmentation masks, and min-
imize their difference w.r.t. the ground-truths. Tulsiani et
al. [36] enforce photo-consistency between projected color
images (given the camera poses) using the correspondences

2

Figure 2: A Transformable Bottleneck Network. (a) Network architecture, consisting of three parts: an encoder (2D convolution layers,
reshaping, 3D convolution layers), a resampling layer, and a decoder (a mirror of the encoder architecture). The encoder and decoder are
connected purely via the bottleneck; no skip connections are used. The resampling layer transforms an encoded bottleneck to the target
view via trilinear interpolation. It is parameterless, i.e. transformations are applied explicitly, rather than learned. Multiple inputs can be
aggregated by averaging bottlenecks prior to decoding. (b) A visualization of the conceptual correspondence between an image patch and
a subvolume of the bottleneck. Bottleneck volume visualizations show the cellwise norm of feature vectors. It is interesting that to note
that this norm appears to encode the object shape.

implied by the occupancy volume. In contrast to these ap-
proaches that use explicit occupancy volumes and render-
ing techniques, the implicit approaches proposed by Kar et
al. [16], and in particular Rezende et al. [29], are more
relevant to our work—both the volumetric representation
and the decoder (rendering) are learned, similar to recent
neural rendering work [24]. The former [16], trained on
ground truth geometry to estimate geometry from images,3
uses three learned networks4 and a hand-designed unpro-
jection step to compute a latent volume. The latter [29]
requires the target transformation to be inferred by the net-
work for NVS, whereas ours requires it to be provided as
input, removing any limitations on the transformations that
can be applied at test time.

3. Transformable bottleneck networks

In this section we formally deﬁne our Transformable

Bottleneck Network architecture and training method.

3.1. Architecture

A TBN architecture (Fig. 2(a)) consists of three blocks:

1. An encoder network E : Ik → Xk with parame-
ters θE, that takes in an image Ik and, through a se-
ries of 2D convolutions, reshaping, and 3D convolu-
tions,5 outputs a bottleneck representation, Xk, struc-
tured as a volumetric grid of cells, each containing an
n-dimensional feature vector.

2. A parameterless
layer
resampling
S : Xk, Fk→l → X(cid:48)
takes a bottleneck rep-
l,
resentation and user-provided transformation pa-

bottleneck
that

3The latent representation therefore does not encode appearance.
4For 2D image encoding, recurrent fusion and a 3D grid reasoning.
5See the appendix for the exact architecture.

rameterization, Fk→l, as input, and transforms the
bottleneck via a trilinear resampling operation.

3. A decoder network DI : X(cid:48)

l with parameters
θI , whose architecture mirrors that of the encoder, that
decodes the transformed bottleneck, X(cid:48)
l, into an output
image, I (cid:48)
l .

l → I (cid:48)

Subscripts k and l represent viewpoints. Neither the en-
coder nor the decoder are trained to perform a transforma-
tion: it is fully encapsulated in the bottleneck resampling
layer. As this layer is parameterless, the network cannot
learn how to apply a particular transformation at all; rather,
it is applied explicitly. A single source image synthesis op-
eration, which is end-to-end trainable, is written as:

I (cid:48)
l = DI (S(E(Ik, θE), Fk→l), θI ).
When Fk→l is the identity transform (i.e. k = l), this oper-
ation deﬁnes an auto-encoder network.

(1)

3.1.1. Handling multiple input views

Our formulation naturally extends to an arbitrary num-
ber of inputs, both for training and testing, without mod-
iﬁcations to either encoder or decoder. The encoded and
transformed representations of all inputs are simply aver-
aged:

X(cid:48)

l =

1
|K|

(cid:88)

k∈K

S(Xk, Fk→l),

(2)

where K is the set of input viewpoints. The number of in-
puts tested on can differ from the number trained on, which
can differ even within a training batch. We later show that
the model trained with a single input view can effectively
aggregate multiple inputs at inference time, and also that a
model trained on multiple inputs can perform state-of-the-
art inference from a single image.

3

3.1.2. Bottleneck layout and resampling

3.2.1. Appearance supervision

The network architecture deﬁnes the number of cells
along each side of the bottleneck volume, but not the spa-
tial position of each cell. Indeed, the framework imposes
no constraints on their position, e.g. the voxel grid cells do
not need to be equally spaced. In this work the grid cells
are chosen to be equally spaced,6 with the volume centered
on the target object and axis aligned with the camera co-
ordinate frame. Perspective effects caused by projection
through a pinhole camera, and the camera parameters that
affect them (such as focal length), are learned in the encoder
and decoder networks, rather than handled explicitly.

Since the bottleneck representation is a volume, it can be
resampled via trilinear interpolation, which is fully differ-
entiable [15, Eqn. 9]. This allows it to be spatially trans-
formed. The transformation, Fk→l, is parameterized as a
ﬂow ﬁeld that, for each output grid cell, deﬁnes the 3D point
in the input volume to sample to generate it. The decoder
takes as input a volume of the same dimensions as the en-
coder produces, therefore the ﬂow ﬁeld also has these di-
mensions. Feature channels form separate volumes that are
resampled independently, then recombined to form the out-
put volume.

When the view transformation is rigid, as in the case of
NVS, the ﬂow ﬁeld is computed by transforming the cell
coordinates of the novel view by the inverse of the relative
transformation from the input view.7 Non-rigid deforma-
tions can also be applied, enabling creative shape manip-
ulation, which we demonstrate in Sec. 4.4. Importantly, we
do not train on these kinds of transformations.

3.1.3. Geometry decoder

Since the TBN spatially disentangles shape and appear-
ance within the volumetric bottleneck, it should also be able
to reconstruct an object in 3D from the bottleneck represen-
Indeed, prior work [29, 36] shows that training a
tation.
3D reconstruction using the NVS task alone, i.e. without
3D supervision, is possible. We extract shape in the form
of a scalar occupancy volume, O, with one value per bot-
tleneck cell, using a separate, shallow network, occupancy
decoder, DO : X → O. To avoid using any 3D supervision
to train this decoder, we then apply another decoding layer,
DS : O → S, that applies a 1D convolution along the z-
axis (the optical axis), followed by a sigmoid, to generate a
scalar segmentation image S, thus:

S = DS(O, θS), O = DO(X, θO),

(3)

where θO and θS are the parameters of the occupancy and
segmentation decoders respectively.

3.2. Training

We train the TBN using the NVS task as follows.

6The scale of the spacing is unimportant here, as our NVS experiments

only involve camera rotations around the object center.

7The ﬂow is deﬁned from output voxel to input voxel coordinate.

NVS requires a minimum of two images of a given ob-
ject from different, known viewpoints.8 Given {Ik, Il} and
Fk→l, we can compute a reconstruction, I (cid:48)
l , of Il using
equation (1). Using this, we deﬁne several losses in image
space with which to train our network parameters. The ﬁrst
two are a pixel-wise L1 reconstruction loss and an L2 loss in
the feature space of the VGG-19 network, often referred to
as the perceptual loss:

LR(θE, θI ) = ||Ik→l − Il||1,

LP(θE, θI ) =

||Vi(Ik→l) − Vi(Il)||2
2,

(4)

(5)

(cid:88)

i

where Vi is the output of the ith layer of the VGG-19 net-
work. To enforce structural similarity of the outputs we
also adopt the structural similarity loss [31, 40], denoted as
LS. Finally, we employ the adversarial loss of Tulyakov et
al. [37], LA, to increase the sharpness of the output image.

3.2.2. Segmentation supervision

Appearance supervision is sufﬁcient for NVS tasks, but
to compute a 3D reconstruction we also require segmenta-
tion supervision,9 in order to learn θO and θS. We therefore
assume that for each image Ii we also have a binary mask
Mi, with ones on the foreground object pixels and zeros
elsewhere.10 Segmentation losses are computed in all input
and output views, using the aggregated bottleneck in the
multi-input case, as follows:

LM(θE, θO, θS) =

H(DS(S(Ol, Fl→k), θS), Mk),

(cid:88)

k∈K

+ H(DS(Ol, θS), Ml),

(6)

where Ol = DO(X(cid:48)
l, θO) and H is the binary cross en-
tropy cost, summed over all pixels. Summing over all views
achieves a kind of space carving. Correctly reconstructing
unoccupied cells within the visual hull is difﬁcult to learn
as no 3D supervision is used, but appearance supervision
helps address this.

3.2.3. Optimization

The total training loss, with hyper-parameters λi to con-

trol the contribution of each component, is

LT(Θ) = LR + λ1LP + λ2LS + λ3LA + λ4LM,

(7)

This loss is fully differentiable, and the network can be
trained end-to-end by minimizing the loss w.r.t. the network
parameters Θ = {θE, θI , θO, θS} using gradient descent.

8Viewpoints are deﬁned by camera rotation and translation, w.r.t. some

arbitrary reference frame; world coordinates are not required.

93D supervision could be used, but requires ground truth 3D data.
10Segmentation supervision is not a hard constraint, therefore segmen-
tations from state-of-the-art methods (e.g. Mask R-CNN [9]) may sufﬁce.
However, we use ground truth masks in this work.

4

(a) Results on novel view synthesis

(b) Comparisons with Sun et al. [32]

Figure 3: Qualitative results and comparisons. (a) Randomly selected NVS samples generated using our method. Left: input images
(3 of the 4 used). Middle: transformable bottleneck and 3D reconstruction. Right: synthesized output views. (b) Samples of synthesized
novel views using the method of Sun et al. [32] and ours. Their method fails to capture overall structure for chairs, and generates unnatural
artifacts on cars, especially around the wheels. Where < 4 input views are used, they are selected in clockwise order, starting top left.

4. Experiments

We train and evaluate our framework on a variety of
tasks. We provide quantitative evaluations for our results
for novel view synthesis using both single and multi-view
input, and compare our results to state-of-the-art methods
on an established benchmark. We also perform 3D object
reconstruction from a single image and quantitatively com-
pare our results to recent work [36]. Finally, we provide
qualitative examples of our approach applying creative ma-
nipulations via non-rigid deformations.

4.1. A note on implementation

Our models are implemented and trained using the Py-
Torch framework [26], for automatic differentiation and
parallelized computation for training and inference. We ex-
tended this framework to include a layer to perform par-
allelizable trilinear resampling of a tensor, in order to ef-
ﬁciently perform our spatial transformations. We plan to
release the source code for our framework to the research
community upon publication.

Each network was trained on 4 NVIDIA P100s, with
each batch distributed across the GPUs. As we found that
batch size had no discernible effect on the ﬁnal result, we
selected it to maximize GPU utilization. We trained each
model until convergence on the test image set, which took
approximately 8 days. For more details on the network ar-
chitecture, training process and datasets used in our evalua-
tions and results, please consult the appendix.

4.2. Novel view synthesis

Setup. We use renderings of objects obtained from the
ShapeNet [1] dataset, which provides textured CAD models

from a variety of object categories. We measure the capa-
bility of our approach to synthesize new views of objects
under large transformations, for which ground-truth results
are available. We train and evaluate our approach using the
cars and chairs categories, to demonstrate its performance
on objects with different structural properties. Each model
is rendered as 256 × 256 RGB images at 18 azimuth an-
gles sampled at 20-degree intervals and 3 elevations (0, 10
and 20 degrees), for a total of 54 views per model. We
use standard training and test data splits [25, 32, 45], and
train a separate network for each object category (also stan-
dard), using 4 input images to synthesize the target view.
The network architecture and training method were ﬁxed
across categories.

As described in Section 3.1.1, our framework can use
a variable number of input images. Though trained with
4 input images, we demonstrate that our networks can in-
fer high-quality target images using fewer input images
at test time. Using the experimental protocol of Sun et
al. 2018 [32], which uses up to 4 input images to infer a
target image, we report quantitative results for our approach
and others that can use multiple input images [32, 33, 45],
as well as for an approach accepting single inputs [25].

To further demonstrate the applicability of our method
to non-rigid objects with higher pose diversity and lower
appearance diversity, we also train and qualitatively evalu-
ate a network using a multi-view human action dataset [28].
This dataset uses a limited number (186) of textured CAD
models representing human subjects. However, the subjects
are rigged to perform animation sequences representing a
variety of common activities (running, waving, jumping,
etc.), resulting in a much larger number of renderings. Note

5

Methods

Car

Chair

L1

SSIM L1

SSIM

w
e
i
v

1

Tatarchenko et al. 2015 [33]
Zhou et al. 2016 [45]
Park et al. 2017 [25]
Sun et al. 2018 [32]
Ours

s Tatarchenko et al. 2015 [33]
w
e
i
v

Zhou et al. 2016 [45]
Sun et al. 2018 [32]
Ours

2

s Tatarchenko et al. 2015 [33]
w
e
i
v

Zhou et al. 2016 [45]
Sun et al. 2018 [32]
Ours

3

s Tatarchenko et al. 2015 [33]
w
e
i
v

Zhou et al. 2016 [45]
Sun et al. 2018 [32]
Ours

4

.139
.148
.119
.098
.091

.124
.107
.078
.072

.116
.089
.068
.063

.112
.081
.062
.059

.875
.877
.913
.923
.927

.883
.901
.935
.939

.887
.915
.941
.943

.890
.924
.946
.946

.223
.229
.202
.181
.178

.209
.207
.141
.136

.197
.188
.122
.116

.192
.165
.111
.107

.882
.871
.889
.895
.895

.890
.881
.911
.928

.898
.887
.919
.936

.900
.891
.925
.939

Table 1: Quantitative results on novel view synthesis. We report
the L1 loss (lower is better) and the structural similarity (SSIM) in-
dex (higher is better) for our method and several baseline methods,
for 1 to 4 input views, on both car and chair ShapeNet categories.

that the training process is identical to that used for rigid
objects—input images for a given scene see the subject in a
ﬁxed pose. Thus, the capability to perform non-rigid trans-
formations, as seen in Sec. 4.4, is still implicitly learned by
the network.

Results. Table 1 reports quantitative results across re-
cent methods, for 1 to 4 input views, on car and chair cate-
gories, for both the L1 cost and structural similarity (SSIM)
scores [40]. Though our networks are trained using exactly
4 input views, we obtain state-of-the-art results across all
metrics, categories and number of input views, even in the
challenging case of single-view input.

These results indicate that the TBN excels at NVS, and
outperforms alternatives using both pixelwise and percep-
tual metrics. We further note that our method performs sig-
niﬁcantly better than others in cases involving large trans-
formations of the input images and challenging viewpoints
(see Fig. 3b). This demonstrates that our approach to com-
bining information from these viewpoints is an effective
strategy for synthesizing novel viewpoints, in addition to
having other interesting applications (see below).

Fig. 3a shows qualitative examples on 3 datasets:
the
ShapeNet cars and chairs used for our quantitative eval-
uations, and the aforementioned human activity dataset.
Fig. 3b qualitatively compares our results with those of Sun
et al. [32] on several challenging examples requiring large
viewpoint transformations from the chair and car datasets.
Their method has difﬁculty inferring the proper correspon-
dence between the source and target images for both ob-
ject categories, particularly the more complex and variable
structure of the chairs. Thus, many details are missing or
incorrectly transformed. For cars, errors in the correspon-
dence between local regions of source and target images

cause artifacts, such as the wheel on the front of the car in
row 5. In contrast, our method recovers the overall struc-
ture of both chairs and cars well, improving ﬁner details as
additional input views are added. We note that their results
are in some cases sharper, as they use ﬂow prediction to di-
rectly sample input pixels to construct the output, whereas
our output images are rendered entirely from the bottleneck
representation, as is required for general 3D manipulation.

4.3. Appearance synthesis for 3D reconstruction

As reported above, our method performs well on NVS
with a single view, and progressively improves as more in-
put views are used. We now show that this trend extends to
3D reconstruction. However, given that more views aid re-
construction, and that our network can generate more views,
an interesting question is whether the generative power of
our network can be used to aid the 3D reconstruction task.
We ran experiments to ﬁnd out.

Setup. To evaluate our method, we use the 3D recon-
struction evaluation framework from the Differentiable Ray
Consistency (DRC) work of Tulsiani et al. [36], which in-
fers a 3D occupancy volume from a single RGB image. We
trained our network on their dataset: multi-view images of
ShapeNet objects, rendered under varying lighting condi-
tions from 10 viewpoints, randomly sampled from uniform
azimuth and elevation distributions with ranges [0, 360) and
[−20, 30], respectively. As our method is trained using a
set of multi-view images and corresponding segmentation
masks, we compare our method to their publicly available
model trained on masked, color images, using 5 random
views of each object. In contrast, for this task our model
was trained using only 2 random views (one input, one out-
put) of each object.

Using the DRC [36] experimental protocol, we report
the mean intersection-over-union (IoU) of the volumes from
our occupancy decoder, computed on the evaluation im-
age set, compared to the ground-truth occupancies obtained
by voxelizing the 3D meshes used to render these images.
Like DRC, we report the IoU attained using the optimal dis-
cretization threshold for each object category.

Results. Figure 4 shows the results of this evaluation.
We report IoU numbers obtained using one real input im-
age, with 0 to 9 additional synthesized views, sampled ei-
ther randomly (red line) or regularly (at 0◦ elevation, blue
line). For comparison, we show results using additional real
images of the target object (green line), randomly sampled
from the evaluation set (regularly sampled images were not
available), as well as the results using DRC [36] with a sin-
gle input image (yellow line). The ﬁgure also contains qual-
itative comparisons of results11 using our best method (reg-
ularly sampled synthetic images) with varying numbers of
synthetic images (middle columns), compared to DRC [36]
(left) and the ground truth (right). Our method produces

11We render the voxel grids as meshes using an isosurface method.

6

Figure 5: Examples of 3D printed objects created using our ap-
proach to 3D reconstruction.

tion. Therefore, consider a chair viewed from only one an-
gle: the encoder could say where in space it believes the
visible parts be, allowing it to be transformed, then the de-
coder could see this partial reconstruction in the bottleneck,
and knowing what chairs look like, hallucinate the unseen
parts. By recycling the synthesized image back through the
encoder, it could then see new parts of the chair, and gen-
erate structure for them also. In essence, it comes down to
where unseen structure is hallucinated within the network.
Since the bandwidths of our encoder and image decoder
are identical, there is no reason for it be in any particular
part. However, because the gradients in the decoder lay-
ers have been passed through fewer other layers, they may
receive a stronger signal for hallucination from the output
view, hence learn it ﬁrst.

One might expect the occupancy decoder to learn to hal-
lucinate structure as well as the image decoder, but our re-
sults indicate that it doesn’t (see our qualitative reconstruc-
tions with no synthetic views, in Fig. 4). We intuit that this
is because it has much less information (binary vs. color im-
ages) to train on, and concomitantly a signiﬁcantly smaller
bandwidth. This further validates our hypothesis that ap-
pearance supervision improves 3D reconstruction within
the visual hull, in the absence of 3D supervision.

Physical recreations of real objects. An exciting possi-
bility of image-based reconstruction is being able to recre-
ate old objects from photographs. We took 3 photos each
of 2 real chairs, computed TBNs from these images and
aggregated them using estimated relative poses. We com-
puted occupancy volumes from these, extracted meshes us-
ing an isosurface method, and 3D printed these meshes.
Figure 5 shows the input images, reconstructed meshes and
3D printed objects. Despite the low resolution of the occu-
pancy volume (403 voxels), these physical recreations are
coherent and depict the salient details of each chair.

4.4. Non-rigid transformations

Spatial disentanglement. Due to the convolutional na-
ture of our network, a subvolume of the 3D bottleneck
broadly corresponds to a patch of the input (if encoding)
or output (if decoding) image, as visualized in Fig. 2(b).
Any of the features in the subvolume, or a combination of
them, can account for the appearance of the image patch;
there is no guarantee that the features used will come from
the voxels corresponding to the location in 3D space of the

Figure 4: 3D reconstruction results. Quantitative (IoU, follow-
ing the evaluation framework of Tulsiani et al. [36]) and qualitative
results of our method performing 3D reconstruction on the chairs
dataset, from a single input image, supplemented by additional
views synthesized by our network. 0 synthesized views indicates
that only the original input image is used, while 1 to 9 indicate
that we synthesize these additional views and combine the bottle-
necks generated from these viewpoints with those obtained from
the original input view. Results from Tulsiani et al. [36], who use
only one image during inference, are also shown.

good results even with concavities (Fig. 4, row 1), that could
not be obtained solely from the object’s silhouette, demon-
strating that NVS supervision is an able substitute for ge-
ometry supervision when inferring the geometric structure
of such objects.

Using synthesized views from random poses clearly im-
proves the reconstruction quality as more views are incor-
porated into our representation, though does not match the
quality attained when using the same number of real images
instead. Using synthetic views sampled at regular intervals
around the object’s central axis produces signiﬁcantly bet-
ter results, achieving superior single view 3D reconstruc-
tion to all other methods when using as few as 3 synthetic
views. This dramatic improvement from randomly to regu-
larly sampled synthetic views can be explained by the fact
that information from each of the regularly sampled views
is much more complementary than for the random views,
that could leave parts of the object “unseen” (or unhalluci-
nated). That synthetic views should improve the results at
all is a more nuanced argument.

One might imagine that recycling hallucinated views into
the encoder would simply reinforce the existing reconstruc-
tion. However, we argue the following: the encoder learns
to extract the features that allow an image to be transformed,
and the decoder learns to process the transformed features
so as to produce a plausible image under this transforma-

7

Figure 7: Interactive manipulation. We use our approach to ro-
tate and deform objects before compositing them into real images.

Interactive creative manipulation. We implemented a
tool to demonstrate a useful real-world application of the
TBN: interactive manipulation and compositing. The user
has one or more13 photos of an object (whose class has been
trained on) they wish to manipulate and place in a photo of
a real world scene. The images are loaded into our appli-
cation, from which a single aggregated bottleneck is com-
puted. An interactive interface then allows the user to rotate,
translate, scale and stretch the object, transforming and ren-
dering the bottleneck in realtime and overlaying the object
in the target image, as they apply the transformations.

Figure 7 contains example inputs and outputs of this pro-
cess, for an interior design visualization use case. Two pho-
tos of a real chair were provided (with estimated relative
pose). Rotations and stretches were then applied interac-
tively, to get a feel for how the chair would look with dif-
ferent orientations and styles. Despite the challenging na-
ture of this example (real photos of a chair with complex
structure, and real-world lighting conditions such as specu-
lar highlights), we achieve highly plausible results.

5. Conclusion

This work has presented a novel approach to applying
spatial transformations in CNNs: applying them directly
to a volumetric bottleneck, within an encoder-bottleneck-
decoder network that we call the Transformable Bottleneck
Network. Our results indicate that TBNs are a powerful
and versatile method for learning and representing the 3D
structure within an image. Using this representation, one
can intuitively perform meaningful spatial transformations
to the extracted bottleneck, enabling a variety of tasks.

We demonstrate state-of-the-art results on NVS of ob-
jects, producing high quality reconstructions by simply ap-
plying a rigid transformation to the bottleneck correspond-
ing to the desired view. We also demonstrate that the 3D
structure learned by the network when trained on the NVS
task can be straightfowardly extracted from the bottleneck,
even without 3D supervision, and furthermore, that the
powerful generative capabilities of the complete encoder-
decoder network can be used to substantially improve the
quality of the 3D reconstructions by re-encoding regularly
spaced, synthetic novel views. Finally, and perhaps most in-
triguingly, we demonstrate that a network trained on purely
rigid transformations can be used to apply arbitrary, non-
rigid, 3D spatial transformations to content in images.

13Multiple images require true or estimated relative poses.

Figure 6: Creative, non-rigid manipulations (view as videos in
Acrobat Reader). Selected examples of non-rigid 3D manipula-
tions applied to transformable bottlenecks, for creative image and
video12 synthesis. Manipulations include: vertical and horizon-
tal stretching, twisting, slicing & stitching, non-linear inﬂation.
Please see the supplementary video for further demonstrations.

surface seen in the patch. In our framework, however, 2D
supervision from multiple directions (both input and output
views) places multiple subvolume constraints on where in-
formation can be stored. Storing information in the cells
corresponding to the location in 3D space of the visible sur-
face is the most efﬁcient layout of information that meets all
of those constraints, thus the one which achieves the lowest
loss given the available network bandwidth. The effect is
therefore achieved implicitly, rather than explicitly.

Creative manipulation. Based on this effect of spatial
disentanglement, arbitrary non-rigid volumetric deforma-
tions can be applied on the transformable bottleneck, re-
sulting in a similar transformation of shape of the rendered
object. We demonstrate this qualitatively with a variety cre-
ative tasks, shown in Figure 6, that are performed by manip-
ulating and combining the volumetric bottlenecks extracted
from input images. Objects can be stretched in different di-
mensions (ﬁrst and second rows). By rotating the upper and
lower portion of the volume in opposite directions (third
row), we can transform different regions of the target into a
new shape that does not correspond to a single rigid trans-
formation. Non-uniform and/or local scaling can be applied
to inﬂate or shrink (bottom row) objects. Parts of a bottle-
neck can even be replaced with another part from the same,
or a different bottleneck, creating hybrid objects (fourth and
ﬁfth rows). Many other such manipulations are possible, far
beyond the scope of the rigid transformations trained on.

12While some such manipulations could seem simple to achieve in 2D,
an edited 3D object can also be rendered consistently from any azimuth
(see videos here and in the supplementary video), from a single manipu-
lated bottleneck.

8

References

[1] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015.

[2] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. In Proceedings of the European Conference
on Computer Vision, 2016.

[3] S. A. Eslami, D. J. Rezende, F. Besse, F. Viola, A. S. Mor-
cos, M. Garnelo, A. Ruderman, A. A. Rusu, I. Danihelka,
K. Gregor, et al. Neural scene representation and rendering.
Science, 360(6394):1204–1210, 2018.

[4] H. Fan, H. Su, and L. J. Guibas. A point set generation
network for 3d object reconstruction from a single image.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 605–613, 2017.

[5] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. In Proceedings of the European Conference on
Computer Vision, 2016.

[6] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsuper-
vised monocular depth estimation with left-right consistency.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 270–279, 2017.

[7] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Proceedings of the Neural Infor-
mation Processing Systems Conference, pages 2672–2680,
2014.

[8] T. Groueix, M. Fisher, V. G. Kim, B. Russell, and M. Aubry.
AtlasNet: A Papier-Mˆach´e Approach to Learning 3D Sur-
face Generation. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2018.

[9] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-
cnn. In Proceedings of the IEEE International Conference
on Computer Vision, 2017.

[10] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning
for image recognition. CoRR, abs/1512.03385, 2015.
[11] P. Henderson and V. Ferrari. Learning to generate and recon-
struct 3d meshes with only 2d supervision. In Proceedings
of the British Machine Vision Conference, 2018.

[12] D. Hoiem, A. A. Efros, and M. Hebert. Automatic photo
In ACM Transactions on Graphics, volume 24,

pop-up.
pages 577–584. ACM, 2005.

[13] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
In Pro-
translation with conditional adversarial networks.
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, 2017.

[14] D. Jack, J. K. Pontes, S. Sridharan, C. Fookes, S. Sareh,
F. Maire, and A. Eriksson. Learning free-form deformations
for 3d object reconstruction. Proceedings of the Asian Con-
ference on Computer Vision, 2018.

[15] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
transformer networks. In Proceedings of the Neural Infor-
mation Processing Systems Conference, 2015.

[16] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. In Proceedings of the Neural Information Process-
ing Systems Conference, pages 365–376, 2017.

[17] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014.

[18] G. Lample, N. Zeghidour, N. Usunier, A. Bordes, L. De-
noyer, et al. Fader networks: Manipulating images by sliding
attributes. In Proceedings of the Neural Information Process-
ing Systems Conference, pages 5967–5976, 2017.

[19] Z. Li and N. Snavely. Megadepth: Learning single-view
depth prediction from internet photos. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 2041–2050, 2018.

[20] C.-H. Lin and S. Lucey. Inverse compositional spatial trans-
former networks. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2017.

[21] M. Liu, X. He, and M. Salzmann. Geometry-aware deep
network for single-image novel view synthesis. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2018.

[22] M.-Y. Liu, T. Breuel, and J. Kautz. Unsupervised image-to-
image translation networks. In Proceedings of the Neural In-
formation Processing Systems Conference, pages 700–708,
2017.

[23] L. Ma, X. Jia, Q. Sun, B. Schiele, T. Tuytelaars, and
L. Van Gool. Pose guided person image generation. In Pro-
ceedings of the Neural Information Processing Systems Con-
ference, pages 405–415, 2017.

[24] T. Nguyen-Phuoc, C. Li, S. Balaban, and Y. Yang. Render-
net: A deep convolutional network for differentiable render-
ing from 3d shapes. In Proceedings of the Neural Informa-
tion Processing Systems Conference, 2018.

[25] E. Park, J. Yang, E. Yumer, D. Ceylan, and A. C.
Berg. Transformation-grounded image generation network
for novel 3d view synthesis. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, 2017.
[26] A. Paszke, S. Gross, S. Chintala, G. Chanan, E. Yang, Z. De-
Vito, Z. Lin, A. Desmaison, L. Antiga, and A. Lerer. Auto-
matic differentiation in pytorch. 2017.

[27] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. 2015.

[28] Renderpeople, 2018. http://renderpeople.com.
[29] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Proceedings of the Neural Infor-
mation Processing Systems Conference, 2016.

[30] O. Ronneberger, P. Fischer, and T. Brox. U-net: Convolu-
tional networks for biomedical image segmentation. CoRR,
abs/1505.04597, 2015.

[31] J. Snell, K. Ridgeway, R. Liao, B. D. Roads, M. C. Mozer,
and R. S. Zemel. Learning to generate images with percep-
tual similarity metrics. In Proceedings of the IEEE Interna-
tional Conference on Image Processing, 2017.

[32] S.-H. Sun, M. Huh, Y.-H. Liao, N. Zhang, and J. J. Lim.
Multi-view to novel view: Synthesizing novel views with
In Proceedings of the European
self-learned conﬁdence.
Conference on Computer Vision, 2018.

[33] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Single-view
to multi-view: Reconstructing unseen views with a convolu-
tional network. CoRR abs/1511.06702, 1(2):2, 2015.

9

[34] L. Tran, X. Yin, and X. Liu. Disentangled representation
learning gan for pose-invariant face recognition. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017.

[35] S. Tulsiani, R. Tucker, and N. Snavely. Layer-structured 3d
In Proceedings of the

scene inference via view synthesis.
European Conference on Computer Vision, 2018.

[36] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 2017.

[37] S. Tulyakov, M.-Y. Liu, X. Yang, and J. Kautz. Mocogan:
Decomposing motion and content for video generation. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2018.

[38] N. Wang, Y. Zhang, Z. Li, Y. Fu, W. Liu, and Y.-G. Jiang.
Pixel2mesh: Generating 3d mesh models from single rgb im-
ages. In Proceedings of the European Conference on Com-
puter Vision, pages 52–67, 2018.

[39] W. Wang, D. Ceylan, R. Mech, and U. Neumann. 3dn: 3d de-
formation network. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 2019.

[40] Z. Wang, A. C. Bovik, H. R. Sheikh, and E. P. Simoncelli.
from error visibility to struc-
IEEE Transactions on Image Processing,

Image quality assessment:
tural similarity.
13(4):600–612, 2004.

[41] J. Wu, Y. Wang, T. Xue, X. Sun, B. Freeman, and J. Tenen-
baum. Marrnet: 3d shape reconstruction via 2.5d sketches.
In Proceedings of the Neural Information Processing Sys-
tems Conference, 2017.

[42] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Proceedings of the Neu-
ral Information Processing Systems Conference, 2016.
[43] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
In Proceedings of the Neural
tion without 3d supervision.
Information Processing Systems Conference, 2016.

[44] J. Yang, S. E. Reed, M.-H. Yang, and H. Lee. Weakly-
supervised disentangling with recurrent transformations for
3d view synthesis. In Proceedings of the Neural Information
Processing Systems Conference, 2015.

[45] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
synthesis by appearance ﬂow. In Proceedings of the Euro-
pean Conference on Computer Vision, 2016.

[46] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. In Proceedings of the IEEE International Conference
on Computer Vision, 2017.

[47] J.-Y. Zhu, Z. Zhang, C. Zhang, J. Wu, A. Torralba, J. Tenen-
baum, and B. Freeman. Visual object networks: image gen-
eration with disentangled 3d representations. In Proceedings
of the Neural Information Processing Systems Conference,
pages 118–129, 2018.

10

A1. Architecture

The overall architecture of our novel view synthesis net-
work is depicted in Table 2.
In this table and the corre-
sponding diagrams, conv indicates a standard convolutional
layer of the speciﬁed ﬁlter size and stride14. In our model,
these layers are followed by a batch normalization opera-
tion. upconv indicates a nearest-neighbor upsampling oper-
ation that increases the output width and height by a factor
of 2, followed by a convolution with ﬁlter size 3 × 3 and
stride 1, which produces an output of the same size15, and
a batch normalization operation. The reshape operation is
used before and after the 3D block to produce outputs that
match the speciﬁed dimensions. output is a layer in which
a 3 × 3 convolution with stride 1 is applied, followed by a
sigmoid operation that produces output in the range of 0 to
1 in each channel. The ﬁnal output is an RGB image with
an additional channel for the segmentation mask.

The architecture of the unet block segments is depicted
in Fig. 8. This component uses a standard U-Net architec-
ture [30] with skip connections connecting the encoder and
decoder in each block. The encoder is made up of 3 residual
blocks [10], as depicted in Fig. 9. These blocks each reduce
the dimensions of the input by a factor of 2. The output
of these layers is concatenated with the output of the corre-
sponding upconv layers in the decoder, which increase the
scale of the input by a factor of 2. As depicted, these con-
catenated feature maps are then passed through conv blocks.
In this and subsequent diagrams, the number at the bottom
of each cell indicates the number of feature maps output by
this operation.

The architecture of the 3d block segment is depicted in
Fig. 10. This block consists of 2 convolution layers (3 × 3,
stride 1) applied before and after the spatial transformation.

Layer Name

Output Size

Filter Size, Stride

Notes

input image
conv
conv
unet block
reshape
3d block
reshape
unet block
upconv
conv
upconv
output

160 × 160 × 3
80 × 80 × 32
40 × 40 × 64
40 × 40 × 800
40 × 40 × 40 × 20
40 × 40 × 40 × 20
40 × 40 × 800
40 × 40 × 20
80 × 80 × 32
80 × 80 × 32
160 × 160 × 32
160 × 160 × 4

4 × 4, 2
7 × 7, 2

3 × 3, 1

3 × 3, 1

See Fig. 8
Reshape 2D to 3D
See Fig. 10
Reshape 3D to 2D
See Fig. 8

Table 2: The architecture of our Transformable Bottleneck Net-
work. Please consult the referenced ﬁgures for details on the indi-
vidual segments of the network.

14In the text, table and following diagrams, conv blocks use a ﬁlter size

of 3 × 3 and stride 1, except when otherwise noted.

15Padding is used as necessary to maintain the output dimensions spec-

iﬁed at each layer.

11

Figure 8: The architecture of the unet block layers of our model.
The number at the bottom of each block indicates the number of
feature maps produced by the operation.

A1.1. 3D Reconstruction

For the results provided for the 3D reconstruction task,
we use the overall network structure described in Table 2,
except that we do not apply the ﬁrst conv and ﬁnal upconv
layers, which halve and double the overall output dimen-
sions, respectively. This results in a 32 × 32 × 32 feature
volume (with 20 features per cell) when the network is ap-
plied to the 64 × 64 RGB images used as input to the net-
work. This corresponds to the dimensions of the occupancy
volume used in [36] and in our evaluations.

The network branch that serves as our occupancy de-
coder (see overview ﬁgure in the paper) has the same struc-
ture as the 3d block described above. However, in this case,
the ﬁnal 3D convolution layer produces only 1 feature per
cell, and no further spatial transformation is applied in the
middle of this block, as we are simply interested in obtain-
ing the occupancy status for each cell in the feature volume.
We apply a softmax operation in the depth dimension to

Figure 10: The 3D component of our network. The top row of the
conv blocks indicates the ﬁlter size and stride, while the number
at the bottom of each block indicates the number of feature maps
produced by the operation.

ume immediately before the spatial transformation to ob-
tain the occupancy volumes and segmentation masks corre-
sponding to each source image, and after the feature volume
aggregation and spatial transformation for the occupancy
volume and segmentation mask corresponding to the target
image.

For the 3D reconstruction evaluations, we generate tar-
get occupancy volumes aligned to the canonical view of the
object used in the meshes that are voxelized to obtain the
ground-truth occupancy volume for each object.

A2. 3D Reconstruction Results

In Table 3 we provide details on the results of the 3D re-
construction experiments described in the paper (Sec. 4.3,
Fig. 5) and the comparison with those obtained by Tul-
siani et al. [36]. 16 We report the Intersection-over-Union
(IoU, higher is better) between the reconstructed volume
and the ground-truth results obtained by voxelizing the
mesh rendered for the corresponding image. The top row
provides the results obtained using our method and theirs
for only one input image, from which we extract the corre-
sponding occupancy volume. The subsequent rows present
the results obtained using our method when using additional
views and averaging the corresponding bottleneck layers (as
is done when using multiple input images for novel view
synthesis) before applying the occupancy decoder.

“real” indicates that additional views of the rendered ob-

16For a fair comparison, we report numbers obtained using the pre-
trained models, datasets, and evaluation framework made available online
by the authors for this work, which were overall somewhat lower than those
reported in their paper.

Figure 9: The architecture of the res block layers used in our ar-
chitecture, as seen in Fig. 8. The top row of the conv blocks indi-
cates the ﬁlter size and stride, while the number at the bottom of
each block indicates the number of feature maps produced by the
operation.

the features produced by the occupancy decoder. In our ex-
periments, we found that this softmax operation helped to
normalize the input to a range that worked well for our re-
construction task, reducing the inﬂuence of extreme values
in the occupancy volume.

To synthesize the 2D segmentation masks used for train-
ing, we reshape the occupancy volume into a 32×32 feature
map with 32 features per cell, then apply a 1 × 1 convolu-
tion with stride 1 to these features to produce a single scalar
feature per cell, followed by a sigmoid operation. This pro-
duces a 2D 32×32 segmentation mask with values between
0 and 1. This segmentation mask is then upsampled to the
target resolution, 64×64. This mask is then used to compute
the loss compared to the ground-truth segmentation masks
from the dataset.

During training, this branch is applied to the feature vol-

12

ject (chosen from the 10 renderings per object in the dataset
used for evaluation) were used to create the occupancy vol-
ume. These results thus show how our method improves its
results when the additional information provided by these
views. “synthetic” indicates that these additional views of
the object under different poses were synthesized by our
encoder-decoder framework, given the single original im-
age as input, before being passed through the encoder again
and aggregated in the bottleneck with those from the other
views. As such, the “synthetic” results still rely on only a
single “real” image as input. This allows for a fair compar-
ison between our method and [36] in these cases.

“random poses” indicates that the azimuth and eleva-
tion for the synthesized viewpoints were selected at random
from the same distributions as were used for rendering the
training and evaluation sets. “regular poses” indicates that
these additional images were synthesized at regular inter-
vals around the vertical axis. This allows the synthesized
images to complement one another by providing contex-
tual information that may be missing when poses are chosen
at random. Our results demonstrate that using synthesized
images with regular poses outperforms not only [36] and
our method when using a single image, but even the use
of real images at random poses. The reconstruction qual-
ity generally improves somewhat as additional views are
synthesized, but using as little as 4 additional synthesized
views, we obtain results that are superior to those obtained
using each alternative we evaluated. This indicates that the
generative power of our encoder-decoder framework can be
used to create images that improve the overall quality of the
structural information stored in the bottleneck produced by
the encoder, when the encoded bottlenecks for these syn-
thesized images are aggregated with that from the original
input image.

We note that we obtain substantially better quantita-
tive results on the chair and aero datasets, but obtain only
slightly better results for the car dataset. We believe that
this is due to the relatively simple and uniform structures of
the objects in the car dataset, compared to the more varied
shapes seen in the other datasets. The beneﬁt obtained us-
ing our approach is more substantial for the latter datasets,
in which simply producing a rough estimate of an average
object’s shape would result in larger errors than it would for
the cars.

A3. Training

scribed in the paper,

The equation deﬁning the total training loss is, as de-

Methods

TBN
Tulsiani et al. [36]

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

TBN, real, random poses
TBN, synthetic, random poses
TBN, synthetic, regular poses

IoU

Car

.4664
.7113

.5233
.5213
.5727

.5479
.5433
.6025

.5638
.5573
.6785

.5754
.5674
.7128

.5840
.5748
.7020

.5913
.5814
.7075

.5968
.5862
.7070

.5996
.5884
.7131

.6023
.5906
.7088

Chair

.3042
.3913

.3455
.3387
.3628

.3650
.3532
.3738

.3753
.3600
.4312

.3822
.3648
.4507

.3878
.3687
.4455

.3918
.3714
.4486

.3946
.3732
.4546

.3972
.3748
.4630

.3988
.3757
.4561

Aero

.2699
.3332

.3300
.3251
.3752

.3582
.3474
.4060

.3741
.3587
.4490

.3858
.3668
.4661

.3941
.3725
.4498

.4004
.3768
.4522

.4049
.3797
.4530

.4090
.3827
.4594

.4132
.3851
.4565

+1 view

+2 views

+3 views

+4 views

+5 views

+6 views

+7 views

+8 views

+9 views

Table 3: Quantitative results for 3D reconstruction using a single
input image, and with up to 9 additional views (real or synthe-
sized). We report the intersection-over-union (IoU, higher is bet-
ter) for our method and Tulsiani et al. [36], which uses a single
image as input.

structural similarity (SSIM) index loss, LA is the adversar-
ial loss using the discriminator architecture from [37]), and
LM is the segmentation masking loss. Please see the paper
for details on each of these loss terms. We empirically de-
termined appropriate weights for the hyper-parameters con-
trolling the contribution of the different loss components:
λ1 = 5, λ2 = 10, λ3 = 0.05, and λ4 = 10.

We train the network using the Adam optimizer [17] with
a learning rate set to 0.0002, β1 = 0.9 and β2 = 0.999.
Convergence on the test set typically takes approximately 8
days for each dataset we used for our evaluations.

LT(Θ) = LR + λ1LP + λ2LS + λ3LA + λ4LM,

(8)

where LR is the L1 reconstruction loss, LP is the L2 loss
in the feature space of the VGG-19 network17, LS is the

A4. Datasets

A4.1. Novel View Synthesis

A4.1.1. ShapeNet Chairs and Cars

17We use the loss computed on the conv1 1, conv2 1, conv3 1, and

relu3 3 layers of the VGG-19 network.

We evaluate our framework’s novel view synthesis
(NVS) capabilities using the dataset provided for the bench-

13

mark in [32].18 While the images were rendered at 256 ×
256, our NVS network architecture accepts and produces
images at a resolution of 160 × 160 for the 40 × 40 × 40
volumetric bottleneck that we use for these evaluations19.
We thus apply bilinear resampling to downsample the in-
put and upsample the output to the resolution used during
training. As this operation is differentiable, losses during
training are measured with respect to the target image at its
original resolution. We also report these losses used for the
benchmark at the original target image resolution to make
for a fair comparison to the other methods that we evalu-
ated.

The car dataset consists of 5,997 models used for train-
ing and 1,500 used for testing. Rendering 54 views per each
model 20 results in 323,838 training images and 81,000 test-
ing images. The chairs dataset consists of 558 training mod-
els and 140 testing models, resulting in 30,132 training im-
ages and 7,560 testing images.

Note that, while the training and testing images were ren-
dered at 20-degree intervals around the vertical axis, in our
supplementary video we provide examples of models ren-
dered at 10-degree intervals. This demonstrates that our
method is able to generalize to intermediate poses not seen
during training. In contrast, for their ShapeNet evaluations,
[32] uses one-hot vectors indicating the discrete azimuth
and elevation intervals at which the source images were ren-
dered, and the speciﬁed pose for the target image. It is thus
unclear how or whether their method would be able to gen-
eralize to intermediate poses not used for training.

Our NVS results for cars in the supplementary video also
demonstrate that our network is able to synthesize transpar-
ent features such as the glass in the car windows.

A4.1.2. Human Action Dataset

Each subject is rendered while performing 48 animation
sequences, using rigged human models (varying in gender,
ethnicity, size, age, and clothing) and animation sequences
obtained from Renderpeople [28]. For 4 frames selected at
regular intervals in each animation sequence, the subjects
are rendered at 12 viewpoints sampled at 30-degree inter-
vals around the vertical axis. This results in 428,544 im-
ages. We use 128 subjects for training and the remaining
58 for evaluation, resulting in a total of 294,912 training
images and 133,632 testing images.

While we use 30-degree increments for training on this
dataset, in our supplementary video we provide synthesis
results in which the subject is rendered at 15-degree inter-
vals. This further demonstrates our method’s generalization
capabilities.

18The ofﬁcial code release, with pre-trained models and datasets, can be

found at https://github.com/shaohua0116/Multiview2Novelview.

19Using a larger volumetric bottleneck results in substantially higher

memory usage and much longer training times

2018 azimuth angles sampled at 20-degree intervals and 3 elevations (0,

10 and 20 degrees).

A4.2. 3D Reconstruction

To measure our framework’s 3D reconstruction capabil-
ities and compare it to recent work, we use the dataset and
evaluation framework provided by [36]21.

of

for

The

dataset

images

rendered

training/testing/validation for

of
consists
chairs,
ShapeNet models from 3 object categories:
We use 2831/810/404 mod-
cars and aeroplanes.
els
aeroplane
dataset, 5247/1500/750 models for the car dataset and
4744/1356/678 models for the chair dataset. There are 10
images per each model, rendered with varying lighting
conditions and the viewpoint azimuth and elevation uni-
formly sampled at random intervals in the ranges [0, 360)
and [−20, 30], respectively.

the

While the images are rendered at a resolution of 224 ×
224, we bilinearly downsample them to 64 × 64 for our
network, which results in the 32×32×32 occupancy volume
that we use for evaluation. In contrast, we use images of size
160 × 160 and a 40 × 40 × 40 feature volume for our novel
view synthesis task. These 3D reconstruction results thus
demonstrate that our network is able to extract meaningful
structure from the input images even in the case of low input
resolution and a smaller volumetric bottleneck resolution.

A5. Segmentation Supervision Ablation Study

As discussed in the paper, we supervise our networks us-
ing a segmentation loss given the ground-truth foreground
segmentation masks for each image. While this is useful
for performing 3D reconstruction, to determine how crucial
this supervision is for our approach to novel view synthe-
sis we conducted an ablation study using a reduced version
of our model. The architecture and training procedure is as
described above, except that we use input images of a reso-
lution of 128 × 128 and a bottleneck resolution of 323. Ran-
dom noise was used as the background for each input image.
We found that our approach worked comparably well in re-
constructing the foreground of the target evaluation images
with and without this supervision.

Using the evaluation framework described in Sec. 4.2
for the chair dataset (using 4 input images for each target
image), with segmentation supervision we achieved an av-
erage SSIM of 0.921 and an L1 loss (computed only for the
foreground pixels of the target evaluation images) of 0.189.
Without segmentation supervision, we achieved an SSIM of
0.920 and an L1 loss of 0.182. This suggests that, while use-
ful for 3D reconstruction, this loss is not strictly necessary
for novel view synthesis, as when it is omitted the network
still learns to extract the features necessary to transform the
foreground image content to the target view.

21The ofﬁcial code release, with pre-trained models and tools for gener-
ating these datasets and evaluating the reconstruction results, can be found
at https://github.com/shubhtuls/drc.

14

parameters over time, we cause the cars seen in our supple-
mentary video to vary in length and width over the course
of the animation.

Vertical Twisting. We can also apply different rigid ro-
tations to separate regions of the encoded feature volume,
we can achieve the “twisting” effect seen in our results
(Fig. 6, row 3 in the main paper and in the supplemen-
tary video, 2:50-3:40). Given a user-speciﬁed point on the
vertical y-axis and a rotation value α, we apply a rigid ro-
tation around the y-axis to the feature volume of α degrees
for all cells above this point and −α degrees for all cells be-
low this point. Varying the α parameter over time produces
the twisting effect seen in the swivel chairs portrayed in our
results.

Volume Merging and Reﬂection. By combining the con-
tent of different regions of multiple encoded feature vol-
umes, we can decode images in which this content has been
merged in a corresponding fashion as seen in Fig. 1 of the
main paper (row 4, columns 4-6) and in the supplementary
video (4:14-4:40). In these examples, the top and bottom
halves of the feature volumes for 2 different individuals
have been combined to produce new subjects with an ap-
pearance corresponding to the upper half of the ﬁrst subject
and the lower half of the second. Note that while this ap-
pears to produce an effect similar to that of merging the
upper and lower regions of the rendered images, after per-
forming this merging once for the encoded bottlenecks for
each subject, we can rigidly transform the result to produce
novel views of the subject, as seen in the supplementary
video.

Similarly, we can alter and replicate regions of a single
bottleneck to produce novel content, as seen in the slicing
and stitching examples in the main paper (Fig. 6, rows 4-
5) and in the supplementary video (3:40-3:58). For these
examples, we discard the feature volume content contained
within one half of the xy-plane, and reﬂect the content of
the cells in the remaining half across this plane to ﬁll the
missing regions. As a result we can produce new shapes
in which the front of the depicted car has been replaced by
the back (Fig. 6, row 4), or vice-versa (Fig. 6, row 5). As
before, we can also apply rigid transformations to the result
to produce novel views of the image content. Interestingly,
these rendered results still plausibly produce the speciﬁed
manipulation of the encoded feature volume, though cars
with such unusual shapes were never seen during training.

A6. Creative Manipulation Implementation.

To perform spatial transformations to the encoded fea-
ture volume, we assign a 3-dimensional coordinate pi =
(x, y, z) to each cell i corresponding to its spatial position
in the volume, such that coordinate (0, 0, 0) corresponds to
the center of the bottleneck volume. During training, given
an input and output image pair {Ik, Il}, we apply a rigid
transformation corresponding to the relative pose of these
images to these coordinates to determine the spatial posi-
tion p(cid:48)
i in the transformed feature volume corresponding to
pi in the original feature volume. This provides us with the
ﬂow ﬁeld Fk→l used to sample the encoded feature volume
to produce the transformed feature volume that is passed to
the decoder (see Sec. 3.1).

During training, we only apply rigid transformations cor-
responding to changes in the azimuth (rotations around the
vertical axis, corresponding to the y-axis in our representa-
tion) and elevation (rotations around the horizontal x-axis)
of the viewpoint of the scene. However, in our results we
demonstrate that this training process allows for perform-
ing non-rigid transformations that enable a large variety of
plausible manipulations to the image content. Here we de-
scribe in more detail the method in which we perform these
transformations to obtain the results seen in our paper (Figs.
1, 6-7) and the supplementary video.

Vertical and Horizontal Stretching. Rather than directly
sampling from the region in the encoded volume based
on the rigid pose between the input and output views as
described, we can vary the sampling strategy to produce
stretching effects such as those seen in our results (Fig. 1,
row 4, Fig. 6, rows 1-2, and Fig. 7 in the main paper, and
in the supplementary video, 2:50-3:40, 3:58-4:14, and 5:40-
6:05).

For example, suppose that we have n regularly sampled
values corresponding to the y-positions of the cells in a slice
of the transformed feature volume. We can ﬁnd the cor-
responding values (y0, ..., yn−1) to use when sampling the
encoded feature volume as follows:

yi = a +

b − a
n − 1

× i

(9)

Thus we have y0 = a and yn−1 = b. By adjusting a and
b we can change the position and size of the region in the
input volume from which values are sampled, which will
alter how the transformed region is compressed or stretched
in the decoded image. We use this technique with multiple
slices with input positions that vary over time to produce the
vertically stretching chair animations in our results. (After
sampling the input volume as described, we apply a rigid
rotation to produce the novel viewpoints seen in these im-
ages.)

We can apply similar techniques to produce stretching
effects in the x- and z-dimensions. By varying the slice

15

