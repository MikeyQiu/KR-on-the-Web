6
1
0
2
 
p
e
S
 
4
2
 
 
]

V
C
.
s
c
[
 
 
3
v
7
4
8
1
0
.
6
0
6
1
:
v
i
X
r
a

Multimodal Compact Bilinear Pooling
for Visual Question Answering and Visual Grounding

Akira Fukui*1,2
Anna Rohrbach*1,3

Dong Huk Park*1
Trevor Darrell1 Marcus Rohrbach1

Daylen Yang*1

1UC Berkeley EECS, CA, United States
2Sony Corp., Tokyo, Japan
3Max Planck Institute for Informatics, Saarbr¨ucken, Germany

Abstract

Modeling textual or visual information with
vector representations trained from large lan-
guage or visual datasets has been successfully
explored in recent years. However, tasks such
as visual question answering require combin-
ing these vector representations with each other.
Approaches to multimodal pooling include
element-wise product or sum, as well as con-
catenation of the visual and textual represen-
tations. We hypothesize that these methods
are not as expressive as an outer product of
the visual and textual vectors. As the outer
product is typically infeasible due to its high
dimensionality, we instead propose utilizing
Multimodal Compact Bilinear pooling (MCB)
to efﬁciently and expressively combine multi-
modal features. We extensively evaluate MCB
on the visual question answering and ground-
ing tasks. We consistently show the beneﬁt of
MCB over ablations without MCB. For visual
question answering, we present an architec-
ture which uses MCB twice, once for predict-
ing attention over spatial features and again
to combine the attended representation with
the question representation. This model out-
performs the state-of-the-art on the Visual7W
dataset and the VQA challenge.

1

Introduction

Representation learning for text and images has been
extensively studied in recent years. Recurrent neural
networks (RNNs) are often used to represent sen-
tences or phrases (Sutskever et al., 2014; Kiros et al.,

* indicates equal contribution

Figure 1: Multimodal Compact Bilinear Pooling for
visual question answering.

2015), and convolutional neural networks (CNNs)
have shown to work best to represent images (Don-
ahue et al., 2013; He et al., 2015). For tasks such as
visual question answering (VQA) and visual ground-
ing, most approaches require joining the represen-
tation of both modalities. For combining the two
vector representations (multimodal pooling), current
approaches in VQA or grounding rely on concatenat-
ing vectors or applying element-wise sum or product.
While this generates a joint representation, it might
not be expressive enough to fully capture the complex
associations between the two different modalities.

In this paper, we propose to rely on Multimodal
Compact Bilinear pooling (MCB) to get a joint repre-
sentation. Bilinear pooling computes the outer prod-
uct between two vectors, which allows, in contrast
to element-wise product, a multiplicative interaction
between all elements of both vectors. Bilinear pool-
ing models (Tenenbaum and Freeman, 2000) have
recently been shown to be beneﬁcial for ﬁne-grained
classiﬁcation for vision only tasks (Lin et al., 2015).
However, given their high dimensionality (n2), bi-
linear pooling has so far not been widely used. In

this paper, we adopt the idea from Gao et al. (2016)
which shows how to efﬁciently compress bilinear
pooling for a single modality. In this work, we dis-
cuss and extensively evaluate the extension to the
multimodal case for text and visual modalities. As
shown in Figure 1, Multimodal Compact Bilinear
pooling (MCB) is approximated by randomly pro-
jecting the image and text representations to a higher
dimensional space (using Count Sketch (Charikar
et al., 2002)) and then convolving both vectors efﬁ-
ciently by using element-wise product in Fast Fourier
Transform (FFT) space. We use MCB to predict an-
swers for the VQA task and locations for the visual
grounding task. For open-ended question answering,
we present an architecture for VQA which uses MCB
twice, once to predict spatial attention and the second
time to predict the answer. For multiple-choice ques-
tion answering we introduce a third MCB to relate the
encoded answer to the question-image space. Addi-
tionally, we discuss the beneﬁt of attention maps and
additional training data for the VQA task. To sum-
marize, MCB is evaluated on two tasks, four datasets,
and with a diverse set of ablations and comparisons
to the state-of-the-art.

2 Related Work

Multimodal pooling. Current approaches to mul-
timodal pooling involve element-wise operations or
vector concatenation. In the visual question answer-
ing domain, a number of models have been proposed.
Simpler models such as iBOWIMG baseline (Zhou
et al., 2015) use concatenation and fully connected
layers to combine the image and question modali-
ties. Stacked Attention Networks (Yang et al., 2015)
and Spatial Memory Networks (Xu et al., 2015) use
LSTMs or extract soft-attention on the image fea-
tures, but ultimately use element-wise product or
element-wise sum to merge modalities. D-NMN (An-
dreas et al., 2016a) introduced REINFORCE to dy-
namically create a network and use element-wise
product to join attentions and element-wise sum pre-
dict answers. Dynamic Memory Networks (DMN)
(Xiong et al., 2016) pool the image and question
with element-wise product and sum, attending to part
of the image and question with an Episodic Mem-
ory Module (Kumar et al., 2016). DPPnet (Noh et
al., 2015) creates a Parameter Prediction Network

which learns to predict the parameters of the second
to last visual recognition layer dynamically from the
question. Similar to this work, DPPnet allows mul-
tiplicative interactions between the visual and ques-
tion encodings. Lu et al. (2016) recently proposed
a model that extracts multiple co-attentions on the
image and question and combines the co-attentions
in a hierarchical manner using element-wise sum,
concatenation, and fully connected layers.

For the visual grounding task, Rohrbach et al.
(2016) propose an approach where the language
phrase embedding is concatenated with the visual
features in order to predict the attention weights over
multiple bounding box proposals. Similarly, Hu et
al. (2016a) concatenate phrase embeddings with vi-
sual features at different spatial locations to obtain a
segmentation.

Bilinear pooling. Bilinear pooling has been ap-
plied to the ﬁne-grained visual recognition task. Lin
et al. (2015) use two CNNs to extract features from
an image and combine the resulting vectors using an
outer product, which is fully connected to an output
layer. Gao et al. (2016) address the space and time
complexity of bilinear features by viewing the bilin-
ear transformation as a polynomial kernel. Pham and
Pagh (2013) describe a method to approximate the
polynomial kernel using Count Sketches and convo-
lutions.

Joint multimodal embeddings.
In order to model
similarities between two modalities, many prior
works have learned joint multimodal spaces, or em-
beddings. Some of such embeddings are based
on Canonical Correlation Analysis (Hardoon et al.,
2004) e.g. (Gong et al., 2014; Klein et al., 2015;
Plummer et al., 2015), linear models with ranking
loss (Frome et al., 2013; Karpathy and Fei-Fei, 2015;
Socher et al., 2014; Weston et al., 2011) or non-linear
deep learning models (Kiros et al., 2014; Mao et al.,
2015; Ngiam et al., 2011). Our multimodal com-
pact bilinear pooling can be seen as a complementary
operation that allows us to capture different interac-
tions between two modalities more expressively than
e.g. concatenation. Consequently, many embedding
learning approaches could beneﬁt from incorporating
such interactions.

Algorithm 1 Multimodal Compact Bilinear
1: input: v1 ∈ Rn1 , v2 ∈ Rn2
2: output: Φ(v1, v2) ∈ Rd
3: procedure MCB(v1, v2, n1, n2, d)
4:
5:
6:
7:
8:

if hk, sk not initialized then
for i ← 1 . . . nk do

sample hk[i] from {1, . . . , d}
sample sk[i] from {−1, 1}

for k ← 1 . . . 2 do

9:

v(cid:48)
k = Ψ(vk, hk, sk, nk)

1) (cid:12) FFT(v(cid:48)

2))

Φ = FFT−1(FFT(v(cid:48)
return Φ

10:
11:
12: procedure Ψ(v, h, s, n)
y = [0, . . . , 0]
13:
for i ← 1 . . . n do
14:
15:

16:

return y

y[h[i]] = y[h[i]] + s[i] · v[i]

way. However, the high dimensional representation
(i.e. when n1 and n2 are large) leads to an infeasible
number of parameters to learn in W . For example,
we use n1 = n2 = 2048 and z ∈ R3000 for VQA.
W thus would have 12.5 billion parameters, which
leads to very high memory consumption and high
computation times.

We thus need a method that projects the outer prod-
uct to a lower dimensional space and also avoids
computing the outer product directly. As suggested
by Gao et al. (2016) for a single modality, we rely
on the Count Sketch projection function Ψ (Charikar
et al., 2002), which projects a vector v ∈ Rn to
y ∈ Rd. We initialize two vectors s ∈ {−1, 1}n and
h ∈ {1, ..., d}n: s contains either 1 or −1 for each
index, and h maps each index i in the input v to an
index j in the output y. Both s and h are initialized
randomly from a uniform distribution and remain
constant for future invocations of count sketch. y is
initialized as a zero vector. For every element v[i] its
destination index j = h[i] is looked up using h, and
s[i] · v[i] is added to y[j]. See lines 1-9 and 12-16 in
Algorithm 1.

This allows us to project the outer product to a
lower dimensional space, which reduces the number
of parameters in W . To avoid computing the outer
product explicitly, Pham and Pagh (2013) showed
that the count sketch of the outer product of two
vectors can be expressed as convolution of both count
sketches: Ψ(x ⊗ q, h, s) = Ψ(x, h, s) ∗ Ψ(q, h, s),

Figure 2: Multimodal Compact Bilinear Pooling
(MCB)

3 Multimodal Compact Bilinear Pooling
for Visual and Textual Embeddings

For the task of visual question answering (VQA) or
visual grounding, we have to predict the most likely
answer or location ˆa for a given image x and question
or phrase q. This can be formulated as

ˆa = argmax

p(a|x, q; θ)

(1)

a∈A

with parameters θ and the set of answers or loca-
tions A. For an image embedding x = Ξ(x) (i.e. a
CNN) and question embedding q = Ω(q) (i.e. an
LSTM), we are interested in getting a good joint rep-
resentation by pooling both representations. With a
multimodal pooling Φ(x, q) that encodes the relation-
ship between x and q well, it becomes easier to learn
a classiﬁer for Equation (1).

In this section, we ﬁrst discuss our multimodal
pooling Φ for combining representations from differ-
ent modalities into a single representation (Sec. 3.1)
and then detail our architectures for VQA (Sec. 3.2)
and visual grounding (Sec. 3.3), further explaining
how we predict ˆa with the given image representation
Ξ and text representation Ω.

3.1 Multimodal Compact Bilinear

Pooling (MCB)

Bilinear models (Tenenbaum and Freeman, 2000)
take the outer product of two vectors x ∈ Rn1 and
q ∈ Rn2 and learn a model W (here linear), i.e.
z = W [x ⊗ q], where ⊗ denotes the outer product
(xqT ) and [ ] denotes linearizing the matrix in a vec-
tor. As discussed in the introduction, bilinear pooling
is interesting because it allows all elements of both
vectors to interact with each other in a multiplicative

Figure 3: Our architecture for VQA: Multimodal Compact Bilinear (MCB) with Attention. Conv implies
convolutional layers and FC implies fully connected layers. For details see Sec. 3.2.

where ∗ is the convolution operator. Additionally, the
convolution theorem states that convolution in the
time domain is equivalent to element-wise product
in the frequency domain. The convolution x(cid:48) ∗ q(cid:48) can
be rewritten as FFT−1(FFT(x(cid:48)) (cid:12) FFT(q(cid:48))), where
(cid:12) refers to element-wise product. These ideas are
summarized in Figure 2 and formalized in Algorithm
1, which is based on the Tensor Sketch algorithm of
Pham and Pagh (2013). We invoke the algorithm with
v1 = x and v2 = q. We note that this easily extends
and remains efﬁcient for more than two multi-modal
inputs as the combination happens as element-wise
product.

3.2 Architectures for VQA

In VQA, the input to the model is an image and a
question, and the goal is to answer the question. Our
model extracts representations for the image and the
question, pools the vectors using MCB, and arrives
at the answer by treating the problem as a multi-class
classiﬁcation problem with 3,000 possible classes.

We extract image features using a 152-layer Resid-
ual Network (He et al., 2015) that is pretrained on
ImageNet data (Deng et al., 2009). Images are re-
sized to 448 × 448, and we use the output of the layer
(“pool5”) before the 1000-way classiﬁer. We then
perform L2 normalization on the 2048-D vector.

Input questions are ﬁrst tokenized into words, and
the words are one-hot encoded and passed through
a learned embedding layer. The tanh nonlinearity
is used after the embedding. The embedding layer
is followed by a 2-layer LSTM with 1024 units in
each layer. The outputs of each LSTM layer are
concatenated to form a 2048-D vector.

The two vectors are then passed through MCB.
The MCB is followed by an element-wise signed
square-root and L2 normalization. After MCB pool-
ing, a fully connected layer connects the resulting
16,000-D multimodal representation to the 3,000 top
answers.

Attention. To incorporate spatial information, we
use soft attention on our MCB pooling method. Ex-
plored by (Xu et al., 2015) for image captioning and
by (Xu and Saenko, 2016) and (Yang et al., 2015)
for VQA, the soft attention mechanism can be easily
integrated in our model.

For each spatial grid location in the visual rep-
resentation (i.e. last convolutional layer of ResNet
[res5c], last convolutional layer of VGG [conv5]),
we use MCB pooling to merge the slice of the visual
feature with the language representation. As depicted
in Figure 3, after the pooling we use two convolu-
tional layers to predict the attention weight for each
grid location. We apply softmax to produce a nor-
malized soft attention map. We then take a weighted
sum of the spatial vectors using the attention map to
create the attended visual representation. We also ex-
periment with generating multiple attention maps to
allow the model to make multiple “glimpses” which
are concatenated before being merged with the lan-
guage representation through another MCB pooling
for prediction. Predicting attention maps with MCB
pooling allows the model to effectively learn how to
attend to salient locations based on both the visual
and language representations.

Answer Encoding. For VQA with multiple
choices, we can additionally embed the answers. We

Figure 4: Our architecture for VQA: MCB with At-
tention and Answer Encoding

Figure 5: Our Architecture for Grounding with MCB
(Sec. 3.3)

base our approach on the proposed MCB with atten-
tion. As can be seen from Figure 4, to deal with
multiple variable-length answer choices, each choice
is encoded using a word embedding and LSTM lay-
ers whose weights are shared across the candidates.
In addition to using MCB with attention, we use an
additional MCB pooling to merge the encoded an-
swer choices with the multimodal representation of
the original pipeline. The resulting embedding is
projected to a classiﬁcation vector with a dimension
equal to the number of answers.

3.3 Architecture for Visual Grounding

We base our grounding approach on the fully-
supervised version of GroundeR (Rohrbach et al.,
2016). The overview of our model is shown in Fig-
ure 5. The input to the model is a query natural
language phrase and an image along with multiple
proposal bounding boxes. The goal is to predict a
bounding box which corresponds to the query phrase.
We replace the concatenation of the visual representa-
tion and the encoded phrase in GroundeR with MCB
to combine both modalities. In contrast to Rohrbach
et al. (2016), we include a linear embedding of the
visual representation and L2 normalization of both in-
put modalities, instead of batch normalization (Ioffe
and Szegedy, 2015), which we found to be beneﬁcial
when using MCB for the grounding task.

4 Evaluation on Visual Question

Answering

We evaluate the beneﬁt of MCB with a diverse set of
ablations on two visual question answering datasets.

4.1 Datasets

The Visual Question Answering (VQA) real-image
dataset (Antol et al., 2015) consists of approximately
200,000 MSCOCO images (Lin et al., 2014), with
3 questions per image and 10 answers per question.
There are 3 data splits: train (80K images), validation
(40K images), and test (80K images). Additionally,
there is a 25% subset of test named test-dev. Ac-
curacies for ablation experiments in this paper are
reported on the test-dev data split. We use the VQA
tool provided by Antol et al. (2015) for evaluation.
We conducted most of our experiments on the open-
ended real-image task. In Table 4, we also report our
multiple-choice real-image scores.

The Visual Genome dataset (Krishna et al.,
2016) uses 108,249 images from the intersection of
YFCC100M (Thomee et al., 2015) and MSCOCO.
For each image, an average of 17 question-answer
pairs are collected. There are 1.7 million QA pairs
of the 6W question types (what, where, when, who,
why, and how). Compared to the VQA dataset, Vi-
sual Genome represents a more balanced distribu-
tion of the 6W question types. Moreover, the aver-
age question and answer lengths for Visual Genome
are larger than the VQA dataset. To leverage the
Visual Genome dataset as additional training data,
we remove all the unnecessary words such as ”a”,
”the”, and ”it is” from the answers to decrease the
length of the answers and extract QA pairs whose
answers are single-worded. The extracted data is ﬁl-
tered again based on the answer vocabulary space
created from the VQA dataset, leaving us with addi-
tional 1M image-QA triplets.

The Visual7W dataset (Zhu et al., 2016) is a part
of the Visual Genome. Visual7W adds a 7th which
question category to accommodate visual answers,

Method

Accuracy

Compact Bilinear d Accuracy

Element-wise Sum
Concatenation
Concatenation + FC
Concatenation + FC + FC
Element-wise Product
Element-wise Product + FC
Element-wise Product + FC + FC
MCB (2048 × 2048 → 16K)

Full Bilinear (128 × 128 → 16K)
MCB (128 × 128 → 4K)

Element-wise Product with VGG-19
MCB (d = 16K) with VGG-19

Concatenation + FC with Attention
MCB (d = 16K) with Attention

56.50
57.49
58.40
57.10
58.57
56.44
57.88
59.83

58.46
58.69

55.97
57.05

58.36
62.50

Table 1: Comparison of multimodal pooling methods.
Models are trained on the VQA train split and tested
on test-dev.

1024
2048
4096
8192
16000
32000

58.38
58.80
59.42
59.69
59.83
59.71

Table 2: Accuracies for different values of d, the
dimension of the compact bilinear feature. Models
are trained on the VQA train split and tested on test-
dev. Details in Sec. 4.3.

Method

What Where When Who Why How Avg

Zhu et al.
Concat+Att.
MCB+Att.

51.5 57.0
47.8 56.9
60.3 70.4

75.0 59.5 55.5 49.8 54.3
74.1 62.3 52.7 51.2 52.8
79.5 69.2 58.2 51.1 62.2

Table 3: Multiple-choice QA tasks accuracy (%) on
Visual7W test set.

but we only evaluate the models on the Telling task
which involves 6W questions. The natural language
answers in Visual7W are in a multiple-choice format
and each question comes with four answer candidates,
with only one being the correct answer. Visual7W
is composed of 47,300 images from MSCOCO and
there are a total of 139,868 QA pairs.

4.2 Experimental Setup

We use the Adam solver with (cid:15) = 0.0007, β1 = 0.9,
β2 = 0.999. We use dropout after the LSTM layers
and in fully connected layers. For the experiments in
Table 1 and 2, we train on the VQA train split, vali-
date on the VQA validation split, and report results
on the VQA test-dev split. We use early stopping: if
the validation score does not improve for 50,000 iter-
ations, we stop training and evaluate the best iteration
on test-dev.

For the Visual7W task, we use the same hyperpa-
rameters and training settings as in the VQA exper-
iments. We use the splits from (Zhu et al., 2016) to
train, validate, and test our models. We also compute
accuracies on this data using their evaluation code.

For VQA multiple choice, we train the open-ended
models and take the argmax over the multiple choice

answers at test time. For Visual7W, we use the an-
swer encoding as described in Sec. 3.2.

4.3 Ablation Results

We compare the performance of non-bilinear and
bilinear pooling methods in Table 1. We see that
MCB pooling outperforms all non-bilinear pooling
methods, such as eltwise sum, concatenation, and
eltwise product.

One could argue that the compact bilinear method
simply has more parameters than the non-bilinear
pooling methods, which contributes to its perfor-
mance. We compensated for this by stacking fully
connected layers (with 4096 units per layer, ReLU
activation, and dropout) after the non-bilinear pool-
ing methods to increase their number of parameters.
However, even with similar parameter budgets, non-
bilinear methods could not achieve the same accuracy
as the MCB method. For example, the “Concatena-
tion + FC + FC” pooling method has approximately
40962 + 40962 + 4096 × 3000 ≈ 46 million pa-
rameters, which matches the 48 million parameters
available in MCB with d = 16000. However, the per-
formance of the “Concatenation + FC + FC” method
is only 57.10% compared to MCB’s 59.83%.

Section 2 in Table 1 also shows that compact bi-

Test-dev

Test-standard

Open Ended

MC

Open Ended

Y/N No. Other All

All Y/N No. Other All

MCB
MCB + Genome
MCB + Att.
MCB + Att. + GloVe
MCB + Att. + Genome
MCB + Att. + GloVe + Genome
Ensemble of 7 Att. models

Naver Labs (challenge 2nd)
HieCoAtt (Lu et al., 2016)
DMN+ (Xiong et al., 2016)
FDA (Ilievski et al., 2016)
D-NMN (Andreas et al., 2016a)
AMA (Wu et al., 2016)
SAN (Yang et al., 2015)
NMN (Andreas et al., 2016b)
AYN (Malinowski et al., 2016)
SMem (Xu and Saenko, 2016)
VQA team (Antol et al., 2015)
DPPnet (Noh et al., 2015)
iBOWIMG (Zhou et al., 2015)

81.2
81.7
82.2
82.5
81.7
82.3
83.4

83.5
79.7
80.5
81.1
81.1
81.0
79.3
81.2
78.4
80.9
80.5
80.7
76.5

35.1
36.6
37.7
37.6
38.2
37.2
39.8

39.8
38.7
36.8
36.2
38.6
38.4
36.6
38.0
36.4
37.3
36.8
37.2
35.0

49.3
51.5
54.8
55.6
57.0
57.4
58.5

54.8
51.7
48.3
45.8
45.5
45.2
46.1
44.0
46.3
43.1
43.1
41.7
42.6

60.8
62.3
64.2
64.7
65.1
65.4
66.7

64.9
61.8
60.3
59.2
59.4
59.2
58.7
58.6
58.4
58.0
57.8
57.2
55.7

65.4
66.4
68.6
69.1
69.5
69.9
70.2

69.4
65.8
-
-
-
-
-
-
-
-
62.7
-
-

-
-
-
-
-
-
83.2

83.3
-
-
-
-
81.1
-
81.2
78.2
80.9
80.6
80.3
76.8

-
-
-
-
-
-
39.5

38.7
-
-
-
-
37.1
-
37.7
36.3
37.5
36.5
36.9
35.0

-
-
-
-
-
-
58.0

54.6
-
-
-
-
45.8
-
44.0
46.3
43.5
43.7
42.2
42.6

-
-
-
-
-
-
66.5

64.8
62.1
60.4
59.5
59.4
59.4
58.9
58.7
58.4
58.2
58.2
57.4
55.9

MC

All

-
-
-
-
-
-
70.1

69.3
66.1
-
-
-
-
-
-
-
-
63.1
-
62.0

Table 4: Open-ended and multiple-choice (MC) results on VQA test set (trained on train+val set) compared
with state-of-the-art: accuracy in %. See Sec. 4.4.

linear pooling has no impact on accuracy compared
to full bilinear pooling. Section 3 in Table 1 demon-
strates that the MCB brings improvements regardless
of the image CNN used. We primarily use ResNet-
152 in this paper, but MCB also improves perfor-
mance if VGG-19 is used. Section 4 in Table 1 shows
that our soft attention model works best with MCB
pooling. In fact, attending to the Concatenation + FC
layer has the same performance as not using attention
at all, while attending to the MCB layer improves
performance by 2.67 points.

Table 2 compares different values of d, the output
dimensionality of the multimodal compact bilinear
feature. Approximating the bilinear feature with a
16,000-D vector yields the highest accuracy.

erated attention maps reveals that an ensembling or
smoothing effect occurs when using multiple maps.
Table 3 presents results for the Visual7W multiple-
choice QA task. The MCB with attention model out-
performs the previous state-of-the-art by 7.9 points
overall and performs better in almost every category.

4.4 Comparison to State-of-the-Art

Table 4 compares our approach with the state-of-the-
art on VQA test set. Our best single model uses
MCB pooling with two attention maps. Additionally,
we augment our training data with images and QA
pairs from the Visual Genome dataset. We also con-
catenate the learned word embedding with pretrained
GloVe vectors (Pennington et al., 2014).

We also evaluated models with multiple atten-
tion maps or channels. One attenion map achieves
64.67%, two 65.08% and four 64.24% accuracy
(trained on train+val). Visual inspection of the gen-

Each model in our ensemble of 7 models uses
MCB with attention. Some of the models were
trained with data from Visual Genome, and some
were trained with two attention maps. This ensem-

Method

Accuracy, %

Plummer et al. (2015)
Hu et al. (2016b)
Plummer et al. (2016)1
Wang et al. (2016)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

27.42
27.80
43.84
43.89
47.81

46.50
47.41
47.86
48.69

Table 5: Grounding accuracy on Flickr30k Entities
dataset.

Method

Accuracy, %

Hu et al. (2016b)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

17.93
26.93

25.48
27.80
27.98
28.91

Table 6: Grounding accuracy on ReferItGame
dataset.

ble is 1.8 points above the next best approach on the
VQA open-ended task and 0.8 points above the next
best approach on the multiple-choice task (on Test-
dev). Even without ensembles, our “MCB + Genome
+ Att. + GloVe” model still outperforms the next
best result by 0.5 points, with an accuracy of 65.4%
versus 64.9% on the open-ended task (on Test-dev).

5 Evaluation on Visual Grounding

5.1 Datasets

We evaluate our visual grounding approach on two
datasets. The ﬁrst is Flickr30k Entities (Plummer
et al., 2015) which consists of 31K images from
Flickr30k dataset (Hodosh et al., 2014) with 244K
phrases localized with bounding boxes. We follow
the experimental setup of Rohrbach et al. (2016),
e.g. we use the same Selective Search (Uijlings et

1Plummer et al. (2016) achieve higher accuracy of 50.89%
when taking into account box size and color. We believe our
approach would also beneﬁt from such additional features.

al., 2013) object proposals and the Fast R-CNN (Gir-
shick, 2015) ﬁne-tuned VGG16 features (Simonyan
and Zisserman, 2014). The second dataset is Refer-
ItGame (Kazemzadeh et al., 2014), which contains
20K images from IAPR TC-12 dataset (Grubinger et
al., 2006) with segmented regions from SAIAPR-12
dataset (Escalante et al., 2010) and 120K associated
natural language referring expressions. For Refer-
ItGame we follow the experimental setup of Hu et
al. (2016b) and rely on their ground-truth bound-
ing boxes extracted around the segmentation masks.
We use the Edge Box (Zitnick and Doll´ar, 2014) ob-
ject proposals and visual features (VGG16 combined
with the spatial features, which encode bounding box
relative position) from Hu et al. (2016b).

5.2 Experimental Setup

In all experiments we use Adam solver (Kingma and
Ba, 2014) with learning rate (cid:15) = 0.0001. The embed-
ding size is 500 both for visual and language embed-
dings. We use d = 2048 in the MCB pooling, which
we found to work best for the visual grounding task.
The accuracy is measured as percentage of query
phrases which have been localized correctly. The
phrase is localized correctly if the predicted bound-
ing box overlaps with the ground-truth bounding box
by more than 50% intersection over union (IOU).

5.3 Results

Tables 5 and 6 summarize our results in the visual
grounding task. We present multiple ablations of our
proposed architecture. First, we replace the MCB
with simple concatenation of the embedded visual
feature and the embedded phrase, resulting in 46.5%
on the Flickr30k Entities and 25.48% on the Refer-
ItGame datasets. The results can be improved by
replacing the concatenation with the element-wise
product of both embedded features (47.41% and
27.80%). We can further slightly increase the per-
formance by introducing additional 2048-D convo-
lution after the element-wise product (47.86% and
27.98%). However, even with fewer parameters, our
MCB pooling signiﬁcantly improves over this base-
line on both datasets, reaching state-of-the-art accu-
racy of 48.69% on Flickr30k Entities and 28.91%
on ReferItGame dataset. Figure 6 (bottom) shows
examples of improved phrase localization.

What vegetable is the dog
chewing on?
MCB: carrot
GT: carrot

What kind of dog is this?
MCB: husky
GT: husky

What kind of ﬂooring does
the room have?
MCB: carpet
GT: carpet

What color is the trafﬁc
light?
MCB: green
GT: green
Eltwise Product + Conv MCB

Is this an urban area?
MCB: yes
GT: yes

Where are the buildings?
MCB: in background
GT: on left

Eltwise Product + Conv

MCB

A tattooed woman with a green dress and yellow back-
pack holding a water bottle is walking across the street.

A dog distracts his owner from working at her computer.

Figure 6: Top: predicted answers and attention maps from MCB model on VQA images. Bottom: predicted
grounding from MCB model (left) and Eltwise Product + Conv model (right) on Flickr30k Entities images.

6 Conclusion

We propose the Multimodal Compact Bilinear Pool-
ing (MCB) to combine visual and text representa-
tions. For visual question answering, our architecture
with attention and multiple MCBs gives signiﬁcant
improvements on two VQA datasets compared to
In the visual grounding task, in-
state-of-the-art.
troducing MCB pooling leads to improved phrase
localization accuracy, indicating better interaction
between query phrase representations and visual rep-

resentations of proposal bounding boxes. The code
to replicate our experiments is available at https:
//github.com/akirafukui/vqa-mcb.

Acknowledgments

We would like to thank Yang Gao and Oscar Beijbom
for helpful discussions about Compact Bilinear Pool-
ing. This work was supported by DARPA, AFRL,
DoD MURI award N000141110688, NSF awards
IIS-1427425 and IIS-1212798, and the Berkeley Ar-
tiﬁcial Intelligence Research (BAIR) Lab.

References

[Andreas et al.2016a] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016a. Learning to
compose neural networks for question answering. In
Proceedings of the Conference of the North American
Chapter of the Association for Computational Linguis-
tics (NAACL).

[Andreas et al.2016b] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016b. Neural module
networks. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Antol et al.2015] Stanislaw Antol, Aishwarya Agrawal,
Jiasen Lu, Margaret Mitchell, Dhruv Batra, C Lawrence
Zitnick, and Devi Parikh. 2015. Vqa: Visual question
answering. In Proceedings of the IEEE International
Conference on Computer Vision (ICCV).

[Charikar et al.2002] Moses Charikar, Kevin Chen, and
Martin Farach-Colton. 2002. Finding frequent items
in data streams. In Automata, languages and program-
ming, pages 693–703. Springer.

[Deng et al.2009] J. Deng, W. Dong, R. Socher, L.-J. Li,
K. Li, and L. Fei-Fei. 2009.
ImageNet: A Large-
Scale Hierarchical Image Database. In Proceedings of
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Donahue et al.2013] Jeff Donahue, Yangqing Jia, Oriol
Vinyals, Judy Hoffman, Ning Zhang, Eric Tzeng, and
Trevor Darrell. 2013. Decaf: A deep convolutional
In
activation feature for generic visual recognition.
Proceedings of the International Conference on Ma-
chine Learning (ICML).

[Escalante et al.2010] Hugo Jair Escalante, Carlos A
Hern´andez, Jesus A Gonzalez, Aurelio L´opez-L´opez,
Manuel Montes, Eduardo F Morales, L Enrique Sucar,
Luis Villase˜nor, and Michael Grubinger. 2010. The
segmented and annotated iapr tc-12 benchmark. Com-
puter Vision and Image Understanding, 114(4):419–
428.

[Frome et al.2013] Andrea Frome, Greg S Corrado, Jon
Shlens, Samy Bengio, Jeff Dean, Tomas Mikolov, et al.
2013. Devise: A deep visual-semantic embedding
model. In Advances in Neural Information Process-
ing Systems (NIPS).

[Gao et al.2016] Yang Gao, Oscar Beijbom, Ning Zhang,
and Trevor Darrell. 2016. Compact bilinear pooling.
In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR).

[Girshick2015] Ross Girshick. 2015. Fast R-CNN. In
Proceedings of the IEEE International Conference on
Computer Vision (ICCV).

[Gong et al.2014] Yunchao Gong, Liwei Wang, Micah Ho-
dosh, Julia Hockenmaier, and Svetlana Lazebnik. 2014.
Improving image-sentence embeddings using large

weakly annotated photo collections. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Grubinger et al.2006] Michael Grubinger, Paul Clough,
Henning M¨uller, and Thomas Deselaers. 2006. The
iapr tc-12 benchmark: A new evaluation resource for
visual information systems. In International Workshop
OntoImage, volume 5, page 10.

[Hardoon et al.2004] David R Hardoon, Sandor Szedmak,
and John Shawe-Taylor. 2004. Canonical correlation
analysis: An overview with application to learning
methods. Neural computation, 16(12):2639–2664.
[He et al.2015] Kaiming He, Xiangyu Zhang, Shaoqing
Ren, and Jian Sun. 2015. Deep residual learning for
image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition
(CVPR).

[Hodosh et al.2014] Peter Hodosh, Alice Young, Micah
Lai, and Julia Hockenmaier. 2014. From image de-
scriptions to visual denotations: New similarity met-
rics for semantic inference over event descriptions. In
Transactions of the Association for Computational Lin-
guistics (TACL).

[Hu et al.2016a] Ronghang Hu, Marcus Rohrbach, and
Trevor Darrell. 2016a. Segmentation from natural
language expressions. In Proceedings of the European
Conference on Computer Vision (ECCV).

[Hu et al.2016b] Ronghang Hu, Huazhe Xu, Marcus
Rohrbach, Jiashi Feng, Kate Saenko, and Trevor Dar-
rell. 2016b. Natural language object retrieval. In Pro-
ceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR).

[Ilievski et al.2016] Ilija Ilievski, Shuicheng Yan, and Ji-
ashi Feng. 2016. A focused dynamic attention model
for visual question answering. arXiv:1604.01485.

[Ioffe and Szegedy2015] Sergey Ioffe

and Christian
Szegedy. 2015. Batch normalization: Accelerating
deep network training by reducing internal covariate
shift. In Proceedings of the International Conference
on Machine Learning (ICML).

[Karpathy and Fei-Fei2015] Andrej Karpathy and Li Fei-
Fei. 2015. Deep visual-semantic alignments for gener-
ating image descriptions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Kazemzadeh et al.2014] Sahar Kazemzadeh, Vicente Or-
donez, Mark Matten, and Tamara L. Berg.
2014.
Referit game: Referring to objects in photographs of
natural scenes. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

[Kingma and Ba2014] Diederik Kingma and Jimmy Ba.
2014. Adam: A method for stochastic optimization. In
Proceedings of the International Conference on Learn-
ing Representations (ICLR).

[Kiros et al.2014] Ryan Kiros, Ruslan Salakhutdinov, and
Rich Zemel. 2014. Multimodal neural language mod-
els. In Proceedings of the International Conference on
Machine Learning (ICML), pages 595–603.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler. 2015. Skip-thought
vectors. In Advances in Neural Information Processing
Systems (NIPS).

[Klein et al.2015] Benjamin Klein, Guy Lev, Gil Sadeh,
and Lior Wolf. 2015. Fisher vectors derived from
hybrid gaussian-laplacian mixture models for image
annotation. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Krishna et al.2016] Ranjay Krishna, Yuke Zhu, Oliver
Groth, Justin Johnson, Kenji Hata, Joshua Kravitz,
Stephanie Chen, Yannis Kalantidis, Li-Jia Li, David A
Shamma, Michael Bernstein, and Li Fei-Fei. 2016.
Visual genome:
Connecting language and vi-
sion using crowdsourced dense image annotations.
arXiv:1602.07332.

[Kumar et al.2016] Ankit Kumar, Ozan Irsoy, Jonathan Su,
James Bradbury, Robert English, Brian Pierce, Peter
Ondruska, Ishaan Gulrajani, and Richard Socher. 2016.
Ask me anything: Dynamic memory networks for natu-
ral language processing. In Proceedings of the Interna-
tional Conference on Machine Learning (ICML).
[Lin et al.2014] Tsung-Yi Lin, Michael Maire, Serge Be-
longie, James Hays, Pietro Perona, Deva Ramanan,
Piotr Doll´ar, and C Lawrence Zitnick. 2014. Microsoft
coco: Common objects in context. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Lin et al.2015] Tsung-Yu Lin, Aruni RoyChowdhury, and
Subhransu Maji. 2015. Bilinear cnn models for ﬁne-
grained visual recognition. In Proceedings of the IEEE
International Conference on Computer Vision (ICCV).
[Lu et al.2016] Jiasen Lu, Jianwei Yang, Dhruv Batra, and
Devi Parikh. 2016. Hierarchical Co-Attention for Vi-
sual Question Answering. In Advances in Neural Infor-
mation Processing Systems (NIPS).

[Malinowski et al.2016] Mateusz Malinowski, Marcus
Rohrbach, and Mario Fritz. 2016. Ask Your Neu-
rons: A Deep Learning Approach to Visual Question
Answering. arXiv: 1605.02697.

[Mao et al.2015] Junhua Mao, Wei Xu, Yi Yang, Jiang
Wang, Zhiheng Huang, and Alan Yuille. 2015. Deep
captioning with multimodal recurrent neural networks
(m-rnn). In Proceedings of the International Confer-
ence on Learning Representations (ICLR).

[Ngiam et al.2011] Jiquan Ngiam, Aditya Khosla, Mingyu
Kim, Juhan Nam, Honglak Lee, and Andrew Y Ng.
2011. Multimodal deep learning. In Proceedings of
the International Conference on Machine Learning
(ICML), pages 689–696.

[Noh et al.2015] Hyeonwoo Noh, Paul Hongsuck Seo, and
Bohyung Han. 2015. Image question answering using
convolutional neural network with dynamic parameter
prediction. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher D. Manning. 2014. Glove:
Global vectors for word representation. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP).

[Pham and Pagh2013] Ninh Pham and Rasmus Pagh.
2013. Fast and scalable polynomial kernels via ex-
plicit feature maps. In Proceedings of the 19th ACM
SIGKDD International Conference on Knowledge Dis-
covery and Data Mining, KDD ’13, pages 239–247,
New York, NY, USA. ACM.

[Plummer et al.2015] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2015. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. In Proceedings of the IEEE Interna-
tional Conference on Computer Vision (ICCV).

[Plummer et al.2016] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2016. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. arXiv:1505.04870v3.

[Rohrbach et al.2016] Anna Rohrbach, Marcus Rohrbach,
Ronghang Hu, Trevor Darrell, and Bernt Schiele. 2016.
Grounding of textual phrases in images by reconstruc-
tion. In Proceedings of the European Conference on
Computer Vision (ECCV).

[Simonyan and Zisserman2014] Karen Simonyan and An-
drew Zisserman. 2014. Very deep convolutional net-
works for large-scale image recognition. In Proceed-
ings of the International Conference on Learning Rep-
resentations (ICLR).

[Socher et al.2014] Richard Socher, Andrej Karpathy,
Quoc V Le, Christopher D Manning, and Andrew Y Ng.
2014. Grounded compositional semantics for ﬁnding
and describing images with sentences. Transactions of
the Association for Computational Linguistics, 2:207–
218.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals, and
Quoc V. V Le. 2014. Sequence to sequence learning
with neural networks. In Advances in Neural Informa-
tion Processing Systems (NIPS).

[Tenenbaum and Freeman2000] Joshua B Tenenbaum and
William T Freeman. 2000. Separating style and content
with bilinear models. Neural computation, 12(6):1247–
1283.

[Thomee et al.2015] Bart Thomee, David A. Shamma,
Gerald Friedland, Benjamin Elizalde, Karl Ni, Dou-
glas Poland, Damian Borth, and Li-Jia Li. 2015. The

new data and new challenges in multimedia research.
CoRR, abs/1503.01817.

ference on Computer Vision (ECCV), pages 391–405.
Springer.

[Uijlings et al.2013] Jasper RR Uijlings, Koen EA van de
Sande, Theo Gevers, and Arnold WM Smeulders. 2013.
Selective search for object recognition. International
Journal of Computer Vision (IJCV), 104(2).

[Wang et al.2016] Liwei Wang, Yin Li, and Svetlana
Lazebnik. 2016. Learning deep structure-preserving
image-text embeddings. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Weston et al.2011] Jason Weston, Samy Bengio, and
Nicolas Usunier. 2011. Wsabie: Scaling up to large
vocabulary image annotation. In Proceedings of the In-
ternational Joint Conference on Artiﬁcial Intelligence
(IJCAI).

[Wu et al.2016] Qi Wu, Peng Wang, Chunhua Shen, An-
ton van den Hengel, and Anthony Dick. 2016. Ask
Me Anything: Free-form Visual Question Answering
Based on Knowledge from External Sources. In Proc.
IEEE Conf. Computer Vision Pattern Recognition.
[Xiong et al.2016] Caiming Xiong, Stephen Merity, and
Richard Socher. 2016. Dynamic memory networks for
visual and textual question answering. In Proceedings
of the International Conference on Machine Learning
(ICML).

[Xu and Saenko2016] Huijuan Xu and Kate Saenko. 2016.
Ask, attend and answer: Exploring question-guided spa-
tial attention for visual question answering. In Proceed-
ings of the European Conference on Computer Vision
(ECCV).

[Xu et al.2015] Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron
Courville, Ruslan Salakhutdinov, Richard Zemel, and
Yoshua Bengio. 2015. Show, attend and tell: Neural
image caption generation with visual attention. Pro-
ceedings of the International Conference on Machine
Learning (ICML).

[Yang et al.2015] Zichao Yang, Xiaodong He, Jianfeng
Gao, Li Deng, and Alex Smola.
2015. Stacked
attention networks for image question answering.
arXiv:1511.02274.

[Zhou et al.2015] Bolei Zhou, Yuandong Tian, Sainba-
yar Sukhbaatar, Arthur Szlam, and Rob Fergus.
2015. Simple baseline for visual question answering.
arXiv:1512.02167.

[Zhu et al.2016] Yuke Zhu, Oliver Groth, Michael Bern-
stein, and Li Fei-Fei. 2016. Visual7W: Grounded
In Proceedings of
Question Answering in Images.
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Zitnick and Doll´ar2014] C Lawrence Zitnick and Piotr
Doll´ar. 2014. Edge boxes: Locating object propos-
als from edges. In Proceedings of the European Con-

6
1
0
2
 
p
e
S
 
4
2
 
 
]

V
C
.
s
c
[
 
 
3
v
7
4
8
1
0
.
6
0
6
1
:
v
i
X
r
a

Multimodal Compact Bilinear Pooling
for Visual Question Answering and Visual Grounding

Akira Fukui*1,2
Anna Rohrbach*1,3

Dong Huk Park*1
Trevor Darrell1 Marcus Rohrbach1

Daylen Yang*1

1UC Berkeley EECS, CA, United States
2Sony Corp., Tokyo, Japan
3Max Planck Institute for Informatics, Saarbr¨ucken, Germany

Abstract

Modeling textual or visual information with
vector representations trained from large lan-
guage or visual datasets has been successfully
explored in recent years. However, tasks such
as visual question answering require combin-
ing these vector representations with each other.
Approaches to multimodal pooling include
element-wise product or sum, as well as con-
catenation of the visual and textual represen-
tations. We hypothesize that these methods
are not as expressive as an outer product of
the visual and textual vectors. As the outer
product is typically infeasible due to its high
dimensionality, we instead propose utilizing
Multimodal Compact Bilinear pooling (MCB)
to efﬁciently and expressively combine multi-
modal features. We extensively evaluate MCB
on the visual question answering and ground-
ing tasks. We consistently show the beneﬁt of
MCB over ablations without MCB. For visual
question answering, we present an architec-
ture which uses MCB twice, once for predict-
ing attention over spatial features and again
to combine the attended representation with
the question representation. This model out-
performs the state-of-the-art on the Visual7W
dataset and the VQA challenge.

1

Introduction

Representation learning for text and images has been
extensively studied in recent years. Recurrent neural
networks (RNNs) are often used to represent sen-
tences or phrases (Sutskever et al., 2014; Kiros et al.,

* indicates equal contribution

Figure 1: Multimodal Compact Bilinear Pooling for
visual question answering.

2015), and convolutional neural networks (CNNs)
have shown to work best to represent images (Don-
ahue et al., 2013; He et al., 2015). For tasks such as
visual question answering (VQA) and visual ground-
ing, most approaches require joining the represen-
tation of both modalities. For combining the two
vector representations (multimodal pooling), current
approaches in VQA or grounding rely on concatenat-
ing vectors or applying element-wise sum or product.
While this generates a joint representation, it might
not be expressive enough to fully capture the complex
associations between the two different modalities.

In this paper, we propose to rely on Multimodal
Compact Bilinear pooling (MCB) to get a joint repre-
sentation. Bilinear pooling computes the outer prod-
uct between two vectors, which allows, in contrast
to element-wise product, a multiplicative interaction
between all elements of both vectors. Bilinear pool-
ing models (Tenenbaum and Freeman, 2000) have
recently been shown to be beneﬁcial for ﬁne-grained
classiﬁcation for vision only tasks (Lin et al., 2015).
However, given their high dimensionality (n2), bi-
linear pooling has so far not been widely used. In

this paper, we adopt the idea from Gao et al. (2016)
which shows how to efﬁciently compress bilinear
pooling for a single modality. In this work, we dis-
cuss and extensively evaluate the extension to the
multimodal case for text and visual modalities. As
shown in Figure 1, Multimodal Compact Bilinear
pooling (MCB) is approximated by randomly pro-
jecting the image and text representations to a higher
dimensional space (using Count Sketch (Charikar
et al., 2002)) and then convolving both vectors efﬁ-
ciently by using element-wise product in Fast Fourier
Transform (FFT) space. We use MCB to predict an-
swers for the VQA task and locations for the visual
grounding task. For open-ended question answering,
we present an architecture for VQA which uses MCB
twice, once to predict spatial attention and the second
time to predict the answer. For multiple-choice ques-
tion answering we introduce a third MCB to relate the
encoded answer to the question-image space. Addi-
tionally, we discuss the beneﬁt of attention maps and
additional training data for the VQA task. To sum-
marize, MCB is evaluated on two tasks, four datasets,
and with a diverse set of ablations and comparisons
to the state-of-the-art.

2 Related Work

Multimodal pooling. Current approaches to mul-
timodal pooling involve element-wise operations or
vector concatenation. In the visual question answer-
ing domain, a number of models have been proposed.
Simpler models such as iBOWIMG baseline (Zhou
et al., 2015) use concatenation and fully connected
layers to combine the image and question modali-
ties. Stacked Attention Networks (Yang et al., 2015)
and Spatial Memory Networks (Xu et al., 2015) use
LSTMs or extract soft-attention on the image fea-
tures, but ultimately use element-wise product or
element-wise sum to merge modalities. D-NMN (An-
dreas et al., 2016a) introduced REINFORCE to dy-
namically create a network and use element-wise
product to join attentions and element-wise sum pre-
dict answers. Dynamic Memory Networks (DMN)
(Xiong et al., 2016) pool the image and question
with element-wise product and sum, attending to part
of the image and question with an Episodic Mem-
ory Module (Kumar et al., 2016). DPPnet (Noh et
al., 2015) creates a Parameter Prediction Network

which learns to predict the parameters of the second
to last visual recognition layer dynamically from the
question. Similar to this work, DPPnet allows mul-
tiplicative interactions between the visual and ques-
tion encodings. Lu et al. (2016) recently proposed
a model that extracts multiple co-attentions on the
image and question and combines the co-attentions
in a hierarchical manner using element-wise sum,
concatenation, and fully connected layers.

For the visual grounding task, Rohrbach et al.
(2016) propose an approach where the language
phrase embedding is concatenated with the visual
features in order to predict the attention weights over
multiple bounding box proposals. Similarly, Hu et
al. (2016a) concatenate phrase embeddings with vi-
sual features at different spatial locations to obtain a
segmentation.

Bilinear pooling. Bilinear pooling has been ap-
plied to the ﬁne-grained visual recognition task. Lin
et al. (2015) use two CNNs to extract features from
an image and combine the resulting vectors using an
outer product, which is fully connected to an output
layer. Gao et al. (2016) address the space and time
complexity of bilinear features by viewing the bilin-
ear transformation as a polynomial kernel. Pham and
Pagh (2013) describe a method to approximate the
polynomial kernel using Count Sketches and convo-
lutions.

Joint multimodal embeddings.
In order to model
similarities between two modalities, many prior
works have learned joint multimodal spaces, or em-
beddings. Some of such embeddings are based
on Canonical Correlation Analysis (Hardoon et al.,
2004) e.g. (Gong et al., 2014; Klein et al., 2015;
Plummer et al., 2015), linear models with ranking
loss (Frome et al., 2013; Karpathy and Fei-Fei, 2015;
Socher et al., 2014; Weston et al., 2011) or non-linear
deep learning models (Kiros et al., 2014; Mao et al.,
2015; Ngiam et al., 2011). Our multimodal com-
pact bilinear pooling can be seen as a complementary
operation that allows us to capture different interac-
tions between two modalities more expressively than
e.g. concatenation. Consequently, many embedding
learning approaches could beneﬁt from incorporating
such interactions.

Algorithm 1 Multimodal Compact Bilinear
1: input: v1 ∈ Rn1 , v2 ∈ Rn2
2: output: Φ(v1, v2) ∈ Rd
3: procedure MCB(v1, v2, n1, n2, d)
4:
5:
6:
7:
8:

if hk, sk not initialized then
for i ← 1 . . . nk do

sample hk[i] from {1, . . . , d}
sample sk[i] from {−1, 1}

for k ← 1 . . . 2 do

9:

v(cid:48)
k = Ψ(vk, hk, sk, nk)

1) (cid:12) FFT(v(cid:48)

2))

Φ = FFT−1(FFT(v(cid:48)
return Φ

10:
11:
12: procedure Ψ(v, h, s, n)
y = [0, . . . , 0]
13:
for i ← 1 . . . n do
14:
15:

16:

return y

y[h[i]] = y[h[i]] + s[i] · v[i]

way. However, the high dimensional representation
(i.e. when n1 and n2 are large) leads to an infeasible
number of parameters to learn in W . For example,
we use n1 = n2 = 2048 and z ∈ R3000 for VQA.
W thus would have 12.5 billion parameters, which
leads to very high memory consumption and high
computation times.

We thus need a method that projects the outer prod-
uct to a lower dimensional space and also avoids
computing the outer product directly. As suggested
by Gao et al. (2016) for a single modality, we rely
on the Count Sketch projection function Ψ (Charikar
et al., 2002), which projects a vector v ∈ Rn to
y ∈ Rd. We initialize two vectors s ∈ {−1, 1}n and
h ∈ {1, ..., d}n: s contains either 1 or −1 for each
index, and h maps each index i in the input v to an
index j in the output y. Both s and h are initialized
randomly from a uniform distribution and remain
constant for future invocations of count sketch. y is
initialized as a zero vector. For every element v[i] its
destination index j = h[i] is looked up using h, and
s[i] · v[i] is added to y[j]. See lines 1-9 and 12-16 in
Algorithm 1.

This allows us to project the outer product to a
lower dimensional space, which reduces the number
of parameters in W . To avoid computing the outer
product explicitly, Pham and Pagh (2013) showed
that the count sketch of the outer product of two
vectors can be expressed as convolution of both count
sketches: Ψ(x ⊗ q, h, s) = Ψ(x, h, s) ∗ Ψ(q, h, s),

Figure 2: Multimodal Compact Bilinear Pooling
(MCB)

3 Multimodal Compact Bilinear Pooling
for Visual and Textual Embeddings

For the task of visual question answering (VQA) or
visual grounding, we have to predict the most likely
answer or location ˆa for a given image x and question
or phrase q. This can be formulated as

ˆa = argmax

p(a|x, q; θ)

(1)

a∈A

with parameters θ and the set of answers or loca-
tions A. For an image embedding x = Ξ(x) (i.e. a
CNN) and question embedding q = Ω(q) (i.e. an
LSTM), we are interested in getting a good joint rep-
resentation by pooling both representations. With a
multimodal pooling Φ(x, q) that encodes the relation-
ship between x and q well, it becomes easier to learn
a classiﬁer for Equation (1).

In this section, we ﬁrst discuss our multimodal
pooling Φ for combining representations from differ-
ent modalities into a single representation (Sec. 3.1)
and then detail our architectures for VQA (Sec. 3.2)
and visual grounding (Sec. 3.3), further explaining
how we predict ˆa with the given image representation
Ξ and text representation Ω.

3.1 Multimodal Compact Bilinear

Pooling (MCB)

Bilinear models (Tenenbaum and Freeman, 2000)
take the outer product of two vectors x ∈ Rn1 and
q ∈ Rn2 and learn a model W (here linear), i.e.
z = W [x ⊗ q], where ⊗ denotes the outer product
(xqT ) and [ ] denotes linearizing the matrix in a vec-
tor. As discussed in the introduction, bilinear pooling
is interesting because it allows all elements of both
vectors to interact with each other in a multiplicative

Figure 3: Our architecture for VQA: Multimodal Compact Bilinear (MCB) with Attention. Conv implies
convolutional layers and FC implies fully connected layers. For details see Sec. 3.2.

where ∗ is the convolution operator. Additionally, the
convolution theorem states that convolution in the
time domain is equivalent to element-wise product
in the frequency domain. The convolution x(cid:48) ∗ q(cid:48) can
be rewritten as FFT−1(FFT(x(cid:48)) (cid:12) FFT(q(cid:48))), where
(cid:12) refers to element-wise product. These ideas are
summarized in Figure 2 and formalized in Algorithm
1, which is based on the Tensor Sketch algorithm of
Pham and Pagh (2013). We invoke the algorithm with
v1 = x and v2 = q. We note that this easily extends
and remains efﬁcient for more than two multi-modal
inputs as the combination happens as element-wise
product.

3.2 Architectures for VQA

In VQA, the input to the model is an image and a
question, and the goal is to answer the question. Our
model extracts representations for the image and the
question, pools the vectors using MCB, and arrives
at the answer by treating the problem as a multi-class
classiﬁcation problem with 3,000 possible classes.

We extract image features using a 152-layer Resid-
ual Network (He et al., 2015) that is pretrained on
ImageNet data (Deng et al., 2009). Images are re-
sized to 448 × 448, and we use the output of the layer
(“pool5”) before the 1000-way classiﬁer. We then
perform L2 normalization on the 2048-D vector.

Input questions are ﬁrst tokenized into words, and
the words are one-hot encoded and passed through
a learned embedding layer. The tanh nonlinearity
is used after the embedding. The embedding layer
is followed by a 2-layer LSTM with 1024 units in
each layer. The outputs of each LSTM layer are
concatenated to form a 2048-D vector.

The two vectors are then passed through MCB.
The MCB is followed by an element-wise signed
square-root and L2 normalization. After MCB pool-
ing, a fully connected layer connects the resulting
16,000-D multimodal representation to the 3,000 top
answers.

Attention. To incorporate spatial information, we
use soft attention on our MCB pooling method. Ex-
plored by (Xu et al., 2015) for image captioning and
by (Xu and Saenko, 2016) and (Yang et al., 2015)
for VQA, the soft attention mechanism can be easily
integrated in our model.

For each spatial grid location in the visual rep-
resentation (i.e. last convolutional layer of ResNet
[res5c], last convolutional layer of VGG [conv5]),
we use MCB pooling to merge the slice of the visual
feature with the language representation. As depicted
in Figure 3, after the pooling we use two convolu-
tional layers to predict the attention weight for each
grid location. We apply softmax to produce a nor-
malized soft attention map. We then take a weighted
sum of the spatial vectors using the attention map to
create the attended visual representation. We also ex-
periment with generating multiple attention maps to
allow the model to make multiple “glimpses” which
are concatenated before being merged with the lan-
guage representation through another MCB pooling
for prediction. Predicting attention maps with MCB
pooling allows the model to effectively learn how to
attend to salient locations based on both the visual
and language representations.

Answer Encoding. For VQA with multiple
choices, we can additionally embed the answers. We

Figure 4: Our architecture for VQA: MCB with At-
tention and Answer Encoding

Figure 5: Our Architecture for Grounding with MCB
(Sec. 3.3)

base our approach on the proposed MCB with atten-
tion. As can be seen from Figure 4, to deal with
multiple variable-length answer choices, each choice
is encoded using a word embedding and LSTM lay-
ers whose weights are shared across the candidates.
In addition to using MCB with attention, we use an
additional MCB pooling to merge the encoded an-
swer choices with the multimodal representation of
the original pipeline. The resulting embedding is
projected to a classiﬁcation vector with a dimension
equal to the number of answers.

3.3 Architecture for Visual Grounding

We base our grounding approach on the fully-
supervised version of GroundeR (Rohrbach et al.,
2016). The overview of our model is shown in Fig-
ure 5. The input to the model is a query natural
language phrase and an image along with multiple
proposal bounding boxes. The goal is to predict a
bounding box which corresponds to the query phrase.
We replace the concatenation of the visual representa-
tion and the encoded phrase in GroundeR with MCB
to combine both modalities. In contrast to Rohrbach
et al. (2016), we include a linear embedding of the
visual representation and L2 normalization of both in-
put modalities, instead of batch normalization (Ioffe
and Szegedy, 2015), which we found to be beneﬁcial
when using MCB for the grounding task.

4 Evaluation on Visual Question

Answering

We evaluate the beneﬁt of MCB with a diverse set of
ablations on two visual question answering datasets.

4.1 Datasets

The Visual Question Answering (VQA) real-image
dataset (Antol et al., 2015) consists of approximately
200,000 MSCOCO images (Lin et al., 2014), with
3 questions per image and 10 answers per question.
There are 3 data splits: train (80K images), validation
(40K images), and test (80K images). Additionally,
there is a 25% subset of test named test-dev. Ac-
curacies for ablation experiments in this paper are
reported on the test-dev data split. We use the VQA
tool provided by Antol et al. (2015) for evaluation.
We conducted most of our experiments on the open-
ended real-image task. In Table 4, we also report our
multiple-choice real-image scores.

The Visual Genome dataset (Krishna et al.,
2016) uses 108,249 images from the intersection of
YFCC100M (Thomee et al., 2015) and MSCOCO.
For each image, an average of 17 question-answer
pairs are collected. There are 1.7 million QA pairs
of the 6W question types (what, where, when, who,
why, and how). Compared to the VQA dataset, Vi-
sual Genome represents a more balanced distribu-
tion of the 6W question types. Moreover, the aver-
age question and answer lengths for Visual Genome
are larger than the VQA dataset. To leverage the
Visual Genome dataset as additional training data,
we remove all the unnecessary words such as ”a”,
”the”, and ”it is” from the answers to decrease the
length of the answers and extract QA pairs whose
answers are single-worded. The extracted data is ﬁl-
tered again based on the answer vocabulary space
created from the VQA dataset, leaving us with addi-
tional 1M image-QA triplets.

The Visual7W dataset (Zhu et al., 2016) is a part
of the Visual Genome. Visual7W adds a 7th which
question category to accommodate visual answers,

Method

Accuracy

Compact Bilinear d Accuracy

Element-wise Sum
Concatenation
Concatenation + FC
Concatenation + FC + FC
Element-wise Product
Element-wise Product + FC
Element-wise Product + FC + FC
MCB (2048 × 2048 → 16K)

Full Bilinear (128 × 128 → 16K)
MCB (128 × 128 → 4K)

Element-wise Product with VGG-19
MCB (d = 16K) with VGG-19

Concatenation + FC with Attention
MCB (d = 16K) with Attention

56.50
57.49
58.40
57.10
58.57
56.44
57.88
59.83

58.46
58.69

55.97
57.05

58.36
62.50

Table 1: Comparison of multimodal pooling methods.
Models are trained on the VQA train split and tested
on test-dev.

1024
2048
4096
8192
16000
32000

58.38
58.80
59.42
59.69
59.83
59.71

Table 2: Accuracies for different values of d, the
dimension of the compact bilinear feature. Models
are trained on the VQA train split and tested on test-
dev. Details in Sec. 4.3.

Method

What Where When Who Why How Avg

Zhu et al.
Concat+Att.
MCB+Att.

51.5 57.0
47.8 56.9
60.3 70.4

75.0 59.5 55.5 49.8 54.3
74.1 62.3 52.7 51.2 52.8
79.5 69.2 58.2 51.1 62.2

Table 3: Multiple-choice QA tasks accuracy (%) on
Visual7W test set.

but we only evaluate the models on the Telling task
which involves 6W questions. The natural language
answers in Visual7W are in a multiple-choice format
and each question comes with four answer candidates,
with only one being the correct answer. Visual7W
is composed of 47,300 images from MSCOCO and
there are a total of 139,868 QA pairs.

4.2 Experimental Setup

We use the Adam solver with (cid:15) = 0.0007, β1 = 0.9,
β2 = 0.999. We use dropout after the LSTM layers
and in fully connected layers. For the experiments in
Table 1 and 2, we train on the VQA train split, vali-
date on the VQA validation split, and report results
on the VQA test-dev split. We use early stopping: if
the validation score does not improve for 50,000 iter-
ations, we stop training and evaluate the best iteration
on test-dev.

For the Visual7W task, we use the same hyperpa-
rameters and training settings as in the VQA exper-
iments. We use the splits from (Zhu et al., 2016) to
train, validate, and test our models. We also compute
accuracies on this data using their evaluation code.

For VQA multiple choice, we train the open-ended
models and take the argmax over the multiple choice

answers at test time. For Visual7W, we use the an-
swer encoding as described in Sec. 3.2.

4.3 Ablation Results

We compare the performance of non-bilinear and
bilinear pooling methods in Table 1. We see that
MCB pooling outperforms all non-bilinear pooling
methods, such as eltwise sum, concatenation, and
eltwise product.

One could argue that the compact bilinear method
simply has more parameters than the non-bilinear
pooling methods, which contributes to its perfor-
mance. We compensated for this by stacking fully
connected layers (with 4096 units per layer, ReLU
activation, and dropout) after the non-bilinear pool-
ing methods to increase their number of parameters.
However, even with similar parameter budgets, non-
bilinear methods could not achieve the same accuracy
as the MCB method. For example, the “Concatena-
tion + FC + FC” pooling method has approximately
40962 + 40962 + 4096 × 3000 ≈ 46 million pa-
rameters, which matches the 48 million parameters
available in MCB with d = 16000. However, the per-
formance of the “Concatenation + FC + FC” method
is only 57.10% compared to MCB’s 59.83%.

Section 2 in Table 1 also shows that compact bi-

Test-dev

Test-standard

Open Ended

MC

Open Ended

Y/N No. Other All

All Y/N No. Other All

MCB
MCB + Genome
MCB + Att.
MCB + Att. + GloVe
MCB + Att. + Genome
MCB + Att. + GloVe + Genome
Ensemble of 7 Att. models

Naver Labs (challenge 2nd)
HieCoAtt (Lu et al., 2016)
DMN+ (Xiong et al., 2016)
FDA (Ilievski et al., 2016)
D-NMN (Andreas et al., 2016a)
AMA (Wu et al., 2016)
SAN (Yang et al., 2015)
NMN (Andreas et al., 2016b)
AYN (Malinowski et al., 2016)
SMem (Xu and Saenko, 2016)
VQA team (Antol et al., 2015)
DPPnet (Noh et al., 2015)
iBOWIMG (Zhou et al., 2015)

81.2
81.7
82.2
82.5
81.7
82.3
83.4

83.5
79.7
80.5
81.1
81.1
81.0
79.3
81.2
78.4
80.9
80.5
80.7
76.5

35.1
36.6
37.7
37.6
38.2
37.2
39.8

39.8
38.7
36.8
36.2
38.6
38.4
36.6
38.0
36.4
37.3
36.8
37.2
35.0

49.3
51.5
54.8
55.6
57.0
57.4
58.5

54.8
51.7
48.3
45.8
45.5
45.2
46.1
44.0
46.3
43.1
43.1
41.7
42.6

60.8
62.3
64.2
64.7
65.1
65.4
66.7

64.9
61.8
60.3
59.2
59.4
59.2
58.7
58.6
58.4
58.0
57.8
57.2
55.7

65.4
66.4
68.6
69.1
69.5
69.9
70.2

69.4
65.8
-
-
-
-
-
-
-
-
62.7
-
-

-
-
-
-
-
-
83.2

83.3
-
-
-
-
81.1
-
81.2
78.2
80.9
80.6
80.3
76.8

-
-
-
-
-
-
39.5

38.7
-
-
-
-
37.1
-
37.7
36.3
37.5
36.5
36.9
35.0

-
-
-
-
-
-
58.0

54.6
-
-
-
-
45.8
-
44.0
46.3
43.5
43.7
42.2
42.6

-
-
-
-
-
-
66.5

64.8
62.1
60.4
59.5
59.4
59.4
58.9
58.7
58.4
58.2
58.2
57.4
55.9

MC

All

-
-
-
-
-
-
70.1

69.3
66.1
-
-
-
-
-
-
-
-
63.1
-
62.0

Table 4: Open-ended and multiple-choice (MC) results on VQA test set (trained on train+val set) compared
with state-of-the-art: accuracy in %. See Sec. 4.4.

linear pooling has no impact on accuracy compared
to full bilinear pooling. Section 3 in Table 1 demon-
strates that the MCB brings improvements regardless
of the image CNN used. We primarily use ResNet-
152 in this paper, but MCB also improves perfor-
mance if VGG-19 is used. Section 4 in Table 1 shows
that our soft attention model works best with MCB
pooling. In fact, attending to the Concatenation + FC
layer has the same performance as not using attention
at all, while attending to the MCB layer improves
performance by 2.67 points.

Table 2 compares different values of d, the output
dimensionality of the multimodal compact bilinear
feature. Approximating the bilinear feature with a
16,000-D vector yields the highest accuracy.

erated attention maps reveals that an ensembling or
smoothing effect occurs when using multiple maps.
Table 3 presents results for the Visual7W multiple-
choice QA task. The MCB with attention model out-
performs the previous state-of-the-art by 7.9 points
overall and performs better in almost every category.

4.4 Comparison to State-of-the-Art

Table 4 compares our approach with the state-of-the-
art on VQA test set. Our best single model uses
MCB pooling with two attention maps. Additionally,
we augment our training data with images and QA
pairs from the Visual Genome dataset. We also con-
catenate the learned word embedding with pretrained
GloVe vectors (Pennington et al., 2014).

We also evaluated models with multiple atten-
tion maps or channels. One attenion map achieves
64.67%, two 65.08% and four 64.24% accuracy
(trained on train+val). Visual inspection of the gen-

Each model in our ensemble of 7 models uses
MCB with attention. Some of the models were
trained with data from Visual Genome, and some
were trained with two attention maps. This ensem-

Method

Accuracy, %

Plummer et al. (2015)
Hu et al. (2016b)
Plummer et al. (2016)1
Wang et al. (2016)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

27.42
27.80
43.84
43.89
47.81

46.50
47.41
47.86
48.69

Table 5: Grounding accuracy on Flickr30k Entities
dataset.

Method

Accuracy, %

Hu et al. (2016b)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

17.93
26.93

25.48
27.80
27.98
28.91

Table 6: Grounding accuracy on ReferItGame
dataset.

ble is 1.8 points above the next best approach on the
VQA open-ended task and 0.8 points above the next
best approach on the multiple-choice task (on Test-
dev). Even without ensembles, our “MCB + Genome
+ Att. + GloVe” model still outperforms the next
best result by 0.5 points, with an accuracy of 65.4%
versus 64.9% on the open-ended task (on Test-dev).

5 Evaluation on Visual Grounding

5.1 Datasets

We evaluate our visual grounding approach on two
datasets. The ﬁrst is Flickr30k Entities (Plummer
et al., 2015) which consists of 31K images from
Flickr30k dataset (Hodosh et al., 2014) with 244K
phrases localized with bounding boxes. We follow
the experimental setup of Rohrbach et al. (2016),
e.g. we use the same Selective Search (Uijlings et

1Plummer et al. (2016) achieve higher accuracy of 50.89%
when taking into account box size and color. We believe our
approach would also beneﬁt from such additional features.

al., 2013) object proposals and the Fast R-CNN (Gir-
shick, 2015) ﬁne-tuned VGG16 features (Simonyan
and Zisserman, 2014). The second dataset is Refer-
ItGame (Kazemzadeh et al., 2014), which contains
20K images from IAPR TC-12 dataset (Grubinger et
al., 2006) with segmented regions from SAIAPR-12
dataset (Escalante et al., 2010) and 120K associated
natural language referring expressions. For Refer-
ItGame we follow the experimental setup of Hu et
al. (2016b) and rely on their ground-truth bound-
ing boxes extracted around the segmentation masks.
We use the Edge Box (Zitnick and Doll´ar, 2014) ob-
ject proposals and visual features (VGG16 combined
with the spatial features, which encode bounding box
relative position) from Hu et al. (2016b).

5.2 Experimental Setup

In all experiments we use Adam solver (Kingma and
Ba, 2014) with learning rate (cid:15) = 0.0001. The embed-
ding size is 500 both for visual and language embed-
dings. We use d = 2048 in the MCB pooling, which
we found to work best for the visual grounding task.
The accuracy is measured as percentage of query
phrases which have been localized correctly. The
phrase is localized correctly if the predicted bound-
ing box overlaps with the ground-truth bounding box
by more than 50% intersection over union (IOU).

5.3 Results

Tables 5 and 6 summarize our results in the visual
grounding task. We present multiple ablations of our
proposed architecture. First, we replace the MCB
with simple concatenation of the embedded visual
feature and the embedded phrase, resulting in 46.5%
on the Flickr30k Entities and 25.48% on the Refer-
ItGame datasets. The results can be improved by
replacing the concatenation with the element-wise
product of both embedded features (47.41% and
27.80%). We can further slightly increase the per-
formance by introducing additional 2048-D convo-
lution after the element-wise product (47.86% and
27.98%). However, even with fewer parameters, our
MCB pooling signiﬁcantly improves over this base-
line on both datasets, reaching state-of-the-art accu-
racy of 48.69% on Flickr30k Entities and 28.91%
on ReferItGame dataset. Figure 6 (bottom) shows
examples of improved phrase localization.

What vegetable is the dog
chewing on?
MCB: carrot
GT: carrot

What kind of dog is this?
MCB: husky
GT: husky

What kind of ﬂooring does
the room have?
MCB: carpet
GT: carpet

What color is the trafﬁc
light?
MCB: green
GT: green
Eltwise Product + Conv MCB

Is this an urban area?
MCB: yes
GT: yes

Where are the buildings?
MCB: in background
GT: on left

Eltwise Product + Conv

MCB

A tattooed woman with a green dress and yellow back-
pack holding a water bottle is walking across the street.

A dog distracts his owner from working at her computer.

Figure 6: Top: predicted answers and attention maps from MCB model on VQA images. Bottom: predicted
grounding from MCB model (left) and Eltwise Product + Conv model (right) on Flickr30k Entities images.

6 Conclusion

We propose the Multimodal Compact Bilinear Pool-
ing (MCB) to combine visual and text representa-
tions. For visual question answering, our architecture
with attention and multiple MCBs gives signiﬁcant
improvements on two VQA datasets compared to
In the visual grounding task, in-
state-of-the-art.
troducing MCB pooling leads to improved phrase
localization accuracy, indicating better interaction
between query phrase representations and visual rep-

resentations of proposal bounding boxes. The code
to replicate our experiments is available at https:
//github.com/akirafukui/vqa-mcb.

Acknowledgments

We would like to thank Yang Gao and Oscar Beijbom
for helpful discussions about Compact Bilinear Pool-
ing. This work was supported by DARPA, AFRL,
DoD MURI award N000141110688, NSF awards
IIS-1427425 and IIS-1212798, and the Berkeley Ar-
tiﬁcial Intelligence Research (BAIR) Lab.

References

[Andreas et al.2016a] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016a. Learning to
compose neural networks for question answering. In
Proceedings of the Conference of the North American
Chapter of the Association for Computational Linguis-
tics (NAACL).

[Andreas et al.2016b] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016b. Neural module
networks. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Antol et al.2015] Stanislaw Antol, Aishwarya Agrawal,
Jiasen Lu, Margaret Mitchell, Dhruv Batra, C Lawrence
Zitnick, and Devi Parikh. 2015. Vqa: Visual question
answering. In Proceedings of the IEEE International
Conference on Computer Vision (ICCV).

[Charikar et al.2002] Moses Charikar, Kevin Chen, and
Martin Farach-Colton. 2002. Finding frequent items
in data streams. In Automata, languages and program-
ming, pages 693–703. Springer.

[Deng et al.2009] J. Deng, W. Dong, R. Socher, L.-J. Li,
K. Li, and L. Fei-Fei. 2009.
ImageNet: A Large-
Scale Hierarchical Image Database. In Proceedings of
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Donahue et al.2013] Jeff Donahue, Yangqing Jia, Oriol
Vinyals, Judy Hoffman, Ning Zhang, Eric Tzeng, and
Trevor Darrell. 2013. Decaf: A deep convolutional
In
activation feature for generic visual recognition.
Proceedings of the International Conference on Ma-
chine Learning (ICML).

[Escalante et al.2010] Hugo Jair Escalante, Carlos A
Hern´andez, Jesus A Gonzalez, Aurelio L´opez-L´opez,
Manuel Montes, Eduardo F Morales, L Enrique Sucar,
Luis Villase˜nor, and Michael Grubinger. 2010. The
segmented and annotated iapr tc-12 benchmark. Com-
puter Vision and Image Understanding, 114(4):419–
428.

[Frome et al.2013] Andrea Frome, Greg S Corrado, Jon
Shlens, Samy Bengio, Jeff Dean, Tomas Mikolov, et al.
2013. Devise: A deep visual-semantic embedding
model. In Advances in Neural Information Process-
ing Systems (NIPS).

[Gao et al.2016] Yang Gao, Oscar Beijbom, Ning Zhang,
and Trevor Darrell. 2016. Compact bilinear pooling.
In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR).

[Girshick2015] Ross Girshick. 2015. Fast R-CNN. In
Proceedings of the IEEE International Conference on
Computer Vision (ICCV).

[Gong et al.2014] Yunchao Gong, Liwei Wang, Micah Ho-
dosh, Julia Hockenmaier, and Svetlana Lazebnik. 2014.
Improving image-sentence embeddings using large

weakly annotated photo collections. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Grubinger et al.2006] Michael Grubinger, Paul Clough,
Henning M¨uller, and Thomas Deselaers. 2006. The
iapr tc-12 benchmark: A new evaluation resource for
visual information systems. In International Workshop
OntoImage, volume 5, page 10.

[Hardoon et al.2004] David R Hardoon, Sandor Szedmak,
and John Shawe-Taylor. 2004. Canonical correlation
analysis: An overview with application to learning
methods. Neural computation, 16(12):2639–2664.
[He et al.2015] Kaiming He, Xiangyu Zhang, Shaoqing
Ren, and Jian Sun. 2015. Deep residual learning for
image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition
(CVPR).

[Hodosh et al.2014] Peter Hodosh, Alice Young, Micah
Lai, and Julia Hockenmaier. 2014. From image de-
scriptions to visual denotations: New similarity met-
rics for semantic inference over event descriptions. In
Transactions of the Association for Computational Lin-
guistics (TACL).

[Hu et al.2016a] Ronghang Hu, Marcus Rohrbach, and
Trevor Darrell. 2016a. Segmentation from natural
language expressions. In Proceedings of the European
Conference on Computer Vision (ECCV).

[Hu et al.2016b] Ronghang Hu, Huazhe Xu, Marcus
Rohrbach, Jiashi Feng, Kate Saenko, and Trevor Dar-
rell. 2016b. Natural language object retrieval. In Pro-
ceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR).

[Ilievski et al.2016] Ilija Ilievski, Shuicheng Yan, and Ji-
ashi Feng. 2016. A focused dynamic attention model
for visual question answering. arXiv:1604.01485.

[Ioffe and Szegedy2015] Sergey Ioffe

and Christian
Szegedy. 2015. Batch normalization: Accelerating
deep network training by reducing internal covariate
shift. In Proceedings of the International Conference
on Machine Learning (ICML).

[Karpathy and Fei-Fei2015] Andrej Karpathy and Li Fei-
Fei. 2015. Deep visual-semantic alignments for gener-
ating image descriptions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Kazemzadeh et al.2014] Sahar Kazemzadeh, Vicente Or-
donez, Mark Matten, and Tamara L. Berg.
2014.
Referit game: Referring to objects in photographs of
natural scenes. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

[Kingma and Ba2014] Diederik Kingma and Jimmy Ba.
2014. Adam: A method for stochastic optimization. In
Proceedings of the International Conference on Learn-
ing Representations (ICLR).

[Kiros et al.2014] Ryan Kiros, Ruslan Salakhutdinov, and
Rich Zemel. 2014. Multimodal neural language mod-
els. In Proceedings of the International Conference on
Machine Learning (ICML), pages 595–603.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler. 2015. Skip-thought
vectors. In Advances in Neural Information Processing
Systems (NIPS).

[Klein et al.2015] Benjamin Klein, Guy Lev, Gil Sadeh,
and Lior Wolf. 2015. Fisher vectors derived from
hybrid gaussian-laplacian mixture models for image
annotation. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Krishna et al.2016] Ranjay Krishna, Yuke Zhu, Oliver
Groth, Justin Johnson, Kenji Hata, Joshua Kravitz,
Stephanie Chen, Yannis Kalantidis, Li-Jia Li, David A
Shamma, Michael Bernstein, and Li Fei-Fei. 2016.
Visual genome:
Connecting language and vi-
sion using crowdsourced dense image annotations.
arXiv:1602.07332.

[Kumar et al.2016] Ankit Kumar, Ozan Irsoy, Jonathan Su,
James Bradbury, Robert English, Brian Pierce, Peter
Ondruska, Ishaan Gulrajani, and Richard Socher. 2016.
Ask me anything: Dynamic memory networks for natu-
ral language processing. In Proceedings of the Interna-
tional Conference on Machine Learning (ICML).
[Lin et al.2014] Tsung-Yi Lin, Michael Maire, Serge Be-
longie, James Hays, Pietro Perona, Deva Ramanan,
Piotr Doll´ar, and C Lawrence Zitnick. 2014. Microsoft
coco: Common objects in context. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Lin et al.2015] Tsung-Yu Lin, Aruni RoyChowdhury, and
Subhransu Maji. 2015. Bilinear cnn models for ﬁne-
grained visual recognition. In Proceedings of the IEEE
International Conference on Computer Vision (ICCV).
[Lu et al.2016] Jiasen Lu, Jianwei Yang, Dhruv Batra, and
Devi Parikh. 2016. Hierarchical Co-Attention for Vi-
sual Question Answering. In Advances in Neural Infor-
mation Processing Systems (NIPS).

[Malinowski et al.2016] Mateusz Malinowski, Marcus
Rohrbach, and Mario Fritz. 2016. Ask Your Neu-
rons: A Deep Learning Approach to Visual Question
Answering. arXiv: 1605.02697.

[Mao et al.2015] Junhua Mao, Wei Xu, Yi Yang, Jiang
Wang, Zhiheng Huang, and Alan Yuille. 2015. Deep
captioning with multimodal recurrent neural networks
(m-rnn). In Proceedings of the International Confer-
ence on Learning Representations (ICLR).

[Ngiam et al.2011] Jiquan Ngiam, Aditya Khosla, Mingyu
Kim, Juhan Nam, Honglak Lee, and Andrew Y Ng.
2011. Multimodal deep learning. In Proceedings of
the International Conference on Machine Learning
(ICML), pages 689–696.

[Noh et al.2015] Hyeonwoo Noh, Paul Hongsuck Seo, and
Bohyung Han. 2015. Image question answering using
convolutional neural network with dynamic parameter
prediction. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher D. Manning. 2014. Glove:
Global vectors for word representation. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP).

[Pham and Pagh2013] Ninh Pham and Rasmus Pagh.
2013. Fast and scalable polynomial kernels via ex-
plicit feature maps. In Proceedings of the 19th ACM
SIGKDD International Conference on Knowledge Dis-
covery and Data Mining, KDD ’13, pages 239–247,
New York, NY, USA. ACM.

[Plummer et al.2015] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2015. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. In Proceedings of the IEEE Interna-
tional Conference on Computer Vision (ICCV).

[Plummer et al.2016] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2016. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. arXiv:1505.04870v3.

[Rohrbach et al.2016] Anna Rohrbach, Marcus Rohrbach,
Ronghang Hu, Trevor Darrell, and Bernt Schiele. 2016.
Grounding of textual phrases in images by reconstruc-
tion. In Proceedings of the European Conference on
Computer Vision (ECCV).

[Simonyan and Zisserman2014] Karen Simonyan and An-
drew Zisserman. 2014. Very deep convolutional net-
works for large-scale image recognition. In Proceed-
ings of the International Conference on Learning Rep-
resentations (ICLR).

[Socher et al.2014] Richard Socher, Andrej Karpathy,
Quoc V Le, Christopher D Manning, and Andrew Y Ng.
2014. Grounded compositional semantics for ﬁnding
and describing images with sentences. Transactions of
the Association for Computational Linguistics, 2:207–
218.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals, and
Quoc V. V Le. 2014. Sequence to sequence learning
with neural networks. In Advances in Neural Informa-
tion Processing Systems (NIPS).

[Tenenbaum and Freeman2000] Joshua B Tenenbaum and
William T Freeman. 2000. Separating style and content
with bilinear models. Neural computation, 12(6):1247–
1283.

[Thomee et al.2015] Bart Thomee, David A. Shamma,
Gerald Friedland, Benjamin Elizalde, Karl Ni, Dou-
glas Poland, Damian Borth, and Li-Jia Li. 2015. The

new data and new challenges in multimedia research.
CoRR, abs/1503.01817.

ference on Computer Vision (ECCV), pages 391–405.
Springer.

[Uijlings et al.2013] Jasper RR Uijlings, Koen EA van de
Sande, Theo Gevers, and Arnold WM Smeulders. 2013.
Selective search for object recognition. International
Journal of Computer Vision (IJCV), 104(2).

[Wang et al.2016] Liwei Wang, Yin Li, and Svetlana
Lazebnik. 2016. Learning deep structure-preserving
image-text embeddings. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Weston et al.2011] Jason Weston, Samy Bengio, and
Nicolas Usunier. 2011. Wsabie: Scaling up to large
vocabulary image annotation. In Proceedings of the In-
ternational Joint Conference on Artiﬁcial Intelligence
(IJCAI).

[Wu et al.2016] Qi Wu, Peng Wang, Chunhua Shen, An-
ton van den Hengel, and Anthony Dick. 2016. Ask
Me Anything: Free-form Visual Question Answering
Based on Knowledge from External Sources. In Proc.
IEEE Conf. Computer Vision Pattern Recognition.
[Xiong et al.2016] Caiming Xiong, Stephen Merity, and
Richard Socher. 2016. Dynamic memory networks for
visual and textual question answering. In Proceedings
of the International Conference on Machine Learning
(ICML).

[Xu and Saenko2016] Huijuan Xu and Kate Saenko. 2016.
Ask, attend and answer: Exploring question-guided spa-
tial attention for visual question answering. In Proceed-
ings of the European Conference on Computer Vision
(ECCV).

[Xu et al.2015] Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron
Courville, Ruslan Salakhutdinov, Richard Zemel, and
Yoshua Bengio. 2015. Show, attend and tell: Neural
image caption generation with visual attention. Pro-
ceedings of the International Conference on Machine
Learning (ICML).

[Yang et al.2015] Zichao Yang, Xiaodong He, Jianfeng
Gao, Li Deng, and Alex Smola.
2015. Stacked
attention networks for image question answering.
arXiv:1511.02274.

[Zhou et al.2015] Bolei Zhou, Yuandong Tian, Sainba-
yar Sukhbaatar, Arthur Szlam, and Rob Fergus.
2015. Simple baseline for visual question answering.
arXiv:1512.02167.

[Zhu et al.2016] Yuke Zhu, Oliver Groth, Michael Bern-
stein, and Li Fei-Fei. 2016. Visual7W: Grounded
In Proceedings of
Question Answering in Images.
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Zitnick and Doll´ar2014] C Lawrence Zitnick and Piotr
Doll´ar. 2014. Edge boxes: Locating object propos-
als from edges. In Proceedings of the European Con-

6
1
0
2
 
p
e
S
 
4
2
 
 
]

V
C
.
s
c
[
 
 
3
v
7
4
8
1
0
.
6
0
6
1
:
v
i
X
r
a

Multimodal Compact Bilinear Pooling
for Visual Question Answering and Visual Grounding

Akira Fukui*1,2
Anna Rohrbach*1,3

Dong Huk Park*1
Trevor Darrell1 Marcus Rohrbach1

Daylen Yang*1

1UC Berkeley EECS, CA, United States
2Sony Corp., Tokyo, Japan
3Max Planck Institute for Informatics, Saarbr¨ucken, Germany

Abstract

Modeling textual or visual information with
vector representations trained from large lan-
guage or visual datasets has been successfully
explored in recent years. However, tasks such
as visual question answering require combin-
ing these vector representations with each other.
Approaches to multimodal pooling include
element-wise product or sum, as well as con-
catenation of the visual and textual represen-
tations. We hypothesize that these methods
are not as expressive as an outer product of
the visual and textual vectors. As the outer
product is typically infeasible due to its high
dimensionality, we instead propose utilizing
Multimodal Compact Bilinear pooling (MCB)
to efﬁciently and expressively combine multi-
modal features. We extensively evaluate MCB
on the visual question answering and ground-
ing tasks. We consistently show the beneﬁt of
MCB over ablations without MCB. For visual
question answering, we present an architec-
ture which uses MCB twice, once for predict-
ing attention over spatial features and again
to combine the attended representation with
the question representation. This model out-
performs the state-of-the-art on the Visual7W
dataset and the VQA challenge.

1

Introduction

Representation learning for text and images has been
extensively studied in recent years. Recurrent neural
networks (RNNs) are often used to represent sen-
tences or phrases (Sutskever et al., 2014; Kiros et al.,

* indicates equal contribution

Figure 1: Multimodal Compact Bilinear Pooling for
visual question answering.

2015), and convolutional neural networks (CNNs)
have shown to work best to represent images (Don-
ahue et al., 2013; He et al., 2015). For tasks such as
visual question answering (VQA) and visual ground-
ing, most approaches require joining the represen-
tation of both modalities. For combining the two
vector representations (multimodal pooling), current
approaches in VQA or grounding rely on concatenat-
ing vectors or applying element-wise sum or product.
While this generates a joint representation, it might
not be expressive enough to fully capture the complex
associations between the two different modalities.

In this paper, we propose to rely on Multimodal
Compact Bilinear pooling (MCB) to get a joint repre-
sentation. Bilinear pooling computes the outer prod-
uct between two vectors, which allows, in contrast
to element-wise product, a multiplicative interaction
between all elements of both vectors. Bilinear pool-
ing models (Tenenbaum and Freeman, 2000) have
recently been shown to be beneﬁcial for ﬁne-grained
classiﬁcation for vision only tasks (Lin et al., 2015).
However, given their high dimensionality (n2), bi-
linear pooling has so far not been widely used. In

this paper, we adopt the idea from Gao et al. (2016)
which shows how to efﬁciently compress bilinear
pooling for a single modality. In this work, we dis-
cuss and extensively evaluate the extension to the
multimodal case for text and visual modalities. As
shown in Figure 1, Multimodal Compact Bilinear
pooling (MCB) is approximated by randomly pro-
jecting the image and text representations to a higher
dimensional space (using Count Sketch (Charikar
et al., 2002)) and then convolving both vectors efﬁ-
ciently by using element-wise product in Fast Fourier
Transform (FFT) space. We use MCB to predict an-
swers for the VQA task and locations for the visual
grounding task. For open-ended question answering,
we present an architecture for VQA which uses MCB
twice, once to predict spatial attention and the second
time to predict the answer. For multiple-choice ques-
tion answering we introduce a third MCB to relate the
encoded answer to the question-image space. Addi-
tionally, we discuss the beneﬁt of attention maps and
additional training data for the VQA task. To sum-
marize, MCB is evaluated on two tasks, four datasets,
and with a diverse set of ablations and comparisons
to the state-of-the-art.

2 Related Work

Multimodal pooling. Current approaches to mul-
timodal pooling involve element-wise operations or
vector concatenation. In the visual question answer-
ing domain, a number of models have been proposed.
Simpler models such as iBOWIMG baseline (Zhou
et al., 2015) use concatenation and fully connected
layers to combine the image and question modali-
ties. Stacked Attention Networks (Yang et al., 2015)
and Spatial Memory Networks (Xu et al., 2015) use
LSTMs or extract soft-attention on the image fea-
tures, but ultimately use element-wise product or
element-wise sum to merge modalities. D-NMN (An-
dreas et al., 2016a) introduced REINFORCE to dy-
namically create a network and use element-wise
product to join attentions and element-wise sum pre-
dict answers. Dynamic Memory Networks (DMN)
(Xiong et al., 2016) pool the image and question
with element-wise product and sum, attending to part
of the image and question with an Episodic Mem-
ory Module (Kumar et al., 2016). DPPnet (Noh et
al., 2015) creates a Parameter Prediction Network

which learns to predict the parameters of the second
to last visual recognition layer dynamically from the
question. Similar to this work, DPPnet allows mul-
tiplicative interactions between the visual and ques-
tion encodings. Lu et al. (2016) recently proposed
a model that extracts multiple co-attentions on the
image and question and combines the co-attentions
in a hierarchical manner using element-wise sum,
concatenation, and fully connected layers.

For the visual grounding task, Rohrbach et al.
(2016) propose an approach where the language
phrase embedding is concatenated with the visual
features in order to predict the attention weights over
multiple bounding box proposals. Similarly, Hu et
al. (2016a) concatenate phrase embeddings with vi-
sual features at different spatial locations to obtain a
segmentation.

Bilinear pooling. Bilinear pooling has been ap-
plied to the ﬁne-grained visual recognition task. Lin
et al. (2015) use two CNNs to extract features from
an image and combine the resulting vectors using an
outer product, which is fully connected to an output
layer. Gao et al. (2016) address the space and time
complexity of bilinear features by viewing the bilin-
ear transformation as a polynomial kernel. Pham and
Pagh (2013) describe a method to approximate the
polynomial kernel using Count Sketches and convo-
lutions.

Joint multimodal embeddings.
In order to model
similarities between two modalities, many prior
works have learned joint multimodal spaces, or em-
beddings. Some of such embeddings are based
on Canonical Correlation Analysis (Hardoon et al.,
2004) e.g. (Gong et al., 2014; Klein et al., 2015;
Plummer et al., 2015), linear models with ranking
loss (Frome et al., 2013; Karpathy and Fei-Fei, 2015;
Socher et al., 2014; Weston et al., 2011) or non-linear
deep learning models (Kiros et al., 2014; Mao et al.,
2015; Ngiam et al., 2011). Our multimodal com-
pact bilinear pooling can be seen as a complementary
operation that allows us to capture different interac-
tions between two modalities more expressively than
e.g. concatenation. Consequently, many embedding
learning approaches could beneﬁt from incorporating
such interactions.

Algorithm 1 Multimodal Compact Bilinear
1: input: v1 ∈ Rn1 , v2 ∈ Rn2
2: output: Φ(v1, v2) ∈ Rd
3: procedure MCB(v1, v2, n1, n2, d)
4:
5:
6:
7:
8:

if hk, sk not initialized then
for i ← 1 . . . nk do

sample hk[i] from {1, . . . , d}
sample sk[i] from {−1, 1}

for k ← 1 . . . 2 do

9:

v(cid:48)
k = Ψ(vk, hk, sk, nk)

1) (cid:12) FFT(v(cid:48)

2))

Φ = FFT−1(FFT(v(cid:48)
return Φ

10:
11:
12: procedure Ψ(v, h, s, n)
y = [0, . . . , 0]
13:
for i ← 1 . . . n do
14:
15:

16:

return y

y[h[i]] = y[h[i]] + s[i] · v[i]

way. However, the high dimensional representation
(i.e. when n1 and n2 are large) leads to an infeasible
number of parameters to learn in W . For example,
we use n1 = n2 = 2048 and z ∈ R3000 for VQA.
W thus would have 12.5 billion parameters, which
leads to very high memory consumption and high
computation times.

We thus need a method that projects the outer prod-
uct to a lower dimensional space and also avoids
computing the outer product directly. As suggested
by Gao et al. (2016) for a single modality, we rely
on the Count Sketch projection function Ψ (Charikar
et al., 2002), which projects a vector v ∈ Rn to
y ∈ Rd. We initialize two vectors s ∈ {−1, 1}n and
h ∈ {1, ..., d}n: s contains either 1 or −1 for each
index, and h maps each index i in the input v to an
index j in the output y. Both s and h are initialized
randomly from a uniform distribution and remain
constant for future invocations of count sketch. y is
initialized as a zero vector. For every element v[i] its
destination index j = h[i] is looked up using h, and
s[i] · v[i] is added to y[j]. See lines 1-9 and 12-16 in
Algorithm 1.

This allows us to project the outer product to a
lower dimensional space, which reduces the number
of parameters in W . To avoid computing the outer
product explicitly, Pham and Pagh (2013) showed
that the count sketch of the outer product of two
vectors can be expressed as convolution of both count
sketches: Ψ(x ⊗ q, h, s) = Ψ(x, h, s) ∗ Ψ(q, h, s),

Figure 2: Multimodal Compact Bilinear Pooling
(MCB)

3 Multimodal Compact Bilinear Pooling
for Visual and Textual Embeddings

For the task of visual question answering (VQA) or
visual grounding, we have to predict the most likely
answer or location ˆa for a given image x and question
or phrase q. This can be formulated as

ˆa = argmax

p(a|x, q; θ)

(1)

a∈A

with parameters θ and the set of answers or loca-
tions A. For an image embedding x = Ξ(x) (i.e. a
CNN) and question embedding q = Ω(q) (i.e. an
LSTM), we are interested in getting a good joint rep-
resentation by pooling both representations. With a
multimodal pooling Φ(x, q) that encodes the relation-
ship between x and q well, it becomes easier to learn
a classiﬁer for Equation (1).

In this section, we ﬁrst discuss our multimodal
pooling Φ for combining representations from differ-
ent modalities into a single representation (Sec. 3.1)
and then detail our architectures for VQA (Sec. 3.2)
and visual grounding (Sec. 3.3), further explaining
how we predict ˆa with the given image representation
Ξ and text representation Ω.

3.1 Multimodal Compact Bilinear

Pooling (MCB)

Bilinear models (Tenenbaum and Freeman, 2000)
take the outer product of two vectors x ∈ Rn1 and
q ∈ Rn2 and learn a model W (here linear), i.e.
z = W [x ⊗ q], where ⊗ denotes the outer product
(xqT ) and [ ] denotes linearizing the matrix in a vec-
tor. As discussed in the introduction, bilinear pooling
is interesting because it allows all elements of both
vectors to interact with each other in a multiplicative

Figure 3: Our architecture for VQA: Multimodal Compact Bilinear (MCB) with Attention. Conv implies
convolutional layers and FC implies fully connected layers. For details see Sec. 3.2.

where ∗ is the convolution operator. Additionally, the
convolution theorem states that convolution in the
time domain is equivalent to element-wise product
in the frequency domain. The convolution x(cid:48) ∗ q(cid:48) can
be rewritten as FFT−1(FFT(x(cid:48)) (cid:12) FFT(q(cid:48))), where
(cid:12) refers to element-wise product. These ideas are
summarized in Figure 2 and formalized in Algorithm
1, which is based on the Tensor Sketch algorithm of
Pham and Pagh (2013). We invoke the algorithm with
v1 = x and v2 = q. We note that this easily extends
and remains efﬁcient for more than two multi-modal
inputs as the combination happens as element-wise
product.

3.2 Architectures for VQA

In VQA, the input to the model is an image and a
question, and the goal is to answer the question. Our
model extracts representations for the image and the
question, pools the vectors using MCB, and arrives
at the answer by treating the problem as a multi-class
classiﬁcation problem with 3,000 possible classes.

We extract image features using a 152-layer Resid-
ual Network (He et al., 2015) that is pretrained on
ImageNet data (Deng et al., 2009). Images are re-
sized to 448 × 448, and we use the output of the layer
(“pool5”) before the 1000-way classiﬁer. We then
perform L2 normalization on the 2048-D vector.

Input questions are ﬁrst tokenized into words, and
the words are one-hot encoded and passed through
a learned embedding layer. The tanh nonlinearity
is used after the embedding. The embedding layer
is followed by a 2-layer LSTM with 1024 units in
each layer. The outputs of each LSTM layer are
concatenated to form a 2048-D vector.

The two vectors are then passed through MCB.
The MCB is followed by an element-wise signed
square-root and L2 normalization. After MCB pool-
ing, a fully connected layer connects the resulting
16,000-D multimodal representation to the 3,000 top
answers.

Attention. To incorporate spatial information, we
use soft attention on our MCB pooling method. Ex-
plored by (Xu et al., 2015) for image captioning and
by (Xu and Saenko, 2016) and (Yang et al., 2015)
for VQA, the soft attention mechanism can be easily
integrated in our model.

For each spatial grid location in the visual rep-
resentation (i.e. last convolutional layer of ResNet
[res5c], last convolutional layer of VGG [conv5]),
we use MCB pooling to merge the slice of the visual
feature with the language representation. As depicted
in Figure 3, after the pooling we use two convolu-
tional layers to predict the attention weight for each
grid location. We apply softmax to produce a nor-
malized soft attention map. We then take a weighted
sum of the spatial vectors using the attention map to
create the attended visual representation. We also ex-
periment with generating multiple attention maps to
allow the model to make multiple “glimpses” which
are concatenated before being merged with the lan-
guage representation through another MCB pooling
for prediction. Predicting attention maps with MCB
pooling allows the model to effectively learn how to
attend to salient locations based on both the visual
and language representations.

Answer Encoding. For VQA with multiple
choices, we can additionally embed the answers. We

Figure 4: Our architecture for VQA: MCB with At-
tention and Answer Encoding

Figure 5: Our Architecture for Grounding with MCB
(Sec. 3.3)

base our approach on the proposed MCB with atten-
tion. As can be seen from Figure 4, to deal with
multiple variable-length answer choices, each choice
is encoded using a word embedding and LSTM lay-
ers whose weights are shared across the candidates.
In addition to using MCB with attention, we use an
additional MCB pooling to merge the encoded an-
swer choices with the multimodal representation of
the original pipeline. The resulting embedding is
projected to a classiﬁcation vector with a dimension
equal to the number of answers.

3.3 Architecture for Visual Grounding

We base our grounding approach on the fully-
supervised version of GroundeR (Rohrbach et al.,
2016). The overview of our model is shown in Fig-
ure 5. The input to the model is a query natural
language phrase and an image along with multiple
proposal bounding boxes. The goal is to predict a
bounding box which corresponds to the query phrase.
We replace the concatenation of the visual representa-
tion and the encoded phrase in GroundeR with MCB
to combine both modalities. In contrast to Rohrbach
et al. (2016), we include a linear embedding of the
visual representation and L2 normalization of both in-
put modalities, instead of batch normalization (Ioffe
and Szegedy, 2015), which we found to be beneﬁcial
when using MCB for the grounding task.

4 Evaluation on Visual Question

Answering

We evaluate the beneﬁt of MCB with a diverse set of
ablations on two visual question answering datasets.

4.1 Datasets

The Visual Question Answering (VQA) real-image
dataset (Antol et al., 2015) consists of approximately
200,000 MSCOCO images (Lin et al., 2014), with
3 questions per image and 10 answers per question.
There are 3 data splits: train (80K images), validation
(40K images), and test (80K images). Additionally,
there is a 25% subset of test named test-dev. Ac-
curacies for ablation experiments in this paper are
reported on the test-dev data split. We use the VQA
tool provided by Antol et al. (2015) for evaluation.
We conducted most of our experiments on the open-
ended real-image task. In Table 4, we also report our
multiple-choice real-image scores.

The Visual Genome dataset (Krishna et al.,
2016) uses 108,249 images from the intersection of
YFCC100M (Thomee et al., 2015) and MSCOCO.
For each image, an average of 17 question-answer
pairs are collected. There are 1.7 million QA pairs
of the 6W question types (what, where, when, who,
why, and how). Compared to the VQA dataset, Vi-
sual Genome represents a more balanced distribu-
tion of the 6W question types. Moreover, the aver-
age question and answer lengths for Visual Genome
are larger than the VQA dataset. To leverage the
Visual Genome dataset as additional training data,
we remove all the unnecessary words such as ”a”,
”the”, and ”it is” from the answers to decrease the
length of the answers and extract QA pairs whose
answers are single-worded. The extracted data is ﬁl-
tered again based on the answer vocabulary space
created from the VQA dataset, leaving us with addi-
tional 1M image-QA triplets.

The Visual7W dataset (Zhu et al., 2016) is a part
of the Visual Genome. Visual7W adds a 7th which
question category to accommodate visual answers,

Method

Accuracy

Compact Bilinear d Accuracy

Element-wise Sum
Concatenation
Concatenation + FC
Concatenation + FC + FC
Element-wise Product
Element-wise Product + FC
Element-wise Product + FC + FC
MCB (2048 × 2048 → 16K)

Full Bilinear (128 × 128 → 16K)
MCB (128 × 128 → 4K)

Element-wise Product with VGG-19
MCB (d = 16K) with VGG-19

Concatenation + FC with Attention
MCB (d = 16K) with Attention

56.50
57.49
58.40
57.10
58.57
56.44
57.88
59.83

58.46
58.69

55.97
57.05

58.36
62.50

Table 1: Comparison of multimodal pooling methods.
Models are trained on the VQA train split and tested
on test-dev.

1024
2048
4096
8192
16000
32000

58.38
58.80
59.42
59.69
59.83
59.71

Table 2: Accuracies for different values of d, the
dimension of the compact bilinear feature. Models
are trained on the VQA train split and tested on test-
dev. Details in Sec. 4.3.

Method

What Where When Who Why How Avg

Zhu et al.
Concat+Att.
MCB+Att.

51.5 57.0
47.8 56.9
60.3 70.4

75.0 59.5 55.5 49.8 54.3
74.1 62.3 52.7 51.2 52.8
79.5 69.2 58.2 51.1 62.2

Table 3: Multiple-choice QA tasks accuracy (%) on
Visual7W test set.

but we only evaluate the models on the Telling task
which involves 6W questions. The natural language
answers in Visual7W are in a multiple-choice format
and each question comes with four answer candidates,
with only one being the correct answer. Visual7W
is composed of 47,300 images from MSCOCO and
there are a total of 139,868 QA pairs.

4.2 Experimental Setup

We use the Adam solver with (cid:15) = 0.0007, β1 = 0.9,
β2 = 0.999. We use dropout after the LSTM layers
and in fully connected layers. For the experiments in
Table 1 and 2, we train on the VQA train split, vali-
date on the VQA validation split, and report results
on the VQA test-dev split. We use early stopping: if
the validation score does not improve for 50,000 iter-
ations, we stop training and evaluate the best iteration
on test-dev.

For the Visual7W task, we use the same hyperpa-
rameters and training settings as in the VQA exper-
iments. We use the splits from (Zhu et al., 2016) to
train, validate, and test our models. We also compute
accuracies on this data using their evaluation code.

For VQA multiple choice, we train the open-ended
models and take the argmax over the multiple choice

answers at test time. For Visual7W, we use the an-
swer encoding as described in Sec. 3.2.

4.3 Ablation Results

We compare the performance of non-bilinear and
bilinear pooling methods in Table 1. We see that
MCB pooling outperforms all non-bilinear pooling
methods, such as eltwise sum, concatenation, and
eltwise product.

One could argue that the compact bilinear method
simply has more parameters than the non-bilinear
pooling methods, which contributes to its perfor-
mance. We compensated for this by stacking fully
connected layers (with 4096 units per layer, ReLU
activation, and dropout) after the non-bilinear pool-
ing methods to increase their number of parameters.
However, even with similar parameter budgets, non-
bilinear methods could not achieve the same accuracy
as the MCB method. For example, the “Concatena-
tion + FC + FC” pooling method has approximately
40962 + 40962 + 4096 × 3000 ≈ 46 million pa-
rameters, which matches the 48 million parameters
available in MCB with d = 16000. However, the per-
formance of the “Concatenation + FC + FC” method
is only 57.10% compared to MCB’s 59.83%.

Section 2 in Table 1 also shows that compact bi-

Test-dev

Test-standard

Open Ended

MC

Open Ended

Y/N No. Other All

All Y/N No. Other All

MCB
MCB + Genome
MCB + Att.
MCB + Att. + GloVe
MCB + Att. + Genome
MCB + Att. + GloVe + Genome
Ensemble of 7 Att. models

Naver Labs (challenge 2nd)
HieCoAtt (Lu et al., 2016)
DMN+ (Xiong et al., 2016)
FDA (Ilievski et al., 2016)
D-NMN (Andreas et al., 2016a)
AMA (Wu et al., 2016)
SAN (Yang et al., 2015)
NMN (Andreas et al., 2016b)
AYN (Malinowski et al., 2016)
SMem (Xu and Saenko, 2016)
VQA team (Antol et al., 2015)
DPPnet (Noh et al., 2015)
iBOWIMG (Zhou et al., 2015)

81.2
81.7
82.2
82.5
81.7
82.3
83.4

83.5
79.7
80.5
81.1
81.1
81.0
79.3
81.2
78.4
80.9
80.5
80.7
76.5

35.1
36.6
37.7
37.6
38.2
37.2
39.8

39.8
38.7
36.8
36.2
38.6
38.4
36.6
38.0
36.4
37.3
36.8
37.2
35.0

49.3
51.5
54.8
55.6
57.0
57.4
58.5

54.8
51.7
48.3
45.8
45.5
45.2
46.1
44.0
46.3
43.1
43.1
41.7
42.6

60.8
62.3
64.2
64.7
65.1
65.4
66.7

64.9
61.8
60.3
59.2
59.4
59.2
58.7
58.6
58.4
58.0
57.8
57.2
55.7

65.4
66.4
68.6
69.1
69.5
69.9
70.2

69.4
65.8
-
-
-
-
-
-
-
-
62.7
-
-

-
-
-
-
-
-
83.2

83.3
-
-
-
-
81.1
-
81.2
78.2
80.9
80.6
80.3
76.8

-
-
-
-
-
-
39.5

38.7
-
-
-
-
37.1
-
37.7
36.3
37.5
36.5
36.9
35.0

-
-
-
-
-
-
58.0

54.6
-
-
-
-
45.8
-
44.0
46.3
43.5
43.7
42.2
42.6

-
-
-
-
-
-
66.5

64.8
62.1
60.4
59.5
59.4
59.4
58.9
58.7
58.4
58.2
58.2
57.4
55.9

MC

All

-
-
-
-
-
-
70.1

69.3
66.1
-
-
-
-
-
-
-
-
63.1
-
62.0

Table 4: Open-ended and multiple-choice (MC) results on VQA test set (trained on train+val set) compared
with state-of-the-art: accuracy in %. See Sec. 4.4.

linear pooling has no impact on accuracy compared
to full bilinear pooling. Section 3 in Table 1 demon-
strates that the MCB brings improvements regardless
of the image CNN used. We primarily use ResNet-
152 in this paper, but MCB also improves perfor-
mance if VGG-19 is used. Section 4 in Table 1 shows
that our soft attention model works best with MCB
pooling. In fact, attending to the Concatenation + FC
layer has the same performance as not using attention
at all, while attending to the MCB layer improves
performance by 2.67 points.

Table 2 compares different values of d, the output
dimensionality of the multimodal compact bilinear
feature. Approximating the bilinear feature with a
16,000-D vector yields the highest accuracy.

erated attention maps reveals that an ensembling or
smoothing effect occurs when using multiple maps.
Table 3 presents results for the Visual7W multiple-
choice QA task. The MCB with attention model out-
performs the previous state-of-the-art by 7.9 points
overall and performs better in almost every category.

4.4 Comparison to State-of-the-Art

Table 4 compares our approach with the state-of-the-
art on VQA test set. Our best single model uses
MCB pooling with two attention maps. Additionally,
we augment our training data with images and QA
pairs from the Visual Genome dataset. We also con-
catenate the learned word embedding with pretrained
GloVe vectors (Pennington et al., 2014).

We also evaluated models with multiple atten-
tion maps or channels. One attenion map achieves
64.67%, two 65.08% and four 64.24% accuracy
(trained on train+val). Visual inspection of the gen-

Each model in our ensemble of 7 models uses
MCB with attention. Some of the models were
trained with data from Visual Genome, and some
were trained with two attention maps. This ensem-

Method

Accuracy, %

Plummer et al. (2015)
Hu et al. (2016b)
Plummer et al. (2016)1
Wang et al. (2016)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

27.42
27.80
43.84
43.89
47.81

46.50
47.41
47.86
48.69

Table 5: Grounding accuracy on Flickr30k Entities
dataset.

Method

Accuracy, %

Hu et al. (2016b)
Rohrbach et al. (2016)

Concatenation
Element-wise Product
Element-wise Product + Conv
MCB

17.93
26.93

25.48
27.80
27.98
28.91

Table 6: Grounding accuracy on ReferItGame
dataset.

ble is 1.8 points above the next best approach on the
VQA open-ended task and 0.8 points above the next
best approach on the multiple-choice task (on Test-
dev). Even without ensembles, our “MCB + Genome
+ Att. + GloVe” model still outperforms the next
best result by 0.5 points, with an accuracy of 65.4%
versus 64.9% on the open-ended task (on Test-dev).

5 Evaluation on Visual Grounding

5.1 Datasets

We evaluate our visual grounding approach on two
datasets. The ﬁrst is Flickr30k Entities (Plummer
et al., 2015) which consists of 31K images from
Flickr30k dataset (Hodosh et al., 2014) with 244K
phrases localized with bounding boxes. We follow
the experimental setup of Rohrbach et al. (2016),
e.g. we use the same Selective Search (Uijlings et

1Plummer et al. (2016) achieve higher accuracy of 50.89%
when taking into account box size and color. We believe our
approach would also beneﬁt from such additional features.

al., 2013) object proposals and the Fast R-CNN (Gir-
shick, 2015) ﬁne-tuned VGG16 features (Simonyan
and Zisserman, 2014). The second dataset is Refer-
ItGame (Kazemzadeh et al., 2014), which contains
20K images from IAPR TC-12 dataset (Grubinger et
al., 2006) with segmented regions from SAIAPR-12
dataset (Escalante et al., 2010) and 120K associated
natural language referring expressions. For Refer-
ItGame we follow the experimental setup of Hu et
al. (2016b) and rely on their ground-truth bound-
ing boxes extracted around the segmentation masks.
We use the Edge Box (Zitnick and Doll´ar, 2014) ob-
ject proposals and visual features (VGG16 combined
with the spatial features, which encode bounding box
relative position) from Hu et al. (2016b).

5.2 Experimental Setup

In all experiments we use Adam solver (Kingma and
Ba, 2014) with learning rate (cid:15) = 0.0001. The embed-
ding size is 500 both for visual and language embed-
dings. We use d = 2048 in the MCB pooling, which
we found to work best for the visual grounding task.
The accuracy is measured as percentage of query
phrases which have been localized correctly. The
phrase is localized correctly if the predicted bound-
ing box overlaps with the ground-truth bounding box
by more than 50% intersection over union (IOU).

5.3 Results

Tables 5 and 6 summarize our results in the visual
grounding task. We present multiple ablations of our
proposed architecture. First, we replace the MCB
with simple concatenation of the embedded visual
feature and the embedded phrase, resulting in 46.5%
on the Flickr30k Entities and 25.48% on the Refer-
ItGame datasets. The results can be improved by
replacing the concatenation with the element-wise
product of both embedded features (47.41% and
27.80%). We can further slightly increase the per-
formance by introducing additional 2048-D convo-
lution after the element-wise product (47.86% and
27.98%). However, even with fewer parameters, our
MCB pooling signiﬁcantly improves over this base-
line on both datasets, reaching state-of-the-art accu-
racy of 48.69% on Flickr30k Entities and 28.91%
on ReferItGame dataset. Figure 6 (bottom) shows
examples of improved phrase localization.

What vegetable is the dog
chewing on?
MCB: carrot
GT: carrot

What kind of dog is this?
MCB: husky
GT: husky

What kind of ﬂooring does
the room have?
MCB: carpet
GT: carpet

What color is the trafﬁc
light?
MCB: green
GT: green
Eltwise Product + Conv MCB

Is this an urban area?
MCB: yes
GT: yes

Where are the buildings?
MCB: in background
GT: on left

Eltwise Product + Conv

MCB

A tattooed woman with a green dress and yellow back-
pack holding a water bottle is walking across the street.

A dog distracts his owner from working at her computer.

Figure 6: Top: predicted answers and attention maps from MCB model on VQA images. Bottom: predicted
grounding from MCB model (left) and Eltwise Product + Conv model (right) on Flickr30k Entities images.

6 Conclusion

We propose the Multimodal Compact Bilinear Pool-
ing (MCB) to combine visual and text representa-
tions. For visual question answering, our architecture
with attention and multiple MCBs gives signiﬁcant
improvements on two VQA datasets compared to
In the visual grounding task, in-
state-of-the-art.
troducing MCB pooling leads to improved phrase
localization accuracy, indicating better interaction
between query phrase representations and visual rep-

resentations of proposal bounding boxes. The code
to replicate our experiments is available at https:
//github.com/akirafukui/vqa-mcb.

Acknowledgments

We would like to thank Yang Gao and Oscar Beijbom
for helpful discussions about Compact Bilinear Pool-
ing. This work was supported by DARPA, AFRL,
DoD MURI award N000141110688, NSF awards
IIS-1427425 and IIS-1212798, and the Berkeley Ar-
tiﬁcial Intelligence Research (BAIR) Lab.

References

[Andreas et al.2016a] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016a. Learning to
compose neural networks for question answering. In
Proceedings of the Conference of the North American
Chapter of the Association for Computational Linguis-
tics (NAACL).

[Andreas et al.2016b] Jacob Andreas, Marcus Rohrbach,
Trevor Darrell, and Dan Klein. 2016b. Neural module
networks. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Antol et al.2015] Stanislaw Antol, Aishwarya Agrawal,
Jiasen Lu, Margaret Mitchell, Dhruv Batra, C Lawrence
Zitnick, and Devi Parikh. 2015. Vqa: Visual question
answering. In Proceedings of the IEEE International
Conference on Computer Vision (ICCV).

[Charikar et al.2002] Moses Charikar, Kevin Chen, and
Martin Farach-Colton. 2002. Finding frequent items
in data streams. In Automata, languages and program-
ming, pages 693–703. Springer.

[Deng et al.2009] J. Deng, W. Dong, R. Socher, L.-J. Li,
K. Li, and L. Fei-Fei. 2009.
ImageNet: A Large-
Scale Hierarchical Image Database. In Proceedings of
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Donahue et al.2013] Jeff Donahue, Yangqing Jia, Oriol
Vinyals, Judy Hoffman, Ning Zhang, Eric Tzeng, and
Trevor Darrell. 2013. Decaf: A deep convolutional
In
activation feature for generic visual recognition.
Proceedings of the International Conference on Ma-
chine Learning (ICML).

[Escalante et al.2010] Hugo Jair Escalante, Carlos A
Hern´andez, Jesus A Gonzalez, Aurelio L´opez-L´opez,
Manuel Montes, Eduardo F Morales, L Enrique Sucar,
Luis Villase˜nor, and Michael Grubinger. 2010. The
segmented and annotated iapr tc-12 benchmark. Com-
puter Vision and Image Understanding, 114(4):419–
428.

[Frome et al.2013] Andrea Frome, Greg S Corrado, Jon
Shlens, Samy Bengio, Jeff Dean, Tomas Mikolov, et al.
2013. Devise: A deep visual-semantic embedding
model. In Advances in Neural Information Process-
ing Systems (NIPS).

[Gao et al.2016] Yang Gao, Oscar Beijbom, Ning Zhang,
and Trevor Darrell. 2016. Compact bilinear pooling.
In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR).

[Girshick2015] Ross Girshick. 2015. Fast R-CNN. In
Proceedings of the IEEE International Conference on
Computer Vision (ICCV).

[Gong et al.2014] Yunchao Gong, Liwei Wang, Micah Ho-
dosh, Julia Hockenmaier, and Svetlana Lazebnik. 2014.
Improving image-sentence embeddings using large

weakly annotated photo collections. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Grubinger et al.2006] Michael Grubinger, Paul Clough,
Henning M¨uller, and Thomas Deselaers. 2006. The
iapr tc-12 benchmark: A new evaluation resource for
visual information systems. In International Workshop
OntoImage, volume 5, page 10.

[Hardoon et al.2004] David R Hardoon, Sandor Szedmak,
and John Shawe-Taylor. 2004. Canonical correlation
analysis: An overview with application to learning
methods. Neural computation, 16(12):2639–2664.
[He et al.2015] Kaiming He, Xiangyu Zhang, Shaoqing
Ren, and Jian Sun. 2015. Deep residual learning for
image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition
(CVPR).

[Hodosh et al.2014] Peter Hodosh, Alice Young, Micah
Lai, and Julia Hockenmaier. 2014. From image de-
scriptions to visual denotations: New similarity met-
rics for semantic inference over event descriptions. In
Transactions of the Association for Computational Lin-
guistics (TACL).

[Hu et al.2016a] Ronghang Hu, Marcus Rohrbach, and
Trevor Darrell. 2016a. Segmentation from natural
language expressions. In Proceedings of the European
Conference on Computer Vision (ECCV).

[Hu et al.2016b] Ronghang Hu, Huazhe Xu, Marcus
Rohrbach, Jiashi Feng, Kate Saenko, and Trevor Dar-
rell. 2016b. Natural language object retrieval. In Pro-
ceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR).

[Ilievski et al.2016] Ilija Ilievski, Shuicheng Yan, and Ji-
ashi Feng. 2016. A focused dynamic attention model
for visual question answering. arXiv:1604.01485.

[Ioffe and Szegedy2015] Sergey Ioffe

and Christian
Szegedy. 2015. Batch normalization: Accelerating
deep network training by reducing internal covariate
shift. In Proceedings of the International Conference
on Machine Learning (ICML).

[Karpathy and Fei-Fei2015] Andrej Karpathy and Li Fei-
Fei. 2015. Deep visual-semantic alignments for gener-
ating image descriptions. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Kazemzadeh et al.2014] Sahar Kazemzadeh, Vicente Or-
donez, Mark Matten, and Tamara L. Berg.
2014.
Referit game: Referring to objects in photographs of
natural scenes. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).

[Kingma and Ba2014] Diederik Kingma and Jimmy Ba.
2014. Adam: A method for stochastic optimization. In
Proceedings of the International Conference on Learn-
ing Representations (ICLR).

[Kiros et al.2014] Ryan Kiros, Ruslan Salakhutdinov, and
Rich Zemel. 2014. Multimodal neural language mod-
els. In Proceedings of the International Conference on
Machine Learning (ICML), pages 595–603.

[Kiros et al.2015] Ryan Kiros, Yukun Zhu, Ruslan
Salakhutdinov, Richard S Zemel, Antonio Torralba,
Raquel Urtasun, and Sanja Fidler. 2015. Skip-thought
vectors. In Advances in Neural Information Processing
Systems (NIPS).

[Klein et al.2015] Benjamin Klein, Guy Lev, Gil Sadeh,
and Lior Wolf. 2015. Fisher vectors derived from
hybrid gaussian-laplacian mixture models for image
annotation. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Krishna et al.2016] Ranjay Krishna, Yuke Zhu, Oliver
Groth, Justin Johnson, Kenji Hata, Joshua Kravitz,
Stephanie Chen, Yannis Kalantidis, Li-Jia Li, David A
Shamma, Michael Bernstein, and Li Fei-Fei. 2016.
Visual genome:
Connecting language and vi-
sion using crowdsourced dense image annotations.
arXiv:1602.07332.

[Kumar et al.2016] Ankit Kumar, Ozan Irsoy, Jonathan Su,
James Bradbury, Robert English, Brian Pierce, Peter
Ondruska, Ishaan Gulrajani, and Richard Socher. 2016.
Ask me anything: Dynamic memory networks for natu-
ral language processing. In Proceedings of the Interna-
tional Conference on Machine Learning (ICML).
[Lin et al.2014] Tsung-Yi Lin, Michael Maire, Serge Be-
longie, James Hays, Pietro Perona, Deva Ramanan,
Piotr Doll´ar, and C Lawrence Zitnick. 2014. Microsoft
coco: Common objects in context. In Proceedings of
the European Conference on Computer Vision (ECCV).
[Lin et al.2015] Tsung-Yu Lin, Aruni RoyChowdhury, and
Subhransu Maji. 2015. Bilinear cnn models for ﬁne-
grained visual recognition. In Proceedings of the IEEE
International Conference on Computer Vision (ICCV).
[Lu et al.2016] Jiasen Lu, Jianwei Yang, Dhruv Batra, and
Devi Parikh. 2016. Hierarchical Co-Attention for Vi-
sual Question Answering. In Advances in Neural Infor-
mation Processing Systems (NIPS).

[Malinowski et al.2016] Mateusz Malinowski, Marcus
Rohrbach, and Mario Fritz. 2016. Ask Your Neu-
rons: A Deep Learning Approach to Visual Question
Answering. arXiv: 1605.02697.

[Mao et al.2015] Junhua Mao, Wei Xu, Yi Yang, Jiang
Wang, Zhiheng Huang, and Alan Yuille. 2015. Deep
captioning with multimodal recurrent neural networks
(m-rnn). In Proceedings of the International Confer-
ence on Learning Representations (ICLR).

[Ngiam et al.2011] Jiquan Ngiam, Aditya Khosla, Mingyu
Kim, Juhan Nam, Honglak Lee, and Andrew Y Ng.
2011. Multimodal deep learning. In Proceedings of
the International Conference on Machine Learning
(ICML), pages 689–696.

[Noh et al.2015] Hyeonwoo Noh, Paul Hongsuck Seo, and
Bohyung Han. 2015. Image question answering using
convolutional neural network with dynamic parameter
prediction. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition (CVPR).
[Pennington et al.2014] Jeffrey Pennington, Richard
Socher, and Christopher D. Manning. 2014. Glove:
Global vectors for word representation. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP).

[Pham and Pagh2013] Ninh Pham and Rasmus Pagh.
2013. Fast and scalable polynomial kernels via ex-
plicit feature maps. In Proceedings of the 19th ACM
SIGKDD International Conference on Knowledge Dis-
covery and Data Mining, KDD ’13, pages 239–247,
New York, NY, USA. ACM.

[Plummer et al.2015] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2015. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. In Proceedings of the IEEE Interna-
tional Conference on Computer Vision (ICCV).

[Plummer et al.2016] Bryan Plummer, Liwei Wang, Chris
Cervantes, Juan Caicedo, Julia Hockenmaier, and Svet-
lana Lazebnik. 2016. Flickr30k entities: Collecting
region-to-phrase correspondences for richer image-to-
sentence models. arXiv:1505.04870v3.

[Rohrbach et al.2016] Anna Rohrbach, Marcus Rohrbach,
Ronghang Hu, Trevor Darrell, and Bernt Schiele. 2016.
Grounding of textual phrases in images by reconstruc-
tion. In Proceedings of the European Conference on
Computer Vision (ECCV).

[Simonyan and Zisserman2014] Karen Simonyan and An-
drew Zisserman. 2014. Very deep convolutional net-
works for large-scale image recognition. In Proceed-
ings of the International Conference on Learning Rep-
resentations (ICLR).

[Socher et al.2014] Richard Socher, Andrej Karpathy,
Quoc V Le, Christopher D Manning, and Andrew Y Ng.
2014. Grounded compositional semantics for ﬁnding
and describing images with sentences. Transactions of
the Association for Computational Linguistics, 2:207–
218.

[Sutskever et al.2014] Ilya Sutskever, Oriol Vinyals, and
Quoc V. V Le. 2014. Sequence to sequence learning
with neural networks. In Advances in Neural Informa-
tion Processing Systems (NIPS).

[Tenenbaum and Freeman2000] Joshua B Tenenbaum and
William T Freeman. 2000. Separating style and content
with bilinear models. Neural computation, 12(6):1247–
1283.

[Thomee et al.2015] Bart Thomee, David A. Shamma,
Gerald Friedland, Benjamin Elizalde, Karl Ni, Dou-
glas Poland, Damian Borth, and Li-Jia Li. 2015. The

new data and new challenges in multimedia research.
CoRR, abs/1503.01817.

ference on Computer Vision (ECCV), pages 391–405.
Springer.

[Uijlings et al.2013] Jasper RR Uijlings, Koen EA van de
Sande, Theo Gevers, and Arnold WM Smeulders. 2013.
Selective search for object recognition. International
Journal of Computer Vision (IJCV), 104(2).

[Wang et al.2016] Liwei Wang, Yin Li, and Svetlana
Lazebnik. 2016. Learning deep structure-preserving
image-text embeddings. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion (CVPR).

[Weston et al.2011] Jason Weston, Samy Bengio, and
Nicolas Usunier. 2011. Wsabie: Scaling up to large
vocabulary image annotation. In Proceedings of the In-
ternational Joint Conference on Artiﬁcial Intelligence
(IJCAI).

[Wu et al.2016] Qi Wu, Peng Wang, Chunhua Shen, An-
ton van den Hengel, and Anthony Dick. 2016. Ask
Me Anything: Free-form Visual Question Answering
Based on Knowledge from External Sources. In Proc.
IEEE Conf. Computer Vision Pattern Recognition.
[Xiong et al.2016] Caiming Xiong, Stephen Merity, and
Richard Socher. 2016. Dynamic memory networks for
visual and textual question answering. In Proceedings
of the International Conference on Machine Learning
(ICML).

[Xu and Saenko2016] Huijuan Xu and Kate Saenko. 2016.
Ask, attend and answer: Exploring question-guided spa-
tial attention for visual question answering. In Proceed-
ings of the European Conference on Computer Vision
(ECCV).

[Xu et al.2015] Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron
Courville, Ruslan Salakhutdinov, Richard Zemel, and
Yoshua Bengio. 2015. Show, attend and tell: Neural
image caption generation with visual attention. Pro-
ceedings of the International Conference on Machine
Learning (ICML).

[Yang et al.2015] Zichao Yang, Xiaodong He, Jianfeng
Gao, Li Deng, and Alex Smola.
2015. Stacked
attention networks for image question answering.
arXiv:1511.02274.

[Zhou et al.2015] Bolei Zhou, Yuandong Tian, Sainba-
yar Sukhbaatar, Arthur Szlam, and Rob Fergus.
2015. Simple baseline for visual question answering.
arXiv:1512.02167.

[Zhu et al.2016] Yuke Zhu, Oliver Groth, Michael Bern-
stein, and Li Fei-Fei. 2016. Visual7W: Grounded
In Proceedings of
Question Answering in Images.
the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR).

[Zitnick and Doll´ar2014] C Lawrence Zitnick and Piotr
Doll´ar. 2014. Edge boxes: Locating object propos-
als from edges. In Proceedings of the European Con-

