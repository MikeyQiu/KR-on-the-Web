7
1
0
2
 
c
e
D
 
1
1
 
 
]
L
C
.
s
c
[
 
 
1
v
5
6
6
3
0
.
2
1
7
1
:
v
i
X
r
a

Scale Up Event Extraction Learning via Automatic Training Data Generation

Ying Zeng 1 and Yansong Feng 1,∗ and Rong Ma 1 and Zheng Wang 2
Rui Yan 1 and Chongde Shi 3 and Dongyan Zhao 1
1 Institute of Computer Science and Technology, Peking University, P.R. China,
2 School of Computing and Communications, Lancaster University, UK,
3 Institute of Scientiﬁc and Technical Information of China

{ying.zeng, fengyansong, marongcs, ruiyan, zhaody}@pku.edu.cn

z.wang@lancaster.ac.uk

shcd@istic.ac.cn

Abstract

The task of event extraction has long been investigated in a
supervised learning paradigm, which is bound by the num-
ber and the quality of the training instances. Existing training
data must be manually generated through a combination of
expert domain knowledge and extensive human involvement.
However, due to drastic efforts required in annotating text, the
resultant datasets are usually small, which severally affects
the quality of the learned model, making it hard to general-
ize. Our work develops an automatic approach for generating
training data for event extraction. Our approach allows us to
scale up event extraction training instances from thousands
to hundreds of thousands, and it does this at a much lower
cost than a manual approach. We achieve this by employ-
ing distant supervision to automatically create event anno-
tations from unlabelled text using existing structured knowl-
edge bases or tables. We then develop a neural network model
with post inference to transfer the knowledge extracted from
structured knowledge bases to automatically annotate typed
events with corresponding arguments in text. We evaluate our
approach by using the knowledge extracted from Freebase
to label texts from Wikipedia articles. Experimental results
show that our approach can generate a large number of high-
quality training instances. We show that this large volume of
training data not only leads to a better event extractor, but also
allows us to detect multiple typed events.

Introduction
Event extraction is a key enabling technique for many natu-
ral language processing (NLP) tasks. The goal of event ex-
traction is to detect, from the text, the occurrence of events
with speciﬁc types, and to extract arguments (i.e. typed par-
ticipants or attributes) that are associated with an event. Cur-
rent event extractor systems are typically built through ap-
plying supervised learning to learn over labelled datasets.
This means that the performance of the learned model is
bound by the quality and coverage of the training datasets.

To generate training data for event extraction, existing ap-
proaches all require manually identifying – if an event oc-
curs and of what type – by examining the event trigger1 and

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

1A trigger is the word or phrase that clearly expresses the occur-
rence of an event. E.g., ex in ex-husband triggers a divorce event.

arguments from each individual training instance. This pro-
cess requires the involvement of linguists to design annota-
tion templates and rules for a set of predeﬁned event types,
and the employment of annotators to manually label if an
individual instance belongs to a predeﬁned event type.

To determine an event type, existing approaches all re-
quire explicitly identifying event triggers from text and as-
sign them with predeﬁned types, thus relies on human
to annotate training data. This makes the quality and the
number of the generated instances dependent on the skill
and available time of the annotators (Aguilar et al. 2014;
Song et al. 2015). To scale up event extractor training, we
therefore must take human annotators out from the loop of
data labeling.

This work develops a novel approach to automatically la-
bel training instances for event extraction. Our key insight
was that while event triggers are useful, they do not always
need to be explicitly captured. Structured knowledge bases
(KBs) such as Freebase already provide rich information of
event arguments, organizing as structured tables, to enable
us to automatically infer the event type. For example, sen-
tence “In 2002, WorldCom made its ﬁling for Chapter 11 in
New York.” describes a bankruptcy event; but this event does
not have to be identiﬁed through a bankrupt trigger (and in
fact such a trigger is missing in this sentence) – in this case,
several key arguments together also imply such an event.

If we can ﬁnd ways to exploit structured tables or lists, a
single entry can then be used to label many instances without
human annotations. Such an approach is known as distant
supervision (DS). Recent studies (Mintz et al. 2009; Zeng
et al. 2015) have demonstrated its effectiveness in various
NLP tasks. The central idea of DS is to use the knowledge
extracted from a known KB to distantly supervise the process
of training data generation.

We observe that the structured tables of Freebase and
Wikipedia can be useful for inferring event types. We then
design heuristics to identify what are the most important
properties, or key arguments, of a table entry in determin-
ing the occurrence of an event. We show that it is possible
to completely forgo explicit trigger information and entirely
rely on key arguments to determine event types. Using key
arguments, we can now develop an automatic approach to
generate training data for event extraction. Under this new
DS paradigm, we further propose a novel event extractor ar-

(a) An example sentence from Wikipedia

id

m.07bh4j7

company
acquired

Remedy
Corp

acquiring
company

BMC
Software

date

divisions formed

2004

Service Management
Business Unit

(b) Entry of business.acquisition in Freebase

Figure 1: The event type of the sentence shown in (a) can
be automatically inferred using the structured table given by
Freebase in (b).

chitecture based on neural networks and linear integer pro-
gramming. One of the key innovations of our approach is
that the model does not rely on explicit triggers. Instead, it
uses a set of key arguments to characterize an event type.
As a result, it eliminates the need to explicitly identify event
triggers, a process that requires heavy human involvement.
We evaluate our approach by applying it to sentence-level
event extraction. We have conducted intensive experiments
on multiple datasets generated using various knowledge re-
sources. Our experimental results conﬁrm that key argu-
ments are often sufﬁcient enough for infering event types.
Using the structured tables from FreeBase and Wikipedia,
we are able to automatically generate a large number of
training instances – resulting in a training dataset that is 14x
greater than the widely used ACE Challenge dataset(Dod-
dington et al. 2004), and our dataset was automatically con-
structed within hours instead of costing years of linguists
and annotators’ time. We show that the quality of the auto-
matically generated data is comparable to ones that would
be manually constructed by human experts. Using the larger
volume of training data, in combination of our novel event
extractor architecture, we can not only learn a highly effec-
tive event extraction system, but also unlock the potential
of multiple typed event detection – a feature that few of
the existing event extraction methods supports, but is much
needed.

Motivation
As a motivation example, consider the sentence in Fig-
ure 1(a). To detect the event, traditional approaches require
ﬁrst identifying the trigger word, sold, then assigning it with
a type of business.acquisition.

For this particular sentence, we argue that identifying
the trigger is not necessary for determining the event type.
Figure 1 (b) shows a Compound Value Type (CVT) en-
try from Freebase (FB) (Bollacker et al. 2008). Here, a
CVT organizes complex structured data with multiple prop-
erties in a table2. Using this CVT schema, one can eas-
ily map the three arguments of sentence S1, Remedy Corp,
BMC Software, and 2004, respectively to their proper-

ties, company acquired, acquiring company, and
date. Here each property essentially describes the role of
an argument in the sentence; and in combination, they deﬁne
a business.acquisition event.

This example shows that CVT information can be used to
infer event type without explicit trigger information. If we
can utilize such CVT information, we can then label sen-
tences without needing to explicitly identifying any triggers.
As a result, we can free annotators from the labour-intensive
manual process. In this work, we develop a simple, yet ef-
fective technique to automatically generate training data by
exploiting the prior CVT knowledge.

Training Data Generation
Our approach exploits structural information like FB CVT
tables to automatically annotate event mentions3, and gen-
erate training data to learn an event extractor. We use the
arguments of a CVT table entry to infer what event a sen-
tence is likely to express. A CVT table entry can have
multiple arguments, but not all of them are useful in de-
termining the occurrence of an event. For instance, the
divisions formed argument in Figure 1(b) is not as im-
portant as the other three arguments when determining if a
sentence expresses a business.acquisition event.

Our ﬁrst step for training data generation is to identify the
key arguments from a CVT table entry. A key argument is
an argument that plays an important role in one event, which
helps to distinguish with other events. If a sentence contains
all key arguments of an entry in an event table (e.g. a CVT
table), it is likely to express the event presented by the table
entry. If a sentence is labelled as an event mention of a CVT
event, we also record the words or phrases that match the
entry’s properties as the involved arguments, with the roles
speciﬁed by their corresponding property names.

Determining Key Arguments

We use the following formula to calculate the importance
score, Icvt,arg, of an argument arg (e.g., date) to its event
type cvt (e.g., business.acquisition):

Icvt,arg = log

count(cvt, arg)
count(cvt) × count(arg)

(1)

where count(cvt) is the number of instances of type cvt
within a CVT table, count(arg) is the number of times
arg appearing in all CVT types within a CVT table, and
count(cvt, arg) is the number of cvt instances that contain
arg across all CVT tables.

Our strategy for selecting key arguments of a given event

type is described as follows:

P1 For a CVT table with n arguments, we ﬁrst calculate
the importance score of each argument. We then consider
the top half (cid:6)n/2(cid:7) (rounding up) arguments that have the
highest importance scores as key arguments.

2Therefore, we also use the term “argument” to refer to a CVT

3An event mention is a phrase or sentence within which an event

property for the rest of paper.

is described, including its type and arguments.

id

company ac-
quired

acquiring
company

date

divisions formed

m.05nb3y7

aQuantive

Microsoft

2007

N/A

Table 1: A business.acquisition CVT entry in FB.

Figure 2: The dependency tree of S4, which partially
matches a CVT entry of people.marriage in FB.

P2 We ﬁnd that time-related arguments are useful in deter-
mining the event type, so we always include a time-related
argument4 (such as date) in the key argument set.

P3 We also remove sentences from the generated dataset
in which the dependency distances between any two key
arguments are greater than 2. The distance between two
arguments is the minimal number of hops it takes from
one argument to the other on the dependency parse tree
(see also Figure 2).

Using this strategy, the ﬁrst three arguments of the CVT
entry are considered to be key arguments for event type
business.acquisition.

Selection Criteria:
To determine how many arguments
should be chosen in P1, we have conducted a series of evalu-
ations on the quantity and quality of the datasets using differ-
ent policies. We found that choosing the top half arguments
gives the best accuracy for event labeling.

We use the following three example sentences from

Wikipedia to explain P2 and P3 described above.

S2: Microsoft spent $6.3 billion buying online display
advertising company aQuantive in 2007.

S3: Microsoft hopes aQuantive’s Brian McAndrews
can outfox Google.

S4: On April 29th, Elizabeth II and Prince Philip wit-
nessed the marriage of Prince William.

Although time-related arguments are often missing in the
currently imperfect KBs, they are crucial to identify the ac-
tual occurrence of an event. As an example, suppose we want
to use the CVT entry shown in Table 1 to determine whether
sentences S2 and S3 are business.acquistion events.
While this strategy works for S2, it gives a false prediction
for S3. If we add the time-related argument (i.e., date: 2007),
we can then correctly label both sentences. Therefore, we al-
ways consider the most important time-related argument as
key arguments (P2) when they are available.

4If there are multiple time-related arguments, we select the one

with highest importance score.

Finally, P3 is based on our intuitions that two arguments
involved in the same event mention are likely to be closer
within the syntactic structure. As shown in Figure 2, al-
though both Prince Philip and marriage can be matched as
key arguments in a people.marriage entry, but with a
distance of 3 (i.e., far from each other under our criterion)
on the dependency tree, thus S4 will be labeled as negative.

Data Generation
To generate training data, we follow a number of steps.

Our approach takes in existing structured tables or lists
that are organized in a way similar to the FB CVT tables. The
structured tables can be obtained from an existing knowl-
edge base, created by experts, or generated through a com-
bination of both approaches. For each event type, we de-
termine the key arguments for each entry within that type
used the key argument selection strategy described above.
This step produces a set of rules to be used for data labeling,
where each rule contains the event type, key arguments and
non-key arguments given by a structured table entry. We also
use alias information (such as Wikipedia redirect) to match
two arguments that have different literal names but refer to
the same entity (e.g. Microsoft and MS).

Next, we label each individual sentence from the target
dataset. The labeling process is straightforward. We enumer-
ate all rules from the generate rule set, and check if the tar-
get sentence contains all the key arguments speciﬁed by a
rule. We regard a sentence as a positive sample if it contains
all the key arguments of a rule, or negative otherwise. For
instances, S1 in Figure 1(a) and S2 (with its arguments in
italics and underlined) are positive examples, while S3 and
S4 are negative.

Because 68% of arguments in our dataset consist of more
than one word, we formulate the training in a sequence la-
beling paradigm rather than word-level classiﬁcations. We
tag each word of the sentence using the standard begin-
inside-outside (BIO) scheme, where each token is labeled
as B-role if it is the beginning of an event argument with
its role role, or I-role if it is inside a role, or O other-
wise. We call this a labeling sequence.

Limitations
Our approach relies on structured tables or lists to automat-
ically label text. The table can be obtained from an existing
KB or hand-crafted by experts. We stress that providing a ta-
ble incurs much less overhead than manually tagging each
training sentence, as a single table entry can be automati-
cally applied to an unbounded number of sentences.

Our implementation may beneﬁt from pronoun resolu-
tion and entity coreference, which is complementary to our
method, and may improve our recall. While this work tar-
gets the sentence level, we believe it is generally applicable.
There are methods like event coreference resolution(Liao
and Grishman 2010; Berant et al. 2014), can be used to ex-
tend our approach to document-level event extraction.

Event Extraction
Unlike prior works, our approach does not rely on explicit
trigger identiﬁcation. Instead, it uses key arguments to detect

Figure 3: Our 2-stage event extraction pipeline.

the occurrence of an event. We solve the problem in a 2-stage
pipeline, depicted in Figure 3, which takes raw text as input
and outputs labeling sequence(s) and event type(s)– if any
event is detected.

The ﬁrst stage identiﬁes the key arguments in a sentence.
If a sentence contains all key arguments of a speciﬁc event
type, it will be considered to imply an event mention of this
speciﬁed type. Since at this stage we do not concern non-
key arguments, all non-key argument tokens are tagged as O.
Furthermore, multiple labeling sequences may be produced
by this stage, each corresponds to an event type. The second
stage takes in the outputs of the ﬁrst stage, and detects all
the non-key arguments.

Stage 1: Key Argument and Event Detection
The model used in stage 1 consists of a Bidirectional Long
Short-Term Memory (BLSTM) network with a conditional
random ﬁeld (Lafferty, McCallum, and Pereira 2001) (CRF)
layer and an Integer Linear Programming (ILP) based post
inference. The BLSTM-CRF layer ﬁnds the optimal label-
ing sequence which will then be post-processed by an ILP
solver. Using the labeling sequence, an event detector then
checks if the sentence mentions a speciﬁc event.

BLSTM At each time t, a forward LSTM layer takes xt
−→
h t of the past con-
as input and computes the output vector
text, while a backward LSTM layer reads the same sentence
←−
h t given the future context. We con-
in reverse and outputs
catenate these two vectors to form the output vector of a
BLSTM, which is fed into a softmax layer to estimate a
probability distribution over all possible labels.

CRF Choosing the best label for each word individually
according to the BLSTM ignores the dependencies between
labels, thus cannot guarantee the best sequence. Therefore,
we introduce a CRF layer over the BLSTM output.

We consider P to be a matrix of conﬁdence scores output
by BLSTM, and the element Pi,j of the matrix denotes the
probability of the label j for the i-th word in a sentence. The
CRF layer takes a transition matrix A as parameter, where
Ai,j represents the score of a transition from label i to label
j. The score of a sentence w along with a path of labels
y = {y1, y2, . . . , yn} is measured by the sum of BLSTM
outputs and transition scores:

score(w, y) =

Pi,yi +

Ayi,yi+1

(2)

n
(cid:88)

i=0

n
(cid:88)

i=1

During test, given a sentence w, we adopt the Viterbi algo-
rithm (Rabiner 1989) to ﬁnd the optimal label sequence with

the maximum score among all possible label sequences.

ILP-based Post Inference The output sequences of
BLSTM-CRF do not necessarily satisfy the structural con-
straints of event extraction. We thus propose to apply ILP
to further globally optimize the BLSTM-CRF output to pro-
duce the best label sequence. Formally, let L be the set of
possible argument labels. For each word wi in the sentence
w and a pair of labels (cid:104)l, l(cid:48)(cid:105) ∈ L×L, we create a binary vari-
able vi,l,l(cid:48) ∈ {0, 1}, denoting whether or not the i-th word
wi is tagged as label l and its following word wi+1 is tagged
as label l(cid:48) at the same time. The objective of ILP is to maxi-
mize the overall score of the variables as:

(cid:88)

i,l,l(cid:48)

vi,l,l(cid:48) ∗ (Pi,l + Al,l(cid:48)).

(3)

(4)

where we consider the following four constraints:

C1: Each word should be and only be annotated with one

label, i.e.:

(cid:88)

l,l(cid:48)

vi,l,l(cid:48) = 1

C2: If the value of vi,l,l(cid:48) is 1, then there has to be a label

l∗ that will make vi+1,l(cid:48),l∗ equal to 1, i.e.:

(cid:88)

vi,l,l(cid:48) =

vi+1,l(cid:48),l∗

l∗
C3: If the current label is I-arg, then its previous label

must be B-arg or I-arg, i.e.:

vi,I-arg,l(cid:48) = vi−1,B-arg,I-arg + vi−1,I-arg,I-arg

(5)

C4: For a speciﬁc event type, all its key arguments should
co-occur in the sentence, or none of them appears in the re-
sulting sequence. For any pair of key arguments arg1 and
arg2 with respect to the same event type, the variables re-
lated to them are subject to:

(cid:88)

i,l(cid:48)

vi,B-arg1,l(cid:48) ≤ n ∗

vj,B-arg2,l∗

j,l∗

(6)

(cid:88)

where n is the length of the sentence.

Event Detection This step simply checks if the input sen-
tence contains all the key arguments of a speciﬁc event type
by examining the labeling sequence.

Multiple Typed Events There are scenarios where one
sentence expresses multiple events which share some key
arguments, but most current event extractors only map a
sentence to one event. For example, in S5, Kevin Spacey
is the actor of a film performance event and a
tv appearance event triggered by the same word stared.

S5: Kevin Spacey
as Frank Underwood
in theNetﬂix series House of Cards, and later as
Tom Brand in Nine Lives.

stared

One of the advantages of our approach is that it can be eas-
ily extended to support multiple typed events. To do so, we
allow our ILP solver to output multiple optimal sequences.
Speciﬁcally, after our model outputs the best sequence st at
time t, we remove the previously best solutions {s1, . . . , st}

from the solution space, and re-run our solver to obtain the
next optimal sequences st+1. We repeat the optimization
procedure until the difference between the scores of s1 and
sT is greater than a threshold λ, and consider all solutions
{s1, s2, . . . , sT −1} as the optimal label sequences. We use
Gurobi (Gurobi Optimization 2016) as our ILP solver and
set λ = 0.5 × n, which averagely produce 1.07 optimal se-
quences for each sentence.

Stage 2: Non-key Argument Detection
After event detection, a sentence will be classiﬁed into one
or more event types, and labeled with the corresponding key
arguments. We next adopt the same BLSTM-CRF architec-
ture to detect the remaining non-key arguments, where we
encode the key-argument label (from the ﬁrst stage) of each
word into a key-argument feature vector through a look-up
table, and concatenate it with the original word embedding
as the input to a new BLSTM-CRF. Note that we do not need
post inference here, because there is no structural constraints
between non-key arguments.

Experiments
Our experiments are designed to answer: (1) whether it is
possible to automatically collect training data for event ex-
traction, (2) whether extractors trained on such data can de-
tect events of interest and identify their corresponding ar-
guments, and (3) whether our solution can work with other
knowledge resources for more types of event.

Dataset Evaluation
We start by comparing key argument selection strategies: (1)
ALL: uses all arguments as key arguments; (2) IMP: uses the
top half arguments with highest importance scores as key
arguments; (3) IMP&TIME: includes a time-related argu-
ment together with the arguments selected by IMP; and (4)
DIS: eliminate sentences where the dependency distances
between any two key arguments are greater than 2. We use
the above methods to collect datasets using Freebase and the
English Wikipedia dump of 2016-11-20, by randomly se-
lecting 100 sentences from each dataset, and ask two anno-
tators to decide if each sentence implies a given event type.
As shown in Table 2, it is not surprising that ALL, as
the most strict, guarantees the quality of the collected data,
but only contributes 203 sentences covering 9 event types,
which is far from sufﬁcient for further applications. IMP re-
laxes ALL by allowing the absence of non-key arguments,
which expands the resulting dataset, but introduces more
noise. We can also see that the dependency constraint (DIS)
improves the data quality (IMP+DIS). Compared with IMP,
the signiﬁcant quality improvement by IMP&TIME proves
that time-related arguments within CVT schemas are criti-
cal to imply an event occurrence. Among all strategies, the
dataset by IMP&TIME+DIS achieves the best quality, while
still accounting for 46735 sentences with 50109 events, al-
most 10 times more than the ACE dataset, showing that
it is feasible to automatically collect quality training data
for event extraction without either human-designed event
schemas or extra human annotations.

Strategy

Sentences

Type

Positive Percentage (%)

ALL
IMP
IMP+DIS
IMP&TIME
IMP&TIME+DIS

203
318K
170K
112K
46K

9
24
24
24
24

98%
22%
37%
83%
91%

Table 2: Statistics of the datasets built with different strate-
gies. Type the number of different CVT types found.

Event types

Trigger candidates

Percentage

ﬁlm performance
award honor
education
acquisition
employ.tenure

play, appear, star, cast, portray
win, receive, award, share, earn
graduate, receive, attend, obtain, study
acquire, purchase, buy, merge, sell
be, join, become, serve, appoint

0.72
0.91
0.83
0.81
0.79

Table 3: Top 5 most frequent trigger candidates and their
proportions over all positive instances within each type.

Our ﬁnal dataset, FBWiki, using IMP&TIME+DIS , con-
tains 46,735 positive sentences and 79,536 negative ones5 a
random split of 101,019 for training and 25,252 for testing.
There are on average 4.8 arguments per event, and in total,
5.5% instances labeled with more than two types of events.
Trigger Inference: To further explore the relationship be-
tween key arguments and triggers, we regard the least com-
mon ancestor of all key arguments in the dependency tree
as a trigger candidate. As listed in Table 3, these candidates
share similar meanings and are highly informative to the un-
derlying event types, showing that our key arguments with
necessary constraints can play the same role with explicit
triggers in identifying an event.
On ACE: We also test our strategy on the ACE dataset.
We ﬁrst collect all annotated events, without triggers, as
the knowledge base to compute the importance values for
all arguments, and select the key arguments for each ACE
event type accordingly. We follow IMP&TIME+DIS to ex-
amine every sentence whether it can be selected as an an-
notated instance within the ACE event types. Eventually, we
correctly obtain 3,448 sentences as positive instances, cov-
ering 64.7% of the original ACE dataset. We ﬁnd that the
main reason for the missing 35.3% is that many arguments
in the ACE dataset are pronouns, where our strategy is cur-
rently unable to treat pronouns as key arguments. However,
if a high-precision coreference resolution tool is available
to preprocess the document, our solution would be able to
automatically label more instances.

Extraction Setup

Next, we evaluate our event extractor on FBWiki with pre-
cision (P), recall (R), and F-measure (F) for each subtask.

5Besides trivial negative samples that have no matched argu-
ments, we randomly sample 34,837 negative instances that contain
only part of key arguments, and 21,866 sentences whose key argu-
ments violate the dependency constraint.

These metrics are computed according to the following stan-
dards of correctness. For event classiﬁcation, an event is cor-
rectly classiﬁed if its reference sentence contains all key ar-
guments of this event type. For key argument detection, an
event is correctly detected if its type and all of its key argu-
ments match a reference event within the same sentence. For
all argument detection, an event is correctly extracted if its
type and all of its arguments match a reference event within
the same sentence.
Training: All hyper-parameters are tuned on a develop-
ment split in the training set. During event detection, we set
the size of word embeddings to 200, the size of LSTM layer
to 100. In argument detection, we use the same size of word
embedding, while the size of LSTM layer is 150, and the
size of key argument embedding is 50. Word embeddings
are pre-trained using skip-gram word2vec (Mikolov et al.
2013) on English Wikipedia and ﬁne tuned during training.
We apply dropout (0.5) on both input and output layers.
Baselines: We compare our proposed model with three
baselines. The ﬁrst is a BLSTM model that takes word em-
beddings as input, and outputs the label for each word with
the maximum probability. For feature-based methods, we
apply CRF (using the CRF++ toolkit (Kudo 2005) ) and
Maximum Entropy (Berger, Pietra, and Pietra 1996) (Le
Zhang’s MaxEnt toolkit) to explore a variety of elaborate
features, according to the state-of-art feature-based ACE
event extractors (Li, Ji, and Huang 2013). Note that after key
argument detection, we add the resulting label of each word
as a supplementary feature to detect non-key arguments.

Compare with Automatic Annotations
Firstly, we compare the model output against the automat-
ically obtained event annotations. As shown in Table 4,
feature-based models perform worst in both event classiﬁ-
cation and argument detection. One of the main reasons is
the absence of explicit trigger annotations in our dataset,
which makes it impossible to include trigger-related fea-
tures, e.g., trigger-related dependency and position features.
Although traditional models can achieve higher precisions,
they only identify a limited number of events, resulting in
low recalls. Neural-network methods perform much better
than feature-based models, especially in recall, since they
can make better use of word semantic features. Speciﬁcally,
BLSTM can capture longer dependencies and richer con-
textual information, instead of neighbouring word features
only. The CRF layer brings an averagely 2% improvement in
all metrics, and by adding the ILP-based post inference, our
full model, BLSTM-CRF-ILPmulti, achieves the best per-
formance among all models.

It is not surprising that every model with a CRF layer
over its BLSTM layer is superior to the one with a BLSTM
layer only. Compared with vanilla BLSTM, BLSTM-CRF
achieves higher precisions and recalls in all subtasks by
signiﬁcantly reducing the invalid labelling sequences (e.g.,
I-arg appears right after O). During prediction, instead of
tagging each token independently, BLSTM-CRF takes into
account the constraints between neighbouring labels, and
potentially increases the co-occurrences of key arguments
regarding the same event type.

As shown in Table 4, the ILP-based post inference con-
siderably improves the overall performance, especially in
event type classiﬁcation. With the help of constraint C4, du-
bious key arguments can be correctly inferred through other
key arguments from their context. Compared with BLSTM-
CRF, BLSTM-CRF-ILP1 produces an F1 gain of 3.2% in
event type classiﬁcation, 1.5% in key argument detection,
and 1.2% in all argument detection.
Multiple Type Events: Among all methods, BLSTM-CRF-
ILPmulti is the only model that can deal with multiple type
event mentions. The proposed strategy ILPmulti helps de-
tect more event mentions for a sentence, contributing to the
increase of recalls, and F1 scores with a little drop of pre-
cisions. BLSTM-CRF-ILPmulti can correctly identify 132
sentences with multiple type events, with an accuracy of
95.6%, and for each involved event, our model maintains
a high performance in identifying its arguments, achieving
45.5%, and 29.1% in F1 for key argument detection and all
argument detection, respectively.

Manual Evaluation
To provide a deep investigation about our dataset and mod-
els, we randomly sample 150 sentences from the test set.
Two annotators are asked to annotate each sentence follow-
ing two steps. First, determine if a given sentence is positive
or negative, and assign all possible event types to positive
ones. Next, label all related arguments and their roles ac-
cording to the event types for all positive instances. Two an-
notators will independently annotate each sentence, and dis-
cuss to reach an agreement. The inter-annotator agreement
is 87% for event types and 79% for arguments.

By comparing the automatic and manual annotations on
the 150 sentences, we ﬁnd that the main issue for the au-
tomatic annotation is that some automatically labeled sen-
tences do not imply any event while still matching all key
properties of certain CVT entries in Freebase. We ﬁnd 16
such instances that are mistakenly labeled as positive. For
example in Figure 4, although the phrase the car in S6
matches a ﬁlm name, it does not refer to a ﬁlm. This is be-
cause that we currently do not have a strong entity linker to
verify those entities, which we leave for future work. How-
ever, during manual investigation, BLSTM-CRF-ILPmulti
can correctly identify these 6 instances as negative.

On this manually annotated dataset, we can observe simi-
lar trends with Table 4, and BLSTM-CRF-ILPmulti remains
the best performing model, achieving 80.7%, 56.4% and
36.3% in F1 scores for event type, key argument detection
and all argument detection, respectively.

Remarkably, our BLSTM-CRF-ILPmulti model can ﬁnd
more CVT instances that are currently not referenced in
Freebase. Our model detects two events in S7, while the ar-
guments of the tv.tv appearance event do not match any ex-
isting CVT instances in Freebase, which do not receive any
credit during automatic evaluation, but should be populated
into Freebase. This suggests that by learning from distant
supervision provided by Freebase, our model can be used to
populate or update Freebase instances in return.
On BBC News: We further apply our event extractor,
trained on FBWiki, to 397 BBC News articles (2017/04/18 –

Model

CRF
MaxEnt
BLSTM

BLSTM-CRF
BLSTM-CRF-ILP1
BLSTM-CRF-ILPmulti

Event Type
R
11.0
12.4
63.0

67.4
74.1
79.9

F
19.6
21.9
74.1

75.7
78.9
82.5

P
88.9
95.2
89.8

86.4
84.4
85.3

Key Argument Detection
R
4.47
5.40
45.5

F
7.96
9.56
53.5

P
36.1
41.6
64.9

63.6
62.3
60.4

49.6
53.8
55.3

55.8
57.3
57.7

All Argument Detection
R
3.06
3.40
27.7

31.0
33.8
34.6

F
5.30
5.91
33.7

36.5
37.7
37.9

P
19.9
22.5
42.9

44.4
42.7
41.9

Table 4: System performance when compared against automatic annotations (%).

Related Work
Most event extraction works are within the tasks deﬁned by
several evaluation frameworks (e.g., MUC (Grishman and
Sundheim 1996), ACE (Doddington et al. 2004), ERE (Song
et al. 2015) and TAC-KBP (Mitamura et al. 2015)), all of
which can be considered as a template-ﬁlling-based extrac-
tion task. These frameworks focus on limited number of
event types, which are designed and annotated by human
experts and hard to generalize to other domains. Further-
more, existing extraction systems, which usually adopt a
supervised learning paradigm, have to rely on those high-
quality training data within those frameworks, thus hard to
move to more domains in practice, regardless of feature-
based (Gupta and Ji 2009; Hong et al. 2011; Li, Ji, and
Huang 2013) or neural-network-based methods (Chen et al.
2015; Nguyen, Cho, and Grishman 2016).

Besides the works focusing on small human-labeled cor-
pora, Huang et al. (2016) and Chen et al.(2017) leverage var-
ious linguistic resources (e.g., FrameNet, VerbNet, etc.) to
automatically collect trigger annotations with more training
instances to improve existing event extractors. In contrast,
we propose to exploit various structured knowledge bases to
automatically discover types of events as well as their corre-
sponding argument settings, without expert annotations, and
further automatically construct training data, with the help
of DS.

Distant supervision (DS) has been widely used in binary
relation extraction, where the key assumption is that sen-
tences containing both the subject and object of a <subj,
rel, obj> triple can be seen as its support, and further used
to train a classiﬁer to identify the relation rel. However,
this assumption does not ﬁt to our event extraction scenario,
where an event usually involves several arguments and it is
hard to collect enough training sentences with all arguments
appearing in, as indicated by the low coverage of ALL. We
therefore investigate different generation strategies for event
extraction within the DS paradigm and propose to utilize
time and syntactic clues to reﬁne the DS assumption for bet-
ter data quality. We further relieve the reliance on explicit
trigger annotations required by previous event extractors,
and deﬁne a novel event extraction paradigm with key ar-
guments to characterize an event type.

Conclusions
This paper has presented a novel, fast approach to auto-
matically construct training data for event extraction with
little human involvement, which in turn allows effective

Figure 4: Example outputs of BLSTM-CRF-ILPmulti.

Event type

Entries

Positive

EC

KAD

AAD

Acquisition
Olympics
Awards

690
2503
3039

414
1460
2217

87.0%
77.2%
95.0%

72.0%
64.5%
82.8%

69.6%
38.6%
58.6%

Table 5: Statistics of the TBWiki dataset and the perfor-
mance (in F1) of our model on TBWiki. EC, KAD and AAD
denote event type classiﬁcation, key argument detection and
all key argument detection, respectively.

2017/05/18 in Politics, Business and TV sections), and man-
ually examine the extraction results. We ﬁnd that our model
is able to correctly identify 117 events, and 53 events, almost
half of which are not covered in the currently used Freebase.

Tables as Indirect Supervision

To investigate the applicability of our approach to other
structured knowledge/tables besides Freebase CVT tables,
we automatically build a new dataset, TBWiki, with the su-
pervision provided by Wikipedia tables, which characterize
events about business acquisition, winning of the Olympics
games, and awards winning in entertainment (Table 5).

We train our BLSTM-CRF-ILPmulti on this dataset and
evaluate it on 100 manually annotated sentences. We can see
that without extra human annotations, our model can learn
to extract events from the training data weakly supervised by
Wikipedia tables. Given a speciﬁc event type, as long as we
can acquire tables implying events of such type, it is possible
to automatically collect training data from such tables, and
learn to extract structured event representations of that type.

event extraction modeling. To generate training data, our
approach ﬁrst extracts, from existing structured knowledge
bases, which of the arguments best describe an event; then,
it uses the key arguments to automatically infer the occur-
rence of an event without explicit trigger identiﬁcation. To
perform event extraction, we develop a novel architecture
based on neural networks and post inference, which does not
require explicit trigger information. We apply our approach
to label Wikipedia articles using knowledge extracted from
various knowledge bases. We show that the quality of the
automatically generated training data is comparable to those
that were manually labeled by human experts. We demon-
strate that this large volume of high-quality training data,
combining with our novel event extraction architecture, not
only leads to a highly effective event extractor, but also en-
ables multiple typed event detection.

Acknowledgments
This work is supported by National High Technology R&D
Program of China (Grant No.2015AA015403), Natural Sci-
ence Foundation of China (Grant No. 61672057, 61672058,
71403257); the UK Engineering and Physical Sciences Re-
search Council under grants EP/M01567X/1 (SANDeRs)
and EP/M015793/1 (DIVIDEND); and the Royal Society
International Collaboration Grant (IE161012). For any cor-
respondence, please contact Yansong Feng.

References
[2014] Aguilar, J.; Beller, C.; McNamee, P.; Van Durme, B.;
Strassel, S.; Song, Z.; and Ellis, J. 2014. A comparison of the
events and relations across ace, ere, tac-kbp, and framenet
annotation standards. In Proceedings of the Second Work-
shop on EVENTS: Deﬁnition, Detection, Coreference, and
Representation, 45–53.
[2014] Berant, J.; Srikumar, V.; Chen, P.-C.; Vander Linden,
A.; Harding, B.; Huang, B.; Clark, P.; and Manning, C. D.
2014. Modeling biological processes for reading compre-
hension. In EMNLP.
[1996] Berger, A. L.; Pietra, V. J. D.; and Pietra, S. A. D.
1996. A maximum entropy approach to natural language
processing. Computational linguistics 22(1):39–71.
[2008] Bollacker, K.; Evans, C.; Paritosh, P.; Sturge, T.; and
Taylor, J. 2008. Freebase: a collaboratively created graph
In SIGMOD
database for structuring human knowledge.
2008, 1247–1250. ACM.
[2015] Chen, Y.; Xu, L.; Liu, K.; Zeng, D.; and Zhao, J.
2015. Event extraction via dynamic multi-pooling convo-
lutional neural networks. In ACL 2015, volume 1, 167–176.
[2017] Chen, Y.; Liu, S.; Zhang, X.; Liu, K.; and Zhao, J.
2017. Automatically labeled data generation for large scale
event extraction. In Proceedings of the 55th Annual Meeting
of the Association for Computational Linguistics (Volume 1:
Long Papers), volume 1, 409–419.
[2004] Doddington, G. R.; Mitchell, A.; Przybocki, M. A.;
Ramshaw, L. A.; Strassel, S.; and Weischedel, R. M. 2004.
The automatic content extraction (ace) program-tasks, data,
and evaluation. In LREC 2004, volume 2, 1.

[1996] Grishman, R., and Sundheim, B. 1996. Message un-
derstanding conference-6: A brief history. In COLING 1996,
volume 96, 466–471.
[2009] Gupta, P., and Ji, H. 2009. Predicting unknown
time arguments based on cross-event propagation. In ACL-
IJCNLP 2009, 369–372. Association for Computational
Linguistics.
[2016] Gurobi Optimization, I. 2016. Gurobi optimizer ref-
erence manual.
[2011] Hong, Y.; Zhang, J.; Ma, B.; Yao, J.; Zhou, G.; and
Zhu, Q. 2011. Using cross-entity inference to improve event
extraction. In ACL 2011, 1127–1136. Association for Com-
putational Linguistics.
[2016] Huang, L.; Cassidy, T.; Feng, X.; Ji, H.; Voss, C.; Han,
J.; and Sil, A. 2016. Liberal event extraction and event
schema induction. In ACL 2016.
[2005] Kudo, T. 2005. Crf++: Yet another crf toolkit. Soft-
ware available at http://crfpp. sourceforge. net.
[2001] Lafferty, J.; McCallum, A.; and Pereira, F. 2001. Con-
ditional random ﬁelds: Probabilistic models for segmenting
and labeling sequence data. In ICML 2001, volume 1, 282–
289.
[2013] Li, Q.; Ji, H.; and Huang, L. 2013. Joint event extrac-
tion via structured prediction with global features. In ACL
2013, 73–82.
[2010] Liao, S., and Grishman, R. 2010. Using document
level cross-event inference to improve event extraction. In
Proceedings of the 48th Annual Meeting of the Association
for Computational Linguistics, 789–797. Association for
Computational Linguistics.
[2013] Mikolov, T.; Sutskever, I.; Chen, K.; Corrado, G. S.;
and Dean, J. 2013. Distributed representations of words and
In NIPS 2013, 3111–
phrases and their compositionality.
3119.
[2009] Mintz, M.; Bills, S.; Snow, R.; and Jurafsky, D. 2009.
Distant supervision for relation extraction without labeled
In ACL-IJCNLP 2009, 1003–1011. Association for
data.
Computational Linguistics.
[2015] Mitamura, T.; Yamakawa, Y.; Holm, S.; Song, Z.;
Bies, A.; Kulick, S.; and Strassel, S. 2015. Event nugget
annotation: Processes and issues. In Proc. of the Workshop
on EVENTS at the NAACL-HLT, 66–76.
[2016] Nguyen, T. H.; Cho, K.; and Grishman, R. 2016. Joint
event extraction via recurrent neural networks. In NAACL-
HLT 2016, 300–309.
[1989] Rabiner, L. R. 1989. A tutorial on hidden markov
models and selected applications in speech recognition.
Proc. of the IEEE 77(2):257–286.
[2015] Song, Z.; Bies, A.; Strassel, S.; Riese, T.; Mott, J.;
Ellis, J.; Wright, J.; Kulick, S.; Ryant, N.; and Ma, X. 2015.
From light to rich ere: annotation of entities, relations, and
events. In Proc. of the Workshop on EVENTS at the NAACL-
HLT, 89–98.
[2015] Zeng, D.; Liu, K.; Chen, Y.; and Zhao, J. 2015. Dis-
tant supervision for relation extraction via piecewise convo-
lutional neural networks. In EMNLP 2015, 1753–1762.

