Joint Extraction of Entities and Relations with a Hierarchical
Multi-task Tagging Model

Zhepei Wei1, Yantao Jia2, Yuan Tian1,
Mohammad Javad Hosseini3, Mark Steedman3, Yi Chang1
1School of Artiﬁcial Intelligence, Jilin University, Changchun, China
2Huawei Technologies Co., Ltd, Beijing, China
3School of Informatics, University of Edinburgh, Edinburgh, Scotland
zhepei.wei@gmail.com, jamaths.h@163.com, yuantian@jlu.edu.cn,
{s1583634, steedman}@inf.ed.ac.uk, yichang@jlu.edu.cn

Abstract

Entity extraction and relation extraction are
two indispensable building blocks for knowl-
edge graph construction. Recent works on
entity and relation extraction have shown the
superiority of solving the two problems in
a joint manner, where entities and relations
are extracted simultaneously to form relational
triples in a knowledge graph. However, ex-
isting methods ignore the hierarchical seman-
tic interdependency between entity extraction
(EE) and joint extraction (JE), which leaves
In
much to be desired in real applications.
this work, we propose a hierarchical multi-
task tagging model, called HMT, which cap-
tures such interdependency and achieves bet-
ter performance for joint extraction of entities
and relations. Speciﬁcally, the EE task is or-
ganized at the bottom layer and JE task at the
top layer in a hierarchical structure. Further-
more, the learned semantic representation at
the lower level can be shared by the upper level
via multi-task learning. Experimental results
demonstrate the effectiveness of the proposed
model for joint extraction in comparison with
the state-of-the-art methods.

1

Introduction

Entity extraction and relation extraction are crucial
for building a large-scale knowledge graph (KG)
with entities of different types as nodes and rela-
tions among them as edges. The relational facts
in KGs are mostly stored in the form of triple
(h, r, t), in which h and t are the head and tail
entities respectively, and r is the relation between
them. Typical KGs include Google Knowledge
Graph (Singhal, 2012), Knowledge Vault (Dong
et al., 2014), YAGO (Suchanek et al., 2007), DB-
pedia (Auer et al., 2007), Freebase (Bollacker
et al., 2008), etc.

Previous works can be divided into two cate-
gories, namely, pipelined methods and joint meth-

ods. Pipelined methods like FCM (Gormley et al.,
2015) solve the problem in two steps: ﬁrst rec-
ognizing the entities and then classifying the re-
lations between extracted entities.
Intuitive and
ﬂexible though they may be, these methods ne-
glect the interaction between the two steps. Ad-
ditionally, they inevitably suffer from error propa-
gation problems (Li and Ji, 2014). That is to say,
the result of entity extraction may introduce noise
to the next step, and further affects the extracted
relations. To address these issues, joint methods
have been investigated and shown the effective-
ness of extracting entities and relations simulta-
neously through an integrated model.
In other
words, joint methods combine the two steps into
a single joint extraction (JE) task. Among them
are feature-based methods (Li and Ji, 2014; Miwa
and Sasaki, 2014; Ren et al., 2017) and neural
network-based methods (Zheng et al., 2017; Zeng
et al., 2018; Takanobu et al., 2019). However,
feature-based methods need complicated feature
engineering, which is time-consuming and labor-
intensive. They heavily rely on external natural
language processing tools for preliminary feature
extraction, leading to similarly erroneous delivery
to the pipelined methods. Recent works employ
neural network-based models to ease this issue and
gain considerable improvement in joint extraction
of entities and relations.

However, most existing methods ignore the in-
terdependency between entity extraction (EE) and
joint extraction (JE) tasks, in which the former ex-
tracts entities and assign each entity a tag indicat-
ing its type while the latter directly extracts re-
lational triples but without identifying the entity
type. In this paper, we propose to better perform
JE while solving the auxiliary EE task by utiliz-
ing the interdependency between them. The ex-
tracted entity types help to identify the head entity
and tail entity with respect to a relational triple to

9
1
0
2
 
g
u
A
 
3
2
 
 
]
L
C
.
s
c
[
 
 
1
v
2
7
6
8
0
.
8
0
9
1
:
v
i
X
r
a

Figure 1: An example of EE and JE tags. Based on the JE tags, we can obtain the extracted relational triples of
the input sentence. In this example, “CP” is the abbreviation for relation type “Country–President”. Note that the
JE task does not depend on the predicted tags of EE task, this ﬁgure is just for illustrating the interdependency
between two tasks.

be extracted in the JE task. In addition, the par-
tial overlap between EE and JE (they both recog-
nize entity boundaries) can further improve both
tasks via multi-task learning. Figure 1 shows an
example sentence and its tags assigned by the two
tasks. For a relational triple with relation type
“Country-President”, i.e., (head entity, Country-
President, tail entity).
It is supposed to take an
entity with type “LOC” as the head entity, and take
an entity with type “PER” as the tail one according
to the intrinsic semantic constraints of its relation
type. Inspired by such principle, we believe that
identifying the entity type “PER” of “Donald J.
Trump” and entity type “LOC” of “United States”
in EE will be of great help to obtain the relational
triple (United States, Country-President, Donald
J. Trump) in JE, as shown in Figure 1. To conclude
in brief, the interdependency between EE and JE
tasks mainly lie on two-folds: (1) Both tasks share
a partial overlap, and JE is a semantically higher-
level task to EE task. (2) To some extent, EE task
will compensate for JE task due to JE’s lack of
identifying entity types.

To model the interdependency and further im-
prove the performance of JE, we propose a hierar-
chical multi-task tagging (HMT) model to jointly
extract entities together with relations (i.e., rela-
tional triples) from texts. The utility of multi-task
learning (Caruana, 1993) owes to its capability of
introducing inductive bias between tasks (Ruder,
2017), which has been exploited to improve the
model’s performance in related area (e.g., rela-
tion extraction (Jiang, 2009)). Speciﬁcally, in this
work the EE task is organized at the bottom layer
and JE task at the top layer in a hierarchical struc-
ture. Furthermore, the learned semantic represen-
tation at the lower level can be shared by the up-
per level via multi-task learning. Each task is a
tagging module containing a bidirectional LSTM

(Bi-LSTM) encoder followed by a LSTM decoder.
The encoded vector in EE task is concatenated
with the embedding vector of the input sentence,
and then taken as the input of the encoder in JE
task. Such hierarchical parameter sharing is essen-
tially different from traditional hard/soft parame-
ter sharing (Ruder, 2017) that ignores the hierar-
chical interdependency between tasks. Each task
has its own module with independent parameters,
but meanwhile, there are partial overlap between
two tasks. Besides, we propose a multi-task ob-
jective function to train two tasks jointly, making
the shared parameters better optimized to convey
the learned semantic representation from EE to JE
task. In this manner, our proposed model is able
to utilize the interdependency between EE and JE.
What’s more, the model is also free from error
propagation problems because the JE does not rely
on the predicted tags of EE but on the learned se-
mantic representation produced by EE encoder.

The main contribution of this work are as fol-

lows:

1. To the best of our knowledge, we are the ﬁrst
to investigate the interdependency between
entity extraction and joint extraction tasks.

2. We propose a novel hierarchical multi-task
tagging model to jointly extract entities and
relations. In addition, we validate the model’s
capability of capturing such interdependency
by an ablation test.

3. Our model substantially outperforms the
state-of-the-art method on two widely used
public datasets NYT10 and NYT11 with
1.6% and 6.1% improvements in terms of F1-
score.

2 Related Work

Multi-task learning (MTL) (Caruana, 1997) is a
promising framework for improving general per-
formance,
in which multiple related tasks are
learned simultaneously in order to achieve bet-
ter performance for each individual task. Jiang
(2009)’s work is among the ﬁrst to indicate that
MTL can be naturally used for transferring lin-
guistic knowledge (e.g., semantic representation
and syntactic structure) since it models the com-
monality among tasks, and the proposed MTL
model achieves better performance in relation ex-
traction by treating classiﬁcation of different re-
lation types as related task. Similar to language
model pretraining (Radford et al., 2019), MTL has
been proven effective in learning general seman-
tic representation and transferring shared knowl-
edge among linguistic tasks (Liu et al., 2019). To
obtain further improvement, Rei (2017) combines
the two methods by introducing language mod-
eling task as a related task to some sequence la-
beling tasks, such as entity extraction, chunking
and POS tagging. Additionally, Ruder (2017) also
overviews the appliance of MTL in deep neural
networks and indicates that by sharing a common
hidden layer representation among related tasks,
the inductive bias between them can be obtained
through multi-task learning for improving the per-
formance. However, in previous works MTL is
typically done with either hard or soft parameter
sharing of hidden layers, which ignores the hierar-
chical interdependency between related tasks.

Recently, hierarchical multi-task learning has
been explored with deep neural networks and
shown the effectiveness in transfer learning for
sequence labeling problems (Yang et al., 2017).
Among the works on investigating the hierarchi-
cal semantic interdependency between linguistic
tasks, perhaps the most related work to ours is
(Sanh et al., 2019), which utilizes the semantic hi-
erarchy among related tasks to better perform em-
bedding learning. Moreover, it also suggests a hi-
erarchy for several semantic tasks, i.e., entity ex-
traction < entity mention detection < coreference
resolution = relation extraction. Although simi-
lar hierarchy between EE and JE seems intuitively
plausible, it has not been investigated in the task
of joint extraction of entities and relations with
hierarchical MTL. Our work conﬁrms this intu-
ition and shows such hierarchical interdependency
helps to better perform JE.

Previous works on entity extraction and rela-
tion extraction can be categorized into pipelined
methods and joint methods. The pipelined meth-
ods (Mintz et al., 2009; Gormley et al., 2015; Tang
et al., 2015) solve the problem by two steps: they
ﬁrst recognize entities in the sentence and then
classify the relations between the extracted en-
tities. This separated setting neglects the rele-
vance of the two steps and causes error propaga-
tion problems since the second step is unavoidably
affected by the errors introduced by the ﬁrst step.
To resolve the problem, many joint methods have
been proposed for extracting entities and relations
simultaneously. Early works (Li and Ji, 2014;
Miwa and Sasaki, 2014; Ren et al., 2017) employ
feature-based methods, which heavily depend on
feature engineering and require much manual ef-
forts. To reduce manual work, recent studies have
investigated neural network-based methods for
joint extraction. Miwa and Bansal (2016) propose
a LSTM-based neural network model to jointly ex-
tract entities and relations through parameter shar-
ing. Zheng et al. (2017) introduce a novel tagging
scheme for joint extraction and convert this task
into an end-to-end sequence tagging problem. In-
spired by (Zheng et al., 2017), our JE task employs
a similar tagging scheme. Wang et al. (2018) trans-
form the joint extraction task into a graph problem
by designing a novel graph scheme and propose
a neural transition-based parsing framework to
generate directed graph incrementally. Zeng et al.
(2018) adopt a sequence-to-sequence (Seq2Seq)
model with copy mechanism to extract multiple
relational triples. Takanobu et al. (2019) apply a
reinforcement learning framework to achieve joint
extraction by regarding the related entities as the
arguments of a relation.

However, most of these methods amount to
combining the two separated steps as described
in pipelined methods into a single joint extraction
task. Despite their success, none of them consider
the interdependency between entity extraction and
joint extraction. In this work, we propose a hierar-
chical multi-task tagging (HMT) method to model
such interdependency and jointly extract entities
and relations.

3 Hierarchical Multi-task Tagging Model

In this section, we elaborate the design of two tag-
ging tasks in a hierarchical setting, namely en-
tity extraction (EE) task and joint extraction (JE)

word position. The entity type includes person
(PER), location (LOC), organization (ORG) and
miscellaneous (MISC). The word position con-
tains “BIES”, where “BIE” represents the position
of a word in an entity as begin, inside and end,
and “S” represents the word is a singleton entity
(an entity mention with only one word).

For the JE task, each tag is composed of three
parts: relation type, relation role and word posi-
tion with respect to the relational triple form of
(h, r, t). Different from the EE task, we use the
“BIO” scheme due to the observation (from our
empirical experiments) that increasing the num-
ber of candidate tags will hurt the performance
of JE task. The relation type is predeﬁned in
the corpus and relation role is either head entity
(E1) or tail entity (E2). The word position part
is similar to that in EE task. Figure 1 presents
an example illustrating the two tagging schemes.
Here we take the JE tags for example in detail
and show how we obtain the relational triples
based on the tags. “Donald” is the ﬁrst word of
entity “Donald J. Trump”, which is involved in
the relation “Country–President” as the tail entity.
Hence, the tag of “Donald” is “CP-E2-B”. Mean-
while, the ﬁrst word “United” in “United States”
is tagged as “CP-E1-B” since “United States” is
involved in the relation “Country–President” as
the head entity. To obtain the ﬁnal relational
triples, we combine the entities with the same re-
lation type according to their tags. Now we know
“Donald J. Trump” and “United States” share the
same relation type “Country–President” as well
as their respective role in the relation. So the ﬁ-
nal extracted result of JE task is (United States,
Country–President, Donald J. Trump).

3.1 Embedding Layer

Word embedding is proposed (Hinton, 1986) to
convert the words into vector representations to
capture the syntactic and semantic meanings of
words. An input sentence s = {x1, x2, ..., xn},
where xi is the i-th word, can be represented by a
sequence of vectors {w1, w2, ..., wn} and then fed
into neural networks.

We use an embedding layer to transform the 1-
hot represented words to dense vectors with the
pre-trained Glove (Pennington et al., 2014) word
embedding weights1. The word embeddings are

1https://nlp.stanford.edu/projects/

glove/

Figure 2: The structure of the proposed HMT model.
Each task is a tagging module consisting of a Bi-LSTM
encoder and a LSTM decoder.

task. Given the input sentence, the EE task rec-
ognizes the entity mentions as well as their types
while the JE task recognizes the entity mentions as
well as their involved relations but without identi-
fying the entity types. In this setting, the proposed
HMT model is able to capture the interdependency
between EE and JE via multi-task learning and
jointly extract entities and relations in an end-to-
end fashion. Figure 2 shows the structure of the
proposed model.

More precisely, an input natural language sen-
tence is ﬁrstly converted into dense vector repre-
sentation, namely word embeddings, by embed-
ding layer and then fed into higher levels, i.e., EE
task and JE task. Each task is a tagging mod-
ule with the same encoder-decoder structure, in
which a bidirectional long short-term memory (Bi-
LSTM) layer is used as encoder and a LSTM layer
is used as decoder. To capture the interdependency
between the two tasks, the encoded vector of EE
task is concatenated with input word embeddings
and then fed into the encoder of JE task.

Before going deep inside the neural network,
we ﬁrst introduce the tagging schemes of the two
tasks. There are two popular tagging schemes
in the realm of sequence tagging tasks, namely
“BIOES” (Begin, Inside, Outside, End, Single)
scheme and “BIO” scheme. Previous works (Dai
et al., 2015; Yang et al., 2018) have proved that
models using “BIOES” are better than those using
“BIO” in most cases. In this work, for EE task,
we also apply the widely used “BIOES” scheme
to assign a unique tag for each word. Speciﬁcally,
tag “O” means the corresponding word is irrele-
vant to the extracted result and other tags except
“O” are composed of two parts: entity type and

Figure 3: The Hierarchical Multi-task Tagging Model. The left part represents the EE task and the right one is JE
task. Both of them hold the same encoder-decoder structure, and they are organized in a hierarchical setting as
shown above. “En” represents encoder and “De” represents decoder.

ﬁne-tuned during training.

3.2 Encoder-Decoder Module

As shown in Figure 2, our EE and JE tasks adopt
the same encoder-decoder structure. The minor
difference between them is the input of their en-
coders, which is described in the following sec-
tions.

3.2.1 Bi-LSTM Encoder

Lample et al. (2016) have proved bidirectional
long short-term memory (Bi-LSTM) to be effec-
tive for capturing semantic information for each
word in the input sentence by processing the se-
quence in both directions with two parallel LSTM
layers. In this work, we use a popular LSTM vari-
ant introduced by (Gers and Schmidhuber, 2000).
The detailed operations are as follows:

ft = σ(Wfxxt + Wfhht−1 + Wfcct−1 + bf )
it = σ(Wixxt + Wihht−1 + Wicct−1 + bi)
ct = ftct−1 + it tanh(Wcxxt + Wchht−1 + bc)
ot = σ(Woxxt + Wohht−1 + Wocct + bo)
ht = ot tanh(ct)

(1)

where at time step t (1 ≤ t ≤ n), xt, ht and ct are
input vector, hidden state vector and cell state vec-
tor respectively, ft, it and ot are forget gate, input
gate and output gate respectively, and b(.) is the

bias weight. For each input xt in a sequence of
length n, the forward LSTM encodes xt by con-
sidering the contextual information from x1 to xt,
−→
ht. Simi-
and the encoded vector is denoted as
larly, the backward LSTM encodes xt based on
the contextual information from xn to xt, and the
←−
ht. We then concate-
encoded vector is denoted as
←−
ht to represent the t-th word of the
nate
input sequence and denote it as hEn

−→
ht and

←−
ht].

−→
ht,

t = [

As for the difference between the encoders in
EE and JE tasks, the input of the EE encoder is the
word embedding vector wt of t-th word xt, i.e.,
xt = wt. For JE task, the input of the encoder is
the concatenation of embedding vector wt and en-
coded vector hEn
from EE task as shown in Fig-
ure 3.

t

3.2.2 LSTM Decoder
We also design a novel LSTM decoder to predict
the tag sequences. To explicitly model the inter-
actions between tags, we fuse the tag information
into the input of LSTM at each time step t. The
detailed operations are as follows:

ft = σ(WfT Tt−1 + Wfhht−1 + bf )
it = σ(WiT Tt−1 + Wihht−1 + bi)
ct = ftct−1 + it tanh(WcT Tt−1 + Wchht−1 + bc)
ot = σ(WoT Tt−1 + Wohht−1 + bo)
ht = ot tanh(ct)

(2)

where Tt is the predicted tag vector of the t-th
word xt. The decoder hidden state vector at time
step t is denoted as hDe
, which is concatenated
t
with encoded vector hEn
for computing Tt:

t

Tt = WT [hEn

t

, hDe
t

] + bT

(3)

We can then compute the tag probability for the
t-th word xt in sentence sj based on the predicted
tag vector Tt:

yt = WyTt + by

p(yi

t|sj, θ) =

exp(yi
t)
k=1 exp(yk
t )

(cid:80)Nt

(4)

(5)

where p(yi
t|sj, θ) is the probability of assigning
the i-th tag to the t-th word xt in sentence sj, θ
is the model parameter and Nt is the number of
tags.

Note that the proposed decoder is non-trivial,
since the tag interactions are vital for sequence la-
beling (Vaswani et al., 2016). Different from the
traditional decoder (e.g., vanilla LSTM or CRF)
that only takes encoded vector as input and ignores
the tag interactions, our decoder can model such
interactions by taking the former tag information
into consideration as well.

3.3 Multi-task Objective Function

In our work, both EE and JE tasks are treated as
sequence tagging problems with an identical struc-
ture. The two tasks hold the same form of objec-
tive function:

J(θ)(.) = max

(log p(yGt

t

|sj, θ))

(6)

|D|
(cid:88)

Lj
(cid:88)

j=1

t=1

where |D| is the size of training set, Lj is the
length of sentence sj, Gt is the gold standard tag
of t-th word xt in sj, and p(yGt
|sj, θ) is the prob-
t
ability of assigning Gt to xt, which is deﬁned in
Equation 5.

The ﬁnal multi-task objective function is de-

ﬁned as follows:

J(θ) = JEE(θ) + JJE(θ)

(7)

We train the model by maximizing the log like-
lihood J(θ) through stochastic gradient descent
over shufﬂed mini-batches and the optimization
algorithm is RMSprop proposed by (Tieleman and
Hinton, 2012).

4 Experiments

4.1 Experimental Setting

Datasets and Evaluation Metrics We use the
public New York Times corpus2 to evaluate our
proposed model.
The corpus has two ver-
sions, which are named as NYT10 and NYT11
by Takanobu et al. (2019). For NYT10, both the
training set and test set are produced by distant su-
pervision (Riedel et al., 2010). For NYT11, the
training set is also produced by distant supervision
while the test set is manually annotated (Hoffmann
et al., 2011). Previous works (Ren et al., 2017;
Zeng et al., 2018; Takanobu et al., 2019) employed
different ways of data preprocessing and the per-
formance of these models usually differs with
various customized datasets. Based on the fact
that only Takanobu et al. (2019) provide a com-
prehensive comparison of recent works on both
NYT10 and NYT11 in their paper, for fair com-
parison, we directly conduct experiments based on
the preprocessed datasets released by (Takanobu
et al., 2019), where NYT10 contains 70,339 sen-
tences for training and 4,006 sentences for test and
NYT11 contains 62,648 sentences for training and
369 sentences for test. Besides, the number of re-
lation types is 29 in NYT10 and 12 in NYT11. We
also create a validation set by randomly sampling
0.5% data from the training set for each dataset
as (Takanobu et al., 2019) suggested.

Following previous works (Zheng et al., 2017;
Zeng et al., 2018; Takanobu et al., 2019), we use
the standard Precision, Recall, and F1-score to
evaluate our model. An extracted relational triple
is regarded as correct only if the head entity, tail
entity and the relation type are all correct.

Hyper-parameter Setting We determine the
hyper-parameters through grid search. For embed-
ding layer, the dimension of word embeddings is
set to be 300. For encoder-decoder module, the
hidden size of LSTM cell is 300 in both Bi-LSTM
encoder and LSTM decoder. The dimension of
tag vector T in Equation 3 is 300. We also adopt
dropout and mini-batch mechanism in our model,
the dropout rate is 0.5 and the batch size is 32.

2NYT corpus is a popular benchmark, which has been
employed by many previous works, including CoType (Ren
et al., 2017). In Ren’s paper, there are another two datasets,
i.e., Wiki-KBP and BioInfer. However, we only conduct ex-
periments on NYT dataset because the open literature (Zheng
et al., 2017) points out that the employment of such two
datasets is beyond the scope of tagging-based methods.

Method

FCM (Gormley et al., 2015)
MultiR (Hoffmann et al., 2011)
CoType (Ren et al., 2017)
SPTree (Miwa and Bansal, 2016)
Tagging (Zheng et al., 2017)
CopyR (Zeng et al., 2018)
HRL (Takanobu et al., 2019)

Prec.

–
–
–
0.492
0.593
0.569
0.714

NYT10

NYT11

Rec.

–
–
–
0.557
0.381
0.452
0.586

F1

–
–
–
0.522
0.464
0.504
0.644

Prec.

0.432
0.328
0.486
0.522
0.469
0.347
0.538

Rec.

0.294
0.306
0.386
0.541
0.489
0.534
0.538

F1

0.350
0.317
0.430
0.531
0.479
0.421
0.538

HMT

0.702 ± 0.008

0.623 ± 0.005

0.660 ± 0.003

0.676 ± 0.009

0.538 ± 0.008

0.599 ± 0.006

Table 1: Results of different methods on extraction of both entities and their relations. We run the model for 10
times and report the average results as well as the standard deviation.

4.2 Experimental Result

Baselines We compare our HMT model with
several state-of-the-art extraction models,
in-
cluding a pipelined model
(FCM) and some
joint models which can be further categorized
into feature-based models (MultiR, CoType) and
neural network-based models (SPTree, Tagging,
CopyR and HRL).

FCM (Gormley et al., 2015) is a compositional
model that combines lexicalized linguistic con-
texts and word embeddings for relation extraction.
MultiR (Hoffmann et al., 2011) is a typical
distant supervision method performing sentence-
level and corpus-level extraction based on multi-
instance learning algorithms to deal with noisy la-
bels in training data.

CoType (Ren et al., 2017)

is a domain-
independent framework that jointly embeds en-
tity mentions, relation mentions, text features, and
type labels into vectors, and treats the extraction
task as a global embedding problem.

SPTree (Miwa and Bansal, 2016) is an end-
to-end relation extraction model that represents
both word sequence and dependency tree struc-
tures based on bidirectional sequential and tree-
structured LSTM-RNNs.

Tagging (Zheng et al., 2017) is an approach that
treats joint extraction as a sequence tagging prob-
lem using a special tagging scheme where each tag
indicates entity mention and relation type simulta-
neously.

CopyR (Zeng et al., 2018) is a Seq2Seq learn-
ing framework with a copy mechanism for joint
extraction, in which multiple decoders are applied
to generate relational triples.

HRL (Takanobu et al., 2019) is a hierarchical
reinforcement learning (RL) framework that per-

forms relation detection and entity extraction in
two-level RL polices.

Results Table 1 shows the results. Our HMT
model substantially outperforms all the baselines
in terms of F1-score and achieves 1.6% and 6.1%
improvements over the best neural network-based
joint extraction method HRL (Takanobu et al.,
2019) on NYT10 and NYT11 respectively. This
demonstrates the effectiveness of our proposed
model on jointly extracting entities and relations.
Note that the test set of NYT10 is produced
by distant supervision and contains noisy data
while the test set of NYT11 is manually anno-
tated and can be considered as clean data. Though
all the models are trained on noisy data, some
principles still can be observed from the perfor-
mances on the two different kinds of test set. Re-
sults on NYT10 show the proposed HMT model
surpasses all the baselines especially in the as-
pect of recall, demonstrating the robustness of our
model to noisy data. Nonetheless, the precision
of our model on NYT10 is lower than that of
HRL, which owes to their employment of RL for
denoising the training data. Results on NYT11
also show that most neural network-based meth-
ods (SPTree, Tagging, CopyR and HRL) can ob-
tain better performance than pipelined (FCM) and
feature-based (MultiR and CoType) methods, in-
dicating the strong power of neural networks and
the superiority of extracting relational triples in a
joint manner. Though SPTree gains slightly higher
score in recall than our model, it needs more lin-
guistic resources (e.g., POS tags, chunks and syn-
tactic parsing trees). Noticeably, the precision of
our HMT model is much higher than all the other
models, we owe it to the multi-task learning strat-
egy and the hierarchical setting of our method.

Example1

Ground
Truth:

At the center of this manufactured maelstrom is the preternaturally beau-
teous ﬁgure of [Shilpa Shetty]P N −E1 , 31 , a Bollywood movie star from
[India]P N −E2 whose treatment by British contestants in the so-called re-
ality show on television here has provoked more than 16,000 viewers to
complain to regulators that she is the victim of racist bullying .
Predicted: At the center of this manufactured maelstrom is the preternaturally beau-
teous ﬁgure of [Shilpa Shetty]P N −E1 , 31 , a Bollywood movie star from
[India]P N −E2 whose treatment by British contestants in the so-called re-
ality show on television here has provoked more than 16,000 viewers to
complain to regulators that she is the victim of racist bullying .

Example2

Ground
Truth:
Predicted: Homage to [Cambodia]CA−E1 was performed at Chaktomuk Conference

Homage to [Cambodia]AC−E2 was performed at Chaktomuk Conference
Hall in [Phnom Penh]AC−E1 on Oct. 21 , attended by the king .

Hall in [Phnom Penh]CA−E2 on Oct. 21 , attended by the king .

Table 2: Case study. “Ground Truth” represents the gold standard tags of the given sentence and “Predicted” rep-
resents the output of our HMT model. “PN” is the abbreviation for “Person–Nationality”. “AC” is the abbreviation
for “Administrative division–Country” and “CA” is the abbreviation for “Country–Administrative division”. Note
that the relation is directed, “AC” and “CA” are actually equivalent.

Method

NYT10

NYT11

Prec.

Rec.

F1

Prec.

Rec.

F1

W/o EE Task
HMT

0.693
0.702

0.611
0.623

0.649
0.660

0.652
0.676

0.508
0.538

0.571
0.599

Table 3: Ablation test on NYT10 and NYT11. We run
the model for 10 times and report the average results.

Ablation Test To validate our argument about
the effectiveness of our hierarchical multi-task
tagging model, we further conduct a set of ablation
experiments. We remove the EE task module from
our HMT model to test its performance. To make
it comparable, we keep all the hype-parameters
unchanged and retrain the rest part from scratch.
Table 3 shows the advantage of introducing EE
task. After removing EE task, the scores of both
precision and recall decrease signiﬁcantly on both
NYT10 and NYT11 datasets3, indicating the im-
portance of introducing EE task in our model.
These observations demonstrate that the learned
knowledge in EE task is successfully shared and
is indeed of beneﬁt to the JE task. It also validates
the capability of our model in capturing the inter-
dependency between the two tasks.

Case Study We further study the performance
of HMT model by describing some cases. Table 2

3Nonetheless, the performance on NYT11 is still better
than most baselines. We owe it to the novel LSTM decoder
and the efﬁcient “BIO” tagging scheme of JE.

presents two examples demonstrating the pros and
cons of our proposed method. The ﬁrst example
shows that our model can exactly extract relational
triple from a very long sentence. The second ex-
ample reveals the ﬂaw of our model that it fails to
cope with the directed relation type. As shown in
table 2, “CA” and “AC” actually express the same
relation between two entities but with the opposite
direction. However, our model does not perform
well with directed relational triples as compared to
the gold standard. This is a common case in real
life and has rarely been reported as well resolved
in previous works. We leave the identiﬁcation of
directed relations for future work.

5 Conclusion

In this paper, we propose a hierarchical multi-
task tagging (HMT) model to jointly extract enti-
ties and relations. Compared to existing methods,
our method is the ﬁrst to consider the interdepen-
dency between entity extraction task and joint ex-
traction of entities and relations task by connecting
the two tasks via multi-task learning. Experimen-
tal results show that our model substantially out-
performs state-of-the-art baselines on the standard
New York Times (NYT) benchmark. In the future,
we shall investigate some strategies to capture the
directional information for better extracting the di-
rected relational triples.

References

S¨oren Auer, Christian Bizer, Georgi Kobilarov, Jens
Lehmann, Richard Cyganiak, and Zachary Ives.
2007. Dbpedia: A nucleus for a web of open data.
In Proceedings of the 6th International The Seman-
tic Web and 2nd Asian Conference on Asian Seman-
tic Web Conference, pages 722–735.

Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a collab-
oratively created graph database for structuring hu-
man knowledge. In Proceedings of the 2008 ACM
SIGMOD international conference on Management
of data, pages 1247–1250.

Richard Caruana. 1993. Multitask learning: A
knowledge-based source of inductive bias. In Pro-
ceedings of the Tenth International Conference on
Machine Learning, pages 41–48. Morgan Kauf-
mann.

Richard Caruana. 1997. Multitask learning. Machine

learning, 28(1):41–75.

Hong-Jie Dai, Po-Ting Lai, Yung-Chun Chang, and
Richard Tzong-Han Tsai. 2015.
Enhancing of
chemical compound and drug name recognition us-
ing representative tag scheme and ﬁne-grained tok-
enization. Journal of cheminformatics, 7(S1):S14.

Xin Dong, Evgeniy Gabrilovich, Geremy Heitz, Wilko
Horn, Ni Lao, Kevin Murphy, Thomas Strohmann,
Shaohua Sun, and Wei Zhang. 2014. Knowledge
vault: A web-scale approach to probabilistic knowl-
In Proceedings of the 20th ACM
edge fusion.
SIGKDD international conference on Knowledge
discovery and data mining, pages 601–610.

Felix A Gers and J¨urgen Schmidhuber. 2000. Recur-
In Proceedings of
rent nets that time and count.
the IEEE-INNS-ENNS International Joint Confer-
ence on Neural Networks, volume 3, pages 189–194.

Matthew R Gormley, Mo Yu, and Mark Dredze. 2015.
Improved relation extraction with feature-rich com-
positional embedding models. In Proceedings of the
2015 Conference on Empirical Methods in Natural
Language Processing (EMNLP), pages 1774–1784.

Geoffrey E Hinton. 1986. Learning distributed repre-
In Proceedings of the 8th
sentations of concepts.
Annual Conference of the Cognitive Science Society,
volume 1, page 12.

Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke
Zettlemoyer, and Daniel S Weld. 2011. Knowledge-
based weak supervision for information extraction
of overlapping relations. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies-
Volume 1, pages 541–550.

Jing Jiang. 2009. Multi-task transfer learning for
weakly-supervised relation extraction. In Proceed-
ings of the Joint Conference of the 47th Annual

Meeting of the ACL and the 4th International Joint
Conference on Natural Language Processing of the
AFNLP, pages 1012–1020.

Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In Proceedings of NAACL-HLT, pages 260–270.

Qi Li and Heng Ji. 2014.

Incremental joint extrac-
In Proceed-
tion of entity mentions and relations.
ings of the 52nd Annual Meeting of the Association
for Computational Linguistics (Volume 1: Long Pa-
pers), volume 1, pages 402–412.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and Jian-
feng Gao. 2019. Multi-task deep neural networks
for natural language understanding. arXiv preprint
arXiv:1901.11504.

Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-
sky. 2009. Distant supervision for relation extrac-
In Proceedings of the
tion without labeled data.
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-
ume 2-Volume 2, pages 1003–1011.

Makoto Miwa and Mohit Bansal. 2016. End-to-end re-
lation extraction using lstms on sequences and tree
structures. In Proceedings of the 54th Annual Meet-
ing of the Association for Computational Linguistics
(Volume 1: Long Papers), volume 1, pages 1105–
1116.

Makoto Miwa and Yutaka Sasaki. 2014. Modeling
joint entity and relation extraction with table repre-
sentation. In Proceedings of the 2014 Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 1858–1869.

Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014. Glove: Global vectors for word
In Proceedings of the 2014 Con-
representation.
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 1532–1543.

Alec Radford, Jeffrey Wu, Rewon Child, David Luan,
Dario Amodei, and Ilya Sutskever. 2019. Language
models are unsupervised multitask learners. OpenAI
Blog, 1:8.

Marek Rei. 2017. Semi-supervised multitask learn-
In Proceedings of the
ing for sequence labeling.
55th Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
2121–2130.

Xiang Ren, Zeqiu Wu, Wenqi He, Meng Qu, Clare R
Voss, Heng Ji, Tarek F Abdelzaher, and Jiawei Han.
2017. Cotype: Joint extraction of typed entities and
relations with knowledge bases. In Proceedings of
the 26th International Conference on World Wide
Web, pages 1015–1024.

Suncong Zheng, Feng Wang, Hongyun Bao, Yuexing
Hao, Peng Zhou, and Bo Xu. 2017. Joint extrac-
tion of entities and relations based on a novel tag-
In Proceedings of the 55th Annual
ging scheme.
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), volume 1, pages
1227–1236.

Sebastian Riedel, Limin Yao, and Andrew McCallum.
2010. Modeling relations and their mentions with-
In Joint European Conference
out labeled text.
on Machine Learning and Knowledge Discovery in
Databases, pages 148–163.

Sebastian Ruder. 2017. An overview of multi-task
learning in deep neural networks. arXiv preprint
arXiv:1706.05098.

Victor Sanh, Thomas Wolf, and Sebastian Ruder. 2019.
A hierarchical multi-task approach for learning em-
beddings from semantic tasks. In AAAI.

Amit Singhal. 2012. Introducing the knowledge graph:

things, not strings. Ofﬁcial google blog, 5.

Fabian M Suchanek, Gjergji Kasneci, and Gerhard
Weikum. 2007. Yago: a core of semantic knowl-
edge. In Proceedings of the 16th International Con-
ference on World Wide Web, pages 697–706.

Ryuichi Takanobu, Tianyang Zhang, Jiexi Liu, and
Minlie Huang. 2019. A hierarchical framework for
relation extraction with reinforcement learning. In
AAAI.

Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun
Yan, and Qiaozhu Mei. 2015. LINE: large-scale in-
In Proceedings of
formation network embedding.
the 24th International Conference on World Wide
Web, pages 1067–1077.

Tijmen Tieleman and Geoffrey Hinton. 2012. Lecture
6.5-rmsprop: Divide the gradient by a running av-
erage of its recent magnitude. COURSERA: Neural
networks for machine learning, 4(2):26–31.

Ashish Vaswani, Yonatan Bisk, Kenji Sagae, and Ryan
Musa. 2016. Supertagging with lstms. In Proceed-
ings of the 2016 Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
232–237.

Shaolei Wang, Yue Zhang, Wanxiang Che, and Ting
Liu. 2018. Joint extraction of entities and relations
based on a novel graph scheme. In Proceedings of
the 27th International Joint Conference on Artiﬁcial
Intelligence, pages 4461–4467.

Jie Yang, Shuailong Liang, and Yue Zhang. 2018. De-
sign challenges and misconceptions in neural se-
quence labeling. In Proceedings of the 27th Inter-
national Conference on Computational Linguistics,
pages 3879–3889.

Zhilin Yang, Ruslan Salakhutdinov, and William W
Cohen. 2017. Transfer learning for sequence tag-
ging with hierarchical recurrent networks. In ICLR.

Xiangrong Zeng, Daojian Zeng, Shizhu He, Kang Liu,
and Jun Zhao. 2018. Extracting relational facts by
an end-to-end neural model with copy mechanism.
In Proceedings of the 56th Annual Meeting of the
Association for Computational Linguistics (Volume
1: Long Papers), volume 1, pages 506–514.

