Action Segmentation with Joint Self-Supervised Temporal Domain Adaptation

Min-Hung Chen1∗ Baopu Li2 Yingze Bao2 Ghassan AlRegib1
1Georgia Institute of Technology

2Baidu USA

Zsolt Kira1

0
2
0
2
 
r
a

M
 
8
1
 
 
]

V
C
.
s
c
[
 
 
3
v
4
2
8
2
0
.
3
0
0
2
:
v
i
X
r
a

Abstract

Despite the recent progress of fully-supervised action
segmentation techniques, the performance is still not fully
satisfactory. One main challenge is the problem of spatio-
temporal variations (e.g.
different people may perform
the same activity in various ways). Therefore, we exploit
unlabeled videos to address this problem by reformulat-
ing the action segmentation task as a cross-domain prob-
lem with domain discrepancy caused by spatio-temporal
variations. To reduce the discrepancy, we propose Self-
Supervised Temporal Domain Adaptation (SSTDA), which
contains two self-supervised auxiliary tasks (binary and se-
quential domain prediction) to jointly align cross-domain
feature spaces embedded with local and global temporal
dynamics, achieving better performance than other Do-
main Adaptation (DA) approaches. On three challeng-
ing benchmark datasets (GTEA, 50Salads, and Breakfast),
SSTDA outperforms the current state-of-the-art method by
for the F1@25 score, from 59.6% to
large margins (e.g.
69.1% on Breakfast, from 73.4% to 81.5% on 50Salads, and
from 83.6% to 89.1% on GTEA), and requires only 65%
of the labeled training data for comparable performance,
demonstrating the usefulness of adapting to unlabeled tar-
get videos across variations. The source code is available
at https://github.com/cmhungsteve/SSTDA.

1. Introduction

The goal of action segmentation is to simultaneously
segment videos by time and predict an action class for
each segment, leading to various applications (e.g. human
activity analyses). While action classiﬁcation has shown
great progress given the recent success of deep neural net-
works [41, 29, 28], temporally locating and recognizing ac-
tion segments in long videos is still challenging. One main
challenge is the problem of spatio-temporal variations of
human actions across videos [17]. For example, different
people may make tea in different personalized styles even
if the given recipe is the same. The intra-class variations

∗Work done during an internship at Baidu USA

Figure 1: An overview of the proposed Self-Supervised
Temporal Domain Adaptation (SSTDA) for action segmen-
tation. “Source” refers to the data with labels, and “Tar-
get” refers to the data without access to labels. SSTDA can
effectively adapts the source model trained with standard
fully-supervised learning to a target domain by diminish-
ing the discrepancy of embedded feature spaces between the
two domains caused by spatio-temporal variations. SSTDA
only requires unlabeled videos from both domains with the
standard transductive setting, which eliminates the need of
additional labels to obtain the ﬁnal target model.

cause degraded performance by directly deploying a model
trained with different groups of people.

Despite signiﬁcant progress made by recent methods
based on temporal convolution with fully-supervised learn-
ing [21, 7, 24, 9], the performance is still not fully satisfac-
tory (e.g. the best accuracy on the Breakfast dataset is still
lower than 70%). One method to improve the performance
is to exploit knowledge from larger-scale labeled data [2].
However, manually annotating precise frame-by-frame ac-
tions is time-consuming and challenging. Another way is to
design more complicated architectures but with higher costs
of model complexity. Thus, we aim to address the spatio-
temporal variation problem with unlabeled data, which are
comparatively easy to obtain. To achieve this goal, we
propose to diminish the distributional discrepancy caused
by spatio-temporal variations by exploiting auxiliary unla-
beled videos with the same types of human activities per-
formed by different people. More speciﬁcally, to extend the
framework of the main video task for exploiting auxiliary

1

data [48, 20], we reformulate our main task as an unsuper-
vised domain adaptation (DA) problem with the transduc-
tive setting [32, 6], which aims to reduce the discrepancy
between source and target domains without access to the
target labels.

Recently, adversarial-based DA approaches [11, 12, 40,
47] show progress in reducing the discrepancy for images
using a domain discriminator equipped with adversarial
training. However, videos also suffer from domain dis-
crepancy along the temporal direction [4], so using image-
based domain discriminators is not sufﬁcient for action seg-
mentation. Therefore, we propose Self-Supervised Tem-
poral Domain Adaptation (SSTDA), containing two self-
supervised auxiliary tasks: 1) binary domain prediction,
which predicts a single domain for each frame-level feature,
and 2) sequential domain prediction, which predicts the per-
mutation of domains for an untrimmed video. Through
adversarial training with both auxiliary tasks, SSTDA can
jointly align cross-domain feature spaces that embed lo-
cal and global temporal dynamics, to address the spatio-
temporal variation problem for action segmentation, as
shown in Figure 1. To support our claims, we compare our
method with other popular DA approaches and show bet-
ter performance, demonstrating the effectiveness for align-
ing temporal dynamics by SSTDA. Finally, we evaluate
our approaches on three datasets with high spatio-temporal
variations: GTEA [10], 50Salads [37], and the Breakfast
dataset [18]. By exploiting unlabeled target videos with
SSTDA, our approach outperforms the current state-of-the-
art methods by large margins and achieve comparable per-
formance using only 65% of labeled training data.
In summary, our contributions are three-fold:

1. Self-Supervised Sequential Domain Prediction: We
propose a novel self-supervised auxiliary task, which
predicts the permutation of domains for long videos,
to facilitate video domain adaptation. To the best of
our knowledge, this is the ﬁrst self-supervised method
designed for cross-domain action segmentation.

2. Self-Supervised Temporal Domain Adaptation
(SSTDA): By integrating two self-supervised auxil-
iary tasks, binary and sequential domain prediction,
our proposed SSTDA can jointly align local and global
embedded feature spaces across domains, outperform-
ing other DA methods.

3. Action Segmentation with SSTDA: By integrating
SSTDA for action segmentation, our approach out-
performs the current state-of-the-art approach by large
margins, and achieve comparable performance by us-
ing only 65% of labeled training data. Moreover, dif-
ferent design choices are analyzed to identify the key
contributions of each component.

2. Related Works

Action Segmentation methods proposed recently are built
upon temporal convolution networks (TCN) [21, 7, 24, 9]
because of their ability to capture long-range dependencies
across frames and faster training compared to RNN-based
methods. With the multi-stage pipeline, MS-TCN [9] per-
forms hierarchical temporal convolutions to effectively ex-
tract temporal features and achieve the state-of-the-art per-
formance for action segmentation. In this work, we utilize
MS-TCN as the baseline model and integrate the proposed
self-supervised modules to further boost the performance
without extra labeled data.
Domain Adaptation (DA) has been popular recently espe-
cially with the integration of deep learning. With the two-
branch (source and target) framework for most DA works,
ﬁnding a common feature space between source and target
domains is the ultimate goal, and the key is to design the
domain loss to achieve this goal [6].

Discrepancy-based DA [25, 26, 27] is one of the major
classes of methods where the main goal is to reduce the dis-
tribution distance between the two domains. Adversarial-
based DA [11, 12] is also popular with similar concepts
as GANs [13] by using domain discriminators. With care-
fully designed adversarial objectives, the domain discrimi-
nator and the feature extractor are optimized through min-
max training. Some works further improve the performance
by assigning pseudo-labels to target data [34, 44]. Fur-
thermore, Ensemble-based DA [36, 22] incorporates mul-
tiple target branches to build an ensemble model. Recently,
Attention-based DA [42, 19] assigns attention weights to
different regions of images for more effective DA.

Unlike images, video-based DA is still under-explored.
concentrate on small-scale video DA
Most works
datasets [39, 46, 15]. Recently, two larger-scale cross-
domain video classiﬁcation datasets along with the
state-of-the-art approach are proposed [3, 4]. Moreover,
some authors also proposed novel frameworks to utilize
auxiliary data for other video tasks, including object detec-
tion [20] and action localization [48]. These works differ
from our work by either different video tasks [20, 3, 4] or
access to the labels of auxiliary data [48].
Self-Supervised Learning has become popular in recent
years for images and videos given the ability to learn in-
formative feature representations without human supervi-
sion. The key is to design an auxiliary task (or pretext
task) that is related to the main task and the labels can
be self-annotated. Most of the recent works for videos
design auxiliary tasks based on spatio-temporal orders of
videos [23, 43, 16, 1, 45]. Different from these works,
our proposed auxiliary task predicts temporal permutation
for cross-domain videos, aiming to address the problem of
spatio-temporal variations for action segmentation.

2

the problem of spatio-temporal variations of human ac-
tions [17], causing the distributional discrepancy across do-
mains [6]. For example, different subjects may perform
the same action completely differently due to personalized
spatio-temporal styles. Moreover, collecting annotated data
for action segmentation is challenging and time-consuming.
Thus, such challenges motivate the need to learn domain-
invariant feature representations without full supervision.
Inspired by the recent progress of self-supervised learning,
which learns informative features that can be transferred to
the main target tasks without external supervision (e.g. hu-
man annotation), we propose Self-Supervised Temporal
Domain Adaptation (SSTDA) to diminish cross-domain
discrepancy by designing self-supervised auxiliary tasks us-
ing unlabeled videos.

To effectively transfer knowledge, the self-supervised
auxiliary tasks should be closely related to the main task,
which is cross-domain action segmentation in this paper.
Recently, adversarial-based DA approaches [11, 12] show
progress in addressing cross-domain image problems using
a domain discriminator with adversarial training where do-
main discrimination can be regarded as a self-supervised
auxiliary task since domain labels are self-annotated. How-
ever, directly applying image-based DA for video tasks re-
sults in sub-optimal performance due to the temporal infor-
mation being ignored [4]. Therefore, the question becomes:
How should we design the self-supervised auxiliary tasks
to beneﬁt cross-domain action segmentation? More speciﬁ-
cally, the answer should address both cross-domain and ac-
tion segmentation problems.

To address this question, we ﬁrst apply an auxiliary task
binary domain prediction to predict the domain for each
frame where the frame-level features are embedded with lo-
cal temporal dynamics, aiming to address the cross-domain
problems for videos in local scales. Then we propose a
novel auxiliary task sequential domain prediction to tem-
porally segment domains for untrimmed videos where the
video-level features are embedded with global temporal dy-
namics, aiming to fully address the above question. Finally,
SSTDA is achieved locally and globally by jointly applying
these two auxiliary tasks, as illustrated in Figure 3.

In practice, since the key for effective video DA is to
simultaneously align and learn temporal dynamics, instead
of separating the two processes [4], we integrate SSTDA
modules to multiple stages instead of the last stage only,
and the single-stage integration is illustrated in Figure 2.

3.2.1 Local SSTDA

The main goal of action segmentation is to learn frame-level
feature representations that encode spatio-temporal infor-
mation so that the model can exploit information from mul-
tiple frames to predict the action for each frame. Therefore,

Figure 2: Illustration of the baseline model and the integra-
tion with our proposed SSTDA. The frame-level features f
are obtained by applying the temporal convolution network
Gf to the inputs, and converted to the corresponding pre-
dictions ˆy using a fully-connected layer Gy to calculate the
prediction loss Ly. The SSTDA module is integrated with f
to calculate the local and global domain losses, Lld and Lgd
for optimizing f during training (see details in Section 3.2).
Here we only show one stage in our multi-stage model.

3. Technical Approach

In this section, the baseline model which is the current
state-of-the-art for action segmentation, MS-TCN [9], is re-
viewed ﬁrst (Section 3.1). Then the novel temporal domain
adaptation scheme consisting of two self-supervised aux-
iliary tasks, binary domain prediction (Section 3.2.1) and
sequential domain prediction (Section 3.2.2), is proposed,
followed by the ﬁnal action segmentation model.

3.1. Baseline Model

Our work is built on the current state-of-the-art model
for action segmentation, multi-stage temporal convolutional
network (MS-TCN) [9]. For each stage, a single-stage
TCN (SS-TCN) applies a multi-layer TCN, Gf , to derive
the frame-level features f = {f1, f2, ..., fT }, and makes
the corresponding predictions ˆy = {ˆy1, ˆy2, ..., ˆyT } using a
fully-connected layer Gy. By following [9], the prediction
loss Ly is calculated based on the predictions ˆy, as shown
in the left part of Figure 2. Finally, multiple stages of SS-
TCNs are stacked to enhance the temporal receptive ﬁelds,
constructing the ﬁnal baseline model, MS-TCN, where each
stage takes the predictions from the previous stage as inputs,
and makes predictions for the next stage.

3.2. Self-Supervised Temporal Domain Adaptation

Despite the promising performance of MS-TCN on ac-
tion segmentation over previous methods,
there is still
a large room for improvement. One main challenge is

3

3.2.2 Global SSTDA

Although frame-level features f is learned using the con-
text and dependencies from neighbor frames, the tempo-
ral receptive ﬁelds of f are still limited, unable to rep-
resent full videos. Solely integrating DA into f cannot
fully address spatio-temporal variations for untrimmed long
videos. Therefore, in addition to binary domain predic-
tion for frame-level features, we propose the second self-
supervised auxiliary task for video-level features: sequen-
tial domain prediction, which predicts a sequence of do-
mains for video clips, as shown in the right part of Figure 3.
This task is a temporal domain segmentation problem, aim-
ing to predict the correct permutation of domains for long
videos consisting of shufﬂed video clips from both source
and target domains. Since this goal is related to both cross-
domain and action segmentation problems, sequential do-
main prediction can effectively beneﬁt our main task.

a , vS

a , f S

a , f T

b , ...} and V T = {vT

More speciﬁcally, we ﬁrst divide f S and f T into
b , ...} and F T =
two sets of segments F S = {f S
{f T
b , ...}, respectively, and then learn the correspond-
ing two sets of segment-level feature representations V S =
a , vT
{vS
b , ...} with Domain Atten-
tive Temporal Pooling (DATP). All features v are then shuf-
ﬂed and combined in random order and fed to a sequential
domain classiﬁer Ggd equipped with GRL (noted as ˆGgd) to
predict the permutation of domains, as shown in Figure 4.
Domain Attentive Temporal Pooling (DATP): The most
straightforward method to obtain a video-level feature is
to aggregate frame-level features using temporal pooling.
However, not all the frame-level features contribute the
same to the overall domain discrepancy, as mentioned in
[4]. Hence, we assign larger attention weights wj (calcu-
lated using ˆGgd in local SSTDA) to the features which have
larger domain discrepancy so that we can focus more on
aligning those features. Finally, the attended frame-level
features are aggregated with temporal pooling to generate
the video-level feature v, which can be expressed as:

v =

wj · fj

1
T (cid:48)

T (cid:48)
(cid:88)

j=1

(3)

a , vS

b , ..., vT

where T (cid:48) is the number of frames in a video segment. For
more details, please refer to the supplementary.
Sequential Domain Prediction: By separately apply-
ing DATP to both source and target segments, respec-
tively, a set of segment-level feature representations V =
{vS
b , ...} are obtained. We then shufﬂe all the
features in V and concatenate them into a feature to repre-
sent a long and untrimmed video V (cid:48), which contains video
segments from both domains in random order. Finally, V (cid:48)
is fed into a sequential domain classiﬁer Ggd to predict the
permutation of domains for the video segments. For exam-
ple, if V (cid:48) = [vS
b ], the goal of Ggd is to predict

b , vS

a , vT

a , vT

a , vT

Figure 3: The two self-supervised auxiliary tasks in
SSTDA: 1) binary domain prediction: discriminate single
frame, 2) sequential domain prediction: predict a sequence
of domains for an untrimmed video. These two tasks con-
tribute to local and global SSTDA, respectively.

we ﬁrst learn domain-invariant frame-level features with the
auxiliary task binary domain prediction (Figure 3 left).
Binary Domain Prediction: For a single stage, we feed
the frame-level features from source and target domains f S
and f T , respectively, to an additional shallow binary do-
main classiﬁer Gld, to discriminate which domain the fea-
tures come from. Since temporal convolution from previous
layers encodes information from multiple adjacent frames
to each frame-level feature, those frames contribute to the
binary domain prediction for each frame. Through adver-
sarial training with a gradient reversal layer (GRL) [11, 12],
which reverses the gradient signs during back-propagation,
Gf will be optimized to gradually align the feature distri-
butions between the two domains. Here we note ˆGld as Gld
equipped with GRL, as shown in Figure 4.

Since this work is built on MS-TCN, integrating ˆGld
with proper stages is critical for effective DA. From our in-
vestigation, the best performance happens when ˆGlds are
integrated into middle stages. See Section 4.3 for details.

The overall loss function becomes a combination of the
baseline prediction loss Ly and the local domain loss Lld
with reverse sign, which can be expressed as follows:

Ns(cid:88)

(cid:102)Ns(cid:88)

L =

Ly −

βlLld

Lld =

Lld(Gld(fj), dj)

1
T

T
(cid:88)

j=1

where Ns is the total stage number in MS-TCN, (cid:102)Ns is the
number of stages integrated with ˆGld, and T is the total
frame number of a video. Lld is a binary cross-entropy loss
function, and βl is the trade-off weight for local domain loss
Lld, obtained by following the common strategy as [11, 12].

(1)

(2)

4

Figure 4: The overview of the proposed Self-Supervised Temporal Domain Adaptation (SSTDA). The inputs from the two
domains are ﬁrst encoded with local temporal dynamics using Gf to obtain the frame-level features f S and f T , respectively.
We apply local SSTDA on all f using binary domain prediction ˆGld. Besides, f S and f T are evenly divided into multiple
segments to learn segment-level features V S and V T by DATP, respectively. Finally, the global SSTDA is applied on V (cid:48),
which is generated by concatenating shufﬂed V S and V T , using sequential domain prediction ˆGgd. Lld and Lgd are the
domain losses from ˆGld and ˆGgd, respectively. w corresponds to the attention weights for DATP, which are calculated form
the outputs of ˆGld. Here we use 8-frame videos and 2 segments as an example for this ﬁgure. Best views in colors.

the permutation as [0, 1, 1, 0]. Ggd is a multi-class classiﬁer
where the class number corresponds to the total number of
all possible permutations of domains, and the complexity
of Ggd is determined by the segment number for each video
(more analyses in Section 4.3). The outputs of Ggd are used
to calculate the global domain loss Lgd as below:

Lgd = Lgd(Ggd(V (cid:48))), yd)

(4)

where Lgd is also a standard cross-entropy loss function
where the class number is determined by the segment num-
ber. Through adversarial training with GRL, sequential do-
main prediction also contributes to optimizing Gf to align
the feature distributions between the two domains.

There are some self-supervised learning works also
proposing the concepts of temporal shufﬂing [23, 45]. How-
ever, they predict temporal orders within one domain, aim-
ing to learn general temporal information for video fea-
tures. Instead, our method predicts temporal permutation
for cross-domain videos, which are shown with a dual-

branch pipeline in Figure 4, and integrate with binary do-
main prediction to effectively address both cross-domain
and action segmentation problems.

3.2.3 Local-Global Joint Training.

Finally, we also adopt a strategy from [42] to minimize
the class entropy for the frames that are similar across do-
mains by adding a domain attentive entropy (DAE) loss
Lae. Please refer to the supplementary for more details.

By adding the global domain loss Lgd (Equation (4)) and
the attentive entropy loss Lae into Equation (1), the overall
loss of our ﬁnal proposed Self-Supervised Temporal Do-
main Adaptation (SSTDA) can be expressed as follows:

Ns(cid:88)

(cid:102)Ns(cid:88)

L =

Ly −

(βlLld + βgLgd − µLae)

(5)

where βg and µ are the weights for Lgd and Lae, respec-
tively.

5

GTEA 50Salads Breakfast

subject #
class #
video #
leave-#-subject-out

4
11
28
1

25
17
50
5

52
48
1712
13

Table 1: The statistics of action segmentation datasets.

4. Experiments

To validate the effectiveness of the proposed methods in
reducing spatial-temporal discrepancy for action segmen-
tation, we choose three challenging datasets: GTEA [10],
50Salads [37], and Breakfast [18], which separate the train-
ing and validation sets by different people (noted as sub-
jects) with leave-subjects-out cross-validation for evalua-
tion, resulting in large domain shift problem due to spatio-
temporal variations. Therefore, we regard the training set as
Source domain, and the validation set as Target domain with
the standard transductive unsupervised DA protocol [32, 6].
See the supplementary for more implementation details.

4.1. Datasets and Evaluation Metrics

The overall statistics of the three datasets are listed in
Table 1. Three widely used evaluation metrics are chosen
as follows [21]: frame-wise accuracy (Acc), segmental edit
score, and segmental F1 score at the IoU threshold k%, de-
noted as F1@k (k = {10, 25, 50}). While Acc is the most
common metric, edit and F1 score both consider the tem-
poral relation between predictions and ground truths, better
reﬂecting the performance for action segmentation.

4.2. Experimental Results

We ﬁrst investigate the effectiveness of our approaches
in utilizing unlabeled target videos for action segmentation.
We choose MS-TCN [9] as the backbone model since it is
the current state of the art for this task. “Source only” means
the model is trained only with source labeled videos, i.e.,
the baseline model. And then our approach is compared to
other methods with the same transductive protocol. Finally,
we compare our method to the most recent action segmen-
tation methods on all three datasets, and investigate how our
method can reduce the reliance on source labeled data.
Self-Supervised Temporal Domain Adaptation: First we
investigate the performance of local SSTDA by integrating
the auxiliary task binary domain prediction with the base-
line model. The results on all three datasets are improved
signiﬁcantly, as shown in Table 2. For example, on the
GTEA dataset, our approach outperforms the baseline by
4.3% for F1@25, 3.2% for the edit score and 3.6% for the
frame-wise accuracy. Although local SSTDA mainly works
on the frame-level features, the temporal information is still
encoded using the context from neighbor frames, helping

GTEA
Source only (MS-TCN)†
Local SSTDA
SSTDA‡
50Salads
Source only (MS-TCN)†
Local SSTDA
SSTDA‡
Breakfast
Source only (MS-TCN)†
Local SSTDA
SSTDA‡

71.9
74.4
78.0

86.5
89.6
90.0

F1@{10, 25, 50}
83.6
87.9
89.1
F1@{10, 25, 50}
73.4
77.8
81.5
F1@{10, 25, 50}
59.6
67.8
69.1

65.3
72.8
75.0

75.4
79.2
83.0

65.2
70.3
73.8

47.2
55.1
55.2

Edit
81.3
84.5
86.2
Edit
68.9
72.0
75.8
Edit
65.7
71.7
73.7

Acc
76.5
80.1
79.8
Acc
82.1
82.8
83.2
Acc
64.7
70.3
70.2

Table 2: The experimental results for our approaches on
three benchmark datasets. “SSTDA” refers to the full model
while “Local SSTDA” only contains binary domain predic-
tion. †We achieve higher performance than reported in [9]
when using the released code, so use that as the baseline
performance for the whole paper. ‡Global SSTDA requires
outputs from local SSTDA, so it is not evaluated alone.

address the variation problem for videos across domains.

Despite the improvement from local SSTDA, integrating
DA into frame-level features cannot fully address the prob-
lem of spatio-temporal variations for long videos. There-
fore, we integrate our second proposed auxiliary task se-
quential domain prediction for untrimmed long videos.
By jointly training with both auxiliary tasks, SSTDA can
jointly align cross-domain feature spaces embedding with
local and global temporal dynamics, and further improve
over local SSTDA with signiﬁcant margins. For example,
on the 50Salads dataset, it outperforms local SSTDA by
3.8% for F1@10, 3.7% for F1@25, 3.5% for F1@50, and
3.8% for the edit score, as shown in Table 2.

One interesting ﬁnding is that local SSTDA contributes
to most of the frame-wise accuracy improvement for
SSTDA because it focuses on aligning frame-level feature
spaces. On the other hand, sequential domain prediction
beneﬁts aligning video-level feature spaces, contributing to
further improvement for the other two metrics, which con-
sider temporal relation for evaluation.
Learning from Unlabeled Target Videos: We also com-
pare SSTDA with other popular approaches [12, 27, 34, 44,
36, 22, 45] to validate the effectiveness of reducing spatio-
temporal discrepancy with the same amount of unlabeled
target videos. For the fair comparison, we integrate all these
methods with the same baseline model, MS-TCN. For more
implementation details, please refer to the supplementary.

Table 3 shows that our proposed SSTDA outperforms
all the other investigated DA methods in terms of the two
metrics that consider temporal relation. We conjecture the
main reason is that all these DA approaches are designed
for cross-domain image problems. Although they are in-

6

Source only (MS-TCN)
VCOP [45]
DANN [12]
JAN [27]
MADA [34]
MSTN [44]
MCD [36]
SWD [22]
SSTDA

F1@{10, 25, 50}
83.6
85.9
87.9
87.6
86.7
88.2
86.3
87.3
89.1

86.5
87.3
89.6
88.7
88.6
89.9
88.1
89.0
90.0

71.9
70.1
74.4
73.1
75.8
75.9
73.4
73.8
78.0

Edit
81.3
82.2
84.5
83.1
83.5
84.7
82.7
84.4
86.2

Table 3: The comparison of different methods that can learn
information from unlabeled target videos (on GTEA). All
the methods are integrated with the same baseline model
MS-TCN for fair comparison. Please refer to the supple-
mentary for the results on other datasets.

tegrated with frame-level features which encode local tem-
poral dynamics, the limited temporal receptive ﬁelds pre-
vent them from fully addressing temporal domain discrep-
ancy. Instead, the sequential domain prediction in SSTDA
is directly applied to the whole untrimmed video, helping
to globally align the cross-domain feature spaces that em-
bed longer temporal dynamics, so that spatio-temporal vari-
ations can be reduced more effectively.

We also compare with the most recent video-based self-
supervised learning method, [45], which can also learn tem-
poral dynamics from unlabeled target videos. However, the
performance is even worse than other DA methods, imply-
ing that temporal shufﬂing within single domain does not
effectively beneﬁt cross-domain action segmentation.
Comparison with Action Segmentation Methods: Here
we compare the recent methods to SSTDA trained with two
settings: 1) fully source labels, and 2) weakly source labels.
The ﬁrst setting means we have labels for all the frames
in source videos, and SSTDA outperforms all the previous
methods on the three datasets with respect to all evaluation
metrics. For example, SSTDA outperforms currently the
state-of-the-art fully-supervised method, MS-TCN [9], by
large margins (e.g. 8.1% for F1@25, 8.6% for F1@50, and
6.9% for the edit score on 50Salads; 9.5% for F1@25, 8.0%
for F1@50, and 8.0% for the edit score on Breakfast), as
demonstrated in Table 4. Since no additional labeled data
is used, these results indicate how our proposed SSTDA ad-
dress the spatio-temporal variation problem with unlabeled
videos to improve the action segmentation performance.

Given the signiﬁcant improvement by exploiting unla-
beled target videos, it implies the potential to train with
fewer number of labeled frames using SSTDA, which is
our second setting. In this setting, we drop labeled frames
from source domains with uniform sampling for training,
and evaluate on the same length of validation data. Our
experiment indicates that by integrating with SSTDA, only

GTEA
LCDC [30]
TDRN [24]
MS-TCN [9]†
SSTDA (65%)
SSTDA
50Salads
TDRN [24]
LCDC [30]
MS-TCN [9]†
SSTDA (65%)
SSTDA
Breakfast
TCFPN [8]
GRU [35]
MS-TCN [9]†
SSTDA (65%)
SSTDA

75.4
79.2
86.5
85.2
90.0

F1@{10, 25, 50}
-
-
62.7
74.4
71.9
83.6
69.3
82.6
78.0
89.1
F1@{10, 25, 50}
68.5
-
73.4
75.0
81.5
F1@{10, 25, 50}
-
-
-
-
-
-
47.2
59.6
65.3
49.4
62.9
69.3
55.2
69.1
75.0

57.2
-
65.2
66.2
73.8

72.9
73.8
75.4
77.7
83.0

Edit
72.8
74.1
81.3
79.6
86.2
Edit
66.0
66.9
68.9
69.3
75.8
Edit
-
-
65.7
69.0
73.7

Acc
65.3
70.1
76.5
75.7
79.8
Acc
68.1
72.1
82.1
80.7
83.2
Acc
52.0
60.6
64.7
65.8
70.2

Table 4: Comparison with the most recent action segmen-
tation methods on all three datasets. SSTDA (65%) means
training with 65% of total labeled training data. †Results
from running the ofﬁcial code, as explained in Table 2.

Source only
{S1}
{S2}
{S3}
{S4}
{S1, S2}
{S2, S3}
{S3, S4}

F1@{10, 25, 50}
83.6
86.2
87.2
87.3
86.4
85.8
87.9
86.8

86.5
88.6
89.1
89.2
88.1
89.0
89.6
88.3

71.9
73.6
74.4
72.3
73.0
73.5
74.4
73.9

Edit
81.3
84.2
84.3
83.8
83.0
84.8
84.5
83.6

Acc
76.5
78.7
79.1
78.9
78.8
79.5
80.1
78.6

Table 5: The experimental results of design choice for local
SSTDA (on GTEA). {Sn}: add ˆGld to the nth stage of MS-
TCN, where smaller n implies closer to inputs.

65% of labeled training data are required to achieve compa-
rable performance with MS-TCN, as shown in the “SSTDA
(65%)” row in Table 4. For the full experiments about la-
beled data reduction, please refer to the supplementary.

4.3. Ablation Study and Analysis

Design Choice for Local SSTDA: Since we develop our
approaches upon MS-TCN [9], it raises the question: How
to effectively integrate binary domain prediction to a multi-
stage architecture? To answer this, we ﬁrst integrate ˆGld
into each stage and the results show that the best perfor-
mance happens when the ˆGld is integrated into middle
stages, such as S2 or S3, as shown in Table 5. S1 is not
a good choice for DA because it corresponds to low-level
features with less discriminability where DA shows limited
effects [25], and represents less temporal receptive ﬁelds for

7

Segment #
1
2
3

F1@{10, 25, 50}
87.7
89.1
87.6

89.4
90.0
89.7

75.4
78.0
75.4

Edit
85.3
86.2
85.2

Acc
79.2
79.8
79.2

Table 6: The experimental results for different segment
numbers of sequential domain prediction (on GTEA).

Figure 5: The visualization of temporal action segmentation
for our methods with color-coding (input example: make
coffee). “MS-TCN” is the baseline model without any DA
methods. We only highlight the action segments that are
different from the ground truth for clear comparison.

videos. However, higher stages (e.g. S4) are not always bet-
ter. We conjecture that it is because the model ﬁts more to
the source data, causing difﬁculty for DA. In our case, inte-
grating ˆGld into S2 provides the best overall performance.
We also integrate binary domain prediction with multiple
stages. However, multi-stage DA does not always guarantee
improved performance. For example, {S1, S2} has worse
results than {S2} in terms of F1@{10, 25, 50}. Since {S2}
and {S3} provide the best single-stage DA performance, we
use {S2, S3}, which performs the best, as the ﬁnal model
for all our approaches in all the experiments.
Design Choice for Global SSTDA: The most critical de-
sign decision for the sequential domain prediction is the
segment number for each video. In our implementation, we
divide one source video into m segments and do so for one
target video, and then apply Ggd to predict the permutation
of domains for these 2m video segments. Therefore, the
category number of Ggd equals the number of all permu-
tations (2m)!/(m!)2. In other words, the segment number
m determine the complexity of the self-supervised auxil-
iary task. For example, m = 3 leads to a 20-way classiﬁer,
and m = 4 results in a 70-way classiﬁer. Since a good
self-supervised task should be neither naive nor over com-
plicated [31], we choose m = 2 as our ﬁnal decision, which
is supported by our experiments as shown in Table 6.
Segmentation Visualization:
It is also common to evalu-
ate the qualitative performance to ensure that the prediction
results are aligned with human vision. First, we compare
our approaches with the baseline model MS-TCN [9] and
the ground truth, as shown in Figure 5. MS-TCN fails to

Figure 6: The visualization of temporal action segmentation
for different DA methods (same input as Figure 5). “Source
only” represents the baseline model, MS-TCN. Only the
segments different from the ground truth are highlighted.

detect some pour actions in the ﬁrst half of the video, and
falsely classify close as take in the latter part of the video.
With local SSTDA, our approach can detect close in the lat-
ter part of the video. Finally, with full SSTDA, our pro-
posed method also detects all pour action segments in the
ﬁrst half of video. We then compare SSTDA with other DA
methods, and Figure 6 shows that our result is the closest to
the ground truth. The others either incorrectly detect some
actions or make incorrect classiﬁcation. For more qualita-
tive results, please refer to the supplementary.

5. Conclusions and Future Work

In this work, we propose a novel approach to effec-
tively exploit unlabeled target videos to boost performance
for action segmentation without target labels. To address
the problem of spatio-temporal variations for videos across
domains, we propose Self-Supervised Temporal Domain
Adaptation (SSTDA) to jointly align cross-domain feature
spaces embedded with local and global temporal dynam-
ics by two self-supervised auxiliary tasks, binary and se-
quential domain prediction. Our experiments indicate that
SSTDA outperforms other DA approaches by aligning tem-
poral dynamics more effectively. We also validate the pro-
posed SSTDA on three challenging datasets (GTEA, 50Sal-
ads, and Breakfast), and show that SSTDA outperforms the
current state-of-the-art method by large margins and only
requires 65% of the labeled training data to achieve the
comparable performance, demonstrating the usefulness of
adapting to unlabeled videos across variations. For the fu-
ture work, we plan to apply SSTDA to more challenging
video tasks (e.g. spatio-temporal action localization [14]).

8

6. Appendix

In the supplementary material, we would like to show
more details about the technical approach, implementation,
and experiments.

6.1. Technical Approach Details

Domain Attentive Temporal Pooling (DATP): Temporal
pooling is one of the most common methods to aggre-
gate frame-level features into video-level features for each
video. However, not all the frame-level features contribute
the same to the overall domain discrepancy. Therefore, in-
spired by [4, 5], we assign larger attention weights to the
features which have larger domain discrepancy so that we
can focus more on aligning those features, achieving more
effective domain adaptation.

More speciﬁcally, we utilize the entropy criterion to gen-
erate the domain attention value for each frame-level feature
fj as below:

ˆwj = 1 − H( ˆdj)
(6)
where ˆdj is the output from the learned domain classiﬁer
Gld used in local SSTDA. H(p) = − (cid:80)
k pk · log(pk) is
the entropy function to measure uncertainty. ˆwj increases
when H( ˆdj) decreases, which means the domains can be
distinguished well. We also add a residual connection for
more stable optimization. Finally, we aggregate the at-
tended frame-level features with temporal pooling to gen-
erate the video-level feature v, which is noted as Domain
Attentive Temporal Pooling (DATP), as illustrated in the left
part of Figure 7 and can be expressed as:

v =

( ˆwj + 1) · fj

(7)

1
T (cid:48)

T (cid:48)
(cid:88)

j=1

where +1 refers to the residual connection, and ˆwj + 1 is
equal to wj in the main paper. T (cid:48) is the number of frames
used to generate a video-level feature.

Local SSTDA is necessary to calculate the attention
weights for DATP. Without this mechanisms, frames will
be aggregated in the same way as temporal pooling without
cross-domain consideration, which is already demonstrated
sub-optimal for cross-domain video tasks [4, 5].
Domain Attentive Entropy (DAE): Minimum entropy reg-
ularization is a common strategy to perform more reﬁned
classiﬁer adaptation. However, we only want to minimize
class entropy for the frames that are similar across domains.
Therefore, inspired by [42], we attend to the frames which
have low domain discrepancy, corresponding to high do-
main entropy H( ˆdj). More speciﬁcally, we adopt the Do-
main Attentive Entropy (DAE) module to calculate the atten-
tive entropy loss Lae, which can be expressed as follows:

Lae =

(H( ˆdj) + 1) · H(ˆyj)

(8)

1
T

T
(cid:88)

j=1

Figure 7: The details of DATP (left) and DAE (right). Both
modules take the domain entropy H( ˆd), which is calcu-
lated from the domain prediction ˆd, to calculate the atten-
tion weights. With the residual connection, DATP attends to
the frame-level features for aggregating into the ﬁnal video-
level feature v (arrow thickness represents assigned atten-
tion values), and DAE attends to the class entropy H(ˆy) to
obtain the attentive entropy loss Lae.

where ˆd and ˆy is the output of ˆGld and Gy, respectively.
T is the total frame number of a video. We also apply the
residual connection for stability, as shown in the right part
of Figure 7.
Full Architecture: Our method is built upon the state-
of-the-art action segmentation model, MS-TCN [9], which
takes input frame-level feature representations and gener-
ates the corresponding output frame-level class predictions
by four stages of SS-TCN. In our implementation, we con-
vert the second and third stages into Domain Adaptive TCN
(DA-TCN) by integrating each SS-TCN with the following
three parts: 1) ˆGld (for binary domain prediction), 2) DATP
and ˆGgd (for sequential domain prediction), and 3) DAE,
bringing three corresponding loss functions, Lld, Lgd and
Lae, respectively, as illustrated in Figure 8. The ﬁnal loss
function can be formulated as below:

L =

Ly(s) −

(βlLld(s) + βgLgd(s) − µLae(s) )

(9)

4
(cid:88)

s=1

3
(cid:88)

s=2

where βl, βg and µ are the weights for Lld, Lgd and Lae,
respectively, obtained by the methods described in Sec-
tion 6.2. s is the stage index in MS-TCN.

6.2. Experiments

Datasets and Evaluation Metrics: The detailed statistics
and the evaluation protocols of the three datasets are listed
in Table 7. We follow [21] to use the following three metrics
for evaluation:

1. Frame-wise accuracy (Acc): Acc is one of the most
typical evaluation metrics for action segmentation, but
it does not consider the temporal dependencies of the
prediction, causing the inconsistency between quali-
tative assessment and frame-wise accuracy. Besides,

9

Figure 8: The overall architecture of the proposed SSTDA. By equipping the network with a local adversarial domain
classiﬁer ˆGld, a global adversarial domain classiﬁer ˆGgd, a domain attentive temporal pooling (DATP) module, and a domain
attentive entropy (DAE) module, we convert a SS-TCN into a DA-TCN, and stack multiple SS-TCNs and DA-TCNs to build
the ﬁnal architecture. Lld and Lgd is the local and global domain loss, respectively. Ly is the prediction loss and Lae is the
attentive entropy loss. The domain entropy H( ˆd) is used to calculate the attention weights for DATP and DAE. An adversarial
domain classiﬁer ˆG refers to a domain classiﬁer G equipped with a gradient reversal layer (GRL).

GTEA 50Salads Breakfast

subject #
class #
video #
avg. length (min.)
avg. action #/video
cross-validation
leave-#-subject-out

4
11
28
1
20
4-fold
1

25
17
50
6.4
20
5-fold
5

52
48
1712
2.7
6
4-fold
13

Table 7: The statistics of action segmentation datasets.

long action classes have higher impact on this metric
than shorter action classes, making it not able to reﬂect
over-segmentation errors.

2. Segmental edit score (Edit): The edit score penalizes
over-segmentation errors by measuring the ordering of
predicted action segments independent of slight tem-
poral shifts.

3. Segmental F1 score at the IoU threshold k% (F1@k):
F1@k also penalizes over-segmentation errors while
ignoring minor temporal shifts between the predictions

and ground truth. The scores are determined by the to-
tal number of actions but do not depend on the dura-
tion of each action instance, which is similar to mean
average precision (mAP) with intersection-over-union
(IoU) overlap criteria. F1@k becomes popular recently
since it better reﬂects the qualitative results.

Implementation and Optimization: Our implementation
is based on the PyTorch [33, 38] framework. We extract
I3D [2] features for the video frames and use these features
as inputs to our model. The video frame rates are the same
as [9]. For GTEA and Breakfast datasets we use a video
temporal resolution of 15 frames per second (fps), while for
50Salads we downsampled the features from 30 fps to 15
fps to be consistent with the other datasets. For fair com-
parison, we adopt the same architecture design choices of
MS-TCN [9] as our baseline model. The whole model con-
sists of four stages where each stage contains ten dilated
convolution layers. We set the number of ﬁlters to 64 in all
the layers of the model and the ﬁlter size is 3. For optimiza-
tion, we utilize the Adam optimizer and a batch size equal
to 1, following the ofﬁcial implementation of MS-TCN [9].
Since the target data size is smaller than the source data,
each target data is loaded randomly multiple times in each

10

50Salads

SSTDA

MS-TCN
GTEA

SSTDA

MS-TCN
Breakfast

SSTDA

MS-TCN

73.8
73.1
70.9
68.6
66.2
65.2

m%
100% 83.0
95% 81.6
85% 81.0
75% 78.9
65% 77.7
100% 75.4
m%
100% 90.0
65% 85.2
100% 86.5
m%
100% 75.0
65% 69.3
100% 65.3

F1@{10, 25, 50}
81.5
80.0
78.9
76.5
75.0
73.4
F1@{10, 25, 50}
89.1
82.6
83.6
F1@{10, 25, 50}
69.1
62.9
59.6

78.0
69.3
71.9

55.2
49.4
47.2

Edit
75.8
75.6
73.8
71.7
69.3
68.9
Edit
86.2
79.6
81.3
Edit
73.7
69.0
65.7

Acc
83.2
83.2
82.1
81.1
80.7
82.1
Acc
79.8
75.7
76.5
Acc
70.2
65.8
64.7

Table 8: The comparison of SSTDA trained with less la-
beled training data. m in the ﬁrst row indicates the percent-
age of labeled training data used to train a model.

epoch during training. For the weighting of loss functions,
we follow the common strategy as [11, 12] to gradually in-
crease βl and βg from 0 to 1. The weighting α for smooth-
ness loss is 0.15 as in [9] and µ is chosen as 1 × 10−2 via
the grid-search.
Less Training Labeled Data: To investigate the poten-
tial to train with a fewer number of labeled frames using
SSTDA, we drop labeled frames from source domains with
uniform sampling for training, and evaluate on the same
length of validation data. Our experiment on the 50Salads
dataset shows that by integrating with SSTDA, the perfor-
mance does not drop signiﬁcantly with the decrease in la-
beled training data, indicating the alleviation of reliance on
labeled training data. Finally, only 65% of labeled training
data are required to achieve comparable performance with
MS-TCN, as shown in Table 8. We then evaluate the pro-
posed SSTDA on GTEA and Breakfast with the same per-
centage of labeled training data, and also get comparable or
better performance.

Table 8 also indicates the results without additional la-
beled training data, which contain discriminative informa-
tion that can directly boost the performance for action seg-
mentation. The additional trained data are all unlabeled, so
they cannot be directly trained with standard prediction loss.
Therefore, we propose SSTDA to exploit unlabeled data to:
1) further improve the strong baseline, MS-TCN, without
additional training labels, and 2) achieve comparable per-
formance with this strong baseline using only 65% of labels
for training.
Comparison with Other Approaches: We compare our
proposed SSTDA with other approaches by integrating the
same baseline architecture with other popular DA meth-
ods [12, 27, 34, 44, 36, 22] and a state-of-the-art video-

50Salads
Source only (MS-TCN)
VCOP [45]
DANN [12]
JAN [27]
MADA [34]
MSTN [44]
MCD [36]
SWD [22]
SSTDA
Breakfast
Source only (MS-TCN)
VCOP [45]
DANN [12]
JAN [27]
MADA [34]
MSTN [44]
MCD [36]
SWD [22]
SSTDA

65.2
65.9
70.3
72.4
70.0
71.5
67.1
67.4
73.8

75.4
75.8
79.2
80.9
79.6
79.3
78.2
78.2
83.0

F1@{10, 25, 50}
73.4
73.8
77.8
79.4
77.4
77.6
75.5
76.2
81.5
F1@{10, 25, 50}
59.6
62.9
67.8
64.7
65.4
63.6
65.1
63.2
69.1

65.3
68.5
72.8
70.2
71.0
69.6
70.4
68.6
75.0

47.2
50.1
55.1
52.0
52.8
51.5
52.4
50.6
55.2

Edit
68.9
68.4
72.0
73.5
72.4
72.1
70.8
71.6
75.8
Edit
65.7
67.9
71.7
70.0
71.2
69.2
69.7
69.1
73.7

Table 9: The comparison of different methods that can learn
information from unlabeled target videos (on 50Salads and
Breakfast). All the methods are integrated with the same
baseline model MS-TCN for fair comparison.

based self-supervised approach [45]. For fair comparison,
all the methods are integrated with the second and third
stages, as our proposed SSTDA, where the single-stage in-
tegration methods are described as follows:

1. DANN [12]: We add one discriminator, which is the
same as Gld, equipped a gradient reversal layer (GRL)
to the ﬁnal frame-level features f .

2. JAN [27]: We integrate Joint Maximum Mean Dis-
crepancy (JMMD) to the ﬁnal frame-level features f
and the class prediction ˆy.

3. MADA [34]: Instead of a single discriminator, we add
multiple discriminators according to the class number
to calculate the domain loss for each class. All the
class-based domain losses are weighted with predic-
tion probabilities and then summed up to obtain the
ﬁnal domain loss.

4. MSTN [44]: We utilize pseudo-labels to cluster the
data from the source and target domains, and calcu-
late the class centroids for the source and target do-
main separately. Then we compute the semantic loss
by calculating mean squared error (MSE) between the
source and target centroids. The ﬁnal loss contains the
prediction loss, the semantic loss, and the domain loss
as DANN [12].

5. MCD [36]: We apply another classiﬁer G(cid:48)

y and follow

11

the adversarial training procedure of Maximum Clas-
siﬁer Discrepancy to iteratively optimize the genera-
tor (Gf in our case) and the classiﬁer (Gy). The L1-
distance is used as the discrepancy loss.

6. SWD [22]: The framework is similar to MCD, but we
replace the L1-distance with the Wasserstein distance
as the discrepancy loss.

7. VCOP [45]: We divide f into three segments and com-
pute the segment-level features with temporal pooling.
After temporal shufﬂing the segment-level features,
pairwise features are computed and concatenated into
the ﬁnal feature representing the video clip order. The
ﬁnal features are then fed into a shallow classiﬁer to
predict the order.

The experimental results on 50Salads and Breakfast both
indicate that our proposed SSTDA outperforms all these
methods, as shown in Table 9.

The performance of the most recent video-based self-
supervised learning method [45] on 50Salads and Break-
fast also show that temporal shufﬂing within single domain
without considering the relation across domains does not
effectively beneﬁt cross-domain action segmentation, re-
sulting in even worse performance than other DA methods.
Instead, our proposed self-supervised auxiliary tasks make
predictions on cross-domain data, leading to cross-domain
temporal relation reasoning instead of predicting within-
domain temporal orders, achieving signiﬁcant improvement
in the performance of our main task, action segmentation.

6.3. Segmentation Visualization

Here we show more qualitative segmentation results
from all three datasets to compare our methods with the
baseline model, MS-TCN [9]. All the results (Figure 9 for
GTEA, Figure 10 for 50Salads, and Figure 11 for Break-
fast) demonstrate that the improvement over the baseline
by only local SSTDA is sometimes limited. For example,
local SSTDA falsely detects the pour action in Figure 9b,
falsely classiﬁes cheese-related actions as cucumber-related
actions in Figure 10b, and falsely detects the stir milk action
in Figure 11b. However, by jointly aligning local and global
temporal dynamics with SSTDA, the model is effectively
adapted to the target domain, reducing the above mentioned
incorrect predictions and achieving better segmentation.

References

[1] Unaiza Ahsan, Rishi Madhok, and Irfan Essa. Video jigsaw:
Unsupervised learning of spatiotemporal context for video
action recognition. In IEEE Winter Conference on Applica-
tions of Computer Vision (WACV), 2019. 2

[2] Joao Carreira and Andrew Zisserman. Quo vadis, action
In

a new model and the kinetics dataset.

recognition?

IEEE conference on Computer Vision and Pattern Recogni-
tion (CVPR), 2017. 1, 10

[3] Min-Hung Chen, Zsolt Kira, and Ghassan AlRegib. Tempo-
ral attentive alignment for video domain adaptation. CVPR
Workshop on Learning from Unlabeled Videos, 2019. 2
[4] Min-Hung Chen, Zsolt Kira, Ghassan AlRegib, Jaekwon
Woo, Ruxin Chen, and Jian Zheng. Temporal attentive align-
ment for large-scale video domain adaptation. In IEEE Inter-
national Conference on Computer Vision (ICCV), 2019. 2,
3, 4, 9

[5] Min-Hung Chen, Baopu Li, Yingze Bao, and Ghassan Al-
Regib. Action segmentation with mixed temporal domain
adaptation. In The IEEE Winter Conference on Applications
of Computer Vision (WACV), 2020. 9

[6] Gabriela Csurka. A comprehensive survey on domain adap-
tation for visual applications. In Domain Adaptation in Com-
puter Vision Applications, pages 1–35. Springer, 2017. 2, 3,
6

[7] Li Ding and Chenliang Xu. Tricornet: A hybrid temporal
convolutional and recurrent network for video action seg-
mentation. arXiv preprint arXiv:1705.07818, 2017. 1, 2
[8] Li Ding and Chenliang Xu. Weakly-supervised action seg-
mentation with iterative soft boundary assignment. In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), 2018. 7

[9] Yazan Abu Farha and Jurgen Gall. Ms-tcn: Multi-stage
temporal convolutional network for action segmentation. In
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), 2019. 1, 2, 3, 6, 7, 8, 9, 10, 11, 12

[10] Alireza Fathi, Xiaofeng Ren, and James M Rehg. Learning
to recognize objects in egocentric activities. In IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
2011. 2, 6

[11] Yaroslav Ganin and Victor Lempitsky. Unsupervised domain
adaptation by backpropagation. In International Conference
on Machine Learning (ICML), 2015. 2, 3, 4, 11

[12] Yaroslav Ganin, Evgeniya Ustinova, Hana Ajakan, Pas-
cal Germain, Hugo Larochelle, Franc¸ois Laviolette, Mario
Marchand, and Victor Lempitsky. Domain-adversarial train-
ing of neural networks. The Journal of Machine Learning
Research (JMLR), 17(1):2096–2030, 2016. 2, 3, 4, 6, 7, 11

[13] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing
Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and
Yoshua Bengio. Generative adversarial nets. In Advances in
Neural Information Processing Systems (NeurIPS), 2014. 2
[14] Chunhui Gu, Chen Sun, David A Ross, Carl Vondrick, Car-
oline Pantofaru, Yeqing Li, Sudheendra Vijayanarasimhan,
George Toderici, Susanna Ricco, Rahul Sukthankar, et al.
Ava: A video dataset of spatio-temporally localized atomic
visual actions. In IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), 2018. 8

[15] Arshad Jamal, Vinay P Namboodiri, Dipti Deodhare, and
KS Venkatesh. Deep domain adaptation in action space. In
British Machine Vision Conference (BMVC), 2018. 2
[16] Dahun Kim, Donghyeon Cho, and In So Kweon. Self-
supervised video representation learning with space-time cu-
In AAAI Conference on Artiﬁcial Intelligence
bic puzzles.
(AAAI), 2019. 2

12

(a) Make coffee

(b) Make honey coffee

Figure 9: The visualization of temporal action segmentation for our methods with color-coding on GTEA. The video snap-
shots and the segmentation visualization are in the same temporal order (from left to right). We only highlight the action
segments that are signiﬁcantly different from the ground truth for clear comparison. “MS-TCN” represents the baseline
model trained with only source data.

[17] Yu Kong and Yun Fu. Human action recognition and predic-
tion: A survey. arXiv preprint arXiv:1806.11230, 2018. 1,
3

[18] Hilde Kuehne, Ali Arslan, and Thomas Serre. The language
of actions: Recovering the syntax and semantics of goal-
directed human activities. In IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), 2014. 2, 6

[19] Vinod Kumar Kurmi, Shanu Kumar, and Vinay P Nambood-
iri. Attending to discriminative certainty for domain adap-
tation. In IEEE conference on Computer Vision and Pattern

Recognition (CVPR), 2019. 2

[20] Avisek Lahiri, Sri Charan Ragireddy, Prabir Biswas, and
Pabitra Mitra. Unsupervised adversarial visual level domain
adaptation for learning video object detectors from images.
In IEEE Winter Conference on Applications of Computer Vi-
sion (WACV), 2019. 1, 2

[21] Colin Lea, Michael D Flynn, Rene Vidal, Austin Reiter, and
Gregory D Hager. Temporal convolutional networks for ac-
In IEEE Conference on
tion segmentation and detection.
Computer Vision and Pattern Recognition (CVPR), 2017. 1,

13

(a) Subject 02

(b) Subject 04

14

Figure 10: The visualization of temporal action segmentation for our methods with color-coding on 50Salads. The video
snapshots and the segmentation visualization are in the same temporal order (from left to right). We only highlight the action
segments that are different from the ground truth for clear comparison. Both examples correspond to the same activity Make
salad, but they are performed by different subjects, i.e., people.

2, 6, 9

[22] Chen-Yu Lee, Tanmay Batra, Mohammad Haris Baig, and

Daniel Ulbricht. Sliced wasserstein discrepancy for unsuper-
vised domain adaptation. In IEEE conference on Computer

(a) Make Cereal

Figure 11: The visualization of temporal action segmentation for our methods with color-coding on Breakfast. The video
snapshots and the segmentation visualization are in the same temporal order (from left to right). We only highlight the action
segments that are different from the ground truth for clear comparison.

(b) Make milk

Vision and Pattern Recognition (CVPR), 2019. 2, 6, 7, 11,
12

[23] Hsin-Ying Lee, Jia-Bin Huang, Maneesh Singh, and Ming-
Hsuan Yang. Unsupervised representation learning by sort-
ing sequences. In IEEE International Conference on Com-
puter Vision (ICCV), 2017. 2, 5

[24] Peng Lei and Sinisa Todorovic. Temporal deformable resid-
In IEEE
ual networks for action segmentation in videos.
Conference on Computer Vision and Pattern Recognition
(CVPR), 2018. 1, 2, 7

[25] Mingsheng Long, Yue Cao, Jianmin Wang, and Michael Jor-
dan. Learning transferable features with deep adaptation net-
In International Conference on Machine Learning
works.
(ICML), 2015. 2, 7

[26] Mingsheng Long, Han Zhu, Jianmin Wang, and Michael I
Jordan. Unsupervised domain adaptation with residual trans-
fer networks. In Advances in Neural Information Processing
Systems (NeurIPS), 2016. 2

[27] Mingsheng Long, Han Zhu, Jianmin Wang, and Michael I
Jordan. Deep transfer learning with joint adaptation net-

15

[41] Xiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaim-
ing He. Non-local neural networks. In IEEE conference on
Computer Vision and Pattern Recognition (CVPR), 2018. 1
[42] Ximei Wang, Liang Li, Weirui Ye, Mingsheng Long, and
Jianmin Wang. Transferable attention for domain adaptation.
In AAAI Conference on Artiﬁcial Intelligence (AAAI), 2019.
2, 5, 9

[43] Donglai Wei, Joseph J Lim, Andrew Zisserman, and
William T Freeman. Learning and using the arrow of time.
In IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), 2018. 2

[44] Shaoan Xie, Zibin Zheng, Liang Chen, and Chuan Chen.
Learning semantic representations for unsupervised domain
adaptation. In International Conference on Machine Learn-
ing (ICML), 2018. 2, 6, 7, 11

[45] Dejing Xu, Jun Xiao, Zhou Zhao, Jian Shao, Di Xie, and
Yueting Zhuang. Self-supervised spatiotemporal learning via
In IEEE Conference on Com-
video clip order prediction.
puter Vision and Pattern Recognition (CVPR), 2019. 2, 5, 6,
7, 11, 12

[46] Tiantian Xu, Fan Zhu, Edward K Wong, and Yi Fang.
Dual many-to-one-encoder-based transfer learning for cross-
dataset human action recognition. Image and Vision Com-
puting, 55:127–137, 2016. 2

[47] Weichen Zhang, Wanli Ouyang, Wen Li, and Dong Xu. Col-
laborative and adversarial network for unsupervised domain
In IEEE Conference on Computer Vision and
adaptation.
Pattern Recognition (CVPR), 2018. 2

[48] Xiao-Yu Zhang, Haichao Shi, Changsheng Li, Kai Zheng,
Xiaobin Zhu, and Lixin Duan. Learning transferable self-
attentive representations for action recognition in untrimmed
videos with weak supervision. In AAAI Conference on Arti-
ﬁcial Intelligence (AAAI), 2019. 1, 2

In International Conference on Machine Learning

works.
(ICML), 2017. 2, 6, 7, 11

[28] Chih-Yao Ma, Min-Hung Chen, Zsolt Kira, and Ghassan
AlRegib. Ts-lstm and temporal-inception: Exploiting spa-
tiotemporal dynamics for activity recognition. Signal Pro-
cessing: Image Communication, 71:76–87, 2019. 1

[29] Chih-Yao Ma, Asim Kadav, Iain Melvin, Zsolt Kira, Ghas-
san AlRegib, and Hans Peter Graf. Attend and interact:
higher-order object interactions for video understanding. In
IEEE conference on Computer Vision and Pattern Recogni-
tion (CVPR), 2018. 1

[30] Khoi-Nguyen C Mac, Dhiraj Joshi, Raymond A Yeh, Jinjun
Xiong, Rogerio S Feris, and Minh N Do. Learning motion
in feature space: Locally-consistent deformable convolution
networks for ﬁne-grained action detection. In IEEE Interna-
tional Conference on Computer Vision (ICCV), 2019. 7
[31] Mehdi Noroozi and Paolo Favaro. Unsupervised learning of
In Euro-

visual representations by solving jigsaw puzzles.
pean Conference on Computer Vision (ECCV), 2016. 8
[32] Sinno Jialin Pan, Qiang Yang, et al. A survey on transfer
learning. IEEE Transactions on Knowledge and Data Engi-
neering (TKDE), 22(10):1345–1359, 2010. 2, 6

[33] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Alban
Desmaison, Luca Antiga, and Adam Lerer. Automatic dif-
ferentiation in pytorch. In Advances in Neural Information
Processing Systems Workshop (NeurIPSW), 2017. 10
[34] Zhongyi Pei, Zhangjie Cao, Mingsheng Long, and Jianmin
Wang. Multi-adversarial domain adaptation. In AAAI Con-
ference on Artiﬁcial Intelligence (AAAI), 2018. 2, 6, 7, 11

[35] Alexander Richard, Hilde Kuehne, and Juergen Gall. Weakly
supervised action learning with rnn based ﬁne-to-coarse
modeling. In IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR), 2017. 7

[36] Kuniaki Saito, Kohei Watanabe, Yoshitaka Ushiku, and Tat-
suya Harada. Maximum classiﬁer discrepancy for unsuper-
vised domain adaptation. In IEEE conference on Computer
Vision and Pattern Recognition (CVPR), 2018. 2, 6, 7, 11

[37] Sebastian Stein and Stephen J McKenna. Combining em-
bedded accelerometers with computer vision for recognizing
food preparation activities. In ACM international joint con-
ference on Pervasive and ubiquitous computing (UbiComp),
2013. 2, 6

[38] Benoit Steiner, Zachary DeVito, Soumith Chintala, Sam
Gross, Adam Paszke, Francisco Massa, Adam Lerer, Gre-
gory Chanan, Zeming Lin, Edward Yang, et al. Pytorch:
An imperative style, high-performance deep learning li-
brary. Advances in Neural Information Processing Systems
(NeurIPS), 2019. 10

[39] Waqas Sultani and Imran Saleemi. Human action recognition
across datasets by foreground-weighted histogram decompo-
sition. In IEEE conference on Computer Vision and Pattern
Recognition (CVPR), 2014. 2

[40] Eric Tzeng, Judy Hoffman, Kate Saenko, and Trevor Dar-
rell. Adversarial discriminative domain adaptation. In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), 2017. 2

16

