7
1
0
2
 
y
a
M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
7
4
8
0
.
5
0
7
1
:
v
i
X
r
a

Input Fast-Forwarding
for Better Deep Learning

Ahmed Ibrahim1,4, A. Lynn Abbott1, Mohamed E. Hussein2,3

1 Virginia Polytechnic Institute and State University, USA
2 Egypt-Japan University of Science and Technology, Egypt
3 Alexandria University, Egypt
4 Benha University, Egypt
{nady,abbott}@vt.edu; mohamed.e.hussein@ejust.edu.eg

it

the

layers

enables

individual

framework,
Abstract. This paper introduces a new architectural
known as input fast-forwarding, that can enhance the performance of
deep networks. The main idea is to incorporate a parallel path that
sends representations of input values forward to deeper network layers.
This scheme is substantially diﬀerent from “deep supervision,” in which
the loss layer is re-introduced to earlier layers. The parallel path
provided by fast-forwarding enhances the training process in two ways.
First,
to combine higher-level
information (from the standard processing path) with lower-level
information (from the fast-forward path). Second, this new architecture
reduces the problem of vanishing gradients substantially because the
fast-forwarding
gradient
a
backpropagation. In order to evaluate the utility of the proposed
technique, a Fast-Forward Network (FFNet), with 20 convolutional
layers along with parallel fast-forward paths, has been created and
tested. The paper presents empirical results that demonstrate improved
learning capacity of FFNet due to fast-forwarding, as compared to
GoogLeNet (with deep supervision) and CaﬀeNet, which are 4× and
18× larger in size, respectively. All of the source code and deep learning
models described in this paper will be made available to the entire
research community5.

provides

shorter

route

path

for

1

Introduction

Developments in deep learning have led to networks that have grown from 5
layers in LeNet [10], introduced in 1998, to 152 layers in the latest version of
ResNet [5]. One consequence of deeper and deeper networks is the problem of
vanishing gradients during training. This problem occurs as error values, which
depend on the computed gradient values, are propagated backward through the
network to update the weights at each layer. With each additional layer, a smaller
fraction of the error gradient is available to guide the adjustment of network

5 https://github.com/aicentral/FFNet

2

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

weights. As a result, the weights in early layers are updated very slowly; hence,
the performance of the entire training process is degraded.

Many models have been proposed to overcome the vanishing-gradient
problem. One approach is to provide alternative paths for signals to travel, as
compared to traditional layer-to-layer pathways. An example of this approach
is the Deeply-Supervised Network (DSN) [11], where a companion objective
function is added to each hidden layer in the network, providing gradient
values directly to the hidden layers. DSN uses Support Vector Machines (SVM)
[3] in its companion objective function, which means that end-to-end training
of the network is not supported. Another example is relaxed deep supervision
[12], where an improvement over a holistic edge detection model [19] is made
by providing relaxed versions of the target edge map to the earlier layers of the
network. This approach provides a version of the gradient directly to the early
layers. However, relaxed deep supervision is suitable only for problems where
relaxed versions of the labels can be created, such as for maps of intensity
edges. GoogLeNet [13] is another model that uses a mechanism to address the
problem of vanishing gradients. More relevant details about GoogLeNet will be
given in section 2 because it serves as a baseline for comparison with our
proposed model.

The novel approach that is proposed here provides parallel signal paths that
carry simple representations of the input to deeper layers through what we call a
fast-forwarding branch. This approach allows for a novel integration of “shallower
information” with “deeper information” by the network. During training the
fast-forwarding branch provides an eﬀective means for back-propagating errors
so that the vanishing-gradient problem is reduced.

To demonstrate the eﬃcacy of the model, we created a 20 layer network with
fast-forwarding branches, which we call FFNet. To study the eﬀect of the fast-
forwarding concept, the network layers are made of simple convolutional layers
followed by fully connected layers with no additional complexities. The results
that we have obtained using the the relatively small and simple FFNet model
have been surprisingly good, especially when compared with the performance of
bigger and more complex models.

The rest of this paper is organized as follows. Section 2 presents a brief
survey of related work, including a discussion of the models that will be used
as a baseline to be compared with FFNet. Section 3 provides details concerning
the proposed model. In order to gauge the performance of this approach,
experimental results from FFNet were compared with results from several
well-known deep models. These experiments are described in Section 4. Finally,
concluding remarks are given in Section 5.

2 Related Work

2.1 Deep Learning

Deep learning is a machine-learning technique that has become increasingly
popular in computer vision research. The main diﬀerence between classical

Lecture Notes in Computer Science

3

machine learning (ML) and deep learning is the way that features are
extracted. For classical ML techniques such as support vector machines
(SVM) [3], feature extraction is performed in advance using techniques crafted
by the researchers. Then, the training procedure develops weights or rules that
map any given feature vector to an output class label. In contrast, the typical
deep-learning procedure is to directly feed signal values as inputs to the
training procedure, without any preliminary eﬀorts at feature extraction. The
network takes the input signal (pixel values, in our case), and assigns a class
label based on those signal values directly. Because the deep-learning approach
implicitly must derive its own features, many more training samples are
required than for traditional ML approaches.

Several deep-learning packages are available for researchers. The popular
package that we have used to evaluate the proposed model is Caﬀe [7], which
was created with computer vision tasks in mind. Caﬀe is relatively easy to use,
ﬂexible, and powerful. It was developed in C++ using GPU optimization
libraries, such as CuDNN [2], BLAS [18], and ATLAS [17]. In the next sections,
we will discuss brieﬂy two well-known deep models, AlexNet and GoogLeNet.
These two models will be used as a baseline for comparison with the proposed
FFNet model.

2.2 AlexNet and CaﬀeNet

AlexNet [9] was the ﬁrst deep model to win the ILSVRC [4] challenge. For the
ILSVRC-2012 competition, AlexNet won with a top-5 test error rate of 15.3%,
compared to 26.2% achieved by the second-best entry. This model consists of
ﬁve convolutional layers followed by three fully-connected layers. The creators
of Caﬀe [7] introduced a slightly modiﬁed version of AlexNet by switching the
order of pooling and normalization layers. They named the modiﬁed version
CaﬀeNet [1]. As the only modiﬁcation done to the network is switching the
order of pooling and normalization layers, the size of the network is exactly the
same as AlexNet.

AlexNet and CaﬀeNet will be used to provide baseline cases of simple
architectures that rely on huge numbers of parameters. The number of ﬁlters in
the convolutional layers range from 96 to 384 in AlexNet, while the proposed
FFNet model uses only 64 ﬁlters in each convolutional layer. AlexNet uses a
4069-node fully-connected layer followed by another layer of the same size,
whereas FFNet uses only a 400-node fully connected layer followed by a
100-node layer. The total size of AlexNet is therefore approximately 18 times
bigger than FFNet.

2.3 GoogleNet

GoogLeNet [13] is another winner of the ILSVRC challenge. This model won
the ILSVRC-2014 competition with a top-5 test error rate of 6.6%. The
network consists of 22 layers with a relatively complex design called
“inception.” The inception module, which is used to implement the layers of

4

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

GoogLeNet, consists of parallel paths of convolutional layers of diﬀerent sizes
concatenated together. The number of ﬁlters in the convolutional layers inside
the inception modules ranges from 16 to 384. (By comparison, in FFNet the
number of ﬁlters in each convolutional layer is ﬁxed.) In addition to using the
inception design, GoogLeNet uses three auxiliary classiﬁers connected to the
intermediate layers during training. GoogLeNet is of interest to us as a baseline
for comparison because of its depth, because of its complex architecture, and
especially because of the auxiliary classiﬁers. GoogLeNet is 4 times bigger and
far more complex than the proposed FFNet model.

2.4 Benchmarking Datasets

Many datasets have been created to aid in machine learning for computer
vision. To evaluate the proposed FFNet model, we selected two publicly
available datasets, COCO-Text-Patch and CIFAR-10.

COCO-Text-Patch [6], contains approximately 354, 000 images of size 32×32
that are each labeled as “text” or “non-text.” This dataset was created to address
the problem of text veriﬁcation, which is an essential stage in the end-to-end text
detection and recognition pipeline. The dataset is derived from COCO-Text [15],
which contains 63, 686 images of real-world scenes with 173, 589 instances of text.
CIFAR-10 [8] is a labeled subset of the “80 million tiny images” dataset [14].
They were collected by the creator of AlexNet. The CIFAR-10 dataset consists
of 60, 000 color images of size 32 × 32 in 10 classes, with 6, 000 images per class.

3 Proposed Model: FFNet

The new FFNet model consists of convolutional units that are organized into a
sequence of stages. Within each stage, as illustrated in ﬁgure 1, computations
are performed in 2 parallel paths. The left branch in the ﬁgure represents a
standard convolutional path, whereas the right branch represents an extra
parallel data path. It is this parallel, “fast-forwarding”, path that delivers the
improved performance of the network.

The input to the stage, S1, arrives from the previous layer, and the output
to the next layer is shown as S2. The standard (deep) branch consists of three
consecutive 3 × 3 × 64 convolutional layers. Each layer is followed by an in-place
Rectiﬁed Linear Unit (ReLU). The last layer of the deep branch is padded with
zeros, for reasons that are described below.

Let the input S1 be of size N × N × C. The value of C is the number of
channels, which is typically 128 except for the ﬁrst stage where C = 3 to match
the input data. Refer to a stage’s deep convolutional layers as S2C1, S2C2, and
S2C3, as shown in the ﬁgure. The deep branch’s output S2C3 can be represented
as follows, where CON V is the convolutional operation, s is the stride, and p is
the padding:

S2C3 = CON V 3×3,s=1,p=1(CON V 3×3,s=1,p=0(CON V 3×3,s=1,p=0(S1)))

(1)

Lecture Notes in Computer Science

5

The size of S2C3 will be (N − 2) × (N − 2).

The fast-forwarding branch consists of a single 5 × 5 × 64 convolutional layer
followed by a ReLU. This branch takes S1 as input, and generates the output
B2C1 that can be represented as follows:

B2C1 = CON V 5×5,s=1,p=0(S1)

(2)

No padding is used for the fast-forwarding branch, so that the resulting output
size is also (N − 2) × (N − 2). This branch will provide a “shallower”
representation of the input S1 to the next stage.

The outputs of the deep branch and of the fast-forwarding branch are
concatenated to create the single stage output S2. The size of S2 will be
(N − 2) × (N − 2) × 128. Because the last layer of the deep branch is padded
with zeros, both branches provide data of the same size to the output.

To evaluate the fast-forwarding concept, we built a Fast-Forwarding Network
(FFNet) that consists of 6 consecutive fast-forwarding stages followed by two
fully connected layers plus an output layer, as shown in ﬁgure 2. The 6 fast-
forwarding stages consist of a total of 18 convolutional layers, each of size 3 ×
3 × 64. The ﬁrst layer of the two fully-connected layers consists of 400 nodes,
while the second layer consists of 100 nodes.

Fig. 1. A single fast-forwarding stage.
Node S1 represents the input, and S2 is
the output. The left pathway contains
common convolutational blocks. At the
right is the fast-forward path.

of

fast-forwarding,

Fig. 2. Proposed FFNet model.
Because
this
relatively small network has yielded
empirical results that are better than
much larger deep networks.

4 Evaluation

To evaluate the performance of the proposed model, a number of experiments
were conducted that compare FFNet to AlexNet, CaﬀeNet, and GoogLeNet.

6

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

The publicly available datasets CIFAR-10 [8] and COCO-Text-Patch [6] were
used in the evaluation, as described previously. FFNet was implemented using
Caﬀe [7]. Standard 10-crop augmentation was applied to the datasets. All the
training and testing were performed on a GPU with batch size 32. The training
was stopped after 150, 000 iterations as the validation accuracy and loss started
to plateau.

A summary of results is provided in table 1. Despite its relatively small size,
the performance of the proposed FFNet model exceeded the performance of
CaﬀeNet and GoogleNet in these experiments. The accuracy and validation loss
graphs shown in ﬁgure 3 demonstrate how the proposed model converges with the
same speed as CaﬀeNet and GoogLeNet. These trends provide evidence of the
eﬀectiveness of the fast-forwarding approach in ﬁghting the vanishing-gradient
problem.

Fig. 3. COCO-Text-Patch validation accuracy and loss for the proposed FFNet model
(red), CaﬀeNet (blue), and GoogLeNet (green).

5 Conclusion

This paper has presented a new concept, called input fast-forwarding, which
results in improved performance for deep-learning systems. The approach utilizes
parallel data paths that provide two advantages over previous approaches. One

Lecture Notes in Computer Science

7

Table 1. Performance comparison of the proposed FFNet model with several common
alternatives. Although FFNet is much smaller than the other models, its error rate was
lower than the others (with one exception), using publicly available test sets.

Model

Error Rate (%)

Description
AlexNet with dropout [9]
AlexNet with stoch. pooling [20]
AlexNet with channel-out [16]
GoogLeNet [6]
AlexNet [9], CaﬀeNet [6]
FFNet (the proposed model)
* Average forward path time per image on a K80 GPU
** CTP: COCO-Text-Patch dataset [6]

Layers Size (MB) Time*(ms) CIFAR-10 CTP**
-
-
-
9.4
5
2.8

181.3
181.3
181.3
41.2
181.3
10.8

15.6
15.3
13.2
-
18.0
13.6

-
-
-
9.9
9.1
9.0

8
8
8
22
8
20

advantage is the explicit merging of higher-level representations of data with
lower-level representations. A second advantage is a substantial reduction to the
eﬀects of the vanishing gradients problem.

To evaluate the model, we built a 20-layer network (FFNet)

that
implements the fast-forwarding concept. The network consists of simple
convolutional layers, with no added complexities, to prove that the outstanding
performance of the model
is primarily the result of the fast-forwarding
approach. Empirical results also showed convergence during training at
virtually the same rate as the bigger and more complex models. FFNet
achieved an error rate of 13.6% on the CIFAR-10 dataset, which is on par with
one variation of AlexNet. When tested on COCO-Text-Patch, FFNet’s
performance surpassed that of CaﬀeNet and GoogLeNet, which are all
signiﬁcantly larger in size.

These results suggest that similar advantages may be obtained through the
application of fast-forwarding to other models, and with diﬀerent benchmark
datasets.

References

1. BVLC reference CaﬀeNet model.

https://github.com/BVLC/caffe/tree/

master/models/bvlc_reference_caffenet, accessed: June 2016

2. Chetlur, S., Woolley, C., Vandermersch, P., Cohen, J., Tran, J., Catanzaro, B.,
Shelhamer, E.: cuDNN: Eﬃcient primitives for deep learning. arXiv preprint
arXiv:1410.0759 (2014)

3. Cristianini, N., Shawe-Taylor, J.: An Introduction to Support Vector Machines and

other Kernel-based Learning Methods. Cambridge University Press (2000)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: ImageNet: A large-scale
hierarchical image database. In: Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR). pp. 248–255 (2009)

5. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 770–778 (2016)

8

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

6. Ibrahim, A., Abbott, A.L., Hussein, M.E.: An image dataset of text patches
in everyday scenes. In: Proceedings of the International Symposium on Visual
Computing (ISVC). pp. 291–300. Springer (2016)

7. Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R.,
Guadarrama, S., Darrell, T.: Caﬀe: Convolutional architecture for fast feature
embedding. In: 22nd ACM International Conference on Multimedia. pp. 675–678
(2014)

8. Krizhevsky, A., Hinton, G.: Learning multiple layers of features from tiny images.
Master’s thesis, Department of Computer Science, University of Toronto (2009)
9. Krizhevsky, A., Sutskever, I., Hinton, G.E.: ImageNet classiﬁcation with deep
convolutional neural networks. In: Proceedings of Advances in Neural Information
Processing Systems (NIPS). pp. 1097–1105 (2012)

10. LeCun, Y., Bottou, L., Bengio, Y., Haﬀner, P.: Gradient-based learning applied to
document recognition. In: Proceedings of the IEEE. vol. 86, pp. 2278–2324 (1998)
11. Lee, C.Y., Xie, S., Gallagher, P.W., Zhang, Z., Tu, Z.: Deeply-supervised nets.
In: Proceedings of the 18th International Conference on Artiﬁcial Intelligence and
Statistics (AISTATS). vol. 2, pp. 562–570 (2015)

12. Liu, Y., Lew, M.S.: Learning relaxed deep supervision for better edge detection. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 231–240 (2016)

13. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A.: Going deeper with convolutions. In: Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR).
pp. 1–9 (2015)

14. Torralba, A., Fergus, R., Freeman, W.T.: 80 million tiny images: A large data set
for nonparametric object and scene recognition. IEEE Transactions on Pattern
Analysis and Machine Intelligence (PAMI). 30(11), 1958–1970 (2008)

15. Veit, A., Matera, T., Neumann, L., Matas, J., Belongie, S.: COCO-Text:
dataset and benchmark for text detection and recognition in natural images.
In: arXiv preprint arXiv:1601.07140 (2016), http://vision.cornell.edu/se3/
wp-content/uploads/2016/01/1601.07140v1.pdf

16. Wang, Q., JaJa, J.: From maxout to channel-out: Encoding information on sparse
pathways. In: Proceedings of the International Conference on Artiﬁcial Neural
Networks. pp. 273–280. Springer (2014)

17. Whaley, R.C., Dongarra, J.J.: Automatically tuned linear algebra software. In:

Proceedings of the ACM/IEEE Conference on Supercomputing. pp. 1–27 (1998)

18. Xianyi,

Qian,
http://xianyi.github.io/OpenBLAS (2014)

W.,

Z.,

Chothia,

Z.:

OpenBLAS.

URL:

19. Xie, S., Tu, Z.: Holistically-nested edge detection. In: Proceedings of the IEEE
International Conference on Computer Vision (ICCV). pp. 1395–1403 (2015)
20. Zeiler, M., Fergus, R.: Stochastic pooling for regularization of deep convolutional
neural networks. In: Proceedings of the International Conference on Learning
Representation (ICLR) (2013)

7
1
0
2
 
y
a
M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
7
4
8
0
.
5
0
7
1
:
v
i
X
r
a

Input Fast-Forwarding
for Better Deep Learning

Ahmed Ibrahim1,4, A. Lynn Abbott1, Mohamed E. Hussein2,3

1 Virginia Polytechnic Institute and State University, USA
2 Egypt-Japan University of Science and Technology, Egypt
3 Alexandria University, Egypt
4 Benha University, Egypt
{nady,abbott}@vt.edu; mohamed.e.hussein@ejust.edu.eg

it

the

layers

enables

individual

framework,
Abstract. This paper introduces a new architectural
known as input fast-forwarding, that can enhance the performance of
deep networks. The main idea is to incorporate a parallel path that
sends representations of input values forward to deeper network layers.
This scheme is substantially diﬀerent from “deep supervision,” in which
the loss layer is re-introduced to earlier layers. The parallel path
provided by fast-forwarding enhances the training process in two ways.
First,
to combine higher-level
information (from the standard processing path) with lower-level
information (from the fast-forward path). Second, this new architecture
reduces the problem of vanishing gradients substantially because the
fast-forwarding
gradient
a
backpropagation. In order to evaluate the utility of the proposed
technique, a Fast-Forward Network (FFNet), with 20 convolutional
layers along with parallel fast-forward paths, has been created and
tested. The paper presents empirical results that demonstrate improved
learning capacity of FFNet due to fast-forwarding, as compared to
GoogLeNet (with deep supervision) and CaﬀeNet, which are 4× and
18× larger in size, respectively. All of the source code and deep learning
models described in this paper will be made available to the entire
research community5.

provides

shorter

route

path

for

1

Introduction

Developments in deep learning have led to networks that have grown from 5
layers in LeNet [10], introduced in 1998, to 152 layers in the latest version of
ResNet [5]. One consequence of deeper and deeper networks is the problem of
vanishing gradients during training. This problem occurs as error values, which
depend on the computed gradient values, are propagated backward through the
network to update the weights at each layer. With each additional layer, a smaller
fraction of the error gradient is available to guide the adjustment of network

5 https://github.com/aicentral/FFNet

2

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

weights. As a result, the weights in early layers are updated very slowly; hence,
the performance of the entire training process is degraded.

Many models have been proposed to overcome the vanishing-gradient
problem. One approach is to provide alternative paths for signals to travel, as
compared to traditional layer-to-layer pathways. An example of this approach
is the Deeply-Supervised Network (DSN) [11], where a companion objective
function is added to each hidden layer in the network, providing gradient
values directly to the hidden layers. DSN uses Support Vector Machines (SVM)
[3] in its companion objective function, which means that end-to-end training
of the network is not supported. Another example is relaxed deep supervision
[12], where an improvement over a holistic edge detection model [19] is made
by providing relaxed versions of the target edge map to the earlier layers of the
network. This approach provides a version of the gradient directly to the early
layers. However, relaxed deep supervision is suitable only for problems where
relaxed versions of the labels can be created, such as for maps of intensity
edges. GoogLeNet [13] is another model that uses a mechanism to address the
problem of vanishing gradients. More relevant details about GoogLeNet will be
given in section 2 because it serves as a baseline for comparison with our
proposed model.

The novel approach that is proposed here provides parallel signal paths that
carry simple representations of the input to deeper layers through what we call a
fast-forwarding branch. This approach allows for a novel integration of “shallower
information” with “deeper information” by the network. During training the
fast-forwarding branch provides an eﬀective means for back-propagating errors
so that the vanishing-gradient problem is reduced.

To demonstrate the eﬃcacy of the model, we created a 20 layer network with
fast-forwarding branches, which we call FFNet. To study the eﬀect of the fast-
forwarding concept, the network layers are made of simple convolutional layers
followed by fully connected layers with no additional complexities. The results
that we have obtained using the the relatively small and simple FFNet model
have been surprisingly good, especially when compared with the performance of
bigger and more complex models.

The rest of this paper is organized as follows. Section 2 presents a brief
survey of related work, including a discussion of the models that will be used
as a baseline to be compared with FFNet. Section 3 provides details concerning
the proposed model. In order to gauge the performance of this approach,
experimental results from FFNet were compared with results from several
well-known deep models. These experiments are described in Section 4. Finally,
concluding remarks are given in Section 5.

2 Related Work

2.1 Deep Learning

Deep learning is a machine-learning technique that has become increasingly
popular in computer vision research. The main diﬀerence between classical

Lecture Notes in Computer Science

3

machine learning (ML) and deep learning is the way that features are
extracted. For classical ML techniques such as support vector machines
(SVM) [3], feature extraction is performed in advance using techniques crafted
by the researchers. Then, the training procedure develops weights or rules that
map any given feature vector to an output class label. In contrast, the typical
deep-learning procedure is to directly feed signal values as inputs to the
training procedure, without any preliminary eﬀorts at feature extraction. The
network takes the input signal (pixel values, in our case), and assigns a class
label based on those signal values directly. Because the deep-learning approach
implicitly must derive its own features, many more training samples are
required than for traditional ML approaches.

Several deep-learning packages are available for researchers. The popular
package that we have used to evaluate the proposed model is Caﬀe [7], which
was created with computer vision tasks in mind. Caﬀe is relatively easy to use,
ﬂexible, and powerful. It was developed in C++ using GPU optimization
libraries, such as CuDNN [2], BLAS [18], and ATLAS [17]. In the next sections,
we will discuss brieﬂy two well-known deep models, AlexNet and GoogLeNet.
These two models will be used as a baseline for comparison with the proposed
FFNet model.

2.2 AlexNet and CaﬀeNet

AlexNet [9] was the ﬁrst deep model to win the ILSVRC [4] challenge. For the
ILSVRC-2012 competition, AlexNet won with a top-5 test error rate of 15.3%,
compared to 26.2% achieved by the second-best entry. This model consists of
ﬁve convolutional layers followed by three fully-connected layers. The creators
of Caﬀe [7] introduced a slightly modiﬁed version of AlexNet by switching the
order of pooling and normalization layers. They named the modiﬁed version
CaﬀeNet [1]. As the only modiﬁcation done to the network is switching the
order of pooling and normalization layers, the size of the network is exactly the
same as AlexNet.

AlexNet and CaﬀeNet will be used to provide baseline cases of simple
architectures that rely on huge numbers of parameters. The number of ﬁlters in
the convolutional layers range from 96 to 384 in AlexNet, while the proposed
FFNet model uses only 64 ﬁlters in each convolutional layer. AlexNet uses a
4069-node fully-connected layer followed by another layer of the same size,
whereas FFNet uses only a 400-node fully connected layer followed by a
100-node layer. The total size of AlexNet is therefore approximately 18 times
bigger than FFNet.

2.3 GoogleNet

GoogLeNet [13] is another winner of the ILSVRC challenge. This model won
the ILSVRC-2014 competition with a top-5 test error rate of 6.6%. The
network consists of 22 layers with a relatively complex design called
“inception.” The inception module, which is used to implement the layers of

4

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

GoogLeNet, consists of parallel paths of convolutional layers of diﬀerent sizes
concatenated together. The number of ﬁlters in the convolutional layers inside
the inception modules ranges from 16 to 384. (By comparison, in FFNet the
number of ﬁlters in each convolutional layer is ﬁxed.) In addition to using the
inception design, GoogLeNet uses three auxiliary classiﬁers connected to the
intermediate layers during training. GoogLeNet is of interest to us as a baseline
for comparison because of its depth, because of its complex architecture, and
especially because of the auxiliary classiﬁers. GoogLeNet is 4 times bigger and
far more complex than the proposed FFNet model.

2.4 Benchmarking Datasets

Many datasets have been created to aid in machine learning for computer
vision. To evaluate the proposed FFNet model, we selected two publicly
available datasets, COCO-Text-Patch and CIFAR-10.

COCO-Text-Patch [6], contains approximately 354, 000 images of size 32×32
that are each labeled as “text” or “non-text.” This dataset was created to address
the problem of text veriﬁcation, which is an essential stage in the end-to-end text
detection and recognition pipeline. The dataset is derived from COCO-Text [15],
which contains 63, 686 images of real-world scenes with 173, 589 instances of text.
CIFAR-10 [8] is a labeled subset of the “80 million tiny images” dataset [14].
They were collected by the creator of AlexNet. The CIFAR-10 dataset consists
of 60, 000 color images of size 32 × 32 in 10 classes, with 6, 000 images per class.

3 Proposed Model: FFNet

The new FFNet model consists of convolutional units that are organized into a
sequence of stages. Within each stage, as illustrated in ﬁgure 1, computations
are performed in 2 parallel paths. The left branch in the ﬁgure represents a
standard convolutional path, whereas the right branch represents an extra
parallel data path. It is this parallel, “fast-forwarding”, path that delivers the
improved performance of the network.

The input to the stage, S1, arrives from the previous layer, and the output
to the next layer is shown as S2. The standard (deep) branch consists of three
consecutive 3 × 3 × 64 convolutional layers. Each layer is followed by an in-place
Rectiﬁed Linear Unit (ReLU). The last layer of the deep branch is padded with
zeros, for reasons that are described below.

Let the input S1 be of size N × N × C. The value of C is the number of
channels, which is typically 128 except for the ﬁrst stage where C = 3 to match
the input data. Refer to a stage’s deep convolutional layers as S2C1, S2C2, and
S2C3, as shown in the ﬁgure. The deep branch’s output S2C3 can be represented
as follows, where CON V is the convolutional operation, s is the stride, and p is
the padding:

S2C3 = CON V 3×3,s=1,p=1(CON V 3×3,s=1,p=0(CON V 3×3,s=1,p=0(S1)))

(1)

Lecture Notes in Computer Science

5

The size of S2C3 will be (N − 2) × (N − 2).

The fast-forwarding branch consists of a single 5 × 5 × 64 convolutional layer
followed by a ReLU. This branch takes S1 as input, and generates the output
B2C1 that can be represented as follows:

B2C1 = CON V 5×5,s=1,p=0(S1)

(2)

No padding is used for the fast-forwarding branch, so that the resulting output
size is also (N − 2) × (N − 2). This branch will provide a “shallower”
representation of the input S1 to the next stage.

The outputs of the deep branch and of the fast-forwarding branch are
concatenated to create the single stage output S2. The size of S2 will be
(N − 2) × (N − 2) × 128. Because the last layer of the deep branch is padded
with zeros, both branches provide data of the same size to the output.

To evaluate the fast-forwarding concept, we built a Fast-Forwarding Network
(FFNet) that consists of 6 consecutive fast-forwarding stages followed by two
fully connected layers plus an output layer, as shown in ﬁgure 2. The 6 fast-
forwarding stages consist of a total of 18 convolutional layers, each of size 3 ×
3 × 64. The ﬁrst layer of the two fully-connected layers consists of 400 nodes,
while the second layer consists of 100 nodes.

Fig. 1. A single fast-forwarding stage.
Node S1 represents the input, and S2 is
the output. The left pathway contains
common convolutational blocks. At the
right is the fast-forward path.

of

fast-forwarding,

Fig. 2. Proposed FFNet model.
Because
this
relatively small network has yielded
empirical results that are better than
much larger deep networks.

4 Evaluation

To evaluate the performance of the proposed model, a number of experiments
were conducted that compare FFNet to AlexNet, CaﬀeNet, and GoogLeNet.

6

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

The publicly available datasets CIFAR-10 [8] and COCO-Text-Patch [6] were
used in the evaluation, as described previously. FFNet was implemented using
Caﬀe [7]. Standard 10-crop augmentation was applied to the datasets. All the
training and testing were performed on a GPU with batch size 32. The training
was stopped after 150, 000 iterations as the validation accuracy and loss started
to plateau.

A summary of results is provided in table 1. Despite its relatively small size,
the performance of the proposed FFNet model exceeded the performance of
CaﬀeNet and GoogleNet in these experiments. The accuracy and validation loss
graphs shown in ﬁgure 3 demonstrate how the proposed model converges with the
same speed as CaﬀeNet and GoogLeNet. These trends provide evidence of the
eﬀectiveness of the fast-forwarding approach in ﬁghting the vanishing-gradient
problem.

Fig. 3. COCO-Text-Patch validation accuracy and loss for the proposed FFNet model
(red), CaﬀeNet (blue), and GoogLeNet (green).

5 Conclusion

This paper has presented a new concept, called input fast-forwarding, which
results in improved performance for deep-learning systems. The approach utilizes
parallel data paths that provide two advantages over previous approaches. One

Lecture Notes in Computer Science

7

Table 1. Performance comparison of the proposed FFNet model with several common
alternatives. Although FFNet is much smaller than the other models, its error rate was
lower than the others (with one exception), using publicly available test sets.

Model

Error Rate (%)

Description
AlexNet with dropout [9]
AlexNet with stoch. pooling [20]
AlexNet with channel-out [16]
GoogLeNet [6]
AlexNet [9], CaﬀeNet [6]
FFNet (the proposed model)
* Average forward path time per image on a K80 GPU
** CTP: COCO-Text-Patch dataset [6]

Layers Size (MB) Time*(ms) CIFAR-10 CTP**
-
-
-
9.4
5
2.8

181.3
181.3
181.3
41.2
181.3
10.8

15.6
15.3
13.2
-
18.0
13.6

-
-
-
9.9
9.1
9.0

8
8
8
22
8
20

advantage is the explicit merging of higher-level representations of data with
lower-level representations. A second advantage is a substantial reduction to the
eﬀects of the vanishing gradients problem.

To evaluate the model, we built a 20-layer network (FFNet)

that
implements the fast-forwarding concept. The network consists of simple
convolutional layers, with no added complexities, to prove that the outstanding
performance of the model
is primarily the result of the fast-forwarding
approach. Empirical results also showed convergence during training at
virtually the same rate as the bigger and more complex models. FFNet
achieved an error rate of 13.6% on the CIFAR-10 dataset, which is on par with
one variation of AlexNet. When tested on COCO-Text-Patch, FFNet’s
performance surpassed that of CaﬀeNet and GoogLeNet, which are all
signiﬁcantly larger in size.

These results suggest that similar advantages may be obtained through the
application of fast-forwarding to other models, and with diﬀerent benchmark
datasets.

References

1. BVLC reference CaﬀeNet model.

https://github.com/BVLC/caffe/tree/

master/models/bvlc_reference_caffenet, accessed: June 2016

2. Chetlur, S., Woolley, C., Vandermersch, P., Cohen, J., Tran, J., Catanzaro, B.,
Shelhamer, E.: cuDNN: Eﬃcient primitives for deep learning. arXiv preprint
arXiv:1410.0759 (2014)

3. Cristianini, N., Shawe-Taylor, J.: An Introduction to Support Vector Machines and

other Kernel-based Learning Methods. Cambridge University Press (2000)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: ImageNet: A large-scale
hierarchical image database. In: Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR). pp. 248–255 (2009)

5. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 770–778 (2016)

8

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

6. Ibrahim, A., Abbott, A.L., Hussein, M.E.: An image dataset of text patches
in everyday scenes. In: Proceedings of the International Symposium on Visual
Computing (ISVC). pp. 291–300. Springer (2016)

7. Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R.,
Guadarrama, S., Darrell, T.: Caﬀe: Convolutional architecture for fast feature
embedding. In: 22nd ACM International Conference on Multimedia. pp. 675–678
(2014)

8. Krizhevsky, A., Hinton, G.: Learning multiple layers of features from tiny images.
Master’s thesis, Department of Computer Science, University of Toronto (2009)
9. Krizhevsky, A., Sutskever, I., Hinton, G.E.: ImageNet classiﬁcation with deep
convolutional neural networks. In: Proceedings of Advances in Neural Information
Processing Systems (NIPS). pp. 1097–1105 (2012)

10. LeCun, Y., Bottou, L., Bengio, Y., Haﬀner, P.: Gradient-based learning applied to
document recognition. In: Proceedings of the IEEE. vol. 86, pp. 2278–2324 (1998)
11. Lee, C.Y., Xie, S., Gallagher, P.W., Zhang, Z., Tu, Z.: Deeply-supervised nets.
In: Proceedings of the 18th International Conference on Artiﬁcial Intelligence and
Statistics (AISTATS). vol. 2, pp. 562–570 (2015)

12. Liu, Y., Lew, M.S.: Learning relaxed deep supervision for better edge detection. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 231–240 (2016)

13. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A.: Going deeper with convolutions. In: Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR).
pp. 1–9 (2015)

14. Torralba, A., Fergus, R., Freeman, W.T.: 80 million tiny images: A large data set
for nonparametric object and scene recognition. IEEE Transactions on Pattern
Analysis and Machine Intelligence (PAMI). 30(11), 1958–1970 (2008)

15. Veit, A., Matera, T., Neumann, L., Matas, J., Belongie, S.: COCO-Text:
dataset and benchmark for text detection and recognition in natural images.
In: arXiv preprint arXiv:1601.07140 (2016), http://vision.cornell.edu/se3/
wp-content/uploads/2016/01/1601.07140v1.pdf

16. Wang, Q., JaJa, J.: From maxout to channel-out: Encoding information on sparse
pathways. In: Proceedings of the International Conference on Artiﬁcial Neural
Networks. pp. 273–280. Springer (2014)

17. Whaley, R.C., Dongarra, J.J.: Automatically tuned linear algebra software. In:

Proceedings of the ACM/IEEE Conference on Supercomputing. pp. 1–27 (1998)

18. Xianyi,

Qian,
http://xianyi.github.io/OpenBLAS (2014)

W.,

Z.,

Chothia,

Z.:

OpenBLAS.

URL:

19. Xie, S., Tu, Z.: Holistically-nested edge detection. In: Proceedings of the IEEE
International Conference on Computer Vision (ICCV). pp. 1395–1403 (2015)
20. Zeiler, M., Fergus, R.: Stochastic pooling for regularization of deep convolutional
neural networks. In: Proceedings of the International Conference on Learning
Representation (ICLR) (2013)

7
1
0
2
 
y
a
M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
7
4
8
0
.
5
0
7
1
:
v
i
X
r
a

Input Fast-Forwarding
for Better Deep Learning

Ahmed Ibrahim1,4, A. Lynn Abbott1, Mohamed E. Hussein2,3

1 Virginia Polytechnic Institute and State University, USA
2 Egypt-Japan University of Science and Technology, Egypt
3 Alexandria University, Egypt
4 Benha University, Egypt
{nady,abbott}@vt.edu; mohamed.e.hussein@ejust.edu.eg

it

the

layers

enables

individual

framework,
Abstract. This paper introduces a new architectural
known as input fast-forwarding, that can enhance the performance of
deep networks. The main idea is to incorporate a parallel path that
sends representations of input values forward to deeper network layers.
This scheme is substantially diﬀerent from “deep supervision,” in which
the loss layer is re-introduced to earlier layers. The parallel path
provided by fast-forwarding enhances the training process in two ways.
First,
to combine higher-level
information (from the standard processing path) with lower-level
information (from the fast-forward path). Second, this new architecture
reduces the problem of vanishing gradients substantially because the
fast-forwarding
gradient
a
backpropagation. In order to evaluate the utility of the proposed
technique, a Fast-Forward Network (FFNet), with 20 convolutional
layers along with parallel fast-forward paths, has been created and
tested. The paper presents empirical results that demonstrate improved
learning capacity of FFNet due to fast-forwarding, as compared to
GoogLeNet (with deep supervision) and CaﬀeNet, which are 4× and
18× larger in size, respectively. All of the source code and deep learning
models described in this paper will be made available to the entire
research community5.

provides

shorter

route

path

for

1

Introduction

Developments in deep learning have led to networks that have grown from 5
layers in LeNet [10], introduced in 1998, to 152 layers in the latest version of
ResNet [5]. One consequence of deeper and deeper networks is the problem of
vanishing gradients during training. This problem occurs as error values, which
depend on the computed gradient values, are propagated backward through the
network to update the weights at each layer. With each additional layer, a smaller
fraction of the error gradient is available to guide the adjustment of network

5 https://github.com/aicentral/FFNet

2

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

weights. As a result, the weights in early layers are updated very slowly; hence,
the performance of the entire training process is degraded.

Many models have been proposed to overcome the vanishing-gradient
problem. One approach is to provide alternative paths for signals to travel, as
compared to traditional layer-to-layer pathways. An example of this approach
is the Deeply-Supervised Network (DSN) [11], where a companion objective
function is added to each hidden layer in the network, providing gradient
values directly to the hidden layers. DSN uses Support Vector Machines (SVM)
[3] in its companion objective function, which means that end-to-end training
of the network is not supported. Another example is relaxed deep supervision
[12], where an improvement over a holistic edge detection model [19] is made
by providing relaxed versions of the target edge map to the earlier layers of the
network. This approach provides a version of the gradient directly to the early
layers. However, relaxed deep supervision is suitable only for problems where
relaxed versions of the labels can be created, such as for maps of intensity
edges. GoogLeNet [13] is another model that uses a mechanism to address the
problem of vanishing gradients. More relevant details about GoogLeNet will be
given in section 2 because it serves as a baseline for comparison with our
proposed model.

The novel approach that is proposed here provides parallel signal paths that
carry simple representations of the input to deeper layers through what we call a
fast-forwarding branch. This approach allows for a novel integration of “shallower
information” with “deeper information” by the network. During training the
fast-forwarding branch provides an eﬀective means for back-propagating errors
so that the vanishing-gradient problem is reduced.

To demonstrate the eﬃcacy of the model, we created a 20 layer network with
fast-forwarding branches, which we call FFNet. To study the eﬀect of the fast-
forwarding concept, the network layers are made of simple convolutional layers
followed by fully connected layers with no additional complexities. The results
that we have obtained using the the relatively small and simple FFNet model
have been surprisingly good, especially when compared with the performance of
bigger and more complex models.

The rest of this paper is organized as follows. Section 2 presents a brief
survey of related work, including a discussion of the models that will be used
as a baseline to be compared with FFNet. Section 3 provides details concerning
the proposed model. In order to gauge the performance of this approach,
experimental results from FFNet were compared with results from several
well-known deep models. These experiments are described in Section 4. Finally,
concluding remarks are given in Section 5.

2 Related Work

2.1 Deep Learning

Deep learning is a machine-learning technique that has become increasingly
popular in computer vision research. The main diﬀerence between classical

Lecture Notes in Computer Science

3

machine learning (ML) and deep learning is the way that features are
extracted. For classical ML techniques such as support vector machines
(SVM) [3], feature extraction is performed in advance using techniques crafted
by the researchers. Then, the training procedure develops weights or rules that
map any given feature vector to an output class label. In contrast, the typical
deep-learning procedure is to directly feed signal values as inputs to the
training procedure, without any preliminary eﬀorts at feature extraction. The
network takes the input signal (pixel values, in our case), and assigns a class
label based on those signal values directly. Because the deep-learning approach
implicitly must derive its own features, many more training samples are
required than for traditional ML approaches.

Several deep-learning packages are available for researchers. The popular
package that we have used to evaluate the proposed model is Caﬀe [7], which
was created with computer vision tasks in mind. Caﬀe is relatively easy to use,
ﬂexible, and powerful. It was developed in C++ using GPU optimization
libraries, such as CuDNN [2], BLAS [18], and ATLAS [17]. In the next sections,
we will discuss brieﬂy two well-known deep models, AlexNet and GoogLeNet.
These two models will be used as a baseline for comparison with the proposed
FFNet model.

2.2 AlexNet and CaﬀeNet

AlexNet [9] was the ﬁrst deep model to win the ILSVRC [4] challenge. For the
ILSVRC-2012 competition, AlexNet won with a top-5 test error rate of 15.3%,
compared to 26.2% achieved by the second-best entry. This model consists of
ﬁve convolutional layers followed by three fully-connected layers. The creators
of Caﬀe [7] introduced a slightly modiﬁed version of AlexNet by switching the
order of pooling and normalization layers. They named the modiﬁed version
CaﬀeNet [1]. As the only modiﬁcation done to the network is switching the
order of pooling and normalization layers, the size of the network is exactly the
same as AlexNet.

AlexNet and CaﬀeNet will be used to provide baseline cases of simple
architectures that rely on huge numbers of parameters. The number of ﬁlters in
the convolutional layers range from 96 to 384 in AlexNet, while the proposed
FFNet model uses only 64 ﬁlters in each convolutional layer. AlexNet uses a
4069-node fully-connected layer followed by another layer of the same size,
whereas FFNet uses only a 400-node fully connected layer followed by a
100-node layer. The total size of AlexNet is therefore approximately 18 times
bigger than FFNet.

2.3 GoogleNet

GoogLeNet [13] is another winner of the ILSVRC challenge. This model won
the ILSVRC-2014 competition with a top-5 test error rate of 6.6%. The
network consists of 22 layers with a relatively complex design called
“inception.” The inception module, which is used to implement the layers of

4

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

GoogLeNet, consists of parallel paths of convolutional layers of diﬀerent sizes
concatenated together. The number of ﬁlters in the convolutional layers inside
the inception modules ranges from 16 to 384. (By comparison, in FFNet the
number of ﬁlters in each convolutional layer is ﬁxed.) In addition to using the
inception design, GoogLeNet uses three auxiliary classiﬁers connected to the
intermediate layers during training. GoogLeNet is of interest to us as a baseline
for comparison because of its depth, because of its complex architecture, and
especially because of the auxiliary classiﬁers. GoogLeNet is 4 times bigger and
far more complex than the proposed FFNet model.

2.4 Benchmarking Datasets

Many datasets have been created to aid in machine learning for computer
vision. To evaluate the proposed FFNet model, we selected two publicly
available datasets, COCO-Text-Patch and CIFAR-10.

COCO-Text-Patch [6], contains approximately 354, 000 images of size 32×32
that are each labeled as “text” or “non-text.” This dataset was created to address
the problem of text veriﬁcation, which is an essential stage in the end-to-end text
detection and recognition pipeline. The dataset is derived from COCO-Text [15],
which contains 63, 686 images of real-world scenes with 173, 589 instances of text.
CIFAR-10 [8] is a labeled subset of the “80 million tiny images” dataset [14].
They were collected by the creator of AlexNet. The CIFAR-10 dataset consists
of 60, 000 color images of size 32 × 32 in 10 classes, with 6, 000 images per class.

3 Proposed Model: FFNet

The new FFNet model consists of convolutional units that are organized into a
sequence of stages. Within each stage, as illustrated in ﬁgure 1, computations
are performed in 2 parallel paths. The left branch in the ﬁgure represents a
standard convolutional path, whereas the right branch represents an extra
parallel data path. It is this parallel, “fast-forwarding”, path that delivers the
improved performance of the network.

The input to the stage, S1, arrives from the previous layer, and the output
to the next layer is shown as S2. The standard (deep) branch consists of three
consecutive 3 × 3 × 64 convolutional layers. Each layer is followed by an in-place
Rectiﬁed Linear Unit (ReLU). The last layer of the deep branch is padded with
zeros, for reasons that are described below.

Let the input S1 be of size N × N × C. The value of C is the number of
channels, which is typically 128 except for the ﬁrst stage where C = 3 to match
the input data. Refer to a stage’s deep convolutional layers as S2C1, S2C2, and
S2C3, as shown in the ﬁgure. The deep branch’s output S2C3 can be represented
as follows, where CON V is the convolutional operation, s is the stride, and p is
the padding:

S2C3 = CON V 3×3,s=1,p=1(CON V 3×3,s=1,p=0(CON V 3×3,s=1,p=0(S1)))

(1)

Lecture Notes in Computer Science

5

The size of S2C3 will be (N − 2) × (N − 2).

The fast-forwarding branch consists of a single 5 × 5 × 64 convolutional layer
followed by a ReLU. This branch takes S1 as input, and generates the output
B2C1 that can be represented as follows:

B2C1 = CON V 5×5,s=1,p=0(S1)

(2)

No padding is used for the fast-forwarding branch, so that the resulting output
size is also (N − 2) × (N − 2). This branch will provide a “shallower”
representation of the input S1 to the next stage.

The outputs of the deep branch and of the fast-forwarding branch are
concatenated to create the single stage output S2. The size of S2 will be
(N − 2) × (N − 2) × 128. Because the last layer of the deep branch is padded
with zeros, both branches provide data of the same size to the output.

To evaluate the fast-forwarding concept, we built a Fast-Forwarding Network
(FFNet) that consists of 6 consecutive fast-forwarding stages followed by two
fully connected layers plus an output layer, as shown in ﬁgure 2. The 6 fast-
forwarding stages consist of a total of 18 convolutional layers, each of size 3 ×
3 × 64. The ﬁrst layer of the two fully-connected layers consists of 400 nodes,
while the second layer consists of 100 nodes.

Fig. 1. A single fast-forwarding stage.
Node S1 represents the input, and S2 is
the output. The left pathway contains
common convolutational blocks. At the
right is the fast-forward path.

of

fast-forwarding,

Fig. 2. Proposed FFNet model.
Because
this
relatively small network has yielded
empirical results that are better than
much larger deep networks.

4 Evaluation

To evaluate the performance of the proposed model, a number of experiments
were conducted that compare FFNet to AlexNet, CaﬀeNet, and GoogLeNet.

6

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

The publicly available datasets CIFAR-10 [8] and COCO-Text-Patch [6] were
used in the evaluation, as described previously. FFNet was implemented using
Caﬀe [7]. Standard 10-crop augmentation was applied to the datasets. All the
training and testing were performed on a GPU with batch size 32. The training
was stopped after 150, 000 iterations as the validation accuracy and loss started
to plateau.

A summary of results is provided in table 1. Despite its relatively small size,
the performance of the proposed FFNet model exceeded the performance of
CaﬀeNet and GoogleNet in these experiments. The accuracy and validation loss
graphs shown in ﬁgure 3 demonstrate how the proposed model converges with the
same speed as CaﬀeNet and GoogLeNet. These trends provide evidence of the
eﬀectiveness of the fast-forwarding approach in ﬁghting the vanishing-gradient
problem.

Fig. 3. COCO-Text-Patch validation accuracy and loss for the proposed FFNet model
(red), CaﬀeNet (blue), and GoogLeNet (green).

5 Conclusion

This paper has presented a new concept, called input fast-forwarding, which
results in improved performance for deep-learning systems. The approach utilizes
parallel data paths that provide two advantages over previous approaches. One

Lecture Notes in Computer Science

7

Table 1. Performance comparison of the proposed FFNet model with several common
alternatives. Although FFNet is much smaller than the other models, its error rate was
lower than the others (with one exception), using publicly available test sets.

Model

Error Rate (%)

Description
AlexNet with dropout [9]
AlexNet with stoch. pooling [20]
AlexNet with channel-out [16]
GoogLeNet [6]
AlexNet [9], CaﬀeNet [6]
FFNet (the proposed model)
* Average forward path time per image on a K80 GPU
** CTP: COCO-Text-Patch dataset [6]

Layers Size (MB) Time*(ms) CIFAR-10 CTP**
-
-
-
9.4
5
2.8

181.3
181.3
181.3
41.2
181.3
10.8

15.6
15.3
13.2
-
18.0
13.6

-
-
-
9.9
9.1
9.0

8
8
8
22
8
20

advantage is the explicit merging of higher-level representations of data with
lower-level representations. A second advantage is a substantial reduction to the
eﬀects of the vanishing gradients problem.

To evaluate the model, we built a 20-layer network (FFNet)

that
implements the fast-forwarding concept. The network consists of simple
convolutional layers, with no added complexities, to prove that the outstanding
performance of the model
is primarily the result of the fast-forwarding
approach. Empirical results also showed convergence during training at
virtually the same rate as the bigger and more complex models. FFNet
achieved an error rate of 13.6% on the CIFAR-10 dataset, which is on par with
one variation of AlexNet. When tested on COCO-Text-Patch, FFNet’s
performance surpassed that of CaﬀeNet and GoogLeNet, which are all
signiﬁcantly larger in size.

These results suggest that similar advantages may be obtained through the
application of fast-forwarding to other models, and with diﬀerent benchmark
datasets.

References

1. BVLC reference CaﬀeNet model.

https://github.com/BVLC/caffe/tree/

master/models/bvlc_reference_caffenet, accessed: June 2016

2. Chetlur, S., Woolley, C., Vandermersch, P., Cohen, J., Tran, J., Catanzaro, B.,
Shelhamer, E.: cuDNN: Eﬃcient primitives for deep learning. arXiv preprint
arXiv:1410.0759 (2014)

3. Cristianini, N., Shawe-Taylor, J.: An Introduction to Support Vector Machines and

other Kernel-based Learning Methods. Cambridge University Press (2000)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: ImageNet: A large-scale
hierarchical image database. In: Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR). pp. 248–255 (2009)

5. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 770–778 (2016)

8

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

6. Ibrahim, A., Abbott, A.L., Hussein, M.E.: An image dataset of text patches
in everyday scenes. In: Proceedings of the International Symposium on Visual
Computing (ISVC). pp. 291–300. Springer (2016)

7. Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R.,
Guadarrama, S., Darrell, T.: Caﬀe: Convolutional architecture for fast feature
embedding. In: 22nd ACM International Conference on Multimedia. pp. 675–678
(2014)

8. Krizhevsky, A., Hinton, G.: Learning multiple layers of features from tiny images.
Master’s thesis, Department of Computer Science, University of Toronto (2009)
9. Krizhevsky, A., Sutskever, I., Hinton, G.E.: ImageNet classiﬁcation with deep
convolutional neural networks. In: Proceedings of Advances in Neural Information
Processing Systems (NIPS). pp. 1097–1105 (2012)

10. LeCun, Y., Bottou, L., Bengio, Y., Haﬀner, P.: Gradient-based learning applied to
document recognition. In: Proceedings of the IEEE. vol. 86, pp. 2278–2324 (1998)
11. Lee, C.Y., Xie, S., Gallagher, P.W., Zhang, Z., Tu, Z.: Deeply-supervised nets.
In: Proceedings of the 18th International Conference on Artiﬁcial Intelligence and
Statistics (AISTATS). vol. 2, pp. 562–570 (2015)

12. Liu, Y., Lew, M.S.: Learning relaxed deep supervision for better edge detection. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 231–240 (2016)

13. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A.: Going deeper with convolutions. In: Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR).
pp. 1–9 (2015)

14. Torralba, A., Fergus, R., Freeman, W.T.: 80 million tiny images: A large data set
for nonparametric object and scene recognition. IEEE Transactions on Pattern
Analysis and Machine Intelligence (PAMI). 30(11), 1958–1970 (2008)

15. Veit, A., Matera, T., Neumann, L., Matas, J., Belongie, S.: COCO-Text:
dataset and benchmark for text detection and recognition in natural images.
In: arXiv preprint arXiv:1601.07140 (2016), http://vision.cornell.edu/se3/
wp-content/uploads/2016/01/1601.07140v1.pdf

16. Wang, Q., JaJa, J.: From maxout to channel-out: Encoding information on sparse
pathways. In: Proceedings of the International Conference on Artiﬁcial Neural
Networks. pp. 273–280. Springer (2014)

17. Whaley, R.C., Dongarra, J.J.: Automatically tuned linear algebra software. In:

Proceedings of the ACM/IEEE Conference on Supercomputing. pp. 1–27 (1998)

18. Xianyi,

Qian,
http://xianyi.github.io/OpenBLAS (2014)

W.,

Z.,

Chothia,

Z.:

OpenBLAS.

URL:

19. Xie, S., Tu, Z.: Holistically-nested edge detection. In: Proceedings of the IEEE
International Conference on Computer Vision (ICCV). pp. 1395–1403 (2015)
20. Zeiler, M., Fergus, R.: Stochastic pooling for regularization of deep convolutional
neural networks. In: Proceedings of the International Conference on Learning
Representation (ICLR) (2013)

7
1
0
2
 
y
a
M
 
3
2
 
 
]

V
C
.
s
c
[
 
 
1
v
9
7
4
8
0
.
5
0
7
1
:
v
i
X
r
a

Input Fast-Forwarding
for Better Deep Learning

Ahmed Ibrahim1,4, A. Lynn Abbott1, Mohamed E. Hussein2,3

1 Virginia Polytechnic Institute and State University, USA
2 Egypt-Japan University of Science and Technology, Egypt
3 Alexandria University, Egypt
4 Benha University, Egypt
{nady,abbott}@vt.edu; mohamed.e.hussein@ejust.edu.eg

it

the

layers

enables

individual

framework,
Abstract. This paper introduces a new architectural
known as input fast-forwarding, that can enhance the performance of
deep networks. The main idea is to incorporate a parallel path that
sends representations of input values forward to deeper network layers.
This scheme is substantially diﬀerent from “deep supervision,” in which
the loss layer is re-introduced to earlier layers. The parallel path
provided by fast-forwarding enhances the training process in two ways.
First,
to combine higher-level
information (from the standard processing path) with lower-level
information (from the fast-forward path). Second, this new architecture
reduces the problem of vanishing gradients substantially because the
fast-forwarding
gradient
a
backpropagation. In order to evaluate the utility of the proposed
technique, a Fast-Forward Network (FFNet), with 20 convolutional
layers along with parallel fast-forward paths, has been created and
tested. The paper presents empirical results that demonstrate improved
learning capacity of FFNet due to fast-forwarding, as compared to
GoogLeNet (with deep supervision) and CaﬀeNet, which are 4× and
18× larger in size, respectively. All of the source code and deep learning
models described in this paper will be made available to the entire
research community5.

provides

shorter

route

path

for

1

Introduction

Developments in deep learning have led to networks that have grown from 5
layers in LeNet [10], introduced in 1998, to 152 layers in the latest version of
ResNet [5]. One consequence of deeper and deeper networks is the problem of
vanishing gradients during training. This problem occurs as error values, which
depend on the computed gradient values, are propagated backward through the
network to update the weights at each layer. With each additional layer, a smaller
fraction of the error gradient is available to guide the adjustment of network

5 https://github.com/aicentral/FFNet

2

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

weights. As a result, the weights in early layers are updated very slowly; hence,
the performance of the entire training process is degraded.

Many models have been proposed to overcome the vanishing-gradient
problem. One approach is to provide alternative paths for signals to travel, as
compared to traditional layer-to-layer pathways. An example of this approach
is the Deeply-Supervised Network (DSN) [11], where a companion objective
function is added to each hidden layer in the network, providing gradient
values directly to the hidden layers. DSN uses Support Vector Machines (SVM)
[3] in its companion objective function, which means that end-to-end training
of the network is not supported. Another example is relaxed deep supervision
[12], where an improvement over a holistic edge detection model [19] is made
by providing relaxed versions of the target edge map to the earlier layers of the
network. This approach provides a version of the gradient directly to the early
layers. However, relaxed deep supervision is suitable only for problems where
relaxed versions of the labels can be created, such as for maps of intensity
edges. GoogLeNet [13] is another model that uses a mechanism to address the
problem of vanishing gradients. More relevant details about GoogLeNet will be
given in section 2 because it serves as a baseline for comparison with our
proposed model.

The novel approach that is proposed here provides parallel signal paths that
carry simple representations of the input to deeper layers through what we call a
fast-forwarding branch. This approach allows for a novel integration of “shallower
information” with “deeper information” by the network. During training the
fast-forwarding branch provides an eﬀective means for back-propagating errors
so that the vanishing-gradient problem is reduced.

To demonstrate the eﬃcacy of the model, we created a 20 layer network with
fast-forwarding branches, which we call FFNet. To study the eﬀect of the fast-
forwarding concept, the network layers are made of simple convolutional layers
followed by fully connected layers with no additional complexities. The results
that we have obtained using the the relatively small and simple FFNet model
have been surprisingly good, especially when compared with the performance of
bigger and more complex models.

The rest of this paper is organized as follows. Section 2 presents a brief
survey of related work, including a discussion of the models that will be used
as a baseline to be compared with FFNet. Section 3 provides details concerning
the proposed model. In order to gauge the performance of this approach,
experimental results from FFNet were compared with results from several
well-known deep models. These experiments are described in Section 4. Finally,
concluding remarks are given in Section 5.

2 Related Work

2.1 Deep Learning

Deep learning is a machine-learning technique that has become increasingly
popular in computer vision research. The main diﬀerence between classical

Lecture Notes in Computer Science

3

machine learning (ML) and deep learning is the way that features are
extracted. For classical ML techniques such as support vector machines
(SVM) [3], feature extraction is performed in advance using techniques crafted
by the researchers. Then, the training procedure develops weights or rules that
map any given feature vector to an output class label. In contrast, the typical
deep-learning procedure is to directly feed signal values as inputs to the
training procedure, without any preliminary eﬀorts at feature extraction. The
network takes the input signal (pixel values, in our case), and assigns a class
label based on those signal values directly. Because the deep-learning approach
implicitly must derive its own features, many more training samples are
required than for traditional ML approaches.

Several deep-learning packages are available for researchers. The popular
package that we have used to evaluate the proposed model is Caﬀe [7], which
was created with computer vision tasks in mind. Caﬀe is relatively easy to use,
ﬂexible, and powerful. It was developed in C++ using GPU optimization
libraries, such as CuDNN [2], BLAS [18], and ATLAS [17]. In the next sections,
we will discuss brieﬂy two well-known deep models, AlexNet and GoogLeNet.
These two models will be used as a baseline for comparison with the proposed
FFNet model.

2.2 AlexNet and CaﬀeNet

AlexNet [9] was the ﬁrst deep model to win the ILSVRC [4] challenge. For the
ILSVRC-2012 competition, AlexNet won with a top-5 test error rate of 15.3%,
compared to 26.2% achieved by the second-best entry. This model consists of
ﬁve convolutional layers followed by three fully-connected layers. The creators
of Caﬀe [7] introduced a slightly modiﬁed version of AlexNet by switching the
order of pooling and normalization layers. They named the modiﬁed version
CaﬀeNet [1]. As the only modiﬁcation done to the network is switching the
order of pooling and normalization layers, the size of the network is exactly the
same as AlexNet.

AlexNet and CaﬀeNet will be used to provide baseline cases of simple
architectures that rely on huge numbers of parameters. The number of ﬁlters in
the convolutional layers range from 96 to 384 in AlexNet, while the proposed
FFNet model uses only 64 ﬁlters in each convolutional layer. AlexNet uses a
4069-node fully-connected layer followed by another layer of the same size,
whereas FFNet uses only a 400-node fully connected layer followed by a
100-node layer. The total size of AlexNet is therefore approximately 18 times
bigger than FFNet.

2.3 GoogleNet

GoogLeNet [13] is another winner of the ILSVRC challenge. This model won
the ILSVRC-2014 competition with a top-5 test error rate of 6.6%. The
network consists of 22 layers with a relatively complex design called
“inception.” The inception module, which is used to implement the layers of

4

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

GoogLeNet, consists of parallel paths of convolutional layers of diﬀerent sizes
concatenated together. The number of ﬁlters in the convolutional layers inside
the inception modules ranges from 16 to 384. (By comparison, in FFNet the
number of ﬁlters in each convolutional layer is ﬁxed.) In addition to using the
inception design, GoogLeNet uses three auxiliary classiﬁers connected to the
intermediate layers during training. GoogLeNet is of interest to us as a baseline
for comparison because of its depth, because of its complex architecture, and
especially because of the auxiliary classiﬁers. GoogLeNet is 4 times bigger and
far more complex than the proposed FFNet model.

2.4 Benchmarking Datasets

Many datasets have been created to aid in machine learning for computer
vision. To evaluate the proposed FFNet model, we selected two publicly
available datasets, COCO-Text-Patch and CIFAR-10.

COCO-Text-Patch [6], contains approximately 354, 000 images of size 32×32
that are each labeled as “text” or “non-text.” This dataset was created to address
the problem of text veriﬁcation, which is an essential stage in the end-to-end text
detection and recognition pipeline. The dataset is derived from COCO-Text [15],
which contains 63, 686 images of real-world scenes with 173, 589 instances of text.
CIFAR-10 [8] is a labeled subset of the “80 million tiny images” dataset [14].
They were collected by the creator of AlexNet. The CIFAR-10 dataset consists
of 60, 000 color images of size 32 × 32 in 10 classes, with 6, 000 images per class.

3 Proposed Model: FFNet

The new FFNet model consists of convolutional units that are organized into a
sequence of stages. Within each stage, as illustrated in ﬁgure 1, computations
are performed in 2 parallel paths. The left branch in the ﬁgure represents a
standard convolutional path, whereas the right branch represents an extra
parallel data path. It is this parallel, “fast-forwarding”, path that delivers the
improved performance of the network.

The input to the stage, S1, arrives from the previous layer, and the output
to the next layer is shown as S2. The standard (deep) branch consists of three
consecutive 3 × 3 × 64 convolutional layers. Each layer is followed by an in-place
Rectiﬁed Linear Unit (ReLU). The last layer of the deep branch is padded with
zeros, for reasons that are described below.

Let the input S1 be of size N × N × C. The value of C is the number of
channels, which is typically 128 except for the ﬁrst stage where C = 3 to match
the input data. Refer to a stage’s deep convolutional layers as S2C1, S2C2, and
S2C3, as shown in the ﬁgure. The deep branch’s output S2C3 can be represented
as follows, where CON V is the convolutional operation, s is the stride, and p is
the padding:

S2C3 = CON V 3×3,s=1,p=1(CON V 3×3,s=1,p=0(CON V 3×3,s=1,p=0(S1)))

(1)

Lecture Notes in Computer Science

5

The size of S2C3 will be (N − 2) × (N − 2).

The fast-forwarding branch consists of a single 5 × 5 × 64 convolutional layer
followed by a ReLU. This branch takes S1 as input, and generates the output
B2C1 that can be represented as follows:

B2C1 = CON V 5×5,s=1,p=0(S1)

(2)

No padding is used for the fast-forwarding branch, so that the resulting output
size is also (N − 2) × (N − 2). This branch will provide a “shallower”
representation of the input S1 to the next stage.

The outputs of the deep branch and of the fast-forwarding branch are
concatenated to create the single stage output S2. The size of S2 will be
(N − 2) × (N − 2) × 128. Because the last layer of the deep branch is padded
with zeros, both branches provide data of the same size to the output.

To evaluate the fast-forwarding concept, we built a Fast-Forwarding Network
(FFNet) that consists of 6 consecutive fast-forwarding stages followed by two
fully connected layers plus an output layer, as shown in ﬁgure 2. The 6 fast-
forwarding stages consist of a total of 18 convolutional layers, each of size 3 ×
3 × 64. The ﬁrst layer of the two fully-connected layers consists of 400 nodes,
while the second layer consists of 100 nodes.

Fig. 1. A single fast-forwarding stage.
Node S1 represents the input, and S2 is
the output. The left pathway contains
common convolutational blocks. At the
right is the fast-forward path.

of

fast-forwarding,

Fig. 2. Proposed FFNet model.
Because
this
relatively small network has yielded
empirical results that are better than
much larger deep networks.

4 Evaluation

To evaluate the performance of the proposed model, a number of experiments
were conducted that compare FFNet to AlexNet, CaﬀeNet, and GoogLeNet.

6

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

The publicly available datasets CIFAR-10 [8] and COCO-Text-Patch [6] were
used in the evaluation, as described previously. FFNet was implemented using
Caﬀe [7]. Standard 10-crop augmentation was applied to the datasets. All the
training and testing were performed on a GPU with batch size 32. The training
was stopped after 150, 000 iterations as the validation accuracy and loss started
to plateau.

A summary of results is provided in table 1. Despite its relatively small size,
the performance of the proposed FFNet model exceeded the performance of
CaﬀeNet and GoogleNet in these experiments. The accuracy and validation loss
graphs shown in ﬁgure 3 demonstrate how the proposed model converges with the
same speed as CaﬀeNet and GoogLeNet. These trends provide evidence of the
eﬀectiveness of the fast-forwarding approach in ﬁghting the vanishing-gradient
problem.

Fig. 3. COCO-Text-Patch validation accuracy and loss for the proposed FFNet model
(red), CaﬀeNet (blue), and GoogLeNet (green).

5 Conclusion

This paper has presented a new concept, called input fast-forwarding, which
results in improved performance for deep-learning systems. The approach utilizes
parallel data paths that provide two advantages over previous approaches. One

Lecture Notes in Computer Science

7

Table 1. Performance comparison of the proposed FFNet model with several common
alternatives. Although FFNet is much smaller than the other models, its error rate was
lower than the others (with one exception), using publicly available test sets.

Model

Error Rate (%)

Description
AlexNet with dropout [9]
AlexNet with stoch. pooling [20]
AlexNet with channel-out [16]
GoogLeNet [6]
AlexNet [9], CaﬀeNet [6]
FFNet (the proposed model)
* Average forward path time per image on a K80 GPU
** CTP: COCO-Text-Patch dataset [6]

Layers Size (MB) Time*(ms) CIFAR-10 CTP**
-
-
-
9.4
5
2.8

181.3
181.3
181.3
41.2
181.3
10.8

15.6
15.3
13.2
-
18.0
13.6

-
-
-
9.9
9.1
9.0

8
8
8
22
8
20

advantage is the explicit merging of higher-level representations of data with
lower-level representations. A second advantage is a substantial reduction to the
eﬀects of the vanishing gradients problem.

To evaluate the model, we built a 20-layer network (FFNet)

that
implements the fast-forwarding concept. The network consists of simple
convolutional layers, with no added complexities, to prove that the outstanding
performance of the model
is primarily the result of the fast-forwarding
approach. Empirical results also showed convergence during training at
virtually the same rate as the bigger and more complex models. FFNet
achieved an error rate of 13.6% on the CIFAR-10 dataset, which is on par with
one variation of AlexNet. When tested on COCO-Text-Patch, FFNet’s
performance surpassed that of CaﬀeNet and GoogLeNet, which are all
signiﬁcantly larger in size.

These results suggest that similar advantages may be obtained through the
application of fast-forwarding to other models, and with diﬀerent benchmark
datasets.

References

1. BVLC reference CaﬀeNet model.

https://github.com/BVLC/caffe/tree/

master/models/bvlc_reference_caffenet, accessed: June 2016

2. Chetlur, S., Woolley, C., Vandermersch, P., Cohen, J., Tran, J., Catanzaro, B.,
Shelhamer, E.: cuDNN: Eﬃcient primitives for deep learning. arXiv preprint
arXiv:1410.0759 (2014)

3. Cristianini, N., Shawe-Taylor, J.: An Introduction to Support Vector Machines and

other Kernel-based Learning Methods. Cambridge University Press (2000)

4. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., Fei-Fei, L.: ImageNet: A large-scale
hierarchical image database. In: Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR). pp. 248–255 (2009)

5. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 770–778 (2016)

8

Ahmed Ibrahim, A. Lynn Abbott, Mohamed E. Hussein

6. Ibrahim, A., Abbott, A.L., Hussein, M.E.: An image dataset of text patches
in everyday scenes. In: Proceedings of the International Symposium on Visual
Computing (ISVC). pp. 291–300. Springer (2016)

7. Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R.,
Guadarrama, S., Darrell, T.: Caﬀe: Convolutional architecture for fast feature
embedding. In: 22nd ACM International Conference on Multimedia. pp. 675–678
(2014)

8. Krizhevsky, A., Hinton, G.: Learning multiple layers of features from tiny images.
Master’s thesis, Department of Computer Science, University of Toronto (2009)
9. Krizhevsky, A., Sutskever, I., Hinton, G.E.: ImageNet classiﬁcation with deep
convolutional neural networks. In: Proceedings of Advances in Neural Information
Processing Systems (NIPS). pp. 1097–1105 (2012)

10. LeCun, Y., Bottou, L., Bengio, Y., Haﬀner, P.: Gradient-based learning applied to
document recognition. In: Proceedings of the IEEE. vol. 86, pp. 2278–2324 (1998)
11. Lee, C.Y., Xie, S., Gallagher, P.W., Zhang, Z., Tu, Z.: Deeply-supervised nets.
In: Proceedings of the 18th International Conference on Artiﬁcial Intelligence and
Statistics (AISTATS). vol. 2, pp. 562–570 (2015)

12. Liu, Y., Lew, M.S.: Learning relaxed deep supervision for better edge detection. In:
Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition
(CVPR). pp. 231–240 (2016)

13. Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D.,
Vanhoucke, V., Rabinovich, A.: Going deeper with convolutions. In: Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR).
pp. 1–9 (2015)

14. Torralba, A., Fergus, R., Freeman, W.T.: 80 million tiny images: A large data set
for nonparametric object and scene recognition. IEEE Transactions on Pattern
Analysis and Machine Intelligence (PAMI). 30(11), 1958–1970 (2008)

15. Veit, A., Matera, T., Neumann, L., Matas, J., Belongie, S.: COCO-Text:
dataset and benchmark for text detection and recognition in natural images.
In: arXiv preprint arXiv:1601.07140 (2016), http://vision.cornell.edu/se3/
wp-content/uploads/2016/01/1601.07140v1.pdf

16. Wang, Q., JaJa, J.: From maxout to channel-out: Encoding information on sparse
pathways. In: Proceedings of the International Conference on Artiﬁcial Neural
Networks. pp. 273–280. Springer (2014)

17. Whaley, R.C., Dongarra, J.J.: Automatically tuned linear algebra software. In:

Proceedings of the ACM/IEEE Conference on Supercomputing. pp. 1–27 (1998)

18. Xianyi,

Qian,
http://xianyi.github.io/OpenBLAS (2014)

W.,

Z.,

Chothia,

Z.:

OpenBLAS.

URL:

19. Xie, S., Tu, Z.: Holistically-nested edge detection. In: Proceedings of the IEEE
International Conference on Computer Vision (ICCV). pp. 1395–1403 (2015)
20. Zeiler, M., Fergus, R.: Stochastic pooling for regularization of deep convolutional
neural networks. In: Proceedings of the International Conference on Learning
Representation (ICLR) (2013)

