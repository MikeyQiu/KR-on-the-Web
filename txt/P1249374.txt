8
1
0
2
 
t
c
O
 
8
2
 
 
]

V
C
.
s
c
[
 
 
3
v
5
8
0
1
0
.
4
0
7
1
:
v
i
X
r
a

Deep Depth From Focus(cid:63)

Caner Hazirbas, Sebastian Georg Soyer, Maximilian Christian Staab,
Laura Leal-Taix´e, and Daniel Cremers

Technical University of Munich, Germany
{hazirbas, soyers, staab, leal.taixe, cremers}@cs.tum.edu

Abstract. Depth from focus (DFF) is one of the classical ill-posed in-
verse problems in computer vision. Most approaches recover the depth at
each pixel based on the focal setting which exhibits maximal sharpness.
Yet, it is not obvious how to reliably estimate the sharpness level, par-
ticularly in low-textured areas. In this paper, we propose ‘Deep Depth
From Focus (DDFF)’ as the ﬁrst end-to-end learning approach to this
problem. One of the main challenges we face is the hunger for data of
deep neural networks. In order to obtain a signiﬁcant amount of focal
stacks with corresponding groundtruth depth, we propose to leverage
a light-ﬁeld camera with a co-calibrated RGB-D sensor. This allows us
to digitally create focal stacks of varying sizes. Compared to existing
benchmarks our dataset is 25 times larger, enabling the use of machine
learning for this inverse problem. We compare our results with state-of-
the-art DFF methods and we also analyze the eﬀect of several key deep
architectural components. These experiments show that our proposed
method ‘DDFFNet’ achieves state-of-the-art performance in all scenes,
reducing depth error by more than 75% compared to the classical DFF
methods.

Keywords: depth from focus · convolutional neural networks

1

Introduction

The goal of depth from focus (DFF) is to reconstruct a pixel-accurate disparity
map given a stack of images with gradually changing optical focus. The key
observation is that a pixel’s sharpness is maximal when the object it belongs to
is in focus. Hence, most methods determine the depth at each pixel by ﬁnding
the focal distance at which the contrast measure is maximal. Nonetheless, DFF is
an ill-posed problem, since this assumption does not hold for all cases, especially
for textureless surfaces where sharpness cannot be determined. This is why most
methods rely on strong regularization to obtain meaningful depth maps which
in turn leads to an often oversmoothed output.

While spatial smoothness is a rather primitive prior for depth reconstruc-
tion, with the advent of Convolutional Neural Networks (CNNs) we now have

(cid:63) This research was partially funded by the Humboldt Foundation through the Sofja

Kovalevskaja Award and ERC Consolidator Grant “3D Reloaded”.

2

C. Hazirbas et al.

Image Disparity VDFF

DDLF

PSP-LF

Lytro

PSPNet Proposed

Fig. 1: Qualitative results of the DDFFNet versus state-of-the-art methods.
Results are normalized by the maximum disparity, which the focal stacks are generated
on (0.28 pixel). Warmer colors represent closer distances. Best viewed in color.

an alternative technique to resolve classical ill-posed problems such as semantic
segmentation [3,14,29,34] or optical ﬂow estimation [8]. The underlying expec-
tation is that the rather naive and generic spatial smoothness assumption used
in variational inference techniques is replaced with a more object-speciﬁc prior
knowledge absorbed through huge amounts of training data.

A big strength of CNNs is their ability to extract meaningful image features,
and correlate pixel information via convolutions. Our intuition is that a network
will be able to ﬁnd the image in the focal stack at which a pixel is maximally
sharp, thereby correlating focus and depth. We therefore propose to tackle the
task of depth from focus using end-to-end-learning. To that end, we create the
ﬁrst DFF dataset with real-world scenes and groundtruth measured depth. In
order to obtain focal stacks in a reliable and fast way, we propose to use a light-
ﬁeld camera. Also called plenoptic camera, it allows us to obtain multi-view
images of a scene with a single photographic exposure. All-in-focus images as
well as focal stacks can be recovered digitally from a light-ﬁeld image. Using this
new dataset, we perform end-to-end learning of the disparity given a focal stack.

1.1 Contribution

We present Deep Depth From Focus Network (DDFFNet), an auto-encoder-style
Convolutional Neural Network that outputs a disparity map from a focal stack.
To train such a net, we create a dataset with 720 light-ﬁeld images captured
using a plenoptic camera, i.e. Lytro ILLUM, covering 12 indoor scenes. Given a
light-ﬁeld image, we can digitally generate a focal stack. Groundtruth depth is
obtained from an RGB-D sensor which is calibrated to the light-ﬁeld camera.

To the best of our knowledge, this is the largest dataset with groundtruth
for the problem of DFF. We experimentally show that this amount of data is
enough to successfully ﬁne-tune a network. We compare our results with state-
of-the-art DFF methods and provide a comprehensive study on the impact of
diﬀerent variations of the encoder-decoder type of network.
The contribution of this paper is three-fold:

– We propose DDFFNet, the ﬁrst end-to-end learning method to compute

depth maps from focal stacks.

Deep Depth From Focus

3

– We introduce DDFF 12-Scene: a dataset with 720 light-ﬁeld images and
co-registered groundtruth depth maps recorded with an RGB-D sensor. We
show that this data is enough to train a network for the task of DFF.

– We compare several state-of-the-art methods for DFF, as well as several
variations of the encoder-decoder architecture, and show that our method
outperforms the other methods by a large margin. It computes depth maps
in 0.6 seconds on an NVidia Pascal Titan X GPU.

1.2 Related work

Depth from focus or Shape from focus. Conventional methods aim at de-
termining the depth of a pixel by measuring its sharpness or focus at diﬀerent
images of the focal stack [38]. Developing a discriminative measure for sharpness
is non trivial, we refer the reader to [38] for an overview. Other works aim at
ﬁltering the contrast coeﬃcients before determining depth values by windowed
averaging [43] or non-linear ﬁltering [31]. Another popular approach to obtain
consistent results is to use total variation regularization.
[30] proposed the ﬁrst
[32] deﬁnes an objective function
variational approach to tackle DFF while
composed of a smooth but nonconvex data term with a non-smooth but convex
regularizer to obtain a robust (noise-free) depth map. Suwajanakorn et al.
[42]
computes DFF on mobile devices, focusing on compensating the motion between
images of the focal stack. This results in a very involved model, that depends
on optical ﬂow results, and takes 20 minutes to obtain a depth map. Aforemen-
tioned methods heavily rely on priors/regularizers to increase the robustness of
the algorithm, meaning their models may not generalize to all scenes. Interest-
ingly, shape from focus was already tackled using neural networks in 1999 [2],
showing their potential on synthetic experiments. The increasing power of deep
architectures makes it now possible to move towards estimating depth of real-
world scenarios.

Plenoptic or light-ﬁeld cameras. A light-ﬁeld or plenoptic camera captures
angular and spatial information on the distribution of light rays in space. In
a single photographic exposure, these cameras are able to obtain multi-view
images of a scene. The concept was ﬁrst proposed in [1], and has recently gained
interest from the computer vision community. These cameras have evolved from
bulky devices [46] to hand-held cameras based on micro-lens arrays [33]. Several
works focus on the calibration of these devices, either by using raw images and
line features [4] or by decoding 2D lenslet images into 4D light-ﬁelds [6]. An
analysis of the calibration pipeline is detailed in [5]. Light-ﬁeld cameras are
particularly interesting since depth and all-in-focus images can be computed
directly from the 4D light-ﬁeld [21,26,37]. Furthermore, focal stacks, i.e. images
taken at diﬀerent optical focuses, can be obtained from plenoptic cameras with a
single photographic exposure. For this reason, we choose to capture our training
dataset using these cameras, though any normal camera that captures images
at diﬀerent optical focuses can be used at test time.

4

C. Hazirbas et al.

To the best of our knowledge, there are only two light-ﬁeld datasets with
groundtruth depth maps [19,45]. While [45] provides 7 synthetic and only 6 real-
scene light-ﬁelds,
[19] generates a hand-crafted synthetic light-ﬁeld benchmark
composed of only 24 samples with groundtruth disparity maps. Our dataset is
25 times larger, composed of 12 indoor scenes, in total of 720 light-ﬁeld samples
with co-registered groundtruth depth obtained from an RGB-sensor, ranging
from 0.5 to 7m. In this work, we show that our data is enough to ﬁne-tune a
network for the speciﬁc task of predicting depth from focus.

Note that the Stanford Light-ﬁeld dataset1 has more samples than our dataset,
but does not provide groundtruth depth maps. The depth maps in this dataset
were produced by the standard Lytro toolbox which outputs lambda-scaled
depth maps. Therefore, the maps are not in real distance metrics and there
is no camera calibration provided. Furthermore, Lytro depth maps can be inac-
curate as we will show in Sec. 4, and cannot be considered as groundtruth.

Deep learning. Deep learning has had a large impact in computer vision since
showing its excellent performance in the task of image classiﬁcation [16,24,41]. A
big part of its success has been the creation of very large annotated datasets such
as ImageNet [39]. Of course, this can also be seen as a disadvantage, since creat-
ing such datasets with millions of annotations for each task would be impractical.
Numerous recent works have shown that networks pre-trained on large datasets
for seemingly unrelated tasks like image classiﬁcation, can easily be ﬁne-tuned
to a new task for which there exists only a fairly small training dataset. This
paradigm has been successfully applied to object detection [13], pixel-wise se-
mantic segmentation [3,14,22,29,34,47], depth and normal estimation [12,25,27]
or single image-based 3D localization [23,44], to name a few. Another alternative
is to generate synthetic data to train very large networks, e.g., for optical ﬂow
estimation [8]. Using synthetic data for training is not guaranteed to work, since
the training data often does not capture the real challenge and noise distribu-
tion of real data. Several works use external sources of information to produce
groundtruth. [11] uses sparse multi-view reconstruction results to train a CNN
to predict surface normals, which are in turn used to improve the reconstruc-
tion. In [12], the authors aim at predicting depth from a single image, but create
groundtruth depth data from matching stereo images. We propose to use an
RGB-D sensor that can be registered to our light-ﬁeld camera to obtain the
groundtruth depth map. Even though an RGB-D sensor is not noise-free, we
show that the network can properly learn to predict depth from focus even from
imperfect data. We use the paradigm of ﬁne-tuning a pre-trained network and
show that this works even if the tasks of image classiﬁcation and DFF seem
relatively unrelated.

1 http://lightfields.stanford.edu/

Deep Depth From Focus

5

2 DDFF 12-Scene benchmark

In this section we present our indoor DDFF 12-Scene dataset for depth from
focus. This dataset is used for the training and evaluation of the proposed and
several state-of-the-art methods. We ﬁrst give the details on how we generate
our data, namely the focal stack and groundtruth depth maps.

Why a 4D light-ﬁeld dataset for depth from focus? To determine the
depth of a scene from focus, we ﬁrst need to generate a focal stack obtainable by
using any camera and changing the focal step manually to retrieve the refocused
images. Nonetheless, this is a time-consuming task that would not allow us to
collect a signiﬁcant amount of data as it is required to train deep models. Given
the time that it takes to change the focus on a camera, the illumination of the
scene could have easily changed or several objects could have moved. We there-
fore propose to leverage a light-ﬁeld camera as it has the following advantages:
(i) only one image per scene needs to be taken, meaning all images will have
the same photographic exposure and the capturing process will be eﬃcient, (ii)
refocusing can be performed digitally, which allows us to easily generate stacks
with diﬀerent focal steps, (iii) the dataset can be a benchmark not only for DFF,
but also for other tasks such as depth from light-ﬁeld or 3d reconstruction from
light-ﬁeld. Even though we do not intend to tackle these tasks in this work, we
do show some comparative results on depth from light-Field in Sec. 4.

Light-ﬁeld imaging. With light-ﬁeld imaging technology, the original focus
of the camera can be altered after the image is taken. Following this, we use a
commercially available light-ﬁeld camera, i.e. Lytro ILLUM2, to collect data and
then generate focal stacks. Plenoptic cameras capture a 4D light-ﬁeld L(u, v, x, y)
which stores the light rays that intersect the image plane Ω at (x, y) and the
focus or camera plane Π at (u, v). The pixel intensity I(x, y) is then:

I(x, y) =

L(u, v, x, y) ∂u ∂v .

(1)

(cid:90)

(cid:90)

u

v

Refocusing on an image corresponds to shifting and summing all sub-apertures,
I(u,v)(x, y). Given the amount of shift, pixel intensities of a refocused image are
computed as follows [7]:

I (cid:48)(x, y) =

L(u, v, x + ∆x(u), y + ∆y(v)) ∂u ∂v .

(2)

(cid:90)

(cid:90)

u

v

The shift (∆u, ∆v) of each sub-aperture uv can be physically determined given
an arbitrary depth Z in m, at which the camera is in-focus:

(cid:18)∆x(u)
(cid:19)
∆y(v)

=

baseline · f
Z
(cid:123)(cid:122)
disparity

(cid:124)

(cid:125)

(cid:19)
(cid:18)ucenter − u
vcenter − v

·

,

(3)

2 Lytro ILLUM lightﬁeld camera, illum.lytro.com, accessed: 2016-11-07

6

C. Hazirbas et al.

(a)

(b)

Fig. 2: (a) Experimental setup: we place an RGB-D sensor on top of a plenoptic
camera in order to capture calibrated groundtruth depth maps and light-ﬁeld images
from which we then create focal stacks. These two inputs will be used to train the
DDFFNet. (b) Whisker diagram of the disparity distribution for each scene. Circle
and red line are the mean and median, respectively. Minimum disparity is 0.015 pixels
(bottom orange lines), maximum disparity is 0.43 pixels (top orange lines).

where the baseline is the distance between adjacent sub-apertures in meter/pixel,
f is the focal length of the microlenses in pixels and (u, v)T indicates the spatial
position of the sub-aperture in the Π plane in pixels. Although shifting can be
performed using bilinear or bicubic interpolation, to be able to perform subpixel
accurate focusing on the images, following [21] we use the phase shift algorithm
to observe the impact of subpixel shifts on the images:

F{I (cid:48)(x + ∆x(u))} = F{I(x)} · exp2πi∆x(u) ,

(4)

where F{·} is the 2D discrete Fourier transform. We generate the focal stacks
within a given disparity range, for which the focus shift on the images is clearly
observable from close objects to far ones present in our dataset. Disparity values
used in refocusing in Equation (3) are sampled linearly in the given interval for
a stack size of S, meaning that the focus plane equally shifts in-between the re-
focused images. Example refocused images for disparity ∈ {0.28, 0.17, 0.02} are
shown in Fig. 3. Note that we chose to use a light-ﬁeld camera since it is easy to
obtain a focal stack from it. Nonetheless, at test time, any imaging device could
be used to take images at diﬀerent optical focus.

Light-ﬁeld camera calibration. For consistent capturing over all scenes, we
ﬁx the focal length of the main lens to f = 9.5mm and lock the zoom. To increase
the re-focusable range of the camera, we use the hyperfocal mode. Theoretically,
we can then refocus from 27cm distance to inﬁnity. We set the white-balancing,
ISO and shutter speed settings to auto mode. In order to estimate the intrinsic
parameters of the light-ﬁeld camera, we use the calibration toolbox by Bok et al.
[4] with a chessboard pattern composed of 26.25mm length squares. The radius
of each microlens is set to 7 pixels as suggested in [4].

Deep Depth From Focus

7

Center sub-aperture disparity= 0.28

disparity= 0.17

disparity= 0.02

GT Disparity

Fig. 3: Example refocused images. First column: Center sub-aperture image. Last
column: groundtruth disparity maps from the RGB-D sensor. Middle columns: Refo-
cused images for varying disparity values in pixels, regions in focus are highlighted.
Best viewed in color.

We can generate 9 × 9 undistorted sub-apertures, each of which has 383 × 552
image resolution. Estimated intrinsic parameters of the microlenses are: focal
length f = fx = fy = 521.4, microlens optical center (cx, cy)T = (285.11, 187.83)T
and the baseline (distance between two adjacent sub-apertures in meter/pixel)
is 27e−5. All estimated parameters can be found in the supplementary material.

Groundtruth depth maps from an RGB-D sensor. Along with the light-
ﬁeld images, we also provide groundtruth depth maps. To this end, we use an
RGB-D structure sensor, i.e. ASUS Xtion PRO LIVE, and mount it on the
hot shoe of the light-ﬁeld camera (see Fig. 2a). Since we only need the infrared
camera of the RGB-D sensor, we align the main lens of Lytro ILLUM to the in-
frared image sensor as close as possible for a larger overlap on the ﬁeld of views
of both cameras. We save the 480 × 640 resolution depth maps in millimeters.
RGB-D sensors are not accurate on glossy surfaces and might even produce a
large amount of invalid/missing measurements. In order to reduce the number
of missing values, we take nine consecutive frames and save the median depth
of each pixel during recording/capturing.

Stereo camera calibration. We perform mono and stereo camera calibra-
tion to estimate the relative pose of the depth sensor with respect to the light-
ﬁeld camera. To this end, we use the publicly available Camera Calibration
Toolbox for Matlab3. We use the same calibration pattern as for the light-ﬁeld
calibration. Stereo calibration is performed between the center sub-aperture
(u, v)T = (5, 5)T and the infrared camera image. While we ﬁx the intrinsics
of the light-ﬁeld camera, depth sensor is calibrated only for the intrinsic pa-
rameters (no distortion). After the calibration procedure, we register the depth
maps onto the center sub-aperture images. As one can observe in the examples
in Fig. 3, due to the RGB-D sensor noise and the calibration procedure, some pix-
els around object boundaries do not contain depth measurements (represented
in dark blue). Recorded depth maps can be improved further for a better domain

3 www.vision.caltech.edu/bouguetj/calib_doc/

8

C. Hazirbas et al.

adaptation [28,35,36,40]. We leave the possible improvements for future work.
We convert depth to disparity to generalize the method to diﬀerent cameras.

DDFF 12-Scene benchmark. We collect the dataset in twelve diﬀerent indoor
environments: glassroom, kitchen, oﬃce41, seminar room, social corner, student
laboratory, cafeteria, library, locker room, magistrale, oﬃce44 and spencer labo-
ratory. First six scenes are composed of 100 light-ﬁeld images and depth pairs and
the latter six scenes are composed of 20 pairs. Our scenes have at most 0.5 pixel
disparity while the amount of measured disparity gradually decreases towards
far distances. Fig. 2b plots the Whisker diagrams for each scene. Example center
sub-aperture images for oﬃce41 and locker room scenes and their corresponding
disparity maps are shown in Fig. 3. Since the dataset consists mainly of indoor
scenes, ﬂat surfaces (wall, desk), textureless objects (monitor, door, cabinet) and
glossy materials (screen, windows) are often present. Our dataset is therefore
more challenging and 25 times larger than previous synthetic datasets [19,45].
DDFF 12-Scene dataset, consisting of the light-ﬁeld images, generated focal
stacks, registered depth maps and the source code of our method are publicly
available on https://vision.cs.tum.edu/data/datasets/ddff12scene .

3 Depth From Focus using Convolutional Neural

Networks

This section describes our method for depth reconstruction from a focal stack.
We formulate the problem as a minimization of a regression function, which is
an end-to-end trained convolutional neural network.

Let S be a focal stack consisting of S refocused images I ∈ RH×W ×C and the
corresponding target disparity map D ∈ RH×W . We minimize the least square
error between the estimated disparity f (S) and the target D:

L =

HW
(cid:88)

p

M(p) · (cid:13)

(cid:13)fW(S, p) − D(p)(cid:13)
2
2 + λ(cid:107)W(cid:107)2
2 .
(cid:13)

(5)

Loss function L is summed over all valid pixels p where D(p) > 0, indicated by
the mask M and f : RS×H×W ×C → RH×W is a convolutional neural network.
Weights, W, are penalized with (cid:96)2-norm. Depth/disparity maps captured by
RGB-D sensors often have missing values, indicated with a value of 0. There-
fore, we ignore the missing values during training in order to prevent networks
from outputting artifacts.

Network architecture. We propose an end-to-end trainable auto-encoder style
convolutional neural network. CNNs designed for image classiﬁcation are mostly
encoder type networks which reduce the dimension of the input to a 1D vec-
tor [16,24,41]. This type of networks are very powerful at constructing descrip-
tive hierarchical features later used for image classiﬁcation. This is why for tasks
which require a pixel-wise output, the encoder part is usually taken from these

Deep Depth From Focus

9

pre-trained networks [16,24,41] and a mirrored decoder part is created to up-
sample the output to image size. We follow this same paradigm of hierarchical
feature learning for pixel-wise regression tasks [8,22,29,34] and design a convo-
lutional auto-encoder network to generate a dense disparity map (see Fig.1 in
the supplementary material).

As a baseline for the encoder network, we use the VGG-16 net [41]. It consists
of 13 convolutional layers, 5 poolings and 3 fully-connected layers. In order to
reconstruct the input size, we remove the fully-connected layers and reconstruct
the decoder part of the network by mirroring the encoder layers. We invert the
2 × 2 pooling operation with 4 × 4 upconvolution (deconvolution) [29] with a
stride of 2 and initialize the weights of the upconvolution layers with bilinear
interpolation, depicted as upsample (see supp. Fig. 1).

Similar to the encoder part, we use convolutions after upconvolution layers
to further sharpen the activations. To accelerate the convergence, we add batch
normalization [20] after each convolution and learn the scale and shift parameters
during training. Batch normalization layers are followed by rectiﬁed linear unit
(ReLU) activations. Moreover, after the 3rd, 4th and 5th poolings and before the
corresponding upconvolutions, we apply dropout with a probability of 0.5 during
training similar to [22]. In order to preserve the sharp object boundaries, we
concatenate the feature maps of early convolutions conv1 2, conv2 2, conv3 3
with the decoder feature maps: outputs of the convolutions are concatenated with
the outputs of corresponding upconvolutions (see supp. Fig. 1).

We refer to this architecture as DDFFNet. There are several architectural
choices that one can make that can signiﬁcantly increase or decrease the perfor-
mance of auto-encoder networks. Some of these changes are the way upsampling
is done in the decoder part or the skip connections. For the problem of DFF, we
study the performance of the followings variants:

– DDFFNet-Upconv : In the decoder part, we keep the upconvolutions.
– DDFFNet-Unpool: Upconvolutions are replaced by 2 × 2 unpooling opera-

tion [9].

(upsampling).

– DDFFNet-BL: Upconvolutions are replaced by 2 × 2 bilinear interpolation

– DDFFNet-CCx: Here we study the eﬀect of several concatenation connec-

tions, designed to obtain sharper edges in the depth maps.

Network input. VGG-16 net takes the input size of H × W × C, precisely
224 × 224 × 3. In contrast, we need to input the whole focal stack S into the
network. Computing features per image I in the focal stack is a general way
of incorporating sharpness into DFF approaches [32] and we make use of this
intuition within our end-to-end trained CNN. Since the depth of a pixel is cor-
related with the sharpness level of that pixel and the convolutions are applied
through input channels C, we consider the network as a feature extractor and
therefore, we reshape our input to (B · S × C × H × W ) with a batch size of B.
Hence, the network generates one feature map per image in the stack with a size
of (B · S × 1 × H × W ). In order to train the network end-to-end, we reshape

10

C. Hazirbas et al.

Image Disparity Unpool

BL

UpConv

CC1

CC2

CC3

Fig. 4: Qualitative results of the variants of DDFFNet. While BL oversmooths
the edges, CC1 and CC2 introduce artiﬁcial edges on the disparity map. Unpooling is
not suitable well to recover the ﬁne edges. Best viewed in color.

the output feature maps to (B × S × H × W ) and apply 1 × 1 convolution as a
regression layer through the stack, depicted as Score in supp. Fig. 1.

4 Experimental Evaluation

We evaluate our method on the DDFF 12-Scene dataset proposed in Sec. 2. We
ﬁrst split the twelve scenes into training and test sets. We use the six scenes, i.e.
cafeteria, library, locker room, magistrale, oﬃce44, spencer laboratory for testing
as these scenes have in total 120 focal stacks and are also a good representation
of the whole benchmark, as shown in Fig. 2b. The other six scenes are then used
for training with a total of 600 focal stacks.

Evaluation metrics. Following [10,12,19,27] we evaluate the resulting depth
maps with eight diﬀerent error metrics:

– MSE :

– RMS :

– log RMS :

(cid:13)
(cid:13)f (Sp) − Dp

(cid:13)
2
(cid:13)
2
(cid:13)
(cid:13)f (Sp) − Dp

(cid:13)
2
(cid:13)
2

(cid:80)

1
p∈M
|M|
(cid:113) 1
(cid:80)
|M|
(cid:113) 1
|M|

p∈M
(cid:80)

p∈M

– Absolute relative : 1
|M|

(cid:13)
2
(cid:13)
2

p∈M

(cid:13)
(cid:13) log f (Sp) − log Dp
(cid:80)
|f (Sp)−Dp|
Dp
(cid:13)
(cid:13)f (Sp)−Dp
Dp
, Dp
f (Sp)

(cid:13)
2
(cid:13)
2

(cid:80)

– Squared relative : 1
|M|
– Accuracy: % of Dp s.t max (cid:0) f (Sp)
Dp
|{p∈M :|f (Sp)−Dp|>τ }|
– BadPix(τ ):
|M|

p∈M

– Bumpiness:

· 100
p∈M min(0.05, (cid:107)H∆(p)(cid:107)F ) · 100

(cid:80)

1
|M|

(cid:1) = δ < thr

where ∆ = f (Sp) − Dp and H is the Hessian matrix. The ﬁrst ﬁve measures
are standard error measures, therefore lower is better while for the Accuracy
measure higher is better. BadPix(τ ) quantiﬁes the number of wrong pixels with
a given threshold τ while Bumpiness metric focuses on the smoothness of the
predicted depth maps [19].

Experimental setup. For our experiments, we generate the focal stacks for
S = 10 with disparities linearly sampled in [0.28, 0.02] pixel (equivalent to [0.5, 7]

Deep Depth From Focus

11

meters). We found this to be a good compromise between obtaining pixel sharp-
ness at all depths and memory consumption and runtime, which heavily increases
for larger focal stacks without bringing improved depth accuracy (see Figure 5).
DDFF 12-Scene consists of 383 × 552 images, thus training on full resolution
stacks is ineﬃcient. One solution would be to downsample the images, however,
interpolation could change the blur kernels, eventually aﬀecting network perfor-
mance. The solution we adopt is to train the network on 10 × 224 × 224 × 3
stack patches. To do so, we crop the training stacks and corresponding disparity
maps with a patch size of 224 and a stride of 56, ensuring that cropped patches
cover the whole image. Patches with more than 20% missing disparity values are
removed from the training set. 20% of the training data is used as validation
for model selection. At test time, results are computed on the full resolution
383 × 552 images.

We run all experiments on an NVidia Pascal Titan X GPU. Encoder part
of the network is initialized from the pre-trained VGG-16 net, decoder part is
initialized with variance scaling [15]. We use the SGD optimizer with momentum
decay of 0.9. Batch size B is set to 2 and learning rate to 0.001. Every fourth
epoch we exponentially reduce the learning rate by a factor of 0.9.

4.1 Ablation studies

We ﬁrst evaluate our architecture variations such as the three upsampling layers:
unpooling, upconvolution and bilinear interpolation. We can see from Fig. 4,
Unpool does not preserve the ﬁne object edges while BL oversmooths them
due to naive linear interpolation. These observations are also supported by the
quantitative experiments in Table 1. Hence, we choose to use UpConv for the
rest of architectural variations.

Within the tested concatenation schemes, DDFFNet-CC1 and DDFFNet-
CC2 preserve too many edges as they beneﬁt from larger feature maps. How-
ever, this produces incorrect depth and therefore achieving overall worse MSE
compared to that of DDFFNet-CC3, see Table 1. On the other hand, DDFFNet-
CC3 preserves only the most important edges corresponding to object bound-
aries. Going deeper in the concat connections would not provide suﬃciently ﬁne
structures, hence, we do not test connections after CC3.

We further plot the BadPix measure when changing the threshold τ in Fig. 5.
In this plot, we compare our best architecture DDFFNet-CC3 with focal stacks
of varying sizes, S ∈ {5, 8, 10, 15}. Having light-ﬁeld images allows us to digitally
generate focal stacks of varying sizes, enabling us to ﬁnd an optimal size. Even
though increasing the stack size S should theoretically decrease the depth error,
S-15 quickly overﬁts due to the fact that it was trained with a batch size of 1 to
ﬁt into the memory of a single GPU. We ﬁnd that a focal stack of 10 images is
the best memory-performance compromise, which is why all further experiments
are done with S = 10.

12

C. Hazirbas et al.

Accuracy (δ = 1.25)

Method MSE ↓ RMS ↓ log RMS ↓ Abs. rel. ↓ Sqr. rel.↓

δ ↑

δ2 ↑

δ3 ↑ Bump. ↓

Unpool
BL

2.9 e−3
2.1 e−3
t UpConv 1.4 e−3
e
N
1.4 e−3
F
1.8 e−3
F
D
9.7 e−4
D

CC1
CC2
CC3

PSPNet 9.4 e−4
2.1 e−3
Lytro
PSP-LF 2.7 e−3
4.8 e−3
DFLF
7.3 e−3
VDFF

0.050
0.041
0.034
0.033
0.039
0.029

0.030
0.040
0.046
0.063
0.080

0.50
0.43
0.33
0.33
0.39
0.32

0.29
0.31
0.45
0.59
1.39

0.64
0.46
0.30
0.37
0.39
0.29

0.27
0.26
0.46
0.72
0.62

0.05
0.03
0.02
0.02
0.02
0.01

0.01
0.01
0.03
0.07
0.05

39.95 63.46 78.26
51.29 74.81 85.28
52.41 83.09 93.78
60.38 82.11 90.63
44.80 76.27 89.15
61.95 85.14 92.99

62.66 85.90 94.42
55.65 82.00 93.09
39.70 65.56 82.46
28.64 53.55 71.61
19.95 32.68
8.42

0.62
0.54
0.54
0.75
0.75
0.59

0.55
1.02
0.54
0.65
0.79

Table 1: Quantitative results. DDFFNet-CC3 is the best depth from focus method
and provides also better results compared to Lytro, i.e. depth from light-ﬁeld. Metrics
are computed on the predicted and the groundtruth disparity maps.

4.2 Comparison to state-of-the-art

We have implemented three baselines to compare our method with:

Variational DFF. We compare our results with the state-of-the-art variational
method, VDFF [32], using their GPU code4 and the same focal stacks as in
our method. We run a grid search on several VDFF parameters and the results
reported are for the best set of parameters. VDFF outputs a real valued index
map. Each pixel is assigned to one of the stack images, where the pixel is in focus.
Therefore, we directly interpolate these indices to their corresponding disparity
values and compute our metrics on the mapped disparity output.

PSPNet for DFF. Pyramid Scene Parsing Network [47] is based on a deeper
encoder (ResNet) and also capable of capturing global context information by
aggregating diﬀerent-region-based context through the pyramid pooling mod-
ule. It is originally designed for semantic segmentation, however, we modiﬁed
the network for depth from focus problem (input and output) and trained it
end-to-end on our dataset. We also compare to PSPNet in order to observe the
eﬀects of signiﬁcant architectural changes in terms of a deeper encoder (ResNet)
with a recent decoder module for the problem of depth from focus.

Lytro depth. For completion, we also compare with the depth computed from
the light-ﬁeld directly by the Lytro. Although this method technically does not
compute DFF, we still think it is a valuable baseline to show the accuracy that
depth from light-ﬁeld methods can achieve. Lytro toolbox predicts depth in
lambda units, thus the output is not directly comparable to our results. For this
reason, we formulate the rescaling from Lytro depth to our groundtruth as an
optimization problem that ﬁnds a unique scaling factor k∗. To do so, we minimize

4 https://github.com/adrelino/variational-depth-from-focus

Deep Depth From Focus

13

the least squares error between the resulting depth ˜Zp and the groundtruth depth
Zp to ﬁnd the best scaling factor k∗:

k∗ = arg min

k

(cid:88)

(cid:107)k · ˜Zp − Zp(cid:107)2
2 ,

(6)

p
where k ∈ R. Note that this is the best possible mapping in terms of MSE to our
groundtruth depth maps provided that the focal stack has uniform focal change,
therefore, we are not penalizing during the conversion process. Evaluation met-
rics are then computed on k∗ · ˜Dp and Dp.

Depth from light-ﬁeld. Even though we focus on the task of DFF, we want to
provide a comparison to depth from light-ﬁeld. For this purpose, we follow [17,18]
and train our network (DDFFNet-CC3 ) as well as PSPNet with 11 sub-apertures
from the light-ﬁeld camera as input (see supp. Fig. 3). We denote these models
as DFLF and PSP-LF, respectively. To the best of our knowledge, there is no
code for [17,18] to test their full pipeline on our dataset.

As we can see from Table 1, DDFFNet-CC3 outperforms the other depth
from focus method, i.e. VDFF [32], in all evaluation metrics, reducing depth
error by more than 75%. The major reason for this is that VDFF proposes an
optimization scheme that relies on precomputed hand-crafted features, which
can handle the synthetic or clean high resolution images but fail in the realistic,
challenging scenes of our dataset.

PSPNet performs on-par to DDFFNet-CC3, nevertheless, as shown in Fig. 6,
pyramid pooling leads to oversmooth depth maps due to its upsampling strategy.
Although this network is very eﬃcient for semantic segmentation, we found that
our decoder choice with skip connection CC3 yields more accurate, non-smooth
depth maps.

Lytro, on the other hand, computes very inaccurate depth maps on ﬂat sur-
faces (Fig. 6) while our DDFFNet estimates a smoother and also more accurate
disparity maps. Note that Lytro depth is what is provided as groundtruth depth
maps in the Stanford Light-ﬁeld dataset, but this depth computation is relying
on an algorithm that is not always accurate as we have shown. This is another
advantage of the proposed dataset which provides groundtruth maps from an
external RGB-D sensor.

As we can see in Table 1, our approach DDFFNet-CC3 still performs better
than depth from light-ﬁeld (DFLF) with a similar number of images. Note that
it would not be possible to ﬁt all sub-aperture images provided by the light-ﬁeld
camera into GPU memory. In contrast to DFLF, our method is usable with any
camera.

Moreover, we present the MSE and RMS error computed on the predicted
depth maps in Table 2. DDFFNet-CC3 achieves a much lower error when com-
pared to VDFF or DFLF. DDFFNet-UpConv has a better depth error than
DDFFNet-CC3, but, its badpix error is signiﬁcantly larger than DDFFNet-CC3,
demonstrated in Fig. 5.

Overall, experiments show that our method is more accurate by a large mar-
gin when compared to the classical variatonal DFF method [32] while also being

14

C. Hazirbas et al.

Method Runtime (s.) Depth (m.)

Unpool
BL

t UpConv
e
N
CC1
F
F
CC2
D
CC3
D

DFLF
VDFF

0.55
0.43
0.50
0.60
0.60
0.58

0.59
2.83

Lytro

25.26 (CPU)

1.40
1.10
0.58
0.79
0.86
0.86

1.50
8.90

0.99

Table 2: Runtime and Depth er-
ror. DDFFNet is faster and more accu-
rate than other state-of-the-art meth-
ods. For completeness, we also report
the runtime of Lytro toolbox on CPU.
VDFF performs worse as it requires
many iterations of optimization during
test.

Fig. 5: Badpix(%) for DDFFNet-CC3
for S ∈ {5, 8, 10, 15}, DDFFNet-
UpConv for S=10, for Lytro, DFLF
and VDFF. While τ increases BadPix
error decreases. DDFFNet with stack
size of 10 is better than VDFF and
Lytro by a large margin.

orders of magnitude faster on a GPU. It is also more accurate than the Lytro
predicted depth or a network trained for depth from light-ﬁeld. Several network
architectures were explored, and ﬁnally CC3 was deemed the best with overall
lowest disparity error while keeping object boundaries in the disparity map.

Is DDFFNet generalizable to other cameras? To show the generality of
our method, we capture focal stacks with an Android smartphone where the
focus changes linearly from 0.1 to 4m and groundtruth depth maps with the
depth camera of the smartphone. We present the results on this mobile depth
from focus (mDFF) dataset in the supplementary material and share the dataset
publicly on https://vision.cs.tum.edu/data/datasets/mdff .

5 Conclusions

Depth from focus (DFF) is a highly ill-posed inverse problem because the optimal
focal distance is inferred from sharpness measures which fail in untextured areas.
Existing variational solutions revert to spatial regularization to ﬁll in the missing
depth, which are not generalized to more complex geometric environments. In
this work, we proposed ‘Deep Depth From Focus’ (DDFF) as the ﬁrst deep
learning solution to this classical inverse problem. To this end, we introduced
a novel 25 times larger dataset with focal stacks from a light-ﬁeld camera and
groundtruth depth maps from an RGB-D camera. We devised suitable network
architectures and demonstrated that DDFFNet outperforms existing approaches,
reducing the depth error by more than 75% and predicting a disparity map in
only 0.58 seconds.

Deep Depth From Focus

15

References

1. Adelson, E., Wang, J.: Single lens stereo with a plenoptic camera. In: PAMI (1992)
2. Asif, M., Choi, T.: Learning shape from focus using multilayer neural networks.

In: SPIE, Vision Geometry VIII (1999)

3. Badrinarayanan, V., Kendall, A., Cipolla, R.: SegNet: A deep convolutional

encoder-decoder architecture for image segmentation. PAMI (2017)

4. Bok, Y., Jeon, H.G., Kweon, I.S.: Geometric calibration of micro-lens-based light

ﬁeld cameras using line features. PAMI (2017)

5. Cho, D., Lee, M., Kim, S., Tai, Y.W.: Modeling the calibration pipeline of the lytro

camera for high quality light-ﬁeld image reconstruction. In: ICCV (2013)

6. Dansereau, D., Pizarro, O., Williams, B.: Decoding, calibration and rectiﬁcation

for lenselet-based plenoptic cameras. In: CVPR (2013)

7. Diebold, M., Goldluecke, B.: Epipolar plane image refocusing for improved depth

estimation and occlusion handling. In: ICCV (2013)

8. Dosovitskiy, A., Fischer, P., Ilg, E., H¨ausser, P., Hazirbas, C., Golkov, V., van der
Smagt, P., Cremers, D., Brox, T.: Flownet: Learning optical ﬂow with convolutional
networks. In: ICCV (2015)

9. Dosovitskiy, A., Tobias Springenberg, J., Brox, T.: Learning to generate chairs

with convolutional neural networks. In: CVPR (2015)

10. Eigen, D., Puhrsch, C., Fergus, R.: Depth map prediction from a single image using

a multi-scale deep network. In: NIPS (2014)

11. Galliani, S., Schindler, K.: Just look at the image: viewpoint-speciﬁc surface normal

prediction for improved multi-view reconstruction. In: CVPR (2016)

12. Garg, R., BG, V.K., Reid, I.: Unsupervised CNN for single view depth estimation:

geometry to the rescue. In: ECCV (2016)
13. Girshick, R.: Fast R-CNN. In: ICCV (2015)
14. Hazirbas, C., Ma, L., Domokos, C., Cremers, D.: Fusenet: Incorporating depth into

semantic segmentation via fusion-based cnn architecture. In: ACCV (2016)

15. He, K., Zhang, X., Ren, S., Sun, J.: Delving deep into rectiﬁers: Surpassing human-

level performance on imagenet classiﬁcation. In: ICCV (2015)

16. He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition.

17. Heber, S., Pock, T.: Convolutional networks for shape from light ﬁeld. In: CVPR

18. Heber, S., Yu, W., Pock, T.: Neural epi-volume networks for shape from light ﬁeld.

In: CVPR (2016)

(2016)

In: ICCV (2017)

19. Honauer, K., Johannsen, O., Kondermann, D., Goldluecke, B.: A dataset and eval-
uation methodology for depth estimation on 4d light ﬁelds. In: ACCV (2016)
20. Ioﬀe, S., Szegedy, C.: Batch normalization: Accelerating deep network training by

reducing internal covariate shift. In: ICML (2015)

21. Jeon, H.G., Park, J., Choe, G., Park, J., Bok, Y., Tai, Y.W., Kweon, I.S.: Accurate

depth map estimation from a lenslet light ﬁeld camera. In: CVPR (2015)

22. Kendall, A., Badrinarayanan, V., Cipolla, R.: Bayesian SegNet: Model uncertainty
in deep convolutional encoder-decoder architectures for scene understanding. In:
BMVC (2017)

23. Kendall, A., Grimes, M., Cipolla, R.: Posenet: A convolutional network for real-

time 6-dof camera relocalization. In: ICCV (2015)

24. Krizhevsky, A., Sutskever, I., Hinton, G.E.: Imagenet classiﬁcation with deep con-

volutional neural networks. In: NIPS (2012)

16

C. Hazirbas et al.

25. Li, B., Shen, C., Dai, Y., van den Hengel, A., He, M.: Depth and surface normal es-
timation from monocular images using regression on deep features and hierarchical
crfs. In: CVPR (2015)

26. Lin, H., Chen, C., Kang, S.B., Yu, J.: Depth recovery from light ﬁeld using focal

stack symmetry. In: ICCV (2015)

27. Liu, F., Shen, C., Lin, G., Reid, I.D.: Learning depth from single monocular images

using deep convolutional neural ﬁelds. PAMI (2016)

28. Liu, M.Y., Tuzel, O., Taguchi, Y.: Joint geodesic upsampling of depth images. In:

29. Long, J., Shelhamer, E., Darrell, T.: Fully convolutional networks for semantic

CVPR (2013)

segmentation. In: CVPR (2015)

30. Mahmood, M.: Shape from focus by total variation. In: IVMSP Workshop (2013)
31. Mahmood, M., Choi, T.S.: Nonlinear approach for enhancement of image focus

volume in shape from focus. TIP (2012)

32. Moeller, M., Benning, M., Sch¨onlieb, C., Cremers, D.: Variational depth from focus

reconstruction. TIP (2015)

33. Ng, R., Levoy, M., Br´edif, M., Duval, G., Horowitz, M., Hanrahan, P.: Light ﬁeld
photography with a hand-held plenoptic camera. Tech. rep., Stanford University
Computer Science Tech Report CSTR 2005-02 (2005)

34. Noh, H., Hong, S., Han, B.: Learning deconvolution network for semantic segmen-

tation. In: ICCV (2015)

35. Park, J., Kim, H., Tai, Y.W., Brown, M.S., Kweon, I.: High quality depth map

upsampling for 3d-tof cameras. In: ICCV (2011)

36. Park, J., Kim, H., Tai, Y., Brown, M.S., Kweon, I.: High-quality depth map up-

sampling and completion for RGB-D cameras. TIP (2014)

37. P´erez-Nava, F., L¨uke, J.P.: Simultaneous estimation of super-resolved depth and

all-in-focus images from a plenoptic camera. In: 3DTV-CON (2009)

38. Pertuz, S., Puig, D., Garcia, M.A.: Analysis of focus measure operators for shape-

from-focus. Pattern Recognition (2013)

39. Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z.,
Karpathy, A., Khosla, A., Bernstein, M., Berg, A.C., Fei-Fei, L.: Imagenet large
scale visual recognition challenge. IJCV (2015)

40. Shen, J., Cheung, S.C.S.: Layer depth denoising and completion for structured-light

41. Simonyan, K., Zisserman, A.: Very deep convolutional networks for large-scale

RGB-D cameras. In: CVPR (2013)

image recognition. In: ICLR (2015)

phone. In: CVPR (2015)

42. Suwajanakorn, S., Hernandez, C., Seitz, S.M.: Depth from focus with your mobile

43. Thelen, A., Frey, S., Hirsch, S., Hering, P.: Improvements in shape-from-focus for
holographic reconstructions with regard to focus operators, neighborhood-size, and
height value interpolation. TIP (2009)

44. Walch, F., Hazirbas, C., Leal-Taixe, L., Sattler, T., Hilsenbeck, S., Cremers, D.:
Image-based localization using lstms for structured feature correlation. In: ICCV
(2017)

45. Wanner, S., Meister, S., Goldl¨ucke, B.: Datasets and benchmarks for densely sam-

pled 4d light ﬁelds. In: VMV (2013)

46. Wilburn, B., Joshi, N., Vaish, V., Talvala, E., Antunez, E., Barth, A., Adams, A.,
Horowitz, M., Levoy, M.: High performance imaging using large camera arrays. In:
TOG (2005)

47. Zhao, H., Shi, J., Qi, X., Wang, X., Jia, J.: Pyramid scene parsing network. In:

CVPR (2017)

Deep Depth From Focus

Supplementary Material

Caner Hazirbas, Sebastian Georg Soyer, Maximilian Christian Staab,
Laura Leal-Taix´e, and Daniel Cremers

Technical University of Munich, Germany
{hazirbas, soyers, staab, leal.taixe, cremers}@cs.tum.edu

Abstract. In this supplementary material we include additional infor-
mation for the reader. We ﬁrst detail the formulation of the light-ﬁeld
calibration and provide the values for all parameters. We then present the
characteristics of the new DDFF 12-Scene dataset, such as disparity his-
tograms per sequence and disparity sampling. Moreover, we show more
qualitative results including the failure cases and also visualizations of
the activation heat maps for our best performing model, i.e. DDFFNet-
CC3. Finally, we provide the results on the 4D light-ﬁeld dataset and
also on our mobile DFF (mDFF) dataset.

1 Light-ﬁeld Camera Calibration

We make use of the light-ﬁeld camera calibration toolbox by Bok et al. [4], which
generates the sub-apertures based on a radius rm of a microlens image, which
is set to 7 pixels for the Lytro ILLUM camera. Although the toolbox generates
13×13 sub-apertures, we follow the authors’ recommendation [4] to only use
the sub-apertures within the displacement i2 + j2 < (radius − 1)2. This results
in 9×9 sub-apertures. Estimated intrinsic parameters of the Lytro ILLUM are
given in Table 1. Intrinsics of the microlenses are computed as

Int =





Fx/(2rm)
0
0

0

Cx/(2rm)
Fx/(2rm) Cy/(2rm)



 .

0

1

(1)

2 DDFF 12-Scene Dataset

Our new dataset is composed of 12 scenes. We use as training set the ﬁrst six
scenes with 100 light-ﬁeld samples each, for a total of 600 light-ﬁeld training
images. The other six scenes have 20 light-ﬁeld samples each and are used for
testing. All 720 light-ﬁeld images have registered groundtruth depth/disparity
maps obtained from an RGB-D sensor.

In Fig. 4, the disparity distribution of the twelve scenes is shown. In Fig. 5a,
we plot the normalized disparity histogram of the training and test sets. We

2

C. Hazirbas et al.

Fig. 1: DDFFNet. Proposed auto-encoder-style architecture that takes in a focal stack
and produces a disparity map. We present several architectural modiﬁcations, namely
CC connections, Upsample, i.e. Unpool, BL and UpConv.

Parameters of the Lytro ILLUM

rm
K1
K2
k1
k2

7
-2.768
1982.0
0.388
-0.0361

Fx
Fy
Cx
Cy
K1/F (cid:48)

7299.7
7317.0
3991.6
2629.6
27e−5

Table 1: Estimated intrinsic parameters of the Lytro ILLUM. F∗ and C∗ are re-
spectively the focal length and optical center of the main lens in pixels. Baseline
(K1/F (cid:48)) is the distance between two adjacent sub-apertures in meter/pixel, where
F (cid:48) = max(Fx, Fy). Refer to [4] for details.

generate the focal stacks for 10 sampled disparities in the interval of [0.28, 0.02]
pixels (equivalent to [0.5, 7] meters), indicated with blue dashed lines in Fig. 5a.
We also plot the depth to disparity conversion for the given baseline and focal
length of the microlenses in Fig. 5b. Refocused disparity values and their corre-
sponding depths are denoted with a green box. Note that disparity is inversely
proportional to depth and therefore, linear sampling in disparity corresponds to
non-linear sampling in depth. We choose to sample disparities to have a linear
focus change between stack images.

3 DDFFNet results

We present the network architecture in Fig. 1 and further qualitative results
in Fig. 6. Note the poor performance of classic methods like VDFF, and even the
wrong disparity maps produced by Lytro in the ﬁrst row. In Fig. 7, we present
two failure cases where the network output is not sharp or not consistent.

What is the network learning? Following the convention in depth from
focus, one can see the DDFFNet as a sharpness measure. Our network takes an
input of B × S and reshapes it before the ﬁrst convolution. This design allows

Deep Depth From Focus Supplementary Material

3

the network to learn in which image of the stack the pixel is sharpest. From this
sharpness level, our regression layer, denoted as Score, regresses the depth from
sharpness (focus). Proof of the concept is visually provided in Fig. 2, where we
can see how the activations move towards the closest object (the chair) as we
advance in the focal stack, hinting at the fact that the network is really using
the focus information to estimate the depth.

Fig. 2: Activation heat maps for the refocused images in a focal stack. First column:
top: center sub-aperture image, bottom: groundtruth disparity map. The rest of the
columns show from left to right, top to bottom, how the activations on the focal stack
images evolve. Note how the activations slowly shift to the closest object (the chair)
as we advance in the focal stack.

LF sampling. To have a fair comparison we ran the depth from light-ﬁeld exper-
iments with 11 sub-apertures sampled from 9×9 grid shown in Fig. 3. DDFFNet
is originally designed to solve the depth from focus problem. Nonetheless, one
can easily use the same network architecture for DFLF. In depth from light-ﬁeld
depth can be recovered by measuring the displacement of pixels from one sub-
parture to another and therefore, one can derive a better network architecture
for the depth from light-ﬁeld problem. On the other hand, increasing the number
of sampled sub-apertures would also yield better performance.

Fig. 3: Sampled subpartures for DFLF are demonstrated with red color.

4

C. Hazirbas et al.

4 Results on the 4D light-ﬁeld dataset

We also present the results of DDFFNet-CC3 and PSPNet on the 4D light-ﬁeld
dataset [19]. Note that this dataset is not designed for depth from focus but
rather depth from light-ﬁeld. Therefore, we generate a focal stack of refocused
images per scene in the disparity interval of [−2.5, 2.5] from the light-ﬁeld images.
The number of images in this benchmark is limited and training a network
from scratch with the provided data does not work. We propose to do transfer
learning from our DDFF 12-Scene dataset by ﬁne-tuning DDFFNet-CC3 and
PSPNet. As training set for ﬁne-tuning we use the 16 light-ﬁeld images marked
as “additional” and 4 marked as “stratiﬁed”. As test set we use the 4 scenes
marked as “train” set. In Fig. 8, we show the qualitative results and in Table 2,

Method

MSE ↓ RMS ↓ Bump. ↓

1.30
0.37
0.19
Table 2: Quantitative results of the proposed method. Metrics are computed
on the predicted and groundtruth disparity maps.

VDFF
PSPNet
DDFFNet-CC3

1.58
1.21
1.92

1.15
0.53
0.42

we present the quantitative results. DDFFNet-CC3 outperforms other methods
in terms of MSE and RMS error, showing that by using only 20 images from a
completely diﬀerent setting, we can ﬁne-tune our network to achieve accurate
results.

5 Mobile depth from focus dataset (mDFF)

We also collected a smaller dataset using a Lenovo Phab 2 Pro smartphone. This
phone has a time-of-ﬂight depth sensor that allows us to capture focal stacks
with groundtruth depth maps. We collect 202 samples indoor and outdoor. Each
sample has 10 refocused images where the focus changes from 0.1 to 4m.

To show the performance of our approach, we train the DDFFNet-CC3 and
PSPNet on 181 samples and test on the rest 21 samples. Example images and
results are shown in Fig. 9. Quantitative comparison is presented in Table 3.

Method

MSE ↓ RMS ↓ Bump. ↓

1.00
0.46
0.54
Table 3: Quantitative results on the mDFF dataset. Metrics are computed on the
predicted and groundtruth depth maps.

VDFF
PSPNet
DDFFNet-CC3

1.78
1.72
2.09

0.96
0.60
0.67

Deep Depth From Focus Supplementary Material

5

Training set

Test set

Fig. 4: Disparity distribution of the DDFF 12-Scene dataset. Each of the ﬁrst six
scenes is composed of 100 light-ﬁeld samples and used for training. Each of the latter
six scenes is composed of 20 light-ﬁeld samples and used for testing.

6

C. Hazirbas et al.

(a)

(b)

Fig. 5: (a) Disparity distribution of the training and test sets. Dashed blue lines
represent the sampled disparity values used to generate the focal stacks. (b) Depth
to disparity conversion for DDFF 12-Scene dataset. Sampled disparities used for
refocusing and their corresponding depths are denoted with green boxes.

Image Disparity VDFF

DDLF

PSP-LF

Lytro

PSPNet Proposed

Fig. 6: Qualitative results of the DDFFNet versus state-of-the-art methods.
Results are normalized by the maximum disparity. Warmer colors represent closer
distances. Best viewed in color.

Image Disparity VDFF

DDLF

PSP-LF

Lytro

PSPNet Proposed

Fig. 7: Failure cases. Results are normalized by the maximum disparity. Warmer
colors represent closer distances. Best viewed in color.

Deep Depth From Focus Supplementary Material

7

Image

Disparity

VDFF

PSPNet

Proposed

Fig. 8: Results on the 4D light-ﬁeld benchmark [19]. Our method preserves
sharper object boundaries while other methods over-smooth the details in the esti-
mated disparity maps.

Image

Depth

VDFF

PSPNet

Proposed

Fig. 9: Results on the mDFF dataset. PSPNet produces smooth boundaries
while DDFFNet-CC3 keeps sharp edges in the results.

