8
1
0
2
 
b
e
F
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
7
6
3
6
0
.
2
0
8
1
:
v
i
X
r
a

Published as a conference paper at ICLR 2018

EFFICIENT SPARSE-WINOGRAD
CONVOLUTIONAL NEURAL NETWORKS

Xingyu Liu∗, Jeff Pool†, Song Han‡ §, William J. Dally∗†
∗ Stanford University, † NVIDIA, ‡ Massachusetts Institute of Technology, § Google Brain
{xyl, dally}@stanford.edu

ABSTRACT

Convolutional Neural Networks (CNNs) are computationally intensive, which
limits their application on mobile devices. Their energy is dominated by the
number of multiplies needed to perform the convolutions. Winograd’s minimal
ﬁltering algorithm (Lavin, 2015) and network pruning (Han et al., 2015) can reduce
the operation count, but these two methods cannot be directly combined – applying
the Winograd transform ﬁlls in the sparsity in both the weights and the activations.
We propose two modiﬁcations to Winograd-based CNNs to enable these methods
to exploit sparsity. First, we move the ReLU operation into the Winograd domain
to increase the sparsity of the transformed activations. Second, we prune the
weights in the Winograd domain to exploit static weight sparsity. For models on
CIFAR-10, CIFAR-100 and ImageNet datasets, our method reduces the number of
multiplications by 10.4×, 6.8× and 10.8× respectively with loss of accuracy less
than 0.1%, outperforming previous baselines by 2.0×-3.0×. We also show that
moving ReLU to the Winograd domain allows more aggressive pruning.

1

INTRODUCTION

Deep Convolutional Neural Networks (CNNs) have shown signiﬁcant improvement in many machine
learning applications. However, CNNs are compute-limited. Their performance is dominated by the
number of multiplies needed to perform the convolutions. Moreover, the computational workload
of CNNs continues to grow over time. LeCun et al. (1998) proposed a CNN model with less than
2.3 × 107 multiplies for handwritten digit classiﬁcation. Later, Krizhevsky et al. (2012) developed
AlexNet, an ImageNet-winning CNN with more than 1.1 × 109 multiplies. In 2014, ImageNet-
winning and runner up CNNs increased the number of multiplies to 1.4 × 109 (Szegedy et al., 2015)
and 1.6 × 1010 (Simonyan & Zisserman, 2015) respectively. Despite the powerful representational
ability of large scale CNNs, their computational workload prohibits deployment on mobile devices.

Two research directions have been explored to address the problem. Lavin (2015) proposed using
Winograd’s minimal ﬁltering algorithm (Winograd, 1980) to reduce the number of multiplies needed
to perform 3 × 3 kernel convolutions. On the other end, pruning the model (Han et al., 2015; 2016b)
and exploiting the dynamic sparsity of activations due to ReLU also reduces the required multiplies.

Unfortunately, the above two directions are not compatible: the Winograd transformation ﬁlls in the
zeros in both the weights and the activations (Figure 1(a)) – eliminating the gain from exploiting
sparsity. Thus, for a pruned network, Winograd’s algorithm actually increases the number of
multiplies; the loss of sparsity more than offsets the reduced operation count.

In this paper, we introduce two modiﬁcations to the original Winograd-based convolution algorithm to
eliminate this problem. First, we move the ReLU operation to be after the Winograd transform to also
make the activations sparse at the point where the multiplies are performed. Second, we prune the
weights after (rather than before) they are transformed. Thus, the weights are sparse when the element-
wise multiply is performed — reducing the operation count. Together, these two modiﬁcations enable
the gains of Winograd’s algorithm and of exploiting sparsity to be combined. We open-source our
code and models at https://github.com/xingyul/Sparse-Winograd-CNN.

1

Published as a conference paper at ICLR 2018

Figure 1: Combining Winograd convolution with sparse weights and activations. (a) Conventional
Winograd-based convolution ﬁlls in the zeros in both the weights and activations. (b) Pruning the
4 × 4 transformed kernel restores sparsity to the weights. (c) Our proposed Winograd-ReLU CNN.
Moving the ReLU layer after Winograd transformation also restores sparsity to the activations.

2 RELATED WORK

Linear Algebra property in Convolution: Previous research proposes using the linear algebra
property of convolution to reduce the number of multiplies by trading additions for multiplies. Cong
& Xiao (2014) convert convolution into matrix multiplies and utilize the linear algebra property at
the sub-matrix block level. This approach achieves a 47% saving in multiplies. Lavin (2015) exploits
the element-level linear algebra property of convolution, i.e. Winograd’s minimal ﬁltering algorithm
(Winograd, 1980). This approach reduces the number of multiplies by 2.25× to 4×, depending on
the image patch size used in the algorithm. Winograd’s algorithm is also used in a state-of-the-art
deep learning library, cuDNN (Chetlur et al., 2014), to improve computation efﬁciency.

Model Compression: Model compression reduces the number of multiplies of CNNs by pruning
network parameters (LeCun et al., 1990; Hassibi et al., 1993) and exploiting weight sparsity. Han
et al. (2015; 2016b) proposed learning the sparsity pattern of network weights by eliminating weights
whose absolute value is less than an empirical threshold. This approach can prune the convolutional
layers of the model to only 30% − 50% of the original size and reduce the number of multiplies
required. Liu et al. (2017) ﬁrst proposed pruning and re-training the weights in Winograd domain for
conventional Winograd convolution. Li et al. (2017) later showed promising results on large datasets
and reported 90% sparsity in the Winograd parameters of AlexNet with less than 0.1% accuracy loss.

Dynamic Activation Sparsity: The ReLU non-linearity sets activations whose values are negative to
zero, causing dynamic sparsity in activations. Model compression can work in tandem with dynamic
activation sparsity and reduce multiplication workload. Han et al. (2015) showed that exploiting
sparsity of both weights and activations can reduce the number of multiplies by 4 − 11×. Huan
et al. (2016) further proposed to manually set a small positive ReLU threshold at test time to exploit
greater sparsity in activation without losing testing accuracy. Research in novel architectures also
led to optimizations for deep learning accelerators to exploit the sparsity in activations. Han et al.
(2016a) proposed using a Leading Non-zero Detection unit (LNZD) for their fully-connected layer
accelerator to efﬁciently skip zeros in input activations. Albericio et al. (2016) proposed a similar
mechanism for a convolution layer accelerator.

2

Published as a conference paper at ICLR 2018

3 SPARSE WINOGRAD CONVOLUTION

We ﬁrst introduce the conventional Winograd convolution and show how sparsity of weights or
activations is lost during the dataﬂow of the algorithm. We then present the novel Winograd-ReLU
CNN architecture. It preserves sparsity in both weights and activations before multiplies are performed
and signiﬁcantly reduces the computational workload.

3.1 SPARSITY IN CONVENTIONAL SPATIAL AND WINOGRAD CNN

The basic block of the conventional Winograd convolution algorithm works on an p×p patch (denoted
by d) extracted with stride of (p − 2) × (p − 2) from an H × W input feature map. With “valid”
padding, the p×p patch is convolved with a 3×3 kernel (denoted by g) to produce an (p−2)×(p−2)
output patch (denoted by S). The output patches are assembled into an output feature map.

Input activation patch d and kernel g (spatial-domain activation and weights) are transformed using
matrices B and G to be BT dB and GgGT (Winograd-domain activation and weights) respectively,
both with shape p × p. After element-wise product in Winograd-domain, the output activation S is
obtained using matrix A (equation (1)). Matrices B, G and A are p-speciﬁc. When p = 4, B and A
consists of 1, −1 and 0, so the multiplication with B and A only requires addition. It reduces the
number of multiplies from 9(p − 2)2 to p2. Lavin (2015) gives details of the algorithm.

S = AT [[GgGT ] (cid:12) [BT dB]]A

Spatial Baseline Network: When using a “vanilla” pruned network, as introduced by Han et al.
(2015), a ReLU non-linear operation is performed by the previous layer on spatial-domain input d
and spatial-domain weight g is pruned. The output activation patch S is obtained from equation (2).
This is illustrated in Figure 1(a) for p = 4. Though g and d may both be sparse due to pruning and
ReLU respectively, the element-wise multiply is dense due to G(·)GT and B(·)BT transformations
ﬁlling the spatial-domain zeros. Sparsity does not reduce the number of multiplies in Winograd’s
algorithm.

S = AT [[GPrune(g)GT ] (cid:12) [BT ReLU(d)B]]A

Winograd Native Pruned Network: When using the Winograd-domain pruned network introduced
by Liu et al. (2017) and Li et al. (2017), the spatial-domain input d is ReLU-ed by the previous layer
while the Winograd-domain weight GgGT is pruned. The output activation patch S is obtained from
equation (3). The algorithm when p = 4 is also illustrated in Figure 1(b). Though Winograd-domain
weights are sparse due to pruning, Winograd-domain activations are still dense due to B(·)BT
transforms. The sparsity in spatial activations due to ReLU does not reduce the number of multiplies.

S = AT [[Prune(GgGT )] (cid:12) [BT ReLU(d)B]]A

3.2 WINOGRAD-RELU CNN

To address the above problems, we introduce the Winograd-ReLU Network. Instead of applying
ReLU to the activations in the spatial domain, we apply ReLU to the activations in the Winograd
domain, as in equation (4) and Figure 1(c). The ReLU operation zeros all negative transformed
activations, reducing the number of multiplies in the Winograd domain.

S = AT [[Prune(GgGT )] (cid:12) [ReLU(BT dB)]]A

In the Winograd-ReLU CNN, we eliminate the spatial-domain kernel entirely. Because this ReLU is
really associated with the previous layer, we perform this transformed ReLU starting with the second
layer. We point out that the proposed new CNN architecture is not mathematically equivalent to the
vanilla CNN nor the conventional Winograd CNN. Due to the change of network architecture, the
training and pruning should also be changed. Our method operates in three phases: dense training,
pruning, and retraining.

Dense training: we train a dense p × p kernel directly in the transform domain. The transformed ker-
nel is initialized and trained directly by back-propagation through the inverse transform — eliminating
the need to maintain a kernel in the spatial domain or to transform a spatial kernel.

(1)

(2)

(3)

(4)

3

Published as a conference paper at ICLR 2018

Pruning: we prune the transformed kernel by computing the threshold t required to achieve a desired
pruning rate r and setting all weights whose absolute value less than t to zero. In our experiments,
we used the same r for all Winograd-ReLU layers. Because sensitivity varies from layer to layer, we
expect that better performance could be achieved by varying the pruning rate ri for each layer i.

Re-training: we re-train the model using a “sparsity mask” to force the weights that were pruned
to remain zero. The sparsity mask is computed during the pruning step and is kept constant during
re-training. The gradient of the network’s loss, L, with respect to the input activation and Winograd
weights can be derived using the chain rule. Equation (5) shows the calculation of input activation
gradient ∇dL and Winograd weight gradient ∇GgGT L using the loss gradient passed from upstream
layers ∇SL.

∇GgGT L = (A∇SLAT ) (cid:12) (BT dB) (cid:12) mask
∇dL = B[(A∇SLAT ) (cid:12) (GgGT ) (cid:12) mask]BT

(5)

4 EXPERIMENTS

We applied the methodology described above to several different CNNs on different datasets. The
original network models are chosen such that the majority of the convolution layers have 3 × 3
kernels. This ensures the largest portion of layers can be converted to Winograd convolution layers
and ReLU be put in Winograd domain. We used image classiﬁcation datasets of different scales:
CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ImageNet 2012 (Russakovsky et al., 2015).
For network architectures, we chose VGG-nagadomi (Nagadomi, 2014), ConvPool-CNN-C model
(Springenberg et al., 2015) and a variation of ResNet-18 (He et al., 2016a) respectively on three
datasets. Using the Tensorﬂow (Abadi et al., 2016) framework, we trained the spatial baseline CNN,
corresponding conventional Winograd CNN, and Winograd-ReLU CNN models from scratch. Then
the three models are iteratively pruned and re-trained. For a speciﬁc dataset, we used the same data
augmentation for the training of all models on the dataset.

4.1 CIFAR-10

We used VGG-nagadomi (Nagadomi, 2014) on the CIFAR-10 dataset. VGG-nagadomi is a light-
weight version of VGGNet (Simonyan & Zisserman, 2015). It contains 8 convolution layers with 3×3
kernels. The best reported validation set accuracy it achieves on CIFAR-10 is 93.31% (Nagadomi,
2014). We trained three models from scratch. The corresponding conventional Winograd CNN
model and Winograd-ReLU CNN model can achieve validation set accuracy of 93.30% and 93.43%
respectively. The ﬁrst convolution layer is most sensitive to pruning and we set its density to a
constant of 80%. We iteratively pruned and re-trained other convolution layers with density from
80% down to 20%.

Figure 2: Test accuracy vs density for the three models in Figure 1 on VGG-nagadomi.

Figure 2 shows test accuracy as a function of weight density for the three models. The two baseline
models can only be pruned to 60% density before accuracy falls signiﬁcantly (> 0.1%). Our
Winograd-ReLU CNN model can be pruned to 40% density before falling to the same accuracy.

Table 1 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 5.1×
and 3.7× 1 respectively. Pruning the Winograd-ReLU model reduces the convolution layer workload
by 13.3×, a 2.6× and 3.6× improvement respectively over the two baselines. The improvement of
overall network workload reduction is 2.2× and 3.0× respectively over two baselines.

1All Winograd CNN model workload reduction results include the intrinsic 2.25× reduction.

4

Published as a conference paper at ICLR 2018

Table 1: VGG-nagadomi weight and activation density on CIFAR-10.
Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd-ReLU CNN
Pruning (ours)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv7
conv total
overall

Density
Weight Act
80% 100%
60% 50%
60% 19%
60% 37%
60% 18%
60% 26%
60% 24%
60% 35%

-
-

-
-

Workload

80%
30%
12%
22%
11%
15%
14%
21%
20%(5.1×)
21%(4.7×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%

80%
27%
27%
27%
27%
27%
27%
27%
27%(3.7×)
29%(3.5×)

-
-

-
-

Density
Weight Act
80% 100%
40% 46%
40% 39%
40% 40%
40% 40%
40% 38%
40% 35%
40% 36%

-
-

-
-

Workload

80%
8%
7%
7%
7%
7%
6%
6%
8%(13.3×)
10%(10.4×)

4.2 CIFAR-100

We used the ConvPool-CNN-C (Springenberg et al., 2015) model on on the CIFAR-100 dataset.
ConvPool-CNN-C contains 9 convolution layers, out of which 7 have 3 × 3 kernels. We trained three
models from scratch. The spatial baseline CNN model and conventional Winograd CNN model can
achieve single model validation accuracy of 69.34% and 69.32% respectively. The corresponding
Winograd-ReLU network model can achieve validation set accuracy of 69.75%. We pruned the ﬁrst
convolution layer to a constant density of 80%. We iteratively pruned and re-trained the other layers
to densities from 80% down to 20%.

Figure 3: Test accuracy vs density for the three models in Figure 1 on ConvPool-CNN-C.

Figure 3 shows the accuracy as a function of density for spatial baseline and Winograd-ReLU models.
The spatial-baseline and Winograd-ReLU models can be pruned to 60% density without signiﬁcant
(> 0.1%) loss of accuracy. In contrast, the conventional Winograd CNN model can only be pruned to
70% density. At a given density, the Winograd-ReLU model has the highest accuracy.

Table 2: ConvPool-CNN-C weight and activation density on CIFAR-100.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Density
Weight Act
80% 100%
60% 53%
60% 52%
60% 77%
60% 35%
60% 32%
60% 56%

-
-

-
-

Workload

80%
33%
32%
46%
21%
19%
33%
29%(3.5×)
30%(3.4×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%

80%
31%
31%
31%
31%
31%
31%
31%(3.2×)
32%(3.1×)

-
-

-
-

Winograd-ReLU CNN
Pruning (ours)

Density
Weight Act
80% 100%
60% 54%
60% 53%
60% 54%
60% 54%
60% 42%
60% 43%

-
-

-
-

Workload

80%
14%
14%
14%
14%
11%
11%
14%(7.1×)
15%(6.8×)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv total
overall

Table 2 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 3.5×
and 3.2× respectively. Pruning the Winograd-ReLU model reduces the workload by 7.1×, a 2.1×
and 2.2× improvement respectively over the two baselines. The improvement of overall network
workload reduction is 2.0× and 2.2× respectively over two baselines.

5

Published as a conference paper at ICLR 2018

4.3

IMAGENET

We used a variation of the full pre-activation version (He et al., 2016b) of ResNet-18 (He et al., 2016a)
on the ImageNet 2012 dataset. We used this version because it performs the best among various
ResNet versions and its structure suits our Winograd-ReLU approach – its ReLU units are located
before convolutions in the residual modules. The variation is different from original ResNet-18
by replacing all 2 × 2-stride 3 × 3 convolution layers with a 2 × 2 max-pooling layer followed by
a 1 × 1-stride 3 × 3 convolution layer. Such difference ensure most of convolution layers can be
converted to Winograd convolution layer. Another difference is that it doesn’t have the last max
pooling layer so the last group of residual modules has spatial size of 14 × 14, in order to keep the
spatial size even instead of odd. This setting suits Winograd convolution with p = 4 best in that even
spatial size is required for even p values.

We trained three models from scratch. For single model and single central 224 × 224 cropping, the
spatial baseline CNN model and conventional Winograd CNN model can achieve single model top-
1/top-5 validation accuracy of 66.67%/87.42% and 66.84%/87.47%. The corresponding Winograd-
ReLU CNN model can achieve validation top-1/top-5 accuracy of 66.78%/87.43%. We kept the ﬁrst
convolution layer intact. We iteratively pruned other convolution layers with density rate from 80%
down to 10%.

Figure 4: Top-1 and top-5 validation accuracy vs density for three models on a variation of ResNet-18.

Figure 4 shows the accuracy as a function of density for three models. The spatial baseline CNN
model and conventional Winograd CNN model can be pruned to 60% and 50% respectively without
signiﬁcant (> 0.1%) loss of top-1 or top-5 accuracy. The Winograd-ReLU model can be pruned
much further, to 30%/35% density without signiﬁcant (> 0.1%) loss of top-1/top-5 accuracy. At
these densities, top-1 accuracies are 66.53%, 66.45% and 66.61% for three models respectively,
with a dense spatial baseline of 66.67%; top-5 accuracies are 87.29%, 87.30% and 87.35% for three
models respectively, with a dense spatial baseline of 87.42%.

Table 3 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning the two baseline models reduces the convolution layer workload by
5.1× and 4.5× respectively. Pruning the Winograd-ReLU model reduces the workload by 13.2×,
a 2.6× and 2.9× improvement respectively over the two baselines. The improvement of overall
network workload reduction is 2.3× and 2.6× respectively over two baselines.

5 DISCUSSION

In this section, we summarize the experiment results and compare the three models in terms of a)
weight and activation dimensions and b) the dynamic density of activations. We then visualize the
kernels to illustrate the pattern of the proposed Winograd-ReLU model kernel.

6

Published as a conference paper at ICLR 2018

Table 3: ResNet-18 variation weight and activation density on ImageNet.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd CNN Native
Pruning (Li et al., 2017)
Density

Winograd-ReLU CNN
Pruning (ours)

Layer

res2a_2a
res2a_2b
res2b_2a
res2b_2b
res3a_2a
res3a_2b
res3b_2a
res3b_2b
res4a_2a
res4a_2b
res4b_2a
res4b_2b
res5a_2a
res5a_2b
res5b_2a
res5b_2b
conv total
overall

Density
Weight Act
60% 90%
60% 64%
60% 71%
60% 53%
60% 94%
60% 35%
60% 47%
60% 29%
60% 88%
60% 23%
60% 36%
60% 21%
60% 45%
60% 14%
60% 16%
60% 12%

-
-

-
-

Workload

54%
39%
43%
32%
56%
21%
28%
17%
53%
14%
22%
13%
27%
9%
10%
7%
20%(5.1×)
21%(4.7×)

Act
Weight
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%

-
-

-
-

Workload

22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%(4.5×)
24%(4.2×)

Density
Weight Act
35% 48%
35% 50%
35% 50%
35% 50%
35% 49%
35% 50%
35% 49%
35% 49%
35% 49%
35% 50%
35% 50%
35% 49%
35% 50%
35% 48%
35% 48%
35% 49%

-
-

-
-

Workload

8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
7%
7%
8%
8%(13.2×)
9%(10.8×)

5.1 WEIGHT AND ACTIVATION DIMENSION

In a convolutional neural network, a convolution-ReLU pair acts as a classiﬁer on a spatial patch of
an input feature. The dimension of the space being classiﬁed is the total number of elements passing
through the ReLU layer. The decision boundaries of the classiﬁer are determined by the weights.
Insufﬁcient non-zero weights or insufﬁcient activations results in too simple a decision boundary and
causes accuracy loss.

Experimental results have shown that Winograd-ReLU CNN can reach the same accuracy as both
vanilla spatial baseline CNN and conventional Winograd CNN without pruning, and that Winograd-
ReLU CNN is more robust to aggressive pruning. In this subsection we provide an explanation for
the latter observation from the aspect of activation and weight dimensions. We provide a summary on
dimensions in Table 4.

Table 4: Comparison of ReLU dimension and weight dimension in three types of networks. Assume
the convolution-ReLU pair operates on input activation of spatial size of H × W and the number of
input and output channels are C and K respectively.

Spatial Baseline
CNN (Han et al., 2015)

Weight dimension K × C × 3 × 3
ReLU dimension H × W × K

Winograd native pruned
CNN (Li et al., 2017)
K × C × p × p
H × W × K

Winograd-ReLU
CNN (ours)
K × C × p × p
p−2 H × p

p

p−2 W × K

Weight Dimension Increase: Compared to a vanilla 3 × 3 CNN, a conventional Winograd CNN
uses (p × p)-dimension Winograd kernels. Training a Winograd CNN from scratch allows higher
dimension (p × p) for Winograd kernels, and a Winograd-ReLU CNN shares these characteristics.

ReLU Dimension Increase: A major difference between our Winograd-ReLU CNN and conven-
tional Winograd CNN is that the ReLU layers in Winograd-ReLU CNN have higher dimension. The
dimension increase comes from the Winograd transformation extracting p × p feature patches with
(p − 2) × (p − 2) strides from H × W activations. The total number of extracted Winograd-domain
p−2 W , an increase from the spatial domain’s H × W .
activations is
We can see that our Winograd-ReLU architecture has an advantage on the dimensions of weights
and activations over other two models. This means Winograd-ReLU CNNs classify on a higher
dimension with more complex decision boundaries, which forms a stronger representational ability in
high dimensional image feature space.

p−2 H × p

p

7

Published as a conference paper at ICLR 2018

5.2 DYNAMIC ACTIVATION DENSITY

As is shown in the ImageNet results in the previous section, dynamic activation density of spatial
baseline CNN model varies signiﬁcantly among layers. Layers at earlier stages typically have higher
density in activation than later stages. In Winograd-ReLU CNN model, the dynamic activation
densities vary little among layers and are all close to 50%.

An explanation is that the nature of image convolution ensures activations d to be spatially smooth.
Thus, due to the structure of matrix B (Lavin, 2015), 15 of 16 elements in the 4 × 4 matrix of
Winograd-domain activation patch BT · d · B have a mean close to zero. This beneﬁts classiﬁcation
within a patch since ReLU layer is most powerful when half of activations are positive.

5.3 KERNEL VISUALIZATION

We visualize the kernels of the proposed Winograd-ReLU model. We selected the ﬁrst 6 input and
output channels of layer res2a_2a of ResNet-18 at three different pruning densities. Unlike spatial
domain kernels, Winograd-ReLU kernels do not show clear physical meanings such as edge or corner
detectors. However, we observe that values of the (2, 2) elements (from top-left, 1-based indices) in
each kernel are typically distinct in a kernel and are most likely kept during aggressive pruning. A
possible reason for this is that the (2, 2) elements of Winograd-domain activation in a 4 × 4 patch
are special: interested readers can calculate BT · d · B symbolically and will realize that (2, 2)
elements are the only elements that are transformed with a linear combination of only adding and no
subtraction. In a spatially smooth activation patch, this means the (2, 2) elements are the ones and
the only ones with a non-zero mean.

Figure 5: Kernels of ResNet-18 Winograd-ReLU model res2a_2a layer with density of 100% (left,
87.43% top-5 accuracy), 35% (middle, 87.36% top-5 accuracy) and 15% (right, 86.57% top-5
accuracy). Positive, negative and pruned weights are in red, blue and black respectively.

6 CONCLUSION AND FUTURE WORK

We have shown that we can combine the computational savings of sparse weights and activations with
the savings of the Winograd transform by making two modifcations to conventional CNNs. To make
the weights sparse at the point of multiplication, we train and prune the weights in the transform
domain. This simple approach does not reduce the workload with respect to spatial pruning, though,
so we move the ReLU non-linear operation after the Winograd transform to make the activations
sparse at the point of multiplication. Moving ReLU to the Winograd domain also allows the weights
to be more aggressively pruned without losing accuracy. With a 2 × 2 output patch (p = 4), the
net result is a reduction of 10.4×, 6.8× and 10.8× in computation on three datasets: CIFAR-10,
CIFAR-100 and ImageNet.

We plan to extend this work in the following directions. First, we expect that even greater savings on
computation can be realized by using larger patch sizes (e.g., p = 6), and there may be beneﬁt in
exploring different Winograd transformation matrices (B,G and A). Second, we expect that using
different pruning rates ri for each network layer will help maintain accuracy and improve overall
workload reduction. Finally, we expect that combining our Winograd-ReLU network with other
network simpliﬁcation techniques, e.g. quantization of weights and/or activations (Courbariaux et al.,
2015; Lin et al., 2016; Rastegari et al., 2016), will reduce the energy of computation even further.

8

Published as a conference paper at ICLR 2018

REFERENCES

Martín Abadi et al. Tensorﬂow: A system for large-scale machine learning. In Proceedings of the

12th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2016.

Jorge Albericio, Patrick Judd, Tayler Hetherington, Tor Aamodt, Natalie Enright Jerger, and Andreas
Moshovos. Cnvlutin: Ineffectual-neuron-free Deep Neural Network Computing. In Proceedings of
the 43rd International Symposium on Computer Architecture (ISCA), 2016.

Sharan Chetlur, Cliff Woolley, Philippe Vandermersch, Jonathan Cohen, John Tran, Bryan Catanzaro,
and Evan Shelhamer. cuDNN: Efﬁcient primitives for deep learning. CoRR, abs/1410.0759, 2014.
URL http://arxiv.org/abs/1410.0759.

Jason Cong and Bingjun Xiao. Minimizing computation in convolutional neural networks.

In

International Conference on Artiﬁcial Neural Networks (ICANN), pp. 281–290. Springer, 2014.

Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre David. Binaryconnect: Training deep neural
networks with binary weights during propagations. In Advances in neural information processing
systems (NIPS), 2015.

Song Han, Jeff Pool, John Tran, and William J. Dally. Learning both weights and connections for
efﬁcient neural networks. In Advances in neural information processing systems (NIPS), 2015.

Song Han, Xingyu Liu, Huizi Mao, Jing Pu, Ardavan Pedram, Mark A. Horowitz, and William J.
Dally. EIE: Efﬁcient inference engine on compressed deep neural network. In Proceedings of the
43rd International Symposium on Computer Architecture (ISCA), 2016a.

Song Han, Huizi Mao, and William J. Dally. Deep compression: Compressing deep neural networks
with pruning, trained quantization and huffman coding. In International Conference on Learning
Representations (ICLR), 2016b.

Babak Hassibi, David G Stork, et al. Second order derivatives for network pruning: Optimal brain

surgeon. Advances in Neural Information Processing Systems (NIPS), pp. 164–164, 1993.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016a.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual
networks. In European Conference on Computer Vision (ECCV), pp. 630–645. Springer, 2016b.

Yuxiang Huan, Yifan Qin, Yantian You, Lirong Zheng, and Zhuo Zou. A multiplication reduction
technique with near-zero approximation for embedded learning in IoT devices. In System-on-Chip
Conference (SOCC), 29th IEEE International, pp. 102–107. IEEE, 2016.

Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. 2009.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classiﬁcation with deep convolu-
tional neural networks. In Advances in neural information processing systems (NIPS), 2012.

Andrew Lavin. Fast algorithms for convolutional neural networks. CoRR, abs/1509.09308, 2015.

URL http://arxiv.org/abs/1509.09308.

Yann LeCun, John S Denker, and Sara A Solla. Optimal brain damage. In Advances in neural

information processing systems (NIPS), pp. 598–605, 1990.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to

document recognition. Proceedings of the IEEE, 86(11):2278–2324, 1998.

Sheng R. Li, Jongsoo Park, and Ping Tak Peter Tang. Enabling sparse Winograd convolution by native
pruning. CoRR, abs/1702.08597, 2017. URL http://arxiv.org/abs/1702.08597.

Zhouhan Lin, Matthieu Courbariaux, Roland Memisevic, and Yoshua Bengio. Neural networks with
few multiplications. In Proceedings of International Conference on Learning Representations
(ICLR), 2016.

9

Published as a conference paper at ICLR 2018

Xingyu Liu, Song Han, Huizi Mao, and William J. Dally. Efﬁcient sparse-winograd convolutional
neural networks. International Conference on Learning Representations (ICLR) Workshop, 2017.

Nagadomi.

Code for kaggle-cifar10 competition. 5th place.

https://github.com/

nagadomi/kaggle-cifar10-torch7, 2014.

Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. XNOR-Net: Imagenet
classiﬁcation using binary convolutional neural networks. In European Conference on Computer
Vision (ECCV), 2016.

Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang,
Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. ImageNet
Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV),
2015.

Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. In Proceedings of International Conference on Learning Representations (ICLR),
2015.

Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, and Martin Riedmiller. Striving for
simplicity: The all convolutional net. International Conference on Learning Representations
(ICLR) Workshop, 2015.

Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott E. Reed, Dragomir Anguelov,
Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 1–9, June 2015.

Shmuel Winograd. Arithmetic complexity of computations, volume 33. Siam, 1980.

10

8
1
0
2
 
b
e
F
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
7
6
3
6
0
.
2
0
8
1
:
v
i
X
r
a

Published as a conference paper at ICLR 2018

EFFICIENT SPARSE-WINOGRAD
CONVOLUTIONAL NEURAL NETWORKS

Xingyu Liu∗, Jeff Pool†, Song Han‡ §, William J. Dally∗†
∗ Stanford University, † NVIDIA, ‡ Massachusetts Institute of Technology, § Google Brain
{xyl, dally}@stanford.edu

ABSTRACT

Convolutional Neural Networks (CNNs) are computationally intensive, which
limits their application on mobile devices. Their energy is dominated by the
number of multiplies needed to perform the convolutions. Winograd’s minimal
ﬁltering algorithm (Lavin, 2015) and network pruning (Han et al., 2015) can reduce
the operation count, but these two methods cannot be directly combined – applying
the Winograd transform ﬁlls in the sparsity in both the weights and the activations.
We propose two modiﬁcations to Winograd-based CNNs to enable these methods
to exploit sparsity. First, we move the ReLU operation into the Winograd domain
to increase the sparsity of the transformed activations. Second, we prune the
weights in the Winograd domain to exploit static weight sparsity. For models on
CIFAR-10, CIFAR-100 and ImageNet datasets, our method reduces the number of
multiplications by 10.4×, 6.8× and 10.8× respectively with loss of accuracy less
than 0.1%, outperforming previous baselines by 2.0×-3.0×. We also show that
moving ReLU to the Winograd domain allows more aggressive pruning.

1

INTRODUCTION

Deep Convolutional Neural Networks (CNNs) have shown signiﬁcant improvement in many machine
learning applications. However, CNNs are compute-limited. Their performance is dominated by the
number of multiplies needed to perform the convolutions. Moreover, the computational workload
of CNNs continues to grow over time. LeCun et al. (1998) proposed a CNN model with less than
2.3 × 107 multiplies for handwritten digit classiﬁcation. Later, Krizhevsky et al. (2012) developed
AlexNet, an ImageNet-winning CNN with more than 1.1 × 109 multiplies. In 2014, ImageNet-
winning and runner up CNNs increased the number of multiplies to 1.4 × 109 (Szegedy et al., 2015)
and 1.6 × 1010 (Simonyan & Zisserman, 2015) respectively. Despite the powerful representational
ability of large scale CNNs, their computational workload prohibits deployment on mobile devices.

Two research directions have been explored to address the problem. Lavin (2015) proposed using
Winograd’s minimal ﬁltering algorithm (Winograd, 1980) to reduce the number of multiplies needed
to perform 3 × 3 kernel convolutions. On the other end, pruning the model (Han et al., 2015; 2016b)
and exploiting the dynamic sparsity of activations due to ReLU also reduces the required multiplies.

Unfortunately, the above two directions are not compatible: the Winograd transformation ﬁlls in the
zeros in both the weights and the activations (Figure 1(a)) – eliminating the gain from exploiting
sparsity. Thus, for a pruned network, Winograd’s algorithm actually increases the number of
multiplies; the loss of sparsity more than offsets the reduced operation count.

In this paper, we introduce two modiﬁcations to the original Winograd-based convolution algorithm to
eliminate this problem. First, we move the ReLU operation to be after the Winograd transform to also
make the activations sparse at the point where the multiplies are performed. Second, we prune the
weights after (rather than before) they are transformed. Thus, the weights are sparse when the element-
wise multiply is performed — reducing the operation count. Together, these two modiﬁcations enable
the gains of Winograd’s algorithm and of exploiting sparsity to be combined. We open-source our
code and models at https://github.com/xingyul/Sparse-Winograd-CNN.

1

Published as a conference paper at ICLR 2018

Figure 1: Combining Winograd convolution with sparse weights and activations. (a) Conventional
Winograd-based convolution ﬁlls in the zeros in both the weights and activations. (b) Pruning the
4 × 4 transformed kernel restores sparsity to the weights. (c) Our proposed Winograd-ReLU CNN.
Moving the ReLU layer after Winograd transformation also restores sparsity to the activations.

2 RELATED WORK

Linear Algebra property in Convolution: Previous research proposes using the linear algebra
property of convolution to reduce the number of multiplies by trading additions for multiplies. Cong
& Xiao (2014) convert convolution into matrix multiplies and utilize the linear algebra property at
the sub-matrix block level. This approach achieves a 47% saving in multiplies. Lavin (2015) exploits
the element-level linear algebra property of convolution, i.e. Winograd’s minimal ﬁltering algorithm
(Winograd, 1980). This approach reduces the number of multiplies by 2.25× to 4×, depending on
the image patch size used in the algorithm. Winograd’s algorithm is also used in a state-of-the-art
deep learning library, cuDNN (Chetlur et al., 2014), to improve computation efﬁciency.

Model Compression: Model compression reduces the number of multiplies of CNNs by pruning
network parameters (LeCun et al., 1990; Hassibi et al., 1993) and exploiting weight sparsity. Han
et al. (2015; 2016b) proposed learning the sparsity pattern of network weights by eliminating weights
whose absolute value is less than an empirical threshold. This approach can prune the convolutional
layers of the model to only 30% − 50% of the original size and reduce the number of multiplies
required. Liu et al. (2017) ﬁrst proposed pruning and re-training the weights in Winograd domain for
conventional Winograd convolution. Li et al. (2017) later showed promising results on large datasets
and reported 90% sparsity in the Winograd parameters of AlexNet with less than 0.1% accuracy loss.

Dynamic Activation Sparsity: The ReLU non-linearity sets activations whose values are negative to
zero, causing dynamic sparsity in activations. Model compression can work in tandem with dynamic
activation sparsity and reduce multiplication workload. Han et al. (2015) showed that exploiting
sparsity of both weights and activations can reduce the number of multiplies by 4 − 11×. Huan
et al. (2016) further proposed to manually set a small positive ReLU threshold at test time to exploit
greater sparsity in activation without losing testing accuracy. Research in novel architectures also
led to optimizations for deep learning accelerators to exploit the sparsity in activations. Han et al.
(2016a) proposed using a Leading Non-zero Detection unit (LNZD) for their fully-connected layer
accelerator to efﬁciently skip zeros in input activations. Albericio et al. (2016) proposed a similar
mechanism for a convolution layer accelerator.

2

Published as a conference paper at ICLR 2018

3 SPARSE WINOGRAD CONVOLUTION

We ﬁrst introduce the conventional Winograd convolution and show how sparsity of weights or
activations is lost during the dataﬂow of the algorithm. We then present the novel Winograd-ReLU
CNN architecture. It preserves sparsity in both weights and activations before multiplies are performed
and signiﬁcantly reduces the computational workload.

3.1 SPARSITY IN CONVENTIONAL SPATIAL AND WINOGRAD CNN

The basic block of the conventional Winograd convolution algorithm works on an p×p patch (denoted
by d) extracted with stride of (p − 2) × (p − 2) from an H × W input feature map. With “valid”
padding, the p×p patch is convolved with a 3×3 kernel (denoted by g) to produce an (p−2)×(p−2)
output patch (denoted by S). The output patches are assembled into an output feature map.

Input activation patch d and kernel g (spatial-domain activation and weights) are transformed using
matrices B and G to be BT dB and GgGT (Winograd-domain activation and weights) respectively,
both with shape p × p. After element-wise product in Winograd-domain, the output activation S is
obtained using matrix A (equation (1)). Matrices B, G and A are p-speciﬁc. When p = 4, B and A
consists of 1, −1 and 0, so the multiplication with B and A only requires addition. It reduces the
number of multiplies from 9(p − 2)2 to p2. Lavin (2015) gives details of the algorithm.

S = AT [[GgGT ] (cid:12) [BT dB]]A

Spatial Baseline Network: When using a “vanilla” pruned network, as introduced by Han et al.
(2015), a ReLU non-linear operation is performed by the previous layer on spatial-domain input d
and spatial-domain weight g is pruned. The output activation patch S is obtained from equation (2).
This is illustrated in Figure 1(a) for p = 4. Though g and d may both be sparse due to pruning and
ReLU respectively, the element-wise multiply is dense due to G(·)GT and B(·)BT transformations
ﬁlling the spatial-domain zeros. Sparsity does not reduce the number of multiplies in Winograd’s
algorithm.

S = AT [[GPrune(g)GT ] (cid:12) [BT ReLU(d)B]]A

Winograd Native Pruned Network: When using the Winograd-domain pruned network introduced
by Liu et al. (2017) and Li et al. (2017), the spatial-domain input d is ReLU-ed by the previous layer
while the Winograd-domain weight GgGT is pruned. The output activation patch S is obtained from
equation (3). The algorithm when p = 4 is also illustrated in Figure 1(b). Though Winograd-domain
weights are sparse due to pruning, Winograd-domain activations are still dense due to B(·)BT
transforms. The sparsity in spatial activations due to ReLU does not reduce the number of multiplies.

S = AT [[Prune(GgGT )] (cid:12) [BT ReLU(d)B]]A

3.2 WINOGRAD-RELU CNN

To address the above problems, we introduce the Winograd-ReLU Network. Instead of applying
ReLU to the activations in the spatial domain, we apply ReLU to the activations in the Winograd
domain, as in equation (4) and Figure 1(c). The ReLU operation zeros all negative transformed
activations, reducing the number of multiplies in the Winograd domain.

S = AT [[Prune(GgGT )] (cid:12) [ReLU(BT dB)]]A

In the Winograd-ReLU CNN, we eliminate the spatial-domain kernel entirely. Because this ReLU is
really associated with the previous layer, we perform this transformed ReLU starting with the second
layer. We point out that the proposed new CNN architecture is not mathematically equivalent to the
vanilla CNN nor the conventional Winograd CNN. Due to the change of network architecture, the
training and pruning should also be changed. Our method operates in three phases: dense training,
pruning, and retraining.

Dense training: we train a dense p × p kernel directly in the transform domain. The transformed ker-
nel is initialized and trained directly by back-propagation through the inverse transform — eliminating
the need to maintain a kernel in the spatial domain or to transform a spatial kernel.

(1)

(2)

(3)

(4)

3

Published as a conference paper at ICLR 2018

Pruning: we prune the transformed kernel by computing the threshold t required to achieve a desired
pruning rate r and setting all weights whose absolute value less than t to zero. In our experiments,
we used the same r for all Winograd-ReLU layers. Because sensitivity varies from layer to layer, we
expect that better performance could be achieved by varying the pruning rate ri for each layer i.

Re-training: we re-train the model using a “sparsity mask” to force the weights that were pruned
to remain zero. The sparsity mask is computed during the pruning step and is kept constant during
re-training. The gradient of the network’s loss, L, with respect to the input activation and Winograd
weights can be derived using the chain rule. Equation (5) shows the calculation of input activation
gradient ∇dL and Winograd weight gradient ∇GgGT L using the loss gradient passed from upstream
layers ∇SL.

∇GgGT L = (A∇SLAT ) (cid:12) (BT dB) (cid:12) mask
∇dL = B[(A∇SLAT ) (cid:12) (GgGT ) (cid:12) mask]BT

(5)

4 EXPERIMENTS

We applied the methodology described above to several different CNNs on different datasets. The
original network models are chosen such that the majority of the convolution layers have 3 × 3
kernels. This ensures the largest portion of layers can be converted to Winograd convolution layers
and ReLU be put in Winograd domain. We used image classiﬁcation datasets of different scales:
CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ImageNet 2012 (Russakovsky et al., 2015).
For network architectures, we chose VGG-nagadomi (Nagadomi, 2014), ConvPool-CNN-C model
(Springenberg et al., 2015) and a variation of ResNet-18 (He et al., 2016a) respectively on three
datasets. Using the Tensorﬂow (Abadi et al., 2016) framework, we trained the spatial baseline CNN,
corresponding conventional Winograd CNN, and Winograd-ReLU CNN models from scratch. Then
the three models are iteratively pruned and re-trained. For a speciﬁc dataset, we used the same data
augmentation for the training of all models on the dataset.

4.1 CIFAR-10

We used VGG-nagadomi (Nagadomi, 2014) on the CIFAR-10 dataset. VGG-nagadomi is a light-
weight version of VGGNet (Simonyan & Zisserman, 2015). It contains 8 convolution layers with 3×3
kernels. The best reported validation set accuracy it achieves on CIFAR-10 is 93.31% (Nagadomi,
2014). We trained three models from scratch. The corresponding conventional Winograd CNN
model and Winograd-ReLU CNN model can achieve validation set accuracy of 93.30% and 93.43%
respectively. The ﬁrst convolution layer is most sensitive to pruning and we set its density to a
constant of 80%. We iteratively pruned and re-trained other convolution layers with density from
80% down to 20%.

Figure 2: Test accuracy vs density for the three models in Figure 1 on VGG-nagadomi.

Figure 2 shows test accuracy as a function of weight density for the three models. The two baseline
models can only be pruned to 60% density before accuracy falls signiﬁcantly (> 0.1%). Our
Winograd-ReLU CNN model can be pruned to 40% density before falling to the same accuracy.

Table 1 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 5.1×
and 3.7× 1 respectively. Pruning the Winograd-ReLU model reduces the convolution layer workload
by 13.3×, a 2.6× and 3.6× improvement respectively over the two baselines. The improvement of
overall network workload reduction is 2.2× and 3.0× respectively over two baselines.

1All Winograd CNN model workload reduction results include the intrinsic 2.25× reduction.

4

Published as a conference paper at ICLR 2018

Table 1: VGG-nagadomi weight and activation density on CIFAR-10.
Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd-ReLU CNN
Pruning (ours)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv7
conv total
overall

Density
Weight Act
80% 100%
60% 50%
60% 19%
60% 37%
60% 18%
60% 26%
60% 24%
60% 35%

-
-

-
-

Workload

80%
30%
12%
22%
11%
15%
14%
21%
20%(5.1×)
21%(4.7×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%

80%
27%
27%
27%
27%
27%
27%
27%
27%(3.7×)
29%(3.5×)

-
-

-
-

Density
Weight Act
80% 100%
40% 46%
40% 39%
40% 40%
40% 40%
40% 38%
40% 35%
40% 36%

-
-

-
-

Workload

80%
8%
7%
7%
7%
7%
6%
6%
8%(13.3×)
10%(10.4×)

4.2 CIFAR-100

We used the ConvPool-CNN-C (Springenberg et al., 2015) model on on the CIFAR-100 dataset.
ConvPool-CNN-C contains 9 convolution layers, out of which 7 have 3 × 3 kernels. We trained three
models from scratch. The spatial baseline CNN model and conventional Winograd CNN model can
achieve single model validation accuracy of 69.34% and 69.32% respectively. The corresponding
Winograd-ReLU network model can achieve validation set accuracy of 69.75%. We pruned the ﬁrst
convolution layer to a constant density of 80%. We iteratively pruned and re-trained the other layers
to densities from 80% down to 20%.

Figure 3: Test accuracy vs density for the three models in Figure 1 on ConvPool-CNN-C.

Figure 3 shows the accuracy as a function of density for spatial baseline and Winograd-ReLU models.
The spatial-baseline and Winograd-ReLU models can be pruned to 60% density without signiﬁcant
(> 0.1%) loss of accuracy. In contrast, the conventional Winograd CNN model can only be pruned to
70% density. At a given density, the Winograd-ReLU model has the highest accuracy.

Table 2: ConvPool-CNN-C weight and activation density on CIFAR-100.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Density
Weight Act
80% 100%
60% 53%
60% 52%
60% 77%
60% 35%
60% 32%
60% 56%

-
-

-
-

Workload

80%
33%
32%
46%
21%
19%
33%
29%(3.5×)
30%(3.4×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%

80%
31%
31%
31%
31%
31%
31%
31%(3.2×)
32%(3.1×)

-
-

-
-

Winograd-ReLU CNN
Pruning (ours)

Density
Weight Act
80% 100%
60% 54%
60% 53%
60% 54%
60% 54%
60% 42%
60% 43%

-
-

-
-

Workload

80%
14%
14%
14%
14%
11%
11%
14%(7.1×)
15%(6.8×)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv total
overall

Table 2 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 3.5×
and 3.2× respectively. Pruning the Winograd-ReLU model reduces the workload by 7.1×, a 2.1×
and 2.2× improvement respectively over the two baselines. The improvement of overall network
workload reduction is 2.0× and 2.2× respectively over two baselines.

5

Published as a conference paper at ICLR 2018

4.3

IMAGENET

We used a variation of the full pre-activation version (He et al., 2016b) of ResNet-18 (He et al., 2016a)
on the ImageNet 2012 dataset. We used this version because it performs the best among various
ResNet versions and its structure suits our Winograd-ReLU approach – its ReLU units are located
before convolutions in the residual modules. The variation is different from original ResNet-18
by replacing all 2 × 2-stride 3 × 3 convolution layers with a 2 × 2 max-pooling layer followed by
a 1 × 1-stride 3 × 3 convolution layer. Such difference ensure most of convolution layers can be
converted to Winograd convolution layer. Another difference is that it doesn’t have the last max
pooling layer so the last group of residual modules has spatial size of 14 × 14, in order to keep the
spatial size even instead of odd. This setting suits Winograd convolution with p = 4 best in that even
spatial size is required for even p values.

We trained three models from scratch. For single model and single central 224 × 224 cropping, the
spatial baseline CNN model and conventional Winograd CNN model can achieve single model top-
1/top-5 validation accuracy of 66.67%/87.42% and 66.84%/87.47%. The corresponding Winograd-
ReLU CNN model can achieve validation top-1/top-5 accuracy of 66.78%/87.43%. We kept the ﬁrst
convolution layer intact. We iteratively pruned other convolution layers with density rate from 80%
down to 10%.

Figure 4: Top-1 and top-5 validation accuracy vs density for three models on a variation of ResNet-18.

Figure 4 shows the accuracy as a function of density for three models. The spatial baseline CNN
model and conventional Winograd CNN model can be pruned to 60% and 50% respectively without
signiﬁcant (> 0.1%) loss of top-1 or top-5 accuracy. The Winograd-ReLU model can be pruned
much further, to 30%/35% density without signiﬁcant (> 0.1%) loss of top-1/top-5 accuracy. At
these densities, top-1 accuracies are 66.53%, 66.45% and 66.61% for three models respectively,
with a dense spatial baseline of 66.67%; top-5 accuracies are 87.29%, 87.30% and 87.35% for three
models respectively, with a dense spatial baseline of 87.42%.

Table 3 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning the two baseline models reduces the convolution layer workload by
5.1× and 4.5× respectively. Pruning the Winograd-ReLU model reduces the workload by 13.2×,
a 2.6× and 2.9× improvement respectively over the two baselines. The improvement of overall
network workload reduction is 2.3× and 2.6× respectively over two baselines.

5 DISCUSSION

In this section, we summarize the experiment results and compare the three models in terms of a)
weight and activation dimensions and b) the dynamic density of activations. We then visualize the
kernels to illustrate the pattern of the proposed Winograd-ReLU model kernel.

6

Published as a conference paper at ICLR 2018

Table 3: ResNet-18 variation weight and activation density on ImageNet.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd CNN Native
Pruning (Li et al., 2017)
Density

Winograd-ReLU CNN
Pruning (ours)

Layer

res2a_2a
res2a_2b
res2b_2a
res2b_2b
res3a_2a
res3a_2b
res3b_2a
res3b_2b
res4a_2a
res4a_2b
res4b_2a
res4b_2b
res5a_2a
res5a_2b
res5b_2a
res5b_2b
conv total
overall

Density
Weight Act
60% 90%
60% 64%
60% 71%
60% 53%
60% 94%
60% 35%
60% 47%
60% 29%
60% 88%
60% 23%
60% 36%
60% 21%
60% 45%
60% 14%
60% 16%
60% 12%

-
-

-
-

Workload

54%
39%
43%
32%
56%
21%
28%
17%
53%
14%
22%
13%
27%
9%
10%
7%
20%(5.1×)
21%(4.7×)

Act
Weight
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%

-
-

-
-

Workload

22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%(4.5×)
24%(4.2×)

Density
Weight Act
35% 48%
35% 50%
35% 50%
35% 50%
35% 49%
35% 50%
35% 49%
35% 49%
35% 49%
35% 50%
35% 50%
35% 49%
35% 50%
35% 48%
35% 48%
35% 49%

-
-

-
-

Workload

8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
7%
7%
8%
8%(13.2×)
9%(10.8×)

5.1 WEIGHT AND ACTIVATION DIMENSION

In a convolutional neural network, a convolution-ReLU pair acts as a classiﬁer on a spatial patch of
an input feature. The dimension of the space being classiﬁed is the total number of elements passing
through the ReLU layer. The decision boundaries of the classiﬁer are determined by the weights.
Insufﬁcient non-zero weights or insufﬁcient activations results in too simple a decision boundary and
causes accuracy loss.

Experimental results have shown that Winograd-ReLU CNN can reach the same accuracy as both
vanilla spatial baseline CNN and conventional Winograd CNN without pruning, and that Winograd-
ReLU CNN is more robust to aggressive pruning. In this subsection we provide an explanation for
the latter observation from the aspect of activation and weight dimensions. We provide a summary on
dimensions in Table 4.

Table 4: Comparison of ReLU dimension and weight dimension in three types of networks. Assume
the convolution-ReLU pair operates on input activation of spatial size of H × W and the number of
input and output channels are C and K respectively.

Spatial Baseline
CNN (Han et al., 2015)

Weight dimension K × C × 3 × 3
ReLU dimension H × W × K

Winograd native pruned
CNN (Li et al., 2017)
K × C × p × p
H × W × K

Winograd-ReLU
CNN (ours)
K × C × p × p
p−2 H × p

p

p−2 W × K

Weight Dimension Increase: Compared to a vanilla 3 × 3 CNN, a conventional Winograd CNN
uses (p × p)-dimension Winograd kernels. Training a Winograd CNN from scratch allows higher
dimension (p × p) for Winograd kernels, and a Winograd-ReLU CNN shares these characteristics.

ReLU Dimension Increase: A major difference between our Winograd-ReLU CNN and conven-
tional Winograd CNN is that the ReLU layers in Winograd-ReLU CNN have higher dimension. The
dimension increase comes from the Winograd transformation extracting p × p feature patches with
(p − 2) × (p − 2) strides from H × W activations. The total number of extracted Winograd-domain
p−2 W , an increase from the spatial domain’s H × W .
activations is
We can see that our Winograd-ReLU architecture has an advantage on the dimensions of weights
and activations over other two models. This means Winograd-ReLU CNNs classify on a higher
dimension with more complex decision boundaries, which forms a stronger representational ability in
high dimensional image feature space.

p−2 H × p

p

7

Published as a conference paper at ICLR 2018

5.2 DYNAMIC ACTIVATION DENSITY

As is shown in the ImageNet results in the previous section, dynamic activation density of spatial
baseline CNN model varies signiﬁcantly among layers. Layers at earlier stages typically have higher
density in activation than later stages. In Winograd-ReLU CNN model, the dynamic activation
densities vary little among layers and are all close to 50%.

An explanation is that the nature of image convolution ensures activations d to be spatially smooth.
Thus, due to the structure of matrix B (Lavin, 2015), 15 of 16 elements in the 4 × 4 matrix of
Winograd-domain activation patch BT · d · B have a mean close to zero. This beneﬁts classiﬁcation
within a patch since ReLU layer is most powerful when half of activations are positive.

5.3 KERNEL VISUALIZATION

We visualize the kernels of the proposed Winograd-ReLU model. We selected the ﬁrst 6 input and
output channels of layer res2a_2a of ResNet-18 at three different pruning densities. Unlike spatial
domain kernels, Winograd-ReLU kernels do not show clear physical meanings such as edge or corner
detectors. However, we observe that values of the (2, 2) elements (from top-left, 1-based indices) in
each kernel are typically distinct in a kernel and are most likely kept during aggressive pruning. A
possible reason for this is that the (2, 2) elements of Winograd-domain activation in a 4 × 4 patch
are special: interested readers can calculate BT · d · B symbolically and will realize that (2, 2)
elements are the only elements that are transformed with a linear combination of only adding and no
subtraction. In a spatially smooth activation patch, this means the (2, 2) elements are the ones and
the only ones with a non-zero mean.

Figure 5: Kernels of ResNet-18 Winograd-ReLU model res2a_2a layer with density of 100% (left,
87.43% top-5 accuracy), 35% (middle, 87.36% top-5 accuracy) and 15% (right, 86.57% top-5
accuracy). Positive, negative and pruned weights are in red, blue and black respectively.

6 CONCLUSION AND FUTURE WORK

We have shown that we can combine the computational savings of sparse weights and activations with
the savings of the Winograd transform by making two modifcations to conventional CNNs. To make
the weights sparse at the point of multiplication, we train and prune the weights in the transform
domain. This simple approach does not reduce the workload with respect to spatial pruning, though,
so we move the ReLU non-linear operation after the Winograd transform to make the activations
sparse at the point of multiplication. Moving ReLU to the Winograd domain also allows the weights
to be more aggressively pruned without losing accuracy. With a 2 × 2 output patch (p = 4), the
net result is a reduction of 10.4×, 6.8× and 10.8× in computation on three datasets: CIFAR-10,
CIFAR-100 and ImageNet.

We plan to extend this work in the following directions. First, we expect that even greater savings on
computation can be realized by using larger patch sizes (e.g., p = 6), and there may be beneﬁt in
exploring different Winograd transformation matrices (B,G and A). Second, we expect that using
different pruning rates ri for each network layer will help maintain accuracy and improve overall
workload reduction. Finally, we expect that combining our Winograd-ReLU network with other
network simpliﬁcation techniques, e.g. quantization of weights and/or activations (Courbariaux et al.,
2015; Lin et al., 2016; Rastegari et al., 2016), will reduce the energy of computation even further.

8

Published as a conference paper at ICLR 2018

REFERENCES

Martín Abadi et al. Tensorﬂow: A system for large-scale machine learning. In Proceedings of the

12th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2016.

Jorge Albericio, Patrick Judd, Tayler Hetherington, Tor Aamodt, Natalie Enright Jerger, and Andreas
Moshovos. Cnvlutin: Ineffectual-neuron-free Deep Neural Network Computing. In Proceedings of
the 43rd International Symposium on Computer Architecture (ISCA), 2016.

Sharan Chetlur, Cliff Woolley, Philippe Vandermersch, Jonathan Cohen, John Tran, Bryan Catanzaro,
and Evan Shelhamer. cuDNN: Efﬁcient primitives for deep learning. CoRR, abs/1410.0759, 2014.
URL http://arxiv.org/abs/1410.0759.

Jason Cong and Bingjun Xiao. Minimizing computation in convolutional neural networks.

In

International Conference on Artiﬁcial Neural Networks (ICANN), pp. 281–290. Springer, 2014.

Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre David. Binaryconnect: Training deep neural
networks with binary weights during propagations. In Advances in neural information processing
systems (NIPS), 2015.

Song Han, Jeff Pool, John Tran, and William J. Dally. Learning both weights and connections for
efﬁcient neural networks. In Advances in neural information processing systems (NIPS), 2015.

Song Han, Xingyu Liu, Huizi Mao, Jing Pu, Ardavan Pedram, Mark A. Horowitz, and William J.
Dally. EIE: Efﬁcient inference engine on compressed deep neural network. In Proceedings of the
43rd International Symposium on Computer Architecture (ISCA), 2016a.

Song Han, Huizi Mao, and William J. Dally. Deep compression: Compressing deep neural networks
with pruning, trained quantization and huffman coding. In International Conference on Learning
Representations (ICLR), 2016b.

Babak Hassibi, David G Stork, et al. Second order derivatives for network pruning: Optimal brain

surgeon. Advances in Neural Information Processing Systems (NIPS), pp. 164–164, 1993.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016a.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual
networks. In European Conference on Computer Vision (ECCV), pp. 630–645. Springer, 2016b.

Yuxiang Huan, Yifan Qin, Yantian You, Lirong Zheng, and Zhuo Zou. A multiplication reduction
technique with near-zero approximation for embedded learning in IoT devices. In System-on-Chip
Conference (SOCC), 29th IEEE International, pp. 102–107. IEEE, 2016.

Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. 2009.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classiﬁcation with deep convolu-
tional neural networks. In Advances in neural information processing systems (NIPS), 2012.

Andrew Lavin. Fast algorithms for convolutional neural networks. CoRR, abs/1509.09308, 2015.

URL http://arxiv.org/abs/1509.09308.

Yann LeCun, John S Denker, and Sara A Solla. Optimal brain damage. In Advances in neural

information processing systems (NIPS), pp. 598–605, 1990.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to

document recognition. Proceedings of the IEEE, 86(11):2278–2324, 1998.

Sheng R. Li, Jongsoo Park, and Ping Tak Peter Tang. Enabling sparse Winograd convolution by native
pruning. CoRR, abs/1702.08597, 2017. URL http://arxiv.org/abs/1702.08597.

Zhouhan Lin, Matthieu Courbariaux, Roland Memisevic, and Yoshua Bengio. Neural networks with
few multiplications. In Proceedings of International Conference on Learning Representations
(ICLR), 2016.

9

Published as a conference paper at ICLR 2018

Xingyu Liu, Song Han, Huizi Mao, and William J. Dally. Efﬁcient sparse-winograd convolutional
neural networks. International Conference on Learning Representations (ICLR) Workshop, 2017.

Nagadomi.

Code for kaggle-cifar10 competition. 5th place.

https://github.com/

nagadomi/kaggle-cifar10-torch7, 2014.

Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. XNOR-Net: Imagenet
classiﬁcation using binary convolutional neural networks. In European Conference on Computer
Vision (ECCV), 2016.

Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang,
Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. ImageNet
Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV),
2015.

Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. In Proceedings of International Conference on Learning Representations (ICLR),
2015.

Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, and Martin Riedmiller. Striving for
simplicity: The all convolutional net. International Conference on Learning Representations
(ICLR) Workshop, 2015.

Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott E. Reed, Dragomir Anguelov,
Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 1–9, June 2015.

Shmuel Winograd. Arithmetic complexity of computations, volume 33. Siam, 1980.

10

8
1
0
2
 
b
e
F
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
7
6
3
6
0
.
2
0
8
1
:
v
i
X
r
a

Published as a conference paper at ICLR 2018

EFFICIENT SPARSE-WINOGRAD
CONVOLUTIONAL NEURAL NETWORKS

Xingyu Liu∗, Jeff Pool†, Song Han‡ §, William J. Dally∗†
∗ Stanford University, † NVIDIA, ‡ Massachusetts Institute of Technology, § Google Brain
{xyl, dally}@stanford.edu

ABSTRACT

Convolutional Neural Networks (CNNs) are computationally intensive, which
limits their application on mobile devices. Their energy is dominated by the
number of multiplies needed to perform the convolutions. Winograd’s minimal
ﬁltering algorithm (Lavin, 2015) and network pruning (Han et al., 2015) can reduce
the operation count, but these two methods cannot be directly combined – applying
the Winograd transform ﬁlls in the sparsity in both the weights and the activations.
We propose two modiﬁcations to Winograd-based CNNs to enable these methods
to exploit sparsity. First, we move the ReLU operation into the Winograd domain
to increase the sparsity of the transformed activations. Second, we prune the
weights in the Winograd domain to exploit static weight sparsity. For models on
CIFAR-10, CIFAR-100 and ImageNet datasets, our method reduces the number of
multiplications by 10.4×, 6.8× and 10.8× respectively with loss of accuracy less
than 0.1%, outperforming previous baselines by 2.0×-3.0×. We also show that
moving ReLU to the Winograd domain allows more aggressive pruning.

1

INTRODUCTION

Deep Convolutional Neural Networks (CNNs) have shown signiﬁcant improvement in many machine
learning applications. However, CNNs are compute-limited. Their performance is dominated by the
number of multiplies needed to perform the convolutions. Moreover, the computational workload
of CNNs continues to grow over time. LeCun et al. (1998) proposed a CNN model with less than
2.3 × 107 multiplies for handwritten digit classiﬁcation. Later, Krizhevsky et al. (2012) developed
AlexNet, an ImageNet-winning CNN with more than 1.1 × 109 multiplies. In 2014, ImageNet-
winning and runner up CNNs increased the number of multiplies to 1.4 × 109 (Szegedy et al., 2015)
and 1.6 × 1010 (Simonyan & Zisserman, 2015) respectively. Despite the powerful representational
ability of large scale CNNs, their computational workload prohibits deployment on mobile devices.

Two research directions have been explored to address the problem. Lavin (2015) proposed using
Winograd’s minimal ﬁltering algorithm (Winograd, 1980) to reduce the number of multiplies needed
to perform 3 × 3 kernel convolutions. On the other end, pruning the model (Han et al., 2015; 2016b)
and exploiting the dynamic sparsity of activations due to ReLU also reduces the required multiplies.

Unfortunately, the above two directions are not compatible: the Winograd transformation ﬁlls in the
zeros in both the weights and the activations (Figure 1(a)) – eliminating the gain from exploiting
sparsity. Thus, for a pruned network, Winograd’s algorithm actually increases the number of
multiplies; the loss of sparsity more than offsets the reduced operation count.

In this paper, we introduce two modiﬁcations to the original Winograd-based convolution algorithm to
eliminate this problem. First, we move the ReLU operation to be after the Winograd transform to also
make the activations sparse at the point where the multiplies are performed. Second, we prune the
weights after (rather than before) they are transformed. Thus, the weights are sparse when the element-
wise multiply is performed — reducing the operation count. Together, these two modiﬁcations enable
the gains of Winograd’s algorithm and of exploiting sparsity to be combined. We open-source our
code and models at https://github.com/xingyul/Sparse-Winograd-CNN.

1

Published as a conference paper at ICLR 2018

Figure 1: Combining Winograd convolution with sparse weights and activations. (a) Conventional
Winograd-based convolution ﬁlls in the zeros in both the weights and activations. (b) Pruning the
4 × 4 transformed kernel restores sparsity to the weights. (c) Our proposed Winograd-ReLU CNN.
Moving the ReLU layer after Winograd transformation also restores sparsity to the activations.

2 RELATED WORK

Linear Algebra property in Convolution: Previous research proposes using the linear algebra
property of convolution to reduce the number of multiplies by trading additions for multiplies. Cong
& Xiao (2014) convert convolution into matrix multiplies and utilize the linear algebra property at
the sub-matrix block level. This approach achieves a 47% saving in multiplies. Lavin (2015) exploits
the element-level linear algebra property of convolution, i.e. Winograd’s minimal ﬁltering algorithm
(Winograd, 1980). This approach reduces the number of multiplies by 2.25× to 4×, depending on
the image patch size used in the algorithm. Winograd’s algorithm is also used in a state-of-the-art
deep learning library, cuDNN (Chetlur et al., 2014), to improve computation efﬁciency.

Model Compression: Model compression reduces the number of multiplies of CNNs by pruning
network parameters (LeCun et al., 1990; Hassibi et al., 1993) and exploiting weight sparsity. Han
et al. (2015; 2016b) proposed learning the sparsity pattern of network weights by eliminating weights
whose absolute value is less than an empirical threshold. This approach can prune the convolutional
layers of the model to only 30% − 50% of the original size and reduce the number of multiplies
required. Liu et al. (2017) ﬁrst proposed pruning and re-training the weights in Winograd domain for
conventional Winograd convolution. Li et al. (2017) later showed promising results on large datasets
and reported 90% sparsity in the Winograd parameters of AlexNet with less than 0.1% accuracy loss.

Dynamic Activation Sparsity: The ReLU non-linearity sets activations whose values are negative to
zero, causing dynamic sparsity in activations. Model compression can work in tandem with dynamic
activation sparsity and reduce multiplication workload. Han et al. (2015) showed that exploiting
sparsity of both weights and activations can reduce the number of multiplies by 4 − 11×. Huan
et al. (2016) further proposed to manually set a small positive ReLU threshold at test time to exploit
greater sparsity in activation without losing testing accuracy. Research in novel architectures also
led to optimizations for deep learning accelerators to exploit the sparsity in activations. Han et al.
(2016a) proposed using a Leading Non-zero Detection unit (LNZD) for their fully-connected layer
accelerator to efﬁciently skip zeros in input activations. Albericio et al. (2016) proposed a similar
mechanism for a convolution layer accelerator.

2

Published as a conference paper at ICLR 2018

3 SPARSE WINOGRAD CONVOLUTION

We ﬁrst introduce the conventional Winograd convolution and show how sparsity of weights or
activations is lost during the dataﬂow of the algorithm. We then present the novel Winograd-ReLU
CNN architecture. It preserves sparsity in both weights and activations before multiplies are performed
and signiﬁcantly reduces the computational workload.

3.1 SPARSITY IN CONVENTIONAL SPATIAL AND WINOGRAD CNN

The basic block of the conventional Winograd convolution algorithm works on an p×p patch (denoted
by d) extracted with stride of (p − 2) × (p − 2) from an H × W input feature map. With “valid”
padding, the p×p patch is convolved with a 3×3 kernel (denoted by g) to produce an (p−2)×(p−2)
output patch (denoted by S). The output patches are assembled into an output feature map.

Input activation patch d and kernel g (spatial-domain activation and weights) are transformed using
matrices B and G to be BT dB and GgGT (Winograd-domain activation and weights) respectively,
both with shape p × p. After element-wise product in Winograd-domain, the output activation S is
obtained using matrix A (equation (1)). Matrices B, G and A are p-speciﬁc. When p = 4, B and A
consists of 1, −1 and 0, so the multiplication with B and A only requires addition. It reduces the
number of multiplies from 9(p − 2)2 to p2. Lavin (2015) gives details of the algorithm.

S = AT [[GgGT ] (cid:12) [BT dB]]A

Spatial Baseline Network: When using a “vanilla” pruned network, as introduced by Han et al.
(2015), a ReLU non-linear operation is performed by the previous layer on spatial-domain input d
and spatial-domain weight g is pruned. The output activation patch S is obtained from equation (2).
This is illustrated in Figure 1(a) for p = 4. Though g and d may both be sparse due to pruning and
ReLU respectively, the element-wise multiply is dense due to G(·)GT and B(·)BT transformations
ﬁlling the spatial-domain zeros. Sparsity does not reduce the number of multiplies in Winograd’s
algorithm.

S = AT [[GPrune(g)GT ] (cid:12) [BT ReLU(d)B]]A

Winograd Native Pruned Network: When using the Winograd-domain pruned network introduced
by Liu et al. (2017) and Li et al. (2017), the spatial-domain input d is ReLU-ed by the previous layer
while the Winograd-domain weight GgGT is pruned. The output activation patch S is obtained from
equation (3). The algorithm when p = 4 is also illustrated in Figure 1(b). Though Winograd-domain
weights are sparse due to pruning, Winograd-domain activations are still dense due to B(·)BT
transforms. The sparsity in spatial activations due to ReLU does not reduce the number of multiplies.

S = AT [[Prune(GgGT )] (cid:12) [BT ReLU(d)B]]A

3.2 WINOGRAD-RELU CNN

To address the above problems, we introduce the Winograd-ReLU Network. Instead of applying
ReLU to the activations in the spatial domain, we apply ReLU to the activations in the Winograd
domain, as in equation (4) and Figure 1(c). The ReLU operation zeros all negative transformed
activations, reducing the number of multiplies in the Winograd domain.

S = AT [[Prune(GgGT )] (cid:12) [ReLU(BT dB)]]A

In the Winograd-ReLU CNN, we eliminate the spatial-domain kernel entirely. Because this ReLU is
really associated with the previous layer, we perform this transformed ReLU starting with the second
layer. We point out that the proposed new CNN architecture is not mathematically equivalent to the
vanilla CNN nor the conventional Winograd CNN. Due to the change of network architecture, the
training and pruning should also be changed. Our method operates in three phases: dense training,
pruning, and retraining.

Dense training: we train a dense p × p kernel directly in the transform domain. The transformed ker-
nel is initialized and trained directly by back-propagation through the inverse transform — eliminating
the need to maintain a kernel in the spatial domain or to transform a spatial kernel.

(1)

(2)

(3)

(4)

3

Published as a conference paper at ICLR 2018

Pruning: we prune the transformed kernel by computing the threshold t required to achieve a desired
pruning rate r and setting all weights whose absolute value less than t to zero. In our experiments,
we used the same r for all Winograd-ReLU layers. Because sensitivity varies from layer to layer, we
expect that better performance could be achieved by varying the pruning rate ri for each layer i.

Re-training: we re-train the model using a “sparsity mask” to force the weights that were pruned
to remain zero. The sparsity mask is computed during the pruning step and is kept constant during
re-training. The gradient of the network’s loss, L, with respect to the input activation and Winograd
weights can be derived using the chain rule. Equation (5) shows the calculation of input activation
gradient ∇dL and Winograd weight gradient ∇GgGT L using the loss gradient passed from upstream
layers ∇SL.

∇GgGT L = (A∇SLAT ) (cid:12) (BT dB) (cid:12) mask
∇dL = B[(A∇SLAT ) (cid:12) (GgGT ) (cid:12) mask]BT

(5)

4 EXPERIMENTS

We applied the methodology described above to several different CNNs on different datasets. The
original network models are chosen such that the majority of the convolution layers have 3 × 3
kernels. This ensures the largest portion of layers can be converted to Winograd convolution layers
and ReLU be put in Winograd domain. We used image classiﬁcation datasets of different scales:
CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ImageNet 2012 (Russakovsky et al., 2015).
For network architectures, we chose VGG-nagadomi (Nagadomi, 2014), ConvPool-CNN-C model
(Springenberg et al., 2015) and a variation of ResNet-18 (He et al., 2016a) respectively on three
datasets. Using the Tensorﬂow (Abadi et al., 2016) framework, we trained the spatial baseline CNN,
corresponding conventional Winograd CNN, and Winograd-ReLU CNN models from scratch. Then
the three models are iteratively pruned and re-trained. For a speciﬁc dataset, we used the same data
augmentation for the training of all models on the dataset.

4.1 CIFAR-10

We used VGG-nagadomi (Nagadomi, 2014) on the CIFAR-10 dataset. VGG-nagadomi is a light-
weight version of VGGNet (Simonyan & Zisserman, 2015). It contains 8 convolution layers with 3×3
kernels. The best reported validation set accuracy it achieves on CIFAR-10 is 93.31% (Nagadomi,
2014). We trained three models from scratch. The corresponding conventional Winograd CNN
model and Winograd-ReLU CNN model can achieve validation set accuracy of 93.30% and 93.43%
respectively. The ﬁrst convolution layer is most sensitive to pruning and we set its density to a
constant of 80%. We iteratively pruned and re-trained other convolution layers with density from
80% down to 20%.

Figure 2: Test accuracy vs density for the three models in Figure 1 on VGG-nagadomi.

Figure 2 shows test accuracy as a function of weight density for the three models. The two baseline
models can only be pruned to 60% density before accuracy falls signiﬁcantly (> 0.1%). Our
Winograd-ReLU CNN model can be pruned to 40% density before falling to the same accuracy.

Table 1 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 5.1×
and 3.7× 1 respectively. Pruning the Winograd-ReLU model reduces the convolution layer workload
by 13.3×, a 2.6× and 3.6× improvement respectively over the two baselines. The improvement of
overall network workload reduction is 2.2× and 3.0× respectively over two baselines.

1All Winograd CNN model workload reduction results include the intrinsic 2.25× reduction.

4

Published as a conference paper at ICLR 2018

Table 1: VGG-nagadomi weight and activation density on CIFAR-10.
Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd-ReLU CNN
Pruning (ours)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv7
conv total
overall

Density
Weight Act
80% 100%
60% 50%
60% 19%
60% 37%
60% 18%
60% 26%
60% 24%
60% 35%

-
-

-
-

Workload

80%
30%
12%
22%
11%
15%
14%
21%
20%(5.1×)
21%(4.7×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%

80%
27%
27%
27%
27%
27%
27%
27%
27%(3.7×)
29%(3.5×)

-
-

-
-

Density
Weight Act
80% 100%
40% 46%
40% 39%
40% 40%
40% 40%
40% 38%
40% 35%
40% 36%

-
-

-
-

Workload

80%
8%
7%
7%
7%
7%
6%
6%
8%(13.3×)
10%(10.4×)

4.2 CIFAR-100

We used the ConvPool-CNN-C (Springenberg et al., 2015) model on on the CIFAR-100 dataset.
ConvPool-CNN-C contains 9 convolution layers, out of which 7 have 3 × 3 kernels. We trained three
models from scratch. The spatial baseline CNN model and conventional Winograd CNN model can
achieve single model validation accuracy of 69.34% and 69.32% respectively. The corresponding
Winograd-ReLU network model can achieve validation set accuracy of 69.75%. We pruned the ﬁrst
convolution layer to a constant density of 80%. We iteratively pruned and re-trained the other layers
to densities from 80% down to 20%.

Figure 3: Test accuracy vs density for the three models in Figure 1 on ConvPool-CNN-C.

Figure 3 shows the accuracy as a function of density for spatial baseline and Winograd-ReLU models.
The spatial-baseline and Winograd-ReLU models can be pruned to 60% density without signiﬁcant
(> 0.1%) loss of accuracy. In contrast, the conventional Winograd CNN model can only be pruned to
70% density. At a given density, the Winograd-ReLU model has the highest accuracy.

Table 2: ConvPool-CNN-C weight and activation density on CIFAR-100.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Density
Weight Act
80% 100%
60% 53%
60% 52%
60% 77%
60% 35%
60% 32%
60% 56%

-
-

-
-

Workload

80%
33%
32%
46%
21%
19%
33%
29%(3.5×)
30%(3.4×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%

80%
31%
31%
31%
31%
31%
31%
31%(3.2×)
32%(3.1×)

-
-

-
-

Winograd-ReLU CNN
Pruning (ours)

Density
Weight Act
80% 100%
60% 54%
60% 53%
60% 54%
60% 54%
60% 42%
60% 43%

-
-

-
-

Workload

80%
14%
14%
14%
14%
11%
11%
14%(7.1×)
15%(6.8×)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv total
overall

Table 2 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 3.5×
and 3.2× respectively. Pruning the Winograd-ReLU model reduces the workload by 7.1×, a 2.1×
and 2.2× improvement respectively over the two baselines. The improvement of overall network
workload reduction is 2.0× and 2.2× respectively over two baselines.

5

Published as a conference paper at ICLR 2018

4.3

IMAGENET

We used a variation of the full pre-activation version (He et al., 2016b) of ResNet-18 (He et al., 2016a)
on the ImageNet 2012 dataset. We used this version because it performs the best among various
ResNet versions and its structure suits our Winograd-ReLU approach – its ReLU units are located
before convolutions in the residual modules. The variation is different from original ResNet-18
by replacing all 2 × 2-stride 3 × 3 convolution layers with a 2 × 2 max-pooling layer followed by
a 1 × 1-stride 3 × 3 convolution layer. Such difference ensure most of convolution layers can be
converted to Winograd convolution layer. Another difference is that it doesn’t have the last max
pooling layer so the last group of residual modules has spatial size of 14 × 14, in order to keep the
spatial size even instead of odd. This setting suits Winograd convolution with p = 4 best in that even
spatial size is required for even p values.

We trained three models from scratch. For single model and single central 224 × 224 cropping, the
spatial baseline CNN model and conventional Winograd CNN model can achieve single model top-
1/top-5 validation accuracy of 66.67%/87.42% and 66.84%/87.47%. The corresponding Winograd-
ReLU CNN model can achieve validation top-1/top-5 accuracy of 66.78%/87.43%. We kept the ﬁrst
convolution layer intact. We iteratively pruned other convolution layers with density rate from 80%
down to 10%.

Figure 4: Top-1 and top-5 validation accuracy vs density for three models on a variation of ResNet-18.

Figure 4 shows the accuracy as a function of density for three models. The spatial baseline CNN
model and conventional Winograd CNN model can be pruned to 60% and 50% respectively without
signiﬁcant (> 0.1%) loss of top-1 or top-5 accuracy. The Winograd-ReLU model can be pruned
much further, to 30%/35% density without signiﬁcant (> 0.1%) loss of top-1/top-5 accuracy. At
these densities, top-1 accuracies are 66.53%, 66.45% and 66.61% for three models respectively,
with a dense spatial baseline of 66.67%; top-5 accuracies are 87.29%, 87.30% and 87.35% for three
models respectively, with a dense spatial baseline of 87.42%.

Table 3 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning the two baseline models reduces the convolution layer workload by
5.1× and 4.5× respectively. Pruning the Winograd-ReLU model reduces the workload by 13.2×,
a 2.6× and 2.9× improvement respectively over the two baselines. The improvement of overall
network workload reduction is 2.3× and 2.6× respectively over two baselines.

5 DISCUSSION

In this section, we summarize the experiment results and compare the three models in terms of a)
weight and activation dimensions and b) the dynamic density of activations. We then visualize the
kernels to illustrate the pattern of the proposed Winograd-ReLU model kernel.

6

Published as a conference paper at ICLR 2018

Table 3: ResNet-18 variation weight and activation density on ImageNet.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd CNN Native
Pruning (Li et al., 2017)
Density

Winograd-ReLU CNN
Pruning (ours)

Layer

res2a_2a
res2a_2b
res2b_2a
res2b_2b
res3a_2a
res3a_2b
res3b_2a
res3b_2b
res4a_2a
res4a_2b
res4b_2a
res4b_2b
res5a_2a
res5a_2b
res5b_2a
res5b_2b
conv total
overall

Density
Weight Act
60% 90%
60% 64%
60% 71%
60% 53%
60% 94%
60% 35%
60% 47%
60% 29%
60% 88%
60% 23%
60% 36%
60% 21%
60% 45%
60% 14%
60% 16%
60% 12%

-
-

-
-

Workload

54%
39%
43%
32%
56%
21%
28%
17%
53%
14%
22%
13%
27%
9%
10%
7%
20%(5.1×)
21%(4.7×)

Act
Weight
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%

-
-

-
-

Workload

22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%(4.5×)
24%(4.2×)

Density
Weight Act
35% 48%
35% 50%
35% 50%
35% 50%
35% 49%
35% 50%
35% 49%
35% 49%
35% 49%
35% 50%
35% 50%
35% 49%
35% 50%
35% 48%
35% 48%
35% 49%

-
-

-
-

Workload

8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
7%
7%
8%
8%(13.2×)
9%(10.8×)

5.1 WEIGHT AND ACTIVATION DIMENSION

In a convolutional neural network, a convolution-ReLU pair acts as a classiﬁer on a spatial patch of
an input feature. The dimension of the space being classiﬁed is the total number of elements passing
through the ReLU layer. The decision boundaries of the classiﬁer are determined by the weights.
Insufﬁcient non-zero weights or insufﬁcient activations results in too simple a decision boundary and
causes accuracy loss.

Experimental results have shown that Winograd-ReLU CNN can reach the same accuracy as both
vanilla spatial baseline CNN and conventional Winograd CNN without pruning, and that Winograd-
ReLU CNN is more robust to aggressive pruning. In this subsection we provide an explanation for
the latter observation from the aspect of activation and weight dimensions. We provide a summary on
dimensions in Table 4.

Table 4: Comparison of ReLU dimension and weight dimension in three types of networks. Assume
the convolution-ReLU pair operates on input activation of spatial size of H × W and the number of
input and output channels are C and K respectively.

Spatial Baseline
CNN (Han et al., 2015)

Weight dimension K × C × 3 × 3
ReLU dimension H × W × K

Winograd native pruned
CNN (Li et al., 2017)
K × C × p × p
H × W × K

Winograd-ReLU
CNN (ours)
K × C × p × p
p−2 H × p

p

p−2 W × K

Weight Dimension Increase: Compared to a vanilla 3 × 3 CNN, a conventional Winograd CNN
uses (p × p)-dimension Winograd kernels. Training a Winograd CNN from scratch allows higher
dimension (p × p) for Winograd kernels, and a Winograd-ReLU CNN shares these characteristics.

ReLU Dimension Increase: A major difference between our Winograd-ReLU CNN and conven-
tional Winograd CNN is that the ReLU layers in Winograd-ReLU CNN have higher dimension. The
dimension increase comes from the Winograd transformation extracting p × p feature patches with
(p − 2) × (p − 2) strides from H × W activations. The total number of extracted Winograd-domain
p−2 W , an increase from the spatial domain’s H × W .
activations is
We can see that our Winograd-ReLU architecture has an advantage on the dimensions of weights
and activations over other two models. This means Winograd-ReLU CNNs classify on a higher
dimension with more complex decision boundaries, which forms a stronger representational ability in
high dimensional image feature space.

p−2 H × p

p

7

Published as a conference paper at ICLR 2018

5.2 DYNAMIC ACTIVATION DENSITY

As is shown in the ImageNet results in the previous section, dynamic activation density of spatial
baseline CNN model varies signiﬁcantly among layers. Layers at earlier stages typically have higher
density in activation than later stages. In Winograd-ReLU CNN model, the dynamic activation
densities vary little among layers and are all close to 50%.

An explanation is that the nature of image convolution ensures activations d to be spatially smooth.
Thus, due to the structure of matrix B (Lavin, 2015), 15 of 16 elements in the 4 × 4 matrix of
Winograd-domain activation patch BT · d · B have a mean close to zero. This beneﬁts classiﬁcation
within a patch since ReLU layer is most powerful when half of activations are positive.

5.3 KERNEL VISUALIZATION

We visualize the kernels of the proposed Winograd-ReLU model. We selected the ﬁrst 6 input and
output channels of layer res2a_2a of ResNet-18 at three different pruning densities. Unlike spatial
domain kernels, Winograd-ReLU kernels do not show clear physical meanings such as edge or corner
detectors. However, we observe that values of the (2, 2) elements (from top-left, 1-based indices) in
each kernel are typically distinct in a kernel and are most likely kept during aggressive pruning. A
possible reason for this is that the (2, 2) elements of Winograd-domain activation in a 4 × 4 patch
are special: interested readers can calculate BT · d · B symbolically and will realize that (2, 2)
elements are the only elements that are transformed with a linear combination of only adding and no
subtraction. In a spatially smooth activation patch, this means the (2, 2) elements are the ones and
the only ones with a non-zero mean.

Figure 5: Kernels of ResNet-18 Winograd-ReLU model res2a_2a layer with density of 100% (left,
87.43% top-5 accuracy), 35% (middle, 87.36% top-5 accuracy) and 15% (right, 86.57% top-5
accuracy). Positive, negative and pruned weights are in red, blue and black respectively.

6 CONCLUSION AND FUTURE WORK

We have shown that we can combine the computational savings of sparse weights and activations with
the savings of the Winograd transform by making two modifcations to conventional CNNs. To make
the weights sparse at the point of multiplication, we train and prune the weights in the transform
domain. This simple approach does not reduce the workload with respect to spatial pruning, though,
so we move the ReLU non-linear operation after the Winograd transform to make the activations
sparse at the point of multiplication. Moving ReLU to the Winograd domain also allows the weights
to be more aggressively pruned without losing accuracy. With a 2 × 2 output patch (p = 4), the
net result is a reduction of 10.4×, 6.8× and 10.8× in computation on three datasets: CIFAR-10,
CIFAR-100 and ImageNet.

We plan to extend this work in the following directions. First, we expect that even greater savings on
computation can be realized by using larger patch sizes (e.g., p = 6), and there may be beneﬁt in
exploring different Winograd transformation matrices (B,G and A). Second, we expect that using
different pruning rates ri for each network layer will help maintain accuracy and improve overall
workload reduction. Finally, we expect that combining our Winograd-ReLU network with other
network simpliﬁcation techniques, e.g. quantization of weights and/or activations (Courbariaux et al.,
2015; Lin et al., 2016; Rastegari et al., 2016), will reduce the energy of computation even further.

8

Published as a conference paper at ICLR 2018

REFERENCES

Martín Abadi et al. Tensorﬂow: A system for large-scale machine learning. In Proceedings of the

12th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2016.

Jorge Albericio, Patrick Judd, Tayler Hetherington, Tor Aamodt, Natalie Enright Jerger, and Andreas
Moshovos. Cnvlutin: Ineffectual-neuron-free Deep Neural Network Computing. In Proceedings of
the 43rd International Symposium on Computer Architecture (ISCA), 2016.

Sharan Chetlur, Cliff Woolley, Philippe Vandermersch, Jonathan Cohen, John Tran, Bryan Catanzaro,
and Evan Shelhamer. cuDNN: Efﬁcient primitives for deep learning. CoRR, abs/1410.0759, 2014.
URL http://arxiv.org/abs/1410.0759.

Jason Cong and Bingjun Xiao. Minimizing computation in convolutional neural networks.

In

International Conference on Artiﬁcial Neural Networks (ICANN), pp. 281–290. Springer, 2014.

Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre David. Binaryconnect: Training deep neural
networks with binary weights during propagations. In Advances in neural information processing
systems (NIPS), 2015.

Song Han, Jeff Pool, John Tran, and William J. Dally. Learning both weights and connections for
efﬁcient neural networks. In Advances in neural information processing systems (NIPS), 2015.

Song Han, Xingyu Liu, Huizi Mao, Jing Pu, Ardavan Pedram, Mark A. Horowitz, and William J.
Dally. EIE: Efﬁcient inference engine on compressed deep neural network. In Proceedings of the
43rd International Symposium on Computer Architecture (ISCA), 2016a.

Song Han, Huizi Mao, and William J. Dally. Deep compression: Compressing deep neural networks
with pruning, trained quantization and huffman coding. In International Conference on Learning
Representations (ICLR), 2016b.

Babak Hassibi, David G Stork, et al. Second order derivatives for network pruning: Optimal brain

surgeon. Advances in Neural Information Processing Systems (NIPS), pp. 164–164, 1993.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016a.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual
networks. In European Conference on Computer Vision (ECCV), pp. 630–645. Springer, 2016b.

Yuxiang Huan, Yifan Qin, Yantian You, Lirong Zheng, and Zhuo Zou. A multiplication reduction
technique with near-zero approximation for embedded learning in IoT devices. In System-on-Chip
Conference (SOCC), 29th IEEE International, pp. 102–107. IEEE, 2016.

Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. 2009.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classiﬁcation with deep convolu-
tional neural networks. In Advances in neural information processing systems (NIPS), 2012.

Andrew Lavin. Fast algorithms for convolutional neural networks. CoRR, abs/1509.09308, 2015.

URL http://arxiv.org/abs/1509.09308.

Yann LeCun, John S Denker, and Sara A Solla. Optimal brain damage. In Advances in neural

information processing systems (NIPS), pp. 598–605, 1990.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to

document recognition. Proceedings of the IEEE, 86(11):2278–2324, 1998.

Sheng R. Li, Jongsoo Park, and Ping Tak Peter Tang. Enabling sparse Winograd convolution by native
pruning. CoRR, abs/1702.08597, 2017. URL http://arxiv.org/abs/1702.08597.

Zhouhan Lin, Matthieu Courbariaux, Roland Memisevic, and Yoshua Bengio. Neural networks with
few multiplications. In Proceedings of International Conference on Learning Representations
(ICLR), 2016.

9

Published as a conference paper at ICLR 2018

Xingyu Liu, Song Han, Huizi Mao, and William J. Dally. Efﬁcient sparse-winograd convolutional
neural networks. International Conference on Learning Representations (ICLR) Workshop, 2017.

Nagadomi.

Code for kaggle-cifar10 competition. 5th place.

https://github.com/

nagadomi/kaggle-cifar10-torch7, 2014.

Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. XNOR-Net: Imagenet
classiﬁcation using binary convolutional neural networks. In European Conference on Computer
Vision (ECCV), 2016.

Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang,
Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. ImageNet
Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV),
2015.

Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. In Proceedings of International Conference on Learning Representations (ICLR),
2015.

Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, and Martin Riedmiller. Striving for
simplicity: The all convolutional net. International Conference on Learning Representations
(ICLR) Workshop, 2015.

Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott E. Reed, Dragomir Anguelov,
Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 1–9, June 2015.

Shmuel Winograd. Arithmetic complexity of computations, volume 33. Siam, 1980.

10

8
1
0
2
 
b
e
F
 
8
1
 
 
]

V
C
.
s
c
[
 
 
1
v
7
6
3
6
0
.
2
0
8
1
:
v
i
X
r
a

Published as a conference paper at ICLR 2018

EFFICIENT SPARSE-WINOGRAD
CONVOLUTIONAL NEURAL NETWORKS

Xingyu Liu∗, Jeff Pool†, Song Han‡ §, William J. Dally∗†
∗ Stanford University, † NVIDIA, ‡ Massachusetts Institute of Technology, § Google Brain
{xyl, dally}@stanford.edu

ABSTRACT

Convolutional Neural Networks (CNNs) are computationally intensive, which
limits their application on mobile devices. Their energy is dominated by the
number of multiplies needed to perform the convolutions. Winograd’s minimal
ﬁltering algorithm (Lavin, 2015) and network pruning (Han et al., 2015) can reduce
the operation count, but these two methods cannot be directly combined – applying
the Winograd transform ﬁlls in the sparsity in both the weights and the activations.
We propose two modiﬁcations to Winograd-based CNNs to enable these methods
to exploit sparsity. First, we move the ReLU operation into the Winograd domain
to increase the sparsity of the transformed activations. Second, we prune the
weights in the Winograd domain to exploit static weight sparsity. For models on
CIFAR-10, CIFAR-100 and ImageNet datasets, our method reduces the number of
multiplications by 10.4×, 6.8× and 10.8× respectively with loss of accuracy less
than 0.1%, outperforming previous baselines by 2.0×-3.0×. We also show that
moving ReLU to the Winograd domain allows more aggressive pruning.

1

INTRODUCTION

Deep Convolutional Neural Networks (CNNs) have shown signiﬁcant improvement in many machine
learning applications. However, CNNs are compute-limited. Their performance is dominated by the
number of multiplies needed to perform the convolutions. Moreover, the computational workload
of CNNs continues to grow over time. LeCun et al. (1998) proposed a CNN model with less than
2.3 × 107 multiplies for handwritten digit classiﬁcation. Later, Krizhevsky et al. (2012) developed
AlexNet, an ImageNet-winning CNN with more than 1.1 × 109 multiplies. In 2014, ImageNet-
winning and runner up CNNs increased the number of multiplies to 1.4 × 109 (Szegedy et al., 2015)
and 1.6 × 1010 (Simonyan & Zisserman, 2015) respectively. Despite the powerful representational
ability of large scale CNNs, their computational workload prohibits deployment on mobile devices.

Two research directions have been explored to address the problem. Lavin (2015) proposed using
Winograd’s minimal ﬁltering algorithm (Winograd, 1980) to reduce the number of multiplies needed
to perform 3 × 3 kernel convolutions. On the other end, pruning the model (Han et al., 2015; 2016b)
and exploiting the dynamic sparsity of activations due to ReLU also reduces the required multiplies.

Unfortunately, the above two directions are not compatible: the Winograd transformation ﬁlls in the
zeros in both the weights and the activations (Figure 1(a)) – eliminating the gain from exploiting
sparsity. Thus, for a pruned network, Winograd’s algorithm actually increases the number of
multiplies; the loss of sparsity more than offsets the reduced operation count.

In this paper, we introduce two modiﬁcations to the original Winograd-based convolution algorithm to
eliminate this problem. First, we move the ReLU operation to be after the Winograd transform to also
make the activations sparse at the point where the multiplies are performed. Second, we prune the
weights after (rather than before) they are transformed. Thus, the weights are sparse when the element-
wise multiply is performed — reducing the operation count. Together, these two modiﬁcations enable
the gains of Winograd’s algorithm and of exploiting sparsity to be combined. We open-source our
code and models at https://github.com/xingyul/Sparse-Winograd-CNN.

1

Published as a conference paper at ICLR 2018

Figure 1: Combining Winograd convolution with sparse weights and activations. (a) Conventional
Winograd-based convolution ﬁlls in the zeros in both the weights and activations. (b) Pruning the
4 × 4 transformed kernel restores sparsity to the weights. (c) Our proposed Winograd-ReLU CNN.
Moving the ReLU layer after Winograd transformation also restores sparsity to the activations.

2 RELATED WORK

Linear Algebra property in Convolution: Previous research proposes using the linear algebra
property of convolution to reduce the number of multiplies by trading additions for multiplies. Cong
& Xiao (2014) convert convolution into matrix multiplies and utilize the linear algebra property at
the sub-matrix block level. This approach achieves a 47% saving in multiplies. Lavin (2015) exploits
the element-level linear algebra property of convolution, i.e. Winograd’s minimal ﬁltering algorithm
(Winograd, 1980). This approach reduces the number of multiplies by 2.25× to 4×, depending on
the image patch size used in the algorithm. Winograd’s algorithm is also used in a state-of-the-art
deep learning library, cuDNN (Chetlur et al., 2014), to improve computation efﬁciency.

Model Compression: Model compression reduces the number of multiplies of CNNs by pruning
network parameters (LeCun et al., 1990; Hassibi et al., 1993) and exploiting weight sparsity. Han
et al. (2015; 2016b) proposed learning the sparsity pattern of network weights by eliminating weights
whose absolute value is less than an empirical threshold. This approach can prune the convolutional
layers of the model to only 30% − 50% of the original size and reduce the number of multiplies
required. Liu et al. (2017) ﬁrst proposed pruning and re-training the weights in Winograd domain for
conventional Winograd convolution. Li et al. (2017) later showed promising results on large datasets
and reported 90% sparsity in the Winograd parameters of AlexNet with less than 0.1% accuracy loss.

Dynamic Activation Sparsity: The ReLU non-linearity sets activations whose values are negative to
zero, causing dynamic sparsity in activations. Model compression can work in tandem with dynamic
activation sparsity and reduce multiplication workload. Han et al. (2015) showed that exploiting
sparsity of both weights and activations can reduce the number of multiplies by 4 − 11×. Huan
et al. (2016) further proposed to manually set a small positive ReLU threshold at test time to exploit
greater sparsity in activation without losing testing accuracy. Research in novel architectures also
led to optimizations for deep learning accelerators to exploit the sparsity in activations. Han et al.
(2016a) proposed using a Leading Non-zero Detection unit (LNZD) for their fully-connected layer
accelerator to efﬁciently skip zeros in input activations. Albericio et al. (2016) proposed a similar
mechanism for a convolution layer accelerator.

2

Published as a conference paper at ICLR 2018

3 SPARSE WINOGRAD CONVOLUTION

We ﬁrst introduce the conventional Winograd convolution and show how sparsity of weights or
activations is lost during the dataﬂow of the algorithm. We then present the novel Winograd-ReLU
CNN architecture. It preserves sparsity in both weights and activations before multiplies are performed
and signiﬁcantly reduces the computational workload.

3.1 SPARSITY IN CONVENTIONAL SPATIAL AND WINOGRAD CNN

The basic block of the conventional Winograd convolution algorithm works on an p×p patch (denoted
by d) extracted with stride of (p − 2) × (p − 2) from an H × W input feature map. With “valid”
padding, the p×p patch is convolved with a 3×3 kernel (denoted by g) to produce an (p−2)×(p−2)
output patch (denoted by S). The output patches are assembled into an output feature map.

Input activation patch d and kernel g (spatial-domain activation and weights) are transformed using
matrices B and G to be BT dB and GgGT (Winograd-domain activation and weights) respectively,
both with shape p × p. After element-wise product in Winograd-domain, the output activation S is
obtained using matrix A (equation (1)). Matrices B, G and A are p-speciﬁc. When p = 4, B and A
consists of 1, −1 and 0, so the multiplication with B and A only requires addition. It reduces the
number of multiplies from 9(p − 2)2 to p2. Lavin (2015) gives details of the algorithm.

S = AT [[GgGT ] (cid:12) [BT dB]]A

Spatial Baseline Network: When using a “vanilla” pruned network, as introduced by Han et al.
(2015), a ReLU non-linear operation is performed by the previous layer on spatial-domain input d
and spatial-domain weight g is pruned. The output activation patch S is obtained from equation (2).
This is illustrated in Figure 1(a) for p = 4. Though g and d may both be sparse due to pruning and
ReLU respectively, the element-wise multiply is dense due to G(·)GT and B(·)BT transformations
ﬁlling the spatial-domain zeros. Sparsity does not reduce the number of multiplies in Winograd’s
algorithm.

S = AT [[GPrune(g)GT ] (cid:12) [BT ReLU(d)B]]A

Winograd Native Pruned Network: When using the Winograd-domain pruned network introduced
by Liu et al. (2017) and Li et al. (2017), the spatial-domain input d is ReLU-ed by the previous layer
while the Winograd-domain weight GgGT is pruned. The output activation patch S is obtained from
equation (3). The algorithm when p = 4 is also illustrated in Figure 1(b). Though Winograd-domain
weights are sparse due to pruning, Winograd-domain activations are still dense due to B(·)BT
transforms. The sparsity in spatial activations due to ReLU does not reduce the number of multiplies.

S = AT [[Prune(GgGT )] (cid:12) [BT ReLU(d)B]]A

3.2 WINOGRAD-RELU CNN

To address the above problems, we introduce the Winograd-ReLU Network. Instead of applying
ReLU to the activations in the spatial domain, we apply ReLU to the activations in the Winograd
domain, as in equation (4) and Figure 1(c). The ReLU operation zeros all negative transformed
activations, reducing the number of multiplies in the Winograd domain.

S = AT [[Prune(GgGT )] (cid:12) [ReLU(BT dB)]]A

In the Winograd-ReLU CNN, we eliminate the spatial-domain kernel entirely. Because this ReLU is
really associated with the previous layer, we perform this transformed ReLU starting with the second
layer. We point out that the proposed new CNN architecture is not mathematically equivalent to the
vanilla CNN nor the conventional Winograd CNN. Due to the change of network architecture, the
training and pruning should also be changed. Our method operates in three phases: dense training,
pruning, and retraining.

Dense training: we train a dense p × p kernel directly in the transform domain. The transformed ker-
nel is initialized and trained directly by back-propagation through the inverse transform — eliminating
the need to maintain a kernel in the spatial domain or to transform a spatial kernel.

(1)

(2)

(3)

(4)

3

Published as a conference paper at ICLR 2018

Pruning: we prune the transformed kernel by computing the threshold t required to achieve a desired
pruning rate r and setting all weights whose absolute value less than t to zero. In our experiments,
we used the same r for all Winograd-ReLU layers. Because sensitivity varies from layer to layer, we
expect that better performance could be achieved by varying the pruning rate ri for each layer i.

Re-training: we re-train the model using a “sparsity mask” to force the weights that were pruned
to remain zero. The sparsity mask is computed during the pruning step and is kept constant during
re-training. The gradient of the network’s loss, L, with respect to the input activation and Winograd
weights can be derived using the chain rule. Equation (5) shows the calculation of input activation
gradient ∇dL and Winograd weight gradient ∇GgGT L using the loss gradient passed from upstream
layers ∇SL.

∇GgGT L = (A∇SLAT ) (cid:12) (BT dB) (cid:12) mask
∇dL = B[(A∇SLAT ) (cid:12) (GgGT ) (cid:12) mask]BT

(5)

4 EXPERIMENTS

We applied the methodology described above to several different CNNs on different datasets. The
original network models are chosen such that the majority of the convolution layers have 3 × 3
kernels. This ensures the largest portion of layers can be converted to Winograd convolution layers
and ReLU be put in Winograd domain. We used image classiﬁcation datasets of different scales:
CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ImageNet 2012 (Russakovsky et al., 2015).
For network architectures, we chose VGG-nagadomi (Nagadomi, 2014), ConvPool-CNN-C model
(Springenberg et al., 2015) and a variation of ResNet-18 (He et al., 2016a) respectively on three
datasets. Using the Tensorﬂow (Abadi et al., 2016) framework, we trained the spatial baseline CNN,
corresponding conventional Winograd CNN, and Winograd-ReLU CNN models from scratch. Then
the three models are iteratively pruned and re-trained. For a speciﬁc dataset, we used the same data
augmentation for the training of all models on the dataset.

4.1 CIFAR-10

We used VGG-nagadomi (Nagadomi, 2014) on the CIFAR-10 dataset. VGG-nagadomi is a light-
weight version of VGGNet (Simonyan & Zisserman, 2015). It contains 8 convolution layers with 3×3
kernels. The best reported validation set accuracy it achieves on CIFAR-10 is 93.31% (Nagadomi,
2014). We trained three models from scratch. The corresponding conventional Winograd CNN
model and Winograd-ReLU CNN model can achieve validation set accuracy of 93.30% and 93.43%
respectively. The ﬁrst convolution layer is most sensitive to pruning and we set its density to a
constant of 80%. We iteratively pruned and re-trained other convolution layers with density from
80% down to 20%.

Figure 2: Test accuracy vs density for the three models in Figure 1 on VGG-nagadomi.

Figure 2 shows test accuracy as a function of weight density for the three models. The two baseline
models can only be pruned to 60% density before accuracy falls signiﬁcantly (> 0.1%). Our
Winograd-ReLU CNN model can be pruned to 40% density before falling to the same accuracy.

Table 1 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 5.1×
and 3.7× 1 respectively. Pruning the Winograd-ReLU model reduces the convolution layer workload
by 13.3×, a 2.6× and 3.6× improvement respectively over the two baselines. The improvement of
overall network workload reduction is 2.2× and 3.0× respectively over two baselines.

1All Winograd CNN model workload reduction results include the intrinsic 2.25× reduction.

4

Published as a conference paper at ICLR 2018

Table 1: VGG-nagadomi weight and activation density on CIFAR-10.
Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd-ReLU CNN
Pruning (ours)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv7
conv total
overall

Density
Weight Act
80% 100%
60% 50%
60% 19%
60% 37%
60% 18%
60% 26%
60% 24%
60% 35%

-
-

-
-

Workload

80%
30%
12%
22%
11%
15%
14%
21%
20%(5.1×)
21%(4.7×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%
60% 100%

80%
27%
27%
27%
27%
27%
27%
27%
27%(3.7×)
29%(3.5×)

-
-

-
-

Density
Weight Act
80% 100%
40% 46%
40% 39%
40% 40%
40% 40%
40% 38%
40% 35%
40% 36%

-
-

-
-

Workload

80%
8%
7%
7%
7%
7%
6%
6%
8%(13.3×)
10%(10.4×)

4.2 CIFAR-100

We used the ConvPool-CNN-C (Springenberg et al., 2015) model on on the CIFAR-100 dataset.
ConvPool-CNN-C contains 9 convolution layers, out of which 7 have 3 × 3 kernels. We trained three
models from scratch. The spatial baseline CNN model and conventional Winograd CNN model can
achieve single model validation accuracy of 69.34% and 69.32% respectively. The corresponding
Winograd-ReLU network model can achieve validation set accuracy of 69.75%. We pruned the ﬁrst
convolution layer to a constant density of 80%. We iteratively pruned and re-trained the other layers
to densities from 80% down to 20%.

Figure 3: Test accuracy vs density for the three models in Figure 1 on ConvPool-CNN-C.

Figure 3 shows the accuracy as a function of density for spatial baseline and Winograd-ReLU models.
The spatial-baseline and Winograd-ReLU models can be pruned to 60% density without signiﬁcant
(> 0.1%) loss of accuracy. In contrast, the conventional Winograd CNN model can only be pruned to
70% density. At a given density, the Winograd-ReLU model has the highest accuracy.

Table 2: ConvPool-CNN-C weight and activation density on CIFAR-100.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Density
Weight Act
80% 100%
60% 53%
60% 52%
60% 77%
60% 35%
60% 32%
60% 56%

-
-

-
-

Workload

80%
33%
32%
46%
21%
19%
33%
29%(3.5×)
30%(3.4×)

Workload

Winograd CNN Native
Pruning (Li et al., 2017)
Density
Weight Act
80% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%
70% 100%

80%
31%
31%
31%
31%
31%
31%
31%(3.2×)
32%(3.1×)

-
-

-
-

Winograd-ReLU CNN
Pruning (ours)

Density
Weight Act
80% 100%
60% 54%
60% 53%
60% 54%
60% 54%
60% 42%
60% 43%

-
-

-
-

Workload

80%
14%
14%
14%
14%
11%
11%
14%(7.1×)
15%(6.8×)

Layer

conv0
conv1
conv2
conv3
conv4
conv5
conv6
conv total
overall

Table 2 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning two baseline models reduces the convolution layer workload by 3.5×
and 3.2× respectively. Pruning the Winograd-ReLU model reduces the workload by 7.1×, a 2.1×
and 2.2× improvement respectively over the two baselines. The improvement of overall network
workload reduction is 2.0× and 2.2× respectively over two baselines.

5

Published as a conference paper at ICLR 2018

4.3

IMAGENET

We used a variation of the full pre-activation version (He et al., 2016b) of ResNet-18 (He et al., 2016a)
on the ImageNet 2012 dataset. We used this version because it performs the best among various
ResNet versions and its structure suits our Winograd-ReLU approach – its ReLU units are located
before convolutions in the residual modules. The variation is different from original ResNet-18
by replacing all 2 × 2-stride 3 × 3 convolution layers with a 2 × 2 max-pooling layer followed by
a 1 × 1-stride 3 × 3 convolution layer. Such difference ensure most of convolution layers can be
converted to Winograd convolution layer. Another difference is that it doesn’t have the last max
pooling layer so the last group of residual modules has spatial size of 14 × 14, in order to keep the
spatial size even instead of odd. This setting suits Winograd convolution with p = 4 best in that even
spatial size is required for even p values.

We trained three models from scratch. For single model and single central 224 × 224 cropping, the
spatial baseline CNN model and conventional Winograd CNN model can achieve single model top-
1/top-5 validation accuracy of 66.67%/87.42% and 66.84%/87.47%. The corresponding Winograd-
ReLU CNN model can achieve validation top-1/top-5 accuracy of 66.78%/87.43%. We kept the ﬁrst
convolution layer intact. We iteratively pruned other convolution layers with density rate from 80%
down to 10%.

Figure 4: Top-1 and top-5 validation accuracy vs density for three models on a variation of ResNet-18.

Figure 4 shows the accuracy as a function of density for three models. The spatial baseline CNN
model and conventional Winograd CNN model can be pruned to 60% and 50% respectively without
signiﬁcant (> 0.1%) loss of top-1 or top-5 accuracy. The Winograd-ReLU model can be pruned
much further, to 30%/35% density without signiﬁcant (> 0.1%) loss of top-1/top-5 accuracy. At
these densities, top-1 accuracies are 66.53%, 66.45% and 66.61% for three models respectively,
with a dense spatial baseline of 66.67%; top-5 accuracies are 87.29%, 87.30% and 87.35% for three
models respectively, with a dense spatial baseline of 87.42%.

Table 3 shows the input activation density and compares the workloads for each pruned convolution
layer in three models. Pruning the two baseline models reduces the convolution layer workload by
5.1× and 4.5× respectively. Pruning the Winograd-ReLU model reduces the workload by 13.2×,
a 2.6× and 2.9× improvement respectively over the two baselines. The improvement of overall
network workload reduction is 2.3× and 2.6× respectively over two baselines.

5 DISCUSSION

In this section, we summarize the experiment results and compare the three models in terms of a)
weight and activation dimensions and b) the dynamic density of activations. We then visualize the
kernels to illustrate the pattern of the proposed Winograd-ReLU model kernel.

6

Published as a conference paper at ICLR 2018

Table 3: ResNet-18 variation weight and activation density on ImageNet.

Spatial Baseline CNN
Pruning (Han et al., 2015)

Winograd CNN Native
Pruning (Li et al., 2017)
Density

Winograd-ReLU CNN
Pruning (ours)

Layer

res2a_2a
res2a_2b
res2b_2a
res2b_2b
res3a_2a
res3a_2b
res3b_2a
res3b_2b
res4a_2a
res4a_2b
res4b_2a
res4b_2b
res5a_2a
res5a_2b
res5b_2a
res5b_2b
conv total
overall

Density
Weight Act
60% 90%
60% 64%
60% 71%
60% 53%
60% 94%
60% 35%
60% 47%
60% 29%
60% 88%
60% 23%
60% 36%
60% 21%
60% 45%
60% 14%
60% 16%
60% 12%

-
-

-
-

Workload

54%
39%
43%
32%
56%
21%
28%
17%
53%
14%
22%
13%
27%
9%
10%
7%
20%(5.1×)
21%(4.7×)

Act
Weight
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%
50% 100%

-
-

-
-

Workload

22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%
22%(4.5×)
24%(4.2×)

Density
Weight Act
35% 48%
35% 50%
35% 50%
35% 50%
35% 49%
35% 50%
35% 49%
35% 49%
35% 49%
35% 50%
35% 50%
35% 49%
35% 50%
35% 48%
35% 48%
35% 49%

-
-

-
-

Workload

8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
8%
7%
7%
8%
8%(13.2×)
9%(10.8×)

5.1 WEIGHT AND ACTIVATION DIMENSION

In a convolutional neural network, a convolution-ReLU pair acts as a classiﬁer on a spatial patch of
an input feature. The dimension of the space being classiﬁed is the total number of elements passing
through the ReLU layer. The decision boundaries of the classiﬁer are determined by the weights.
Insufﬁcient non-zero weights or insufﬁcient activations results in too simple a decision boundary and
causes accuracy loss.

Experimental results have shown that Winograd-ReLU CNN can reach the same accuracy as both
vanilla spatial baseline CNN and conventional Winograd CNN without pruning, and that Winograd-
ReLU CNN is more robust to aggressive pruning. In this subsection we provide an explanation for
the latter observation from the aspect of activation and weight dimensions. We provide a summary on
dimensions in Table 4.

Table 4: Comparison of ReLU dimension and weight dimension in three types of networks. Assume
the convolution-ReLU pair operates on input activation of spatial size of H × W and the number of
input and output channels are C and K respectively.

Spatial Baseline
CNN (Han et al., 2015)

Weight dimension K × C × 3 × 3
ReLU dimension H × W × K

Winograd native pruned
CNN (Li et al., 2017)
K × C × p × p
H × W × K

Winograd-ReLU
CNN (ours)
K × C × p × p
p−2 H × p

p

p−2 W × K

Weight Dimension Increase: Compared to a vanilla 3 × 3 CNN, a conventional Winograd CNN
uses (p × p)-dimension Winograd kernels. Training a Winograd CNN from scratch allows higher
dimension (p × p) for Winograd kernels, and a Winograd-ReLU CNN shares these characteristics.

ReLU Dimension Increase: A major difference between our Winograd-ReLU CNN and conven-
tional Winograd CNN is that the ReLU layers in Winograd-ReLU CNN have higher dimension. The
dimension increase comes from the Winograd transformation extracting p × p feature patches with
(p − 2) × (p − 2) strides from H × W activations. The total number of extracted Winograd-domain
p−2 W , an increase from the spatial domain’s H × W .
activations is
We can see that our Winograd-ReLU architecture has an advantage on the dimensions of weights
and activations over other two models. This means Winograd-ReLU CNNs classify on a higher
dimension with more complex decision boundaries, which forms a stronger representational ability in
high dimensional image feature space.

p−2 H × p

p

7

Published as a conference paper at ICLR 2018

5.2 DYNAMIC ACTIVATION DENSITY

As is shown in the ImageNet results in the previous section, dynamic activation density of spatial
baseline CNN model varies signiﬁcantly among layers. Layers at earlier stages typically have higher
density in activation than later stages. In Winograd-ReLU CNN model, the dynamic activation
densities vary little among layers and are all close to 50%.

An explanation is that the nature of image convolution ensures activations d to be spatially smooth.
Thus, due to the structure of matrix B (Lavin, 2015), 15 of 16 elements in the 4 × 4 matrix of
Winograd-domain activation patch BT · d · B have a mean close to zero. This beneﬁts classiﬁcation
within a patch since ReLU layer is most powerful when half of activations are positive.

5.3 KERNEL VISUALIZATION

We visualize the kernels of the proposed Winograd-ReLU model. We selected the ﬁrst 6 input and
output channels of layer res2a_2a of ResNet-18 at three different pruning densities. Unlike spatial
domain kernels, Winograd-ReLU kernels do not show clear physical meanings such as edge or corner
detectors. However, we observe that values of the (2, 2) elements (from top-left, 1-based indices) in
each kernel are typically distinct in a kernel and are most likely kept during aggressive pruning. A
possible reason for this is that the (2, 2) elements of Winograd-domain activation in a 4 × 4 patch
are special: interested readers can calculate BT · d · B symbolically and will realize that (2, 2)
elements are the only elements that are transformed with a linear combination of only adding and no
subtraction. In a spatially smooth activation patch, this means the (2, 2) elements are the ones and
the only ones with a non-zero mean.

Figure 5: Kernels of ResNet-18 Winograd-ReLU model res2a_2a layer with density of 100% (left,
87.43% top-5 accuracy), 35% (middle, 87.36% top-5 accuracy) and 15% (right, 86.57% top-5
accuracy). Positive, negative and pruned weights are in red, blue and black respectively.

6 CONCLUSION AND FUTURE WORK

We have shown that we can combine the computational savings of sparse weights and activations with
the savings of the Winograd transform by making two modifcations to conventional CNNs. To make
the weights sparse at the point of multiplication, we train and prune the weights in the transform
domain. This simple approach does not reduce the workload with respect to spatial pruning, though,
so we move the ReLU non-linear operation after the Winograd transform to make the activations
sparse at the point of multiplication. Moving ReLU to the Winograd domain also allows the weights
to be more aggressively pruned without losing accuracy. With a 2 × 2 output patch (p = 4), the
net result is a reduction of 10.4×, 6.8× and 10.8× in computation on three datasets: CIFAR-10,
CIFAR-100 and ImageNet.

We plan to extend this work in the following directions. First, we expect that even greater savings on
computation can be realized by using larger patch sizes (e.g., p = 6), and there may be beneﬁt in
exploring different Winograd transformation matrices (B,G and A). Second, we expect that using
different pruning rates ri for each network layer will help maintain accuracy and improve overall
workload reduction. Finally, we expect that combining our Winograd-ReLU network with other
network simpliﬁcation techniques, e.g. quantization of weights and/or activations (Courbariaux et al.,
2015; Lin et al., 2016; Rastegari et al., 2016), will reduce the energy of computation even further.

8

Published as a conference paper at ICLR 2018

REFERENCES

Martín Abadi et al. Tensorﬂow: A system for large-scale machine learning. In Proceedings of the

12th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2016.

Jorge Albericio, Patrick Judd, Tayler Hetherington, Tor Aamodt, Natalie Enright Jerger, and Andreas
Moshovos. Cnvlutin: Ineffectual-neuron-free Deep Neural Network Computing. In Proceedings of
the 43rd International Symposium on Computer Architecture (ISCA), 2016.

Sharan Chetlur, Cliff Woolley, Philippe Vandermersch, Jonathan Cohen, John Tran, Bryan Catanzaro,
and Evan Shelhamer. cuDNN: Efﬁcient primitives for deep learning. CoRR, abs/1410.0759, 2014.
URL http://arxiv.org/abs/1410.0759.

Jason Cong and Bingjun Xiao. Minimizing computation in convolutional neural networks.

In

International Conference on Artiﬁcial Neural Networks (ICANN), pp. 281–290. Springer, 2014.

Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre David. Binaryconnect: Training deep neural
networks with binary weights during propagations. In Advances in neural information processing
systems (NIPS), 2015.

Song Han, Jeff Pool, John Tran, and William J. Dally. Learning both weights and connections for
efﬁcient neural networks. In Advances in neural information processing systems (NIPS), 2015.

Song Han, Xingyu Liu, Huizi Mao, Jing Pu, Ardavan Pedram, Mark A. Horowitz, and William J.
Dally. EIE: Efﬁcient inference engine on compressed deep neural network. In Proceedings of the
43rd International Symposium on Computer Architecture (ISCA), 2016a.

Song Han, Huizi Mao, and William J. Dally. Deep compression: Compressing deep neural networks
with pruning, trained quantization and huffman coding. In International Conference on Learning
Representations (ICLR), 2016b.

Babak Hassibi, David G Stork, et al. Second order derivatives for network pruning: Optimal brain

surgeon. Advances in Neural Information Processing Systems (NIPS), pp. 164–164, 1993.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016a.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual
networks. In European Conference on Computer Vision (ECCV), pp. 630–645. Springer, 2016b.

Yuxiang Huan, Yifan Qin, Yantian You, Lirong Zheng, and Zhuo Zou. A multiplication reduction
technique with near-zero approximation for embedded learning in IoT devices. In System-on-Chip
Conference (SOCC), 29th IEEE International, pp. 102–107. IEEE, 2016.

Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. 2009.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classiﬁcation with deep convolu-
tional neural networks. In Advances in neural information processing systems (NIPS), 2012.

Andrew Lavin. Fast algorithms for convolutional neural networks. CoRR, abs/1509.09308, 2015.

URL http://arxiv.org/abs/1509.09308.

Yann LeCun, John S Denker, and Sara A Solla. Optimal brain damage. In Advances in neural

information processing systems (NIPS), pp. 598–605, 1990.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to

document recognition. Proceedings of the IEEE, 86(11):2278–2324, 1998.

Sheng R. Li, Jongsoo Park, and Ping Tak Peter Tang. Enabling sparse Winograd convolution by native
pruning. CoRR, abs/1702.08597, 2017. URL http://arxiv.org/abs/1702.08597.

Zhouhan Lin, Matthieu Courbariaux, Roland Memisevic, and Yoshua Bengio. Neural networks with
few multiplications. In Proceedings of International Conference on Learning Representations
(ICLR), 2016.

9

Published as a conference paper at ICLR 2018

Xingyu Liu, Song Han, Huizi Mao, and William J. Dally. Efﬁcient sparse-winograd convolutional
neural networks. International Conference on Learning Representations (ICLR) Workshop, 2017.

Nagadomi.

Code for kaggle-cifar10 competition. 5th place.

https://github.com/

nagadomi/kaggle-cifar10-torch7, 2014.

Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. XNOR-Net: Imagenet
classiﬁcation using binary convolutional neural networks. In European Conference on Computer
Vision (ECCV), 2016.

Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang,
Andrej Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. ImageNet
Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV),
2015.

Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. In Proceedings of International Conference on Learning Representations (ICLR),
2015.

Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, and Martin Riedmiller. Striving for
simplicity: The all convolutional net. International Conference on Learning Representations
(ICLR) Workshop, 2015.

Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott E. Reed, Dragomir Anguelov,
Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pp. 1–9, June 2015.

Shmuel Winograd. Arithmetic complexity of computations, volume 33. Siam, 1980.

10

