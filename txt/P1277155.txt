9
1
0
2
 
n
a
J
 
5
2
 
 
]

G
L
.
s
c
[
 
 
4
v
3
2
1
0
1
.
5
0
8
1
:
v
i
X
r
a

TADAM: Task dependent adaptive metric for
improved few-shot learning

Boris N. Oreshkin
Element AI
boris@elementai.com

Pau Rodriguez
Element AI, CVC-UAB
pau.rodriguez@elementai.com

Alexandre Lacoste
Element AI
allac@elementai.com

Abstract

Few-shot learning has become essential for producing models that generalize
from few examples. In this work, we identify that metric scaling and metric task
conditioning are important to improve the performance of few-shot algorithms.
Our analysis reveals that simple metric scaling completely changes the nature of
few-shot algorithm parameter updates. Metric scaling provides improvements
up to 14% in accuracy for certain metrics on the mini-Imagenet 5-way 5-shot
classiﬁcation task. We further propose a simple and effective way of conditioning a
learner on the task sample set, resulting in learning a task-dependent metric space.
Moreover, we propose and empirically test a practical end-to-end optimization
procedure based on auxiliary task co-training to learn a task-dependent metric
space. The resulting few-shot learning model based on the task-dependent scaled
metric achieves state of the art on mini-Imagenet. We conﬁrm these results on
another few-shot dataset that we introduce in this paper based on CIFAR100. Our
code is publicly available at https://github.com/ElementAI/TADAM.

1

Introduction

Humans can learn to identify new categories from few examples, even from a single one [2]. Few-shot
learning has recently attracted signiﬁcant attention [33, 28, 29, 24, 17, 16], as it aims to produce
models that can generalize from small amounts of labeled data. In the few-shot setting, one aims to
learn a model that extracts information from a set of support examples (sample set) to predict the
labels of instances from a query set. Recently, this problem has been reframed into the meta-learning
framework [22], i.e. the model is trained so that given a sample set or task, produces a classiﬁer for
that speciﬁc task. Thus, the model is exposed to different tasks (or episodes) during the training
phase, and it is evaluated on a non-overlapping set of new tasks [33].

Two recent approaches have attracted signiﬁcant attention in the few-shot learning domain: Matching
Networks [33], and Prototypical Networks [28]. In both approaches, the sample set and the query set
are embedded with a neural network, and nearest neighbor classiﬁcation is used given a metric in the
embedded space. Since then, the problem of learning the most suitable metric for few-shot learning
has been of interest to the ﬁeld [33, 28, 29, 17, 16]. Learning a metric space in the context of few-shot
learning generally implies identifying a suitable similarity measure (e.g. cosine or Euclidean), a
feature extractor mapping raw inputs onto similarity space (e.g. convolutional stack for images or
LSTM stack for text), a cost function to drive the parameter updates, and a training scheme (often
episodic). Although the individual components in this list have been explored, the relationships
between them have not received considerable attention.

In the current work we aim to close this gap. We show that taking into account the interaction
between the identiﬁed components leads to signiﬁcant improvements in the few-shot generalization.
In particular, we show that a non-trivial interaction between the similarity metric and the cost function
can be exploited to improve the performance of a given similarity metric via scaling. Using this

32nd Conference on Neural Information Processing Systems (NeurIPS 2018), Montréal, Canada.

mechanism we close more than the 10% gap in performance between the cosine similarity and
the Euclidean distance reported in [28]. Even more importantly, we extend the very notion of the
metric space by making it task dependent via conditioning the feature extractor on the speciﬁc task.
However, learning such a space is in general more challenging than learning a static one. Hence,
we ﬁnd a solution in exploiting the interaction between the conditioned feature extractor and the
training procedure based on auxiliary co-training on a simpler task. Our proposed few-shot learning
architecture based on task-dependent scaled metric achieves superior performance on two challenging
few-shot image classiﬁcation datasets. It shows up to 8.5% absolute accuracy improvement over the
baseline (Snell et al. [28]), and 4.8% over the state-of-the-art [17] on the 5-shot, 5-way mini-Imagenet
classiﬁcation task, reaching 76.7% of accuracy, which is the best-reported accuracy on this dataset.

1.1 Background

We consider the episodic M -shot, K-way classiﬁcation scenario. In this scenario, a learning algorithm
is provided with a sample set S = {(xi, yi)}M K
i=1 consisting of M examples for each of K classes and
a query set Q = {(xi, yi)}q
i=1 for a task to be solved within a given episode. The sample set provides
the task information via observations xi ∈ RDx and their respective class labels yi ∈ {1, . . . , K}.
Given the information in the sample set S, the learning algorithm is able to classify individual
samples from the query set Q. Next, we deﬁne a similarity measure d : RDz×Dz → R. Note that
d does not have to satisfy the classical metric properties (non-negativity, symmetry, subadditivity)
to be useful in the context of few-shot learning. The dimensionality of metric input, Dz, will most
naturally be related to the size of embedding created by a (deep) feature extractor fφ : RDx → RDz ,
parameterized by φ, mapping x to z. Here φ ∈ RDφ is a list of parameters deﬁning fφ, e.g. a list of
weights in a neural network. The set of representations (fφ(xi), yi), ∀(xi, yi) ∈ S can directly be
used to solve the few-shot learning classiﬁcation problem by association. For example, Matching
networks [33] use sample-wise attention mechanism to perform kernel label regression. Instead,
Snell et al. [28] deﬁned a feature representation ck for each class k as the mean over embeddings
belonging to Sk: ck = 1
fφ(xi). To learn φ, they minimize − log pφ(y = k|x) using the
K
softmax over prototypes ck to deﬁne the likelihood: pφ(y = k|x) = softmax(−d(fφ(x), ck)).

xi∈Sk

(cid:80)

1.2 Summary of contributions

Metric Scaling: To our knowledge, this is the ﬁrst study to (i) propose metric scaling to improve
performance of few-shot algorithms, (ii) mathematically analyze its effects on objective function
updates and (iii) empirically demonstrate its positive effects on few-shot performance.

Task Conditioning: We use a task encoding network to extract a task representation based on the
task’s sample set. This is used to inﬂuence the behavior of the feature extractor through FILM [19].

Auxiliary task co-training: We show that co-training the feature extraction on a conventional
supervised classiﬁcation task reduces training complexity and provides better generalization.

1.3 Related work

Three main approaches for solving the few-shot classiﬁcation problem can be identiﬁed in the
literature. The ﬁrst one, which is used in this work, is the meta-learning approach, i.e. learning a
model that, given a task (set of labeled data), produces a classiﬁer that generalizes across all tasks
[31, 25]. This is the case of Matching Networks [33], which optionally use a Recurrent Neural
Network (RNN) to accumulate information about a given task. In MAML [6], the parameters of an
arbitrary learner model are optimized so that they can be quickly adapted to a particular task. In
“Optimization as a model” [22], a learner model is adapted to a new episodic task by a recurrent meta-
learner producing efﬁcient parameter updates. A more general approach was proposed by Santoro
et al. [24], where the meta-learner is trained to represent entries from a sample set in an external
memory. Similarly, adaResNet [17] uses memory and the sample set to produce shift coefﬁcients on
the neuron activations of the query set classiﬁer. Many recent approaches focus on learning a metric
on the episodic feature space. Prototypical networks [28] use a feed-forward neural network to embed
the task examples and perform nearest neighbor classiﬁcation with the class centroids. The relation
network approach by Sung et al. [29] introduces a separate learnable similarity metric. SNAIL
[16] uses an explicit attention mechanism applicable both to supervised and to the sequence based

2

reinforcement learning tasks. It has also been shown that these approaches beneﬁt from leveraging
unlabeled and simulated data [23, 34].

A second approach aims to maximize the distance between examples from different classes [10].
Similarly, in [7], a contrastive loss function is used to learn to project data onto a manifold that is
invariant to deformations in the input space. In the same vein, in [5, 26, 30], triplet loss is used
for learning a representation for few-shot learning. The attentive recurrent comparators [27] go
beyond classical siamese approaches and use a recurrent architecture to learn to perform pairwise
comparisons and predict if the compared examples belong to the same class.

The third approach relies on Bayesian modeling of the prior distribution of the different categories
like in Li et al. [15], Bauer et al. [1], or Lake et al. [13], Edwards and Storkey [4], Lacoste et al. [12]
who rely on hierarchical Bayesian modeling.

As for task conditioning, [3, 18, 19] proposed conditional batch normalization for style transfer and
visual reasoning. Differently, we modify the conditioning scheme to adapt it to few-shot learning,
introducing γ0, β0 priors, and auxiliary co-training. In the few-shot learning context, task conditioning
ideas can be traced back to [33], although in an implicit form as there is no notion of task embedding.
In our work, we explicitly introduce a task representation (see Fig. 1) computed as the mean of the task
class centroids (task prototypes). This is much simpler than individual sample level LSTM/attention
models in [33]. Conditioning in [33] is applied as a postprocessing of the output of a ﬁxed feature
extractor. We propose to condition the feature extractor by predicting its own batch normalization
parameters thus making feature extractor behaviour task-dynamic without cumbersome ﬁne-tuning
on support set. In order to train the task conditioned architecture we use multitask training with
a usual 64-way classiﬁcation task. Even though auxiliary co-training is beneﬁcial for learning in
general, “little is known on when multitask learning works and whether there are data characteristics
that help to determine its success” [20]. We show that combining task conditioning and auxiliary
co-training is beneﬁcial in the context of few-shot learning.

The scaling and temperature adjustment in the softmax was discussed by Hinton et al. [9] in the
context of model distillation. We propose to use it in the context of the few-shot learning scenario
and provide novel theoretical and empirical results quantifying the effects of scaling parameter.

The rest of the paper is organized as follows. Section 2 describes our contributions in detail. Section 3
highlights the importance of each contribution via an ablation study. The study is performed over two
different benchmarks in the regime of 1-shot, 5-shot and 10-shot learning to verify if conclusions hold
across different setups. Finally, Section 4 concludes the paper and outlines future research directions.

2 Model Description

2.1 Metric Scaling

Snell et al. [28] using approach described in detail in Section 1.1 found that the Euclidean distance
outperformed the cosine distance used in Vinyals et al. [33]. We hypothesize that the improvement
could be directly attributed to the interaction of the different scaling of the metrics with the softmax.
Moreover, the dimensionality of the output is known to have a direct impact on the output scale
even for the Euclidean distance [32]. Hence, we propose to scale the distance metric by a learnable
temperature, α, pφ,α(y = k|x) = softmax(−αd(z, ck)), to enable the model to learn the best regime
for each similarity metric, thus improving the performances of all metrics. To further understand the
role of α, we analyze the class-wise cross-entropy loss function, Jk(φ, α),1

Jk(φ, α) =

(cid:88)

(cid:104)
αd(fφ(xi), ck) + log

(cid:88)

exp(−αd(fφ(xi), cj))

(1)

(cid:105)

,

xi∈Qk

j

where Qk = {(xi, yi) ∈ Q : yi = k} is the query set corresponding to the class k. Its gradient,
which is used to update parameters φ is given by the following expression:

∂
∂φ

Jk(φ, α) = α

d(fφ(xi), ck) −

(cid:34)

∂
∂φ

(cid:88)

xi∈Qk

(cid:80)

j exp(−αd(fφ(xi), cj)) ∂

∂φ d(fφ(xi), cj)

(cid:35)

(cid:80)

j exp(−αd(fφ(xi), cj))

.

(2)

1Note that the total loss is simply J(φ, α) = (cid:80)

k Jk(φ, α)

3

Figure 1: Proposed few-shot architecture. Blocks with shared parameters have dashed border.

At ﬁrst glance, the effect of α on the expression of the derivative is twofold: (i) an overall scaling,
and (ii) regulating the sharpness of weighting in the second term inside the brackets on the RHS.
Below we explore the behavior of the α-normalized2 gradient in the limits α → 0 and α → ∞.
Lemma 1 (Metric scaling). If the following assumptions hold:
(cid:12)
(cid:12)
(cid:12)

A1 : d(fφ(x), ck) (cid:54)= d(fφ(x(cid:48)), ck), ∀k, x (cid:54)= x(cid:48) ∈ Qk; A2 :

(cid:12)
∂
(cid:12)
(cid:12) < ∞, ∀x, c, φ,
∂φ d(fφ(x), c)

then it is true that:
∂
∂φ

lim
α→0

1
α

Jk(φ, α) =

d(fφ(xi), ck) −

(cid:104) K − 1
K

∂
∂φ

1
K

∂
∂φ

(cid:88)

j(cid:54)=k

(cid:105)
d(fφ(xi), cj)

,

lim
α→∞

1
α

∂
∂φ

Jk(φ, α) =

(cid:104) ∂
∂φ

d(fφ(xi), ck) −

d(fφ(xi), cj∗

i

(cid:105)
)

;

∂
∂φ

(cid:88)

xi∈Qk
(cid:88)

xi∈Qk

(3)

(4)

where j∗

i = arg minj d(fφ(xi), cj).

Proof. Please refer to Appendix A.

From Eq. (3), it is clear that for small α values, the ﬁrst term minimizes the embedding distance
between query samples and their corresponding prototypes. The second term maximizes the embed-
ding distance between the samples and the prototypes of the non-belonging categories. For large α
values (Eq. (4)), the ﬁrst term is the same as in Eq. (3); while the second term maximizes the distance
i = k (no error), the
of the sample with the closest wrongly assigned prototype cj∗
derivative contribution of the point xi is zero. This is equivalent to learning only from the hardest
examples resulting in association errors. Thus, the two different regimes of α favor either minimizing
the overlap of the sample distributions or correcting cluster assignments sample-wise.

(if any). If j∗

i

The large α regime is more directly related to resolving the few-shot classiﬁcation errors. At the
same time, the update strategy generated in this regime has a drawback. As the optimization proceeds
and the classiﬁcation accuracy increases, the number of incorrectly classiﬁed samples reduces on
average, and this leads to the reduction in the average effective batch size (more samples generate
zero derivatives). Therefore, our hypothesis is that there is an optimal value of scaling parameter α
for a given combination of dataset, metric and task. Section 3.4 empirically demonstrates that the
optimal value of α indeed exists and it can be e.g. cross-validated on a validation set.

2.2 Task conditioning

Up until now we assumed the feature extractor fφ(·) to be task-independent. A dynamic task-
conditioned feature extractor should be better suited for ﬁnding correct associations between given
sample set class representations and query samples, this is implicitly done by Vinyals et al. [33]
with a bidirectional LSTM as a postprocessing of a ﬁxed feature extractor. Differently, we explicitly
deﬁne a dynamic feature extractor fφ(x, Γ), where Γ is the set of parameters predicted from a task
representation such that the performance of fφ(x, Γ) is optimized given the task sample set S. This

2The effect of α-related gradient scaling is trivial.

4

Table 1: mini-Imagenet (Vinyals et al. [33]), 5-way classiﬁcation results. †Our re-implementation.

1-shot

5-shot

10-shot

Meta Nets [22]
Matching Networks [33]
MAML [6]
Proto Nets [28]
Relation Net [29]
SNAIL [16]
Discriminative k-shot [1]
adaResNet [17]

Ours

43.4
46.6
48.7
49.4
50.4
55.7
56.3
56.9

58.5

60.6
60.0
63.1
68.2
65.3
68.9
73.9
71.9

76.7

-
-
-
74.3†
-
-
78.5
-

80.8

is related to the FILM conditioning layer [19] and conditional batch normalization [3, 18] of the form
h(cid:96)+1 = γ (cid:12) h(cid:96) + β, where γ and β are scaling and shift vectors applied to the layer h(cid:96). Concretely,
we propose to use the mean of the class prototypes as the task representation, c = 1
k ck, encode
K
it with a task embedding network (TEN), and predict layer-level element-wise scale and shift vectors
γ, β for each convolutional layer in the feature extractor (see Figures 1 and 2 in the Supplementary
Materials, Section S1). The task representation deﬁned as the mean of task class centroids (i) reduces
the dimensionality of the TEN input and (ii) replaces expensive RNN/CNN/attention modeling. On
the other hand, it is an effective way to cluster tasks. Tasks having larger number of similar classes in
common will tend to cluster closer in the task representation space.

(cid:80)

Our implementation of the TEN (see Supplementary Materials, Section S1 for more details) uses
two separate fully connected residual networks to generate vectors γ, β. Following the terminology
in [18], the γ parameter is learned in the delta regime, i.e. predicting deviation from unity. The
most critical component in being able to successfully train the TEN was the addition of the scalar L2
penalized post-multipliers γ0 and β0. They limit the effect of γ (and β) by encoding a prior belief
that all components of γ (and β) should be simultaneously close to zero for a given layer unless
task conditioning provides a signiﬁcant information gain for this layer. Mathematically, this can be
expressed as β = β0gθ(c) and γ = γ0hϕ(c) + 1, where gθ and hϕ are predictors of β and γ.

2.3 Architecture

The overall proposed few-shot classiﬁcation architecture is depicted in Fig. 1 (see Supplementary
Materials, Section S1 for more details). We employ ResNet-12 [8] as the backbone feature extractor.
It has 4 blocks of depth 3 with 3x3 kernels and shortcut connections. 2x2 max-pool is applied at
the end of each block. Convolutional layer depth starts with 64 ﬁlters and is doubled after every
max-pool. Note that this architecture is similar in spirit to architectures used in [1] and [17], but we
do not use any projection layers before or after the main backbone ResNet. On the ﬁrst pass over
sample set, the TEN predicts the values of γ and β parameters for each convolutional layer in the
feature extractor from the task representation. Next, the sample set and the query set are processed by
the feature extractor conditioned with the values of γ and β just generated. Both outputs are fed into
a similarity metric to ﬁnd an association between class prototypes and query instances. The output of
similarity metric is scaled by scalar α and is fed into a softmax layer.

2.4 Auxiliary task co-training

The TEN (Section 2.2) introduces additional complexity into the architecture via task conditioning
layers inserted after the convolutional and batch norm blocks. We empirically observed that simulta-
neously optimizing convolutional ﬁlters and the TEN is overly challenging. We solved the problem by
auxiliary co-training with an additional logit head (the normal 64-way classiﬁcation in mini-Imagenet
case). The auxiliary task is sampled with a probability that is annealed over episodes. We annealed it
using an exponential decay schedule of the form 0.9(cid:98)20t/T (cid:99), where T is the total number of training
episodes, t is episode index. The initial auxiliary task selection probability was cross-validated to
be 0.9 and the number of decay steps was chosen to be 20. We observed signiﬁcant positive effects
from the auxiliary task co-training (please refer to Section 3.4). The same positive effects were not

5

observed with simple pre-training of the feature extractor. We attribute this to the regularization
effects achieved via back-propagating auxiliary task gradients together with those of the main task.

It is of interest to note that the few-shot co-training with an auxiliary classiﬁcation task is related to
curriculum learning [24]. The auxiliary classiﬁcation problem could be considered a part of a simpler
curriculum that helps the learner acquire minimal skill level necessary before tackling on harder
few-shot classiﬁcation tasks. Being effective at feature extraction (i.e. at task representation) forms a
“prerequisite” at being effective at re-conditioning features based on the representation of a given task.

3 Experimental Results

Table 1 presents our key result in the context of existing state-of-the art. The ﬁve ﬁrst rows show
approaches that use the same feature extractor as [33], i.e. four stacked convolutions layers of 64
ﬁlters (32 in [22, 6] to avoid overﬁtting). In the following rows we include models like the one we
propose, which is based on resnet [8]. Concretely, SNAIL [16], adaResNet [17], and our architecture
use four residual blocks of three stacked 3 × 3 convolutional layers, each block followed by max
pooling. Differently, the feature extractor proposed in [1] is based on a ResNet-34 architecture with a
reduced number of features.

As it can be seen, the proposed algorithm signiﬁcantly improves over the existing state-of-the-art
results on the mini-Imagenet dataset. In the rest of the section we address the following research
questions: (i) can metric scaling improve few-shot classiﬁcation results? (Sections 3.2 and 3.4), (ii)
what are the contributions of each components of our proposed architecture? (Section 3.4), (iii) can
task conditioning improve few-shot classiﬁcation results and how important it is at different feature
extractor depths? (Sections 3.3 and 3.4), and (iv) can auxiliary classiﬁcation task co-training improve
accuracy on the few-shot classiﬁcation task? (Section 3.4).

3.1 Experimental setup and datasets

The details of the experimental and training setup are provided in Supplementary Materials, Section S3.
Note that we focused on mini-Imagenet [33] and Fewshot-CIFAR100 (introduced below) instead of
Omniglot [14, 33, 28] as the former ones are more challenging, and the error rate is more sensitive to
model improvements.

mini-Imagenet. The mini-Imagenet dataset was proposed by Vinyals et al. [33]. It has 100 classes,
with 600 84 × 84 images per class. Each task is generated by sampling 5 classes uniformly and
5 training samples per class, the remaining images from the 5 classes are used as query images to
compute accuracy. To perform meta-validation and meta-test on unseen tasks (and classes), we isolate
16 and 20 classes from the original set of 100, leaving 64 classes for the training tasks. We use exactly
the same train/validation/test split as the one suggested by Ravi and Larochelle [22].

Fewshot-CIFAR100. We introduce a new image based dataset based on CIFAR100 [11] for few-shot
learning. We will refer to it as FC100. The main motivation for introducing this new dataset is
to validate that the main results appearing in the experimental section generalize well beyond the
mini-Imagenet. The secondary motivation is that the FC100 is suited for faster few-shot scenario
prototyping than the mini-Imagenet and it presents a more challenging few-shot learning problem,
because of reduced image size. On top of that, we propose a class split in FC100 to minimize the
information overlap between splits to make it signiﬁcantly more challenging than e.g. Omniglot. The
original CIFAR100 dataset consists of 32 × 32 color images belonging to 100 different classes, 600
images per class. The 100 classes are further grouped into 20 superclasses. We split the dataset by
superclass, rather than by individual class to minimize the information overlap. Thus the train split
contains 60 classes belonging to 12 superclasses, the validation and test contain 20 classes belonging
to 5 superclasses each. The exact class split is provided in Supplementary Materials, Section S2. The
tasks are sampled uniformly at random within train, validation and test subsets. Therefore, each task
with high probability contains samples belonging to classes from several superclasses.

3.2 On the similarity metric

We re-implemented prototypical networks [28], and use the Euclidean and the cosine similarity to
test the effects of scaling (see Section 2). We closely follow the experimental setup deﬁned by Snell

6

Table 2: Average classiﬁcation accuracy in percent with 95% conﬁdence interval. 5-shot, 5 way
classiﬁcation task. The three last rows correspond to our implementation, ﬁrst with euclidean distance,
second with cosine distance, and third with the scaled cosine distance.

Proto Nets [28]
Proto Nets
Prototypical Cosine
Prototypical Cosine Scaled

mini-Imagenet

5-way train
65.8 ± 0.7
67.7 ± 0.2
54.5 ± 1.1
68.2 ± 0.8

20-way train
68.2 ± 0.7
68.9 ± 0.3
53.9 ± 0.6
68.1 ± 0.7

FC100

5-way train
N/A
51.1 ± 0.2
40.9 ± 0.6
51.0 ± 0.6

20-way train
N/A
50.3 ± 0.3
37.1 ± 1.9
49.6 ± 0.5

(a) Results on mini-Imagenet.

(b) Results on FC100.

Figure 2: Distribution of the absolute values of the TEN scaling and bias parameters γ0 and β0 across
layers of ResNet feature extractor. X-axes depict layer number in both subplots. Higher convolutional
layers are located closer to the ﬁnal softmax layer.

et al. [28] (same feature extractor and training procedure). The scaling parameter α used on the last
row was cross-validated on the validation set. Results are presented in Table 2.

As it can be seen in row two of Table 2, our re-implementation of Proto Nets [28] obtained slightly
better performance (68.9% and 67.7%) in 20-way and 5-way training scenarios respectively by
increasing the number of training steps from 20K to 40K3.

Importantly, we conﬁrm the hypothesis that the improvement attributed to the Euclidean distance
in [28] was due to a scaling effect. Namely, we show that the scaled cosine similarity matches
very closely the performance of the Euclidean metric, with an improvement of 14 percentage points
on the mini-Imagenet (similar results on FC100) over the non-scaled version. In order to control
for the potential effect that the scaling parameter α may have on the learning rate as indicated by
Equation (2) training was performed using multiple initial learning rates (covering the range between
0.0005 and 0.01), obtaining similar accuracy each time. Hereinafter, we report the results with
the Euclidean metric for brevity, since the cosine produces similar results. Moreover, since the
prototypical approach with Euclidean distance as well as with the scaled cosine are close and both
are superior to [33], we base our results on [28].

3.3 TEN importance across layers

We hypothesized in Section 2.2 that the TEN conditioning should not be equally important at all
depths. Fig. 2 depicts the boxplot of the empirical observations of the learned TEN post-multipliers4
γ0 and β0 at different depths of the feature extractor. We can see that for the multiplier γ, the absolute
value of its scale γ0 tends to increase as we approach the softmax layer. Interestingly, peaks can be
observed every 3 layers (layers 3, 6, 9, 12). The peaks correspond to the location of the convolutional
layers preceding the max-pool layers. For the bias parameter β0, the only layer having a large absolute
value of its scale is the last layer, before the softmax. We attribute the observed pattern to the fact
that the shallower layers in the feature extractor tend to be less task-speciﬁc than the deeper layers.
Following this intuition, we performed experiments in which we (i) kept the TEN injection solely in

3With 20K steps it was possible to recover the exact original performance reported in Snell et al. [28], which

is not included in Table 2 for the sake of brevity.

4Larger absolute values of γ0 and β0 imply a larger inﬂuence of their respective TEN layers

7

Table 3: Average classiﬁcation accuracy (%) with 95% conﬁdence interval on the 5 way classiﬁcation
task, and training with the Euclidean distance. The scale parameter is cross-validated on the validation
set. AT: auxiliary co-training. TC: task conditioning with TEN.

α AT TC

mini-Imagenet
1-shot
56.5 ± 0.4
(cid:88)
56.8 ± 0.3
(cid:88) (cid:88)
58.0 ± 0.3
(cid:88)
(cid:88) 54.4 ± 0.3
(cid:88) (cid:88) (cid:88) 58.5 ± 0.3

5-shot
74.2 ± 0.2
75.7 ± 0.2
75.6 ± 0.4
74.6 ± 0.3
76.7 ± 0.3

10-shot
78.6 ± 0.4
79.6 ± 0.4
80.0 ± 0.3
78.7 ± 0.4
80.8 ± 0.3

FC100
1-shot
37.8 ± 0.4
38.0 ± 0.3
39.0 ± 0.4
37.8 ± 0.2
40.1 ± 0.4

5-shot
53.3 ± 0.5
54.0 ± 0.5
54.7 ± 0.5
54.0 ± 0.7
56.1 ± 0.4

10-shot
58.7 ± 0.4
59.8 ± 0.3
60.4 ± 0.4
58.8 ± 0.3
61.6 ± 0.5

(a) Scaled Euclidean. mini-Imagenet.

(b) Scaled Euclidean. FC100.

(c) Scaled Euclidean with TEN. mini-Imagenet.

(d) Scaled Euclidean with TEN. FC100.

Figure 3: Metric scale parameter α cross-validation results.

layers preceding the max pool and (ii) kept the TEN injection only in the very last layer. Interestingly,
we saw that TEN layers with small weight still provide some positive contribution, although most of
the contribution is indeed provided by the layers preceding the max pool operation.

3.4 Ablation study

In this section, we study the impact in generalization accuracy of the scaling, task conditioning,
auxiliary co-training, and the feature extractor. Results are summarized in Table 3.

First, we validated the hypothesis that there is an optimal value of the metric scaling parameter (α)
for a given combination of dataset and metric, which is reﬂected in the inverse U-shape of the curves
in Fig. 3.

Second, we studied the effects of the task conditioning described in Section 2.2. No improvement
was observed for the task-conditioned ResNet-12 without auxiliary co-training (see Table 3). We
observed that learning useful features for the TEN and the main feature extractor at the same time
is hard and gets stuck in local extrema. The problem is solved by co-training on the auxiliary task
of predicting Imagenet labels using an additional fully-connected layer with softmax, see Section
2.4. In effect, we observed that auxiliary co-training provides two beneﬁts: (i) making the initial
convergence easier, and (ii) providing regularization on the few-shot learning task by forcing the
feature extractor to perform well on two decoupled tasks. The latter beneﬁt can only be observed
when the feature extraction unit is sufﬁciently decoupled on the main task and the auxiliary task via
the use of TEN (the feature extractor output is additionally adjusted on the target task using FILM).

As it can be seen in the last row of Tables 1 and 3, our model trained with TEN and auxiliary
co-training outperforms all the baselines and achieves state-of-the-art results.

4 Conclusions and Future Work

We proposed, analyzed, and empirically validated several improvements in the domain of few-shot
learning. We showed that the scaled cosine similarity performs at par with Euclidean distance,

8

unlike its unscaled counterpart. In fact, based on our results, we argue that the scaling factor is a
necessary standard component of any few-shot learning algorithm relying on a similarity metric
and the cross-entropy loss function. This is especially important in the context of ﬁnding new more
effective similarity measures for few-shot learning. Moreover, our theoretical analysis demonstrated
that simply scaling the similarity metric results in completely different regimes of parameter updates
when using softmax and categorical cross-entropy. We also identiﬁed that the optimal performance
is achieved in between two asymptotic regimes of the softmax. This poses the research question of
explicitly designing loss functions and the α schedules optimal for few-shot learning. We further
proposed task representation conditioning as a way to improve the performance of a feature extractor
on the few-shot classiﬁcation task. In this context, designing more powerful task representations, for
example, based on higher order statistics of class embeddings, looks like a very promising venue for
future work. The experimental results obtained on two independent challenging datasets demonstrated
that the proposed approach signiﬁcantly improves over existing results and achieves state-of-the-art
on few-shot image classiﬁcation task.

Appendix

A Proof of Lemma 1

First, consider the case α → 0. Denoting zφ

i = fφ(xi) we have:

lim
α→0

1
α

∂
∂φ

Jk(φ, α) =

d(zφ

i , ck) − lim
α→0

(cid:80)

j exp(−αd(zφ

i , cj)) ∂
j exp(−αd(zφ

∂φ d(zφ
i , cj))

(cid:80)

i , cj)

∂
∂φ

∂
∂φ

(cid:88)

xi∈Qk
(cid:88)

xi∈Qk
(cid:88)

xi∈Qk

=

=

d(zφ

i , ck) −

1
K

(cid:88)

j

∂
∂φ

d(zφ

i , cj)

K − 1
K

∂
∂φ

d(zφ

i , ck) −

1
K

∂
∂φ

(cid:88)

j(cid:54)=k

d(zφ

i , cj).

Second, consider the case α → ∞:

lim
α→∞

1
α

∂
∂φ

Jk(φ, α) =

d(zφ

i , ck) −

(cid:88)

exp(−αd(zφ
(cid:80)

lim
α→∞

(cid:88)

xi∈Qk

(cid:88)

=

xi∈Qk

∂
∂φ

∂
∂φ

d(zφ

i , ck) −

(cid:88)

lim
α→∞

1 + (cid:80)

j

j

i , cj)

∂φ d(zφ
i , c(cid:96)))

i , cj)) ∂
(cid:96) exp(−αd(zφ
∂φ d(zφ
(cid:96)(cid:54)=j exp(−α[d(zφ

∂

i , cj)
i , c(cid:96)) − d(zφ

.

i , cj)])

It is obvious that whenever at least one of the exponential terms in the denominator in the expression
above has positive rate, corresponding to the case ∃(cid:96) (cid:54)= j : [d(zφ
i , cj)] < 0, the ratio
converges to zero as α → ∞ under assumption A2. The only case when the limit is non-zero is
when cj is the prototype closest to the query point xi. If we deﬁne the index of this prototype as
i = arg minj d(zφ
j∗
)] > 0, leading
(under additional assumption A1) to:

i , cj), then the following holds: ∀(cid:96) (cid:54)= j∗

i , c(cid:96)) − d(zφ

i , c(cid:96)) − d(zφ

i : [d(zφ

i , cj∗

i

lim
α→∞

1 + (cid:80)

(cid:96)(cid:54)=j exp(−α[d(zφ

i , c(cid:96)) − d(zφ

i , cj∗

i

)])

= 1.

Therefore, (4) follows.

Acknowledgements

Authors acknowledge the support of the Spanish project TIN2015-65464-R (MINECO/FEDER), the
2016FI B 01163 grant of Generalitat de Catalunya. Authors would like to thank Nicolas Chapados,
Adam Salvail and Rachel Samson as well as anonymous reviewers for their careful reading of the
manuscript and for providing constructive feedback and valuable suggestions.

1

9

References
[1] M. Bauer, M. Rojas-Carulla, J. B. ´Swi ˛atkowski, B. Schölkopf, and R. E. Turner. Discriminative

k-shot learning using probabilistic models. arXiv preprint arXiv:1706.00326, 2017.

[2] S. Carey and E. Bartlett. Acquiring a single new word. 1978.
[3] V. Dumoulin, J. Shlens, and M. Kudlur. A learned representation for artistic style. ICLR, 2017.
[4] H. Edwards and A. Storkey. Towards a neural statistician. arXiv preprint arXiv:1606.02185,

[5] M. Fink. Object classiﬁcation from a single example utilizing class relevance metrics. In NIPS,

2016.

pages 449–456, 2005.

[6] C. Finn, P. Abbeel, and S. Levine. Model-agnostic meta-learning for fast adaptation of deep

networks. In ICML, pages 1126–1135, 2017.

[7] R. Hadsell, S. Chopra, and Y. LeCun. Dimensionality reduction by learning an invariant

mapping. In CVPR, volume 2, pages 1735–1742. IEEE, 2006.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. CVPR,

pages 770–778, 2016.

[9] G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge in a neural network. In NIPS
Deep Learning and Representation Learning Workshop, 2015. URL http://arxiv.org/
abs/1503.02531.

[10] G. Koch, R. Zemel, and R. Salakhutdinov. Siamese neural networks for one-shot image

recognition. In ICML Deep Learning Workshop, volume 2, 2015.
[11] A. Krizhevsky. Learning multiple layers of features from tiny images.

, University of Toronto,

2009.

[12] A. Lacoste, T. Boquet, N. Rostamzadeh, B. Oreshkin, W. Chung, and D. Krueger. Deep prior.

arXiv preprint arXiv:1712.05016, 2017.

[13] B. M. Lake, R. R. Salakhutdinov, and J. Tenenbaum. One-shot learning by inverting a composi-

tional causal process. In NIPS, pages 2526–2534, 2013.

[14] B. M. Lake, R. Salakhutdinov, and J. B. Tenenbaum. Human-level concept learning through

probabilistic program induction. Science, 350(6266):1332–1338, 2015.

[15] F.-F. Li, R. Fergus, and P. Perona. One-shot learning of object categories. PAMI, 28(4):594–611,

2006.

ICLR, 2018.

[16] N. Mishra, M. Rohaninejad, X. Chen, and P. Abbeel. A simple neural attentive meta-learner. In

[17] T. Munkhdalai, X. Yuan, S. Mehri, and A. Trischler. Rapid adaptation with conditionally shifted

neurons. In ICML, 2018.

[18] E. Perez, H. de Vries, F. Strub, V. Dumoulin, and A. C. Courville. Learning visual reasoning

without strong priors. CoRR, abs/1707.03017, 2017.

[19] E. Perez, F. Strub, H. De Vries, V. Dumoulin, and A. Courville. Film: Visual reasoning with a

general conditioning layer. In AAAI, 2018.

[20] B. Plank and H. M. Alonso. When is multitask learning effective? Semantic sequence prediction
under varying data conditions. In Proceedings of the 15th Conference of the European Chapter
of the Association for Computational Linguistics, EACL 2017, Valencia, Spain, pages 44–53,
2017.

[21] P. Ramachandran, B. Zoph, and Q. V. Lea. Searching for activation functions. In ICLR, 2018.
[22] S. Ravi and H. Larochelle. Optimization as a model for few-shot learning. In ICLR, 2016.
[23] M. Ren, E. Triantaﬁllou, S. Ravi, J. Snell, K. Swersky, J. B. Tenenbaum, H. Larochelle,
and R. S. Zemel. Meta-learning for semi-supervised few-shot classiﬁcation. arXiv preprint
arXiv:1803.00676, 2018.

[24] A. Santoro, S. Bartunov, M. Botvinick, D. Wierstra, and T. Lillicrap. Meta-learning with
memory-augmented neural networks. In M. F. Balcan and K. Q. Weinberger, editors, ICML,
volume 48 of Proceedings of Machine Learning Research, pages 1842–1850, New York, New
York, USA, 20–22 Jun 2016. PMLR.

10

[25] J. Schmidhuber, J. Zhao, and M. Wiering. Shifting inductive bias with success-story algorithm,
adaptive levin search, and incremental self-improvement. Machine Learning, 28(1):105–130,
1997.

[26] F. Schroff, D. Kalenichenko, and J. Philbin. Facenet: A uniﬁed embedding for face recognition

and clustering. In CVPR, pages 815–823, 2015.

[27] P. Shyam, S. Gupta, and A. Dukkipati. Attentive recurrent comparators. In ICML, pages

[28] J. Snell, K. Swersky, and R. S. Zemel. Prototypical networks for few-shot learning. In NIPS,

3173–3181, 2017.

pages 4080–4090, 2017.

[29] F. Sung, Y. Yang, L. Zhang, T. Xiang, P. H. Torr, and T. M. Hospedales. Learning to compare:

Relation network for few-shot learning. In CVPR, 2018.

[30] Y. Taigman, M. Yang, M. Ranzato, and L. Wolf. Web-scale training for face identiﬁcation. In

CVPR, pages 2746–2754, 2015.

[31] S. Thrun. Lifelong learning algorithms. In Learning to learn, pages 181–209. Springer, 1998.
[32] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, Ł. Kaiser, and

I. Polosukhin. Attention is all you need. In NIPS, pages 6000–6010, 2017.

[33] O. Vinyals, C. Blundell, T. Lillicrap, K. Kavukcuoglu, and D. Wierstra. Matching networks for

one shot learning. In NIPS, pages 3630–3638. 2016.

[34] Y.-X. Wang, R. Girshick, M. Hebert, and B. Hariharan. Low-Shot Learning from Imaginary

Data. In CVPR, 2018.

11

Supplementary Materials. TADAM: Task dependent adaptive metric for
improved few-shot learning

S1 Architecture details

(a) Convolutional block with TEN.

(b) Resnet block with TEN.

Figure 1: Components of the ResNet-12 feature extractor.

ResNet-12 architecture details. The resnet blocks used in the ResNet-12 feature extractor are
shown in Fig. 1. The feature extractor consists of 4 resnet blocks shown in Fig. 1b followed by a
global average-pool. Each resnet block consists of 3 convolutional blocks shown in Fig. 1a followed
by 2x2 max-pool. Each convolutional layer is followed by a batch norm layer and the swish-1
activation function proposed by Ramachandran et al. [21]. We found that the fully convolutional
architecture performs best as a few-shot feature extractor, both on mini-Imagenet and on FC100. We
found that inserting additional projection layers after the ResNet stack was always detrimental to the
few-shot performance. We cross-validated this result with multiple hyper-parameter settings for the
projection layers (number of layers, layer widths, and dropout). In addition to that, we observed that
adding extra convolutional layers and max-pool layers before the ResNet stack was detrimental to the
few-shot performance. Therefore, we used fully convolutional, fully residual architecture in all our
experiments.

The hyperparameters for the convolutional layers are as follows. The number of ﬁlters for the ﬁrst
ResNet block was set to 64 and it was doubled after each max-pool block. The L2 regularizer weight
was cross-validated at 0.0005 for each layer.

TEN architecture details. The detailed architecture of the TEN block is depicted in Fig. 2. Our
implementation of the TEN uses two separate fully connected residual networks to generate vectors
γ, β. We cross-validated the number of layers to be 3. The ﬁrst layer projects the task representation
into the target width. The target width is equal to the number of ﬁlters of the convolutional layer that
the TEN block is conditioning (see Fig. 1a). The remaining layers operate at the target width and
each of them has a skip connection. The L2 regularizer weight for γ0 and β0 was cross-validated
at 0.01 for each layer. We found that smaller values led to considerable overﬁt. In addition to that,
we were not able to successfully train TEN without γ0 and β0, because the training tended to be
stuck in local minima where the overall effect of introducing TEN was detrimental to the few-shot
performance of the architecture.

1

Figure 2: Architecture of the TEN block.

S2 Few-shot CIFAR100 details

Train split. Super-class labels: {1, 2, 3, 4, 5, 6, 9, 10, 15, 17, 18, 19}; super-class names: {ﬁsh,
ﬂowers, food_containers, fruit_and_vegetables, household_electrical_devices, household_furniture,
large_man-made_outdoor_things, large_natural_outdoor_scenes, reptiles, trees, vehicles_1, vehi-
cles_2}.

Validation split. Super-class labels: {8, 11, 13, 16}; super-class names: {large_carnivores,
large_omnivores_and_herbivores, non-insect_invertebrates, small_mammals}.

Test split. Super-class labels: {0, 7, 12, 14}; super-class names: {aquatic_mammals, insects,
medium_mammals, people}.

We would like to stress that we still sample all the tasks uniformly at random within train, validation
and test subsets. Therefore, each task with very high probability contains samples belonging to
classes from several superclasses.

S3 Training procedure details

Episode composition. The training procedure composes a few-shot training batch from several tasks,
where a task is understood to be a ﬁxed selection of 5 classes. We found empirically that for the
5-shot scenario the best number of tasks per batch was 2, for 10-shot it was 1 and for 1-shot it was 5.
The sample set in each training batch was created using the same number of shots as in the target
deployment (test) scenario. The images in the training query set were sampled uniformly at random.
We observed that the best results were obtained when the number of query images was approximately
equal to the total number of sample images in the batch. Thus we used 32 query images per task for
5-shot, 64 for 10-shot and 12 for 1-shot.

The auxiliary classiﬁcation task is based on the usual 64-way training (for mini-Imagenet). Co-
training uses a ﬁxed batch of 64 image samples sampled uniformly at random from the training set.
The learning rate annealing schedule for the auxiliary task is synchronized with that of the main
few-shot task.

Optimization, scheduling and learning rate. When training with auxiliary classiﬁcation task we
used total 30000 episodes for training on mini-Imagenet and 10000 episodes for training on FC100.
The results obtained with no auxiliary classiﬁcation co-training used twice as many episodes. To
obtain all our results we used SGD with momentum 0.9 and initial learning rate set at 0.1. The
learning rate was annealed by a factor of 10 halfway through the training and two more times every
2500 episodes. The reported numbers are calculated using early-stopping based on validation set
classiﬁcation error tracking.

Classiﬁcation accuracy evaluation. The accuracy is evaluated using 10 random restarts of the
optimization procedure and based on 500 randomly generated tasks each having 100 random query
samples.

Reproducing results in [28]. To reproduce the results reported in [28] we used exactly the same
setup and network architecture reported in the original paper.

2

9
1
0
2
 
n
a
J
 
5
2
 
 
]

G
L
.
s
c
[
 
 
4
v
3
2
1
0
1
.
5
0
8
1
:
v
i
X
r
a

TADAM: Task dependent adaptive metric for
improved few-shot learning

Boris N. Oreshkin
Element AI
boris@elementai.com

Pau Rodriguez
Element AI, CVC-UAB
pau.rodriguez@elementai.com

Alexandre Lacoste
Element AI
allac@elementai.com

Abstract

Few-shot learning has become essential for producing models that generalize
from few examples. In this work, we identify that metric scaling and metric task
conditioning are important to improve the performance of few-shot algorithms.
Our analysis reveals that simple metric scaling completely changes the nature of
few-shot algorithm parameter updates. Metric scaling provides improvements
up to 14% in accuracy for certain metrics on the mini-Imagenet 5-way 5-shot
classiﬁcation task. We further propose a simple and effective way of conditioning a
learner on the task sample set, resulting in learning a task-dependent metric space.
Moreover, we propose and empirically test a practical end-to-end optimization
procedure based on auxiliary task co-training to learn a task-dependent metric
space. The resulting few-shot learning model based on the task-dependent scaled
metric achieves state of the art on mini-Imagenet. We conﬁrm these results on
another few-shot dataset that we introduce in this paper based on CIFAR100. Our
code is publicly available at https://github.com/ElementAI/TADAM.

1

Introduction

Humans can learn to identify new categories from few examples, even from a single one [2]. Few-shot
learning has recently attracted signiﬁcant attention [33, 28, 29, 24, 17, 16], as it aims to produce
models that can generalize from small amounts of labeled data. In the few-shot setting, one aims to
learn a model that extracts information from a set of support examples (sample set) to predict the
labels of instances from a query set. Recently, this problem has been reframed into the meta-learning
framework [22], i.e. the model is trained so that given a sample set or task, produces a classiﬁer for
that speciﬁc task. Thus, the model is exposed to different tasks (or episodes) during the training
phase, and it is evaluated on a non-overlapping set of new tasks [33].

Two recent approaches have attracted signiﬁcant attention in the few-shot learning domain: Matching
Networks [33], and Prototypical Networks [28]. In both approaches, the sample set and the query set
are embedded with a neural network, and nearest neighbor classiﬁcation is used given a metric in the
embedded space. Since then, the problem of learning the most suitable metric for few-shot learning
has been of interest to the ﬁeld [33, 28, 29, 17, 16]. Learning a metric space in the context of few-shot
learning generally implies identifying a suitable similarity measure (e.g. cosine or Euclidean), a
feature extractor mapping raw inputs onto similarity space (e.g. convolutional stack for images or
LSTM stack for text), a cost function to drive the parameter updates, and a training scheme (often
episodic). Although the individual components in this list have been explored, the relationships
between them have not received considerable attention.

In the current work we aim to close this gap. We show that taking into account the interaction
between the identiﬁed components leads to signiﬁcant improvements in the few-shot generalization.
In particular, we show that a non-trivial interaction between the similarity metric and the cost function
can be exploited to improve the performance of a given similarity metric via scaling. Using this

32nd Conference on Neural Information Processing Systems (NeurIPS 2018), Montréal, Canada.

mechanism we close more than the 10% gap in performance between the cosine similarity and
the Euclidean distance reported in [28]. Even more importantly, we extend the very notion of the
metric space by making it task dependent via conditioning the feature extractor on the speciﬁc task.
However, learning such a space is in general more challenging than learning a static one. Hence,
we ﬁnd a solution in exploiting the interaction between the conditioned feature extractor and the
training procedure based on auxiliary co-training on a simpler task. Our proposed few-shot learning
architecture based on task-dependent scaled metric achieves superior performance on two challenging
few-shot image classiﬁcation datasets. It shows up to 8.5% absolute accuracy improvement over the
baseline (Snell et al. [28]), and 4.8% over the state-of-the-art [17] on the 5-shot, 5-way mini-Imagenet
classiﬁcation task, reaching 76.7% of accuracy, which is the best-reported accuracy on this dataset.

1.1 Background

We consider the episodic M -shot, K-way classiﬁcation scenario. In this scenario, a learning algorithm
is provided with a sample set S = {(xi, yi)}M K
i=1 consisting of M examples for each of K classes and
a query set Q = {(xi, yi)}q
i=1 for a task to be solved within a given episode. The sample set provides
the task information via observations xi ∈ RDx and their respective class labels yi ∈ {1, . . . , K}.
Given the information in the sample set S, the learning algorithm is able to classify individual
samples from the query set Q. Next, we deﬁne a similarity measure d : RDz×Dz → R. Note that
d does not have to satisfy the classical metric properties (non-negativity, symmetry, subadditivity)
to be useful in the context of few-shot learning. The dimensionality of metric input, Dz, will most
naturally be related to the size of embedding created by a (deep) feature extractor fφ : RDx → RDz ,
parameterized by φ, mapping x to z. Here φ ∈ RDφ is a list of parameters deﬁning fφ, e.g. a list of
weights in a neural network. The set of representations (fφ(xi), yi), ∀(xi, yi) ∈ S can directly be
used to solve the few-shot learning classiﬁcation problem by association. For example, Matching
networks [33] use sample-wise attention mechanism to perform kernel label regression. Instead,
Snell et al. [28] deﬁned a feature representation ck for each class k as the mean over embeddings
belonging to Sk: ck = 1
fφ(xi). To learn φ, they minimize − log pφ(y = k|x) using the
K
softmax over prototypes ck to deﬁne the likelihood: pφ(y = k|x) = softmax(−d(fφ(x), ck)).

xi∈Sk

(cid:80)

1.2 Summary of contributions

Metric Scaling: To our knowledge, this is the ﬁrst study to (i) propose metric scaling to improve
performance of few-shot algorithms, (ii) mathematically analyze its effects on objective function
updates and (iii) empirically demonstrate its positive effects on few-shot performance.

Task Conditioning: We use a task encoding network to extract a task representation based on the
task’s sample set. This is used to inﬂuence the behavior of the feature extractor through FILM [19].

Auxiliary task co-training: We show that co-training the feature extraction on a conventional
supervised classiﬁcation task reduces training complexity and provides better generalization.

1.3 Related work

Three main approaches for solving the few-shot classiﬁcation problem can be identiﬁed in the
literature. The ﬁrst one, which is used in this work, is the meta-learning approach, i.e. learning a
model that, given a task (set of labeled data), produces a classiﬁer that generalizes across all tasks
[31, 25]. This is the case of Matching Networks [33], which optionally use a Recurrent Neural
Network (RNN) to accumulate information about a given task. In MAML [6], the parameters of an
arbitrary learner model are optimized so that they can be quickly adapted to a particular task. In
“Optimization as a model” [22], a learner model is adapted to a new episodic task by a recurrent meta-
learner producing efﬁcient parameter updates. A more general approach was proposed by Santoro
et al. [24], where the meta-learner is trained to represent entries from a sample set in an external
memory. Similarly, adaResNet [17] uses memory and the sample set to produce shift coefﬁcients on
the neuron activations of the query set classiﬁer. Many recent approaches focus on learning a metric
on the episodic feature space. Prototypical networks [28] use a feed-forward neural network to embed
the task examples and perform nearest neighbor classiﬁcation with the class centroids. The relation
network approach by Sung et al. [29] introduces a separate learnable similarity metric. SNAIL
[16] uses an explicit attention mechanism applicable both to supervised and to the sequence based

2

reinforcement learning tasks. It has also been shown that these approaches beneﬁt from leveraging
unlabeled and simulated data [23, 34].

A second approach aims to maximize the distance between examples from different classes [10].
Similarly, in [7], a contrastive loss function is used to learn to project data onto a manifold that is
invariant to deformations in the input space. In the same vein, in [5, 26, 30], triplet loss is used
for learning a representation for few-shot learning. The attentive recurrent comparators [27] go
beyond classical siamese approaches and use a recurrent architecture to learn to perform pairwise
comparisons and predict if the compared examples belong to the same class.

The third approach relies on Bayesian modeling of the prior distribution of the different categories
like in Li et al. [15], Bauer et al. [1], or Lake et al. [13], Edwards and Storkey [4], Lacoste et al. [12]
who rely on hierarchical Bayesian modeling.

As for task conditioning, [3, 18, 19] proposed conditional batch normalization for style transfer and
visual reasoning. Differently, we modify the conditioning scheme to adapt it to few-shot learning,
introducing γ0, β0 priors, and auxiliary co-training. In the few-shot learning context, task conditioning
ideas can be traced back to [33], although in an implicit form as there is no notion of task embedding.
In our work, we explicitly introduce a task representation (see Fig. 1) computed as the mean of the task
class centroids (task prototypes). This is much simpler than individual sample level LSTM/attention
models in [33]. Conditioning in [33] is applied as a postprocessing of the output of a ﬁxed feature
extractor. We propose to condition the feature extractor by predicting its own batch normalization
parameters thus making feature extractor behaviour task-dynamic without cumbersome ﬁne-tuning
on support set. In order to train the task conditioned architecture we use multitask training with
a usual 64-way classiﬁcation task. Even though auxiliary co-training is beneﬁcial for learning in
general, “little is known on when multitask learning works and whether there are data characteristics
that help to determine its success” [20]. We show that combining task conditioning and auxiliary
co-training is beneﬁcial in the context of few-shot learning.

The scaling and temperature adjustment in the softmax was discussed by Hinton et al. [9] in the
context of model distillation. We propose to use it in the context of the few-shot learning scenario
and provide novel theoretical and empirical results quantifying the effects of scaling parameter.

The rest of the paper is organized as follows. Section 2 describes our contributions in detail. Section 3
highlights the importance of each contribution via an ablation study. The study is performed over two
different benchmarks in the regime of 1-shot, 5-shot and 10-shot learning to verify if conclusions hold
across different setups. Finally, Section 4 concludes the paper and outlines future research directions.

2 Model Description

2.1 Metric Scaling

Snell et al. [28] using approach described in detail in Section 1.1 found that the Euclidean distance
outperformed the cosine distance used in Vinyals et al. [33]. We hypothesize that the improvement
could be directly attributed to the interaction of the different scaling of the metrics with the softmax.
Moreover, the dimensionality of the output is known to have a direct impact on the output scale
even for the Euclidean distance [32]. Hence, we propose to scale the distance metric by a learnable
temperature, α, pφ,α(y = k|x) = softmax(−αd(z, ck)), to enable the model to learn the best regime
for each similarity metric, thus improving the performances of all metrics. To further understand the
role of α, we analyze the class-wise cross-entropy loss function, Jk(φ, α),1

Jk(φ, α) =

(cid:88)

(cid:104)
αd(fφ(xi), ck) + log

(cid:88)

exp(−αd(fφ(xi), cj))

(1)

(cid:105)

,

xi∈Qk

j

where Qk = {(xi, yi) ∈ Q : yi = k} is the query set corresponding to the class k. Its gradient,
which is used to update parameters φ is given by the following expression:

∂
∂φ

Jk(φ, α) = α

d(fφ(xi), ck) −

(cid:34)

∂
∂φ

(cid:88)

xi∈Qk

(cid:80)

j exp(−αd(fφ(xi), cj)) ∂

∂φ d(fφ(xi), cj)

(cid:35)

(cid:80)

j exp(−αd(fφ(xi), cj))

.

(2)

1Note that the total loss is simply J(φ, α) = (cid:80)

k Jk(φ, α)

3

Figure 1: Proposed few-shot architecture. Blocks with shared parameters have dashed border.

At ﬁrst glance, the effect of α on the expression of the derivative is twofold: (i) an overall scaling,
and (ii) regulating the sharpness of weighting in the second term inside the brackets on the RHS.
Below we explore the behavior of the α-normalized2 gradient in the limits α → 0 and α → ∞.
Lemma 1 (Metric scaling). If the following assumptions hold:
(cid:12)
(cid:12)
(cid:12)

A1 : d(fφ(x), ck) (cid:54)= d(fφ(x(cid:48)), ck), ∀k, x (cid:54)= x(cid:48) ∈ Qk; A2 :

(cid:12)
∂
(cid:12)
(cid:12) < ∞, ∀x, c, φ,
∂φ d(fφ(x), c)

then it is true that:
∂
∂φ

lim
α→0

1
α

Jk(φ, α) =

d(fφ(xi), ck) −

(cid:104) K − 1
K

∂
∂φ

1
K

∂
∂φ

(cid:88)

j(cid:54)=k

(cid:105)
d(fφ(xi), cj)

,

lim
α→∞

1
α

∂
∂φ

Jk(φ, α) =

(cid:104) ∂
∂φ

d(fφ(xi), ck) −

d(fφ(xi), cj∗

i

(cid:105)
)

;

∂
∂φ

(cid:88)

xi∈Qk
(cid:88)

xi∈Qk

(3)

(4)

where j∗

i = arg minj d(fφ(xi), cj).

Proof. Please refer to Appendix A.

From Eq. (3), it is clear that for small α values, the ﬁrst term minimizes the embedding distance
between query samples and their corresponding prototypes. The second term maximizes the embed-
ding distance between the samples and the prototypes of the non-belonging categories. For large α
values (Eq. (4)), the ﬁrst term is the same as in Eq. (3); while the second term maximizes the distance
i = k (no error), the
of the sample with the closest wrongly assigned prototype cj∗
derivative contribution of the point xi is zero. This is equivalent to learning only from the hardest
examples resulting in association errors. Thus, the two different regimes of α favor either minimizing
the overlap of the sample distributions or correcting cluster assignments sample-wise.

(if any). If j∗

i

The large α regime is more directly related to resolving the few-shot classiﬁcation errors. At the
same time, the update strategy generated in this regime has a drawback. As the optimization proceeds
and the classiﬁcation accuracy increases, the number of incorrectly classiﬁed samples reduces on
average, and this leads to the reduction in the average effective batch size (more samples generate
zero derivatives). Therefore, our hypothesis is that there is an optimal value of scaling parameter α
for a given combination of dataset, metric and task. Section 3.4 empirically demonstrates that the
optimal value of α indeed exists and it can be e.g. cross-validated on a validation set.

2.2 Task conditioning

Up until now we assumed the feature extractor fφ(·) to be task-independent. A dynamic task-
conditioned feature extractor should be better suited for ﬁnding correct associations between given
sample set class representations and query samples, this is implicitly done by Vinyals et al. [33]
with a bidirectional LSTM as a postprocessing of a ﬁxed feature extractor. Differently, we explicitly
deﬁne a dynamic feature extractor fφ(x, Γ), where Γ is the set of parameters predicted from a task
representation such that the performance of fφ(x, Γ) is optimized given the task sample set S. This

2The effect of α-related gradient scaling is trivial.

4

Table 1: mini-Imagenet (Vinyals et al. [33]), 5-way classiﬁcation results. †Our re-implementation.

1-shot

5-shot

10-shot

Meta Nets [22]
Matching Networks [33]
MAML [6]
Proto Nets [28]
Relation Net [29]
SNAIL [16]
Discriminative k-shot [1]
adaResNet [17]

Ours

43.4
46.6
48.7
49.4
50.4
55.7
56.3
56.9

58.5

60.6
60.0
63.1
68.2
65.3
68.9
73.9
71.9

76.7

-
-
-
74.3†
-
-
78.5
-

80.8

is related to the FILM conditioning layer [19] and conditional batch normalization [3, 18] of the form
h(cid:96)+1 = γ (cid:12) h(cid:96) + β, where γ and β are scaling and shift vectors applied to the layer h(cid:96). Concretely,
we propose to use the mean of the class prototypes as the task representation, c = 1
k ck, encode
K
it with a task embedding network (TEN), and predict layer-level element-wise scale and shift vectors
γ, β for each convolutional layer in the feature extractor (see Figures 1 and 2 in the Supplementary
Materials, Section S1). The task representation deﬁned as the mean of task class centroids (i) reduces
the dimensionality of the TEN input and (ii) replaces expensive RNN/CNN/attention modeling. On
the other hand, it is an effective way to cluster tasks. Tasks having larger number of similar classes in
common will tend to cluster closer in the task representation space.

(cid:80)

Our implementation of the TEN (see Supplementary Materials, Section S1 for more details) uses
two separate fully connected residual networks to generate vectors γ, β. Following the terminology
in [18], the γ parameter is learned in the delta regime, i.e. predicting deviation from unity. The
most critical component in being able to successfully train the TEN was the addition of the scalar L2
penalized post-multipliers γ0 and β0. They limit the effect of γ (and β) by encoding a prior belief
that all components of γ (and β) should be simultaneously close to zero for a given layer unless
task conditioning provides a signiﬁcant information gain for this layer. Mathematically, this can be
expressed as β = β0gθ(c) and γ = γ0hϕ(c) + 1, where gθ and hϕ are predictors of β and γ.

2.3 Architecture

The overall proposed few-shot classiﬁcation architecture is depicted in Fig. 1 (see Supplementary
Materials, Section S1 for more details). We employ ResNet-12 [8] as the backbone feature extractor.
It has 4 blocks of depth 3 with 3x3 kernels and shortcut connections. 2x2 max-pool is applied at
the end of each block. Convolutional layer depth starts with 64 ﬁlters and is doubled after every
max-pool. Note that this architecture is similar in spirit to architectures used in [1] and [17], but we
do not use any projection layers before or after the main backbone ResNet. On the ﬁrst pass over
sample set, the TEN predicts the values of γ and β parameters for each convolutional layer in the
feature extractor from the task representation. Next, the sample set and the query set are processed by
the feature extractor conditioned with the values of γ and β just generated. Both outputs are fed into
a similarity metric to ﬁnd an association between class prototypes and query instances. The output of
similarity metric is scaled by scalar α and is fed into a softmax layer.

2.4 Auxiliary task co-training

The TEN (Section 2.2) introduces additional complexity into the architecture via task conditioning
layers inserted after the convolutional and batch norm blocks. We empirically observed that simulta-
neously optimizing convolutional ﬁlters and the TEN is overly challenging. We solved the problem by
auxiliary co-training with an additional logit head (the normal 64-way classiﬁcation in mini-Imagenet
case). The auxiliary task is sampled with a probability that is annealed over episodes. We annealed it
using an exponential decay schedule of the form 0.9(cid:98)20t/T (cid:99), where T is the total number of training
episodes, t is episode index. The initial auxiliary task selection probability was cross-validated to
be 0.9 and the number of decay steps was chosen to be 20. We observed signiﬁcant positive effects
from the auxiliary task co-training (please refer to Section 3.4). The same positive effects were not

5

observed with simple pre-training of the feature extractor. We attribute this to the regularization
effects achieved via back-propagating auxiliary task gradients together with those of the main task.

It is of interest to note that the few-shot co-training with an auxiliary classiﬁcation task is related to
curriculum learning [24]. The auxiliary classiﬁcation problem could be considered a part of a simpler
curriculum that helps the learner acquire minimal skill level necessary before tackling on harder
few-shot classiﬁcation tasks. Being effective at feature extraction (i.e. at task representation) forms a
“prerequisite” at being effective at re-conditioning features based on the representation of a given task.

3 Experimental Results

Table 1 presents our key result in the context of existing state-of-the art. The ﬁve ﬁrst rows show
approaches that use the same feature extractor as [33], i.e. four stacked convolutions layers of 64
ﬁlters (32 in [22, 6] to avoid overﬁtting). In the following rows we include models like the one we
propose, which is based on resnet [8]. Concretely, SNAIL [16], adaResNet [17], and our architecture
use four residual blocks of three stacked 3 × 3 convolutional layers, each block followed by max
pooling. Differently, the feature extractor proposed in [1] is based on a ResNet-34 architecture with a
reduced number of features.

As it can be seen, the proposed algorithm signiﬁcantly improves over the existing state-of-the-art
results on the mini-Imagenet dataset. In the rest of the section we address the following research
questions: (i) can metric scaling improve few-shot classiﬁcation results? (Sections 3.2 and 3.4), (ii)
what are the contributions of each components of our proposed architecture? (Section 3.4), (iii) can
task conditioning improve few-shot classiﬁcation results and how important it is at different feature
extractor depths? (Sections 3.3 and 3.4), and (iv) can auxiliary classiﬁcation task co-training improve
accuracy on the few-shot classiﬁcation task? (Section 3.4).

3.1 Experimental setup and datasets

The details of the experimental and training setup are provided in Supplementary Materials, Section S3.
Note that we focused on mini-Imagenet [33] and Fewshot-CIFAR100 (introduced below) instead of
Omniglot [14, 33, 28] as the former ones are more challenging, and the error rate is more sensitive to
model improvements.

mini-Imagenet. The mini-Imagenet dataset was proposed by Vinyals et al. [33]. It has 100 classes,
with 600 84 × 84 images per class. Each task is generated by sampling 5 classes uniformly and
5 training samples per class, the remaining images from the 5 classes are used as query images to
compute accuracy. To perform meta-validation and meta-test on unseen tasks (and classes), we isolate
16 and 20 classes from the original set of 100, leaving 64 classes for the training tasks. We use exactly
the same train/validation/test split as the one suggested by Ravi and Larochelle [22].

Fewshot-CIFAR100. We introduce a new image based dataset based on CIFAR100 [11] for few-shot
learning. We will refer to it as FC100. The main motivation for introducing this new dataset is
to validate that the main results appearing in the experimental section generalize well beyond the
mini-Imagenet. The secondary motivation is that the FC100 is suited for faster few-shot scenario
prototyping than the mini-Imagenet and it presents a more challenging few-shot learning problem,
because of reduced image size. On top of that, we propose a class split in FC100 to minimize the
information overlap between splits to make it signiﬁcantly more challenging than e.g. Omniglot. The
original CIFAR100 dataset consists of 32 × 32 color images belonging to 100 different classes, 600
images per class. The 100 classes are further grouped into 20 superclasses. We split the dataset by
superclass, rather than by individual class to minimize the information overlap. Thus the train split
contains 60 classes belonging to 12 superclasses, the validation and test contain 20 classes belonging
to 5 superclasses each. The exact class split is provided in Supplementary Materials, Section S2. The
tasks are sampled uniformly at random within train, validation and test subsets. Therefore, each task
with high probability contains samples belonging to classes from several superclasses.

3.2 On the similarity metric

We re-implemented prototypical networks [28], and use the Euclidean and the cosine similarity to
test the effects of scaling (see Section 2). We closely follow the experimental setup deﬁned by Snell

6

Table 2: Average classiﬁcation accuracy in percent with 95% conﬁdence interval. 5-shot, 5 way
classiﬁcation task. The three last rows correspond to our implementation, ﬁrst with euclidean distance,
second with cosine distance, and third with the scaled cosine distance.

Proto Nets [28]
Proto Nets
Prototypical Cosine
Prototypical Cosine Scaled

mini-Imagenet

5-way train
65.8 ± 0.7
67.7 ± 0.2
54.5 ± 1.1
68.2 ± 0.8

20-way train
68.2 ± 0.7
68.9 ± 0.3
53.9 ± 0.6
68.1 ± 0.7

FC100

5-way train
N/A
51.1 ± 0.2
40.9 ± 0.6
51.0 ± 0.6

20-way train
N/A
50.3 ± 0.3
37.1 ± 1.9
49.6 ± 0.5

(a) Results on mini-Imagenet.

(b) Results on FC100.

Figure 2: Distribution of the absolute values of the TEN scaling and bias parameters γ0 and β0 across
layers of ResNet feature extractor. X-axes depict layer number in both subplots. Higher convolutional
layers are located closer to the ﬁnal softmax layer.

et al. [28] (same feature extractor and training procedure). The scaling parameter α used on the last
row was cross-validated on the validation set. Results are presented in Table 2.

As it can be seen in row two of Table 2, our re-implementation of Proto Nets [28] obtained slightly
better performance (68.9% and 67.7%) in 20-way and 5-way training scenarios respectively by
increasing the number of training steps from 20K to 40K3.

Importantly, we conﬁrm the hypothesis that the improvement attributed to the Euclidean distance
in [28] was due to a scaling effect. Namely, we show that the scaled cosine similarity matches
very closely the performance of the Euclidean metric, with an improvement of 14 percentage points
on the mini-Imagenet (similar results on FC100) over the non-scaled version. In order to control
for the potential effect that the scaling parameter α may have on the learning rate as indicated by
Equation (2) training was performed using multiple initial learning rates (covering the range between
0.0005 and 0.01), obtaining similar accuracy each time. Hereinafter, we report the results with
the Euclidean metric for brevity, since the cosine produces similar results. Moreover, since the
prototypical approach with Euclidean distance as well as with the scaled cosine are close and both
are superior to [33], we base our results on [28].

3.3 TEN importance across layers

We hypothesized in Section 2.2 that the TEN conditioning should not be equally important at all
depths. Fig. 2 depicts the boxplot of the empirical observations of the learned TEN post-multipliers4
γ0 and β0 at different depths of the feature extractor. We can see that for the multiplier γ, the absolute
value of its scale γ0 tends to increase as we approach the softmax layer. Interestingly, peaks can be
observed every 3 layers (layers 3, 6, 9, 12). The peaks correspond to the location of the convolutional
layers preceding the max-pool layers. For the bias parameter β0, the only layer having a large absolute
value of its scale is the last layer, before the softmax. We attribute the observed pattern to the fact
that the shallower layers in the feature extractor tend to be less task-speciﬁc than the deeper layers.
Following this intuition, we performed experiments in which we (i) kept the TEN injection solely in

3With 20K steps it was possible to recover the exact original performance reported in Snell et al. [28], which

is not included in Table 2 for the sake of brevity.

4Larger absolute values of γ0 and β0 imply a larger inﬂuence of their respective TEN layers

7

Table 3: Average classiﬁcation accuracy (%) with 95% conﬁdence interval on the 5 way classiﬁcation
task, and training with the Euclidean distance. The scale parameter is cross-validated on the validation
set. AT: auxiliary co-training. TC: task conditioning with TEN.

α AT TC

mini-Imagenet
1-shot
56.5 ± 0.4
(cid:88)
56.8 ± 0.3
(cid:88) (cid:88)
58.0 ± 0.3
(cid:88)
(cid:88) 54.4 ± 0.3
(cid:88) (cid:88) (cid:88) 58.5 ± 0.3

5-shot
74.2 ± 0.2
75.7 ± 0.2
75.6 ± 0.4
74.6 ± 0.3
76.7 ± 0.3

10-shot
78.6 ± 0.4
79.6 ± 0.4
80.0 ± 0.3
78.7 ± 0.4
80.8 ± 0.3

FC100
1-shot
37.8 ± 0.4
38.0 ± 0.3
39.0 ± 0.4
37.8 ± 0.2
40.1 ± 0.4

5-shot
53.3 ± 0.5
54.0 ± 0.5
54.7 ± 0.5
54.0 ± 0.7
56.1 ± 0.4

10-shot
58.7 ± 0.4
59.8 ± 0.3
60.4 ± 0.4
58.8 ± 0.3
61.6 ± 0.5

(a) Scaled Euclidean. mini-Imagenet.

(b) Scaled Euclidean. FC100.

(c) Scaled Euclidean with TEN. mini-Imagenet.

(d) Scaled Euclidean with TEN. FC100.

Figure 3: Metric scale parameter α cross-validation results.

layers preceding the max pool and (ii) kept the TEN injection only in the very last layer. Interestingly,
we saw that TEN layers with small weight still provide some positive contribution, although most of
the contribution is indeed provided by the layers preceding the max pool operation.

3.4 Ablation study

In this section, we study the impact in generalization accuracy of the scaling, task conditioning,
auxiliary co-training, and the feature extractor. Results are summarized in Table 3.

First, we validated the hypothesis that there is an optimal value of the metric scaling parameter (α)
for a given combination of dataset and metric, which is reﬂected in the inverse U-shape of the curves
in Fig. 3.

Second, we studied the effects of the task conditioning described in Section 2.2. No improvement
was observed for the task-conditioned ResNet-12 without auxiliary co-training (see Table 3). We
observed that learning useful features for the TEN and the main feature extractor at the same time
is hard and gets stuck in local extrema. The problem is solved by co-training on the auxiliary task
of predicting Imagenet labels using an additional fully-connected layer with softmax, see Section
2.4. In effect, we observed that auxiliary co-training provides two beneﬁts: (i) making the initial
convergence easier, and (ii) providing regularization on the few-shot learning task by forcing the
feature extractor to perform well on two decoupled tasks. The latter beneﬁt can only be observed
when the feature extraction unit is sufﬁciently decoupled on the main task and the auxiliary task via
the use of TEN (the feature extractor output is additionally adjusted on the target task using FILM).

As it can be seen in the last row of Tables 1 and 3, our model trained with TEN and auxiliary
co-training outperforms all the baselines and achieves state-of-the-art results.

4 Conclusions and Future Work

We proposed, analyzed, and empirically validated several improvements in the domain of few-shot
learning. We showed that the scaled cosine similarity performs at par with Euclidean distance,

8

unlike its unscaled counterpart. In fact, based on our results, we argue that the scaling factor is a
necessary standard component of any few-shot learning algorithm relying on a similarity metric
and the cross-entropy loss function. This is especially important in the context of ﬁnding new more
effective similarity measures for few-shot learning. Moreover, our theoretical analysis demonstrated
that simply scaling the similarity metric results in completely different regimes of parameter updates
when using softmax and categorical cross-entropy. We also identiﬁed that the optimal performance
is achieved in between two asymptotic regimes of the softmax. This poses the research question of
explicitly designing loss functions and the α schedules optimal for few-shot learning. We further
proposed task representation conditioning as a way to improve the performance of a feature extractor
on the few-shot classiﬁcation task. In this context, designing more powerful task representations, for
example, based on higher order statistics of class embeddings, looks like a very promising venue for
future work. The experimental results obtained on two independent challenging datasets demonstrated
that the proposed approach signiﬁcantly improves over existing results and achieves state-of-the-art
on few-shot image classiﬁcation task.

Appendix

A Proof of Lemma 1

First, consider the case α → 0. Denoting zφ

i = fφ(xi) we have:

lim
α→0

1
α

∂
∂φ

Jk(φ, α) =

d(zφ

i , ck) − lim
α→0

(cid:80)

j exp(−αd(zφ

i , cj)) ∂
j exp(−αd(zφ

∂φ d(zφ
i , cj))

(cid:80)

i , cj)

∂
∂φ

∂
∂φ

(cid:88)

xi∈Qk
(cid:88)

xi∈Qk
(cid:88)

xi∈Qk

=

=

d(zφ

i , ck) −

1
K

(cid:88)

j

∂
∂φ

d(zφ

i , cj)

K − 1
K

∂
∂φ

d(zφ

i , ck) −

1
K

∂
∂φ

(cid:88)

j(cid:54)=k

d(zφ

i , cj).

Second, consider the case α → ∞:

lim
α→∞

1
α

∂
∂φ

Jk(φ, α) =

d(zφ

i , ck) −

(cid:88)

exp(−αd(zφ
(cid:80)

lim
α→∞

(cid:88)

xi∈Qk

(cid:88)

=

xi∈Qk

∂
∂φ

∂
∂φ

d(zφ

i , ck) −

(cid:88)

lim
α→∞

1 + (cid:80)

j

j

i , cj)

∂φ d(zφ
i , c(cid:96)))

i , cj)) ∂
(cid:96) exp(−αd(zφ
∂φ d(zφ
(cid:96)(cid:54)=j exp(−α[d(zφ

∂

i , cj)
i , c(cid:96)) − d(zφ

.

i , cj)])

It is obvious that whenever at least one of the exponential terms in the denominator in the expression
above has positive rate, corresponding to the case ∃(cid:96) (cid:54)= j : [d(zφ
i , cj)] < 0, the ratio
converges to zero as α → ∞ under assumption A2. The only case when the limit is non-zero is
when cj is the prototype closest to the query point xi. If we deﬁne the index of this prototype as
i = arg minj d(zφ
j∗
)] > 0, leading
(under additional assumption A1) to:

i , cj), then the following holds: ∀(cid:96) (cid:54)= j∗

i , c(cid:96)) − d(zφ

i , c(cid:96)) − d(zφ

i : [d(zφ

i , cj∗

i

lim
α→∞

1 + (cid:80)

(cid:96)(cid:54)=j exp(−α[d(zφ

i , c(cid:96)) − d(zφ

i , cj∗

i

)])

= 1.

Therefore, (4) follows.

Acknowledgements

Authors acknowledge the support of the Spanish project TIN2015-65464-R (MINECO/FEDER), the
2016FI B 01163 grant of Generalitat de Catalunya. Authors would like to thank Nicolas Chapados,
Adam Salvail and Rachel Samson as well as anonymous reviewers for their careful reading of the
manuscript and for providing constructive feedback and valuable suggestions.

1

9

References
[1] M. Bauer, M. Rojas-Carulla, J. B. ´Swi ˛atkowski, B. Schölkopf, and R. E. Turner. Discriminative

k-shot learning using probabilistic models. arXiv preprint arXiv:1706.00326, 2017.

[2] S. Carey and E. Bartlett. Acquiring a single new word. 1978.
[3] V. Dumoulin, J. Shlens, and M. Kudlur. A learned representation for artistic style. ICLR, 2017.
[4] H. Edwards and A. Storkey. Towards a neural statistician. arXiv preprint arXiv:1606.02185,

[5] M. Fink. Object classiﬁcation from a single example utilizing class relevance metrics. In NIPS,

2016.

pages 449–456, 2005.

[6] C. Finn, P. Abbeel, and S. Levine. Model-agnostic meta-learning for fast adaptation of deep

networks. In ICML, pages 1126–1135, 2017.

[7] R. Hadsell, S. Chopra, and Y. LeCun. Dimensionality reduction by learning an invariant

mapping. In CVPR, volume 2, pages 1735–1742. IEEE, 2006.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. CVPR,

pages 770–778, 2016.

[9] G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge in a neural network. In NIPS
Deep Learning and Representation Learning Workshop, 2015. URL http://arxiv.org/
abs/1503.02531.

[10] G. Koch, R. Zemel, and R. Salakhutdinov. Siamese neural networks for one-shot image

recognition. In ICML Deep Learning Workshop, volume 2, 2015.
[11] A. Krizhevsky. Learning multiple layers of features from tiny images.

, University of Toronto,

2009.

[12] A. Lacoste, T. Boquet, N. Rostamzadeh, B. Oreshkin, W. Chung, and D. Krueger. Deep prior.

arXiv preprint arXiv:1712.05016, 2017.

[13] B. M. Lake, R. R. Salakhutdinov, and J. Tenenbaum. One-shot learning by inverting a composi-

tional causal process. In NIPS, pages 2526–2534, 2013.

[14] B. M. Lake, R. Salakhutdinov, and J. B. Tenenbaum. Human-level concept learning through

probabilistic program induction. Science, 350(6266):1332–1338, 2015.

[15] F.-F. Li, R. Fergus, and P. Perona. One-shot learning of object categories. PAMI, 28(4):594–611,

2006.

ICLR, 2018.

[16] N. Mishra, M. Rohaninejad, X. Chen, and P. Abbeel. A simple neural attentive meta-learner. In

[17] T. Munkhdalai, X. Yuan, S. Mehri, and A. Trischler. Rapid adaptation with conditionally shifted

neurons. In ICML, 2018.

[18] E. Perez, H. de Vries, F. Strub, V. Dumoulin, and A. C. Courville. Learning visual reasoning

without strong priors. CoRR, abs/1707.03017, 2017.

[19] E. Perez, F. Strub, H. De Vries, V. Dumoulin, and A. Courville. Film: Visual reasoning with a

general conditioning layer. In AAAI, 2018.

[20] B. Plank and H. M. Alonso. When is multitask learning effective? Semantic sequence prediction
under varying data conditions. In Proceedings of the 15th Conference of the European Chapter
of the Association for Computational Linguistics, EACL 2017, Valencia, Spain, pages 44–53,
2017.

[21] P. Ramachandran, B. Zoph, and Q. V. Lea. Searching for activation functions. In ICLR, 2018.
[22] S. Ravi and H. Larochelle. Optimization as a model for few-shot learning. In ICLR, 2016.
[23] M. Ren, E. Triantaﬁllou, S. Ravi, J. Snell, K. Swersky, J. B. Tenenbaum, H. Larochelle,
and R. S. Zemel. Meta-learning for semi-supervised few-shot classiﬁcation. arXiv preprint
arXiv:1803.00676, 2018.

[24] A. Santoro, S. Bartunov, M. Botvinick, D. Wierstra, and T. Lillicrap. Meta-learning with
memory-augmented neural networks. In M. F. Balcan and K. Q. Weinberger, editors, ICML,
volume 48 of Proceedings of Machine Learning Research, pages 1842–1850, New York, New
York, USA, 20–22 Jun 2016. PMLR.

10

[25] J. Schmidhuber, J. Zhao, and M. Wiering. Shifting inductive bias with success-story algorithm,
adaptive levin search, and incremental self-improvement. Machine Learning, 28(1):105–130,
1997.

[26] F. Schroff, D. Kalenichenko, and J. Philbin. Facenet: A uniﬁed embedding for face recognition

and clustering. In CVPR, pages 815–823, 2015.

[27] P. Shyam, S. Gupta, and A. Dukkipati. Attentive recurrent comparators. In ICML, pages

[28] J. Snell, K. Swersky, and R. S. Zemel. Prototypical networks for few-shot learning. In NIPS,

3173–3181, 2017.

pages 4080–4090, 2017.

[29] F. Sung, Y. Yang, L. Zhang, T. Xiang, P. H. Torr, and T. M. Hospedales. Learning to compare:

Relation network for few-shot learning. In CVPR, 2018.

[30] Y. Taigman, M. Yang, M. Ranzato, and L. Wolf. Web-scale training for face identiﬁcation. In

CVPR, pages 2746–2754, 2015.

[31] S. Thrun. Lifelong learning algorithms. In Learning to learn, pages 181–209. Springer, 1998.
[32] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, Ł. Kaiser, and

I. Polosukhin. Attention is all you need. In NIPS, pages 6000–6010, 2017.

[33] O. Vinyals, C. Blundell, T. Lillicrap, K. Kavukcuoglu, and D. Wierstra. Matching networks for

one shot learning. In NIPS, pages 3630–3638. 2016.

[34] Y.-X. Wang, R. Girshick, M. Hebert, and B. Hariharan. Low-Shot Learning from Imaginary

Data. In CVPR, 2018.

11

Supplementary Materials. TADAM: Task dependent adaptive metric for
improved few-shot learning

S1 Architecture details

(a) Convolutional block with TEN.

(b) Resnet block with TEN.

Figure 1: Components of the ResNet-12 feature extractor.

ResNet-12 architecture details. The resnet blocks used in the ResNet-12 feature extractor are
shown in Fig. 1. The feature extractor consists of 4 resnet blocks shown in Fig. 1b followed by a
global average-pool. Each resnet block consists of 3 convolutional blocks shown in Fig. 1a followed
by 2x2 max-pool. Each convolutional layer is followed by a batch norm layer and the swish-1
activation function proposed by Ramachandran et al. [21]. We found that the fully convolutional
architecture performs best as a few-shot feature extractor, both on mini-Imagenet and on FC100. We
found that inserting additional projection layers after the ResNet stack was always detrimental to the
few-shot performance. We cross-validated this result with multiple hyper-parameter settings for the
projection layers (number of layers, layer widths, and dropout). In addition to that, we observed that
adding extra convolutional layers and max-pool layers before the ResNet stack was detrimental to the
few-shot performance. Therefore, we used fully convolutional, fully residual architecture in all our
experiments.

The hyperparameters for the convolutional layers are as follows. The number of ﬁlters for the ﬁrst
ResNet block was set to 64 and it was doubled after each max-pool block. The L2 regularizer weight
was cross-validated at 0.0005 for each layer.

TEN architecture details. The detailed architecture of the TEN block is depicted in Fig. 2. Our
implementation of the TEN uses two separate fully connected residual networks to generate vectors
γ, β. We cross-validated the number of layers to be 3. The ﬁrst layer projects the task representation
into the target width. The target width is equal to the number of ﬁlters of the convolutional layer that
the TEN block is conditioning (see Fig. 1a). The remaining layers operate at the target width and
each of them has a skip connection. The L2 regularizer weight for γ0 and β0 was cross-validated
at 0.01 for each layer. We found that smaller values led to considerable overﬁt. In addition to that,
we were not able to successfully train TEN without γ0 and β0, because the training tended to be
stuck in local minima where the overall effect of introducing TEN was detrimental to the few-shot
performance of the architecture.

1

Figure 2: Architecture of the TEN block.

S2 Few-shot CIFAR100 details

Train split. Super-class labels: {1, 2, 3, 4, 5, 6, 9, 10, 15, 17, 18, 19}; super-class names: {ﬁsh,
ﬂowers, food_containers, fruit_and_vegetables, household_electrical_devices, household_furniture,
large_man-made_outdoor_things, large_natural_outdoor_scenes, reptiles, trees, vehicles_1, vehi-
cles_2}.

Validation split. Super-class labels: {8, 11, 13, 16}; super-class names: {large_carnivores,
large_omnivores_and_herbivores, non-insect_invertebrates, small_mammals}.

Test split. Super-class labels: {0, 7, 12, 14}; super-class names: {aquatic_mammals, insects,
medium_mammals, people}.

We would like to stress that we still sample all the tasks uniformly at random within train, validation
and test subsets. Therefore, each task with very high probability contains samples belonging to
classes from several superclasses.

S3 Training procedure details

Episode composition. The training procedure composes a few-shot training batch from several tasks,
where a task is understood to be a ﬁxed selection of 5 classes. We found empirically that for the
5-shot scenario the best number of tasks per batch was 2, for 10-shot it was 1 and for 1-shot it was 5.
The sample set in each training batch was created using the same number of shots as in the target
deployment (test) scenario. The images in the training query set were sampled uniformly at random.
We observed that the best results were obtained when the number of query images was approximately
equal to the total number of sample images in the batch. Thus we used 32 query images per task for
5-shot, 64 for 10-shot and 12 for 1-shot.

The auxiliary classiﬁcation task is based on the usual 64-way training (for mini-Imagenet). Co-
training uses a ﬁxed batch of 64 image samples sampled uniformly at random from the training set.
The learning rate annealing schedule for the auxiliary task is synchronized with that of the main
few-shot task.

Optimization, scheduling and learning rate. When training with auxiliary classiﬁcation task we
used total 30000 episodes for training on mini-Imagenet and 10000 episodes for training on FC100.
The results obtained with no auxiliary classiﬁcation co-training used twice as many episodes. To
obtain all our results we used SGD with momentum 0.9 and initial learning rate set at 0.1. The
learning rate was annealed by a factor of 10 halfway through the training and two more times every
2500 episodes. The reported numbers are calculated using early-stopping based on validation set
classiﬁcation error tracking.

Classiﬁcation accuracy evaluation. The accuracy is evaluated using 10 random restarts of the
optimization procedure and based on 500 randomly generated tasks each having 100 random query
samples.

Reproducing results in [28]. To reproduce the results reported in [28] we used exactly the same
setup and network architecture reported in the original paper.

2

