9
9
9
1
 
y
a
M
1
2
 
 
]

 

G
L
.
s
c
[
 
 
1
v
4
1
0
5
0
9
9
/
s
c
:
v
i
X
r
a

Hierarchical Reinforcement Learning with the MAXQ Value
Function Decomposition

Thomas G. Dietterich
Department of Computer Science
Oregon State University
Corvallis, OR 97331
tgd@cs.orst.edu

February 1, 2008

Abstract

This paper presents a new approach to hierarchical reinforcement learning based on decomposing
the target Markov decision process (MDP) into a hierarchy of smaller MDPs and decomposing
the value function of the target MDP into an additive combination of the value functions of the
smaller MDPs. The decomposition, known as the MAXQ decomposition, has both a procedural
semantics—as a subroutine hierarchy—and a declarative semantics—as a representation of the
value function of a hierarchical policy. MAXQ uniﬁes and extends previous work on hierar-
chical reinforcement learning by Singh, Kaelbling, and Dayan and Hinton. It is based on the
assumption that the programmer can identify useful subgoals and deﬁne subtasks that achieve
these subgoals. By deﬁning such subgoals, the programmer constrains the set of policies that
need to be considered during reinforcement learning. The MAXQ value function decomposition
can represent the value function of any policy that is consistent with the given hierarchy. The
decomposition also creates opportunities to exploit state abstractions, so that individual MDPs
within the hierarchy can ignore large parts of the state space. This is important for the practical
application of the method. This paper deﬁnes the MAXQ hierarchy, proves formal results on its
representational power, and establishes ﬁve conditions for the safe use of state abstractions. The
paper presents an online model-free learning algorithm, MAXQ-Q, and proves that it converges
wih probability 1 to a kind of locally-optimal policy known as a recursively optimal policy, even
in the presence of the ﬁve kinds of state abstraction. The paper evaluates the MAXQ represen-
tation and MAXQ-Q through a series of experiments in three domains and shows experimentally
that MAXQ-Q (with state abstractions) converges to a recursively optimal policy much faster
than ﬂat Q learning. The fact that MAXQ learns a representation of the value function has an
important beneﬁt: it makes it possible to compute and execute an improved, non-hierarchical
policy via a procedure similar to the policy improvement step of policy iteration. The paper
demonstrates the eﬀectiveness of this non-hierarchical execution experimentally. Finally, the
paper concludes with a comparison to related work and a discussion of the design tradeoﬀs in
hierarchical reinforcement learning.

1

1 Introduction

A central goal of artiﬁcial intelligence is to develop techniques for constructing robust, autonomous
agents that are able to achieve good performance in complex, real-world environments. One fruitful
line of research views agents from an “economic” perspective (Boutilier, Shoham, & Wellman, 1997):
An agent interacts with an environment and receives real-valued rewards and penalties. The agent’s
goal is to maximize the total reward it receives. The economic view makes it easy to formalize
traditional goals of achievement (“land this airplane”). But it also makes it easy to formulate
goals of prevention (“don’t crash into any other airplanes”) and goals of maintenance (“keep the
air-traﬃc control system working as long as possible”). Goals of achievement can be represented
by giving a positive reward for achieving the goal. Goals of prevention can be represented by
giving a negative reward when bad events occur, and goals of maintenance can be represented by
giving a positive reward for each time step that the desireable state is maintained. Furthermore,
the economic formalism makes it possible to incorporate uncertainty—we can require the agent to
maximize the expected value of the total reward in the face of random events in the world.

This brief review shows that the economic approach is very expressive—a diﬃcult research chal-
lenge, however, is to develop eﬃcient and scalable methods for reasoning, planning, and learning
within the economic AI framework. The area of Stochastic Planning studies methods for ﬁnding
optimal or near-optimal plans to maximize expected total reward in the case where the agent has
complete knowledge of the probabilistic behavior of the environment and the reward function. The
basic methods for this case were developed in the 1950s in the ﬁeld of “Dynamic Programming.”
Unfortunately, these methods require time polynomial in the number of states in the state space,
which makes them prohibitively expensive for most AI problems. Hence, recent research has fo-
cused on methods that can exploit structure within the planning problem to work more eﬃciently
(Boutilier, Dean, & Hanks, 1999).

The area of Reinforcement Learning (Bertsekas & Tsitsiklis, 1996; Sutton & Barto, 1998) stud-
ies methods for learning optimal or near-optimal plans by interacting directly with the external
environment (as opposed to analyzing a user-provided model of the environment). Again, the basic
methods in reinforcement learning are based on dynamic programming algorithms. However, rein-
forcement learning methods oﬀer two important advantages over classical dynamic programming.
First, the methods are online. This permits them to focus their attention on the parts of the state
space that are important and ignore the rest of the space. Second, the methods can employ function
approximation algorithms (e.g., neural networks) to represent their knowledge. This allows them
to generalize across the state space so that the learning time scales much better.

Despite the recent advances in both probabilistic planning and reinforcement learning, there
are still many shortcomings. The biggest of these is the lack of a fully satisfactory method for
incorporating hierarchies into these algorithms. Research in classical planning has shown that
hierarchical methods such as hierarchical task networks (Currie & Tate, 1991), macro actions (Fikes,
Hart, & Nilsson, 1972; Korf, 1985), and state abstraction methods (Sacerdoti, 1974; Knoblock,
1990) can provide exponential reductions in the computational cost of ﬁnding good plans. However,
all of the basic algorithms for probabilistic planning and reinforcement learning are “ﬂat” methods—
they treat the state space as one huge ﬂat search space. This means that the paths from the start
state to the goal state are very long, and the length of these paths determines the cost of learning
and planning, because information about future rewards must be propagated backward along these
paths.

Many researchers (Singh, 1992a; Lin, 1993; Kaelbling, 1993; Dayan & Hinton, 1993; Hauskrecht,
Meuleau, Boutilier, Kaelbling, & Dean, 1998; Parr & Russell, 1998; Sutton, Precup, & Singh, 1998)
have experimented with diﬀerent methods of hierarchical reinforcement learning and hierarchical

2

probabilistic planning. This research has explored many diﬀerent points in the design space of
hierarchical methods, but several of these systems were designed for speciﬁc situations. We lack
crisp deﬁnitions of the main approaches and a clear understanding of the relative merits of the
diﬀerent methods.

This paper formalizes and clariﬁes one approach and attempts to understand how it compares
with the other techniques. The approach, called the MAXQ method, provides a hierarchical decom-
position of the given reinforcement learning problem into a set of subproblems. It simultaneously
provides a decomposition of the value function for the given problem into a set of value functions
for the subproblems. Hence, it has both a declarative semantics (as a value function decomposition)
and a procedural semantics (as a subroutine hierarchy).

A review of previous research shows that there are several important design decisions that must
be made when constructing a hierarchical reinforcement learning system. As a way of providing
an overview of the results in this paper, let us review these issues and see how the MAXQ method
approaches each of them.

The ﬁrst issue is how subtasks should be speciﬁed. Hierarchical reinforcement learning involves
breaking the target Markov decision problem into a hierarchy of subproblems or subtasks. There
are three general approaches to deﬁning these subtasks. One approach is to deﬁne each subtask
in terms of a ﬁxed policy that is provided by the programmer. The “option” method of Sutton,
Precup, and Singh (1998) takes this approach. The second approach is to deﬁne each subtask in
terms of a non-deterministic ﬁnite-state controller. The Hierarchy of Abstract Machines (HAM)
method of Parr and Russell (1998) takes this approach. This method permits the programmer
to provide a “partial policy” that constrains the set of permitted actions at each point, but does
not specify a complete policy for each subtask. The third approach is to deﬁne each subtask in
terms of a termination predicate and a local reward function. These deﬁne what it means for the
subtask to be completed and what the ﬁnal reward should be for completing the subtask. The
MAXQ method described in this paper follows this approach, building upon previous work by
Singh (1992a), Kaelbling (1993), Dayan and Hinton (1993), and Dean and Lin (1995).

An advantage of the “option” and partial policy approaches is that the subtask can be deﬁned in
terms of an amount of eﬀort or a course of action rather than in terms of achieving a particular goal
condition. However, the “option” approach (at least in the simple form described here), requires
the programmer to provide complete policies for the subtasks, which can be a diﬃcult programming
task in real-world problems. On the other hand, the termination predicate method requires the
programmer to guess the relative desirability of the diﬀerent states in which the subtask might
terminate. This can also be diﬃcult, although Dean and Lin show how these guesses can be revised
automatically by the learning algorithm.

A potential drawback of all hierarchical methods is that the learned policy may be suboptimal.
The programmer-provided hierarchy constrains the set of possible policies that can be considered. If
these constraints are poorly chosen, the resulting policy will be suboptimal. Nonetheless, the learn-
ing algorithms that have been developed for the “option” and partial policy approaches guarantee
that the learned policy will be the best possible policy consistent with these constraints.

The termination predicate method suﬀers from an additional source of suboptimality. The
learning algorithm described in this paper converges to a form of local optimality that we call
recursive optimality. This means that the policy of each subtask is locally optimal given the policies
of its children. But there might exist better hierarchical policies where the policy for a subtask
must be locally suboptimal so that the overall policy is optimal. This problem can be avoided by
careful deﬁnition of termination predicates and local reward functions, but this is an added burden
on the programmer. (It is interesting to note that this problem of recursive optimality has not been
noticed previously. This is because previous work focused on subtasks with a single terminal state,

3

and in such cases, the problem does not arise.)

The second design issue is whether to employ state abstractions within subtasks. A subtask
employs state abstraction if it ignores some aspects of the state of the environment. For example,
in many robot navigation problems, choices about what route to take to reach a goal location are
independent of what the robot is currently carrying. With few exceptions, state abstraction has
not been explored previously. We will see that the MAXQ method creates many opportunities
to exploit state abstraction, and that these abstractions can have a huge impact in accelerating
learning. We will also see that there is an important design tradeoﬀ: the successful use of state
abstraction requires that subtasks be deﬁned in terms of termination predicates rather than using
the option or partial policy methods. This is why the MAXQ method must employ termination
predicates, despite the problems that this can create.

The third design issue concerns the non-hierarchical “execution” of a learned hierarchical pol-
icy. Kaelbling (1993) was the ﬁrst to point out that a value function learned from a hierarchical
policy could be evaluated incrementally to yield a potentially much better non-hierarchical policy.
Dietterich (1998) and Sutton, Singh, Precup, and Ravindran (1999) generalized this to show how
arbitrary subroutines could be executed non-hierarchically to yield improved policies. However, in
order to support this non-hierarchical execution, extra learning is required. Ordinarily, in hierar-
chical reinforcement learning, the only states where learning is required at the higher levels of the
hierarchy are states where one or more of the subroutines could terminate (plus all possible initial
states). But to support non-hierarchical execution, learning is required in all states (and at all levels
of the hierarchy). In general, this requires additional exploration as well as additional computation
and memory. As a consequence of the hierarchical decomposition of the value function, the MAXQ
method is able to support either form of execution, and we will see that there are many problems
where the improvement from non-hierarchical execution is worth the added cost.

The fourth and ﬁnal issue is what form of learning algorithm to employ. An important advantage
of reinforcement learning algorithms is that they typically operate online. However, ﬁnding online
algorithms that work for general hierarchical reinforcement learning has been diﬃcult, particularly
within the termination predicate family of methods. Singh’s method relied on each subtask having
a unique terminal state; Kaelbling employed a mix of online and batch algorithms to train her
hierarchy; and work within the “options” framework usually assumes that the policies for the
subproblems are given and do not need to be learned at all. The best previous online algorithms
are the HAMQ Q learning algorithm of Parr and Russell (for the partial policy method) and the
Feudal Q algorithm of Dayan and Hinton. Unfortunately, the HAMQ method requires “ﬂattening”
the hierarchy, and this has several undesirable consequences. The Feudal Q algorithm is tailored
to a speciﬁc kind of problem, and it does not converge to any well-deﬁned optimal policy.

In this paper, we present a general algorithm, called MAXQ-Q, for fully-online learning of a
hierarchical value function. We show experimentally and theoretically that the algorithm converges
to a recursively optimal policy. We also show that it is substantially faster than “ﬂat” (i.e., non-
hierarchical) Q learning when state abstractions are employed. Without state abstractions, it gives
performance similar to (or even worse than) the HAMQ algorithm.

The remainder of this paper is organized as follows. After introducing our notation in Section
2, we deﬁne the MAXQ value function decomposition in Section 3 and illustrate it with a sim-
ple example Markov decision problem. Section 4 presents an analytically tractable version of the
MAXQ-Q learning algorithm called the MAXQ-0 algorithm and proves its convergence to a recur-
sively optimal policy. It then shows how to extend MAXQ-0 to produce the MAXQ-Q algorithm,
and shows how to extend the theorem similarly. Section 5 takes up the issue of state abstraction
and formalizes a series of ﬁve conditions under which state abstractions can be safely incorporated
into the MAXQ representation. State abstraction can give rise to a hierarchical credit assignment

4

problem, and the paper brieﬂy discusses one solution to this problem. Finally, Section 7 presents
experiments with three example domains. These experiments give some idea of the generality of
the MAXQ representation. They also provide results on the relative importance of temporal and
state abstractions and on the importance of non-hierarchical execution. The paper concludes with
further discussion of the design issues that were brieﬂy described above, and in particular, it tackles
the question of the tradeoﬀ between the method of deﬁning subtasks (via termination predicates)
and the ability to exploit state abstractions.

Some readers may be disappointed that MAXQ provides no way of learning the structure of
the hierarchy. Our philosophy in developing MAXQ (which we share with other reinforcement
learning researchers, notably Parr and Russell) has been to draw inspiration from the development
of Belief Networks (Pearl, 1988). Belief networks were ﬁrst introduced as a formalism in which
the knowledge engineer would describe the structure of the networks and domain experts would
provide the necessary probability estimates. Subsequently, methods were developed for learning
the probability values directly from observational data. Most recently, several methods have been
developed for learning the structure of the belief networks from data, so that the dependence on
the knowledge engineer is reduced.

In this paper, we will likewise require that the programmer provide the structure of the hierarchy.
The programmer will also need to make several important design decisions. We will see below that
a MAXQ representation is very much like a computer program, and we will rely on the programmer
to design each of the modules and indicate the permissible ways in which the modules can invoke
each other. Our learning algorithms will ﬁll in “implementations” of each module in such a way
that the overall program will work well. We believe that this approach will provide a practical tool
for solving large real-world MDPs. We also believe that it will help us understand the structure of
hierarchical learning algorithms. It is our hope that subsequent research will be able to automate
most of the work that we are currently requiring the programmer to do.

2 Formal Deﬁnitions

2.1 Markov Decision Problems and Semi-Markov Decision Problems

We employ the standard deﬁnitions for Markov Decision Problems and Semi-Markov Decision
Problems.

In this paper, we restrict our attention to situations in which an agent is interacting with a fully-
observable stochastic environment. This situation can be modeled as a Markov Decision Problem
(MDP) hS, A, P, R, P0i deﬁned as follows:

• S: this is the set of states of the environment. At each point in time, the agent can observe

the complete state of the environment.

• A: this is a ﬁnite set of actions. Technically, the set of available actions depends on the

current state s, but we will suppress this dependence in our notation.

• P : When an action a ∈ A is performed, the environment makes a probabilistic transition from
its current state s to a resulting state s′ according to the probability distribution P (s′|s, a).

• R: Similarly, when action a is performed and the environment makes its transition from s
to s′, the agent receives a real-valued (possibly stochastic) reward R(s′|s, a). To simplify the
notation, it is customary to treat this reward as being given at the time that action a is
initiated, even though it may in general depend on s′ as well as on s and a.

5

• P0: This is the starting state distribution. When the MDP is initialized, it is in state s with

probability P0(s).

A policy, π, is a mapping from states to actions that tells what action a = π(s) to perform when
the environment is in state s.

We will consider two settings: Episodic and Inﬁnite-Horizon.
In the episodic setting, all rewards are ﬁnite and there is at least one zero-cost absorbing
terminal state. An absorbing terminal state is a state in which all actions lead back to the same
state with probability 1 and zero reward. We will only consider problems where all deterministic
policies are “proper”—that is, all deterministic policies have a non-zero probability of reaching a
terminal state when started in an arbitrary state. In this setting, the goal of the agent is to ﬁnd
a policy that maximizes the expected cumulative reward. In the special case where all rewards
are non-positive, these problems are referred to as stochastic shortest path problems, because the
rewards can be viewed as costs (i.e., lengths), and the policy attempts to move the agent along the
path of minimum expected cost.

In the inﬁnite horizon setting, all rewards are also ﬁnite. In addition, there is a discount factor
γ, and the agent’s goal is to ﬁnd a policy that minimizes the inﬁnite discounted sum of future
rewards.

The value function V π for policy π is a function that tells, for each state s, what the expected
cumulative reward will be of executing that policy. Let rt be a random variable that tells the reward
that the agent receives at time step t while following policy π. We can deﬁne the value function in
the episodic setting as

V π(s) = E {rt + rt+1 + rt+2 + · · · |st = t, π} .

In the discounted setting, the value function is

V π(s) = E

rt + γrt+1 + γ2rt+2 + · · ·

st = t, π

.

We can see that this equation reduces to the previous one when γ = 1. However, in the inﬁnite
horizon case, this inﬁnite sum will not converge unless γ < 1.

The value function satisﬁes the Bellman equation for a ﬁxed policy:

(cid:12)
(cid:12)
(cid:12)

o

V π(s) =

′

P (s

|s, π(s))

R(s

′

|s, π(s)) + γV π(s

′

)

.

(cid:2)
The quantity on the right-hand side is called the backed-up value of performing action a in state s.
For each possible successor state s′, it computes the reward that would be received and the value
of the resulting state and then weights those according to the probability of ending up in s′.

The optimal value function V ∗ is the value function that simultaneously maximizes the expected
cumulative reward in all states s ∈ S. Bellman (1957) proved that it is the unique solution to what
is now known as the Bellman equation:

(cid:3)

∗

V

(s) = max

P (s

|s, a)

R(s

|s, a) + γV

′

′

∗

′

(s

)

.

(1)

a

Xs′

(cid:2)

(cid:3)

There may be many optimal policies that achieve this value. Any policy that chooses a in s to
achieve the maximum on the right-hand side of this equation is an optimal policy. We will denote
an optimal policy by π∗. Note that all optimal policies are “greedy” with respect to the backed-up
value of the available actions.

Closely related to the value function is the so-called action-value function, or Q function
(Watkins, 1989). This function, Qπ(s, a), gives the expected cumulative reward of performing

n

Xs′

6

Xs′

Xs′

(cid:2)

(cid:20)

action a in state s and then following policy π thereafter. The Q function also satisﬁes a Bellman
equation:

Qπ(s, a) =

′

P (s

|s, a)

R(s

′

|s, a) + γQπ(s

′

′

, π(s

))

.

The optimal action-value function is written Q∗(s, a), and it satisﬁes the equation

(cid:3)

∗

Q

(s, a) =

′

′

P (s

|s, a)

R(s

|s, a) + γ max

∗

′

′
, a

(s

a′ Q

.

)
(cid:21)

(2)

Note that any policy that is greedy with respect to Q∗ is an optimal policy. There may be many
such optimal policies—they diﬀer only in how they break ties between actions with identical Q∗
values.

An action order, denoted ω, is a total order over the actions within an MDP. That is, ω is an
anti-symmetric, transitive relation such that ω(a1, a2) is true iﬀ a1 is preferred to a2. An ordered
greedy policy, πω is a greedy policy that breaks ties using ω. For example, suppose that the two best
actions at state s are a1 and a2, that Q(s, a1) = Q(s, a2), and that ω(a1, a2). Then the ordered
greedy policy πω will choose a1: πω(s) = a1. Note that although there may be many optimal
policies for a given MDP, the ordered greedy policy, π∗

ω, is unique.

A discrete-time semi-Markov Decision Process (SMDP) is a generalization of the Markov Deci-
sion Process in which the actions can take a variable amount of time to complete. In particular, let
the random variable N denote the number of time steps that action a takes when it is executed in
state s. We can extend the state transition probability function to be the joint distribution of the
result states s′ and the number of time steps N when action a is performed in state s: P (s′, N |s, a).
Similarly, the reward function can be changed to be R(s′, N |s, a).1

It is straightforward to modify the Bellman equation to deﬁne the value function for a ﬁxed

policy π as

V π(s) =

′

P (s

, N |s, π(s))

R(s

′

, N |s, π(s)) + γN V π(s

′

)

.

Xs′,N

h
The only change is that the expected value on the right-hand side is taken with respect to both s′
and N , and γ is raised to the power N to reﬂect the variable amount of time that may elapse while
executing action a.

i

Note that because expectation is a linear operator, we can write each of these Bellman equations
as the sum of the expected reward for performing action a and the expected value of the resulting
state s. For example, we can rewrite the equation above as

V π(s) = R(s, π(s)) +

′

P (s

, N |s, π(s))γN V π(s

′

).

(3)

where R(s, π(s)) is the expected reward of performing action π(s) in state s, where the expectation
is taken with respect to s′ and N .

Note that for the episodic case, there is no diﬀerence between a MDP and a Semi-Markov

Decision Process.

1This formalization is slightly diﬀerent than the standard formulation of SMDPs, which separates P (s′|s, a) and
F (t|s, a), where F is the cumulative distribution function for the probability that a will terminate in t time units,
where t is real-valued rather than integer-valued. In our case, it is important to consider the joint distribution of s′
and N , but we do not need to consider actions with arbitrary real-valued durations.

Xs′,N

7

2.2 Reinforcement Learning Algorithms

A reinforcement learning algorithm is an algorithm that is given access to an unknown MDP via
the following reinforcement learning protocol. At each time step t, the algorithm is told the current
state s of the MDP and the set of actions A(s) ⊆ A that are executable in that state. The algorithm
chooses an action a ∈ A(s), and the MDP executes this action (which causes it to move to state
s’) and returns a real-valued reward r. If s is an absorbing terminal state, the set of actions A(s)
contains only the special action reset, which causes the MDP to move to one of its initial states,
drawn according to P0.

The learning algorithm is evaluated based on its observed cumulative reward. The cumulative
reward of a good learning algorithm should converge to the cumulative reward of the optimal policy
for the MDP.

In this paper, we will make use of two well-known learning algorithms: Q learning (Watkins,
1989; Watkins & Dayan, 1992) and SARSA(0) (Rummery & Niranjan, 1994). Both of these
algorithms maintain a tabular representation of the action-value function Q(s, a). Every entry of
the table is initialized arbitrarily.

In Q learning, after the algorithm has observed s, chosen a, received r, and observed s′, it

performs the following update:

Qt(s, a) := (1 − αt)Qt−1(s, a) + αt[r + γ max

a′ Qt−1(s

′

′
, a

)],

where αt is a learning rate parameter.

Jaakkola, Jordan and Singh (1994) and Bertsekas and Tsitsiklis (1996) prove that if the agent

follows an “exploration policy” that tries every action in every state inﬁnitely often and if

lim
T →∞

T

t=1
X

αt = ∞ and

lim
T→∞

T

Xt=1

α2

t < ∞

(4)

then Qt converges to the optimal action-value function Q∗ with probability 1. Their proof holds in
both settings discussed in this paper (episodic and inﬁnite-horizon).

The SARSA(0) algorithm is very similar. After observing s, choosing a, observing r, observing

s′, and choosing a′, the algorithm performs the following update:

Qt(s, a) := (1 − αt)Qt−1(s, a) + αt(s, a)[r + γQt−1(s

′

′
, a

)],

where αt is a learning rate parameter. The key diﬀerence is that the Q value of the chosen action
a′, Q(s′, a′), appears on the right-hand side in the place where Q learning uses the Q value of the
best action. Singh, Jaakkola, Littman, and Szepesv´ari (1998) provide two important convergence
results: First, if a ﬁxed policy π is employed to choose actions, SARSA(0) will converge to the value
function of that policy provided αt decreases according to Equation (4). Second, if a so-called GLIE
policy is employed to choose actions, SARSA(0) will converge to the value function of the optimal
policy, provided again that αt decreases according to Equation (4). A GLIE policy is deﬁned as
follows:

Deﬁnition 1 A GLIE (greedy in the limit with inﬁnite exploration) policy is any policy satisfying

1. Each action is executed inﬁnitely often in every state that is visited inﬁnitely often.

2. In the limit, the policy is greedy with respect to the Q-value function with probability 1.

8

4

3

2

1

0

R

Y

0

G

B

3

1

2

4

Figure 1: The Taxi Domain

3 The MAXQ Value Function Decomposition

At the center of the MAXQ method for hierarchical reinforcement learning is the MAXQ value
function decomposition. MAXQ describes how to decompose the overall value function for a policy
into a collection of value functions for individual subtasks (and subsubtasks, recursively).

3.1 A Motivating Example

To make the discussion concrete, let us consider the following simple example. Figure 1 shows
a 5-by-5 grid world inhabited by a taxi agent. There are four specially-designated locations in
In
this world, marked as R(ed), B(lue), G(reen), and Y(ellow). The taxi problem is episodic.
each episode, the taxi starts in a randomly-chosen square. There is a passenger at one of the
four locations (chosen randomly), and that passenger wishes to be transported to one of the four
locations (also chosen randomly). The taxi must go to the passenger’s location (the “source”), pick
up the passenger, go to the destination location (the “destination”), and put down the passenger
there. (To keep things uniform, the taxi must pick up and drop oﬀ the passenger even if he/she
is already located at the destination!) The episode ends when the passenger is deposited at the
destination location.

There are six primitive actions in this domain: (a) four navigation actions that move the taxi
one square North, South, East, or West, (b) a Pickup action, and (c) a Putdown action. Each action
is deterministic. There is a reward of −1 for each action and an additional reward of +20 for
successfully delivering the passenger. There is a reward of −10 if the taxi attempts to execute the
Putdown or Pickup actions illegally. If a navigation action would cause the taxi to hit a wall, the
action is a no-op, and there is only the usual reward of −1.

We seek a policy that maximizes the total reward per episode. There are 500 possible states:
25 squares, 5 locations for the passenger (counting the four starting locations and the taxi), and 4
destinations.

This task has a simple hierarchical structure in which there are two main sub-tasks: Get
the passenger and Deliver the passenger. Each of these subtasks in turn involves the subtask
of navigating to one of the four locations and then performing a Pickup or Putdown action.

This task illustrates the need to support temporal abstraction, state abstraction, and subtask
sharing. The temporal abstraction is obvious—for example, the process of navigating to the passen-
ger’s location and picking up the passenger is a temporally extended action that can take diﬀerent
numbers of steps to complete depending on the distance to the target. The top level policy (get
passenger; deliver passenger) can be expressed very simply if these temporal abstractions can be

9

employed.

The need for state abstraction is perhaps less obvious. Consider the subtask of getting the
passenger. While this subtask is being solved, the destination of the passenger is completely
irrelevant—it cannot aﬀect any of the nagivation or pickup decisions. Perhaps more importantly,
when navigating to a target location (either the source or destination location of the passenger),
only the identity of the target location is important. The fact that in some cases the taxi is carrying
the passenger and in other cases it is not is irrelevant.
Finally, support for subtask sharing is critical.

If the system could learn how to solve the
navigation subtask once, then the solution could be shared by both of the “Get the passenger”
and “Deliver the passenger” subtasks. We will show below that the MAXQ method provides a
value function representation and learning algorithm that supports temporal abstraction, state
abstraction, and subtask sharing.

To construct a MAXQ decomposition for the taxi problem, we must identify a set of individual
subtasks that we believe will be important for solving the overall task. In this case, let us deﬁne
the following four tasks:

• Navigate(t). In this subtask, the goal is to move the taxi from its current location to one of

the four target locations, which will be indicated by the formal parameter t.

• Get. In this subtask, the goal is to move the taxi from its current location to the passenger’s

current location and pick up the passenger.

• Put. The goal of this subtask is to move the taxi from the current location to the passenger’s

destination location and drop oﬀ the passenger.

• Root. This is the whole taxi task.

Each of these subtasks is deﬁned by a subgoal, and each subtask terminates when the subgoal

is achieved.

After deﬁning these subtasks, we must indicate for each subtask which other subtasks or prim-
itive actions it should employ to reach its goal. For example, the Navigate(t) subtask should use
the four primitive actions North, South, East, and West. The Get subtask should use the Navigate
subtask and the Pickup primitive action, and so on.

All of this information can be summarized by a directed acyclic graph called the task graph,
which is shown in Figure 2. In this graph, each node corresponds to a subtask or a primitive action,
and each edge corresponds to a potential way in which one subtask can “call” one of its child tasks.
The notation f ormal/actual (e.g., t/source) tells how a formal parameter is to be bound to an
actual parameter.

Now suppose that for each of these subtasks, we write a policy (e.g., as a computer program)
to achieve the subtask. We will refer to the policy for a subtask as a “subroutine”, and we can
view the parent subroutine as invoking the child subroutine via ordinary subroutine-call-and-return
semantics. If we have a policy for each subtask, then this gives us an overall policy for the Taxi
MDP. The Root subtask executes its policy by calling subroutines that are policies for the Get and
Put subtasks. The Get policy calls subroutines for the Pickup primitive action and the Navigate(t)
subtask. And so on. We will call this collection of policies a hierarchical policy. In a hierarchical
policy, each subroutine executes until it enters a terminal state for its subtask.

3.2 Deﬁnitions

Let us formalize the discussion so far.

10

Pickup

Navigate(t)

Putdown

Root

Get

Put

t/source

t/destination

North

South

East

West

Figure 2: A task graph for the Taxi problem.

The MAXQ decomposition takes a given MDP M and decomposes it into a set of subtasks
{M0, M1, . . . , Mn} with the convention that M0 is the root subtask (i.e., solving M0 solves the
entire original MDP M ).

Deﬁnition 2 An unparameterized subtask is a three-tuple, hTi, Ai, ˜Rii, deﬁned as follows:

1. Ti(si) is a termination predicate that partitions S into a set of active states, Si and a set of
terminal states, Ti. The policy for subtask Mi can only be executed if the current state s is
in Si.

2. Ai is a set of actions that can be performed to achieve subtask Mi. These actions can either
be primitive actions from A, the set of primitive actions for the MDP, or they can be other
subtasks, which we will denote by their indexes i. We will refer to these actions as the
“children” of subtask i.
If a child subtask Mj has formal parameters, then it can occur
multiple times in Ai, and each such occurrence must specify the actual values that will be
bound to the formal parameters. The set of actions Ai may diﬀer from one state to another, so
technically, Ai is a function of s. However, we will suppress this dependence in our notation.
3. ˜Ri(s′|s, a) is the pseudo-reward function, which speciﬁes a pseudo-reward for each transition
from a state s ∈ Si to a terminal state s′ ∈ Ti. This pseudo-reward tells how desirable each
of the terminal states is for this subtask. It is typically employed to give goal terminal states
a pseudo-reward of 0 and any non-goal terminal states a negative reward.

Each primitive action a from M is a primitive subtask in the MAXQ decomposition such that
a is always executable, it always terminates immediately after execution, and its pseudo-reward
function is uniformly zero.

If a subtask has formal parameters, then each possible binding of actual values to the formal
parameters speciﬁes a distinct subtask. We can think of the values of the formal parameters as being
part of the “name” of the subtask. In practice, of course, we implement a parameterized subtask
by parameterizing the various components of the task. If b speciﬁes the actual parameter values
for task Mi, then we can deﬁne a parameterized termination predicate Ti(s, b) and a parameterized
pseudo-reward function ˜Ri(s′|s, a, b). To simplify notation in the rest of the paper, we will usually
omit these parameter bindings from our notation.

11

Table 1: Pseudo-Code for Execution of a Hierarchical Policy

st is the state of the world at time t

1
2 Kt is the state of the execution stack at time t

while top(Kt) is not a primitive action

Let (i, fi) := top(Kt), where

i is the name of the “current” subroutine, and
fi gives the parameter bindings for i

3
4
5
6
7
8
9

Let (a, fa) := πi(s, fi), where

push (a, fa) onto the stack Kt

a is the action and fa gives the parameter bindings chosen by policy πi

10 Let (a, nil) := pop(Kt) be the primitive action on the top of the stack.
11 Execute primitive action a, and update st+1 to be
the resulting state of the environment.
12

13 while top(Kt) speciﬁes a terminated subtask do
14

pop(Kt)

15 Kt+1 := Kt is the resulting execution stack.

Deﬁnition 3 A hierarchical policy, π, is a set containing a policy for each of the subtasks in the
problem: π = {π0, . . . , πn}.

Each subtask policy πi takes a state and returns the name of a primitive action to execute or
the name of a subroutine (and bindings for its formal parameters) to invoke. In the terminology of
Sutton, Precup, and Singh (1998), a subtask policy is a deterministic “option”, and its probability
of terminating in state s (which they denote by β(s)) is 0 if s ∈ Si, and 1 if s ∈ Ti.

In a parameterized task, the policy must be parameterized as well so that π takes a state and
the bindings of formal parameters and returns a chosen action and the bindings (if any) of its
formal parameters.

Table 1 gives a pseudo-code description of the procedure for executing a hierarchical policy.
The hierarchical policy is executed using a stack discipline, as in ordinary programming languages.
Let Kt denote the contents of the pushdown stack at time t. When a subroutine is invoked, its
name and actual parameters are pushed onto the stack. When a subroutine terminates, its name
and actual parameters are popped oﬀ the stack. It is sometimes useful to think of the contents
of the stack as being an additional part of the state space for the problem. Hence, a hierarchical
policy implicitly deﬁnes a mapping from the current state st and current stack contents Kt to a
primitive action a. This action is executed, and this yields a resulting state st+1 and a resulting
stack contents Kt+1. Because of the added state information in the stack, the hierarchical policy
is non-Markovian with respect to the original MDP.

Because a hierarchical policy maps from states s and stack contents K to actions, the value
function for a hierarchical policy must in general also assign values to all combinations of states s
and stack contents K.

Deﬁnition 4 A hierarchical value function, denoted V π(hs, Ki), gives the expected cumulative
reward of following the hierarchical policy π starting in state s with stack contents K.

In this paper, we will primarily be interested only in the “top level” value of the hierarchical
policy—that is, the value when the stack K is empty: V π(hs, nili). This is the value of executing
the hierarchical policy beginning in state s and starting at the top level of the hierarchy.

12

Deﬁnition 5 The projected value function, denoted V π(s), is the value of executing hierarchical
policy π starting in state s and starting at the root of the task hierarchy.

3.3 Decomposition of the Projected Value Function

Now that we have deﬁned a hierarchical policy and its projected value function, we can show how
that value function can be decomposed hierarchically. The decomposition is based on the following
theorem:

Theorem 1 Given a task graph over tasks M0, . . . , Mn and a hierarchical policy π, each subtask Mi
deﬁnes a semi-Markov decision process with states Si, actions Ai, probability transition function
i (s′, N |s, a), and expected reward function R(s, a) = V π(a, s), where V π(a, s) is the projected
P π
value function for child task Ma in state s. If a is a primitive action, V π(a, s) is deﬁned as the
expected immediate reward of executing a in s: V π(a, s) =

s′ P (s′|s, a)R(s′|s, a).

Proof: Consider all of the subroutines that are descendants of task Mi in the task graph. Be-
cause all of these subroutines are executing ﬁxed policies (speciﬁed by hierarchical policy π), the
i (s′, N |s, a) is a well deﬁned, stationary distribution for each child
probability transition function P π
subroutine a. The set of states Si and the set of actions Ai are obvious. The interesting part of
this theorem is the fact that the expected reward function R(s, a) of the SMDP is the projected
value function of the child task Ma.

P

To see this, let us write out the value of V π(i, s):

V π(i, s) = E{rt + γrt+1 + γ2rt+2 + · · · |st = s, π}

This sum continues until the subroutine for task Mi enters a state in Ti.

Now let us suppose that the ﬁrst action chosen by πi is a subroutine a. This subroutine is in-
i (s′, N |s, a).

voked, and it executes for a number of steps N and terminates in state s′ according to P π
We can rewrite Equation (5) as

V π(i, s) = E

γurt+u +

γurt+u

st = s, π

N −1

(

u=0
X

∞

Xu=N

)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

The ﬁrst summation on the right-hand side of Equation (6) is the discounted sum of rewards for
executing subroutine a starting in state s until it terminates, in other words, it is V π(a, s), the
projected value function for the child task Ma. The second term on the right-hand side of the
equation is the value of s′ for the current task i, V π(i, s′), discounted by γN , where s′ is the current
state when subroutine a terminates. We can write this in the form of a Bellman equation:

(5)

(6)

(7)

V π(i, s) = V π(πi(s), s) +

′

P π

i (s

, N |s, πi(s))γN V π(i, s

′

)

Xs′,N

This has the same form as Equation (3), which is the Bellman equation for an SMDP, where the
ﬁrst term is the expected reward R(s, π(s)). Q.E.D.

To obtain a hierarchical decomposition of the projected value function, let us switch to the
action-value (or Q) representation. First, we need to extend the Q notation to handle the task
hierarchy. Let Qπ(i, s, a) be the expected cumulative reward for subtask Mi of performing action a
in state s and then following hierarchical policy π until subtask Mi terminates. With this notation,
we can re-state Equation (7) as follows:

Qπ(i, s, a) = V π(a, s) +

′

P π

i (s

, N |s, a)γN Qπ(i, s

′

′

, π(s

)),

(8)

Xs′,N

13

The right-most term in this equation is the expected discounted reward of completing task Mi after
executing action a in state s. This term only depends on i, s, and a, because the summation
marginalizes away the dependence on s′ and N . Let us deﬁne C π(i, s, a) to be equal to this term:

Deﬁnition 6 The completion function, C π(i, s, a), is the expected discounted cumulative reward
of completing subtask Mi after invoking the subroutine for subtask Ma in state s. The reward is
discounted back to the point in time where a begins execution.

C π(i, s, a) =

′

P π

i (s

, N |s, a)γN Qπ(i, s

′

′

, π(s

))

Xs′,N

With this deﬁnition, we can express the Q function recursively as

Qπ(i, s, a) = V π(a, s) + C π(i, s, a).

Finally, we can re-express the deﬁnition for V π(i, s) as

V π(i, s) =

Qπ(i, s, πi(s))

s′ P (s′|s, i)R(s′|s, i)

(

if i is composite
if i is primitive

(9)

(10)

(11)

P

We will refer to equations (9), (10), and (11) as the decomposition equations for the MAXQ
hierarchy under a ﬁxed hierarchical policy π. These equations recursively decompose the projected
value function for the root, V π(0, s) into the projected value functions for the individual subtasks,
M1, . . . , Mn and the individual completion functions C π(j, s, a) for j = 1, . . . , n. The fundamental
quantities that must be stored to represent the value function decomposition are just the C values
for all non-primitive subtasks and the V values for all primitive actions.

To make it easier for programmers to design and debug MAXQ decompositions, we have de-
veloped a graphical representation that we call the MAXQ graph. A MAXQ graph for the Taxi
domain is shown in Figure 3. The graph contains two kinds of nodes, Max nodes and Q nodes. The
Max nodes correspond to the subtasks in the task decomposition—there is one Max node for each
primitive action and one Max node for each subtask (including the Root) task. Each primitive Max
node i stores the value of V π(i, s). The Q nodes correspond to the actions that are available for
each subtask. Each Q node for parent task i, state s and subtask a stores the value of C π(i, s, a).
In addition to storing information, the Max nodes and Q nodes can be viewed as performing
parts of the computation described by the decomposition equations. Speciﬁcally, each Max node
i can be viewed as computing the projected value function V π(i, s) for its subtask. For primitive
Max nodes, this information is stored in the node. For composite Max nodes, this information is
obtained by “asking” the Q node corresponding to πi(s). Each Q node with parent task i and child
task a can be viewed as computing the value of Qπ(i, s, a). It does this by “asking” its child task
a for its projected value function V π(a, s) and then adding its completion function C π(i, s, a).

As an example, consider the situation shown in Figure 1, which we will denote by s1. Suppose
that the passenger is at R and wishes to go to B. Let the hierarchical policy we are evaluating be an
optimal policy denoted by π (we will omit the superscript * to reduce the clutter of the notation).
The value of this state under π is 10, because it will cost 1 unit to move the taxi to R, 1 unit to
pickup the passenger, 7 units to move the taxi to B, and 1 unit to putdown the passenger, for a
total of 10 units (a reward of −10). When the passenger is delivered, the agent gets a reward of
+20, so the net value is +10.

Figure 4 shows how the MAXQ hierarchy computes this value. To compute the value V π(Root, s1),

MaxRoot consults its policy and ﬁnds that πRoot(s1) is Get. Hence, it “asks” the Q node, QGet

14

MaxRoot

QGet

QPut

MaxGet

MaxPut

QPickup

QNavigateForGet

QNavigateForPut

QPutdown

t/source

t/destination

Pickup

Putdown

MaxNavigate(t)

QNorth(t)

QEast(t)

QSouth(t)

QWest(t)

North

East

South

West

Figure 3: A MAXQ graph for the Taxi Domain

to compute Qπ(Root, s1, Get). The completion cost for the Root task after performing a Get,
C π(Root, s1, Get), is 12, because it will cost 8 units to deliver the customer (for a net reward of
20 − 8 = 12) after completing the Get subtask. However, this is just the reward after completing
the Get, so it must ask MaxGet to estimate the expected reward of performing the Get itself.

The policy for MaxGet dictates that in s1, the Navigate subroutine should be invoked with
t bound to R, so MaxGet consults the Q node, QNavigateForGet to compute the expected re-
ward. QNavigateForGet knows that after completing the Navigate(R) task, one more action (the
Pickup) will be required to complete the Get, so C π(MaxGet, s1, Navigate(R)) = −1. It then asks
MaxNavigate(R) to compute the expected reward of performing a Navigate to location R.

The policy for MaxNavigate chooses the North action, so MaxNavigate asks QNorth to compute
the value. QNorth looks up its completion cost, and ﬁnds that C π(Navigate, s1, North) is 0 (i.e.,
the Navigate task will be completed after performing the North action). It consults MaxNorth to
determine the expected cost of performing the North action itself. Because MaxNorth is a primitive
action, it looks up its expected reward, which is −1.

Now this series of recursive computations can conclude as follows:

• Qπ(Navigate(R), s1, North) = −1 + 0

15

10

MaxRoot

QPut

MaxPut

10

12

QGet

-2

MaxGet

-2

-1

-1

-1

QPickup

QNavigateForGet

QNavigateForPut

QPutdown

Pickup

Putdown

-1

MaxNavigate(t)

0

QNorth(t)

QEast(t)

QSouth(t)

QWest(t)

North

East

South

West

Figure 4: Computing the value of a state using the MAXQ hierarchy. The C value of each Q node
is shown to the left of the node. All other numbers show the values being returned up the graph.

• V π(Navigate(R), s1) = −1

• Qπ(Get, s1, Navigate(R)) = −1 + −1

(−1 to perform the Navigate plus −1 to complete the Get.

• V π(Get, s1) = −2

• Qπ(Root, s1, Get) = −2 + 12

(−2 to perform the Get plus 12 to complete the Root task and collect the ﬁnal reward).

The end result of all of this is that the value of V π(Root, s1) is decomposed into a sum of C

terms plus the expected reward of the chosen primitive action:

V π(Root, s1) = V π(North, s1) + C π(Navigate(R), s1, North) +
C π(Get, s1, Navigate(R)) + C π(Root, s1, Get)

= −1 + 0 + −1 + 12

= 10

16

V π(0, s)

XXXXXXX

(cid:24)(cid:24)(cid:24)(cid:24)(cid:24)(cid:24)(cid:24)
PPPPP

V π(a1, s)

(cid:16)(cid:16)(cid:16)(cid:16)(cid:16)

.

.

.
V π(am−1, s)
(cid:26)
Z

(cid:26)

(cid:26)(cid:26)

Z

ZZ

V π(am, s) C π(am−1, s, am)

C π(a1, s, a2)

C π(0, s, a1)

r1

r2

r3

r4

r5

r8

r9

r10

r11

r12

r13

r14

.

.

.

Figure 5: The MAXQ decomposition; r1, . . . , r14 denote the sequence of rewards received from
primitive actions at times 1, . . . , 14.

In general, the MAXQ value function decomposition has the form

V π(0, s) = V π(am, s) + C π(am−1, s, am) + . . . + C π(a1, s, a2) + C π(0, s, a1),

(12)

where a0, a1, . . . , am is the “path” of Max nodes chosen by the hierarchical policy going from the
Root down to a primitive leaf node.

We can summarize the presentation of this section by the following theorem:

Theorem 2 Let π = {πi; i = 0, . . . , n} be a hierarchical policy deﬁned for a given MAXQ graph
with subtasks M0, . . . , Mn, and let i = 0 be the root node of the graph. Then there exist values
for C π(i, s, a) (for internal Max nodes) and V π(i, s) (for primitive, leaf Max nodes) such that
V π(0, s) (as computed by the decomposition equations (9), (10), and (11)) is the expected discounted
cumulative reward of following policy π starting in state s.

Proof: The proof is by induction on the number of levels in the task graph. At each level i,
we compute values for C π(i, s, π(s)) (or V π(i, s), if i is primitive) according to the decomposition
equations. We can apply the decomposition equations again to compute Qπ(i, s, π(s)) and apply
Equation (8) and Theorem 1 to conclude that Qπ(i, s, π(s)) gives the value function for level i.
When i = 0, we obtain the value function for the entire hierarchical policy. Q. E. D.

It is important to note that this representation theorem does not mention the pseudo-reward
function, because the pseudo-reward is used only during learning. This theorem captures the
representational power of the MAXQ decomposition, but it does not address the question of whether
there is a learning algorithm that can ﬁnd a given policy. That is the subject of the next section.

4 A Learning Algorithm for the MAXQ Decomposition

In order to develop a learning algorithm for the MAXQ decomposition, we must consider exactly
what we are hoping to achieve. Of course, for any MDP M , we would like to ﬁnd an optimal policy
π∗. However, in the MAXQ method (and in hierarchical reinforcement learning in general), the
programmer imposes a hierarchy on the problem. This hierarchy constrains the space of possible
policies so that it may not be possible to represent the optimal policy or its value function.

17

In the MAXQ method, the constraints take two forms. First, within a subtask, only some of the
possible primitive actions may be permitted. For example, in the taxi task, during a Navigate(t),
only the North, South, East, and West actions are available—the Pickup and Putdown actions are
not allowed. Second, consider a Max node Mj with child nodes {Mj1, . . . , Mjk}. The policy learned
for Mj must involve executing the learned policies of these child nodes. When the policy for child
node Mji is executed, it will run until it enters a state in Tji. Hence, any policy learned for Mj
must pass through some subset of these terminal state sets {Tj1, . . . , Tjk}.

The HAM method shares these same two constraints and in addition, it imposes a partial policy
on each node, so that the policy for any subtask Mi must be a deterministic reﬁnement of the given
non-deterministic initial policy for node i.

In the “option” approach, the policy is even further constrained. In this approach, there are
only two non-primitive levels in the hierarchy, and the subtasks at the lower level are given complete
policies by the programmer. Hence, any learned policy must be constructed by “concatenating”
the given lower level policies in some order.

The purpose of imposing these constraints on the policy is to incorporate prior knowledge and
thereby reduce the size of the space that must be searched to ﬁnd a good policy. However, these
constraints may make it impossible to learn the optimal policy.

If we can’t learn the optimal policy, the next best target would be to learn the best policy that

is consistent with (i.e., can be represented by) the given hierarchy.

Deﬁnition 7 A hierarchically optimal policy for MDP M is a policy that achieves the highest
cumulative reward among all policies consistent with the given hierarchy.

Parr (1998b) proves that his HAMQ learning algorithm converges with probability 1 to a hier-
archically optimal policy. Similarly, given a ﬁxed set of options, Sutton, Precup, and Singh (1998)
prove that their SMDP learning algorithm converges to a hierarchically optimal value function.
(Incidentally, they also show that if the primitive actions are also made available as “trivial” op-
tions, then their SMDP method converges to the optimal policy. However, in this case, it is hard
to say anything formal about how the options speed the learning process. They may in fact hinder
it (Hauskrecht et al., 1998).)

With the MAXQ method, we will seek an even weaker form of optimality: recursive optimality.

Deﬁnition 8 A recursively optimal policy for MDP M with MAXQ decomposition {M0, . . . , Mk}
is a hierarchical policy π = {π0, . . . , πk} such that for each subtask Mi, the corresponding policy πi
is optimal for the SMDP deﬁned by the set of states Si, the set of actions Ai, the state transition
probability function P π(s′, N |s, a), and the reward function given by the sum of the original reward
function R(s′|s, a) and the pseudo-reward function ˜Ri(s′).

Note that in this deﬁnition, the state transition probability distribution is deﬁned by the locally
optimal policies {πj} of all subtasks that are descendants of Mi in the MAXQ graph. Hence,
recursive optimality is a kind of local optimality in which the policy at each node is optimal given
the policies of its children.

The reason to seek recursive optimality rather than hierarchical optimality is that recursive
optimality makes it possible to solve each subtask without reference to the context in which it is
executed. This context-free property makes it easier to share and re-use subtasks. It will also turn
out to be essential for the successful use of state abstraction.

Before we proceed to describe our learning algorithm for recursive optimality, let us see how

recursive optimality diﬀers from hierarchical optimality.

18

MaxRoot

QExit

QGotoGoal

MaxExit

MaxGotoGoal

QExitNorth

QExitSouth

QExitEast

QNorthG

QSouthG

QEastG

G

*

*

Figure 6: A simple MDP (left) and its associated MAXQ graph (right). The policy shown in the
left diagram is recursively optimal but not hierarchically optimal. The shaded cells indicate points
where the locally-optimal policy is not globally optimal.

North

South

East

It is easy to construct examples of policies that are recursively optimal but not hierarchically
optimal. Consider the simple maze problem and its associated MAXQ graph shown in Figures 6.
Suppose a robot starts somewhere in the left room, and it must reach the goal G in the right room.
The robot has three actions, North, South, and East, and these actions are deterministic. The robot
receives a reward of −1 for each move. Let us deﬁne two subtasks:

• Exit. This task terminates when the robot exits the left room. We can set the pseudo-reward

function ˜R to be 0 for the two terminal states (i.e., the two states indicated by *’s).

• GotoGoal. This task terminates when the robot reaches the goal G.

The arrows in Figure 6 show the locally optimal policy within each room. The arrows on the
left seek to exit the left room by the shortest path, because this is what we speciﬁed when we set
the pseudo-reward function to 0. The arrows on the right follow the shortest path to the goal,
which is ﬁne. However, the resulting policy is neither hierarchically optimal nor optimal.

There exists a hierarchical policy that would always exit the left room by the upper door. The
MAXQ value function decomposition can represent the value function of this policy, but such a
policy would not be locally optimal (because, for example, the states in the “shaded” region would
If we consider for a moment, we can see a way to
not follow the shortest path to a doorway).
ﬁx this problem. The value of the upper starred state under the optimal hierarchical policy is
−2 and the value of the lower starred state is −6. Hence, if we set ˜R to have these values, then
the recursively-optimal policy would be hierarchically optimal (and globally optimal).
In other
words, if the programmer can guess the right values for the terminal states of a subtask, then the
recursively optimal policy will be hierarchically optimal (provided that all primitive actions are
available within the subtask).

This basic idea was ﬁrst pointed out by Dean and Lin (1995). They describe an algorithm that
makes initial guesses for the values of these starred states and then updates those guesses based
on the computed values of the starred states under the resulting recursively-optimal policy. They
proved that this will converge to a hierarchically optimal policy. The drawback of their method is

19

that it requires repeated solution of the resulting hierarchical learning problem, and this does not
always yield a speedup over just solving the original, ﬂat problem.

Parr (1998a) proposed an interesting approach that constructs a set of diﬀerent ˜R functions and
computes the recursively optimal policy under each of them for each subtask. His method chooses
the ˜R functions in such a way that the hierarchically optimal policy can be approximated to any
desired degree. Unfortunately, the method is quite ineﬃcient, because it relies on solving a series
of linear programming problems each of which requires time polynomial in several parameters,
including the number of states |Si| within the subtask.

This discussion suggests that while, in principle, it is possible to learn good values for the pseudo-
reward function, in practice, we must rely on the programmer to specify a single pseudo-reward
function, ˜R. If the programmer wishes to consider a small number of alternative pseudo-reward
functions, they can be handled by deﬁning a small number of subtasks that are identical except
for their ˜R functions, and permitting the learning algorithm to choose the one that gives the best
recursively-optimal policy.

In practice, we have employed the following simpliﬁed approach to deﬁning ˜R. For each subtask
Mi, we deﬁne two predicates: the termination predicate, Ti, and a goal predicate Gi. The goal
predicate deﬁnes a subset of the terminated states that are “goal states”, and these have a pseudo-
reward of 0. All other terminal states have a ﬁxed constant pseudo-reward (e.g., −100) that is set
so that it is always better to terminate in a goal state than in a non-goal state. For the problems
on which we have tested the MAXQ method, this worked very well.

In our experiments with MAXQ, we have found that it is easy to make mistakes in deﬁning
Ti and Gi. If the goal is not deﬁned carefully, it is easy to create a set of subtasks that lead to
inﬁnite looping. For example, consider again the problem in Figure 6. Suppose we permit a fourth
action, West in the MDP and let us deﬁne the termination and goal predicates for the right hand
room to be satisﬁed iﬀ either the robot reaches the goal or it exits the room. This is a very natural
deﬁnition, since it is quite similar to the deﬁnition for the left-hand room. However, the resulting
locally-optimal policy for this room will attempt to move to the nearest of these three locations:
the goal, the upper door, or the lower door. We can easily see that for all but a few states near the
goal, the only policies that can be constructed by MaxRoot will loop forever, ﬁrst trying to leave
the left room by entering the right room, and then trying to leave the right room by entering the
left room. This problem is easily ﬁxed by deﬁning the goal predicate Gi for the right room to be
true if and only if the robot reaches the goal G. But avoiding such “undesired termination” bugs
can be hard in more complex domains.

Now that we have an understanding of recursively optimal policies, we present two learning
algorithms. The ﬁrst one, called MAXQ-0, applies only in the case when the pseudo-reward function
˜R is always zero. We will ﬁrst prove its convergence properties and then show how it can be extended
to give the second algorithm, MAXQ-Q, which works with general pseudo-reward functions.

Table 2 gives pseudo-code for MAXQ-0. MAXQ-0 is a recursive function that executes the
current exploration policy starting at Max node i in state s. It performs actions until it reaches
a terminal state, at which point it returns a count of the total number of primitive actions that
have been executed. To execute an action, MAXQ-0 calls itself recursively. When the recursive call
returns, it updates the value of the completion function for node i. It uses the count of the number
of primitive actions to appropriately discount the value of the resulting state s′. At leaf nodes,
MAXQ-0 updates the estimated one-step expected reward, V (i, s). The value αt(i) is a “learning
rate” parameter that should be gradually decreased to zero in the limit.

There are two things that must be speciﬁed in order to make this algorithm description complete.
First, we must specify how to compute Vt(i, s′) in line 12, since it is not stored in the Max node.
It is computed by the following modiﬁed versions of the decomposition equations:

20

Table 2: The MAXQ-0 learning algorithm.

1

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

function MAXQ-0(MaxNode i, State s)

if i is a primitive MaxNode

execute i, receive r, and observe result state s′
Vt+1(i, s) := (1 − αt(i)) · Vt(i, s) + αt(i) · rt
return 1

else

let count = 0
while Ti(s) is false do

choose an action a according to the current exploration policy πx(i, s)
let N = MAXQ-0(a, s)
observe result state s′
Ct+1(i, s, a) := (1 − αt(i)) · Ct(i, s, a) + αt(i) · γN Vt(i, s′
count := count + N
s := s′
end
return count

)

end MAXQ-0

Table 3: Pseudo-code for Greedy Execution of the MAXQ Graph

function EvaluateMaxNode(i, s)

if i is a primitive Max node
return hVt(i, s), ii

else

for each j ∈ Ai,

1

2
3
4
5
6
7
8

let hV(j, s), aji = EvaluateMaxNode(j, s)

let jhg = argmaxj Vt(j, s) + Ct(i, s, j)
return hVt(jhg, s), ajhg i

end // EvaluateMaxNode

Vt(i, s) =

maxa Qt(i, s, a)
Vt(i, s)

if i is composite
if i is primitive

(

Qt(i, s, a) = Vt(a, s) + Ct(i, s, a).

(13)

(14)

These equations reﬂect two important changes compared with Equations (10) and (11). First,
in the ﬁrst equation, Vt(i, s) is deﬁned in terms of the Q value of the best action a, rather than of
the action chosen by a ﬁxed hierarchical policy. Second, there are no π superscripts, because the
current value function, Vt(i, s) is not based on a ﬁxed hierarchical policy π.

To compute Vt(i, s) using these equations, we must perform a complete search of all paths
through the MAXQ graph starting at node i and ending at the leaf nodes. Table 3 gives pseudo-
code for a recursive function, EvaluateMaxNode, that implements a depth-ﬁrst search. In addition
to returning Vt(i, s), EvaluateMaxNode also returns the action at the leaf node that achieves this
value. This information is not needed for MAXQ-0, but it will be useful later when we consider
non-hierarchical execution of the learned recursively-optimal policy.

The second thing that must be speciﬁed to complete our deﬁnition of MAXQ-0 is the exploration

policy, πx. We require that πx be an ordered GLIE policy.

21

Deﬁnition 9 An ordered GLIE policy is a GLIE policy (Greedy in the Limit of Inﬁnite Explo-
ration) that converges in the limit to an ordered greedy policy, which is a greedy policy that imposes
an arbitrary ﬁxed order ω on the available actions and breaks ties in favor of the action a that ap-
pears earliest in that order.

We need this property in order to ensure that MAXQ-0 converges to a uniquely-deﬁned recur-
sively optimal policy. A fundamental problem with recursive optimality is that in general, each Max
node i will have a choice of many diﬀerent locally optimal policies given the policies adopted by its
descendant nodes. These diﬀerent locally optimal policies will all achieve the same locally optimal
value function, but they can give rise to diﬀerent probability transition functions P (s′, N |s, i). The
result will be that the Semi-Markov Decision Problem deﬁned at the next level above node i in
the MAXQ graph will diﬀer depending on which of these various locally optimal policies is chosen
by node i. However, if we establish a ﬁxed ordering over the Max nodes in the MAXQ graph
(e.g., a left-to-right depth-ﬁrst numbering), and break ties in favor of the lowest-numbered action,
then this deﬁnes a unique policy at each Max node. And consequently, by induction, it deﬁnes a
unique policy for the entire MAXQ graph. Let us call this policy π∗
r . We will use the r subscript
to denote recursively optimal quantities under an ordered greedy policy. Hence, the corresponding
value function is V ∗
r denote the corresponding completion function and action-value
function. We now prove that the MAXQ-0 algorithm converges to π∗
r .

r , and C ∗

r and Q∗

Theorem 3 Let M = hS, A, P, R, P0i be either an episodic MDP for which all deterministic policies
are proper or a discounted inﬁnite horizon MDP with discount factor γ. Let H be a MAXQ graph
deﬁned over subtasks {M0, . . . , Mk} such that the pseudo-reward function ˜Ri(s′|s, a) is zero for all
i, s, a, and s′. Let αt(i) > 0 be a sequence of constants for each Max node i such that

lim
T →∞

T

t=1
X

lim
T →∞

T

t=1
X

αt(i) = ∞ and

α2

t (i) < ∞

(15)

Let πx(i, s) be an ordered GLIE policy at each node i and state s and assume that |Vt(i, s)| and
|Ct(i, s, a)| are bounded for all t, i, s, and a. Then with probability 1, algorithm MAXQ-0 converges
to π∗

r , the unique recursively optimal policy for M consistent with H and πx.

Proof: The proof follows an argument similar to those introduced to prove the convergence of Q
learning and SARSA(0) (Bertsekas & Tsitsiklis, 1996; Jaakkola et al., 1994). We will employ the
following result from stochastic approximation theory:

Lemma 1 (Proposition 4.5 from Bertsekas and Tsitsiklis, 1996) Consider the iteration

rt+1(x) := (1 − αt(x))rt(x) + αt(x)((U rt)(x) + wt(x) + ut(x)).

Let Ft = {r0(x), . . . , rt(x), w0(x), . . . , wt−1(x), α0(x), . . . , αt(x), ∀x} be the entire history of the it-
eration.
If

(a) The αt(i) ≥ 0 satisfy conditions (15)

(b) For every i and t the noise terms wt(i) satisfy E[wt(i)|Ft] = 0

(c) Given any norm ||·|| on Rn, there exist constants A and B such that E[w2

t (i)|Ft] ≤ A+B||rt||2.

22

(d) There exists a vector r∗, a positive vector ξ, and a scalar β ∈ [0, 1), such that for all t,

||U rt − r

||ξ ≤ β||rt − r

||ξ

∗

∗

(e) There exists a nonnegative random sequence θt that converges to zero with probability 1 and

is such that for all t

|ut(x)| ≤ θt(||rt||ξ + 1)

then rt converges to r∗ with probability 1. The notation || · ||ξ denotes a weighted maximum norm

||A||ξ = max

x

|A(x)|
ξ(x)

.

The structure of the proof of Theorem 3 will be inductive, starting at the leaves of the MAXQ
graph and working toward the root. We will employ a diﬀerent time clock at each node i to count
the number of update steps performed by MAXQ-0 at that node. The variable t will always refer
to the time clock of the current node i.

To prove the base case for any primitive Max node, we note that line 4 of MAXQ-0 is just the
standard stochastic approximation algorithm for computing the expected reward for performing
action a in state s, and therefore it converges under the conditions given above.

To prove the recursive case, consider any composite Max node i with child node j. Let
Pt(s′, N |s, j) be the transition probability distribution for performing child action j in state s
at time t (i.e., while following the exploration policy in all descendent nodes of node j). By the
inductive assumption, MAXQ-0 applied to j will converge to the (unique) recursively optimal value
function V ∗
r (j, s) with probability 1. Furthermore, because MAXQ-0 is following an ordered GLIE
policy for j and its descendants, Pt(s′, N |s, j) will converge to P ∗
r (s′, N |s, j), the unique transition
probability function for executing child j under the locally optimal policy π∗
r . What remains to be
shown is that the update assignment for C (line 12 of the MAXQ-0 algorithm) will converge to the
optimal C ∗

r function with probability 1.

To prove this, we will apply Lemma 1. We will identify the x in the lemma with a state-action
pair (s, a). The vector rt will be the completion-cost table Ct(i, s, a) for all s, a and ﬁxed i after
t update steps. The vector r∗ will be the optimal completion-cost C ∗
r (i, s, a) (again, for ﬁxed i).
Deﬁne the mapping U to be

(U C)(i, s, a) =

′

∗
r (s

P

, N |s, a)γN (max

[C(i, s

′

′
, a

) + V

′
∗
r (a

′

, s

)])

a′

Xs′

This is a C update under the MDP Mi assuming that all descendant value functions, V ∗
transition probabilities, P ∗

r (s′, N |s, a), have converged.

r (a, s), and

To apply the lemma, we must ﬁrst express the C update formula in the form of the update rule
in the lemma. Let s be the state that results from performing a in state s. Line 12 can be written

Ct+1(i, s, a)

:= (1 − αt(i)) · Ct(i, s, a) + αt(i) · γN (max
a′

′
[Ct(i, s, a

′
) + Vt(a

, s)])

:= (1 − αt(i)) · Ct(i, s, a) + αt(i) · [(U Ct)(i, s, a) + wt(i, s, a) + ut(i, s, a)]

where

wt(i, s, a) = γN

′
[Ct(i, s, a

′
) + Vt(a

, s)]

−

max
a′

(cid:18)

(cid:19)

23

ut(i, s, a) =

Pt(s

, N |s, a)γN

[Ct(i, s

′

′
, a

′
) + Vt(a

, s

)]

−

Pt(s

, N |s, a)γN

[Ct(i, s

′

′
, a

′
) + Vt(a

, s

)]

′

′

Xs′,N

Xs′,N

Xs′,N

max
a′

max
a′

(cid:18)

(cid:18)

max
a′

(cid:18)

′

∗
r (s

P

, N |s, a)γN

[Ct(i, s

′

′
, a

) + V

′
∗
r (a

′

, s

)]

′

′

(cid:19)

(cid:19)

(cid:19)

Here wt(i, s, a) is the diﬀerence between doing an update at node i using the single sample point s
drawn according to Pt(s′, N |s, a) and doing an update using the full distribution Pt(s′, N |s, a). The
value of ut(i, s, a) captures the diﬀerence between doing an update using the current probability
transitions Pt(s′, N |s, a) and current value functions of the children Vt(a′, s′) and doing an up-
date using the optimal probability transitions P ∗
r (s′, N |s, a) and the optimal values of the children
r (a′, s′).
V ∗

We now verify the conditions of Lemma 1.
Condition (a) is assumed in the conditions of the theorem with αt(s, a) = αt(i).
Condition (b) is satisﬁed because s is sampled from Pt(s′, N |s, a), so the expected value of the

diﬀerence is zero.

Condition (c) follows directly from the assumption that the |Ct(i, s, a)| and |Vt(i, s)| are bounded.
Condition (d) is the condition that U is a weighted max norm pseudo-contraction. We can
derive this by starting with the weighted max norm for Q learning. It is well known that Q is
a weighted max norm pseudo-contraction (Bertsekas & Tsitsiklis, 1996) in both the episodic case
where all deterministic policies are proper (and the discount factor γ = 1) and in the inﬁnite horizon
discounted case (with γ < 1). That is, there exists a positive vector ξ and a scalar β ∈ [0, 1), such
that for all t,

||T Qt − Q

||ξ ≤ β||Qt − Q

||ξ,

∗

∗

(16)

where T is the operator

(T Q)(s, a) =

′

P (s

, N |s, a)γN [R(s

′

|s, a) + max

a′ Q(s

′

′
, a

)].

Xs′,N

Now we will show how to derive the contraction for the C update operator U . Our plan is to show
ﬁrst how to express the U operator for learning C in terms of the T operator for updating Q values.
Then we will replace T Q in the contraction equation for Q learning with U C, and show that U is
a weighted max-norm contraction under the same weights ξ and the same β.

Recall from Eqn. (10) that Q(i, s, a) = C(i, s, a)+V (a, s). Furthermore, the U operator performs
its updates using the optimal value functions of the child nodes, so we can write this as Qt(i, s, a) =
Ct(i, s, a) + V ∗(a, s). Now once the children of node i have converged, the Q-function version of
the Bellman equation for MDP Mi can be written as

Q(i, s, a) =

′

∗
r (s

P

, N |s, a)γN [V

∗
r (a, s) + max

a′ Q(i, s

′

′
, a

)].

As we have noted before, V ∗
for node i, the T operator can be rewritten as

r (a, s) plays the role of the immediate reward function for Mi. Therefore,

(T Q)(i, s, a) =

′

∗
r (s

P

|s, a)γN [V

∗
r (a, s) + max

a′ Q(i, s

′

′
, a

)].

Xs′,N

Xs′,N

24

Now we replace Q(i, s, a) by C(i, s, a) + V ∗

r (a, s), and obtain

(T Q)(i, s, a) =

′

∗
r (s

P

, N |s, a)γN (V

∗
r (a, s) + max

[C(i, s

′

′
, a

) + V

′
∗
r (a

′

, s

)]).

Xs′,N

Note that V ∗
obtain

r (a, s) does not depend on s′ or N , so we can move it outside the expectation and

(T Q)(i, s, a) = V

∗
r (a, s) +

′

∗
r (s

P

|s, a)γN (max

[C(i, s

′

′
, a

) + V

′
∗
r (a

′

, s

)])

Xs′,N
∗
r (a, s) + (U C)(i, s, a)

= V

Abusing notation slightly, we will express this in vector form as T Q(i) = V ∗
we can write Qt(i, s, a) = Ct(i, s, a) + V ∗

r (a, s) in vector form as Qt(i) = Ct(i) + V ∗
r .

r + U C(i). Similarly,

Now we can substitute these two formulas into the max norm pseudo-contraction formula for

T , Eqn. (16) to obtain

a′

a′

||V

∗
r + U Ct(i) − (C

∗
r (i) + V

∗
r )||ξ ≤ β||V

∗
r + Ct(i) − (V

∗
r + C

∗
r (i))||ξ.

The V ∗ terms cancel on both sides of the equation, and we get

||U Ct(i) − C

∗
r (i)||ξ ≤ β||Ct(i) − C

∗
r (i)||ξ.

Finally, it is easy verify (e), the most important condition. By assumption, the ordered GLIE
policies in the child nodes converge with probability 1 to locally optimal policies for the children.
Therefore Pt(s′, N |s, a) converges to P ∗
r (s′, N |s, a) for all s′, N, s, and a with probability 1 and
Vt(a, s) converges with probability 1 to V ∗
r (a, s) for all child actions a. Therefore, |ut| converges
to zero with probability 1. We can trivially construct a sequence θt = |ut| that bounds this
convergence, so

|ut(s, a)| ≤ θt ≤ θt(||Ct(s, a)||ξ + 1).

We have veriﬁed all of the conditions of Lemma 1, so we can conclude that Ct(i) converges to
C ∗
r (i) with probability 1. By induction, we can conclude that this holds for all nodes in the MAXQ
including the root node, so the value function represented by the MAXQ graph converges to the
unique value function of the recursively optimal policy π∗

r . Q.E.D.

Algorithm MAXQ-0 can be extended to accelerate learning in the higher nodes of the graph by
a technique that we call “all states updating”. When an action a is chosen for Max node i in state s,
the execution of a will move the environment through a sequence of states s = s1, . . . , sN , sN +1 = s′.
If a was indeed the best abstract action to choose in s1, then it should also be the best action to
choose (at node i) in states s2 through sN . Hence, we can execute a version of line 12 in MAXQ-0
for each of these intermediate states as shown in this replacement pseudo-code:

12a
12b
12c

for j from 1 to N do

Ct+1(i, sj, a) := (1 − αt(i)) · Ct(i, sj, a) + αt(i) · γ(N +1−j)maxa′ Qt(i, s′, a′)
end // for

In our implementation, as each composite action is executed by MAXQ-0, it constructs a linked
list of the sequence of primitive states that were visited. This list is returned when the composite
action terminates. The parent Max node can then process each state in this list as shown above.
The parent Max node appends the state lists that it receives from its children and passes them to
its parent when it terminates. All experiments in this paper employ all states updating.

25

Kaelbling (1993) introduced a related, but more powerful, method for accelerating hierarchical
reinforcement learning that she calls “all goals updating.” This method is suitable for a MAXQ
hierarchy containing only a root task and one level of composite tasks. To understand all goals
updating, suppose that for each primitive action, there are several composite tasks that could have
invoked that primitive action. In all goals updating, whenever a primitive action is executed, the
equivalent of line 12 of MAXQ-0 is applied in every composite task that could have invoked that
primitive action. Sutton, Precup, and Singh (1998) prove that each of the composite tasks will
converge to the optimal Q values under all goals updating.

All goals updating would work in the MAXQ hierarchy for composite tasks all of whose children
are primitive actions. However, as we have seen, at higher levels in the hierarchy, node i needs to
obtain samples of result states drawn according to P ∗(s′, N |s, a) for composite tasks a. All goals
updating cannot provide these samples, so it cannot be applied at these higher levels.

Now that we have shown the convergence of MAXQ-0, let us design a learning algorithm for
arbitrary pseudo-reward functions, ˜Ri(s). We could just add the pseudo-reward into MAXQ-0,
but this has the eﬀect of changing the MDP M to have a diﬀerent reward function. The pseudo-
rewards “contaminate” the values of all of the completion functions computed in the hierarchy.
The resulting learned policy will not be recursively optimal for the original MDP.

This problem can be solved by learning two completion functions. The ﬁrst one, C(i, s, a) is the
completion function that we have been discussing so far in this paper. It computes the expected
reward for completing task Mi after performing action a in state s and then following the learned
policy for Mi. It is computed without any reference to ˜Ri. This completion function will be used
by parent tasks to compute V (i, s), the expected reward for performing action i starting in state s.
The second completion function ˜C(i, s, a) is a completion function that we will use only “inside”
node i in order to discover the locally optimal policy for task Mi. This function will incorporate
rewards both from the “real” reward function, R(s′|s, a) and from the pseudo-reward function
˜Ri(s).

We will employ two diﬀerent update rules to learn these two completion functions. The ˜C
function will be learned using an update rule similar to the Q learning rule in line 12 of MAXQ-0.
But the C function will be learned using an update rule similar to SARSA(0)—its purpose is to
learn the value function for the policy that is discovered by optimizing ˜C. Pseudo-code for the
resulting algorithm, MAXQ-Q is shown in Table 4.

The key step is at lines 16 and 17. In line 16, MAXQ-Q ﬁrst updates ˜C using the value of the
greedy action, a∗, in the resulting state. This update includes the pseudo-reward ˜Ri. Then in line
17, MAXQ-Q updates C using this same greedy action a∗, even if this would not be the greedy
action according to the “uncontaminated” value function. This update, of course, does not include
the pseudo-reward function.

It is important to note that whereever Vt(a, s) appears in this pseudo-code, it refers to the
“uncontaminated” value function of state s when executing the Max node a. This is computed
recursively in exactly the same way as in MAXQ-0.

Finally, note that the pseudo-code also incorporates all-states updating, so each call to MAXQ-
Q returns a list of all of the states that were visited during its execution, and the updates of lines
16 and 17 are performed for each of those states. The list of states is ordered most-recent-ﬁrst, so
the states are updated starting with the last state visited and working backward to the starting
state, which helps speed up the algorithm.

When MAXQ-Q has converged, the resulting recursively optimal policy is computed at each
node by choosing the action a that maximizes ˜Q(i, s, a) = ˜C(i, s, a)+V (a, s) (breaking ties according
to the ﬁxed ordering established by the ordered GLIE policy). It is for this reason that we gave the
name “Max nodes” to the nodes that represent subtasks (and learned policies) within the MAXQ

26

Table 4: The MAXQ-Q learning algorithm.

function MAXQ-Q(MaxNode i, State s)

let seq = () be the sequence of states visited while executing i
if i is a primitive MaxNode

execute i, receive r, and observe result state s′
Vt+1(i, s) := (1 − αt(i)) · Vt(i, s) + αt(i) · rt
push s into the beginning of seq

else

let count = 0
while Ti(s) is false do

choose an action a according to the current exploration policy πx(i, s)
let childSeq = MAXQ-Q(a, s), where childSeq is the sequence of states visited

while executing action a.

observe result state s′
let a∗ = argmaxa′ [ ˜Ct(i, s′, a′) + Vt(a′, s′)]
let N = length(childSeq)
for each s in childSeq do

˜Ct+1(i, s, a) := (1 − αt(i)) · ˜Ct(i, s, a) + αt(i) · γN [ ˜Ri(s′
Ct+1(i, s, a) := (1 − αt(i)) · Ct(i, s, a) + αt(i) · γN [Ct(i, s′, a∗) + Vt(a∗, s′)]
N := N − 1
end // for

) + ˜Ct(i, s′, a∗

) + Vt(a∗, s)]

append childSeq onto the front of seq
s := s′
end // while

end // else

return seq
end MAXQ-0

1

2
3
4
5
6
7
8
9
10
11

12
13
14
15
16
17
18
19
20
21
22
23
24
25

graph. Each Q node j with parent node i stores both ˜C(i, s, j) and C(i, s, j), and it computes both
˜Q(i, s, j) and Q(i, s, j) by invoking its child Max node j. Each Max node i takes the maximum of
these Q values and computes either V (i, s) or computes the best action, a∗ using ˜Q.

Corollary 1 Under the same conditions as Theorem 3, MAXQ-Q converges the unique recursively
optimal policy for MDP M deﬁned by MAXQ graph H, pseudo-reward functions ˜R, and ordered
GLIE exploration policy πx.

Proof: The argument is identical to, but more tedious than, the proof of Theorem 3. The proof
of convergence of the ˜C values is identical to the original proof for the C values, but it relies on
proving convergence of the “new” C values as well, which follows from the same weighted max
norm pseudo-contraction argument. Q.E.D.

5 State Abstraction

There are many reasons to introduce hierarchical reinforcement learning, but perhaps the most
important reason is to create opportunities for state abstraction. When we introduced the simple
taxi problem in Figure 1, we pointed out that within each subtask, we can ignore certain aspects of
the state space. For example, while performing a MaxNavigate(t), the taxi should make the same
navigation decisions regardless of whether the passenger is in the taxi. The purpose of this section
is to formalize the conditions under which it is safe to introduce such state abstractions and to show

27

how the convergence proofs for MAXQ-Q can be extended to prove convergence in the presence of
state abstraction. Speciﬁcally, we will identify ﬁve conditions that permit the “safe” introduction
of state abstractions.

Throughout this section, we will use the taxi problem as a running example, and we will see
how each of the ﬁve conditions will permit us to reduce the number of distinct values that must
be stored in order to represent the MAXQ value function decomposition. To establish a starting
point, let us compute the number of values that must be stored for the taxi problem without any
state abstraction.

The MAXQ representation must have tables for each of the C functions at the internal nodes
and the V functions at the leaves. First, at the six leaf nodes, to store V (i, s), we must store
500 values at each node (because there are 500 states; 25 locations, 4 possible destinations for the
passenger, and 5 possible current locations for the passenger (the four special locations and inside
the taxi itself)). Second, at the root node, there are two children, which requires 2 × 500 = 1000
values. Third, at the MaxGet and MaxPut nodes, we have 2 actions each, so each one requires
1000 values, for a total of 2000. Finally, at MaxNavigate(t), we have four actions, but now we
must also consider the target parameter t, which can take four possible values. Hence, there are
eﬀectively 2000 combinations of states and t values for each action, or 8000 total values that must
be represented. In total, therefore, the MAXQ representation requires 14,000 separate quantities
to represent the value function.

To place this number in perspective, consider that a ﬂat Q learning representation must store a
separate value for each of the six primitive actions in each of the 500 possible states, for a total of
3,000 values. Hence, we can see that without state abstraction, the MAXQ representation requires
more than four times the memory of a ﬂat Q table!

5.1 Five Conditions that Permit State Abstraction

We now introduce ﬁve conditions that permit the introduction of state abstractions. For each
condition, we give a deﬁnition and then prove a lemma which states that if the condition is satisﬁed,
then the value function for some corresponding class of policies can be represented abstractly (i.e.,
by abstract versions of the V and C functions). For each condition, we then provide some rules for
identifying when that condition can be satisﬁed and give examples from the taxi domain.

We begin by introducing some deﬁnitions and notation.

Deﬁnition 10 Let M be a MDP and H be a MAXQ graph deﬁned over M . Suppose that each state
s can be written as a vector of values of a set of state variables. At each Max node i, suppose the
state variables are partitioned into two sets Xi and Yi, and let χi be a function that projects a state
s onto only the values of the variables in Xi. Then H combined with χi is called a state-abstracted
MAXQ graph.

In cases where the state variables can be partitioned, we will often write s = (x, y) to mean
that a state s is represented by a vector of values for the state variables in X and a vector of values
for the state variables in Y . Similarly, we will sometimes write P (x′, y′, N |x, y, a), V (a, x, y), and
˜Ra(x′, y′) in place of P (s′, N |s, a), V (a, s), and ˜Ra(s′), respectively.

Deﬁnition 11 An abstract hierarchical policy for MDP M with state-abstracted MAXQ graph H
and associated abstraction functions χi, is a hierarchical policy in which each policy πi (correspond-
ing to subtask Mi) satisﬁes the condition that for any two states s1 and s2 such that χi(s1) = χi(s2),
πi(s1) = πi(s2). (When πi is a stationary stochastic policy, this is interpreted to mean that the prob-
ability distributions for choosing actions are the same in both states.)

28

In order for MAXQ-Q to converge in the presence of state abstractions, we will require that
at all times t its (instantaneous) exploration policy is an abstract hierarchical policy. One way to
achieve this is to construct the exploration policy so that it only uses information from the relevant
state variables in deciding what action to perform. Boltzmann exploration based on the (state-
abstracted) Q values, ǫ-greedy exploration, and counter-based exploration based on abstracted
states are all abstract exploration policies. Counter-based exploration based on the full state space
is not an abstract exploration policy.

Now that we have introduced our notation, let us describe and analyze the ﬁve abstraction
conditions. We have identiﬁed three diﬀerent kinds of conditions under which abstractions can be
introduced. The ﬁrst kind involves eliminating irrelevant variables within a subtask of the MAXQ
graph. Under this form of abstraction, nodes toward the leaves of the MAXQ graph tend to have
very few relevant variables, and nodes higher in the graph have more relevant variables. Hence,
this kind of abstraction is most useful at the lower levels of the MAXQ graph.

The second kind of abstraction arises from “funnel” actions. These are macro actions that move
the environment from some large number of initial states to a small number of resulting states.
The completion cost of such subtasks can be represented using a number of values proportional to
the number of resulting states. Funnel actions tend to appear higher in the MAXQ graph, so this
form of abstraction is most useful near the root of the graph.

The third kind of abstraction arises from the structure of the MAXQ graph itself. It exploits
the fact that large parts of the state space for a subtask may not be reachable because of the
termination conditions of its ancestors in the MAXQ graph.

We begin by describing two abstraction conditions of the ﬁrst type. Then we will present two

conditions of the second type. And ﬁnally, we describe one condition of the third type.

5.1.1 Condition 1: Max Node Irrelevance

The ﬁrst condition arises when a set of state variables is irrelevant to a Max node.

Deﬁnition 12 Let Mi be a Max node in a MAXQ graph H for MDP M . A set of state variables
Y is irrelevant to node i if the state variables of M can be partitioned into two sets X and Y such
that for any stationary abstract hierarchical policy π executed by the descendants of i, the following
two properties hold:

• the state transition probability distribution P π(s′, N |s, a) at node i can be factored into the

product of two distributions:

′

P π(x

, y

′

, N |x, y, a) = P π(y

′

′
|y, a) · P π(x

, N |x, a),

(17)

where y and y′ give values for the variables in Y , and x and x′ give values for the variables
in X.

• for any pair of states s1 = (x, y1) and s2 = (x, y2) such that χ(s1) = χ(s2) = x, and any child

action a, V π(a, s1) = V π(a, s2) and ˜Ri(s1) = ˜Ri(s2).

Lemma 2 Let M be an MDP with full-state MAXQ graph H, and suppose that state variables Yi
are irrelevant for Max node i. Let χi(s) = x be the associated abstraction function that maps s onto
the remaining relevant variables Xi. Let π be any abstract hierarchical policy. Then the action-
value function Qπ at node i can be represented compactly, with only one value of the completion

29

function C π(i, s, j) for each equivalence class of states s that share the same values on the relevant
variables.

Speciﬁcally Qπ(i, s, j) can be computed as follows:

Qπ(i, s, j) = V π(j, χi(s)) + C π(i, χi(s), j)

where

C π(i, x, j) =

′

P π(x

, N |x, j) · γN [V π(π(x

′

′
), x

′
) + ˜Ri(x

′
) + C π(i, x

′

, π(x

))],

Xx′,N

where V π(j′, x′) = V π(j′, x′, y0), ˜Ri(x′) = ˜Ri(x′, y0), and π(x) = π(x, y0) for some arbitrary value
y0 for the irrelevant state variables Yi.

Proof: Deﬁne a new MDP χi(Mi) at node i as follows:

• States: X = {x | χi(s) = x, for some s ∈ S}.

• Actions: A.

• Transition probabilities: P π(x′, N |x, a)

• Reward function: V π(a, x) + ˜Ri(x′)

Because π is an abstract policy, its decisions are the same for all states s such that χi(s) = x for
some x. Therefore, it is also a well-deﬁned policy over χi(Mi). The action-value function for π over
χi(Mi) is the unique solution to the following Bellman equation:

Qπ(i, x, j) = V π(j, x) +

′
P π(x

, N |x, j) · γN [ ˜Ri(x

′

′
) + Qπ(i, x

′
, π(x

))]

(18)

Compare this to the Bellman equation over Mi:

Qπ(i, s, j) = V π(j, s) +

′

P π(s

, N |s, j) · γN [ ˜Ri(s

) + Qπ(i, s

′

′

′

, π(s

))]

(19)

and note that V π(j, s) = V π(j, χ(s)) = V π(j, x) and ˜Ri(s′) = ˜Ri(χ(s′)) = ˜Ri(x′). Furthermore, we
know that the distribution P π can be factored into separate distributions for Yi and Xi. Hence, we
can rewrite (19) as

Qπ(i, s, j) = V π(j, x) +

′

P (y

|y, j)

′
P π(x

, N |x, j) · γN [ ˜Ri(x

) + Qπ(i, s

′

′

′

, π(s

))]

Xy′

Xx′,N

The right-most sum does not depend on y or y′, so the sum over y′ evaluates to 1, and can be
eliminated to give

Qπ(i, s, j) = V π(j, x) +

P π(x

′

′
, N |x, j) · γN [ ˜Ri(x

) + Qπ(i, s

′

′

, π(s

))].

(20)

Xx′,N

Xs′,N

Xx′,N

Finally, note that equations (18) and (20) are identical except for the expressions for the Q

values. Since the solution to the Bellman equation is unique, we must conclude that

Qπ(i, s, j) = Qπ(i, χ(s), j).

30

We can rewrite the right-hand side to obtain

Qπ(i, s, j) = V π(j, χ(s)) + C π(i, χ(s), j),

C π(i, x, j) =

′
P (x

′
, N |x, j) · γN [V π(π(x

′
), x

′
) + ˜Ri(x

′
) + C π(i, x

′

, π(x

))].

where

Q.E.D.

Xx′,N

Of course we are primarily interested in being able to discover and represent the optimal policy
at each node i. The following corollary shows that the optimal policy is an abstract policy, and
hence, that it can be represented abstractly.

Corollary 2 Consider the same conditions as Lemma 2, but with the change that the abstract
hierarchical policy π is executed only by the descendants of node i, but not by node i. Let ρ be an
ordering over actions. Then the optimal ordered policy π∗
ρ at node i is an abstract policy, and its
action-value function can be represented abstracted.

Proof: Deﬁne the policy ω∗
ρ to be the optimal ordered policy over the abstract MDP χ(M ), and
let Q∗(i, x, j) be the corresponding optimal action-value function. Then by the same argument given
above, Q∗ is also a solution to the optimal Bellman equation for the original MDP. This means
that the policy π∗
ρ deﬁned by π∗
ρ(s) = ω∗(χ(s)) is an optimal ordered policy, and by construction,
it is an abstract policy. Q.E.D.

As stated, this condition appears quite diﬃcult to satisfy, since it requires that the state transi-
tion probability distribution factor into X and Y components for all possible abstract hierarchical
policies. However, in practice, this condition is often satisﬁed.

For example, let us consider the Navigate(t) subtask. The source and destination of the passenger
are irrelevant to the achievement of this subtask. Any policy that successfully completes this subtask
will have the same value function regardless of the source and destination locations of the passenger.
(Any policy that does not complete the subtask will have the same value function also, but all states
will have a value of −∞.) By abstracting away the passenger source and destination, we obtain a
huge savings in space. Instead of requiring 8000 values to represent the C functions for this task,
we require only 400 values (4 actions, 25 locations, 4 possible values for t).

One rule for noticing cases where this abstraction condition holds is to examine the subgraph
rooted at the given Max node i. If a set of state variables is irrelevant to the leaf state transi-
tion probabilities and reward functions and also to all pseudo-reward functions and termination
conditions in the subgraph, then those variables satisfy the Max Node Irrelevance condition:

Lemma 3 Let M be an MDP with associated MAXQ graph H, and let i be a Max node in H. Let
Xi and Yi be a partition of the state variables for M . A set of state variables Yi is irrelevant to
node i if

• For each primitive leaf node a that is a descendant of i, P (x′, y′|x, y, a) = P (y′|y, a)P (x′|x, a)

and R(x′, y′|x, y, a) = R(x′|x, a),

• For each internal node j that is equal to node i or is a descendent of i , ˜Rj(x′, y′) = ˜Rj(x′)

and the termination predicate Tj(x′, y′) is true iﬀ Tj(x′).

31

Proof: We must show that any abstract hierarchical policy will give rise to an SMDP at node i
whose transition probability distribution factors and whose reward function depends only on Xi.
By deﬁnition, any abstract hierarchical policy will choose actions based only upon information in
Xi. Because the primitive probability transition functions factor into an independent component
for Xi and since the termination conditions at all nodes below i are based only on the variables
in Xi, the probability transition function Pi(x′, y′, N |x, y, a) must also factor into Pi(y′|y, a) and
Pi(x′, N |x, a). Similarly, all of the reward functions V (j, x, y) must be equal to V (j, x), because all
rewards received within the subtree (either at the leaves or through pseudo-rewards) depend only
on the variables in Xi. Therefore, the variables in Yi are irrelevant for Max node i. Q.E.D.

In the Taxi task, the primitive navigation actions, North, South, East, and West only depend on
the location of the taxi and not on the location of the passenger. The pseudo-reward function and
termination condition for the MaxNavigate(t) node only depend on the location of the taxi (and the
parameter t). Hence, this lemma applies, and the passenger source and destination are irrelevant
for the MaxNavigate node.

5.1.2 Condition 2: Leaf Irrelevance

The second abstraction condition describes situations under which we can apply state abstractions
to leaf nodes of the MAXQ graph. For leaf nodes, we can obtain a stronger result than Lemma 2
by using a slightly weaker deﬁnition of irrelevance.

Deﬁnition 13 (Leaf Irrelevance) A set of state variables Y is irrelevant for a primitive action
a of a MAXQ graph if for all states s the expected value of the reward function,

V (a, s) =

P (s

|s, a)R(s

|s, a)

′

′

Xs′

does not depend on any of the values of the state variables in Y . In other words, for any pair of
states s1 and s2 that diﬀer only in their values for the variables in Y ,

P (s

′
1|s1, a)R(s

′
1|s1, a) =

P (s

′
2|s2, a)R(s

′
2|s2, a).

Xs′
If this condition is satisﬁed at leaf a, then the following lemma shows that we can represent its

Xs′

1

2

value function V (a, s) compactly.

Lemma 4 Let M be an MDP with full-state MAXQ graph H, and suppose that state variables Y
are irrelevant for leaf node a. Let χ(s) = x be the associated abstraction function that maps s onto
the remaining relevant variables X. Then we can represent V (a, s) for any state s by an abstracted
value function V (a, χ(s)) = V (a, x).

Proof: According to the deﬁnition of Leaf Irrelevance, any two states that diﬀer only on the
irrelevant state variables have the same value for V (a, s). Hence, we can represent this unique
value by V (a, x). Q.E.D.

Here are two rules for ﬁnding cases where Leaf Irrelevance applies. The ﬁrst rule shows that if

the probability distribution factors, then we have Leaf Irrelevance.

Lemma 5 Suppose the probability transition function for primitive action a, P (s′|s, a), factors
as P (x′, y′|x, y, a) = P (y′|y, a)P (x′|x, a) and the reward function satisﬁes R(s′|s, a) = R(x′|x, a).
Then the variables in Y are irrelevant to the leaf node a.

32

Proof: Plug in to the deﬁnition of V (a, s) and simplify.

V (a, s) =

P (s

|s, a)R(s

|s, a)

′

′

′

=

=

=

Xs′

Xx′,y′

Xy′

Xx′

P (y

′

′
|y, a)P (x

|x, a)R(x

|x, a)

′

′
P (x

′
|x, a)R(x

|x, a)

P (y

|y, a)

Xx′
|x, a)R(x

′

′
P (x

|x, a)

Hence, the expected reward for the action a depends only on the variables in X and not on the
variables in Y . Q.E.D.

Lemma 6 Let R(s′|s, a) = ra be the reward function for action a in MDP M , which is always
equal to a constant ra. Then the entire state s is irrelevant to the primitive action a.

Proof:

V (a, s) =

P (s

|s, a)R(s

|s, a)

′

′

′

=

P (s

|s, a)ra

Xs′

Xs′
= ra.

This does not depend on s, so the entire state is irrelevant to the primitive action a. Q.E.D.

This lemma is satisﬁed by the four leaf nodes North, South, East, and West in the taxi task,
because their one-step reward is a constant (−1). Hence, instead of requiring 2000 values to store
the V functions, we only need 4 values—one for each action. Similarly, the expected rewards of the
Pickup and Putdown actions each require only 2 values, depending on whether the corresponding
actions are legal or illegal. Hence, together, they require 4 values, instead of 1000 values.

5.1.3 Condition 3: Result Distribution Irrelevance

Now we consider a condition that results from “funnel” actions.

Deﬁnition 14 (Result Distribution Irrelevance). A set of state variables Yj is irrelevant for
the result distribution of action j if, for all abstract policies π executed by node j and its descendants
in the MAXQ hierarchy, the following holds:
for all pairs of states s1 and s2 that diﬀer only in
their values for the state variables in Yj,

′

P π(s

, N |s1, j) = P π(s

′

, N |s2, j)

for all s′ and N .

Lemma 7 Let M be an MDP with full-state MAXQ graph H, and suppose that the set of state
variables Yj is irrelevant to the result distribution of action j, which is a child of Max node i. Let
χij be the associated abstraction function: χij(s) = x. Then we can deﬁne an abstract completion
cost function C π(i, χij(s), j) such that for all states s,

C π(i, s, j) = C π(i, χij (s), j).

33

Proof: The completion function for ﬁxed policy π is deﬁned as follows:

C π(i, s, j) =

′

P (s

, N |s, j) · γN [ ˜Ri(s

′

) + Qπ(i, s

)].

′

(21)

Xs′,N

Consider any two states s1 and s2, such that χij(s1) = χij(s2) = x. Under Result Distribution
Irrelevance, their transition probability distributions are the same. Hence, the right-hand sides of
(21) have the same value, and we can conclude that

C π(i, s1, j) = C π(i, s2, j).
Therefore, we can deﬁne an abstract completion function, C π(i, x, j) to represent this quantity.
Q.E.D.

It might appear that this condition would rarely be satisﬁed, and indeed, for inﬁnite horizon
discounted problems, this is true. Consider, for example, the Get subroutine under an optimal
policy for the taxi task. No matter what location that taxi has in state s, the taxi will be at the
passenger’s starting location when the Get ﬁnishes executing (i.e., because the taxi will have just
completed picking up the passenger). Hence, the starting location is irrelevant to the resulting
location of the taxi. In the discounted cumulative reward setting, however, the number of steps
N required to complete the Get action will depend very much on the starting location of the taxi.
Consequently, P (s′, N |s, a) is not necessarily the same for any two states s with diﬀerent starting
locations even though s′ is always the same.

The important lesson to draw from this is that discounting interferes with introducing state
abstractions based on “funnel” operators—the MAXQ framework is therefore less eﬀective when
applied in the discounted setting.

However, if we restrict attention to the episodic, undiscounted setting, then the result dis-
tribution, P (s′|s, a), no longer depends on N , and the Result Distribution Irrelevance condition
is satisﬁed. Fortunately, the Taxi task is an undiscounted, ﬁnite-horizon task, so we can repre-
sent C(Root, s, Get) using 16 distinct values, because there are 16 equivalence classes of states (4
source locations times 4 destination locations). This is much less than the 500 quantities in the
unabstracted representation.

“Funnel” actions arise in many hierarchical reinforcement learning problems. For example,
abstract actions that move a robot to a doorway or that move a car onto the entrance ramp of a
freeway have this property. The Result Distribution Irrelevance condition is applicable in all such
situations as long as we are in the undiscounted setting.

5.1.4 Condition 4: Termination

The fourth condition is closely related to the “funnel’ property.
It applies when a subtask is
guaranteed to cause its parent task to terminate in a goal state. In a sense, the subtask is funneling
the environment into the set of states described by the goal predicate of the parent task.

Lemma 8 (Termination). Let Mi be a task in a MAXQ graph such that for all states s where
the goal predicate Gi(s) is true, the pseudo-reward function ˜Ri(s) = 0. Suppose there is a child task
a and state s such that for all hierarchical policies π,

′

∀ s

′

P π

i (s

, N |s, a) > 0 ⇒ Gi(s

).

′

(i.e., if s′ is a possible result state of applying a in s, then s′ is a goal terminal state for task i.)

Then for any policy executed at node i, the completion cost C(i, s, a) is zero and does not need

to be explicitly represented.

34

Proof: By the assumptions in the lemma, with probability 1 the completion cost is zero for any
action that results in a goal terminal state. Q.E.D.

For example, in the Taxi task, in all states where the taxi is holding the passenger, the Put
subroutine will succeed and result in a goal terminal state for Root. This is because the termination
predicate for Put (i.e., that the passenger is at his or her destination location) implies the goal
condition for Root (which is the same). This means that C(Root, s, Put) is uniformly zero, for all
states s where Put is not terminated.

It is easy to detect cases where the Termination condition is satisﬁed. We only need to compare
the termination predicate of a subtask with the goal predicate of the parent task. If the ﬁrst implies
the second, then the termination condition is satisﬁed.

5.1.5 Condition 5: Shielding

The shielding condition arises from the structure of the MAXQ graph.

Lemma 9 (Shielding). Let Mi be a task in a MAXQ graph and s be a state such that for all
paths from the root of the graph down to node Mi there exists a subtask j (possibly equal to i) whose
termination predicate Tj(s) is true, then the Q nodes of Mi do not need to represent C values for
state s.

Proof: Task i cannot be executed in state s, so no C values need to be estimated. Q.E.D.

As with the Termination condition, the Shielding condition can be veriﬁed by analyzing the

structure of the MAXQ graph and identifying nodes whose ancestor tasks are terminated.

In the Taxi task, a simple example of this arises in the Put task, which is terminated in all states
where the passenger is not in the taxi. This means that we do not need to represent C(Root, s, Put)
in these states. The result is that, when combined with the Termination condition above, we do
not need to explcitly represent the completion function for Put at all!

5.1.6 Dicussion

By applying these ﬁve abstraction conditions, we obtain the following “safe” state abstractions for
the Taxi task:

• North, South, East, and West. These terminal nodes require one quantity each, for a total of

four values. (Leaf Irrelevance).

• Pickup and Putdown each require 2 values (legal and illegal states), for a total of four. (Leaf

Irrelevance.)

• QNorth(t), QSouth(t), QEast(t), and QWest(t) each require 100 values (four values for t and

25 locations). (Max Node Irrelevance.)

• QNavigateForGet requires 4 values (for the four possible source locations). (The passenger
destination is Max Node Irrelevant for MaxGet, and the taxi starting location is Result Dis-
tribution Irrelevant for the Navigate action.)

• QPickup requires 100 possible values, 4 possible source locations and 25 possible taxi locations.

(Passenger destination is Max Node Irrelevant to MaxGet.)

35

• QGet requires 16 possible values (4 source locations, 4 destination locations). (Result Distri-

bution Irrelevance.)

• QNavigateForPut requires only 4 values (for the four possible destination locations). (The
passenger source and destination are Max Node Irrelevant to MaxPut; the taxi location is
Result Distribution Irrelevant for the Navigate action.)

• QPutdown requires 100 possible values (25 taxi locations, 4 possible destination locations).

(Passenger source is Max Node Irrelevant for MaxPut.)

• QPut requires 0 values. (Termination and Shielding.)

This gives a total of 632 distinct values, which is much less than the 3000 values required by
ﬂat Q learning. Hence, we can see that by applying state abstractions, the MAXQ representation
can give a much more compact representation of the value function. A key thing to note is that
these state abstractions cannot be exploited with the ﬂat representation of the value function.

What prior knowledge is required on the part of a programmer in order to introduce these state
abstractions? It suﬃces to know some general constraints on the one-step reward functions, the
one-step transition probabilities, and termination predicates, goal predicates, and pseudo-reward
functions within the MAXQ graph. Speciﬁcally, the Max Node Irrelevance and Leaf Irrelevance
conditions require simple analysis of the one-step transition function and the reward and pseudo-
reward functions. Opportunities to apply the Result Distribution Irrelevance condition can be
found by identifying “funnel” eﬀects that result from the deﬁnitions of the termination conditions
for operators. Similarly, the Shielding and Termination conditions only require analysis of the
termination predicates of the various subtasks. Hence, applying these ﬁve conditions to introduce
state abstractions is a straightforward process, and once a model of the one-step transition and
reward functions has been learned, the abstraction conditions can be checked to see if they were
satisﬁed.

5.2 Convergence of MAXQ-Q with State Abstraction

We have shown that state abstractions can be safely introduced into the MAXQ value function
decomposition under the ﬁve conditions described above. However, these conditions only guarantee
that the value function of any ﬁxed abstract hierarchical policy can be represented—they do not
show that the optimal policy can be represented, nor do they show that the MAXQ-Q learning
algorithm will ﬁnd the optimal policy. The goal of this section is to prove these two results: (a) that
the ordered recursively-optimal policy is an abstract policy and (b) that MAXQ-Q will converge
to this policy when applied to a MAXQ graph with safe state abstractions.

Lemma 10 Let M be an MDP with full-state MAXQ graph H and abstract-state MAXQ graph
χ(H) where the abstractions satisfy the ﬁve conditions given above. Let ρ be an ordering over all
actions in the MAXQ graph. Then the following statements are true:

• The unique ordered recursively-optimal policy π∗

r deﬁned by M , H, and ρ is an abstract policy

(i.e., it depends only on the relevant state variables at each node),

• The C and V functions in χ(H) can represent the projected value function of π∗
r .

36

Proof: The ﬁve abstraction lemmas tell us that if the ordered recursively-optimal policy is ab-
stract, then the C and V functions of χ(H) can represent its value function. Hence, the heart of
this lemma is the ﬁrst claim. The last two forms of abstraction (Shielding and Termination) do not
place any restrictions on abstract policies, so we ignore them in this proof.

The proof is by induction on the levels of the MAXQ graph, starting at the leaves. As a base
case, let us consider a Max node i all of whose children are primitive actions. In this case, there are
no policies executed within the children of the Max node. Hence if variables Yi are irrelevant for
node i, then we can apply our abstraction lemmas to represent the value function of any policy at
node i—not just abstract policies. Consequently, the value function of any optimal policy for node
i can be represented, and it will have the property that Q∗(i, s1, a) = Q∗(i, s2, a) for any states s1
and s2 such that χi(s1) = χi(s2).

Now let us impose the action ordering ρ to compute the optimal ordered policy. Consider two
actions a1 and a2 such that ρ(a1, a2) (i.e., ρ prefers a1), and suppose that there is a “tie” in the Q∗
function at state s1 such that the values

∗

Q

(i, s1, a1) = Q

(i, s1, a2)

∗

and they are the only two actions that maximize Q∗ in this state. Then the optimal ordered policy
must choose a1. Now in all other states s2 such that χi(s1) = χi(s2), we know that the Q∗ values
will be the same. Hence, the same tie will exist between a1 and a2, and hence, the optimal ordered
policy must make the same choice in all such states. Hence, the optimal ordered policy for node i
is an abstract policy.

Now let us turn to the recursive case at Max node i. Make the inductive assumption that the
ordered recursively-optimal policy is abstract within all descendant nodes and consider the locally
optimal policy at node i. If Y is a set of state variables that are irrelevant to node i, Corollary 2
tells us that Q∗(i, s1, j) = Q∗(i, s2, j) for all states s1 and s2 such that χi(s1) = χi(s2). Similarly,
if Y is a set of variables irrelevant to the result distribution of a particular action j, then Lemma
7 tells us the same thing. Hence, by the same ordering argument given above, the ordered optimal
policy at node i must be abstract. By induction, this proves the lemma. Q.E.D.

With this lemma, we have established that the combination of an MDP M , an abstract MAXQ
graph H, and an action ordering deﬁnes a unique recursively-optimal ordered abstract policy. We
are now ready to prove that MAXQ-Q will converge to this policy.

Theorem 4 Let M = hS, A, P, R, P0i be either an episodic MDP for which all deterministic policies
are proper or a discounted inﬁnite horizon MDP with discount factor γ < 1. Let H be an unab-
stracted MAXQ graph deﬁned over subtasks {M0, . . . , Mk} with pseudo-reward functions ˜Ri(s′|s, a).
Let χ(H) be a state-abstracted MAXQ graph deﬁned by applying state abstractions χi to each node i
of H under the ﬁve conditions given above. Let πx(i, χi(s)) be an abstract ordered GLIE exploration
policy at each node i and state s whose decisions depend only on the “relevant” state variables at
each node i. Let π∗
r be the unique recursively-optimal hierarchical policy deﬁned by πx, M , and
˜R. Then with probability 1, algorithm MAXQ-Q applied to χ(H) converges to π∗
r provided that the
learning rates αt(i) satisfy Equation (15) and |Vt(i, χi(s))| and |Ct(i, χi(s), a)| are bounded for all
t, i, χi(s), and a.

Proof: Rather than repeating the entire proof for MAXQ-Q, we will only describe what must
change under state abstraction. The last two forms of state abstraction refer to states whose values
can be inferred from the structure of the MAXQ graph, and therefore do not need to be represented

37

at all. Since these values are not updated by MAXQ-Q, we can ignore them. We will now consider
the ﬁrst three forms of state abstraction in turn.

We begin by considering primitive leaf nodes. Let a be a leaf node and let Y be a set of
state variables that are Leaf Irrelevant for a. Let s1 = (x, y1) and s2 = (x, y2) be two states that
diﬀer only in their values for Y . Under Leaf Irrelevance, the probability transitions P (s′
1|s1, a) and
P (s′
2|s2, a) need not be the same, but the expected reward of performing a in both states must be
the same. When MAXQ-Q visits an abstract state x, it does not “know” the value of y, the part of
the state that has been abstracted away. Nonetheless, it draws a sample according to P (s′|x, y, a),
receives a reward R(s′|x, y, a), and updates its estimate of V (a, x) (line 5 of MAXQ-Q). Let Pt(y)
be the probability that MAXQ-Q is visiting (x, y) given that the unabstracted part of the state is
x. Then Line 5 of MAXQ-Q is computing a stochastic approximation to

We can write this as

Pt(y)

′

Pt(s

, N |x, y, a)R(s

|x, y, a).

Pt(y)Pt(s

, N |x, y, a)R(s

|x, y, a).

′

′

′

Xs′,N,y

y
X

Xs′,N

According to Leaf Irrelevance, the inner sum has the same value for all states s such that χ(s) = x.
Call this value r0(x). This gives

Pt(y)r0(x),

y
X

which is equal to r0(x) for any distribution Pt(y). Hence, MAXQ-Q converges under Leaf Irrelevance
abstractions.

Now let us turn to the two forms of abstraction that apply to internal nodes: Node Irrelevance
and Result Distribution Irrelevance. Consider the SMDP deﬁned at each node i of the abstracted
MAXQ graph at time t during MAXQ-Q. This would be an ordinary SMDP with transition prob-
ability function Pt(x′, N |x, a) and reward function Vt(a, x) + ˜Ri(x′) except that when MAXQ-Q
draws samples of state transitions, they are drawn according to the distribution Pt(s′, N |s, a) over
the original state space. To prove the theorem, we must show that drawing (s′, N ) according to
this second distribution is equivalent to drawing (x′, N ) according to the ﬁrst distribution.

For Max Node Irrelevance, we know that for all abstract policies applied to node i and its

descendants, the transition probability distribution factors as

′

P (s

, N |s, a) = P (y

′

′
|y, a)P (x

, N |x, a).

Because the exploration policy is an abstract policy, Pt(s′, N |s, a) factors in this way. This means
that the Xi and Yi components of the state are independent of each other, and hence, sampling
from Pt(s′, N |s, a) gives samples for Pt(x′, N |x, a). Therefore, MAXQ-Q will converge under Max
Node Irrelevance abstractions.

Finally, consider Result Distribution Irrelevance. Let j be a child of node i, and suppose Yj
is a set of state variables that are irrelevant to the result distribution of j. When the SMDP at
node i wishes to draw a sample from Pt(x′, N |x, j), it does not “know” the current value of y, the
irrelevant part of the current state. However, this does not matter, because Result Distribution
Irrelevance means that for all possible values of y, Pt(x′, y′, N |x, y, j) is the same. Hence, MAXQ-Q
will converge under Result Distribution Irrelevance abstractions.

In each of these three cases, MAXQ-Q will converge to a locally-optimal ordered policy at node
i in the MAXQ graph. By Lemma 10, this can be extended to produce a locally-optimal ordered
policy for the unabstracted SMDP at node i. Hence, by induction, MAXQ-Q will converge to

38

the unique ordered recursively optimal policy π∗
exploration policy πx. Q.E.D.

r deﬁned by MAXQ-Q H, MDP M , and ordered

5.3 The Hierarchical Credit Assignment Problem

There are still some situations where we would like to introduce state abstractions but where the
ﬁve properties described above do not permit them. Consider the following modiﬁcation of the
taxi problem. Suppose that the taxi has a fuel tank and that each time the taxi moves one square,
it costs one unit of fuel. If the taxi runs out of fuel before delivering the passenger to his or her
destination, it receives a reward of −20, and the trial ends. Fortunately, there is a ﬁlling station
where the taxi can execute a Fillup action to ﬁll the fuel tank.

To solve this modiﬁed problem using the MAXQ hierarchy, we can introduce another subtask,
Refuel, which has the goal of moving the taxi to the ﬁlling station and ﬁlling the tank. MaxRefuel
is a child of MaxRoot, and it invokes Navigate(t) (with t bound to the location of the ﬁlling station)
to move the taxi to the ﬁlling station.

The introduction of fuel and the possibility that we might run out of fuel means that we must
include the current amount of fuel as a feature in representing every C value (for internal nodes)
and V value (for leaf nodes). This is unfortunate, because our intuition tells us that the amount of
fuel should have no inﬂuence on our decisions inside the Navigate(t) subtask. The amount of fuel
should be taken into account by the top-level Q nodes, which must decide whether to go refuel, go
pick up the passenger, or go deliver the passenger.

Given this intuition, it is natural to try abstracting away the “amount of remaining fuel” within
the Navigate(t) subtask. However, this doesn’t work, because when the taxi runs out of fuel and
a −20 reward is given, the QNorth, QSouth, QEast, and QWest nodes cannot “explain” why this
reward was received—that is, they have no consistent way of setting their C tables to predict
when this negative reward will occur. Stated more formally, the diﬃculty is that the Max Node
Irrelevance condition is not satisﬁed because the one-step reward function R(s′|s, a) for these actions
depends on the amount of fuel.

We call this the hierarchical credit assignment problem. The fundamental issue here is that in
the MAXQ decomposition all information about rewards is stored in the leaf nodes of the hierarchy.
We would like to separate out the basic rewards received for navigation (i.e., −1 for each action)
from the reward received for exhausting fuel (−20).
If we make the reward at the leaves only
depend on the location of the taxi, then the Max Node Irrelevance condition will be satisﬁed.

One way to do this is to have the programmer manually decompose the reward function and
indicate which nodes in the hierarchy will “receive” each reward. Let R(s′|s, a) =
i R(i, s′|s, a) be
a decomposition of the reward function, such that R(i, s′|s, a) speciﬁes that part of the reward that
must be handled by Max node i. In the modiﬁed taxi problem, for example, we can decompose the
reward so that the leaf nodes receive all of the original penalties, but the out-of-fuel rewards must
be handled by MaxRoot. Lines 16 and 17 of the MAXQ-Q algorithm are easily modiﬁed to include
R(i, s′|s, a).

P

In most domains, we believe it will be easy for the designer of the hierarchy to decompose the
reward function. It has been straightforward in all of the problems we have studied. However, an
interesting problem for future research is to develop an algorithm that can solve the hierarchical
credit assignment problem autonomously.

39

6 Non-Hierarchical Execution of the MAXQ Hierarchy

Up to this point in the paper, we have focused exclusively on representing and learning hierarchical
policies. However, often the optimal policy for a MDP is not a strictly hierarchical policy. Kaelbling
(1993) ﬁrst introduced the idea of deriving a non-hierarchical policy from the value function of a
hierarchical policy. In this section, we exploit the MAXQ decomposition to generalize her ideas
and apply them recursively at all levels of the hierarchy.

The ﬁrst method is based on the dynamic programming algorithm known as policy iteration.
The policy iteration algorithm starts with an initial policy π0. It then repeats the following two
steps until the policy converges. In the policy evaluation step, it computes the value function V πk
of the current policy πk. Then, in the policy improvement step, it computes a new policy, πk+1
according to the rule

πk+1(s) := argmax

′

P (s

|s, a)[R(s

′

|s, a) + γV πk(s

)].

′

(22)

a

Xs′

Howard (1960) proved that if πk is not an optimal policy, then πk+1 is guaranteed to be an im-
provement. Note that in order to apply this method, we need to know the transition probability
distribution P (s′|s, a) and the reward function R(s′|s, a).

If we know P (s′|s, a) and R(s′|s, a), we can use the MAXQ representation of the value function
to perform one step of policy iteration. We start with a hierarchical policy π and represent its value
function using the MAXQ hierarchy (e.g., π could have been learned via MAXQ-Q). Then, we can
perform one step of policy improvement by applying Equation (22) using V π(0, s′) (computed by
the MAXQ hierarchy) to compute V π(s′).

s′ P (s′|s, a)[R(s′|s, a) + γV π(0, s)], where V π(0, s) is the value
Corollary 3 Let πg(s) = argmaxa
function computed by the MAXQ hierarchy. Then, if π was not an optimal policy, πg is strictly
better for at least one state in S.

P

Proof: This is a direct consequence of Howard’s policy improvement theorem. Q.E.D.

Unfortunately, we can’t iterate this policy improvement process, because the new policy, πg is
very unlikely to be a hierarchical policy (i.e., it is unlikely to be representable in terms of local
policies for each node of the MAXQ graph). Nonetheless, one step of policy improvement can give
very signiﬁcant improvements.

This approach to non-hierarchical execution ignores the internal structure of the MAXQ graph.
In eﬀect, the MAXQ hierarchy is just viewed as a kind of function approximator for representing
V π—any other representation would give the same one-step improved policy πg.

The second approach to non-hierarchical execution borrows an idea from Q learning. One of
the great beauties of the Q representation for value functions is that we can compute one step of
policy improvement without knowing P (s′|s, a), simply by taking the new policy to be πg(s) :=
argmaxa Q(s, a). This gives us the same one-step greedy policy as we computed above using one-
step lookahead. With the MAXQ decomposition, we can perform these policy improvement steps
at all levels of the hierarchy.

We have already deﬁned the function that we need.

In Table 3 we presented the function
EvaluateMaxNode, which, given the current state s, conducts a search along all paths from a
given Max node i to the leaves of the MAXQ graph and ﬁnds the path with the best value (i.e.,
with the maximum sum of C values along the path, plus the V value at the leaf). In addition,
EvaluateMaxNode returns the primitive action a at the end of this best path. This action a would

40

Table 5: The procedure for executing the one-step greedy policy.

procedure ExecuteHGPolicy(s)

repeat

Let hV (0, s), ai := EvaluateMaxNode(0, s)
execute primitive action a
Let s be the resulting state

end // ExecuteHGPolicy

1
2
3
4

be the ﬁrst primitive action to be executed if the learned hierarchical policy were executed starting
in the current state s. Our second method for non-hierarchical execution of the MAXQ graph is
to call EvaluateMaxNode in each state, and execute the primitive action a that is returned. The
pseudo-code is shown in Table 5.

We will call the policy computed by ExecuteHGPolicy the hierarchical greedy policy, and denote
it πhg∗, where the superscript * indicates that we are computing the greedy action at each time
step. The following theorem shows that this can give a better policy than the original, hierarchical
policy.

Theorem 5 Let G be a MAXQ graph representing the value function of hierarchical policy π (i.e.,
in terms of C π(i, s, j), computed for all i, s, and j). Let V hg(0, s) be the value computed by
ExecuteHGPolicy, and let πhg∗ be the resulting policy. Deﬁne V hg∗ to be the value function of πhg∗.
Then for all states s, it is the case that

V π(s) ≤ V hg(0, s) ≤ V hg∗

(s).

(23)

Proof:
(sketch) The left inequality in Equation (23) is satisﬁed by construction by line 7 of
EvaluateMaxNode. To see this, consider that the original hierarchical policy, π, can be viewed as
choosing a “path” through the MAXQ graph running from the root to one of the leaf nodes, and
V π(0, s) is the sum of the C π values along this chosen path (plus the V π value at the leaf node). In
contrast, EvaluateMaxNode performs a traversal of all paths through the MAXQ graph and ﬁnds
the best path, that is, the path with the largest sum of C π (and leaf V π) values. Hence, V hg(0, s)
must be at least as large as V π(0, s).

To establish the right inequality, note that by construction V hg(0, s) is the value function of a
policy, call it πhg, that chooses one action greedily at each level of the MAXQ graph (recursively),
and then follows π thereafter. This is a consequence of the fact that line 7 of EvaluateMaxNode has
C π on its right-hand side, and C π represents the cost of “completing” each subroutine by following
π, not by following some other, greedier, policy. (In Table 3, C π is written as Ct.) However, when
we execute ExecuteHGPolicy (and hence, execute πhg∗), we have an opportunity to improve upon
π and πhg at each time step. Hence, V hg(0, s) is an underestimate of the actual value of πhg∗.
Q.E.D.

Note that this theorem only works in one direction. It says that if we can ﬁnd a state where
V hg(0, s) > V π(s), then the greedy policy, πhg∗, will be strictly better than π. However, it could
be that π is not an optimal policy and yet the structure of the MAXQ graph prevents us from
considering an action (either primitive or composite) that would improve π. Hence, unlike the
policy improvement theorem of Howard, we do not have a guarantee that if π is suboptimal, then
the hierarchically greedy policy is a strict improvement.

41

In contrast, if we perform one-step policy improvement as discussed at the start of this section,
Corollary 3 guarantees that we will improve the policy. So we can see that in general, neither
of these two methods for non-hierarchical execution dominates the other. Nonetheless, the ﬁrst
method only operates at the level of individual primitive actions, so it is not able to produce very
large improvements in the policy. In contrast, the hierarchical greedy method can obtain very large
improvements in the policy by changing which actions (i.e., subroutines) are chosen near the root
of the hierarchy. Hence, in general, hierarchical greedy execution is probably the better method.
(Of course, the value functions of both methods could be computed, and the one with the better
estimated value could be executed.)

Sutton, Singh, Precup and Ravindran (1999) have simultaneously developed a closely-related
method for non-hierarchical execution of macros. Their method is equivalent to ExecuteHGPolicy
for the special case where the MAXQ hierarchy has only one level of subtasks. The interesting
aspect of ExecuteHGPolicy is that it permits greedy improvements at all levels of the tree to
inﬂuence which action is chosen.

Some care must be taken in applying Theorem 5 to a MAXQ hierarchy whose C values have
been learned via MAXQ-Q. Being an online algorithm, MAXQ-Q will not have correctly learned the
values of all states at all nodes of the MAXQ graph. For example, in the taxi problem, the value of
C(Put, s, QPutdown) will not have been learned very well except at the four special locations. This
is because the Put subtask cannot be executed until the passenger is in the taxi, and this usually
means that a Get has just been completed, so the taxi is at the passenger’s source location. During
exploration, both children of Put will be tried in such states. The PutDown will usually fail, whereas
the Navigate will eventually succeed (perhaps after lengthy exploration) and take the taxi to the
destination location. Now because of all states updating, the values for C(Put, s, Navigate(t)) will
have been learned at all of the states, but the C values for the Putdown action will not. Hence, if
we train the MAXQ representation using hierarchical execution (as in MAXQ-Q), and then switch
to hierarchically-greedy execution, the results will be quite bad. In particular, we need to introduce
hierarchically-greedy execution early enough so that the exploration policy is still actively exploring.
(In theory, a GLIE exploration policy never ceases to explore, but in practice, we want to ﬁnd a
good policy quickly, not just asymptotically).

Of course an alternative would be to use hierarchically-greedy execution from the very beginning
of learning. However, remember that the higher nodes in the MAXQ hierarchy need to obtain
samples of P (s′, N |s, a) for each child action a.
If the hierarchical greedy execution interrupts
child a before it has reached a terminal state, then these samples cannot be obtained. Hence, it
is important to begin with purely hierarchical execution during training, and make a transition to
greedy execution at some point.

The approach we have taken is to implement MAXQ-Q in such a way that we can specify a
number of primitive actions L that can be taken hierarchically before the hierarchical execution
is “interrupted” and control returns to the top level (where a new action can be chosen greedily).
We start with L set very large, so that execution is completely hierarchical—when a child action
is invoked, we are committed to execute that action until it terminates. However, gradually, we
reduce L until it becomes 1, at which point we have hierarchical greedy execution. We time this
so that it reaches 1 at about the same time our Boltzmann exploration cools to a temperature of
0.1 (which is where exploration eﬀectively has halted). As the experimental results will show, this
generally gives excellent results with very little added exploration cost.

42

7 Experimental Evaluation of the MAXQ Method

We have performed a series of experiments with the MAXQ method with three goals in mind: (a)
to understand the expressive power of the value function decomposition, (b) to characterize the
behavior of the MAXQ-Q learning algorithm, and (c) to assess the relative importance of temporal
abstraction, state abstraction, and non-hierarchical execution. In this section, we describe these
experiments and present the results.

7.1 The Fickle Taxi Task

Our ﬁrst experiments were performed on a modiﬁed version of the taxi task. This version incor-
porates two changes to the task described in Section 3.1. First, each of the four navigation actions
is noisy, so that with probability 0.8 it moves in the intended direction, but with probability 0.1
it instead moves to the right (of the intended direction) and with probability 0.1 it moves to the
left. The second change is that after the taxi has picked up the passenger and moved one square
away from the passenger’s source location, the passenger changes his or her destination location
with probability 0.3. The purpose of this change is to create a situation where the optimal policy
is not a hierarchical policy so that the eﬀectiveness of non-hierarchical execution can be measured.
We compared four diﬀerent conﬁgurations of the learning algorithm: (a) ﬂat Q learning, (b)
MAXQ-Q learning without any form of state abstraction, (c) MAXQ-Q learning with state abstrac-
tion, and (d) MAXQ-Q learning with state abstraction and greedy execution. These conﬁgurations
are controlled by many parameters. These include the following: (a) the initial values of the Q
and C functions, (b) the learning rate (we employed a ﬁxed learning rate), (c) the cooling schedule
for Boltzmann exploration (the GLIE policy that we employed), and (d) for non-hierarchical ex-
ecution, the schedule for decreasing L, the number of steps of consecutive hierarchical execution.
We optimized these settings separately for each conﬁguration with the goal of matching or exceed-
ing (with as few primitive actions as possible) the best policy that we could code by hand. For
Boltzmann exploration, we established an initial temperature and then a cooling rate. A separate
temperature is maintained for each Max node in the MAXQ graph, and its temperature is reduced
by multiplying by the cooling rate each time that subtask terminates in a goal state.

The following parameters were chosen. For ﬂat Q learning: initial Q values of 0.123, learning
rate 0.25, and Boltzmann exploration with an initial temperature of 50 and a cooling rate of 0.9879.
(We use initial values that end in .123 as a “signature” to aid debugging.)

For MAXQ-Q learning without state abstraction, we used initial values of 0.123, a learning rate
of 0.50, and Boltzmann exploration with an initial temperature of 50 and cooling rates of .9996 at
MaxRoot and MaxPut, 0.9939 at MaxGet, and 0.9879 at MaxNavigate.

For MAXQ-Q learning with state abstraction, we used initial values of 0.123, a learning rate of
0.25, and Boltzmann exploration with an initial temperature of 50 and cooling rates of 0.9074 at
MaxRoot, 0.9526 at MaxPut, 0.9526 at MaxGet, and 0.9879 at MaxNavigate.

For MAXQ-Q learning with non-hierarchical execution, we used the same settings as with state
In addition, we initialized L to 500 and decreased it by 10 with each trial until it

abstraction.
reached 1. So after 50 trials, execution was completely greedy.

Figure 7 shows the averaged results of 100 training trials. The ﬁrst thing to note is that all
forms of MAXQ learning have better initial performance than ﬂat Q learning. This is because of
the constraints introduced by the MAXQ hierarchy. For example, while the agent is executing a
Navigate subtask, it will never attempt to pickup or putdown the passenger. Similarly, it will never
attempt to putdown the passenger until it has ﬁrst picked up the passenger (and vice versa).

The second thing to notice is that without state abstractions, MAXQ-Q learning actually takes

43

d
r
a
w
e
R
 
e
v
i
t
a
l
u
m
u
C
 
n
a
e

M

200

0

-200

-400

-600

-800

-1000

0

Hierarchical Q Learning with State Abstraction and Greedy Execution
Hierarchical Q Learning with State Abstraction
Hierarchical Q Learning without State Abstraction
Flat Q Learning

50000

100000

150000

200000

250000

Primitive Actions

Figure 7: Comparison of performance of hierarchical Q learning with ﬂat Q learning, with and
without state abstractions, and with and without greedy evaluation.

longer to converge, so that the Flat Q curve crosses the MAXQ/no abstraction curve. This shows
that without state abstraction, the cost of learning the huge number of parameters in the MAXQ
representation is not really worth the beneﬁts.

The third thing to notice is that with state abstractions, MAXQ-Q converges very quickly to a
hierarchically optimal policy. This can be seen more clearly in Figure 8, which focuses on the range
of reward values in the neighborhood of the optimal policy. Here we can see that MAXQ with
abstractions attains the hierarchically optimal policy after approximately 40,000 steps, whereas
ﬂat Q learning requires roughly twice as long to reach the same level. However, ﬂat Q learning, of
course, can continue onward and reach optimal performance, whereas with the MAXQ hierarchy,
the best hierarchical policy is slow to respond to the “ﬁckle” behavior of the passenger when he/she
changes the destination.

The last thing to notice is that with greedy execution, the MAXQ policy is also able to attain
optimal performance. But as the execution becomes “more greedy”, there is a drop in performance,
because MAXQ-Q must learn C values in new regions of the state space that were not visited by
the recursively optimal policy. Despite this drop in performance, greedy MAXQ-Q recovers rapidly
and reaches hierarchically optimal performance faster than purely-hierarchical MAXQ-Q learning.
Hence, there is no added cost—in terms of exploration—for introducing greedy execution.

This experiment presents evidence in favor of three claims: ﬁrst, that hierarchical reinforcement
learning can be much faster than ﬂat Q learning; second, that state abstraction is required by
MAXQ for good performance; and third, that non-hierarchical execution can produce signiﬁcant
improvements in performance with little or no added exploration cost.

44

MAXQ Abstract+Greedy

Flat Q

Optimal Policy

Hier-Optimal Policy

MAXQ Abstract

MAXQ No Abstract

d
r
a
w
e
R
 
e
v
i
t
a
l
u
m
u
C
 
n
a
e

M

10

5

0

-5

-10

-15

0

50000

100000

150000

200000

250000

300000

Primitive Actions

Figure 8: Close-up view of the previous ﬁgure. This ﬁgure also shows two horizontal lines indicating
optimal performance and hierarchically optimal performance in this domain. To make this ﬁgure
more readable, we have applied a 100-step moving average to the data points.

7.2 Kaelbling’s HDG Method

The second task that we will consider is a simple maze task introduced by Leslie Kaelbling
(1993) and shown in Figure 10. In each trial of this task, the agent starts in a randomly-chosen
state and must move to a randomly-chosen goal state using the usual North, South, East, and West
operators (we employed deterministic operators). There is a small cost for each move, and the
agent must maximize the undiscounted sum of these costs.

Because the goal state can be in any of 100 diﬀerent locations, there are actually 100 diﬀerent
MDPs. Kaelbling’s HDG method starts by choosing an arbitrary set of landmark states and deﬁning
a Voronoi partition of the state space based on the Manhattan distances to these landmarks (i.e.,
two states belong to the same Voronoi cell iﬀ they have the same nearest landmark). The method
then deﬁnes one subtask for each landmark l. The subtask is to move from any state in the current
Voronoi cell or in any neighboring Voronoi cell to the landmark l. Optimal policies for these
subtasks are then computed.

Once HDG has the policies for these subtasks, it can solve the abstract Markov Decision Problem
of moving from each landmark state to any other landmark state using the subtask solutions as
macro actions (subroutines). So it computes a value function for this MDP.

Finally, for each possible destination location g within a Voronoi cell for landmark l, the HDG

method computes the optimal policy of getting from l to g.

By combining these subtasks, the HDG method can construct a good approximation to the
optimal policy as follows. In addition to the value functions discussed above, the agent maintains
two other functions: N L(s), the name of the landmark nearest to state s, and N (l), a list of the

45

10

9

8

7

6

5

4

3

2

1

1

2

3

4

5

6

7

8

9

10

Figure 9: Kaelbling’s 10-by-10 navigation task. Each circled state is a landmark state, and the
heavy lines show the boundaries of the Voronoi cells. In each episode, a start state and a goal state
are chosen at random. In this ﬁgure, the start state is shown by the shaded hexagon, and the goal
state is shown by the shaded square.

landmarks that are in the cells that are immediate neighbors of cell l. By combining these, the
agent can build a list for each state s of the current landmark and the landmarks of the neighboring
cells. For each such landmark, the agent computes the sum of three terms:

(t1) the expected cost of reaching that landmark,

(t2) the expected cost of moving from that landmark to the landmark in the goal cell, and

(t3) the expected cost of moving from the goal-cell landmark to the goal state.

Note that while terms (t1) and (t3) can be exact estimates, term (t2) is computed using the
landmark subtasks as subroutines. This means that the corresponding path must pass through the
intermediate landmark states rather than going directly to the goal landmark. Hence, term (t2) is
typically an overestimate of the required distance. (Also note that (t3) is the same for all choices
of the intermediate landmarks, so it does not need to be explicitly included in the computation.)

Given this information, the agent then chooses to move toward the best of the landmarks (unless
the agent is already in the goal Voronoi cell, in which case the agent moves toward the goal state).
For example, in Figure 9, term (t1) is the cost of reaching the landmark in row 7, column 4, which
is 4. Term (t2) is the cost of getting from row 7, column 4 to the landmark at row 1 column 4 (by
going from one landmark to another). In this case, the best landmark-to-landmark path is from
row 7, column 1 to row 5 column 6, and then to row 1 column 4. Hence, term (t2) is 12. Term (t3)
is the cost of getting from row 1 column 4 to the goal, which is 2. The sum of these is 4 + 12 + 2
= 18. For comparison, the optimal path has length 10.

In Kaelbling’s experiments, she employed a variation of Q learning to learn terms (t1) and
(t3), and she computed (t2) at regular intervals via the Floyd-Warshall all-sources shortest paths
algorithm.

46

MaxRoot(g)

gl/NL(g)

QGotoGoalLmk(gl)

QGotoGoal(g)

MaxGotoGoalLmk(gl)

QGotoLmk(l,gl)

MaxGotoLmk(l)

MaxGotoGoal(g)

QNorthLmk(l)

QSouthLmk(l)

QEastLmk(l)

QWestLmk(l)

QNorthG(g)

QSouthG(g)

QEastG(g)

QWestG(g)

North

South

East

West

Figure 10: A MAXQ graph for the HDG navigation task.

Figure 10 shows a MAXQ approach to solving this problem. The overall task Root, takes one

argument g, which speciﬁes the goal cell. There are three subtasks:

• GotoGoalLmk, go to the landmark nearest to the goal location. The termination for the
predicate is true if the agent reaches the landmark nearest to the goal. The goal predicate is
the same as the termination predicate.

• GotoLmk(l), go to landmark l. The termination predicate for this is true if either (a) the
agent reaches landmark l or (b) the agent is outside of the region deﬁned by the Voronoi cell
for l and the neighboring Voronoi cells, N (l). The goal predicate for this subtask is true only
for condition (a).

• GotoGoal(g), go to the goal location g. The termination predicate for this subtask is true if
either the agent is in the goal location or the agent is outside of the Voronoi cell N L(g) that
contains g. The goal predicate for this subtask is true if the agent is in the goal location.

The MAXQ decomposition is essentially the same as Kaelbling’s method, but somewhat redun-
dant. Consider a state where the agent is not inside the same Voronoi cell as the goal g. In such

47

states, HDG decomposes the value function into three terms (t1), (t2), and (t3). Similarly, MAXQ
also decomposes it into these same three terms:

• V (GotoLmk(l), s, a) the cost of getting to landmark l.

(Actually the sum of V (a, s) and

C(GotoLmk(l), s, a).)

mark gl nearest the goal.

• C(GotoGoalLmk(gl), s, M axGotoLmk(l)) the cost of getting from landmark l to the land-

• C(Root, s, GotoGoalLmk(gl)) the cost of getting to the goal location after reaching gl.

When the agent is inside the goal Voronoi cell, then again HDG and MAXQ store essentially
the same information. HDG stores Q(GotoGoal(g), s, a), while MAXQ breaks this into two terms:
C(GotoGoal(g), s, a) and V (a, s) and then sums these two quantities to compute the Q value.

Note that this MAXQ decomposition stores some information twice—speciﬁcally, the cost of
getting from the goal landmark gl to the goal is stored both as C(Root, s, GotoGoalLmk(gl)) and
as C(GotoGoal(g), s, a) + V (a, s).

Let us compare the amount of memory required by ﬂat Q learning, HDG, and MAXQ. There
are 100 locations, 4 possible actions, and 100 possible goal states, so ﬂat Q learning must store
40,000 values.

To compute quantity (t1), HDG must store 4 Q values (for the four actions) for each state s
with respect to its own landmark and the landmarks in N (N L(s)). This gives a total of 2,028
values that must be stored.

To compute quantity (t2), HDG must store, for each landmark, information on the shortest
path to every other landmark. There are 12 landmarks. Consider the landmark at row 6, column
1.
It has 5 neighboring landmarks which constitute the ﬁve macro actions that the agent can
perform to move to another landmark. The nearest landmark to the goal cell could be any of the
other 11 landmarks, so this gives a total of 55 Q values that must be stored. Similar computations
for all 12 landmarks give a total of 506 values that must be stored.

Finally, to compute quantity (t3), HDG must store information, for each square inside each
Voronoi cell, about how to get to each of the other squares inside the same Voronoi cell. This
requires 3,536 values.

Hence, the grand total for HDG is 6,070, which is a huge savings over ﬂat Q learning.
Now let’s consider the MAXQ hierarchy with and without state abstractions.

• V (a, s): This is the expected reward of each primitive action in each state. There are 100
states and 4 primitive actions, so this requires 400 values. However, because the reward is
constant (−1), we can apply Leaf Irrelevance to store only a single value.

• C(GotoLmk(l), s, a), where a is one of the four primitive actions. This requires the same
amount of space as (t1) in Kaelbling’s representation—indeed, combined with V (a, a), this
represents exactly the same information as (t1). It requires 2,028 values. No state abstractions
can be applied.

• C(GotoGoalLmk(gl), s, GotoLmk(l)): This is the cost of completing the GotoGoalLmk task after
going to landmark l. If the primitive actions are deterministic, then GotoLmk(l) will always
terminate at location l, and hence, we only need to store this for each pair of l and gl. This
is exactly the same as Kaelbling’s quantity (t2), which requires 506 values. However, if the
primitive actions are stochastic—as they were in Kaelbling’s original paper—then we must
store this value for each possible terminal state of each GotoLmk action. Each of these actions

48

Table 6: Comparison of the number of values that must be stored to represent the value function
using the HDG and MAXQ methods.

HDG MAXQ
item item

(t1)
(t2)
(t3)

V (a, s)
C(GotoLmk(l), s, a)
C(GotoGoalLmk, s, GotoLmk(l))
C(GotoGoal(g), s, a)
C(Root, s, GotoGoalLmk)
C(Root, s, GotoGoal)

Total Number of Values Required

MAXQ

HDG MAXQ MAXQ
no abs
values
400
0
2,028
2,028
6,600
506
3,536
3,536
100
0
96
0
12,760
6,070

safe abs unsafe abs
1
2,028
506
3,536
100
0
6,171

1
2,028
6,600
3,536
100
96
12,361

could terminate at its target landmark l or in one of the states bordering the set of Voronoi
cells that are the neighbors of the cell for l. This requires 6,600 values. When Kaelbling
stores values only for (t2), she is eﬀectively making the assumption that GotoLmk(l) will
never fail to reach landmark l. This is an approximation which we can introduce into the
MAXQ representation by our choice of state abstraction at this node.

• C(GotoGoal, s, a): This is the cost of completing the GotoGoal task after making one of the
primitive actions a. This is the same as quantity (t3) in the HDG representation, and it
requires the same amoount of space: 3,536 values.

• C(Root, s, GotoGoalLmk): This is the cost of reaching the goal once we have reached the
landmark nearest the goal. MAXQ must represent this for all combinations of goal landmarks
and goals. This requires 100 values. Note that these values are the same as the values of
C(GotoGoal(g), s, a) + V (a, s) for each of the primitive actions. This means that the MAXQ
representation stores this information twice, whereas the HDG representation only stores it
once (as term (t3)).

• C(Root, s, GotoGoal). This is the cost of completing the Root task after we have executed
the GotoGoal task.
If the primitive action are deterministic, this is always zero, because
GotoGoal will have reached the goal. Hence, we can apply the Termination condition and not
store any values at all. However, if the primitive actions are stochastic, then we must store
this value for each possible state that borders the Voronoi cell that contains the goal. This
requires 96 diﬀerent values. Again, in Kaelbling’s HDG representation of the value function,
she is ignoring the probability that GotoGoal will terminate in a non-goal state. Because
MAXQ is an exact representation of the value function, it does not ignore this possibility.
If we (incorrectly) apply the Termination condition in this case, the MAXQ representation
becomes a function approximation.

In the stochastic case, without state abstractions, the MAXQ representation requires 12,760
values. With safe state abstractions, it requires 12,361 values. With the approximations employed
by Kaelbling (or equivalently, if the primitive actions are deterministic), the MAXQ representation
with state abstractions requires 6,171 values. These numbers are summarized in Table 6. We can
see that, with the unsafe state abstractions, the MAXQ representation requires only slightly more
space than the HDG representation (because of the redundancy in storing C(Root, s, GotoGoalLmk).

49

This example shows that for the HDG task, we can start with the fully-general formulation
provided by MAXQ and impose assumptions to obtain a method that is similar to HDG. The
MAXQ formulation guarantees that the value function of the hierarchical policy will be represented
exactly. The assumptions will introduce approximations into the value function representation.
This might be useful as a general design methodology for building application-speciﬁc hierarchical
representations. Our long-term goal is to develop such methods so that each new application does
not require inventing a new set of techniques. Instead, oﬀ-the-shelf tools (e.g., based on MAXQ)
could be specialized by imposing assumptions and state abstractions to produce more eﬃcient
special-purpose systems.

One of the most important contributions of the HDG method was that it introduced a form of
non-hierarchical execution. As soon as the agent crosses from one Voronoi cell into another, the
current subtask is “interrupted”, and the agent recomputes the “current target landmark”. The
eﬀect of this is that (until it reaches the goal Voronoi cell), the agent is always aiming for a landmark
outside of its current Voronoi cell. Hence, although the agent “aims for” a sequence of landmark
states, it typically does not visit many of these states on its way to the goal. The states just provide
a convenient set of intermediate targets. By taking these “shortcuts”, HDG compensates for the
fact that, in general, it has overestimated the cost of getting to the goal, because its computed
value function is based on a policy where the agent goes from one landmark to another.

The same eﬀect is obtained by hierarchical greedy execution of the MAXQ graph (which was
directly inspired by the HDG method). Note that by storing the N L (nearest landmark) function,
Kaelbing’s HDG method can detect very eﬃciently when the current subtask should be interrupted.
This technique only works for navigation problems in a space with a distance metric. In contrast,
ExecuteHGPolicy performs a kind of “polling”, where it checks after each primitive action whether
it should interrupt the current subroutine and invoke a new one. An important goal for future
research on MAXQ is to ﬁnd a general purpose mechanism for avoiding unnecessary “polling”—
that is, a mechanism that can discover eﬃciently-evaluable interrupt conditions.

Figure 11 shows the results of our experiments with HDG using the MAXQ-Q learning al-
gorithm. We employed the following parameters:
for Flat Q learning, initial values of 0.123, a
learning rate of 1.0, initial temperature of 50, and cooling rate of .9074; for MAXQ-Q without
initial values of −25.123, learning rate of 1.0, initial temperature of 50, and
state abstractions:
cooling rates of .9074 for MaxRoot, .9999 for MaxGotoGoalLmk, .9074 for MaxGotoGoal, and .9526
for MaxGotoLmk; for MAXQ-Q with state abstractions: initial values of −20.123, learning rate of
1.0, initial temperature of 50, and cooling rates of .9760 for MaxRoot, .9969 for MaxGotoGoal, .9984
for MaxGotoGoalLmk, and .9969 for MaxGotoLmk. Hierarchical greedy execution was introduced
by starting with 3000 primitive actions per trial, and reducing this every trial by 2 actions, so that
after 1500 trials, execution is completely greedy.

The ﬁgure conﬁrms the observations made in our experiments with the Fickle Taxi task. With-
out state abstractions, MAXQ-Q converges much more slowly than ﬂat Q learning. With state
abstractions, it converges roughly three times as fast. Figure 12 shows a close-up view of Figure 11
that allows us to compare the diﬀerences in the ﬁnal levels of performance of the methods. Here,
we can see that MAXQ-Q with no state abstractions was not able to reach the quality of our hand-
coded hierarchical policy—presumably even more exploration would be required to achieve this,
whereas with state abstractions, MAXQ-Q is able to do slightly better than our hand-coded policy.
With hierarchical greedy execution, MAXQ-Q is able to reach the goal using one fewer action,
on the average—so that it approaches the performance of the best hierarchical greedy policy (as
computed by value iteration). Notice however, that the best performance that can be obtained by
hierarchical greedy execution of the best recursively-optimal policy cannot match optimal perfor-
mance. Hence, Flat Q learning achieves a policy that reaches the goal state, on the average, with

50

MAXQ

Flat Q

MAXQ No Abstractions

0

-20

-40

-60

-80

-100

-120

-140

d
r
a
w
e
R
 
e
v
i
t
a
l
u
m
u
C
 
n
a
e

M

0

200000

400000

1e+06

1.2e+06

1.4e+06

600000
800000
Primitive Actions

Figure 11: Comparison of Flat Q learning with MAXQ-Q learning with and without state abstrac-
tion. (Average of 100 runs.)

about one fewer primitive action. Finally notice that as in the taxi domain, there was no added
exploration cost for shifting to greedy execution.

7.3 Parr and Russell: Hierarchies of Abstract Machines

In his (1998b) dissertation work, Ron Parr considered an approach to hierarchical reinforcement
learning in which the programmer encodes prior knowledge in the form of a hierarchy of ﬁnite-state
controllers called a HAM (Hierarchy of Abstract Machines). The hierarchy is executed using a
procedure-call-and-return discipline, and it provides a partial policy for the task. The policy is
partial because each machine can include non-deterministic, “choice” machine states, in which the
machine lists several options for action but does not specify which one should be chosen. The
programmer puts “choice” states at any point where he/she does not know what action should
be performed. Given this partial policy, Parr’s goal is to ﬁnd the best policy for making choices
in the choice states. In other words, his goal is to learn a hierarchical value function V (hs, mi),
where s is a state (of the external environment) and m contains all of the internal state of the
hierarchy (i.e., the contents of the procedure call stack and the values of the current machine states
for all machines appearing in the stack). A key observation is that it is only necessary to learn this
value function at choice states hs, mi. Parr’s algorithm does not learn a decomposition of the value
function. Instead, it “ﬂattens” the hierarchy to create a new Markov decision problem over the
choice states hs, mi. Hence, it is hierarchical primarily in the sense that the programmer structures
the prior knowledge hierarchically. An advantage of this is that Parr’s method can ﬁnd the optimal
hierarchical policy subject to constraints provided by the programmer. A disadvantage is that the
method cannot be executed “non-hierarchically” to produce a better policy.

51

MAXQ Greedy

MAXQ

Optimal Policy

Hierarchical Greedy Optimal Policy

Hierarchical Hand-coded Policy

Flat Q

MAXQ No Abstractions

d
r
a
w
e
R
 
e
v
i
t
a
l
u
m
u
C
 
n
a
e

M

-6

-8

-10

-12

-14

0

200000

400000

1e+06

1.2e+06

1.4e+06

600000
800000
Primitive Actions

Figure 12: Expanded view comparing Flat Q learning with MAXQ-Q learning with and without
state abstraction and with and without hierarchical greedy execution. (Average of 100 runs.)

Parr illustrated his work using the maze shown in Figure 13. This maze has a high-level structure
(i.e., as a series of hallways and intersections), and a low-level structure (a series of obstacles that
must be avoided in order to move through the hallways and intersections). In each trial, the agent
starts in the top left corner, and it must move to any state in the bottom right corner room. The
agent has the usual four primitive actions, North, South, East, and West. The actions are stochastic:
with probability 0.8, they succeed, but with probability 0.1 the action will move to the “left” and
with probability 0.1 the action will move to the “right” instead (e.g., a North action will move east
with probability 0.1 and west with probability 0.1). If an action would collide with a wall or an
obstacle, it has no eﬀect.

The maze is structured as a series of “rooms”, each containing a 12-by-12 block of states (and
various obstacles). Some rooms are parts of “hallways”, because they contain walls on two opposite
sides, and they are open on the other two sides. Other rooms are “intersections”, where two or
more hallways meet.

To test the representational power of the MAXQ hierarchy, we want to see how well it can
represent the prior knowledge that Parr is able to represent using the HAM. We begin by describing
Parr’s HAM for his maze task, and then we will present a MAXQ hierarchy that captures much of
the same prior knowledge.2

Parr’s top level machine, MRoot, consists of a loop with a single choice state that chooses among
four possible child machines: MGo(East), MGo(South), MGo(W est), and MGo(N orth). The loop
terminates when the agent reaches a goal state. MRoot will only invoke a particular machine if there
is a hallway in the speciﬁed direction. Hence, in the start state, it will only consider MGo(South)

2The author thanks Ron Parr for providing the details of the HAM for this task.

52

and MGo(East).

The MGo(d) machine begins executing when the agent is in an intersection. So the ﬁrst thing it
tries to do is to exit the intersection into a hallway in speciﬁed direction d. Then it attempts
to traverse the hallway until it reaches another intersection.
It does this by ﬁrst invoking a
ExitIntersection(d) machine. When that machine returns, it then invokes a MExitHallway(d) ma-
chine. When that machine returns, MGo also returns.

The MExitIntersection and MExitHallway machines are identical except for their termination con-
ditions. Both machines consist of a loop with one choice state that chooses among four possible sub-
routines. To simplify their description, suppose that MGo(East) has chosen MExitIntersection(East).
Then the four possible subroutines are MSniﬀ(East, N orth), MSniﬀ(East, South), MBack(East, N orth),
and MBack(East, South).

The MSniﬀ(d, p) machine always moves in direction d until it encounters a wall (either part of
an obstacle or part of the walls of the maze). Then it moves in perpendicular direction p until it
reaches the end of the wall. A wall can “end” in two ways: either the agent is now trapped in a
corner with walls in both directions d and p or else there is no longer a wall in direction d. In the
ﬁrst case, the MSniﬀ machine terminates; in the second case, it resumes moving in direction d.

The MBack(d, p) machine moves one step backwards (in the direction opposite from d) and
then moves ﬁve steps in direction p. These moves may or may not succeed, because the actions are
stochastic and there may be walls blocking the way. But the actions are carried out in any case,
and then the MBack machine returns.

The MSniﬀ and MBack machines also terminate if they reach the end of a hall or the end of an

intersection.

These ﬁnite-state controllers deﬁne a highly constrained partial policy. The MBack, MSniﬀ,
and MGo machines contain no choice states at all. The only choice points are in MRoot, which
must choose the direction in which to move, and in MExitIntersection and MExitHall, which must
decide when to call MSniﬀ, when to call MBack, and which “perpendicular” direction to tell these
machines to try when they cannot move forward.

Figure 14 shows a MAXQ graph that encodes a similar set of constraints on the policy. The

subtasks are deﬁned as follows:

• Root. This is exactly the same as the MRoot machine. It must choose a direction d and invoke
Go. It terminates when the agent enters a terminal state. This is also its goal condition (of
course).

• Go(d, r). The parameter r is bound to the current 12-by-12 “room” in which the agent is
located. Go terminates when the agent enters the room at the end of the hallway in direction
d or when it leaves the desired hallway (e.g., in the wrong direction). The goal condition for
Go is satisﬁed only if the agent reaches the desired intersection.

• ExitInter(d, r). This terminates when the agent has exited room r. The goal condition is that

the agent exit room r in direction d.

• ExitHall(d, r). This terminates when the agent has exited the current hall (into some intersec-
tion). The goal condition is that the agent has entered the desired intersection in direction
d.

• Sniﬀ(d, r). This encodes a subtask that is equivalent to the MSniﬀ machine. However, Sniﬀ
must have two child subtasks, ToWall and FollowWall that were simply internal states of
MSniﬀ. This is necessary, because a subtask in the MAXQ framework cannot contain any

53

internal state, whereas a ﬁnite-state controller in the HAM representation can contain as
many internal states as necessary. In particular, it can have one state for when it is moving
forward and another state for when it is following a wall sideways.

• ToWall(d). This is equivalent to part of MSniﬀ, and it terminates when there is a wall
in “front” of the agent in direction d. The goal condition is the same as the termination
condition.

• FollowWall(d, p). This is equivalent to the other part of MSniﬀ. It moves in direction p until
the wall in direction d ends (or until it is stuck in a corner with walls in both directions d
and p). The goal condition is the same as the termination condition.

• Back(d, p, x, y). This attempts to encode the same information as the MBack machine, but
this is a case where the MAXQ hierarchy cannot capture the same information. MBack simply
executes a sequence of 6 primitive actions (one step back, ﬁve stes in direction p). But to
do this, MBack must have 6 internal states, which MAXQ does not allow. Instead, the Back
subtask is has the subgoal of moving the agent at least one square backwards and at least 3
squares in the direction p. In order to determine whether it has achieved this subgoal, it must
remember the x and y position where it started to execute, so these are bound as parameters
to Back. Back terminates if it achieves this subgoal or if it runs into walls that prevent it
from achieving the subgoal. The goal condition is the same as the termination condition.

• BackOne(d, x, y). This moves the agent one step backwards (in the direction opposite to d.
It needs the starting x and y position in order to tell when it has succeeded. It terminates
if it has moved at least one unit in direction d or if there is a wall in this direction. Its goal
condition is the same as its termination condition.

• PerpThree(p, x, y). This moves the agent three steps in the direction p. It needs the starting
x and y positions in order to tell when it has succeeded. It terminates when it has moved at
least three units in the direction p or if there is a wall in that direction. The goal condition
is the same as the termination condition.

• Move(d). This is a “parameterized primitive” action.

It executes one primitive move in

direction d and terminates immediately.

From this, we can see that there are three major diﬀerences between the MAXQ representation
and the HAM representation. First, a HAM ﬁnite-state controller can contain internal states. To
convert them into a MAXQ subtask graph, we must make a separate subtask for each internal state
in the HAM. Second, a HAM can terminate based on an “amount of eﬀort” (e.g., performing 5
actions), whereas a MAXQ subtask must terminate based on some change in the state of the world.
It is impossible to deﬁne a MAXQ subtask that performs k steps and then terminate regardless of
the eﬀects of those steps (i.e., without adding some kind of “counter” to the state of the MDP).
Third, it is more diﬃcult to formulate the termination conditions for MAXQ subtasks than for
HAM machines. For example, in the HAM, it was not necessary to specify that the MExitHallway
machine terminates when it has entered a diﬀerent intersection than the one where the MGo was
executed. However, this is important for the MAXQ method, because in MAXQ, each subtask
learns its own value function and policy—independent of its parent tasks. For example, without
the requirement to enter a diﬀerent intersection, the learning algorithms for MAXQ will always
prefer to have MaxExitHall take one step backward and return to the room in which the Go action
was started (because that is a much easier terminated state to reach). This problem does not arise

54

in the HAM approach, because the policy learned for a subtask depends on the whole “ﬂattened”
hierarchy of machines, and returning to the state where the Go action was started does not help
solve the overall problem of reaching the goal state in the lower right corner.

To construct the MAXQ graph for this problem, we have introduced three programming tricks:
(a) binding parameters to aspects of the current state (in order to serve as a kind of “local memory”
for where the subtask began executing), (b) having a parameterized primitive action (in order to be
able to pass a parameter value that speciﬁes which primitive action to perform), and (c) employing
“inheritance of termination conditions”—that is, each subtask in this MAXQ graph (but not the
others in this paper) inherits the termination conditions of all of its ancestor tasks. Hence, if the
agent is in the middle of executing a ToWall action when it leaves an intersection, the ToWall
subroutine terminates because the ExitInter subroutine has terminated.
If this satisﬁes the goal
condition of ExitInter, then it is also considered to satisfy the goal condition of ToWall. This
inheritance made it easier to write the MAXQ graph, because the parents did not need to pass
down to their children all of the information necessary to deﬁne the complete termination and goal
predicates.

There are essentially no opportunities for state abstraction in this task, because there are no ir-
relevant features of the state. There are some opportunities to apply the Shielding and Termination
properties, however. In particular, ExitHall(d) is guaranteed to cause its parent task, MaxGo(d) to
terminate, so it does not require any stored C values. There are many states where some subtasks
are terminated (e.g., Go(East) in any state where there is a wall on the east side of the room), and
so no C values need to be stored.

Nonetheless, even after applying the state elimination conditions, the MAXQ representation for
this task requires much more space than a ﬂat representation. An exact computation is diﬃcult,
but after applying MAXQ-Q learning, the MAXQ representation required 52,043 values, whereas
ﬂat Q learning requires fewer than 16,704 values. Parr states that his method requires only 4,300
values.

To test the relative eﬀectiveness of the MAXQ representation, we compare MAXQ-Q learning
with ﬂat Q learning. Because of the very large negative values that some states acquire (particularly
during the early phases of learning), we were unable to get Boltzmann exploration to work well—
one very bad trial would cause an action to receive such a low Q value, that it would never be tried
again. Hence, we experimented with both ǫ-greedy exploration and counter-based exploration. The
ǫ-greedy exploration policy is an ordered, abstract GLIE policy in which a random action is chosen
with probability ǫ, and ǫ is gradually decreased over time. The counter-based exploration policy
keeps track of how many times each action a has been executed in each state s. To choose an
action in state s, it selects the action that has been executed the fewest times until all actions
have been executed T times. Then it switches to greedy execution. Hence, it is not a genuine
GLIE policy. Parr employed counter-based exploration policies in his experiments with this task.
learning rate 0.50, initial value for ǫ of
For Flat Q learning, we chose the following parameters:
1.0, ǫ decreased by 0.001 after each successful execution of a Max node, and initial Q values of
−200.123. For MAXQ-Q learning, we chose the following parameters: counter-based exploration
with T = 10, learning rate equal to the reciprocal of the number of times an action had been
performed, and initial values for the C values selected carefully to provide underestimates of the
true C values. For example, the initial values for QExitInter were −40.123, because in the worst
case, after completing an ExitInter task, it takes about 40 steps to complete the subsequent ExitHall
task and hence, complete the Go parent task.

Figure 15 plots the results. We can see that MAXQ-Q learning converges about 10 times faster
than Flat Q learning. We do not know whether MAXQ-Q has converged to a recursively optimal
policy. For comparison, we also show the performance of a hierarchical policy that we coded

55

by hand, but in our hand-coded policy, we used knowledge of contextual information to choose
operators, so this policy is surely better than the best recursively optimal policy. HAMQ learning
should converge to a policy equal to or slightly better than our hand-coded policy.

This experiment demonstrates that the MAXQ representation can capture most—but not all—
of the prior knowledge that can be represented by the HAMQ hierarchy. It also shows that the
MAXQ representation requires much more care in the design of the goal conditions for the subtasks.

7.4 Other Domains

In addition to the three domains discussed above, we have developed MAXQ graphs for Singh’s
(1992b) “ﬂag task”, the treasure hunter task described by Tadepalli and Dietterich (Tadepalli &
Dietterich, 1997), and Dayan and Hinton’s (1993) Fuedal-Q learning task. All of these tasks can
be easily and naturally placed into the MAXQ framework—indeed, all of them ﬁt more easily than
the Parr and Russell maze task.

MAXQ is able to exactly duplicate Singh’s work and his decomposition of the value function—
while using exactly the same amount of space to represent the value function. MAXQ can also
duplicate the results from Tadepalli and Dietterich—however, because MAXQ is not an explanation-
based method, it is considerably slower and requires substantially more space to represent the value
function.

In the Feudal-Q task, MAXQ is able to give better performance than Feudal-Q learning. The
reason is that in Feudal-Q learning, each subroutine makes decisions using only a Q function
learned at that level—that is, without information about the estimated costs of the actions of its
In contrast, the MAXQ value function decomposition permits each Max node to
descendants.
make decisions based on the sum of its completion function, C(i, s, j), and the costs estimated by
its descendants, V (j, s). Of course, MAXQ also supports non-hierarchical execution, which is not
possible for Feudal-Q, because it does not learn a value function decomposition.

8 Discussion: Design Tradeoﬀs in Hierarchical Reinforcement

Learning

At the start of this paper, we discussed four issues concerning the design of hierarchical reinforce-
ment learning architectures. In this section, we want to highlight a tradeoﬀ between two of those
issues: the method for deﬁning subtasks and the use of state abstraction.

MAXQ deﬁnes subtasks using a termination predicate Ti and a pseudo-reward function ˜R. There
are at least two drawbacks of this method. First, it can be hard for the programmer to deﬁne Ti
and ˜R correctly, since this essentially requires guessing the value function of the optimal policy
for the MDP at all states where the subtask terminates. Second, it leads us to seek a recursively
optimal policy rather than a hierarchically optimal policy. Recursively optimal policies may be
much worse than hierarchically optimal ones, so we may be giving up substantial performance.

However, in return for these two drawbacks, MAXQ obtains a very important beneﬁt: the
policies and value functions for subtasks become context-free. In other words, they do not depend
on their parent tasks or the larger context in which they are invoked. To understand this point,
consider again the MDP shown in Figure 6.
It is clear that the optimal policy for exiting the
left-hand room (the Exit subtask) depends on the location of the goal. If it is at the top of the
right-hand room, then the agent should prefer to exit via the upper door, whereas if it is at the
bottom of the right-hand room, the agent should prefer to exit by the lower door. However, if
we deﬁne the subtask of exiting the left-hand room using a pseudo-reward of zero for both doors,

56

then we obtain a policy that is not optimal in either case, but a policy that we can re-use in both
cases. Furthermore, this policy does not depend on the location of the goal. Hence, we can apply
Max node irrelevance to solve the Exit subtask using only the location of the robot and ignore the
location of the goal.

This example shows that we obtain the beneﬁts of subtask reuse and state abstraction because
we deﬁne the subtask using a termination predicate and a pseudo-reward function. The termination
predicate and pseudo-reward function provide a barrier that prevents “communication” of value
information between the Exit subtask and its context.

Compare this to Parr’s HAM method. The HAMQ algorithm ﬁnds the best policy consistent
with the hierarchy. To achieve this, it must permit information to propagate “into” the Exit subtask
(i.e., the Exit ﬁnite-state controller) from its environment. But this means that if any state that is
reached after leaving the Exit subtask has diﬀerent values depending on the location of the goal,
then these diﬀerent values will propagate back into the Exit subtask. To represent these diﬀerent
values, the Exit subtask must know the location of the goal. In short, to achieve a hierarchically
optimal policy within the Exit subtask, we must (in general) represent its value function using the
entire state space.

We can see, therefore, that there is a direct tradeoﬀ between achieving hierarchical optimality
and achieving recursive optimality. Methods for hierarchical optimality have more freedom in
deﬁning subtasks (e.g., using complete policies, as in the option approach, or using partial policies,
as in the HAM approach). But they cannot employ state abstractions within subtasks, and in
general, they cannot reuse the solution of one subtask in multiple contexts. Methods for recursive
optimality, on the other hand, must deﬁne subtasks using some method (such as pseudo-reward
functions) that isolates the subtask from its context. But in return, they can apply state abstraction
and the learned policy can be reused in many contexts (where it will be more or less optimal).

It is interesting that the iterative method described by Dean and Lin (1995) can be viewed as
a method for moving along this tradeoﬀ. In the Dean and Lin method, the programmer makes an
initial guess for the values of the terminal states of each subtask (i.e., the doorways in Figure 6).
Based on this initial guess, the locally optimal policies for the subtasks are computed. Then
the locally optimal policy for the parent task is computed—while holding the subtask policies
ﬁxed (i.e., treating them as options). At this point, their algorithm has computed the recursively
optimal solution to the original problem, given the initial guesses. Instead of solving the various
subproblems sequentially via an oﬄine algorithm, we could use the MAXQ-Q learning algorithm.
But the method of Dean and Lin does not stop here. Instead, it computes new values of the
terminal states of each subtask based on the learned value function for the entire problem. This
allows it to update its “guesses” for the values of the terminal states. The entire solution process
can now be repeated. To obtain a new recursively optimal solution, based on the new guesses.
They prove that if this process is iterated indeﬁnitely, it will converge to the recursively optimal
policy (provided, of course, that no state abstractions are used within the subtasks).

This suggests an extension to MAXQ-Q learning that adapts the ˜R values online. Each time a
subtask terminates, we could update the ˜R function based on the computed value of the terminated
state. To be precise, if j is a subtask of i, then when j terminates in state s′, we should update
˜R(j, s′) to be equal to ˜V (i, s′) = maxa′ ˜Q(i, s′, a′). However, this will only work if ˜R(j, s′) is
represented using the full state s′. If subtask j is employing state abstractions, x = χ(s), then
˜R(j, x′) will need to be the average value of ˜V (i, s′), where the average is taken over all states s′ such
that x′ = χ(s′) (weighted by the probability of visiting those states). This is easily accomplished
by performing a stochastic approximation update of the form

′
˜R(j, x

′
) = (1 − αt) ˜R(j, x

) + αt ˜V (i, s

′

)

57

each time subtask j terminates. Such an algorithm could be expected to converge to the best
hierarchical policy consistent with the given state abstractions.

This also suggests that in some problems, it may be worthwhile to ﬁrst learn a recursively
optimal policy using very aggressive state abstractions and then use the learned value function
to initialize a MAXQ representation with a more detailed representation of the states. These
progressive reﬁnements of the state space could be guided by monitoring the degree to which the
values of ˜V (i, s′) vary for a single abstract state x′. If they have a large variance, this means that
the state abstractions are failing to make important distinctions in the values of the states, and
they should be reﬁned.

Both of these kinds of adaptive algorithms will take longer to converge than the basic MAXQ
method described in this paper. But for tasks that an agent must solve many times in its lifetime,
it is worthwhile to have learning algorithms that provide an initial useful solution but gradually
improve that solution until it is optimal. An important goal for future research is to ﬁnd methods
for diagnosing and repairing errors (or sub-optimalities) in the initial hierarchy so that ultimately
the optimal policy is discovered.

9 Concluding Remarks

This paper has introduced a new representation for the value function in hierarchical reinforcement
learning—the MAXQ value function decomposition. We have proved that the MAXQ decompo-
sition can represent the value function of any hierarchical policy under both the ﬁnite-horizon
undiscounted, cumulative reward criterion and the inﬁnite-horizon discounted reward criterion.
This representation supports subtask sharing and re-use, because the overall value function is de-
composed into value functions for individual subtasks.

The paper introduced a learning algorithm, MAXQ-Q learning, and proved that it converges
with probability 1 to a recursively optimal policy. The paper argued that although recursive
optimality is weaker than either hierarchical optimality or global optimality, it is an important
form of optimality because it permits each subtask to learn a locally optimal policy while ignoring
the behavior of its ancestors in the MAXQ graph. This increases the opportunities for subtask
sharing and state abstraction.

We have shown that the MAXQ decomposition creates opportunities for state abstraction, and
we identiﬁed a set of ﬁve properties (Max Node Irrelevance, Leaf Irrelevance, Result Distribution
Irrelevance, Shielding, and Termination) that allow us to ignore large parts of the state space
within subtasks. We proved that MAXQ-Q still converges in the presence of these forms of state
abstraction, and we showed experimentally that state abstraction is important in practice for the
successful application of MAXQ-Q learning—at least in the Taxi and Kaelbling HDG tasks.

The paper presented two diﬀerent methods for deriving improved non-hierarchical policies from
the MAXQ value function representation, and it has formalized the conditions under which these
methods can improve over the hierarchical policy. The paper veriﬁed experimentally that non-
hierarchical execution gives improved performance in the Fickle Taxi Task (where it achieves opti-
mal performance) and in the HDG task (where it gives a substantial improvement).

Finally, the paper has argued that there is a tradeoﬀ governing the design of hierarchical rein-
forcement learning methods. At one end of the design spectrum are “context free” methods such
as MAXQ. They provide good support for state abstraction and subtask sharing but they can only
learn recursively optimal policies. At the other end of the spectrum are “context-sensitive” meth-
ods such as HAMQ, the options framework, and the early work of Dean and Lin. These methods
can discover hierarchically optimal policies (or, in some cases, globally optimal policies), but their

58

drawback is that they cannot easily exploit state abstractions or share subtasks. Because of the
great speedups that are enabled by state abstraction, this paper has argued that the context-free
approach is to be preferred—and that it can be relaxed as needed to obtain improved policies.

Acknowledgements

The author gratefully acknowledges the support of the National Science Foundation under grant
number IRI-9626584, the Oﬃce of Naval Research under grant number N00014-95-1-0557, the Air
Force Oﬃce of Scientiﬁc Research under grant number F49620-98-1-0375, and the Spanish Council
for Scientiﬁc Research. In addition, the author is indebted to many colleagues for helping develop
and clarify the ideas in this paper including Valentina Bayer, Leslie Kaelbling, Bill Langford,
Wes Pinchot, Rich Sutton, Prasad Tadepalli, and Sebastian Thrun. I particularly want to thank
Eric Chown for encouraging me to study Feudal reinforcement learning, Ron Parr for providing the
details of his HAM machines, and Sebastian Thrun encouraging me to write a single comprehensive
paper. I also thank the anonymous reviewers of previous drafts of this paper for their suggestions
and careful reading, which have improved the paper immeasurably.

References

Belmont, MA.

Bellman, R. E. (1957). Dynamic Programming. Princeton University Press.

Bertsekas, D. P., & Tsitsiklis, J. N. (1996). Neuro-Dynamic Programming. Athena Scientiﬁc,

Boutilier, C., Shoham, Y., & Wellman, M. (1997). Economic principles of multi-agent systems

(Editorial). Artiﬁcial Intelligence, 94 (1–2), 1–6.

Boutilier, C., Dean, T., & Hanks, S. (1999). Decision theoretic planning: Structural assumptions

and computational leverage. Journal of Artiﬁcial Intelligence Research, To appear.

Currie, K., & Tate, A. (1991). O-plan: The open planning architecture. Artiﬁcial Intelligence,

52 (1), 49–86.

Dayan, P., & Hinton, G. (1993). Feudal reinforcement learning. In Advances in Neural Information

Processing Systems, 5, pp. 271–278. Morgan Kaufmann, San Francisco, CA.

Dean, T., & Lin, S.-H. (1995). Decomposition techniques for planning in stochastic domains.
Tech. rep. CS-95-10, Department of Computer Science, Brown University, Providence, Rhode
Island.

Dietterich, T. G. (1998). The MAXQ method for hierarchical reinforcement learning. In Fifteenth

International Conference on Machine Learning.

Fikes, R. E., Hart, P. E., & Nilsson, N. J. (1972). Learning and executing generalized robot plans.

Artiﬁcial Intelligence, 3, 251–288.

Hauskrecht, M., Meuleau, N., Boutilier, C., Kaelbling, L., & Dean, T. (1998). Hierarchical solution
of Markov decision processes using macro-actions. Tech. rep., Brown University, Department
of Computer Science, Providence, RI.

Howard, R. A. (1960). Dynamic Programming and Markov Processes. MIT Press, Cambridge, MA.

59

Jaakkola, T., Jordan, M. I., & Singh, S. P. (1994). On the convergence of stochastic iterative

dynamic programming algorithms. Neural Computation, 6 (6), 1185–1201.

Kaelbling, L. P. (1993). Hierarchical reinforcement learning: Preliminary results. In Proceedings
of the Tenth International Conference on Machine Learning, pp. 167–173 San Francisco, CA.
Morgan Kaufmann.

Knoblock, C. A. (1990). Learning abstraction hierarchies for problem solving. In Proceedings of the
Eighth National Conference on Artiﬁcial Intelligence, pp. 923–928 Boston, MA. AAAI Press.

Korf, R. E. (1985). Macro-operators: A weak method for learning. Artiﬁcial Intelligence, 26 (1),

35–77.

Lin, L.-J. (1993). Reinforcement learning for robots using neural networks. Ph.D. thesis, Carnegie

Mellon University, Department of Computer Science, Pittsburgh, PA.

Parr, R. (1998a). Flexible decomposition algorithms for weakly coupled markov decision problems.
In Proceedings of the Fourteenth Annual Conference on Uncertainty in Artiﬁcial Intelligence
(UAI–98), pp. 422–430 San Francisco, CA. Morgan Kaufmann Publishers.

Parr, R. (1998b). Hierarchical control and learning for Markov decision processes. Ph.D. thesis,

University of California, Berkeley, California.

Parr, R., & Russell, S. (1998). Reinforcement learning with hierarchies of machines. In Advances

in Neural Information Processing Systems, Vol. 10 Cambridge, MA. MIT Press.

Pearl, J. (1988). Probabilistic Inference in Intelligent Systems. Networks of Plausible Inference.

Morgan Kaufmann, San Mateo, CA.

Rummery, G. A., & Niranjan, M. (1994). Online Qlearning using connectionist systems. Tech.
rep. CUED/FINFENG/TR 166, Cambridge University Engineering Department, Cambridge,
England.

Sacerdoti, E. D. (1974). Planning in a hierarchy of abstraction spaces. Artiﬁcial Intelligence, 5 (2),

115–135.

Singh, S., Jaakkola, T., Littman, M. L., & Szepesv´ari, C. (1998). Convergence results for single-step
on-policy reinforcement-learning algorithms. Tech. rep., University of Colorado, Department
of Computer Science, Boulder, CO.

Singh, S. P. (1992a). Transfer of learning by composing solutions of elemental sequential tasks.

Singh, S. P. (1992b). Transfer of learning by composing solutions of elemental sequential tasks.

Machine Learning, 8, 323–339.

Machine Learning, 8, 323.

Sutton, R. S., Singh, S., Precup, D., & Ravindran, B. (1999). Improved switching among temporally
abstract actions. In Advances in Neural Information Processing Systems, Vol. 11. MIT Press.

Sutton, R., & Barto, A. G. (1998). Introduction to Reinforcement Learning. MIT Press, Cambridge,

MA.

60

Sutton, R. S., Precup, D., & Singh, S. (1998). Between MDPs and Semi-MDPs: Learning, plan-
ning, and representing knowledge at multiple temporal scales. Tech. rep., University of Mas-
sachusetts, Department of Computer and Information Sciences, Amherst, MA.

Tadepalli, P., & Dietterich, T. G. (1997). Hierarchical explanation-based reinforcement learning.
In Proceedings of the Fourteenth International Conference on Machine Learning, pp. 358–366
San Francisco, CA. Morgan Kaufmann.

Watkins, C. J. C. H. (1989). Learning from Delayed Rewards. Ph.D. thesis, King’s College, Oxford.

(To be reprinted by MIT Press.).

Watkins, C. J., & Dayan, P. (1992). Technical note q-learning. Machine Learning, 8, 279.

61

Goal

Figure 13: Parr’s maze problem. The start state is in the upper left corner, and all states in the
lower right-hand room are terminal states.

62

QExitInter(d,r)

QExitHall(d,r)

MaxExitInter(d,r)

MaxExitHall(d,r)

QSniffEI(d,p)

QBackEI(d,p)

QSniffEH(d,p)

QBackEH(d,p)

MaxSniff(d,p)

MaxBack(d,p,x,y)

x/X

y/Y

x/X

y/Y

QFollowWall(d,p)

QToWall(d)

QBackOne(d)

QPerpThree(p)

MaxFollowWall(d,p)

MaxToWall(d)

MaxBackOne(d)

MaxPerpThree(p)

d/p

d/d

d/Inv(d)

d/p

QMoveFW(d)

QMoveTW(d)

QMoveBO(d)

QMoveP3(d)

Figure 14: MAXQ graph for Parr’s maze task.

MaxRoot

Go(d)

r/ROOM

MaxGo(d,r)

MaxMove(d)

63

Hand-coded hierarchical policy

-350

MAXQ Q Learning

Flat Q Learning

l
a
i
r
T
 
r
e
P
 
d
r
a
w
e
R
 
n
a
e

M

-100

-150

-200

-250

-300

-400

-450

-500

0

1e+06

2e+06

4e+06

5e+06

6e+06

3e+06
Primitive Steps

Figure 15: Comparison of Flat Q learning and MAXQ-Q learning in the Parr maze task.

64

