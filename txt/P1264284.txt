Keep it stupid simple.

Erik Peterson1, Necati Alp Myesser2, Timothy Verstynen1,3 and Kyle Dunovan1,3
1Department of Psychology 2Department of Mathematics 3Center for the Neural Basis of Cognition
Carnegie Mellon University,
5000 Forbes Ave, Pittsburgh, PA 15213

8
1
0
2
 
p
e
S
 
0
1
 
 
]
I

A
.
s
c
[
 
 
1
v
6
0
4
3
0
.
9
0
8
1
:
v
i
X
r
a

Abstract

Deep reinforcement learning can match and exceed human
performance, but if even minor changes are introduced to the
environment artiﬁcial networks often can’t adapt. Humans
meanwhile are quite adaptable. We hypothesize that this is
partly because of how humans use heuristics, and partly be-
cause humans can imagine new and more challenging envi-
ronments to learn from. We’ve developed a model of hier-
archical reinforcement learning that combines both these ele-
ments into a stumbler-strategist network. We test transfer per-
formance of this network using Wythoff’s game, a gridworld
environment with a known optimal strategy. We show that
combining imagined play with a heuristic–labeling each po-
sition as “good” or “bad”–both accelerates learning and pro-
motes transfer to novel games, while also improving model
interpretability.

Deep reinforcement learning can rival human performance
on games of strategy like chess (Silver et al. 2017) and Go
(Silver et al. 2016), as well as less structured games like clas-
sic Atari video games (Minh 2015). Unlike humans, arti-
ﬁcial networks are often unable to transfer performance to
new situations, even in environments with relatively triv-
ial changes (Zhang et al. 2018; Zhang, Ballas, and Pineau
2018). We hypothesize that part of the human capacity for
transfer may come from our ability to imagine new environ-
ments and learn from them, a kind of counterfactual reason-
ing (Pearl 2017). Human success may also stem from our
ability to develop and exploit simple heuristics (Hart 2005;
Gigerenzer 2014). To try and improve transfer learning in ar-
tiﬁcial networks, we combined these two elements in a novel
variation of hierarchical reinforcement learning, which we
call the stumbler-strategist architecture. The intuition be-
hind this is simple: it is easier to imagine new environments
using simple stupid ideas over to complex ones.

Stumbler-strategist networks
We introduce two-layer stumbler-strategist networks (Fig-
ure 1), a variation on the DYNA-Q models (Sutton and
Barto 2018). Stumblers are model-free reinforcement learn-
ing agents that observe and act in the environment. Like all
model-free systems they can only discover the value of spe-
ciﬁc input-output associations, without any appreciation for

Copyright c(cid:13) 2019

the organizing features of the game that govern these asso-
ciations (Sutton and Barto 2018).

Strategist layers are model-based agents that can only ob-
serve what the stumbler layers learn, sampling and aggre-
gating and classifying information about the stumblers’ ac-
tions. Strategists don’t act directly but can, when conﬁdence
is high, bias the stumbler’s actions. Similar to hypothesized
role of rostral areas of the human prefrontal cortex (Frank
and Badre 2011; Badre and Frank 2012), strategists hold ab-
stract task representations, neither directly observing or act-
ing on the world, but reasoning by heuristics and rules. Here
we explore the simple heuristic: “every state is either bad or
good”.

Our key innovation is in how strategist-layers use infor-
mation: they try and predict the heuristic class of game
states in new and more challenging environments–a kind of
imagination (Weber et al. 2017). That is, to learn to trans-
fer knowledge, they imagine and play new games based on
their observations of the stumbler layer’s activity. Learning
in the strategist layer can succeed in these new, harder, en-
vironments because it is asked only to predict the heuristic
label rather then the complex action-value space present in
the stumbler.

Wythoff’s game
Despite their simplicity, “gridworld” environments can pro-
vide a challenging but controllable test-bed for transfer
learning. In previous work, two state-of-the-art deep rein-
forcement learning networks could not adapt to subtle dif-
ferences in the training and testing grid-world environments
(Leike et al. 2017) suggesting they are reasonable–perhaps
even ideal given their simplicity–test bed to study transfer.

To isolate strategy learning and transfer, our agents play
an impartial board game called Wythoff’s game. The game
is played on a two dimensional grid in which players alter-
nate turns to move an object that is initially placed randomly
on the board. To win, players take turns moving the single
game piece to the top-left corner. Every turn, the game piece
can be moved horizontally, vertically, or diagonally. Moves
must be made “upward” toward the ﬁnal winning position,
as shown in Figure 2a. Each player must move when it is
their turn. The game ends when one player must take the
ﬁnal position (i.e., top-left position). The player in this posi-
tion wins the game.

In a previous work (Raghu et al. 2017) studied Erdos-
Selfridge-Spencer games, which also have an optimal strat-
egy. The goals of our two papers are different. Like Raghu
et al, we focus on studying transfer compared to an optimal
player, move-by-move. Unlike Raghu et al, we try and trans-
fer learning to new environments, rather than focusing only
on transferring between changes in opponent strategy.

A good and bad heuristic
The heuristic used by the strategist is “positions are either
good or bad”. To classify every position on the board, ﬁrst
Q(s, a) values from the stumbler are converted to expected
values, where V (s) = maxQ(s, a). V (s) for every s is clas-
siﬁed as bad if V (s) < Vbad and good if V (s) > Vgood,
where the thresholds Vbad and Vgood are hyperparameters of
the model.

Methods
We’ve designed a new two-level network architecture that
combines traditional Q-learning, which we call stumbling,
with a new strategist layer. The strategist layer has two
key elements: an experimenter provided heuristic, and a in-
put representation that allows this deep network to imag-
ine, or extrapolate, the value of unseen board positions.
These two elements work in combination, and allow our net-
work to directly transfer it’s knowledge to new–never before
experienced–game boards, and rapidly learn new changes to
the rules of the game. The heuristic–which projects Q(s, a)
values to {good, bad} classes–is described in detail in the
main text. In this section we describe the learning algorithms
in the stumbler and strategist layers, as well as the the algo-
rithm we use to control how much inﬂuence the strategist
layer has over the stumbler. We conclude this section with a
description of our approach to hyper-parameter tuning.

Code for all experiments is available at https://

github.com/CoAxLab/azad

Stumbler learning
Stumbler learning is governed by Q-Learning, extended to
allow for “top-down” strategist feedback and for joint-action
observations, where learning updates happen over player-
opponent joint-action pairs. Here, the stumbler was imple-
mented as a look-up table.

Strategist layer learning
The strategist layer is itself a two-layer deep neural network,
trained on input coordinates (i, j) and output values derived
using the good-bad heuristic described in the main text.

Error backpropagation relied on stochastic gradient de-
scent, with a learning rate of αr. Training set batch sizes
were 1/2 the size of the dataset and were sampled with re-
placement.

Strategist layer inﬂuence
To judge how much inﬂuence the strategist should have
over the the stumbler, the two layers play a single game
of Wythoff’s using a purely greedy strategy. They play on
a game board larger than the one the stumbler layer was

Figure 1: Diagram of the two-layer stumbler-strategist ar-
chitecture. Stumblers are our name for model-free rein-
forcement learning agents, driven here by a version of the
Q-learning rule and a (cid:15)-greedy action selection policy. As
is typical for such agents the stumblers interact directly
with the game environment, learning the state-action values
(Q(s, a)). The strategist layer learns only with data extracted
from the stumbler layer. To learn, the strategist ﬁrst projects
Q(s, a) values sampled from the stumbler into one of two
classes {good, bad} and tries to predict the appearance of
these classes in a new, larger, game board. If these predic-
tions are successful, the inﬂuence of the strategist layer is
incrementally increased (Alg. 3).

Impartial games offer a unique advantage for testing
heuristic strategies. The difference between an impartial
game, like Wythoff’s, and a strategy game like Go, is that
an impartial game has a single ground truth solution. Ev-
ery position in an impartial game is either hot, meaning that
there exists a winning strategy for the player about to make
a move, or cold, meaning that under optimal play, the player
about to make a move will always lose. The optimal strategy
is always to move from a hot position to cold one. The dis-
tribution of hot and cold positions across the state space in
an impartial game usually comes with inherent mathemati-
cal structure: n = mφ,m = nφ where φ is the golden ratio
and m and n are indices on the game board. This structure
is visualized in Figure 2b.

Figure 2: Wythoff’s game play. a. Valid moves in Wythoff’s
are same a Queen’s moves in chess. A piece (depicted here
as a black circle) can be move laterally, vertically, or diago-
nally. The goal of the game it to move the piece to the origin
of board, shown here as a blue square. b, Optimal play. Op-
timal moves are to “cold” positions (blue). Hot positions are
in red. No cold position is accessible from any other cold
position, however the winning position is cold. This means
the optimal way to play is to always move to a cold position
forcing your opponent to move from a cold position, from
which they cannot win.

Algorithm 1 Learning algorithm used by stumbler

procedure STUMBLE(Q)
n ← Learning episode
(cid:15)0 ← Max exploration-exploitation
γ ← Value bias
αs ← Stumbler learning rate
I ← Strategist inﬂuence
B ← Strategy bias, given Strategist
G ← Initialize Wythoff’s game
s ← A position in G
while G continues do

logn+e

(cid:15) ← (cid:15)0
action ← (cid:15)-greedy(Q(s, action) + I ∗ B(s), (cid:15))
do action on G, update s
if G ends then

(cid:46) Anneal

reward ← 1

else

(cid:46) Winning move
(cid:46) Opponent plays

do action on G, update s
if G ends then

else

reward ← 0

reward ← −1

(cid:46) Opponent wins

Q(cid:48) ← max Q-value from s(cid:48) (cid:46) Joint-action update
Q(s, action) ← α(reward+γQ(cid:48)−Q(s, action))
I ← Inﬂuence(Stumbler, Strategist)

return Q

Algorithm 2 Learning algorithm used by the Strategist

procedure STRATEGIST(Stumbler)
αr ← Strategist learning rate
nr ← Number of training episodes
n ← Episode counter
B ← Strategist bias
Q ← Complete Q-table from Stumbler
dataset ← GoodBadHeuristic(Q)
(cid:46) See main text
model ← initialized neural network with default set-

while n < nr do

trainset ← sample(dataset)
backpropagate model with trainset through cost

tings

func

B ← model for all s
return B

trained on. The intuition behind this approach is that if the
strategist layer has useful transferable knowledge it should
soundly defeat the stumbler. Every time the strategist layer
wins, it’s inﬂuence I over the stumbler increases by αI . Ev-
ery time the strategist looses its inﬂuence declines by the
same amount.

Algorithm 3 Strategist inﬂuence algorithm

procedure INFLUENCE(Stumbler, Strategist)

αI ← Inﬂuence learning rate
I ← Inﬂuence
win ← Strategist score
G ← Initialize Wythoff’s game
s ← A position in G
while G continues do

action ← greedy(Stumbler(s))
do action on G, update s
if G ends then
win ← 0

action ← greedy(Strategist(s))
do action on G, update s
if G ends then
win ← 1
if win > 0 then
I ← I + αI

else

I ← I − αI
I ← clip(I, −1, 1)
return I

(cid:46) I is limited

Network training
All networks were trained on a ﬁxed number of 75,000
episodes, which preliminary runs showed were well past the
learning plateau. Stumbler-only training used this iteration
count directly. The stumbler-strategist network required a
nesting the training procedure, which worked as follows. To
begin training ﬁrst the stumbler would play ns games and
learn from the each game independently (by rollout) (Alg 1.).
Then the strategist takes in the stumbler extracts its value es-
timates, applies the heuristic (see A good and bad heuristic
above) generating a dataset, and would train on nr samples
of this dataset (Alg 2.). Finally the inﬂuence of the strate-
gist was estimated (Alg 3.). This overall pattern then repeats
for n iterations, but the total number of training iterations
n ∗ nr ∗ nr was constrained to be 75,000.

Note: in all training, we independently model the player
and their opponent as stumblers. Only the player can have a
strategist layer. The opponent is always stumbling around.

Parameter tuning
Overall, network performance was robust to a wide range of
hyperparameter settings. Parameter tuning was done via grid
search, carried out piece-wise. First, the stumbler layer was
tuned. Second, the strategist layer’s learning and heuristic
parameters were tuned. Next Vbad and Vgood were optimized
followed by the inﬂuence rate (αI ). Finally, the depth and
unit number of the strategist layer was optimized. Each stage

Table 1: Network hyperparameters

Meaning
Symbol Value
αs
Stumbler learning rate
αr
Strategist learning rate
αI
Inﬂuence learning rate
(cid:15)
Exploration-exploitation
γ
Value bias
Stumbler iterations (strategist only) ns
nr
Strategy iterations (strategist only)
Vgood
Good threshold
Vbad
Bad threshold
I
Inﬂuence (initial)
B
Strategist bias (initial)

0.4
0.025
0.2
0.4
0.5
500
500
0.5
-0.5
0.0
0.0

relied, in part, on the previous tuning stages. The stumbler
was implemented as simple one-hot look-up table, and so
had no internal parameters.

The optimal hyperparameter conﬁguration we arrives at is

found in Table 1.

Stumbler tuning In tuning the stumbler we explored (cid:15)
from (0.1 − 1), αs from (0.01, 1), and γ from (0.1 − 1).
In taking 10 samples from each range and searching the full
permutation space, we sampled a 1000 hyperparameter com-
binations in tuning the stumbler,

Stumbler-strategist tuning The stumbler-strategist tun-
ing stage one explored learning rate αr and the training it-
eration numbers ns and nr, over the following respective
ranges, (0.001-0.1), (100,1000), and (100,1000) forming a
10x3x3 sampling space (Figure 3b). Stage two searched
Vbad and Vgood from (−1, 0) and (0, 1) forming a 10x10
sampling space. Stage three tuned the inﬂuence rate αI
(0.01 − 1.0) over 20 samples. The ﬁnal stage explored the
depth and width of the two-layer strategist from nhidden1
from (15, 500) and nhidden2 from (0, 50), in 10x10 sampling
space (not shown). As is clear in Figure 3, there is substan-
tial degree of slackness or robustness in parameter choices.
As such we hand picked middle values from each “good” re-
gion (Table 1). For more information in the meaning of these
parameters see Network training.

Note: annealing of (cid:15) (Alg 1.) is required for convergence

to optimal play.

Results
During learning the strategist layer never directly observes
or acts on the game, instead it tries to extrapolate, or imag-
ine, the {good, bad} values on a larger game board that the
stumbler layer never encounters. This extrapolation is possi-
ble because the complex Q(s, a) value structure is reduced
to a binary {good, bad} representation, which is turn based
on the heuristic that each position can be exclusively either
good or bad. Our hope was that our heuristic would naturally
map onto the hot/cold board structure of Wythoff’s game.
(See the Wythoff’s section above for more).

Figure 4 shows how the two layers of the network value
board positions at different stages of learning. Models that
are developed in the earlier stages of training remain mostly

Figure 3: Hyperparameter tuning. a. Stumbler learning rate
b. Epsilon c. Gamma d. Strategist learning rate e. Stum-
bler iterations f. Strategy iterations g. Good threshold h. Bad
threshold i. Inﬂuence learning rate The red “x” in all ﬁgures
is the optimal or reference parameter value used in all mod-
els, unless noted otherwise. The search strategy for these
values is described in Parameter tuning. Reference values
are in Table 1.

irrelevant to transfer; however, models that meaningfully
generalize, although with low accuracy, begin to emerge
soon after initial training. Such models are crucial for the
learning process because they inﬂuence the way the stum-
bler chooses to explore different action spaces. Without such
guidance, the stumbler explores actions without any overall
purpose or insight. With the guidance from the strategist,
the stumbler explores actions that would either contradict or
conﬁrm the strategist’s imagined hypothesis about the nature
of the learning environment it cannot directly learn from.

Stumbler-strategist performance

We compared the performance of the stumbler to the
stumbler-strategist network. Figure 5a shows the fraction
of moves that were optimal for both networks during learn-
ing. Initial learning in the stumbler-strategist is more than

Figure 4: Learning in three stages of training on Wythoff’s
game. The early models (exploration) will be largely unsuc-
cessful, while certain inaccurate transfers (exploitation) will
supply reasonable strategies to the stumbler, allowing the
provision of useful datasets into the network that translate
into accurate and general models (imagination). In this ex-
ample the stumbler trained on a 14 by 14 board for 2000
game-plays, across each strategist time-step. The strategist
learned to play on a 50 by 50 game board.

twice as fast as the stumbler alone. However both networks
plateau at the same level of ﬁnal performance, indicated by
the overlapping curves over the last few thousand games in
Figure 5a.

To see how well the learned strategist in Figure 5 did
in comparison to the best possible strategist, we compared
learning between the learned strategist and a perfect oracle
Figure 5b). As we noted above, there is a single optimal
strategy for playing Wythoff’s, which means we can hard
code perfect play into the strategist layer. The learned strate-
gist comes close to matching the perfect alternative, sug-
gesting near-optimal accuracy in our learned network (Fig-
ure 5b).

Parameter sensitivity and heuristic design
To ensure the observed good performance was not speciﬁc
to a particular set of parameters, we measure ﬁnal optimal
play performance over the last 100 episodes as parameters
were independently perturbed. We compare these perturba-
tions to a baseline run using standard parameters (Table 1.),
but run with 20 different random seeds while parameter per-
turbations used a ﬁxed seed. Intuitively, if the performance
variability due to parameter changes is similar to random be-
havioural changes, we can consider that parameter choice to
be robust.

We sampled a range of values ranging from 1/2 to 2 times
the standard parameter values (Table 1). The variability in
these perturbations were highly similar to that seen in the

Figure 5: a. Learning optimal moves in Wythoff’s game with
(black) and without (gold) strategist layer. b. Learning when
a stumbler layer is biased by a perfect strategist’s (purple),
compared to the learned strategist from a. (black). Error
bars denote 2 * standard error, and were calculated from 20
unique random seeds.

baseline (random) condition (Figure 6a.) suggesting our pa-
rameter selections were sufﬁciently robust.

We also consider two alternate heuristics–good only or
bad only. Both these approaches prevented the strategist
from develop any signiﬁcant inﬂuence over the stumbler,
learning to no improvement in training performance (Fig-
ure 6b.) compared to the stumbler alone.

Game board transfer

The strategist layer drives near optimal performance on
never before seen game boards with no additional training.
Unlike previous ﬁgures, here we examine performance of
the stumbler and strategist layers independently as they are
completely uncoupled. This is possible because for these ex-
periments learning is turned off, and pre-trained models are
used; the same models whose learning performance is shown
in Figure 5-6.

We increased the board size from size the stumbler was
originally trained on (15x15) up to 500x500, in 50 unit in-
crements. As is typical, as soon as the board size increases
beyond it’s direct experience, optimal play for the stumbler
plummets (Figure 7a.), quickly matching a the performance
of random choice agent (Figure 7b.). However on the 15x15
board the stumbler model, with full access the Q(s, a) out-
performs the strategist, which can be seen by comparing the
ﬁrst points in both curves in Figure 7a. and in Figure 7c.
The strategist on the other hand maintains a high level of
performance over the entire range of novel game boards.

Figure 6: a. Hyper-parameter sensitivity. Baseline is 20 stan-
dard runs, randomly initialized, using optimal hyperparam-
eters (whose selection is describe in the Methods section).
These optimal values are found in Table 1. Epsilon ((cid:15)) is
the exploration parameter in the standard (cid:15)-greedy algorithm
(sampled here from 0.01 − 0.8). Inﬂuence learning rate (αI )
controls quickly the strategists bias effects the stumblers ac-
tions (0.01 − 0.4). Stumbler learning rate is the stumblers
learning rate (αs), which in typical Q-learning is often de-
noted by α (0.2 − 0.6). The strategist learning rate (αr)
controls in the the deep strategist layer (0.01 − 0.05; values
larger than 0.08 lead to catastrophic failure). The good and
bad threshold are the value thresholds, Vgood and Vbad (sam-
pled from 0.0 − 0.5 and −0.5 − 0 respectively). b. Effect
of alternate heuristic choices. Our standard heuristic maps
Q(s, a) values to good/bad classes. Here we explored an
alternate approach where the strategist layer predicts only
good or only bad, rather than both. Error bars denote 2 *
standard error.

Rule transfer

Next we consider transfer between different grid-world
games. To do this we keep the game boards the same as out
initial experiments (Figures 5-6 but alter the rules of play.
Our agents play two new games: Nim and Euclid’s. In Eu-
clid’s game the movement directions are the same Wythoff’s
game (up, left or diagonal) but in these directions during Eu-
clid play only select positions are available. Euclid’s game
is a playable instantiation of Euclid’s algorithm. So valid
positions are those that could be obtained by taking differ-
ences between row m and column n when m and n are also
multiples of greatest common denominator of m and n, (i.e,
(m, n)if (GDC(m, n).

In the game of Nim diagonal moves are forbidden, leav-
ing only moves to the up and left. Like Wythoff’s though,
and unlike Euclid, as position in a valid direction is allowed.
The simple removal of diagonal play profoundly alters opti-
mal play. The optimal way to play a 2d game of Nim is to
move such that row and column indices are equal, which
amounts to moving to the diagonal positions (via up and
left). This is profoundly different than the optimal play in
Wythoff’s, which centers around position that are multiples
of the golden ratio (See the Wythoff’s game section above).

Figure 7: Transfer performance on new larger game boards,
with frozen layers. a. Optimal play observed when the stum-
bler (goldenrod) and strategist (black) layers complete in
several (1000) games of Wythoff’s. The x-axis denotes in-
creases in board size. Prior to this experiment, neither layer
has experienced a board larger than 15x15 (for the stum-
bler) or 50x50 (for the strategist. b. The strategist layer ver-
sus a random agent (blue) who’s choices were sampled uni-
formly from the available actions at each position, and could
not learn c. Fraction of the games won by the strategist ver-
sus the stumbler (goldenrod) or the random player (blue). At
each board size 1000 games were played, each begun with a
unique random seed.

With changes to the rules of the game change, the stum-
bler layers for all models needed to be reset. We therefore
studied how a transferring a Wythoff-trained strategy layer,
to a re-initialized stumbler layer impacted learning in ei-
ther Euclid’s’ game or Nim (Figure 8). To measure only the
beneﬁts of transfer we quantiﬁed the ratio of player/ oppo-
nent wins with and without a pre-trained layer. Player mod-
els without the pre-trained layer also featured a function-
ing strategist, though of course it began with a random ini-
tial conﬁguration. As in all previous experiments the oppo-
nent agent doesn’t have a strategist layer; It is left stumbling
around.

In Euclid’s–whose optimal play is a restricted subset of
Wythoff’s making it more difﬁcult to learn–strategy transfer
accelerates learning (Figure 8a.). Meanwhile in Nim, strat-
egy transfer does not improve performance (as would be ex-
pected given the different optimal strategies) but it also does
not signiﬁcantly hinder learning either. The inﬂuence algo-

rithm we employ (Alg. 3) quickly limits bad strategies, leav-
ing the network able to re-train itself.

Figure 8: Rule transfer: learning with a pre-trained strate-
gist layer. a. Player wins in Euclid’s game, with and without
strategy transfer. b. Player wins in Nim. In both models only
the player could beneﬁt from a strategist layer. As with all
previous simulations, the opponent here was limited to tra-
ditional Q-learning.

Discussion
Our key innovation is the introduction of a strategist layer to
more traditional RL networks, that imagines play in new and
more challenging environments. The strategist layer how-
ever only succeeds in these new, harder, environments be-
cause it is learns to predict a simple, but useful, heuristic:
“every state is good or bad”.

Heuristics map complex contingencies to simple rules
(Parpart 2017). Heuristics are widely used in human cogni-
tion, having been tuned by evolution and experience to sup-
port memory, and transfer knowledge (Gigerenzer 2014). A
heuristic is easier to map between environmental states, as
it is not dependent on a speciﬁc set of complex actions. In-
tuitively, heuristics also simplify imagining never before ex-
perienced outcomes. Though not put to use here, heuristics
also ease the transfer of knowledge between agents. For ex-
ample, it’s intuitively easier to transfer knowledge between
a student student and teacher, or to engage in cooperative
inference, when using simple (appropriate) heuristics rather
complex action-value tensors.

We studied our stumbler-strategist in a toy “gridworld”
environment, with known optimal play (i.e. we studied
Wythoff’s game). While this allowed us to quantify the ef-
ﬁciency of strategy learning, it is a highly simpliﬁed envi-
ronment by design. Moving from simple games such as this
to open-ended strategy games like Go and to complex vi-
sual environments like classic Atari games will require at
least two further innovations. First, gridworld games share

common coordinates. It is therefore simple to move from
smaller boards to larger and more challenging boards by just
mapping between common coordinates. Using a stumbler-
strategist network in visually complex environments, like
classic Atari games, requires solving this projection prob-
lem, which is nontrivial. There is room for optimism though,
as the response in higher-level layers in DQN networks is re-
lated to the perceptual similarity of the input images (Minh
2015), suggesting strategists could observe not only values,
but also critical perceptual relationships by only studying
stumblers’ responses to the world.

Second, we studied a single strategic heuristic (good/bad).
It is not reasonable to expect this heuristic to apply in all
but a few select instances. However there exists a substantial
literature in game theory representing a large pool of possi-
ble heuristics and strategies (Gigerenzer 2014; Parpart 2017;
Hart 2005; Rieskamp and Otto 2006). While these will cer-
tainly not describe optimal performance in all situations,
there are perhaps consistent moments to be found in com-
plex games where simple strategies, and matched counter-
factual simulations, will allow for information to be efﬁ-
ciently transferred between environments.

Acknowledgments.

The research was sponsored by the Army Research Labora-
tory and accomplished under Cooperative Agreement Num-
ber W911NF-10-2-0022. The views and conclusions con-
tained in this document are those of the authors and should
not be interpreted as representing the ofﬁcial policies, either
expressed or implied, of the Army Research Laboratory or
the U.S. government.

References

reinforcement

[Badre and Frank 2012] Badre, D., and Frank, M. J. 2012.
Mechanisms of hierarchical
learning in
cortico-striatal circuits 2: Evidence from fMRI. Cerebral
Cortex 22(3):527–536.
[Frank and Badre 2011] Frank, M. J., and Badre, D. 2011.
Mechanisms of hierarchical reinforcement learning in corti-
costriatal circuits 1: computational analysis. Cerebral cortex
22(3):509–526.
[Gigerenzer 2014] Gigerenzer, G. 2014. Work Why Heuris-
tics. Perspectives on Psychological Science 3(1):20–29.
[Hart 2005] Hart, S. 2005. Adaptive heuristics. Economet-
rica 73(5):1401–1430.
[Leike et al. 2017] Leike, J.; Martic, M.; Krakovna, V.; Or-
tega, P. A.; Everitt, T.; Lefrancq, A.; Orseau, L.; and Legg,
S. 2017. AI Safety Gridworlds.
[Minh 2015] Minh, V. 2015. Human-level control through
deep reinforcement learning. Nature 518:529–533.
[Parpart 2017] Parpart, P. 2017. Heuristics as Bayesian In-
ference.
[Pearl 2017] Pearl, J. 2017. Theoretical Impediments to Ma-
chine Learning With Seven Sparks from the Causal Revolu-
tion Scientiﬁc Background. (September):1–8.

[Raghu et al. 2017] Raghu, M.; Irpan, A.; Andreas, J.; Klein-
berg, R.; Le, Q. V.; and Kleinberg, J. 2017. Can Deep Rein-
forcement Learning Solve Erdos-Selfridge-Spencer Games?
[Rieskamp and Otto 2006] Rieskamp, J., and Otto, P. E.
2006. SSL: A theory of how people learn to select strategies.
Journal of Experimental Psychology: General 135(2):207–
236.
[Silver et al. 2016] Silver, D.; Huang, A.; Maddison, C. J.;
Guez, A.; Sifre, L.; Van Den Driessche, G.; Schrittwieser,
J.; Antonoglou, I.; Panneershelvam, V.; Lanctot, M.; Diele-
man, S.; Grewe, D.; Nham, J.; Kalchbrenner, N.; Sutskever,
I.; Lillicrap, T.; Leach, M.; Kavukcuoglu, K.; Graepel, T.;
and Hassabis, D. 2016. Mastering the game of Go with deep
neural networks and tree search. Nature 529(7587):484–
489.
[Silver et al. 2017] Silver, D.; Hubert, T.; Schrittwieser, J.;
Antonoglou, I.; Lai, M.; Guez, A.; Lanctot, M.; Sifre, L.;
Kumaran, D.; Graepel, T.; Lillicrap, T.; Simonyan, K.; and
Hassabis, D. 2017. Mastering Chess and Shogi by Self-Play
with a General Reinforcement Learning Algorithm. 1–19.
[Sutton and Barto 2018] Sutton, R. S., and Barto, A. 2018.
Reinforcement Learning: An Introduction. MIT Press, 2 edi-
tion.
[Weber et al. 2017] Weber, T.; Racani`ere, S.; Reichert, D. P.;
Buesing, L.; Guez, A.; Rezende, D. J.; Badia, A. P.; Vinyals,
O.; Heess, N.; Li, Y.; Pascanu, R.; Battaglia, P.; Hassabis, D.;
Silver, D.; and Wierstra, D. 2017. Imagination-Augmented
Agents for Deep Reinforcement Learning. (Nips).
[Zhang, Ballas, and Pineau 2018] Zhang, A.; Ballas, N.; and
Pineau, J. 2018. A Dissection of Overﬁtting and General-
ization in Continuous Reinforcement Learning.
[Zhang et al. 2018] Zhang, C.; Vinyals, O.; Munos, R.; and
Bengio, S. 2018. A Study on Overﬁtting in Deep Reinforce-
ment Learning. 1–25.

Keep it stupid simple.

Erik Peterson1, Necati Alp Myesser2, Timothy Verstynen1,3 and Kyle Dunovan1,3
1Department of Psychology 2Department of Mathematics 3Center for the Neural Basis of Cognition
Carnegie Mellon University,
5000 Forbes Ave, Pittsburgh, PA 15213

8
1
0
2
 
p
e
S
 
0
1
 
 
]
I

A
.
s
c
[
 
 
1
v
6
0
4
3
0
.
9
0
8
1
:
v
i
X
r
a

Abstract

Deep reinforcement learning can match and exceed human
performance, but if even minor changes are introduced to the
environment artiﬁcial networks often can’t adapt. Humans
meanwhile are quite adaptable. We hypothesize that this is
partly because of how humans use heuristics, and partly be-
cause humans can imagine new and more challenging envi-
ronments to learn from. We’ve developed a model of hier-
archical reinforcement learning that combines both these ele-
ments into a stumbler-strategist network. We test transfer per-
formance of this network using Wythoff’s game, a gridworld
environment with a known optimal strategy. We show that
combining imagined play with a heuristic–labeling each po-
sition as “good” or “bad”–both accelerates learning and pro-
motes transfer to novel games, while also improving model
interpretability.

Deep reinforcement learning can rival human performance
on games of strategy like chess (Silver et al. 2017) and Go
(Silver et al. 2016), as well as less structured games like clas-
sic Atari video games (Minh 2015). Unlike humans, arti-
ﬁcial networks are often unable to transfer performance to
new situations, even in environments with relatively triv-
ial changes (Zhang et al. 2018; Zhang, Ballas, and Pineau
2018). We hypothesize that part of the human capacity for
transfer may come from our ability to imagine new environ-
ments and learn from them, a kind of counterfactual reason-
ing (Pearl 2017). Human success may also stem from our
ability to develop and exploit simple heuristics (Hart 2005;
Gigerenzer 2014). To try and improve transfer learning in ar-
tiﬁcial networks, we combined these two elements in a novel
variation of hierarchical reinforcement learning, which we
call the stumbler-strategist architecture. The intuition be-
hind this is simple: it is easier to imagine new environments
using simple stupid ideas over to complex ones.

Stumbler-strategist networks
We introduce two-layer stumbler-strategist networks (Fig-
ure 1), a variation on the DYNA-Q models (Sutton and
Barto 2018). Stumblers are model-free reinforcement learn-
ing agents that observe and act in the environment. Like all
model-free systems they can only discover the value of spe-
ciﬁc input-output associations, without any appreciation for

Copyright c(cid:13) 2019

the organizing features of the game that govern these asso-
ciations (Sutton and Barto 2018).

Strategist layers are model-based agents that can only ob-
serve what the stumbler layers learn, sampling and aggre-
gating and classifying information about the stumblers’ ac-
tions. Strategists don’t act directly but can, when conﬁdence
is high, bias the stumbler’s actions. Similar to hypothesized
role of rostral areas of the human prefrontal cortex (Frank
and Badre 2011; Badre and Frank 2012), strategists hold ab-
stract task representations, neither directly observing or act-
ing on the world, but reasoning by heuristics and rules. Here
we explore the simple heuristic: “every state is either bad or
good”.

Our key innovation is in how strategist-layers use infor-
mation: they try and predict the heuristic class of game
states in new and more challenging environments–a kind of
imagination (Weber et al. 2017). That is, to learn to trans-
fer knowledge, they imagine and play new games based on
their observations of the stumbler layer’s activity. Learning
in the strategist layer can succeed in these new, harder, en-
vironments because it is asked only to predict the heuristic
label rather then the complex action-value space present in
the stumbler.

Wythoff’s game
Despite their simplicity, “gridworld” environments can pro-
vide a challenging but controllable test-bed for transfer
learning. In previous work, two state-of-the-art deep rein-
forcement learning networks could not adapt to subtle dif-
ferences in the training and testing grid-world environments
(Leike et al. 2017) suggesting they are reasonable–perhaps
even ideal given their simplicity–test bed to study transfer.

To isolate strategy learning and transfer, our agents play
an impartial board game called Wythoff’s game. The game
is played on a two dimensional grid in which players alter-
nate turns to move an object that is initially placed randomly
on the board. To win, players take turns moving the single
game piece to the top-left corner. Every turn, the game piece
can be moved horizontally, vertically, or diagonally. Moves
must be made “upward” toward the ﬁnal winning position,
as shown in Figure 2a. Each player must move when it is
their turn. The game ends when one player must take the
ﬁnal position (i.e., top-left position). The player in this posi-
tion wins the game.

In a previous work (Raghu et al. 2017) studied Erdos-
Selfridge-Spencer games, which also have an optimal strat-
egy. The goals of our two papers are different. Like Raghu
et al, we focus on studying transfer compared to an optimal
player, move-by-move. Unlike Raghu et al, we try and trans-
fer learning to new environments, rather than focusing only
on transferring between changes in opponent strategy.

A good and bad heuristic
The heuristic used by the strategist is “positions are either
good or bad”. To classify every position on the board, ﬁrst
Q(s, a) values from the stumbler are converted to expected
values, where V (s) = maxQ(s, a). V (s) for every s is clas-
siﬁed as bad if V (s) < Vbad and good if V (s) > Vgood,
where the thresholds Vbad and Vgood are hyperparameters of
the model.

Methods
We’ve designed a new two-level network architecture that
combines traditional Q-learning, which we call stumbling,
with a new strategist layer. The strategist layer has two
key elements: an experimenter provided heuristic, and a in-
put representation that allows this deep network to imag-
ine, or extrapolate, the value of unseen board positions.
These two elements work in combination, and allow our net-
work to directly transfer it’s knowledge to new–never before
experienced–game boards, and rapidly learn new changes to
the rules of the game. The heuristic–which projects Q(s, a)
values to {good, bad} classes–is described in detail in the
main text. In this section we describe the learning algorithms
in the stumbler and strategist layers, as well as the the algo-
rithm we use to control how much inﬂuence the strategist
layer has over the stumbler. We conclude this section with a
description of our approach to hyper-parameter tuning.

Code for all experiments is available at https://

github.com/CoAxLab/azad

Stumbler learning
Stumbler learning is governed by Q-Learning, extended to
allow for “top-down” strategist feedback and for joint-action
observations, where learning updates happen over player-
opponent joint-action pairs. Here, the stumbler was imple-
mented as a look-up table.

Strategist layer learning
The strategist layer is itself a two-layer deep neural network,
trained on input coordinates (i, j) and output values derived
using the good-bad heuristic described in the main text.

Error backpropagation relied on stochastic gradient de-
scent, with a learning rate of αr. Training set batch sizes
were 1/2 the size of the dataset and were sampled with re-
placement.

Strategist layer inﬂuence
To judge how much inﬂuence the strategist should have
over the the stumbler, the two layers play a single game
of Wythoff’s using a purely greedy strategy. They play on
a game board larger than the one the stumbler layer was

Figure 1: Diagram of the two-layer stumbler-strategist ar-
chitecture. Stumblers are our name for model-free rein-
forcement learning agents, driven here by a version of the
Q-learning rule and a (cid:15)-greedy action selection policy. As
is typical for such agents the stumblers interact directly
with the game environment, learning the state-action values
(Q(s, a)). The strategist layer learns only with data extracted
from the stumbler layer. To learn, the strategist ﬁrst projects
Q(s, a) values sampled from the stumbler into one of two
classes {good, bad} and tries to predict the appearance of
these classes in a new, larger, game board. If these predic-
tions are successful, the inﬂuence of the strategist layer is
incrementally increased (Alg. 3).

Impartial games offer a unique advantage for testing
heuristic strategies. The difference between an impartial
game, like Wythoff’s, and a strategy game like Go, is that
an impartial game has a single ground truth solution. Ev-
ery position in an impartial game is either hot, meaning that
there exists a winning strategy for the player about to make
a move, or cold, meaning that under optimal play, the player
about to make a move will always lose. The optimal strategy
is always to move from a hot position to cold one. The dis-
tribution of hot and cold positions across the state space in
an impartial game usually comes with inherent mathemati-
cal structure: n = mφ,m = nφ where φ is the golden ratio
and m and n are indices on the game board. This structure
is visualized in Figure 2b.

Figure 2: Wythoff’s game play. a. Valid moves in Wythoff’s
are same a Queen’s moves in chess. A piece (depicted here
as a black circle) can be move laterally, vertically, or diago-
nally. The goal of the game it to move the piece to the origin
of board, shown here as a blue square. b, Optimal play. Op-
timal moves are to “cold” positions (blue). Hot positions are
in red. No cold position is accessible from any other cold
position, however the winning position is cold. This means
the optimal way to play is to always move to a cold position
forcing your opponent to move from a cold position, from
which they cannot win.

Algorithm 1 Learning algorithm used by stumbler

procedure STUMBLE(Q)
n ← Learning episode
(cid:15)0 ← Max exploration-exploitation
γ ← Value bias
αs ← Stumbler learning rate
I ← Strategist inﬂuence
B ← Strategy bias, given Strategist
G ← Initialize Wythoff’s game
s ← A position in G
while G continues do

logn+e

(cid:15) ← (cid:15)0
action ← (cid:15)-greedy(Q(s, action) + I ∗ B(s), (cid:15))
do action on G, update s
if G ends then

(cid:46) Anneal

reward ← 1

else

(cid:46) Winning move
(cid:46) Opponent plays

do action on G, update s
if G ends then

else

reward ← 0

reward ← −1

(cid:46) Opponent wins

Q(cid:48) ← max Q-value from s(cid:48) (cid:46) Joint-action update
Q(s, action) ← α(reward+γQ(cid:48)−Q(s, action))
I ← Inﬂuence(Stumbler, Strategist)

return Q

Algorithm 2 Learning algorithm used by the Strategist

procedure STRATEGIST(Stumbler)
αr ← Strategist learning rate
nr ← Number of training episodes
n ← Episode counter
B ← Strategist bias
Q ← Complete Q-table from Stumbler
dataset ← GoodBadHeuristic(Q)
(cid:46) See main text
model ← initialized neural network with default set-

while n < nr do

trainset ← sample(dataset)
backpropagate model with trainset through cost

tings

func

B ← model for all s
return B

trained on. The intuition behind this approach is that if the
strategist layer has useful transferable knowledge it should
soundly defeat the stumbler. Every time the strategist layer
wins, it’s inﬂuence I over the stumbler increases by αI . Ev-
ery time the strategist looses its inﬂuence declines by the
same amount.

Algorithm 3 Strategist inﬂuence algorithm

procedure INFLUENCE(Stumbler, Strategist)

αI ← Inﬂuence learning rate
I ← Inﬂuence
win ← Strategist score
G ← Initialize Wythoff’s game
s ← A position in G
while G continues do

action ← greedy(Stumbler(s))
do action on G, update s
if G ends then
win ← 0

action ← greedy(Strategist(s))
do action on G, update s
if G ends then
win ← 1
if win > 0 then
I ← I + αI

else

I ← I − αI
I ← clip(I, −1, 1)
return I

(cid:46) I is limited

Network training
All networks were trained on a ﬁxed number of 75,000
episodes, which preliminary runs showed were well past the
learning plateau. Stumbler-only training used this iteration
count directly. The stumbler-strategist network required a
nesting the training procedure, which worked as follows. To
begin training ﬁrst the stumbler would play ns games and
learn from the each game independently (by rollout) (Alg 1.).
Then the strategist takes in the stumbler extracts its value es-
timates, applies the heuristic (see A good and bad heuristic
above) generating a dataset, and would train on nr samples
of this dataset (Alg 2.). Finally the inﬂuence of the strate-
gist was estimated (Alg 3.). This overall pattern then repeats
for n iterations, but the total number of training iterations
n ∗ nr ∗ nr was constrained to be 75,000.

Note: in all training, we independently model the player
and their opponent as stumblers. Only the player can have a
strategist layer. The opponent is always stumbling around.

Parameter tuning
Overall, network performance was robust to a wide range of
hyperparameter settings. Parameter tuning was done via grid
search, carried out piece-wise. First, the stumbler layer was
tuned. Second, the strategist layer’s learning and heuristic
parameters were tuned. Next Vbad and Vgood were optimized
followed by the inﬂuence rate (αI ). Finally, the depth and
unit number of the strategist layer was optimized. Each stage

Table 1: Network hyperparameters

Meaning
Symbol Value
αs
Stumbler learning rate
αr
Strategist learning rate
αI
Inﬂuence learning rate
(cid:15)
Exploration-exploitation
γ
Value bias
Stumbler iterations (strategist only) ns
nr
Strategy iterations (strategist only)
Vgood
Good threshold
Vbad
Bad threshold
I
Inﬂuence (initial)
B
Strategist bias (initial)

0.4
0.025
0.2
0.4
0.5
500
500
0.5
-0.5
0.0
0.0

relied, in part, on the previous tuning stages. The stumbler
was implemented as simple one-hot look-up table, and so
had no internal parameters.

The optimal hyperparameter conﬁguration we arrives at is

found in Table 1.

Stumbler tuning In tuning the stumbler we explored (cid:15)
from (0.1 − 1), αs from (0.01, 1), and γ from (0.1 − 1).
In taking 10 samples from each range and searching the full
permutation space, we sampled a 1000 hyperparameter com-
binations in tuning the stumbler,

Stumbler-strategist tuning The stumbler-strategist tun-
ing stage one explored learning rate αr and the training it-
eration numbers ns and nr, over the following respective
ranges, (0.001-0.1), (100,1000), and (100,1000) forming a
10x3x3 sampling space (Figure 3b). Stage two searched
Vbad and Vgood from (−1, 0) and (0, 1) forming a 10x10
sampling space. Stage three tuned the inﬂuence rate αI
(0.01 − 1.0) over 20 samples. The ﬁnal stage explored the
depth and width of the two-layer strategist from nhidden1
from (15, 500) and nhidden2 from (0, 50), in 10x10 sampling
space (not shown). As is clear in Figure 3, there is substan-
tial degree of slackness or robustness in parameter choices.
As such we hand picked middle values from each “good” re-
gion (Table 1). For more information in the meaning of these
parameters see Network training.

Note: annealing of (cid:15) (Alg 1.) is required for convergence

to optimal play.

Results
During learning the strategist layer never directly observes
or acts on the game, instead it tries to extrapolate, or imag-
ine, the {good, bad} values on a larger game board that the
stumbler layer never encounters. This extrapolation is possi-
ble because the complex Q(s, a) value structure is reduced
to a binary {good, bad} representation, which is turn based
on the heuristic that each position can be exclusively either
good or bad. Our hope was that our heuristic would naturally
map onto the hot/cold board structure of Wythoff’s game.
(See the Wythoff’s section above for more).

Figure 4 shows how the two layers of the network value
board positions at different stages of learning. Models that
are developed in the earlier stages of training remain mostly

Figure 3: Hyperparameter tuning. a. Stumbler learning rate
b. Epsilon c. Gamma d. Strategist learning rate e. Stum-
bler iterations f. Strategy iterations g. Good threshold h. Bad
threshold i. Inﬂuence learning rate The red “x” in all ﬁgures
is the optimal or reference parameter value used in all mod-
els, unless noted otherwise. The search strategy for these
values is described in Parameter tuning. Reference values
are in Table 1.

irrelevant to transfer; however, models that meaningfully
generalize, although with low accuracy, begin to emerge
soon after initial training. Such models are crucial for the
learning process because they inﬂuence the way the stum-
bler chooses to explore different action spaces. Without such
guidance, the stumbler explores actions without any overall
purpose or insight. With the guidance from the strategist,
the stumbler explores actions that would either contradict or
conﬁrm the strategist’s imagined hypothesis about the nature
of the learning environment it cannot directly learn from.

Stumbler-strategist performance

We compared the performance of the stumbler to the
stumbler-strategist network. Figure 5a shows the fraction
of moves that were optimal for both networks during learn-
ing. Initial learning in the stumbler-strategist is more than

Figure 4: Learning in three stages of training on Wythoff’s
game. The early models (exploration) will be largely unsuc-
cessful, while certain inaccurate transfers (exploitation) will
supply reasonable strategies to the stumbler, allowing the
provision of useful datasets into the network that translate
into accurate and general models (imagination). In this ex-
ample the stumbler trained on a 14 by 14 board for 2000
game-plays, across each strategist time-step. The strategist
learned to play on a 50 by 50 game board.

twice as fast as the stumbler alone. However both networks
plateau at the same level of ﬁnal performance, indicated by
the overlapping curves over the last few thousand games in
Figure 5a.

To see how well the learned strategist in Figure 5 did
in comparison to the best possible strategist, we compared
learning between the learned strategist and a perfect oracle
Figure 5b). As we noted above, there is a single optimal
strategy for playing Wythoff’s, which means we can hard
code perfect play into the strategist layer. The learned strate-
gist comes close to matching the perfect alternative, sug-
gesting near-optimal accuracy in our learned network (Fig-
ure 5b).

Parameter sensitivity and heuristic design
To ensure the observed good performance was not speciﬁc
to a particular set of parameters, we measure ﬁnal optimal
play performance over the last 100 episodes as parameters
were independently perturbed. We compare these perturba-
tions to a baseline run using standard parameters (Table 1.),
but run with 20 different random seeds while parameter per-
turbations used a ﬁxed seed. Intuitively, if the performance
variability due to parameter changes is similar to random be-
havioural changes, we can consider that parameter choice to
be robust.

We sampled a range of values ranging from 1/2 to 2 times
the standard parameter values (Table 1). The variability in
these perturbations were highly similar to that seen in the

Figure 5: a. Learning optimal moves in Wythoff’s game with
(black) and without (gold) strategist layer. b. Learning when
a stumbler layer is biased by a perfect strategist’s (purple),
compared to the learned strategist from a. (black). Error
bars denote 2 * standard error, and were calculated from 20
unique random seeds.

baseline (random) condition (Figure 6a.) suggesting our pa-
rameter selections were sufﬁciently robust.

We also consider two alternate heuristics–good only or
bad only. Both these approaches prevented the strategist
from develop any signiﬁcant inﬂuence over the stumbler,
learning to no improvement in training performance (Fig-
ure 6b.) compared to the stumbler alone.

Game board transfer

The strategist layer drives near optimal performance on
never before seen game boards with no additional training.
Unlike previous ﬁgures, here we examine performance of
the stumbler and strategist layers independently as they are
completely uncoupled. This is possible because for these ex-
periments learning is turned off, and pre-trained models are
used; the same models whose learning performance is shown
in Figure 5-6.

We increased the board size from size the stumbler was
originally trained on (15x15) up to 500x500, in 50 unit in-
crements. As is typical, as soon as the board size increases
beyond it’s direct experience, optimal play for the stumbler
plummets (Figure 7a.), quickly matching a the performance
of random choice agent (Figure 7b.). However on the 15x15
board the stumbler model, with full access the Q(s, a) out-
performs the strategist, which can be seen by comparing the
ﬁrst points in both curves in Figure 7a. and in Figure 7c.
The strategist on the other hand maintains a high level of
performance over the entire range of novel game boards.

Figure 6: a. Hyper-parameter sensitivity. Baseline is 20 stan-
dard runs, randomly initialized, using optimal hyperparam-
eters (whose selection is describe in the Methods section).
These optimal values are found in Table 1. Epsilon ((cid:15)) is
the exploration parameter in the standard (cid:15)-greedy algorithm
(sampled here from 0.01 − 0.8). Inﬂuence learning rate (αI )
controls quickly the strategists bias effects the stumblers ac-
tions (0.01 − 0.4). Stumbler learning rate is the stumblers
learning rate (αs), which in typical Q-learning is often de-
noted by α (0.2 − 0.6). The strategist learning rate (αr)
controls in the the deep strategist layer (0.01 − 0.05; values
larger than 0.08 lead to catastrophic failure). The good and
bad threshold are the value thresholds, Vgood and Vbad (sam-
pled from 0.0 − 0.5 and −0.5 − 0 respectively). b. Effect
of alternate heuristic choices. Our standard heuristic maps
Q(s, a) values to good/bad classes. Here we explored an
alternate approach where the strategist layer predicts only
good or only bad, rather than both. Error bars denote 2 *
standard error.

Rule transfer

Next we consider transfer between different grid-world
games. To do this we keep the game boards the same as out
initial experiments (Figures 5-6 but alter the rules of play.
Our agents play two new games: Nim and Euclid’s. In Eu-
clid’s game the movement directions are the same Wythoff’s
game (up, left or diagonal) but in these directions during Eu-
clid play only select positions are available. Euclid’s game
is a playable instantiation of Euclid’s algorithm. So valid
positions are those that could be obtained by taking differ-
ences between row m and column n when m and n are also
multiples of greatest common denominator of m and n, (i.e,
(m, n)if (GDC(m, n).

In the game of Nim diagonal moves are forbidden, leav-
ing only moves to the up and left. Like Wythoff’s though,
and unlike Euclid, as position in a valid direction is allowed.
The simple removal of diagonal play profoundly alters opti-
mal play. The optimal way to play a 2d game of Nim is to
move such that row and column indices are equal, which
amounts to moving to the diagonal positions (via up and
left). This is profoundly different than the optimal play in
Wythoff’s, which centers around position that are multiples
of the golden ratio (See the Wythoff’s game section above).

Figure 7: Transfer performance on new larger game boards,
with frozen layers. a. Optimal play observed when the stum-
bler (goldenrod) and strategist (black) layers complete in
several (1000) games of Wythoff’s. The x-axis denotes in-
creases in board size. Prior to this experiment, neither layer
has experienced a board larger than 15x15 (for the stum-
bler) or 50x50 (for the strategist. b. The strategist layer ver-
sus a random agent (blue) who’s choices were sampled uni-
formly from the available actions at each position, and could
not learn c. Fraction of the games won by the strategist ver-
sus the stumbler (goldenrod) or the random player (blue). At
each board size 1000 games were played, each begun with a
unique random seed.

With changes to the rules of the game change, the stum-
bler layers for all models needed to be reset. We therefore
studied how a transferring a Wythoff-trained strategy layer,
to a re-initialized stumbler layer impacted learning in ei-
ther Euclid’s’ game or Nim (Figure 8). To measure only the
beneﬁts of transfer we quantiﬁed the ratio of player/ oppo-
nent wins with and without a pre-trained layer. Player mod-
els without the pre-trained layer also featured a function-
ing strategist, though of course it began with a random ini-
tial conﬁguration. As in all previous experiments the oppo-
nent agent doesn’t have a strategist layer; It is left stumbling
around.

In Euclid’s–whose optimal play is a restricted subset of
Wythoff’s making it more difﬁcult to learn–strategy transfer
accelerates learning (Figure 8a.). Meanwhile in Nim, strat-
egy transfer does not improve performance (as would be ex-
pected given the different optimal strategies) but it also does
not signiﬁcantly hinder learning either. The inﬂuence algo-

rithm we employ (Alg. 3) quickly limits bad strategies, leav-
ing the network able to re-train itself.

Figure 8: Rule transfer: learning with a pre-trained strate-
gist layer. a. Player wins in Euclid’s game, with and without
strategy transfer. b. Player wins in Nim. In both models only
the player could beneﬁt from a strategist layer. As with all
previous simulations, the opponent here was limited to tra-
ditional Q-learning.

Discussion
Our key innovation is the introduction of a strategist layer to
more traditional RL networks, that imagines play in new and
more challenging environments. The strategist layer how-
ever only succeeds in these new, harder, environments be-
cause it is learns to predict a simple, but useful, heuristic:
“every state is good or bad”.

Heuristics map complex contingencies to simple rules
(Parpart 2017). Heuristics are widely used in human cogni-
tion, having been tuned by evolution and experience to sup-
port memory, and transfer knowledge (Gigerenzer 2014). A
heuristic is easier to map between environmental states, as
it is not dependent on a speciﬁc set of complex actions. In-
tuitively, heuristics also simplify imagining never before ex-
perienced outcomes. Though not put to use here, heuristics
also ease the transfer of knowledge between agents. For ex-
ample, it’s intuitively easier to transfer knowledge between
a student student and teacher, or to engage in cooperative
inference, when using simple (appropriate) heuristics rather
complex action-value tensors.

We studied our stumbler-strategist in a toy “gridworld”
environment, with known optimal play (i.e. we studied
Wythoff’s game). While this allowed us to quantify the ef-
ﬁciency of strategy learning, it is a highly simpliﬁed envi-
ronment by design. Moving from simple games such as this
to open-ended strategy games like Go and to complex vi-
sual environments like classic Atari games will require at
least two further innovations. First, gridworld games share

common coordinates. It is therefore simple to move from
smaller boards to larger and more challenging boards by just
mapping between common coordinates. Using a stumbler-
strategist network in visually complex environments, like
classic Atari games, requires solving this projection prob-
lem, which is nontrivial. There is room for optimism though,
as the response in higher-level layers in DQN networks is re-
lated to the perceptual similarity of the input images (Minh
2015), suggesting strategists could observe not only values,
but also critical perceptual relationships by only studying
stumblers’ responses to the world.

Second, we studied a single strategic heuristic (good/bad).
It is not reasonable to expect this heuristic to apply in all
but a few select instances. However there exists a substantial
literature in game theory representing a large pool of possi-
ble heuristics and strategies (Gigerenzer 2014; Parpart 2017;
Hart 2005; Rieskamp and Otto 2006). While these will cer-
tainly not describe optimal performance in all situations,
there are perhaps consistent moments to be found in com-
plex games where simple strategies, and matched counter-
factual simulations, will allow for information to be efﬁ-
ciently transferred between environments.

Acknowledgments.

The research was sponsored by the Army Research Labora-
tory and accomplished under Cooperative Agreement Num-
ber W911NF-10-2-0022. The views and conclusions con-
tained in this document are those of the authors and should
not be interpreted as representing the ofﬁcial policies, either
expressed or implied, of the Army Research Laboratory or
the U.S. government.

References

reinforcement

[Badre and Frank 2012] Badre, D., and Frank, M. J. 2012.
Mechanisms of hierarchical
learning in
cortico-striatal circuits 2: Evidence from fMRI. Cerebral
Cortex 22(3):527–536.
[Frank and Badre 2011] Frank, M. J., and Badre, D. 2011.
Mechanisms of hierarchical reinforcement learning in corti-
costriatal circuits 1: computational analysis. Cerebral cortex
22(3):509–526.
[Gigerenzer 2014] Gigerenzer, G. 2014. Work Why Heuris-
tics. Perspectives on Psychological Science 3(1):20–29.
[Hart 2005] Hart, S. 2005. Adaptive heuristics. Economet-
rica 73(5):1401–1430.
[Leike et al. 2017] Leike, J.; Martic, M.; Krakovna, V.; Or-
tega, P. A.; Everitt, T.; Lefrancq, A.; Orseau, L.; and Legg,
S. 2017. AI Safety Gridworlds.
[Minh 2015] Minh, V. 2015. Human-level control through
deep reinforcement learning. Nature 518:529–533.
[Parpart 2017] Parpart, P. 2017. Heuristics as Bayesian In-
ference.
[Pearl 2017] Pearl, J. 2017. Theoretical Impediments to Ma-
chine Learning With Seven Sparks from the Causal Revolu-
tion Scientiﬁc Background. (September):1–8.

[Raghu et al. 2017] Raghu, M.; Irpan, A.; Andreas, J.; Klein-
berg, R.; Le, Q. V.; and Kleinberg, J. 2017. Can Deep Rein-
forcement Learning Solve Erdos-Selfridge-Spencer Games?
[Rieskamp and Otto 2006] Rieskamp, J., and Otto, P. E.
2006. SSL: A theory of how people learn to select strategies.
Journal of Experimental Psychology: General 135(2):207–
236.
[Silver et al. 2016] Silver, D.; Huang, A.; Maddison, C. J.;
Guez, A.; Sifre, L.; Van Den Driessche, G.; Schrittwieser,
J.; Antonoglou, I.; Panneershelvam, V.; Lanctot, M.; Diele-
man, S.; Grewe, D.; Nham, J.; Kalchbrenner, N.; Sutskever,
I.; Lillicrap, T.; Leach, M.; Kavukcuoglu, K.; Graepel, T.;
and Hassabis, D. 2016. Mastering the game of Go with deep
neural networks and tree search. Nature 529(7587):484–
489.
[Silver et al. 2017] Silver, D.; Hubert, T.; Schrittwieser, J.;
Antonoglou, I.; Lai, M.; Guez, A.; Lanctot, M.; Sifre, L.;
Kumaran, D.; Graepel, T.; Lillicrap, T.; Simonyan, K.; and
Hassabis, D. 2017. Mastering Chess and Shogi by Self-Play
with a General Reinforcement Learning Algorithm. 1–19.
[Sutton and Barto 2018] Sutton, R. S., and Barto, A. 2018.
Reinforcement Learning: An Introduction. MIT Press, 2 edi-
tion.
[Weber et al. 2017] Weber, T.; Racani`ere, S.; Reichert, D. P.;
Buesing, L.; Guez, A.; Rezende, D. J.; Badia, A. P.; Vinyals,
O.; Heess, N.; Li, Y.; Pascanu, R.; Battaglia, P.; Hassabis, D.;
Silver, D.; and Wierstra, D. 2017. Imagination-Augmented
Agents for Deep Reinforcement Learning. (Nips).
[Zhang, Ballas, and Pineau 2018] Zhang, A.; Ballas, N.; and
Pineau, J. 2018. A Dissection of Overﬁtting and General-
ization in Continuous Reinforcement Learning.
[Zhang et al. 2018] Zhang, C.; Vinyals, O.; Munos, R.; and
Bengio, S. 2018. A Study on Overﬁtting in Deep Reinforce-
ment Learning. 1–25.

