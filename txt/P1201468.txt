7
1
0
2
 
p
e
S
 
2
1
 
 
]
L
C
.
s
c
[
 
 
3
v
4
1
3
1
0
.
4
0
7
1
:
v
i
X
r
a

Character-based Joint Segmentation and POS Tagging for Chinese
using Bidirectional RNN-CRF

Yan Shao and Christian Hardmeier and J¨org Tiedemann∗ and Joakim Nivre
Department of Linguistics and Philology, Uppsala University
∗Department of Modern Languages, University of Helsinki
{yan.shao, christian.hardmeier, joakim.nivre}@lingfil.uu.se
jorg.tiedemann@helsinki.fi

Abstract

We present a character-based model for
joint segmentation and POS tagging for
Chinese. The bidirectional RNN-CRF ar-
chitecture for general sequence tagging
is adapted and applied with novel vec-
tor representations of Chinese characters
that capture rich contextual information
and sub-character level features.
The
proposed model is extensively evaluated
and compared with a state-of-the-art tag-
ger respectively on CTB5, CTB9 and UD
Chinese. The experimental results indi-
cate that our model is accurate and robust
across datasets in different sizes, genres
and annotation schemes. We obtain state-
of-the-art performance on CTB5, achiev-
ing 94.38 F1-score for joint segmentation
and POS tagging.

1 Introduction

Word segmentation and part-of-speech (POS) tag-
ging are core steps for higher-level natural lan-
guage processing (NLP) tasks. Given the raw text,
segmentation is applied at the very ﬁrst step and
POS tagging is performed on top afterwards. As
by convention the words in Chinese are not de-
limited by spaces, segmentation is non-trivial, but
its accuracy has a signiﬁcant impact on POS tag-
ging. Moreover, POS tags provide useful informa-
tion for word segmentation. Thus, modelling word
segmentation and POS tagging jointly can out-
perform the pipeline models (Ng and Low, 2004;
Zhang and Clark, 2008).

POS tagging is a typical sequence tagging prob-
lem over segmented words, while segmentation
also can be modelled as a character-level tagging
problem via predicting the labels that identify the
word boundaries. Ng and Low (2004) propose a

joint model which predicts the combinatory la-
bels of segmentation boundaries and POS tags at
the character level. Joint segmentation and POS
tagging becomes a standard character-based se-
quence tagging problem and therefore the general
machine learning algorithms for structured predic-
tion can be applied.

tagging tasks

The bidirectional

recurrent neural network
(RNN) using conditional random ﬁelds (CRF)
(Lafferty et al., 2001) as the output
interface
for sentence-level optimisation (BiRNN-CRF)
achieves state-of-the-art accuracies on various
sequence
(Huang et al., 2015;
Ma and Hovy, 2016) and outperforms the tradi-
tional linear statistical models. RNNs with gated
recurrent cells, such as long-short term memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
gated recurrent units (GRU) (Cho et al., 2014)
are capable of capturing long dependencies and
retrieving rich global information. The sequential
CRF on top of the recurrent layers ensures that the
optimal sequence of tags over the entire sentence
is obtained.

In this paper, we model

joint segmentation
and POS tagging as a fully character-based se-
quence tagging problem via predicting the com-
binatory labels. The BiRNN-CRF architecture is
adapted and applied. The Chinese characters are
fed into the neural networks as vector representa-
tions. In addition to utilising the pre-trained char-
acter embeddings, we propose a concatenated n-
gram-representation of the characters. Further-
more, sub-character level
information, namely
radicals and orthographical features extracted by
convolutional neural networks (CNNs), are also
incorporated and tested. Three datasets of dif-
ferent sizes, genres and with different annotation
schemes are employed for evaluation. Our model
is thoroughly evaluated and compared with the
joint segmentation and POS tagging model in ZPar

(Zhang and Clark, 2010), which is a state-of-the-
art joint tagger using structured perceptron and
beam decoding. According to the experimental re-
sults, our proposed model outperforms ZPar on all
the datasets in terms of accuracy.

The main contributions of this work include:
1. We apply the BiRNN-CRF model for general
sequence tagging to joint segmentation and POS
tagging for Chinese and achieve state-of-the-art
accuracy. The experimental results show that our
tagger is robust and accurate across datasets of dif-
ferent sizes, genres and annotation schemes. 2. We
propose a novel approach for vector representa-
tions of characters that leads to substantial im-
provements over the baseline model. 3. Additional
improvements are obtained via exploring the fea-
sibility of utilising sub-character level informa-
tion. 4. We provide an open-source implementa-
tion of our method along with pre-trained charac-
ter embeddings.1

2 Model

2.1 Neural Network Architecture

Our baseline model is an adaptation of BiRNN-
CRF. As illustrated in Figure 1, the Chinese char-
acters are represented as vectors and fed into the
bidirectional recurrent layers. The character rep-
resentations will be described in detail in the fol-
lowing sections. For the recurrent layer, we em-
ploy GRU as the basic recurrent unit as it has
similar functionalities but fewer parameters com-
pared to LSTM (Chung et al., 2014). Dropout
(Srivastava et al., 2014) is applied to the outputs of
the bidirectional recurrent layers. The outputs are
concatenated and passed to the ﬁrst-order chain
CRF layer. The optimal sequence of the combi-
natory labels is predicted at the end. There is a
post processing step to retrieve both segmentation
and POS tags from the combinatory tags.

2.2 Tagging Scheme

Following the work of Kruengkrai et al. (2009a),
the employed tags indicating the word boundaries
are B, I, E, S representing a character at the be-
inside, end of a word or as a single-
ginning,
character word. The CRF layer models condi-
tional scores over all possible combinatory labels
given the input characters. Incorporating the tran-
sition scores between the successive labels, the op-

1 https://github.com/yanshao9798/tagger

(summer)

(too)

(hot)

夏

天

太

热

character
representations

forward
RNN

backward
RNN

CRF
Layer

GRU

GRU

GRU

GRU

GRU

GRU

GRU

GRU

B-NT

E-NT

S-AD

S-VA

Output

夏天 NT

太 AD 热 VA

Figure 1: The BiRNN-CRF model for joint Chi-
nese segmentation and POS tagging. The dashed
arrows indicate that dropout layers are applied to
the outputs of the recurrent layers.

timal sequence can be obtained efﬁciently via the
Viterbi algorithm both for training and decoding.
The time complexity for the Viterbi algorithm
is linear with respect to the sentence length n as
O(k2n), where k is constant and equals to the total
number of combinatory labels. The efﬁciency can
be improved if we reduce k. For some POS tags,
combining them with the full boundary tags is re-
dundant. For instance, only the functional word
的 can be tagged as DEG in Chinese Treebank
(Xue et al., 2005). Since it is a single-character
word, combinatory tags of B-DEG, I-DEG, and
E-DEG never occur in the experimental data and
should therefore be pruned to reduce the search
space. Similarly, if the maximum length of words
under a given POS tag is two in the training data,
we prune the corresponding label.

2.3 Character Representations

We propose three different approaches to effec-
tively represent Chinese characters as vectors for
the neural network.

2.3.1 Concatenated N-gram

The prevalent character-based neural models as-
sume that larger spans of text, such as words and

(summer)

(too)

(hot)

夏

天

太

热

太

. . .

n-gram
character
Representation
V3

Vi,i

Vi−1,i

Vi−1,i+1

Figure 2: Vector representations of the Chinese
characters as incrementally concatenated n-gram
vectors in a given context.

n-grams, can be represented by the sequence of
characters that they consist of. For example, the
vector representation Vm,n of a span cm,n is ob-
tained by passing the vector representations vi of
the characters ci to a functions f as:

Vm,n = f (vm, vm+1, ..., vn)

(1)

where f is usually an RNN (Ling et al., 2015) or a
CNN (dos Santos and Zadrozny, 2014).

In this paper, instead of completely relying on
the BiRNN to extract contextual features from
context-free character representations, we encode
rich local information in the character vectors via
employing the incrementally concatenated n-gram
representation as demonstrated in Figure 2.
In
the example, the vector representation of the pivot
character 太 in the given context is the concatena-
tion of the context-free vector representation Vi,i
of 太 itself along with Vi−1,i of the bigram 天太
as well as Vi−1,i+1 of the trigram 天太热.

Instead of constructing the vector representation
Vm,n of an n-gram cm,n from the character repre-
sentations as in Equation 1, Vm,n in different or-
ders, such as Vi,i, Vi−1,i, and Vi−1,i+1, are ran-
domly initialised separately. We use a single spe-
cial vector to represent all the unknown n-grams
per order. The n-grams in different orders are then
concatenated incrementally to form up the vector
representations of a Chinese character in the given
context, which is passed further to the recurrent
layers. As shown in Figure 2, the neighbouring
characters on both sides of the pivot character are
taken into account.

2.3.2 Radicals and Orthographical Features

Chinese characters are logograms. As opposed to
alphabetical languages, there is rich information

Conv.
layers

Max
pooling

fully-
connected
layer

Figure 3: Convolutional Neural Networks for or-
thographical feature extraction. Only the ﬁrst
convolutional layer and its following max-pooling
layer are presented.

encrypted in the graphical components. For in-
stance, the Chinese characters that share the same
part 钅 (gold) are all somewhat related to metals,
such as 银 (silver), 铁 (iron), 针 (needle) and so
on. The shared part 钅 is known as the radical,
which functions as a semantic indicator. Hence,
we investigate the effectiveness of using the infor-
mation below the character level for our task.

Radicals are ﬁrst represented as randomly ini-
tialised vectors and concatenated as parts of the
character representations. Radicals are tradition-
ally used as indices in Chinese dictionaries.
In
our approach, they are retrieved via the unicode
representation of Chinese characters as the char-
acters that share the same radical are grouped to-
gether. They are organised in consistent with the
categorisation in Kangxi Dictionary (康熙字典),
in which all the Chinese characters are grouped
under 214 different radicals. We only employ the
radicals of the common characters in the unicode
range of (U+4E00, U+9FFF). For the characters
out of the range and the non-Chinese characters,
we use a single special vector as their radical rep-
resentations.

Additionally,

instead of presuming that only
radicals encode sub-character level information,
we use convolutional neural networks (CNNs) to
extract graphical features from scratch by regard-
ing the Chinese characters as pictures and feed
their pixels as the input. As illustrated in Figure 3,
there are two convolutional layers, both followed
by a max-pooling layer. The output of the second
max-pooling layer is reshaped and passed to a reg-
ular fully-connected layer. Dropout is applied to
the output of the fully-connected layer. The out-
put is then concatenated as parts of the character
representation. The CNNs are trained jointly with
the main network.

2.3.3 Pre-trained Character Embeddings
The context-free vector representations of single
characters introduced in section 2.3.1 can be re-
placed by pre-trained character embeddings re-
trieved from large corpora. We employ GloVe
(Pennington et al., 2014) to train our character em-
beddings on Wikipedia2 and the freely available
Sogou News Corpora (SogouCS).3 We use ran-
domly initialised vectors as the representations of
the characters that are not in the embedding vo-
cabulary. Pre-trained embeddings for higher-order
n-grams are not employed in this paper.

2.4 Ensemble Decoding

At the ﬁnal decoding phase, we use ensemble de-
coding, a simple averaging technique, to mitigate
the deviations led by random weight initialisation
of the neural network. For the chain CRF decoder,
the ﬁnal sequence of the combinatory tags y is
obtained via the conditional scores S(yi|xi) and
the transition scores T (yi, yj) given the input se-
quence x.
Instead of computing the optimal se-
quence with respect to the scores returned by a
single model, both the conditional scores and tran-
sition scores are averaged over four models with
identical parameter settings that are trained inde-
pendently:

y∗ = argmax
y∈L(x)

p(y|x; ¯{S}, ¯{T })

(2)

Ensemble decoding is only applied to the best
performing model according to the feature experi-
ments at the ﬁnal testing phase in this paper.

3 Implementation

Our neural networks are implemented using the
TensorFlow 1.2.0 library (Abadi et al., 2016). We
group the sentences with similar lengths into the
same buckets and the sentences in the same bucket
are padded to the same length accordingly. We
construct sub-computational graphs respectively
for each bucket. The training and tagging speed of
our neural network on GPU devices can be dras-
tically improved thanks to the bucket model. The
training time is proportional to both the size of the
training set and the number of POS tags.

Table 1 shows the adopted hyper-parameters.
We use one set of parameters for all the experi-
ments on different datasets. The weights of the

2https://dumps.wikimedia.org/
3http://www.sogou.com/labs/resource/cs.php

Char. embedding size
n-gram embedding size
Radical embedding size
Character font
Character size
GRU state size
Conv. ﬁlter size
Conv. ﬁlter number
Max pooling size
Fully-connected size
Optimiser
Initial learning rate
Decay rate
Gradient Clipping
Dropout rate
Batch size

64
64
30
simsun (宋体)
30 × 30
200
5 × 5
32
2 × 2
100
Adagrad
0.1
0.05
5.0
0.5
10

Table 1: Hyper-parameters.

neural networks, including the randomly intialised
embeddings, are initialised using the scheme in-
troduced in Glorot and Bengio (2010). The net-
work is trained with the error back-propagation
algorithm. All the embeddings are ﬁne-tuned dur-
ing training by back-propagating gradients. Ada-
grad (Duchi et al., 2011) with mini-batches is em-
ployed for optimisation with the initial learning
rate η0 = 0.1, which is updated with a decay rate
ρ = 0.05 as ηt =
ρ(t−1)+1 , where t is the index of
the current epoch.

η0

The model is optimised with respect to the per-
formance on the development sets. F1-scores of
both segmentation (F 1Seg) and joint POS tagging
(F 1Seg&T ag) are employed as F 1Seg ∗ F 1Seg&T ag
to measure the performance of the model after
each epoch during training.
In our experiments,
the models are trained for 30 epochs. To ensure
that the weights are well optimised, we only adopt
the best epoch after the model is trained at least for
5 epochs.

4 Experiments

4.1 Datasets

We employ three different datasets for our ex-
periments, namely Chinese Treebank (Xue et al.,
2005) 5.0 (CTB5) and 9.0 (CTB9) along with the
Chinese section in Universal Dependencies (UD
Chinese) (Nivre et al., 2016) of version 1.4.

CTB5 is the most employed dataset for joint
segmentation and POS tagging in previous re-
It is composed of newswire data. We
search.
follow the conventional split of the dataset as
in Jiang et al. (2008); Kruengkrai et al. (2009a);

Zhang and Clark (2010). CTB9 consists of source
texts in various genres, CTB5 is a subset of it. We
split CTB9 by referring to the partition of CTB7
in Wang et al. (2011). We extend the training,
development and test sets from CTB5 by adding
80% of the new data in CTB9 to training and
10% each to development and test. The double-
checked ﬁles are all placed in the test set. The
detailed splitting information can be found in Ta-
ble 10 in Appendix. UD Chinese has both univer-
sal and language-speciﬁc POS tags. They are not
predicted jointly in this paper. For the sake of con-
venience, we refer the universal tags as UD1 and
the language-speciﬁc ones as UD2 in the follow-
ing sessions. To make the model beneﬁt from the
pre-trained character embeddings, we convert the
texts in UD Chinese from traditional Chinese into
simpliﬁed Chinese.

Table 2 shows brief statistics of the employed
The out-of-
datasets in numbers of words.
vocabulary (OOV) words are counted regardless
of the POS tags. We can see that the size of
UD Chinese is much smaller and it has a notably
higher OOV rate than the two CTB datasets.

Train
Dev
Test
OOV rate (dev)
OOV rate (test)

CTB5
493,935
6,821
8,008
8.11
3.47

CTB9
1,696,322
136,468
242,317
2.93
3.13

UD Chinese
98,608
12,663
12,012
12.13
12.46

Table 2: Statistics of the employed datasets in
numbers of words.

4.2 Experimental Results

Both segmentation (Seg) and joint segmentation
and POS tagging (Seg&Tag) are evaluated in our
experiments.4 We employ word-level recall (R),
precision (P) and F1-score (F) as the evaluation
metrics. A series of feature experiments are car-
ried out on the development sets to evaluate the ef-
fectiveness of the proposed approaches for vector
representations of the characters. Finally, the best
performing model according to the feature experi-
ment is applied to the test sets in the forms of sin-
gle as well as ensemble and compared with ZPar.

4The evaluation script is downloaded from:

http://people.sutd.edu.sg/ yue zhang/doc/doc/joint ﬁles
/evaluate.py

4.2.1 Feature Experiments

Table 3 shows the evaluation results of using
concatenated n-grams up to different orders as
the character representations. By introducing 2-
grams, we can obtain vast improvements over
solely using the conventional character embed-
dings, which indicates that not all the local infor-
mation can be effectively captured by the BiRNN
using context-free character representations. Util-
ising the concatenated n-grams ensures that the
same character has different but yet closely related
representations in different contexts, which is an
effective way to encode contextual features.

From the table, we see that notable improve-
ments can be achieved further via employing 3-
grams. 4-grams still help but only to CTB9 while
adding 5-grams achieves almost no improvement
on any of the datasets. The results imply that con-
catenating higher-order n-grams can be detrimen-
tal, especially on datasets in smaller sizes due to
the fact that higher-order n-grams are more sparse
in the training data and their vector representations
cannot be trained well enough. Besides, adopting
higher-order n-grams also substantially increases
the numbers of weights and therefore both train-
ing and decoding become less efﬁcient. Under the
circumstances, we consider that 3-gram model is
optimal for our task and it is employed in the fol-
lowing experiments for all the datasets.

The concatenated n-grams have a bigger size
compared to the basic character representation.
We conduct one additional experiment using a ba-
sic 1-gram character model with a larger character
vector size of 300. The evaluation scores are sim-
ilar to the basic character model with the size of
64, which shows that the improvements obtained
by the n-gram model are not matched by enlarg-
ing the size of the vector representation.

The evaluation scores of the sub-character level
features are reported in Table 4. The relevant fea-
tures are added on top of the 3-gram model. Em-
ploying radicals and graphical features achieves
similar improvements for segmentation while util-
ising radicals obtains better results for joint POS
tagging on CTB5. However, radicals are not a very
effective feature on CTB9, UD1 and UD2 whereas
a notable enhancement is observed when employ-
ing graphical features on UD1. Using CNNs to
extract graphical features is computationally much
more expensive than simply adopting radicals via
a lookup table, especially when GPU is not avail-

CTB5

CTB9

UD1

UD2

Seg
95.22
95.14
97.08
97.14
97.13
96.94

Seg&Tag
91.71
91.52
93.72
94.01
94.02
93.84

Seg
95.53
95.25
96.30
96.47
96.48
96.50

Seg&Tag
90.89
90.43
91.66
91.75
91.89
91.88

Seg
91.84
91.74
94.50
94.36
94.25
94.40

Seg&Tag
85.43
85.07
88.36
88.27
88.37
88.47

Seg
92.40
91.83
94.42
94.43
94.16
94.25

Seg&Tag
85.63
84.93
88.14
88.32
88.24
88.03

size = 300
1-gram
2-gram
3-gram
4-gram
5-gram

Table 3: Evaluation of concatenated n-gram representations on the development sets in F1-scores

CTB5

CTB9

UD1

UD2

3-gram
+radicals
+graphical

Seg
97.14
97.26
97.25

Seg&Tag
94.01
94.42
94.08

Seg
96.47
96.42
96.50

Seg&Tag
91.75
91.74
91.78

Seg
94.36
94.37
94.50

Seg&Tag
88.27
88.21
88.59

Seg
94.43
94.39
94.23

Seg&Tag
88.32
88.36
87.95

Table 4: Evaluation of sub-character level features on the development sets in F1-scores.

CTB5

CTB9

UD1

UD2

Seg
95.14
95.82
97.26
97.42

Seg&Tag
91.52
92.45
94.42
94.58

Seg
95.25
95.44
96.42
96.56

Seg&Tag
90.43
90.57
91.74
91.96

Seg
91.74
92.77
94.37
95.12

Seg&Tag
85.07
86.48
88.21
89.69

Seg
91.83
93.01
94.39
95.02

Seg&Tag
84.93
86.48
88.36
89.20

1-gram
+GloVe
3-gram, radicals
+GloVe

Table 5: Evaluation of the pre-trained character embeddings on the development sets in F1-scores.

able.

From Table 5, we can learn that employing pre-
trained embeddings as initial vector representa-
tions for the characters achieves improvements in
general, whereas the improvements are compara-
tively smaller if the the concatenated n-gram rep-
resentations and the radicals are added. Addition-
ally, the improvements obtained on UD Chinese
are more signiﬁcant than on CTBs, which indi-
cates that the pre-trained character embeddings are
more beneﬁcial to the datasets in smaller sizes.

In general, the feature experiments indicate that
the proposed Chinese character representations are
all sensitive to dataset size. Using higher-order
n-grams requires more data for training. On the
other hand, the pre-trained embeddings are more
vital if the dataset
the
is small.
different representations are sensitive to tagging
schemes as the evaluation results on UD1 and
UD2 are quite diverse. Taking both robustness and
efﬁciency into consideration, we select 3-grams
along with radicals and pre-trained character em-
beddings as the best setting for ﬁnal evaluation.

In addition,

4.2.2 Final Results

Table 6 shows the ﬁnal scores on the test sets.
The complete evaluation results in precision, re-

call and F1-scores are contained in Table 11 and
Table 12 in Appendix. Our system is compared
with ZPar. We retrained a ZPar model on CTB5
that reproduces the evaluation scores reported in
Zhang and Clark (2010). We also modiﬁed the
source code so that it is applicable to CTB9 and
UD Chinese. In addition, we perform the mid-p
McNemar’s test (Fagerland et al., 2013) to exam-
ine the statistical signiﬁcances.

the single model

As shown in Table 6,

is
worse than the ensemble model but still outper-
forms ZPar on all the tested datasets. ZPar in-
corporates discrete local features at both character
and word levels and employs structured percep-
tron for global optimisation, whereas we encode
rich local information in the character represen-
tations and employ BiRNN to effectively extract
global features and capture long term dependen-
cies. The chain CRF layer is used for sentence-
level optimisation, which functions similarly to
structured perceptron. As opposed to the tag-
gers built with traditional machine learning algo-
rithms, our model avoids heavy feature engineer-
ing and beneﬁts from large plain texts via utilis-
It is also
ing pre-trained character embeddings.
very ﬂexible to add sub-character level features as
parts of the character representations. The model

ZPar
Single (3-gram, rad., GloVe)
Ensemble (4 models)
ZPar
Single
Ensemble

OOV recall

CTB5

CTB9

UD1

UD2

Seg
97.77
97.89
98.02*
76.98
78.78
77.34

Seg&Tag
93.82
94.07**
94.38**
68.34
69.78
70.50

Seg
96.28
96.47**
96.67**
75.83
74.16
75.52

Seg&Tag
91.62
91.89**
92.34**
63.71
62.58
64.14

Seg
93.75
94.85**
95.16**
78.69
81.36
82.16

Seg&Tag
88.11
89.41**
89.75*
64.40
67.40
68.14

Seg
93.98
94.93**
95.09*
79.56
81.16
81.56

Seg&Tag
88.16
89.00**
89.42**
64.86
66.73
68.00

Table 6: Evaluations of the best model on the ﬁnal test sets in F1-scores as well as the recalls of out-of-
vocabulary words. Signiﬁcance tests for Single are in comparison to ZPar, while tests for Ensemble are
in comparison to Single (**p < 0.01, *p < 0.05)

performs very well despite being fully character
based. Moreover, it has clear advantages when ap-
plied to smaller datasets like UD Chinese, while
the prevalence is much smaller on CTB5.

Both our model and ZPar segment OOV words
in UD Chinese with higher accuracies than the
ones in CTBs despite that UD Chinese is no-
tably smaller and the overall OOV rate is higher.
Compared to CTB, the words in UD Chinese are
more ﬁne-grained and the average word length is
shorter, which makes it easier for the tagger to
correctly segment the OOV words as Zhang et al.
(2016) show that the longer words are more difﬁ-
cult to be segmented correctly. For joint POS tag-
ging for OOV words, the two systems both per-
form signiﬁcantly better on CTB5 as it is only
composed of news text.

In general, our model is more robust to OOV
words than ZPar, except that ZPar yields better re-
sult for segmentation by a small margin on CTB9.
ZPar also obtains higher accuracy for joint POS
tagging than the single model on CTB9. The dif-
ferences between ZPar and our model for both seg-
mentation and POS tagging are more substantial
on UD Chinese, which indicates that our model
is relatively more advantageous for handling OOV
words when the training sets are small, whereas
ZPar is able to perform equally well when sub-
stantial amount of training data is available as they
achieve similar results on the CTB sets.

is further

The single model

improved by
ensemble-averaging four independently trained
models. The improvements are not drastic but they
are observed systematically across all the datasets.
In general, ensemble decoding is beneﬁcial to han-
dling OOV words as well except that a small drop
for segmentation on CTB5 is observed.

Ensemble

ZPar

Seg

BN 97.89*
96.67**
CS
FM 96.54**
MG 94.54**
NS
SM 96.43**
97.29**
SP
WB 94.27**

97.56

Seg&Tag
94.48**
91.78**
91.92**
89.23**
93.92**
91.78**
93.93**
88.44**

Seg
97.68
95.61
96.30
94.22
97.49
96.13
96.69
93.38

Seg&Tag
94.22
90.15
91.51
88.60
93.70
90.32
93.35
86.88

Table 7: Evaluation on Broadcast News (BN),
(CS), Forum (FM), Magazine
Conversations
(MG), News (NS), Short Messages (SM), Speech
(SP) and Weblogs (WB) in CTB9. (**p < 0.01,
*p < 0.05)

of CTB9 in different genres. Our model surpasses
ZPar on all the genres in both segmentation and
joint POS tagging. The differences are subtle
on the genres in which the texts are normalised,
such as News and Broadcast News. This, to a
very large extent, explains why our model is only
marginally better than ZPar on CTB5, whereas the
experimental results reveal that our model is sub-
stantially better at processing non-standard text as
it yields signiﬁcantly higher scores on Conversa-
tions, Short Messages and Weblogs. The evalua-
tion results of both our model and ZPar vary sub-
stantially across different genres as some genres
are fundamentally more challenging to process.

Our models are compared with the previous
best-performing systems on CTB5 in Table 8. Our
models are not optimised particularly with respect
to CTB5 but still yield competitive results, espe-
cially for joint POS tagging. We are the ﬁrst to re-
port evaluation scores on CTB9 and UD Chinese.

4.3 Tagging Speed

Table 7 displays the evaluation of the ensem-
ble model and ZPar on the decomposed test sets

Our joint segmentation and POS tagger is very ef-
ﬁcient with GPU devices and can be practically

Kruengkrai et al. (2009b)
Zhang and Clark (2010)
Sun (2011)
Wang et al. (2011)
Shen et al. (2014)
Single
Ensemble

Seg
97.98
97.78
98.17
98.11
98.02
97.89
98.02

Seg&Tag
94.00
93.67
94.02
94.18
93.80
94.07
94.38

Table 8: Result comparisions on CTB5 in F1-
scores.

used for processing very large ﬁles. The mem-
ory demand of decoding is drastically milder com-
pared to training, a large batch size therefore can
be employed. The tagger takes constant time to
build the sub-computational graphs and load the
weights.

With bucket size of 10 and batch size of 500, Ta-
ble 9 shows the tagging speed of the tagger using
a single Tesla K80 GPU card and the pre-trained
model on CTB5. The tagging speed of ZPar is
also presented for comparison. GPU devices are
not supported by ZPar and therefore the tagging
speed is calculated using an Intel Core i7 CPU.

Single
Ensemble
ZPar

Init. Time (s)
20
23
4

Sentence/s
299.40
230.41
134.59

Chars/s
40,188.17
30,928.22
18,090.09

Table 9: Tagging speed in numbers of sentences
and characters per second

5 Related Work

fundamental BiRNN-CRF

The
architecture
is task-independent and has been applied to
many sequence tagging problems on Chinese.
Peng and Dredze (2016) adopt the model for Chi-
nese segmentation and named entity recognition
in the context of multi-task and multi-domain
learning. Dong et al. (2016) employ a character
level BiLSTM-CRF model that utilises radical-
level
information for Chinese named entity
recognition. Ma and Sun (2016) use a similar
architecture but feed the Chinese characters pair-
wise as edge embeddings instead. Their model
is applied respectively to chunking, segmentation
and POS tagging.

Zheng et al. (2013) model joint Chinese seg-
mentation and POS tagging via predicting the
combinatory segmentation and POS tags. They

employ the adaptation of the feed forward neu-
ral network introduced in Collobert et al. (2011)
that only extracts local features in a context win-
dow. A perceptron-style training algorithm is em-
ployed for sentence level optimisation, which is
the same as the training algorithm of the BiRNN-
CRF model. Their proposed model is not evalu-
ated on CTB5 and therefore difﬁcult to be com-
pared with our system. Kong et al. (2015) apply
segmental recurrent neural networks to joint seg-
mentation and POS tagging but the evaluation re-
sults are substantially below the state-of-the-art on
CTB5.

Bojanowski et al. (2016) retrieve word embed-
dings via representing words as a bag of charac-
ter n-grams for morphologically rich languages.
A similar character n-gram model is proposed
by Wieting et al. (2016).
Sun et al. (2014) at-
tempt to encode radical information into the con-
The radical-
ventional character embeddings.
enhanced embeddings are employed and eval-
uated for Chinese segmentation.
The results
show that radical-enhanced embeddings outper-
form both skip-ngram and continues bag-of-word
(Mikolov et al., 2013) in word2vec.

6 Conclusion

We adapt and apply the BiRNN-CRF model for se-
quence tagging in NLP to joint Chinese segmenta-
tion and POS tagging via predicting the combina-
tory tags of word boundaries and POS tags. Con-
catenated n-grams as well as sub-character fea-
tures are employed along with the conventional
pre-trained character embeddings as the vector
representations for Chinese characters. The fea-
ture experiments indicate that concatenated n-
grams contribute substantially. However, both rad-
icals and graphical features as sub-character level
information are less effective. How to incorpo-
rate the sub-character level information more ef-
fectively will be further explored in the future.

The proposed model is extensively evaluated on
CTB5, CTB9 and UD Chinese. Despite the fact
that different character representation approaches
are sensitive to data size and tagging schemes, we
use one set of hyper-parameters and universal fea-
ture settings so that the model is robust across
datasets. The experimental results on the test sets
show that our model outperforms ZPar which is
built on structured perceptron on all the datasets.
We obtain state-of-the-art performances on CTB5.

The results on UD Chinese and CTB9 also reveal
that our model has great advantages in processing
non-standard text, such as weblogs, forum text and
short messages. Moreover, the implemented tag-
ger is very efﬁcient with GPU devices and there-
fore can be applied to tagging very large ﬁles.

Acknowledgments

We acknowledge the computational resources pro-
vided by CSC in Helsinki and Sigma2 in Oslo
through NeIC-NLPL (www.nlpl.eu). This work
is supported by the Chinese Scholarship Council
(CSC) (No. 201407930015).

References

Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng
Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016.
TensorFlow: A system for large-
scale machine learning. In Proceedings of the 12th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI). Savannah, Georgia,
USA.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
arXiv preprint
tors with subword information.
arXiv:1607.04606 .

Kyunghyun Cho, Bart Van Merri¨enboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259 .

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555 .

Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
Journal of Machine Learning Research
scratch.
12(August):2493–2537.

Chuanhai Dong,

Jiajun Zhang, Chengqing Zong,
Masanori Hattori, and Hui Di. 2016. Character-
based LSTM-CRF with radical-level features for
Chinese named entity recognition. In International
Conference on Computer Processing of Oriental
Languages. Springer, pages 239–250.

and stochastic optimization.
Learning Research 12(Jul):2121–2159.

Journal of Machine

Morten W Fagerland, Stian Lydersen, and Petter Laake.
2013. The McNemar test for binary matched-pairs
data: mid-p and asymptotic are better than exact
conditional. BMC medical research methodology
13(1):91.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neural
networks. In Aistats. pages 249–256.

Sepp Hochreiter and J¨urgen Schmidhuber. 1997.
Neural computation

Long short-term memory.
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991 .

Wenbin Jiang, Liang Huang, Qun Liu, and Yajuan L¨u.
2008. A cascaded linear model for joint Chinese
word segmentation and part-of-speech tagging.
In
In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics. Citeseer.

Lingpeng Kong, Chris Dyer, and Noah A Smith.
2015. Segmental recurrent neural networks. arXiv
preprint arXiv:1511.06018 .

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009a. An error-driven word-character hy-
brid model for joint Chinese word segmentation and
In Proceedings of the Joint Confer-
POS tagging.
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP: Volume 1-Volume
1. Association for Computational Linguistics, Sin-
gapore, pages 513–521.

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, WANG Yiou, Kentaro Torisawa, and Hi-
toshi Isahara. 2009b. Joint Chinese word segmen-
tation and POS tagging using an error-driven word-
character hybrid model. IEICE transactions on in-
formation and systems 92(12):2298–2305.

John Lafferty, Andrew McCallum, Fernando Pereira,
et al. 2001. Conditional random ﬁelds: Probabilis-
tic models for segmenting and labeling sequence
data. In Proceedings of the eighteenth international
conference on machine learning, ICML. volume 1,
pages 282–289.

C´ıcero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
In Proceedings of The
part-of-speech tagging.
31st International Conference on Machine Learn-
ing. pages 1818–1826.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning

Wang Ling, Chris Dyer, W. Alan Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luis Marujo,
and Tiago Luis. 2015. Finding function in form:
Compositional character models for open vocabu-
lary word representation. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, pages 1520–1530.

on Neural Information Processing. Springer, pages
279–286.

Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka,
Wenliang Chen, Yujie Zhang, and Kentaro Torisawa.
2011.
Improving Chinese word segmentation and
POS tagging with semi-supervised methods using
large auto-analyzed data. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing. Asian Federation of Natural Language
Processing, pages 309–317.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. CHARAGRAM: Embedding words
and sentences via character n-grams. arXiv preprint
arXiv:1607.02789 .

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The Penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural lan-
guage engineering 11(02):207–238.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2016.
Transition-based neural word segmentation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers). Association for Computational Linguistics,
pages 421–431.

Yue Zhang and Stephen Clark. 2008. Joint word seg-
mentation and POS tagging using a single percep-
In Proceedings of the 46th Annual Meeting
tron.
of the Association for Computational Linguistics.
Columbus, Ohio, pages 888–896.

Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and POS-tagging using
In Proceedings of
a single discriminative model.
the 2010 Conference on Empirical Methods in Natu-
ral Language Processing. Association for Computa-
tional Linguistics, Massachusetts, USA, pages 843–
852.

Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. 2013.
Deep learning for Chinese word segmentation and
In Proceedings of the 2013 Confer-
POS tagging.
ence on Empirical Methods in Natural Language
Processing. Seattle, USA, pages 647–657.

Shuming Ma and Xu Sun. 2016. A new recurrent neu-
ral CRF for learning non-linear edge features. arXiv
preprint arXiv:1611.04233 .

Xuezhe Ma and Eduard Hovy. 2016.

End-to-end
sequence labeling via bi-directional LSTM-CNNs-
In Proceedings of the 54th Annual Meeting
CRF.
of the Association for Computational Linguistics.
Berlin, Germany, page 10641074.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
Efﬁcient estimation of word
arXiv preprint

frey Dean. 2013.
representations in vector space.
arXiv:1301.3781 .

Hwee Tou Ng and Jin Kiat Low. 2004. Chinese part-of-
speech tagging: One-at-a-time or all-at-once? word-
In Proceedings of the
based or character-based?
2004 Conference on Empirical Methods in Natural
Language Processing. Barcelona, Spain, pages 277–
284.

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the 10th In-
ternational Conference on Language Resources and
Evaluation (LREC 2016). pages 1659–1666.

Nanyun Peng and Mark Dredze. 2016. Multi-task
multi-domain representation learning for sequence
tagging. arXiv preprint arXiv:1608.02689 .

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP). Doha, Qatar,
pages 1532–1543.

Mo Shen, Hongxiao Liu, Daisuke Kawahara, and
Sadao Kurohashi. 2014. Chinese morphological
analysis with character-level POS tagging. In Pro-
ceedings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguistics,
Baltimore, Maryland, pages 253–258.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overﬁtting. Journal of Machine Learning Re-
search 15(1):1929–1958.

Weiwei Sun. 2011. A stacked sub-word model for joint
Chinese word segmentation and part-of-speech tag-
In Proceedings of the 49th Annual Meeting
ging.
of the Association for Computational Linguistics:
Human Language Technologies-Volume 1. Associ-
ation for Computational Linguistics, Portland, Ore-
gon, USA, pages 1385–1394.

Yaming Sun, Lei Lin, Nan Yang, Zhenzhou Ji, and
Xiaolong Wang. 2014. Radical-enhanced Chinese
character embedding. In International Conference

Appendix

Dataset CTB chapter IDs
Train

0044-0143, 0170-0270, 0400-0899,
1001-1017, 1019, 1021-1035, 1037-
1043, 1045-1059, 1062-1071, 1073-
1117, 1120-1131, 1133-1140, 1143-
1147, 1149-1151, 2000-2915, 4051-
4099, 4112-4180, 4198-4368, 5000-
5446, 6000-6560, 7000-7013
0301-0326, 2916-3030, 4100-4106,
4181-4189, 4369-4390, 5447-5492,
6561-6630, 7013-7014
0001-0043, 0144-0169, 0271-0301,
0900-0931, 1018, 1020, 1036, 1044,
1060, 1061, 1072, 1118, 1119, 1132,
1141, 1142, 1148, 3031-3145, 4107-
4111, 4190-4197, 4391-4411, 5493-
5558, 6631-6700, 7015-7017

Dev

Test

Table 10: The split of Chinese Treebank 9.0

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
97.49
97.57
96.38
96.61
94.71
95.07
94.98
95.00

R
98.30
98.47
96.55
96.74
94.99
95.27
94.93
95.22

F
97.89
98.02
96.47
96.67
94.85
95.17
94.93
95.11

Table 11: Evaluation of segmentations in preci-
sion, recall and F1-scores

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
93.68
93.95
91.81
92.28
89.28
89.67
88.95
89.33

R
94.47
94.81
91.97
92.40
89.54
89.86
89.04
89.54

F
94.07
94.38
91.89
92.34
89.41
89.77
89.00
89.43

Table 12: Evaluation of joint segmentations and
POS tagging in precision, recall and F1-scores

7
1
0
2
 
p
e
S
 
2
1
 
 
]
L
C
.
s
c
[
 
 
3
v
4
1
3
1
0
.
4
0
7
1
:
v
i
X
r
a

Character-based Joint Segmentation and POS Tagging for Chinese
using Bidirectional RNN-CRF

Yan Shao and Christian Hardmeier and J¨org Tiedemann∗ and Joakim Nivre
Department of Linguistics and Philology, Uppsala University
∗Department of Modern Languages, University of Helsinki
{yan.shao, christian.hardmeier, joakim.nivre}@lingfil.uu.se
jorg.tiedemann@helsinki.fi

Abstract

We present a character-based model for
joint segmentation and POS tagging for
Chinese. The bidirectional RNN-CRF ar-
chitecture for general sequence tagging
is adapted and applied with novel vec-
tor representations of Chinese characters
that capture rich contextual information
and sub-character level features.
The
proposed model is extensively evaluated
and compared with a state-of-the-art tag-
ger respectively on CTB5, CTB9 and UD
Chinese. The experimental results indi-
cate that our model is accurate and robust
across datasets in different sizes, genres
and annotation schemes. We obtain state-
of-the-art performance on CTB5, achiev-
ing 94.38 F1-score for joint segmentation
and POS tagging.

1 Introduction

Word segmentation and part-of-speech (POS) tag-
ging are core steps for higher-level natural lan-
guage processing (NLP) tasks. Given the raw text,
segmentation is applied at the very ﬁrst step and
POS tagging is performed on top afterwards. As
by convention the words in Chinese are not de-
limited by spaces, segmentation is non-trivial, but
its accuracy has a signiﬁcant impact on POS tag-
ging. Moreover, POS tags provide useful informa-
tion for word segmentation. Thus, modelling word
segmentation and POS tagging jointly can out-
perform the pipeline models (Ng and Low, 2004;
Zhang and Clark, 2008).

POS tagging is a typical sequence tagging prob-
lem over segmented words, while segmentation
also can be modelled as a character-level tagging
problem via predicting the labels that identify the
word boundaries. Ng and Low (2004) propose a

joint model which predicts the combinatory la-
bels of segmentation boundaries and POS tags at
the character level. Joint segmentation and POS
tagging becomes a standard character-based se-
quence tagging problem and therefore the general
machine learning algorithms for structured predic-
tion can be applied.

tagging tasks

The bidirectional

recurrent neural network
(RNN) using conditional random ﬁelds (CRF)
(Lafferty et al., 2001) as the output
interface
for sentence-level optimisation (BiRNN-CRF)
achieves state-of-the-art accuracies on various
sequence
(Huang et al., 2015;
Ma and Hovy, 2016) and outperforms the tradi-
tional linear statistical models. RNNs with gated
recurrent cells, such as long-short term memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
gated recurrent units (GRU) (Cho et al., 2014)
are capable of capturing long dependencies and
retrieving rich global information. The sequential
CRF on top of the recurrent layers ensures that the
optimal sequence of tags over the entire sentence
is obtained.

In this paper, we model

joint segmentation
and POS tagging as a fully character-based se-
quence tagging problem via predicting the com-
binatory labels. The BiRNN-CRF architecture is
adapted and applied. The Chinese characters are
fed into the neural networks as vector representa-
tions. In addition to utilising the pre-trained char-
acter embeddings, we propose a concatenated n-
gram-representation of the characters. Further-
more, sub-character level
information, namely
radicals and orthographical features extracted by
convolutional neural networks (CNNs), are also
incorporated and tested. Three datasets of dif-
ferent sizes, genres and with different annotation
schemes are employed for evaluation. Our model
is thoroughly evaluated and compared with the
joint segmentation and POS tagging model in ZPar

(Zhang and Clark, 2010), which is a state-of-the-
art joint tagger using structured perceptron and
beam decoding. According to the experimental re-
sults, our proposed model outperforms ZPar on all
the datasets in terms of accuracy.

The main contributions of this work include:
1. We apply the BiRNN-CRF model for general
sequence tagging to joint segmentation and POS
tagging for Chinese and achieve state-of-the-art
accuracy. The experimental results show that our
tagger is robust and accurate across datasets of dif-
ferent sizes, genres and annotation schemes. 2. We
propose a novel approach for vector representa-
tions of characters that leads to substantial im-
provements over the baseline model. 3. Additional
improvements are obtained via exploring the fea-
sibility of utilising sub-character level informa-
tion. 4. We provide an open-source implementa-
tion of our method along with pre-trained charac-
ter embeddings.1

2 Model

2.1 Neural Network Architecture

Our baseline model is an adaptation of BiRNN-
CRF. As illustrated in Figure 1, the Chinese char-
acters are represented as vectors and fed into the
bidirectional recurrent layers. The character rep-
resentations will be described in detail in the fol-
lowing sections. For the recurrent layer, we em-
ploy GRU as the basic recurrent unit as it has
similar functionalities but fewer parameters com-
pared to LSTM (Chung et al., 2014). Dropout
(Srivastava et al., 2014) is applied to the outputs of
the bidirectional recurrent layers. The outputs are
concatenated and passed to the ﬁrst-order chain
CRF layer. The optimal sequence of the combi-
natory labels is predicted at the end. There is a
post processing step to retrieve both segmentation
and POS tags from the combinatory tags.

2.2 Tagging Scheme

Following the work of Kruengkrai et al. (2009a),
the employed tags indicating the word boundaries
are B, I, E, S representing a character at the be-
inside, end of a word or as a single-
ginning,
character word. The CRF layer models condi-
tional scores over all possible combinatory labels
given the input characters. Incorporating the tran-
sition scores between the successive labels, the op-

1 https://github.com/yanshao9798/tagger

(summer)

(too)

(hot)

夏

天

太

热

character
representations

forward
RNN

backward
RNN

CRF
Layer

GRU

GRU

GRU

GRU

GRU

GRU

GRU

GRU

B-NT

E-NT

S-AD

S-VA

Output

夏天 NT

太 AD 热 VA

Figure 1: The BiRNN-CRF model for joint Chi-
nese segmentation and POS tagging. The dashed
arrows indicate that dropout layers are applied to
the outputs of the recurrent layers.

timal sequence can be obtained efﬁciently via the
Viterbi algorithm both for training and decoding.
The time complexity for the Viterbi algorithm
is linear with respect to the sentence length n as
O(k2n), where k is constant and equals to the total
number of combinatory labels. The efﬁciency can
be improved if we reduce k. For some POS tags,
combining them with the full boundary tags is re-
dundant. For instance, only the functional word
的 can be tagged as DEG in Chinese Treebank
(Xue et al., 2005). Since it is a single-character
word, combinatory tags of B-DEG, I-DEG, and
E-DEG never occur in the experimental data and
should therefore be pruned to reduce the search
space. Similarly, if the maximum length of words
under a given POS tag is two in the training data,
we prune the corresponding label.

2.3 Character Representations

We propose three different approaches to effec-
tively represent Chinese characters as vectors for
the neural network.

2.3.1 Concatenated N-gram

The prevalent character-based neural models as-
sume that larger spans of text, such as words and

(summer)

(too)

(hot)

夏

天

太

热

太

. . .

n-gram
character
Representation
V3

Vi,i

Vi−1,i

Vi−1,i+1

Figure 2: Vector representations of the Chinese
characters as incrementally concatenated n-gram
vectors in a given context.

n-grams, can be represented by the sequence of
characters that they consist of. For example, the
vector representation Vm,n of a span cm,n is ob-
tained by passing the vector representations vi of
the characters ci to a functions f as:

Vm,n = f (vm, vm+1, ..., vn)

(1)

where f is usually an RNN (Ling et al., 2015) or a
CNN (dos Santos and Zadrozny, 2014).

In this paper, instead of completely relying on
the BiRNN to extract contextual features from
context-free character representations, we encode
rich local information in the character vectors via
employing the incrementally concatenated n-gram
representation as demonstrated in Figure 2.
In
the example, the vector representation of the pivot
character 太 in the given context is the concatena-
tion of the context-free vector representation Vi,i
of 太 itself along with Vi−1,i of the bigram 天太
as well as Vi−1,i+1 of the trigram 天太热.

Instead of constructing the vector representation
Vm,n of an n-gram cm,n from the character repre-
sentations as in Equation 1, Vm,n in different or-
ders, such as Vi,i, Vi−1,i, and Vi−1,i+1, are ran-
domly initialised separately. We use a single spe-
cial vector to represent all the unknown n-grams
per order. The n-grams in different orders are then
concatenated incrementally to form up the vector
representations of a Chinese character in the given
context, which is passed further to the recurrent
layers. As shown in Figure 2, the neighbouring
characters on both sides of the pivot character are
taken into account.

2.3.2 Radicals and Orthographical Features

Chinese characters are logograms. As opposed to
alphabetical languages, there is rich information

Conv.
layers

Max
pooling

fully-
connected
layer

Figure 3: Convolutional Neural Networks for or-
thographical feature extraction. Only the ﬁrst
convolutional layer and its following max-pooling
layer are presented.

encrypted in the graphical components. For in-
stance, the Chinese characters that share the same
part 钅 (gold) are all somewhat related to metals,
such as 银 (silver), 铁 (iron), 针 (needle) and so
on. The shared part 钅 is known as the radical,
which functions as a semantic indicator. Hence,
we investigate the effectiveness of using the infor-
mation below the character level for our task.

Radicals are ﬁrst represented as randomly ini-
tialised vectors and concatenated as parts of the
character representations. Radicals are tradition-
ally used as indices in Chinese dictionaries.
In
our approach, they are retrieved via the unicode
representation of Chinese characters as the char-
acters that share the same radical are grouped to-
gether. They are organised in consistent with the
categorisation in Kangxi Dictionary (康熙字典),
in which all the Chinese characters are grouped
under 214 different radicals. We only employ the
radicals of the common characters in the unicode
range of (U+4E00, U+9FFF). For the characters
out of the range and the non-Chinese characters,
we use a single special vector as their radical rep-
resentations.

Additionally,

instead of presuming that only
radicals encode sub-character level information,
we use convolutional neural networks (CNNs) to
extract graphical features from scratch by regard-
ing the Chinese characters as pictures and feed
their pixels as the input. As illustrated in Figure 3,
there are two convolutional layers, both followed
by a max-pooling layer. The output of the second
max-pooling layer is reshaped and passed to a reg-
ular fully-connected layer. Dropout is applied to
the output of the fully-connected layer. The out-
put is then concatenated as parts of the character
representation. The CNNs are trained jointly with
the main network.

2.3.3 Pre-trained Character Embeddings
The context-free vector representations of single
characters introduced in section 2.3.1 can be re-
placed by pre-trained character embeddings re-
trieved from large corpora. We employ GloVe
(Pennington et al., 2014) to train our character em-
beddings on Wikipedia2 and the freely available
Sogou News Corpora (SogouCS).3 We use ran-
domly initialised vectors as the representations of
the characters that are not in the embedding vo-
cabulary. Pre-trained embeddings for higher-order
n-grams are not employed in this paper.

2.4 Ensemble Decoding

At the ﬁnal decoding phase, we use ensemble de-
coding, a simple averaging technique, to mitigate
the deviations led by random weight initialisation
of the neural network. For the chain CRF decoder,
the ﬁnal sequence of the combinatory tags y is
obtained via the conditional scores S(yi|xi) and
the transition scores T (yi, yj) given the input se-
quence x.
Instead of computing the optimal se-
quence with respect to the scores returned by a
single model, both the conditional scores and tran-
sition scores are averaged over four models with
identical parameter settings that are trained inde-
pendently:

y∗ = argmax
y∈L(x)

p(y|x; ¯{S}, ¯{T })

(2)

Ensemble decoding is only applied to the best
performing model according to the feature experi-
ments at the ﬁnal testing phase in this paper.

3 Implementation

Our neural networks are implemented using the
TensorFlow 1.2.0 library (Abadi et al., 2016). We
group the sentences with similar lengths into the
same buckets and the sentences in the same bucket
are padded to the same length accordingly. We
construct sub-computational graphs respectively
for each bucket. The training and tagging speed of
our neural network on GPU devices can be dras-
tically improved thanks to the bucket model. The
training time is proportional to both the size of the
training set and the number of POS tags.

Table 1 shows the adopted hyper-parameters.
We use one set of parameters for all the experi-
ments on different datasets. The weights of the

2https://dumps.wikimedia.org/
3http://www.sogou.com/labs/resource/cs.php

Char. embedding size
n-gram embedding size
Radical embedding size
Character font
Character size
GRU state size
Conv. ﬁlter size
Conv. ﬁlter number
Max pooling size
Fully-connected size
Optimiser
Initial learning rate
Decay rate
Gradient Clipping
Dropout rate
Batch size

64
64
30
simsun (宋体)
30 × 30
200
5 × 5
32
2 × 2
100
Adagrad
0.1
0.05
5.0
0.5
10

Table 1: Hyper-parameters.

neural networks, including the randomly intialised
embeddings, are initialised using the scheme in-
troduced in Glorot and Bengio (2010). The net-
work is trained with the error back-propagation
algorithm. All the embeddings are ﬁne-tuned dur-
ing training by back-propagating gradients. Ada-
grad (Duchi et al., 2011) with mini-batches is em-
ployed for optimisation with the initial learning
rate η0 = 0.1, which is updated with a decay rate
ρ = 0.05 as ηt =
ρ(t−1)+1 , where t is the index of
the current epoch.

η0

The model is optimised with respect to the per-
formance on the development sets. F1-scores of
both segmentation (F 1Seg) and joint POS tagging
(F 1Seg&T ag) are employed as F 1Seg ∗ F 1Seg&T ag
to measure the performance of the model after
each epoch during training.
In our experiments,
the models are trained for 30 epochs. To ensure
that the weights are well optimised, we only adopt
the best epoch after the model is trained at least for
5 epochs.

4 Experiments

4.1 Datasets

We employ three different datasets for our ex-
periments, namely Chinese Treebank (Xue et al.,
2005) 5.0 (CTB5) and 9.0 (CTB9) along with the
Chinese section in Universal Dependencies (UD
Chinese) (Nivre et al., 2016) of version 1.4.

CTB5 is the most employed dataset for joint
segmentation and POS tagging in previous re-
It is composed of newswire data. We
search.
follow the conventional split of the dataset as
in Jiang et al. (2008); Kruengkrai et al. (2009a);

Zhang and Clark (2010). CTB9 consists of source
texts in various genres, CTB5 is a subset of it. We
split CTB9 by referring to the partition of CTB7
in Wang et al. (2011). We extend the training,
development and test sets from CTB5 by adding
80% of the new data in CTB9 to training and
10% each to development and test. The double-
checked ﬁles are all placed in the test set. The
detailed splitting information can be found in Ta-
ble 10 in Appendix. UD Chinese has both univer-
sal and language-speciﬁc POS tags. They are not
predicted jointly in this paper. For the sake of con-
venience, we refer the universal tags as UD1 and
the language-speciﬁc ones as UD2 in the follow-
ing sessions. To make the model beneﬁt from the
pre-trained character embeddings, we convert the
texts in UD Chinese from traditional Chinese into
simpliﬁed Chinese.

Table 2 shows brief statistics of the employed
The out-of-
datasets in numbers of words.
vocabulary (OOV) words are counted regardless
of the POS tags. We can see that the size of
UD Chinese is much smaller and it has a notably
higher OOV rate than the two CTB datasets.

Train
Dev
Test
OOV rate (dev)
OOV rate (test)

CTB5
493,935
6,821
8,008
8.11
3.47

CTB9
1,696,322
136,468
242,317
2.93
3.13

UD Chinese
98,608
12,663
12,012
12.13
12.46

Table 2: Statistics of the employed datasets in
numbers of words.

4.2 Experimental Results

Both segmentation (Seg) and joint segmentation
and POS tagging (Seg&Tag) are evaluated in our
experiments.4 We employ word-level recall (R),
precision (P) and F1-score (F) as the evaluation
metrics. A series of feature experiments are car-
ried out on the development sets to evaluate the ef-
fectiveness of the proposed approaches for vector
representations of the characters. Finally, the best
performing model according to the feature experi-
ment is applied to the test sets in the forms of sin-
gle as well as ensemble and compared with ZPar.

4The evaluation script is downloaded from:

http://people.sutd.edu.sg/ yue zhang/doc/doc/joint ﬁles
/evaluate.py

4.2.1 Feature Experiments

Table 3 shows the evaluation results of using
concatenated n-grams up to different orders as
the character representations. By introducing 2-
grams, we can obtain vast improvements over
solely using the conventional character embed-
dings, which indicates that not all the local infor-
mation can be effectively captured by the BiRNN
using context-free character representations. Util-
ising the concatenated n-grams ensures that the
same character has different but yet closely related
representations in different contexts, which is an
effective way to encode contextual features.

From the table, we see that notable improve-
ments can be achieved further via employing 3-
grams. 4-grams still help but only to CTB9 while
adding 5-grams achieves almost no improvement
on any of the datasets. The results imply that con-
catenating higher-order n-grams can be detrimen-
tal, especially on datasets in smaller sizes due to
the fact that higher-order n-grams are more sparse
in the training data and their vector representations
cannot be trained well enough. Besides, adopting
higher-order n-grams also substantially increases
the numbers of weights and therefore both train-
ing and decoding become less efﬁcient. Under the
circumstances, we consider that 3-gram model is
optimal for our task and it is employed in the fol-
lowing experiments for all the datasets.

The concatenated n-grams have a bigger size
compared to the basic character representation.
We conduct one additional experiment using a ba-
sic 1-gram character model with a larger character
vector size of 300. The evaluation scores are sim-
ilar to the basic character model with the size of
64, which shows that the improvements obtained
by the n-gram model are not matched by enlarg-
ing the size of the vector representation.

The evaluation scores of the sub-character level
features are reported in Table 4. The relevant fea-
tures are added on top of the 3-gram model. Em-
ploying radicals and graphical features achieves
similar improvements for segmentation while util-
ising radicals obtains better results for joint POS
tagging on CTB5. However, radicals are not a very
effective feature on CTB9, UD1 and UD2 whereas
a notable enhancement is observed when employ-
ing graphical features on UD1. Using CNNs to
extract graphical features is computationally much
more expensive than simply adopting radicals via
a lookup table, especially when GPU is not avail-

CTB5

CTB9

UD1

UD2

Seg
95.22
95.14
97.08
97.14
97.13
96.94

Seg&Tag
91.71
91.52
93.72
94.01
94.02
93.84

Seg
95.53
95.25
96.30
96.47
96.48
96.50

Seg&Tag
90.89
90.43
91.66
91.75
91.89
91.88

Seg
91.84
91.74
94.50
94.36
94.25
94.40

Seg&Tag
85.43
85.07
88.36
88.27
88.37
88.47

Seg
92.40
91.83
94.42
94.43
94.16
94.25

Seg&Tag
85.63
84.93
88.14
88.32
88.24
88.03

size = 300
1-gram
2-gram
3-gram
4-gram
5-gram

Table 3: Evaluation of concatenated n-gram representations on the development sets in F1-scores

CTB5

CTB9

UD1

UD2

3-gram
+radicals
+graphical

Seg
97.14
97.26
97.25

Seg&Tag
94.01
94.42
94.08

Seg
96.47
96.42
96.50

Seg&Tag
91.75
91.74
91.78

Seg
94.36
94.37
94.50

Seg&Tag
88.27
88.21
88.59

Seg
94.43
94.39
94.23

Seg&Tag
88.32
88.36
87.95

Table 4: Evaluation of sub-character level features on the development sets in F1-scores.

CTB5

CTB9

UD1

UD2

Seg
95.14
95.82
97.26
97.42

Seg&Tag
91.52
92.45
94.42
94.58

Seg
95.25
95.44
96.42
96.56

Seg&Tag
90.43
90.57
91.74
91.96

Seg
91.74
92.77
94.37
95.12

Seg&Tag
85.07
86.48
88.21
89.69

Seg
91.83
93.01
94.39
95.02

Seg&Tag
84.93
86.48
88.36
89.20

1-gram
+GloVe
3-gram, radicals
+GloVe

Table 5: Evaluation of the pre-trained character embeddings on the development sets in F1-scores.

able.

From Table 5, we can learn that employing pre-
trained embeddings as initial vector representa-
tions for the characters achieves improvements in
general, whereas the improvements are compara-
tively smaller if the the concatenated n-gram rep-
resentations and the radicals are added. Addition-
ally, the improvements obtained on UD Chinese
are more signiﬁcant than on CTBs, which indi-
cates that the pre-trained character embeddings are
more beneﬁcial to the datasets in smaller sizes.

In general, the feature experiments indicate that
the proposed Chinese character representations are
all sensitive to dataset size. Using higher-order
n-grams requires more data for training. On the
other hand, the pre-trained embeddings are more
vital if the dataset
the
is small.
different representations are sensitive to tagging
schemes as the evaluation results on UD1 and
UD2 are quite diverse. Taking both robustness and
efﬁciency into consideration, we select 3-grams
along with radicals and pre-trained character em-
beddings as the best setting for ﬁnal evaluation.

In addition,

4.2.2 Final Results

Table 6 shows the ﬁnal scores on the test sets.
The complete evaluation results in precision, re-

call and F1-scores are contained in Table 11 and
Table 12 in Appendix. Our system is compared
with ZPar. We retrained a ZPar model on CTB5
that reproduces the evaluation scores reported in
Zhang and Clark (2010). We also modiﬁed the
source code so that it is applicable to CTB9 and
UD Chinese. In addition, we perform the mid-p
McNemar’s test (Fagerland et al., 2013) to exam-
ine the statistical signiﬁcances.

the single model

As shown in Table 6,

is
worse than the ensemble model but still outper-
forms ZPar on all the tested datasets. ZPar in-
corporates discrete local features at both character
and word levels and employs structured percep-
tron for global optimisation, whereas we encode
rich local information in the character represen-
tations and employ BiRNN to effectively extract
global features and capture long term dependen-
cies. The chain CRF layer is used for sentence-
level optimisation, which functions similarly to
structured perceptron. As opposed to the tag-
gers built with traditional machine learning algo-
rithms, our model avoids heavy feature engineer-
ing and beneﬁts from large plain texts via utilis-
It is also
ing pre-trained character embeddings.
very ﬂexible to add sub-character level features as
parts of the character representations. The model

ZPar
Single (3-gram, rad., GloVe)
Ensemble (4 models)
ZPar
Single
Ensemble

OOV recall

CTB5

CTB9

UD1

UD2

Seg
97.77
97.89
98.02*
76.98
78.78
77.34

Seg&Tag
93.82
94.07**
94.38**
68.34
69.78
70.50

Seg
96.28
96.47**
96.67**
75.83
74.16
75.52

Seg&Tag
91.62
91.89**
92.34**
63.71
62.58
64.14

Seg
93.75
94.85**
95.16**
78.69
81.36
82.16

Seg&Tag
88.11
89.41**
89.75*
64.40
67.40
68.14

Seg
93.98
94.93**
95.09*
79.56
81.16
81.56

Seg&Tag
88.16
89.00**
89.42**
64.86
66.73
68.00

Table 6: Evaluations of the best model on the ﬁnal test sets in F1-scores as well as the recalls of out-of-
vocabulary words. Signiﬁcance tests for Single are in comparison to ZPar, while tests for Ensemble are
in comparison to Single (**p < 0.01, *p < 0.05)

performs very well despite being fully character
based. Moreover, it has clear advantages when ap-
plied to smaller datasets like UD Chinese, while
the prevalence is much smaller on CTB5.

Both our model and ZPar segment OOV words
in UD Chinese with higher accuracies than the
ones in CTBs despite that UD Chinese is no-
tably smaller and the overall OOV rate is higher.
Compared to CTB, the words in UD Chinese are
more ﬁne-grained and the average word length is
shorter, which makes it easier for the tagger to
correctly segment the OOV words as Zhang et al.
(2016) show that the longer words are more difﬁ-
cult to be segmented correctly. For joint POS tag-
ging for OOV words, the two systems both per-
form signiﬁcantly better on CTB5 as it is only
composed of news text.

In general, our model is more robust to OOV
words than ZPar, except that ZPar yields better re-
sult for segmentation by a small margin on CTB9.
ZPar also obtains higher accuracy for joint POS
tagging than the single model on CTB9. The dif-
ferences between ZPar and our model for both seg-
mentation and POS tagging are more substantial
on UD Chinese, which indicates that our model
is relatively more advantageous for handling OOV
words when the training sets are small, whereas
ZPar is able to perform equally well when sub-
stantial amount of training data is available as they
achieve similar results on the CTB sets.

is further

The single model

improved by
ensemble-averaging four independently trained
models. The improvements are not drastic but they
are observed systematically across all the datasets.
In general, ensemble decoding is beneﬁcial to han-
dling OOV words as well except that a small drop
for segmentation on CTB5 is observed.

Ensemble

ZPar

Seg

BN 97.89*
96.67**
CS
FM 96.54**
MG 94.54**
NS
SM 96.43**
97.29**
SP
WB 94.27**

97.56

Seg&Tag
94.48**
91.78**
91.92**
89.23**
93.92**
91.78**
93.93**
88.44**

Seg
97.68
95.61
96.30
94.22
97.49
96.13
96.69
93.38

Seg&Tag
94.22
90.15
91.51
88.60
93.70
90.32
93.35
86.88

Table 7: Evaluation on Broadcast News (BN),
(CS), Forum (FM), Magazine
Conversations
(MG), News (NS), Short Messages (SM), Speech
(SP) and Weblogs (WB) in CTB9. (**p < 0.01,
*p < 0.05)

of CTB9 in different genres. Our model surpasses
ZPar on all the genres in both segmentation and
joint POS tagging. The differences are subtle
on the genres in which the texts are normalised,
such as News and Broadcast News. This, to a
very large extent, explains why our model is only
marginally better than ZPar on CTB5, whereas the
experimental results reveal that our model is sub-
stantially better at processing non-standard text as
it yields signiﬁcantly higher scores on Conversa-
tions, Short Messages and Weblogs. The evalua-
tion results of both our model and ZPar vary sub-
stantially across different genres as some genres
are fundamentally more challenging to process.

Our models are compared with the previous
best-performing systems on CTB5 in Table 8. Our
models are not optimised particularly with respect
to CTB5 but still yield competitive results, espe-
cially for joint POS tagging. We are the ﬁrst to re-
port evaluation scores on CTB9 and UD Chinese.

4.3 Tagging Speed

Table 7 displays the evaluation of the ensem-
ble model and ZPar on the decomposed test sets

Our joint segmentation and POS tagger is very ef-
ﬁcient with GPU devices and can be practically

Kruengkrai et al. (2009b)
Zhang and Clark (2010)
Sun (2011)
Wang et al. (2011)
Shen et al. (2014)
Single
Ensemble

Seg
97.98
97.78
98.17
98.11
98.02
97.89
98.02

Seg&Tag
94.00
93.67
94.02
94.18
93.80
94.07
94.38

Table 8: Result comparisions on CTB5 in F1-
scores.

used for processing very large ﬁles. The mem-
ory demand of decoding is drastically milder com-
pared to training, a large batch size therefore can
be employed. The tagger takes constant time to
build the sub-computational graphs and load the
weights.

With bucket size of 10 and batch size of 500, Ta-
ble 9 shows the tagging speed of the tagger using
a single Tesla K80 GPU card and the pre-trained
model on CTB5. The tagging speed of ZPar is
also presented for comparison. GPU devices are
not supported by ZPar and therefore the tagging
speed is calculated using an Intel Core i7 CPU.

Single
Ensemble
ZPar

Init. Time (s)
20
23
4

Sentence/s
299.40
230.41
134.59

Chars/s
40,188.17
30,928.22
18,090.09

Table 9: Tagging speed in numbers of sentences
and characters per second

5 Related Work

fundamental BiRNN-CRF

The
architecture
is task-independent and has been applied to
many sequence tagging problems on Chinese.
Peng and Dredze (2016) adopt the model for Chi-
nese segmentation and named entity recognition
in the context of multi-task and multi-domain
learning. Dong et al. (2016) employ a character
level BiLSTM-CRF model that utilises radical-
level
information for Chinese named entity
recognition. Ma and Sun (2016) use a similar
architecture but feed the Chinese characters pair-
wise as edge embeddings instead. Their model
is applied respectively to chunking, segmentation
and POS tagging.

Zheng et al. (2013) model joint Chinese seg-
mentation and POS tagging via predicting the
combinatory segmentation and POS tags. They

employ the adaptation of the feed forward neu-
ral network introduced in Collobert et al. (2011)
that only extracts local features in a context win-
dow. A perceptron-style training algorithm is em-
ployed for sentence level optimisation, which is
the same as the training algorithm of the BiRNN-
CRF model. Their proposed model is not evalu-
ated on CTB5 and therefore difﬁcult to be com-
pared with our system. Kong et al. (2015) apply
segmental recurrent neural networks to joint seg-
mentation and POS tagging but the evaluation re-
sults are substantially below the state-of-the-art on
CTB5.

Bojanowski et al. (2016) retrieve word embed-
dings via representing words as a bag of charac-
ter n-grams for morphologically rich languages.
A similar character n-gram model is proposed
by Wieting et al. (2016).
Sun et al. (2014) at-
tempt to encode radical information into the con-
The radical-
ventional character embeddings.
enhanced embeddings are employed and eval-
uated for Chinese segmentation.
The results
show that radical-enhanced embeddings outper-
form both skip-ngram and continues bag-of-word
(Mikolov et al., 2013) in word2vec.

6 Conclusion

We adapt and apply the BiRNN-CRF model for se-
quence tagging in NLP to joint Chinese segmenta-
tion and POS tagging via predicting the combina-
tory tags of word boundaries and POS tags. Con-
catenated n-grams as well as sub-character fea-
tures are employed along with the conventional
pre-trained character embeddings as the vector
representations for Chinese characters. The fea-
ture experiments indicate that concatenated n-
grams contribute substantially. However, both rad-
icals and graphical features as sub-character level
information are less effective. How to incorpo-
rate the sub-character level information more ef-
fectively will be further explored in the future.

The proposed model is extensively evaluated on
CTB5, CTB9 and UD Chinese. Despite the fact
that different character representation approaches
are sensitive to data size and tagging schemes, we
use one set of hyper-parameters and universal fea-
ture settings so that the model is robust across
datasets. The experimental results on the test sets
show that our model outperforms ZPar which is
built on structured perceptron on all the datasets.
We obtain state-of-the-art performances on CTB5.

The results on UD Chinese and CTB9 also reveal
that our model has great advantages in processing
non-standard text, such as weblogs, forum text and
short messages. Moreover, the implemented tag-
ger is very efﬁcient with GPU devices and there-
fore can be applied to tagging very large ﬁles.

Acknowledgments

We acknowledge the computational resources pro-
vided by CSC in Helsinki and Sigma2 in Oslo
through NeIC-NLPL (www.nlpl.eu). This work
is supported by the Chinese Scholarship Council
(CSC) (No. 201407930015).

References

Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng
Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016.
TensorFlow: A system for large-
scale machine learning. In Proceedings of the 12th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI). Savannah, Georgia,
USA.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
arXiv preprint
tors with subword information.
arXiv:1607.04606 .

Kyunghyun Cho, Bart Van Merri¨enboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259 .

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555 .

Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
Journal of Machine Learning Research
scratch.
12(August):2493–2537.

Chuanhai Dong,

Jiajun Zhang, Chengqing Zong,
Masanori Hattori, and Hui Di. 2016. Character-
based LSTM-CRF with radical-level features for
Chinese named entity recognition. In International
Conference on Computer Processing of Oriental
Languages. Springer, pages 239–250.

and stochastic optimization.
Learning Research 12(Jul):2121–2159.

Journal of Machine

Morten W Fagerland, Stian Lydersen, and Petter Laake.
2013. The McNemar test for binary matched-pairs
data: mid-p and asymptotic are better than exact
conditional. BMC medical research methodology
13(1):91.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neural
networks. In Aistats. pages 249–256.

Sepp Hochreiter and J¨urgen Schmidhuber. 1997.
Neural computation

Long short-term memory.
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991 .

Wenbin Jiang, Liang Huang, Qun Liu, and Yajuan L¨u.
2008. A cascaded linear model for joint Chinese
word segmentation and part-of-speech tagging.
In
In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics. Citeseer.

Lingpeng Kong, Chris Dyer, and Noah A Smith.
2015. Segmental recurrent neural networks. arXiv
preprint arXiv:1511.06018 .

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009a. An error-driven word-character hy-
brid model for joint Chinese word segmentation and
In Proceedings of the Joint Confer-
POS tagging.
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP: Volume 1-Volume
1. Association for Computational Linguistics, Sin-
gapore, pages 513–521.

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, WANG Yiou, Kentaro Torisawa, and Hi-
toshi Isahara. 2009b. Joint Chinese word segmen-
tation and POS tagging using an error-driven word-
character hybrid model. IEICE transactions on in-
formation and systems 92(12):2298–2305.

John Lafferty, Andrew McCallum, Fernando Pereira,
et al. 2001. Conditional random ﬁelds: Probabilis-
tic models for segmenting and labeling sequence
data. In Proceedings of the eighteenth international
conference on machine learning, ICML. volume 1,
pages 282–289.

C´ıcero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
In Proceedings of The
part-of-speech tagging.
31st International Conference on Machine Learn-
ing. pages 1818–1826.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning

Wang Ling, Chris Dyer, W. Alan Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luis Marujo,
and Tiago Luis. 2015. Finding function in form:
Compositional character models for open vocabu-
lary word representation. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, pages 1520–1530.

on Neural Information Processing. Springer, pages
279–286.

Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka,
Wenliang Chen, Yujie Zhang, and Kentaro Torisawa.
2011.
Improving Chinese word segmentation and
POS tagging with semi-supervised methods using
large auto-analyzed data. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing. Asian Federation of Natural Language
Processing, pages 309–317.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. CHARAGRAM: Embedding words
and sentences via character n-grams. arXiv preprint
arXiv:1607.02789 .

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The Penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural lan-
guage engineering 11(02):207–238.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2016.
Transition-based neural word segmentation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers). Association for Computational Linguistics,
pages 421–431.

Yue Zhang and Stephen Clark. 2008. Joint word seg-
mentation and POS tagging using a single percep-
In Proceedings of the 46th Annual Meeting
tron.
of the Association for Computational Linguistics.
Columbus, Ohio, pages 888–896.

Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and POS-tagging using
In Proceedings of
a single discriminative model.
the 2010 Conference on Empirical Methods in Natu-
ral Language Processing. Association for Computa-
tional Linguistics, Massachusetts, USA, pages 843–
852.

Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. 2013.
Deep learning for Chinese word segmentation and
In Proceedings of the 2013 Confer-
POS tagging.
ence on Empirical Methods in Natural Language
Processing. Seattle, USA, pages 647–657.

Shuming Ma and Xu Sun. 2016. A new recurrent neu-
ral CRF for learning non-linear edge features. arXiv
preprint arXiv:1611.04233 .

Xuezhe Ma and Eduard Hovy. 2016.

End-to-end
sequence labeling via bi-directional LSTM-CNNs-
In Proceedings of the 54th Annual Meeting
CRF.
of the Association for Computational Linguistics.
Berlin, Germany, page 10641074.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
Efﬁcient estimation of word
arXiv preprint

frey Dean. 2013.
representations in vector space.
arXiv:1301.3781 .

Hwee Tou Ng and Jin Kiat Low. 2004. Chinese part-of-
speech tagging: One-at-a-time or all-at-once? word-
In Proceedings of the
based or character-based?
2004 Conference on Empirical Methods in Natural
Language Processing. Barcelona, Spain, pages 277–
284.

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the 10th In-
ternational Conference on Language Resources and
Evaluation (LREC 2016). pages 1659–1666.

Nanyun Peng and Mark Dredze. 2016. Multi-task
multi-domain representation learning for sequence
tagging. arXiv preprint arXiv:1608.02689 .

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP). Doha, Qatar,
pages 1532–1543.

Mo Shen, Hongxiao Liu, Daisuke Kawahara, and
Sadao Kurohashi. 2014. Chinese morphological
analysis with character-level POS tagging. In Pro-
ceedings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguistics,
Baltimore, Maryland, pages 253–258.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overﬁtting. Journal of Machine Learning Re-
search 15(1):1929–1958.

Weiwei Sun. 2011. A stacked sub-word model for joint
Chinese word segmentation and part-of-speech tag-
In Proceedings of the 49th Annual Meeting
ging.
of the Association for Computational Linguistics:
Human Language Technologies-Volume 1. Associ-
ation for Computational Linguistics, Portland, Ore-
gon, USA, pages 1385–1394.

Yaming Sun, Lei Lin, Nan Yang, Zhenzhou Ji, and
Xiaolong Wang. 2014. Radical-enhanced Chinese
character embedding. In International Conference

Appendix

Dataset CTB chapter IDs
Train

0044-0143, 0170-0270, 0400-0899,
1001-1017, 1019, 1021-1035, 1037-
1043, 1045-1059, 1062-1071, 1073-
1117, 1120-1131, 1133-1140, 1143-
1147, 1149-1151, 2000-2915, 4051-
4099, 4112-4180, 4198-4368, 5000-
5446, 6000-6560, 7000-7013
0301-0326, 2916-3030, 4100-4106,
4181-4189, 4369-4390, 5447-5492,
6561-6630, 7013-7014
0001-0043, 0144-0169, 0271-0301,
0900-0931, 1018, 1020, 1036, 1044,
1060, 1061, 1072, 1118, 1119, 1132,
1141, 1142, 1148, 3031-3145, 4107-
4111, 4190-4197, 4391-4411, 5493-
5558, 6631-6700, 7015-7017

Dev

Test

Table 10: The split of Chinese Treebank 9.0

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
97.49
97.57
96.38
96.61
94.71
95.07
94.98
95.00

R
98.30
98.47
96.55
96.74
94.99
95.27
94.93
95.22

F
97.89
98.02
96.47
96.67
94.85
95.17
94.93
95.11

Table 11: Evaluation of segmentations in preci-
sion, recall and F1-scores

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
93.68
93.95
91.81
92.28
89.28
89.67
88.95
89.33

R
94.47
94.81
91.97
92.40
89.54
89.86
89.04
89.54

F
94.07
94.38
91.89
92.34
89.41
89.77
89.00
89.43

Table 12: Evaluation of joint segmentations and
POS tagging in precision, recall and F1-scores

7
1
0
2
 
p
e
S
 
2
1
 
 
]
L
C
.
s
c
[
 
 
3
v
4
1
3
1
0
.
4
0
7
1
:
v
i
X
r
a

Character-based Joint Segmentation and POS Tagging for Chinese
using Bidirectional RNN-CRF

Yan Shao and Christian Hardmeier and J¨org Tiedemann∗ and Joakim Nivre
Department of Linguistics and Philology, Uppsala University
∗Department of Modern Languages, University of Helsinki
{yan.shao, christian.hardmeier, joakim.nivre}@lingfil.uu.se
jorg.tiedemann@helsinki.fi

Abstract

We present a character-based model for
joint segmentation and POS tagging for
Chinese. The bidirectional RNN-CRF ar-
chitecture for general sequence tagging
is adapted and applied with novel vec-
tor representations of Chinese characters
that capture rich contextual information
and sub-character level features.
The
proposed model is extensively evaluated
and compared with a state-of-the-art tag-
ger respectively on CTB5, CTB9 and UD
Chinese. The experimental results indi-
cate that our model is accurate and robust
across datasets in different sizes, genres
and annotation schemes. We obtain state-
of-the-art performance on CTB5, achiev-
ing 94.38 F1-score for joint segmentation
and POS tagging.

1 Introduction

Word segmentation and part-of-speech (POS) tag-
ging are core steps for higher-level natural lan-
guage processing (NLP) tasks. Given the raw text,
segmentation is applied at the very ﬁrst step and
POS tagging is performed on top afterwards. As
by convention the words in Chinese are not de-
limited by spaces, segmentation is non-trivial, but
its accuracy has a signiﬁcant impact on POS tag-
ging. Moreover, POS tags provide useful informa-
tion for word segmentation. Thus, modelling word
segmentation and POS tagging jointly can out-
perform the pipeline models (Ng and Low, 2004;
Zhang and Clark, 2008).

POS tagging is a typical sequence tagging prob-
lem over segmented words, while segmentation
also can be modelled as a character-level tagging
problem via predicting the labels that identify the
word boundaries. Ng and Low (2004) propose a

joint model which predicts the combinatory la-
bels of segmentation boundaries and POS tags at
the character level. Joint segmentation and POS
tagging becomes a standard character-based se-
quence tagging problem and therefore the general
machine learning algorithms for structured predic-
tion can be applied.

tagging tasks

The bidirectional

recurrent neural network
(RNN) using conditional random ﬁelds (CRF)
(Lafferty et al., 2001) as the output
interface
for sentence-level optimisation (BiRNN-CRF)
achieves state-of-the-art accuracies on various
sequence
(Huang et al., 2015;
Ma and Hovy, 2016) and outperforms the tradi-
tional linear statistical models. RNNs with gated
recurrent cells, such as long-short term memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
gated recurrent units (GRU) (Cho et al., 2014)
are capable of capturing long dependencies and
retrieving rich global information. The sequential
CRF on top of the recurrent layers ensures that the
optimal sequence of tags over the entire sentence
is obtained.

In this paper, we model

joint segmentation
and POS tagging as a fully character-based se-
quence tagging problem via predicting the com-
binatory labels. The BiRNN-CRF architecture is
adapted and applied. The Chinese characters are
fed into the neural networks as vector representa-
tions. In addition to utilising the pre-trained char-
acter embeddings, we propose a concatenated n-
gram-representation of the characters. Further-
more, sub-character level
information, namely
radicals and orthographical features extracted by
convolutional neural networks (CNNs), are also
incorporated and tested. Three datasets of dif-
ferent sizes, genres and with different annotation
schemes are employed for evaluation. Our model
is thoroughly evaluated and compared with the
joint segmentation and POS tagging model in ZPar

(Zhang and Clark, 2010), which is a state-of-the-
art joint tagger using structured perceptron and
beam decoding. According to the experimental re-
sults, our proposed model outperforms ZPar on all
the datasets in terms of accuracy.

The main contributions of this work include:
1. We apply the BiRNN-CRF model for general
sequence tagging to joint segmentation and POS
tagging for Chinese and achieve state-of-the-art
accuracy. The experimental results show that our
tagger is robust and accurate across datasets of dif-
ferent sizes, genres and annotation schemes. 2. We
propose a novel approach for vector representa-
tions of characters that leads to substantial im-
provements over the baseline model. 3. Additional
improvements are obtained via exploring the fea-
sibility of utilising sub-character level informa-
tion. 4. We provide an open-source implementa-
tion of our method along with pre-trained charac-
ter embeddings.1

2 Model

2.1 Neural Network Architecture

Our baseline model is an adaptation of BiRNN-
CRF. As illustrated in Figure 1, the Chinese char-
acters are represented as vectors and fed into the
bidirectional recurrent layers. The character rep-
resentations will be described in detail in the fol-
lowing sections. For the recurrent layer, we em-
ploy GRU as the basic recurrent unit as it has
similar functionalities but fewer parameters com-
pared to LSTM (Chung et al., 2014). Dropout
(Srivastava et al., 2014) is applied to the outputs of
the bidirectional recurrent layers. The outputs are
concatenated and passed to the ﬁrst-order chain
CRF layer. The optimal sequence of the combi-
natory labels is predicted at the end. There is a
post processing step to retrieve both segmentation
and POS tags from the combinatory tags.

2.2 Tagging Scheme

Following the work of Kruengkrai et al. (2009a),
the employed tags indicating the word boundaries
are B, I, E, S representing a character at the be-
inside, end of a word or as a single-
ginning,
character word. The CRF layer models condi-
tional scores over all possible combinatory labels
given the input characters. Incorporating the tran-
sition scores between the successive labels, the op-

1 https://github.com/yanshao9798/tagger

(summer)

(too)

(hot)

夏

天

太

热

character
representations

forward
RNN

backward
RNN

CRF
Layer

GRU

GRU

GRU

GRU

GRU

GRU

GRU

GRU

B-NT

E-NT

S-AD

S-VA

Output

夏天 NT

太 AD 热 VA

Figure 1: The BiRNN-CRF model for joint Chi-
nese segmentation and POS tagging. The dashed
arrows indicate that dropout layers are applied to
the outputs of the recurrent layers.

timal sequence can be obtained efﬁciently via the
Viterbi algorithm both for training and decoding.
The time complexity for the Viterbi algorithm
is linear with respect to the sentence length n as
O(k2n), where k is constant and equals to the total
number of combinatory labels. The efﬁciency can
be improved if we reduce k. For some POS tags,
combining them with the full boundary tags is re-
dundant. For instance, only the functional word
的 can be tagged as DEG in Chinese Treebank
(Xue et al., 2005). Since it is a single-character
word, combinatory tags of B-DEG, I-DEG, and
E-DEG never occur in the experimental data and
should therefore be pruned to reduce the search
space. Similarly, if the maximum length of words
under a given POS tag is two in the training data,
we prune the corresponding label.

2.3 Character Representations

We propose three different approaches to effec-
tively represent Chinese characters as vectors for
the neural network.

2.3.1 Concatenated N-gram

The prevalent character-based neural models as-
sume that larger spans of text, such as words and

(summer)

(too)

(hot)

夏

天

太

热

太

. . .

n-gram
character
Representation
V3

Vi,i

Vi−1,i

Vi−1,i+1

Figure 2: Vector representations of the Chinese
characters as incrementally concatenated n-gram
vectors in a given context.

n-grams, can be represented by the sequence of
characters that they consist of. For example, the
vector representation Vm,n of a span cm,n is ob-
tained by passing the vector representations vi of
the characters ci to a functions f as:

Vm,n = f (vm, vm+1, ..., vn)

(1)

where f is usually an RNN (Ling et al., 2015) or a
CNN (dos Santos and Zadrozny, 2014).

In this paper, instead of completely relying on
the BiRNN to extract contextual features from
context-free character representations, we encode
rich local information in the character vectors via
employing the incrementally concatenated n-gram
representation as demonstrated in Figure 2.
In
the example, the vector representation of the pivot
character 太 in the given context is the concatena-
tion of the context-free vector representation Vi,i
of 太 itself along with Vi−1,i of the bigram 天太
as well as Vi−1,i+1 of the trigram 天太热.

Instead of constructing the vector representation
Vm,n of an n-gram cm,n from the character repre-
sentations as in Equation 1, Vm,n in different or-
ders, such as Vi,i, Vi−1,i, and Vi−1,i+1, are ran-
domly initialised separately. We use a single spe-
cial vector to represent all the unknown n-grams
per order. The n-grams in different orders are then
concatenated incrementally to form up the vector
representations of a Chinese character in the given
context, which is passed further to the recurrent
layers. As shown in Figure 2, the neighbouring
characters on both sides of the pivot character are
taken into account.

2.3.2 Radicals and Orthographical Features

Chinese characters are logograms. As opposed to
alphabetical languages, there is rich information

Conv.
layers

Max
pooling

fully-
connected
layer

Figure 3: Convolutional Neural Networks for or-
thographical feature extraction. Only the ﬁrst
convolutional layer and its following max-pooling
layer are presented.

encrypted in the graphical components. For in-
stance, the Chinese characters that share the same
part 钅 (gold) are all somewhat related to metals,
such as 银 (silver), 铁 (iron), 针 (needle) and so
on. The shared part 钅 is known as the radical,
which functions as a semantic indicator. Hence,
we investigate the effectiveness of using the infor-
mation below the character level for our task.

Radicals are ﬁrst represented as randomly ini-
tialised vectors and concatenated as parts of the
character representations. Radicals are tradition-
ally used as indices in Chinese dictionaries.
In
our approach, they are retrieved via the unicode
representation of Chinese characters as the char-
acters that share the same radical are grouped to-
gether. They are organised in consistent with the
categorisation in Kangxi Dictionary (康熙字典),
in which all the Chinese characters are grouped
under 214 different radicals. We only employ the
radicals of the common characters in the unicode
range of (U+4E00, U+9FFF). For the characters
out of the range and the non-Chinese characters,
we use a single special vector as their radical rep-
resentations.

Additionally,

instead of presuming that only
radicals encode sub-character level information,
we use convolutional neural networks (CNNs) to
extract graphical features from scratch by regard-
ing the Chinese characters as pictures and feed
their pixels as the input. As illustrated in Figure 3,
there are two convolutional layers, both followed
by a max-pooling layer. The output of the second
max-pooling layer is reshaped and passed to a reg-
ular fully-connected layer. Dropout is applied to
the output of the fully-connected layer. The out-
put is then concatenated as parts of the character
representation. The CNNs are trained jointly with
the main network.

2.3.3 Pre-trained Character Embeddings
The context-free vector representations of single
characters introduced in section 2.3.1 can be re-
placed by pre-trained character embeddings re-
trieved from large corpora. We employ GloVe
(Pennington et al., 2014) to train our character em-
beddings on Wikipedia2 and the freely available
Sogou News Corpora (SogouCS).3 We use ran-
domly initialised vectors as the representations of
the characters that are not in the embedding vo-
cabulary. Pre-trained embeddings for higher-order
n-grams are not employed in this paper.

2.4 Ensemble Decoding

At the ﬁnal decoding phase, we use ensemble de-
coding, a simple averaging technique, to mitigate
the deviations led by random weight initialisation
of the neural network. For the chain CRF decoder,
the ﬁnal sequence of the combinatory tags y is
obtained via the conditional scores S(yi|xi) and
the transition scores T (yi, yj) given the input se-
quence x.
Instead of computing the optimal se-
quence with respect to the scores returned by a
single model, both the conditional scores and tran-
sition scores are averaged over four models with
identical parameter settings that are trained inde-
pendently:

y∗ = argmax
y∈L(x)

p(y|x; ¯{S}, ¯{T })

(2)

Ensemble decoding is only applied to the best
performing model according to the feature experi-
ments at the ﬁnal testing phase in this paper.

3 Implementation

Our neural networks are implemented using the
TensorFlow 1.2.0 library (Abadi et al., 2016). We
group the sentences with similar lengths into the
same buckets and the sentences in the same bucket
are padded to the same length accordingly. We
construct sub-computational graphs respectively
for each bucket. The training and tagging speed of
our neural network on GPU devices can be dras-
tically improved thanks to the bucket model. The
training time is proportional to both the size of the
training set and the number of POS tags.

Table 1 shows the adopted hyper-parameters.
We use one set of parameters for all the experi-
ments on different datasets. The weights of the

2https://dumps.wikimedia.org/
3http://www.sogou.com/labs/resource/cs.php

Char. embedding size
n-gram embedding size
Radical embedding size
Character font
Character size
GRU state size
Conv. ﬁlter size
Conv. ﬁlter number
Max pooling size
Fully-connected size
Optimiser
Initial learning rate
Decay rate
Gradient Clipping
Dropout rate
Batch size

64
64
30
simsun (宋体)
30 × 30
200
5 × 5
32
2 × 2
100
Adagrad
0.1
0.05
5.0
0.5
10

Table 1: Hyper-parameters.

neural networks, including the randomly intialised
embeddings, are initialised using the scheme in-
troduced in Glorot and Bengio (2010). The net-
work is trained with the error back-propagation
algorithm. All the embeddings are ﬁne-tuned dur-
ing training by back-propagating gradients. Ada-
grad (Duchi et al., 2011) with mini-batches is em-
ployed for optimisation with the initial learning
rate η0 = 0.1, which is updated with a decay rate
ρ = 0.05 as ηt =
ρ(t−1)+1 , where t is the index of
the current epoch.

η0

The model is optimised with respect to the per-
formance on the development sets. F1-scores of
both segmentation (F 1Seg) and joint POS tagging
(F 1Seg&T ag) are employed as F 1Seg ∗ F 1Seg&T ag
to measure the performance of the model after
each epoch during training.
In our experiments,
the models are trained for 30 epochs. To ensure
that the weights are well optimised, we only adopt
the best epoch after the model is trained at least for
5 epochs.

4 Experiments

4.1 Datasets

We employ three different datasets for our ex-
periments, namely Chinese Treebank (Xue et al.,
2005) 5.0 (CTB5) and 9.0 (CTB9) along with the
Chinese section in Universal Dependencies (UD
Chinese) (Nivre et al., 2016) of version 1.4.

CTB5 is the most employed dataset for joint
segmentation and POS tagging in previous re-
It is composed of newswire data. We
search.
follow the conventional split of the dataset as
in Jiang et al. (2008); Kruengkrai et al. (2009a);

Zhang and Clark (2010). CTB9 consists of source
texts in various genres, CTB5 is a subset of it. We
split CTB9 by referring to the partition of CTB7
in Wang et al. (2011). We extend the training,
development and test sets from CTB5 by adding
80% of the new data in CTB9 to training and
10% each to development and test. The double-
checked ﬁles are all placed in the test set. The
detailed splitting information can be found in Ta-
ble 10 in Appendix. UD Chinese has both univer-
sal and language-speciﬁc POS tags. They are not
predicted jointly in this paper. For the sake of con-
venience, we refer the universal tags as UD1 and
the language-speciﬁc ones as UD2 in the follow-
ing sessions. To make the model beneﬁt from the
pre-trained character embeddings, we convert the
texts in UD Chinese from traditional Chinese into
simpliﬁed Chinese.

Table 2 shows brief statistics of the employed
The out-of-
datasets in numbers of words.
vocabulary (OOV) words are counted regardless
of the POS tags. We can see that the size of
UD Chinese is much smaller and it has a notably
higher OOV rate than the two CTB datasets.

Train
Dev
Test
OOV rate (dev)
OOV rate (test)

CTB5
493,935
6,821
8,008
8.11
3.47

CTB9
1,696,322
136,468
242,317
2.93
3.13

UD Chinese
98,608
12,663
12,012
12.13
12.46

Table 2: Statistics of the employed datasets in
numbers of words.

4.2 Experimental Results

Both segmentation (Seg) and joint segmentation
and POS tagging (Seg&Tag) are evaluated in our
experiments.4 We employ word-level recall (R),
precision (P) and F1-score (F) as the evaluation
metrics. A series of feature experiments are car-
ried out on the development sets to evaluate the ef-
fectiveness of the proposed approaches for vector
representations of the characters. Finally, the best
performing model according to the feature experi-
ment is applied to the test sets in the forms of sin-
gle as well as ensemble and compared with ZPar.

4The evaluation script is downloaded from:

http://people.sutd.edu.sg/ yue zhang/doc/doc/joint ﬁles
/evaluate.py

4.2.1 Feature Experiments

Table 3 shows the evaluation results of using
concatenated n-grams up to different orders as
the character representations. By introducing 2-
grams, we can obtain vast improvements over
solely using the conventional character embed-
dings, which indicates that not all the local infor-
mation can be effectively captured by the BiRNN
using context-free character representations. Util-
ising the concatenated n-grams ensures that the
same character has different but yet closely related
representations in different contexts, which is an
effective way to encode contextual features.

From the table, we see that notable improve-
ments can be achieved further via employing 3-
grams. 4-grams still help but only to CTB9 while
adding 5-grams achieves almost no improvement
on any of the datasets. The results imply that con-
catenating higher-order n-grams can be detrimen-
tal, especially on datasets in smaller sizes due to
the fact that higher-order n-grams are more sparse
in the training data and their vector representations
cannot be trained well enough. Besides, adopting
higher-order n-grams also substantially increases
the numbers of weights and therefore both train-
ing and decoding become less efﬁcient. Under the
circumstances, we consider that 3-gram model is
optimal for our task and it is employed in the fol-
lowing experiments for all the datasets.

The concatenated n-grams have a bigger size
compared to the basic character representation.
We conduct one additional experiment using a ba-
sic 1-gram character model with a larger character
vector size of 300. The evaluation scores are sim-
ilar to the basic character model with the size of
64, which shows that the improvements obtained
by the n-gram model are not matched by enlarg-
ing the size of the vector representation.

The evaluation scores of the sub-character level
features are reported in Table 4. The relevant fea-
tures are added on top of the 3-gram model. Em-
ploying radicals and graphical features achieves
similar improvements for segmentation while util-
ising radicals obtains better results for joint POS
tagging on CTB5. However, radicals are not a very
effective feature on CTB9, UD1 and UD2 whereas
a notable enhancement is observed when employ-
ing graphical features on UD1. Using CNNs to
extract graphical features is computationally much
more expensive than simply adopting radicals via
a lookup table, especially when GPU is not avail-

CTB5

CTB9

UD1

UD2

Seg
95.22
95.14
97.08
97.14
97.13
96.94

Seg&Tag
91.71
91.52
93.72
94.01
94.02
93.84

Seg
95.53
95.25
96.30
96.47
96.48
96.50

Seg&Tag
90.89
90.43
91.66
91.75
91.89
91.88

Seg
91.84
91.74
94.50
94.36
94.25
94.40

Seg&Tag
85.43
85.07
88.36
88.27
88.37
88.47

Seg
92.40
91.83
94.42
94.43
94.16
94.25

Seg&Tag
85.63
84.93
88.14
88.32
88.24
88.03

size = 300
1-gram
2-gram
3-gram
4-gram
5-gram

Table 3: Evaluation of concatenated n-gram representations on the development sets in F1-scores

CTB5

CTB9

UD1

UD2

3-gram
+radicals
+graphical

Seg
97.14
97.26
97.25

Seg&Tag
94.01
94.42
94.08

Seg
96.47
96.42
96.50

Seg&Tag
91.75
91.74
91.78

Seg
94.36
94.37
94.50

Seg&Tag
88.27
88.21
88.59

Seg
94.43
94.39
94.23

Seg&Tag
88.32
88.36
87.95

Table 4: Evaluation of sub-character level features on the development sets in F1-scores.

CTB5

CTB9

UD1

UD2

Seg
95.14
95.82
97.26
97.42

Seg&Tag
91.52
92.45
94.42
94.58

Seg
95.25
95.44
96.42
96.56

Seg&Tag
90.43
90.57
91.74
91.96

Seg
91.74
92.77
94.37
95.12

Seg&Tag
85.07
86.48
88.21
89.69

Seg
91.83
93.01
94.39
95.02

Seg&Tag
84.93
86.48
88.36
89.20

1-gram
+GloVe
3-gram, radicals
+GloVe

Table 5: Evaluation of the pre-trained character embeddings on the development sets in F1-scores.

able.

From Table 5, we can learn that employing pre-
trained embeddings as initial vector representa-
tions for the characters achieves improvements in
general, whereas the improvements are compara-
tively smaller if the the concatenated n-gram rep-
resentations and the radicals are added. Addition-
ally, the improvements obtained on UD Chinese
are more signiﬁcant than on CTBs, which indi-
cates that the pre-trained character embeddings are
more beneﬁcial to the datasets in smaller sizes.

In general, the feature experiments indicate that
the proposed Chinese character representations are
all sensitive to dataset size. Using higher-order
n-grams requires more data for training. On the
other hand, the pre-trained embeddings are more
vital if the dataset
the
is small.
different representations are sensitive to tagging
schemes as the evaluation results on UD1 and
UD2 are quite diverse. Taking both robustness and
efﬁciency into consideration, we select 3-grams
along with radicals and pre-trained character em-
beddings as the best setting for ﬁnal evaluation.

In addition,

4.2.2 Final Results

Table 6 shows the ﬁnal scores on the test sets.
The complete evaluation results in precision, re-

call and F1-scores are contained in Table 11 and
Table 12 in Appendix. Our system is compared
with ZPar. We retrained a ZPar model on CTB5
that reproduces the evaluation scores reported in
Zhang and Clark (2010). We also modiﬁed the
source code so that it is applicable to CTB9 and
UD Chinese. In addition, we perform the mid-p
McNemar’s test (Fagerland et al., 2013) to exam-
ine the statistical signiﬁcances.

the single model

As shown in Table 6,

is
worse than the ensemble model but still outper-
forms ZPar on all the tested datasets. ZPar in-
corporates discrete local features at both character
and word levels and employs structured percep-
tron for global optimisation, whereas we encode
rich local information in the character represen-
tations and employ BiRNN to effectively extract
global features and capture long term dependen-
cies. The chain CRF layer is used for sentence-
level optimisation, which functions similarly to
structured perceptron. As opposed to the tag-
gers built with traditional machine learning algo-
rithms, our model avoids heavy feature engineer-
ing and beneﬁts from large plain texts via utilis-
It is also
ing pre-trained character embeddings.
very ﬂexible to add sub-character level features as
parts of the character representations. The model

ZPar
Single (3-gram, rad., GloVe)
Ensemble (4 models)
ZPar
Single
Ensemble

OOV recall

CTB5

CTB9

UD1

UD2

Seg
97.77
97.89
98.02*
76.98
78.78
77.34

Seg&Tag
93.82
94.07**
94.38**
68.34
69.78
70.50

Seg
96.28
96.47**
96.67**
75.83
74.16
75.52

Seg&Tag
91.62
91.89**
92.34**
63.71
62.58
64.14

Seg
93.75
94.85**
95.16**
78.69
81.36
82.16

Seg&Tag
88.11
89.41**
89.75*
64.40
67.40
68.14

Seg
93.98
94.93**
95.09*
79.56
81.16
81.56

Seg&Tag
88.16
89.00**
89.42**
64.86
66.73
68.00

Table 6: Evaluations of the best model on the ﬁnal test sets in F1-scores as well as the recalls of out-of-
vocabulary words. Signiﬁcance tests for Single are in comparison to ZPar, while tests for Ensemble are
in comparison to Single (**p < 0.01, *p < 0.05)

performs very well despite being fully character
based. Moreover, it has clear advantages when ap-
plied to smaller datasets like UD Chinese, while
the prevalence is much smaller on CTB5.

Both our model and ZPar segment OOV words
in UD Chinese with higher accuracies than the
ones in CTBs despite that UD Chinese is no-
tably smaller and the overall OOV rate is higher.
Compared to CTB, the words in UD Chinese are
more ﬁne-grained and the average word length is
shorter, which makes it easier for the tagger to
correctly segment the OOV words as Zhang et al.
(2016) show that the longer words are more difﬁ-
cult to be segmented correctly. For joint POS tag-
ging for OOV words, the two systems both per-
form signiﬁcantly better on CTB5 as it is only
composed of news text.

In general, our model is more robust to OOV
words than ZPar, except that ZPar yields better re-
sult for segmentation by a small margin on CTB9.
ZPar also obtains higher accuracy for joint POS
tagging than the single model on CTB9. The dif-
ferences between ZPar and our model for both seg-
mentation and POS tagging are more substantial
on UD Chinese, which indicates that our model
is relatively more advantageous for handling OOV
words when the training sets are small, whereas
ZPar is able to perform equally well when sub-
stantial amount of training data is available as they
achieve similar results on the CTB sets.

is further

The single model

improved by
ensemble-averaging four independently trained
models. The improvements are not drastic but they
are observed systematically across all the datasets.
In general, ensemble decoding is beneﬁcial to han-
dling OOV words as well except that a small drop
for segmentation on CTB5 is observed.

Ensemble

ZPar

Seg

BN 97.89*
96.67**
CS
FM 96.54**
MG 94.54**
NS
SM 96.43**
97.29**
SP
WB 94.27**

97.56

Seg&Tag
94.48**
91.78**
91.92**
89.23**
93.92**
91.78**
93.93**
88.44**

Seg
97.68
95.61
96.30
94.22
97.49
96.13
96.69
93.38

Seg&Tag
94.22
90.15
91.51
88.60
93.70
90.32
93.35
86.88

Table 7: Evaluation on Broadcast News (BN),
(CS), Forum (FM), Magazine
Conversations
(MG), News (NS), Short Messages (SM), Speech
(SP) and Weblogs (WB) in CTB9. (**p < 0.01,
*p < 0.05)

of CTB9 in different genres. Our model surpasses
ZPar on all the genres in both segmentation and
joint POS tagging. The differences are subtle
on the genres in which the texts are normalised,
such as News and Broadcast News. This, to a
very large extent, explains why our model is only
marginally better than ZPar on CTB5, whereas the
experimental results reveal that our model is sub-
stantially better at processing non-standard text as
it yields signiﬁcantly higher scores on Conversa-
tions, Short Messages and Weblogs. The evalua-
tion results of both our model and ZPar vary sub-
stantially across different genres as some genres
are fundamentally more challenging to process.

Our models are compared with the previous
best-performing systems on CTB5 in Table 8. Our
models are not optimised particularly with respect
to CTB5 but still yield competitive results, espe-
cially for joint POS tagging. We are the ﬁrst to re-
port evaluation scores on CTB9 and UD Chinese.

4.3 Tagging Speed

Table 7 displays the evaluation of the ensem-
ble model and ZPar on the decomposed test sets

Our joint segmentation and POS tagger is very ef-
ﬁcient with GPU devices and can be practically

Kruengkrai et al. (2009b)
Zhang and Clark (2010)
Sun (2011)
Wang et al. (2011)
Shen et al. (2014)
Single
Ensemble

Seg
97.98
97.78
98.17
98.11
98.02
97.89
98.02

Seg&Tag
94.00
93.67
94.02
94.18
93.80
94.07
94.38

Table 8: Result comparisions on CTB5 in F1-
scores.

used for processing very large ﬁles. The mem-
ory demand of decoding is drastically milder com-
pared to training, a large batch size therefore can
be employed. The tagger takes constant time to
build the sub-computational graphs and load the
weights.

With bucket size of 10 and batch size of 500, Ta-
ble 9 shows the tagging speed of the tagger using
a single Tesla K80 GPU card and the pre-trained
model on CTB5. The tagging speed of ZPar is
also presented for comparison. GPU devices are
not supported by ZPar and therefore the tagging
speed is calculated using an Intel Core i7 CPU.

Single
Ensemble
ZPar

Init. Time (s)
20
23
4

Sentence/s
299.40
230.41
134.59

Chars/s
40,188.17
30,928.22
18,090.09

Table 9: Tagging speed in numbers of sentences
and characters per second

5 Related Work

fundamental BiRNN-CRF

The
architecture
is task-independent and has been applied to
many sequence tagging problems on Chinese.
Peng and Dredze (2016) adopt the model for Chi-
nese segmentation and named entity recognition
in the context of multi-task and multi-domain
learning. Dong et al. (2016) employ a character
level BiLSTM-CRF model that utilises radical-
level
information for Chinese named entity
recognition. Ma and Sun (2016) use a similar
architecture but feed the Chinese characters pair-
wise as edge embeddings instead. Their model
is applied respectively to chunking, segmentation
and POS tagging.

Zheng et al. (2013) model joint Chinese seg-
mentation and POS tagging via predicting the
combinatory segmentation and POS tags. They

employ the adaptation of the feed forward neu-
ral network introduced in Collobert et al. (2011)
that only extracts local features in a context win-
dow. A perceptron-style training algorithm is em-
ployed for sentence level optimisation, which is
the same as the training algorithm of the BiRNN-
CRF model. Their proposed model is not evalu-
ated on CTB5 and therefore difﬁcult to be com-
pared with our system. Kong et al. (2015) apply
segmental recurrent neural networks to joint seg-
mentation and POS tagging but the evaluation re-
sults are substantially below the state-of-the-art on
CTB5.

Bojanowski et al. (2016) retrieve word embed-
dings via representing words as a bag of charac-
ter n-grams for morphologically rich languages.
A similar character n-gram model is proposed
by Wieting et al. (2016).
Sun et al. (2014) at-
tempt to encode radical information into the con-
The radical-
ventional character embeddings.
enhanced embeddings are employed and eval-
uated for Chinese segmentation.
The results
show that radical-enhanced embeddings outper-
form both skip-ngram and continues bag-of-word
(Mikolov et al., 2013) in word2vec.

6 Conclusion

We adapt and apply the BiRNN-CRF model for se-
quence tagging in NLP to joint Chinese segmenta-
tion and POS tagging via predicting the combina-
tory tags of word boundaries and POS tags. Con-
catenated n-grams as well as sub-character fea-
tures are employed along with the conventional
pre-trained character embeddings as the vector
representations for Chinese characters. The fea-
ture experiments indicate that concatenated n-
grams contribute substantially. However, both rad-
icals and graphical features as sub-character level
information are less effective. How to incorpo-
rate the sub-character level information more ef-
fectively will be further explored in the future.

The proposed model is extensively evaluated on
CTB5, CTB9 and UD Chinese. Despite the fact
that different character representation approaches
are sensitive to data size and tagging schemes, we
use one set of hyper-parameters and universal fea-
ture settings so that the model is robust across
datasets. The experimental results on the test sets
show that our model outperforms ZPar which is
built on structured perceptron on all the datasets.
We obtain state-of-the-art performances on CTB5.

The results on UD Chinese and CTB9 also reveal
that our model has great advantages in processing
non-standard text, such as weblogs, forum text and
short messages. Moreover, the implemented tag-
ger is very efﬁcient with GPU devices and there-
fore can be applied to tagging very large ﬁles.

Acknowledgments

We acknowledge the computational resources pro-
vided by CSC in Helsinki and Sigma2 in Oslo
through NeIC-NLPL (www.nlpl.eu). This work
is supported by the Chinese Scholarship Council
(CSC) (No. 201407930015).

References

Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng
Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016.
TensorFlow: A system for large-
scale machine learning. In Proceedings of the 12th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI). Savannah, Georgia,
USA.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
arXiv preprint
tors with subword information.
arXiv:1607.04606 .

Kyunghyun Cho, Bart Van Merri¨enboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259 .

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555 .

Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
Journal of Machine Learning Research
scratch.
12(August):2493–2537.

Chuanhai Dong,

Jiajun Zhang, Chengqing Zong,
Masanori Hattori, and Hui Di. 2016. Character-
based LSTM-CRF with radical-level features for
Chinese named entity recognition. In International
Conference on Computer Processing of Oriental
Languages. Springer, pages 239–250.

and stochastic optimization.
Learning Research 12(Jul):2121–2159.

Journal of Machine

Morten W Fagerland, Stian Lydersen, and Petter Laake.
2013. The McNemar test for binary matched-pairs
data: mid-p and asymptotic are better than exact
conditional. BMC medical research methodology
13(1):91.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neural
networks. In Aistats. pages 249–256.

Sepp Hochreiter and J¨urgen Schmidhuber. 1997.
Neural computation

Long short-term memory.
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991 .

Wenbin Jiang, Liang Huang, Qun Liu, and Yajuan L¨u.
2008. A cascaded linear model for joint Chinese
word segmentation and part-of-speech tagging.
In
In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics. Citeseer.

Lingpeng Kong, Chris Dyer, and Noah A Smith.
2015. Segmental recurrent neural networks. arXiv
preprint arXiv:1511.06018 .

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009a. An error-driven word-character hy-
brid model for joint Chinese word segmentation and
In Proceedings of the Joint Confer-
POS tagging.
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP: Volume 1-Volume
1. Association for Computational Linguistics, Sin-
gapore, pages 513–521.

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, WANG Yiou, Kentaro Torisawa, and Hi-
toshi Isahara. 2009b. Joint Chinese word segmen-
tation and POS tagging using an error-driven word-
character hybrid model. IEICE transactions on in-
formation and systems 92(12):2298–2305.

John Lafferty, Andrew McCallum, Fernando Pereira,
et al. 2001. Conditional random ﬁelds: Probabilis-
tic models for segmenting and labeling sequence
data. In Proceedings of the eighteenth international
conference on machine learning, ICML. volume 1,
pages 282–289.

C´ıcero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
In Proceedings of The
part-of-speech tagging.
31st International Conference on Machine Learn-
ing. pages 1818–1826.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning

Wang Ling, Chris Dyer, W. Alan Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luis Marujo,
and Tiago Luis. 2015. Finding function in form:
Compositional character models for open vocabu-
lary word representation. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, pages 1520–1530.

on Neural Information Processing. Springer, pages
279–286.

Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka,
Wenliang Chen, Yujie Zhang, and Kentaro Torisawa.
2011.
Improving Chinese word segmentation and
POS tagging with semi-supervised methods using
large auto-analyzed data. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing. Asian Federation of Natural Language
Processing, pages 309–317.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. CHARAGRAM: Embedding words
and sentences via character n-grams. arXiv preprint
arXiv:1607.02789 .

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The Penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural lan-
guage engineering 11(02):207–238.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2016.
Transition-based neural word segmentation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers). Association for Computational Linguistics,
pages 421–431.

Yue Zhang and Stephen Clark. 2008. Joint word seg-
mentation and POS tagging using a single percep-
In Proceedings of the 46th Annual Meeting
tron.
of the Association for Computational Linguistics.
Columbus, Ohio, pages 888–896.

Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and POS-tagging using
In Proceedings of
a single discriminative model.
the 2010 Conference on Empirical Methods in Natu-
ral Language Processing. Association for Computa-
tional Linguistics, Massachusetts, USA, pages 843–
852.

Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. 2013.
Deep learning for Chinese word segmentation and
In Proceedings of the 2013 Confer-
POS tagging.
ence on Empirical Methods in Natural Language
Processing. Seattle, USA, pages 647–657.

Shuming Ma and Xu Sun. 2016. A new recurrent neu-
ral CRF for learning non-linear edge features. arXiv
preprint arXiv:1611.04233 .

Xuezhe Ma and Eduard Hovy. 2016.

End-to-end
sequence labeling via bi-directional LSTM-CNNs-
In Proceedings of the 54th Annual Meeting
CRF.
of the Association for Computational Linguistics.
Berlin, Germany, page 10641074.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
Efﬁcient estimation of word
arXiv preprint

frey Dean. 2013.
representations in vector space.
arXiv:1301.3781 .

Hwee Tou Ng and Jin Kiat Low. 2004. Chinese part-of-
speech tagging: One-at-a-time or all-at-once? word-
In Proceedings of the
based or character-based?
2004 Conference on Empirical Methods in Natural
Language Processing. Barcelona, Spain, pages 277–
284.

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the 10th In-
ternational Conference on Language Resources and
Evaluation (LREC 2016). pages 1659–1666.

Nanyun Peng and Mark Dredze. 2016. Multi-task
multi-domain representation learning for sequence
tagging. arXiv preprint arXiv:1608.02689 .

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP). Doha, Qatar,
pages 1532–1543.

Mo Shen, Hongxiao Liu, Daisuke Kawahara, and
Sadao Kurohashi. 2014. Chinese morphological
analysis with character-level POS tagging. In Pro-
ceedings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguistics,
Baltimore, Maryland, pages 253–258.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overﬁtting. Journal of Machine Learning Re-
search 15(1):1929–1958.

Weiwei Sun. 2011. A stacked sub-word model for joint
Chinese word segmentation and part-of-speech tag-
In Proceedings of the 49th Annual Meeting
ging.
of the Association for Computational Linguistics:
Human Language Technologies-Volume 1. Associ-
ation for Computational Linguistics, Portland, Ore-
gon, USA, pages 1385–1394.

Yaming Sun, Lei Lin, Nan Yang, Zhenzhou Ji, and
Xiaolong Wang. 2014. Radical-enhanced Chinese
character embedding. In International Conference

Appendix

Dataset CTB chapter IDs
Train

0044-0143, 0170-0270, 0400-0899,
1001-1017, 1019, 1021-1035, 1037-
1043, 1045-1059, 1062-1071, 1073-
1117, 1120-1131, 1133-1140, 1143-
1147, 1149-1151, 2000-2915, 4051-
4099, 4112-4180, 4198-4368, 5000-
5446, 6000-6560, 7000-7013
0301-0326, 2916-3030, 4100-4106,
4181-4189, 4369-4390, 5447-5492,
6561-6630, 7013-7014
0001-0043, 0144-0169, 0271-0301,
0900-0931, 1018, 1020, 1036, 1044,
1060, 1061, 1072, 1118, 1119, 1132,
1141, 1142, 1148, 3031-3145, 4107-
4111, 4190-4197, 4391-4411, 5493-
5558, 6631-6700, 7015-7017

Dev

Test

Table 10: The split of Chinese Treebank 9.0

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
97.49
97.57
96.38
96.61
94.71
95.07
94.98
95.00

R
98.30
98.47
96.55
96.74
94.99
95.27
94.93
95.22

F
97.89
98.02
96.47
96.67
94.85
95.17
94.93
95.11

Table 11: Evaluation of segmentations in preci-
sion, recall and F1-scores

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
93.68
93.95
91.81
92.28
89.28
89.67
88.95
89.33

R
94.47
94.81
91.97
92.40
89.54
89.86
89.04
89.54

F
94.07
94.38
91.89
92.34
89.41
89.77
89.00
89.43

Table 12: Evaluation of joint segmentations and
POS tagging in precision, recall and F1-scores

7
1
0
2
 
p
e
S
 
2
1
 
 
]
L
C
.
s
c
[
 
 
3
v
4
1
3
1
0
.
4
0
7
1
:
v
i
X
r
a

Character-based Joint Segmentation and POS Tagging for Chinese
using Bidirectional RNN-CRF

Yan Shao and Christian Hardmeier and J¨org Tiedemann∗ and Joakim Nivre
Department of Linguistics and Philology, Uppsala University
∗Department of Modern Languages, University of Helsinki
{yan.shao, christian.hardmeier, joakim.nivre}@lingfil.uu.se
jorg.tiedemann@helsinki.fi

Abstract

We present a character-based model for
joint segmentation and POS tagging for
Chinese. The bidirectional RNN-CRF ar-
chitecture for general sequence tagging
is adapted and applied with novel vec-
tor representations of Chinese characters
that capture rich contextual information
and sub-character level features.
The
proposed model is extensively evaluated
and compared with a state-of-the-art tag-
ger respectively on CTB5, CTB9 and UD
Chinese. The experimental results indi-
cate that our model is accurate and robust
across datasets in different sizes, genres
and annotation schemes. We obtain state-
of-the-art performance on CTB5, achiev-
ing 94.38 F1-score for joint segmentation
and POS tagging.

1 Introduction

Word segmentation and part-of-speech (POS) tag-
ging are core steps for higher-level natural lan-
guage processing (NLP) tasks. Given the raw text,
segmentation is applied at the very ﬁrst step and
POS tagging is performed on top afterwards. As
by convention the words in Chinese are not de-
limited by spaces, segmentation is non-trivial, but
its accuracy has a signiﬁcant impact on POS tag-
ging. Moreover, POS tags provide useful informa-
tion for word segmentation. Thus, modelling word
segmentation and POS tagging jointly can out-
perform the pipeline models (Ng and Low, 2004;
Zhang and Clark, 2008).

POS tagging is a typical sequence tagging prob-
lem over segmented words, while segmentation
also can be modelled as a character-level tagging
problem via predicting the labels that identify the
word boundaries. Ng and Low (2004) propose a

joint model which predicts the combinatory la-
bels of segmentation boundaries and POS tags at
the character level. Joint segmentation and POS
tagging becomes a standard character-based se-
quence tagging problem and therefore the general
machine learning algorithms for structured predic-
tion can be applied.

tagging tasks

The bidirectional

recurrent neural network
(RNN) using conditional random ﬁelds (CRF)
(Lafferty et al., 2001) as the output
interface
for sentence-level optimisation (BiRNN-CRF)
achieves state-of-the-art accuracies on various
sequence
(Huang et al., 2015;
Ma and Hovy, 2016) and outperforms the tradi-
tional linear statistical models. RNNs with gated
recurrent cells, such as long-short term memory
(LSTM) (Hochreiter and Schmidhuber, 1997) and
gated recurrent units (GRU) (Cho et al., 2014)
are capable of capturing long dependencies and
retrieving rich global information. The sequential
CRF on top of the recurrent layers ensures that the
optimal sequence of tags over the entire sentence
is obtained.

In this paper, we model

joint segmentation
and POS tagging as a fully character-based se-
quence tagging problem via predicting the com-
binatory labels. The BiRNN-CRF architecture is
adapted and applied. The Chinese characters are
fed into the neural networks as vector representa-
tions. In addition to utilising the pre-trained char-
acter embeddings, we propose a concatenated n-
gram-representation of the characters. Further-
more, sub-character level
information, namely
radicals and orthographical features extracted by
convolutional neural networks (CNNs), are also
incorporated and tested. Three datasets of dif-
ferent sizes, genres and with different annotation
schemes are employed for evaluation. Our model
is thoroughly evaluated and compared with the
joint segmentation and POS tagging model in ZPar

(Zhang and Clark, 2010), which is a state-of-the-
art joint tagger using structured perceptron and
beam decoding. According to the experimental re-
sults, our proposed model outperforms ZPar on all
the datasets in terms of accuracy.

The main contributions of this work include:
1. We apply the BiRNN-CRF model for general
sequence tagging to joint segmentation and POS
tagging for Chinese and achieve state-of-the-art
accuracy. The experimental results show that our
tagger is robust and accurate across datasets of dif-
ferent sizes, genres and annotation schemes. 2. We
propose a novel approach for vector representa-
tions of characters that leads to substantial im-
provements over the baseline model. 3. Additional
improvements are obtained via exploring the fea-
sibility of utilising sub-character level informa-
tion. 4. We provide an open-source implementa-
tion of our method along with pre-trained charac-
ter embeddings.1

2 Model

2.1 Neural Network Architecture

Our baseline model is an adaptation of BiRNN-
CRF. As illustrated in Figure 1, the Chinese char-
acters are represented as vectors and fed into the
bidirectional recurrent layers. The character rep-
resentations will be described in detail in the fol-
lowing sections. For the recurrent layer, we em-
ploy GRU as the basic recurrent unit as it has
similar functionalities but fewer parameters com-
pared to LSTM (Chung et al., 2014). Dropout
(Srivastava et al., 2014) is applied to the outputs of
the bidirectional recurrent layers. The outputs are
concatenated and passed to the ﬁrst-order chain
CRF layer. The optimal sequence of the combi-
natory labels is predicted at the end. There is a
post processing step to retrieve both segmentation
and POS tags from the combinatory tags.

2.2 Tagging Scheme

Following the work of Kruengkrai et al. (2009a),
the employed tags indicating the word boundaries
are B, I, E, S representing a character at the be-
inside, end of a word or as a single-
ginning,
character word. The CRF layer models condi-
tional scores over all possible combinatory labels
given the input characters. Incorporating the tran-
sition scores between the successive labels, the op-

1 https://github.com/yanshao9798/tagger

(summer)

(too)

(hot)

夏

天

太

热

character
representations

forward
RNN

backward
RNN

CRF
Layer

GRU

GRU

GRU

GRU

GRU

GRU

GRU

GRU

B-NT

E-NT

S-AD

S-VA

Output

夏天 NT

太 AD 热 VA

Figure 1: The BiRNN-CRF model for joint Chi-
nese segmentation and POS tagging. The dashed
arrows indicate that dropout layers are applied to
the outputs of the recurrent layers.

timal sequence can be obtained efﬁciently via the
Viterbi algorithm both for training and decoding.
The time complexity for the Viterbi algorithm
is linear with respect to the sentence length n as
O(k2n), where k is constant and equals to the total
number of combinatory labels. The efﬁciency can
be improved if we reduce k. For some POS tags,
combining them with the full boundary tags is re-
dundant. For instance, only the functional word
的 can be tagged as DEG in Chinese Treebank
(Xue et al., 2005). Since it is a single-character
word, combinatory tags of B-DEG, I-DEG, and
E-DEG never occur in the experimental data and
should therefore be pruned to reduce the search
space. Similarly, if the maximum length of words
under a given POS tag is two in the training data,
we prune the corresponding label.

2.3 Character Representations

We propose three different approaches to effec-
tively represent Chinese characters as vectors for
the neural network.

2.3.1 Concatenated N-gram

The prevalent character-based neural models as-
sume that larger spans of text, such as words and

(summer)

(too)

(hot)

夏

天

太

热

太

. . .

n-gram
character
Representation
V3

Vi,i

Vi−1,i

Vi−1,i+1

Figure 2: Vector representations of the Chinese
characters as incrementally concatenated n-gram
vectors in a given context.

n-grams, can be represented by the sequence of
characters that they consist of. For example, the
vector representation Vm,n of a span cm,n is ob-
tained by passing the vector representations vi of
the characters ci to a functions f as:

Vm,n = f (vm, vm+1, ..., vn)

(1)

where f is usually an RNN (Ling et al., 2015) or a
CNN (dos Santos and Zadrozny, 2014).

In this paper, instead of completely relying on
the BiRNN to extract contextual features from
context-free character representations, we encode
rich local information in the character vectors via
employing the incrementally concatenated n-gram
representation as demonstrated in Figure 2.
In
the example, the vector representation of the pivot
character 太 in the given context is the concatena-
tion of the context-free vector representation Vi,i
of 太 itself along with Vi−1,i of the bigram 天太
as well as Vi−1,i+1 of the trigram 天太热.

Instead of constructing the vector representation
Vm,n of an n-gram cm,n from the character repre-
sentations as in Equation 1, Vm,n in different or-
ders, such as Vi,i, Vi−1,i, and Vi−1,i+1, are ran-
domly initialised separately. We use a single spe-
cial vector to represent all the unknown n-grams
per order. The n-grams in different orders are then
concatenated incrementally to form up the vector
representations of a Chinese character in the given
context, which is passed further to the recurrent
layers. As shown in Figure 2, the neighbouring
characters on both sides of the pivot character are
taken into account.

2.3.2 Radicals and Orthographical Features

Chinese characters are logograms. As opposed to
alphabetical languages, there is rich information

Conv.
layers

Max
pooling

fully-
connected
layer

Figure 3: Convolutional Neural Networks for or-
thographical feature extraction. Only the ﬁrst
convolutional layer and its following max-pooling
layer are presented.

encrypted in the graphical components. For in-
stance, the Chinese characters that share the same
part 钅 (gold) are all somewhat related to metals,
such as 银 (silver), 铁 (iron), 针 (needle) and so
on. The shared part 钅 is known as the radical,
which functions as a semantic indicator. Hence,
we investigate the effectiveness of using the infor-
mation below the character level for our task.

Radicals are ﬁrst represented as randomly ini-
tialised vectors and concatenated as parts of the
character representations. Radicals are tradition-
ally used as indices in Chinese dictionaries.
In
our approach, they are retrieved via the unicode
representation of Chinese characters as the char-
acters that share the same radical are grouped to-
gether. They are organised in consistent with the
categorisation in Kangxi Dictionary (康熙字典),
in which all the Chinese characters are grouped
under 214 different radicals. We only employ the
radicals of the common characters in the unicode
range of (U+4E00, U+9FFF). For the characters
out of the range and the non-Chinese characters,
we use a single special vector as their radical rep-
resentations.

Additionally,

instead of presuming that only
radicals encode sub-character level information,
we use convolutional neural networks (CNNs) to
extract graphical features from scratch by regard-
ing the Chinese characters as pictures and feed
their pixels as the input. As illustrated in Figure 3,
there are two convolutional layers, both followed
by a max-pooling layer. The output of the second
max-pooling layer is reshaped and passed to a reg-
ular fully-connected layer. Dropout is applied to
the output of the fully-connected layer. The out-
put is then concatenated as parts of the character
representation. The CNNs are trained jointly with
the main network.

2.3.3 Pre-trained Character Embeddings
The context-free vector representations of single
characters introduced in section 2.3.1 can be re-
placed by pre-trained character embeddings re-
trieved from large corpora. We employ GloVe
(Pennington et al., 2014) to train our character em-
beddings on Wikipedia2 and the freely available
Sogou News Corpora (SogouCS).3 We use ran-
domly initialised vectors as the representations of
the characters that are not in the embedding vo-
cabulary. Pre-trained embeddings for higher-order
n-grams are not employed in this paper.

2.4 Ensemble Decoding

At the ﬁnal decoding phase, we use ensemble de-
coding, a simple averaging technique, to mitigate
the deviations led by random weight initialisation
of the neural network. For the chain CRF decoder,
the ﬁnal sequence of the combinatory tags y is
obtained via the conditional scores S(yi|xi) and
the transition scores T (yi, yj) given the input se-
quence x.
Instead of computing the optimal se-
quence with respect to the scores returned by a
single model, both the conditional scores and tran-
sition scores are averaged over four models with
identical parameter settings that are trained inde-
pendently:

y∗ = argmax
y∈L(x)

p(y|x; ¯{S}, ¯{T })

(2)

Ensemble decoding is only applied to the best
performing model according to the feature experi-
ments at the ﬁnal testing phase in this paper.

3 Implementation

Our neural networks are implemented using the
TensorFlow 1.2.0 library (Abadi et al., 2016). We
group the sentences with similar lengths into the
same buckets and the sentences in the same bucket
are padded to the same length accordingly. We
construct sub-computational graphs respectively
for each bucket. The training and tagging speed of
our neural network on GPU devices can be dras-
tically improved thanks to the bucket model. The
training time is proportional to both the size of the
training set and the number of POS tags.

Table 1 shows the adopted hyper-parameters.
We use one set of parameters for all the experi-
ments on different datasets. The weights of the

2https://dumps.wikimedia.org/
3http://www.sogou.com/labs/resource/cs.php

Char. embedding size
n-gram embedding size
Radical embedding size
Character font
Character size
GRU state size
Conv. ﬁlter size
Conv. ﬁlter number
Max pooling size
Fully-connected size
Optimiser
Initial learning rate
Decay rate
Gradient Clipping
Dropout rate
Batch size

64
64
30
simsun (宋体)
30 × 30
200
5 × 5
32
2 × 2
100
Adagrad
0.1
0.05
5.0
0.5
10

Table 1: Hyper-parameters.

neural networks, including the randomly intialised
embeddings, are initialised using the scheme in-
troduced in Glorot and Bengio (2010). The net-
work is trained with the error back-propagation
algorithm. All the embeddings are ﬁne-tuned dur-
ing training by back-propagating gradients. Ada-
grad (Duchi et al., 2011) with mini-batches is em-
ployed for optimisation with the initial learning
rate η0 = 0.1, which is updated with a decay rate
ρ = 0.05 as ηt =
ρ(t−1)+1 , where t is the index of
the current epoch.

η0

The model is optimised with respect to the per-
formance on the development sets. F1-scores of
both segmentation (F 1Seg) and joint POS tagging
(F 1Seg&T ag) are employed as F 1Seg ∗ F 1Seg&T ag
to measure the performance of the model after
each epoch during training.
In our experiments,
the models are trained for 30 epochs. To ensure
that the weights are well optimised, we only adopt
the best epoch after the model is trained at least for
5 epochs.

4 Experiments

4.1 Datasets

We employ three different datasets for our ex-
periments, namely Chinese Treebank (Xue et al.,
2005) 5.0 (CTB5) and 9.0 (CTB9) along with the
Chinese section in Universal Dependencies (UD
Chinese) (Nivre et al., 2016) of version 1.4.

CTB5 is the most employed dataset for joint
segmentation and POS tagging in previous re-
It is composed of newswire data. We
search.
follow the conventional split of the dataset as
in Jiang et al. (2008); Kruengkrai et al. (2009a);

Zhang and Clark (2010). CTB9 consists of source
texts in various genres, CTB5 is a subset of it. We
split CTB9 by referring to the partition of CTB7
in Wang et al. (2011). We extend the training,
development and test sets from CTB5 by adding
80% of the new data in CTB9 to training and
10% each to development and test. The double-
checked ﬁles are all placed in the test set. The
detailed splitting information can be found in Ta-
ble 10 in Appendix. UD Chinese has both univer-
sal and language-speciﬁc POS tags. They are not
predicted jointly in this paper. For the sake of con-
venience, we refer the universal tags as UD1 and
the language-speciﬁc ones as UD2 in the follow-
ing sessions. To make the model beneﬁt from the
pre-trained character embeddings, we convert the
texts in UD Chinese from traditional Chinese into
simpliﬁed Chinese.

Table 2 shows brief statistics of the employed
The out-of-
datasets in numbers of words.
vocabulary (OOV) words are counted regardless
of the POS tags. We can see that the size of
UD Chinese is much smaller and it has a notably
higher OOV rate than the two CTB datasets.

Train
Dev
Test
OOV rate (dev)
OOV rate (test)

CTB5
493,935
6,821
8,008
8.11
3.47

CTB9
1,696,322
136,468
242,317
2.93
3.13

UD Chinese
98,608
12,663
12,012
12.13
12.46

Table 2: Statistics of the employed datasets in
numbers of words.

4.2 Experimental Results

Both segmentation (Seg) and joint segmentation
and POS tagging (Seg&Tag) are evaluated in our
experiments.4 We employ word-level recall (R),
precision (P) and F1-score (F) as the evaluation
metrics. A series of feature experiments are car-
ried out on the development sets to evaluate the ef-
fectiveness of the proposed approaches for vector
representations of the characters. Finally, the best
performing model according to the feature experi-
ment is applied to the test sets in the forms of sin-
gle as well as ensemble and compared with ZPar.

4The evaluation script is downloaded from:

http://people.sutd.edu.sg/ yue zhang/doc/doc/joint ﬁles
/evaluate.py

4.2.1 Feature Experiments

Table 3 shows the evaluation results of using
concatenated n-grams up to different orders as
the character representations. By introducing 2-
grams, we can obtain vast improvements over
solely using the conventional character embed-
dings, which indicates that not all the local infor-
mation can be effectively captured by the BiRNN
using context-free character representations. Util-
ising the concatenated n-grams ensures that the
same character has different but yet closely related
representations in different contexts, which is an
effective way to encode contextual features.

From the table, we see that notable improve-
ments can be achieved further via employing 3-
grams. 4-grams still help but only to CTB9 while
adding 5-grams achieves almost no improvement
on any of the datasets. The results imply that con-
catenating higher-order n-grams can be detrimen-
tal, especially on datasets in smaller sizes due to
the fact that higher-order n-grams are more sparse
in the training data and their vector representations
cannot be trained well enough. Besides, adopting
higher-order n-grams also substantially increases
the numbers of weights and therefore both train-
ing and decoding become less efﬁcient. Under the
circumstances, we consider that 3-gram model is
optimal for our task and it is employed in the fol-
lowing experiments for all the datasets.

The concatenated n-grams have a bigger size
compared to the basic character representation.
We conduct one additional experiment using a ba-
sic 1-gram character model with a larger character
vector size of 300. The evaluation scores are sim-
ilar to the basic character model with the size of
64, which shows that the improvements obtained
by the n-gram model are not matched by enlarg-
ing the size of the vector representation.

The evaluation scores of the sub-character level
features are reported in Table 4. The relevant fea-
tures are added on top of the 3-gram model. Em-
ploying radicals and graphical features achieves
similar improvements for segmentation while util-
ising radicals obtains better results for joint POS
tagging on CTB5. However, radicals are not a very
effective feature on CTB9, UD1 and UD2 whereas
a notable enhancement is observed when employ-
ing graphical features on UD1. Using CNNs to
extract graphical features is computationally much
more expensive than simply adopting radicals via
a lookup table, especially when GPU is not avail-

CTB5

CTB9

UD1

UD2

Seg
95.22
95.14
97.08
97.14
97.13
96.94

Seg&Tag
91.71
91.52
93.72
94.01
94.02
93.84

Seg
95.53
95.25
96.30
96.47
96.48
96.50

Seg&Tag
90.89
90.43
91.66
91.75
91.89
91.88

Seg
91.84
91.74
94.50
94.36
94.25
94.40

Seg&Tag
85.43
85.07
88.36
88.27
88.37
88.47

Seg
92.40
91.83
94.42
94.43
94.16
94.25

Seg&Tag
85.63
84.93
88.14
88.32
88.24
88.03

size = 300
1-gram
2-gram
3-gram
4-gram
5-gram

Table 3: Evaluation of concatenated n-gram representations on the development sets in F1-scores

CTB5

CTB9

UD1

UD2

3-gram
+radicals
+graphical

Seg
97.14
97.26
97.25

Seg&Tag
94.01
94.42
94.08

Seg
96.47
96.42
96.50

Seg&Tag
91.75
91.74
91.78

Seg
94.36
94.37
94.50

Seg&Tag
88.27
88.21
88.59

Seg
94.43
94.39
94.23

Seg&Tag
88.32
88.36
87.95

Table 4: Evaluation of sub-character level features on the development sets in F1-scores.

CTB5

CTB9

UD1

UD2

Seg
95.14
95.82
97.26
97.42

Seg&Tag
91.52
92.45
94.42
94.58

Seg
95.25
95.44
96.42
96.56

Seg&Tag
90.43
90.57
91.74
91.96

Seg
91.74
92.77
94.37
95.12

Seg&Tag
85.07
86.48
88.21
89.69

Seg
91.83
93.01
94.39
95.02

Seg&Tag
84.93
86.48
88.36
89.20

1-gram
+GloVe
3-gram, radicals
+GloVe

Table 5: Evaluation of the pre-trained character embeddings on the development sets in F1-scores.

able.

From Table 5, we can learn that employing pre-
trained embeddings as initial vector representa-
tions for the characters achieves improvements in
general, whereas the improvements are compara-
tively smaller if the the concatenated n-gram rep-
resentations and the radicals are added. Addition-
ally, the improvements obtained on UD Chinese
are more signiﬁcant than on CTBs, which indi-
cates that the pre-trained character embeddings are
more beneﬁcial to the datasets in smaller sizes.

In general, the feature experiments indicate that
the proposed Chinese character representations are
all sensitive to dataset size. Using higher-order
n-grams requires more data for training. On the
other hand, the pre-trained embeddings are more
vital if the dataset
the
is small.
different representations are sensitive to tagging
schemes as the evaluation results on UD1 and
UD2 are quite diverse. Taking both robustness and
efﬁciency into consideration, we select 3-grams
along with radicals and pre-trained character em-
beddings as the best setting for ﬁnal evaluation.

In addition,

4.2.2 Final Results

Table 6 shows the ﬁnal scores on the test sets.
The complete evaluation results in precision, re-

call and F1-scores are contained in Table 11 and
Table 12 in Appendix. Our system is compared
with ZPar. We retrained a ZPar model on CTB5
that reproduces the evaluation scores reported in
Zhang and Clark (2010). We also modiﬁed the
source code so that it is applicable to CTB9 and
UD Chinese. In addition, we perform the mid-p
McNemar’s test (Fagerland et al., 2013) to exam-
ine the statistical signiﬁcances.

the single model

As shown in Table 6,

is
worse than the ensemble model but still outper-
forms ZPar on all the tested datasets. ZPar in-
corporates discrete local features at both character
and word levels and employs structured percep-
tron for global optimisation, whereas we encode
rich local information in the character represen-
tations and employ BiRNN to effectively extract
global features and capture long term dependen-
cies. The chain CRF layer is used for sentence-
level optimisation, which functions similarly to
structured perceptron. As opposed to the tag-
gers built with traditional machine learning algo-
rithms, our model avoids heavy feature engineer-
ing and beneﬁts from large plain texts via utilis-
It is also
ing pre-trained character embeddings.
very ﬂexible to add sub-character level features as
parts of the character representations. The model

ZPar
Single (3-gram, rad., GloVe)
Ensemble (4 models)
ZPar
Single
Ensemble

OOV recall

CTB5

CTB9

UD1

UD2

Seg
97.77
97.89
98.02*
76.98
78.78
77.34

Seg&Tag
93.82
94.07**
94.38**
68.34
69.78
70.50

Seg
96.28
96.47**
96.67**
75.83
74.16
75.52

Seg&Tag
91.62
91.89**
92.34**
63.71
62.58
64.14

Seg
93.75
94.85**
95.16**
78.69
81.36
82.16

Seg&Tag
88.11
89.41**
89.75*
64.40
67.40
68.14

Seg
93.98
94.93**
95.09*
79.56
81.16
81.56

Seg&Tag
88.16
89.00**
89.42**
64.86
66.73
68.00

Table 6: Evaluations of the best model on the ﬁnal test sets in F1-scores as well as the recalls of out-of-
vocabulary words. Signiﬁcance tests for Single are in comparison to ZPar, while tests for Ensemble are
in comparison to Single (**p < 0.01, *p < 0.05)

performs very well despite being fully character
based. Moreover, it has clear advantages when ap-
plied to smaller datasets like UD Chinese, while
the prevalence is much smaller on CTB5.

Both our model and ZPar segment OOV words
in UD Chinese with higher accuracies than the
ones in CTBs despite that UD Chinese is no-
tably smaller and the overall OOV rate is higher.
Compared to CTB, the words in UD Chinese are
more ﬁne-grained and the average word length is
shorter, which makes it easier for the tagger to
correctly segment the OOV words as Zhang et al.
(2016) show that the longer words are more difﬁ-
cult to be segmented correctly. For joint POS tag-
ging for OOV words, the two systems both per-
form signiﬁcantly better on CTB5 as it is only
composed of news text.

In general, our model is more robust to OOV
words than ZPar, except that ZPar yields better re-
sult for segmentation by a small margin on CTB9.
ZPar also obtains higher accuracy for joint POS
tagging than the single model on CTB9. The dif-
ferences between ZPar and our model for both seg-
mentation and POS tagging are more substantial
on UD Chinese, which indicates that our model
is relatively more advantageous for handling OOV
words when the training sets are small, whereas
ZPar is able to perform equally well when sub-
stantial amount of training data is available as they
achieve similar results on the CTB sets.

is further

The single model

improved by
ensemble-averaging four independently trained
models. The improvements are not drastic but they
are observed systematically across all the datasets.
In general, ensemble decoding is beneﬁcial to han-
dling OOV words as well except that a small drop
for segmentation on CTB5 is observed.

Ensemble

ZPar

Seg

BN 97.89*
96.67**
CS
FM 96.54**
MG 94.54**
NS
SM 96.43**
97.29**
SP
WB 94.27**

97.56

Seg&Tag
94.48**
91.78**
91.92**
89.23**
93.92**
91.78**
93.93**
88.44**

Seg
97.68
95.61
96.30
94.22
97.49
96.13
96.69
93.38

Seg&Tag
94.22
90.15
91.51
88.60
93.70
90.32
93.35
86.88

Table 7: Evaluation on Broadcast News (BN),
(CS), Forum (FM), Magazine
Conversations
(MG), News (NS), Short Messages (SM), Speech
(SP) and Weblogs (WB) in CTB9. (**p < 0.01,
*p < 0.05)

of CTB9 in different genres. Our model surpasses
ZPar on all the genres in both segmentation and
joint POS tagging. The differences are subtle
on the genres in which the texts are normalised,
such as News and Broadcast News. This, to a
very large extent, explains why our model is only
marginally better than ZPar on CTB5, whereas the
experimental results reveal that our model is sub-
stantially better at processing non-standard text as
it yields signiﬁcantly higher scores on Conversa-
tions, Short Messages and Weblogs. The evalua-
tion results of both our model and ZPar vary sub-
stantially across different genres as some genres
are fundamentally more challenging to process.

Our models are compared with the previous
best-performing systems on CTB5 in Table 8. Our
models are not optimised particularly with respect
to CTB5 but still yield competitive results, espe-
cially for joint POS tagging. We are the ﬁrst to re-
port evaluation scores on CTB9 and UD Chinese.

4.3 Tagging Speed

Table 7 displays the evaluation of the ensem-
ble model and ZPar on the decomposed test sets

Our joint segmentation and POS tagger is very ef-
ﬁcient with GPU devices and can be practically

Kruengkrai et al. (2009b)
Zhang and Clark (2010)
Sun (2011)
Wang et al. (2011)
Shen et al. (2014)
Single
Ensemble

Seg
97.98
97.78
98.17
98.11
98.02
97.89
98.02

Seg&Tag
94.00
93.67
94.02
94.18
93.80
94.07
94.38

Table 8: Result comparisions on CTB5 in F1-
scores.

used for processing very large ﬁles. The mem-
ory demand of decoding is drastically milder com-
pared to training, a large batch size therefore can
be employed. The tagger takes constant time to
build the sub-computational graphs and load the
weights.

With bucket size of 10 and batch size of 500, Ta-
ble 9 shows the tagging speed of the tagger using
a single Tesla K80 GPU card and the pre-trained
model on CTB5. The tagging speed of ZPar is
also presented for comparison. GPU devices are
not supported by ZPar and therefore the tagging
speed is calculated using an Intel Core i7 CPU.

Single
Ensemble
ZPar

Init. Time (s)
20
23
4

Sentence/s
299.40
230.41
134.59

Chars/s
40,188.17
30,928.22
18,090.09

Table 9: Tagging speed in numbers of sentences
and characters per second

5 Related Work

fundamental BiRNN-CRF

The
architecture
is task-independent and has been applied to
many sequence tagging problems on Chinese.
Peng and Dredze (2016) adopt the model for Chi-
nese segmentation and named entity recognition
in the context of multi-task and multi-domain
learning. Dong et al. (2016) employ a character
level BiLSTM-CRF model that utilises radical-
level
information for Chinese named entity
recognition. Ma and Sun (2016) use a similar
architecture but feed the Chinese characters pair-
wise as edge embeddings instead. Their model
is applied respectively to chunking, segmentation
and POS tagging.

Zheng et al. (2013) model joint Chinese seg-
mentation and POS tagging via predicting the
combinatory segmentation and POS tags. They

employ the adaptation of the feed forward neu-
ral network introduced in Collobert et al. (2011)
that only extracts local features in a context win-
dow. A perceptron-style training algorithm is em-
ployed for sentence level optimisation, which is
the same as the training algorithm of the BiRNN-
CRF model. Their proposed model is not evalu-
ated on CTB5 and therefore difﬁcult to be com-
pared with our system. Kong et al. (2015) apply
segmental recurrent neural networks to joint seg-
mentation and POS tagging but the evaluation re-
sults are substantially below the state-of-the-art on
CTB5.

Bojanowski et al. (2016) retrieve word embed-
dings via representing words as a bag of charac-
ter n-grams for morphologically rich languages.
A similar character n-gram model is proposed
by Wieting et al. (2016).
Sun et al. (2014) at-
tempt to encode radical information into the con-
The radical-
ventional character embeddings.
enhanced embeddings are employed and eval-
uated for Chinese segmentation.
The results
show that radical-enhanced embeddings outper-
form both skip-ngram and continues bag-of-word
(Mikolov et al., 2013) in word2vec.

6 Conclusion

We adapt and apply the BiRNN-CRF model for se-
quence tagging in NLP to joint Chinese segmenta-
tion and POS tagging via predicting the combina-
tory tags of word boundaries and POS tags. Con-
catenated n-grams as well as sub-character fea-
tures are employed along with the conventional
pre-trained character embeddings as the vector
representations for Chinese characters. The fea-
ture experiments indicate that concatenated n-
grams contribute substantially. However, both rad-
icals and graphical features as sub-character level
information are less effective. How to incorpo-
rate the sub-character level information more ef-
fectively will be further explored in the future.

The proposed model is extensively evaluated on
CTB5, CTB9 and UD Chinese. Despite the fact
that different character representation approaches
are sensitive to data size and tagging schemes, we
use one set of hyper-parameters and universal fea-
ture settings so that the model is robust across
datasets. The experimental results on the test sets
show that our model outperforms ZPar which is
built on structured perceptron on all the datasets.
We obtain state-of-the-art performances on CTB5.

The results on UD Chinese and CTB9 also reveal
that our model has great advantages in processing
non-standard text, such as weblogs, forum text and
short messages. Moreover, the implemented tag-
ger is very efﬁcient with GPU devices and there-
fore can be applied to tagging very large ﬁles.

Acknowledgments

We acknowledge the computational resources pro-
vided by CSC in Helsinki and Sigma2 in Oslo
through NeIC-NLPL (www.nlpl.eu). This work
is supported by the Chinese Scholarship Council
(CSC) (No. 201407930015).

References

Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng
Chen, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Geoffrey Irving, Michael Isard,
et al. 2016.
TensorFlow: A system for large-
scale machine learning. In Proceedings of the 12th
USENIX Symposium on Operating Systems Design
and Implementation (OSDI). Savannah, Georgia,
USA.

Piotr Bojanowski, Edouard Grave, Armand Joulin,
and Tomas Mikolov. 2016. Enriching word vec-
arXiv preprint
tors with subword information.
arXiv:1607.04606 .

Kyunghyun Cho, Bart Van Merri¨enboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. arXiv preprint arXiv:1409.1259 .

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv:1412.3555 .

Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
Journal of Machine Learning Research
scratch.
12(August):2493–2537.

Chuanhai Dong,

Jiajun Zhang, Chengqing Zong,
Masanori Hattori, and Hui Di. 2016. Character-
based LSTM-CRF with radical-level features for
Chinese named entity recognition. In International
Conference on Computer Processing of Oriental
Languages. Springer, pages 239–250.

and stochastic optimization.
Learning Research 12(Jul):2121–2159.

Journal of Machine

Morten W Fagerland, Stian Lydersen, and Petter Laake.
2013. The McNemar test for binary matched-pairs
data: mid-p and asymptotic are better than exact
conditional. BMC medical research methodology
13(1):91.

Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neural
networks. In Aistats. pages 249–256.

Sepp Hochreiter and J¨urgen Schmidhuber. 1997.
Neural computation

Long short-term memory.
9(8):1735–1780.

Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidi-
rectional LSTM-CRF models for sequence tagging.
arXiv preprint arXiv:1508.01991 .

Wenbin Jiang, Liang Huang, Qun Liu, and Yajuan L¨u.
2008. A cascaded linear model for joint Chinese
word segmentation and part-of-speech tagging.
In
In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics. Citeseer.

Lingpeng Kong, Chris Dyer, and Noah A Smith.
2015. Segmental recurrent neural networks. arXiv
preprint arXiv:1511.06018 .

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009a. An error-driven word-character hy-
brid model for joint Chinese word segmentation and
In Proceedings of the Joint Confer-
POS tagging.
ence of the 47th Annual Meeting of the ACL and the
4th International Joint Conference on Natural Lan-
guage Processing of the AFNLP: Volume 1-Volume
1. Association for Computational Linguistics, Sin-
gapore, pages 513–521.

Canasai Kruengkrai, Kiyotaka Uchimoto, Jun’ichi
Kazama, WANG Yiou, Kentaro Torisawa, and Hi-
toshi Isahara. 2009b. Joint Chinese word segmen-
tation and POS tagging using an error-driven word-
character hybrid model. IEICE transactions on in-
formation and systems 92(12):2298–2305.

John Lafferty, Andrew McCallum, Fernando Pereira,
et al. 2001. Conditional random ﬁelds: Probabilis-
tic models for segmenting and labeling sequence
data. In Proceedings of the eighteenth international
conference on machine learning, ICML. volume 1,
pages 282–289.

C´ıcero Nogueira dos Santos and Bianca Zadrozny.
2014. Learning character-level representations for
In Proceedings of The
part-of-speech tagging.
31st International Conference on Machine Learn-
ing. pages 1818–1826.

John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning

Wang Ling, Chris Dyer, W. Alan Black, Isabel Tran-
coso, Ramon Fermandez, Silvio Amir, Luis Marujo,
and Tiago Luis. 2015. Finding function in form:
Compositional character models for open vocabu-
lary word representation. In Proceedings of the 2015
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, pages 1520–1530.

on Neural Information Processing. Springer, pages
279–286.

Yiou Wang, Jun’ichi Kazama, Yoshimasa Tsuruoka,
Wenliang Chen, Yujie Zhang, and Kentaro Torisawa.
2011.
Improving Chinese word segmentation and
POS tagging with semi-supervised methods using
large auto-analyzed data. In Proceedings of 5th In-
ternational Joint Conference on Natural Language
Processing. Asian Federation of Natural Language
Processing, pages 309–317.

John Wieting, Mohit Bansal, Kevin Gimpel, and Karen
Livescu. 2016. CHARAGRAM: Embedding words
and sentences via character n-grams. arXiv preprint
arXiv:1607.02789 .

Naiwen Xue, Fei Xia, Fu-Dong Chiou, and Marta
Palmer. 2005. The Penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural lan-
guage engineering 11(02):207–238.

Meishan Zhang, Yue Zhang, and Guohong Fu. 2016.
Transition-based neural word segmentation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers). Association for Computational Linguistics,
pages 421–431.

Yue Zhang and Stephen Clark. 2008. Joint word seg-
mentation and POS tagging using a single percep-
In Proceedings of the 46th Annual Meeting
tron.
of the Association for Computational Linguistics.
Columbus, Ohio, pages 888–896.

Yue Zhang and Stephen Clark. 2010. A fast decoder
for joint word segmentation and POS-tagging using
In Proceedings of
a single discriminative model.
the 2010 Conference on Empirical Methods in Natu-
ral Language Processing. Association for Computa-
tional Linguistics, Massachusetts, USA, pages 843–
852.

Xiaoqing Zheng, Hanyang Chen, and Tianyu Xu. 2013.
Deep learning for Chinese word segmentation and
In Proceedings of the 2013 Confer-
POS tagging.
ence on Empirical Methods in Natural Language
Processing. Seattle, USA, pages 647–657.

Shuming Ma and Xu Sun. 2016. A new recurrent neu-
ral CRF for learning non-linear edge features. arXiv
preprint arXiv:1611.04233 .

Xuezhe Ma and Eduard Hovy. 2016.

End-to-end
sequence labeling via bi-directional LSTM-CNNs-
In Proceedings of the 54th Annual Meeting
CRF.
of the Association for Computational Linguistics.
Berlin, Germany, page 10641074.

Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-
Efﬁcient estimation of word
arXiv preprint

frey Dean. 2013.
representations in vector space.
arXiv:1301.3781 .

Hwee Tou Ng and Jin Kiat Low. 2004. Chinese part-of-
speech tagging: One-at-a-time or all-at-once? word-
In Proceedings of the
based or character-based?
2004 Conference on Empirical Methods in Natural
Language Processing. Barcelona, Spain, pages 277–
284.

Joakim Nivre, Marie-Catherine de Marneffe, Filip Gin-
ter, Yoav Goldberg, Jan Hajic, Christopher D. Man-
ning, Ryan McDonald, Slav Petrov, Sampo Pyysalo,
Natalia Silveira, Reut Tsarfaty, and Daniel Zeman.
2016. Universal dependencies v1: A multilingual
treebank collection. In Proceedings of the 10th In-
ternational Conference on Language Resources and
Evaluation (LREC 2016). pages 1659–1666.

Nanyun Peng and Mark Dredze. 2016. Multi-task
multi-domain representation learning for sequence
tagging. arXiv preprint arXiv:1608.02689 .

Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. GloVe: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP). Doha, Qatar,
pages 1532–1543.

Mo Shen, Hongxiao Liu, Daisuke Kawahara, and
Sadao Kurohashi. 2014. Chinese morphological
analysis with character-level POS tagging. In Pro-
ceedings of the 52nd Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 2: Short
Papers). Association for Computational Linguistics,
Baltimore, Maryland, pages 253–258.

Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overﬁtting. Journal of Machine Learning Re-
search 15(1):1929–1958.

Weiwei Sun. 2011. A stacked sub-word model for joint
Chinese word segmentation and part-of-speech tag-
In Proceedings of the 49th Annual Meeting
ging.
of the Association for Computational Linguistics:
Human Language Technologies-Volume 1. Associ-
ation for Computational Linguistics, Portland, Ore-
gon, USA, pages 1385–1394.

Yaming Sun, Lei Lin, Nan Yang, Zhenzhou Ji, and
Xiaolong Wang. 2014. Radical-enhanced Chinese
character embedding. In International Conference

Appendix

Dataset CTB chapter IDs
Train

0044-0143, 0170-0270, 0400-0899,
1001-1017, 1019, 1021-1035, 1037-
1043, 1045-1059, 1062-1071, 1073-
1117, 1120-1131, 1133-1140, 1143-
1147, 1149-1151, 2000-2915, 4051-
4099, 4112-4180, 4198-4368, 5000-
5446, 6000-6560, 7000-7013
0301-0326, 2916-3030, 4100-4106,
4181-4189, 4369-4390, 5447-5492,
6561-6630, 7013-7014
0001-0043, 0144-0169, 0271-0301,
0900-0931, 1018, 1020, 1036, 1044,
1060, 1061, 1072, 1118, 1119, 1132,
1141, 1142, 1148, 3031-3145, 4107-
4111, 4190-4197, 4391-4411, 5493-
5558, 6631-6700, 7015-7017

Dev

Test

Table 10: The split of Chinese Treebank 9.0

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
97.49
97.57
96.38
96.61
94.71
95.07
94.98
95.00

R
98.30
98.47
96.55
96.74
94.99
95.27
94.93
95.22

F
97.89
98.02
96.47
96.67
94.85
95.17
94.93
95.11

Table 11: Evaluation of segmentations in preci-
sion, recall and F1-scores

CTB5

CTB9

UD1

UD2

Single
Ensemble
Single
Ensemble
Single
Ensemble
Single
Ensemble

P
93.68
93.95
91.81
92.28
89.28
89.67
88.95
89.33

R
94.47
94.81
91.97
92.40
89.54
89.86
89.04
89.54

F
94.07
94.38
91.89
92.34
89.41
89.77
89.00
89.43

Table 12: Evaluation of joint segmentations and
POS tagging in precision, recall and F1-scores

