Real-time Power System State Estimation and
Forecasting via Deep Neural Networks

Liang Zhang, Student Member, IEEE, Gang Wang, Member, IEEE, and Georgios B. Giannakis, Fellow, IEEE

1

8
1
0
2
 
v
o
N
 
0
3
 
 
]

G
L
.
s
c
[
 
 
2
v
6
4
1
6
0
.
1
1
8
1
:
v
i
X
r
a

Abstract—Contemporary power grids are being challenged
by rapid voltage ﬂuctuations that are caused by large-scale
deployment of renewable generation, electric vehicles, and de-
mand response programs. In this context, monitoring the grid’s
operating conditions in real time becomes increasingly critical.
With the emergent large scale and nonconvexity however, the
existing power system state estimation (PSSE) schemes become
computationally expensive or yield suboptimal performance. To
bypass these hurdles, this paper advocates deep neural networks
(DNNs) for real-time power system monitoring. By unrolling an
iterative physics-based prox-linear solver, a novel model-speciﬁc
DNN is developed for real-time PSSE with affordable training
and minimal tuning effort. To further enable system awareness
even ahead of the time horizon, as well as to endow the DNN-
based estimator with resilience, deep recurrent neural networks
(RNNs) are also pursued for power system state forecasting. Deep
RNNs leverage the long-term nonlinear dependencies present in
the historical voltage time series to enable forecasting, and they
are easy to implement. Numerical tests showcase improved per-
formance of the proposed DNN-based estimation and forecasting
approaches compared with existing alternatives. In real load data
experiments on the IEEE 118-bus benchmark system, the novel
model-speciﬁc DNN-based PSSE scheme outperforms nearly by
an order-of-magnitude the competing alternatives, including the
widely adopted Gauss-Newton PSSE solver.

Index Terms—Power system state estimation, power system
state forecasting, least-absolute-value, proximal linear algorithm,
deep learning, recurrent neural networks, data validation.

I. INTRODUCTION

Recognized as the most signiﬁcant engineering achievement
of the twentieth century, the North American power grid is
a complex cyber-physical system with transmission and dis-
tribution infrastructure delivering electricity from generators
to consumers. Due to the growing deployment of distributed
renewable generators, electric vehicles, and demand response,
contemporary power grids are facing major challenges related
to unprecedented levels of load peaks and voltage ﬂuctuations.
In this context, real-time monitoring of the smart power grids
becomes increasingly critical, not only for detection of system
instabilities and protection [1], [2], [3], [4], but also for energy
management [3], [5], [6].

Given the grid parameters along with a set of measurements
provided by the supervisory control and data acquisition
(SCADA) system, PSSE aims to retrieve the unknown system
state, that is, the complex voltages at all buses [1]. Commonly
used state estimators include the weighted least-squares (WLS)
and least-absolute-value (LAV) ones, derived based on the
(weighted) (cid:96)1- or (cid:96)2-loss criteria. To tackle the resultant
nonconvex optimization, various solvers have been proposed;
see e.g. [7], [1], [2], [8]. However, those optimization-oriented

PSSE schemes either require many iterations or are computa-
tionally intensive, and they are further challenged by growing
dynamics and system size. These considerations motivate
innovative approaches for real-time large-scale PSSE.

Toward that end, PSSE using plain feed-forward neural
networks (FNNs) was studied in [9], [10]. Once trained off-line
using historical data and/or simulated samples, FNNs can be
implemented for real-time PSSE, as the inference entails only
a few matrix-vector multiplications. Related approaches using
FNNs that ‘learn-to-optimize’ emerge in wireless communi-
cations [11], [12], and outage detection [13]. Unfortunately,
past ‘plain-vanilla’ FNN-based schemes not only suffer from
‘vanishing’ or ‘exploding’ gradients for deep nets, but are also
model-agnostic, in the sense that they ignore the underlying
physics of power grids, therefore lacking physical interpreta-
tion and yielding suboptimal performance. To devise NNs in a
disciplined manner, recent proposals in computer vision [14],
[15] constructed deep (D) NNs by unfolding iterative solvers
tailored to model-based optimization problems.

In this work, we will pursue a hybrid approach that com-
bines data with basic physical constraints, to develop model-
speciﬁc DNNs for PSSE. On the other hand, PSSE by itself is
insufﬁcient for fully monitoring the system since it does not
account for variations in the states (namely, system dynamics)
[1]. In addition, PSSE works (well) only if there are enough
measurements achieving system observability, and the grid
topology along with the link parameters are precisely known.
To address these challenges, power system state forecasting to
aid PSSE [16], [17], [18], [19] is well motivated.

Power system state forecasting has so far been pursued via
(extended) Kalman ﬁltering and moving horizon approaches
in e.g., [20], [21], [22], and also through ﬁrst-order vector
auto-regressive (VAR) modeling [23]. Nonetheless, all
the
aforementioned state predictors, assume linear dynamics; yet
in practice, the dependence of the current state on previ-
ous (estimated) one(s) is nonlinear and cannot be accurately
characterized. To render nonlinear estimators tractable, FNN-
based state prediction has been advocated with the transition
mapping modeled by a single-hidden-layer FNN [16], [24].
Unfortunately, the number of FNN parameters grows linearly
with the length of the input sequences, discouraging FNNs
from capturing long-term dependencies in voltage time series.
Our contribution towards real-time and accurate monitoring
of the smart power grids is two-fold. First, we advocate model-
speciﬁc DNNs for PSSE, by unrolling a recently proposed
prox-linear SE solver [25]. Toward this goal, we ﬁrst develop
a reduced-complexity prox-linear solver. Subsequently, we
demonstrate how the unrolled prox-linear solver lends itself to
building blocks (layers) in contemporary DNNs. In contrast to

2

‘plain-vanilla’ FNNs, our novel prox-linear nets require mini-
mal tuning efforts, and come naturally with ‘skip-connections,’
a critical element in modern successful DNN architectures
(see [26]) that enables efﬁcient training. Moreover, to enhance
system observability as well as enable system awareness ahead
of time, we advocate power system state forecasting via deep
recurrent NNs (RNNs). Deep RNNs enjoy a ﬁxed number of
parameters even with variable-length input sequences, and they
are able to capture complex nonlinear dependencies present in
time series data. Finally, we present numerical tests using real
load data on the IEEE 57- and 118-bus benchmark systems to
corroborate the merits of the developed deep prox-linear nets
and RNNs relative to existing alternatives.

The remainder of this paper is organized as follows. Sec-
tion II outlines the basics of PSSE. Section III introduces
our novel reduced-complexity prox-linear solver for PSSE,
and advocates the prox-linear net. Section IV deals with
deep RNN for state forecasting, as well as shows how state
forecasting can aid in turn DNN-based PSSE. Simulated tests
are presented in Section V, while the paper is concluded with
the research outlook in Section VI.

II. LEAST-ABSOLUTE-VALUE ESTIMATION

n + jvi

Consider a power network consisting of N buses that can be
modeled as a graph G := {N , L}, where N := {1, 2, . . . , N }
comprises all buses, and L := {(n, n(cid:48))} ∈ N × N collects
all lines. For each bus n ∈ N , let Vn := vr
n denote
its corresponding complex voltage, and Pn (Qn) denote the
active (reactive) power injection. For each line (n, n(cid:48)) ∈ L, let
nn(cid:48) (Qf
P f
nn(cid:48)) denote the active (reactive) power ﬂow seen at the
‘forwarding’ end, and P t
nn(cid:48)) denote the active (reactive)
power ﬂow at the ‘terminal’ end. To perform power system
state estimation or forecasting, suppose Mt system variables
are measured at time t. For a compact representation, let zt :=
[{|Vn,t|2}n∈N o
,
nn(cid:48),t}(n,n(cid:48))∈E o
{Qf
](cid:62) be
the data vector that collects all measured quantities at time
t, where sets N o
t signify the locations where the
corresponding nodal and line quantities are measured.

, {Qn,t}n∈N o
, {Qt

nn(cid:48),t}(n,n(cid:48))∈E o

nn(cid:48),t}(n,n(cid:48))∈E o

nn(cid:48),t}(n,n(cid:48))∈E o

, {Pn,t}n∈N o

t and E o

nn(cid:48) (Qt

, {P f

, {P t

t

t

t

t

t

t

t

1, vi

1, . . . , vr

Per time slot t, PSSE aims to recover the system state
N ](cid:62) ∈ R2N (expanded in the
N , vi
vector vt := [vr
rectangular coordinates) from generally noisy data zt. For
brevity, the subscript t of zt and vt will be omitted when
discussing PSSE in Sections II and III. Concretely, the PSSE
task can be posed as follows.

Given M measurements {zm}M

matrices {Hm ∈ R2N ×2N }M

m=1 and the corresponding
m=1 obeying the physical model

zm = v(cid:62)Hmv + (cid:15)m,

∀m = 1, . . . , M

(1)

our goal is to recover v ∈ R2N , where {(cid:15)m} account for the
measurement noise and modeling inaccuracies.

Adopting the LAV error criterion that is known to be robust
to outliers, the ensuing LAV estimate is sought (see e.g., [7])

ˆv := arg min
v∈R2N

1
M

M
(cid:88)

m=1

(cid:12)zm − v(cid:62)Hmv(cid:12)
(cid:12)
(cid:12)

(2)

for which various solvers have been developed [27], [28], [1].
In particular, the recent prox-linear solver developed in [25]
has well documented merits, including provably fast (locally
quadratic) convergence, as well as efﬁciency in coping with
the non-smoothness and nonconvexity in (2). Speciﬁcally,
the prox-linear solver starts with some initial vector v0, and
iteratively minimizes the regularized and ‘locally linearized’
(relaxed) cost in (2), to obtain iteratively (see also [29], [30])

vi+1 = arg min
v∈R2N

(cid:107)z − Ji(2v − vi)(cid:107)1 +

M
2µi

(cid:107)v − vi(cid:107)2

2 (3)

where i ∈ N is the iteration index, Ji := [v(cid:62)
an M × N matrix whose m-th row is v(cid:62)
is a pre-selected step-size sequence.

i Hm]1≤m≤M is
i Hm, and {µi > 0}

It is clear that the per-iteration subproblem (3) is a convex
quadratic program, which can be solved by means of standard
convex programming methods. One possible iterative solver of
(3) is based on the alternating direction method of multipliers
(ADMM). Such an ADMM-based inner loop turns out to entail
2M + 2N auxiliary variables, thus requiring the update of
2M + 4N variables per iteration [25].

Aiming at a reduced-complexity solver, in the next section
we will ﬁrst recast (3) in a Lasso-type form, and subsequently
unroll the resultant double-loop prox-linear iterations (3) that
constitute the key blocks of our DNN-based PSSE solver.

III. THE PROX-LINEAR NET

In this section, we will develop a DNN-based scheme to
approximate the solution of (2) by unrolling the double-loop
prox-linear iterations. Upon deﬁning the vector variable ui :=
Ji(2v − vi) − z, and plugging ui into (3), we arrive at

u∗

i = arg min
ui∈RM

(cid:107)ui(cid:107)1 +

M
4µi

(cid:107)Bi(ui + z) − vi(cid:107)2
2

(4)

where Bi ∈ R2N ×M denotes the pseudo inverse of Ji that sat-
isﬁes BiJi = I2N ×2N . The pseudo inverse Bi exists because
PSSE requires M ≥ 2N to guarantee system observability.

Once the inner optimum variable u∗

i is found, the next outer-

loop iterate vi+1 can be readily obtained as

vi+1 = [Bi(u∗

i + z) + vi]/2

(5)

following the deﬁnition of ui. Interestingly, (4) now reduces
to a Lasso problem [31], for which various celebrated solvers
have been put forward, including e.g., the iterative shrinkage
and thresholding algorithm (ISTA) [31].

Speciﬁcally, with k denoting the iteration index of the inner-
loop, the ISTA for (4) proceeds across iterations k = 0, 1, . . .
along the following recursion

(cid:18)

uk+1

i = Sη

uk

i −

= Sη

(cid:0)Wk

i uk

B(cid:62)
i

(cid:2)Bi

ηM
2µi
i + Aiz + bk
i

(cid:1)

(cid:0)uk

i + z(cid:1) − vi

(cid:3)

(6)

(cid:19)

3

Fig. 1: Prox-linear net with K = 3 blocks.

Fig. 2: Plain-vanilla FNN which has the same per-layer number of hidden units as the prox-linear net.

(7a)

(7b)

(7c)

(8)

where η > 0 is a ﬁxed step size with coefﬁcients

Wk

i := I −

B(cid:62)

i Bi,

∀k ∈ N

ηM
2µi

Ai := −

ηM
2µi

B(cid:62)

i Bi

bk

i :=

B(cid:62)

i vi,

∀k ∈ N

ηM
2µi

and Sη(·) is the so-termed soft thresholding operator

Sη(x) :=






x − η,
0,
x + η,

x > η
− η ≤ x ≤ η
x < −η

understood entry-wise when applied to a vector. With regards
to initialization, one can set u0
0 = 0 without loss of generality,
and u0

i−1 for i ≥ 1.

i = u∗

m=1, step sizes {µi}, η, and initial-

Algorithm 1 Reduced-complexity prox-linear solver.
Input: Data {(zm, Hm)}M
ization v0 = 1, u0
0 = 0.
1: for i = 0, 1, . . . , I do
Evaluate Wk
i , Ai, and bk
2:
Initialize u0
i .
for k = 0, 1, . . . , K do
Update uk+1

i according to (7).

using (6).

i

3:
4:
5:
6:
7:
8: end for

end for
Update vi+1 using (5).

The new prox-linear PSSE solver with reduced-complexity
is summarized in Alg. 1. With appropriate step sizes {µi}
and η, the sequence {vi} generated by Alg. 1 converges to a
stationary point of (2) [25]. In practice, Alg. 1 often requires a
large number K of inner iterations to approximate the solution
of (4). Furthermore, the pseudo-inverse Bi has to be computed
per outer-loop iteration. These challenges can limit its use in
large-scale as well as in real-time applications.

Instead of solving the optimization problem with a (large)
number of iterations, recent proposals [14], [15] advocated
trainable DNNs constructed by unfolding those iterations, to
obtain data-driven solutions. As demonstrated in [14], [32],
[15], properly trained unrolled DNNs can achieve competitive
performance even with a small number of layers. In the

following, we will elaborate on how to unroll our Alg. 1 to
construct DNNs for high-performance PSSE.

Consider ﬁrst unrolling the outer loop (3) up to, say the (I +
1)-st iteration to obtain vI+1. Leveraging the recursion (6),
each inner loop iteration i reﬁnes the initialization u0
i = uK
i−1
to yield after K inner iterations uK
i . Such an unrolling leads to
a K(I + 1)-layer structured DNN. Suppose that the sequence
{vi}I+1
i=0 has converged, which means (cid:107)vI − vI+1(cid:107) ≤ (cid:15) for
I + Bz
some (cid:15) > 0. It can then be deduced that vI+1 = Bu
I z
with Bu
I := BI .

I := BI and Bz

I u∗

Our novel DNN architecture, that builds on the physics-
based Alg. 1, is thus a hybrid combining plain-vanilla FNNs
with the conventional iterative solver such as Alg. 1. We
will henceforth term it ‘prox-linear net.’ For illustration, the
prox-linear net with K = 3 is depicted in Fig. 1. The ﬁrst
inner loop i = 0 is highlighted in a dashed box, where
u1
0 = Sη(A0z + b0) because u0
0 = 0. As with [14], [32],
[15], our prox-linear net can be treated as a trainable regressor
i }1≤k≤3
that predicts v from data z, where the coefﬁcients {bk
0≤i≤I ,
I , and Bz
{Ai}I
I are typically untied to en-
hance approximation capability and learning ﬂexibility. Given
historical and/or simulated measurement-voltage training pairs
{(zs, vs)}, these coefﬁcients can be learned end-to-end using
backpropagation [33], possibly employing the Huber loss [34]
to endow the state estimates with resilience to outliers.

0≤i≤I , Bu

i=0, {Wk

i }1≤k≤3

Relative to the conventional FNN in Fig. 2, our proposed
prox-linear net features: i) ‘skip-connections’ (the bluish lines
the input z to intermedi-
in Fig. 1) that directly connect
ate/output layers, and ii) a ﬁxed number (M in this case) of
hidden neurons per layer. It has been shown both analytically
and empirically that these skip-connections help avoid the so-
termed ‘vanishing’ and ‘exploding’ gradient issues, therefore
enabling successful and efﬁcient training of DNNs [26], [35].
The ‘skip-connections’ is also a key enabler of the universal
approximation capability of DNNs with a ﬁxed number of
hidden-neurons per-layer [36].

The only hyper-parameters that must be tuned in our prox-
linear net are I, K, and η, which are also tuning parameters
required by the iterative optimization solver in Alg. 1. It is
also worth pointing out that other than the soft-thresholding
nonlinearity (a.k.a. activation function) used in Figs. 1 and 2,
alternative functions such as the rectiﬁed linear unit (ReLU)
(see e.g. [37] for its good properties) can be applied as

4

Fig. 3: Deep prox-linear net based real-time PSSE.

well [14]. We have observed in our simulated tests that the
prox-linear net with soft thresholding operators or ReLUs yield
similar performance. To understand how different network ar-
chitectures affect the performance, ReLU activation functions
are used by default unless otherwise stated.

The ﬂow chart demonstrating the prox-linear net for real-
time PSSE is depicted in Fig. 3, where the real-time inference
stage is described in the left rounded rectangular box, while
the off-line training stage is on the left. Thanks to the wedding
of the physics in (1) with our DNN architecture design, the
extensive numerical tests in Section V will conﬁrm an impres-
sive boost in performance of our prox-linear nets relative to
competing FNN and Gauss-Newton based PSSE approaches.

IV. DEEP RNNS FOR STATE FORECASTING

Per time slot t, the PSSE scheme we developed in Sec-
tion III estimates the state vector vt ∈ R2N upon receiving
measurements zt. Nevertheless, its performance is challenged
when there are missing entries in zt, which is indeed common
in a SCADA system due for example to meter and/or commu-
nication failures [1]. To enhance our novel PSSE scheme and
obtain system awareness even ahead of time, we are prompted
to pursue power system state forecasting, which for a single
step amounts to predicting the next state vt+1 at time slot t+1
from the available time-series {vτ }t
τ =0 [16]. Analytically, the
estimation and prediction steps are as follows

vt+1 = φ(vt, vt−1, vt−2, . . . , vt−r+1) + ξt
zt+1 = ht+1(vt+1) + (cid:15)t+1

(9)

(10)

where {ξt, (cid:15)t+1} account for modeling inaccuracies; the tun-
able parameter r ≥ 1 represents the number of lagged (present
included) states used to predict vt+1; and the unknown (non-
linear) function φ captures the state transition, while ht+1(·)
is the measurement function that summarizes equations in (1)
at time slot t+1. To perform state forecasting, function φ must
be estimated or approximated – a task that we will accomplish
using RNN modeling, as we present next.

RNNs are NN models designed to learn from correlated time
series data. Relative to FNNs, RNNs are not only scalable
to long-memory inputs (regressors) that entail sequences of
large r, but are also capable of processing input sequences of
variable length [38]. Given the input sequence {vτ }t
τ =t−r+1,

Fig. 4: An unfolded deep RNN with no outputs.

and an initial state st−r, an RNN ﬁnds the hidden state1 vector
sequence {sτ }t

τ =t−r+1 by repeating
sτ = f (R0vτ + Rsssτ −1 + r0)

(11)

where f (·) is a nonlinear activation function (e.g., a ReLU or
sigmoid unit), understood entry-wise when applied to a vector,
whereas the coefﬁcient matrices R0, Rss, and the vector r0
contain time-invariant weights.

Deep RNNs are RNNs of multiple (≥ 3) processing layers,
which can learn compact representations of time series through
hierarchical nonlinear transformations. The state-of-the-art in
numerous sequence processing applications, including music
prediction and machine translation [38], has been signiﬁcantly
improved with deep RNN models. By stacking up multiple
recurrent hidden layers (cf. (11)) one on top of another, deep
RNNs can be constructed as follows [39]

(12)

l ≥ 1

τ + Rss,lsl

τ −1 + rl−1(cid:1),

τ = f (cid:0)Rl−1sl−1
sl
where l is the layer index, sl
τ denotes the hidden state of the
l-th layer at slot τ having s0
τ := vτ , and {Rl, Rss,l, rl} collect
all unknown weights. Fig. 4 (left) depicts the computational
graph representing (12) for l = 2, with the bias vectors rl = 0,
∀l for simplicity in depiction, and the black squares standing
for single-step delay units. Unfolding the graph by breaking
the loops and connecting the arrows to corresponding units
of the next time slot, leads to a deep RNN in Fig. 4 (right),
whose rows represent layers, and columns denote time slots.
The RNN output can come in various forms, including one
output per time step, or, one output after several steps. The
latter matches the rth-order nonlinear regression in (9) when
approximating φ with a deep RNN. Concretely, the output of
our deep RNN is given by

ˇvt+1 = Routsl

t + rout

(13)

where ˇvt+1 is the forecast of vt+1 at time t, and (Rout, rout)
contain weights of the output layer. Given historical voltage
time series, the weights (Rout, rout) and {Rl, Rss,l, rl} can
be learned end-to-end using backpropagation [38]. Invoking
RNNs for state-space models, the class of nonlinear predictors
discussed in [16] is considerably broadened here to have
memory. As will be demonstrated through extensive numer-
ical tests, the forecasting performance can be signiﬁcantly

1Hidden state is an auxiliary set of vector variables not to be confused with

the power system state v consisting of the nodal voltages as in (1).

5

the backpropagation based algorithm ‘Adam’ (with starting
learning rate 10−3) for 200 epochs. To alleviate randomness in
the obtained weights introduced by the training algorithms, all
NNs were trained and tested independently for 20 times, with
reported results averaged over 20 runs. For reproducibility,
the ‘Python’-based implementation of our prox-linear net
for PSSE of the 118-bus system is publicly available at
https://github.com/LiangZhangUMN/PSSE-via-DNNs.

A. Prox-linear nets for PSSE

To start, the prox-linear net based PSSE was tested, which
estimates {ˆvτ } using {zτ }. For both training and testing
phases, all measurements {zτ } were corrupted by additive
white Gaussian noise, where the standard deviation for power
ﬂows and for voltage magnitudes was 0.02 and 0.01. The
estimation performance of our prox-linear net was assessed
in terms of the normalized root mean-square error (RMSE)
(cid:107)ˆv − v(cid:107)2/N , where v is the ground truth, and ˆv the estimate
obtained by the prox-linear net.

In particular, the prox-linear net was simulated with T = 2
and K = 3. The ‘workhorse’ Gauss-Newton method, a 6-
layer ‘plain-vanilla’ FNN that has the same depth as our prox-
linear net, and an 8-layer ‘plain-vanilla’ FNN that has roughly
the same number of parameters as the prox-linear net, were
simulated as baselines. The number of hidden units per layer
in all NNs was kept equal to the dimension of the input, that
is, 57 × 2 = 114 for the 57-bus system and 118 × 2 = 236 for
the 118-bus system.

In the ﬁrst experiment using the 57-bus system, a total of
7, 676 measurement-voltage (zτ , vτ ) pairs were generated, out
of which the ﬁrst 6, 176 pairs were used for training, and the
rest were kept for testing. The average performance over 20
trials, was evaluated in terms of the average RMSEs over
the 1, 500 testing examples for the prox-linear net, Gauss-
Newton, 6-layer FNN, and 8-layer FNN, are 3.49 × 10−4,
3.2 × 10−4, 6.35 × 10−4, and 9.02 × 10−4, respectively. These
numbers showcase competitive performance of the prox-linear
net. Interestingly, when the number of hidden layers of ‘plain-
vanilla’ FNNs increases from 6 to 8, the performance degrades
due partly to the difﬁculty in training the 8-layer FNN.

As far as the computation time is concerned, the prox-
linear net, Gauss-Newton, 6-layer FNN, and 8-layer FNN over
1, 500 testing examples are correspondingly 0.0973s, 14.22s,
0.0944s, and 0.0954s, corroborating the speedup advantage of
NN-based PSSE over the traditional Gauss-Newton approach.
The ground-truth voltages along with the estimates found by
the prox-linear net, 6-layer FNN, and 8-layer FNN for bus
10 and bus 27 from test instances 100 to 120, are shown in
Figs. 6 and 7, respectively. The true voltages and the estimated
ones by NNs for all buses on test instance 120 are depicted
in Fig. 8. Evidently, our prox-linear net based PSSE performs
the best in all cases.

The second experiment tests our prox-linear net using the
IEEE 118-bus system, where 18, 528 voltage-measurement
pairs were simulated, with 14, 822 pairs employed for training
and 3, 706 kept for testing. The average RMSEs over 3, 706
testing examples for the prox-linear net, Gauss-Newton, 6-
layer FNN and 8-layer FNN, are 2.97 × 10−4, 4.71 × 10−2,

Fig. 5: DNN-based real-time power system monitoring.

improved through the use of deep RNNs. Although the focus
here is on one-step state forecasting, it is worth stressing that
our proposed approaches with minor modiﬁcations, can be
generalized to predict the system states multiple steps ahead.
So far, we have elaborated on how RNNs enable ﬂexible
nonlinear predictors for power system state forecasting. To
predict ˇvt+1 at time slot t, the RNN in (12) requires ground-
truth voltages {vτ }t
τ =t−r+1 (cf. (9)), which however, may not
be available in practice. Instead we can use the estimated ones
{ˆvτ }t
τ =t−r+1 provided by our prox-linear net-based estimator
in Section III. In turn, the forecast ˇvt+1 can be employed as a
prior to aid PSSE at time slot t+1, by providing the so-termed
virtual measurements ˇzt+1 := ht+1(ˇvt+1) that can be readily
accounted for in (2). For example, when there are missing
entries in zt+1, the obtained ˇzt+1 can be used to improve the
PSSE performance by imputing the missing values.

that are implemented at

Figure 5 depicts the ﬂow chart of the overall real-time
power system monitoring scheme, consisting of deep prox-
linear net-based PSSE and deep RNN-based state forecasting
time t and t + 1. Our
modules,
novel scheme is reminiscent of the predictor-corrector-type
estimators emerging with dynamic state estimation problems
using Kalman ﬁlters [18], [1]. Although beyond the scope
of the present paper, it is worth remarking that the residuals
zt+1 − ht+1(ˆvt+1) along with zt+1 − ˇzt+1 can be used to
unveil erroneous data, as well as changes in the grid topology
and the link parameters; see [16], [40] for an overview.

V. NUMERICAL TESTS

Performance of our deep prox-linear net based PSSE, and
deep RNN based state forecasting methods was evaluated
using the IEEE 57- and 118-bus benchmark systems. Real
load data from the 2012 Global Energy Forecasting Compe-
tition (GEFC)2 were used to generate the training and testing
datasets, where the load series were subsampled for size
reduction by a factor of 5 (2) for the IEEE 57-bus (118-bus)
system. Subsequently, the resultant load instances were nor-
malized to match the scale of power demands in the simulated
system. The MATPOWER toolbox [41] was used to solve the
AC power ﬂow equations with the normalized load series as
inputs, to obtain the ground-truth voltages {vτ }, and produce
measurements {zτ } that comprise all forwarding-end active
(reactive) power ﬂows, as well as all voltage magnitudes. All
NNs were trained using ‘TensorFlow’ [42] on an NVIDIA
Titan X GPU with 12GB RAM, with weights learned by

2https://www.kaggle.com/c/global-energy-forecasting-competition-2012-

load-forecasting/data.

6

Fig. 6: Estimation errors in voltage magnitudes and angles of
bus 10 of the 57-bus system from test instances 100 to 120.

Fig. 8: Estimation errors in voltage magnitudes and angles of
all the 57 buses of the 57-bus system at test instance 120.

Fig. 7: Estimation errors in voltage magnitudes and angles of
bus 27 of the 57-bus system from test instances 100 to 120.

Fig. 9: Estimation errors in voltage magnitudes and angles of
bus 50 of the 118-bus system from instances 1, 000 to 1, 050.

1.645 × 10−3, and 2.366 × 10−3, respectively. Clearly, our
prox-linear net yields markedly improved performance over
competing alternatives in this case (especially as the system
size grows large). The Gauss-Newton approach performs the
worst due to unbalanced grid parameters of this test sys-
tem. Interestingly, it was frequently observed that the Gauss-
Newton iterations minimize the weighted least-squares (WLS)
objective function (resulting a loss smaller than 10−6), but
converge to a stationary point
is far away from the
simulated ground-truth voltage. This is indeed due to the
nonconvexity of the WLS function, for which multiple optimal
solutions often exist. Depending critically on initialization,
traditional optimization based solvers can unfortunately get
stuck at any of those points. In sharp contrast, data-driven
NN-based approaches nicely bypass this hurdle.

that

In terms of runtime, the prox-linear net, Gauss-Newton, 6-

layer FNN, and 8-layer FNN, over 3, 706 testing examples
are correspondingly 0.3323s, 183.4s, 0.2895s, and 0.3315s,
corroborating again the efﬁciency of NN-based approaches.
The ground-truth voltage along with estimates obtained by
the prox-linear net, 6-layer FNN, and 8-layer FNN, for bus
50 and bus 100 at test instances 1, 000 to 1, 050, are depicted
in Figs. 9 and 10, respectively. In addition, the actual voltages
and their estimates for the ﬁrst ﬁfty buses on test instance
1, 000 are depicted in Fig. 11. In all cases, our prox-linear net
yields markedly improved performance relative to competing
alternatives.

B. Deep RNNs for state forecating

This section examines our RNN based power system state
forecasting scheme. The forecasting performance was evalu-

7

Fig. 10: Estimation errors in voltage magnitudes and angles of
bus 100 of the 118-bus system from instances 1, 000 to 1, 050.

Fig. 12: Forecasting errors in voltage magnitudes and angles
of bus 30 of the 57-bus system from test instances 100 to 120.

Fig. 11: Estimation errors in voltage magnitudes and angles of
the ﬁrst 50 buses of the 118-bus system at test instance 1, 000.

ated in terms of the normalized RMSE (cid:107)ˇv − v(cid:107)2/N of the
forecast ˇv relative to the ground truth v.

Speciﬁcally, deep RNNs with l = 3, r = 10, and ReLU
activation functions were trained and tested on the ground-
truth voltage time series, and on the estimated voltage time
series from the prox-linear net. We will refer to the latter
as ‘RNNs with estimated voltages’ hereafter. The number of
hidden units per layer in RNNs was kept the same as the input
dimension, namely 57 × 2 = 114 for the 57-bus system, and
118 × 2 = 236 for the 118-bus system. For comparison, a
single-hidden-layer FNN (2-layer FNN) [24], and a VAR(1)
model [23] based state forecasting approaches were adopted
as benchmarks. The average RMSEs over 20 Monte Carlo runs
for the RNN, RNN with estimated voltages, 2-layer FNN,
and VAR(1) are respectively 2.303 × 10−3, 2.305 × 10−3,
3.153×10−3, and 6.772×10−3 for the 57-bus system, as well
as 2.588×10−3, 2.751×10−3, 4.249×10−3, 6.461×10−3 for

Fig. 13: Forecasting errors in voltage magnitudes and angles
of all the 57 buses of the 57-bus system at test instance 100.

the 118-bus system. These numbers demonstrate that our deep
RNN with estimated voltages offers comparable forecasting
performance relative to that with ground-truth voltages. Al-
though both FNN and VAR(1) were trained and tested using
ground-truth voltage time-series, they perform even worse than
our RNN trained with estimated voltages.

The true voltages and their forecasts provided by the deep
RNN, RNN with estimated voltages, 2-layer FNN, and VAR(1)
for bus 30 of the 57-bus system from test instances 100 to 120,
as well as all buses on test instance 100, are reported in Figs.
12 and 13, accordingly. The ground-truth and forecast voltages
for the ﬁrst 50 buses of the 118-bus system on test instance
1, 000 are depicted in Fig. 14. Curves illustrate that our deep
RNN based approaches perform the best in all cases.

8

Fig. 14: Forecasting errors in voltage magnitudes and angles
of the ﬁrst 50 buses of the 118-bus system at instance 1, 000.

VI. CONCLUSIONS

This paper dealt with real-time power system monitoring
(estimation and forecasting) by building on data-driven DNN
advances. Prox-linear nets were developed for PSSE,
that
combine NNs with traditional physics-based optimization ap-
proaches. Deep RNNs were also introduced for power system
state forecasting from historical (estimated) voltages. Our
model-speciﬁc prox-linear net based PSSE is easy-to-train, and
computationally inexpensive. The proposed RNN-based fore-
casting accounts for the long-term nonlinear dependencies in
the voltage time-series, enhances PSSE, and offers situational
awareness ahead of time. Numerical tests on the IEEE 57-
and 118-bus benchmark systems using real load data illustrate
the merits of our developed approaches relative to existing
alternatives.

Our current and future research agenda includes special-
izing the DNN-based estimation and forecasting schemes to
distribution networks. Our agenda also includes ‘on-the-ﬂy’
RNN-based algorithms to account for dynamically changing
environments, and corresponding time dependencies.

REFERENCES

[1] V. Kekatos, G. Wang, H. Zhu, and G. B. Giannakis, PSSE Redux:
Convex Relaxation, Decentralized, Robust, and Dynamic Approaches.
in Advances in Power System State Estimation, Ed. Mo El-Hawary; see
also arXiv:1708.03981, 2017.

[2] K. Dehghanpour, Z. Wang, J. Wang, Y. Yuan, and F. Bu, “A survey on
state estimation techniques and challenges in smart distribution systems,”
IEEE Trans. Smart Grid, pp. 1–11, 2018 (To appear).

[3] G. B. Giannakis, V. Kekatos, N. Gatsis, S.-J. Kim, H. Zhu, and
B. Wollenberg, “Monitoring and optimization for power grids: A signal
processing perspective,” IEEE Signal Proc. Mag., vol. 30, no. 5, pp.
107–128, Sep. 2013.

[4] L. Zhang, G. Wang, and G. B. Giannakis, “Going beyond linear depen-
dencies to unveil connectivity of meshed grids,” in Proc. IEEE Wkshp. on
Comput. Adv. Multi-Sensor Adaptive Process., Curacao, Dutch Antilles,
Dec. 2017.

[5] L. Zhang, V. Kekatos, and G. B. Giannakis, “Scalable electric vehicle
charging protocols,” IEEE Trans. Power Syst., vol. 32, no. 2, pp. 1451–
1462, Mar. 2017.

[6] V. Kekatos, L. Zhang, G. B. Giannakis, and R. Baldick, “Voltage
regulation algorithms for multiphase power distribution grids,” IEEE
Trans. Power Syst., vol. 31, no. 5, pp. 3913–3923, Sept. 2016.

[7] A. J. Wood and B. F. Wollenberg, Power Generation, Operation, and

Control, 2nd ed. New York, NY: Wiley & Sons, 1996.

[8] G. Wang, A. S. Zamzam, G. B. Giannakis, and N. D. Sidiropoulos,
“Power system state estimation via feasible point pursuit: Algorithms
and Cram´er-Rao bound,” IEEE Trans. Signal Process., vol. 66, no. 6,
pp. 1649–1658, Mar. 2018.

[9] P. N. P. Barbeiro, J. Krstulovic, H. Teixeira, J. Pereira, F. J. Soares,
and J. P. Iria, “State estimation in distribution smart grids using autoen-
coders,” in Proc. Intl. Power Eng. and Optimization Conf., Shah Alam,
Malaysia, Mar. 2014, pp. 358–363.

[10] A. S. Zamzam, X. Fu, and N. D. Sidiropoulos, “Data-driven
learning-based optimization for distribution system state estimation,”
arXiv:1807.01671, 2018.

[11] H. Sun, X. Chen, Q. Shi, M. Hong, X. Fu, and N. D. Sidiropoulos,
“Learning to optimize: Training deep neural networks for interference
management,” in IEEE Trans. Signal Process., vol. 66, no. 20, Oct. 2018,
pp. 1039–1050.

[12] N. Samuel, T. Diskin, and A. Wiesel, “Deep MIMO detection,” in Proc.

SPAWC, Hokkaido, Japan, July 2017, pp. 1–5.

[13] Y. Zhao, J. Chen, and H. V. Poor, “A learning-to-infer method for real-
time power grid multi-line outage identiﬁcation,” IEEE Trans. Smart
Grid, pp. 1–10, 2018 (To appear; see also arXiv:1710.07818 ).
[14] K. Gregor and Y. LeCun, “Learning fast approximations of sparse
coding,” in Proc. Intl. Conf. on Machine Learning, Haifa, Israel, Jun.
2010.

[15] Y. Yang, J. Sun, H. Li, and Z. Xu, “Deep ADMM-net for compressive
sensing MRI,” in Proc. Adv. Neural Inf. Process. Syst., Barcelona, Spain,
Dec. 2016.

[16] M. B. Do Coutto Filho and J. C. Stacchini de Souza, “Forecasting-aided
state estimation–Part I: Panorama,” IEEE Trans. Power Syst., vol. 24,
no. 4, pp. 1667–1677, Nov. 2009.

[17] G. Wang, S.-J. Kim, and G. B. Giannakis, “Moving-horizon dynamic
power system state estimation using semideﬁnite relaxation,” in Proc.
IEEE PES General Meeting, Washington, DC, July 2014, pp. 1–5.
[18] J. Zhao, G. Zhang, Z. Dong, and M. La Scala, “Robust forecasting
aided power system state estimation considering state correlations,”
IEEE Trans. Smart Grid, vol. 9, no. 4, pp. 2658–2666, July 2018.
[19] W. S. Rosenthal, A. M. Tartakovsky, and Z. Huang, “Ensemble kalman
ﬁlter for dynamic state estimation of power grids stochastically driven
by time-correlated mechanical input power,” IEEE Trans. Power Syst.,
vol. 33, no. 4, pp. 3701–3710, July 2018.

[20] A. S. Debs and R. E. Larson, “A dynamic estimator for tracking the
state of a power system,” IEEE Trans. Power App. Syst., vol. 89, no. 7,
pp. 1670–1678, Sept. 1970.

[21] A. M. Leite da Silva, M. B. Do Coutto Filho, and J. F. De Queiroz,
“State forecasting in electric power systems,” IEE Proc. C (Gen. Trans.
Dist.), vol. 130, no. 5, pp. 237–244, Sept. 1983.

[22] M. Hassanzadeh and C. Y. Evrenoso˘glu, “Power system state forecasting
using regression analysis,” in Proc. IEEE Power & Energy Society
General Meeting, San Diego, CA, USA, July 2012, pp. 1–6.

[23] M. Hassanzadeh, C. Y. Evrenoso˘glu, and L. Mili, “A short-term nodal
voltage phasor forecasting method using temporal and spatial correla-
tion,” IEEE Trans. Power Syst., vol. 31, no. 5, pp. 3881–3890, 2016.

[24] M. B. Do Coutto Filho, J. C. Stacchini de Souza, and R. S. Fre-
und, “Forecasting-aided state estimation–Part II: Implementation,” IEEE
Tran. Power Syst., vol. 24, no. 4, pp. 1678–1685, Nov. 2009.

[25] G. Wang, G. B. Giannakis, and J. Chen, “Robust and scalable power
system state estimation via composite optimization,” IEEE Trans. Smart
Grid (Re-revised); see also arXiv:1708.06013, 2017.

[26] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image
recognition,” in Proc. Conf. Comput. Vision and Pattern Recognit., Las
Vegas, NV, 2016, pp. 770–778.

[27] A. Abur and M. K. Celik, “A fast algorithm for the weighted least-
absolute-value state estimation (for power systems),” IEEE Trans. Power
Syst., vol. 6, no. 1, pp. 1–8, Feb. 1991.

[28] R. Jabr and B. Pal, “Iteratively reweighted Least-Squares implementation
of the WLAV state-estimation method,” IET Gener. Transm. Dis., vol.
151, no. 1, pp. 103–108, Feb. 2004.

[29] J. V. Burke and M. C. Ferris, “A Gauss-Newton method for convex
composite optimization,” vol. 71, no. 2, pp. 179–194, Dec. 1995.
[30] G. Wang, H. Zhu, G. B. Giannakis, and J. Sun, “Robust power
system state estimation from rank-one measurements: Exact recovery
and quadratic convergence,” IEEE Trans. Control Netw. Syst., 2019 (To
appear).

9

[31] N. Parikh and S. Boyd, “Proximal algorithms,” Foundations and Trends

in Optimization, vol. 1, no. 3, pp. 127–239, 2014.

[32] Z. Wang, Q. Ling, and T. Huang, “Learning deep (cid:96)0 encoders,” in Proc.
AAAI Conf. on Artiﬁcial Intell., Phoenix, AZ, Feb. 2016, pp. 2194–2200.
[33] D. E. Rumelhart, G. E. Hinton, and R. J. Williams, “Learning represen-
tations by back-propagating errors,” Nature, vol. 323, pp. 533–536, Oct.
1986.

[34] P. J. Huber, “Robust Statistics,” in International Encyclopedia of Statis-

tical Science. Springer, 2011, pp. 1248–1251.

[35] K. He, X. Zhang, S. Ren, and J. Sun, “Identity mappings in deep
residual networks,” in European Conf. Comput. Vision. Amsterdam,
Netherlands: Springer, Oct. 2016, pp. 630–645.

[36] H. Lin and S. Jegelka, “Resnet with one-neuron hidden layers is a

universal approximator,” arXiv:1806.10909, July 2018.

[37] G. Wang, G. B. Giannakis, and J. Chen, “Learning ReLU networks
on linearly separable data: Algorithm, optimality, and generalization,”
arXiv:1808.04685, 2018.

[38] I. Goodfellow, Y. Bengio, and A. Courville, Deep Learning. Cambridge,

MA: MIT Press, 2016, http://www.deeplearningbook.org.

[39] R. Pascanu, C. Gulcehre, K. Cho, and Y. Bengio, “How to construct
deep recurrent neural networks,” in Proc. Intl. Conf. on Learning
Representations, Banff, Canada, Apr. 2014.

[40] G. B. Giannakis, Y. Shen, and G. V. Karanikolas, “Topology identi-
ﬁcation and learning over graphs: Accounting for nonlinearities and
dynamics,” Proc. IEEE, vol. 106, no. 5, pp. 787–807, May 2018.
[41] R. D. Zimmerman, C. E. Murillo-Sanchez, and R. J. Thomas, “MAT-
POWER: Steady-state operations, planning and analysis tools for power
systems research and education,” IEEE Trans. Power Syst., vol. 26, no. 1,
pp. 12–19, Feb. 2011.

[42] M. Abadi et al., “TensorFlow: Large-scale machine learning on
heterogeneous systems,” 2015, software available from tensorﬂow.org.
[Online]. Available: https://www.tensorﬂow.org/

