Learning a Hierarchical Latent-Variable Model of 3D Shapes

Shikun Liu
Imperial College London
shikun.liu17@imperial.ac.uk

C. Lee Giles
Pennsylvania State University
giles@ist.psu.edu

Alexander G. Ororbia II
Pennsylvania State University
ago109@psu.edu

8
1
0
2
 
g
u
A
 
4
 
 
]

V
C
.
s
c
[
 
 
4
v
4
9
9
5
0
.
5
0
7
1
:
v
i
X
r
a

Figure 1: Random 3D shapes generated by sampling the learned latent space of the proposed Variational Shape Learner
trained from ModelNet40 dataset [45]. See more results in Section 4.3.

Abstract

We propose the Variational Shape Learner (VSL), a gen-
erative model that learns the underlying structure of vox-
elized 3D shapes in an unsupervised fashion. Through the
use of skip-connections, our model can successfully learn
and infer a latent, hierarchical representation of objects.
Furthermore, realistic 3D objects can be easily generated
by sampling the VSL’s latent probabilistic manifold. We
show that our generative model can be trained end-to-end
from 2D images to perform single image 3D model re-
trieval. Experiments show, both quantitatively and quali-
tatively, the improved generalization of our proposed model
over a range of tasks, performing better or comparable to
various state-of-the-art alternatives.

1. Introduction

Over the past several years, impressive strides have been
made in the generative modelling of 3D objects. Much of
this progress can be attributed to recent advances in arti-
Instead of the usual ap-
ﬁcial neural network research.
proach to representing 3D shapes with voxel occupancy
vectors, promising recent work has taken to learning sim-
ple latent representations of such objects. Neural architec-
tures that have been developed with this goal in mind in-
clude those based on deep belief networks [45], deep au-
toencoders [49, 13, 32], and 3D convolutional networks
[27, 48, 35, 5, 16]. The positive progress made so far with
neural networks has also led to the creation of several large-
scale 3D CAD model benchmarks, notably ModelNet [45]
and ShapeNet [3].

However, despite the progress made so far, one key

weakness shared among all previous state-of-the-art ap-
proaches is that all of them have focused on learning a sin-
gle (“ﬂat”) vector representation of 3D shapes. These in-
clude recent and powerful models such as the autoencoder-
like T-L Network [13] and the probabilistic 3D Genera-
tive Adversarial Network (3D-GAN) [44], which shared
its latent vector representation over multiple tasks. Other
models, such as those of [19, 18], further required addi-
tional supervision using information about camera view-
points, shape keypoints, and segmentations.

To describe the input with only a single layer of latent
variables might be too restrictive an assumption, hinder-
ing the expressiveness of the underlying generative model
learned. Having a multilevel latent structure, on the other
hand, would allow for lower-level latent variables to focus
on modelling features such as edges and the upper levels to
learn to command those lower-level variables as to where
to place those edges in order to form curves and shapes.
This composition of latent (local) sub-structures would al-
low us to exploit the fact that most 3D shapes usually have
similar structure. Note that this course-to-ﬁne feature ex-
traction process is the very essence of abstraction, yielding
representations that can be easily constructed in terms of
less abstract ones [2]. Higher-level variables, or disentan-
gled features, would be modelling complex interactions of
low-level patterns. Thus, to encourage the learning of hier-
archical features, we explicitly incorporate this as a prior in
our model through explicit architectural constraints.

In this paper, motivated by the argument for a hierarchi-
cal representation developed above and the promise shown
in work such as that of [9], we show how to encourage a
latent-variable generative model to learn a hierarchy of la-
tent variables through the use of synaptic skip-connections.

1

These skip-connections encourage each layer of latent vari-
ables to model exactly one level of abstraction of the data.
To efﬁciently learn such a latent structure, we further exploit
recent advances in approximate inference [22] to develop a
variational learning procedure. Empirically, we show that
the learned generative model, which we call the Variational
Shape Learner, acquires rich representations of 3D shapes
that yield signiﬁcantly improved performance across a mul-
titude of 3D shape tasks.

The main contributions of this paper are as follows:

• We propose a novel latent-variable model, which we call
the Variational Shape Learner, which is capable of learn-
ing expressive feature representations of 3D shapes. We
observe impressive performance in shape generation and
shape arithmetic in a large dataset.

• For both general 3D model building and single image re-
construction, we show that our model is fully unsuper-
vised, requiring no extra human-generated information
about segmentation, keypoints, or pose information.

• We show that our model outperforms current state-of-the-
art approaches in unsupervised (object) model classiﬁca-
tion while requiring signiﬁcantly fewer learned feature
extractors (a vector with less than 100 dimensions com-
pared to the 3D-GAN’s 2.5 million dimensional vector).

• In real-world image reconstruction, our extensive set of
experiments show that the proposed Variational Shape
Learner surpasses state-of-the-art in 8 of 10 classes. Half
of these the VSL surpasses by a large margin.

2. Related Work

3D object recognition is a well-studied problem in the
computer vision literature. Early efforts [28, 23, 34] often
combined simple image classiﬁcation methods with hand-
crafted shape descriptors, requiring intensive effort on the
side of the human data annotator. However, ever since
the ImageNet contest of 2012 [24], deep convolutional net-
works (ConvNets) [11, 25] have swept the vision industry,
becoming nearly ubiquitous in countless applications.

Research in learning probabilistic generative models has
also beneﬁted from the advances made by artiﬁcial neural
networks. Generative Adversarial Networks (GANs), pro-
posed in [14] and Variational auto-encoders (VAEs), pro-
posed in [22, 33], are some of the most popular and impor-
tant frameworks that have emerged from improvements in
generative modelling. Successful adaptation of these frame-
works range from a focus in natural language and speech
processing [6, 36] to realistic image synthesis [15, 31, 29],
yielding promising, positive results. Nevertheless, very lit-
tle work, outside of [44, 13, 32], has focused on modeling
3D objects, where generative architectures could be used to

learn probabilistic embeddings. The model proposed in this
paper will offer another step towards constructing powerful
generative models of 3D structures.

One study, amidst the rise of neural network-based ap-
proaches to 3D object recognition, that is most relevant to
this paper is that of [45], which presented promising results
and a benchmark for 3D model recognition: ModelNet.
Following this key study, researchers have tried applying
3D ConvNets [27, 5, 42, 48], autoencoders [47, 49, 13, 32],
and a variety of probabilistic neural generative models
[44, 32] to the problem of 3D model recognition, with each
study progressively advancing state-of-the-art.

With respect to 3D object generation from 2D images,
commonly used methods can be roughly grouped into two
categories: 3D voxel prediction [45, 44, 13, 32, 5, 16] and
mesh-based methods [12, 7]. The 3D-R2N2 model [5] rep-
resents a more recent approach to the task, which involves
training a recurrent neural network to predict 3D voxels
from one or more 2D images. [32] also takes a recurrent
network-based approach, but receives a depth image as in-
put rather than normal 2D images. The learnable stereo sys-
tem [18] processes one or more camera views and camera
pose information to produce compelling 3D object samples.
Many of the above methods require multiple images
and/or additional human-provided information. Some ap-
proaches have attempted to minimize human involvement
by developing weakly-supervised schemes, making use
of image silhouettes to conduct 3D object reconstruction
[48, 43]. Of the few unsupervised neural-based approaches
that exist, the T-L network [13] is one of the most important,
combining a convolutional autoencoder with an image re-
gressor to encode a uniﬁed vector representation of a given
2D image. However, one fundamental issue with the T-L
Network is its three-phase training procedure, since jointly
training the system components proves to be too difﬁcult.
The 3D-GAN [44] offers a way to train 3D object models
in an adversarial learning scheme. However, GANs are no-
toriously difﬁcult to train [1], often due to ill-designed loss
functions and the higher chance of zero gradients.

In contrast to prior work, our approach, which is derived
from a variational Bayesian perspective view of learning,
naturally allows for joint training of all model parameters.
Furthermore, our approach makes use of a well-formulated
loss function that circumvents the instability involved with
adversarial learning while still being able to produce higher-
quality samples.

3. The Variational Shape Learner

In this section, we introduce our proposed model, the
Variational Shape Learner (VSL), which builds on the ideas
of the Neural Statistician [9] and the volumetric convolu-
tional network [27], the parameters of which the VSL learns
under a variational inference scheme [22].

Figure 2: The network structure of the Variational Shape Learner. Solid lines represent synaptic connections for either
fully-connected or convolutional layers while dashed lines represent concatenation. Dotted-dashed lines represent possible
applications.

means concatenated features, and

means equivalence relation.

means latent features,

◦

(cid:50)

(cid:5)

3.1. The Design Philosophy

It is well known that generative models, learned through
variational inference, are excellent at reconstructing com-
plex data but tend to produce blurry samples. This happens
because there is uncertainty in the model’s predictions when
we reconstruct the data from a latent space. As described
above, previous approaches to 3D object modelling have fo-
cused on learning a single latent representation of the data.
However, this simple latent structure might be hindering the
model’s ability to extract richer structure from the input dis-
tribution and thus lead to blurrier reconstructions.

To improve the quality of the samples of generated ob-
jects, we introduce a more complex internal variable struc-
ture, with the speciﬁc goal of encouraging the learning of
a hierarchical arrangement of latent feature detectors. The
motivation for a latent hierarchy comes from the observa-
tion that objects under the same category usually have simi-
lar geometric structure. As can be seen in Figure 2, we start
from a global latent variable layer (horizontally depicted)
that is hardwired to a set of local latent variables layers (ver-
tically depicted), each tasked with representing one level of
feature abstraction. The skip-connections tie together the
latent codes, and in a top-down directed fashion, local codes
closer to the input will tend to represent lower-level features
while local codes farther away from the input will tend to-
wards representing higher-level features.

The global latent vector can be thought of as a large

pool of command units that ensures that each local code
extracts information relative to its position in the hierarchy,
forming an overall coherent structure. This explicit global-
local form, and the way it constrains how information ﬂows
across it, lends itself to a straightforward parametrization of
the generative model and furthermore ensures robustness,
dramatically cutting down on over-ﬁtting. To make things
easier for training via stochastic back-propagation, the lo-
cal codes will be concatenated to a ﬂattened structure when
fed into the task-speciﬁc models, e.g., a shape classiﬁer or
a voxel reconstruction module. Ultimately, more realistic
samples should be generated by an architecture supporting
this kind of latent-variable design, since the local variable
layers will robustly encode hierarchical semantic cues in an
unsupervised fashion.

3.2. Model Objective: Variational + Latent Loss

The variational auto-encoder (VAE) [22] has recently
been introduced as a powerful generative model for unsu-
pervised learning. The generative model pθ(x
z) for a sin-
gle data point x with a latent variable z can be parameter-
ized by a neural network with parameters θ. The parameters
are inferred by maximizing the variational lower bound,

|

(cid:20)

(cid:21)

log p(x)

Eqφ(z|x)

z)pθ(z)
|
x)
qφ(z
|
The inference model qφ(z
x) can also be parameterized by
a deep neural network. The inference and generative pa-

pθ(x

log

(1)

≥

|

rameters are then jointly trained by optimizing Equation 1
using back-propagation and stochastic gradient ascent. To
deal with the stochasticity of the latent variables, which,
in VAE models, are typically assumed to be Gaussian dis-
tributed, we use the re-parameterization trick in order to
back-propagate through the operation of sampling the Gaus-
sian variables. We refer the reader to [8] for a much more
detailed explanation.

To learn the parameters of the VSL latent-variable
model, we will take a variational inference approach, where
the goal is to learn a generative model p(x; θ), with gener-
ative parameters θ, using a recognition model q(z0:n
x; φ),
|
with variational parameters φ. The VSL’s learning objective
rec as well as
contains a standard reconstruction loss term
a regularization penalty
reg over the latent variables. Fur-
thermore, the loss contains an additional term for the latent
variables
lat, which is particularly relevant and useful for
the 3D model retrieval task of Section 4.5. This extra term
is a simple
2 penalty imposed on the difference between
the learned features of the image regressor z(cid:48) and true latent
features z = [z0:n] where [

] denotes concatenation.
·

We assume a ﬁxed, spherical unit Gaussian prior,
(0, I). The conditional distribution over each

L

L

L

L

p(z0) =
N
local latent code (zi, i

p(zi

zi−1, z0; θ) =

|

≥

N

2) is deﬁned as follows:
(µ(zi−1, z0), σ2(zi−1, z0))

where the ﬁrst local code z1 is simply:

p(z1

z0; θ) =

|

N
z0; θ) and p(zi

(µ(z0), σ2(z0)).

|

zi−1, z0; θ) are also spherical
Note that p(z1
|
Gaussians and θ contains the generative parameters. The
(occupancy) probability for one voxel p(x) can then be cal-
culated by,

(cid:90)

n
(cid:89)

i=2

p(x

z0:n; θ)p(z1

|

z0; θ)p(z0)
|

p(zi

zi−1, z0; θ) dz0:n.
|

(4)
Let the reconstructed voxel ˆx be directly parameterized
(x) for the input voxel
by occupancy probability. The loss
x of the VSL is then calculated by the following equation:

L

(x) =

rec + δ

reg + γ

lat,

L

L

L

L

where each term in the equation above is deﬁned as follows:

x) log(1

ˆx)

−

L

L

rec = x log(ˆx) + (1
−
p(z0))
x; φ)
reg = KL(q(z0
|
(cid:107)
p(z1
z0, x; φ)
+ KL(q(z1
(cid:107)
n
(cid:88)

|

+

KL(q(zi

z0; θ))
|

i=2

lat =

L

z(cid:48)

z

2
2.

−

(cid:107)

−(cid:107)

zi−1, z0, x; φ)
(cid:107)
|

p(zi

zi−1, z0; θ))
|

Note that δ and γ, which weigh the contributions of the each
term towards the overall cost, are tunable hyper-parameters.

(2)

(3)

(5)

(6)

(7)

(8)

3.3. Encoder: 3D-ConvNet + Skip-Connections

6, 5, 4
{

and channels

, strides
}

32, 64, 128
{

The global latent code z0 is directly learned from the
input voxel through three convolutional layers with kernel
2, 2, 1
.
sizes
}
}
{
Each local latent code z>1 is conditioned on the global
latent code, the input voxel x, and the previous latent code
(except for z1, which does not have a previous latent code)
using two fully-connected layers with 100 neurons each.
The skip-connections between local codes help ease the
process of learning hierarchical features (i.e., improved gra-
dient transmission) and force each local code to learn one
level of abstraction.

The approximate posterior for a single voxel is given by:

q(z0

x; φ)q(z1
|

z0, x; φ)
|

q(zi

zi−1, z0, x; φ)
|

(9)

n
(cid:89)

i=2

where φ, the variational parameters, is parameterized by
neural networks. n represents the number of local latent
codes.

3.4. Decoder: 3D-DeConvNet

After we learn the global and local latent codes z0:n, we
then concatenate them into a single vector as shown in Fig-
ure 2 in blue dashed lines.

A 3D deconvolutional neural network with dimensions
symmetrical to the encoder of Section 3.3 is used to decode
the learned latent features into a voxel. An element-wise
logistic sigmoid is applied to the output layer in order to
convert the learned features to occupancy probabilities for
each voxel cell.

3.5. Image Regressor: 2D-ConvNet

We use a standard 2D convolutional network to encode
input RGB images into a feature space with the same di-
mension as the concatenation of global and local latent
codes [z0:n]. The network contains four fully-convolutional
2, 2, 2, 1
,
layers with kernel sizes
}
{
and channels
. The last convolutional layer
}
is ﬂattened and fed into two fully-connected layers with
200 and 100 neurons each. Unlike the encoder described
in Section 3.3, we apply dropout [41] before the last fully-
connected layer.

16, 32, 64, 128
{

32, 15, 5, 3
{

, strides
}

4. Experiments

To evaluate the quality of our proposed generative model

for 3D shapes, we conduct several extensive experiments.

In Section 4.3, we investigate our model’s ability to gen-
eralize and synthesize through a shape interpolation exper-
iment and an nearest neighbours analysis of random gener-
ated samples from the VSL. Following this, in Section 4.4,
we evaluate our model on the task of unsupervised shape

classiﬁcation by directly using the learned latent features on
both the ModelNet10 and ModelNet40 datasets. We com-
pare these results to previous supervised and unsupervised
state-of-the-art methods. Next, we test our model’s ability
to reconstruct real-world image in Section 4.5, comparing
our results to 3D-R2N2 [5] and NRSfM [19]. Finally, we
demonstrate the richness of the VSL’s learned semantic em-
beddings through vector arithmetic, using the latent features
trained on ModelNet40 for Section 4.6.

4.1. Datasets

ModelNet There are two variants of the ModelNet
dataset, ModelNet10 and ModelNet 40, introduced in [45],
with 10 and 40 target classes respectively. ModelNet10 has
3D shapes which are pre-aligned with the same pose across
all categories. In contrast, ModelNet40 (which includes the
shapes found in ModelNet10) features a variety of poses.
We voxelize both ModelNet10 and ModelNet40 with reso-
lution [30
30]. To test our model’s ability to handle
3D shapes of great variety and complexity, we use Model-
Net40 for most of the experiments, especially for those in
Section 4.3 and 4.6. Both ModelNet10 and ModelNet40 are
used to conduct the shape classiﬁcation experiments.

30

×

×

PASCAL 3D The PASCAL 3D dataset is composed of
the images from the PASCAL VOC 2012 dataset [10], aug-
mented with 3D annotations using PASCAL 3D+ [46]. We
voxelize the 3D CAD models using resolution [30
30]
and use the same training and testing splits of [19], which
was also used in [5] to conduct real-world image reconstruc-
tion (of which the experiment in Section 4.5 is based off
of). We use the bounding box information as provided in
the dataset. Note that the only pre-processing we applied
was image cropping and padding with 0-intensity pixels to
100] (which was
create ﬁnal samples of resolution [100
required for our model).

30

×

×

×

4.2. Training Protocol

Training was the same across all experiments, with only
minor details that were task-dependent. The architecture of
the VSL experimented with in this paper consisted of 5 local
latent codes, each made up of 10 variables for ModelNet40
and 5 for ModelNet10. For ModelNet40, the global latent
code was set to a dimensionality of 20 variables, while for
ModelNet10, it was set to 10 variables.

The hyper-parameter δ was set to 10−3 across training on
both ModelNet10 and ModelNet40. We optimise parame-
ters by maximizing the loss function deﬁned in Equation 5
using the Adam adaptive learning rate [21], with step size
10−5. For the experiments of Sections 4.3, 4.4, and
set to 5
4.6, over 2500 epochs, parameter updates were calculated
using mini-batches of 200 samples on ModelNet40 and 100
samples on ModelNet10.

×

For the experiment in Section 4.5, we use 5 local la-

tent codes (each with dimensionality of 5) and a global la-
tent code of 20 variables for the jointly trained model. For
the separately trained model, we use 3 local latent codes,
each with dimensionality of 2, and a global latent code of
dimensionality 5. Mini-batches of 40 samples were use
to compute gradients for the joint model while 5 samples
were used for the separately trained model. For both model
variants, dropout [41] was to control for over-ﬁtting, with
pdrop = 0.2, and early stopping was employed (resulting in
only 150 epochs).

L

For Section 4.5, which involved image reconstruction
and thus required the loss term
lat, instead of searching for
an optimal value of the hyper-parameter γ through cross-
validation, we employed a “warming-up” schedule, similar
to that of [40]. “Warming-up” involves gradually increasing
γ (on a log-scale as depicted in Figure 3), which controls
the relative weighting of
lat in Equation 5. The schedule
is deﬁned as follows,

L

γ =

10−3

50 < t < 100

(10)





10(cid:98)t/10(cid:99)−8
40
t
−
10 (cid:99) ·
10−3

(cid:98)
5

·

t

t

50

≤

100.

≥

Figure 3: Training the VSL for image reconstruction using
a warming-up schedule compared to using constant weights
10−3.
γ = 1

10−8 and γ = 5

·

·

Figure 3 depicts, empirically, the beneﬁts of employing a
warming-up schedule over using a ﬁxed, externally set coef-
ﬁcient for the
lat term in our image reconstruction exper-
iment. We remark that using a warming-up schedule plays
an essential role in acquiring good performance on the im-
age reconstruction task.

L

4.3. Shape Generation and Learning

To examine our model’s ability to generate high-
resolution 3D shapes with realistic details, we design a task
that involves shape generation and shape interpolation. We
add Gaussian noise to the learned latent codes on test data
taken from ModelNet40 and then use our model to generate
“unseen” samples that are similar to the input voxel. In ef-

Shape Generation

Nearest
Neighbor

airplane

chair

toilet

vase

desk

sofa

airplane

sofa

Figure 4: Randomly generated results from the proposed Variational Shape Learner trained on ModelNet40. The nearest
neighbors are the ground-truth shapes, fetched from the test data, and placed for reference in the last column of the table.

Intra-Class Interpolation (airplane)

Inter-Class Interpolation (chair → bed)

Figure 5: Interpolation results of the Variational Shape Learner on ModelNet40.

desk

chair

Figure 6: Shape generation from previous state-of-the-art approaches. Up: generated shapes in resolution [30
64
from [45]; Down: generated shapes in resolution [64

64] from [44].

30

30]

×

×

×

×

Supervision

Method

Classiﬁcation Rate
ModelNet10 ModelNet40

Supervised

Unsupervised

3D ShapeNets [45]
DeepPano [38]
Geometry Image [39]
VoxNet [27]
PointNet [30]
ORION [35]

SPH [20]
LFD [4]
T-L Network [13]
VConv-DAE [37]
3D-GAN [44]
VSL (ours)

83.5%
85.5%
88.4%
92.0%
-
93.8%

79.8%
79.9%
74.4%
80.5%
91.0%
91.0%

77.3%
77.6%
83.9%
83.0%
89.2%
-

68.2%
75.5%
-
75.5%
83.3%
84.5%

Table 2: ModelNet classiﬁcation results for both unsuper-
vised and supervised methods.

vised state-of-the-art, outperforming models such as 3D
ShapeNet [45], DeepPano [38], and the geometry image-
base approach [39], by a large margin, and comes close to
models such as VoxNet [27].

In order to visualise the learned feature embeddings, we
employ t-SNE [26] to map our high dimensional feature to
a 2D plane. The visualization is shown in Figure 7.

fect, we generate objects from our VSL model directly from
vectors, without a reference object/image.

The results of our shape interpolation experiment, from
both within-class and across-class perspectives, is presented
It can be observed that the proposed VSL
in Figure 5.
shows the ability to smoothly transition between two ob-
jects. Our results on shape generation are shown in Figure
4. Notably, in our visualizations, darker colours correspond
to smaller occupancy probability while lighter corresponds
to higher occupancy probability. We further compare to pre-
vious state-of-the-art results in shape generation, which are
depicted in Figure 6.

During training, we observed that our model was robust
to different choices of the number and dimensionality of its
local/global latent codes. We provide the table below as an
ablative analysis showing how test reconstruction error is
affected by various settings of the latent variables. From the
results, we can observe a clear trend that the network with
higher dimensionality and greater number of latent vari-
ables tends to generate better results. However, increasing
the number of network parameters to attain better accuracy
also brings about slower training, an important trade-off that
one will need to consider in various application scenarios.

Latent Space Parameters

Reconstruction Error
Global Dim. Local Dim. Local Num. Model-10 Model-40

10
10
20
50
100

5
5
10
10
20

3
5
5
10
10

0.0931
0.0903
0.0907
0.0910
0.0902

0.0860
0.0831
0.0798
0.0767
0.0789

Table 1: Reconstruction error of ModelNet 10/40 with var-
ious choices of network structure.

4.4. Shape Classiﬁcation

ModelNet10

ModelNet40

One way to test model expressiveness is to conduct shape
classiﬁcation directly using the learned embeddings. We
evaluate the features learned on the ModelNet dataset [45]
by concatenating both the global latent variable with the lo-
cal latent layers, creating a single feature vector [z0:m]. We
train a Support Vector Machine with an RBF kernel for clas-
siﬁcation using these “pre-trained” embeddings.

Table 2 shows the performance of previous state-of-the-
art supervised and unsupervised methods in shape classiﬁ-
cation on both variants of the ModelNet dataset. Notably,
the best unsupervised state-of-the-art results reported so far
were from the 3D-GAN of [44], which used features from
3 layers of convolutional networks with total dimensions
83]. This is a far larger fea-
[62
×
ture space than that required by our model, which is simply
10 + 20]
[5
(for 40-way classiﬁcation) and reaches the exact same level
of performance. The VSL performs comparably to super-

5 + 10] (for 10-way classiﬁcation) and [5

323 + 128

163 + 56

×

×

×

×

Figure 7: t-SNE plots of the latent embeddings for Model-
Net10 and ModelNet40. Each color represents one class.

4.5. Single Image 3D Model Retrieval

Real-world, single image 3D model retrieval is another
application of the proposed VSL model. This is a challeng-
ing problem, forcing a model to deal with real-world 2D im-
ages under a variety of lighting conditions and resolutions.
Furthermore, there are many instances of model occlusion
as well as different colour gradings.

To test our model on this application, we use the PAS-
CAL 3D [46] dataset and utilize the same exact training
and testing splits from [19]. We compare our results with
those reported for recent approaches, including the NRSfM
[19] and 3D-R2N2 [5] models. Note that these also used the
exact same experimental conﬁgurations we did.

For this task, we train our model in two different ways:

NRSfM
3D-R2N2 [LSTM-1]
3D-R2N2 [Res3D-GRU-3]
VSL (jointly trained)
VSL (separately trained)

aero
0.298
0.472
0.544
0.514
0.631

bike
0.144
0.330
0.499
0.269
0.657

boat
0.188
0.466
0.560
0.327
0.554

bus
0.501
0.677
0.816
0.558
0.856

car
0.472
0.579
0.699
0.633
0.786

chair mbike
0.361
0.234
0.474
0.203
0.649
0.280
0.301
0.199
0.656
0.311

sofa
0.149
0.251
0.332
0.173
0.601

train
0.249
0.518
0.672
0.402
0.804

tv
0.492
0.438
0.574
0.337
0.454

mean
0.318
0.456
0.571
0.432
0.619

Table 3: Per-category voxel predictive performance on PASCAL 3D, as measured by Intersection-of-Union (IoU).

Input

GT

VSL

3D-R2N2[5] NRSfM[19]

egories, half of them by a wide margin.

4.6. Shape Arithmetic

Another way to explore the learned embeddings is to per-
form various vector operations on the latent space, much
what was done in [44, 13]. We present some results of
our shape arithmetic experiment in Figure 9. Different
from previous results, all of our objects are sampled from
the model embeddings which were trained using the whole
dataset with 40 classes. Furthermore, unlike the blurrier
generations of [13], the VSL seems to generate very inter-
esting combinations of the input embeddings without the
need for any matching to actual 3D shapes from the origi-
nal dataset. The resultant objects appear to clearly embody
the intuitive meaning of the vector operators.

Figure 8: Reconstruction samples for PASCAL 3D from the
separately trained VSL.

1) jointly on all categories, and 2) separately on each cate-
gory. In Figure 8, we observe better reconstructions from
the (separately-trained) VSL when compared to previous
work. Unlike the NRSfM [19], the VSL does not require
any segmentation, pose information, or keypoints. In addi-
tion, the VSL is trained from scratch while the 3D-R2N2
is pre-trained using the ShapeNet dataset [3]. However,
the jointly-trained VSL did not outperform the 3D-R2N2,
which is also jointly-trained. The performance gap is due to
the fact that the 3D-R2N2 is speciﬁcally designed for image
reconstruction and employs a residual network [17] to help
the model learn richer semantic features.

Quantitatively, we compare our VSL to the NRSfM [19]
and two versions of 3D-R2N2 from [5], one with an LSTM
structure and another with a deep residual network. Results
(Intersection-of-Union) are shown in Table 3. Observe that
our jointly trained model performs comparably to the 3D-
R2N2 LSTM variant while the separately trained version
surpasses the 3D-R2N2 ResNet structure in 8 out of 10 cat-

Figure 9: Samples of our shape arithmetic experiment.

5. Conclusion

In this paper, we proposed the Variational Shape Learner,
a hierarchical latent-variable model for 3D shape mod-
elling, learnable through variational inference. In particu-
lar, we have demonstrated 3D shape generation results on a
popular benchmark, the ModelNet dataset. We also used
the learned embeddings of our model to obtain state-of-
the-art in unsupervised shape classiﬁcation and furthermore
showed that we could generate unseen shapes using shape
arithmetic. Future work will entail a more thorough investi-
gation of the embeddings learned by our hierarchical latent-
variable model as well as integration of better prior distri-
butions into the framework.

References

[1] M. Arjovsky and L. Bottou. Towards principled methods
for training generative adversarial networks. arXiv preprint
arXiv:1701.04862, 2017. 2

[2] Y. Bengio. Deep learning of representations: Looking for-
ward. In International Conference on Statistical Language
and Speech Processing, pages 1–37. Springer, 2013. 1
[3] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015. 1, 8

[4] D.-Y. Chen, X.-P. Tian, Y.-T. Shen, and M. Ouhyoung. On
In Computer
visual similarity based 3d model retrieval.
graphics forum, volume 22, pages 223–232. Wiley Online
Library, 2003. 7

[5] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. arXiv preprint arXiv:1604.00449, 2016. 1,
2, 5, 7, 8

[6] J. Chung, K. Kastner, L. Dinh, K. Goel, A. C. Courville, and
Y. Bengio. A recurrent latent variable model for sequential
data. In Advances in neural information processing systems,
pages 2980–2988, 2015. 2

[7] A. Delaunoy, E. Prados, P. G. I. Pirac´es, J.-P. Pons, and
P. Sturm. Minimizing the multi-view stereo reprojection er-
In BMVC 2008-British
ror for triangular surface meshes.
Machine Vision Conference, pages 1–10. BMVA, 2008. 2
[8] C. Doersch. Tutorial on variational autoencoders. arXiv

preprint arXiv:1606.05908, 2016. 4

[9] H. Edwards and A. Storkey. Towards a neural statistician.

arXiv preprint arXiv:1606.02185, 2016. 1, 2

[10] M. Everingham, S. A. Eslami, L. Van Gool, C. K. Williams,
J. Winn, and A. Zisserman. The pascal visual object classes
International Journal of Com-
challenge: A retrospective.
puter Vision, 111(1):98–136, 2015. 5

[11] K. Fukushima. Neocognitron: A hierarchical neural net-
work capable of visual pattern recognition. Neural networks,
1(2):119–130, 1988. 2

[12] P. Gargallo, E. Prados, and P. Sturm. Minimizing the re-
In
projection error in surface reconstruction from images.
Computer Vision, 2007. ICCV 2007. IEEE 11th International
Conference on, pages 1–8. IEEE, 2007. 2

[13] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. arXiv preprint arXiv:1603.08637, 2016. 1, 2, 7,
8

[14] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in Neural Information
Processing Systems, pages 2672–2680, 2014. 2

[15] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for image
generation. arXiv preprint arXiv:1502.04623, 2015. 2
[16] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface
arXiv preprint

prediction for 3d object reconstruction.
arXiv:1704.00710, 2017. 1, 2

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
770–778, 2016. 8

[18] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. arXiv preprint arXiv:1708.05375, 2017. 1, 2
[19] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Category-
speciﬁc object reconstruction from a single image. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 1966–1974, 2015. 1, 5, 7, 8
[20] M. Kazhdan, T. Funkhouser, and S. Rusinkiewicz. Rotation
invariant spherical harmonic representation of 3 d shape de-
scriptors. In Symposium on geometry processing, volume 6,
pages 156–164, 2003. 7

[21] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[22] D. P. Kingma and M. Welling. Auto-encoding variational

bayes. arXiv preprint arXiv:1312.6114, 2013. 2, 3

[23] J. Knopp, M. Prasad, G. Willems, R. Timofte, and
L. Van Gool. Hough transform and 3d surf for robust three
dimensional classiﬁcation. In European Conference on Com-
puter Vision, pages 589–602. Springer, 2010. 2

[24] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[25] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural compu-
tation, 1(4):541–551, 1989. 2

[26] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of Machine Learning Research, 9(Nov):2579–2605,
2008. 7

[27] D. Maturana and S. Scherer. Voxnet: A 3d convolutional
neural network for real-time object recognition. In Intelligent
Robots and Systems (IROS), 2015 IEEE/RSJ International
Conference on, pages 922–928. IEEE, 2015. 1, 2, 7

[28] A. Patterson IV, P. Mordohai, and K. Daniilidis. Object de-
tection from large-scale 3d datasets using bottom-up and top-
down descriptors. In European Conference on Computer Vi-
sion, pages 553–566. Springer, 2008. 2

[29] Y. Pu, Z. Gan, R. Henao, X. Yuan, C. Li, A. Stevens, and
L. Carin. Variational autoencoder for deep learning of im-
ages, labels and captions. In Advances in Neural Information
Processing Systems, pages 2352–2360, 2016. 2

[30] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiﬁcation and segmentation.
arXiv preprint arXiv:1612.00593, 2016. 7

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. arXiv preprint arXiv:1511.06434, 2015. 2

[32] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances in Neural Information
Processing Systems, pages 4996–5004, 2016. 1, 2

[33] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep genera-
tive models. arXiv preprint arXiv:1401.4082, 2014. 2

[49] Z. Zhu, X. Wang, S. Bai, C. Yao, and X. Bai. Deep learn-
ing representation using autoencoder for 3d shape retrieval.
Neurocomputing, 204:41–50, 2016. 1, 2

[34] R. B. Rusu, N. Blodow, and M. Beetz. Fast point feature
In Robotics and Au-
histograms (fpfh) for 3d registration.
tomation, 2009. ICRA’09. IEEE International Conference
on, pages 3212–3217. IEEE, 2009. 2

[35] N. Sedaghat, M. Zolfaghari, and T. Brox. Orientation-
boosted voxel nets for 3d object recognition. arXiv preprint
arXiv:1604.03351, 2016. 1, 7

[36] I. V. Serban, A. G. Ororbia II, J. Pineau, and A. Courville.
Piecewise latent variables for neural variational text process-
In Proceedings of the 2017 Conference on Empirical
ing.
Methods in Natural Language Processing, pages 422–432,
2017. 2

[37] A. Sharma, O. Grau, and M. Fritz. Vconv-dae: Deep vol-
umetric shape learning without object labels. In Computer
Vision–ECCV 2016 Workshops, pages 236–250. Springer,
2016. 7

[38] B. Shi, S. Bai, Z. Zhou, and X. Bai. Deeppano: Deep
IEEE
panoramic representation for 3-d shape recognition.
Signal Processing Letters, 22(12):2339–2343, 2015. 7
[39] A. Sinha, J. Bai, and K. Ramani. Deep learning 3d shape
In European Conference

surfaces using geometry images.
on Computer Vision, pages 223–240. Springer, 2016. 7
[40] C. K. Sønderby, T. Raiko, L. Maaløe, S. K. Sønderby, and
O. Winther. Ladder variational autoencoders. In Advances in
Neural Information Processing Systems, pages 3738–3746,
2016. 5

[41] N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: a simple way to prevent neu-
ral networks from overﬁtting. Journal of Machine Learning
Research, 15(1):1929–1958, 2014. 4, 5

[42] H. Su, S. Maji, E. Kalogerakis, and E. Learned-Miller. Multi-
view convolutional neural networks for 3d shape recogni-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 945–953, 2015. 2

[43] O. Wiles and A. Zisserman. Silnet : Single- and multi-view
reconstruction by learning from silhouettes. 2017. 2
[44] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems, pages 82–90, 2016. 1, 2, 6,
7, 8

[45] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3d shapenets: A deep representation for volumetric
shapes. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1912–1920, 2015. 1,
2, 5, 6, 7

[46] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
benchmark for 3d object detection in the wild. In IEEE Win-
ter Conference on Applications of Computer Vision (WACV),
2014. 5, 7

[47] J. Xie, Y. Fang, F. Zhu, and E. Wong. Deepshape: Deep
learned shape descriptor for 3d shape matching and retrieval.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1275–1283, 2015. 2

[48] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 1, 2

Learning a Hierarchical Latent-Variable Model of 3D Shapes

Shikun Liu
Imperial College London
shikun.liu17@imperial.ac.uk

C. Lee Giles
Pennsylvania State University
giles@ist.psu.edu

Alexander G. Ororbia II
Pennsylvania State University
ago109@psu.edu

8
1
0
2
 
g
u
A
 
4
 
 
]

V
C
.
s
c
[
 
 
4
v
4
9
9
5
0
.
5
0
7
1
:
v
i
X
r
a

Figure 1: Random 3D shapes generated by sampling the learned latent space of the proposed Variational Shape Learner
trained from ModelNet40 dataset [45]. See more results in Section 4.3.

Abstract

We propose the Variational Shape Learner (VSL), a gen-
erative model that learns the underlying structure of vox-
elized 3D shapes in an unsupervised fashion. Through the
use of skip-connections, our model can successfully learn
and infer a latent, hierarchical representation of objects.
Furthermore, realistic 3D objects can be easily generated
by sampling the VSL’s latent probabilistic manifold. We
show that our generative model can be trained end-to-end
from 2D images to perform single image 3D model re-
trieval. Experiments show, both quantitatively and quali-
tatively, the improved generalization of our proposed model
over a range of tasks, performing better or comparable to
various state-of-the-art alternatives.

1. Introduction

Over the past several years, impressive strides have been
made in the generative modelling of 3D objects. Much of
this progress can be attributed to recent advances in arti-
Instead of the usual ap-
ﬁcial neural network research.
proach to representing 3D shapes with voxel occupancy
vectors, promising recent work has taken to learning sim-
ple latent representations of such objects. Neural architec-
tures that have been developed with this goal in mind in-
clude those based on deep belief networks [45], deep au-
toencoders [49, 13, 32], and 3D convolutional networks
[27, 48, 35, 5, 16]. The positive progress made so far with
neural networks has also led to the creation of several large-
scale 3D CAD model benchmarks, notably ModelNet [45]
and ShapeNet [3].

However, despite the progress made so far, one key

weakness shared among all previous state-of-the-art ap-
proaches is that all of them have focused on learning a sin-
gle (“ﬂat”) vector representation of 3D shapes. These in-
clude recent and powerful models such as the autoencoder-
like T-L Network [13] and the probabilistic 3D Genera-
tive Adversarial Network (3D-GAN) [44], which shared
its latent vector representation over multiple tasks. Other
models, such as those of [19, 18], further required addi-
tional supervision using information about camera view-
points, shape keypoints, and segmentations.

To describe the input with only a single layer of latent
variables might be too restrictive an assumption, hinder-
ing the expressiveness of the underlying generative model
learned. Having a multilevel latent structure, on the other
hand, would allow for lower-level latent variables to focus
on modelling features such as edges and the upper levels to
learn to command those lower-level variables as to where
to place those edges in order to form curves and shapes.
This composition of latent (local) sub-structures would al-
low us to exploit the fact that most 3D shapes usually have
similar structure. Note that this course-to-ﬁne feature ex-
traction process is the very essence of abstraction, yielding
representations that can be easily constructed in terms of
less abstract ones [2]. Higher-level variables, or disentan-
gled features, would be modelling complex interactions of
low-level patterns. Thus, to encourage the learning of hier-
archical features, we explicitly incorporate this as a prior in
our model through explicit architectural constraints.

In this paper, motivated by the argument for a hierarchi-
cal representation developed above and the promise shown
in work such as that of [9], we show how to encourage a
latent-variable generative model to learn a hierarchy of la-
tent variables through the use of synaptic skip-connections.

1

These skip-connections encourage each layer of latent vari-
ables to model exactly one level of abstraction of the data.
To efﬁciently learn such a latent structure, we further exploit
recent advances in approximate inference [22] to develop a
variational learning procedure. Empirically, we show that
the learned generative model, which we call the Variational
Shape Learner, acquires rich representations of 3D shapes
that yield signiﬁcantly improved performance across a mul-
titude of 3D shape tasks.

The main contributions of this paper are as follows:

• We propose a novel latent-variable model, which we call
the Variational Shape Learner, which is capable of learn-
ing expressive feature representations of 3D shapes. We
observe impressive performance in shape generation and
shape arithmetic in a large dataset.

• For both general 3D model building and single image re-
construction, we show that our model is fully unsuper-
vised, requiring no extra human-generated information
about segmentation, keypoints, or pose information.

• We show that our model outperforms current state-of-the-
art approaches in unsupervised (object) model classiﬁca-
tion while requiring signiﬁcantly fewer learned feature
extractors (a vector with less than 100 dimensions com-
pared to the 3D-GAN’s 2.5 million dimensional vector).

• In real-world image reconstruction, our extensive set of
experiments show that the proposed Variational Shape
Learner surpasses state-of-the-art in 8 of 10 classes. Half
of these the VSL surpasses by a large margin.

2. Related Work

3D object recognition is a well-studied problem in the
computer vision literature. Early efforts [28, 23, 34] often
combined simple image classiﬁcation methods with hand-
crafted shape descriptors, requiring intensive effort on the
side of the human data annotator. However, ever since
the ImageNet contest of 2012 [24], deep convolutional net-
works (ConvNets) [11, 25] have swept the vision industry,
becoming nearly ubiquitous in countless applications.

Research in learning probabilistic generative models has
also beneﬁted from the advances made by artiﬁcial neural
networks. Generative Adversarial Networks (GANs), pro-
posed in [14] and Variational auto-encoders (VAEs), pro-
posed in [22, 33], are some of the most popular and impor-
tant frameworks that have emerged from improvements in
generative modelling. Successful adaptation of these frame-
works range from a focus in natural language and speech
processing [6, 36] to realistic image synthesis [15, 31, 29],
yielding promising, positive results. Nevertheless, very lit-
tle work, outside of [44, 13, 32], has focused on modeling
3D objects, where generative architectures could be used to

learn probabilistic embeddings. The model proposed in this
paper will offer another step towards constructing powerful
generative models of 3D structures.

One study, amidst the rise of neural network-based ap-
proaches to 3D object recognition, that is most relevant to
this paper is that of [45], which presented promising results
and a benchmark for 3D model recognition: ModelNet.
Following this key study, researchers have tried applying
3D ConvNets [27, 5, 42, 48], autoencoders [47, 49, 13, 32],
and a variety of probabilistic neural generative models
[44, 32] to the problem of 3D model recognition, with each
study progressively advancing state-of-the-art.

With respect to 3D object generation from 2D images,
commonly used methods can be roughly grouped into two
categories: 3D voxel prediction [45, 44, 13, 32, 5, 16] and
mesh-based methods [12, 7]. The 3D-R2N2 model [5] rep-
resents a more recent approach to the task, which involves
training a recurrent neural network to predict 3D voxels
from one or more 2D images. [32] also takes a recurrent
network-based approach, but receives a depth image as in-
put rather than normal 2D images. The learnable stereo sys-
tem [18] processes one or more camera views and camera
pose information to produce compelling 3D object samples.
Many of the above methods require multiple images
and/or additional human-provided information. Some ap-
proaches have attempted to minimize human involvement
by developing weakly-supervised schemes, making use
of image silhouettes to conduct 3D object reconstruction
[48, 43]. Of the few unsupervised neural-based approaches
that exist, the T-L network [13] is one of the most important,
combining a convolutional autoencoder with an image re-
gressor to encode a uniﬁed vector representation of a given
2D image. However, one fundamental issue with the T-L
Network is its three-phase training procedure, since jointly
training the system components proves to be too difﬁcult.
The 3D-GAN [44] offers a way to train 3D object models
in an adversarial learning scheme. However, GANs are no-
toriously difﬁcult to train [1], often due to ill-designed loss
functions and the higher chance of zero gradients.

In contrast to prior work, our approach, which is derived
from a variational Bayesian perspective view of learning,
naturally allows for joint training of all model parameters.
Furthermore, our approach makes use of a well-formulated
loss function that circumvents the instability involved with
adversarial learning while still being able to produce higher-
quality samples.

3. The Variational Shape Learner

In this section, we introduce our proposed model, the
Variational Shape Learner (VSL), which builds on the ideas
of the Neural Statistician [9] and the volumetric convolu-
tional network [27], the parameters of which the VSL learns
under a variational inference scheme [22].

Figure 2: The network structure of the Variational Shape Learner. Solid lines represent synaptic connections for either
fully-connected or convolutional layers while dashed lines represent concatenation. Dotted-dashed lines represent possible
applications.

means concatenated features, and

means equivalence relation.

means latent features,

◦

(cid:50)

(cid:5)

3.1. The Design Philosophy

It is well known that generative models, learned through
variational inference, are excellent at reconstructing com-
plex data but tend to produce blurry samples. This happens
because there is uncertainty in the model’s predictions when
we reconstruct the data from a latent space. As described
above, previous approaches to 3D object modelling have fo-
cused on learning a single latent representation of the data.
However, this simple latent structure might be hindering the
model’s ability to extract richer structure from the input dis-
tribution and thus lead to blurrier reconstructions.

To improve the quality of the samples of generated ob-
jects, we introduce a more complex internal variable struc-
ture, with the speciﬁc goal of encouraging the learning of
a hierarchical arrangement of latent feature detectors. The
motivation for a latent hierarchy comes from the observa-
tion that objects under the same category usually have simi-
lar geometric structure. As can be seen in Figure 2, we start
from a global latent variable layer (horizontally depicted)
that is hardwired to a set of local latent variables layers (ver-
tically depicted), each tasked with representing one level of
feature abstraction. The skip-connections tie together the
latent codes, and in a top-down directed fashion, local codes
closer to the input will tend to represent lower-level features
while local codes farther away from the input will tend to-
wards representing higher-level features.

The global latent vector can be thought of as a large

pool of command units that ensures that each local code
extracts information relative to its position in the hierarchy,
forming an overall coherent structure. This explicit global-
local form, and the way it constrains how information ﬂows
across it, lends itself to a straightforward parametrization of
the generative model and furthermore ensures robustness,
dramatically cutting down on over-ﬁtting. To make things
easier for training via stochastic back-propagation, the lo-
cal codes will be concatenated to a ﬂattened structure when
fed into the task-speciﬁc models, e.g., a shape classiﬁer or
a voxel reconstruction module. Ultimately, more realistic
samples should be generated by an architecture supporting
this kind of latent-variable design, since the local variable
layers will robustly encode hierarchical semantic cues in an
unsupervised fashion.

3.2. Model Objective: Variational + Latent Loss

The variational auto-encoder (VAE) [22] has recently
been introduced as a powerful generative model for unsu-
pervised learning. The generative model pθ(x
z) for a sin-
gle data point x with a latent variable z can be parameter-
ized by a neural network with parameters θ. The parameters
are inferred by maximizing the variational lower bound,

|

(cid:20)

(cid:21)

log p(x)

Eqφ(z|x)

z)pθ(z)
|
x)
qφ(z
|
The inference model qφ(z
x) can also be parameterized by
a deep neural network. The inference and generative pa-

pθ(x

log

(1)

≥

|

rameters are then jointly trained by optimizing Equation 1
using back-propagation and stochastic gradient ascent. To
deal with the stochasticity of the latent variables, which,
in VAE models, are typically assumed to be Gaussian dis-
tributed, we use the re-parameterization trick in order to
back-propagate through the operation of sampling the Gaus-
sian variables. We refer the reader to [8] for a much more
detailed explanation.

To learn the parameters of the VSL latent-variable
model, we will take a variational inference approach, where
the goal is to learn a generative model p(x; θ), with gener-
ative parameters θ, using a recognition model q(z0:n
x; φ),
|
with variational parameters φ. The VSL’s learning objective
rec as well as
contains a standard reconstruction loss term
a regularization penalty
reg over the latent variables. Fur-
thermore, the loss contains an additional term for the latent
variables
lat, which is particularly relevant and useful for
the 3D model retrieval task of Section 4.5. This extra term
is a simple
2 penalty imposed on the difference between
the learned features of the image regressor z(cid:48) and true latent
features z = [z0:n] where [

] denotes concatenation.
·

We assume a ﬁxed, spherical unit Gaussian prior,
(0, I). The conditional distribution over each

L

L

L

L

p(z0) =
N
local latent code (zi, i

p(zi

zi−1, z0; θ) =

|

≥

N

2) is deﬁned as follows:
(µ(zi−1, z0), σ2(zi−1, z0))

where the ﬁrst local code z1 is simply:

p(z1

z0; θ) =

|

N
z0; θ) and p(zi

(µ(z0), σ2(z0)).

|

zi−1, z0; θ) are also spherical
Note that p(z1
|
Gaussians and θ contains the generative parameters. The
(occupancy) probability for one voxel p(x) can then be cal-
culated by,

(cid:90)

n
(cid:89)

i=2

p(x

z0:n; θ)p(z1

|

z0; θ)p(z0)
|

p(zi

zi−1, z0; θ) dz0:n.
|

(4)
Let the reconstructed voxel ˆx be directly parameterized
(x) for the input voxel
by occupancy probability. The loss
x of the VSL is then calculated by the following equation:

L

(x) =

rec + δ

reg + γ

lat,

L

L

L

L

where each term in the equation above is deﬁned as follows:

x) log(1

ˆx)

−

L

L

rec = x log(ˆx) + (1
−
p(z0))
x; φ)
reg = KL(q(z0
|
(cid:107)
p(z1
z0, x; φ)
+ KL(q(z1
(cid:107)
n
(cid:88)

|

+

KL(q(zi

z0; θ))
|

i=2

lat =

L

z(cid:48)

z

2
2.

−

(cid:107)

−(cid:107)

zi−1, z0, x; φ)
(cid:107)
|

p(zi

zi−1, z0; θ))
|

Note that δ and γ, which weigh the contributions of the each
term towards the overall cost, are tunable hyper-parameters.

(2)

(3)

(5)

(6)

(7)

(8)

3.3. Encoder: 3D-ConvNet + Skip-Connections

6, 5, 4
{

and channels

, strides
}

32, 64, 128
{

The global latent code z0 is directly learned from the
input voxel through three convolutional layers with kernel
2, 2, 1
.
sizes
}
}
{
Each local latent code z>1 is conditioned on the global
latent code, the input voxel x, and the previous latent code
(except for z1, which does not have a previous latent code)
using two fully-connected layers with 100 neurons each.
The skip-connections between local codes help ease the
process of learning hierarchical features (i.e., improved gra-
dient transmission) and force each local code to learn one
level of abstraction.

The approximate posterior for a single voxel is given by:

q(z0

x; φ)q(z1
|

z0, x; φ)
|

q(zi

zi−1, z0, x; φ)
|

(9)

n
(cid:89)

i=2

where φ, the variational parameters, is parameterized by
neural networks. n represents the number of local latent
codes.

3.4. Decoder: 3D-DeConvNet

After we learn the global and local latent codes z0:n, we
then concatenate them into a single vector as shown in Fig-
ure 2 in blue dashed lines.

A 3D deconvolutional neural network with dimensions
symmetrical to the encoder of Section 3.3 is used to decode
the learned latent features into a voxel. An element-wise
logistic sigmoid is applied to the output layer in order to
convert the learned features to occupancy probabilities for
each voxel cell.

3.5. Image Regressor: 2D-ConvNet

We use a standard 2D convolutional network to encode
input RGB images into a feature space with the same di-
mension as the concatenation of global and local latent
codes [z0:n]. The network contains four fully-convolutional
2, 2, 2, 1
,
layers with kernel sizes
}
{
and channels
. The last convolutional layer
}
is ﬂattened and fed into two fully-connected layers with
200 and 100 neurons each. Unlike the encoder described
in Section 3.3, we apply dropout [41] before the last fully-
connected layer.

16, 32, 64, 128
{

32, 15, 5, 3
{

, strides
}

4. Experiments

To evaluate the quality of our proposed generative model

for 3D shapes, we conduct several extensive experiments.

In Section 4.3, we investigate our model’s ability to gen-
eralize and synthesize through a shape interpolation exper-
iment and an nearest neighbours analysis of random gener-
ated samples from the VSL. Following this, in Section 4.4,
we evaluate our model on the task of unsupervised shape

classiﬁcation by directly using the learned latent features on
both the ModelNet10 and ModelNet40 datasets. We com-
pare these results to previous supervised and unsupervised
state-of-the-art methods. Next, we test our model’s ability
to reconstruct real-world image in Section 4.5, comparing
our results to 3D-R2N2 [5] and NRSfM [19]. Finally, we
demonstrate the richness of the VSL’s learned semantic em-
beddings through vector arithmetic, using the latent features
trained on ModelNet40 for Section 4.6.

4.1. Datasets

ModelNet There are two variants of the ModelNet
dataset, ModelNet10 and ModelNet 40, introduced in [45],
with 10 and 40 target classes respectively. ModelNet10 has
3D shapes which are pre-aligned with the same pose across
all categories. In contrast, ModelNet40 (which includes the
shapes found in ModelNet10) features a variety of poses.
We voxelize both ModelNet10 and ModelNet40 with reso-
lution [30
30]. To test our model’s ability to handle
3D shapes of great variety and complexity, we use Model-
Net40 for most of the experiments, especially for those in
Section 4.3 and 4.6. Both ModelNet10 and ModelNet40 are
used to conduct the shape classiﬁcation experiments.

30

×

×

PASCAL 3D The PASCAL 3D dataset is composed of
the images from the PASCAL VOC 2012 dataset [10], aug-
mented with 3D annotations using PASCAL 3D+ [46]. We
voxelize the 3D CAD models using resolution [30
30]
and use the same training and testing splits of [19], which
was also used in [5] to conduct real-world image reconstruc-
tion (of which the experiment in Section 4.5 is based off
of). We use the bounding box information as provided in
the dataset. Note that the only pre-processing we applied
was image cropping and padding with 0-intensity pixels to
100] (which was
create ﬁnal samples of resolution [100
required for our model).

30

×

×

×

4.2. Training Protocol

Training was the same across all experiments, with only
minor details that were task-dependent. The architecture of
the VSL experimented with in this paper consisted of 5 local
latent codes, each made up of 10 variables for ModelNet40
and 5 for ModelNet10. For ModelNet40, the global latent
code was set to a dimensionality of 20 variables, while for
ModelNet10, it was set to 10 variables.

The hyper-parameter δ was set to 10−3 across training on
both ModelNet10 and ModelNet40. We optimise parame-
ters by maximizing the loss function deﬁned in Equation 5
using the Adam adaptive learning rate [21], with step size
10−5. For the experiments of Sections 4.3, 4.4, and
set to 5
4.6, over 2500 epochs, parameter updates were calculated
using mini-batches of 200 samples on ModelNet40 and 100
samples on ModelNet10.

×

For the experiment in Section 4.5, we use 5 local la-

tent codes (each with dimensionality of 5) and a global la-
tent code of 20 variables for the jointly trained model. For
the separately trained model, we use 3 local latent codes,
each with dimensionality of 2, and a global latent code of
dimensionality 5. Mini-batches of 40 samples were use
to compute gradients for the joint model while 5 samples
were used for the separately trained model. For both model
variants, dropout [41] was to control for over-ﬁtting, with
pdrop = 0.2, and early stopping was employed (resulting in
only 150 epochs).

L

For Section 4.5, which involved image reconstruction
and thus required the loss term
lat, instead of searching for
an optimal value of the hyper-parameter γ through cross-
validation, we employed a “warming-up” schedule, similar
to that of [40]. “Warming-up” involves gradually increasing
γ (on a log-scale as depicted in Figure 3), which controls
the relative weighting of
lat in Equation 5. The schedule
is deﬁned as follows,

L

γ =

10−3

50 < t < 100

(10)





10(cid:98)t/10(cid:99)−8
40
t
−
10 (cid:99) ·
10−3

(cid:98)
5

·

t

t

50

≤

100.

≥

Figure 3: Training the VSL for image reconstruction using
a warming-up schedule compared to using constant weights
10−3.
γ = 1

10−8 and γ = 5

·

·

Figure 3 depicts, empirically, the beneﬁts of employing a
warming-up schedule over using a ﬁxed, externally set coef-
ﬁcient for the
lat term in our image reconstruction exper-
iment. We remark that using a warming-up schedule plays
an essential role in acquiring good performance on the im-
age reconstruction task.

L

4.3. Shape Generation and Learning

To examine our model’s ability to generate high-
resolution 3D shapes with realistic details, we design a task
that involves shape generation and shape interpolation. We
add Gaussian noise to the learned latent codes on test data
taken from ModelNet40 and then use our model to generate
“unseen” samples that are similar to the input voxel. In ef-

Shape Generation

Nearest
Neighbor

airplane

chair

toilet

vase

desk

sofa

airplane

sofa

Figure 4: Randomly generated results from the proposed Variational Shape Learner trained on ModelNet40. The nearest
neighbors are the ground-truth shapes, fetched from the test data, and placed for reference in the last column of the table.

Intra-Class Interpolation (airplane)

Inter-Class Interpolation (chair → bed)

Figure 5: Interpolation results of the Variational Shape Learner on ModelNet40.

desk

chair

Figure 6: Shape generation from previous state-of-the-art approaches. Up: generated shapes in resolution [30
64
from [45]; Down: generated shapes in resolution [64

64] from [44].

30

30]

×

×

×

×

Supervision

Method

Classiﬁcation Rate
ModelNet10 ModelNet40

Supervised

Unsupervised

3D ShapeNets [45]
DeepPano [38]
Geometry Image [39]
VoxNet [27]
PointNet [30]
ORION [35]

SPH [20]
LFD [4]
T-L Network [13]
VConv-DAE [37]
3D-GAN [44]
VSL (ours)

83.5%
85.5%
88.4%
92.0%
-
93.8%

79.8%
79.9%
74.4%
80.5%
91.0%
91.0%

77.3%
77.6%
83.9%
83.0%
89.2%
-

68.2%
75.5%
-
75.5%
83.3%
84.5%

Table 2: ModelNet classiﬁcation results for both unsuper-
vised and supervised methods.

vised state-of-the-art, outperforming models such as 3D
ShapeNet [45], DeepPano [38], and the geometry image-
base approach [39], by a large margin, and comes close to
models such as VoxNet [27].

In order to visualise the learned feature embeddings, we
employ t-SNE [26] to map our high dimensional feature to
a 2D plane. The visualization is shown in Figure 7.

fect, we generate objects from our VSL model directly from
vectors, without a reference object/image.

The results of our shape interpolation experiment, from
both within-class and across-class perspectives, is presented
It can be observed that the proposed VSL
in Figure 5.
shows the ability to smoothly transition between two ob-
jects. Our results on shape generation are shown in Figure
4. Notably, in our visualizations, darker colours correspond
to smaller occupancy probability while lighter corresponds
to higher occupancy probability. We further compare to pre-
vious state-of-the-art results in shape generation, which are
depicted in Figure 6.

During training, we observed that our model was robust
to different choices of the number and dimensionality of its
local/global latent codes. We provide the table below as an
ablative analysis showing how test reconstruction error is
affected by various settings of the latent variables. From the
results, we can observe a clear trend that the network with
higher dimensionality and greater number of latent vari-
ables tends to generate better results. However, increasing
the number of network parameters to attain better accuracy
also brings about slower training, an important trade-off that
one will need to consider in various application scenarios.

Latent Space Parameters

Reconstruction Error
Global Dim. Local Dim. Local Num. Model-10 Model-40

10
10
20
50
100

5
5
10
10
20

3
5
5
10
10

0.0931
0.0903
0.0907
0.0910
0.0902

0.0860
0.0831
0.0798
0.0767
0.0789

Table 1: Reconstruction error of ModelNet 10/40 with var-
ious choices of network structure.

4.4. Shape Classiﬁcation

ModelNet10

ModelNet40

One way to test model expressiveness is to conduct shape
classiﬁcation directly using the learned embeddings. We
evaluate the features learned on the ModelNet dataset [45]
by concatenating both the global latent variable with the lo-
cal latent layers, creating a single feature vector [z0:m]. We
train a Support Vector Machine with an RBF kernel for clas-
siﬁcation using these “pre-trained” embeddings.

Table 2 shows the performance of previous state-of-the-
art supervised and unsupervised methods in shape classiﬁ-
cation on both variants of the ModelNet dataset. Notably,
the best unsupervised state-of-the-art results reported so far
were from the 3D-GAN of [44], which used features from
3 layers of convolutional networks with total dimensions
83]. This is a far larger fea-
[62
×
ture space than that required by our model, which is simply
10 + 20]
[5
(for 40-way classiﬁcation) and reaches the exact same level
of performance. The VSL performs comparably to super-

5 + 10] (for 10-way classiﬁcation) and [5

323 + 128

163 + 56

×

×

×

×

Figure 7: t-SNE plots of the latent embeddings for Model-
Net10 and ModelNet40. Each color represents one class.

4.5. Single Image 3D Model Retrieval

Real-world, single image 3D model retrieval is another
application of the proposed VSL model. This is a challeng-
ing problem, forcing a model to deal with real-world 2D im-
ages under a variety of lighting conditions and resolutions.
Furthermore, there are many instances of model occlusion
as well as different colour gradings.

To test our model on this application, we use the PAS-
CAL 3D [46] dataset and utilize the same exact training
and testing splits from [19]. We compare our results with
those reported for recent approaches, including the NRSfM
[19] and 3D-R2N2 [5] models. Note that these also used the
exact same experimental conﬁgurations we did.

For this task, we train our model in two different ways:

NRSfM
3D-R2N2 [LSTM-1]
3D-R2N2 [Res3D-GRU-3]
VSL (jointly trained)
VSL (separately trained)

aero
0.298
0.472
0.544
0.514
0.631

bike
0.144
0.330
0.499
0.269
0.657

boat
0.188
0.466
0.560
0.327
0.554

bus
0.501
0.677
0.816
0.558
0.856

car
0.472
0.579
0.699
0.633
0.786

chair mbike
0.361
0.234
0.474
0.203
0.649
0.280
0.301
0.199
0.656
0.311

sofa
0.149
0.251
0.332
0.173
0.601

train
0.249
0.518
0.672
0.402
0.804

tv
0.492
0.438
0.574
0.337
0.454

mean
0.318
0.456
0.571
0.432
0.619

Table 3: Per-category voxel predictive performance on PASCAL 3D, as measured by Intersection-of-Union (IoU).

Input

GT

VSL

3D-R2N2[5] NRSfM[19]

egories, half of them by a wide margin.

4.6. Shape Arithmetic

Another way to explore the learned embeddings is to per-
form various vector operations on the latent space, much
what was done in [44, 13]. We present some results of
our shape arithmetic experiment in Figure 9. Different
from previous results, all of our objects are sampled from
the model embeddings which were trained using the whole
dataset with 40 classes. Furthermore, unlike the blurrier
generations of [13], the VSL seems to generate very inter-
esting combinations of the input embeddings without the
need for any matching to actual 3D shapes from the origi-
nal dataset. The resultant objects appear to clearly embody
the intuitive meaning of the vector operators.

Figure 8: Reconstruction samples for PASCAL 3D from the
separately trained VSL.

1) jointly on all categories, and 2) separately on each cate-
gory. In Figure 8, we observe better reconstructions from
the (separately-trained) VSL when compared to previous
work. Unlike the NRSfM [19], the VSL does not require
any segmentation, pose information, or keypoints. In addi-
tion, the VSL is trained from scratch while the 3D-R2N2
is pre-trained using the ShapeNet dataset [3]. However,
the jointly-trained VSL did not outperform the 3D-R2N2,
which is also jointly-trained. The performance gap is due to
the fact that the 3D-R2N2 is speciﬁcally designed for image
reconstruction and employs a residual network [17] to help
the model learn richer semantic features.

Quantitatively, we compare our VSL to the NRSfM [19]
and two versions of 3D-R2N2 from [5], one with an LSTM
structure and another with a deep residual network. Results
(Intersection-of-Union) are shown in Table 3. Observe that
our jointly trained model performs comparably to the 3D-
R2N2 LSTM variant while the separately trained version
surpasses the 3D-R2N2 ResNet structure in 8 out of 10 cat-

Figure 9: Samples of our shape arithmetic experiment.

5. Conclusion

In this paper, we proposed the Variational Shape Learner,
a hierarchical latent-variable model for 3D shape mod-
elling, learnable through variational inference. In particu-
lar, we have demonstrated 3D shape generation results on a
popular benchmark, the ModelNet dataset. We also used
the learned embeddings of our model to obtain state-of-
the-art in unsupervised shape classiﬁcation and furthermore
showed that we could generate unseen shapes using shape
arithmetic. Future work will entail a more thorough investi-
gation of the embeddings learned by our hierarchical latent-
variable model as well as integration of better prior distri-
butions into the framework.

References

[1] M. Arjovsky and L. Bottou. Towards principled methods
for training generative adversarial networks. arXiv preprint
arXiv:1701.04862, 2017. 2

[2] Y. Bengio. Deep learning of representations: Looking for-
ward. In International Conference on Statistical Language
and Speech Processing, pages 1–37. Springer, 2013. 1
[3] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015. 1, 8

[4] D.-Y. Chen, X.-P. Tian, Y.-T. Shen, and M. Ouhyoung. On
In Computer
visual similarity based 3d model retrieval.
graphics forum, volume 22, pages 223–232. Wiley Online
Library, 2003. 7

[5] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. arXiv preprint arXiv:1604.00449, 2016. 1,
2, 5, 7, 8

[6] J. Chung, K. Kastner, L. Dinh, K. Goel, A. C. Courville, and
Y. Bengio. A recurrent latent variable model for sequential
data. In Advances in neural information processing systems,
pages 2980–2988, 2015. 2

[7] A. Delaunoy, E. Prados, P. G. I. Pirac´es, J.-P. Pons, and
P. Sturm. Minimizing the multi-view stereo reprojection er-
In BMVC 2008-British
ror for triangular surface meshes.
Machine Vision Conference, pages 1–10. BMVA, 2008. 2
[8] C. Doersch. Tutorial on variational autoencoders. arXiv

preprint arXiv:1606.05908, 2016. 4

[9] H. Edwards and A. Storkey. Towards a neural statistician.

arXiv preprint arXiv:1606.02185, 2016. 1, 2

[10] M. Everingham, S. A. Eslami, L. Van Gool, C. K. Williams,
J. Winn, and A. Zisserman. The pascal visual object classes
International Journal of Com-
challenge: A retrospective.
puter Vision, 111(1):98–136, 2015. 5

[11] K. Fukushima. Neocognitron: A hierarchical neural net-
work capable of visual pattern recognition. Neural networks,
1(2):119–130, 1988. 2

[12] P. Gargallo, E. Prados, and P. Sturm. Minimizing the re-
In
projection error in surface reconstruction from images.
Computer Vision, 2007. ICCV 2007. IEEE 11th International
Conference on, pages 1–8. IEEE, 2007. 2

[13] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. arXiv preprint arXiv:1603.08637, 2016. 1, 2, 7,
8

[14] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in Neural Information
Processing Systems, pages 2672–2680, 2014. 2

[15] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for image
generation. arXiv preprint arXiv:1502.04623, 2015. 2
[16] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface
arXiv preprint

prediction for 3d object reconstruction.
arXiv:1704.00710, 2017. 1, 2

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
770–778, 2016. 8

[18] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. arXiv preprint arXiv:1708.05375, 2017. 1, 2
[19] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Category-
speciﬁc object reconstruction from a single image. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 1966–1974, 2015. 1, 5, 7, 8
[20] M. Kazhdan, T. Funkhouser, and S. Rusinkiewicz. Rotation
invariant spherical harmonic representation of 3 d shape de-
scriptors. In Symposium on geometry processing, volume 6,
pages 156–164, 2003. 7

[21] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[22] D. P. Kingma and M. Welling. Auto-encoding variational

bayes. arXiv preprint arXiv:1312.6114, 2013. 2, 3

[23] J. Knopp, M. Prasad, G. Willems, R. Timofte, and
L. Van Gool. Hough transform and 3d surf for robust three
dimensional classiﬁcation. In European Conference on Com-
puter Vision, pages 589–602. Springer, 2010. 2

[24] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[25] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural compu-
tation, 1(4):541–551, 1989. 2

[26] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of Machine Learning Research, 9(Nov):2579–2605,
2008. 7

[27] D. Maturana and S. Scherer. Voxnet: A 3d convolutional
neural network for real-time object recognition. In Intelligent
Robots and Systems (IROS), 2015 IEEE/RSJ International
Conference on, pages 922–928. IEEE, 2015. 1, 2, 7

[28] A. Patterson IV, P. Mordohai, and K. Daniilidis. Object de-
tection from large-scale 3d datasets using bottom-up and top-
down descriptors. In European Conference on Computer Vi-
sion, pages 553–566. Springer, 2008. 2

[29] Y. Pu, Z. Gan, R. Henao, X. Yuan, C. Li, A. Stevens, and
L. Carin. Variational autoencoder for deep learning of im-
ages, labels and captions. In Advances in Neural Information
Processing Systems, pages 2352–2360, 2016. 2

[30] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiﬁcation and segmentation.
arXiv preprint arXiv:1612.00593, 2016. 7

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. arXiv preprint arXiv:1511.06434, 2015. 2

[32] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances in Neural Information
Processing Systems, pages 4996–5004, 2016. 1, 2

[33] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep genera-
tive models. arXiv preprint arXiv:1401.4082, 2014. 2

[49] Z. Zhu, X. Wang, S. Bai, C. Yao, and X. Bai. Deep learn-
ing representation using autoencoder for 3d shape retrieval.
Neurocomputing, 204:41–50, 2016. 1, 2

[34] R. B. Rusu, N. Blodow, and M. Beetz. Fast point feature
In Robotics and Au-
histograms (fpfh) for 3d registration.
tomation, 2009. ICRA’09. IEEE International Conference
on, pages 3212–3217. IEEE, 2009. 2

[35] N. Sedaghat, M. Zolfaghari, and T. Brox. Orientation-
boosted voxel nets for 3d object recognition. arXiv preprint
arXiv:1604.03351, 2016. 1, 7

[36] I. V. Serban, A. G. Ororbia II, J. Pineau, and A. Courville.
Piecewise latent variables for neural variational text process-
In Proceedings of the 2017 Conference on Empirical
ing.
Methods in Natural Language Processing, pages 422–432,
2017. 2

[37] A. Sharma, O. Grau, and M. Fritz. Vconv-dae: Deep vol-
umetric shape learning without object labels. In Computer
Vision–ECCV 2016 Workshops, pages 236–250. Springer,
2016. 7

[38] B. Shi, S. Bai, Z. Zhou, and X. Bai. Deeppano: Deep
IEEE
panoramic representation for 3-d shape recognition.
Signal Processing Letters, 22(12):2339–2343, 2015. 7
[39] A. Sinha, J. Bai, and K. Ramani. Deep learning 3d shape
In European Conference

surfaces using geometry images.
on Computer Vision, pages 223–240. Springer, 2016. 7
[40] C. K. Sønderby, T. Raiko, L. Maaløe, S. K. Sønderby, and
O. Winther. Ladder variational autoencoders. In Advances in
Neural Information Processing Systems, pages 3738–3746,
2016. 5

[41] N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: a simple way to prevent neu-
ral networks from overﬁtting. Journal of Machine Learning
Research, 15(1):1929–1958, 2014. 4, 5

[42] H. Su, S. Maji, E. Kalogerakis, and E. Learned-Miller. Multi-
view convolutional neural networks for 3d shape recogni-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 945–953, 2015. 2

[43] O. Wiles and A. Zisserman. Silnet : Single- and multi-view
reconstruction by learning from silhouettes. 2017. 2
[44] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems, pages 82–90, 2016. 1, 2, 6,
7, 8

[45] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3d shapenets: A deep representation for volumetric
shapes. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1912–1920, 2015. 1,
2, 5, 6, 7

[46] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
benchmark for 3d object detection in the wild. In IEEE Win-
ter Conference on Applications of Computer Vision (WACV),
2014. 5, 7

[47] J. Xie, Y. Fang, F. Zhu, and E. Wong. Deepshape: Deep
learned shape descriptor for 3d shape matching and retrieval.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1275–1283, 2015. 2

[48] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 1, 2

Learning a Hierarchical Latent-Variable Model of 3D Shapes

Shikun Liu
Imperial College London
shikun.liu17@imperial.ac.uk

C. Lee Giles
Pennsylvania State University
giles@ist.psu.edu

Alexander G. Ororbia II
Pennsylvania State University
ago109@psu.edu

8
1
0
2
 
g
u
A
 
4
 
 
]

V
C
.
s
c
[
 
 
4
v
4
9
9
5
0
.
5
0
7
1
:
v
i
X
r
a

Figure 1: Random 3D shapes generated by sampling the learned latent space of the proposed Variational Shape Learner
trained from ModelNet40 dataset [45]. See more results in Section 4.3.

Abstract

We propose the Variational Shape Learner (VSL), a gen-
erative model that learns the underlying structure of vox-
elized 3D shapes in an unsupervised fashion. Through the
use of skip-connections, our model can successfully learn
and infer a latent, hierarchical representation of objects.
Furthermore, realistic 3D objects can be easily generated
by sampling the VSL’s latent probabilistic manifold. We
show that our generative model can be trained end-to-end
from 2D images to perform single image 3D model re-
trieval. Experiments show, both quantitatively and quali-
tatively, the improved generalization of our proposed model
over a range of tasks, performing better or comparable to
various state-of-the-art alternatives.

1. Introduction

Over the past several years, impressive strides have been
made in the generative modelling of 3D objects. Much of
this progress can be attributed to recent advances in arti-
Instead of the usual ap-
ﬁcial neural network research.
proach to representing 3D shapes with voxel occupancy
vectors, promising recent work has taken to learning sim-
ple latent representations of such objects. Neural architec-
tures that have been developed with this goal in mind in-
clude those based on deep belief networks [45], deep au-
toencoders [49, 13, 32], and 3D convolutional networks
[27, 48, 35, 5, 16]. The positive progress made so far with
neural networks has also led to the creation of several large-
scale 3D CAD model benchmarks, notably ModelNet [45]
and ShapeNet [3].

However, despite the progress made so far, one key

weakness shared among all previous state-of-the-art ap-
proaches is that all of them have focused on learning a sin-
gle (“ﬂat”) vector representation of 3D shapes. These in-
clude recent and powerful models such as the autoencoder-
like T-L Network [13] and the probabilistic 3D Genera-
tive Adversarial Network (3D-GAN) [44], which shared
its latent vector representation over multiple tasks. Other
models, such as those of [19, 18], further required addi-
tional supervision using information about camera view-
points, shape keypoints, and segmentations.

To describe the input with only a single layer of latent
variables might be too restrictive an assumption, hinder-
ing the expressiveness of the underlying generative model
learned. Having a multilevel latent structure, on the other
hand, would allow for lower-level latent variables to focus
on modelling features such as edges and the upper levels to
learn to command those lower-level variables as to where
to place those edges in order to form curves and shapes.
This composition of latent (local) sub-structures would al-
low us to exploit the fact that most 3D shapes usually have
similar structure. Note that this course-to-ﬁne feature ex-
traction process is the very essence of abstraction, yielding
representations that can be easily constructed in terms of
less abstract ones [2]. Higher-level variables, or disentan-
gled features, would be modelling complex interactions of
low-level patterns. Thus, to encourage the learning of hier-
archical features, we explicitly incorporate this as a prior in
our model through explicit architectural constraints.

In this paper, motivated by the argument for a hierarchi-
cal representation developed above and the promise shown
in work such as that of [9], we show how to encourage a
latent-variable generative model to learn a hierarchy of la-
tent variables through the use of synaptic skip-connections.

1

These skip-connections encourage each layer of latent vari-
ables to model exactly one level of abstraction of the data.
To efﬁciently learn such a latent structure, we further exploit
recent advances in approximate inference [22] to develop a
variational learning procedure. Empirically, we show that
the learned generative model, which we call the Variational
Shape Learner, acquires rich representations of 3D shapes
that yield signiﬁcantly improved performance across a mul-
titude of 3D shape tasks.

The main contributions of this paper are as follows:

• We propose a novel latent-variable model, which we call
the Variational Shape Learner, which is capable of learn-
ing expressive feature representations of 3D shapes. We
observe impressive performance in shape generation and
shape arithmetic in a large dataset.

• For both general 3D model building and single image re-
construction, we show that our model is fully unsuper-
vised, requiring no extra human-generated information
about segmentation, keypoints, or pose information.

• We show that our model outperforms current state-of-the-
art approaches in unsupervised (object) model classiﬁca-
tion while requiring signiﬁcantly fewer learned feature
extractors (a vector with less than 100 dimensions com-
pared to the 3D-GAN’s 2.5 million dimensional vector).

• In real-world image reconstruction, our extensive set of
experiments show that the proposed Variational Shape
Learner surpasses state-of-the-art in 8 of 10 classes. Half
of these the VSL surpasses by a large margin.

2. Related Work

3D object recognition is a well-studied problem in the
computer vision literature. Early efforts [28, 23, 34] often
combined simple image classiﬁcation methods with hand-
crafted shape descriptors, requiring intensive effort on the
side of the human data annotator. However, ever since
the ImageNet contest of 2012 [24], deep convolutional net-
works (ConvNets) [11, 25] have swept the vision industry,
becoming nearly ubiquitous in countless applications.

Research in learning probabilistic generative models has
also beneﬁted from the advances made by artiﬁcial neural
networks. Generative Adversarial Networks (GANs), pro-
posed in [14] and Variational auto-encoders (VAEs), pro-
posed in [22, 33], are some of the most popular and impor-
tant frameworks that have emerged from improvements in
generative modelling. Successful adaptation of these frame-
works range from a focus in natural language and speech
processing [6, 36] to realistic image synthesis [15, 31, 29],
yielding promising, positive results. Nevertheless, very lit-
tle work, outside of [44, 13, 32], has focused on modeling
3D objects, where generative architectures could be used to

learn probabilistic embeddings. The model proposed in this
paper will offer another step towards constructing powerful
generative models of 3D structures.

One study, amidst the rise of neural network-based ap-
proaches to 3D object recognition, that is most relevant to
this paper is that of [45], which presented promising results
and a benchmark for 3D model recognition: ModelNet.
Following this key study, researchers have tried applying
3D ConvNets [27, 5, 42, 48], autoencoders [47, 49, 13, 32],
and a variety of probabilistic neural generative models
[44, 32] to the problem of 3D model recognition, with each
study progressively advancing state-of-the-art.

With respect to 3D object generation from 2D images,
commonly used methods can be roughly grouped into two
categories: 3D voxel prediction [45, 44, 13, 32, 5, 16] and
mesh-based methods [12, 7]. The 3D-R2N2 model [5] rep-
resents a more recent approach to the task, which involves
training a recurrent neural network to predict 3D voxels
from one or more 2D images. [32] also takes a recurrent
network-based approach, but receives a depth image as in-
put rather than normal 2D images. The learnable stereo sys-
tem [18] processes one or more camera views and camera
pose information to produce compelling 3D object samples.
Many of the above methods require multiple images
and/or additional human-provided information. Some ap-
proaches have attempted to minimize human involvement
by developing weakly-supervised schemes, making use
of image silhouettes to conduct 3D object reconstruction
[48, 43]. Of the few unsupervised neural-based approaches
that exist, the T-L network [13] is one of the most important,
combining a convolutional autoencoder with an image re-
gressor to encode a uniﬁed vector representation of a given
2D image. However, one fundamental issue with the T-L
Network is its three-phase training procedure, since jointly
training the system components proves to be too difﬁcult.
The 3D-GAN [44] offers a way to train 3D object models
in an adversarial learning scheme. However, GANs are no-
toriously difﬁcult to train [1], often due to ill-designed loss
functions and the higher chance of zero gradients.

In contrast to prior work, our approach, which is derived
from a variational Bayesian perspective view of learning,
naturally allows for joint training of all model parameters.
Furthermore, our approach makes use of a well-formulated
loss function that circumvents the instability involved with
adversarial learning while still being able to produce higher-
quality samples.

3. The Variational Shape Learner

In this section, we introduce our proposed model, the
Variational Shape Learner (VSL), which builds on the ideas
of the Neural Statistician [9] and the volumetric convolu-
tional network [27], the parameters of which the VSL learns
under a variational inference scheme [22].

Figure 2: The network structure of the Variational Shape Learner. Solid lines represent synaptic connections for either
fully-connected or convolutional layers while dashed lines represent concatenation. Dotted-dashed lines represent possible
applications.

means concatenated features, and

means equivalence relation.

means latent features,

◦

(cid:50)

(cid:5)

3.1. The Design Philosophy

It is well known that generative models, learned through
variational inference, are excellent at reconstructing com-
plex data but tend to produce blurry samples. This happens
because there is uncertainty in the model’s predictions when
we reconstruct the data from a latent space. As described
above, previous approaches to 3D object modelling have fo-
cused on learning a single latent representation of the data.
However, this simple latent structure might be hindering the
model’s ability to extract richer structure from the input dis-
tribution and thus lead to blurrier reconstructions.

To improve the quality of the samples of generated ob-
jects, we introduce a more complex internal variable struc-
ture, with the speciﬁc goal of encouraging the learning of
a hierarchical arrangement of latent feature detectors. The
motivation for a latent hierarchy comes from the observa-
tion that objects under the same category usually have simi-
lar geometric structure. As can be seen in Figure 2, we start
from a global latent variable layer (horizontally depicted)
that is hardwired to a set of local latent variables layers (ver-
tically depicted), each tasked with representing one level of
feature abstraction. The skip-connections tie together the
latent codes, and in a top-down directed fashion, local codes
closer to the input will tend to represent lower-level features
while local codes farther away from the input will tend to-
wards representing higher-level features.

The global latent vector can be thought of as a large

pool of command units that ensures that each local code
extracts information relative to its position in the hierarchy,
forming an overall coherent structure. This explicit global-
local form, and the way it constrains how information ﬂows
across it, lends itself to a straightforward parametrization of
the generative model and furthermore ensures robustness,
dramatically cutting down on over-ﬁtting. To make things
easier for training via stochastic back-propagation, the lo-
cal codes will be concatenated to a ﬂattened structure when
fed into the task-speciﬁc models, e.g., a shape classiﬁer or
a voxel reconstruction module. Ultimately, more realistic
samples should be generated by an architecture supporting
this kind of latent-variable design, since the local variable
layers will robustly encode hierarchical semantic cues in an
unsupervised fashion.

3.2. Model Objective: Variational + Latent Loss

The variational auto-encoder (VAE) [22] has recently
been introduced as a powerful generative model for unsu-
pervised learning. The generative model pθ(x
z) for a sin-
gle data point x with a latent variable z can be parameter-
ized by a neural network with parameters θ. The parameters
are inferred by maximizing the variational lower bound,

|

(cid:20)

(cid:21)

log p(x)

Eqφ(z|x)

z)pθ(z)
|
x)
qφ(z
|
The inference model qφ(z
x) can also be parameterized by
a deep neural network. The inference and generative pa-

pθ(x

log

(1)

≥

|

rameters are then jointly trained by optimizing Equation 1
using back-propagation and stochastic gradient ascent. To
deal with the stochasticity of the latent variables, which,
in VAE models, are typically assumed to be Gaussian dis-
tributed, we use the re-parameterization trick in order to
back-propagate through the operation of sampling the Gaus-
sian variables. We refer the reader to [8] for a much more
detailed explanation.

To learn the parameters of the VSL latent-variable
model, we will take a variational inference approach, where
the goal is to learn a generative model p(x; θ), with gener-
ative parameters θ, using a recognition model q(z0:n
x; φ),
|
with variational parameters φ. The VSL’s learning objective
rec as well as
contains a standard reconstruction loss term
a regularization penalty
reg over the latent variables. Fur-
thermore, the loss contains an additional term for the latent
variables
lat, which is particularly relevant and useful for
the 3D model retrieval task of Section 4.5. This extra term
is a simple
2 penalty imposed on the difference between
the learned features of the image regressor z(cid:48) and true latent
features z = [z0:n] where [

] denotes concatenation.
·

We assume a ﬁxed, spherical unit Gaussian prior,
(0, I). The conditional distribution over each

L

L

L

L

p(z0) =
N
local latent code (zi, i

p(zi

zi−1, z0; θ) =

|

≥

N

2) is deﬁned as follows:
(µ(zi−1, z0), σ2(zi−1, z0))

where the ﬁrst local code z1 is simply:

p(z1

z0; θ) =

|

N
z0; θ) and p(zi

(µ(z0), σ2(z0)).

|

zi−1, z0; θ) are also spherical
Note that p(z1
|
Gaussians and θ contains the generative parameters. The
(occupancy) probability for one voxel p(x) can then be cal-
culated by,

(cid:90)

n
(cid:89)

i=2

p(x

z0:n; θ)p(z1

|

z0; θ)p(z0)
|

p(zi

zi−1, z0; θ) dz0:n.
|

(4)
Let the reconstructed voxel ˆx be directly parameterized
(x) for the input voxel
by occupancy probability. The loss
x of the VSL is then calculated by the following equation:

L

(x) =

rec + δ

reg + γ

lat,

L

L

L

L

where each term in the equation above is deﬁned as follows:

x) log(1

ˆx)

−

L

L

rec = x log(ˆx) + (1
−
p(z0))
x; φ)
reg = KL(q(z0
|
(cid:107)
p(z1
z0, x; φ)
+ KL(q(z1
(cid:107)
n
(cid:88)

|

+

KL(q(zi

z0; θ))
|

i=2

lat =

L

z(cid:48)

z

2
2.

−

(cid:107)

−(cid:107)

zi−1, z0, x; φ)
(cid:107)
|

p(zi

zi−1, z0; θ))
|

Note that δ and γ, which weigh the contributions of the each
term towards the overall cost, are tunable hyper-parameters.

(2)

(3)

(5)

(6)

(7)

(8)

3.3. Encoder: 3D-ConvNet + Skip-Connections

6, 5, 4
{

and channels

, strides
}

32, 64, 128
{

The global latent code z0 is directly learned from the
input voxel through three convolutional layers with kernel
2, 2, 1
.
sizes
}
}
{
Each local latent code z>1 is conditioned on the global
latent code, the input voxel x, and the previous latent code
(except for z1, which does not have a previous latent code)
using two fully-connected layers with 100 neurons each.
The skip-connections between local codes help ease the
process of learning hierarchical features (i.e., improved gra-
dient transmission) and force each local code to learn one
level of abstraction.

The approximate posterior for a single voxel is given by:

q(z0

x; φ)q(z1
|

z0, x; φ)
|

q(zi

zi−1, z0, x; φ)
|

(9)

n
(cid:89)

i=2

where φ, the variational parameters, is parameterized by
neural networks. n represents the number of local latent
codes.

3.4. Decoder: 3D-DeConvNet

After we learn the global and local latent codes z0:n, we
then concatenate them into a single vector as shown in Fig-
ure 2 in blue dashed lines.

A 3D deconvolutional neural network with dimensions
symmetrical to the encoder of Section 3.3 is used to decode
the learned latent features into a voxel. An element-wise
logistic sigmoid is applied to the output layer in order to
convert the learned features to occupancy probabilities for
each voxel cell.

3.5. Image Regressor: 2D-ConvNet

We use a standard 2D convolutional network to encode
input RGB images into a feature space with the same di-
mension as the concatenation of global and local latent
codes [z0:n]. The network contains four fully-convolutional
2, 2, 2, 1
,
layers with kernel sizes
}
{
and channels
. The last convolutional layer
}
is ﬂattened and fed into two fully-connected layers with
200 and 100 neurons each. Unlike the encoder described
in Section 3.3, we apply dropout [41] before the last fully-
connected layer.

16, 32, 64, 128
{

32, 15, 5, 3
{

, strides
}

4. Experiments

To evaluate the quality of our proposed generative model

for 3D shapes, we conduct several extensive experiments.

In Section 4.3, we investigate our model’s ability to gen-
eralize and synthesize through a shape interpolation exper-
iment and an nearest neighbours analysis of random gener-
ated samples from the VSL. Following this, in Section 4.4,
we evaluate our model on the task of unsupervised shape

classiﬁcation by directly using the learned latent features on
both the ModelNet10 and ModelNet40 datasets. We com-
pare these results to previous supervised and unsupervised
state-of-the-art methods. Next, we test our model’s ability
to reconstruct real-world image in Section 4.5, comparing
our results to 3D-R2N2 [5] and NRSfM [19]. Finally, we
demonstrate the richness of the VSL’s learned semantic em-
beddings through vector arithmetic, using the latent features
trained on ModelNet40 for Section 4.6.

4.1. Datasets

ModelNet There are two variants of the ModelNet
dataset, ModelNet10 and ModelNet 40, introduced in [45],
with 10 and 40 target classes respectively. ModelNet10 has
3D shapes which are pre-aligned with the same pose across
all categories. In contrast, ModelNet40 (which includes the
shapes found in ModelNet10) features a variety of poses.
We voxelize both ModelNet10 and ModelNet40 with reso-
lution [30
30]. To test our model’s ability to handle
3D shapes of great variety and complexity, we use Model-
Net40 for most of the experiments, especially for those in
Section 4.3 and 4.6. Both ModelNet10 and ModelNet40 are
used to conduct the shape classiﬁcation experiments.

30

×

×

PASCAL 3D The PASCAL 3D dataset is composed of
the images from the PASCAL VOC 2012 dataset [10], aug-
mented with 3D annotations using PASCAL 3D+ [46]. We
voxelize the 3D CAD models using resolution [30
30]
and use the same training and testing splits of [19], which
was also used in [5] to conduct real-world image reconstruc-
tion (of which the experiment in Section 4.5 is based off
of). We use the bounding box information as provided in
the dataset. Note that the only pre-processing we applied
was image cropping and padding with 0-intensity pixels to
100] (which was
create ﬁnal samples of resolution [100
required for our model).

30

×

×

×

4.2. Training Protocol

Training was the same across all experiments, with only
minor details that were task-dependent. The architecture of
the VSL experimented with in this paper consisted of 5 local
latent codes, each made up of 10 variables for ModelNet40
and 5 for ModelNet10. For ModelNet40, the global latent
code was set to a dimensionality of 20 variables, while for
ModelNet10, it was set to 10 variables.

The hyper-parameter δ was set to 10−3 across training on
both ModelNet10 and ModelNet40. We optimise parame-
ters by maximizing the loss function deﬁned in Equation 5
using the Adam adaptive learning rate [21], with step size
10−5. For the experiments of Sections 4.3, 4.4, and
set to 5
4.6, over 2500 epochs, parameter updates were calculated
using mini-batches of 200 samples on ModelNet40 and 100
samples on ModelNet10.

×

For the experiment in Section 4.5, we use 5 local la-

tent codes (each with dimensionality of 5) and a global la-
tent code of 20 variables for the jointly trained model. For
the separately trained model, we use 3 local latent codes,
each with dimensionality of 2, and a global latent code of
dimensionality 5. Mini-batches of 40 samples were use
to compute gradients for the joint model while 5 samples
were used for the separately trained model. For both model
variants, dropout [41] was to control for over-ﬁtting, with
pdrop = 0.2, and early stopping was employed (resulting in
only 150 epochs).

L

For Section 4.5, which involved image reconstruction
and thus required the loss term
lat, instead of searching for
an optimal value of the hyper-parameter γ through cross-
validation, we employed a “warming-up” schedule, similar
to that of [40]. “Warming-up” involves gradually increasing
γ (on a log-scale as depicted in Figure 3), which controls
the relative weighting of
lat in Equation 5. The schedule
is deﬁned as follows,

L

γ =

10−3

50 < t < 100

(10)





10(cid:98)t/10(cid:99)−8
40
t
−
10 (cid:99) ·
10−3

(cid:98)
5

·

t

t

50

≤

100.

≥

Figure 3: Training the VSL for image reconstruction using
a warming-up schedule compared to using constant weights
10−3.
γ = 1

10−8 and γ = 5

·

·

Figure 3 depicts, empirically, the beneﬁts of employing a
warming-up schedule over using a ﬁxed, externally set coef-
ﬁcient for the
lat term in our image reconstruction exper-
iment. We remark that using a warming-up schedule plays
an essential role in acquiring good performance on the im-
age reconstruction task.

L

4.3. Shape Generation and Learning

To examine our model’s ability to generate high-
resolution 3D shapes with realistic details, we design a task
that involves shape generation and shape interpolation. We
add Gaussian noise to the learned latent codes on test data
taken from ModelNet40 and then use our model to generate
“unseen” samples that are similar to the input voxel. In ef-

Shape Generation

Nearest
Neighbor

airplane

chair

toilet

vase

desk

sofa

airplane

sofa

Figure 4: Randomly generated results from the proposed Variational Shape Learner trained on ModelNet40. The nearest
neighbors are the ground-truth shapes, fetched from the test data, and placed for reference in the last column of the table.

Intra-Class Interpolation (airplane)

Inter-Class Interpolation (chair → bed)

Figure 5: Interpolation results of the Variational Shape Learner on ModelNet40.

desk

chair

Figure 6: Shape generation from previous state-of-the-art approaches. Up: generated shapes in resolution [30
64
from [45]; Down: generated shapes in resolution [64

64] from [44].

30

30]

×

×

×

×

Supervision

Method

Classiﬁcation Rate
ModelNet10 ModelNet40

Supervised

Unsupervised

3D ShapeNets [45]
DeepPano [38]
Geometry Image [39]
VoxNet [27]
PointNet [30]
ORION [35]

SPH [20]
LFD [4]
T-L Network [13]
VConv-DAE [37]
3D-GAN [44]
VSL (ours)

83.5%
85.5%
88.4%
92.0%
-
93.8%

79.8%
79.9%
74.4%
80.5%
91.0%
91.0%

77.3%
77.6%
83.9%
83.0%
89.2%
-

68.2%
75.5%
-
75.5%
83.3%
84.5%

Table 2: ModelNet classiﬁcation results for both unsuper-
vised and supervised methods.

vised state-of-the-art, outperforming models such as 3D
ShapeNet [45], DeepPano [38], and the geometry image-
base approach [39], by a large margin, and comes close to
models such as VoxNet [27].

In order to visualise the learned feature embeddings, we
employ t-SNE [26] to map our high dimensional feature to
a 2D plane. The visualization is shown in Figure 7.

fect, we generate objects from our VSL model directly from
vectors, without a reference object/image.

The results of our shape interpolation experiment, from
both within-class and across-class perspectives, is presented
It can be observed that the proposed VSL
in Figure 5.
shows the ability to smoothly transition between two ob-
jects. Our results on shape generation are shown in Figure
4. Notably, in our visualizations, darker colours correspond
to smaller occupancy probability while lighter corresponds
to higher occupancy probability. We further compare to pre-
vious state-of-the-art results in shape generation, which are
depicted in Figure 6.

During training, we observed that our model was robust
to different choices of the number and dimensionality of its
local/global latent codes. We provide the table below as an
ablative analysis showing how test reconstruction error is
affected by various settings of the latent variables. From the
results, we can observe a clear trend that the network with
higher dimensionality and greater number of latent vari-
ables tends to generate better results. However, increasing
the number of network parameters to attain better accuracy
also brings about slower training, an important trade-off that
one will need to consider in various application scenarios.

Latent Space Parameters

Reconstruction Error
Global Dim. Local Dim. Local Num. Model-10 Model-40

10
10
20
50
100

5
5
10
10
20

3
5
5
10
10

0.0931
0.0903
0.0907
0.0910
0.0902

0.0860
0.0831
0.0798
0.0767
0.0789

Table 1: Reconstruction error of ModelNet 10/40 with var-
ious choices of network structure.

4.4. Shape Classiﬁcation

ModelNet10

ModelNet40

One way to test model expressiveness is to conduct shape
classiﬁcation directly using the learned embeddings. We
evaluate the features learned on the ModelNet dataset [45]
by concatenating both the global latent variable with the lo-
cal latent layers, creating a single feature vector [z0:m]. We
train a Support Vector Machine with an RBF kernel for clas-
siﬁcation using these “pre-trained” embeddings.

Table 2 shows the performance of previous state-of-the-
art supervised and unsupervised methods in shape classiﬁ-
cation on both variants of the ModelNet dataset. Notably,
the best unsupervised state-of-the-art results reported so far
were from the 3D-GAN of [44], which used features from
3 layers of convolutional networks with total dimensions
83]. This is a far larger fea-
[62
×
ture space than that required by our model, which is simply
10 + 20]
[5
(for 40-way classiﬁcation) and reaches the exact same level
of performance. The VSL performs comparably to super-

5 + 10] (for 10-way classiﬁcation) and [5

323 + 128

163 + 56

×

×

×

×

Figure 7: t-SNE plots of the latent embeddings for Model-
Net10 and ModelNet40. Each color represents one class.

4.5. Single Image 3D Model Retrieval

Real-world, single image 3D model retrieval is another
application of the proposed VSL model. This is a challeng-
ing problem, forcing a model to deal with real-world 2D im-
ages under a variety of lighting conditions and resolutions.
Furthermore, there are many instances of model occlusion
as well as different colour gradings.

To test our model on this application, we use the PAS-
CAL 3D [46] dataset and utilize the same exact training
and testing splits from [19]. We compare our results with
those reported for recent approaches, including the NRSfM
[19] and 3D-R2N2 [5] models. Note that these also used the
exact same experimental conﬁgurations we did.

For this task, we train our model in two different ways:

NRSfM
3D-R2N2 [LSTM-1]
3D-R2N2 [Res3D-GRU-3]
VSL (jointly trained)
VSL (separately trained)

aero
0.298
0.472
0.544
0.514
0.631

bike
0.144
0.330
0.499
0.269
0.657

boat
0.188
0.466
0.560
0.327
0.554

bus
0.501
0.677
0.816
0.558
0.856

car
0.472
0.579
0.699
0.633
0.786

chair mbike
0.361
0.234
0.474
0.203
0.649
0.280
0.301
0.199
0.656
0.311

sofa
0.149
0.251
0.332
0.173
0.601

train
0.249
0.518
0.672
0.402
0.804

tv
0.492
0.438
0.574
0.337
0.454

mean
0.318
0.456
0.571
0.432
0.619

Table 3: Per-category voxel predictive performance on PASCAL 3D, as measured by Intersection-of-Union (IoU).

Input

GT

VSL

3D-R2N2[5] NRSfM[19]

egories, half of them by a wide margin.

4.6. Shape Arithmetic

Another way to explore the learned embeddings is to per-
form various vector operations on the latent space, much
what was done in [44, 13]. We present some results of
our shape arithmetic experiment in Figure 9. Different
from previous results, all of our objects are sampled from
the model embeddings which were trained using the whole
dataset with 40 classes. Furthermore, unlike the blurrier
generations of [13], the VSL seems to generate very inter-
esting combinations of the input embeddings without the
need for any matching to actual 3D shapes from the origi-
nal dataset. The resultant objects appear to clearly embody
the intuitive meaning of the vector operators.

Figure 8: Reconstruction samples for PASCAL 3D from the
separately trained VSL.

1) jointly on all categories, and 2) separately on each cate-
gory. In Figure 8, we observe better reconstructions from
the (separately-trained) VSL when compared to previous
work. Unlike the NRSfM [19], the VSL does not require
any segmentation, pose information, or keypoints. In addi-
tion, the VSL is trained from scratch while the 3D-R2N2
is pre-trained using the ShapeNet dataset [3]. However,
the jointly-trained VSL did not outperform the 3D-R2N2,
which is also jointly-trained. The performance gap is due to
the fact that the 3D-R2N2 is speciﬁcally designed for image
reconstruction and employs a residual network [17] to help
the model learn richer semantic features.

Quantitatively, we compare our VSL to the NRSfM [19]
and two versions of 3D-R2N2 from [5], one with an LSTM
structure and another with a deep residual network. Results
(Intersection-of-Union) are shown in Table 3. Observe that
our jointly trained model performs comparably to the 3D-
R2N2 LSTM variant while the separately trained version
surpasses the 3D-R2N2 ResNet structure in 8 out of 10 cat-

Figure 9: Samples of our shape arithmetic experiment.

5. Conclusion

In this paper, we proposed the Variational Shape Learner,
a hierarchical latent-variable model for 3D shape mod-
elling, learnable through variational inference. In particu-
lar, we have demonstrated 3D shape generation results on a
popular benchmark, the ModelNet dataset. We also used
the learned embeddings of our model to obtain state-of-
the-art in unsupervised shape classiﬁcation and furthermore
showed that we could generate unseen shapes using shape
arithmetic. Future work will entail a more thorough investi-
gation of the embeddings learned by our hierarchical latent-
variable model as well as integration of better prior distri-
butions into the framework.

References

[1] M. Arjovsky and L. Bottou. Towards principled methods
for training generative adversarial networks. arXiv preprint
arXiv:1701.04862, 2017. 2

[2] Y. Bengio. Deep learning of representations: Looking for-
ward. In International Conference on Statistical Language
and Speech Processing, pages 1–37. Springer, 2013. 1
[3] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015. 1, 8

[4] D.-Y. Chen, X.-P. Tian, Y.-T. Shen, and M. Ouhyoung. On
In Computer
visual similarity based 3d model retrieval.
graphics forum, volume 22, pages 223–232. Wiley Online
Library, 2003. 7

[5] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. arXiv preprint arXiv:1604.00449, 2016. 1,
2, 5, 7, 8

[6] J. Chung, K. Kastner, L. Dinh, K. Goel, A. C. Courville, and
Y. Bengio. A recurrent latent variable model for sequential
data. In Advances in neural information processing systems,
pages 2980–2988, 2015. 2

[7] A. Delaunoy, E. Prados, P. G. I. Pirac´es, J.-P. Pons, and
P. Sturm. Minimizing the multi-view stereo reprojection er-
In BMVC 2008-British
ror for triangular surface meshes.
Machine Vision Conference, pages 1–10. BMVA, 2008. 2
[8] C. Doersch. Tutorial on variational autoencoders. arXiv

preprint arXiv:1606.05908, 2016. 4

[9] H. Edwards and A. Storkey. Towards a neural statistician.

arXiv preprint arXiv:1606.02185, 2016. 1, 2

[10] M. Everingham, S. A. Eslami, L. Van Gool, C. K. Williams,
J. Winn, and A. Zisserman. The pascal visual object classes
International Journal of Com-
challenge: A retrospective.
puter Vision, 111(1):98–136, 2015. 5

[11] K. Fukushima. Neocognitron: A hierarchical neural net-
work capable of visual pattern recognition. Neural networks,
1(2):119–130, 1988. 2

[12] P. Gargallo, E. Prados, and P. Sturm. Minimizing the re-
In
projection error in surface reconstruction from images.
Computer Vision, 2007. ICCV 2007. IEEE 11th International
Conference on, pages 1–8. IEEE, 2007. 2

[13] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. arXiv preprint arXiv:1603.08637, 2016. 1, 2, 7,
8

[14] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in Neural Information
Processing Systems, pages 2672–2680, 2014. 2

[15] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for image
generation. arXiv preprint arXiv:1502.04623, 2015. 2
[16] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface
arXiv preprint

prediction for 3d object reconstruction.
arXiv:1704.00710, 2017. 1, 2

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
770–778, 2016. 8

[18] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. arXiv preprint arXiv:1708.05375, 2017. 1, 2
[19] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Category-
speciﬁc object reconstruction from a single image. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 1966–1974, 2015. 1, 5, 7, 8
[20] M. Kazhdan, T. Funkhouser, and S. Rusinkiewicz. Rotation
invariant spherical harmonic representation of 3 d shape de-
scriptors. In Symposium on geometry processing, volume 6,
pages 156–164, 2003. 7

[21] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[22] D. P. Kingma and M. Welling. Auto-encoding variational

bayes. arXiv preprint arXiv:1312.6114, 2013. 2, 3

[23] J. Knopp, M. Prasad, G. Willems, R. Timofte, and
L. Van Gool. Hough transform and 3d surf for robust three
dimensional classiﬁcation. In European Conference on Com-
puter Vision, pages 589–602. Springer, 2010. 2

[24] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[25] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural compu-
tation, 1(4):541–551, 1989. 2

[26] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of Machine Learning Research, 9(Nov):2579–2605,
2008. 7

[27] D. Maturana and S. Scherer. Voxnet: A 3d convolutional
neural network for real-time object recognition. In Intelligent
Robots and Systems (IROS), 2015 IEEE/RSJ International
Conference on, pages 922–928. IEEE, 2015. 1, 2, 7

[28] A. Patterson IV, P. Mordohai, and K. Daniilidis. Object de-
tection from large-scale 3d datasets using bottom-up and top-
down descriptors. In European Conference on Computer Vi-
sion, pages 553–566. Springer, 2008. 2

[29] Y. Pu, Z. Gan, R. Henao, X. Yuan, C. Li, A. Stevens, and
L. Carin. Variational autoencoder for deep learning of im-
ages, labels and captions. In Advances in Neural Information
Processing Systems, pages 2352–2360, 2016. 2

[30] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiﬁcation and segmentation.
arXiv preprint arXiv:1612.00593, 2016. 7

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. arXiv preprint arXiv:1511.06434, 2015. 2

[32] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances in Neural Information
Processing Systems, pages 4996–5004, 2016. 1, 2

[33] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep genera-
tive models. arXiv preprint arXiv:1401.4082, 2014. 2

[49] Z. Zhu, X. Wang, S. Bai, C. Yao, and X. Bai. Deep learn-
ing representation using autoencoder for 3d shape retrieval.
Neurocomputing, 204:41–50, 2016. 1, 2

[34] R. B. Rusu, N. Blodow, and M. Beetz. Fast point feature
In Robotics and Au-
histograms (fpfh) for 3d registration.
tomation, 2009. ICRA’09. IEEE International Conference
on, pages 3212–3217. IEEE, 2009. 2

[35] N. Sedaghat, M. Zolfaghari, and T. Brox. Orientation-
boosted voxel nets for 3d object recognition. arXiv preprint
arXiv:1604.03351, 2016. 1, 7

[36] I. V. Serban, A. G. Ororbia II, J. Pineau, and A. Courville.
Piecewise latent variables for neural variational text process-
In Proceedings of the 2017 Conference on Empirical
ing.
Methods in Natural Language Processing, pages 422–432,
2017. 2

[37] A. Sharma, O. Grau, and M. Fritz. Vconv-dae: Deep vol-
umetric shape learning without object labels. In Computer
Vision–ECCV 2016 Workshops, pages 236–250. Springer,
2016. 7

[38] B. Shi, S. Bai, Z. Zhou, and X. Bai. Deeppano: Deep
IEEE
panoramic representation for 3-d shape recognition.
Signal Processing Letters, 22(12):2339–2343, 2015. 7
[39] A. Sinha, J. Bai, and K. Ramani. Deep learning 3d shape
In European Conference

surfaces using geometry images.
on Computer Vision, pages 223–240. Springer, 2016. 7
[40] C. K. Sønderby, T. Raiko, L. Maaløe, S. K. Sønderby, and
O. Winther. Ladder variational autoencoders. In Advances in
Neural Information Processing Systems, pages 3738–3746,
2016. 5

[41] N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: a simple way to prevent neu-
ral networks from overﬁtting. Journal of Machine Learning
Research, 15(1):1929–1958, 2014. 4, 5

[42] H. Su, S. Maji, E. Kalogerakis, and E. Learned-Miller. Multi-
view convolutional neural networks for 3d shape recogni-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 945–953, 2015. 2

[43] O. Wiles and A. Zisserman. Silnet : Single- and multi-view
reconstruction by learning from silhouettes. 2017. 2
[44] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems, pages 82–90, 2016. 1, 2, 6,
7, 8

[45] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3d shapenets: A deep representation for volumetric
shapes. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1912–1920, 2015. 1,
2, 5, 6, 7

[46] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
benchmark for 3d object detection in the wild. In IEEE Win-
ter Conference on Applications of Computer Vision (WACV),
2014. 5, 7

[47] J. Xie, Y. Fang, F. Zhu, and E. Wong. Deepshape: Deep
learned shape descriptor for 3d shape matching and retrieval.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1275–1283, 2015. 2

[48] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 1, 2

Learning a Hierarchical Latent-Variable Model of 3D Shapes

Shikun Liu
Imperial College London
shikun.liu17@imperial.ac.uk

C. Lee Giles
Pennsylvania State University
giles@ist.psu.edu

Alexander G. Ororbia II
Pennsylvania State University
ago109@psu.edu

8
1
0
2
 
g
u
A
 
4
 
 
]

V
C
.
s
c
[
 
 
4
v
4
9
9
5
0
.
5
0
7
1
:
v
i
X
r
a

Figure 1: Random 3D shapes generated by sampling the learned latent space of the proposed Variational Shape Learner
trained from ModelNet40 dataset [45]. See more results in Section 4.3.

Abstract

We propose the Variational Shape Learner (VSL), a gen-
erative model that learns the underlying structure of vox-
elized 3D shapes in an unsupervised fashion. Through the
use of skip-connections, our model can successfully learn
and infer a latent, hierarchical representation of objects.
Furthermore, realistic 3D objects can be easily generated
by sampling the VSL’s latent probabilistic manifold. We
show that our generative model can be trained end-to-end
from 2D images to perform single image 3D model re-
trieval. Experiments show, both quantitatively and quali-
tatively, the improved generalization of our proposed model
over a range of tasks, performing better or comparable to
various state-of-the-art alternatives.

1. Introduction

Over the past several years, impressive strides have been
made in the generative modelling of 3D objects. Much of
this progress can be attributed to recent advances in arti-
Instead of the usual ap-
ﬁcial neural network research.
proach to representing 3D shapes with voxel occupancy
vectors, promising recent work has taken to learning sim-
ple latent representations of such objects. Neural architec-
tures that have been developed with this goal in mind in-
clude those based on deep belief networks [45], deep au-
toencoders [49, 13, 32], and 3D convolutional networks
[27, 48, 35, 5, 16]. The positive progress made so far with
neural networks has also led to the creation of several large-
scale 3D CAD model benchmarks, notably ModelNet [45]
and ShapeNet [3].

However, despite the progress made so far, one key

weakness shared among all previous state-of-the-art ap-
proaches is that all of them have focused on learning a sin-
gle (“ﬂat”) vector representation of 3D shapes. These in-
clude recent and powerful models such as the autoencoder-
like T-L Network [13] and the probabilistic 3D Genera-
tive Adversarial Network (3D-GAN) [44], which shared
its latent vector representation over multiple tasks. Other
models, such as those of [19, 18], further required addi-
tional supervision using information about camera view-
points, shape keypoints, and segmentations.

To describe the input with only a single layer of latent
variables might be too restrictive an assumption, hinder-
ing the expressiveness of the underlying generative model
learned. Having a multilevel latent structure, on the other
hand, would allow for lower-level latent variables to focus
on modelling features such as edges and the upper levels to
learn to command those lower-level variables as to where
to place those edges in order to form curves and shapes.
This composition of latent (local) sub-structures would al-
low us to exploit the fact that most 3D shapes usually have
similar structure. Note that this course-to-ﬁne feature ex-
traction process is the very essence of abstraction, yielding
representations that can be easily constructed in terms of
less abstract ones [2]. Higher-level variables, or disentan-
gled features, would be modelling complex interactions of
low-level patterns. Thus, to encourage the learning of hier-
archical features, we explicitly incorporate this as a prior in
our model through explicit architectural constraints.

In this paper, motivated by the argument for a hierarchi-
cal representation developed above and the promise shown
in work such as that of [9], we show how to encourage a
latent-variable generative model to learn a hierarchy of la-
tent variables through the use of synaptic skip-connections.

1

These skip-connections encourage each layer of latent vari-
ables to model exactly one level of abstraction of the data.
To efﬁciently learn such a latent structure, we further exploit
recent advances in approximate inference [22] to develop a
variational learning procedure. Empirically, we show that
the learned generative model, which we call the Variational
Shape Learner, acquires rich representations of 3D shapes
that yield signiﬁcantly improved performance across a mul-
titude of 3D shape tasks.

The main contributions of this paper are as follows:

• We propose a novel latent-variable model, which we call
the Variational Shape Learner, which is capable of learn-
ing expressive feature representations of 3D shapes. We
observe impressive performance in shape generation and
shape arithmetic in a large dataset.

• For both general 3D model building and single image re-
construction, we show that our model is fully unsuper-
vised, requiring no extra human-generated information
about segmentation, keypoints, or pose information.

• We show that our model outperforms current state-of-the-
art approaches in unsupervised (object) model classiﬁca-
tion while requiring signiﬁcantly fewer learned feature
extractors (a vector with less than 100 dimensions com-
pared to the 3D-GAN’s 2.5 million dimensional vector).

• In real-world image reconstruction, our extensive set of
experiments show that the proposed Variational Shape
Learner surpasses state-of-the-art in 8 of 10 classes. Half
of these the VSL surpasses by a large margin.

2. Related Work

3D object recognition is a well-studied problem in the
computer vision literature. Early efforts [28, 23, 34] often
combined simple image classiﬁcation methods with hand-
crafted shape descriptors, requiring intensive effort on the
side of the human data annotator. However, ever since
the ImageNet contest of 2012 [24], deep convolutional net-
works (ConvNets) [11, 25] have swept the vision industry,
becoming nearly ubiquitous in countless applications.

Research in learning probabilistic generative models has
also beneﬁted from the advances made by artiﬁcial neural
networks. Generative Adversarial Networks (GANs), pro-
posed in [14] and Variational auto-encoders (VAEs), pro-
posed in [22, 33], are some of the most popular and impor-
tant frameworks that have emerged from improvements in
generative modelling. Successful adaptation of these frame-
works range from a focus in natural language and speech
processing [6, 36] to realistic image synthesis [15, 31, 29],
yielding promising, positive results. Nevertheless, very lit-
tle work, outside of [44, 13, 32], has focused on modeling
3D objects, where generative architectures could be used to

learn probabilistic embeddings. The model proposed in this
paper will offer another step towards constructing powerful
generative models of 3D structures.

One study, amidst the rise of neural network-based ap-
proaches to 3D object recognition, that is most relevant to
this paper is that of [45], which presented promising results
and a benchmark for 3D model recognition: ModelNet.
Following this key study, researchers have tried applying
3D ConvNets [27, 5, 42, 48], autoencoders [47, 49, 13, 32],
and a variety of probabilistic neural generative models
[44, 32] to the problem of 3D model recognition, with each
study progressively advancing state-of-the-art.

With respect to 3D object generation from 2D images,
commonly used methods can be roughly grouped into two
categories: 3D voxel prediction [45, 44, 13, 32, 5, 16] and
mesh-based methods [12, 7]. The 3D-R2N2 model [5] rep-
resents a more recent approach to the task, which involves
training a recurrent neural network to predict 3D voxels
from one or more 2D images. [32] also takes a recurrent
network-based approach, but receives a depth image as in-
put rather than normal 2D images. The learnable stereo sys-
tem [18] processes one or more camera views and camera
pose information to produce compelling 3D object samples.
Many of the above methods require multiple images
and/or additional human-provided information. Some ap-
proaches have attempted to minimize human involvement
by developing weakly-supervised schemes, making use
of image silhouettes to conduct 3D object reconstruction
[48, 43]. Of the few unsupervised neural-based approaches
that exist, the T-L network [13] is one of the most important,
combining a convolutional autoencoder with an image re-
gressor to encode a uniﬁed vector representation of a given
2D image. However, one fundamental issue with the T-L
Network is its three-phase training procedure, since jointly
training the system components proves to be too difﬁcult.
The 3D-GAN [44] offers a way to train 3D object models
in an adversarial learning scheme. However, GANs are no-
toriously difﬁcult to train [1], often due to ill-designed loss
functions and the higher chance of zero gradients.

In contrast to prior work, our approach, which is derived
from a variational Bayesian perspective view of learning,
naturally allows for joint training of all model parameters.
Furthermore, our approach makes use of a well-formulated
loss function that circumvents the instability involved with
adversarial learning while still being able to produce higher-
quality samples.

3. The Variational Shape Learner

In this section, we introduce our proposed model, the
Variational Shape Learner (VSL), which builds on the ideas
of the Neural Statistician [9] and the volumetric convolu-
tional network [27], the parameters of which the VSL learns
under a variational inference scheme [22].

Figure 2: The network structure of the Variational Shape Learner. Solid lines represent synaptic connections for either
fully-connected or convolutional layers while dashed lines represent concatenation. Dotted-dashed lines represent possible
applications.

means concatenated features, and

means equivalence relation.

means latent features,

◦

(cid:50)

(cid:5)

3.1. The Design Philosophy

It is well known that generative models, learned through
variational inference, are excellent at reconstructing com-
plex data but tend to produce blurry samples. This happens
because there is uncertainty in the model’s predictions when
we reconstruct the data from a latent space. As described
above, previous approaches to 3D object modelling have fo-
cused on learning a single latent representation of the data.
However, this simple latent structure might be hindering the
model’s ability to extract richer structure from the input dis-
tribution and thus lead to blurrier reconstructions.

To improve the quality of the samples of generated ob-
jects, we introduce a more complex internal variable struc-
ture, with the speciﬁc goal of encouraging the learning of
a hierarchical arrangement of latent feature detectors. The
motivation for a latent hierarchy comes from the observa-
tion that objects under the same category usually have simi-
lar geometric structure. As can be seen in Figure 2, we start
from a global latent variable layer (horizontally depicted)
that is hardwired to a set of local latent variables layers (ver-
tically depicted), each tasked with representing one level of
feature abstraction. The skip-connections tie together the
latent codes, and in a top-down directed fashion, local codes
closer to the input will tend to represent lower-level features
while local codes farther away from the input will tend to-
wards representing higher-level features.

The global latent vector can be thought of as a large

pool of command units that ensures that each local code
extracts information relative to its position in the hierarchy,
forming an overall coherent structure. This explicit global-
local form, and the way it constrains how information ﬂows
across it, lends itself to a straightforward parametrization of
the generative model and furthermore ensures robustness,
dramatically cutting down on over-ﬁtting. To make things
easier for training via stochastic back-propagation, the lo-
cal codes will be concatenated to a ﬂattened structure when
fed into the task-speciﬁc models, e.g., a shape classiﬁer or
a voxel reconstruction module. Ultimately, more realistic
samples should be generated by an architecture supporting
this kind of latent-variable design, since the local variable
layers will robustly encode hierarchical semantic cues in an
unsupervised fashion.

3.2. Model Objective: Variational + Latent Loss

The variational auto-encoder (VAE) [22] has recently
been introduced as a powerful generative model for unsu-
pervised learning. The generative model pθ(x
z) for a sin-
gle data point x with a latent variable z can be parameter-
ized by a neural network with parameters θ. The parameters
are inferred by maximizing the variational lower bound,

|

(cid:20)

(cid:21)

log p(x)

Eqφ(z|x)

z)pθ(z)
|
x)
qφ(z
|
The inference model qφ(z
x) can also be parameterized by
a deep neural network. The inference and generative pa-

pθ(x

log

(1)

≥

|

rameters are then jointly trained by optimizing Equation 1
using back-propagation and stochastic gradient ascent. To
deal with the stochasticity of the latent variables, which,
in VAE models, are typically assumed to be Gaussian dis-
tributed, we use the re-parameterization trick in order to
back-propagate through the operation of sampling the Gaus-
sian variables. We refer the reader to [8] for a much more
detailed explanation.

To learn the parameters of the VSL latent-variable
model, we will take a variational inference approach, where
the goal is to learn a generative model p(x; θ), with gener-
ative parameters θ, using a recognition model q(z0:n
x; φ),
|
with variational parameters φ. The VSL’s learning objective
rec as well as
contains a standard reconstruction loss term
a regularization penalty
reg over the latent variables. Fur-
thermore, the loss contains an additional term for the latent
variables
lat, which is particularly relevant and useful for
the 3D model retrieval task of Section 4.5. This extra term
is a simple
2 penalty imposed on the difference between
the learned features of the image regressor z(cid:48) and true latent
features z = [z0:n] where [

] denotes concatenation.
·

We assume a ﬁxed, spherical unit Gaussian prior,
(0, I). The conditional distribution over each

L

L

L

L

p(z0) =
N
local latent code (zi, i

p(zi

zi−1, z0; θ) =

|

≥

N

2) is deﬁned as follows:
(µ(zi−1, z0), σ2(zi−1, z0))

where the ﬁrst local code z1 is simply:

p(z1

z0; θ) =

|

N
z0; θ) and p(zi

(µ(z0), σ2(z0)).

|

zi−1, z0; θ) are also spherical
Note that p(z1
|
Gaussians and θ contains the generative parameters. The
(occupancy) probability for one voxel p(x) can then be cal-
culated by,

(cid:90)

n
(cid:89)

i=2

p(x

z0:n; θ)p(z1

|

z0; θ)p(z0)
|

p(zi

zi−1, z0; θ) dz0:n.
|

(4)
Let the reconstructed voxel ˆx be directly parameterized
(x) for the input voxel
by occupancy probability. The loss
x of the VSL is then calculated by the following equation:

L

(x) =

rec + δ

reg + γ

lat,

L

L

L

L

where each term in the equation above is deﬁned as follows:

x) log(1

ˆx)

−

L

L

rec = x log(ˆx) + (1
−
p(z0))
x; φ)
reg = KL(q(z0
|
(cid:107)
p(z1
z0, x; φ)
+ KL(q(z1
(cid:107)
n
(cid:88)

|

+

KL(q(zi

z0; θ))
|

i=2

lat =

L

z(cid:48)

z

2
2.

−

(cid:107)

−(cid:107)

zi−1, z0, x; φ)
(cid:107)
|

p(zi

zi−1, z0; θ))
|

Note that δ and γ, which weigh the contributions of the each
term towards the overall cost, are tunable hyper-parameters.

(2)

(3)

(5)

(6)

(7)

(8)

3.3. Encoder: 3D-ConvNet + Skip-Connections

6, 5, 4
{

and channels

, strides
}

32, 64, 128
{

The global latent code z0 is directly learned from the
input voxel through three convolutional layers with kernel
2, 2, 1
.
sizes
}
}
{
Each local latent code z>1 is conditioned on the global
latent code, the input voxel x, and the previous latent code
(except for z1, which does not have a previous latent code)
using two fully-connected layers with 100 neurons each.
The skip-connections between local codes help ease the
process of learning hierarchical features (i.e., improved gra-
dient transmission) and force each local code to learn one
level of abstraction.

The approximate posterior for a single voxel is given by:

q(z0

x; φ)q(z1
|

z0, x; φ)
|

q(zi

zi−1, z0, x; φ)
|

(9)

n
(cid:89)

i=2

where φ, the variational parameters, is parameterized by
neural networks. n represents the number of local latent
codes.

3.4. Decoder: 3D-DeConvNet

After we learn the global and local latent codes z0:n, we
then concatenate them into a single vector as shown in Fig-
ure 2 in blue dashed lines.

A 3D deconvolutional neural network with dimensions
symmetrical to the encoder of Section 3.3 is used to decode
the learned latent features into a voxel. An element-wise
logistic sigmoid is applied to the output layer in order to
convert the learned features to occupancy probabilities for
each voxel cell.

3.5. Image Regressor: 2D-ConvNet

We use a standard 2D convolutional network to encode
input RGB images into a feature space with the same di-
mension as the concatenation of global and local latent
codes [z0:n]. The network contains four fully-convolutional
2, 2, 2, 1
,
layers with kernel sizes
}
{
and channels
. The last convolutional layer
}
is ﬂattened and fed into two fully-connected layers with
200 and 100 neurons each. Unlike the encoder described
in Section 3.3, we apply dropout [41] before the last fully-
connected layer.

16, 32, 64, 128
{

32, 15, 5, 3
{

, strides
}

4. Experiments

To evaluate the quality of our proposed generative model

for 3D shapes, we conduct several extensive experiments.

In Section 4.3, we investigate our model’s ability to gen-
eralize and synthesize through a shape interpolation exper-
iment and an nearest neighbours analysis of random gener-
ated samples from the VSL. Following this, in Section 4.4,
we evaluate our model on the task of unsupervised shape

classiﬁcation by directly using the learned latent features on
both the ModelNet10 and ModelNet40 datasets. We com-
pare these results to previous supervised and unsupervised
state-of-the-art methods. Next, we test our model’s ability
to reconstruct real-world image in Section 4.5, comparing
our results to 3D-R2N2 [5] and NRSfM [19]. Finally, we
demonstrate the richness of the VSL’s learned semantic em-
beddings through vector arithmetic, using the latent features
trained on ModelNet40 for Section 4.6.

4.1. Datasets

ModelNet There are two variants of the ModelNet
dataset, ModelNet10 and ModelNet 40, introduced in [45],
with 10 and 40 target classes respectively. ModelNet10 has
3D shapes which are pre-aligned with the same pose across
all categories. In contrast, ModelNet40 (which includes the
shapes found in ModelNet10) features a variety of poses.
We voxelize both ModelNet10 and ModelNet40 with reso-
lution [30
30]. To test our model’s ability to handle
3D shapes of great variety and complexity, we use Model-
Net40 for most of the experiments, especially for those in
Section 4.3 and 4.6. Both ModelNet10 and ModelNet40 are
used to conduct the shape classiﬁcation experiments.

30

×

×

PASCAL 3D The PASCAL 3D dataset is composed of
the images from the PASCAL VOC 2012 dataset [10], aug-
mented with 3D annotations using PASCAL 3D+ [46]. We
voxelize the 3D CAD models using resolution [30
30]
and use the same training and testing splits of [19], which
was also used in [5] to conduct real-world image reconstruc-
tion (of which the experiment in Section 4.5 is based off
of). We use the bounding box information as provided in
the dataset. Note that the only pre-processing we applied
was image cropping and padding with 0-intensity pixels to
100] (which was
create ﬁnal samples of resolution [100
required for our model).

30

×

×

×

4.2. Training Protocol

Training was the same across all experiments, with only
minor details that were task-dependent. The architecture of
the VSL experimented with in this paper consisted of 5 local
latent codes, each made up of 10 variables for ModelNet40
and 5 for ModelNet10. For ModelNet40, the global latent
code was set to a dimensionality of 20 variables, while for
ModelNet10, it was set to 10 variables.

The hyper-parameter δ was set to 10−3 across training on
both ModelNet10 and ModelNet40. We optimise parame-
ters by maximizing the loss function deﬁned in Equation 5
using the Adam adaptive learning rate [21], with step size
10−5. For the experiments of Sections 4.3, 4.4, and
set to 5
4.6, over 2500 epochs, parameter updates were calculated
using mini-batches of 200 samples on ModelNet40 and 100
samples on ModelNet10.

×

For the experiment in Section 4.5, we use 5 local la-

tent codes (each with dimensionality of 5) and a global la-
tent code of 20 variables for the jointly trained model. For
the separately trained model, we use 3 local latent codes,
each with dimensionality of 2, and a global latent code of
dimensionality 5. Mini-batches of 40 samples were use
to compute gradients for the joint model while 5 samples
were used for the separately trained model. For both model
variants, dropout [41] was to control for over-ﬁtting, with
pdrop = 0.2, and early stopping was employed (resulting in
only 150 epochs).

L

For Section 4.5, which involved image reconstruction
and thus required the loss term
lat, instead of searching for
an optimal value of the hyper-parameter γ through cross-
validation, we employed a “warming-up” schedule, similar
to that of [40]. “Warming-up” involves gradually increasing
γ (on a log-scale as depicted in Figure 3), which controls
the relative weighting of
lat in Equation 5. The schedule
is deﬁned as follows,

L

γ =

10−3

50 < t < 100

(10)





10(cid:98)t/10(cid:99)−8
40
t
−
10 (cid:99) ·
10−3

(cid:98)
5

·

t

t

50

≤

100.

≥

Figure 3: Training the VSL for image reconstruction using
a warming-up schedule compared to using constant weights
10−3.
γ = 1

10−8 and γ = 5

·

·

Figure 3 depicts, empirically, the beneﬁts of employing a
warming-up schedule over using a ﬁxed, externally set coef-
ﬁcient for the
lat term in our image reconstruction exper-
iment. We remark that using a warming-up schedule plays
an essential role in acquiring good performance on the im-
age reconstruction task.

L

4.3. Shape Generation and Learning

To examine our model’s ability to generate high-
resolution 3D shapes with realistic details, we design a task
that involves shape generation and shape interpolation. We
add Gaussian noise to the learned latent codes on test data
taken from ModelNet40 and then use our model to generate
“unseen” samples that are similar to the input voxel. In ef-

Shape Generation

Nearest
Neighbor

airplane

chair

toilet

vase

desk

sofa

airplane

sofa

Figure 4: Randomly generated results from the proposed Variational Shape Learner trained on ModelNet40. The nearest
neighbors are the ground-truth shapes, fetched from the test data, and placed for reference in the last column of the table.

Intra-Class Interpolation (airplane)

Inter-Class Interpolation (chair → bed)

Figure 5: Interpolation results of the Variational Shape Learner on ModelNet40.

desk

chair

Figure 6: Shape generation from previous state-of-the-art approaches. Up: generated shapes in resolution [30
64
from [45]; Down: generated shapes in resolution [64

64] from [44].

30

30]

×

×

×

×

Supervision

Method

Classiﬁcation Rate
ModelNet10 ModelNet40

Supervised

Unsupervised

3D ShapeNets [45]
DeepPano [38]
Geometry Image [39]
VoxNet [27]
PointNet [30]
ORION [35]

SPH [20]
LFD [4]
T-L Network [13]
VConv-DAE [37]
3D-GAN [44]
VSL (ours)

83.5%
85.5%
88.4%
92.0%
-
93.8%

79.8%
79.9%
74.4%
80.5%
91.0%
91.0%

77.3%
77.6%
83.9%
83.0%
89.2%
-

68.2%
75.5%
-
75.5%
83.3%
84.5%

Table 2: ModelNet classiﬁcation results for both unsuper-
vised and supervised methods.

vised state-of-the-art, outperforming models such as 3D
ShapeNet [45], DeepPano [38], and the geometry image-
base approach [39], by a large margin, and comes close to
models such as VoxNet [27].

In order to visualise the learned feature embeddings, we
employ t-SNE [26] to map our high dimensional feature to
a 2D plane. The visualization is shown in Figure 7.

fect, we generate objects from our VSL model directly from
vectors, without a reference object/image.

The results of our shape interpolation experiment, from
both within-class and across-class perspectives, is presented
It can be observed that the proposed VSL
in Figure 5.
shows the ability to smoothly transition between two ob-
jects. Our results on shape generation are shown in Figure
4. Notably, in our visualizations, darker colours correspond
to smaller occupancy probability while lighter corresponds
to higher occupancy probability. We further compare to pre-
vious state-of-the-art results in shape generation, which are
depicted in Figure 6.

During training, we observed that our model was robust
to different choices of the number and dimensionality of its
local/global latent codes. We provide the table below as an
ablative analysis showing how test reconstruction error is
affected by various settings of the latent variables. From the
results, we can observe a clear trend that the network with
higher dimensionality and greater number of latent vari-
ables tends to generate better results. However, increasing
the number of network parameters to attain better accuracy
also brings about slower training, an important trade-off that
one will need to consider in various application scenarios.

Latent Space Parameters

Reconstruction Error
Global Dim. Local Dim. Local Num. Model-10 Model-40

10
10
20
50
100

5
5
10
10
20

3
5
5
10
10

0.0931
0.0903
0.0907
0.0910
0.0902

0.0860
0.0831
0.0798
0.0767
0.0789

Table 1: Reconstruction error of ModelNet 10/40 with var-
ious choices of network structure.

4.4. Shape Classiﬁcation

ModelNet10

ModelNet40

One way to test model expressiveness is to conduct shape
classiﬁcation directly using the learned embeddings. We
evaluate the features learned on the ModelNet dataset [45]
by concatenating both the global latent variable with the lo-
cal latent layers, creating a single feature vector [z0:m]. We
train a Support Vector Machine with an RBF kernel for clas-
siﬁcation using these “pre-trained” embeddings.

Table 2 shows the performance of previous state-of-the-
art supervised and unsupervised methods in shape classiﬁ-
cation on both variants of the ModelNet dataset. Notably,
the best unsupervised state-of-the-art results reported so far
were from the 3D-GAN of [44], which used features from
3 layers of convolutional networks with total dimensions
83]. This is a far larger fea-
[62
×
ture space than that required by our model, which is simply
10 + 20]
[5
(for 40-way classiﬁcation) and reaches the exact same level
of performance. The VSL performs comparably to super-

5 + 10] (for 10-way classiﬁcation) and [5

323 + 128

163 + 56

×

×

×

×

Figure 7: t-SNE plots of the latent embeddings for Model-
Net10 and ModelNet40. Each color represents one class.

4.5. Single Image 3D Model Retrieval

Real-world, single image 3D model retrieval is another
application of the proposed VSL model. This is a challeng-
ing problem, forcing a model to deal with real-world 2D im-
ages under a variety of lighting conditions and resolutions.
Furthermore, there are many instances of model occlusion
as well as different colour gradings.

To test our model on this application, we use the PAS-
CAL 3D [46] dataset and utilize the same exact training
and testing splits from [19]. We compare our results with
those reported for recent approaches, including the NRSfM
[19] and 3D-R2N2 [5] models. Note that these also used the
exact same experimental conﬁgurations we did.

For this task, we train our model in two different ways:

NRSfM
3D-R2N2 [LSTM-1]
3D-R2N2 [Res3D-GRU-3]
VSL (jointly trained)
VSL (separately trained)

aero
0.298
0.472
0.544
0.514
0.631

bike
0.144
0.330
0.499
0.269
0.657

boat
0.188
0.466
0.560
0.327
0.554

bus
0.501
0.677
0.816
0.558
0.856

car
0.472
0.579
0.699
0.633
0.786

chair mbike
0.361
0.234
0.474
0.203
0.649
0.280
0.301
0.199
0.656
0.311

sofa
0.149
0.251
0.332
0.173
0.601

train
0.249
0.518
0.672
0.402
0.804

tv
0.492
0.438
0.574
0.337
0.454

mean
0.318
0.456
0.571
0.432
0.619

Table 3: Per-category voxel predictive performance on PASCAL 3D, as measured by Intersection-of-Union (IoU).

Input

GT

VSL

3D-R2N2[5] NRSfM[19]

egories, half of them by a wide margin.

4.6. Shape Arithmetic

Another way to explore the learned embeddings is to per-
form various vector operations on the latent space, much
what was done in [44, 13]. We present some results of
our shape arithmetic experiment in Figure 9. Different
from previous results, all of our objects are sampled from
the model embeddings which were trained using the whole
dataset with 40 classes. Furthermore, unlike the blurrier
generations of [13], the VSL seems to generate very inter-
esting combinations of the input embeddings without the
need for any matching to actual 3D shapes from the origi-
nal dataset. The resultant objects appear to clearly embody
the intuitive meaning of the vector operators.

Figure 8: Reconstruction samples for PASCAL 3D from the
separately trained VSL.

1) jointly on all categories, and 2) separately on each cate-
gory. In Figure 8, we observe better reconstructions from
the (separately-trained) VSL when compared to previous
work. Unlike the NRSfM [19], the VSL does not require
any segmentation, pose information, or keypoints. In addi-
tion, the VSL is trained from scratch while the 3D-R2N2
is pre-trained using the ShapeNet dataset [3]. However,
the jointly-trained VSL did not outperform the 3D-R2N2,
which is also jointly-trained. The performance gap is due to
the fact that the 3D-R2N2 is speciﬁcally designed for image
reconstruction and employs a residual network [17] to help
the model learn richer semantic features.

Quantitatively, we compare our VSL to the NRSfM [19]
and two versions of 3D-R2N2 from [5], one with an LSTM
structure and another with a deep residual network. Results
(Intersection-of-Union) are shown in Table 3. Observe that
our jointly trained model performs comparably to the 3D-
R2N2 LSTM variant while the separately trained version
surpasses the 3D-R2N2 ResNet structure in 8 out of 10 cat-

Figure 9: Samples of our shape arithmetic experiment.

5. Conclusion

In this paper, we proposed the Variational Shape Learner,
a hierarchical latent-variable model for 3D shape mod-
elling, learnable through variational inference. In particu-
lar, we have demonstrated 3D shape generation results on a
popular benchmark, the ModelNet dataset. We also used
the learned embeddings of our model to obtain state-of-
the-art in unsupervised shape classiﬁcation and furthermore
showed that we could generate unseen shapes using shape
arithmetic. Future work will entail a more thorough investi-
gation of the embeddings learned by our hierarchical latent-
variable model as well as integration of better prior distri-
butions into the framework.

References

[1] M. Arjovsky and L. Bottou. Towards principled methods
for training generative adversarial networks. arXiv preprint
arXiv:1701.04862, 2017. 2

[2] Y. Bengio. Deep learning of representations: Looking for-
ward. In International Conference on Statistical Language
and Speech Processing, pages 1–37. Springer, 2013. 1
[3] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015. 1, 8

[4] D.-Y. Chen, X.-P. Tian, Y.-T. Shen, and M. Ouhyoung. On
In Computer
visual similarity based 3d model retrieval.
graphics forum, volume 22, pages 223–232. Wiley Online
Library, 2003. 7

[5] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. arXiv preprint arXiv:1604.00449, 2016. 1,
2, 5, 7, 8

[6] J. Chung, K. Kastner, L. Dinh, K. Goel, A. C. Courville, and
Y. Bengio. A recurrent latent variable model for sequential
data. In Advances in neural information processing systems,
pages 2980–2988, 2015. 2

[7] A. Delaunoy, E. Prados, P. G. I. Pirac´es, J.-P. Pons, and
P. Sturm. Minimizing the multi-view stereo reprojection er-
In BMVC 2008-British
ror for triangular surface meshes.
Machine Vision Conference, pages 1–10. BMVA, 2008. 2
[8] C. Doersch. Tutorial on variational autoencoders. arXiv

preprint arXiv:1606.05908, 2016. 4

[9] H. Edwards and A. Storkey. Towards a neural statistician.

arXiv preprint arXiv:1606.02185, 2016. 1, 2

[10] M. Everingham, S. A. Eslami, L. Van Gool, C. K. Williams,
J. Winn, and A. Zisserman. The pascal visual object classes
International Journal of Com-
challenge: A retrospective.
puter Vision, 111(1):98–136, 2015. 5

[11] K. Fukushima. Neocognitron: A hierarchical neural net-
work capable of visual pattern recognition. Neural networks,
1(2):119–130, 1988. 2

[12] P. Gargallo, E. Prados, and P. Sturm. Minimizing the re-
In
projection error in surface reconstruction from images.
Computer Vision, 2007. ICCV 2007. IEEE 11th International
Conference on, pages 1–8. IEEE, 2007. 2

[13] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. arXiv preprint arXiv:1603.08637, 2016. 1, 2, 7,
8

[14] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in Neural Information
Processing Systems, pages 2672–2680, 2014. 2

[15] K. Gregor, I. Danihelka, A. Graves, D. J. Rezende, and
D. Wierstra. Draw: A recurrent neural network for image
generation. arXiv preprint arXiv:1502.04623, 2015. 2
[16] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface
arXiv preprint

prediction for 3d object reconstruction.
arXiv:1704.00710, 2017. 1, 2

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
770–778, 2016. 8

[18] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. arXiv preprint arXiv:1708.05375, 2017. 1, 2
[19] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Category-
speciﬁc object reconstruction from a single image. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 1966–1974, 2015. 1, 5, 7, 8
[20] M. Kazhdan, T. Funkhouser, and S. Rusinkiewicz. Rotation
invariant spherical harmonic representation of 3 d shape de-
scriptors. In Symposium on geometry processing, volume 6,
pages 156–164, 2003. 7

[21] D. Kingma and J. Ba. Adam: A method for stochastic opti-

mization. arXiv preprint arXiv:1412.6980, 2014. 5

[22] D. P. Kingma and M. Welling. Auto-encoding variational

bayes. arXiv preprint arXiv:1312.6114, 2013. 2, 3

[23] J. Knopp, M. Prasad, G. Willems, R. Timofte, and
L. Van Gool. Hough transform and 3d surf for robust three
dimensional classiﬁcation. In European Conference on Com-
puter Vision, pages 589–602. Springer, 2010. 2

[24] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
In
classiﬁcation with deep convolutional neural networks.
Advances in neural information processing systems, pages
1097–1105, 2012. 2

[25] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural compu-
tation, 1(4):541–551, 1989. 2

[26] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of Machine Learning Research, 9(Nov):2579–2605,
2008. 7

[27] D. Maturana and S. Scherer. Voxnet: A 3d convolutional
neural network for real-time object recognition. In Intelligent
Robots and Systems (IROS), 2015 IEEE/RSJ International
Conference on, pages 922–928. IEEE, 2015. 1, 2, 7

[28] A. Patterson IV, P. Mordohai, and K. Daniilidis. Object de-
tection from large-scale 3d datasets using bottom-up and top-
down descriptors. In European Conference on Computer Vi-
sion, pages 553–566. Springer, 2008. 2

[29] Y. Pu, Z. Gan, R. Henao, X. Yuan, C. Li, A. Stevens, and
L. Carin. Variational autoencoder for deep learning of im-
ages, labels and captions. In Advances in Neural Information
Processing Systems, pages 2352–2360, 2016. 2

[30] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiﬁcation and segmentation.
arXiv preprint arXiv:1612.00593, 2016. 7

[31] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. arXiv preprint arXiv:1511.06434, 2015. 2

[32] D. J. Rezende, S. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3d
structure from images. In Advances in Neural Information
Processing Systems, pages 4996–5004, 2016. 1, 2

[33] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep genera-
tive models. arXiv preprint arXiv:1401.4082, 2014. 2

[49] Z. Zhu, X. Wang, S. Bai, C. Yao, and X. Bai. Deep learn-
ing representation using autoencoder for 3d shape retrieval.
Neurocomputing, 204:41–50, 2016. 1, 2

[34] R. B. Rusu, N. Blodow, and M. Beetz. Fast point feature
In Robotics and Au-
histograms (fpfh) for 3d registration.
tomation, 2009. ICRA’09. IEEE International Conference
on, pages 3212–3217. IEEE, 2009. 2

[35] N. Sedaghat, M. Zolfaghari, and T. Brox. Orientation-
boosted voxel nets for 3d object recognition. arXiv preprint
arXiv:1604.03351, 2016. 1, 7

[36] I. V. Serban, A. G. Ororbia II, J. Pineau, and A. Courville.
Piecewise latent variables for neural variational text process-
In Proceedings of the 2017 Conference on Empirical
ing.
Methods in Natural Language Processing, pages 422–432,
2017. 2

[37] A. Sharma, O. Grau, and M. Fritz. Vconv-dae: Deep vol-
umetric shape learning without object labels. In Computer
Vision–ECCV 2016 Workshops, pages 236–250. Springer,
2016. 7

[38] B. Shi, S. Bai, Z. Zhou, and X. Bai. Deeppano: Deep
IEEE
panoramic representation for 3-d shape recognition.
Signal Processing Letters, 22(12):2339–2343, 2015. 7
[39] A. Sinha, J. Bai, and K. Ramani. Deep learning 3d shape
In European Conference

surfaces using geometry images.
on Computer Vision, pages 223–240. Springer, 2016. 7
[40] C. K. Sønderby, T. Raiko, L. Maaløe, S. K. Sønderby, and
O. Winther. Ladder variational autoencoders. In Advances in
Neural Information Processing Systems, pages 3738–3746,
2016. 5

[41] N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: a simple way to prevent neu-
ral networks from overﬁtting. Journal of Machine Learning
Research, 15(1):1929–1958, 2014. 4, 5

[42] H. Su, S. Maji, E. Kalogerakis, and E. Learned-Miller. Multi-
view convolutional neural networks for 3d shape recogni-
tion. In Proceedings of the IEEE International Conference
on Computer Vision, pages 945–953, 2015. 2

[43] O. Wiles and A. Zisserman. Silnet : Single- and multi-view
reconstruction by learning from silhouettes. 2017. 2
[44] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems, pages 82–90, 2016. 1, 2, 6,
7, 8

[45] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3d shapenets: A deep representation for volumetric
shapes. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1912–1920, 2015. 1,
2, 5, 6, 7

[46] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
benchmark for 3d object detection in the wild. In IEEE Win-
ter Conference on Applications of Computer Vision (WACV),
2014. 5, 7

[47] J. Xie, Y. Fang, F. Zhu, and E. Wong. Deepshape: Deep
learned shape descriptor for 3d shape matching and retrieval.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1275–1283, 2015. 2

[48] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspective
transformer nets: Learning single-view 3d object reconstruc-
tion without 3d supervision. In Advances in Neural Informa-
tion Processing Systems, pages 1696–1704, 2016. 1, 2

