8
1
0
2
 
b
e
F
 
6
2
 
 
]
E
N
.
s
c
[
 
 
3
v
6
9
1
0
1
.
0
1
7
1
:
v
i
X
r
a

Published as a conference paper at ICLR 2018

PROGRESSIVE GROWING OF GANS FOR IMPROVED
QUALITY, STABILITY, AND VARIATION

Tero Karras
NVIDIA
{tkarras,taila,slaine,jlehtinen}@nvidia.com

Samuli Laine
NVIDIA

Timo Aila
NVIDIA

Jaakko Lehtinen
NVIDIA and Aalto University

ABSTRACT

We describe a new training methodology for generative adversarial networks. The
key idea is to grow both the generator and discriminator progressively: starting
from a low resolution, we add new layers that model increasingly ﬁne details as
training progresses. This both speeds the training up and greatly stabilizes it, al-
lowing us to produce images of unprecedented quality, e.g., CELEBA images at
10242. We also propose a simple way to increase the variation in generated im-
ages, and achieve a record inception score of 8.80 in unsupervised CIFAR10.
Additionally, we describe several implementation details that are important for
discouraging unhealthy competition between the generator and discriminator. Fi-
nally, we suggest a new metric for evaluating GAN results, both in terms of image
quality and variation. As an additional contribution, we construct a higher-quality
version of the CELEBA dataset.

1

INTRODUCTION

Generative methods that produce novel samples from high-dimensional data distributions, such as
images, are ﬁnding widespread use, for example in speech synthesis (van den Oord et al., 2016a),
image-to-image translation (Zhu et al., 2017; Liu et al., 2017; Wang et al., 2017), and image in-
painting (Iizuka et al., 2017). Currently the most prominent approaches are autoregressive models
(van den Oord et al., 2016b;c), variational autoencoders (VAE) (Kingma & Welling, 2014), and gen-
erative adversarial networks (GAN) (Goodfellow et al., 2014). Currently they all have signiﬁcant
strengths and weaknesses. Autoregressive models – such as PixelCNN – produce sharp images but
are slow to evaluate and do not have a latent representation as they directly model the conditional
distribution over pixels, potentially limiting their applicability. VAEs are easy to train but tend
to produce blurry results due to restrictions in the model, although recent work is improving this
(Kingma et al., 2016). GANs produce sharp images, albeit only in fairly small resolutions and with
somewhat limited variation, and the training continues to be unstable despite recent progress (Sali-
mans et al., 2016; Gulrajani et al., 2017; Berthelot et al., 2017; Kodali et al., 2017). Hybrid methods
combine various strengths of the three, but so far lag behind GANs in image quality (Makhzani &
Frey, 2017; Ulyanov et al., 2017; Dumoulin et al., 2016).

Typically, a GAN consists of two networks: generator and discriminator (aka critic). The generator
produces a sample, e.g., an image, from a latent code, and the distribution of these images should
ideally be indistinguishable from the training distribution. Since it is generally infeasible to engineer
a function that tells whether that is the case, a discriminator network is trained to do the assessment,
and since networks are differentiable, we also get a gradient we can use to steer both networks to
the right direction. Typically, the generator is of main interest – the discriminator is an adaptive loss
function that gets discarded once the generator has been trained.

There are multiple potential problems with this formulation. When we measure the distance between
the training distribution and the generated distribution, the gradients can point to more or less random
directions if the distributions do not have substantial overlap, i.e., are too easy to tell apart (Arjovsky
& Bottou, 2017). Originally, Jensen-Shannon divergence was used as a distance metric (Goodfellow
et al., 2014), and recently that formulation has been improved (Hjelm et al., 2017) and a number of
more stable alternatives have been proposed, including least squares (Mao et al., 2016b), absolute
deviation with margin (Zhao et al., 2017), and Wasserstein distance (Arjovsky et al., 2017; Gulrajani

1

Published as a conference paper at ICLR 2018

et al., 2017). Our contributions are largely orthogonal to this ongoing discussion, and we primarily
use the improved Wasserstein loss, but also experiment with least-squares loss.

The generation of high-resolution images is difﬁcult because higher resolution makes it easier to tell
the generated images apart from training images (Odena et al., 2017), thus drastically amplifying
the gradient problem. Large resolutions also necessitate using smaller minibatches due to memory
constraints, further compromising training stability. Our key insight is that we can grow both the
generator and discriminator progressively, starting from easier low-resolution images, and add new
layers that introduce higher-resolution details as the training progresses. This greatly speeds up
training and improves stability in high resolutions, as we will discuss in Section 2.

The GAN formulation does not explicitly require the entire training data distribution to be repre-
sented by the resulting generative model. The conventional wisdom has been that there is a tradeoff
between image quality and variation, but that view has been recently challenged (Odena et al., 2017).
The degree of preserved variation is currently receiving attention and various methods have been
suggested for measuring it, including inception score (Salimans et al., 2016), multi-scale structural
similarity (MS-SSIM) (Odena et al., 2017; Wang et al., 2003), birthday paradox (Arora & Zhang,
2017), and explicit tests for the number of discrete modes discovered (Metz et al., 2016). We will
describe our method for encouraging variation in Section 3, and propose a new metric for evaluating
the quality and variation in Section 5.

Section 4.1 discusses a subtle modiﬁcation to the initialization of networks, leading to a more bal-
anced learning speed for different layers. Furthermore, we observe that mode collapses traditionally
plaguing GANs tend to happen very quickly, over the course of a dozen minibatches. Commonly
they start when the discriminator overshoots, leading to exaggerated gradients, and an unhealthy
competition follows where the signal magnitudes escalate in both networks. We propose a mecha-
nism to stop the generator from participating in such escalation, overcoming the issue (Section 4.2).

We evaluate our contributions using the CELEBA, LSUN, CIFAR10 datasets. We improve
the best published inception score for CIFAR10. Since the datasets commonly used in bench-
marking generative methods are limited to a fairly low resolution, we have also created a
higher quality version of the CELEBA dataset that allows experimentation with output resolu-
tions up to 1024 × 1024 pixels. This dataset and our full implementation are available at
https://github.com/tkarras/progressive_growing_of_gans, trained networks can be
found at https://drive.google.com/open?id=0B4qLcYyJmiz0NHFULTdYc05lX0U along
with result images, and a supplementary video illustrating the datasets, additional results, and la-
tent space interpolations is at https://youtu.be/G06dEcZ-QTg.

2 PROGRESSIVE GROWING OF GANS

Our primary contribution is a training methodology for GANs where we start with low-resolution
images, and then progressively increase the resolution by adding layers to the networks as visualized
in Figure 1. This incremental nature allows the training to ﬁrst discover large-scale structure of the
image distribution and then shift attention to increasingly ﬁner scale detail, instead of having to learn
all scales simultaneously.

We use generator and discriminator networks that are mirror images of each other and always grow
in synchrony. All existing layers in both networks remain trainable throughout the training process.
When new layers are added to the networks, we fade them in smoothly, as illustrated in Figure 2.
This avoids sudden shocks to the already well-trained, smaller-resolution layers. Appendix A de-
scribes structure of the generator and discriminator in detail, along with other training parameters.

We observe that the progressive training has several beneﬁts. Early on, the generation of smaller
images is substantially more stable because there is less class information and fewer modes (Odena
et al., 2017). By increasing the resolution little by little we are continuously asking a much simpler
question compared to the end goal of discovering a mapping from latent vectors to e.g. 10242
images. This approach has conceptual similarity to recent work by Chen & Koltun (2017).
In
practice it stabilizes the training sufﬁciently for us to reliably synthesize megapixel-scale images
using WGAN-GP loss (Gulrajani et al., 2017) and even LSGAN loss (Mao et al., 2016b).

2

Published as a conference paper at ICLR 2018

Figure 1: Our training starts with both the generator (G) and discriminator (D) having a low spa-
tial resolution of 4×4 pixels. As the training advances, we incrementally add layers to G and D,
thus increasing the spatial resolution of the generated images. All existing layers remain trainable
throughout the process. Here N × N refers to convolutional layers operating on N × N spatial
resolution. This allows stable synthesis in high resolutions and also speeds up training considerably.
One the right we show six example images generated using progressive growing at 1024 × 1024.

Another beneﬁt is the reduced training time. With progressively growing GANs most of the itera-
tions are done at lower resolutions, and comparable result quality is often obtained up to 2–6 times
faster, depending on the ﬁnal output resolution.

The idea of growing GANs progressively is related to the work of Wang et al. (2017), who use mul-
tiple discriminators that operate on different spatial resolutions. That work in turn is motivated by
Durugkar et al. (2016) who use one generator and multiple discriminators concurrently, and Ghosh
et al. (2017) who do the opposite with multiple generators and one discriminator. Hierarchical
GANs (Denton et al., 2015; Huang et al., 2016; Zhang et al., 2017) deﬁne a generator and discrimi-
nator for each level of an image pyramid. These methods build on the same observation as our work
– that the complex mapping from latents to high-resolution images is easier to learn in steps – but
the crucial difference is that we have only a single GAN instead of a hierarchy of them. In contrast
to early work on adaptively growing networks, e.g., growing neural gas (Fritzke, 1995) and neuro
evolution of augmenting topologies (Stanley & Miikkulainen, 2002) that grow networks greedily,
we simply defer the introduction of pre-conﬁgured layers. In that sense our approach resembles
layer-wise training of autoencoders (Bengio et al., 2007).

3

INCREASING VARIATION USING MINIBATCH STANDARD DEVIATION

GANs have a tendency to capture only a subset of the variation found in training data, and Salimans
et al. (2016) suggest “minibatch discrimination” as a solution. They compute feature statistics not
only from individual images but also across the minibatch, thus encouraging the minibatches of
generated and training images to show similar statistics. This is implemented by adding a minibatch
layer towards the end of the discriminator, where the layer learns a large tensor that projects the
input activation to an array of statistics. A separate set of statistics is produced for each example in a
minibatch and it is concatenated to the layer’s output, so that the discriminator can use the statistics
internally. We simplify this approach drastically while also improving the variation.

Our simpliﬁed solution has neither learnable parameters nor new hyperparameters. We ﬁrst compute
the standard deviation for each feature in each spatial location over the minibatch. We then average
these estimates over all features and spatial locations to arrive at a single value. We replicate the
value and concatenate it to all spatial locations and over the minibatch, yielding one additional (con-
stant) feature map. This layer could be inserted anywhere in the discriminator, but we have found it
best to insert it towards the end (see Appendix A.1 for details). We experimented with a richer set
of statistics, but were not able to improve the variation further. In parallel work, Lin et al. (2017)
provide theoretical insights about the beneﬁts of showing multiple images to the discriminator.

3

Published as a conference paper at ICLR 2018

Figure 2: When doubling the resolution of the generator (G) and discriminator (D) we fade in the
new layers smoothly. This example illustrates the transition from 16 × 16 images (a) to 32 × 32
images (c). During the transition (b) we treat the layers that operate on the higher resolution like a
residual block, whose weight α increases linearly from 0 to 1. Here 2× and 0.5× refer to doubling
and halving the image resolution using nearest neighbor ﬁltering and average pooling, respectively.
The toRGB represents a layer that projects feature vectors to RGB colors and fromRGB does
the reverse; both use 1 × 1 convolutions. When training the discriminator, we feed in real images
that are downscaled to match the current resolution of the network. During a resolution transition,
we interpolate between two resolutions of the real images, similarly to how the generator output
combines two resolutions.

Alternative solutions to the variation problem include unrolling the discriminator (Metz et al., 2016)
to regularize its updates, and a “repelling regularizer” (Zhao et al., 2017) that adds a new loss term
to the generator, trying to encourage it to orthogonalize the feature vectors in a minibatch. The
multiple generators of Ghosh et al. (2017) also serve a similar goal. We acknowledge that these
solutions may increase the variation even more than our solution – or possibly be orthogonal to it –
but leave a detailed comparison to a later time.

4 NORMALIZATION IN GENERATOR AND DISCRIMINATOR

GANs are prone to the escalation of signal magnitudes as a result of unhealthy competition between
the two networks. Most if not all earlier solutions discourage this by using a variant of batch nor-
malization (Ioffe & Szegedy, 2015; Salimans & Kingma, 2016; Ba et al., 2016) in the generator, and
often also in the discriminator. These normalization methods were originally introduced to elimi-
nate covariate shift. However, we have not observed that to be an issue in GANs, and thus believe
that the actual need in GANs is constraining signal magnitudes and competition. We use a different
approach that consists of two ingredients, neither of which include learnable parameters.

4.1 EQUALIZED LEARNING RATE

We deviate from the current trend of careful weight initialization, and instead use a trivial N (0, 1)
initialization and then explicitly scale the weights at runtime. To be precise, we set ˆwi = wi/c,
where wi are the weights and c is the per-layer normalization constant from He’s initializer (He
et al., 2015). The beneﬁt of doing this dynamically instead of during initialization is somewhat
subtle, and relates to the scale-invariance in commonly used adaptive stochastic gradient descent
methods such as RMSProp (Tieleman & Hinton, 2012) and Adam (Kingma & Ba, 2015). These
methods normalize a gradient update by its estimated standard deviation, thus making the update
independent of the scale of the parameter. As a result, if some parameters have a larger dynamic
range than others, they will take longer to adjust. This is a scenario modern initializers cause, and
thus it is possible that a learning rate is both too large and too small at the same time. Our approach
ensures that the dynamic range, and thus the learning speed, is the same for all weights. A similar
reasoning was independently used by van Laarhoven (2017).

4

Published as a conference paper at ICLR 2018

4.2 PIXELWISE FEATURE VECTOR NORMALIZATION IN GENERATOR

To disallow the scenario where the magnitudes in the generator and discriminator spiral out of con-
trol as a result of competition, we normalize the feature vector in each pixel to unit length in the
generator after each convolutional layer. We do this using a variant of “local response normaliza-
x,y)2 + (cid:15), where (cid:15) = 10−8,
tion” (Krizhevsky et al., 2012), conﬁgured as bx,y = ax,y/
N is the number of feature maps, and ax,y and bx,y are the original and normalized feature vector
in pixel (x, y), respectively. We ﬁnd it surprising that this heavy-handed constraint does not seem to
harm the generator in any way, and indeed with most datasets it does not change the results much,
but it prevents the escalation of signal magnitudes very effectively when needed.

j=0 (aj

(cid:113) 1
N

(cid:80)N −1

5 MULTI-SCALE STATISTICAL SIMILARITY FOR ASSESSING GAN RESULTS

In order to compare the results of one GAN to another, one needs to investigate a large number of
images, which can be tedious, difﬁcult, and subjective. Thus it is desirable to rely on automated
methods that compute some indicative metric from large image collections. We noticed that existing
methods such as MS-SSIM (Odena et al., 2017) ﬁnd large-scale mode collapses reliably but fail to
react to smaller effects such as loss of variation in colors or textures, and they also do not directly
assess image quality in terms of similarity to the training set.

We build on the intuition that a successful generator will produce samples whose local image struc-
ture is similar to the training set over all scales. We propose to study this by considering the multi-
scale statistical similarity between distributions of local image patches drawn from Laplacian pyra-
mid (Burt & Adelson, 1987) representations of generated and target images, starting at a low-pass
resolution of 16 × 16 pixels. As per standard practice, the pyramid progressively doubles until the
full resolution is reached, each successive level encoding the difference to an up-sampled version of
the previous level.

A single Laplacian pyramid level corresponds to a speciﬁc spatial frequency band. We randomly
sample 16384 images and extract 128 descriptors from each level in the Laplacian pyramid, giving
us 221 (2.1M) descriptors per level. Each descriptor is a 7 × 7 pixel neighborhood with 3 color
channels, denoted by x ∈ R7×7×3 = R147. We denote the patches from level l of the training set
and generated set as {xl
i} w.r.t. the
mean and standard deviation of each color channel, and then estimate the statistical similarity by
computing their sliced Wasserstein distance SWD({xl
i}), an efﬁciently computable random-
ized approximation to earthmovers distance, using 512 projections (Rabin et al., 2011).

i=1, respectively. We ﬁrst normalize {xl

i=1 and {yl

i} and {yl

i}, {yl

i}221

i}221

Intuitively a small Wasserstein distance indicates that the distribution of the patches is similar, mean-
ing that the training images and generator samples appear similar in both appearance and variation
at this spatial resolution. In particular, the distance between the patch sets extracted from the lowest-
resolution 16 × 16 images indicate similarity in large-scale image structures, while the ﬁnest-level
patches encode information about pixel-level attributes such as sharpness of edges and noise.

6 EXPERIMENTS

In this section we discuss a set of experiments that we conducted to evaluate the quality of
Please refer to Appendix A for detailed description of our network structures
our results.
and training conﬁgurations. We also invite the reader to consult
the accompanying video
(https://youtu.be/G06dEcZ-QTg) for additional result images and latent space interpolations.
In this section we will distinguish between the network structure (e.g., convolutional layers, resiz-
ing), training conﬁguration (various normalization layers, minibatch-related operations), and train-
ing loss (WGAN-GP, LSGAN).

6.1

IMPORTANCE OF INDIVIDUAL CONTRIBUTIONS IN TERMS OF STATISTICAL SIMILARITY

We will ﬁrst use the sliced Wasserstein distance (SWD) and multi-scale structural similarity (MS-
SSIM) (Odena et al., 2017) to evaluate the importance our individual contributions, and also percep-
tually validate the metrics themselves. We will do this by building on top of a previous state-of-the-
art loss function (WGAN-GP) and training conﬁguration (Gulrajani et al., 2017) in an unsupervised
setting using CELEBA (Liu et al., 2015) and LSUN BEDROOM (Yu et al., 2015) datasets in 1282

5

Published as a conference paper at ICLR 2018

CELEBA

LSUN BEDROOM

Training conﬁguration

(a) Gulrajani et al. (2017)
(b) + Progressive growing
(c) + Small minibatch
(d) + Revised training parameters
(e∗) + Minibatch discrimination
(e) Minibatch stddev
(f) + Equalized learning rate
(g) + Pixelwise normalization
(h) Converged

128

8.73
6.06

64
7.79
2.64

Sliced Wasserstein distance ×103 MS-SSIM Sliced Wasserstein distance ×103 MS-SSIM
16 Avg
32
128
9.28
7.62
12.99
4.62
4.28
3.78
75.42 41.33 41.62 26.57 46.23
8.07
9.20
9.84
10.76
7.04
13.94
4.39
4.42
3.56
4.06
2.96
2.42

16 Avg
64
8.03 14.48 11.25
11.97 10.51
7.09
7.60
9.64
7.40
6.27
72.73 40.16 42.75 42.46 49.52
6.54
9.63
3.65
7.39
8.43
5.32 11.88
10.29
6.48
9.64
3.27
7.77
2.71
3.61
4.02
6.44
4.01
5.87
3.24
3.89
3.31
4.87
2.30
3.47

4.71 11.84
6.04 16.29
5.71
2.82
7.52
2.32
5.13
2.02
4.99
2.24

0.0587
0.0615
0.1061
0.0662
0.0648
0.0671
0.0668
0.0640
0.0636

0.2854
0.2838
0.4065
0.3027
0.3057
0.2950
0.2902
0.2845
0.2828

5.51
6.22
5.23
3.32
3.05
2.60

6.53
6.28
5.67
3.28
3.04
2.17

32

Table 1: Sliced Wasserstein distance (SWD) between the generated and training images (Section 5)
and multi-scale structural similarity (MS-SSIM) among the generated images for several training
setups at 128 × 128. For SWD, each column represents one level of the Laplacian pyramid, and the
last one gives an average of the four distances.

(a)

(b)

(c)

(d)

(e∗)

(e)

(f)

(g)

(h) Converged

Figure 3: (a) – (g) CELEBA examples corresponding to rows in Table 1. These are intentionally
non-converged. (h) Our converged result. Notice that some images show aliasing and some are not
sharp – this is a ﬂaw of the dataset, which the model learns to replicate faithfully.

resolution. CELEBA is particularly well suited for such comparison because the training images
contain noticeable artifacts (aliasing, compression, blur) that are difﬁcult for the generator to repro-
duce faithfully. In this test we amplify the differences between training conﬁgurations by choosing a
relatively low-capacity network structure (Appendix A.2) and terminating the training once the dis-
criminator has been shown a total of 10M real images. As such the results are not fully converged.

Table 1 lists the numerical values for SWD and MS-SSIM in several training conﬁgurations, where
our individual contributions are cumulatively enabled one by one on top of the baseline (Gulrajani
et al., 2017). The MS-SSIM numbers were averaged from 10000 pairs of generated images, and
SWD was calculated as described in Section 5. Generated CELEBA images from these conﬁgu-
rations are shown in Figure 3. Due to space constraints, the ﬁgure shows only a small number of
examples for each row of the table, but a signiﬁcantly broader set is available in Appendix H. Intu-
itively, a good evaluation metric should reward plausible images that exhibit plenty of variation in
colors, textures, and viewpoints. However, this is not captured by MS-SSIM: we can immediately
see that conﬁguration (h) generates signiﬁcantly better images than conﬁguration (a), but MS-SSIM
remains approximately unchanged because it measures only the variation between outputs, not sim-
ilarity to the training set. SWD, on the other hand, does indicate a clear improvement.

The ﬁrst training conﬁguration (a) corresponds to Gulrajani et al. (2017), featuring batch normaliza-
tion in the generator, layer normalization in the discriminator, and minibatch size of 64. (b) enables
progressive growing of the networks, which results in sharper and more believable output images.
SWD correctly ﬁnds the distribution of generated images to be more similar to the training set.

Our primary goal is to enable high output resolutions, and this requires reducing the size of mini-
batches in order to stay within the available memory budget. We illustrate the ensuing challenges in
(c) where we decrease the minibatch size from 64 to 16. The generated images are unnatural, which
is clearly visible in both metrics. In (d), we stabilize the training process by adjusting the hyperpa-
rameters as well as by removing batch normalization and layer normalization (Appendix A.2). As an
intermediate test (e∗), we enable minibatch discrimination (Salimans et al., 2016), which somewhat
surprisingly fails to improve any of the metrics, including MS-SSIM that measures output variation.
In contrast, our minibatch standard deviation (e) improves the average SWD scores and images. We
then enable our remaining contributions in (f) and (g), leading to an overall improvement in SWD

6

Published as a conference paper at ICLR 2018

(a)

(b)

(c)

Figure 4: Effect of progressive growing on training speed and convergence. The timings were
measured on a single-GPU setup using NVIDIA Tesla P100. (a) Statistical similarity with respect
to wall clock time for Gulrajani et al. (2017) using CELEBA at 128 × 128 resolution. Each graph
represents sliced Wasserstein distance on one level of the Laplacian pyramid, and the vertical line
indicates the point where we stop the training in Table 1. (b) Same graph with progressive growing
enabled. The dashed vertical lines indicate points where we double the resolution of G and D. (c)
Effect of progressive growing on the raw training speed in 1024 × 1024 resolution.

and subjective visual quality. Finally, in (h) we use a non-crippled network and longer training – we
feel the quality of the generated images is at least comparable to the best published results so far.

6.2 CONVERGENCE AND TRAINING SPEED

Figure 4 illustrates the effect of progressive growing in terms of the SWD metric and raw image
throughput. The ﬁrst two plots correspond to the training conﬁguration of Gulrajani et al. (2017)
without and with progressive growing. We observe that the progressive variant offers two main ben-
eﬁts: it converges to a considerably better optimum and also reduces the total training time by about
a factor of two. The improved convergence is explained by an implicit form of curriculum learn-
ing that is imposed by the gradually increasing network capacity. Without progressive growing, all
layers of the generator and discriminator are tasked with simultaneously ﬁnding succinct interme-
diate representations for both the large-scale variation and the small-scale detail. With progressive
growing, however, the existing low-resolution layers are likely to have already converged early on,
so the networks are only tasked with reﬁning the representations by increasingly smaller-scale ef-
fects as new layers are introduced. Indeed, we see in Figure 4(b) that the largest-scale statistical
similarity curve (16) reaches its optimal value very quickly and remains consistent throughout the
rest of the training. The smaller-scale curves (32, 64, 128) level off one by one as the resolution is
increased, but the convergence of each curve is equally consistent. With non-progressive training in
Figure 4(a), each scale of the SWD metric converges roughly in unison, as could be expected.

The speedup from progressive growing increases as the output resolution grows. Figure 4(c) shows
training progress, measured in number of real images shown to the discriminator, as a function of
training time when the training progresses all the way to 10242 resolution. We see that progressive
growing gains a signiﬁcant head start because the networks are shallow and quick to evaluate at
the beginning. Once the full resolution is reached, the image throughput is equal between the two
methods. The plot shows that the progressive variant reaches approximately 6.4 million images in
96 hours, whereas it can be extrapolated that the non-progressive variant would take about 520 hours
to reach the same point. In this case, the progressive growing offers roughly a 5.4× speedup.

6.3 HIGH-RESOLUTION IMAGE GENERATION USING CELEBA-HQ DATASET

To meaningfully demonstrate our results at high output resolutions, we need a sufﬁciently varied
high-quality dataset. However, virtually all publicly available datasets previously used in GAN
literature are limited to relatively low resolutions ranging from 322 to 4802. To this end, we created
a high-quality version of the CELEBA dataset consisting of 30000 of the images at 1024 × 1024
resolution. We refer to Appendix C for further details about the generation of this dataset.

7

Published as a conference paper at ICLR 2018

Figure 5: 1024 × 1024 images generated using the CELEBA-HQ dataset. See Appendix F for a
larger set of results, and the accompanying video for latent space interpolations.

Mao et al. (2016b) (128 × 128) Gulrajani et al. (2017) (128 × 128)

Our (256 × 256)

Figure 6: Visual quality comparison in LSUN BEDROOM; pictures copied from the cited articles.

Our contributions allow us to deal with high output resolutions in a robust and efﬁcient fashion.
Figure 5 shows selected 1024 × 1024 images produced by our network. While megapixel GAN
results have been shown before in another dataset (Marchesi, 2017), our results are vastly more
varied and of higher perceptual quality. Please refer to Appendix F for a larger set of result images
as well as the nearest neighbors found from the training data. The accompanying video shows latent
space interpolations and visualizes the progressive training. The interpolation works so that we ﬁrst
randomize a latent code for each frame (512 components sampled individually from N (0, 1)), then
blur the latents across time with a Gaussian (σ = 45 frames @ 60Hz), and ﬁnally normalize each
vector to lie on a hypersphere.

We trained the network on 8 Tesla V100 GPUs for 4 days, after which we no longer observed
qualitative differences between the results of consecutive training iterations. Our implementation
used an adaptive minibatch size depending on the current output resolution so that the available
memory budget was optimally utilized.

In order to demonstrate that our contributions are largely orthogonal to the choice of a loss function,
we also trained the same network using LSGAN loss instead of WGAN-GP loss. Figure 1 shows six
examples of 10242 images produced using our method using LSGAN. Further details of this setup
are given in Appendix B.

8

Published as a conference paper at ICLR 2018

POTTEDPLANT

HORSE

SOFA

BUS

CHURCHOUTDOOR

BICYCLE

TVMONITOR

Figure 7: Selection of 256 × 256 images generated from different LSUN categories.

6.4 LSUN RESULTS

Figure 6 shows a purely visual comparison between our solution and earlier results in LSUN BED-
ROOM. Figure 7 gives selected examples from seven very different LSUN categories at 2562. A
larger, non-curated set of results from all 30 LSUN categories is available in Appendix G, and the
video demonstrates interpolations. We are not aware of earlier results in most of these categories,
and while some categories work better than others, we feel that the overall quality is high.

6.5 CIFAR10 INCEPTION SCORES

The best inception scores for CIFAR10 (10 categories of 32 × 32 RGB images) we are aware of
are 7.90 for unsupervised and 8.87 for label conditioned setups (Grinblat et al., 2017). The large
difference between the two numbers is primarily caused by “ghosts” that necessarily appear between
classes in the unsupervised setting, while label conditioning can remove many such transitions.

When all of our contributions are enabled, we get 8.80 in the unsupervised setting. Appendix D
shows a representative set of generated images along with a more comprehensive list of results
from earlier methods. The network and training setup were the same as for CELEBA, progres-
sion limited to 32 × 32 of course. The only customization was to the WGAN-GP’s regularization
term Eˆx∼Pˆx[(||∇ˆxD(ˆx)||2 − γ)2/γ2]. Gulrajani et al. (2017) used γ = 1.0, which corresponds to
1-Lipschitz, but we noticed that it is in fact signiﬁcantly better to prefer fast transitions (γ = 750) to
minimize the ghosts. We have not tried this trick with other datasets.

7 DISCUSSION

While the quality of our results is generally high compared to earlier work on GANs, and the training
is stable in large resolutions, there is a long way to true photorealism. Semantic sensibility and un-
derstanding dataset-dependent constraints, such as certain objects being straight rather than curved,
leaves a lot to be desired. There is also room for improvement in the micro-structure of the images.
That said, we feel that convincing realism may now be within reach, especially in CELEBA-HQ.

9

Published as a conference paper at ICLR 2018

8 ACKNOWLEDGEMENTS

We would like to thank Mikael Honkavaara, Tero Kuosmanen, and Timi Hietanen for the compute
infrastructure. Dmitry Korobchenko and Richard Calderwood for efforts related to the CELEBA-HQ
dataset. Oskar Elek, Jacob Munkberg, and Jon Hasselgren for useful comments.

REFERENCES

networks. In ICLR, 2017.

2017.

abs/1706.08224, 2017.

abs/1607.06450, 2016.

Martin Arjovsky and L´eon Bottou. Towards principled methods for training generative adversarial

Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein GAN. CoRR, abs/1701.07875,

Sanjeev Arora and Yi Zhang. Do GANs actually learn the distribution? an empirical study. CoRR,

Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton. Layer normalization. CoRR,

Yoshua Bengio, Pascal Lamblin, Dan Popovici, and Hugo Larochelle. Greedy layer-wise training of
deep networks. In P. B. Sch¨olkopf, J. C. Platt, and T. Hoffman (eds.), NIPS, pp. 153–160. 2007.

David Berthelot, Tom Schumm, and Luke Metz. BEGAN: Boundary equilibrium generative adver-

sarial networks. CoRR, abs/1703.10717, 2017.

Peter J. Burt and Edward H. Adelson. Readings in computer vision: Issues, problems, principles,
and paradigms. chapter The Laplacian Pyramid As a Compact Image Code, pp. 671–679. 1987.

Qifeng Chen and Vladlen Koltun. Photographic image synthesis with cascaded reﬁnement networks.

CoRR, abs/1707.09405, 2017.

Zihang Dai, Amjad Almahairi, Philip Bachman, Eduard H. Hovy, and Aaron C. Courville. Calibrat-

ing energy-based generative adversarial networks. In ICLR, 2017.

Emily L. Denton, Soumith Chintala, Arthur Szlam, and Robert Fergus. Deep generative image

models using a Laplacian pyramid of adversarial networks. CoRR, abs/1506.05751, 2015.

Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier Mastropi-

etro, and Aaron Courville. Adversarially learned inference. CoRR, abs/1606.00704, 2016.

Ishan P. Durugkar, Ian Gemp, and Sridhar Mahadevan. Generative multi-adversarial networks.

CoRR, abs/1611.01673, 2016.

Bernd Fritzke. A growing neural gas network learns topologies. In G. Tesauro, D. S. Touretzky, and
T. K. Leen (eds.), Advances in Neural Information Processing Systems 7, pp. 625–632. 1995.

Arnab Ghosh, Viveka Kulharia, Vinay P. Namboodiri, Philip H. S. Torr, and Puneet Kumar Dokania.

Multi-agent diverse generative adversarial networks. CoRR, abs/1704.02906, 2017.

Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,

Aaron Courville, and Yoshua Bengio. Generative Adversarial Networks. In NIPS, 2014.

Guillermo L. Grinblat, Lucas C. Uzal, and Pablo M. Granitto. Class-splitting generative adversarial

networks. CoRR, abs/1709.07359, 2017.

Ishaan Gulrajani, Faruk Ahmed, Mart´ın Arjovsky, Vincent Dumoulin, and Aaron C. Courville. Im-

proved training of Wasserstein GANs. CoRR, abs/1704.00028, 2017.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Delving deep into rectiﬁers: Surpassing

human-level performance on imagenet classiﬁcation. CoRR, abs/1502.01852, 2015.

Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
GANs trained by a two time-scale update rule converge to a local Nash equilibrium. In NIPS, pp.
6626–6637. 2017.

10

Published as a conference paper at ICLR 2018

R Devon Hjelm, Athul Paul Jacob, Tong Che, Kyunghyun Cho, and Yoshua Bengio. Boundary-

Seeking Generative Adversarial Networks. CoRR, abs/1702.08431, 2017.

Xun Huang, Yixuan Li, Omid Poursaeed, John E. Hopcroft, and Serge J. Belongie. Stacked genera-

tive adversarial networks. CoRR, abs/1612.04357, 2016.

Satoshi Iizuka, Edgar Simo-Serra, and Hiroshi Ishikawa. Globally and locally consistent image

completion. ACM Trans. Graph., 36(4):107:1–107:14, 2017.

Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by

reducing internal covariate shift. CoRR, abs/1502.03167, 2015.

Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.

Diederik P. Kingma and Max Welling. Auto-encoding variational bayes. In ICLR, 2014.

Diederik P Kingma, Tim Salimans, Rafal Jozefowicz, Xi Chen, Ilya Sutskever, and Max Welling.
Improved variational inference with inverse autoregressive ﬂow. In NIPS, volume 29, pp. 4743–
4751. 2016.

Naveen Kodali, Jacob D. Abernethy, James Hays, and Zsolt Kira. How to train your DRAGAN.

CoRR, abs/1705.07215, 2017.

Dmitry Korobchenko and Marco Foco. Single image super-resolution using deep learning, 2017.
URL https://gwmt.nvidia.com/super-res/about. Machines Can See summit.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classiﬁcation with deep convo-

lutional neural networks. In NIPS, pp. 1097–1105. 2012.

Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew P. Aitken, Alykhan Tejani,
Johannes Totz, Zehan Wang, and Wenzhe Shi. Photo-realistic single image super-resolution using
a generative adversarial network. CoRR, abs/1609.04802, 2016.

Zinan Lin, Ashish Khetan, Giulia Fanti, and Sewoong Oh. PacGAN: The power of two samples in

generative adversarial networks. CoRR, abs/1712.04086, 2017.

Ming-Yu Liu, Thomas Breuel, and Jan Kautz. Unsupervised image-to-image translation networks.

CoRR, abs/1703.00848, 2017.

In ICCV, 2015.

Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang. Deep learning face attributes in the wild.

Alireza Makhzani and Brendan J. Frey. PixelGAN autoencoders. CoRR, abs/1706.00531, 2017.

Xiao-Jiao Mao, Chunhua Shen, and Yu-Bin Yang.

Image restoration using convolutional auto-

encoders with symmetric skip connections. CoRR, abs/1606.08921, 2016a.

Xudong Mao, Qing Li, Haoran Xie, Raymond Y. K. Lau, and Zhen Wang. Least squares generative

adversarial networks. CoRR, abs/1611.04076, 2016b.

Marco Marchesi. Megapixel size image creation using generative adversarial networks. CoRR,

abs/1706.00082, 2017.

Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial

networks. CoRR, abs/1611.02163, 2016.

Augustus Odena, Christopher Olah, and Jonathon Shlens. Conditional image synthesis with auxil-

iary classiﬁer GANs. In ICML, 2017.

Julien Rabin, Gabriel Peyr, Julie Delon, and Marc Bernot. Wasserstein barycenter and its application
to texture mixing. In Scale Space and Variational Methods in Computer Vision (SSVM), pp. 435–
446, 2011.

Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep

convolutional generative adversarial networks. CoRR, abs/1511.06434, 2015.

11

Published as a conference paper at ICLR 2018

Tim Salimans and Diederik P. Kingma. Weight normalization: A simple reparameterization to

accelerate training of deep neural networks. CoRR, abs/1602.07868, 2016.

Tim Salimans, Ian J. Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen.

Improved techniques for training GANs. In NIPS, 2016.

Kenneth O. Stanley and Risto Miikkulainen. Evolving neural networks through augmenting topolo-

gies. Evolutionary Computation, 10(2):99–127, 2002.

Tijmen Tieleman and Geoffrey E. Hinton. Lecture 6.5 - RMSProp. Technical report, COURSERA:

Neural Networks for Machine Learning, 2012.

Dmitry Ulyanov, Andrea Vedaldi, and Victor S. Lempitsky. Adversarial generator-encoder networks.

CoRR, abs/1704.02304, 2017.

A¨aron van den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex Graves,
Nal Kalchbrenner, Andrew W. Senior, and Koray Kavukcuoglu. WaveNet: A generative model
for raw audio. CoRR, abs/1609.03499, 2016a.

A¨aron van den Oord, Nal Kalchbrenner, and Koray Kavukcuoglu. Pixel recurrent neural networks.

In ICML, pp. 1747–1756, 2016b.

A¨aron van den Oord, Nal Kalchbrenner, Oriol Vinyals, Lasse Espeholt, Alex Graves, and Koray
Kavukcuoglu. Conditional image generation with PixelCNN decoders. CoRR, abs/1606.05328,
2016c.

Twan van Laarhoven.

L2 regularization versus batch and weight normalization.

CoRR,

abs/1706.05350, 2017.

Ting-Chun Wang, Ming-Yu Liu, Jun-Yan Zhu, Andrew Tao, Jan Kautz, and Bryan Catanzaro.
High-resolution image synthesis and semantic manipulation with conditional GANs. CoRR,
abs/1711.11585, 2017.

Zhou Wang, Eero P. Simoncelli, and Alan C. Bovik. Multi-scale structural similarity for image
In Proc. IEEE Asilomar Conf. on Signals, Systems, and Computers, pp.

quality assessment.
1398–1402, 2003.

David Warde-Farley and Yoshua Bengio. Improving generative adversarial networks with denoising

feature matching. In ICLR, 2017.

Jianwei Yang, Anitha Kannan, Dhruv Batra, and Devi Parikh. LR-GAN: layered recursive generative

adversarial networks for image generation. In ICLR, 2017.

Fisher Yu, Yinda Zhang, Shuran Song, Ari Seff, and Jianxiong Xiao. LSUN: Construction of a
large-scale image dataset using deep learning with humans in the loop. CoRR, abs/1506.03365,
2015.

Han Zhang, Tao Xu, Hongsheng Li, Shaoting Zhang, Xiaolei Huang, Xiaogang Wang, and Dim-
itris N. Metaxas. StackGAN: text to photo-realistic image synthesis with stacked generative ad-
versarial networks. In ICCV, 2017.

Junbo Jake Zhao, Micha¨el Mathieu, and Yann LeCun. Energy-based generative adversarial network.

In ICLR, 2017.

Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A. Efros. Unpaired image-to-image translation

using cycle-consistent adversarial networks. CoRR, abs/1703.10593, 2017.

12

Published as a conference paper at ICLR 2018

Generator
Latent vector
Conv 4 × 4
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Upsample
Conv 3 × 3
Conv 3 × 3
Conv 1 × 1
Total trainable parameters

Act.
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
linear

Output shape
512 × 1 × 1
512 × 4 × 4
512 × 4 × 4
512 × 8 × 8
512 × 8 × 8
512 × 8 × 8
512 × 16 × 16
512 × 16 × 16
512 × 16 × 16
512 × 32 × 32
512 × 32 × 32
512 × 32 × 32
512 × 64 × 64
256 × 64 × 64
256 × 64 × 64
256 × 128 × 128
128 × 128 × 128
128 × 128 × 128
128 × 256 × 256
64 × 256 × 256
64 × 256 × 256
64 × 512 × 512
32 × 512 × 512
32 × 512 × 512
32 × 1024 × 1024
16 × 1024 × 1024
16 × 1024 × 1024
3 × 1024 × 1024

Params
–
4.2M
2.4M
–
2.4M
2.4M
–
2.4M
2.4M
–
2.4M
2.4M
–
1.2M
590k
–
295k
148k
–
74k
37k
–
18k
9.2k
–
4.6k
2.3k
51
23.1M

Discriminator
Input image
Conv 1 × 1
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Conv 3 × 3
Conv 3 × 3
Downsample
Minibatch stddev
Conv 3 × 3
Conv 4 × 4
Fully-connected
Total trainable parameters

Act.
–
LReLU
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
LReLU
LReLU
–
–
LReLU
LReLU
linear

Output shape
3 × 1024 × 1024
16 × 1024 × 1024
16 × 1024 × 1024
32 × 1024 × 1024
32 × 512 × 512
32 × 512 × 512
64 × 512 × 512
64 × 256 × 256
64 × 256 × 256
128 × 256 × 256
128 × 128 × 128
128 × 128 × 128
256 × 128 × 128
256 × 64 × 64
256 × 64 × 64
512 × 64 × 64
512 × 32 × 32
512 × 32 × 32
512 × 32 × 32
512 × 16 × 16
512 × 16 × 16
512 × 16 × 16
512 × 8 × 8
512 × 8 × 8
512 × 8 × 8
512 × 4 × 4
513 × 4 × 4
512 × 4 × 4
512 × 1 × 1
1 × 1 × 1

Params
–
64
2.3k
4.6k
–
9.2k
18k
–
37k
74k
–
148k
295k
–
590k
1.2M
–
2.4M
2.4M
–
2.4M
2.4M
–
2.4M
2.4M
–
–
2.4M
4.2M
513
23.1M

Table 2: Generator and discriminator that we use with CELEBA-HQ to generate 1024×1024 images.

A NETWORK STRUCTURE AND TRAINING CONFIGURATION

A.1

1024 × 1024 NETWORKS USED FOR CELEBA-HQ

Table 2 shows network architectures of the full-resolution generator and discriminator that we use
with the CELEBA-HQ dataset. Both networks consist mainly of replicated 3-layer blocks that we
introduce one by one during the course of the training. The last Conv 1 × 1 layer of the generator
corresponds to the toRGB block in Figure 2, and the ﬁrst Conv 1 × 1 layer of the discriminator
similarly corresponds to fromRGB. We start with 4 × 4 resolution and train the networks until we
have shown the discriminator 800k real images in total. We then alternate between two phases: fade
in the ﬁrst 3-layer block during the next 800k images, stabilize the networks for 800k images, fade
in the next 3-layer block during 800k images, etc.

Our latent vectors correspond to random points on a 512-dimensional hypersphere, and we represent
training and generated images in [-1,1]. We use leaky ReLU with leakiness 0.2 in all layers of both
networks, except for the last layer that uses linear activation. We do not employ batch normalization,
layer normalization, or weight normalization in either network, but we perform pixelwise normal-
ization of the feature vectors after each Conv 3 × 3 layer in the generator as described in Section 4.2.
We initialize all bias parameters to zero and all weights according to the normal distribution with
unit variance. However, we scale the weights with a layer-speciﬁc constant at runtime as described
in Section 4.1. We inject the across-minibatch standard deviation as an additional feature map at
4 × 4 resolution toward the end of the discriminator as described in Section 3. The upsampling and
downsampling operations in Table 2 correspond to 2 × 2 element replication and average pooling,
respectively.

We train the networks using Adam (Kingma & Ba, 2015) with α = 0.001, β1 = 0, β2 = 0.99,
and (cid:15) = 10−8. We do not use any learning rate decay or rampdown, but for visualizing generator
output at any given point during the training, we use an exponential running average for the weights
of the generator with decay 0.999. We use a minibatch size 16 for resolutions 42–1282 and then
gradually decrease the size according to 2562 → 14, 5122 → 6, and 10242 → 3 to avoid exceeding
the available memory budget. We use the WGAN-GP loss, but unlike Gulrajani et al. (2017), we
alternate between optimizing the generator and discriminator on a per-minibatch basis, i.e., we set
ncritic = 1. Additionally, we introduce a fourth term into the discriminator loss with an extremely

13

Published as a conference paper at ICLR 2018

small weight to keep the discriminator output from drifting too far away from zero. To be precise,
we set L(cid:48) = L + (cid:15)driftEx∈Pr [D(x)2], where (cid:15)drift = 0.001.

A.2 OTHER NETWORKS

Whenever we need to operate on a spatial resolution lower than 1024 × 1024, we do that by leaving
out an appropriate number copies of the replicated 3-layer block in both networks.

Furthermore, Section 6.1 uses a slightly lower-capacity version, where we halve the number of
feature maps in Conv 3 × 3 layers at the 16 × 16 resolution, and divide by 4 in the subsequent
resolutions. This leaves 32 feature maps to the last Conv 3 × 3 layers. In Table 1 and Figure 4 we
train each resolution for a total 600k images instead of 800k, and also fade in new layers for the
duration of 600k images.

For the “Gulrajani et al. (2017)” case in Table 1, we follow their training conﬁguration as closely as
possible. In particular, we set α = 0.0001, β2 = 0.9, ncritic = 5, (cid:15)drift = 0, and minibatch size
64. We disable progressive resolution, minibatch stddev, as well as weight scaling at runtime, and
initialize all weights using He’s initializer (He et al., 2015). Furthermore, we modify the generator
by replacing LReLU with ReLU, linear activation with tanh in the last layer, and pixelwise normal-
ization with batch normalization. In the discriminator, we add layer normalization to all Conv 3 × 3
and Conv 4 × 4 layers. For the latent vectors, we use 128 components sampled independently from
the normal distribution.

B LEAST-SQUARES GAN (LSGAN) AT 1024 × 1024

We ﬁnd that LSGAN is generally a less stable loss function than WGAN-GP, and it also has a
tendency to lose some of the variation towards the end of long runs. Thus we prefer WGAN-GP, but
have also produced high-resolution images by building on top of LSGAN. For example, the 10242
images in Figure 1 are LSGAN-based.

On top of the techniques described in Sections 2–4, we need one additional hack with LSGAN that
prevents the training from spiraling out of control when the dataset is too easy for the discrimina-
tor, and the discriminator gradients are at risk of becoming meaningless as a result. We adaptively
increase the magnitude of multiplicative Gaussian noise in discriminator as a function of the dis-
criminator’s output. The noise is applied to the input of each Conv 3 × 3 and Conv 4 × 4 layer.
There is a long history of adding noise to the discriminator, and it is generally detrimental for the
image quality (Arjovsky et al., 2017) and ideally one would never have to do that, which according
to our tests is the case for WGAN-GP (Gulrajani et al., 2017). The magnitude of noise is determined
as 0.2 · max(0, ˆdt − 0.5)2, where ˆdt = 0.1d + 0.9 ˆdt−1 is an exponential moving average of the
discriminator output d. The motivation behind this hack is that LSGAN is seriously unstable when
d approaches (or exceeds) 1.0.

C CELEBA-HQ DATASET

In this section we describe the process we used to create the high-quality version of the CELEBA
dataset, consisting of 30000 images in 1024 × 1024 resolution. As a starting point, we took the
collection of in-the-wild images included as a part of the original CELEBA dataset. These images
are extremely varied in terms of resolution and visual quality, ranging all the way from 43 × 55 to
6732 × 8984. Some of them show crowds of several people whereas others focus on the face of a
single person – often only a part of the face. Thus, we found it necessary to apply several image
processing steps to ensure consistent quality and to center the images on the facial region.

Our processing pipeline is illustrated in Figure 8. To improve the overall image quality, we pre-
process each JPEG image using two pre-trained neural networks: a convolutional autoencoder
trained to remove JPEG artifacts in natural images, similar in structure to the proposed by Mao et al.
(2016a), and an adversarially-trained 4x super-resolution network (Korobchenko & Foco, 2017)
similar to Ledig et al. (2016). To handle cases where the facial region extends outside the image,
we employ padding and ﬁltering to extend the dimensions of the image as illustrated in Fig.8(c–d).
We then select an oriented crop rectangle based on the facial landmark annotations included in the

14

Published as a conference paper at ICLR 2018

(a)

(b)

(c)

(d)

(e)

(f)

Figure 8: Creating the CELEBA-HQ dataset. We start with a JPEG image (a) from the CelebA in-
the-wild dataset. We improve the visual quality (b,top) through JPEG artifact removal (b,middle) and
4x super-resolution (b,bottom). We then extend the image through mirror padding (c) and Gaussian
ﬁltering (d) to produce a visually pleasing depth-of-ﬁeld effect. Finally, we use the facial landmark
locations to select an appropriate crop region (e) and perform high-quality resampling to obtain the
ﬁnal image at 1024 × 1024 resolution (f).

original CELEBA dataset as follows:

x(cid:48) = e1 − e0
y(cid:48) =

(e0 + e1) −

(m0 + m1)

1
2

c =

(e0 + e1) − 0.1 · y(cid:48)

1
2
1
2

s = max (4.0 · |x(cid:48)|, 3.6 · |y(cid:48)|)
x = Normalize (x(cid:48) − Rotate90(y(cid:48)))
y = Rotate90(x)

e0, e1, m0, and m1 represent the 2D pixel locations of the two eye landmarks and two mouth
landmarks, respectively, c and s indicate the center and size of the desired crop rectangle, and x
and y indicate its orientation. We constructed the above formulas empirically to ensure that the
crop rectangle stays consistent in cases where the face is viewed from different angles. Once we
have calculated the crop rectangle, we transform the rectangle to 4096 × 4096 pixels using bilinear
ﬁltering, and then scale it to 1024 × 1024 resolution using a box ﬁlter.

We perform the above processing for all 202599 images in the dataset, analyze the resulting 1024 ×
1024 images further to estimate the ﬁnal image quality, sort the images accordingly, and discard
all but the best 30000 images. We use a frequency-based quality metric that favors images whose
power spectrum contains a broad range of frequencies and is approximately radially symmetric.
This penalizes blurry images as well as images that have conspicuous directional features due to,
e.g., visible halftoning patterns. We selected the cutoff point of 30000 images as a practical sweet
spot between variation and image quality, because it appeared to yield the best results.

D CIFAR10 RESULTS

Figure 9 shows non-curated images generated in the unsupervised setting, and Table 3 compares
against prior art in terms of inception scores. We report our scores in two different ways: 1) the
highest score observed during training runs (here ± refers to the standard deviation returned by the
inception score calculator) and 2) the mean and standard deviation computed from the highest scores
seen during training, starting from ten random initializations. Arguably the latter methodology is
much more meaningful as one can be lucky with individual runs (as we were). We did not use any
kind of augmentation with this dataset.

E MNIST-1K DISCRETE MODE TEST WITH CRIPPLED DISCRIMINATOR

Metz et al. (2016) describe a setup where a generator synthesizes MNIST digits simultaneously to
3 color channels, the digits are classiﬁed using a pre-trained classiﬁer (0.4% error rate in our case),
and concatenated to form a number in [0, 999]. They generate a total of 25,600 images and count

15

Published as a conference paper at ICLR 2018

Figure 9: CIFAR10 images generated using a network that was trained unsupervised (no label con-
ditioning), and achieves a record 8.80 inception score.

UNSUPERVISED

(Dumoulin et al., 2016)

Inception score
Method
5.34 ± 0.05
ALI
6.00 ± 0.19
GMAN
(Durugkar et al., 2016)
6.86 ± 0.06
Improved GAN (Salimans et al., 2016)
7.07 ± 0.07
CEGAN-Ent-VI (Dai et al., 2017)
7.17 ± 0.17
LR-AGN
(Yang et al., 2017)
(Warde-Farley & Bengio, 2017) 7.72 ± 0.13
DFM
7.86 ± 0.07
WGAN-GP
(Gulrajani et al., 2017)
7.90 ± 0.09
Splitting GAN (Grinblat et al., 2017)
8.80 ± 0.05
Our (best run)
8.56 ± 0.06
Our (computed from 10 runs)

LABEL CONDITIONED

Inception score
6.58

Method
DCGAN
(Radford et al., 2015)
Improved GAN (Salimans et al., 2016) 8.09 ± 0.07
8.25 ± 0.07
AC-GAN
(Odena et al., 2017)
8.59 ± 0.12
SGAN
(Huang et al., 2016)
(Gulrajani et al., 2017) 8.67 ± 0.14
WGAN-GP
8.87 ± 0.09
Splitting GAN (Grinblat et al., 2017)

Table 3: CIFAR10 inception scores, higher is better.

how many of the discrete modes are covered. They also compute KL divergence as KL(histogram ||
uniform). Modern GAN implementations can trivially cover all modes at very low divergence (0.05
in our case), and thus Metz et al. specify a fairly low-capacity generator and two severely crippled
discriminators (“K/2” has ∼ 2000 params and “K/4” only about ∼ 500) to tease out differences
between training methodologies. Both of these networks use batch normalization.

As shown in Table 4, using WGAN-GP loss with the networks speciﬁed by Metz et al. covers much
more modes than the original GAN loss, and even more than the unrolled original GAN with the
smaller (K/4) discriminator. The KL divergence, which is arguably a more accurate metric than the
raw count, acts even more favorably.

Replacing batch normalization with our normalization (equalized learning rate, pixelwise normal-
ization) improves the result considerably, while also removing a few trainable parameters from the
discriminators. The addition of a minibatch stddev layer further improves the scores, while restoring
the discriminator capacity to within 0.5% of the original. Progression does not help much with these
tiny images, but it does not hurt either.

16

Published as a conference paper at ICLR 2018

Arch

K/4

K/2

#
KL
#
KL

GAN
30.6 ± 20.7
5.99 ± 0.04
628.0 ± 140.9
2.58 ± 0.75

+ unrolling
372.2 ± 20.7
4.66 ± 0.46
817.4 ± 39.9
1.43 ± 0.12

WGAN-GP
640.1 ± 136.3
1.97 ± 0.70
772.4 ± 146.5
1.35 ± 0.55

+ our norm
856.7 ± 50.4
1.10±0.19
886.6 ± 58.5
0.98 ± 0.33

+ mb stddev
881.3 ± 39.2
1.09 ± 0.16
918.3 ± 30.2
0.89 ± 0.21

+ progression
859.5 ± 36.2
1.05 ± 0.09
919.8 ± 35.1
0.82 ± 0.13

Table 4: Results for MNIST discrete mode test using two tiny discriminators (K/4, K/2) deﬁned by
Metz et al. (2016). The number of covered modes (#) and KL divergence from a uniform distribution
are given as an average ± standard deviation over 8 random initializations. Higher is better for the
number of modes, and lower is better for KL divergence.

F ADDITIONAL CELEBA-HQ RESULTS

Figure 10 shows the nearest neighbors found for our generated images. Figure 11 gives addi-
tional generated examples from CELEBA-HQ. We enabled mirror augmentation for all tests using
CELEBA and CELEBA-HQ. In addition to the sliced Wasserstein distance (SWD), we also quote
the recently introduced Fr´echet Inception Distance (FID) (Heusel et al., 2017) computed from 50K
images.

G LSUN RESULTS

Figures 12–17 show representative images generated for all 30 LSUN categories. A separate net-
work was trained for each category using identical parameters. All categories were trained using
100k images, except for BEDROOM and DOG that used all the available data. Since 100k images is
a very limited amount of training data for most categories, we enabled mirror augmentation in these
tests (but not for BEDROOM or DOG).

H ADDITIONAL IMAGES FOR TABLE 1

Figure 18 shows larger collections of images corresponding to the non-converged setups in Table 1.
The training time was intentionally limited to make the differences between various methods more
visible.

17

Published as a conference paper at ICLR 2018

Figure 10: Top: Our CELEBA-HQ results. Next ﬁve rows: Nearest neighbors found from the train-
ing data, based on feature-space distance. We used activations from ﬁve VGG layers, as suggested
by Chen & Koltun (2017). Only the crop highlighted in bottom right image was used for comparison
in order to exclude image background and focus the search on matching facial features.

18

Published as a conference paper at ICLR 2018

Figure 11: Additional 1024×1024 images generated using the CELEBA-HQ dataset. Sliced Wasser-
stein Distance (SWD) ×103 for levels 1024, . . . , 16: 7.48, 7.24, 6.08, 3.51, 3.55, 3.02, 7.22, for
which the average is 5.44. Fr´echet Inception Distance (FID) computed from 50K images was 7.30.
See the video for latent space interpolations.

19

Published as a conference paper at ICLR 2018

E
N
A
L
P
R

I

A

7
9
.
3
1
D
I
F

M
O
O
R
D
E
B

4
3
.
8
D
I
F

E
L
C
Y
C

I

B

.

2
1
6
1
D
I
F

D
R

I

B

.

1
9
9
2
D
I
F

T
A
O
B

5
8
.
0
1
D
I
F

9
2
.
4
,
4
5
.
7

,
8
0
.
3
,
0
5
.
3

,
7
2
.
3

,
5
0
.
4
D
W
S

0
9
.
3
,
8
0
.
9

,
0
9
.
2
,
4
3
.
2

,
5
4
2

.

,

.

2
7
2
D
W
S

0
9
4

.

,

0
2
0
1

.

,

7
2
3

.

,

5
2
2

.

,

3
3
3

.

,

.

5
4
5
D
W
S

8
2
4

.

,

6
8
8

.

,

6
5
2

.

,

5
6
2

.

,

2
7
2

.

,

.

8
5
4
D
W
S

2
9
.
3
,
4
9
.
4
,
7
6
.
2

,
3
8
.
2
,
1
4
.
3
,
5
7
.
5
D
W
S

Figure 12: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

20

Published as a conference paper at ICLR 2018

E
L
T
T
O
B

8
6
.
2
2
D
I
F

E
G
D

I

R
B

4
1
.
1
1
D
I
F

S
U
B

.

9
9
6
D
I
F

R
A
C

.

6
3
8
D
I
F

T
A
C

2
5
.
7
3
D
I
F

3
9
.
3
,
6
0
.
6

,
3
2
.
3
,
1
9
.
2

,
7
1
.
3

,
0
3
.
4
D
W
S

0
4
.
4
,
1
7
.
7

,
5
5
.
2
,
1
3
.
3
,
4
0
4

.

,

.

9
3
4
D
W
S

7
4
4

.

,

9
8
7

.

,

8
4
3

.

,

2
5
2

.

,

0
9
2

.

,

.

9
5
5
D
W
S

0
5
3

.

,

9
3
6

.

,

9
2
2

.

,

7
1
2

.

,

6
2
2

.

,

.

9
3
4
D
W
S

6
7
.
8
,
6
8
.
7
,
2
1
.
5

,
7
4
.
7
,
4
1
.
1
1

,
9
1
.
2
1
D
W
S

Figure 13: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

21

Published as a conference paper at ICLR 2018

R

I

A
H
C

5
5
.
9
1
D
I
F

R
O
O
D
T
U
O
H
C
R
U
H
C

2
4
.
6
D
I
F

M
O
O
R
S
S
A
L
C

.

6
3
0
2
D
I
F

M
O
O
R
E
C
N
E
R
E
F
N
O
C

.

1
3
8
D
I
F

W
O
C

6
2
.
7
1
D
I
F

5
4
.
5

,
3
4
.
1
1

,
7
6
.
3

,
2
5
.
3
,
0
7
.
3

,
3
9
.
4
D
W
S

5
7
.
3
,
5
5
.
5

,
6
6
.
2
,
8
0
.
3

,
3
6
3

.

,

.

1
8
3
D
W
S

2
0
4

.

,

3
8
6

.

,

1
0
3

.

,

3
7
2

.

,

2
4
3

.

,

.

1
1
4
D
W
S

0
7
4

.

,

1
9
9

.

,

3
6
2

.

,

5
1
3

.

,

0
1
4

.

,

.

8
6
3
D
W
S

7
8
.
3
,
5
7
.
6
,
4
2
.
2

,
1
1
.
2
,
9
6
.
2
,
7
5
.
5
D
W
S

Figure 14: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

22

Published as a conference paper at ICLR 2018

M
O
O
R
G
N

I

N

I

D

0
4
.
6
D
I
F

E
L
B
A
T
G
N

I

N

I

D

8
2
.
0
1
D
I
F

G
O
D

.

3
6
7
4
D
I
F

E
S
R
O
H

.

1
1
6
1
D
I
F

N
E
H
C
T
I

K

5
4
.
7
D
I
F

2
5
.
3
,
2
3
.
6

,
3
1
.
3
,
3
7
.
2

,
4
9
.
2

,
7
4
.
2
D
W
S

2
2
.
3
,
2
8
.
6

,
3
0
.
2
,
4
3
.
2

,
1
5
2

.

,

.

1
4
2
D
W
S

3
8
5

.

,

3
8
8

.

,

2
3
2

.

,

6
0
3

.

,

6
3
5

.

,

.

6
5
9
D
W
S

8
5
3

.

,

4
9
6

.

,

3
0
2

.

,

0
0
2

.

,

5
1
2

.

,

.

8
7
4
D
W
S

8
8
.
3
,
1
3
.
6
,
2
7
.
2

,
5
9
.
2
,
4
5
.
3
,
9
8
.
3
D
W
S

Figure 15: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

23

Published as a conference paper at ICLR 2018

M
O
O
R
G
N

I

V

I
L

6
4
.
0
1
D
I
F

E
K

I

B
R
O
T
O
M

1
6
.
9
D
I
F

N
O
S
R
E
P

.

1
0
0
3
D
I
F

T
N
A
L
P
D
E
T
T
O
P

.

0
5
3
1
D
I
F

T
N
A
R
U
A
T
S
E
R

9
3
.
6
1
D
I
F

4
9
.
3
,
3
8
.
5

,
2
2
.
3
,
9
6
.
2

,
7
3
.
3

,
5
5
.
4
D
W
S

4
4
.
4

,
4
0
.
0
1

,
4
0
.
2

,
9
9
.
1
,
3
3
2

.

,

.

0
8
5
D
W
S

2
7
3

.

,

4
1
7

.

,

1
3
2

.

,

7
3
2

.

,

8
5
2

.

,

.

0
2
4
D
W
S

4
8
5

.

,

0
9
0
1

.

,

5
8
2

.

,

5
8
3

.

,

3
1
4

.

,

.

6
4
7
D
W
S

3
6
.
3
,
5
5
.
5
,
4
4
.
4

,
3
6
.
2
,
6
1
.
2
,
7
3
.
3
D
W
S

Figure 16: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

24

Published as a conference paper at ICLR 2018

5
7
.
3
,
8
0
.
6

,
5
9
.
2
,
0
1
.
2

,
7
1
.
2

,
5
4
.
5
D
W
S

4
1
.
4
,
6
9
.
8

,
9
3
.
2
,
8
0
.
3

,
7
3
3

.

,

.

8
8
2
D
W
S

9
1
4

.

,

9
7
6

.

,

7
6
2

.

,

9
4
3

.

,

2
2
4

.

,

.

0
8
3
D
W
S

2
6
4

.

,

3
1
8

.

,

5
6
3

.

,

8
9
2

.

,

8
0
3

.

,

.

6
2
5
D
W
S

3
1
.
5
,
7
3
.
9
,
0
0
.
3

,
5
7
.
3
,
3
5
.
4
,
2
0
.
5
D
W
S

P
E
E
H
S

8
1
.
8
1
D
I
F

A
F
O
S

9
5
.
8
D
I
F

R
E
W
O
T

.

9
2
0
1
D
I
F

N

I

A
R
T

.

0
9
8
D
I
F

R
O
T
I

N
O
M
V
T

7
4
.
2
2
D
I
F

Figure 17: Example images generated at 256 × 256 from LSUN categories. Sliced Wasserstein
Distance (SWD) ×103 is given for levels 256, 128, 64, 32 and 16, and the average is bolded. We
also quote the Fr´echet Inception Distance (FID) computed from 50K images.

25

Published as a conference paper at ICLR 2018

)
7
1
0
2
(

.
l
a

t
e

i
n
a
j
a
r
l
u
G

)
a
(

g
n
i
w
o
r
g

e
v
i
s
s
e
r
g
o
r
P
)
b
(

h
c
t
a
b
i
n
i
m

l
l
a
m
S
)
c
(

s
r
e
t
e
m
a
r
a
p
g
n
i
n
i
a
r
t
d
e
s
i
v
e
R

)
d
(

n
o
i
t
a
n
i
m

i
r
c
s
i
d
h
c
t
a
b
i
n
i
M

)
∗
e
(

v
e
d
d
t
s
h
c
t
a
b
i
n
i
M

)
e
(

e
t
a
r

g
n
i
n
r
a
e
l

d
e
z
i
l
a
u
q
E
)
f
(

n
o
i
t
a
z
i
l
a
m
r
o
n

e
s
i
w
l
e
x
i

P
)
g
(

Figure 18: A larger set of generated images corresponding to the non-converged setups in Table 1.

26

